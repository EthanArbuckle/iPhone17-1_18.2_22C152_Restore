int64x2_t sub_100005C48@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  int64x2_t result;

  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0x3FF0000000000000;
  *(double *)(a1 + 24) = a5;
  *(double *)(a1 + 32) = a6;
  *(double *)(a1 + 40) = a4;
  result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)(a1 + 48) = 0u;
  *(int64x2_t *)(a1 + 64) = result;
  return result;
}

BOOL sub_100005C74(double *a1)
{
  return vabdd_f64(*a1, a1[5]) <= a1[6] && fabs(a1[1]) <= a1[7];
}

int64x2_t sub_100005CA8@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>, double a6@<D4>)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  sub_100005FB4((double *)&v14, (double *)&v13, a5, a6);
  uint64_t v11 = v13;
  uint64_t v10 = v14;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0x3FF0000000000000;
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 32) = v11;
  *(double *)(a1 + 40) = a4;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)(a1 + 48) = 0u;
  *(int64x2_t *)(a1 + 64) = result;
  return result;
}

double sub_100005D30(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = 0;
  double v7 = 0.0;
  sub_100005FB4(&v7, (double *)&v6, a2, a3);
  uint64_t v5 = v6;
  double result = v7;
  *(double *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v5;
  return result;
}

void sub_100005D70(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v5 = *(double *)(a1 + 40);
  if (vabdd_f64(*(double *)a1, v5) <= *(double *)(a1 + 48))
  {
    double v6 = *(double *)(a1 + 8);
    if (fabs(v6) <= *(double *)(a1 + 56))
    {
      long long v26 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(a2 + 80) = v26;
      *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
      long long v27 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(_OWORD *)(a2 + 16) = v27;
      long long v28 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a2 + 48) = v28;
      return;
    }
  }
  else
  {
    double v6 = *(double *)(a1 + 8);
  }
  double v7 = *(double *)a1 - v5;
  long long v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v8;
  long long v9 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v9;
  double v10 = *(double *)(a1 + 24);
  double v11 = *(double *)(a1 + 32);
  double v32 = v10;
  double v33 = v5;
  double v31 = v11;
  if (v10 == *(double *)(a1 + 64) && v11 == *(double *)(a1 + 72))
  {
    double v12 = *(double *)(a1 + 80);
    double v13 = *(double *)(a1 + 88);
    double v15 = *(double *)(a1 + 96);
    double v34 = *(double *)(a1 + 104);
    double v14 = -v12;
  }
  else
  {
    double v12 = v11 * 0.5;
    double v13 = sqrt(v10);
    double v14 = -(v11 * 0.5);
    double v15 = sqrt(v13 * v13 - v12 * v12);
    double v34 = sqrt(v12 * v12 - v13 * v13);
  }
  double v16 = exp(v14 * a3);
  double v17 = v6 + v12 * v7;
  if (v12 >= v13)
  {
    if (v12 <= v13)
    {
      double v24 = v7 + v17 * a3;
      double v20 = v16 * v14;
      double v25 = v24;
      goto LABEL_14;
    }
    long double v21 = v34 * a3;
    long double __x = v34 * a3;
    double v22 = v17 / v34;
    double v30 = cosh(v21);
    long double v23 = sinh(__x);
    double v20 = v22 * v23 + v7 * v30;
    double v17 = v34 * (v22 * v30) + v7 * v23 * v34;
  }
  else
  {
    double v18 = v17 / v15;
    __double2 v19 = __sincos_stret(v15 * a3);
    double v20 = v19.__sinval * v18 + v7 * v19.__cosval;
    double v17 = v15 * (v19.__cosval * v18) + -(v19.__sinval * v7) * v15;
  }
  double v24 = v16 * v14;
  double v25 = v20;
LABEL_14:
  *(double *)a2 = v33 + v16 * v25;
  *(double *)(a2 + 8) = v24 * v20 + v16 * v17;
  *(double *)(a2 + 64) = v32;
  *(double *)(a2 + 72) = v31;
  *(double *)(a2 + 80) = v12;
  *(double *)(a2 + 88) = v13;
  *(double *)(a2 + 96) = v15;
  *(double *)(a2 + 104) = v34;
}

double sub_100005F50(double *a1, double *a2, double a3, double a4)
{
  double result = sqrt(a3);
  if (a1) {
    *a1 = a4 / (result + result);
  }
  if (a2)
  {
    double result = 6.28318531 / result;
    *a2 = result;
  }
  return result;
}

double sub_100005F7C(double *a1, double *a2, double result, double a4, double a5)
{
  if (a1)
  {
    double v5 = sqrt(result * a4);
    *a1 = a5 / (v5 + v5);
  }
  if (a2)
  {
    double result = 6.28318531 / sqrt(a4 / result);
    *a2 = result;
  }
  return result;
}

double sub_100005FB4(double *a1, double *a2, double result, double a4)
{
  double v4 = 6.28318531 / a4 * (6.28318531 / a4);
  if (a1) {
    *a1 = v4;
  }
  if (a2)
  {
    double v5 = sqrt(v4);
    double result = (v5 + v5) * result;
    *a2 = result;
  }
  return result;
}

double sub_100005FE4(double *a1, double *a2, double result, double a4, double a5)
{
  double v5 = sqrt(a4 / result);
  double v6 = 6.28318531 / (6.28318531 / v5) * (6.28318531 / (6.28318531 / v5));
  if (a1) {
    *a1 = v6;
  }
  if (a2)
  {
    double v7 = sqrt(result * a4);
    double v8 = sqrt(v6);
    double result = a5 / (v7 + v7) * (v8 + v8);
    *a2 = result;
  }
  return result;
}

__n128 sub_100006030@<Q0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D3>, double a5@<D4>)
{
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v9 = a1 + 16;
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  double v23 = 0.0;
  double v24 = 0.0;
  sub_100005FB4(&v24, &v23, 1.0, 0.5);
  sub_100005C48(v9, a4, 0.0, a4, v24, v23);
  sub_100005C48((uint64_t)&v16, a5, 0.0, a5, v24, v23);
  long long v10 = v21;
  *(_OWORD *)(a1 + 192) = v20;
  *(_OWORD *)(a1 + 208) = v10;
  *(_OWORD *)(a1 + 224) = v22;
  long long v11 = v17;
  *(_OWORD *)(a1 + 128) = v16;
  *(_OWORD *)(a1 + 144) = v11;
  __n128 v12 = v19;
  *(_OWORD *)(a1 + 160) = v18;
  *(__n128 *)(a1 + 176) = v12;
  sub_100005C48((uint64_t)&v16, a2, 0.0, a2, v24, v23);
  long long v13 = v21;
  *(_OWORD *)(a1 + 304) = v20;
  *(_OWORD *)(a1 + 320) = v13;
  *(_OWORD *)(a1 + 336) = v22;
  long long v14 = v17;
  *(_OWORD *)(a1 + 240) = v16;
  *(_OWORD *)(a1 + 256) = v14;
  __n128 result = v19;
  *(_OWORD *)(a1 + 272) = v18;
  *(__n128 *)(a1 + 288) = result;
  return result;
}

uint64_t sub_100006150(uint64_t result, double a2)
{
  *(double *)(result + 280) = a2;
  *(double *)(result + 240) = a2;
  *(void *)(result + 248) = 0;
  return result;
}

void sub_100006160(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 240) = a3;
    *(void *)(a1 + 248) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_100005FB4((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 264) = v7;
    *(void *)(a1 + 272) = v5;
    a3 = a2;
  }
  *(double *)(a1 + 280) = a3;
}

void sub_1000061CC(uint64_t a1, double a2, double a3, double a4)
{
  if (a4 == 0.0)
  {
    *(double *)(a1 + 280) = a2;
  }
  else
  {
    sub_100006160(a1, a2, a4);
    a2 = a3;
  }
  *(double *)(a1 + 240) = a2;
  *(void *)(a1 + 248) = 0;
}

uint64_t sub_100006220(uint64_t result, double a2)
{
  *(double *)(result + 56) = a2;
  *(double *)(result + 16) = a2;
  *(void *)(result + 24) = 0;
  return result;
}

void sub_100006230(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 16) = a2;
    *(void *)(a1 + 24) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_100005FB4((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v5;
  }
  *(double *)(a1 + 56) = a2;
}

uint64_t sub_100006298(uint64_t result, double a2)
{
  *(double *)(result + 168) = a2;
  *(double *)(result + 128) = a2;
  *(void *)(result + 136) = 0;
  return result;
}

void sub_1000062A8(uint64_t a1, double a2, double a3)
{
  if (a3 == 0.0)
  {
    *(double *)(a1 + 128) = a2;
    *(void *)(a1 + 136) = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    sub_100005FB4((double *)&v7, (double *)&v6, 1.0, a3);
    uint64_t v5 = v6;
    *(void *)(a1 + 152) = v7;
    *(void *)(a1 + 160) = v5;
  }
  *(double *)(a1 + 168) = a2;
}

double sub_100006310@<D0>(void *__src@<X0>, double *a2@<X8>, double a3@<D0>)
{
  memcpy(a2, __src, 0x170uLL);
  long long v5 = *((_OWORD *)a2 + 6);
  long long v38 = *((_OWORD *)a2 + 5);
  long long v39 = v5;
  long long v40 = *((_OWORD *)a2 + 7);
  long long v6 = *((_OWORD *)a2 + 2);
  long long v34 = *((_OWORD *)a2 + 1);
  long long v35 = v6;
  long long v7 = *((_OWORD *)a2 + 4);
  long long v36 = *((_OWORD *)a2 + 3);
  long long v37 = v7;
  sub_100005D70((uint64_t)&v34, (uint64_t)(a2 + 2), a3);
  long long v8 = *((_OWORD *)a2 + 13);
  long long v31 = *((_OWORD *)a2 + 12);
  long long v32 = v8;
  long long v33 = *((_OWORD *)a2 + 14);
  long long v9 = *((_OWORD *)a2 + 9);
  long long v27 = *((_OWORD *)a2 + 8);
  long long v28 = v9;
  long long v10 = *((_OWORD *)a2 + 11);
  long long v29 = *((_OWORD *)a2 + 10);
  long long v30 = v10;
  sub_100005D70((uint64_t)&v27, (uint64_t)&v34, a3);
  long long v11 = v39;
  *((_OWORD *)a2 + 12) = v38;
  *((_OWORD *)a2 + 13) = v11;
  *((_OWORD *)a2 + 14) = v40;
  long long v12 = v35;
  *((_OWORD *)a2 + 8) = v34;
  *((_OWORD *)a2 + 9) = v12;
  long long v13 = v37;
  *((_OWORD *)a2 + 10) = v36;
  *((_OWORD *)a2 + 11) = v13;
  long long v14 = *((_OWORD *)a2 + 20);
  long long v31 = *((_OWORD *)a2 + 19);
  long long v32 = v14;
  long long v33 = *((_OWORD *)a2 + 21);
  long long v15 = *((_OWORD *)a2 + 16);
  long long v27 = *((_OWORD *)a2 + 15);
  long long v28 = v15;
  long long v16 = *((_OWORD *)a2 + 18);
  long long v29 = *((_OWORD *)a2 + 17);
  long long v30 = v16;
  sub_100005D70((uint64_t)&v27, (uint64_t)&v34, a3);
  long long v17 = v39;
  *((_OWORD *)a2 + 19) = v38;
  *((_OWORD *)a2 + 20) = v17;
  *((_OWORD *)a2 + 21) = v40;
  long long v18 = v35;
  *((_OWORD *)a2 + 15) = v34;
  *((_OWORD *)a2 + 16) = v18;
  long long v19 = v37;
  *((_OWORD *)a2 + 17) = v36;
  *((_OWORD *)a2 + 18) = v19;
  *(double *)&long long v19 = *a2;
  *(double *)&long long v18 = a2[1];
  double v20 = a2[2];
  double v21 = a2[16];
  double v22 = a2[30];
  uint64_t v23 = *((void *)a2 + 44);
  uint64_t v24 = *((void *)a2 + 45);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  sub_100005CA8((uint64_t)&v34, *(double *)&v19, *(double *)&v18, v22, v20, v21);
  *(void *)&long long v37 = v23;
  *((void *)&v37 + 1) = v24;
  v26[4] = v38;
  v26[5] = v39;
  v26[6] = v40;
  v26[0] = v34;
  v26[1] = v35;
  v26[2] = v36;
  v26[3] = v37;
  sub_100005D70((uint64_t)v26, (uint64_t)&v27, a3);
  double result = *(double *)&v27;
  *(_OWORD *)a2 = v27;
  return result;
}

__n128 sub_1000064B8@<Q0>(__n128 *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  sub_100005CA8((uint64_t)a2, a1->n128_f64[0], a1->n128_f64[1], a1[15].n128_f64[0], a1[1].n128_f64[0], a1[8].n128_f64[0]);
  __n128 result = a1[22];
  a2[3] = result;
  return result;
}

BOOL sub_10000650C(void *a1)
{
  double v1 = *(double *)a1;
  double v2 = *((double *)a1 + 1);
  uint64_t v3 = a1[44];
  uint64_t v4 = a1[45];
  long long v5 = (long long *)(a1 + 2);
  double v6 = *((double *)a1 + 2);
  long long v7 = (long long *)(a1 + 16);
  double v8 = *((double *)a1 + 16);
  long long v9 = (long long *)(a1 + 30);
  double v10 = *((double *)a1 + 30);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  sub_100005CA8((uint64_t)&v28, v1, v2, v10, v6, v8);
  *(void *)&long long v31 = v3;
  *((void *)&v31 + 1) = v4;
  long long v25 = v32;
  long long v26 = v33;
  long long v27 = v34;
  long long v21 = v28;
  long long v22 = v29;
  long long v23 = v30;
  long long v24 = v31;
  BOOL result = sub_100005C74((double *)&v21);
  if (result)
  {
    long long v12 = v9[5];
    long long v25 = v9[4];
    long long v26 = v12;
    long long v27 = v9[6];
    long long v13 = v9[1];
    long long v21 = *v9;
    long long v22 = v13;
    long long v14 = v9[3];
    long long v23 = v9[2];
    long long v24 = v14;
    BOOL result = sub_100005C74((double *)&v21);
    if (result)
    {
      long long v15 = v5[5];
      long long v25 = v5[4];
      long long v26 = v15;
      long long v27 = v5[6];
      long long v16 = v5[1];
      long long v21 = *v5;
      long long v22 = v16;
      long long v17 = v5[3];
      long long v23 = v5[2];
      long long v24 = v17;
      BOOL result = sub_100005C74((double *)&v21);
      if (result)
      {
        long long v18 = v7[5];
        long long v25 = v7[4];
        long long v26 = v18;
        long long v27 = v7[6];
        long long v19 = v7[1];
        long long v21 = *v7;
        long long v22 = v19;
        long long v20 = v7[3];
        long long v23 = v7[2];
        long long v24 = v20;
        return sub_100005C74((double *)&v21);
      }
    }
  }
  return result;
}

double sub_100007038(double a1, double a2, double a3)
{
  return a2 / 1000.0 * a3 / (1.0 - a3) + a1;
}

double sub_10000705C(double a1, double a2, double a3, double a4)
{
  if (a3 == 0.0) {
    return a2;
  }
  if (a1 < a2) {
    a3 = -a3;
  }
  return a2 + (1.0 - 1.0 / (a4 * ((a1 - a2) / a3) + 1.0)) * a3;
}

double sub_100007098(double a1, double a2, double a3, double a4)
{
  if (a3 == 0.0) {
    return a2;
  }
  if (a1 < a2) {
    a3 = -a3;
  }
  return a2 + (-1.0 / ((a1 - a2) / a3 + -1.0) + -1.0) / a4 * a3;
}

uint64_t variable initialization expression of PCUserAlertDefinition.subtitle()
{
  return 0;
}

uint64_t variable initialization expression of PCUserAlertDefinition.timeout()
{
  return 0;
}

uint64_t static PCProximityHandoffServiceInvocations.UserAlertAction.supportsSecureCoding.getter()
{
  return 1;
}

__n128 initializeWithTake for MediaTransferStatus(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SpringState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SpringState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
}

void type metadata accessor for PCActivityAssetType(uint64_t a1)
{
}

void type metadata accessor for PCInteractionDirection(uint64_t a1)
{
}

void type metadata accessor for Style(uint64_t a1)
{
}

void type metadata accessor for PCActivityType(uint64_t a1)
{
}

void type metadata accessor for CAMediaTimingFunctionName(uint64_t a1)
{
}

uint64_t sub_1000071C8(uint64_t a1, uint64_t a2)
{
  return sub_100007714(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000071E8(uint64_t a1, uint64_t a2)
{
  return sub_100007714(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

BOOL sub_10000720C(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *sub_100007220@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100007230(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10000723C(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000072B4(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100007334@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_10000737C(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_100007388@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100007394@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000073C0(uint64_t a1)
{
  uint64_t v2 = sub_1000076CC((unint64_t *)&qword_1000F6860, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v3 = sub_1000076CC(&qword_1000F6868, type metadata accessor for NSKeyValueChangeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000747C@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000074C4(uint64_t a1)
{
  uint64_t v2 = sub_1000076CC((unint64_t *)&qword_1000F6850, type metadata accessor for LaunchOptionsKey);
  uint64_t v3 = sub_1000076CC(&qword_1000F6858, type metadata accessor for LaunchOptionsKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100007580(uint64_t a1)
{
  uint64_t v2 = sub_1000076CC(&qword_1000F67E0, type metadata accessor for CAMediaTimingFunctionName);
  uint64_t v3 = sub_1000076CC(&qword_1000F67E8, type metadata accessor for CAMediaTimingFunctionName);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000763C()
{
  return sub_1000076CC((unint64_t *)&qword_1000F67C8, type metadata accessor for CAMediaTimingFunctionName);
}

uint64_t sub_100007684()
{
  return sub_1000076CC(&qword_1000F67D0, type metadata accessor for CAMediaTimingFunctionName);
}

uint64_t sub_1000076CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007714(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100007758()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000077AC()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100007820()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1000078AC()
{
  return sub_1000076CC(&qword_1000F67D8, type metadata accessor for CAMediaTimingFunctionName);
}

void type metadata accessor for _UIBacklightLuminance(uint64_t a1)
{
}

void type metadata accessor for CULogLevel(uint64_t a1)
{
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

void type metadata accessor for SBUIRemoteAlertServiceButtonEvents(uint64_t a1)
{
}

void type metadata accessor for UIModalPresentationStyle(uint64_t a1)
{
}

void sub_10000796C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000079B4()
{
  return sub_1000076CC(&qword_1000F6820, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1000079FC()
{
  return sub_1000076CC(&qword_1000F6828, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_100007A44()
{
  return sub_1000076CC(&qword_1000F6830, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_100007A8C()
{
  return sub_1000076CC(&qword_1000F6838, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_100007AD4()
{
  return sub_1000076CC(&qword_1000F6840, type metadata accessor for LaunchOptionsKey);
}

uint64_t sub_100007B1C()
{
  return sub_1000076CC(&qword_1000F6848, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t *sub_100007B74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    long long v7 = (char *)a1 + v6;
    double v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    double v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100007C5C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100007CD4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  long long v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_100007D6C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  long long v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_100007E08(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100007E84(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100007F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100007F24);
}

uint64_t sub_100007F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100007FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100007FE8);
}

uint64_t sub_100007FE8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AdjustedMovie(uint64_t a1)
{
  return sub_1000094F4(a1, qword_1000F69E8);
}

uint64_t sub_1000080B0()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100008148@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100008614(&qword_1000F6A20);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  long long v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  long long v16 = (char *)&v38 - v15;
  id v17 = [self sharedInstance];
  id v18 = [v17 alternateBundleForAssetType:a1];

  if (v18)
  {
    id v19 = [v18 URLForResource:SFDeviceAssetNameAdjustments withExtension:0];
    if (v19)
    {
      long long v20 = v19;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      long long v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v21(v7, v13, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
      {
        v21(v16, v7, v8);
        NSString v22 = String._bridgeToObjectiveC()();
        id v23 = [v18 pathForResource:v22 ofType:0];

        if (v23)
        {
          uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v26 = v25;

          uint64_t v27 = type metadata accessor for AdjustedMovie(0);
          v21((char *)a2 + *(int *)(v27 + 20), v16, v8);
          *a2 = v24;
          a2[1] = v26;
          return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(a2, 0, 1, v27);
        }
        id v36 = sub_100008BE0();
        NSString v37 = String._bridgeToObjectiveC()();
        [v36 ulog:40 message:v37];

        (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
        goto LABEL_11;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    }
    sub_100008D1C((uint64_t)v7);
    id v33 = sub_100008BE0();
    NSString v34 = String._bridgeToObjectiveC()();
    [v33 ulog:40 message:v34];

LABEL_11:
    uint64_t v35 = type metadata accessor for AdjustedMovie(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(a2, 1, 1, v35);
  }
  id v29 = sub_100008BE0();
  NSString v30 = String._bridgeToObjectiveC()();
  [v29 ulog:40 message:v30];

  uint64_t v31 = type metadata accessor for AdjustedMovie(0);
  long long v32 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);

  return v32(a2, 1, 1, v31);
}

uint64_t sub_100008614(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

id sub_100008658()
{
  id v0 = sub_10006A6EC();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];

  id v2 = [objc_allocWithZone((Class)SFMediaPlayerView) init];
  id v3 = [v2 layer];
  [v3 setShouldRasterize:1];

  id v4 = [v2 layer];
  id v5 = [self mainScreen];
  [v5 scale];
  double v7 = v6;

  [v4 setRasterizationScale:v7 + v7];
  return v2;
}

uint64_t sub_100008780(void *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin();
  id v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = sub_10006A6EC();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  URL.init(fileURLWithPath:isDirectory:)();
  [a1 setPausesAfterEachItem:1];
  id v8 = objc_allocWithZone((Class)SFMediaPlayerItem);
  URL._bridgeToObjectiveC()(v9);
  uint64_t v11 = v10;
  id v12 = [v8 initWithURL:v10];

  [a1 addMovieItem:v12];
  [a1 play];
  id v13 = [self currentTraitCollection];
  id v14 = [v13 userInterfaceStyle];

  if (v14 == (id)2) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = 2;
  }
  uint64_t v16 = type metadata accessor for AdjustedMovie(0);
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v16 + 20));
  id v18 = v17;
  [a1 updateViewForAssetType:v15 adjustmentsURL:v17];

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id sub_1000089A8(void *a1)
{
  id v2 = sub_100008D7C();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  return [a1 stop];
}

uint64_t sub_100008A3C()
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)();
}

uint64_t sub_100008A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000095F8(&qword_1000F6AD0);

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100008B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1000095F8(&qword_1000F6AD0);

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100008B80()
{
  return static View._viewListCount(inputs:)();
}

void sub_100008B9C()
{
}

id sub_100008BE0()
{
  sub_100008614(&qword_1000F6A28);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

uint64_t sub_100008D1C(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F6A20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100008D7C()
{
  type metadata accessor for MovieView(0);
  sub_100008614(&qword_1000F6AD8);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_100008EB8()
{
  sub_100008614(&qword_1000F6A30);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

ValueMetadata *type metadata accessor for HomePodMovieManager()
{
  return &type metadata for HomePodMovieManager;
}

uint64_t *sub_100009004(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AdjustedMovie(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = *(int *)(v4 + 20);
    id v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_1000090F8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for AdjustedMovie(0) + 20);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *sub_100009174(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(type metadata accessor for AdjustedMovie(0) + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *sub_100009218(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for AdjustedMovie(0) + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_1000092B8(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(type metadata accessor for AdjustedMovie(0) + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100009340(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(int *)(type metadata accessor for AdjustedMovie(0) + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t sub_1000093D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000093E4);
}

uint64_t sub_1000093E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AdjustedMovie(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100009450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100009464);
}

uint64_t sub_100009464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AdjustedMovie(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MovieView(uint64_t a1)
{
  return sub_1000094F4(a1, qword_1000F6A90);
}

uint64_t sub_1000094F4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000952C()
{
  uint64_t result = type metadata accessor for AdjustedMovie(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000095B8()
{
  return sub_1000095F8(&qword_1000F6AC8);
}

void *sub_1000095EC()
{
  return &protocol witness table for Never;
}

uint64_t sub_1000095F8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for MovieView(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SpringParameters(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 initializeWithCopy for SpringParameters(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SpringParameters(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SpringParameters(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SpringParameters()
{
  return &type metadata for SpringParameters;
}

BOOL sub_1000096D8(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

unsigned char *initializeBufferWithCopyOfBuffer for Feature(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Feature(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Feature(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *__n128 result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100009888);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t sub_1000098B0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000098B8(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for Feature()
{
  return &type metadata for Feature;
}

unint64_t sub_1000098D4()
{
  unint64_t result = qword_1000F6AE0;
  if (!qword_1000F6AE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6AE0);
  }
  return result;
}

const char *sub_100009928(char a1)
{
  unint64_t result = "Fix_97690291";
  switch(a1)
  {
    case 1:
      unint64_t result = "Handoff_Animation";
      break;
    case 2:
      unint64_t result = "Handoff_v2";
      break;
    case 3:
      unint64_t result = "Handoff_v3";
      break;
    case 4:
      unint64_t result = "Handoff_Trigger_Feedback";
      break;
    case 5:
      unint64_t result = "Lockscreen_Media_Controls";
      break;
    case 6:
      unint64_t result = "NowPlaying_AutoLaunch";
      break;
    case 7:
      unint64_t result = "NowPlaying_AutoLaunch_Guest_Tinker_Support";
      break;
    case 8:
      unint64_t result = "NowPlaying_AutoLaunch_Inner_Region";
      break;
    case 9:
      unint64_t result = "Prototypes";
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100009A28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100009A3C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100009A84()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100009AB0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

const char *sub_100009AF4()
{
  return "ProximityControl";
}

const char *sub_100009B08()
{
  return sub_100009928(*v0);
}

uint64_t initializeBufferWithCopyOfBuffer for BlurModifier(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for BlurModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BlurModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BlurModifier()
{
  return &type metadata for BlurModifier;
}

unint64_t sub_100009BE8()
{
  unint64_t result = qword_1000F6AE8;
  if (!qword_1000F6AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6AE8);
  }
  return result;
}

double sub_100009C3C@<D0>(void *a1@<X8>)
{
  double result = *v1;
  *a1 = *(void *)v1;
  return result;
}

double sub_100009C48(double *a1)
{
  double result = *a1;
  *Swift::UInt v1 = *(void *)a1;
  return result;
}

double (*sub_100009C54(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return sub_100009C80;
}

double sub_100009C80(uint64_t a1)
{
  double result = *(double *)a1;
  **(void **)(a1 + 8) = *(void *)a1;
  return result;
}

uint64_t sub_100009C94()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100009CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_100009E6C();

  return static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_100009D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_100009E6C();

  return static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v12, a6);
}

uint64_t sub_100009DB8()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_100009DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  char v6 = *((unsigned char *)v2 + 8);
  uint64_t v7 = sub_100008614(&qword_1000F6AF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  uint64_t result = sub_100008614(&qword_1000F6AF8);
  uint64_t v9 = a2 + *(int *)(result + 36);
  *(void *)uint64_t v9 = v5;
  *(unsigned char *)(v9 + 8) = v6;
  return result;
}

unint64_t sub_100009E6C()
{
  unint64_t result = qword_1000F6B00;
  if (!qword_1000F6B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6B00);
  }
  return result;
}

unint64_t sub_100009EC4()
{
  unint64_t result = qword_1000F6B08;
  if (!qword_1000F6B08)
  {
    sub_100009F40(&qword_1000F6AF8);
    sub_100009F88();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6B08);
  }
  return result;
}

uint64_t sub_100009F40(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_100009F88()
{
  unint64_t result = qword_1000F6B10;
  if (!qword_1000F6B10)
  {
    sub_100009F40(&qword_1000F6AF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6B10);
  }
  return result;
}

uint64_t *sub_100009FE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    int v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_10000A0C8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_10000A140(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  int v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_10000A1D8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_10000A26C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_10000A2E8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_10000A374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000A388);
}

uint64_t sub_10000A388(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10000A438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000A44C);
}

void *sub_10000A44C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for NearbySharingInteractionDisplayContext()
{
  uint64_t result = qword_1000F6B70;
  if (!qword_1000F6B70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10000A540()
{
  uint64_t result = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10000A5DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[0] = a4;
  v13[1] = a5;
  uint64_t v7 = sub_100008614(&qword_1000F6C20);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10000B8DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_10000A750(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_100008614(&qword_1000F6BD8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000AEFC(a1, a1[3]);
  sub_10000AF40();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v12 = *v3;
  v11[7] = 0;
  sub_100008614(&qword_1000F6BB8);
  sub_10000B0F8(&qword_1000F6BE0, (void (*)(void))sub_10000B168);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for NearbySharingInteractionDisplayContext();
    v11[6] = 1;
    type metadata accessor for SFAirDrop.NearbySharingInteraction();
    sub_10000B1BC(&qword_1000F6BF0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10000A948@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v26 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v23 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100008614(&qword_1000F6BA8);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for NearbySharingInteractionDisplayContext();
  __chkstk_darwin(v10, v11);
  id v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10000AF40();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000AF94((uint64_t)a1);
  }
  long long v21 = v6;
  NSString v22 = a1;
  char v14 = v13;
  uint64_t v16 = v25;
  uint64_t v15 = v26;
  sub_100008614(&qword_1000F6BB8);
  char v29 = 0;
  sub_10000B0F8(&qword_1000F6BC0, (void (*)(void))sub_10000AFE4);
  uint64_t v17 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = (uint64_t)v14;
  *char v14 = v30;
  char v28 = 1;
  sub_10000B1BC(&qword_1000F6BD0);
  id v19 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v18 + *(int *)(v10 + 20), v19, v15);
  sub_10000B038(v18, v24);
  sub_10000AF94((uint64_t)v22);
  return sub_10000B09C(v18);
}

uint64_t sub_10000ACA4()
{
  if (*v0) {
    return 0x656C746974;
  }
  else {
    return 25705;
  }
}

uint64_t sub_10000ACD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000B4F8(a1, a2);
  *a3 = result;
  return result;
}

void sub_10000ACF8(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10000AD04(uint64_t a1)
{
  unint64_t v2 = sub_10000B8DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000AD40(uint64_t a1)
{
  unint64_t v2 = sub_10000B8DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000AD7C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10000B5CC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10000ADAC(void *a1)
{
  return sub_10000A5DC(a1, *v1, v1[1], v1[2], v1[3]);
}

BOOL sub_10000ADCC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10000ADE4()
{
  if (*v0) {
    return 0xD000000000000018;
  }
  else {
    return 0x53746E65746E6F63;
  }
}

uint64_t sub_10000AE2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000B7D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000AE54(uint64_t a1)
{
  unint64_t v2 = sub_10000AF40();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000AE90(uint64_t a1)
{
  unint64_t v2 = sub_10000AF40();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10000AECC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000A948(a1, a2);
}

uint64_t sub_10000AEE4(void *a1)
{
  return sub_10000A750(a1);
}

void *sub_10000AEFC(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_10000AF40()
{
  unint64_t result = qword_1000F6BB0;
  if (!qword_1000F6BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6BB0);
  }
  return result;
}

uint64_t sub_10000AF94(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_10000AFE4()
{
  unint64_t result = qword_1000F6BC8;
  if (!qword_1000F6BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6BC8);
  }
  return result;
}

uint64_t sub_10000B038(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B09C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NearbySharingInteractionDisplayContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000B0F8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009F40(&qword_1000F6BB8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000B168()
{
  unint64_t result = qword_1000F6BE8;
  if (!qword_1000F6BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6BE8);
  }
  return result;
}

uint64_t sub_10000B1BC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for SFAirDrop.NearbySharingInteraction();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *sub_10000B208(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionDisplayContext.CodingKeys()
{
  return &type metadata for NearbySharingInteractionDisplayContext.CodingKeys;
}

uint64_t destroy for NearbySharingInteractionDisplayContext.ShareableContentStub()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for NearbySharingInteractionDisplayContext.ShareableContentStub(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NearbySharingInteractionDisplayContext.ShareableContentStub(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for NearbySharingInteractionDisplayContext.ShareableContentStub(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbySharingInteractionDisplayContext.ShareableContentStub(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionDisplayContext.ShareableContentStub(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionDisplayContext.ShareableContentStub()
{
  return &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub;
}

unint64_t sub_10000B3F4()
{
  unint64_t result = qword_1000F6BF8;
  if (!qword_1000F6BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6BF8);
  }
  return result;
}

unint64_t sub_10000B44C()
{
  unint64_t result = qword_1000F6C00;
  if (!qword_1000F6C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6C00);
  }
  return result;
}

unint64_t sub_10000B4A4()
{
  unint64_t result = qword_1000F6C08;
  if (!qword_1000F6C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6C08);
  }
  return result;
}

uint64_t sub_10000B4F8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10000B5CC(void *a1)
{
  uint64_t v3 = sub_100008614(&qword_1000F6C10);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  sub_10000AEFC(a1, a1[3]);
  sub_10000B8DC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000AF94((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    char v10 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_10000AF94((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_10000B7D4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x53746E65746E6F63 && a2 == 0xEC00000073627574;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001000BD1E0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_10000B8DC()
{
  unint64_t result = qword_1000F6C18;
  if (!qword_1000F6C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6C18);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RepeatingTimer.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s13PCViewService38NearbySharingInteractionDisplayContextV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000BA8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys()
{
  return &type metadata for NearbySharingInteractionDisplayContext.ShareableContentStub.CodingKeys;
}

unint64_t sub_10000BAC8()
{
  unint64_t result = qword_1000F6C28;
  if (!qword_1000F6C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6C28);
  }
  return result;
}

unint64_t sub_10000BB20()
{
  unint64_t result = qword_1000F6C30;
  if (!qword_1000F6C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6C30);
  }
  return result;
}

unint64_t sub_10000BB78()
{
  unint64_t result = qword_1000F6C38[0];
  if (!qword_1000F6C38[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000F6C38);
  }
  return result;
}

uint64_t sub_10000BBDC()
{
  String.append(_:)(*(Swift::String *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68)));
  return 45;
}

uint64_t sub_10000BC44@<X0>(uint64_t a1@<X8>)
{
  int v2 = v1;
  unsigned int v4 = (void *)(swift_isaMask & *v1);
  uint64_t v5 = v4[10];
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v8 = __chkstk_darwin(v6, v7);
  char v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  char v14 = (char *)&v70 - v13;
  __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)&v70 - v17;
  id v19 = *(void **)((char *)v2 + v4[14]);
  if (v19)
  {
    uint64_t v77 = v16;
    uint64_t v78 = a1;
    v74 = v4;
    uint64_t v20 = (void *)((char *)v2 + v4[13]);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    id v23 = v19;
    v75 = (void *)v21;
    NSString v24 = String._bridgeToObjectiveC()();
    id v25 = [v23 objectForKey:v24];

    if (v25)
    {
      id v76 = v23;
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10000E714(v80, v81);
      sub_10000E724((uint64_t)v81, (uint64_t)v80);
      char v26 = swift_dynamicCast();
      uint64_t v27 = *(void *)(v5 - 8);
      char v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      if (v26)
      {
        v28(v18, 0, 1, v5);

        sub_10000AF94((uint64_t)v81);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v78, v18, v5);
      }
      else
      {
        v73 = *(uint64_t (***)(void, void, void))(v5 - 8);
        v28(v18, 1, 1, v5);
        long long v32 = *(void (**)(char *, uint64_t))(v77 + 8);
        v77 += 8;
        v72 = v32;
        v32(v18, v6);
        id v33 = v75;
        NSString v34 = String._bridgeToObjectiveC()();
        id v35 = v76;
        id v36 = [v76 stringForKey:v34];

        if (v36)
        {
          uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v39 = v38;

          uint64_t v40 = v39;
          v41 = v73;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v74[11] + 16))(v37, v40, v5, v74[11]);
          if (((uint64_t (**)(char *, uint64_t, uint64_t))v41)[6](v14, 1, v5) == 1)
          {
            v72(v14, v6);
            v79 = v2;
            *(void *)&v80[0] = 0;
            *((void *)&v80[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(81);
            v42._object = (void *)0x80000001000BD2C0;
            v42._countAndFlagsBits = 0xD00000000000004ELL;
            String.append(_:)(v42);
            v43 = v75;
            swift_bridgeObjectRetain();
            v44._countAndFlagsBits = v22;
            v44._object = v43;
            String.append(_:)(v44);
            swift_bridgeObjectRelease();
            v45._countAndFlagsBits = 125;
            v45._object = (void *)0xE100000000000000;
            String.append(_:)(v45);
            long long v46 = v80[0];
            uint64_t v47 = type metadata accessor for UserDefault();
            sub_10004DC80(90, v46, *((void **)&v46 + 1), 0, v47, (uint64_t)&off_1000E3AE8);
            swift_bridgeObjectRelease();

            sub_10000AF94((uint64_t)v81);
            return ((uint64_t (**)(uint64_t, char *, uint64_t))v41)[2](v78, (char *)v2 + *(void *)((swift_isaMask & *v2) + 0x60), v5);
          }
          else
          {
            sub_10000AF94((uint64_t)v81);

            return ((uint64_t (**)(uint64_t, char *, uint64_t))v41)[4](v78, v14, v5);
          }
        }
        else
        {
          NSString v48 = String._bridgeToObjectiveC()();
          id v49 = [v35 dataForKey:v48];

          if (v49)
          {
            uint64_t v70 = v22;
            uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v52 = v51;

            uint64_t v53 = v74[11];
            v54 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v53 + 24);
            sub_10000E780(v50, v52);
            uint64_t v71 = v50;
            uint64_t v55 = v50;
            v56 = v73;
            v74 = (void *)v52;
            v54(v55, v52, v5, v53);
            int v57 = ((uint64_t (**)(char *, uint64_t, uint64_t))v56)[6](v10, 1, v5);
            uint64_t v58 = v78;
            if (v57 == 1)
            {
              v72(v10, v6);
              v79 = v2;
              *(void *)&v80[0] = 0;
              *((void *)&v80[0] + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(81);
              v59._object = (void *)0x80000001000BD2C0;
              v59._countAndFlagsBits = 0xD00000000000004ELL;
              String.append(_:)(v59);
              v60 = v75;
              swift_bridgeObjectRetain();
              v61._countAndFlagsBits = v70;
              v61._object = v60;
              String.append(_:)(v61);
              swift_bridgeObjectRelease();
              v62._countAndFlagsBits = 125;
              v62._object = (void *)0xE100000000000000;
              String.append(_:)(v62);
              long long v63 = v80[0];
              uint64_t v64 = type metadata accessor for UserDefault();
              sub_10004DC80(90, v63, *((void **)&v63 + 1), 0, v64, (uint64_t)&off_1000E3AE8);
              swift_bridgeObjectRelease();

              sub_10000D6B8(v71, (unint64_t)v74);
              sub_10000AF94((uint64_t)v81);
              return ((uint64_t (**)(uint64_t, char *, uint64_t))v56)[2](v58, (char *)v2 + *(void *)((swift_isaMask & *v2) + 0x60), v5);
            }
            else
            {
              sub_10000AF94((uint64_t)v81);

              sub_10000D6B8(v71, (unint64_t)v74);
              return ((uint64_t (**)(uint64_t, char *, uint64_t))v56)[4](v58, v10, v5);
            }
          }
          else
          {
            v79 = v2;
            *(void *)&v80[0] = 0;
            *((void *)&v80[0] + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(93);
            v65._countAndFlagsBits = 0xD00000000000005ALL;
            v65._object = (void *)0x80000001000BD260;
            String.append(_:)(v65);
            swift_bridgeObjectRetain();
            v66._countAndFlagsBits = v22;
            v66._object = v33;
            String.append(_:)(v66);
            swift_bridgeObjectRelease();
            v67._countAndFlagsBits = 125;
            v67._object = (void *)0xE100000000000000;
            String.append(_:)(v67);
            long long v68 = v80[0];
            uint64_t v69 = type metadata accessor for UserDefault();
            sub_10004DC80(90, v68, *((void **)&v68 + 1), 0, v69, (uint64_t)&off_1000E3AE8);
            swift_bridgeObjectRelease();

            sub_10000AF94((uint64_t)v81);
            return ((uint64_t (**)(uint64_t, char *, uint64_t))v73)[2](v78, (char *)v2 + *(void *)((swift_isaMask & *v2) + 0x60), v5);
          }
        }
      }
    }

    unsigned int v4 = (void *)(swift_isaMask & *v2);
    a1 = v78;
  }
  uint64_t v30 = (char *)v2 + v4[12];
  uint64_t v31 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 16);

  return v31(a1, v30, v5);
}

id sub_10000C4DC()
{
  uint64_t v1 = *(void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x70));
  if (v1)
  {
    id v2 = v1;
    swift_bridgeObjectRetain();
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 removeObserver:v0 forKeyPath:v3 context:0];
  }
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for UserDefault();
  return [super dealloc];
}

id sub_10000C5E0(void *a1)
{
  id v1 = a1;
  return sub_10000C4DC();
}

uint64_t sub_10000C608(char *a1)
{
  (*(void (**)(char *))(*(void *)(*(void *)((swift_isaMask & *(void *)a1) + 0x50) - 8) + 8))(&a1[*(void *)((swift_isaMask & *(void *)a1) + 0x60)]);
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_10000C70C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    memset(v14, 0, sizeof(v14));
    id v11 = a5;
    id v12 = a1;
    if (!a5) {
      goto LABEL_7;
    }
    goto LABEL_4;
  }
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  swift_unknownObjectRetain();
  id v8 = a5;
  id v9 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (a5)
  {
LABEL_4:
    type metadata accessor for NSKeyValueChangeKey(0);
    sub_10000ECEC((unint64_t *)&qword_1000F6860, type metadata accessor for NSKeyValueChangeKey);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
LABEL_7:
  sub_10000EABC((uint64_t)v14, v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10000EC04((uint64_t)v14, &qword_1000F6CC0);
}

void sub_10000C834()
{
}

uint64_t sub_10000C878()
{
  return sub_10000BBDC();
}

uint64_t sub_10000C89C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  id v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10000C964(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(void *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 5; ; ++i)
  {
    uint64_t v4 = i - 3;
    if (__OFADD__(i - 4, 1)) {
      break;
    }
    BOOL v6 = *(void *)(a2 + 8 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10000C9C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10000E63C();
  *a1 = result;
  return result;
}

uint64_t sub_10000C9F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10000CC78(a1, a2, (uint64_t)sub_10000ED74, a3);
}

uint64_t sub_10000CA08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10000D6B8(a1, a2);
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  return result;
}

double sub_10000CA38@<D0>(_OWORD *a1@<X8>)
{
  swift_bridgeObjectRelease();
  double result = 0.0;
  *a1 = xmmword_1000ADE00;
  return result;
}

double sub_10000CA6C@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  sub_10000D6B8(a1, a2);
  double result = 0.0;
  *a3 = xmmword_1000ADE00;
  return result;
}

uint64_t sub_10000CA9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date.ISO8601FormatStyle();
  __chkstk_darwin(v6, v7);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  BOOL v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _OWORD v14[2] = a1;
  v14[3] = a2;
  static ParseStrategy<>.iso8601.getter();
  sub_10000ECEC((unint64_t *)&unk_1000F6CD0, (void (*)(uint64_t))&type metadata accessor for Date.ISO8601FormatStyle);
  Date.init<A>(_:strategy:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a3, v12, v8);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a3, 0, 1, v8);
}

uint64_t sub_10000CC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10000CC78(a1, a2, (uint64_t)sub_10000ECD0, a3);
}

uint64_t sub_10000CC78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v9 = 0;
  v8[2] = &v9;
  char v5 = sub_100033E58(a3, (uint64_t)v8, a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = v9;
  if ((v5 & 1) == 0) {
    uint64_t v7 = 0;
  }
  *(void *)a4 = v7;
  *(unsigned char *)(a4 + 8) = (v5 & 1) == 0;
  return result;
}

uint64_t sub_10000CCF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v8 = 0;
  v7[2] = &v8;
  char v4 = sub_100033E58((uint64_t)sub_10000EC60, (uint64_t)v7, a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  int v6 = v8;
  if ((v4 & 1) == 0) {
    int v6 = 0;
  }
  *(_DWORD *)a3 = v6;
  *(unsigned char *)(a3 + 4) = (v4 & 1) == 0;
  return result;
}

uint64_t sub_10000CD88@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10000D6B8(a1, a2);
  *(_DWORD *)a3 = 0;
  *(unsigned char *)(a3 + 4) = 1;
  return result;
}

uint64_t sub_10000CDB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10000E36C(a1, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_10000CDE8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_10000CDF0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_10000D6B8(a1, a2);
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t sub_10000CE18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_10000E7E0(a1, a2);
  *(_DWORD *)a3 = result;
  *(unsigned char *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_10000CE48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10000CE88(a1, a2, a3, &qword_1000F6A20, (void (*)(uint64_t, uint64_t))&URL.init(string:), a4);
}

uint64_t sub_10000CE68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10000CE88(a1, a2, a3, &qword_1000F6CC8, (void (*)(uint64_t, uint64_t))&UUID.init(uuidString:), a4);
}

uint64_t sub_10000CE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X4>, void (*a5)(uint64_t, uint64_t)@<X5>, uint64_t a6@<X8>)
{
  uint64_t v12 = sub_100008614(a4);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  a5(a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, a3) == 1)
  {
    sub_10000EC04((uint64_t)v15, a4);
    uint64_t v17 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a6, v15, a3);
    uint64_t v17 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a6, v17, 1, a3);
}

uint64_t sub_10000CFE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_10000D6B8(a1, a2);
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);

  return v6(a4, 1, 1, a3);
}

uint64_t sub_10000D04C(uint64_t a1, unint64_t a2)
{
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for Dictionary();
  swift_getWitnessTable();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_10000D6B8(a1, a2);
  swift_release();
  return v5;
}

uint64_t sub_10000D154@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_10000E7D8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000D1AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_10000D04C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000D1F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v26 = a5;
  uint64_t v9 = *(void *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v25 - v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(a1, a2, a3, a4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
    uint64_t v21 = 1;
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v22(v11, v17, a3);
    v22(v20, v11, a3);
    uint64_t v21 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v20, v21, 1, a3);
  uint64_t v23 = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v26, v20, v12);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v23, 0, 1, v12);
}

uint64_t sub_10000D460@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10000D6B8(a1, a2);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a3, 1, 1, v4);
}

uint64_t sub_10000D4D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_10000D1F0(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t sub_10000D4E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10000D460(a1, a2, a3);
}

uint64_t sub_10000D4F0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for UserDefault()
{
  return sub_10000ED34();
}

uint64_t sub_10000D5BC@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10000D5FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_10000D6B8(a1, a2);
  *a3 = 0;
  return result;
}

uint64_t sub_10000D624@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1000E3058;
  return sub_10000D728(a1, v2, a2);
}

unint64_t sub_10000D630@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005C470(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000D658@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000D6B8(a1, a2);
  *a3 = 5;
  return result;
}

uint64_t sub_10000D684@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1000E3008;
  return sub_10000D728(a1, v2, a2);
}

unint64_t sub_10000D690@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005C47C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000D6B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10000D710@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1000E30F8;
  return sub_10000D728(a1, v2, a2);
}

uint64_t sub_10000D71C@<X0>(Swift::String a1@<X1:X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1000E30A8;
  return sub_10000D728(a1, v2, a2);
}

uint64_t sub_10000D728@<X0>(Swift::String string@<0:X0, 8:X1>, Swift::OpaquePointer cases@<0:X4>, char *a3@<X8>)
{
  object = string._object;
  v4._countAndFlagsBits = string._countAndFlagsBits;
  v4._object = object;
  Swift::Int v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

uint64_t sub_10000D788@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000D6B8(a1, a2);
  *a3 = 2;
  return result;
}

unsigned __int8 *sub_10000D7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_10000DE80();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_10000D984(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_10000D89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_10000DE80();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_10000DC00(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *sub_10000D984(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_10000DC00(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          char v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10000DE80()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_10000DF00(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10000DF00(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10000E058(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          char v11 = sub_10009D454(v9, 0),
          unint64_t v12 = sub_10000E158((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_10000E058(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_10009D4BC(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_10009D4BC(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_10000E158(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_10009D4BC(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_10009D4BC(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10000E36C(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        unint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        unint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v7 = (uint64_t)sub_10000D984(v6, v4, 10);
      char v9 = v8 & 1;
      goto LABEL_44;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3) {
        goto LABEL_57;
      }
      if (v3 == 1 || (BYTE1(result) - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v7 = (BYTE1(result) - 48);
      if (v3 != 2)
      {
        if ((BYTE2(result) - 48) > 9u) {
          goto LABEL_31;
        }
        uint64_t v7 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        uint64_t v10 = v3 - 3;
        if (v10)
        {
          uint64_t v11 = (unsigned __int8 *)v23 + 3;
          while (1)
          {
            unsigned int v12 = *v11 - 48;
            if (v12 > 9) {
              goto LABEL_31;
            }
            uint64_t v13 = 10 * v7;
            if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
              goto LABEL_31;
            }
            uint64_t v7 = v13 + v12;
            if (__OFADD__(v13, v12)) {
              goto LABEL_31;
            }
            char v9 = 0;
            ++v11;
            if (!--v10) {
              goto LABEL_44;
            }
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            if (v3 == 2)
            {
              char v9 = 0;
              uint64_t v7 = -(uint64_t)(BYTE1(result) - 48);
              goto LABEL_44;
            }
            if ((BYTE2(result) - 48) <= 9u)
            {
              uint64_t v7 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
              uint64_t v18 = v3 - 3;
              if (!v18) {
                goto LABEL_43;
              }
              char v19 = (unsigned __int8 *)v23 + 3;
              while (1)
              {
                unsigned int v20 = *v19 - 48;
                if (v20 > 9) {
                  break;
                }
                uint64_t v21 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
                  break;
                }
                uint64_t v7 = v21 - v20;
                if (__OFSUB__(v21, v20)) {
                  break;
                }
                char v9 = 0;
                ++v19;
                if (!--v18) {
                  goto LABEL_44;
                }
              }
            }
          }
LABEL_31:
          uint64_t v7 = 0;
          char v9 = 1;
          goto LABEL_44;
        }
        __break(1u);
LABEL_57:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u) {
        goto LABEL_31;
      }
      uint64_t v7 = (result - 48);
      if (v3 != 1)
      {
        if ((BYTE1(result) - 48) > 9u) {
          goto LABEL_31;
        }
        uint64_t v7 = 10 * (result - 48) + (BYTE1(result) - 48);
        uint64_t v14 = v3 - 2;
        if (v14)
        {
          uint64_t v15 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            unsigned int v16 = *v15 - 48;
            if (v16 > 9) {
              goto LABEL_31;
            }
            uint64_t v17 = 10 * v7;
            if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63) {
              goto LABEL_31;
            }
            uint64_t v7 = v17 + v16;
            if (__OFADD__(v17, v16)) {
              goto LABEL_31;
            }
            char v9 = 0;
            ++v15;
            if (!--v14) {
              goto LABEL_44;
            }
          }
        }
      }
    }
LABEL_43:
    char v9 = 0;
    goto LABEL_44;
  }
  uint64_t v7 = (uint64_t)sub_10000D7B4(result, a2, 10);
  char v9 = v22;
LABEL_44:
  swift_bridgeObjectRelease();
  if (v9) {
    return 0;
  }
  else {
    return v7;
  }
}

uint64_t sub_10000E63C()
{
  Swift::String v0 = String.lowercased()();
  char v1 = sub_10000C89C(v0._countAndFlagsBits, (uint64_t)v0._object, &off_1000E2F28);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    return v1 & 1;
  }
  Swift::String v2 = String.lowercased()();
  swift_bridgeObjectRelease();
  char v3 = sub_10000C89C(v2._countAndFlagsBits, (uint64_t)v2._object, &off_1000E2F98);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  if (v3) {
    return v1 & 1;
  }
  return 2;
}

_OWORD *sub_10000E714(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000E724(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000E780(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10000E7D8()
{
  return 0;
}

uint64_t sub_10000E7E0(uint64_t result, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
    LOBYTE(v17) = 1;
    return v18 | ((unint64_t)v17 << 32);
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t v8 = sub_10000D89C(result, a2, 10);
    swift_bridgeObjectRelease();
    uint64_t v17 = HIDWORD(v8) & 1;
LABEL_38:
    uint64_t v18 = v8;
    if (v17) {
      uint64_t v18 = 0;
    }
    return v18 | ((unint64_t)v17 << 32);
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      unint64_t v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v7 = sub_10000DC00(v6, v4, 10);
    LODWORD(v8) = v7;
    char v30 = BYTE4(v7) & 1;
    char v9 = BYTE4(v7) & 1;
    goto LABEL_37;
  }
  v29[0] = result;
  v29[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v3)
    {
      if (v3 != 1)
      {
        LODWORD(v8) = (BYTE1(result) - 48);
        if (v8 <= 9)
        {
          if (v3 == 2) {
            goto LABEL_36;
          }
          if ((BYTE2(result) - 48) <= 9u)
          {
            LODWORD(v8) = 10 * v8 + (BYTE2(result) - 48);
            uint64_t v13 = v3 - 3;
            if (v13)
            {
              uint64_t v14 = (unsigned __int8 *)v29 + 3;
              while (1)
              {
                unsigned int v15 = *v14 - 48;
                if (v15 > 9) {
                  goto LABEL_33;
                }
                uint64_t v16 = 10 * v8;
                if ((v16 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_33;
                }
                LODWORD(v8) = v16 + v15;
                if (__CFADD__(v16, v15)) {
                  goto LABEL_33;
                }
                char v9 = 0;
                ++v14;
                if (!--v13) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
        }
      }
      goto LABEL_33;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v3)
      {
        LODWORD(v8) = (result - 48);
        if (v8 <= 9)
        {
          if (v3 == 1) {
            goto LABEL_36;
          }
          if ((BYTE1(result) - 48) <= 9u)
          {
            LODWORD(v8) = 10 * v8 + (BYTE1(result) - 48);
            uint64_t v19 = v3 - 2;
            if (v19)
            {
              unsigned int v20 = (unsigned __int8 *)v29 + 2;
              while (1)
              {
                unsigned int v21 = *v20 - 48;
                if (v21 > 9) {
                  goto LABEL_33;
                }
                uint64_t v22 = 10 * v8;
                if ((v22 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_33;
                }
                LODWORD(v8) = v22 + v21;
                if (__CFADD__(v22, v21)) {
                  goto LABEL_33;
                }
                char v9 = 0;
                ++v20;
                if (!--v19) {
                  goto LABEL_37;
                }
              }
            }
            goto LABEL_36;
          }
        }
      }
LABEL_33:
      LODWORD(v8) = 0;
LABEL_34:
      char v9 = 1;
      goto LABEL_37;
    }
    if (v3)
    {
      if (v3 != 1)
      {
        unsigned __int8 v10 = BYTE1(result) - 48;
        if ((BYTE1(result) - 48) <= 9u)
        {
          LODWORD(v8) = 0;
          BOOL v11 = v10 == 0;
          unsigned int v12 = -v10;
          if (!v11) {
            goto LABEL_34;
          }
          if (v3 == 2)
          {
            char v9 = 0;
            LODWORD(v8) = v12;
LABEL_37:
            swift_bridgeObjectRelease();
            LODWORD(v17) = v9 & 1;
            goto LABEL_38;
          }
          unsigned __int8 v23 = BYTE2(result) - 48;
          if ((BYTE2(result) - 48) <= 9u)
          {
            uint64_t v24 = 10 * v12;
            if ((v24 & 0xFFFFFFFF00000000) == 0)
            {
              LODWORD(v8) = v24 - v23;
              if (v24 >= v23)
              {
                uint64_t v25 = v3 - 3;
                if (v25)
                {
                  uint64_t v26 = (unsigned __int8 *)v29 + 3;
                  while (1)
                  {
                    unsigned int v27 = *v26 - 48;
                    if (v27 > 9) {
                      goto LABEL_33;
                    }
                    uint64_t v28 = 10 * v8;
                    if ((v28 & 0xFFFFFFFF00000000) != 0) {
                      goto LABEL_33;
                    }
                    LODWORD(v8) = v28 - v27;
                    if (v28 < v27) {
                      goto LABEL_33;
                    }
                    char v9 = 0;
                    ++v26;
                    if (!--v25) {
                      goto LABEL_37;
                    }
                  }
                }
LABEL_36:
                char v9 = 0;
                goto LABEL_37;
              }
            }
          }
        }
      }
      goto LABEL_33;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10000EABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)((swift_isaMask & *v2) + 0x50);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = __chkstk_darwin(a1, a2);
  uint64_t v7 = (char *)&v9 - v6;
  if (*(void *)((char *)v2 + *(void *)(v8 + 128)))
  {
    swift_retain();
    sub_10000BC44((uint64_t)v7);
    CurrentValueSubject.send(_:)();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return result;
}

void sub_10000EBD4()
{
}

uint64_t sub_10000EC04(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100008614(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *sub_10000EC60@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unsigned char *sub_10000ECD0@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100033DEC(a1, a2);
}

uint64_t sub_10000ECEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000ED34()
{
  return swift_getGenericMetadata();
}

unsigned char *sub_10000ED74@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_10000ECD0(a1, a2);
}

uint64_t sub_10000ED8C()
{
  if (*(void *)(v0 + 56))
  {
    uint64_t v1 = *(void *)(v0 + 56);
  }
  else
  {
    uint64_t v1 = sub_10000EDEC(v0);
    *(void *)(v0 + 56) = v1;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v1;
}

uint64_t sub_10000EDEC(uint64_t a1)
{
  uint64_t v38 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v1 - 8);
  uint64_t v44 = v1;
  __chkstk_darwin(v1, v2);
  uint64_t v40 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v4 - 8);
  uint64_t v42 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v39 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchTimeInterval();
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  __chkstk_darwin(v7, v8);
  unsigned __int8 v10 = (uint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v34 = *(void *)(v11 - 8);
  uint64_t v35 = v11;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  unsigned int v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  unsigned __int8 v23 = (char *)&v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F6C8();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_10000F760(&qword_1000F6E08, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_100008614(&qword_1000F6E10);
  sub_10000F7A8(&qword_1000F6E18, &qword_1000F6E10);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v24 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  swift_getObjectType();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v25 = v35;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v34 + 8);
  v26(v15, v35);
  *unsigned __int8 v10 = 0;
  uint64_t v28 = v36;
  uint64_t v27 = v37;
  (*(void (**)(void *, void, uint64_t))(v36 + 104))(v10, enum case for DispatchTimeInterval.nanoseconds(_:), v37);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  (*(void (**)(void *, uint64_t))(v28 + 8))(v10, v27);
  v26(v18, v25);
  uint64_t v29 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = sub_10000F740;
  aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003CE34;
  aBlock[3] = &unk_1000E3BF8;
  char v30 = _Block_copy(aBlock);
  swift_retain();
  unint64_t v31 = v39;
  static DispatchQoS.unspecified.getter();
  unsigned __int8 v32 = v40;
  sub_10000F3C0();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v44);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v31, v42);
  swift_release();
  swift_release();
  return v24;
}

uint64_t sub_10000F33C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void (**)(uint64_t))(result + 16);
    sub_10000F7F8((uint64_t)v1);
    uint64_t result = swift_release();
    if (v1)
    {
      v1(result);
      return sub_10000F808((uint64_t)v1);
    }
  }
  return result;
}

uint64_t sub_10000F3C0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_10000F488()
{
  sub_10000ED8C();
  swift_getObjectType();
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease();
  if ((*(unsigned char *)(v0 + 40) & 1) == 0)
  {
    *(unsigned char *)(v0 + 40) = 1;
    sub_10000ED8C();
    swift_getObjectType();
    OS_dispatch_source.resume()();
    swift_unknownObjectRelease();
  }
  uint64_t v1 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  sub_10000F808(v1);
  sub_10000F808(*(void *)(v0 + 16));

  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_10000F514()
{
  sub_10000F488();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RepeatingTimer()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for RepeatingTimer.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000F638);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RepeatingTimer.State()
{
  return &type metadata for RepeatingTimer.State;
}

unint64_t sub_10000F674()
{
  unint64_t result = qword_1000F6DF8;
  if (!qword_1000F6DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6DF8);
  }
  return result;
}

unint64_t sub_10000F6C8()
{
  unint64_t result = qword_1000F6E00;
  if (!qword_1000F6E00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000F6E00);
  }
  return result;
}

uint64_t sub_10000F708()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000F740()
{
  return sub_10000F33C();
}

uint64_t sub_10000F748(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10000F758()
{
  return swift_release();
}

uint64_t sub_10000F760(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000F7A8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009F40(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000F7F8(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10000F808(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10000F818()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UserAccountPrefs()
{
  return self;
}

uint64_t sub_10000F87C()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UserAccountPrefBool()
{
  return self;
}

uint64_t sub_10000F8E0()
{
  if ([v0 _remoteViewControllerProxy])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  sub_100012744((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    sub_100008614(&qword_1000F7048);
    if (swift_dynamicCast()) {
      return v2;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_1000127AC((uint64_t)v4);
    return 0;
  }
}

id sub_10000F99C()
{
  id v1 = sub_10006ED9C();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for MainViewController();
  return [super dealloc];
}

void sub_10000FB08(id a1, void (*a2)(void *))
{
  unint64_t v27 = 0xD000000000000025;
  unint64_t v28 = 0x80000001000BD870;
  if (a1 && (id v4 = [a1 userInfo]) != 0)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v29 = v6;
    sub_100008614(qword_1000F7080);
    uint64_t v7 = String.init<A>(describing:)();
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v7 = 7104878;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  id v11 = sub_10006ED9C();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  if (!a1)
  {
    __break(1u);
    goto LABEL_33;
  }
  id v13 = [a1 userInfo];
  if (!v13)
  {
    id v20 = sub_10006ED9C();
    unsigned int v15 = String._bridgeToObjectiveC()();
    [v20 ulog:90 message:v15];

    uint64_t v21 = (void *)sub_10000F8E0();
    if (v21)
    {
      [v21 invalidate];
      uint64_t v21 = (void *)swift_unknownObjectRelease();
    }
    if (a2) {
      goto LABEL_31;
    }
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v14 = v13;
  unsigned int v15 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (v15[2] && (unint64_t v16 = sub_10005BF24((uint64_t)&v27), (v17 & 1) != 0))
  {
    sub_10000E724(v15[7] + 32 * v16, (uint64_t)&v29);
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  sub_100012998((uint64_t)&v27);
  if (!*((void *)&v30 + 1))
  {
LABEL_18:
    sub_1000127AC((uint64_t)&v29);
    goto LABEL_19;
  }
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = 0xD00000000000001DLL;
    unint64_t v19 = 0x80000001000BD8C0;
    sub_100010A8C();
LABEL_26:
    uint64_t v21 = (void *)sub_10000D6B8(v18, v19);
    goto LABEL_30;
  }
LABEL_19:
  AnyHashable.init<A>(_:)();
  if (v15[2] && (unint64_t v22 = sub_10005BF24((uint64_t)&v27), (v23 & 1) != 0))
  {
    sub_10000E724(v15[7] + 32 * v22, (uint64_t)&v29);
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
  }
  sub_100012998((uint64_t)&v27);
  if (*((void *)&v30 + 1))
  {
    if (swift_dynamicCast())
    {
      swift_bridgeObjectRelease();
      uint64_t v18 = 0xD00000000000002ALL;
      unint64_t v19 = 0x80000001000BD8E0;
      sub_100010F78();
      goto LABEL_26;
    }
  }
  else
  {
    sub_1000127AC((uint64_t)&v29);
  }
  unint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  unint64_t v27 = 0xD00000000000001FLL;
  unint64_t v28 = 0x80000001000BD910;
  v24._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v25 = sub_10006ED9C();
  swift_bridgeObjectRetain();
  NSString v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v25 ulog:60 message:v26];
  swift_bridgeObjectRelease();

  uint64_t v21 = (void *)sub_10000F8E0();
  if (v21)
  {
    [v21 invalidate];
    uint64_t v21 = (void *)swift_unknownObjectRelease();
  }
LABEL_30:
  if (a2)
  {
LABEL_31:
    a2(v21);
    return;
  }
LABEL_33:
  __break(1u);
}

void sub_100010064()
{
  id v1 = sub_10006ED9C();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  int v3 = (void *)(v0 + OBJC_IVAR___MainViewController_environment);
  if (*(void *)(v0 + OBJC_IVAR___MainViewController_environment))
  {
    uint64_t v4 = v3[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(void (**)(void, uint64_t, uint64_t))(v4 + 16);
    swift_unknownObjectRetain();
    v6(0, ObjectType, v4);
    (*(void (**)(uint64_t, uint64_t))(v4 + 32))(ObjectType, v4);
    *int v3 = 0;
    v3[1] = 0;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    id v7 = sub_10006ED9C();
    NSString v8 = String._bridgeToObjectiveC()();
    [v7 ulog:40 message:v8];
  }
}

uint64_t sub_100010224(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v8);
  unint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock = 0;
  unint64_t v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  aBlock = (void **)0xD00000000000001ALL;
  unint64_t v26 = 0x80000001000BD7D0;
  sub_10001280C(0, &qword_1000F7060);
  sub_100012848();
  v11._countAndFlagsBits = Set.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  id v12 = sub_10006ED9C();
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:40 message:v13];
  swift_bridgeObjectRelease();

  uint64_t v14 = sub_100010664(a1);
  LOBYTE(a1) = sub_10000C964(16, v14);
  uint64_t result = swift_bridgeObjectRelease();
  if (a1)
  {
    if (qword_1000F66A8 != -1) {
      swift_once();
    }
    unint64_t v16 = (void *)qword_100111AB8;
    uint64_t v17 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v17;
    *(void *)(v18 + 24) = ObjectType;
    long long v29 = sub_1000128E8;
    uint64_t v30 = v18;
    aBlock = _NSConcreteStackBlock;
    unint64_t v26 = 1107296256;
    unint64_t v27 = sub_10003CE34;
    unint64_t v28 = &unk_1000E3D40;
    unint64_t v19 = _Block_copy(&aBlock);
    id v20 = v16;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    Swift::String v24 = _swiftEmptyArrayStorage;
    sub_1000125D0((unint64_t *)&qword_1000F6E20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100008614(&qword_1000F6E28);
    sub_100012908((unint64_t *)&qword_1000F6E30, &qword_1000F6E28);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v22);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100010664(uint64_t a1)
{
  unint64_t v22 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0) {
    uint64_t v2 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v2 = *(void *)(a1 + 16);
  }
  uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
  if (v2)
  {
    unint64_t v27 = _swiftEmptyArrayStorage;
    sub_10007B7B0(0, v2 & ~(v2 >> 63), 0);
    if (v22)
    {
      uint64_t result = __CocoaSet.startIndex.getter();
      char v5 = 1;
    }
    else
    {
      uint64_t result = sub_10009DA48(a1);
      char v5 = v6 & 1;
    }
    uint64_t v24 = result;
    uint64_t v25 = v4;
    char v26 = v5;
    if (v2 < 0)
    {
      __break(1u);
LABEL_23:
      __break(1u);
    }
    else
    {
      do
      {
        while (1)
        {
          int64_t v13 = v24;
          uint64_t v12 = v25;
          char v14 = v26;
          sub_10009D7D0(v24, v25, v26, a1);
          unint64_t v16 = v15;
          id v17 = [v15 events];

          uint64_t v18 = v27;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = sub_10007B7B0(0, v18[2] + 1, 1);
            uint64_t v18 = v27;
          }
          unint64_t v20 = v18[2];
          unint64_t v19 = v18[3];
          if (v20 >= v19 >> 1)
          {
            uint64_t result = sub_10007B7B0(v19 > 1, v20 + 1, 1);
            uint64_t v18 = v27;
          }
          v18[2] = v20 + 1;
          v18[v20 + 4] = v17;
          if (v22) {
            break;
          }
          int64_t v7 = sub_10009D6EC(v13, v12, v14, a1);
          uint64_t v9 = v8;
          char v11 = v10;
          sub_10001294C(v13, v12, v14);
          uint64_t v24 = v7;
          uint64_t v25 = v9;
          char v26 = v11 & 1;
          if (!--v2) {
            goto LABEL_20;
          }
        }
        if ((v14 & 1) == 0) {
          goto LABEL_23;
        }
        if (__CocoaSet.Index.handleBitPattern.getter()) {
          swift_isUniquelyReferenced_nonNull_native();
        }
        sub_100008614(&qword_1000F7078);
        uint64_t v21 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
        __CocoaSet.formIndex(after:isUnique:)();
        v21(v23, 0);
        --v2;
      }
      while (v2);
LABEL_20:
      sub_10001294C(v24, v25, v26);
      return (uint64_t)v27;
    }
  }
  return result;
}

void sub_1000108CC(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    if (*(void *)(Strong + OBJC_IVAR___MainViewController_environment))
    {
      swift_retain();
      sub_100008614(&qword_1000F7050);
      sub_100012908(&qword_1000F7070, &qword_1000F7050);
      Subject<>.send()();

      swift_release();
    }
    else
    {
      sub_10004DD60(60, 0xD000000000000023, (void *)0x80000001000BD7F0, 0, a2, (uint64_t)&off_1000E3C68);
      char v5 = (void *)sub_10000F8E0();
      if (v5)
      {
        [v5 invalidate];

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
  }
}

void sub_100010A8C()
{
  id v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = type metadata accessor for ClassicCardViewServiceContext();
  uint64_t v4 = __chkstk_darwin(v2, v3);
  char v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v25 - v8;
  unint64_t v27 = 0;
  unint64_t v28 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  unint64_t v27 = 0xD000000000000028;
  unint64_t v28 = 0x80000001000BD660;
  v10._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  id v11 = sub_10006ED9C();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  uint64_t v13 = sub_10000F8E0();
  if (v13)
  {
    uint64_t v14 = v13;
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_1000125D0(&qword_1000F7040, (void (*)(uint64_t))type metadata accessor for ClassicCardViewServiceContext);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    unint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    v17._countAndFlagsBits = 0x6F6320646E756F46;
    v17._object = (void *)0xEF203A747865746ELL;
    String.append(_:)(v17);
    _print_unlocked<A, B>(_:_:)();
    id v18 = sub_10006ED9C();
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v18 ulog:40 message:v19];
    swift_bridgeObjectRelease();

    sub_100012618((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClassicCardViewServiceContext);
    uint64_t v20 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v21 = (void *)swift_allocObject();
    v21[2] = v20;
    v21[3] = v14;
    v21[4] = ObjectType;
    type metadata accessor for ClassicCardAlertEnvironment();
    swift_allocObject();
    swift_unknownObjectRetain_n();
    unint64_t v22 = v1;
    uint64_t v23 = sub_10006CC40((uint64_t)v6, v14, v22, (uint64_t)sub_1000126C4, (uint64_t)v21);
    uint64_t v24 = (uint64_t *)&v22[OBJC_IVAR___MainViewController_environment];
    *uint64_t v24 = v23;
    v24[1] = (uint64_t)&off_1000E70F0;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1000126E4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClassicCardViewServiceContext);
  }
  else
  {
    id v15 = sub_10006ED9C();
    uint64_t ObjectType = (uint64_t)String._bridgeToObjectiveC()();
    [v15 ulog:60 message:ObjectType];

    unint64_t v16 = (void *)ObjectType;
  }
}

void sub_100010F78()
{
  id v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = type metadata accessor for NearbySharingInteractionViewServiceContext();
  uint64_t v4 = __chkstk_darwin(v2, v3);
  char v6 = (char *)&ObjectType - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&ObjectType - v8;
  unint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  unint64_t v26 = 0xD000000000000035;
  unint64_t v27 = 0x80000001000BD590;
  v10._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  id v11 = sub_10006ED9C();
  swift_bridgeObjectRetain();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v11 ulog:40 message:v12];
  swift_bridgeObjectRelease();

  unint64_t v28 = &type metadata for Feature;
  unint64_t v29 = sub_100012540();
  LOBYTE(v26) = 9;
  LOBYTE(v12) = isFeatureEnabled(_:)();
  sub_10000AF94((uint64_t)&v26);
  if (v12)
  {
    uint64_t v13 = sub_10000F8E0();
    if (v13)
    {
      uint64_t v14 = v13;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      sub_1000125D0(&qword_1000F7030, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewServiceContext);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      unint64_t v26 = 0;
      unint64_t v27 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      v17._countAndFlagsBits = 0x6F6320646E756F46;
      v17._object = (void *)0xEF203A747865746ELL;
      String.append(_:)(v17);
      _print_unlocked<A, B>(_:_:)();
      id v18 = sub_10006ED9C();
      swift_bridgeObjectRetain();
      NSString v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v18 ulog:40 message:v19];
      swift_bridgeObjectRelease();

      sub_100012618((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionViewServiceContext);
      uint64_t v20 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v21 = (void *)swift_allocObject();
      v21[2] = v20;
      v21[3] = v14;
      v21[4] = ObjectType;
      type metadata accessor for NearbySharingInteractionAlertEnvironment();
      swift_allocObject();
      swift_unknownObjectRetain_n();
      unint64_t v22 = v1;
      uint64_t v23 = sub_1000A309C((uint64_t)v6, v14, (uint64_t)v22, (uint64_t)sub_1000129EC, (uint64_t)v21);
      uint64_t v24 = (uint64_t **)&v22[OBJC_IVAR___MainViewController_environment];
      *uint64_t v24 = v23;
      v24[1] = (uint64_t *)&off_1000E9428;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_1000126E4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionViewServiceContext);
      return;
    }
    id v15 = sub_10006ED9C();
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 ulog:60 message:v16 ObjectType];
  }
  else
  {
    id v15 = sub_10006ED9C();
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 ulog:40 message:v16 ObjectType];
  }
}

id sub_1000114AC(uint64_t a1, void *a2, uint64_t a3)
{
  sub_10004DA44(0xD000000000000014, (void *)0x80000001000BD640, 0, a3, (uint64_t)&off_1000E3C68);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    uint64_t v6 = *(void *)(Strong + OBJC_IVAR___MainViewController_environment);
    uint64_t v7 = *(void *)(Strong + OBJC_IVAR___MainViewController_environment + 8);
    swift_unknownObjectRetain();

    if (v6)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v7 + 32))(ObjectType, v7);
      swift_unknownObjectRelease();
    }
  }
  swift_beginAccess();
  uint64_t v9 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v9)
  {
    Swift::String v10 = &v9[OBJC_IVAR___MainViewController_environment];
    *(void *)Swift::String v10 = 0;
    *((void *)v10 + 1) = 0;

    swift_unknownObjectRelease();
  }
  return [a2 invalidate];
}

void sub_1000115D0(uint64_t a1)
{
  uint64_t v2 = v1;
  v11.receiver = v2;
  v11.super_class = (Class)type metadata accessor for MainViewController();
  [super traitCollectionDidChange:a1];
  _StringGuts.grow(_:)(26);
  v4._countAndFlagsBits = 0xD00000000000001CLL;
  v4._object = (void *)0x80000001000BD790;
  String.append(_:)(v4);
  v5._object = (void *)0x80000001000BD7B0;
  v5._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v5);
  id v6 = [v2 traitCollection];
  [v6 _backlightLuminance];

  type metadata accessor for _UIBacklightLuminance(0);
  _print_unlocked<A, B>(_:_:)();
  id v7 = sub_10006ED9C();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:40 message:v8];
  swift_bridgeObjectRelease();

  id v9 = [v2 traitCollection];
  id v10 = [v9 _backlightLuminance];

  if (v10 == (id)1) {
    PassthroughSubject.send(_:)();
  }
}

id sub_1000117E4(char a1)
{
  uint64_t v2 = v1;
  unint64_t v12 = 0xD00000000000001CLL;
  unint64_t v13 = 0x80000001000BD770;
  uint64_t v4 = a1 & 1;
  BOOL v3 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (v3) {
    unint64_t v6 = 0xE500000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  id v8 = sub_10006ED9C();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 ulog:40 message:v9];
  swift_bridgeObjectRelease();

  v11.receiver = v2;
  v11.super_class = (Class)type metadata accessor for MainViewController();
  return [super viewDidAppear:v4];
}

void sub_100011938()
{
  id v1 = sub_10006ED9C();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for MainViewController();
  [super viewDidLoad];
  id v3 = [v0 view];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [self clearColor];
    [v4 setBackgroundColor:v5];
  }
  else
  {
    __break(1u);
  }
}

void sub_100011A78(void *a1, char a2)
{
  id v3 = v2;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  unint64_t v23 = 0xD000000000000031;
  unint64_t v24 = 0x80000001000BD6D0;
  if (a1)
  {
    sub_10001280C(0, &qword_1000F7058);
    id v6 = a1;
    uint64_t v7 = String.init<A>(describing:)();
    unint64_t v9 = v8;
  }
  else
  {
    unint64_t v9 = 0xE300000000000000;
    uint64_t v7 = 7104878;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x80000001000BD710;
  v11._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v11);
  uint64_t v12 = a2 & 1;
  if (v12) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (v12) {
    unint64_t v14 = 0xE400000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  id v16 = sub_10006ED9C();
  swift_bridgeObjectRetain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 ulog:40 message:v17];
  swift_bridgeObjectRelease();

  v22.receiver = v3;
  v22.super_class = (Class)type metadata accessor for MainViewController();
  [super viewDidMoveToWindow:a1 shouldAppearOrDisappear:v12];
  if (a1)
  {
    id v18 = a1;
    id v19 = [v18 _rootSheetPresentationController];
    if (v19)
    {
      id v20 = v19;
      [v19 _setShouldScaleDownBehindDescendantSheets:0];
    }
    else
    {
      id v20 = sub_10006ED9C();
      NSString v21 = String._bridgeToObjectiveC()();
      [v20 ulog:60 message:v21];

      id v18 = v21;
    }
  }
}

void sub_100011D20(void *a1, char a2)
{
  id v3 = v2;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  id v6 = [a1 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x3D746E6F7266202CLL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  if (a2) {
    uint64_t v12 = 1702195828;
  }
  else {
    uint64_t v12 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v13 = 0xE400000000000000;
  }
  else {
    unint64_t v13 = 0xE500000000000000;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease();
  id v15 = sub_10006ED9C();
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v15 ulog:40 message:v16];
  swift_bridgeObjectRelease();

  id v17 = [a1 parentViewController];
  if (v17)
  {
    id v18 = v17;
    sub_10001280C(0, &qword_1000F7020);
    id v19 = v3;
    id v20 = v18;
    LOBYTE(v18) = static NSObject.== infix(_:_:)();

    if (v18)
    {
      id v21 = sub_10006ED9C();
      NSString v42 = String._bridgeToObjectiveC()();
      [v21 ulog:60 message:v42];

      return;
    }
  }
  [a1 willMoveToParentViewController:v3];
  [v3 addChildViewController:a1];
  id v22 = [v3 view];
  if (!v22)
  {
    __break(1u);
    goto LABEL_24;
  }
  unint64_t v23 = v22;
  id v24 = [a1 view];
  if (!v24)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v25 = v24;
  [v23 addSubview:v24];

  if ((a2 & 1) == 0)
  {
    id v26 = [v3 view];
    if (!v26)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    unint64_t v27 = v26;
    id v28 = [a1 view];
    if (!v28)
    {
LABEL_28:
      __break(1u);
      return;
    }
    unint64_t v29 = v28;
    [v27 sendSubviewToBack:v28];
  }
  id v30 = [a1 view];
  if (!v30) {
    goto LABEL_25;
  }
  unint64_t v31 = v30;
  id v32 = [v3 view];
  if (!v32)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  id v33 = v32;
  [v32 frame];
  double v35 = v34;
  double v37 = v36;
  double v39 = v38;
  double v41 = v40;

  [v31 setFrame:v35, v37, v39, v41];

  [a1 didMoveToParentViewController:v3];
}

id sub_100012124(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = &v3[OBJC_IVAR___MainViewController_environment];
  *(void *)id v6 = 0;
  *((void *)v6 + 1) = 0;
  uint64_t v7 = OBJC_IVAR___MainViewController_backlightLuminanceBecameReducedSubject;
  sub_100008614(&qword_1000F7050);
  swift_allocObject();
  unint64_t v8 = v3;
  *(void *)&v3[v7] = PassthroughSubject.init()();
  uint64_t v9 = OBJC_IVAR___MainViewController_homeGestureEventSubject;
  swift_allocObject();
  *(void *)&v8[v9] = PassthroughSubject.init()();

  if (a2)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for MainViewController();
  id v11 = [super initWithNibName:v10 bundle:a3];

  return v11;
}

id sub_100012294(void *a1)
{
  id v3 = &v1[OBJC_IVAR___MainViewController_environment];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = OBJC_IVAR___MainViewController_backlightLuminanceBecameReducedSubject;
  sub_100008614(&qword_1000F7050);
  swift_allocObject();
  id v5 = v1;
  *(void *)&v1[v4] = PassthroughSubject.init()();
  uint64_t v6 = OBJC_IVAR___MainViewController_homeGestureEventSubject;
  swift_allocObject();
  *(void *)&v5[v6] = PassthroughSubject.init()();

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for MainViewController();
  [super initWithCoder:a1];

  return v7;
}

uint64_t type metadata accessor for MainViewController()
{
  return self;
}

uint64_t sub_1000123B4()
{
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v0 = *(id *)(qword_100111A10 + 976);
  uint64_t v1 = sub_10002CE8C();
  id v3 = v2;

  if (v3)
  {
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = v1;
    v4._object = v3;
    String.append(_:)(v4);
    id v5 = sub_10006ED9C();
    swift_bridgeObjectRetain();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 ulog:v6 message:0xD000000000000019 0x80000001000BD510];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v6 = sub_100012504();
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }

  return v1;
}

id sub_100012504()
{
  id v0 = (id)GestaltCopyAnswer();

  return v0;
}

unint64_t sub_100012540()
{
  unint64_t result = qword_1000F7028;
  if (!qword_1000F7028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7028);
  }
  return result;
}

uint64_t sub_100012594()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000125D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100012618(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100012684()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_1000126C4()
{
  return sub_1000114AC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000126E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100012744(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008614(&qword_1000F6CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000127AC(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F6CC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001280C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_100012848()
{
  unint64_t result = qword_1000F7068;
  if (!qword_1000F7068)
  {
    sub_10001280C(255, &qword_1000F7060);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7068);
  }
  return result;
}

uint64_t sub_1000128B0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000128E8()
{
  sub_1000108CC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000128F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100012900()
{
  return swift_release();
}

uint64_t sub_100012908(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009F40(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001294C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100012958()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100012990()
{
  return sub_10009A34C(*(void *)(v0 + 16));
}

uint64_t sub_100012998(uint64_t a1)
{
  return a1;
}

id sub_1000129F0()
{
  id result = (id)swift_dynamicCastTypeToObjCProtocolConditional();
  if (result) {
    return [(id)swift_getObjCClassFromMetadata() supportsSecureCoding];
  }
  return result;
}

id sub_100012A38(void *a1, id a2)
{
  sub_10000AEFC(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v2)
  {
    sub_10000AEFC(v12, v12[3]);
    sub_100013288();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    id v5 = objc_allocWithZone((Class)NSKeyedUnarchiver);
    sub_10000E780(v10, v11);
    id v6 = sub_1000132DC();
    sub_10000D6B8(v10, v11);
    [v6 setRequiresSecureCoding:(unint64_t)sub_1000129F0() & 1];
    id v8 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithCoder:v6];
    if (v8)
    {
      a2 = v8;

      sub_10000D6B8(v10, v11);
      sub_10000AF94((uint64_t)v12);
      sub_10000AF94((uint64_t)a1);
      return a2;
    }
    sub_10001339C();
    swift_allocError();
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0xE000000000000000;
    *(unsigned char *)(v9 + 16) = 7;
    swift_willThrow();

    sub_10000D6B8(v10, v11);
    sub_10000AF94((uint64_t)v12);
  }
  sub_10000AF94((uint64_t)a1);
  return a2;
}

uint64_t sub_100012BF8(void *a1, void *a2)
{
  sub_10000AEFC(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  id v3 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:(unint64_t)sub_1000129F0() & 1];
  [a2 encodeWithCoder:v3];
  [v3 finishEncoding];
  id v4 = [v3 encodedData];
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  sub_1000133F0((uint64_t)v9, v10);
  sub_100013440();
  dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();

  sub_10000D6B8(v5, v7);
  return sub_10000AF94((uint64_t)v9);
}

uint64_t sub_100012D38()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

id sub_100012D74@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id result = sub_100012A38(a1, *(id *)(a2 + 16));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_100012DA4(void *a1)
{
  return sub_100012BF8(a1, *v1);
}

uint64_t sub_100012DC8()
{
  return sub_100012D38();
}

void *sub_100012DDC(void *a1, void *a2)
{
  uint64_t v5 = sub_10000AEFC(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    sub_10000AF94((uint64_t)a1);
  }
  else
  {
    sub_10000AEFC(v8, v8[3]);
    if (dispatch thunk of SingleValueDecodingContainer.decodeNil()())
    {
      uint64_t v5 = 0;
    }
    else
    {
      sub_100013224((uint64_t)a1, (uint64_t)v7);
      uint64_t v5 = sub_100012A38(v7, a2);
    }
    sub_10000AF94((uint64_t)v8);
    sub_10000AF94((uint64_t)a1);
  }
  return v5;
}

uint64_t sub_100012ECC(void *a1, void *a2)
{
  if (a2)
  {
    swift_unknownObjectRetain();
    sub_100012BF8(a1, a2);
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_10000AEFC(a1, a1[3]);
    dispatch thunk of Encoder.singleValueContainer()();
    sub_1000133F0((uint64_t)v5, v6);
    dispatch thunk of SingleValueEncodingContainer.encodeNil()();
    return sub_10000AF94((uint64_t)v5);
  }
}

uint64_t sub_100012F90(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      char v2 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v2) {
        return 1;
      }
    }
  }
  else if (!a2)
  {
    return 1;
  }
  return 0;
}

void *sub_100013024@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id result = sub_100012DDC(a1, *(void **)(a2 + 16));
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_100013054(void *a1)
{
  return sub_100012ECC(a1, *v1);
}

uint64_t sub_100013078(uint64_t *a1, uint64_t *a2)
{
  return sub_100012F90(*a1, *a2);
}

uint64_t sub_10001308C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for NSCodingCodable()
{
  return sub_10000ED34();
}

void *sub_1000130AC(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_1000130DC()
{
  return swift_unknownObjectRelease();
}

void *sub_1000130E4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *initializeWithTake for MRNowPlayingPlayerResponseWrapper(void *result, void *a2)
{
  *id result = *a2;
  return result;
}

void *sub_10001312C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MRNowPlayingPlayerResponseWrapper(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MRNowPlayingPlayerResponseWrapper(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)id result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)id result = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for NSCodingCodableOptional()
{
  return sub_10000ED34();
}

uint64_t sub_100013224(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100013288()
{
  unint64_t result = qword_1000F71E8;
  if (!qword_1000F71E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F71E8);
  }
  return result;
}

id sub_1000132DC()
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v6 = 0;
  id v2 = [v0 initForReadingFromData:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

unint64_t sub_10001339C()
{
  unint64_t result = qword_1000F71F0;
  if (!qword_1000F71F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F71F0);
  }
  return result;
}

uint64_t sub_1000133F0(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_100013440()
{
  unint64_t result = qword_1000F7258[0];
  if (!qword_1000F7258[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000F7258);
  }
  return result;
}

float64x2_t sub_100013498@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>, float a3@<S0>)
{
  double v4 = a3;
  float64x2_t v5 = vaddq_f64(vmulq_n_f64(v3[1], 1.0 - v4), vmulq_n_f64(a1[1], v4));
  *a2 = vaddq_f64(vmulq_n_f64(*v3, 1.0 - v4), vmulq_n_f64(*a1, v4));
  a2[1] = v5;
  float64x2_t result = vaddq_f64(vmulq_n_f64(v3[2], 1.0 - v4), vmulq_n_f64(a1[2], v4));
  a2[2] = result;
  return result;
}

uint64_t sub_1000134E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_1000134EC()
{
  uint64_t result = type metadata accessor for ClosedRange();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void **sub_1000135D8(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = v7 + v6;
  uint64_t v9 = ((v7 + v6) & ~v6) + v7;
  uint64_t v10 = v7 + 7;
  unint64_t v11 = ((v7 + 7 + ((v9 + v6 + ((v6 + 8) & ~v6)) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 16;
  int v12 = *(_DWORD *)(v5 + 80) & 0x100000;
  objc_super v13 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v12 != 0 || v11 > 0x18)
  {
    NSString v16 = &v13[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v6;
    uint64_t v26 = (uint64_t)a1 + v6 + 8;
    uint64_t v18 = v26 & ~v6;
    uint64_t v27 = (uint64_t)a2 + v6 + 8;
    id v28 = a1;
    uint64_t v19 = v27 & ~v6;
    id v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    id v21 = v13;
    v20(v18, v19, v4);
    v20((v8 + v18) & v17, (v8 + v19) & v17, v4);
    v20(((v26 | v6) + v9) & v17, ((v27 | v6) + v9) & v17, v4);
    unint64_t v22 = (v10 + (((v26 | v6) + v9) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v10 + (((v27 | v6) + v9) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v23 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
    }
    else
    {
      uint64_t v24 = *(void *)(v23 + 8);
      *(void *)unint64_t v22 = *(void *)v23;
      *(void *)(v22 + 8) = v24;
      swift_retain();
    }
    return v28;
  }
  return (void **)v16;
}

uint64_t sub_1000137B4(id *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v7 = v5 + 8;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v6(v9, v4);
  uint64_t v10 = *(void *)(v7 + 56);
  uint64_t v11 = v10 + v8 + v9;
  v6(v11 & ~v8, v4);
  uint64_t v12 = (v11 + ((v10 + v8) & ~v8)) & ~v8;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v6)(v12, v4);
  if (*(void *)((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

void **sub_1000138C4(void **a1, void **a2, uint64_t a3)
{
  id v3 = *a2;
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v9 = (unint64_t)a1 + v8 + 8;
  unint64_t v10 = (unint64_t)a2 + v8 + 8;
  id v11 = v3;
  v6(v9 & ~v8, v10 & ~v8, v4);
  uint64_t v12 = *(void *)(v7 + 48);
  v6((v12 + v8 + (v9 & ~v8)) & ~v8, (v12 + v8 + (v10 & ~v8)) & ~v8, v4);
  uint64_t v13 = ((v12 + v8) & ~v8) + v12;
  unint64_t v14 = ((v9 | v8) + v13) & ~v8;
  unint64_t v15 = ((v10 | v8) + v13) & ~v8;
  v6(v14, v15, v4);
  unint64_t v16 = (v12 + 7 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v12 + 7 + v15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v17 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v18 = *(void *)(v17 + 8);
    *(void *)unint64_t v16 = *(void *)v17;
    *(void *)(v16 + 8) = v18;
    swift_retain();
  }
  return a1;
}

void **sub_100013A08(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  id v11 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24);
  uint64_t v12 = v10 + 24;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  unint64_t v14 = (unint64_t)a1 + v13 + 8;
  unint64_t v15 = (unint64_t)a2 + v13 + 8;
  v11(v14 & ~v13, v15 & ~v13, v9);
  uint64_t v16 = *(void *)(v12 + 40);
  v11((v16 + v13 + (v14 & ~v13)) & ~v13, (v16 + v13 + (v15 & ~v13)) & ~v13, v9);
  uint64_t v17 = ((v16 + v13) & ~v13) + v16;
  unint64_t v18 = ((v14 | v13) + v17) & ~v13;
  unint64_t v19 = ((v15 | v13) + v17) & ~v13;
  v11(v18, v19, v9);
  id v20 = (void *)((v16 + 7 + v18) & 0xFFFFFFFFFFFFFFF8);
  id v21 = (unint64_t *)((v16 + 7 + v19) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = *v21;
  if (*v20 < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      unint64_t v24 = v21[1];
      *id v20 = v22;
      v20[1] = v24;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)id v20 = *(_OWORD *)v21;
    return a1;
  }
  if (v22 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v23 = v21[1];
  *id v20 = v22;
  v20[1] = v23;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_100013BA0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32);
  uint64_t v6 = v4 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v8 = (unint64_t)a1 + v7 + 8;
  unint64_t v9 = (unint64_t)a2 + v7 + 8;
  v5(v8 & ~v7, v9 & ~v7, v3);
  uint64_t v10 = *(void *)(v6 + 32);
  v5((v10 + v7 + (v8 & ~v7)) & ~v7, (v10 + v7 + (v9 & ~v7)) & ~v7, v3);
  uint64_t v11 = ((v10 + v7) & ~v7) + v10;
  unint64_t v12 = ((v8 | v7) + v11) & ~v7;
  unint64_t v13 = ((v9 | v7) + v11) & ~v7;
  v5(v12, v13, v3);
  unint64_t v14 = (v10 + 7 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (uint64_t *)((v10 + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = *v15;
  if ((unint64_t)*v15 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = v15[1];
    *(void *)unint64_t v14 = v16;
    *(void *)(v14 + 8) = v17;
  }
  return a1;
}

void **sub_100013CDC(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40);
  uint64_t v10 = v8 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  unint64_t v12 = (unint64_t)a1 + v11 + 8;
  unint64_t v13 = (unint64_t)a2 + v11 + 8;
  v9(v12 & ~v11, v13 & ~v11, v7);
  uint64_t v14 = *(void *)(v10 + 24);
  v9((v14 + v11 + (v12 & ~v11)) & ~v11, (v14 + v11 + (v13 & ~v11)) & ~v11, v7);
  uint64_t v15 = ((v14 + v11) & ~v11) + v14;
  unint64_t v16 = ((v12 | v11) + v15) & ~v11;
  unint64_t v17 = ((v13 | v11) + v15) & ~v11;
  v9(v16, v17, v7);
  unint64_t v18 = (void *)((v14 + 7 + v16) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (unint64_t *)((v14 + 7 + v17) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = *v19;
  if (*v18 < 0xFFFFFFFFuLL)
  {
    if (v20 >= 0xFFFFFFFF)
    {
      unint64_t v22 = v19[1];
      *unint64_t v18 = v20;
      v18[1] = v22;
      return a1;
    }
LABEL_7:
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
    return a1;
  }
  if (v20 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v21 = v19[1];
  *unint64_t v18 = v20;
  v18[1] = v21;
  swift_release();
  return a1;
}

uint64_t sub_100013E64(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    unint64_t v9 = ((v7 + ((v7 + v6 + ((v7 + v6) & ~v6) + ((v6 + 8) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v10 = a2 - v8;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100013FD0);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v8 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
  }
  uint64_t v18 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void sub_100013FE4(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = ((v10 + v9) & ~v9) + v10;
  size_t v12 = ((v10 + ((((v9 + 8) | v9) + v11) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v16 = 0;
    int v17 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v16)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_56;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v21 = (unsigned char *)((unint64_t)&a1[v9 + 8] & ~v9);
              if (v7 >= a2)
              {
                uint64_t v25 = *(void (**)(unint64_t))(v6 + 56);
                unint64_t v26 = (unint64_t)&a1[v9 + 8] & ~v9;
                v25(v26);
              }
              else
              {
                if (v11 <= 3) {
                  int v22 = ~(-1 << (8 * v11));
                }
                else {
                  int v22 = -1;
                }
                if (v11)
                {
                  int v23 = v22 & (~v7 + a2);
                  if (v11 <= 3) {
                    int v24 = v11;
                  }
                  else {
                    int v24 = 4;
                  }
                  bzero(v21, v11);
                  switch(v24)
                  {
                    case 2:
                      *(_WORD *)unint64_t v21 = v23;
                      break;
                    case 3:
                      *(_WORD *)unint64_t v21 = v23;
                      v21[2] = BYTE2(v23);
                      break;
                    case 4:
                      *(_DWORD *)unint64_t v21 = v23;
                      break;
                    default:
                      *unint64_t v21 = v23;
                      break;
                  }
                }
              }
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *(void *)a1 = v20;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = a3 - v8;
    if (((v10 + ((((v9 + 8) | v9) + v11) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    int v17 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (v12) {
    int v18 = 1;
  }
  else {
    int v18 = v17;
  }
  if (v12)
  {
    int v19 = ~v8 + a2;
    bzero(a1, v12);
    *(_DWORD *)a1 = v19;
  }
  switch(v16)
  {
    case 1:
      a1[v12] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v18;
      break;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x10001427CLL);
    case 4:
      *(_DWORD *)&a1[v12] = v18;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for Clamping()
{
  return sub_10000ED34();
}

uint64_t sub_1000142CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v21 = OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mrResponse;
  sub_100008614(&qword_1000F76E0);
  swift_allocObject();
  *(void *)(v15 + v21) = sub_10001C434(0, 0, 0, 0);
  sub_100021188(a1, v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_cardInfo, (uint64_t (*)(void))_s8CardInfoOMa);
  *(void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_deviceAssetType) = a2;
  *(void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_host) = a3;
  int v22 = (void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_initialMediaTransferStatus);
  *int v22 = a4;
  v22[1] = a5;
  int v23 = (void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_localDeviceModel);
  *int v23 = a6;
  v23[1] = a7;
  *(void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController) = a8;
  *(void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__isActive) = a9;
  *(void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__activityDisplayContext) = a10;
  *(void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__cardMode) = a11;
  *(void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mediaTransferStatus) = a12;
  *(void *)(v15 + v21) = a13;
  swift_release();
  *(void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__progress) = a14;
  *(void *)(v15 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_homeGestureEventPublisher) = a15;
  return v15;
}

uint64_t sub_100014484()
{
  sub_1000211F0(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_cardInfo, (uint64_t (*)(void))_s8CardInfoOMa);
  swift_unknownObjectRelease();
  sub_10001CB40(*(id *)(v0 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_initialMediaTransferStatus));
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100014578()
{
  sub_100014484();

  return swift_deallocClassInstance();
}

uint64_t sub_1000145D0()
{
  return type metadata accessor for CardPresenterModel(0);
}

uint64_t type metadata accessor for CardPresenterModel(uint64_t a1)
{
  return sub_1000094F4(a1, qword_1000F7338);
}

uint64_t sub_1000145F8()
{
  uint64_t result = _s8CardInfoOMa();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for CardPresenterState()
{
  return self;
}

uint64_t *sub_1000146FC()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle;
  if (*(void *)(v0 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle))
  {
    unint64_t v2 = *(uint64_t **)(v0 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = sub_1000147AC();
    uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC13PCViewService13CardPresenter_homeAccessoryViewHandleState);
    type metadata accessor for HomeAccessoryViewHandle();
    swift_allocObject();
    swift_retain();
    unint64_t v2 = sub_100083FA8(v4, v5);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000147AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = _s8CardInfoOMa();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandleModel;
  if (*(void *)(v0 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandleModel))
  {
    uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandleModel);
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC13PCViewService13CardPresenter_model);
    sub_100021120(v8 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_cardInfo, (uint64_t)v5, (uint64_t (*)(void))_s8CardInfoOMa);
    uint64_t v9 = *(void *)(v8 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mediaTransferStatus);
    uint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mrResponse);
    type metadata accessor for HomeAccessoryViewHandleModel();
    uint64_t v7 = swift_allocObject();
    uint64_t v11 = OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel__mrResponse;
    sub_100008614(&qword_1000F76E0);
    swift_allocObject();
    swift_retain();
    swift_retain();
    *(void *)(v7 + v11) = sub_10001C434(0, 0, 0, 0);
    sub_100021188((uint64_t)v5, v7 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel_cardInfo, (uint64_t (*)(void))_s8CardInfoOMa);
    *(void *)(v7 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel__mediaTransferStatus) = v9;
    *(void *)(v7 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel__mrResponse) = v10;
    swift_release();
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t (**sub_100014970())(uint64_t a1)
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___proximityCardHeaderViewModel;
  if (*(void *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___proximityCardHeaderViewModel))
  {
    uint64_t v7 = *(uint64_t (***)(uint64_t))(v1
                                            + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___proximityCardHeaderViewModel);
  }
  else
  {
    sub_100021120(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_initialActivityDisplayContext, (uint64_t)v5, type metadata accessor for ActivityDisplayContext);
    uint64_t v8 = swift_allocObject();
    swift_unknownObjectWeakInit();
    type metadata accessor for ProximityCardHeaderViewModel();
    swift_allocObject();
    uint64_t v7 = sub_1000928A8((uint64_t)v5, (uint64_t)sub_1000210B0, v8);
    swift_release();
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

void sub_100014AB0(char a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_100019124(a1 & 1);
  }
}

id sub_100014B0C()
{
  id v1 = sub_10006EDDC();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for CardPresenter(0);
  [super dealloc];
}

uint64_t sub_100014D58()
{
  return type metadata accessor for CardPresenter(0);
}

uint64_t type metadata accessor for CardPresenter(uint64_t a1)
{
  return sub_1000094F4(a1, (uint64_t *)&unk_1000F76D0);
}

void sub_100014D80()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100008614(&qword_1000F7878);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v169 = sub_100008614(&qword_1000F7880);
  uint64_t v168 = *(void *)(v169 - 8);
  uint64_t v8 = __chkstk_darwin(v169, v7);
  v166 = (char *)&v161 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = v9;
  __chkstk_darwin(v8, v10);
  v167 = (char *)&v161 - v11;
  uint64_t v203 = sub_100008614(&qword_1000F7888);
  uint64_t v202 = *(void *)(v203 - 8);
  __chkstk_darwin(v203, v12);
  v201 = (char *)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v197 = sub_100008614(&qword_1000F7890);
  uint64_t v196 = *(void *)(v197 - 8);
  __chkstk_darwin(v197, v14);
  v194 = (char *)&v161 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = sub_100008614(&qword_1000F7898);
  uint64_t v199 = *(void *)(v200 - 8);
  uint64_t v17 = __chkstk_darwin(v200, v16);
  v198 = (char *)&v161 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v195 = v18;
  __chkstk_darwin(v17, v19);
  v209 = (char *)&v161 - v20;
  uint64_t v193 = sub_100008614(&qword_1000F78A0);
  uint64_t v192 = *(void *)(v193 - 8);
  __chkstk_darwin(v193, v21);
  v191 = (char *)&v161 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = sub_100008614(&qword_1000F78A8);
  uint64_t v186 = *(void *)(v187 - 8);
  __chkstk_darwin(v187, v23);
  v184 = (char *)&v161 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = sub_100008614(&qword_1000F78B0);
  uint64_t v189 = *(void *)(v190 - 8);
  uint64_t v26 = __chkstk_darwin(v190, v25);
  v188 = (char *)&v161 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v185 = v27;
  __chkstk_darwin(v26, v28);
  v208 = (char *)&v161 - v29;
  uint64_t v180 = sub_100008614(&qword_1000F78B8);
  uint64_t v179 = *(void *)(v180 - 8);
  __chkstk_darwin(v180, v30);
  v178 = (char *)&v161 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v183 = sub_100008614(&qword_1000F78C0);
  uint64_t v182 = *(void *)(v183 - 8);
  __chkstk_darwin(v183, v32);
  v181 = (char *)&v161 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = sub_100008614(&qword_1000F78C8);
  uint64_t v176 = *(void *)(v177 - 8);
  __chkstk_darwin(v177, v34);
  v175 = (char *)&v161 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v174 = sub_100008614(&qword_1000F78D0);
  uint64_t v173 = *(void *)(v174 - 8);
  __chkstk_darwin(v174, v36);
  v172 = (char *)&v161 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100008614(&qword_1000F78D8);
  __chkstk_darwin(v38 - 8, v39);
  v217 = (char *)&v161 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = sub_100008614(&qword_1000F78E0);
  uint64_t v170 = *(void *)(v171 - 8);
  uint64_t v42 = __chkstk_darwin(v171, v41);
  v206 = (char *)&v161 - (((unint64_t)v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = v43;
  __chkstk_darwin(v42, v44);
  v207 = (char *)&v161 - v45;
  id v46 = sub_10006EDDC();
  NSString v47 = String._bridgeToObjectiveC()();
  [v46 ulog:40 message:v47];

  uint64_t v48 = *(void *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_model);
  uint64_t v49 = OBJC_IVAR____TtC13PCViewService18CardPresenterModel_host;
  [*(id *)(v48 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_host) setAllowsAlertStacking:1];
  [*(id *)(v48 + v49) setDesiredHardwareButtonEvents:16];
  uint64_t v50 = *(void **)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_blurView);
  uint64_t v51 = OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController;
  uint64_t v52 = v48;
  id v53 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v48
                                                              + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController), "view"));
  if (!v53)
  {
    __break(1u);
    goto LABEL_9;
  }
  v54 = v53;
  v162 = v6;
  uint64_t v163 = v3;
  uint64_t v164 = v2;
  [v53 bounds];
  double v56 = v55;
  double v58 = v57;
  double v60 = v59;
  double v62 = v61;

  [v50 setFrame:v56, v58, v60, v62];
  id v63 = [*(id *)(v48 + v51) view];
  if (!v63)
  {
LABEL_9:
    __break(1u);
    return;
  }
  uint64_t v64 = v63;
  [v63 addSubview:v50];

  uint64_t v65 = sub_1000147AC();
  uint64_t v66 = *(void *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_homeAccessoryViewHandleState);
  type metadata accessor for HomeAccessoryViewHandle();
  swift_allocObject();
  swift_retain();
  *(void *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle) = sub_100083FA8(v65, v66);
  swift_release();
  id v221 = *(id *)(v66 + 16);
  swift_retain();
  swift_retain();
  sub_100008614(&qword_1000F7740);
  sub_100012908(&qword_1000F78E8, &qword_1000F7740);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v67 = v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_tasks;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v221 = *(id *)(*(void *)(v1 + OBJC_IVAR____TtC13PCViewService13CardPresenter_educationViewModel)
               + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_educationViewEventSubject);
  sub_100008614(&qword_1000F78F0);
  sub_100012908(&qword_1000F78F8, &qword_1000F78F0);
  id v221 = (id)Publisher.eraseToAnyPublisher()();
  swift_retain();
  sub_100008614(&qword_1000F7900);
  sub_100012908(&qword_1000F7908, &qword_1000F7900);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v221 = (id)sub_10002A2F4();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100008614(&qword_1000F7910);
  v215 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_100012908(&qword_1000F7918, &qword_1000F7910);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  dispatch thunk of UIHostingController.rootView.getter();
  long long v68 = (void *)sub_10002FA24();
  swift_release();
  id v221 = v68;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100008614(&qword_1000F7920);
  sub_100012908(&qword_1000F7928, &qword_1000F7920);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  uint64_t v218 = v67;
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v69 = sub_1000146FC();
  uint64_t v70 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v71 = v69[6];
  v69[6] = (uint64_t)sub_100020A40;
  v69[7] = v70;
  sub_10000F808(v71);
  swift_release();
  uint64_t v211 = v52;
  id v221 = *(id *)(v52 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__activityDisplayContext);
  uint64_t v72 = sub_10001280C(0, (unint64_t *)&qword_1000F77E8);
  swift_retain();
  uint64_t v210 = v72;
  id v220 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v212 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v73 = *(void *)(v212 - 8);
  v213 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56);
  uint64_t v214 = v73 + 56;
  uint64_t v74 = (uint64_t)v217;
  v213(v217, 1, 1, v212);
  sub_100008614(&qword_1000F7930);
  v204 = &unk_1000B3328;
  sub_100012908(&qword_1000F7938, &qword_1000F7930);
  unint64_t v216 = sub_100020A48();
  v75 = v207;
  Publisher.receive<A>(on:options:)();
  sub_10000EC04(v74, &qword_1000F78D8);

  swift_release();
  id v76 = sub_10006EDDC();
  uint64_t v77 = v170;
  uint64_t v78 = v206;
  uint64_t v79 = v171;
  (*(void (**)(char *, char *, uint64_t))(v170 + 16))(v206, v75, v171);
  unint64_t v80 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
  unint64_t v81 = ((unint64_t)v205 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v82 = (v81 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v83 = (v82 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v219 = v1;
  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = 0;
  *(void *)(v84 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v77 + 32))(v84 + v80, v78, v79);
  v85 = (void *)(v84 + v81);
  void *v85 = 0xD00000000000001CLL;
  v85[1] = 0x80000001000BE4F0;
  v86 = (void *)(v84 + v82);
  void *v86 = 0;
  v86[1] = 0xE000000000000000;
  *(void *)(v84 + v83) = v76;
  *(_DWORD *)(v84 + ((v83 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  type metadata accessor for ActivityDisplayContext(0);
  sub_100012908(&qword_1000F7948, &qword_1000F78E0);
  id v87 = v76;
  v88 = v172;
  v89 = v207;
  Publisher.map<A>(_:)();
  swift_release();
  v206 = (char *)&protocol conformance descriptor for Publishers.Map<A, B>;
  sub_100012908(&qword_1000F7950, &qword_1000F78D0);
  uint64_t v90 = v174;
  v91 = (void *)Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v173 + 8))(v88, v90);

  (*(void (**)(char *, uint64_t))(v77 + 8))(v89, v79);
  id v221 = v91;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100008614(&qword_1000F7958);
  sub_100012908(&qword_1000F7960, &qword_1000F7958);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v92 = v211;
  id v221 = *(id *)(v211 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_homeGestureEventPublisher);
  swift_retain();
  id v220 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v93 = (uint64_t)v217;
  v213(v217, 1, 1, v212);
  sub_100008614(&qword_1000F7968);
  sub_100012908(&qword_1000F7970, &qword_1000F7968);
  v94 = v175;
  Publisher.receive<A>(on:options:)();
  sub_10000EC04(v93, &qword_1000F78D8);

  swift_release();
  uint64_t v95 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = sub_100020BA8;
  *(void *)(v96 + 24) = v95;
  v205 = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_100012908(&qword_1000F7978, &qword_1000F78C8);
  uint64_t v97 = v177;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v176 + 8))(v94, v97);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v221 = *(id *)(v92 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__mediaTransferStatus);
  sub_100008614(&qword_1000F7980);
  sub_100012908(&qword_1000F7988, &qword_1000F7980);
  v98 = v178;
  Publisher.dropFirst(_:)();
  id v221 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v99 = v212;
  v100 = v213;
  v213((char *)v93, 1, 1, v212);
  sub_100012908(&qword_1000F7990, &qword_1000F78B8);
  v101 = v181;
  uint64_t v102 = v180;
  Publisher.receive<A>(on:options:)();
  sub_10000EC04(v93, &qword_1000F78D8);

  (*(void (**)(char *, uint64_t))(v179 + 8))(v98, v102);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100012908(&qword_1000F7998, &qword_1000F78C0);
  uint64_t v103 = v183;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v182 + 8))(v101, v103);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v221 = *(id *)(v211 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__progress);
  sub_100008614(&qword_1000F79A0);
  sub_100012908(&qword_1000F79A8, &qword_1000F79A0);
  v104 = v184;
  Publisher<>.removeDuplicates()();
  id v221 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v105 = (uint64_t)v217;
  v100(v217, 1, 1, v99);
  v207 = (char *)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>;
  sub_100012908(&qword_1000F79B0, &qword_1000F78A8);
  v106 = v208;
  uint64_t v107 = v187;
  Publisher.receive<A>(on:options:)();
  sub_10000EC04(v105, &qword_1000F78D8);

  (*(void (**)(char *, uint64_t))(v186 + 8))(v104, v107);
  id v108 = sub_10006EDDC();
  uint64_t v109 = v189;
  v110 = v188;
  uint64_t v111 = v190;
  (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v188, v106, v190);
  unint64_t v112 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
  unint64_t v113 = (v185 + v112 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v114 = (v113 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v115 = (v114 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v116 = swift_allocObject();
  *(void *)(v116 + 16) = 0;
  *(void *)(v116 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v109 + 32))(v116 + v112, v110, v111);
  strcpy((char *)(v116 + v113), "New progress: ");
  *(unsigned char *)(v116 + v113 + 15) = -18;
  v117 = (void *)(v116 + v114);
  void *v117 = 0;
  v117[1] = 0xE000000000000000;
  *(void *)(v116 + v115) = v108;
  *(_DWORD *)(v116 + ((v115 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  sub_100012908(&qword_1000F79B8, &qword_1000F78B0);
  id v118 = v108;
  v119 = v191;
  v120 = v208;
  Publisher.map<A>(_:)();
  swift_release();
  sub_100012908(&qword_1000F79C0, &qword_1000F78A0);
  uint64_t v121 = v193;
  v122 = (void *)Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v192 + 8))(v119, v121);

  (*(void (**)(char *, uint64_t))(v109 + 8))(v120, v111);
  id v221 = v122;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100008614(&qword_1000F79C8);
  sub_100012908(&qword_1000F79D0, &qword_1000F79C8);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v221 = *(id *)(v211 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel__cardMode);
  sub_100008614(&qword_1000F79D8);
  sub_100012908(&qword_1000F79E0, &qword_1000F79D8);
  sub_100020CD4();
  v123 = v194;
  Publisher<>.removeDuplicates()();
  id v221 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v124 = (uint64_t)v217;
  v213(v217, 1, 1, v212);
  sub_100012908(&qword_1000F79F0, &qword_1000F7890);
  v125 = v209;
  uint64_t v126 = v197;
  Publisher.receive<A>(on:options:)();
  sub_10000EC04(v124, &qword_1000F78D8);

  (*(void (**)(char *, uint64_t))(v196 + 8))(v123, v126);
  id v127 = sub_10006EDDC();
  uint64_t v128 = v199;
  v129 = v198;
  uint64_t v130 = v200;
  (*(void (**)(char *, char *, uint64_t))(v199 + 16))(v198, v125, v200);
  unint64_t v131 = (*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
  unint64_t v132 = (v195 + v131 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v133 = (v132 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v134 = (v133 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v135 = swift_allocObject();
  *(void *)(v135 + 16) = 0;
  *(void *)(v135 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v128 + 32))(v135 + v131, v129, v130);
  strcpy((char *)(v135 + v132), "New cardMode: ");
  *(unsigned char *)(v135 + v132 + 15) = -18;
  v136 = (void *)(v135 + v133);
  void *v136 = 0;
  v136[1] = 0xE000000000000000;
  *(void *)(v135 + v134) = v127;
  *(_DWORD *)(v135 + ((v134 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
  sub_100012908(&qword_1000F79F8, &qword_1000F7898);
  id v137 = v127;
  v138 = v201;
  v139 = v209;
  Publisher.map<A>(_:)();
  swift_release();
  sub_100012908(&qword_1000F7A00, &qword_1000F7888);
  uint64_t v140 = v203;
  v141 = (void *)Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v202 + 8))(v138, v140);

  (*(void (**)(char *, uint64_t))(v128 + 8))(v139, v130);
  id v221 = v141;
  swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_100008614(&qword_1000F7A08);
  sub_100012908(&qword_1000F7A10, &qword_1000F7A08);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v142 = *(id *)(qword_100111A10 + 488);
  char v143 = sub_10002D38C();

  if (v143)
  {
    sub_1000146FC();
    swift_retain();
    id v221 = (id)sub_100083AFC();
    sub_100008614(&qword_1000F7A18);
    sub_100012908(&qword_1000F7A20, &qword_1000F7A18);
    v144 = (void *)Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    swift_release();
    id v221 = v144;
    sub_100008614(&qword_1000F7A28);
    v217 = (char *)&protocol conformance descriptor for AnyPublisher<A, B>;
    sub_100012908(&qword_1000F7A30, &qword_1000F7A28);
    v145 = v167;
    Publisher.map<A>(_:)();
    swift_release();
    unint64_t v216 = (unint64_t)sub_10006EDDC();
    uint64_t v146 = v168;
    v147 = v166;
    uint64_t v148 = v169;
    (*(void (**)(char *, char *, uint64_t))(v168 + 16))(v166, v145, v169);
    unint64_t v149 = (*(unsigned __int8 *)(v146 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
    unint64_t v150 = (v165 + v149 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v151 = (v150 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v152 = (v151 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v153 = swift_allocObject();
    *(void *)(v153 + 16) = 0;
    *(void *)(v153 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v146 + 32))(v153 + v149, v147, v148);
    v154 = (void *)(v153 + v150);
    void *v154 = 0xD00000000000001DLL;
    v154[1] = 0x80000001000BE510;
    v155 = (void *)(v153 + v151);
    void *v155 = 0;
    v155[1] = 0xE000000000000000;
    v156 = (void *)v216;
    *(void *)(v153 + v152) = v216;
    *(_DWORD *)(v153 + ((v152 + 11) & 0xFFFFFFFFFFFFFFF8)) = 40;
    sub_100012908(&qword_1000F7A38, &qword_1000F7880);
    id v157 = v156;
    v158 = v162;
    Publisher.map<A>(_:)();
    swift_release();
    sub_100012908(&qword_1000F7A40, &qword_1000F7878);
    uint64_t v159 = v164;
    v160 = (void *)Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v163 + 8))(v158, v159);

    (*(void (**)(char *, uint64_t))(v146 + 8))(v145, v148);
    id v221 = v160;
    swift_allocObject();
    swift_unknownObjectWeakInit();
    sub_100008614(&qword_1000F77D8);
    sub_100012908(&qword_1000F77E0, &qword_1000F77D8);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
}

uint64_t sub_100016EA8(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  char v2 = *(unsigned char *)(a1 + 56);
  unsigned __int8 v3 = v2 | 0x40;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  sub_100021050(*(void *)a1, v5, v6, v7, v8, v9, v10, v2);
  PassthroughSubject.send(_:)();
  sub_100020184(v1, v5, v6, v7, v8, v9, v10, v3);
  return swift_bridgeObjectRelease();
}

void sub_100016F8C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_10001AC1C(v1, v2, v3);
  }
}

void sub_100017000()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_10001AB08();
  }
}

void sub_100017054(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    sub_10001A3C0(0xD00000000000001FLL, (void *)0x80000001000BE530, a1, a2);
  }
}

uint64_t sub_1000170DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v12 - v8;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v11 = (void *)result;
    sub_100014970();

    sub_100021120(a1, (uint64_t)v9, type metadata accessor for ActivityDisplayContext);
    swift_getKeyPath();
    swift_getKeyPath();
    sub_100021120((uint64_t)v9, (uint64_t)v6, type metadata accessor for ActivityDisplayContext);
    swift_retain();
    static Published.subscript.setter();
    sub_1000211F0((uint64_t)v9, type metadata accessor for ActivityDisplayContext);
    return swift_release();
  }
  return result;
}

uint64_t sub_100017234(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_10001725C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = (void *)Strong;
    sub_100017474(v1, v2);
  }
}

uint64_t sub_1000172C8()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    swift_retain();

    swift_getKeyPath();
    swift_getKeyPath();
    return static Published.subscript.setter();
  }
  return result;
}

void sub_10001736C(char *a1)
{
  char v1 = *a1;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = (void *)Strong;
    sub_10001778C(v1);
  }
}

void *sub_1000173C8@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

uint64_t sub_1000173DC()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    char v1 = (void *)result;
    sub_100014970();

    swift_getKeyPath();
    swift_getKeyPath();
    return static Published.subscript.setter();
  }
  return result;
}

void sub_100017474(void *a1, uint64_t a2)
{
  _StringGuts.grow(_:)(26);
  v4._countAndFlagsBits = 0xD000000000000020;
  v4._object = (void *)0x80000001000BE460;
  String.append(_:)(v4);
  v5._object = (void *)0x80000001000BE490;
  v5._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  id v6 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 ulog:40 message:v7 a1 a2];
  swift_bridgeObjectRelease();

  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v8 = *(id *)(qword_100111A10 + 504);
  char v9 = sub_10002D38C();

  if (v9)
  {
    id v10 = sub_10006EDDC();
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 ulog:40 message:v11];
  }
  else if (a1 == (void *)1)
  {
    sub_100017680();
  }
  else
  {
    id v12 = a1;
    sub_1000146FC();
    id v13 = v12;
    sub_100084B88(a1);
    swift_release();

    sub_10001CB40(a1);
  }
}

void sub_100017680()
{
  id v0 = sub_10006EDDC();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];

  swift_retain();
  CurrentValueSubject.value.getter();
  uint64_t v2 = v3;
  if (v3 == (void *)2)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    uint64_t v2 = v4;
    if (v4 != (void *)1)
    {
LABEL_3:
      sub_10001CB40(v2);
      return;
    }
  }
  else
  {
    swift_release();
    if (v3 != (void *)1) {
      goto LABEL_3;
    }
  }
  sub_1000146FC();
  sub_100084F34();
  swift_release();
}

void sub_10001778C(char a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  *(void *)&long long v61 = 0xD00000000000001DLL;
  *((void *)&v61 + 1) = 0x80000001000BE1E0;
  v5._countAndFlagsBits = sub_100045DDC(a1);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  id v6 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 ulog:40 message:v7];
  swift_bridgeObjectRelease();

  if (a1 == 4)
  {
    id v13 = sub_10006EDDC();
    NSString v54 = String._bridgeToObjectiveC()();
    [v13 ulog:60 message:v54];
  }
  else if (a1 == 3)
  {
    sub_1000146FC();
    uint64_t v8 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    *(unsigned char *)(v9 + 24) = 3;
    swift_retain();
    id v10 = sub_10006EE10();
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 ulog:40 message:v11];

    sub_100084154();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = sub_10002069C;
    *(void *)(v12 + 24) = v9;
    swift_retain();
    sub_10001ECCC((void (*)(void **))sub_1000206E4, v12);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(v61) = a1;
    swift_retain();
    static Published.subscript.setter();
    swift_retain();
    sub_100062220((uint64_t)&v61);
    v56[0] = 0;
    swift_retain();
    State.init(wrappedValue:)();
    char v53 = v57;
    uint64_t v14 = *((void *)&v57 + 1);
    type metadata accessor for HandoffFeatureEducationViewModel();
    sub_1000203EC((unint64_t *)&qword_1000F77F8, (void (*)(uint64_t))type metadata accessor for HandoffFeatureEducationViewModel);
    uint64_t v52 = ObservedObject.init(wrappedValue:)();
    id v55 = v15;
    uint64_t v16 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v16;
    *(void *)(v17 + 24) = ObjectType;
    uint64_t v18 = *(void *)(v2 + OBJC_IVAR____TtC13PCViewService13CardPresenter_model);
    uint64_t v19 = OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController;
    id v20 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v18
                                                                + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController), "view"));
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = v14;
      [v20 frame];
      double v24 = v23;

      long long v57 = v61;
      long long v58 = v62;
      long long v59 = v63;
      unint64_t v60 = v64;
      id v25 = objc_allocWithZone((Class)sub_100008614(&qword_1000F7800));
      sub_100020444((uint64_t)&v61);
      uint64_t v26 = (void *)UIHostingController.init(rootView:)();
      dispatch thunk of UIHostingController.sizeThatFits(in:)();
      double v28 = v27;

      if (qword_1000F6680 != -1) {
        swift_once();
      }
      id v29 = *(id *)(qword_100111A10 + 640);
      double v30 = sub_10002D8E0();

      sub_10001280C(0, (unint64_t *)&qword_1000F7748);
      *(double *)(swift_allocObject() + 16) = v24 + v28 + v30 + 8.0;
      uint64_t v31 = (void *)static UISheetPresentationControllerDetent.custom(identifier:resolver:)();
      swift_release();
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      *(void *)&long long v57 = 0x203A657A6953;
      *((void *)&v57 + 1) = 0xE600000000000000;
      id v32 = [*(id *)(v18 + v19) view];
      if (v32)
      {
        uint64_t v33 = v32;
        [v32 frame];

        v34._countAndFlagsBits = CGSize.description.getter();
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = 540945696;
        v35._object = (void *)0xE400000000000000;
        String.append(_:)(v35);
        v36._countAndFlagsBits = CGSize.description.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        v37._countAndFlagsBits = 540945696;
        v37._object = (void *)0xE400000000000000;
        String.append(_:)(v37);
        v38._countAndFlagsBits = Double.description.getter();
        String.append(_:)(v38);
        swift_bridgeObjectRelease();
        id v39 = sub_10006EDDC();
        swift_bridgeObjectRetain();
        NSString v40 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v39 ulog:40 message:v40];
        swift_bridgeObjectRelease();

        uint64_t v41 = *(void **)(v2 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardViewController);
        dispatch thunk of UIHostingController.rootView.getter();
        *((void *)&v58 + 1) = &type metadata for HandoffFeatureEducationViewHeader;
        *(void *)&long long v59 = sub_1000204B0();
        uint64_t v42 = swift_allocObject();
        *(void *)&long long v57 = v42;
        long long v43 = v62;
        *(_OWORD *)(v42 + 16) = v61;
        *(_OWORD *)(v42 + 32) = v43;
        *(_OWORD *)(v42 + 48) = v63;
        *(void *)(v42 + 64) = v64;
        swift_getKeyPath();
        swift_getKeyPath();
        sub_1000210BC((uint64_t)&v57, (uint64_t)v56, &qword_1000F7810);
        sub_100020444((uint64_t)&v61);
        swift_retain();
        static Published.subscript.setter();
        sub_10000EC04((uint64_t)&v57, &qword_1000F7810);
        swift_release();
        dispatch thunk of UIHostingController.rootView.getter();
        swift_getKeyPath();
        swift_getKeyPath();
        LOBYTE(v57) = 0;
        static Published.subscript.setter();
        dispatch thunk of UIHostingController.rootView.getter();
        *((void *)&v58 + 1) = &type metadata for HandoffFeatureEducationView;
        *(void *)&long long v59 = sub_100020564();
        uint64_t v44 = swift_allocObject();
        *(void *)&long long v57 = v44;
        *(void *)(v44 + 16) = v52;
        *(void *)(v44 + 24) = v55;
        *(unsigned char *)(v44 + 32) = v53;
        *(void *)(v44 + 40) = v22;
        *(void *)(v44 + 48) = sub_10002043C;
        *(void *)(v44 + 56) = v17;
        *((void *)&v59 + 1) = 0x6F69746163756465;
        unint64_t v60 = 0xE90000000000006ELL;
        swift_getKeyPath();
        swift_getKeyPath();
        sub_1000210BC((uint64_t)&v57, (uint64_t)v56, (uint64_t *)&unk_1000F7820);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        static Published.subscript.setter();
        sub_10000EC04((uint64_t)&v57, (uint64_t *)&unk_1000F7820);
        swift_release();
        sub_100008614(&qword_1000F77C0);
        uint64_t v45 = swift_allocObject();
        *(_OWORD *)(v45 + 16) = xmmword_1000AE8C0;
        *(void *)(v45 + 32) = v31;
        *(void *)&long long v57 = v45;
        specialized Array._endMutation()();
        uint64_t v46 = v57;
        id v47 = v31;
        sub_100019A78(v41, 0, v46, 0, 0);
        swift_bridgeObjectRelease();
        sub_1000146FC();
        id v48 = sub_10006EE10();
        NSString v49 = String._bridgeToObjectiveC()();
        [v48 ulog:40 message:v49];

        sub_100084154();
        id v50 = sub_10006EEC8();
        NSString v51 = String._bridgeToObjectiveC()();
        [v50 ulog:40 message:v51];

        sub_10001ECCC(0, 0);
        swift_release();
        swift_release();
        swift_release();

        swift_release();
        swift_release();
        sub_100020610((uint64_t)&v61);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

void sub_100018198(void *a1, char a2, uint64_t a3, int a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v77 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for DispatchQoS();
  uint64_t v76 = *(void *)(v78 - 8);
  __chkstk_darwin(v78, v11);
  v75 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for DispatchTime();
  uint64_t v74 = *(void *)(v79 - 8);
  uint64_t v14 = __chkstk_darwin(v79, v13);
  uint64_t v72 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v73 = (char *)&v64 - v17;
  uint64_t v18 = type metadata accessor for ActivityIcon(0);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  id v25 = (char *)&v64 - v24;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  double v27 = (char *)Strong;
  uint64_t v71 = a1;
  if (a2)
  {
    uint64_t aBlock = 0;
    *(void *)&long long v82 = 0xE000000000000000;
    swift_errorRetain();
    _StringGuts.grow(_:)(37);
    v40._countAndFlagsBits = 0xD000000000000023;
    v40._object = (void *)0x80000001000BE240;
    String.append(_:)(v40);
    uint64_t v88 = (uint64_t)a1;
    sub_100008614(&qword_1000F7038);
    _print_unlocked<A, B>(_:_:)();
    id v41 = sub_10006EDDC();
    swift_bridgeObjectRetain();
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v41 ulog:60 message:v42];
    swift_bridgeObjectRelease();

    sub_100020718(a1, 1);
    swift_retain();
    sub_100099688((uint64_t)a1, &v88);
    uint64_t v43 = v88;
    long long v44 = v89;
    long long v45 = v90;
    long long v46 = v91;
    uint64_t aBlock = v88;
    long long v82 = v89;
    long long v83 = v90;
    long long v84 = v91;
    char v85 = 32;
    unint64_t v86 = 0xD000000000000017;
    unint64_t v87 = 0x80000001000BE270;
    PassthroughSubject.send(_:)();
    swift_release();
    sub_100020184(v43, v44, *((uint64_t *)&v44 + 1), v45, *((uint64_t *)&v45 + 1), v46, *((uint64_t *)&v46 + 1), 0x20u);
    swift_bridgeObjectRelease();
    sub_10001A3C0(0xD000000000000017, (void *)0x80000001000BE270, 0, 0);

    sub_100020724(v71, 1);
    return;
  }
  uint64_t v68 = v8;
  uint64_t v69 = v7;
  int v70 = a4;
  id v67 = a1;
  dispatch thunk of UIHostingController.rootView.getter();
  sub_100014970();
  UUID.init()();
  *(void *)&v25[*(int *)(v18 + 20)] = 0;
  uint64_t v28 = sub_100008614(&qword_1000F7830);
  *(void *)&long long v83 = v28;
  *((void *)&v83 + 1) = sub_100012908(&qword_1000F7838, &qword_1000F7830);
  id v29 = sub_100020730(&aBlock);
  *id v29 = 0x4032000000000000;
  type metadata accessor for ProximityCardHeaderViewModel();
  sub_1000203EC((unint64_t *)&unk_1000F7840, (void (*)(uint64_t))type metadata accessor for ProximityCardHeaderViewModel);
  v29[1] = ObservedObject.init(wrappedValue:)();
  void v29[2] = v30;
  sub_100021120((uint64_t)v25, (uint64_t)v22, type metadata accessor for ActivityIcon);
  State.init(wrappedValue:)();
  sub_1000211F0((uint64_t)v25, type metadata accessor for ActivityIcon);
  uint64_t v31 = (char *)v29 + *(int *)(v28 + 44);
  char v80 = 0;
  State.init(wrappedValue:)();
  uint64_t v32 = v89;
  *uint64_t v31 = v88;
  *((void *)v31 + 1) = v32;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000210BC((uint64_t)&aBlock, (uint64_t)&v88, &qword_1000F7810);
  swift_retain();
  static Published.subscript.setter();
  sub_10000EC04((uint64_t)&aBlock, &qword_1000F7810);
  swift_release();
  dispatch thunk of UIHostingController.rootView.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  LOBYTE(aBlock) = 1;
  static Published.subscript.setter();
  uint64_t v33 = v67;
  uint64_t v88 = (uint64_t)v67;
  sub_10001280C(0, &qword_1000F7020);
  id v34 = v33;
  State.init(wrappedValue:)();
  Swift::String v35 = (void *)aBlock;
  Swift::String v36 = (void *)v82;
  dispatch thunk of UIHostingController.rootView.getter();
  *(void *)&long long v83 = sub_100008614(&qword_1000F7850);
  unint64_t v37 = sub_100020794();
  uint64_t aBlock = (uint64_t)v35;
  *(void *)&long long v82 = v36;
  WORD4(v82) = 0;
  *((void *)&v83 + 1) = v37;
  *(void *)&long long v84 = 0x726F737365636361;
  *((void *)&v84 + 1) = 0xE900000000000079;
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000210BC((uint64_t)&aBlock, (uint64_t)&v88, (uint64_t *)&unk_1000F7820);
  id v67 = v36;
  swift_retain();
  id v66 = v35;
  swift_retain();
  static Published.subscript.setter();
  sub_10000EC04((uint64_t)&aBlock, (uint64_t *)&unk_1000F7820);
  swift_release();
  uint64_t v38 = OBJC_IVAR____TtC13PCViewService13CardPresenter_model;
  swift_retain();
  CurrentValueSubject.value.getter();
  id v39 = (void *)v88;
  if (v88 == 2)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    id v39 = (void *)aBlock;
  }
  else
  {
    swift_release();
  }
  id v47 = sub_10006EDDC();
  if (v39 != (void *)1)
  {
    NSString v49 = String._bridgeToObjectiveC()();
    [v47 ulog:40 message:v49];
LABEL_14:

    goto LABEL_15;
  }
  NSString v48 = String._bridgeToObjectiveC()();
  [v47 ulog:40 message:v48];

  swift_retain();
  CurrentValueSubject.value.getter();
  id v39 = (void *)v88;
  if (v88 == 1)
  {
    CurrentValueSubject.value.getter();
    swift_release();
    id v39 = (void *)aBlock;
    if (!aBlock) {
      goto LABEL_13;
    }
  }
  else
  {
    swift_release();
    if (!v39)
    {
LABEL_13:
      id v47 = sub_10006EDDC();
      NSString v49 = String._bridgeToObjectiveC()();
      [v47 ulog:60 message:v49];
      goto LABEL_14;
    }
  }
LABEL_15:
  sub_1000146FC();
  sub_100084B88(v39);
  swift_release();
  id v50 = (void *)(*(void *)&v27[v38] + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_initialMediaTransferStatus);
  BOOL v51 = *v50 == 1;
  id v65 = v39;
  if (v51) {
    char v52 = 0;
  }
  else {
    char v52 = (v50[1] < 3uLL) & v50[1];
  }
  sub_1000146FC();
  sub_10008526C(v52);
  swift_release();
  sub_10001280C(0, (unint64_t *)&qword_1000F77E8);
  char v53 = (void *)static OS_dispatch_queue.main.getter();
  NSString v54 = v72;
  static DispatchTime.now()();
  id v55 = v73;
  + infix(_:_:)();
  uint64_t v74 = *(void *)(v74 + 8);
  ((void (*)(char *, uint64_t))v74)(v54, v79);
  uint64_t v56 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *((void *)&v83 + 1) = sub_100020888;
  *(void *)&long long v84 = v56;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  *(void *)&long long v82 = 1107296256;
  *((void *)&v82 + 1) = sub_10003CE34;
  *(void *)&long long v83 = &unk_1000E4260;
  long long v57 = _Block_copy(&aBlock);
  swift_release();
  long long v58 = v75;
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock = (uint64_t)&_swiftEmptyArrayStorage;
  sub_1000203EC((unint64_t *)&qword_1000F6E20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100008614(&qword_1000F6E28);
  sub_100012908((unint64_t *)&qword_1000F6E30, &qword_1000F6E28);
  long long v59 = v77;
  uint64_t v60 = v69;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v57);

  (*(void (**)(char *, uint64_t))(v68 + 8))(v59, v60);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v58, v78);
  ((void (*)(char *, uint64_t))v74)(v55, v79);
  uint64_t aBlock = 0x65646F4D64726163;
  *(void *)&long long v82 = 0xE90000000000003DLL;
  swift_retain();
  v61._countAndFlagsBits = sub_100045DDC(v70);
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  uint64_t v62 = aBlock;
  unint64_t v63 = v82;
  uint64_t aBlock = 3;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  char v85 = 66;
  unint64_t v86 = v62;
  unint64_t v87 = v63;
  PassthroughSubject.send(_:)();
  swift_release();

  swift_release();
  sub_100020724(v71, 0);

  sub_100020184(3, 0, 0, 0, 0, 0, 0, 0x42u);
  swift_bridgeObjectRelease();
}

uint64_t sub_100018E64()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = *(void **)(result + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardViewController);
    uint64_t v3 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v4 = v2;
    swift_retain();
    sub_100019A78(v4, 1, 0, (void (*)(void))sub_100020890, v3);

    return swift_release_n();
  }
  return result;
}

uint64_t sub_100018F34(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = (void *)result;
    sub_1000146FC();

    swift_retain();
    sub_1000850A4((uint64_t)sub_100020898, a1);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_100018FD0(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v4 = (void *)Strong;
    a2();
  }
}

uint64_t sub_10001902C(uint64_t a1, uint64_t a2)
{
  sub_10004DA44(0xD00000000000001FLL, (void *)0x80000001000BE400, 0, a2, (uint64_t)&off_1000E3E40);
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = (void *)result;
    swift_retain();

    swift_retain();
    swift_release();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

void sub_100019124(char a1)
{
  v2._countAndFlagsBits = 0xD000000000000026;
  v2._object = (void *)0x80000001000BE190;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x3D746E657665203ALL;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  _print_unlocked<A, B>(_:_:)();
  id v4 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 ulog:40 message:v5];
  swift_bridgeObjectRelease();

  if (a1)
  {
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
  }
  else
  {
    sub_10001A3C0(0x61742065736F6C43, (void *)0xEC00000064657070, 0, 0);
  }
}

uint64_t sub_1000192B4()
{
  id v1 = sub_10006EDDC();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  id v4 = v0;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  uint64_t v5 = OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn;
  if (*(unsigned char *)(*(void *)&v4[OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn] + 24)) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (*(unsigned char *)(*(void *)&v4[OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn] + 24)) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  id v9 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 ulog:v10 message:0xD000000000000012 0x80000001000BE100];
  swift_bridgeObjectRelease();

  if (*(unsigned char *)(*(void *)&v4[v5] + 24) == 1)
  {
    id v11 = sub_10006EDDC();
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 ulog:40 message:v12];

    swift_retain();
    sub_100083B90();
    sub_100008614(&qword_1000F77C8);
    sub_100012908(&qword_1000F77D0, &qword_1000F77C8);
    Publisher.eraseToAnyPublisher()();
    swift_release();
    swift_release();
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v14 = (void *)swift_allocObject();
    _OWORD v14[2] = v13;
    void v14[3] = sub_100020390;
    void v14[4] = v3;
    swift_retain();
    sub_100008614(&qword_1000F77D8);
    sub_100012908(&qword_1000F77E0, &qword_1000F77D8);
    uint64_t v15 = Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    *(void *)&v4[OBJC_IVAR____TtC13PCViewService13CardPresenter_animatingInListener] = v15;
    swift_release();
    return swift_release();
  }
  else
  {
    sub_100019620();
    return swift_release();
  }
}

uint64_t sub_100019620()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  id v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v6);
  unint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001280C(0, (unint64_t *)&qword_1000F77E8);
  id v9 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = sub_1000203E4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003CE34;
  aBlock[3] = &unk_1000E4148;
  id v11 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_1000203EC((unint64_t *)&qword_1000F6E20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100008614(&qword_1000F6E28);
  sub_100012908((unint64_t *)&qword_1000F6E30, &qword_1000F6E28);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v14);
}

void sub_100019904()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    id v2 = sub_10006EDDC();
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 ulog:40 message:v3];
  }
  swift_beginAccess();
  uint64_t v4 = swift_unknownObjectWeakLoadStrong();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    sub_10001A3C0(0x74756220656D6F48, (void *)0xEB000000006E6F74, 0, 0);
  }
}

unsigned char *sub_1000199F4(unsigned char *result, uint64_t a2, uint64_t (*a3)(char *))
{
  if ((*result & 1) == 0)
  {
    swift_beginAccess();
    uint64_t Strong = (char *)swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      *(void *)&Strong[OBJC_IVAR____TtC13PCViewService13CardPresenter_animatingInListener] = 0;

      uint64_t Strong = (char *)swift_release();
    }
    return (unsigned char *)a3(Strong);
  }
  return result;
}

uint64_t sub_100019A78(void *a1, char a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t ObjectType = swift_getObjectType();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  uint64_t aBlock = (void **)0xD000000000000040;
  unint64_t v51 = 0x80000001000BE020;
  id v11 = [a1 description];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x746E65746564202CLL;
  v16._object = (void *)0xEA00000000003D73;
  String.append(_:)(v16);
  if (a3)
  {
    char v49 = a3;
    swift_bridgeObjectRetain();
    sub_100008614(&qword_1000F77B8);
    uint64_t v17 = String.init<A>(describing:)();
    unint64_t v19 = v18;
  }
  else
  {
    unint64_t v19 = 0xE300000000000000;
    uint64_t v17 = 7104878;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  id v21 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v23 = &stru_1000F5000;
  [v21 ulog:40 message:v22];
  swift_bridgeObjectRelease();

  uint64_t v24 = *(void *)&v6[OBJC_IVAR____TtC13PCViewService13CardPresenter_model];
  swift_retain();
  CurrentValueSubject.value.getter();
  if (v49 == 2)
  {
    CurrentValueSubject.value.getter();
    uint64_t result = swift_release();
    if (aBlock != 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = swift_release();
    if ((v49 & 1) == 0) {
      return result;
    }
  }
  id v26 = [a1 sheetPresentationController:a5];
  if (v26)
  {
    double v27 = v26;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v6;
    *(void *)(v28 + 24) = v27;
    *(unsigned char *)(v28 + 32) = a2 & 1;
    *(void *)(v28 + 40) = a3;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = sub_100020310;
    *(void *)(v29 + 16) = sub_100020310;
    *(void *)(v29 + 24) = v28;
    NSString v54 = sub_100020330;
    uint64_t v55 = v29;
    uint64_t aBlock = _NSConcreteStackBlock;
    unint64_t v51 = 1107296256;
    char v52 = sub_10001A18C;
    char v53 = &unk_1000E40D0;
    uint64_t v31 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    uint64_t v32 = v6;
    id v33 = v27;
    swift_retain();
    swift_release();
    [v33 animateChanges:v31];

    _Block_release(v31);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
      return result;
    }
    uint64_t v23 = &stru_1000F5000;
  }
  else
  {
    uint64_t v30 = 0;
  }
  id v35 = [a1 presentingViewController];

  if (v35)
  {
    id v36 = sub_10006EDDC();
    NSString v37 = String._bridgeToObjectiveC()();
    [v36 v23[36].offs:40 v37];

    if (a4) {
      a4();
    }
  }
  else
  {
    uint64_t v38 = *(void *)&v6[OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn];
    *(unsigned char *)(v38 + 24) = 1;
    swift_retain();
    sub_100083B90();
    LOBYTE(aBlock) = *(unsigned char *)(v38 + 24);
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_release();
    sub_100014970();
    swift_getKeyPath();
    swift_getKeyPath();
    LOBYTE(aBlock) = 0;
    static Published.subscript.setter();
    id v39 = (void (**)(void))&v6[OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock];
    uint64_t v40 = *(void *)&v6[OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock];
    *id v39 = a4;
    v39[1] = v46;
    sub_10000F7F8((uint64_t)a4);
    sub_10000F808(v40);
    id v41 = *(void **)(v24 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_rootViewController);
    uint64_t v42 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v42;
    *(void *)(v43 + 24) = ObjectType;
    NSString v54 = sub_1000202C0;
    uint64_t v55 = v43;
    uint64_t aBlock = _NSConcreteStackBlock;
    unint64_t v51 = 1107296256;
    char v52 = (uint64_t (*)(uint64_t))sub_10003CE34;
    char v53 = &unk_1000E4058;
    long long v44 = _Block_copy(&aBlock);
    id v45 = v41;
    swift_release();
    [v45 presentViewController:a1 animated:1 completion:v44];
    _Block_release(v44);
  }
  return sub_10000F808((uint64_t)v30);
}

void sub_10001A024(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  id v7 = sub_10006EDDC();
  NSString v8 = String._bridgeToObjectiveC()();
  [v7 ulog:40 message:v8];

  [a2 setPrefersGrabberVisible:a3 & 1];
  if (!a4)
  {
    sub_100008614(&qword_1000F77C0);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1000AE8C0;
    *(void *)(v9 + 32) = [self largeDetent];
    specialized Array._endMutation()();
  }
  sub_10001280C(0, (unint64_t *)&qword_1000F7748);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setDetents:isa];
}

uint64_t sub_10001A18C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_10001A1B4(uint64_t a1, uint64_t a2)
{
  sub_10004DA44(0xD000000000000019, (void *)0x80000001000BE0C0, 0, a2, (uint64_t)&off_1000E3E40);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    NSString v3 = (void *)Strong;
    swift_retain();

    swift_retain();
    swift_release();
    PassthroughSubject.send(_:)();
    swift_release();
  }
  swift_beginAccess();
  uint64_t v4 = swift_unknownObjectWeakLoadStrong();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    *(unsigned char *)(*(void *)(v4 + OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn) + 24) = 0;
    swift_retain();
    sub_100083B90();
    CurrentValueSubject.send(_:)();

    swift_release();
    swift_release();
  }
  swift_beginAccess();
  uint64_t v6 = swift_unknownObjectWeakLoadStrong();
  if (v6)
  {
    id v7 = (void *)v6;
    sub_100014970();

    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.setter();
  }
  swift_beginAccess();
  uint64_t v8 = swift_unknownObjectWeakLoadStrong();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    uint64_t v10 = (void *)(v8 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock);
    uint64_t v11 = *(void *)(v8 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock);
    *uint64_t v10 = 0;
    v10[1] = 0;
    sub_10000F808(v11);
  }
}

void sub_10001A3C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  id v25 = (void **)0xD000000000000024;
  unint64_t v26 = 0x80000001000BDFB0;
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0x656C706D6F63202CLL;
  v12._object = (void *)0xED00003D6E6F6974;
  String.append(_:)(v12);
  if (a3) {
    uint64_t v13 = 0x3E656D6F733CLL;
  }
  else {
    uint64_t v13 = 7104878;
  }
  if (a3) {
    unint64_t v14 = 0xE600000000000000;
  }
  else {
    unint64_t v14 = 0xE300000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  id v16 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v16 ulog:40 message:v17, v25, v26];
  swift_bridgeObjectRelease();

  unint64_t v18 = *(void **)(v5 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardViewController);
  uint64_t v19 = swift_allocObject();
  swift_unknownObjectWeakInit();
  unint64_t v20 = (void *)swift_allocObject();
  v20[2] = v19;
  v20[3] = a1;
  v20[4] = a2;
  v20[5] = a3;
  v20[6] = a4;
  v20[7] = ObjectType;
  uint64_t v29 = sub_100020174;
  uint64_t v30 = v20;
  id v25 = _NSConcreteStackBlock;
  unint64_t v26 = 1107296256;
  double v27 = sub_10003CE34;
  uint64_t v28 = &unk_1000E4008;
  id v21 = _Block_copy(&v25);
  swift_bridgeObjectRetain();
  sub_10000F7F8(a3);
  swift_release();
  [v18 dismissViewControllerAnimated:1 completion:v21];
  _Block_release(v21);
  id v22 = [v18 transitionCoordinator];
  if (v22)
  {
    sub_10001A888(v22);
    swift_unknownObjectRelease();
  }
  else
  {
    id v23 = sub_10006EDDC();
    NSString v24 = String._bridgeToObjectiveC()();
    [v23 ulog:60 message:v24];
  }
}

uint64_t sub_10001A698(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  sub_10004DA44(0xD000000000000030, (void *)0x80000001000BDFE0, 0, a6, (uint64_t)&off_1000E3E40);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = (void *)Strong;
    swift_retain();

    swift_retain();
    swift_release();
    swift_bridgeObjectRetain_n();
    PassthroughSubject.send(_:)();
    swift_release();
    sub_100020184(a2, a3, 0, 0, 0, 0, 0, 0);
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t v11 = swift_unknownObjectWeakLoadStrong();
  if (v11)
  {
    Swift::String v12 = (void *)v11;
    id v13 = *(id *)(v11 + OBJC_IVAR____TtC13PCViewService13CardPresenter_blurView);

    [v13 removeFromSuperview];
  }
  if (a4) {
    a4();
  }
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    unint64_t v15 = (void *)result;
    swift_retain();

    swift_retain();
    swift_release();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

void sub_10001A888(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  _StringGuts.grow(_:)(28);
  v3._object = (void *)0x80000001000BDDC0;
  v3._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0xD000000000000018;
  v4._object = (void *)0x80000001000BDDE0;
  String.append(_:)(v4);
  unint64_t v18 = a1;
  sub_100008614(&qword_1000F77B0);
  _print_unlocked<A, B>(_:_:)();
  id v5 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();

  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = ObjectType;
  id v16 = sub_1000200CC;
  uint64_t v17 = v8;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  unint64_t v14 = sub_10001B6C4;
  unint64_t v15 = &unk_1000E3EC8;
  uint64_t v9 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = ObjectType;
  id v16 = sub_1000200FC;
  uint64_t v17 = v10;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  unint64_t v14 = sub_10001B6C4;
  unint64_t v15 = &unk_1000E3F18;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_release();
  [a1 animateAlongsideTransition:v9 completion:v11];
  _Block_release(v11);
  _Block_release(v9);
}

void sub_10001AB08()
{
  v0._object = (void *)0x80000001000BDF90;
  v0._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0x3D746E657665203ALL;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  id v2 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 ulog:40 message:v3];
  swift_bridgeObjectRelease();

  sub_10001A3C0(0x61742065736F6C43, (void *)0xEC00000064657070, 0, 0);
}

void sub_10001AC1C(void *a1, uint64_t a2, uint64_t a3)
{
  _StringGuts.grow(_:)(27);
  v6._countAndFlagsBits = 0xD000000000000031;
  v6._object = (void *)0x80000001000BDD20;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x3D746E657665203ALL;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 0x6F72746E6F63202CLL;
  v8._object = (void *)0xED00003D72656C6CLL;
  String.append(_:)(v8);
  [a1 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v12 = v11;

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  id v14 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v14 ulog:40 message:v15];
  swift_bridgeObjectRelease();

  switch(a3)
  {
    case 0:
      goto LABEL_6;
    case 1:
      return;
    case 2:
      swift_retain();
      PassthroughSubject.send(_:)();
      swift_release();
      swift_retain();
      PassthroughSubject.send(_:)();
      swift_release();
      break;
    case 3:
      id v17 = [a1 presentedViewController];
      id v18 = [v17 transitionCoordinator];

      if (v18)
      {
        sub_10001A888(v18);
        swift_unknownObjectRelease();
      }
      else
      {
LABEL_6:
        id v19 = sub_10006EDDC();
        NSString v20 = String._bridgeToObjectiveC()();
        [v19 ulog:60 message:v20];
      }
      break;
    default:
      id v16 = (void *)swift_unknownObjectRetain();
      sub_10001AF8C(v16);
      swift_retain();
      PassthroughSubject.send(_:)();
      swift_release();
      sub_10002007C(a2, a3);
      break;
  }
}

void sub_10001AF8C(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  _StringGuts.grow(_:)(28);
  v3._countAndFlagsBits = 0xD00000000000001ALL;
  v3._object = (void *)0x80000001000BDF00;
  String.append(_:)(v3);
  v4._object = (void *)0x80000001000BDDE0;
  v4._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v4);
  id v18 = a1;
  sub_100008614(&qword_1000F77B0);
  _print_unlocked<A, B>(_:_:)();
  id v5 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v5 ulog:40 message:v6];
  swift_bridgeObjectRelease();

  uint64_t v7 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = ObjectType;
  id v16 = sub_100020104;
  uint64_t v17 = v8;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  id v14 = sub_10001B6C4;
  NSString v15 = &unk_1000E3F68;
  id v9 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = ObjectType;
  id v16 = sub_10002011C;
  uint64_t v17 = v10;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v13 = 1107296256;
  id v14 = sub_10001B6C4;
  NSString v15 = &unk_1000E3FB8;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_release();
  [a1 animateAlongsideTransition:v9 completion:v11];
  _Block_release(v11);
  _Block_release(v9);
}

uint64_t sub_10001B23C()
{
  uint64_t result = type metadata accessor for ActivityDisplayContext(319);
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

void sub_10001B318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10004DA44(0xD00000000000001DLL, (void *)0x80000001000BDF70, 0, a3, (uint64_t)&off_1000E3E40);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    Swift::String v4 = (void *)Strong;
    sub_10001B448(1);
  }
  swift_beginAccess();
  uint64_t v5 = swift_unknownObjectWeakLoadStrong();
  if (v5)
  {
    NSString v6 = (void *)v5;
    uint64_t v7 = *(void (**)(void))(v5 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock);
    sub_10000F7F8((uint64_t)v7);

    if (v7)
    {
      v7();
      sub_10000F808((uint64_t)v7);
    }
  }
  swift_beginAccess();
  uint64_t v8 = swift_unknownObjectWeakLoadStrong();
  if (v8)
  {
    id v9 = (void *)v8;
    uint64_t v10 = (void *)(v8 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock);
    uint64_t v11 = *(void *)(v8 + OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock);
    *uint64_t v10 = 0;
    v10[1] = 0;
    sub_10000F808(v11);
  }
}

void sub_10001B448(char a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  v5._object = (void *)0x80000001000BDEB0;
  v5._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0x3D6574617473203ALL;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  id v7 = sub_10006EDDC();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:40 message:v8];
  swift_bridgeObjectRelease();

  if ((a1 & 1) == 0)
  {
    [*(id *)(v2 + OBJC_IVAR____TtC13PCViewService13CardPresenter_blurView) setEffect:0];
    return;
  }
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v9 = *(id *)(qword_100111A10 + 608);
  char v10 = sub_10002D924();

  if ((v10 & 1) == 0)
  {
    id v11 = *(id *)(qword_100111A10 + 616);
    uint64_t v12 = sub_10002D948();

    id v13 = [self effectWithStyle:v12];
LABEL_8:
    [*(id *)(v2 + OBJC_IVAR____TtC13PCViewService13CardPresenter_blurView) setEffect:v13];

    return;
  }
  id v14 = *(id *)(qword_100111A10 + 624);
  double v15 = sub_10002D8E0();

  id v13 = [self effectWithBlurRadius:v15];
  if (v13) {
    goto LABEL_8;
  }
  sub_10004DD60(60, 0xD000000000000021, (void *)0x80000001000BDED0, 0, ObjectType, (uint64_t)&off_1000E3E40);
}

uint64_t sub_10001B6C4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

void sub_10001B724(uint64_t a1, uint64_t a2)
{
}

void sub_10001B7A8(void *a1, uint64_t a2, uint64_t a3)
{
  _StringGuts.grow(_:)(51);
  v5._object = (void *)0x80000001000BDE70;
  v5._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v5);
  unsigned int v6 = [a1 initiallyInteractive];
  BOOL v7 = v6 == 0;
  if (v6) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if (v7) {
    unint64_t v9 = 0xE500000000000000;
  }
  else {
    unint64_t v9 = 0xE400000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  sub_10004DA44(0, (void *)0xE000000000000000, 0, a3, (uint64_t)&off_1000E3E40);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v12 = (void *)Strong;
    sub_10001B448(0);
  }
}

uint64_t sub_10001B8C0(void *a1, uint64_t a2)
{
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  unsigned int v4 = [a1 isCancelled];
  BOOL v5 = v4 == 0;
  if (v4) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (v5) {
    unint64_t v7 = 0xE500000000000000;
  }
  else {
    unint64_t v7 = 0xE400000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  sub_10004DA44(0xD000000000000025, (void *)0x80000001000BDE40, 0, a2, (uint64_t)&off_1000E3E40);

  return swift_bridgeObjectRelease();
}

unint64_t sub_10001B9AC(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(void *)(qword_1001119C8 + (swift_isaMask & *v2) + 16);
  id v7 = objc_allocWithZone((Class)type metadata accessor for AdaptivePresentationControllerDelegate());
  unint64_t v8 = v2;
  *(void *)((char *)v2 + v6) = [v7 init];

  sub_10004DA44(1953066569, (void *)0xE400000000000000, 0, ObjectType, (uint64_t)&off_1000E4A40);
  uint64_t v28 = a1;
  swift_retain();
  unint64_t v9 = (id)UIHostingController.init(rootView:)();
  id v10 = [v9 presentationController:v28 a2];
  if (!v10) {
    goto LABEL_15;
  }
  id v11 = v10;
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (!v12)
  {

LABEL_15:
    id v26 = sub_10006EDFC();
    NSString v27 = String._bridgeToObjectiveC()();
    [v26 ulog:60 message:v27];
    swift_release();

    return (unint64_t)v9;
  }
  id v13 = (void *)v12;
  id v14 = [self currentTraitCollection];
  [v14 displayCornerRadius];
  double v16 = v15;

  UISheetPresentationController.preferredCornerRadius.setter();
  [v13 _setCornerRadiusForPresentationAndDismissal:v16];
  [v13 setDelegate:*(void *)((char *)v9 + *(void *)(qword_1001119C8 + (swift_isaMask & *v9) + 16))];
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v17 = *(id *)(qword_100111A10 + 632);
  char v18 = sub_10002D38C();

  if ((v18 & 1) == 0)
  {

    swift_release();
    return (unint64_t)v9;
  }
  id v19 = [v13 detents];
  sub_10001280C(0, (unint64_t *)&qword_1000F7748);
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v20 >> 62))
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v21) {
      goto LABEL_8;
    }
LABEL_18:

    swift_release();
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v21) {
    goto LABEL_18;
  }
LABEL_8:
  unint64_t result = v21 - 1;
  if (__OFSUB__(v21, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  if ((v20 & 0xC000000000000001) != 0)
  {
LABEL_21:
    id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v23 = *(id *)(v20 + 8 * result + 32);
LABEL_13:
    NSString v24 = v23;
    swift_bridgeObjectRelease();
    id v25 = [v24 identifier];
    [v13 setLargestUndimmedDetentIdentifier:v25];
    swift_release();

    return (unint64_t)v9;
  }
  __break(1u);
  return result;
}

uint64_t *sub_10001BDB4(char a1, uint64_t a2, uint64_t a3, char a4)
{
  BOOL v5 = v4;
  uint64_t v45 = *v5;
  swift_bridgeObjectRelease();
  id v10 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v11 = sub_100008614(&qword_1000F7A68);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v12) = 0;
  uint64_t v13 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v13) = 2;
  id v14 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  *id v14 = 0;
  v14[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a3) {
    goto LABEL_29;
  }
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_100111B00;
  if (!qword_100111B00)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  char v43 = a1;
  int v16 = a4 & 1;
  *(void *)&long long v46 = 0;
  *((void *)&v46 + 1) = 0xE000000000000000;
  id v44 = (id)qword_100111B00;
  _StringGuts.grow(_:)(32);
  v52[0] = v46;
  v17._countAndFlagsBits = 0xD00000000000001ELL;
  v17._object = (void *)0x80000001000BDC70;
  String.append(_:)(v17);
  *(void *)&long long v46 = a2;
  *((void *)&v46 + 1) = a3;
  LOBYTE(v47) = a4 & 1;
  sub_100008614((uint64_t *)&unk_1000F7700);
  _print_unlocked<A, B>(_:_:)();
  sub_10004DA44(*(uint64_t *)&v52[0], *((void **)&v52[0] + 1), 0, v45, (uint64_t)&off_1000E6A58);
  swift_bridgeObjectRelease();
  *id v14 = a2;
  v14[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v13) = v16;
  char v18 = *(void **)((char *)v5 + v12);
  *(uint64_t *)((char *)v5 + v12) = v15;
  id v19 = v44;

  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v19 valueForKey:v20];

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v46 = 0u;
    long long v47 = 0u;
  }
  sub_100021270((uint64_t)&v46, (uint64_t)v52, &qword_1000F6CC0);
  swift_bridgeObjectRelease();
  if (!v16)
  {
    sub_1000210BC((uint64_t)v52, (uint64_t)&v46, &qword_1000F6CC0);
    id v22 = &qword_1000F6CC0;
    goto LABEL_11;
  }
  uint64_t v24 = sub_10001FB68((uint64_t)&type metadata for Bool);
  if (v24)
  {
    uint64_t v27 = v24;
    uint64_t v28 = v25;
    uint64_t v29 = v26;
    sub_1000210BC((uint64_t)v52, (uint64_t)&v46, &qword_1000F6CC0);
    if (*((void *)&v47 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v30 = v50;
        unint64_t v31 = v51;
        *((void *)&v47 + 1) = v27;
        uint64_t v48 = v28;
        uint64_t v49 = v29;
        sub_100020730((uint64_t *)&v46);
        sub_100063F88();
        sub_10000D6B8(v30, v31);
        id v22 = &qword_1000F7718;
LABEL_11:
        sub_100008614(v22);
        if (swift_dynamicCast()) {
          char v23 = v50;
        }
        else {
          char v23 = 2;
        }
        goto LABEL_19;
      }
    }
    else
    {
      sub_10000EC04((uint64_t)&v46, &qword_1000F6CC0);
    }
    sub_10004DD60(60, 0xD00000000000001ALL, (void *)0x80000001000BDCB0, 0, v45, (uint64_t)&off_1000E6A58);
    char v23 = 2;
    goto LABEL_22;
  }
  sub_10004DD60(60, 0xD000000000000014, (void *)0x80000001000BDC90, 0, v45, (uint64_t)&off_1000E6A58);
  char v23 = 2;
LABEL_19:
  a1 = v43;
LABEL_22:
  uint64_t v32 = 7104878;
  *(void *)&long long v46 = 0x206C616974696E49;
  *((void *)&v46 + 1) = 0xE800000000000000;
  unint64_t v33 = v14[1];
  if (v33)
  {
    uint64_t v50 = *v14;
    unint64_t v51 = v33;
    swift_bridgeObjectRetain();
    uint64_t v34 = String.init<A>(describing:)();
    unint64_t v36 = v35;
  }
  else
  {
    unint64_t v36 = 0xE300000000000000;
    uint64_t v34 = 7104878;
  }
  unint64_t v37 = v36;
  String.append(_:)(*(Swift::String *)&v34);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 8250;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  if (v23 == 2)
  {
    id v39 = (void *)0xE300000000000000;
  }
  else
  {
    a1 = v23 & 1;
    LOBYTE(v50) = v23 & 1;
    uint64_t v32 = String.init<A>(describing:)();
    id v39 = v40;
  }
  v41._countAndFlagsBits = v32;
  v41._object = v39;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  sub_10004DA44(v46, *((void **)&v46 + 1), 0, v45, (uint64_t)&off_1000E6A58);

  swift_bridgeObjectRelease();
  sub_10000EC04((uint64_t)v52, &qword_1000F6CC0);
LABEL_29:
  LOBYTE(v46) = a1 & 1;
  sub_100008614(&qword_1000F77C8);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  LOBYTE(v46) = 2;
  sub_100008614(&qword_1000F7A70);
  swift_allocObject();
  v5[3] = CurrentValueSubject.init(_:)();
  return v5;
}

uint64_t *sub_10001C434(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  BOOL v5 = v4;
  uint64_t v47 = *v5;
  swift_bridgeObjectRelease();
  id v10 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v11 = sub_100008614(&qword_1000F76E8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v12) = 0;
  uint64_t v13 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v13) = 2;
  id v14 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  *id v14 = 0;
  v14[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a3) {
    goto LABEL_27;
  }
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_100111B00;
  if (!qword_100111B00)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  uint64_t v45 = a1;
  int v16 = a4 & 1;
  *(void *)&long long v48 = 0;
  *((void *)&v48 + 1) = 0xE000000000000000;
  id v46 = (id)qword_100111B00;
  _StringGuts.grow(_:)(32);
  v54[0] = v48;
  v17._countAndFlagsBits = 0xD00000000000001ELL;
  v17._object = (void *)0x80000001000BDC70;
  String.append(_:)(v17);
  *(void *)&long long v48 = a2;
  *((void *)&v48 + 1) = a3;
  LOBYTE(v49) = a4 & 1;
  sub_100008614((uint64_t *)&unk_1000F7700);
  _print_unlocked<A, B>(_:_:)();
  sub_10004DA44(*(uint64_t *)&v54[0], *((void **)&v54[0] + 1), 0, v47, (uint64_t)&off_1000E6A58);
  swift_bridgeObjectRelease();
  *id v14 = a2;
  v14[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v13) = v16;
  char v18 = *(void **)((char *)v5 + v12);
  *(uint64_t *)((char *)v5 + v12) = v15;
  id v19 = v46;

  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v21 = [v19 valueForKey:v20];

  if (v21)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v48 = 0u;
    long long v49 = 0u;
  }
  sub_100021270((uint64_t)&v48, (uint64_t)v54, &qword_1000F6CC0);
  swift_bridgeObjectRelease();
  if (!v16)
  {
    sub_1000210BC((uint64_t)v54, (uint64_t)&v48, &qword_1000F6CC0);
    sub_100008614(&qword_1000F6CC0);
    sub_100008614(&qword_1000F7710);
    goto LABEL_11;
  }
  uint64_t v23 = sub_100008614(&qword_1000F7710);
  uint64_t v24 = sub_10001FB68(v23);
  if (v24)
  {
    uint64_t v27 = v24;
    uint64_t v28 = v25;
    uint64_t v29 = v26;
    sub_1000210BC((uint64_t)v54, (uint64_t)&v48, &qword_1000F6CC0);
    if (*((void *)&v49 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v31 = v52;
        unint64_t v30 = v53;
        *((void *)&v49 + 1) = v27;
        uint64_t v50 = v28;
        uint64_t v51 = v29;
        sub_100020730((uint64_t *)&v48);
        sub_100063F88();
        sub_10000D6B8(v31, v30);
        sub_100008614(&qword_1000F7718);
LABEL_11:
        if (swift_dynamicCast()) {
          uint64_t v22 = v52;
        }
        else {
          uint64_t v22 = 1;
        }
        goto LABEL_19;
      }
    }
    else
    {
      sub_10000EC04((uint64_t)&v48, &qword_1000F6CC0);
    }
    a1 = v45;
    sub_10004DD60(60, 0xD00000000000001ALL, (void *)0x80000001000BDCB0, 0, v47, (uint64_t)&off_1000E6A58);
    uint64_t v22 = 1;
    goto LABEL_22;
  }
  sub_10004DD60(60, 0xD000000000000014, (void *)0x80000001000BDC90, 0, v47, (uint64_t)&off_1000E6A58);
  uint64_t v22 = 1;
LABEL_19:
  a1 = v45;
LABEL_22:
  *(void *)&long long v48 = 0x206C616974696E49;
  *((void *)&v48 + 1) = 0xE800000000000000;
  unint64_t v32 = v14[1];
  if (v32)
  {
    uint64_t v52 = *v14;
    unint64_t v53 = v32;
    swift_bridgeObjectRetain();
    uint64_t v33 = String.init<A>(describing:)();
    unint64_t v35 = v34;
  }
  else
  {
    unint64_t v35 = 0xE300000000000000;
    uint64_t v33 = 7104878;
  }
  unint64_t v36 = v35;
  String.append(_:)(*(Swift::String *)&v33);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 8250;
  v37._object = (void *)0xE200000000000000;
  String.append(_:)(v37);
  if (v22 != 1)
  {
    uint64_t v52 = v22;
    id v42 = (id)v22;
    sub_100008614(&qword_1000F7710);
    v43._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    sub_10004DA44(v48, *((void **)&v48 + 1), 0, v47, (uint64_t)&off_1000E6A58);

    swift_bridgeObjectRelease();
    sub_10000EC04((uint64_t)v54, &qword_1000F6CC0);
    id v44 = v42;
    id v39 = a1;
    a1 = (void *)v22;
    goto LABEL_28;
  }
  v38._countAndFlagsBits = 7104878;
  v38._object = (void *)0xE300000000000000;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  sub_10004DA44(v48, *((void **)&v48 + 1), 0, v47, (uint64_t)&off_1000E6A58);

  swift_bridgeObjectRelease();
  sub_10000EC04((uint64_t)v54, &qword_1000F6CC0);
LABEL_27:
  id v39 = a1;
  uint64_t v22 = 1;
LABEL_28:
  *(void *)&long long v48 = a1;
  sub_100008614(&qword_1000F76F0);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  *(void *)&long long v48 = 1;
  sub_100008614(&qword_1000F76F8);
  swift_allocObject();
  uint64_t v40 = CurrentValueSubject.init(_:)();

  sub_10001CB40((id)v22);
  v5[3] = v40;
  return v5;
}

void sub_10001CB40(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t *sub_10001CB50(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_10001E1A4(a1, a2, a3, a4, a5, a6, type metadata accessor for ActivityDisplayContext, &qword_1000F7720, &qword_1000F7AC0, type metadata accessor for ActivityDisplayContext, type metadata accessor for ActivityDisplayContext, &qword_1000F7AC8, &qword_1000F7AD0);
}

uint64_t *sub_10001CBD0(char a1, uint64_t a2, uint64_t a3, char a4)
{
  BOOL v5 = v4;
  uint64_t v10 = *v5;
  swift_bridgeObjectRelease();
  uint64_t v11 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v12 = sub_100008614(&qword_1000F7AA8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v13) = 0;
  uint64_t v14 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v14) = 2;
  uint64_t v15 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a3) {
    goto LABEL_27;
  }
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100111B00;
  if (!qword_100111B00)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  char v46 = a1;
  uint64_t v48 = v14;
  uint64_t v17 = v10;
  char v18 = v15;
  int v19 = a4 & 1;
  *(void *)&long long v49 = 0;
  *((void *)&v49 + 1) = 0xE000000000000000;
  id v47 = (id)qword_100111B00;
  _StringGuts.grow(_:)(32);
  v55[0] = v49;
  v20._countAndFlagsBits = 0xD00000000000001ELL;
  v20._object = (void *)0x80000001000BDC70;
  String.append(_:)(v20);
  *(void *)&long long v49 = a2;
  *((void *)&v49 + 1) = a3;
  LOBYTE(v50) = a4 & 1;
  sub_100008614((uint64_t *)&unk_1000F7700);
  _print_unlocked<A, B>(_:_:)();
  sub_10004DA44(*(uint64_t *)&v55[0], *((void **)&v55[0] + 1), 0, v17, (uint64_t)&off_1000E6A58);
  swift_bridgeObjectRelease();
  *char v18 = a2;
  v18[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + v48) = v19;
  id v21 = *(void **)((char *)v5 + v13);
  *(uint64_t *)((char *)v5 + v13) = v16;
  id v22 = v47;

  swift_bridgeObjectRetain();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [v22 valueForKey:v23];

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v49 = 0u;
    long long v50 = 0u;
  }
  sub_100021270((uint64_t)&v49, (uint64_t)v55, &qword_1000F6CC0);
  swift_bridgeObjectRelease();
  if (!v19)
  {
    sub_1000210BC((uint64_t)v55, (uint64_t)&v49, &qword_1000F6CC0);
    sub_100008614(&qword_1000F6CC0);
    if (swift_dynamicCast()) {
      char v25 = v53;
    }
    else {
      char v25 = 5;
    }
    goto LABEL_20;
  }
  uint64_t v26 = sub_10001FB68((uint64_t)&type metadata for CardMode);
  if (!v26)
  {
    sub_10004DD60(60, 0xD000000000000014, (void *)0x80000001000BDC90, 0, v17, (uint64_t)&off_1000E6A58);
    char v25 = 5;
    goto LABEL_20;
  }
  uint64_t v29 = v26;
  uint64_t v30 = v27;
  uint64_t v31 = v28;
  sub_1000210BC((uint64_t)v55, (uint64_t)&v49, &qword_1000F6CC0);
  if (!*((void *)&v50 + 1))
  {
    sub_10000EC04((uint64_t)&v49, &qword_1000F6CC0);
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    sub_10004DD60(60, 0xD00000000000001ALL, (void *)0x80000001000BDCB0, 0, v17, (uint64_t)&off_1000E6A58);
    char v25 = 5;
    goto LABEL_20;
  }
  uint64_t v32 = v53;
  unint64_t v33 = v54;
  *((void *)&v50 + 1) = v29;
  uint64_t v51 = v30;
  uint64_t v52 = v31;
  sub_100020730((uint64_t *)&v49);
  sub_100063F88();
  sub_10000D6B8(v32, v33);
  sub_100008614(&qword_1000F7718);
  if (swift_dynamicCast()) {
    char v25 = v53;
  }
  else {
    char v25 = 5;
  }
  a1 = v46;
LABEL_20:
  uint64_t v34 = 7104878;
  *(void *)&long long v49 = 0x206C616974696E49;
  *((void *)&v49 + 1) = 0xE800000000000000;
  unint64_t v35 = v18[1];
  if (v35)
  {
    uint64_t v53 = *v18;
    unint64_t v54 = v35;
    swift_bridgeObjectRetain();
    uint64_t v36 = String.init<A>(describing:)();
    unint64_t v38 = v37;
  }
  else
  {
    unint64_t v38 = 0xE300000000000000;
    uint64_t v36 = 7104878;
  }
  unint64_t v39 = v38;
  String.append(_:)(*(Swift::String *)&v36);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 8250;
  v40._object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  if (v25 == 5)
  {
    Swift::String v41 = (void *)0xE300000000000000;
  }
  else
  {
    LOBYTE(v53) = v25;
    uint64_t v34 = String.init<A>(describing:)();
    Swift::String v41 = v42;
    a1 = v25;
  }
  v43._countAndFlagsBits = v34;
  v43._object = v41;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  sub_10004DA44(v49, *((void **)&v49 + 1), 0, v17, (uint64_t)&off_1000E6A58);

  swift_bridgeObjectRelease();
  sub_10000EC04((uint64_t)v55, &qword_1000F6CC0);
LABEL_27:
  LOBYTE(v49) = a1;
  sub_100008614(&qword_1000F7AB0);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  LOBYTE(v49) = 5;
  sub_100008614(&qword_1000F7AB8);
  swift_allocObject();
  v5[3] = CurrentValueSubject.init(_:)();
  return v5;
}

uint64_t *sub_10001D2C0(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v51 = *v6;
  swift_bridgeObjectRelease();
  uint64_t v12 = (char *)v6 + *(void *)(*v6 + 104);
  uint64_t v13 = sub_100008614(&qword_1000F7A90);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = *(void *)(*v6 + 112);
  *(uint64_t *)((char *)v6 + v14) = 0;
  uint64_t v15 = *(void *)(*v6 + 120);
  *((unsigned char *)v6 + v15) = 2;
  uint64_t v16 = (uint64_t *)((char *)v6 + *(void *)(*v6 + 128));
  *uint64_t v16 = 0;
  v16[1] = 0;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 + 136)) = 0;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 + 144)) = 0;
  if (!a4)
  {
LABEL_29:
    sub_100021250(a1);
    goto LABEL_30;
  }
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100111B00;
  if (qword_100111B00)
  {
    unint64_t v48 = a2;
    long long v49 = a1;
    int v18 = a5 & 1;
    *(void *)&long long v52 = 0;
    *((void *)&v52 + 1) = 0xE000000000000000;
    id v50 = (id)qword_100111B00;
    _StringGuts.grow(_:)(32);
    v58[0] = v52;
    v19._countAndFlagsBits = 0xD00000000000001ELL;
    v19._object = (void *)0x80000001000BDC70;
    String.append(_:)(v19);
    *(void *)&long long v52 = a3;
    *((void *)&v52 + 1) = a4;
    LOBYTE(v53) = a5 & 1;
    sub_100008614((uint64_t *)&unk_1000F7700);
    _print_unlocked<A, B>(_:_:)();
    sub_10004DA44(*(uint64_t *)&v58[0], *((void **)&v58[0] + 1), 0, v51, (uint64_t)&off_1000E6A58);
    swift_bridgeObjectRelease();
    *uint64_t v16 = a3;
    v16[1] = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((unsigned char *)v6 + v15) = v18;
    Swift::String v20 = *(void **)((char *)v6 + v14);
    *(uint64_t *)((char *)v6 + v14) = v17;
    id v21 = v50;

    swift_bridgeObjectRetain();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v23 = [v21 valueForKey:v22];

    if (v23)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v52 = 0u;
      long long v53 = 0u;
    }
    sub_100021270((uint64_t)&v52, (uint64_t)v58, &qword_1000F6CC0);
    swift_bridgeObjectRelease();
    if (!v18)
    {
      sub_1000210BC((uint64_t)v58, (uint64_t)&v52, &qword_1000F6CC0);
      sub_100008614(&qword_1000F6CC0);
      int v24 = swift_dynamicCast();
      if (v24) {
        unint64_t v25 = v57;
      }
      else {
        unint64_t v25 = 0;
      }
      if (v24) {
        uint64_t v26 = v56;
      }
      else {
        uint64_t v26 = 2;
      }
      a2 = v48;
      goto LABEL_24;
    }
    uint64_t v27 = sub_10001FB68((uint64_t)&type metadata for MediaTransferStatus);
    if (v27)
    {
      uint64_t v30 = v27;
      uint64_t v31 = v28;
      uint64_t v32 = v29;
      sub_1000210BC((uint64_t)v58, (uint64_t)&v52, &qword_1000F6CC0);
      a2 = v48;
      if (*((void *)&v53 + 1))
      {
        if (swift_dynamicCast())
        {
          uint64_t v33 = v56;
          unint64_t v34 = v57;
          *((void *)&v53 + 1) = v30;
          uint64_t v54 = v31;
          uint64_t v55 = v32;
          sub_100020730((uint64_t *)&v52);
          sub_100063F88();
          sub_10000D6B8(v33, v34);
          sub_100008614(&qword_1000F7718);
          int v47 = swift_dynamicCast();
          if (v47) {
            unint64_t v25 = v57;
          }
          else {
            unint64_t v25 = 0;
          }
          if (v47) {
            uint64_t v26 = v56;
          }
          else {
            uint64_t v26 = 2;
          }
LABEL_24:
          *(void *)&long long v52 = 0x206C616974696E49;
          *((void *)&v52 + 1) = 0xE800000000000000;
          unint64_t v35 = v16[1];
          if (v35)
          {
            uint64_t v56 = *v16;
            unint64_t v57 = v35;
            swift_bridgeObjectRetain();
            uint64_t v36 = String.init<A>(describing:)();
            unint64_t v38 = v37;
          }
          else
          {
            unint64_t v38 = 0xE300000000000000;
            uint64_t v36 = 7104878;
          }
          unint64_t v39 = v38;
          String.append(_:)(*(Swift::String *)&v36);
          swift_bridgeObjectRelease();
          v40._countAndFlagsBits = 8250;
          v40._object = (void *)0xE200000000000000;
          String.append(_:)(v40);
          if (v26 != 2)
          {
            uint64_t v56 = v26;
            unint64_t v57 = v25;
            sub_100021250((id)v26);
            v46._countAndFlagsBits = String.init<A>(describing:)();
            String.append(_:)(v46);
            swift_bridgeObjectRelease();
            sub_10004DA44(v52, *((void **)&v52 + 1), 0, v51, (uint64_t)&off_1000E6A58);

            swift_bridgeObjectRelease();
            sub_10000EC04((uint64_t)v58, &qword_1000F6CC0);
            sub_100021250((id)v26);
            unint64_t v43 = v25;
            uint64_t v42 = v26;
            a1 = v49;
            goto LABEL_31;
          }
          v41._countAndFlagsBits = 7104878;
          v41._object = (void *)0xE300000000000000;
          String.append(_:)(v41);
          swift_bridgeObjectRelease();
          sub_10004DA44(v52, *((void **)&v52 + 1), 0, v51, (uint64_t)&off_1000E6A58);

          swift_bridgeObjectRelease();
          sub_10000EC04((uint64_t)v58, &qword_1000F6CC0);
          a1 = v49;
          goto LABEL_29;
        }
      }
      else
      {
        sub_10000EC04((uint64_t)&v52, &qword_1000F6CC0);
      }
      sub_10004DD60(60, 0xD00000000000001ALL, (void *)0x80000001000BDCB0, 0, v51, (uint64_t)&off_1000E6A58);
      unint64_t v25 = 0;
      uint64_t v26 = 2;
      goto LABEL_24;
    }
    sub_10004DD60(60, 0xD000000000000014, (void *)0x80000001000BDC90, 0, v51, (uint64_t)&off_1000E6A58);
    unint64_t v25 = 0;
    uint64_t v26 = 2;
    a2 = v48;
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  sub_100021250(a1);
LABEL_30:
  uint64_t v42 = 2;
  uint64_t v26 = (uint64_t)a1;
  unint64_t v43 = a2;
LABEL_31:
  *(void *)&long long v52 = v26;
  *((void *)&v52 + 1) = v43;
  sub_100008614(&qword_1000F7A98);
  swift_allocObject();
  v6[2] = CurrentValueSubject.init(_:)();
  long long v52 = xmmword_1000AE8D0;
  sub_100008614(&qword_1000F7AA0);
  swift_allocObject();
  uint64_t v44 = CurrentValueSubject.init(_:)();
  sub_10001CB40(a1);
  sub_100021260((id)v42);
  v6[3] = v44;
  return v6;
}

uint64_t *sub_10001DA28(uint64_t a1, uint64_t a2, char a3, float a4)
{
  BOOL v5 = v4;
  uint64_t v10 = *v5;
  swift_bridgeObjectRelease();
  uint64_t v11 = (char *)v5 + *(void *)(*v5 + 104);
  uint64_t v12 = sub_100008614(&qword_1000F7A78);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = *(void *)(*v5 + 112);
  *(uint64_t *)((char *)v5 + v13) = 0;
  uint64_t v14 = *(void *)(*v5 + 120);
  *((unsigned char *)v5 + v14) = 2;
  uint64_t v15 = (uint64_t *)((char *)v5 + *(void *)(*v5 + 128));
  *uint64_t v15 = 0;
  v15[1] = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 136)) = 0;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 + 144)) = 0;
  if (!a2) {
    goto LABEL_28;
  }
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100111B00;
  if (!qword_100111B00)
  {
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  *(void *)&long long v50 = 0;
  *((void *)&v50 + 1) = 0xE000000000000000;
  id v49 = (id)qword_100111B00;
  _StringGuts.grow(_:)(32);
  v56[0] = v50;
  v17._countAndFlagsBits = 0xD00000000000001ELL;
  v17._object = (void *)0x80000001000BDC70;
  String.append(_:)(v17);
  *(void *)&long long v50 = a1;
  *((void *)&v50 + 1) = a2;
  LOBYTE(v51) = a3 & 1;
  sub_100008614((uint64_t *)&unk_1000F7700);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v47 = v10;
  sub_10004DA44(*(uint64_t *)&v56[0], *((void **)&v56[0] + 1), 0, v10, (uint64_t)&off_1000E6A58);
  swift_bridgeObjectRelease();
  *uint64_t v15 = a1;
  v15[1] = a2;
  unint64_t v48 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v18 = a3 & 1;
  *((unsigned char *)v5 + v14) = v18;
  Swift::String v19 = *(void **)((char *)v5 + v13);
  *(uint64_t *)((char *)v5 + v13) = v16;
  id v20 = v49;

  swift_bridgeObjectRetain();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v22 = [v20 valueForKey:v21];

  if (v22)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v50 = 0u;
    long long v51 = 0u;
  }
  sub_100021270((uint64_t)&v50, (uint64_t)v56, &qword_1000F6CC0);
  swift_bridgeObjectRelease();
  if (!v18)
  {
    sub_1000210BC((uint64_t)v56, (uint64_t)&v50, &qword_1000F6CC0);
    sub_100008614(&qword_1000F6CC0);
    int v23 = swift_dynamicCast();
    if (v23) {
      float v24 = *(float *)&v54;
    }
    else {
      float v24 = 0.0;
    }
    char v25 = v23 ^ 1;
    uint64_t v26 = v48;
    goto LABEL_21;
  }
  uint64_t v27 = sub_10001FB68((uint64_t)&type metadata for Float);
  if (!v27)
  {
    sub_10004DD60(60, 0xD000000000000014, (void *)0x80000001000BDC90, 0, v10, (uint64_t)&off_1000E6A58);
    char v25 = 1;
    float v24 = 0.0;
    uint64_t v26 = v48;
    goto LABEL_21;
  }
  uint64_t v30 = v27;
  uint64_t v31 = v28;
  uint64_t v32 = v29;
  sub_1000210BC((uint64_t)v56, (uint64_t)&v50, &qword_1000F6CC0);
  uint64_t v26 = v48;
  if (!*((void *)&v51 + 1))
  {
    sub_10000EC04((uint64_t)&v50, &qword_1000F6CC0);
    goto LABEL_20;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_20:
    uint64_t v10 = v47;
    sub_10004DD60(60, 0xD00000000000001ALL, (void *)0x80000001000BDCB0, 0, v47, (uint64_t)&off_1000E6A58);
    char v25 = 1;
    float v24 = 0.0;
    goto LABEL_21;
  }
  uint64_t v33 = v54;
  unint64_t v34 = v55;
  *((void *)&v51 + 1) = v30;
  uint64_t v52 = v31;
  uint64_t v53 = v32;
  sub_100020730((uint64_t *)&v50);
  sub_100063F88();
  sub_10000D6B8(v33, v34);
  sub_100008614(&qword_1000F7718);
  int v46 = swift_dynamicCast();
  if (v46) {
    float v24 = *(float *)&v54;
  }
  else {
    float v24 = 0.0;
  }
  char v25 = v46 ^ 1;
  uint64_t v10 = v47;
LABEL_21:
  uint64_t v35 = 7104878;
  *(void *)&long long v50 = 0x206C616974696E49;
  *((void *)&v50 + 1) = 0xE800000000000000;
  unint64_t v36 = v26[1];
  if (v36)
  {
    uint64_t v54 = *v26;
    unint64_t v55 = v36;
    swift_bridgeObjectRetain();
    uint64_t v37 = String.init<A>(describing:)();
    unint64_t v39 = v38;
  }
  else
  {
    unint64_t v39 = 0xE300000000000000;
    uint64_t v37 = 7104878;
  }
  unint64_t v40 = v39;
  String.append(_:)(*(Swift::String *)&v37);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 8250;
  v41._object = (void *)0xE200000000000000;
  String.append(_:)(v41);
  if (v25)
  {
    uint64_t v42 = (void *)0xE300000000000000;
  }
  else
  {
    *(float *)&uint64_t v54 = v24;
    uint64_t v35 = String.init<A>(describing:)();
    uint64_t v42 = v43;
    a4 = v24;
  }
  v44._countAndFlagsBits = v35;
  v44._object = v42;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  sub_10004DA44(v50, *((void **)&v50 + 1), 0, v10, (uint64_t)&off_1000E6A58);

  swift_bridgeObjectRelease();
  sub_10000EC04((uint64_t)v56, &qword_1000F6CC0);
LABEL_28:
  *(float *)&long long v50 = a4;
  sub_100008614(&qword_1000F7A80);
  swift_allocObject();
  v5[2] = CurrentValueSubject.init(_:)();
  LODWORD(v50) = 0;
  BYTE4(v50) = 1;
  sub_100008614(&qword_1000F7A88);
  swift_allocObject();
  v5[3] = CurrentValueSubject.init(_:)();
  return v5;
}

uint64_t *sub_10001E124(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_10001E1A4(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext, &qword_1000F7A48, &qword_1000F7A50, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext, &qword_1000F7A58, &qword_1000F7A60);
}

uint64_t *sub_10001E1A4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void), uint64_t *a8, uint64_t *a9, uint64_t (*a10)(void), uint64_t (*a11)(void), uint64_t *a12, uint64_t *a13)
{
  uint64_t v15 = v13;
  LODWORD(v106) = a4;
  uint64_t v107 = a2;
  uint64_t v115 = a1;
  unint64_t v114 = a13;
  unint64_t v113 = a12;
  uint64_t v116 = a10;
  v117 = a11;
  uint64_t v108 = *v13;
  uint64_t v17 = a7(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v110 = (uint64_t)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v112 = (uint64_t)&v99 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v103 = (uint64_t)&v99 - v27;
  __chkstk_darwin(v26, v28);
  uint64_t v104 = (uint64_t)&v99 - v29;
  uint64_t v30 = sub_100008614(a8);
  uint64_t v32 = __chkstk_darwin(v30 - 8, v31);
  uint64_t v111 = (char *)&v99 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v32, v34);
  uint64_t v109 = (uint64_t)&v99 - v36;
  uint64_t v38 = __chkstk_darwin(v35, v37);
  uint64_t v105 = (char *)&v99 - v39;
  uint64_t v41 = __chkstk_darwin(v38, v40);
  v101 = (char *)&v99 - v42;
  uint64_t v44 = __chkstk_darwin(v41, v43);
  uint64_t v102 = (char *)&v99 - v45;
  __chkstk_darwin(v44, v46);
  unint64_t v48 = (char *)&v99 - v47;
  swift_bridgeObjectRelease();
  id v49 = (char *)v15 + *(void *)(*v15 + 104);
  uint64_t v50 = sub_100008614(a9);
  long long v51 = v49;
  uint64_t v52 = v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v51, 1, 1, v50);
  uint64_t v53 = *(void *)(*v15 + 112);
  *(uint64_t *)((char *)v15 + v53) = 0;
  uint64_t v54 = *(void *)(*v15 + 120);
  *((unsigned char *)v15 + v54) = 2;
  unint64_t v55 = (uint64_t *)((char *)v15 + *(void *)(*v15 + 128));
  *unint64_t v55 = 0;
  v55[1] = 0;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 + 136)) = 0;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 + 144)) = 0;
  v120 = v48;
  uint64_t v121 = v18;
  id v118 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  uint64_t v119 = v18 + 56;
  v118(v48, 1, 1, v52);
  if (!a3) {
    goto LABEL_26;
  }
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  uint64_t v56 = qword_100111B00;
  if (!qword_100111B00)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v100 = v52;
  uint64_t v99 = a8;
  int v57 = v106 & 1;
  *(void *)&long long v122 = 0;
  *((void *)&v122 + 1) = 0xE000000000000000;
  id v106 = (id)qword_100111B00;
  _StringGuts.grow(_:)(32);
  long long v128 = v122;
  v58._countAndFlagsBits = 0xD00000000000001ELL;
  v58._object = (void *)0x80000001000BDC70;
  String.append(_:)(v58);
  uint64_t v59 = v107;
  *(void *)&long long v122 = v107;
  *((void *)&v122 + 1) = a3;
  LOBYTE(v123) = v57;
  sub_100008614((uint64_t *)&unk_1000F7700);
  _print_unlocked<A, B>(_:_:)();
  sub_10004DA44(v128, *((void **)&v128 + 1), 0, v108, (uint64_t)&off_1000E6A58);
  swift_bridgeObjectRelease();
  *unint64_t v55 = v59;
  v55[1] = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v15 + v54) = v57;
  uint64_t v60 = *(void **)((char *)v15 + v53);
  *(uint64_t *)((char *)v15 + v53) = v56;
  id v61 = v106;

  swift_bridgeObjectRetain();
  NSString v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v63 = [v61 valueForKey:v62];

  if (v63)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v122 = 0u;
    long long v123 = 0u;
  }
  uint64_t v52 = v100;
  uint64_t v64 = (uint64_t)v120;
  uint64_t v65 = (uint64_t)v105;
  sub_100021270((uint64_t)&v122, (uint64_t)&v128, &qword_1000F6CC0);
  swift_bridgeObjectRelease();
  if (v57)
  {
    id v68 = v61;
    uint64_t v69 = sub_10001FB68(v52);
    if (v69)
    {
      uint64_t v72 = v69;
      uint64_t v73 = v70;
      uint64_t v74 = v71;
      sub_1000210BC((uint64_t)&v128, (uint64_t)&v122, &qword_1000F6CC0);
      if (*((void *)&v123 + 1))
      {
        char v75 = swift_dynamicCast();
        a8 = v99;
        if (v75)
        {
          unint64_t v76 = v127;
          *((void *)&v123 + 1) = v72;
          uint64_t v124 = v73;
          uint64_t v125 = v74;
          uint64_t v77 = v126;
          sub_100020730((uint64_t *)&v122);
          sub_100063F88();
          sub_10000EC04(v64, a8);
          sub_10000D6B8(v77, v76);
          sub_100008614(&qword_1000F7718);
          uint64_t v97 = (uint64_t)v101;
          uint64_t v52 = v100;
          int v98 = swift_dynamicCast();
          v118((char *)v97, v98 ^ 1u, 1, v52);
          sub_100021270(v97, v64, a8);
LABEL_18:
          id v61 = v68;
          goto LABEL_19;
        }
      }
      else
      {
        sub_10000EC04((uint64_t)&v122, &qword_1000F6CC0);
        a8 = v99;
      }
      sub_10004DD60(60, 0xD00000000000001ALL, (void *)0x80000001000BDCB0, 0, v108, (uint64_t)&off_1000E6A58);
      goto LABEL_18;
    }
    sub_10004DD60(60, 0xD000000000000014, (void *)0x80000001000BDC90, 0, v108, (uint64_t)&off_1000E6A58);
    a8 = v99;
    goto LABEL_18;
  }
  a8 = v99;
  sub_10000EC04(v64, v99);
  sub_1000210BC((uint64_t)&v128, (uint64_t)&v122, &qword_1000F6CC0);
  sub_100008614(&qword_1000F6CC0);
  uint64_t v66 = (uint64_t)v102;
  int v67 = swift_dynamicCast();
  v118((char *)v66, v67 ^ 1u, 1, v52);
  sub_100021270(v66, v64, a8);
LABEL_19:
  uint64_t v78 = 7104878;
  *(void *)&long long v122 = 0x206C616974696E49;
  *((void *)&v122 + 1) = 0xE800000000000000;
  unint64_t v79 = v55[1];
  if (v79)
  {
    uint64_t v126 = *v55;
    unint64_t v127 = v79;
    swift_bridgeObjectRetain();
    uint64_t v80 = String.init<A>(describing:)();
    unint64_t v82 = v81;
  }
  else
  {
    unint64_t v82 = 0xE300000000000000;
    uint64_t v80 = 7104878;
  }
  unint64_t v83 = v82;
  String.append(_:)(*(Swift::String *)&v80);
  swift_bridgeObjectRelease();
  v84._countAndFlagsBits = 8250;
  v84._object = (void *)0xE200000000000000;
  String.append(_:)(v84);
  sub_1000210BC(v64, v65, a8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v65, 1, v52) == 1)
  {
    char v85 = (void *)0xE300000000000000;
  }
  else
  {
    uint64_t v86 = v104;
    sub_100021188(v65, v104, v116);
    unint64_t v87 = v117;
    sub_100021120(v86, v103, v117);
    uint64_t v78 = String.init<A>(describing:)();
    char v85 = v88;
    sub_1000211F0(v86, v87);
  }
  v89._countAndFlagsBits = v78;
  v89._object = v85;
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  sub_10004DA44(v122, *((void **)&v122 + 1), 0, v108, (uint64_t)&off_1000E6A58);

  swift_bridgeObjectRelease();
  sub_10000EC04((uint64_t)&v128, &qword_1000F6CC0);
LABEL_26:
  uint64_t v90 = (uint64_t)v120;
  uint64_t v91 = v109;
  sub_1000210BC((uint64_t)v120, v109, a8);
  uint64_t v92 = v115;
  uint64_t v93 = v110;
  v94 = v117;
  sub_100021120(v115, v110, v117);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v121 + 48))(v91, 1, v52) == 1)
  {
    sub_100021188(v93, v112, v116);
    sub_10000EC04(v91, a8);
  }
  else
  {
    sub_1000211F0(v93, v94);
    sub_100021188(v91, v112, v116);
  }
  sub_100008614(v113);
  swift_allocObject();
  v15[2] = CurrentValueSubject.init(_:)();
  v118(v111, 1, 1, v52);
  sub_100008614(v114);
  swift_allocObject();
  uint64_t v95 = CurrentValueSubject.init(_:)();
  sub_1000211F0(v92, v94);
  sub_10000EC04(v90, a8);
  v15[3] = v95;
  return v15;
}

void sub_10001ECCC(void (*a1)(void **), uint64_t a2)
{
  uint64_t v5 = *v2;
  id v6 = sub_10006EEC8();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  int v8 = *((unsigned __int8 *)v2 + 40);
  if (v8 == 254)
  {
    if (a1)
    {
      swift_retain();
      id v16 = sub_10006EEC8();
      NSString v17 = String._bridgeToObjectiveC()();
      [v16 ulog:40 message:v17];

      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = a1;
      *(void *)(v18 + 24) = a2;
      uint64_t v19 = (char **)(v2 + 6);
      swift_beginAccess();
      uint64_t v20 = (char *)v2[6];
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v2[6] = (uint64_t)v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v20 = sub_1000693D0(0, *((void *)v20 + 2) + 1, 1, v20);
        *uint64_t v19 = v20;
      }
      unint64_t v23 = *((void *)v20 + 2);
      unint64_t v22 = *((void *)v20 + 3);
      if (v23 >= v22 >> 1)
      {
        uint64_t v20 = sub_1000693D0((char *)(v22 > 1), v23 + 1, 1, v20);
        *uint64_t v19 = v20;
      }
      *((void *)v20 + 2) = v23 + 1;
      uint64_t v24 = &v20[16 * v23];
      *((void *)v24 + 4) = sub_1000208E0;
      *((void *)v24 + 5) = v18;
      swift_endAccess();
      sub_10000F808((uint64_t)a1);
    }
    else
    {
      id v28 = sub_10006EEC8();
      NSString v29 = String._bridgeToObjectiveC()();
      [v28 ulog:40 message:v29];
    }
  }
  else if (v8 == 255)
  {
    id v9 = sub_10006EEC8();
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 ulog:40 message:v10];

    uint64_t v11 = (void *)v2[4];
    v2[4] = 0;
    unsigned __int8 v12 = *((unsigned char *)v2 + 40);
    *((unsigned char *)v2 + 40) = -2;
    sub_1000208C8(v11, v12);
    uint64_t v13 = (void (*)(uint64_t (*)(uint64_t), void *))v2[2];
    uint64_t v14 = swift_allocObject();
    swift_weakInit();
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = v14;
    v15[3] = a1;
    v15[4] = a2;
    v15[5] = v5;
    swift_retain();
    swift_retain();
    sub_10000F7F8((uint64_t)a1);
    v13(sub_1000209A4, v15);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v25 = (void *)v2[4];
    uint64_t v30 = v25;
    char v31 = v8 & 1;
    sub_100020718(v25, v8 & 1);
    id v26 = sub_10006EEC8();
    NSString v27 = String._bridgeToObjectiveC()();
    [v26 ulog:40 message:v27];

    if (a1) {
      a1(&v30);
    }
    sub_1000208C8(v25, v8);
  }
}

uint64_t sub_10001F0E0(void *a1, char a2, uint64_t a3, uint64_t (*a4)(void **), uint64_t a5, uint64_t a6)
{
  int v8 = a2 & 1;
  unint64_t v22 = a1;
  char v23 = a2 & 1;
  sub_10004DA44(0xD000000000000016, (void *)0x80000001000BE3E0, 0, a6, (uint64_t)&off_1000E7328);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    NSString v10 = *(void **)(Strong + 32);
    *(void *)(Strong + 32) = a1;
    unsigned __int8 v11 = *(unsigned char *)(Strong + 40);
    *(unsigned char *)(Strong + 40) = v8;
    sub_100020718(a1, v8);
    sub_1000208C8(v10, v11);
    swift_release();
  }
  swift_beginAccess();
  uint64_t v12 = swift_weakLoadStrong();
  if (v12)
  {
    uint64_t v13 = v12;
    swift_beginAccess();
    uint64_t v14 = *(void *)(v13 + 48);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = v14 + 40;
      do
      {
        NSString v17 = *(void (**)(void **))(v16 - 8);
        uint64_t v20 = a1;
        BOOL v21 = v8 != 0;
        swift_retain();
        v17(&v20);
        swift_release();
        v16 += 16;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v19 = result;
    swift_beginAccess();
    *(void *)(v19 + 48) = &_swiftEmptyArrayStorage;
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (a4) {
    return a4(&v22);
  }
  return result;
}

uint64_t sub_10001F2DC(char a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  char v22 = a1;
  if (a2) {
    uint64_t v13 = a2(&v22);
  }
  else {
    uint64_t v13 = String.init<A>(describing:)();
  }
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = a7;
  v18._object = a8;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  if (a9)
  {
    id v19 = a9;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a10 message:v20];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
  return a1 & 1;
}

uint64_t sub_10001F430(uint64_t a1, uint64_t (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  char v22 = a1;
  if (a2) {
    uint64_t v13 = a2(&v22);
  }
  else {
    uint64_t v13 = String.init<A>(describing:)();
  }
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = a7;
  v18._object = a8;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  if (a9)
  {
    id v19 = a9;
    NSString v20 = String._bridgeToObjectiveC()();
    [v19 ulog:a10 message:v20];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
  return a1;
}

float sub_10001F580(uint64_t (*a1)(float *), float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9, unsigned int a10)
{
  float v23 = a2;
  if (a1) {
    uint64_t v14 = a1(&v23);
  }
  else {
    uint64_t v14 = String.init<A>(describing:)();
  }
  uint64_t v16 = v14;
  Swift::String v17 = v15;
  swift_bridgeObjectRetain();
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = a7;
  v19._object = a8;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  if (a9)
  {
    id v20 = a9;
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 ulog:a10 message:v21];
    swift_bridgeObjectRelease();
  }
  else
  {
    NSLog(_:_:)();
    swift_bridgeObjectRelease();
  }
  return a2;
}

uint64_t sub_10001F6DC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X7>, uint64_t a7@<X8>, void *a8, unsigned int a9)
{
  v60._uint64_t countAndFlagsBits = a5;
  v60._object = a6;
  uint64_t v59 = a3;
  uint64_t v61 = a7;
  unsigned int v58 = a9;
  id v62 = a8;
  uint64_t v12 = sub_100008614(&qword_1000F7720);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v16 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  Swift::String v19 = (char *)&v54 - v18;
  uint64_t v20 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v25 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v23, v26);
  NSString v29 = (char *)&v54 - v28;
  __chkstk_darwin(v27, v30);
  if (a2)
  {
    uint64_t v32 = a2(a1);
    uint64_t v34 = v33;
    uint64_t v63 = v59;
    uint64_t v64 = a4;
    swift_bridgeObjectRetain();
    v35._uint64_t countAndFlagsBits = v32;
    v35._object = v34;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    uint64_t v36 = a1;
    if (v62)
    {
      id v37 = v62;
      NSString v38 = String._bridgeToObjectiveC()();
      [v37 ulog:v58 message:v38];
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
    }
    uint64_t v39 = v61;
  }
  else
  {
    uint64_t v55 = a4;
    uint64_t v56 = a1;
    id v40 = v62;
    uint64_t v41 = (char *)&v54 - v31;
    sub_100021120(a1, (uint64_t)&v54 - v31, type metadata accessor for ActivityDisplayContext);
    int v57 = v41;
    sub_100021120((uint64_t)v41, (uint64_t)v19, type metadata accessor for ActivityDisplayContext);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v20);
    sub_1000210BC((uint64_t)v19, (uint64_t)v16, &qword_1000F7720);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v16, 1, v20) == 1)
    {
      uint64_t v42 = (void *)0xE300000000000000;
      uint64_t v43 = 7104878;
    }
    else
    {
      sub_100021188((uint64_t)v16, (uint64_t)v29, type metadata accessor for ActivityDisplayContext);
      sub_100021120((uint64_t)v29, (uint64_t)v25, type metadata accessor for ActivityDisplayContext);
      uint64_t v43 = String.init<A>(describing:)();
      uint64_t v42 = v44;
      sub_1000211F0((uint64_t)v29, type metadata accessor for ActivityDisplayContext);
    }
    object = v60._object;
    uint64_t v39 = v61;
    uint64_t v46 = v55;
    uint64_t v36 = v56;
    uint64_t v48 = v59;
    uint64_t countAndFlagsBits = v60._countAndFlagsBits;
    sub_10000EC04((uint64_t)v19, &qword_1000F7720);
    uint64_t v63 = v48;
    uint64_t v64 = v46;
    swift_bridgeObjectRetain();
    v49._uint64_t countAndFlagsBits = v43;
    v49._object = v42;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v50._uint64_t countAndFlagsBits = countAndFlagsBits;
    v50._object = object;
    String.append(_:)(v50);
    swift_bridgeObjectRelease();
    if (v40)
    {
      id v51 = v40;
      NSString v52 = String._bridgeToObjectiveC()();
      [v51 ulog:v58 message:v52];
      swift_bridgeObjectRelease();
    }
    else
    {
      NSLog(_:_:)();
      swift_bridgeObjectRelease();
    }
    sub_1000211F0((uint64_t)v57, type metadata accessor for ActivityDisplayContext);
  }
  return sub_100021120(v36, v39, type metadata accessor for ActivityDisplayContext);
}

uint64_t sub_10001FB68(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    if (swift_conformsToProtocol2()) {
      return a1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10001FBF0(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

id sub_10001FC44(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v33 = a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = sub_100008614(&qword_1000F7720);
  __chkstk_darwin(v6 - 8, v7);
  id v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v10 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC13PCViewService13CardPresenter_headerView] = 0;
  uint64_t v14 = OBJC_IVAR____TtC13PCViewService13CardPresenter__isAnimatingIn;
  sub_100008614(&qword_1000F7728);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(unsigned char *)(v15 + 24) = 0;
  *(void *)&v3[v14] = v15;
  *(void *)&v3[OBJC_IVAR____TtC13PCViewService13CardPresenter_animatingInListener] = 0;
  uint64_t v16 = OBJC_IVAR____TtC13PCViewService13CardPresenter_cardViewController;
  type metadata accessor for CardViewModel();
  swift_allocObject();
  uint64_t v17 = v3;
  sub_1000300B0();
  sub_1000203EC(&qword_1000F7730, (void (*)(uint64_t))type metadata accessor for CardViewModel);
  uint64_t v18 = ObservedObject.init(wrappedValue:)();
  uint64_t v20 = v19;
  id v21 = objc_allocWithZone((Class)sub_100008614(&qword_1000F7738));
  *(void *)&v3[v16] = sub_10001B9AC(v18, v20);
  uint64_t v22 = OBJC_IVAR____TtC13PCViewService13CardPresenter_blurView;
  *(void *)&v17[v22] = [objc_allocWithZone((Class)UIVisualEffectView) init];
  *(void *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandle] = 0;
  *(void *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___homeAccessoryViewHandleModel] = 0;
  uint64_t v23 = OBJC_IVAR____TtC13PCViewService13CardPresenter_homeAccessoryViewHandleState;
  type metadata accessor for HomeAccessoryViewHandleState();
  uint64_t v24 = swift_allocObject();
  sub_100008614(&qword_1000F7740);
  swift_allocObject();
  *(void *)(v24 + 16) = PassthroughSubject.init()();
  *(void *)&v17[v23] = v24;
  uint64_t v25 = &v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_cardPresentingAnimationBlock];
  *(void *)uint64_t v25 = 0;
  *((void *)v25 + 1) = 0;
  *(void *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter____lazy_storage___proximityCardHeaderViewModel] = 0;
  *(void *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_tasks] = &_swiftEmptySetSingleton;
  sub_10004DA44(1953066569, (void *)0xE400000000000000, 0, ObjectType, (uint64_t)&off_1000E3E40);
  *(void *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_model] = a1;
  *(void *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_state] = v33;
  swift_retain();
  swift_retain();
  swift_retain();
  CurrentValueSubject.value.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v32) == 1)
  {
    CurrentValueSubject.value.getter();
    sub_10000EC04((uint64_t)v9, &qword_1000F7720);
  }
  else
  {
    sub_100021188((uint64_t)v9, (uint64_t)v13, type metadata accessor for ActivityDisplayContext);
  }
  swift_release();
  sub_100021188((uint64_t)v13, (uint64_t)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_initialActivityDisplayContext], type metadata accessor for ActivityDisplayContext);
  uint64_t v26 = *(void *)(a1 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_deviceAssetType);
  uint64_t v27 = a1 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_localDeviceModel;
  uint64_t v28 = *(void *)(a1 + OBJC_IVAR____TtC13PCViewService18CardPresenterModel_localDeviceModel);
  uint64_t v29 = *(void *)(v27 + 8);
  type metadata accessor for HandoffFeatureEducationViewModel();
  swift_allocObject();
  swift_bridgeObjectRetain();
  *(void *)&v17[OBJC_IVAR____TtC13PCViewService13CardPresenter_educationViewModel] = sub_100023734(v26, v28, v29);

  uint64_t v30 = (objc_class *)type metadata accessor for CardPresenter(0);
  v34.receiver = v17;
  v34.super_class = v30;
  return [super init];
}

uint64_t sub_10002007C(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 - 1) >= 3) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100020094()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000200CC(void *a1)
{
  sub_10001B7A8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000200D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000200E4()
{
  return swift_release();
}

uint64_t sub_1000200EC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000200FC(void *a1)
{
  return sub_10001B8C0(a1, *(void *)(v1 + 16));
}

void sub_100020104(uint64_t a1)
{
  sub_10001B318(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10002010C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10002011C(uint64_t a1)
{
  sub_10001B724(a1, *(void *)(v1 + 16));
}

uint64_t sub_100020124()
{
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100020174()
{
  return sub_10001A698(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void))(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_100020184(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  int v8 = a8 >> 5;
  if (v8 == 2)
  {
    char v9 = a8 & 0x1F;
    return sub_100020220(result, a2, a3, a4, a5, a6, a7, v9);
  }
  else
  {
    if (v8 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else if (a8 >> 5)
    {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100020220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 != 1)
  {
    if (a8) {
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100020288()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000202C0()
{
  sub_10001A1B4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000202C8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100020310()
{
  sub_10001A024(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_100020320()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100020330()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100020358()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100020390()
{
  return sub_100019620();
}

uint64_t sub_100020398()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

unsigned char *sub_1000203D8(unsigned char *a1)
{
  return sub_1000199F4(a1, *(void *)(v1 + 16), *(uint64_t (**)(char *))(v1 + 24));
}

void sub_1000203E4()
{
}

uint64_t sub_1000203EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002043C()
{
  return sub_10001902C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100020444(uint64_t a1)
{
  return a1;
}

uint64_t sub_100020498()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000204A8()
{
}

unint64_t sub_1000204B0()
{
  unint64_t result = qword_1000F7808;
  if (!qword_1000F7808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7808);
  }
  return result;
}

uint64_t sub_100020504()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

unint64_t sub_100020564()
{
  unint64_t result = qword_1000F7818;
  if (!qword_1000F7818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7818);
  }
  return result;
}

uint64_t sub_1000205B8()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100020610(uint64_t a1)
{
  return a1;
}

uint64_t sub_100020664()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_10002069C(void *a1, char a2)
{
  sub_100018198(a1, a2 & 1, *(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_1000206AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000206E4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

id sub_100020718(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void sub_100020724(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t *sub_100020730(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

unint64_t sub_100020794()
{
  unint64_t result = qword_1000F7858;
  if (!qword_1000F7858)
  {
    sub_100009F40(&qword_1000F7850);
    sub_100020834();
    sub_100012908(&qword_1000F7868, &qword_1000F7870);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7858);
  }
  return result;
}

unint64_t sub_100020834()
{
  unint64_t result = qword_1000F7860;
  if (!qword_1000F7860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7860);
  }
  return result;
}

uint64_t sub_100020888()
{
  return sub_100018E64();
}

uint64_t sub_100020890()
{
  return sub_100018F34(v0);
}

void sub_100020898()
{
  sub_100018FD0(v0, sub_100017680);
}

void sub_1000208C8(void *a1, unsigned __int8 a2)
{
  if (a2 <= 0xFDu) {
    sub_100020724(a1, a2 & 1);
  }
}

uint64_t sub_1000208E0(uint64_t *a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *a1;
  char v6 = v3;
  return v2(&v5);
}

uint64_t sub_100020924()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002095C()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000209A4(uint64_t a1)
{
  return sub_10001F0E0(*(void **)a1, *(unsigned char *)(a1 + 8), *(void *)(v1 + 16), *(uint64_t (**)(void **))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1000209BC(uint64_t a1)
{
  return sub_100016EA8(a1);
}

uint64_t sub_1000209C4()
{
  return PassthroughSubject.send(_:)();
}

void sub_100020A30(uint64_t a1)
{
}

void sub_100020A38()
{
}

void sub_100020A40(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_100020A48()
{
  unint64_t result = qword_1000F7940;
  if (!qword_1000F7940)
  {
    sub_10001280C(255, (unint64_t *)&qword_1000F77E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7940);
  }
  return result;
}

uint64_t sub_100020AB0()
{
  return sub_100020E2C(&qword_1000F78E0);
}

uint64_t sub_100020ABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_100008614(&qword_1000F78E0) - 8);
  unint64_t v6 = (*(void *)(v5 + 64)
      + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10001F6DC(a1, *(uint64_t (**)(uint64_t))(v2 + 16), *(void *)(v2 + v6), *(void *)(v2 + v6 + 8), *(void *)(v2 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v2 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), a2, *(void **)(v2 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2+ ((((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100020BA0(uint64_t a1)
{
  return sub_1000170DC(a1);
}

void sub_100020BA8()
{
  sub_100018FD0(v0, (void (*)(void))sub_1000192B4);
}

void sub_100020BD8(uint64_t a1)
{
}

uint64_t sub_100020BE0()
{
  return sub_100020E2C(&qword_1000F78B0);
}

void sub_100020BEC(float *a1@<X0>, float *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_100008614(&qword_1000F78B0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  *a2 = sub_10001F580(*(uint64_t (**)(float *))(v2 + 16), *a1, *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100020CCC()
{
  return sub_1000172C8();
}

unint64_t sub_100020CD4()
{
  unint64_t result = qword_1000F79E8;
  if (!qword_1000F79E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F79E8);
  }
  return result;
}

uint64_t sub_100020D28()
{
  return sub_100020E2C(&qword_1000F7898);
}

uint64_t sub_100020D34@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_100008614(&qword_1000F7898) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = sub_10001F430(*a1, *(uint64_t (**)(char *))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
  *a2 = result;
  return result;
}

void sub_100020E18(char *a1)
{
}

uint64_t sub_100020E20()
{
  return sub_100020E2C(&qword_1000F7880);
}

uint64_t sub_100020E2C(uint64_t *a1)
{
  uint64_t v2 = sub_100008614(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  if (*(void *)(v1 + 16)) {
    swift_release();
  }
  uint64_t v6 = (v4 + 32) & ~v4;
  unint64_t v7 = (((((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v6, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, (v7 + 11) & 0xFFFFFFFFFFFFFFF8 | 4, v4 | 7);
}

uint64_t sub_100020F48@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_100008614(&qword_1000F7880) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t result = sub_10001F2DC(*a1, *(uint64_t (**)(char *))(v2 + 16), *(void *)(v2 + 24), v2 + v6, *(void *)(v2 + v7), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void **)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)));
  *a2 = result & 1;
  return result;
}

uint64_t sub_100021030()
{
  return sub_1000173DC();
}

uint64_t sub_100021050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8 != 1)
  {
    if (a8) {
      return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

void sub_1000210B0(char a1)
{
}

uint64_t sub_1000210BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100008614(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100021120(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100021188(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000211F0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id sub_100021250(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

void sub_100021260(id a1)
{
  if (a1 != (id)2) {
    sub_10001CB40(a1);
  }
}

uint64_t sub_100021270(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100008614(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for CardPresenter.PresentationState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000213A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CardPresenter.PresentationState()
{
  return &type metadata for CardPresenter.PresentationState;
}

unint64_t sub_1000213DC()
{
  unint64_t result = qword_1000F7AD8;
  if (!qword_1000F7AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7AD8);
  }
  return result;
}

uint64_t *sub_100021484(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    sub_100008614(&qword_1000F7B40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (uint64_t *)((char *)a1 + v9);
    uint64_t v12 = (uint64_t *)((char *)a2 + v9);
    uint64_t v13 = v12[1];
    *uint64_t v11 = *v12;
    v11[1] = v13;
    v11[2] = v12[2];
    uint64_t v14 = (uint64_t *)((char *)a1 + v10);
    uint64_t v15 = (uint64_t *)((char *)a2 + v10);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = a3[7];
    uint64_t v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000215F8(uint64_t a1)
{
  sub_100008614(&qword_1000F7B40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_1000216CC(void *a1, void *a2, int *a3)
{
  sub_100008614(&qword_1000F7B40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)((char *)a1 + v7);
  uint64_t v10 = (void *)((char *)a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  v9[2] = v10[2];
  uint64_t v12 = (void *)((char *)a1 + v8);
  uint64_t v13 = (void *)((char *)a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_1000217F0(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000EC04((uint64_t)a1, &qword_1000F7B40);
    sub_100008614(&qword_1000F7B40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *(void *)((char *)a2 + v7);
  v8[1] = *(void *)((char *)a2 + v7 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8[2] = *((void *)v9 + 2);
  swift_retain();
  swift_release();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_10002196C(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_100008614(&qword_1000F7B40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *((void *)v10 + 2) = *((void *)v11 + 2);
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *sub_100021A64(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000EC04((uint64_t)a1, &qword_1000F7B40);
    uint64_t v6 = sub_100008614(&qword_1000F7B40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)&a2[v8 + 8];
  *(void *)uint64_t v9 = *(void *)&a2[v8];
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  *((void *)v9 + 2) = *((void *)v10 + 2);
  swift_release();
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = v16;
  *((void *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v21 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  *(void *)uint64_t v18 = v21;
  *((void *)v18 + 1) = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100021BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100021BC4);
}

uint64_t sub_100021BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100008614(&qword_1000F7B48);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100021C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100021CA0);
}

uint64_t sub_100021CA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100008614(&qword_1000F7B48);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for CAImage()
{
  uint64_t result = qword_1000F7BA8;
  if (!qword_1000F7BA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100021DB0()
{
  sub_100021E58();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100021E58()
{
  if (!qword_1000F7BB8)
  {
    type metadata accessor for ColorScheme();
    unint64_t v0 = type metadata accessor for Environment.Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000F7BB8);
    }
  }
}

uint64_t sub_100021EB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v58 = a1;
  uint64_t v57 = sub_100008614(&qword_1000F7BF0) - 8;
  __chkstk_darwin(v57, v2);
  uint64_t v56 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CAImage();
  uint64_t v5 = v4 - 8;
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v52 = *(void *)(v54 + 64);
  __chkstk_darwin(v4, v6);
  uint64_t v59 = (uint64_t)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for ColorScheme();
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55, v8);
  unint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OpacityTransition();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v46 - v18;
  uint64_t v20 = sub_100008614(&qword_1000F7BF8);
  uint64_t v21 = v20 - 8;
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = static Alignment.center.getter();
  uint64_t v50 = v26;
  uint64_t v51 = v25;
  sub_100022618(v1, (uint64_t)&v60);
  uint64_t v48 = v60;
  int v49 = BYTE8(v60);
  uint64_t v27 = v1 + *(int *)(v5 + 28);
  uint64_t v28 = *(void *)(v27 + 16);
  long long v60 = *(_OWORD *)v27;
  uint64_t v61 = v28;
  sub_100008614(&qword_1000F7C00);
  State.wrappedValue.getter();
  uint64_t v29 = v63;
  uint64_t v46 = v62;
  OpacityTransition.init()();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v16, v19, v11);
  sub_10002272C();
  uint64_t v30 = AnyTransition.init<A>(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v19, v11);
  uint64_t v31 = v10;
  uint64_t v47 = v1;
  sub_1000407C8((uint64_t)v10);
  uint64_t v32 = v59;
  sub_100022EFC(v1, v59);
  uint64_t v33 = *(unsigned __int8 *)(v54 + 80);
  uint64_t v34 = (v33 + 16) & ~v33;
  uint64_t v54 = v34 + v52;
  uint64_t v52 = v33 | 7;
  uint64_t v35 = swift_allocObject();
  sub_100022F64(v32, v35 + v34);
  uint64_t v36 = v53;
  uint64_t v37 = v55;
  uint64_t v38 = (uint64_t)v56;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v56, v31, v55);
  uint64_t v39 = (uint64_t (**)())(v38 + *(int *)(v57 + 44));
  *uint64_t v39 = sub_100022FC8;
  v39[1] = (uint64_t (*)())v35;
  sub_1000210BC(v38, (uint64_t)&v24[*(int *)(v21 + 44)], &qword_1000F7BF0);
  uint64_t v40 = v50;
  *(void *)uint64_t v24 = v51;
  *((void *)v24 + 1) = v40;
  *((void *)v24 + 2) = v48;
  v24[24] = v49;
  *((void *)v24 + 4) = v46;
  *((void *)v24 + 5) = v29;
  *((void *)v24 + 6) = v30;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_10000EC04(v38, &qword_1000F7BF0);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v37);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v41 = v59;
  sub_100022EFC(v47, v59);
  uint64_t v42 = swift_allocObject();
  sub_100022F64(v41, v42 + v34);
  uint64_t v43 = v58;
  sub_1000210BC((uint64_t)v24, v58, &qword_1000F7BF8);
  uint64_t v44 = (uint64_t (**)())(v43 + *(int *)(sub_100008614(&qword_1000F7C10) + 36));
  *uint64_t v44 = sub_10002317C;
  v44[1] = (uint64_t (*)())v42;
  v44[2] = 0;
  v44[3] = 0;
  return sub_10000EC04((uint64_t)v24, &qword_1000F7BF8);
}

uint64_t sub_1000223AC()
{
  uint64_t v1 = type metadata accessor for ColorScheme();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for CAImage();
  uint64_t v7 = (uint64_t *)(v0 + v6[7]);
  uint64_t v8 = v7[1];
  if (!v8) {
    goto LABEL_5;
  }
  uint64_t v9 = *v7;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for ColorScheme.dark(_:), v1);
  swift_bridgeObjectRetain();
  char v10 = static ColorScheme.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v13 = (uint64_t *)(v0 + v6[6]);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    uint64_t v16 = (long long *)(v0 + v6[5]);
    uint64_t v17 = *((void *)v16 + 2);
    long long v21 = *v16;
    uint64_t v22 = v17;
    uint64_t v19 = v15;
    uint64_t v20 = v14;
    swift_bridgeObjectRetain();
    goto LABEL_6;
  }
  uint64_t v11 = (long long *)(v0 + v6[5]);
  uint64_t v12 = *((void *)v11 + 2);
  long long v21 = *v11;
  uint64_t v22 = v12;
  uint64_t v19 = v9;
  uint64_t v20 = v8;
LABEL_6:
  sub_100008614(&qword_1000F7C00);
  return State.wrappedValue.setter();
}

uint64_t sub_10002254C()
{
  uint64_t v0 = type metadata accessor for ColorScheme();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000407C8((uint64_t)v4);
  sub_1000223AC();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100022618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + *(int *)(type metadata accessor for CAImage() + 20));
  sub_100008614(&qword_1000F7C00);
  State.wrappedValue.getter();
  if (*((void *)&v5 + 1))
  {
    long long v4 = v5;
    sub_1000231DC();
  }
  AnyView.init<A>(_:)();
  uint64_t result = _ConditionalContent<>.init(storage:)();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = BYTE8(v4);
  return result;
}

uint64_t sub_100022710()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_10002272C()
{
  unint64_t result = qword_1000F7C08;
  if (!qword_1000F7C08)
  {
    type metadata accessor for OpacityTransition();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7C08);
  }
  return result;
}

void sub_100022784(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 11810;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  id v9 = sub_10006E770();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 ulog:40 message:v10];
  swift_bridgeObjectRelease();

  uint64_t v11 = self;
  swift_bridgeObjectRetain();
  id v12 = [v11 mainBundle];
  id v13 = objc_allocWithZone((Class)BSUICAPackageView);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v15 = [v13 initWithPackageName:v14 inBundle:v12];

  if (v15)
  {
    [v15 setTranslatesAutoresizingMaskIntoConstraints:0];
    id v16 = [a1 subviews];
    sub_10001280C(0, (unint64_t *)&qword_1000F7C70);
    unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      if (v18) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v18)
      {
LABEL_4:
        if (v18 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v18; ++i)
        {
          if ((v17 & 0xC000000000000001) != 0) {
            id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v20 = *(id *)(v17 + 8 * i + 32);
          }
          long long v21 = v20;
          [v20 removeFromSuperview];
        }
      }
    }
    swift_bridgeObjectRelease_n();
    [a1 addSubview:v15];
    uint64_t v25 = self;
    sub_100008614(&qword_1000F77C0);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_1000AECB0;
    id v27 = [a1 topAnchor];
    id v28 = [v15 topAnchor];
    id v29 = [v27 constraintEqualToAnchor:v28];

    *(void *)(v26 + 32) = v29;
    id v30 = [a1 bottomAnchor];
    id v31 = [v15 bottomAnchor];
    id v32 = [v30 constraintEqualToAnchor:v31];

    *(void *)(v26 + 40) = v32;
    id v33 = [a1 rightAnchor];
    id v34 = [v15 rightAnchor];
    id v35 = [v33 constraintEqualToAnchor:v34];

    *(void *)(v26 + 48) = v35;
    id v36 = [a1 leftAnchor];
    id v37 = [v15 leftAnchor];
    id v38 = [v36 constraintEqualToAnchor:v37];

    *(void *)(v26 + 56) = v38;
    specialized Array._endMutation()();
    sub_10001280C(0, &qword_1000F7C78);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v25 activateConstraints:isa];

    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v40._uint64_t countAndFlagsBits = a3;
    v40._object = a4;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._uint64_t countAndFlagsBits = 0x6F6C207361772022;
    v41._object = (void *)0xED00002E64656461;
    String.append(_:)(v41);
    id v24 = sub_10006E770();
    swift_bridgeObjectRetain();
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v24 ulog:40 message:v42];
    swift_bridgeObjectRelease();

    goto LABEL_13;
  }
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = a3;
  v22._object = a4;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 11810;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  id v24 = sub_10006E770();
  swift_bridgeObjectRetain();
  NSString v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v24 ulog:40 message:v42];
  swift_bridgeObjectRelease();
LABEL_13:
}

id sub_100022DC8()
{
  id v0 = objc_allocWithZone((Class)UIView);

  return [v0 init];
}

void sub_100022E00(void *a1, uint64_t a2)
{
  sub_100022784(a1, a2, *(void *)v2, *(void **)(v2 + 8));
}

uint64_t sub_100022E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10002355C();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_100022E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10002355C();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_100022ED4()
{
}

uint64_t sub_100022EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAImage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022F64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CAImage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100022FC8()
{
  return sub_1000223AC();
}

uint64_t sub_100023030()
{
  uint64_t v1 = *(void *)(type metadata accessor for CAImage() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  sub_100008614(&qword_1000F7B40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10002317C()
{
  type metadata accessor for CAImage();

  return sub_10002254C();
}

unint64_t sub_1000231DC()
{
  unint64_t result = qword_1000F7C18;
  if (!qword_1000F7C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7C18);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CAPackageImage(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CAPackageImage()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for CAPackageImage(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CAPackageImage(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CardView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CardView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAPackageImage()
{
  return &type metadata for CAPackageImage;
}

unint64_t sub_100023378()
{
  unint64_t result = qword_1000F7C20;
  if (!qword_1000F7C20)
  {
    sub_100009F40(&qword_1000F7C10);
    sub_1000233F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7C20);
  }
  return result;
}

unint64_t sub_1000233F4()
{
  unint64_t result = qword_1000F7C28;
  if (!qword_1000F7C28)
  {
    sub_100009F40(&qword_1000F7BF8);
    sub_100023494();
    sub_100012908(&qword_1000F7C60, &qword_1000F7BF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7C28);
  }
  return result;
}

unint64_t sub_100023494()
{
  unint64_t result = qword_1000F7C30;
  if (!qword_1000F7C30)
  {
    sub_100009F40(&qword_1000F7C38);
    sub_100012908(&qword_1000F7C40, &qword_1000F7C48);
    sub_100012908(&qword_1000F7C50, &qword_1000F7C58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7C30);
  }
  return result;
}

unint64_t sub_10002355C()
{
  unint64_t result = qword_1000F7C68;
  if (!qword_1000F7C68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7C68);
  }
  return result;
}

uint64_t sub_1000235B8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

float sub_10002362C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000236A0()
{
  return sub_1000236C8();
}

uint64_t sub_1000236B4()
{
  return sub_1000236C8();
}

uint64_t sub_1000236C8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t *sub_100023734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v59 = *v3;
  uint64_t v60 = a1;
  uint64_t v5 = sub_100008614(&qword_1000F78D8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v65 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v70 = *(void *)(v8 - 8);
  uint64_t v71 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v58 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100008614(&qword_1000F7EA8);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v66 = v11;
  uint64_t v67 = v12;
  __chkstk_darwin(v11, v13);
  uint64_t v57 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100008614(&qword_1000F7EB0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v68 = v15;
  uint64_t v69 = v16;
  __chkstk_darwin(v15, v17);
  uint64_t v61 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100008614(&qword_1000F7EB8);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v72 = v19;
  uint64_t v73 = v20;
  __chkstk_darwin(v19, v21);
  uint64_t v64 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100008614(&qword_1000F7EC0);
  uint64_t v23 = *(void *)(v56 - 8);
  __chkstk_darwin(v56, v24);
  uint64_t v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100008614(&qword_1000F7EC8);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  id v31 = (char *)&v56 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100008614(&qword_1000F7ED0);
  uint64_t v33 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v34);
  id v36 = (char *)&v56 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v37 = (char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__state;
  LOBYTE(v74) = 0;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v37, v36, v32);
  id v38 = (char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__progress;
  LODWORD(v74) = 0;
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v38, v31, v27);
  uint64_t v39 = OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_educationViewEventSubject;
  sub_100008614(&qword_1000F78F0);
  swift_allocObject();
  *(uint64_t *)((char *)v4 + v39) = PassthroughSubject.init()();
  Swift::String v40 = (char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__isViewPresenting;
  LOBYTE(v74) = 0;
  Published.init(initialValue:)();
  Swift::String v41 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  uint64_t v42 = v56;
  v41(v40, v26, v56);
  uint64_t v43 = (char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__isIntroAnimationComplete;
  LOBYTE(v74) = 0;
  Published.init(initialValue:)();
  v41(v43, v26, v42);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_tasks) = (uint64_t)&_swiftEmptySetSingleton;
  sub_10004DA44(1953066569, (void *)0xE400000000000000, 0, v59, (uint64_t)&off_1000E4598);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_deviceAssetType) = v60;
  uint64_t v44 = (uint64_t *)((char *)v4 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_localDeviceModel);
  uint64_t v45 = v63;
  *uint64_t v44 = v62;
  v44[1] = v45;
  swift_beginAccess();
  uint64_t v46 = v57;
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v47 = v58;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  sub_100024504();
  id v74 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v48 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v49 = (uint64_t)v65;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v65, 1, 1, v48);
  sub_100012908(&qword_1000F7ED8, &qword_1000F7EA8);
  sub_100026554((unint64_t *)&qword_1000F7940, (void (*)(uint64_t))sub_100024504);
  uint64_t v50 = v61;
  uint64_t v51 = v66;
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_10000EC04(v49, &qword_1000F78D8);

  (*(void (**)(char *, uint64_t))(v70 + 8))(v47, v71);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v46, v51);
  sub_100012908(&qword_1000F7EE0, &qword_1000F7EB0);
  uint64_t v52 = v64;
  uint64_t v53 = v68;
  Publisher.filter(_:)();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v50, v53);
  swift_allocObject();
  swift_weakInit();
  sub_100012908(&qword_1000F7EE8, &qword_1000F7EB8);
  uint64_t v54 = v72;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v52, v54);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return v4;
}

BOOL sub_100023FAC(unsigned char *a1)
{
  return *a1 == 0;
}

uint64_t sub_100023FBC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t sub_100024040()
{
  PassthroughSubject.send(_:)();
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  if (v1 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t sub_10002411C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__state;
  uint64_t v2 = sub_100008614(&qword_1000F7ED0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__progress;
  uint64_t v4 = sub_100008614(&qword_1000F7EC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v5 = v0 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__isViewPresenting;
  uint64_t v6 = sub_100008614(&qword_1000F7EC0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel__isIntroAnimationComplete, v6);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000242B4()
{
  return type metadata accessor for HandoffFeatureEducationViewModel();
}

uint64_t type metadata accessor for HandoffFeatureEducationViewModel()
{
  uint64_t result = qword_1000F7CD8;
  if (!qword_1000F7CD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100024308()
{
  sub_100024470(319, &qword_1000F7CE8);
  if (v0 <= 0x3F)
  {
    sub_100024470(319, &qword_1000F7CF0);
    if (v1 <= 0x3F)
    {
      sub_100024470(319, (unint64_t *)&qword_1000F7CF8);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_100024470(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Published();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void *sub_1000244B8()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1000244C4@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for HandoffFeatureEducationViewModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

unint64_t sub_100024504()
{
  unint64_t result = qword_1000F77E8;
  if (!qword_1000F77E8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000F77E8);
  }
  return result;
}

uint64_t sub_100024544()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002457C()
{
  return sub_100023FBC();
}

uint64_t sub_100024584@<X0>(long long *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = sub_100008614(&qword_1000F7EF0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (uint64_t *)((char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_100008614(&qword_1000F7EF8);
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100008614(&qword_1000F7F00);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100008614(&qword_1000F7F08);
  uint64_t v17 = v16 - 8;
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100008614(&qword_1000F7F10);
  __chkstk_darwin(v43, v21);
  uint64_t v42 = (uint64_t)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v6 = static Alignment.bottom.getter();
  v6[1] = v23;
  uint64_t v24 = sub_100008614(&qword_1000F7F18);
  sub_100024A1C(a1, (uint64_t)v6 + *(int *)(v24 + 44));
  char v25 = static Edge.Set.bottom.getter();
  uint64_t v26 = static SafeAreaRegions.all.getter();
  sub_1000210BC((uint64_t)v6, (uint64_t)v11, &qword_1000F7EF0);
  uint64_t v27 = &v11[*(int *)(v8 + 44)];
  *(void *)uint64_t v27 = v26;
  v27[8] = v25;
  sub_10000EC04((uint64_t)v6, &qword_1000F7EF0);
  uint64_t v28 = static Alignment.center.getter();
  sub_10002EB08(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, v28, v29);
  sub_10000EC04((uint64_t)v11, &qword_1000F7EF8);
  long long v30 = *a1;
  long long v46 = a1[1];
  long long v47 = v30;
  uint64_t v31 = *((void *)a1 + 4);
  uint64_t v32 = (uint64_t (*)())swift_allocObject();
  long long v33 = a1[1];
  *((_OWORD *)v32 + 1) = *a1;
  *((_OWORD *)v32 + 2) = v33;
  *((_OWORD *)v32 + 3) = a1[2];
  sub_1000210BC((uint64_t)v15, (uint64_t)v20, &qword_1000F7F00);
  uint64_t v34 = (uint64_t (**)())&v20[*(int *)(v17 + 44)];
  *uint64_t v34 = sub_100026048;
  v34[1] = v32;
  v34[2] = 0;
  v34[3] = 0;
  sub_100026018((uint64_t)&v47);
  sub_100026018((uint64_t)&v46);
  sub_10000F7F8(v31);
  sub_10000EC04((uint64_t)v15, &qword_1000F7F00);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100026050((uint64_t)&v47);
  LOBYTE(v32) = v45;
  uint64_t v35 = (_OWORD *)swift_allocObject();
  long long v36 = a1[1];
  v35[1] = *a1;
  v35[2] = v36;
  v35[3] = a1[2];
  uint64_t v37 = v42;
  sub_1000210BC((uint64_t)v20, v42, &qword_1000F7F08);
  uint64_t v38 = v37 + *(int *)(v43 + 36);
  *(unsigned char *)uint64_t v38 = (_BYTE)v32;
  *(void *)(v38 + 8) = sub_100026080;
  *(void *)(v38 + 16) = v35;
  sub_100026018((uint64_t)&v47);
  sub_100026018((uint64_t)&v46);
  sub_10000F7F8(v31);
  sub_10000EC04((uint64_t)v20, &qword_1000F7F08);
  uint64_t v39 = (_OWORD *)swift_allocObject();
  long long v40 = a1[1];
  v39[1] = *a1;
  v39[2] = v40;
  v39[3] = a1[2];
  sub_100026018((uint64_t)&v47);
  sub_100026018((uint64_t)&v46);
  sub_10000F7F8(v31);
  sub_100026094();
  View.onTapGesture(count:perform:)();
  swift_release();
  return sub_10000EC04(v37, &qword_1000F7F10);
}

uint64_t sub_100024A1C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100008614(&qword_1000F7F60);
  __chkstk_darwin(v4 - 8, v5);
  id v74 = &v70[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v72 = sub_100008614(&qword_1000F7F68);
  __chkstk_darwin(v72, v7);
  char v75 = &v70[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = sub_100008614(&qword_1000F7F70);
  uint64_t v81 = *(void *)(v9 - 8);
  uint64_t v82 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v73 = &v70[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = sub_100008614(&qword_1000F7F78);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  Swift::String v84 = &v70[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14, v16);
  unint64_t v83 = &v70[-v17];
  uint64_t v80 = a1;
  long long v95 = *a1;
  uint64_t v18 = *((void *)&v95 + 1);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100026050((uint64_t)&v95);
  uint64_t v79 = *(void *)(v18 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_deviceAssetType);
  int v78 = v104;
  uint64_t v19 = *(void *)(v18 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_localDeviceModel);
  uint64_t v20 = *(void *)(v18 + OBJC_IVAR____TtC13PCViewService32HandoffFeatureEducationViewModel_localDeviceModel + 8);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100026018((uint64_t)&v95);
  swift_bridgeObjectRetain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  float v21 = *(float *)&v104;
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v22 = *(id *)(qword_100111A10 + 152);
  uint64_t v23 = sub_10002D948();

  float v24 = powf(v21, (float)v23);
  sub_100026050((uint64_t)&v95);
  *(void *)&v87[0] = 0;
  sub_100008614(&qword_1000F7F80);
  State.init(wrappedValue:)();
  unint64_t v26 = *((void *)&v104 + 1);
  char v25 = (void *)v104;
  LOBYTE(v87[0]) = 0;
  State.init(wrappedValue:)();
  char v96 = v78;
  uint64_t v97 = v79;
  uint64_t v98 = v19;
  uint64_t v99 = v20;
  float v100 = v24;
  unsigned long long v101 = __PAIR128__(v26, (unint64_t)v25);
  char v102 = v104;
  uint64_t v103 = *((void *)&v104 + 1);
  static Alignment.center.getter();
  uint64_t v27 = 1;
  sub_10002EB64(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v104, 0.0, 1, INFINITY, 0);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v28 = v89;
  LODWORD(v29) = v90;
  uint64_t v79 = v91;
  int v78 = v92;
  uint64_t v76 = v94;
  uint64_t v77 = v93;
  v87[0] = v80[1];
  sub_100008614(&qword_1000F7F58);
  State.wrappedValue.getter();
  uint64_t v30 = v82;
  uint64_t v31 = (uint64_t)v83;
  if (LOBYTE(v85[0]) == 1)
  {
    int v71 = v29;
    uint64_t v29 = v28;
    uint64_t v32 = v74;
    sub_10002510C((uint64_t)v74);
    char v33 = static Edge.Set.horizontal.getter();
    EdgeInsets.init(_all:)();
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    uint64_t v42 = v75;
    sub_1000210BC((uint64_t)v32, (uint64_t)v75, &qword_1000F7F60);
    uint64_t v43 = &v42[*(int *)(v72 + 36)];
    unsigned char *v43 = v33;
    *((void *)v43 + 1) = v35;
    *((void *)v43 + 2) = v37;
    *((void *)v43 + 3) = v39;
    *((void *)v43 + 4) = v41;
    v43[40] = 0;
    sub_10000EC04((uint64_t)v32, &qword_1000F7F60);
    char v44 = static Edge.Set.bottom.getter();
    EdgeInsets.init(_all:)();
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    uint64_t v52 = v51;
    uint64_t v53 = v73;
    sub_1000210BC((uint64_t)v42, (uint64_t)v73, &qword_1000F7F68);
    uint64_t v54 = &v53[*(int *)(v30 + 36)];
    unsigned char *v54 = v44;
    *((void *)v54 + 1) = v46;
    *((void *)v54 + 2) = v48;
    *((void *)v54 + 3) = v50;
    *((void *)v54 + 4) = v52;
    v54[40] = 0;
    sub_10000EC04((uint64_t)v42, &qword_1000F7F68);
    uint64_t v55 = (uint64_t)v53;
    uint64_t v28 = v29;
    LOBYTE(v29) = v71;
    sub_1000263C0(v55, v31);
    uint64_t v27 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v31, v27, 1, v30);
  uint64_t v56 = v84;
  sub_1000210BC(v31, (uint64_t)v84, &qword_1000F7F78);
  long long v57 = v111;
  v85[8] = v112;
  v85[9] = v113;
  long long v58 = v113;
  v85[10] = v114;
  long long v60 = v107;
  v85[4] = v108;
  long long v59 = v108;
  v85[5] = v109;
  long long v61 = v109;
  v85[6] = v110;
  long long v62 = v110;
  v85[7] = v111;
  v85[0] = v104;
  v85[1] = v105;
  long long v64 = v104;
  long long v63 = v105;
  v85[2] = v106;
  long long v65 = v106;
  v85[3] = v107;
  *(_OWORD *)(a2 + 128) = v112;
  *(_OWORD *)(a2 + 144) = v58;
  *(_OWORD *)(a2 + 160) = v114;
  *(_OWORD *)(a2 + 64) = v59;
  *(_OWORD *)(a2 + 80) = v61;
  *(_OWORD *)(a2 + 96) = v62;
  *(_OWORD *)(a2 + 112) = v57;
  *(_OWORD *)a2 = v64;
  *(_OWORD *)(a2 + 16) = v63;
  uint64_t v66 = v115;
  uint64_t v86 = v115;
  *(_OWORD *)(a2 + 32) = v65;
  *(_OWORD *)(a2 + 48) = v60;
  *(void *)(a2 + 176) = v66;
  *(void *)(a2 + 184) = 0x4008000000000000;
  *(void *)(a2 + 192) = v28;
  *(unsigned char *)(a2 + 200) = v29;
  *(void *)(a2 + 208) = v79;
  *(unsigned char *)(a2 + 216) = v78;
  uint64_t v67 = v76;
  *(void *)(a2 + 224) = v77;
  *(void *)(a2 + 232) = v67;
  uint64_t v68 = sub_100008614(&qword_1000F7F88);
  sub_1000210BC((uint64_t)v56, a2 + *(int *)(v68 + 64), &qword_1000F7F78);
  sub_100026320((uint64_t)v85);
  sub_10000EC04(v31, &qword_1000F7F78);
  sub_10000EC04((uint64_t)v56, &qword_1000F7F78);
  v87[8] = v112;
  v87[9] = v113;
  v87[10] = v114;
  uint64_t v88 = v115;
  v87[4] = v108;
  v87[5] = v109;
  v87[6] = v110;
  v87[7] = v111;
  v87[0] = v104;
  v87[1] = v105;
  v87[2] = v106;
  v87[3] = v107;
  return sub_100026370((uint64_t)v87);
}

uint64_t sub_10002510C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v2 = type metadata accessor for OpacityTransition();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v34 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = sub_100008614(&qword_1000F7F90);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100008614(&qword_1000F7F98);
  uint64_t v14 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v15);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = [self localizedStringForKey:21];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  uint64_t v38 = v19;
  uint64_t v39 = v21;
  long long v22 = *v1;
  long long v40 = v1[1];
  long long v41 = v22;
  uint64_t v23 = *((void *)v1 + 4);
  float v24 = (_OWORD *)swift_allocObject();
  long long v25 = v1[1];
  v24[1] = *v1;
  v24[2] = v25;
  v24[3] = v1[2];
  sub_100026018((uint64_t)&v41);
  sub_100026018((uint64_t)&v40);
  sub_10000F7F8(v23);
  sub_1000264AC();
  Button<>.init<A>(_:action:)();
  uint64_t v38 = 0x4020000000000000;
  LOBYTE(v39) = 1;
  sub_100012908(&qword_1000F7FA8, &qword_1000F7F90);
  sub_100026500();
  View.buttonStyle<A>(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  OpacityTransition.init()();
  uint64_t v26 = v35;
  uint64_t v27 = v36;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v34, v8, v36);
  sub_100026554((unint64_t *)&qword_1000F7C08, (void (*)(uint64_t))&type metadata accessor for OpacityTransition);
  uint64_t v28 = AnyTransition.init<A>(_:)();
  uint64_t v29 = v37;
  uint64_t v30 = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v37, v17, v33);
  *(void *)(v29 + *(int *)(sub_100008614(&qword_1000F7F60) + 36)) = v28;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v30);
}

uint64_t sub_100025508(long long *a1)
{
  long long v8 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t result = sub_100026050((uint64_t)&v8);
  if (v7 == 2)
  {
    if (qword_1000F6680 != -1) {
      swift_once();
    }
    id v2 = *(id *)(qword_100111A10 + 272);
    char v3 = sub_10002DE94();

    if (v3)
    {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v4 & 1) == 0) {
        return result;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v5 = static Animation.easeInOut.getter();
    __chkstk_darwin(v5, v6);
    withAnimation<A>(_:_:)();
    return swift_release();
  }
  return result;
}

unsigned char *sub_1000256A0(unsigned char *result)
{
  if (*result == 2)
  {
    if (qword_1000F6680 != -1) {
      swift_once();
    }
    id v1 = *(id *)(qword_100111A10 + 272);
    char v2 = sub_10002DE94();

    if (v2)
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = (unsigned char *)swift_bridgeObjectRelease();
      if ((v3 & 1) == 0) {
        return result;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v4 = static Animation.easeInOut.getter();
    __chkstk_darwin(v4, v5);
    withAnimation<A>(_:_:)();
    return (unsigned char *)swift_release();
  }
  return result;
}

void sub_1000257DC(uint64_t a1)
{
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v2 = *(id *)(qword_100111A10 + 272);
  char v3 = sub_10002DE94();

  if (v3)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0) {
      return;
    }
  }
  id v5 = *(id *)(qword_100111A10 + 192);
  char v6 = sub_10002D38C();

  if (v6)
  {
    char v7 = *(void (**)(void))(a1 + 32);
    if (v7) {
      v7();
    }
  }
}

uint64_t sub_1000258D4@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  long long v8 = v1[1];
  uint64_t v3 = *((void *)v1 + 4);
  uint64_t v4 = *((void *)v1 + 5);
  long long v9 = *v1;
  long long v10 = v8;
  uint64_t v5 = swift_allocObject();
  long long v6 = v1[1];
  *(_OWORD *)(v5 + 16) = *v1;
  *(_OWORD *)(v5 + 32) = v6;
  *(void *)(v5 + 48) = v3;
  *(void *)(v5 + 56) = v4;
  *a1 = sub_100026010;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;
  sub_100026018((uint64_t)&v9);
  sub_100026018((uint64_t)&v10);
  return sub_10000F7F8(v3);
}

float sub_100025964@<S0>(float *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  float result = v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1000259E4()
{
  return static Published.subscript.setter();
}

uint64_t sub_100025A60@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100025AE4()
{
  return static Published.subscript.setter();
}

uint64_t sub_100025B5C@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100025BD8()
{
  return static Published.subscript.setter();
}

uint64_t sub_100025C48@<X0>(unsigned char *a1@<X8>)
{
  return sub_100025B5C(a1);
}

uint64_t sub_100025C70()
{
  return sub_100025BD8();
}

uint64_t sub_100025C98@<X0>(unsigned char *a1@<X8>)
{
  return sub_100025B5C(a1);
}

uint64_t sub_100025CC0()
{
  return sub_100025BD8();
}

uint64_t destroy for HandoffFeatureEducationView(uint64_t a1)
{
  swift_release();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 32))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for HandoffFeatureEducationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v6 = (_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v6;
  }
  return a1;
}

uint64_t assignWithCopy for HandoffFeatureEducationView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v4;
      *(void *)(a1 + 40) = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for HandoffFeatureEducationView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HandoffFeatureEducationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v5;
      *(void *)(a1 + 40) = v7;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandoffFeatureEducationView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandoffFeatureEducationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffFeatureEducationView()
{
  return &type metadata for HandoffFeatureEducationView;
}

uint64_t sub_100025FF0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100026010@<X0>(uint64_t a1@<X8>)
{
  return sub_100024584((long long *)(v1 + 16), a1);
}

uint64_t sub_100026018(uint64_t a1)
{
  return a1;
}

uint64_t sub_100026048()
{
  return sub_100025508((long long *)(v0 + 16));
}

uint64_t sub_100026050(uint64_t a1)
{
  return a1;
}

unsigned char *sub_100026080(unsigned char *result)
{
  return sub_1000256A0(result);
}

void sub_10002608C()
{
  sub_1000257DC(v0 + 16);
}

unint64_t sub_100026094()
{
  unint64_t result = qword_1000F7F20;
  if (!qword_1000F7F20)
  {
    sub_100009F40(&qword_1000F7F10);
    sub_100026190(&qword_1000F7F28, &qword_1000F7F08, (void (*)(void))sub_100026160);
    sub_100012908(&qword_1000F7F48, &qword_1000F7F50);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7F20);
  }
  return result;
}

uint64_t sub_100026160()
{
  return sub_100026190(&qword_1000F7F30, &qword_1000F7F00, (void (*)(void))sub_10002620C);
}

uint64_t sub_100026190(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009F40(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002620C()
{
  unint64_t result = qword_1000F7F38;
  if (!qword_1000F7F38)
  {
    sub_100009F40(&qword_1000F7EF8);
    sub_100012908(&qword_1000F7F40, &qword_1000F7EF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7F38);
  }
  return result;
}

uint64_t sub_1000262AC()
{
  return sub_1000262C4();
}

uint64_t sub_1000262C4()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100026320(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_retain();
  return a1;
}

uint64_t sub_100026370(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 40);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_1000263C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008614(&qword_1000F7F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002642C()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10002647C()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 48);
  if (v1) {
    return v1();
  }
  return result;
}

unint64_t sub_1000264AC()
{
  unint64_t result = qword_1000F7FA0;
  if (!qword_1000F7FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7FA0);
  }
  return result;
}

unint64_t sub_100026500()
{
  unint64_t result = qword_1000F7FB0;
  if (!qword_1000F7FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F7FB0);
  }
  return result;
}

uint64_t sub_100026554(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002659C()
{
  return sub_100012908(&qword_1000F7FB8, qword_1000F7FC0);
}

uint64_t sub_1000265D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1000265E0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100026678(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    long long v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *long long v10 = *v11;
    v10[1] = v11[1];
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10002677C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000267EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  long long v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100026874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  long long v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100026908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_100026984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  long long v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100026A10(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100026B5CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_100026B70(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x100026D50);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          id v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            *id v18 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            v18[1] = a2 - 1;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for Subtitle()
{
  return sub_10000ED34();
}

uint64_t sub_100026D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_100026D98()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100026E50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  int v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  uint64_t v8 = *a2;
  *a1 = *a2;
  if (v5 > 7
    || v7 != 0
    || ((((v6 + ((v5 + 8) & ~v5) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    unsigned int v11 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    unsigned int v11 = a1;
    uint64_t v12 = ((unint64_t)a1 + v5 + 8) & ~v5;
    uint64_t v13 = ((unint64_t)a2 + v5 + 8) & ~v5;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v3);
    uint64_t v15 = v12 + v6;
    uint64_t v16 = v13 + v6;
    unint64_t v17 = (v12 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (v13 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v18 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v17 = *(_OWORD *)v18;
    }
    else
    {
      uint64_t v19 = *(void *)(v18 + 8);
      *(void *)unint64_t v17 = *(void *)v18;
      *(void *)(v17 + 8) = v19;
      swift_retain();
    }
    *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
    uint64_t v20 = (void *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v20 = *v21;
    v20[1] = v21[1];
    unint64_t v22 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v22 = *(unsigned char *)v23;
    *(void *)(v22 + 8) = *(void *)(v23 + 8);
    swift_retain();
  }
  swift_retain();
  return v11;
}

uint64_t sub_100027004(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  if (*(void *)((v6 + *(void *)(v5 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  swift_release();

  return swift_release();
}

void *sub_1000270CC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(void *)(v4 - 8) + 16;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  swift_bridgeObjectRetain();
  v5(v8, v9, v4);
  uint64_t v10 = *(void *)(v6 + 48);
  uint64_t v11 = v10 + v8;
  uint64_t v12 = v10 + v9;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v15 = *(void *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
    swift_retain();
  }
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  uint64_t v16 = (void *)((v11 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = (void *)((v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  unint64_t v18 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v18 = *(unsigned char *)v19;
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1000271F4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40);
  uint64_t v12 = v11 + v9;
  uint64_t v13 = v11 + v10;
  unint64_t v14 = (v11 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = *(void *)v15;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      uint64_t v18 = *(void *)(v15 + 8);
      *(void *)unint64_t v14 = v16;
      *(void *)(v14 + 8) = v18;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    goto LABEL_8;
  }
  if (v16 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v17 = *(void *)(v15 + 8);
  *(void *)unint64_t v14 = v16;
  *(void *)(v14 + 8) = v17;
  swift_retain();
  swift_release();
LABEL_8:
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  unint64_t v19 = (void *)((v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)((v13 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_retain();
  swift_release();
  unint64_t v21 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v21 = *(unsigned char *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *sub_100027380(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  unint64_t v12 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v13 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  }
  else
  {
    uint64_t v14 = *(void *)(v13 + 8);
    *(void *)unint64_t v12 = *(void *)v13;
    *(void *)(v12 + 8) = v14;
  }
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  unint64_t v15 = (_OWORD *)((v10 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (_OWORD *)((v11 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v15 = *v16;
  *(_OWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *sub_100027470(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24);
  uint64_t v12 = v11 + v9;
  uint64_t v13 = v11 + v10;
  unint64_t v14 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = *(void *)v15;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      uint64_t v18 = *(void *)(v15 + 8);
      *(void *)unint64_t v14 = v16;
      *(void *)(v14 + 8) = v18;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    goto LABEL_8;
  }
  if (v16 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v17 = *(void *)(v15 + 8);
  *(void *)unint64_t v14 = v16;
  *(void *)(v14 + 8) = v17;
  swift_release();
LABEL_8:
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  unint64_t v19 = (void *)((v12 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)((v13 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_release();
  unint64_t v21 = ((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v21 = *(unsigned char *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_release();
  return a1;
}

uint64_t sub_1000275D8(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 8) & ~v6) + 31) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100027738);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
  }
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_10002774C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v18 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v18 = a2 - 1;
              }
              *(void *)a1 = v18;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 8) & ~v9) + 31) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x100027944);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for MultipleSubtitles()
{
  return sub_10000ED34();
}

uint64_t sub_100027984@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  char v85 = a2;
  uint64_t v4 = sub_100008614(&qword_1000F80C8);
  uint64_t v73 = v4;
  uint64_t v84 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v83 = (uint64_t)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v81 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v80 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = *(void *)(a1 - 8);
  uint64_t v67 = *(void *)(v66 + 64);
  __chkstk_darwin(v10, v12);
  long long v64 = (char *)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100008614(&qword_1000F80D0);
  __chkstk_darwin(v71, v14);
  v61[0] = (char *)v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100008614(&qword_1000F80D8);
  __chkstk_darwin(v78, v16);
  uint64_t v86 = (char *)v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v79 = *(void *)(v18 + 8);
  type metadata accessor for _ValueActionModifier();
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v82 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v70 = (char *)v61 - v21;
  unint64_t v22 = sub_1000291C0();
  unint64_t v68 = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v95 = v22;
  uint64_t v96 = WitnessTable;
  uint64_t v72 = v19;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v75 = v24;
  uint64_t v74 = sub_100012908(&qword_1000F80F0, &qword_1000F80C8);
  uint64_t v91 = v19;
  uint64_t v92 = v4;
  uint64_t v93 = v24;
  uint64_t v94 = v74;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v76 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v26 = __chkstk_darwin(OpaqueTypeMetadata2, v25);
  long long v65 = (char *)v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v28);
  uint64_t v69 = (char *)v61 - v29;
  static Alignment.top.getter();
  uint64_t v87 = v8;
  uint64_t v88 = v18;
  uint64_t v62 = v18;
  uint64_t v89 = v2;
  sub_100008614(&qword_1000F80F8);
  uint64_t v90 = sub_10002926C(&qword_1000F8100, &qword_1000F8108, (void (*)(void))sub_1000292E8);
  swift_getWitnessTable();
  ZStack.init(alignment:content:)();
  uint64_t v30 = v66;
  long long v63 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  uint64_t v31 = v64;
  uint64_t v32 = v2;
  uint64_t v33 = v2;
  uint64_t v34 = a1;
  v63(v64, v32, a1);
  uint64_t v35 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v36 = (v35 + 32) & ~v35;
  v61[2] = v36 + v67;
  uint64_t v67 = v35 | 7;
  uint64_t v37 = swift_allocObject();
  uint64_t v38 = v8;
  *(void *)(v37 + 16) = v8;
  *(void *)(v37 + 24) = v18;
  uint64_t v66 = *(void *)(v30 + 32);
  uint64_t v39 = v31;
  uint64_t v40 = v34;
  ((void (*)(uint64_t, char *, uint64_t))v66)(v37 + v36, v31, v34);
  swift_getWitnessTable();
  uint64_t v41 = v61[0];
  View.onAppear(perform:)();
  swift_release();
  sub_10000EC04(v41, &qword_1000F80D0);
  uint64_t v42 = *(int *)(v40 + 36);
  uint64_t v43 = v40;
  v61[1] = v33;
  char v44 = v80;
  uint64_t v45 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v80, v33 + v42, v38);
  v63(v39, v33, v43);
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v62;
  *(void *)(v46 + 16) = v38;
  *(void *)(v46 + 24) = v47;
  ((void (*)(uint64_t, char *, uint64_t))v66)(v46 + v36, v39, v43);
  uint64_t v48 = v70;
  uint64_t v49 = (uint64_t)v86;
  View.onChange<A>(of:perform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v38);
  sub_10000EC04(v49, &qword_1000F80D8);
  uint64_t v50 = v83;
  sub_100028B74(v43, v51, v83);
  static GestureMask.all.getter();
  uint64_t v52 = v65;
  uint64_t v53 = v72;
  uint64_t v54 = v73;
  View.gesture<A>(_:including:)();
  (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v50, v54);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v48, v53);
  uint64_t v55 = v76;
  uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v76 + 16);
  long long v57 = v69;
  uint64_t v58 = OpaqueTypeMetadata2;
  v56(v69, v52, OpaqueTypeMetadata2);
  long long v59 = *(void (**)(char *, uint64_t))(v55 + 8);
  v59(v52, v58);
  v56(v85, v57, v58);
  return ((uint64_t (*)(char *, uint64_t))v59)(v57, v58);
}

uint64_t sub_100028204@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v29 = a3;
  uint64_t v6 = type metadata accessor for MultipleSubtitles();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = sub_100008614(&qword_1000F80F8);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v30 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v31 = (char *)&v28 - v17;
  *(void *)&long long v36 = *a1;
  type metadata accessor for Subtitle();
  type metadata accessor for Array();
  swift_getWitnessTable();
  RandomAccessCollection<>.indices.getter();
  long long v36 = v37;
  swift_getKeyPath();
  (*(void (**)(char *, void *, uint64_t))(v7 + 16))(v10, a1, v6);
  unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v29;
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v19 + v18, v10, v6);
  sub_100008614(&qword_1000F8198);
  sub_100008614(&qword_1000F8108);
  unint64_t v21 = sub_100029884();
  uint64_t v34 = &protocol witness table for Int;
  unint64_t v35 = v21;
  swift_getWitnessTable();
  uint64_t v27 = sub_10002926C(&qword_1000F8100, &qword_1000F8108, (void (*)(void))sub_1000292E8);
  unint64_t v22 = v30;
  ForEach<>.init(_:id:content:)();
  uint64_t v33 = v27;
  swift_getWitnessTable();
  unint64_t v23 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v24 = v31;
  v23(v31, v22, v11);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25(v22, v11);
  v23(v32, v24, v11);
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, v11);
}

double sub_1000285B8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)&long long v43 = a4;
  uint64_t v42 = a3;
  uint64_t v41 = a2;
  uint64_t v7 = type metadata accessor for Subtitle();
  uint64_t v44 = v7;
  uint64_t v45 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v40 = *a1;
  Array.subscript.getter();
  uint64_t v11 = &v10[*(int *)(v7 + 36)];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)&long long v50 = *(void *)v11;
  *((void *)&v50 + 1) = v12;
  sub_1000264AC();
  swift_bridgeObjectRetain();
  uint64_t v13 = Text.init<A>(_:)();
  uint64_t v15 = v14;
  LOBYTE(a1) = v16 & 1;
  static Font.body.getter();
  uint64_t v17 = Text.font(_:)();
  uint64_t v19 = v18;
  LOBYTE(v12) = v20;
  uint64_t v39 = v21;
  swift_release();
  sub_1000298D8(v13, v15, (char)a1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for MultipleSubtitles();
  sub_10002891C(v40, (uint64_t)&v50);
  long long v43 = v50;
  uint64_t v24 = v51;
  uint64_t v23 = v52;
  sub_1000298F0(v17, v19, v12 & 1);
  uint64_t v25 = v39;
  swift_bridgeObjectRetain();
  swift_retain();
  static UnitPoint.center.getter();
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v30 = v53;
  double v31 = v54 * 0.0174532925;
  static UnitPoint.center.getter();
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  sub_1000298D8(v17, v19, v12 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  char v49 = v12 & 1;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v44);
  char v36 = v49;
  v57[0] = *(_DWORD *)v48;
  *(_DWORD *)((char *)v57 + 3) = *(_DWORD *)&v48[3];
  v56[0] = *(_DWORD *)v47;
  *(_DWORD *)((char *)v56 + 3) = *(_DWORD *)&v47[3];
  v55[0] = *(_DWORD *)v46;
  *(_DWORD *)((char *)v55 + 3) = *(_DWORD *)&v46[3];
  *(void *)a5 = v17;
  *(void *)(a5 + 8) = v19;
  *(unsigned char *)(a5 + 16) = v36;
  *(_DWORD *)(a5 + 17) = v57[0];
  *(_DWORD *)(a5 + 20) = *(_DWORD *)((char *)v57 + 3);
  *(void *)(a5 + 24) = v25;
  *(void *)(a5 + 32) = KeyPath;
  *(unsigned char *)(a5 + 40) = 1;
  *(_DWORD *)(a5 + 41) = v56[0];
  *(_DWORD *)(a5 + 44) = *(_DWORD *)((char *)v56 + 3);
  *(_OWORD *)(a5 + 48) = v43;
  *(void *)(a5 + 64) = v24;
  *(void *)(a5 + 72) = v23;
  *(void *)(a5 + 80) = v23;
  *(void *)(a5 + 88) = v27;
  *(void *)(a5 + 96) = v29;
  *(void *)(a5 + 104) = v30;
  *(unsigned char *)(a5 + 112) = 0;
  int v37 = v55[0];
  *(_DWORD *)(a5 + 116) = *(_DWORD *)((char *)v55 + 3);
  *(_DWORD *)(a5 + 113) = v37;
  *(double *)(a5 + 120) = v31;
  *(void *)(a5 + 136) = 0;
  *(void *)(a5 + 144) = 0;
  *(void *)(a5 + 128) = 0x3FF0000000000000;
  *(void *)(a5 + 152) = v33;
  *(void *)(a5 + 160) = v35;
  double result = 20.0;
  *(_OWORD *)(a5 + 168) = xmmword_1000AF0C0;
  return result;
}

double sub_10002891C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = (double)a1;
  sub_100008614(&qword_1000F8190);
  State.wrappedValue.getter();
  double v4 = 1.0 - vabdd_f64(v3, v6);
  if (v4 < 0.0) {
    double v4 = 0.0;
  }
  *(double *)a2 = v4;
  *(double *)(a2 + 8) = (v3 - v6) * 100.0;
  *(_OWORD *)(a2 + 16) = xmmword_1000AF0D0;
  double result = 1.0 - v4 + 1.0 - v4;
  *(double *)(a2 + 32) = result;
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1000289CC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Subtitle();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Collection.firstIndex(where:)();
  swift_bridgeObjectRelease();
  if (v7 == 1)
  {
    if ((*(unsigned char *)(v2 + *(int *)(a2 + 44)) & 1) == 0)
    {
LABEL_3:
      sub_100008614(&qword_1000F8190);
      return State.wrappedValue.setter();
    }
  }
  else if (*(unsigned char *)(v2 + *(int *)(a2 + 44)) != 1)
  {
    goto LABEL_3;
  }
  uint64_t v5 = static Animation.easeOut.getter();
  __chkstk_darwin(v5, v6);
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t sub_100028B74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v43 = a3;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(a1, a2);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LocalCoordinateSpace();
  __chkstk_darwin(v9, v10);
  uint64_t v11 = type metadata accessor for DragGesture();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v39 = v11;
  uint64_t v40 = v12;
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100008614(&qword_1000F8170);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v41 = v16;
  uint64_t v42 = v17;
  __chkstk_darwin(v16, v18);
  char v36 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.local.getter();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)();
  int v37 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  double v31 = v8;
  v37(v8, v4, a1);
  uint64_t v20 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v21 = (v20 + 32) & ~v20;
  uint64_t v34 = v20 | 7;
  uint64_t v35 = v21 + v7;
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v33 = *(void *)(a1 + 16);
  *(void *)(v22 + 16) = v33;
  *(void *)(v22 + 24) = v23;
  uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v32(v22 + v21, v8, a1);
  sub_10002954C(&qword_1000F8178, (void (*)(uint64_t))&type metadata accessor for DragGesture);
  sub_10002954C(&qword_1000F8180, (void (*)(uint64_t))&type metadata accessor for DragGesture.Value);
  uint64_t v24 = v36;
  uint64_t v25 = v39;
  Gesture<>.onChanged(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v25);
  uint64_t v26 = v31;
  v37(v31, v38, a1);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v33;
  *(void *)(v27 + 24) = v23;
  v32(v27 + v21, v26, a1);
  sub_100012908(&qword_1000F8188, &qword_1000F8170);
  uint64_t v28 = v41;
  Gesture.onEnded(_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v24, v28);
}

uint64_t sub_100028FA8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100029024(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for MultipleSubtitles();
  sub_100008614(&qword_1000F7F58);
  uint64_t result = State.wrappedValue.getter();
  if ((v7 & 1) == 0)
  {
    uint64_t result = DragGesture.Value.translation.getter();
    if (v5 >= 30.0)
    {
      uint64_t v6 = (void (**)(uint64_t))(a2 + *(int *)(v3 + 40));
      if (*v6) {
        (*v6)(result);
      }
      return State.wrappedValue.setter();
    }
  }
  return result;
}

uint64_t sub_100029108()
{
  return State.wrappedValue.setter();
}

uint64_t sub_10002917C()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_1000291C0()
{
  unint64_t result = qword_1000F80E0;
  if (!qword_1000F80E0)
  {
    sub_100009F40(&qword_1000F80D8);
    sub_100012908(&qword_1000F80E8, &qword_1000F80D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F80E0);
  }
  return result;
}

uint64_t sub_100029260@<X0>(char *a1@<X8>)
{
  return sub_100028204(*(void **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10002926C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009F40(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000292E8()
{
  return sub_10002926C(&qword_1000F8110, &qword_1000F8118, (void (*)(void))sub_100029318);
}

uint64_t sub_100029318()
{
  return sub_10002926C(&qword_1000F8120, &qword_1000F8128, (void (*)(void))sub_100029348);
}

uint64_t sub_100029348()
{
  return sub_10002926C(&qword_1000F8130, &qword_1000F8138, (void (*)(void))sub_100029378);
}

uint64_t sub_100029378()
{
  return sub_10002926C(&qword_1000F8140, &qword_1000F8148, (void (*)(void))sub_1000293A8);
}

unint64_t sub_1000293A8()
{
  unint64_t result = qword_1000F8150;
  if (!qword_1000F8150)
  {
    sub_100009F40(&qword_1000F8158);
    sub_100012908(&qword_1000F8160, &qword_1000F8168);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8150);
  }
  return result;
}

uint64_t sub_10002944C()
{
  uint64_t v1 = type metadata accessor for MultipleSubtitles();
  return sub_1000289CC(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))+ *(int *)(v1 + 36), v1);
}

uint64_t sub_1000294C0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MultipleSubtitles();
  return sub_1000289CC(a1, v2);
}

uint64_t sub_100029534(uint64_t a1)
{
  return sub_1000295B0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100029024);
}

uint64_t sub_10002954C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100029598(uint64_t a1)
{
  return sub_1000295B0(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100029108);
}

uint64_t sub_1000295B0(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(type metadata accessor for MultipleSubtitles() - 8);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a2(a1, v7, v4, v5);
}

uint64_t sub_100029650()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t sub_10002968C()
{
  return sub_100028FA8();
}

uint64_t sub_1000296B4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for MultipleSubtitles();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(*(void *)(v2 - 8) + 64);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v4 + *(int *)(v2 + 36), v1);
  if (*(void *)(v0 + v4 + *(int *)(v2 + 40))) {
    swift_release();
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_1000297E8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for MultipleSubtitles() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_1000285B8(a1, v8, v5, v6, a2);
}

unint64_t sub_100029884()
{
  unint64_t result = qword_1000F81A0;
  if (!qword_1000F81A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F81A0);
  }
  return result;
}

uint64_t sub_1000298D8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000298F0(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100029900()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100029A1C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100029A7C()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_100029ACC()
{
  unint64_t result = qword_1000F81A8[0];
  if (!qword_1000F81A8[0])
  {
    type metadata accessor for PCActivityType(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1000F81A8);
  }
  return result;
}

uint64_t sub_100029B24()
{
  return swift_initClassMetadata2();
}

unint64_t sub_100029B78(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_100029BAC(a1);
}

unint64_t sub_100029BAC(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = swift_isaMask & *v1;
  uint64_t v5 = *(void *)(qword_1001119C8 + v4 + 16);
  id v6 = objc_allocWithZone((Class)type metadata accessor for AdaptivePresentationControllerDelegate());
  uint64_t v7 = v1;
  *(void *)((char *)v1 + v5) = [v6 init];

  sub_10004DA44(1953066569, (void *)0xE400000000000000, 0, ObjectType, (uint64_t)&off_1000E4A40);
  uint64_t v8 = (id)sub_100065058(a1);
  id v9 = [v8 presentationController];
  if (!v9) {
    goto LABEL_15;
  }
  uint64_t v10 = v9;
  self;
  uint64_t v11 = swift_dynamicCastObjCClass();
  if (!v11)
  {

LABEL_15:
    uint64_t v25 = *(void *)(v4 + qword_1001119C8);
    uint64_t v26 = type metadata accessor for CardHostingController();
    sub_10004DC80(60, 0xD00000000000002FLL, (void *)0x80000001000BDCF0, 0, v26, (uint64_t)&off_1000E4A40);

    (*(void (**)(uint64_t))(*(void *)(v25 - 8) + 8))(a1);
    return (unint64_t)v8;
  }
  uint64_t v12 = (void *)v11;
  id v13 = [self currentTraitCollection];
  [v13 displayCornerRadius];
  double v15 = v14;

  UISheetPresentationController.preferredCornerRadius.setter();
  [v12 _setCornerRadiusForPresentationAndDismissal:v15];
  [v12 setDelegate:*(void *)((char *)v8 + *(void *)(qword_1001119C8 + (swift_isaMask & *v8) + 16))];
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v16 = *(id *)(qword_100111A10 + 632);
  char v17 = sub_10002D38C();

  if ((v17 & 1) == 0) {
    goto LABEL_18;
  }
  id v18 = [v12 detents];
  sub_10002A990();
  unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v19 >> 62))
  {
    uint64_t v20 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v20)
  {
LABEL_17:
    swift_bridgeObjectRelease();
LABEL_18:
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + qword_1001119C8) - 8) + 8))(a1);

    return (unint64_t)v8;
  }
LABEL_8:
  unint64_t result = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_21;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_21:
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v22 = *(id *)(v19 + 8 * result + 32);
LABEL_13:
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    id v24 = [v23 identifier];
    [v12 setLargestUndimmedDetentIdentifier:v24];

    (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + qword_1001119C8) - 8) + 8))(a1);
    return (unint64_t)v8;
  }
  __break(1u);
  return result;
}

void sub_100029FF8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  sub_10002A8D0();
}

void sub_10002A020()
{
}

id sub_10002A06C()
{
  uint64_t v4 = v0;
  uint64_t v1 = (objc_class *)type metadata accessor for CardHostingController();
  sub_10004DC48(0x74696E696564, (void *)0xE600000000000000, 0, (uint64_t)v1, (uint64_t)&off_1000E4A40);
  v3.receiver = v0;
  v3.super_class = v1;
  [super dealloc];
}

id sub_10002A12C(void *a1)
{
  id v1 = a1;
  return sub_10002A06C();
}

void sub_10002A154(void *a1)
{
}

void sub_10002A1A0()
{
  id v1 = (objc_class *)type metadata accessor for CardHostingController();
  v2.receiver = v0;
  v2.super_class = v1;
  [super viewDidLoad];
  sub_10004DC48(0x4C64694477656976, (void *)0xED0000292864616FLL, 0, (uint64_t)v1, (uint64_t)&off_1000E4A40);
}

void sub_10002A264(void *a1)
{
  id v1 = a1;
  sub_10002A1A0();
}

uint64_t type metadata accessor for CardHostingController()
{
  return sub_10000ED34();
}

void sub_10002A2C4()
{
}

uint64_t sub_10002A2F4()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService38AdaptivePresentationControllerDelegate____lazy_storage___publisher;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC13PCViewService38AdaptivePresentationControllerDelegate____lazy_storage___publisher))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC13PCViewService38AdaptivePresentationControllerDelegate____lazy_storage___publisher);
  }
  else
  {
    uint64_t v3 = v0;
    sub_100008614(&qword_1000F8268);
    sub_10002A874();
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void sub_10002A3B8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  PassthroughSubject.send(_:)();
}

id sub_10002A520()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AdaptivePresentationControllerDelegate();
  return [super dealloc];
}

uint64_t type metadata accessor for AdaptivePresentationControllerDelegate()
{
  return self;
}

unint64_t destroy for AdaptivePresentationControllerEvent(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_unknownObjectRelease();
  }
  return result;
}

void *_s13PCViewService35AdaptivePresentationControllerEventOwCP_0(void *a1, void *a2)
{
  unint64_t v3 = a2[1];
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = a2[1];
  }
  if ((int)v4 - 1 < 0)
  {
    *a1 = *a2;
    a1[1] = v3;
    swift_unknownObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

void *assignWithCopy for AdaptivePresentationControllerEvent(void *a1, void *a2)
{
  LODWORD(v4) = -1;
  if (a1[1] >= 0xFFFFFFFFuLL) {
    LODWORD(v5) = -1;
  }
  else {
    uint64_t v5 = a1[1];
  }
  int v6 = v5 - 1;
  if (a2[1] < 0xFFFFFFFFuLL) {
    uint64_t v4 = a2[1];
  }
  int v7 = v4 - 1;
  if (v6 < 0)
  {
    if (v7 < 0)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      return a1;
    }
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  if ((v7 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithTake for AdaptivePresentationControllerEvent(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  int v5 = -1;
  if (v4 < 0xFFFFFFFF) {
    int v5 = v4;
  }
  if (v5 - 1 < 0)
  {
    unint64_t v6 = a2[1];
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF) {
      uint64_t v7 = a2[1];
    }
    if ((int)v7 - 1 < 0)
    {
      *a1 = *a2;
      a1[1] = v6;
      swift_unknownObjectRelease();
      return a1;
    }
    swift_unknownObjectRelease();
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for AdaptivePresentationControllerEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 2;
  if (v5 >= 4) {
    return v6;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AdaptivePresentationControllerEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

uint64_t sub_10002A814(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_10002A838(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AdaptivePresentationControllerEvent()
{
  return &type metadata for AdaptivePresentationControllerEvent;
}

unint64_t sub_10002A874()
{
  unint64_t result = qword_1000F8270;
  if (!qword_1000F8270)
  {
    sub_100009F40(&qword_1000F8268);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8270);
  }
  return result;
}

void sub_10002A8D0()
{
  uint64_t v1 = *(void *)(qword_1001119C8 + (swift_isaMask & *v0) + 16);
  *(void *)((char *)v0 + v1) = [objc_allocWithZone((Class)type metadata accessor for AdaptivePresentationControllerDelegate()) init];

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t sub_10002A990()
{
  unint64_t result = qword_1000F7748;
  if (!qword_1000F7748)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000F7748);
  }
  return result;
}

unint64_t sub_10002A9D0(char a1)
{
  unint64_t result = 0x44497472656C61;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C746974;
      break;
    case 2:
      unint64_t result = 0x656C746974627573;
      break;
    case 3:
      unint64_t result = 0x6C65694674786574;
      break;
    case 4:
      unint64_t result = 0x74756F656D6974;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x736E6F69746361;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10002AABC()
{
  return sub_10002A9D0(*v0);
}

uint64_t sub_10002AAC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10002C8AC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10002AAEC(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10002AAF8(uint64_t a1)
{
  unint64_t v2 = sub_10002AE60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002AB34(uint64_t a1)
{
  unint64_t v2 = sub_10002AE60();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PCUserAlertPresentationContext.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100008614(&qword_1000F8278);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000AEFC(a1, a1[3]);
  sub_10002AE60();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v19 = 0;
  type metadata accessor for UUID();
  sub_10002B60C(&qword_1000F8288, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for PCUserAlertPresentationContext();
    char v18 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v17 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v16 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v15 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + *(int *)(v10 + 40));
    v12[15] = 6;
    sub_100008614(&qword_1000F8290);
    sub_10002B464(&qword_1000F8298);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_10002AE60()
{
  unint64_t result = qword_1000F8280;
  if (!qword_1000F8280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8280);
  }
  return result;
}

uint64_t type metadata accessor for PCUserAlertPresentationContext()
{
  uint64_t result = qword_1000F83A0;
  if (!qword_1000F83A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PCUserAlertPresentationContext.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v35 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_100008614(&qword_1000F82A0);
  uint64_t v33 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v7);
  id v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for PCUserAlertPresentationContext();
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10002AE60();
  int v37 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000AF94((uint64_t)a1);
  }
  double v31 = a1;
  uint64_t v14 = v34;
  char v45 = 0;
  sub_10002B60C(&qword_1000F82A8, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v15 = v35;
  uint64_t v16 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v13, v15, v4);
  char v44 = 1;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v18 = (uint64_t *)&v13[v10[5]];
  *char v18 = v17;
  v18[1] = v19;
  char v43 = 2;
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v21 = v33;
  id v22 = (uint64_t *)&v13[v10[6]];
  *id v22 = v20;
  v22[1] = v23;
  char v42 = 3;
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v25 = (uint64_t *)&v13[v10[7]];
  *uint64_t v25 = v24;
  v25[1] = v26;
  char v41 = 4;
  uint64_t v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v28 = &v13[v10[8]];
  *(void *)uint64_t v28 = v27;
  v28[8] = v29 & 1;
  char v40 = 5;
  v13[v10[9]] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  sub_100008614(&qword_1000F8290);
  char v39 = 6;
  sub_10002B464(&qword_1000F82B0);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v37, v16);
  *(void *)&v13[v10[10]] = v38;
  sub_10002B4C8((uint64_t)v13, v32);
  sub_10000AF94((uint64_t)v31);
  return sub_10002B52C((uint64_t)v13);
}

uint64_t sub_10002B464(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009F40(&qword_1000F8290);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002B4C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PCUserAlertPresentationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002B52C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PCUserAlertPresentationContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002B588(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10002B60C(&qword_1000F82B8, (void (*)(uint64_t))type metadata accessor for PCUserAlertPresentationContext);
  uint64_t result = sub_10002B60C(qword_1000F82C0, (void (*)(uint64_t))type metadata accessor for PCUserAlertPresentationContext);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10002B60C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002B654@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PCUserAlertPresentationContext.init(from:)(a1, a2);
}

uint64_t sub_10002B66C(void *a1)
{
  return PCUserAlertPresentationContext.encode(to:)(a1);
}

uint64_t sub_10002B684()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_10002B6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t sub_10002B770(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_retain();
  swift_release();
  return a1;
}

__n128 sub_10002B848(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_10002B86C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v7;
  swift_release();
  return a1;
}

uint64_t sub_10002B8FC(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10002B944(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for PCUserAlertDefinition()
{
  return sub_10000ED34();
}

void *initializeBufferWithCopyOfBuffer for PCUserAlertPresentationContext(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (void *)((char *)a1 + v8);
    uint64_t v11 = (void *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (void *)((char *)a1 + v9);
    uint64_t v14 = (void *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    char v18 = (void *)((char *)a1 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *char v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = (char *)a1 + v17;
    id v22 = (char *)a2 + v17;
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    uint64_t v23 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PCUserAlertPresentationContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PCUserAlertPresentationContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  char v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a1 + v16;
  uint64_t v21 = a2 + v16;
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  uint64_t v22 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(void *)(a1 + v22) = *(void *)(a2 + v22);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PCUserAlertPresentationContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  char v18 = (uint64_t *)(a2 + v16);
  uint64_t v19 = *v18;
  *(unsigned char *)(v17 + 8) = *((unsigned char *)v18 + 8);
  *(void *)uint64_t v17 = v19;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PCUserAlertPresentationContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  uint64_t v11 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  return a1;
}

uint64_t assignWithTake for PCUserAlertPresentationContext(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  char v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *char v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = a3[9];
  uint64_t v24 = a1 + v22;
  uint64_t v25 = a2 + v22;
  *(void *)uint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(unsigned char *)(a1 + v23) = *(unsigned char *)(a2 + v23);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PCUserAlertPresentationContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002BF98);
}

uint64_t sub_10002BF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 40));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PCUserAlertPresentationContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002C06C);
}

uint64_t sub_10002C06C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10002C128()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10002C1E4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10002C27C(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x10002C3D0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void sub_10002C3E4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x10002C5D0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          char v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *char v18 = 0;
            v18[1] = 0;
            *(_DWORD *)char v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            v18[1] = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for PCUserAlertResult()
{
  return sub_10000ED34();
}

uint64_t getEnumTagSinglePayload for PCUserAlertPresentationContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PCUserAlertPresentationContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002C76CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PCUserAlertPresentationContext.CodingKeys()
{
  return &type metadata for PCUserAlertPresentationContext.CodingKeys;
}

unint64_t sub_10002C7A8()
{
  unint64_t result = qword_1000F8470;
  if (!qword_1000F8470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8470);
  }
  return result;
}

unint64_t sub_10002C800()
{
  unint64_t result = qword_1000F8478;
  if (!qword_1000F8478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8478);
  }
  return result;
}

unint64_t sub_10002C858()
{
  unint64_t result = qword_1000F8480;
  if (!qword_1000F8480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8480);
  }
  return result;
}

uint64_t sub_10002C8AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x44497472656C61 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974627573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C65694674786574 && a2 == 0xEF74706D6F725064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x74756F656D6974 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001000BE860 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x736E6F69746361 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_10002CBA8()
{
  sub_100008614(&qword_1000F8828);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  UUID.uuidString.getter();
  sub_10003C664(8);
  swift_bridgeObjectRelease();
  sub_100034804();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = 45;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10002CD48(uint64_t *a1, uint64_t *a2)
{
  sub_100008614(a1);
  sub_100008614(a2);
  uint64_t v4 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v4, v5);
  if ((v6 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v4 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  String.append(_:)(*(Swift::String *)((char *)v2 + *(void *)((swift_isaMask & *v2) + 0x68)));
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 45;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10002CE8C()
{
  unint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  Swift::String v3 = *(void **)((char *)v0 + *(void *)(v2 + 0x70));
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = (void *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68));
  uint64_t v6 = *v4;
  unint64_t v5 = (void *)v4[1];
  id v7 = v3;
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 objectForKey:v8];

  if (!v9)
  {

    uint64_t v2 = swift_isaMask & *v1;
LABEL_6:
    uint64_t v11 = v2;
LABEL_7:
    uint64_t v10 = *(void *)((char *)v1 + *(void *)(v11 + 96));
    swift_bridgeObjectRetain();
    return v10;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000E714(v37, v38);
  sub_10000E724((uint64_t)v38, (uint64_t)v37);
  sub_100008614(&qword_1000F8838);
  if ((swift_dynamicCast() & 1) == 0)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    id v14 = [v7 stringForKey:v13];

    if (v14)
    {
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10000AF94((uint64_t)v38);
      return v10;
    }
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v7 dataForKey:v15];

    if (v16)
    {
      uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v18;

      *(void *)&v37[0] = 0;
      *((void *)&v37[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(81);
      v19._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
      v19._object = (void *)0x80000001000BD2C0;
      String.append(_:)(v19);
      swift_bridgeObjectRetain();
      v20._uint64_t countAndFlagsBits = v6;
      v20._object = v5;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = 125;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      sub_10002CD48(&qword_1000F8840, &qword_1000F8848);
      id v22 = objc_allocWithZone((Class)CULogHandle);
      NSString v23 = String._bridgeToObjectiveC()();
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v25 = [v22 initWithSubsystem:v23 category:v24];

      swift_bridgeObjectRetain();
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v25 ulog:90 message:v26];
      swift_bridgeObjectRelease();

      sub_10000D6B8(v17, v35);
    }
    else
    {
      *(void *)&v37[0] = 0;
      *((void *)&v37[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(93);
      v27._uint64_t countAndFlagsBits = 0xD00000000000005ALL;
      v27._object = (void *)0x80000001000BD260;
      String.append(_:)(v27);
      swift_bridgeObjectRetain();
      v28._uint64_t countAndFlagsBits = v6;
      v28._object = v5;
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29._uint64_t countAndFlagsBits = 125;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      sub_10002CD48(&qword_1000F8840, &qword_1000F8848);
      id v30 = objc_allocWithZone((Class)CULogHandle);
      NSString v31 = String._bridgeToObjectiveC()();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v33 = [v30 initWithSubsystem:v31 category:v32];

      swift_bridgeObjectRetain();
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v33 ulog:90 message:v34];
      swift_bridgeObjectRelease();
    }
    sub_10000AF94((uint64_t)v38);
    uint64_t v11 = swift_isaMask & *v1;
    goto LABEL_7;
  }

  sub_10000AF94((uint64_t)v38);
  return v36;
}

uint64_t sub_10002D38C()
{
  unint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  Swift::String v3 = *(void **)((char *)v0 + *(void *)(v2 + 0x70));
  if (v3)
  {
    uint64_t v4 = (uint64_t *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68));
    uint64_t v6 = *v4;
    unint64_t v5 = (void *)v4[1];
    id v7 = v3;
    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v7 objectForKey:v8];

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10000E714(v42, v43);
      sub_10000E724((uint64_t)v43, (uint64_t)v42);
      if (swift_dynamicCast())
      {

        sub_10000AF94((uint64_t)v43);
        return v41 & 1;
      }
      NSString v12 = String._bridgeToObjectiveC()();
      id v13 = [v7 stringForKey:v12];

      if (v13)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        char v14 = sub_10000E63C();
        if (v14 != 2)
        {
          char v32 = v14;
          sub_10000AF94((uint64_t)v43);

          return v32 & 1;
        }
        *(void *)&v42[0] = 0;
        *((void *)&v42[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        unint64_t v15 = 0xD00000000000004ELL;
        id v16 = "Failed to create value from stored UserDefault. Returning default value {key: ";
      }
      else
      {
        NSString v17 = String._bridgeToObjectiveC()();
        id v18 = [v7 dataForKey:v17];

        if (v18)
        {
          uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v21 = v20;

          *(void *)&v42[0] = 0;
          *((void *)&v42[0] + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(81);
          v22._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
          v22._object = (void *)0x80000001000BD2C0;
          String.append(_:)(v22);
          swift_bridgeObjectRetain();
          v23._uint64_t countAndFlagsBits = v6;
          v23._object = v5;
          String.append(_:)(v23);
          swift_bridgeObjectRelease();
          v24._uint64_t countAndFlagsBits = 125;
          v24._object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          sub_10002CD48(&qword_1000F86E8, &qword_1000F86F0);
          id v25 = objc_allocWithZone((Class)CULogHandle);
          NSString v26 = String._bridgeToObjectiveC()();
          NSString v27 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v28 = [v25 initWithSubsystem:v26 category:v27];

          swift_bridgeObjectRetain();
          NSString v29 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v28 ulog:90 message:v29];
          swift_bridgeObjectRelease();

          sub_10000D6B8(v19, v21);
          sub_10000AF94((uint64_t)v43);
          uint64_t v30 = *v1;
          uint64_t v31 = swift_isaMask;
LABEL_17:
          uint64_t v11 = v31 & v30;
          return *((unsigned __int8 *)v1 + *(void *)(v11 + 96));
        }
        *(void *)&v42[0] = 0;
        *((void *)&v42[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(93);
        unint64_t v15 = 0xD00000000000005ALL;
        id v16 = "Failed to cast value or get string from stored UserDefault. Returning default value {key: ";
      }
      unint64_t v33 = (unint64_t)(v16 - 32) | 0x8000000000000000;
      String.append(_:)(*(Swift::String *)&v15);
      swift_bridgeObjectRetain();
      v34._uint64_t countAndFlagsBits = v6;
      v34._object = v5;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      v35._uint64_t countAndFlagsBits = 125;
      v35._object = (void *)0xE100000000000000;
      String.append(_:)(v35);
      sub_10002CD48(&qword_1000F86E8, &qword_1000F86F0);
      id v36 = objc_allocWithZone((Class)CULogHandle);
      NSString v37 = String._bridgeToObjectiveC()();
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v39 = [v36 initWithSubsystem:v37 category:v38];

      swift_bridgeObjectRetain();
      NSString v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v39 ulog:90 message:v40];
      swift_bridgeObjectRelease();

      sub_10000AF94((uint64_t)v43);
      uint64_t v30 = *v1;
      uint64_t v31 = swift_isaMask;
      goto LABEL_17;
    }

    uint64_t v2 = swift_isaMask & *v1;
  }
  uint64_t v11 = v2;
  return *((unsigned __int8 *)v1 + *(void *)(v11 + 96));
}

double sub_10002D8E0()
{
  return sub_10002E45C((uint64_t)&type metadata for CGFloat, (uint64_t)sub_1000343DC, (void (*)(uint64_t *__return_ptr))sub_1000343F4, &qword_1000F87A0, &qword_1000F87A8);
}

uint64_t sub_10002D924()
{
  v0._rawValue = &off_1000E3008;
  return sub_10002DEB8((uint64_t)&type metadata for Defaults.BlurInitType, v0, &qword_1000F8880, &qword_1000F8888);
}

uint64_t sub_10002D948()
{
  unint64_t v1 = v0;
  uint64_t v2 = swift_isaMask & *v0;
  Swift::String v3 = *(void **)((char *)v0 + *(void *)(v2 + 0x70));
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = (uint64_t *)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x68));
  uint64_t v6 = *v4;
  unint64_t v5 = (void *)v4[1];
  id v7 = v3;
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v7 objectForKey:v8];

  if (!v9)
  {

    uint64_t v2 = swift_isaMask & *v1;
LABEL_6:
    uint64_t v11 = v2;
    return *(uint64_t *)((char *)v1 + *(void *)(v11 + 96));
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000E714(v46, v47);
  sub_10000E724((uint64_t)v47, (uint64_t)v46);
  if ((swift_dynamicCast() & 1) == 0)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    id v14 = [v7 stringForKey:v13];

    if (v14)
    {
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      uint64_t v18 = sub_10000E36C(v15, v17);
      if ((v19 & 1) == 0)
      {
        uint64_t v10 = v18;
        sub_10000AF94((uint64_t)v47);

        return v10;
      }
      *(void *)&v46[0] = 0;
      *((void *)&v46[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(81);
      unint64_t v35 = 0xD00000000000004ELL;
      id v36 = "Failed to create value from stored UserDefault. Returning default value {key: ";
    }
    else
    {
      NSString v20 = String._bridgeToObjectiveC()();
      id v21 = [v7 dataForKey:v20];

      if (v21)
      {
        uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v24 = v23;

        *(void *)&v46[0] = 0;
        *((void *)&v46[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v25._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
        v25._object = (void *)0x80000001000BD2C0;
        String.append(_:)(v25);
        swift_bridgeObjectRetain();
        v26._uint64_t countAndFlagsBits = v6;
        v26._object = v5;
        String.append(_:)(v26);
        swift_bridgeObjectRelease();
        v27._uint64_t countAndFlagsBits = 125;
        v27._object = (void *)0xE100000000000000;
        String.append(_:)(v27);
        sub_10002CD48(&qword_1000F8870, &qword_1000F8878);
        id v28 = objc_allocWithZone((Class)CULogHandle);
        NSString v29 = String._bridgeToObjectiveC()();
        NSString v30 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v31 = [v28 initWithSubsystem:v29 category:v30];

        swift_bridgeObjectRetain();
        NSString v32 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v31 ulog:90 message:v32];
        swift_bridgeObjectRelease();

        sub_10000D6B8(v22, v24);
        sub_10000AF94((uint64_t)v47);
        uint64_t v33 = *v1;
        uint64_t v34 = swift_isaMask;
LABEL_17:
        uint64_t v11 = v34 & v33;
        return *(uint64_t *)((char *)v1 + *(void *)(v11 + 96));
      }
      *(void *)&v46[0] = 0;
      *((void *)&v46[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(93);
      unint64_t v35 = 0xD00000000000005ALL;
      id v36 = "Failed to cast value or get string from stored UserDefault. Returning default value {key: ";
    }
    unint64_t v37 = (unint64_t)(v36 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v35);
    swift_bridgeObjectRetain();
    v38._uint64_t countAndFlagsBits = v6;
    v38._object = v5;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 125;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    sub_10002CD48(&qword_1000F8870, &qword_1000F8878);
    id v40 = objc_allocWithZone((Class)CULogHandle);
    NSString v41 = String._bridgeToObjectiveC()();
    NSString v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v43 = [v40 initWithSubsystem:v41 category:v42];

    swift_bridgeObjectRetain();
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v43 ulog:90 message:v44];
    swift_bridgeObjectRelease();

    sub_10000AF94((uint64_t)v47);
    uint64_t v33 = *v1;
    uint64_t v34 = swift_isaMask;
    goto LABEL_17;
  }

  sub_10000AF94((uint64_t)v47);
  return v45;
}

uint64_t sub_10002DE94()
{
  v0._rawValue = &off_1000E3058;
  return sub_10002DEB8((uint64_t)&type metadata for Defaults.ContinueTrigger, v0, &qword_1000F88A0, &qword_1000F88A8);
}

uint64_t sub_10002DEB8(uint64_t a1, Swift::OpaquePointer a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v5 = v4;
  uint64_t v6 = swift_isaMask & *v4;
  id v7 = *(void **)((char *)v4 + *(void *)(v6 + 0x70));
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v11 = (void *)((char *)v4 + *(void *)((swift_isaMask & *v4) + 0x68));
  uint64_t v13 = *v11;
  NSString v12 = (void *)v11[1];
  id v14 = v7;
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 objectForKey:v15];

  if (!v16)
  {

    uint64_t v6 = swift_isaMask & *v5;
LABEL_6:
    uint64_t v18 = v6;
    return *((unsigned __int8 *)v5 + *(void *)(v18 + 96));
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000E714(v51, v52);
  sub_10000E724((uint64_t)v52, (uint64_t)v51);
  if ((swift_dynamicCast() & 1) == 0)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = [v14 stringForKey:v20];

    if (v21)
    {
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;

      v25._uint64_t countAndFlagsBits = v22;
      v25._object = v24;
      Swift::Int v26 = _findStringSwitchCase(cases:string:)(a2, v25);
      swift_bridgeObjectRelease();
      if (!v26)
      {
        uint64_t v17 = 0;
        goto LABEL_16;
      }
      if (v26 == 1)
      {
        uint64_t v17 = 1;
LABEL_16:
        sub_10000AF94((uint64_t)v52);

        return v17;
      }
      *(void *)&v51[0] = 0;
      *((void *)&v51[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(81);
      unint64_t v40 = 0xD00000000000004ELL;
      NSString v41 = "Failed to create value from stored UserDefault. Returning default value {key: ";
    }
    else
    {
      NSString v27 = String._bridgeToObjectiveC()();
      id v28 = [v14 dataForKey:v27];

      if (v28)
      {
        uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        *(void *)&v51[0] = 0;
        *((void *)&v51[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v32._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
        v32._object = (void *)0x80000001000BD2C0;
        String.append(_:)(v32);
        swift_bridgeObjectRetain();
        v33._uint64_t countAndFlagsBits = v13;
        v33._object = v12;
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._uint64_t countAndFlagsBits = 125;
        v34._object = (void *)0xE100000000000000;
        String.append(_:)(v34);
        sub_10002CD48(a3, a4);
        id v35 = objc_allocWithZone((Class)CULogHandle);
        NSString v36 = String._bridgeToObjectiveC()();
        NSString v37 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v38 = [v35 initWithSubsystem:v36 category:v37];

        swift_bridgeObjectRetain();
        NSString v39 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v38 ulog:90 message:v39];
        swift_bridgeObjectRelease();

        sub_10000D6B8(v29, v31);
LABEL_20:
        sub_10000AF94((uint64_t)v52);
        uint64_t v18 = swift_isaMask & *v5;
        return *((unsigned __int8 *)v5 + *(void *)(v18 + 96));
      }
      *(void *)&v51[0] = 0;
      *((void *)&v51[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(93);
      unint64_t v40 = 0xD00000000000005ALL;
      NSString v41 = "Failed to cast value or get string from stored UserDefault. Returning default value {key: ";
    }
    unint64_t v42 = (unint64_t)(v41 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v40);
    swift_bridgeObjectRetain();
    v43._uint64_t countAndFlagsBits = v13;
    v43._object = v12;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._uint64_t countAndFlagsBits = 125;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    sub_10002CD48(a3, a4);
    id v45 = objc_allocWithZone((Class)CULogHandle);
    NSString v46 = String._bridgeToObjectiveC()();
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v48 = [v45 initWithSubsystem:v46 category:v47];

    swift_bridgeObjectRetain();
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v48 ulog:90 message:v49];
    swift_bridgeObjectRelease();

    goto LABEL_20;
  }

  sub_10000AF94((uint64_t)v52);
  return v50 & 1;
}

double sub_10002E418()
{
  return sub_10002E45C((uint64_t)&type metadata for Double, (uint64_t)sub_1000343DC, (void (*)(uint64_t *__return_ptr))sub_1000343F4, &qword_1000F8A10, &qword_1000F8A18);
}

double sub_10002E45C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr), uint64_t *a4, uint64_t *a5)
{
  uint64_t v6 = v5;
  uint64_t v7 = swift_isaMask & *v5;
  NSString v8 = *(void **)((char *)v5 + *(void *)(v7 + 0x70));
  if (!v8) {
    goto LABEL_6;
  }
  long long v60 = a5;
  uint64_t v11 = (void *)((char *)v5 + *(void *)(v7 + 104));
  uint64_t v13 = *v11;
  NSString v12 = (void *)v11[1];
  id v14 = v8;
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v14 objectForKey:v15];

  if (!v16)
  {

    uint64_t v7 = swift_isaMask & *v6;
LABEL_6:
    uint64_t v18 = v7;
    return *(double *)((char *)v6 + *(void *)(v18 + 96));
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10000E714(v64, v65);
  sub_10000E724((uint64_t)v65, (uint64_t)v64);
  if ((swift_dynamicCast() & 1) == 0)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = [v14 stringForKey:v20];

    if (!v21)
    {
      NSString v30 = String._bridgeToObjectiveC()();
      id v31 = [v14 dataForKey:v30];

      if (v31)
      {
        uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v34 = v33;

        *(void *)&v64[0] = 0;
        *((void *)&v64[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(81);
        v35._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
        v35._object = (void *)0x80000001000BD2C0;
        String.append(_:)(v35);
        swift_bridgeObjectRetain();
        v36._uint64_t countAndFlagsBits = v13;
        v36._object = v12;
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        v37._uint64_t countAndFlagsBits = 125;
        v37._object = (void *)0xE100000000000000;
        String.append(_:)(v37);
        sub_10002CD48(a4, v60);
        id v38 = objc_allocWithZone((Class)CULogHandle);
        NSString v39 = String._bridgeToObjectiveC()();
        NSString v40 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v41 = [v38 initWithSubsystem:v39 category:v40];

        swift_bridgeObjectRetain();
        NSString v42 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v41 ulog:90 message:v42];
        swift_bridgeObjectRelease();

        sub_10000D6B8(v32, v34);
LABEL_30:
        sub_10000AF94((uint64_t)v65);
        uint64_t v18 = swift_isaMask & *v6;
        return *(double *)((char *)v6 + *(void *)(v18 + 96));
      }
      *(void *)&v64[0] = 0;
      *((void *)&v64[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(93);
      v49._uint64_t countAndFlagsBits = 0xD00000000000005ALL;
      v49._object = (void *)0x80000001000BD260;
      String.append(_:)(v49);
      swift_bridgeObjectRetain();
      v50._uint64_t countAndFlagsBits = v13;
      v50._object = v12;
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._uint64_t countAndFlagsBits = 125;
      v51._object = (void *)0xE100000000000000;
      String.append(_:)(v51);
      id v48 = a4;
LABEL_29:
      sub_10002CD48(v48, v60);
      id v52 = objc_allocWithZone((Class)CULogHandle);
      NSString v53 = String._bridgeToObjectiveC()();
      NSString v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v55 = [v52 initWithSubsystem:v53 category:v54];

      swift_bridgeObjectRetain();
      NSString v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v55 ulog:90 message:v56];
      swift_bridgeObjectRelease();

      goto LABEL_30;
    }
    uint64_t v58 = a4;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v24 = v23;

    double v62 = 0.0;
    uint64_t v27 = __chkstk_darwin(v25, v26);
    v57[2] = &v62;
    if ((v24 & 0x1000000000000000) != 0 || !(v24 & 0x2000000000000000 | v22 & 0x1000000000000000))
    {
      _StringGuts._slowWithCString<A>(_:)();
    }
    else
    {
      long long v59 = v57;
      __chkstk_darwin(v27, v57);
      if ((v24 & 0x2000000000000000) != 0)
      {
        *(void *)&v64[0] = v22;
        *((void *)&v64[0] + 1) = v24 & 0xFFFFFFFFFFFFFFLL;
        BOOL v44 = (v22 > 0x20u || ((0x100003E01uLL >> v22) & 1) == 0)
           && (Swift::String v43 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
           && *v43 == 0;
        char v61 = v44;
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      if ((v22 & 0x1000000000000000) != 0)
      {
        uint64_t v28 = (v24 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v29 = v22 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v28 = _StringObject.sharedUTF8.getter();
      }
      char v61 = sub_100033F70(v28, v29, a3) & 1;
    }
    swift_bridgeObjectRelease();
LABEL_25:
    if (v61)
    {
      double v17 = v62;
      sub_10000AF94((uint64_t)v65);

      return v17;
    }
    *(void *)&v64[0] = 0;
    *((void *)&v64[0] + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v45._uint64_t countAndFlagsBits = 0xD00000000000004ELL;
    v45._object = (void *)0x80000001000BD2C0;
    String.append(_:)(v45);
    swift_bridgeObjectRetain();
    v46._uint64_t countAndFlagsBits = v13;
    v46._object = v12;
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._uint64_t countAndFlagsBits = 125;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    id v48 = v58;
    goto LABEL_29;
  }
  char v63 = 0;

  sub_10000AF94((uint64_t)v65);
  return v62;
}

double sub_10002EB08@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10002EF0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000F7EF8, &qword_1000F7F00).n128_u64[0];
  return result;
}

uint64_t sub_10002EB64@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 120) = v30;
  *(_OWORD *)(a9 + 136) = v31;
  *(_OWORD *)(a9 + 152) = v32;
  *(_OWORD *)(a9 + 168) = v33;
  *(_OWORD *)(a9 + 72) = v27;
  *(_OWORD *)(a9 + 88) = v28;
  *(void *)(a9 + 64) = *(void *)(v13 + 64);
  *(_OWORD *)(a9 + 104) = v29;

  return sub_100026320(v13);
}

uint64_t sub_10002ED30@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v13 + 64);
  *(_OWORD *)(a9 + 80) = v24;
  *(unsigned char *)(a9 + 96) = *(unsigned char *)(v13 + 96);
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  long long v26 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 104) = v28;
  *(_OWORD *)(a9 + 120) = v29;
  *(_OWORD *)(a9 + 136) = v30;
  *(_OWORD *)(a9 + 200) = v34;
  *(_OWORD *)(a9 + 184) = v33;
  *(_OWORD *)(a9 + 168) = v32;
  *(_OWORD *)(a9 + 152) = v31;
  return sub_100034700(v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000344D8);
}

__n128 sub_10002EF0C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  char v19 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v28 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    char v19 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  sub_1000210BC(v17, a9, a16);
  long long v29 = (_OWORD *)(a9 + *(int *)(sub_100008614(v19) + 36));
  v29[4] = v35;
  v29[5] = v36;
  v29[6] = v37;
  *long long v29 = v31;
  v29[1] = v32;
  __n128 result = v34;
  void v29[2] = v33;
  v29[3] = v34;
  return result;
}

uint64_t sub_10002F0DC@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  memcpy(a9, v13, 0x1F0uLL);
  a9[35] = v29;
  a9[36] = v30;
  a9[37] = v31;
  a9[31] = v25;
  a9[32] = v26;
  a9[33] = v27;
  a9[34] = v28;

  return sub_100035374((uint64_t)v13);
}

__n128 sub_10002F298@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  char v18 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v27 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    char v18 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(unsigned char *)(a9 + 8) = v18 & 1;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 32) = v30;
  __n128 result = v32;
  *(_OWORD *)(a9 + 48) = v31;
  *(__n128 *)(a9 + 64) = v32;
  return result;
}

uint64_t sub_10002F444@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20 = a19;
  char v21 = a18;
  uint64_t v22 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    long long v31 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    char v21 = a18;
    uint64_t v20 = a19;
    uint64_t v22 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a9 = a16;
  *(void *)(a9 + 8) = v22;
  *(unsigned char *)(a9 + 16) = v21 & 1;
  *(void *)(a9 + 24) = v20;
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = v35;
  *(_OWORD *)(a9 + 80) = v36;
  sub_1000298F0(a16, v22, v21 & 1);

  return swift_bridgeObjectRetain();
}

uint64_t sub_10002F638@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    static os_log_type_t.fault.getter();
    uint64_t v23 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  long long v24 = *(_OWORD *)(v13 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v13 + 32);
  *(_OWORD *)(a9 + 48) = v24;
  long long v25 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v13;
  *(_OWORD *)(a9 + 16) = v25;
  *(_OWORD *)(a9 + 120) = v30;
  *(_OWORD *)(a9 + 136) = v31;
  *(_OWORD *)(a9 + 152) = v32;
  *(_OWORD *)(a9 + 168) = v33;
  *(_OWORD *)(a9 + 72) = v27;
  *(_OWORD *)(a9 + 88) = v28;
  *(void *)(a9 + 64) = *(void *)(v13 + 64);
  *(_OWORD *)(a9 + 104) = v29;

  return sub_100034978(v13);
}

double sub_10002F804@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  *(void *)&double result = sub_10002EF0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_1000F8A00, &qword_1000F8A08).n128_u64[0];
  return result;
}

uint64_t sub_10002F860()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

Swift::Int PCProximityHandoffClientError.hashValue.getter()
{
  return Hasher._finalize()();
}

void PCProximityHandoffClientError.hash(into:)()
{
}

Swift::Int sub_10002F944()
{
  return Hasher._finalize()();
}

uint64_t sub_10002F984()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10002F9FC()
{
  return sub_1000236C8();
}

uint64_t sub_10002FA10()
{
  return sub_1000236C8();
}

uint64_t sub_10002FA24()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService13CardViewModel____lazy_storage___cardEventPublisher;
  if (*(void *)(v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel____lazy_storage___cardEventPublisher))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel____lazy_storage___cardEventPublisher);
  }
  else
  {
    uint64_t v3 = v0;
    sub_100008614(&qword_1000F8860);
    sub_100012908(&qword_1000F8868, &qword_1000F8860);
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10002FAE8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel__header;
  uint64_t v2 = sub_100008614(&qword_1000F8858);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel__content;
  uint64_t v4 = sub_100008614(&qword_1000F8850);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel__closeButtonEnabled;
  uint64_t v6 = sub_100008614(&qword_1000F7EC0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + OBJC_IVAR____TtC13PCViewService13CardViewModel__enablePaddingForCloseButton, v6);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10002FC6C()
{
  return type metadata accessor for CardViewModel();
}

uint64_t type metadata accessor for CardViewModel()
{
  uint64_t result = qword_1000F84D8;
  if (!qword_1000F84D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10002FCC0()
{
  sub_10002FDFC(319, &qword_1000F84E8, &qword_1000F7810);
  if (v0 <= 0x3F)
  {
    sub_10002FDFC(319, (unint64_t *)&unk_1000F84F0, (uint64_t *)&unk_1000F7820);
    if (v1 <= 0x3F)
    {
      sub_10002FE4C();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_10002FDFC(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    sub_100009F40(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_10002FE4C()
{
  if (!qword_1000F7CF8)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000F7CF8);
    }
  }
}

uint64_t getEnumTagSinglePayload for CardViewEvent(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for CardViewEvent(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10002FF94);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10002FFBC()
{
  return 0;
}

ValueMetadata *type metadata accessor for CardViewEvent()
{
  return &type metadata for CardViewEvent;
}

void *initializeBufferWithCopyOfBuffer for CardView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for CardView()
{
  return swift_release();
}

void *assignWithCopy for CardView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for CardView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CardView()
{
  return &type metadata for CardView;
}

uint64_t sub_100030094()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000300B0()
{
  uint64_t v1 = v0;
  uint64_t v25 = sub_100008614(&qword_1000F7EC0);
  uint64_t v2 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100008614(&qword_1000F8850);
  uint64_t v6 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v7);
  id v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F8858);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  id v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v1 + OBJC_IVAR____TtC13PCViewService13CardViewModel__header;
  *(void *)&long long v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  sub_1000210BC((uint64_t)&v27, (uint64_t)v26, &qword_1000F7810);
  sub_100008614(&qword_1000F7810);
  Published.init(initialValue:)();
  sub_10000EC04((uint64_t)&v27, &qword_1000F7810);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v15, v14, v10);
  uint64_t v16 = v1 + OBJC_IVAR____TtC13PCViewService13CardViewModel__content;
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v27 = 0u;
  sub_1000210BC((uint64_t)&v27, (uint64_t)v26, (uint64_t *)&unk_1000F7820);
  sub_100008614((uint64_t *)&unk_1000F7820);
  Published.init(initialValue:)();
  sub_10000EC04((uint64_t)&v27, (uint64_t *)&unk_1000F7820);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v16, v9, v24);
  uint64_t v17 = v1 + OBJC_IVAR____TtC13PCViewService13CardViewModel__closeButtonEnabled;
  LOBYTE(v27) = 1;
  Published.init(initialValue:)();
  char v18 = *(void (**)(uint64_t, char *, uint64_t))(v2 + 32);
  uint64_t v19 = v25;
  v18(v17, v5, v25);
  uint64_t v20 = v1 + OBJC_IVAR____TtC13PCViewService13CardViewModel__enablePaddingForCloseButton;
  LOBYTE(v27) = 1;
  Published.init(initialValue:)();
  v18(v20, v5, v19);
  uint64_t v21 = OBJC_IVAR____TtC13PCViewService13CardViewModel_cardEventSubject;
  sub_100008614(&qword_1000F8860);
  swift_allocObject();
  *(void *)(v1 + v21) = PassthroughSubject.init()();
  *(void *)(v1 + OBJC_IVAR____TtC13PCViewService13CardViewModel____lazy_storage___cardEventPublisher) = 0;
  return v1;
}

uint64_t sub_100030410@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CardViewModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100030450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v31 = a3;
  uint64_t v5 = sub_100008614(&qword_1000F8678);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v9 = sub_100008614(&qword_1000F8680);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v13 = sub_100008614(&qword_1000F8688);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = &v32[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v17 = sub_100008614(&qword_1000F8690);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = &v32[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(void *)uint64_t v8 = static HorizontalAlignment.center.getter();
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  uint64_t v21 = sub_100008614(&qword_1000F8698);
  sub_100030740(a1, a2, (uint64_t)&v8[*(int *)(v21 + 44)]);
  uint64_t v22 = static Animation.default.getter();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v33)
  {
    uint64_t v24 = v34;
    uint64_t v23 = v35;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v23 = 0;
  }
  sub_10000EC04((uint64_t)v32, (uint64_t *)&unk_1000F7820);
  sub_1000210BC((uint64_t)v8, (uint64_t)v12, &qword_1000F8678);
  uint64_t v25 = (uint64_t *)&v12[*(int *)(v9 + 36)];
  *uint64_t v25 = v22;
  v25[1] = v24;
  v25[2] = v23;
  sub_10000EC04((uint64_t)v8, &qword_1000F8678);
  uint64_t v26 = static Color.red.getter();
  sub_100030F4C(v26, 0, (uint64_t)v16);
  swift_release();
  sub_10000EC04((uint64_t)v12, &qword_1000F8680);
  uint64_t v27 = static SafeAreaRegions.container.getter();
  char v28 = static Edge.Set.all.getter();
  sub_1000210BC((uint64_t)v16, (uint64_t)v20, &qword_1000F8688);
  long long v29 = &v20[*(int *)(v17 + 36)];
  *(void *)long long v29 = v27;
  v29[8] = v28;
  sub_10000EC04((uint64_t)v16, &qword_1000F8688);
  return sub_100021270((uint64_t)v20, v31, &qword_1000F8690);
}

uint64_t sub_100030740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v108 = a3;
  uint64_t v5 = sub_100008614(&qword_1000F86F8);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (uint64_t *)((char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_100008614(&qword_1000F8700);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100008614(&qword_1000F8708);
  uint64_t v14 = __chkstk_darwin(v109, v13);
  uint64_t v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v14, v17);
  uint64_t v20 = (char *)&v95 - v19;
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v95 - v22;
  uint64_t v24 = sub_100008614(&qword_1000F8710);
  uint64_t v26 = __chkstk_darwin(v24 - 8, v25);
  uint64_t v112 = (uint64_t)&v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v31 = (char *)&v95 - v30;
  __chkstk_darwin(v29, v32);
  uint64_t v34 = (char *)&v95 - v33;
  *uint64_t v8 = static Alignment.topTrailing.getter();
  v8[1] = v35;
  uint64_t v36 = (uint64_t)v8 + *(int *)(sub_100008614(&qword_1000F8718) + 44);
  uint64_t v110 = a1;
  uint64_t v111 = a2;
  sub_100032FE8(a1, a2, v36);
  char v37 = static Edge.Set.top.getter();
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v38 = *(id *)(qword_100111A10 + 640);
  sub_10002E45C((uint64_t)&type metadata for CGFloat, (uint64_t)sub_1000343DC, (void (*)(uint64_t *__return_ptr))sub_1000343F4, &qword_1000F87A0, &qword_1000F87A8);

  EdgeInsets.init(_all:)();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  sub_1000210BC((uint64_t)v8, (uint64_t)v12, &qword_1000F86F8);
  Swift::String v47 = &v12[*(int *)(v9 + 36)];
  *Swift::String v47 = v37;
  *((void *)v47 + 1) = v40;
  *((void *)v47 + 2) = v42;
  *((void *)v47 + 3) = v44;
  *((void *)v47 + 4) = v46;
  v47[40] = 0;
  sub_10000EC04((uint64_t)v8, &qword_1000F86F8);
  unsigned __int8 v48 = static Edge.Set.leading.getter();
  unsigned __int8 v49 = static Edge.Set.trailing.getter();
  char v50 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v48) {
    char v50 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v49) {
    char v50 = Edge.Set.init(rawValue:)();
  }
  id v51 = *(id *)(qword_100111A10 + 648);
  sub_10002E45C((uint64_t)&type metadata for CGFloat, (uint64_t)sub_1000343DC, (void (*)(uint64_t *__return_ptr))sub_1000343F4, &qword_1000F87A0, &qword_1000F87A8);

  EdgeInsets.init(_all:)();
  uint64_t v53 = v52;
  uint64_t v55 = v54;
  uint64_t v57 = v56;
  uint64_t v59 = v58;
  sub_1000210BC((uint64_t)v12, (uint64_t)v16, &qword_1000F8700);
  long long v60 = &v16[*(int *)(v109 + 36)];
  char *v60 = v50;
  *((void *)v60 + 1) = v53;
  *((void *)v60 + 2) = v55;
  *((void *)v60 + 3) = v57;
  *((void *)v60 + 4) = v59;
  v60[40] = 0;
  sub_10000EC04((uint64_t)v12, &qword_1000F8700);
  sub_100021270((uint64_t)v16, (uint64_t)v20, &qword_1000F8708);
  sub_100021270((uint64_t)v20, (uint64_t)v23, &qword_1000F8708);
  uint64_t v61 = static Color.green.getter();
  sub_100031294(v61, 0, (uint64_t)v31);
  swift_release();
  sub_10000EC04((uint64_t)v23, &qword_1000F8708);
  uint64_t v62 = (uint64_t)v34;
  sub_100021270((uint64_t)v31, (uint64_t)v34, &qword_1000F8710);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v107 = v117;
  int v106 = v118;
  uint64_t v105 = v119;
  int v104 = v120;
  uint64_t v103 = v121;
  uint64_t v102 = v122;
  sub_100032C10((uint64_t)v113);
  uint64_t v63 = v113[0];
  uint64_t v64 = v113[1];
  char v65 = v114;
  static Color.blue.getter();
  sub_1000315DC(0, v63, v64, v65, (uint64_t)v115);
  swift_release();
  sub_100033FD0(v63, v64, v65);
  uint64_t v100 = v115[0];
  uint64_t v99 = v115[1];
  uint64_t v66 = v115[2];
  uint64_t v68 = v115[3];
  uint64_t v67 = v115[4];
  uint64_t v69 = v115[6];
  uint64_t v98 = v115[5];
  uint64_t v101 = v62;
  uint64_t v70 = v115[7];
  uint64_t v97 = v115[8];
  uint64_t v71 = v115[9];
  uint64_t v72 = v115[10];
  uint64_t v111 = v115[11];
  uint64_t v110 = v115[12];
  LODWORD(v109) = v116;
  uint64_t v73 = v62;
  uint64_t v74 = v112;
  sub_1000210BC(v73, v112, &qword_1000F8710);
  uint64_t v75 = v108;
  sub_1000210BC(v74, v108, &qword_1000F8710);
  uint64_t v76 = (int *)sub_100008614(&qword_1000F8720);
  uint64_t v77 = v75 + v76[12];
  *(void *)uint64_t v77 = 0;
  *(unsigned char *)(v77 + 8) = 1;
  *(void *)(v77 + 16) = v107;
  *(unsigned char *)(v77 + 24) = v106;
  *(void *)(v77 + 32) = v105;
  *(unsigned char *)(v77 + 40) = v104;
  uint64_t v78 = v102;
  *(void *)(v77 + 48) = v103;
  *(void *)(v77 + 56) = v78;
  uint64_t v79 = v75 + v76[16];
  uint64_t v80 = v100;
  uint64_t v81 = v99;
  *(void *)uint64_t v79 = v100;
  *(void *)(v79 + 8) = v81;
  *(void *)(v79 + 16) = v66;
  *(void *)(v79 + 24) = v68;
  uint64_t v82 = v98;
  *(void *)(v79 + 32) = v67;
  *(void *)(v79 + 40) = v82;
  *(void *)(v79 + 48) = v69;
  *(void *)(v79 + 56) = v70;
  uint64_t v83 = v97;
  *(void *)(v79 + 64) = v97;
  *(void *)(v79 + 72) = v71;
  uint64_t v84 = v71;
  uint64_t v96 = v72;
  uint64_t v85 = v111;
  *(void *)(v79 + 80) = v72;
  *(void *)(v79 + 88) = v85;
  uint64_t v86 = v110;
  *(void *)(v79 + 96) = v110;
  char v87 = v109;
  *(unsigned char *)(v79 + 104) = v109;
  uint64_t v88 = v75 + v76[20];
  *(void *)uint64_t v88 = 0;
  *(unsigned char *)(v88 + 8) = 0;
  uint64_t v93 = v71;
  uint64_t v94 = v72;
  uint64_t v89 = v83;
  uint64_t v90 = v80;
  uint64_t v91 = v81;
  sub_10003401C(v80, v81, v66, v68, v67, v82, v69, v70, v83, v93, v94, v85, v86, v87);
  sub_10000EC04(v101, &qword_1000F8710);
  sub_1000340C8(v90, v91, v66, v68, v67, v82, v69, v70, v89, v84, v96, v111, v110, v109);
  return sub_10000EC04(v112, &qword_1000F8710);
}

uint64_t sub_100030F4C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v6 = sub_100008614(&qword_1000F8680);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F86A0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100008614(&qword_1000F86A8);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v18 = *(id *)(qword_100111A10 + 120);
  char v19 = sub_10002D38C();

  if (v19 & 1) != 0 || (a2)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    double v22 = v35;
    uint64_t v23 = v37;
    uint64_t v24 = v38;
    uint64_t v25 = v39;
    uint64_t v26 = v33;
    swift_retain();
    uint64_t v27 = static Alignment.center.getter();
    uint64_t v29 = v28;
    sub_1000210BC(v4, (uint64_t)v17, &qword_1000F8680);
    uint64_t v30 = &v17[*(int *)(v14 + 36)];
    *(double *)uint64_t v30 = v22 * 0.5;
    *((double *)v30 + 1) = v22;
    *((void *)v30 + 2) = v36;
    *((void *)v30 + 3) = v23;
    *((void *)v30 + 4) = v24;
    *((void *)v30 + 5) = v25;
    *((void *)v30 + 6) = v26;
    *((_WORD *)v30 + 28) = 256;
    *((void *)v30 + 8) = v27;
    *((void *)v30 + 9) = v29;
    uint64_t v20 = &qword_1000F86A8;
    sub_1000210BC((uint64_t)v17, (uint64_t)v13, &qword_1000F86A8);
    swift_storeEnumTagMultiPayload();
    sub_100035128(&qword_1000F86B0, &qword_1000F86A8, (void (*)(void))sub_100033D00);
    sub_100033D00();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v17;
  }
  else
  {
    uint64_t v20 = &qword_1000F8680;
    sub_1000210BC(v4, (uint64_t)v9, &qword_1000F8680);
    sub_1000210BC((uint64_t)v9, (uint64_t)v13, &qword_1000F8680);
    swift_storeEnumTagMultiPayload();
    sub_100035128(&qword_1000F86B0, &qword_1000F86A8, (void (*)(void))sub_100033D00);
    sub_100033D00();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v9;
  }
  return sub_10000EC04(v21, v20);
}

uint64_t sub_100031294@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v6 = sub_100008614(&qword_1000F8708);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F8770);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100008614(&qword_1000F8778);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v18 = *(id *)(qword_100111A10 + 120);
  char v19 = sub_10002D38C();

  if (v19 & 1) != 0 || (a2)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    double v22 = v35;
    uint64_t v23 = v37;
    uint64_t v24 = v38;
    uint64_t v25 = v39;
    uint64_t v26 = v33;
    swift_retain();
    uint64_t v27 = static Alignment.center.getter();
    uint64_t v29 = v28;
    sub_1000210BC(v4, (uint64_t)v17, &qword_1000F8708);
    uint64_t v30 = &v17[*(int *)(v14 + 36)];
    *(double *)uint64_t v30 = v22 * 0.5;
    *((double *)v30 + 1) = v22;
    *((void *)v30 + 2) = v36;
    *((void *)v30 + 3) = v23;
    *((void *)v30 + 4) = v24;
    *((void *)v30 + 5) = v25;
    *((void *)v30 + 6) = v26;
    *((_WORD *)v30 + 28) = 256;
    *((void *)v30 + 8) = v27;
    *((void *)v30 + 9) = v29;
    uint64_t v20 = &qword_1000F8778;
    sub_1000210BC((uint64_t)v17, (uint64_t)v13, &qword_1000F8778);
    swift_storeEnumTagMultiPayload();
    sub_100035128(&qword_1000F8780, &qword_1000F8778, (void (*)(void))sub_1000342C0);
    sub_1000342C0();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v17;
  }
  else
  {
    uint64_t v20 = &qword_1000F8708;
    sub_1000210BC(v4, (uint64_t)v9, &qword_1000F8708);
    sub_1000210BC((uint64_t)v9, (uint64_t)v13, &qword_1000F8708);
    swift_storeEnumTagMultiPayload();
    sub_100035128(&qword_1000F8780, &qword_1000F8778, (void (*)(void))sub_1000342C0);
    sub_1000342C0();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v9;
  }
  return sub_10000EC04(v21, v20);
}

double sub_1000315DC@<D0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  char v9 = a4 & 1;
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v10 = *(id *)(qword_100111A10 + 120);
  char v11 = sub_10002D38C();

  if (v11 & 1) != 0 || (a1)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    swift_retain();
    static Alignment.center.getter();
  }
  sub_10003408C(a2, a3, v9);
  sub_100008614(&qword_1000F8728);
  sub_100008614(&qword_1000F8730);
  sub_100035128(&qword_1000F8738, &qword_1000F8728, (void (*)(void))sub_100034138);
  sub_100034138();
  _ConditionalContent<>.init(storage:)();
  *(_OWORD *)a5 = v13;
  *(_OWORD *)(a5 + 16) = v14;
  *(_OWORD *)(a5 + 32) = v15;
  *(_OWORD *)(a5 + 48) = v16;
  double result = *(double *)&v17;
  *(_OWORD *)(a5 + 64) = v17;
  *(_OWORD *)(a5 + 80) = v18;
  *(void *)(a5 + 96) = v19;
  *(unsigned char *)(a5 + 104) = v20;
  return result;
}

double sub_1000317DC@<D0>(char a1@<W1>, uint64_t a2@<X8>)
{
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v4 = *(id *)(qword_100111A10 + 120);
  char v5 = sub_10002D38C();

  if (v5 & 1) != 0 || (a1)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    swift_retain();
    static Alignment.center.getter();
  }
  swift_retain();
  swift_retain();
  sub_100008614(&qword_1000F87F0);
  sub_100008614(&qword_1000F8750);
  sub_100035128(&qword_1000F87F8, &qword_1000F87F0, (void (*)(void))sub_1000341B4);
  sub_1000341B4();
  _ConditionalContent<>.init(storage:)();
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a2 + 64) = v11;
  *(_OWORD *)(a2 + 80) = v12;
  *(unsigned char *)(a2 + 96) = v13;
  return result;
}

uint64_t sub_1000319CC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v6 = sub_100008614(&qword_1000F87B8);
  __chkstk_darwin(v6, v7);
  long long v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F8800);
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100008614(&qword_1000F8808);
  __chkstk_darwin(v14, v15);
  long long v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v18 = *(id *)(qword_100111A10 + 120);
  char v19 = sub_10002D38C();

  if (v19 & 1) != 0 || (a2)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    double v22 = v35;
    uint64_t v23 = v37;
    uint64_t v24 = v38;
    uint64_t v25 = v39;
    uint64_t v26 = v33;
    swift_retain();
    uint64_t v27 = static Alignment.center.getter();
    uint64_t v29 = v28;
    sub_1000210BC(v4, (uint64_t)v17, &qword_1000F87B8);
    uint64_t v30 = &v17[*(int *)(v14 + 36)];
    *(double *)uint64_t v30 = v22 * 0.5;
    *((double *)v30 + 1) = v22;
    *((void *)v30 + 2) = v36;
    *((void *)v30 + 3) = v23;
    *((void *)v30 + 4) = v24;
    *((void *)v30 + 5) = v25;
    *((void *)v30 + 6) = v26;
    *((_WORD *)v30 + 28) = 256;
    *((void *)v30 + 8) = v27;
    *((void *)v30 + 9) = v29;
    char v20 = &qword_1000F8808;
    sub_1000210BC((uint64_t)v17, (uint64_t)v13, &qword_1000F8808);
    swift_storeEnumTagMultiPayload();
    sub_100035128(&qword_1000F8810, &qword_1000F8808, (void (*)(void))sub_100034764);
    sub_100034764();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v17;
  }
  else
  {
    char v20 = &qword_1000F87B8;
    sub_1000210BC(v4, (uint64_t)v9, &qword_1000F87B8);
    sub_1000210BC((uint64_t)v9, (uint64_t)v13, &qword_1000F87B8);
    swift_storeEnumTagMultiPayload();
    sub_100035128(&qword_1000F8810, &qword_1000F8808, (void (*)(void))sub_100034764);
    sub_100034764();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v9;
  }
  return sub_10000EC04(v21, v20);
}

void *sub_100031D14@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = (uint64_t)v3;
  memcpy(__dst, v3, sizeof(__dst));
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v8 = *(id *)(qword_100111A10 + 120);
  char v9 = sub_10002D38C();

  if (v9 & 1) != 0 || (a2)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    swift_retain();
    uint64_t v10 = static Alignment.center.getter();
    uint64_t v12 = v11;
    memcpy(v15, __dst, 0x161uLL);
    double v16 = v27 * 0.5;
    double v17 = v27;
    uint64_t v18 = v28;
    uint64_t v19 = v29;
    uint64_t v20 = v30;
    uint64_t v21 = v31;
    uint64_t v22 = a1;
    __int16 v23 = 256;
    uint64_t v24 = v10;
    uint64_t v25 = v12;
    sub_100034C24((uint64_t)v15);
  }
  else
  {
    memcpy(v15, __dst, 0x161uLL);
    sub_1000349DC((uint64_t)v15);
  }
  sub_100021270((uint64_t)v15, (uint64_t)&v14, &qword_1000F88B0);
  sub_1000349E8(v4);
  sub_100008614(&qword_1000F88B8);
  sub_100008614(&qword_1000F88C0);
  sub_100035128(&qword_1000F88C8, &qword_1000F88B8, (void (*)(void))sub_100034B84);
  sub_100034B84();
  _ConditionalContent<>.init(storage:)();
  return memcpy(a3, __src, 0x1B9uLL);
}

uint64_t sub_100031F28@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v6 = sub_100008614(&qword_1000F8960);
  __chkstk_darwin(v6, v7);
  char v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F8968);
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100008614(&qword_1000F8970);
  __chkstk_darwin(v14, v15);
  double v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v18 = *(id *)(qword_100111A10 + 120);
  char v19 = sub_10002D38C();

  if (v19 & 1) != 0 || (a2)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    double v22 = v35;
    uint64_t v23 = v37;
    uint64_t v24 = v38;
    uint64_t v25 = v39;
    uint64_t v26 = v33;
    swift_retain();
    uint64_t v27 = static Alignment.center.getter();
    uint64_t v29 = v28;
    sub_1000210BC(v4, (uint64_t)v17, &qword_1000F8960);
    uint64_t v30 = &v17[*(int *)(v14 + 36)];
    *(double *)uint64_t v30 = v22 * 0.5;
    *((double *)v30 + 1) = v22;
    *((void *)v30 + 2) = v36;
    *((void *)v30 + 3) = v23;
    *((void *)v30 + 4) = v24;
    *((void *)v30 + 5) = v25;
    *((void *)v30 + 6) = v26;
    *((_WORD *)v30 + 28) = 256;
    *((void *)v30 + 8) = v27;
    *((void *)v30 + 9) = v29;
    uint64_t v20 = &qword_1000F8970;
    sub_1000210BC((uint64_t)v17, (uint64_t)v13, &qword_1000F8970);
    swift_storeEnumTagMultiPayload();
    sub_100035128(&qword_1000F8978, &qword_1000F8970, (void (*)(void))sub_100034EF0);
    sub_100034EF0();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v17;
  }
  else
  {
    uint64_t v20 = &qword_1000F8960;
    sub_1000210BC(v4, (uint64_t)v9, &qword_1000F8960);
    sub_1000210BC((uint64_t)v9, (uint64_t)v13, &qword_1000F8960);
    swift_storeEnumTagMultiPayload();
    sub_100035128(&qword_1000F8978, &qword_1000F8970, (void (*)(void))sub_100034EF0);
    sub_100034EF0();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v9;
  }
  return sub_10000EC04(v21, v20);
}

uint64_t sub_100032270@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v6 = sub_100008614(&qword_1000F8920);
  __chkstk_darwin(v6, v7);
  char v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F8928);
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100008614(&qword_1000F8930);
  __chkstk_darwin(v14, v15);
  double v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v18 = *(id *)(qword_100111A10 + 120);
  char v19 = sub_10002D38C();

  if (v19 & 1) != 0 || (a2)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    double v22 = v35;
    uint64_t v23 = v37;
    uint64_t v24 = v38;
    uint64_t v25 = v39;
    uint64_t v26 = v33;
    swift_retain();
    uint64_t v27 = static Alignment.center.getter();
    uint64_t v29 = v28;
    sub_1000210BC(v4, (uint64_t)v17, &qword_1000F8920);
    uint64_t v30 = &v17[*(int *)(v14 + 36)];
    *(double *)uint64_t v30 = v22 * 0.5;
    *((double *)v30 + 1) = v22;
    *((void *)v30 + 2) = v36;
    *((void *)v30 + 3) = v23;
    *((void *)v30 + 4) = v24;
    *((void *)v30 + 5) = v25;
    *((void *)v30 + 6) = v26;
    *((_WORD *)v30 + 28) = 256;
    *((void *)v30 + 8) = v27;
    *((void *)v30 + 9) = v29;
    uint64_t v20 = &qword_1000F8930;
    sub_1000210BC((uint64_t)v17, (uint64_t)v13, &qword_1000F8930);
    swift_storeEnumTagMultiPayload();
    sub_100035128(&qword_1000F8938, &qword_1000F8930, (void (*)(void))sub_100034DC8);
    sub_100034DC8();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v17;
  }
  else
  {
    uint64_t v20 = &qword_1000F8920;
    sub_1000210BC(v4, (uint64_t)v9, &qword_1000F8920);
    sub_1000210BC((uint64_t)v9, (uint64_t)v13, &qword_1000F8920);
    swift_storeEnumTagMultiPayload();
    sub_100035128(&qword_1000F8938, &qword_1000F8930, (void (*)(void))sub_100034DC8);
    sub_100034DC8();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v9;
  }
  return sub_10000EC04(v21, v20);
}

uint64_t sub_1000325B8@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v6 = sub_100008614(&qword_1000F89D8);
  __chkstk_darwin(v6, v7);
  char v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F89E0);
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100008614(&qword_1000F89E8);
  __chkstk_darwin(v14, v15);
  double v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v18 = *(id *)(qword_100111A10 + 120);
  char v19 = sub_10002D38C();

  if (v19 & 1) != 0 || (a2)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    double v22 = v35;
    uint64_t v23 = v37;
    uint64_t v24 = v38;
    uint64_t v25 = v39;
    uint64_t v26 = v33;
    swift_retain();
    uint64_t v27 = static Alignment.center.getter();
    uint64_t v29 = v28;
    sub_1000210BC(v4, (uint64_t)v17, &qword_1000F89D8);
    uint64_t v30 = &v17[*(int *)(v14 + 36)];
    *(double *)uint64_t v30 = v22 * 0.5;
    *((double *)v30 + 1) = v22;
    *((void *)v30 + 2) = v36;
    *((void *)v30 + 3) = v23;
    *((void *)v30 + 4) = v24;
    *((void *)v30 + 5) = v25;
    *((void *)v30 + 6) = v26;
    *((_WORD *)v30 + 28) = 256;
    *((void *)v30 + 8) = v27;
    *((void *)v30 + 9) = v29;
    uint64_t v20 = &qword_1000F89E8;
    sub_1000210BC((uint64_t)v17, (uint64_t)v13, &qword_1000F89E8);
    swift_storeEnumTagMultiPayload();
    sub_100035128((unint64_t *)&qword_1000F89F0, &qword_1000F89E8, (void (*)(void))sub_1000351CC);
    sub_1000351CC();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v17;
  }
  else
  {
    uint64_t v20 = &qword_1000F89D8;
    sub_1000210BC(v4, (uint64_t)v9, &qword_1000F89D8);
    sub_1000210BC((uint64_t)v9, (uint64_t)v13, &qword_1000F89D8);
    swift_storeEnumTagMultiPayload();
    sub_100035128((unint64_t *)&qword_1000F89F0, &qword_1000F89E8, (void (*)(void))sub_1000351CC);
    sub_1000351CC();
    _ConditionalContent<>.init(storage:)();
    uint64_t v21 = (uint64_t)v9;
  }
  return sub_10000EC04(v21, v20);
}

__n128 sub_100032900@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)v3;
  char v9 = *((unsigned char *)v3 + 16);
  uint64_t v10 = v3 + 2;
  uint64_t v24 = *((void *)v3 + 1);
  uint64_t v25 = *((void *)v3 + 3);
  uint64_t v26 = *((void *)v3 + 4);
  uint64_t v27 = *((void *)v3 + 5);
  char v11 = *((unsigned char *)v3 + 48);
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v12 = *(id *)(qword_100111A10 + 120);
  char v13 = sub_10002D38C();

  if (v13 & 1) != 0 || (a2)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    swift_retain();
    uint64_t v16 = static Alignment.center.getter();
    uint64_t v18 = v17;
    long long v19 = v4[1];
    long long v57 = *v4;
    long long v58 = v19;
    sub_100034C2C((uint64_t)&v57, (uint64_t)&v60);
    uint64_t v59 = *((void *)&v58 + 1);
    long long v55 = *v10;
    char v56 = *((unsigned char *)v10 + 16);
    uint64_t v29 = v8;
    uint64_t v30 = v24;
    char v31 = v9 & 1;
    uint64_t v32 = v25;
    uint64_t v33 = v26;
    uint64_t v34 = v27;
    char v35 = v11 & 1;
    double v36 = *(double *)&v52 * 0.5;
    long long v37 = v52;
    long long v38 = v53;
    uint64_t v39 = v54;
    uint64_t v40 = a1;
    __int16 v41 = 256;
    uint64_t v42 = v16;
    uint64_t v43 = v18;
    sub_100034DC0((uint64_t)&v29);
    sub_100021270((uint64_t)&v29, (uint64_t)v28, &qword_1000F88E8);
    sub_100034C94((uint64_t)&v60);
    sub_100034CC8((uint64_t)&v59);
    uint64_t v15 = &v55;
  }
  else
  {
    long long v14 = v4[1];
    long long v52 = *v4;
    long long v53 = v14;
    sub_100034C2C((uint64_t)&v52, (uint64_t)&v57);
    *(void *)&long long v55 = *((void *)&v53 + 1);
    long long v60 = *v10;
    char v61 = *((unsigned char *)v10 + 16);
    uint64_t v29 = v8;
    uint64_t v30 = v24;
    char v31 = v9 & 1;
    uint64_t v32 = v25;
    uint64_t v33 = v26;
    uint64_t v34 = v27;
    char v35 = v11 & 1;
    sub_100034C88((uint64_t)&v29);
    sub_100021270((uint64_t)&v29, (uint64_t)v28, &qword_1000F88E8);
    sub_100034C94((uint64_t)&v57);
    sub_100034CC8((uint64_t)&v55);
    uint64_t v15 = &v60;
  }
  sub_100034CF4((uint64_t)v15);
  sub_100008614(&qword_1000F88F0);
  sub_100008614(&qword_1000F88F8);
  sub_100035128(&qword_1000F8900, &qword_1000F88F0, (void (*)(void))sub_100034D20);
  sub_100034D20();
  _ConditionalContent<>.init(storage:)();
  long long v20 = v51[0];
  *(_OWORD *)(a3 + 96) = v50;
  *(_OWORD *)(a3 + 112) = v20;
  *(_OWORD *)(a3 + 121) = *(_OWORD *)((char *)v51 + 9);
  long long v21 = v47;
  *(_OWORD *)(a3 + 32) = v46;
  *(_OWORD *)(a3 + 48) = v21;
  long long v22 = v49;
  *(_OWORD *)(a3 + 64) = v48;
  *(_OWORD *)(a3 + 80) = v22;
  __n128 result = v45;
  *(_OWORD *)a3 = v44;
  *(__n128 *)(a3 + 16) = result;
  return result;
}

uint64_t sub_100032C10@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (v18)
  {
    sub_100034254(&v16, (uint64_t)&v21);
    uint64_t v25 = v19;
    uint64_t v26 = v20;
    uint64_t v2 = v23;
    uint64_t v3 = v24;
    sub_10000AEFC(&v21, v23);
    sub_1000828B4(v2, v3);
    sub_100008614(&qword_1000F8758);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1000AF6A0;
    *(void *)&long long v16 = 0x4024000000000000;
    BYTE8(v16) = 0;
    sub_10003426C();
    *(void *)(inited + 32) = static AnyTransition.modifier<A>(active:identity:)();
    *(void *)(inited + 40) = static AnyTransition.opacity.getter();
    *(void *)&long long v16 = inited;
    specialized Array._endMutation()();
    uint64_t v5 = v16;
    static AnyTransition.identity.getter();
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v7 = 0;
      do
      {
        ++v7;
        swift_retain();
        AnyTransition.combined(with:)();
        swift_release();
        swift_release();
      }
      while (v6 != v7);
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = swift_initStackObject();
    *(_OWORD *)(v11 + 16) = xmmword_1000AF6B0;
    *(void *)&long long v16 = 0x4024000000000000;
    BYTE8(v16) = 0;
    *(void *)(v11 + 32) = static AnyTransition.modifier<A>(active:identity:)();
    *(void *)(v11 + 40) = static AnyTransition.opacity.getter();
    *(void *)(v11 + 48) = static AnyTransition.scale.getter();
    *(void *)&long long v16 = v11;
    specialized Array._endMutation()();
    uint64_t v12 = v16;
    static AnyTransition.identity.getter();
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v14 = 0;
      do
      {
        ++v14;
        swift_retain();
        AnyTransition.combined(with:)();
        swift_release();
        swift_release();
      }
      while (v13 != v14);
      swift_release();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    static AnyTransition.asymmetric(insertion:removal:)();
    swift_release();
    swift_release();
    sub_100008614(&qword_1000F8750);
    sub_1000341B4();
    _ConditionalContent<>.init(storage:)();
    long long v15 = v16;
    char v10 = v17;
    uint64_t result = sub_10000EC04((uint64_t)&v21, &qword_1000F8768);
    long long v9 = v15;
  }
  else
  {
    sub_10000EC04((uint64_t)&v16, (uint64_t *)&unk_1000F7820);
    long long v16 = (unint64_t)AnyView.init<A>(_:)();
    char v17 = 1;
    sub_100008614(&qword_1000F8750);
    sub_1000341B4();
    uint64_t result = _ConditionalContent<>.init(storage:)();
    long long v9 = v21;
    char v10 = v22;
  }
  *(_OWORD *)a1 = v9;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_100032FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v72 = sub_100008614(&qword_1000F87B0);
  uint64_t v77 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v6);
  uint64_t v81 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_100008614(&qword_1000F87B8);
  __chkstk_darwin(v73, v8);
  uint64_t v76 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F87C0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v78 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100008614(&qword_1000F87C8);
  uint64_t v80 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v75 = (uint64_t)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  uint64_t v74 = (uint64_t)&v67 - v18;
  uint64_t v19 = sub_100008614(&qword_1000F87D0);
  uint64_t v21 = __chkstk_darwin(v19 - 8, v20);
  uint64_t v23 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  uint64_t v26 = (char *)&v67 - v25;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (*((void *)&v86 + 1))
  {
    uint64_t v68 = a1;
    uint64_t v69 = v13;
    uint64_t v70 = v26;
    uint64_t v71 = v23;
    sub_100034254(&v85, (uint64_t)v107);
    uint64_t v27 = v108;
    uint64_t v28 = v109;
    sub_10000AEFC(v107, v108);
    uint64_t v29 = sub_1000828B4(v27, v28);
    sub_100008614(&qword_1000F8758);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_1000AF6A0;
    uint64_t v112 = 0x4024000000000000;
    char v113 = 0;
    *(void *)&v99[0] = 0;
    BYTE8(v99[0]) = 0;
    sub_10003426C();
    *(void *)(v30 + 32) = static AnyTransition.modifier<A>(active:identity:)();
    *(void *)(v30 + 40) = static AnyTransition.opacity.getter();
    uint64_t v112 = v30;
    specialized Array._endMutation()();
    uint64_t v31 = v112;
    static AnyTransition.identity.getter();
    uint64_t v32 = *(void *)(v31 + 16);
    if (v32)
    {
      uint64_t v67 = v29;
      uint64_t v79 = a3;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v33 = 0;
      do
      {
        ++v33;
        swift_retain();
        AnyTransition.combined(with:)();
        swift_release();
        swift_release();
      }
      while (v32 != v33);
      swift_release();
      swift_bridgeObjectRelease();
      a3 = v79;
    }
    swift_bridgeObjectRelease();
    static Color.green.getter();
    sub_1000317DC(0, (uint64_t)v83);
    swift_release();
    swift_release();
    swift_release();
    v110[4] = v83[4];
    v110[5] = v83[5];
    char v111 = v84;
    v110[0] = v83[0];
    v110[1] = v83[1];
    v110[2] = v83[2];
    v110[3] = v83[3];
    static Alignment.leading.getter();
    sub_10002ED30(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v85, 0.0, 1, 0.0, 1);
    sub_100034700((uint64_t)v110, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100034600);
    char v34 = static Edge.Set.trailing.getter();
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    EdgeInsets.init(_all:)();
    char v82 = 0;
    v99[10] = v95;
    v99[11] = v96;
    v99[12] = v97;
    uint64_t v100 = v98;
    v99[6] = v91;
    v99[7] = v92;
    v99[8] = v93;
    v99[9] = v94;
    v99[2] = v87;
    v99[3] = v88;
    v99[4] = v89;
    v99[5] = v90;
    v99[0] = v85;
    v99[1] = v86;
    char v101 = v34;
    double v102 = v35;
    double v103 = v36;
    double v104 = v37;
    double v105 = v38;
    char v106 = 0;
    nullsub_1(v35, v36, v37, v38);
    sub_10000AF94((uint64_t)v107);
    sub_100021270((uint64_t)v99, (uint64_t)&v112, &qword_1000F87D8);
    uint64_t v26 = v70;
    uint64_t v23 = v71;
    a1 = v68;
    uint64_t v13 = v69;
  }
  else
  {
    sub_10000EC04((uint64_t)&v85, &qword_1000F7810);
    sub_100034414((uint64_t)v99);
    sub_100021270((uint64_t)v99, (uint64_t)&v112, &qword_1000F87D8);
  }
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  if (LOBYTE(v99[0]) == 1)
  {
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = a1;
    *(void *)(v39 + 24) = a2;
    type metadata accessor for CloseButtonView();
    sub_100035278(&qword_1000F87E8, (void (*)(uint64_t))type metadata accessor for CloseButtonView);
    swift_retain();
    Button.init(action:label:)();
    unsigned __int8 v40 = static Edge.Set.top.getter();
    char v41 = static Edge.Set.trailing.getter();
    char v42 = Edge.Set.init(rawValue:)();
    Edge.Set.init(rawValue:)();
    if (Edge.Set.init(rawValue:)() != v40) {
      char v42 = Edge.Set.init(rawValue:)();
    }
    Edge.Set.init(rawValue:)();
    char v43 = Edge.Set.init(rawValue:)();
    uint64_t v79 = a3;
    if (v43 != v41) {
      char v42 = Edge.Set.init(rawValue:)();
    }
    uint64_t v44 = v80;
    uint64_t v45 = v72;
    EdgeInsets.init(_all:)();
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    uint64_t v53 = v52;
    uint64_t v54 = (uint64_t)v76;
    uint64_t v55 = v77;
    char v56 = v81;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v76, v81, v45);
    uint64_t v57 = v54 + *(int *)(v73 + 36);
    *(unsigned char *)uint64_t v57 = v42;
    *(void *)(v57 + 8) = v47;
    *(void *)(v57 + 16) = v49;
    *(void *)(v57 + 24) = v51;
    *(void *)(v57 + 32) = v53;
    *(unsigned char *)(v57 + 40) = 0;
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v45);
    uint64_t v58 = static Color.purple.getter();
    uint64_t v59 = v78;
    sub_1000319CC(v58, 0, v78);
    swift_release();
    sub_10000EC04(v54, &qword_1000F87B8);
    uint64_t v60 = static Alignment.trailing.getter();
    uint64_t v61 = v75;
    sub_10002EF0C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v75, 0.0, 1, 0.0, 1, v60, v62, &qword_1000F87C0, &qword_1000F87C8);
    sub_10000EC04(v59, &qword_1000F87C0);
    uint64_t v63 = v74;
    sub_100021270(v61, v74, &qword_1000F87C8);
    sub_100021270(v63, (uint64_t)v26, &qword_1000F87C8);
    uint64_t v64 = 0;
    a3 = v79;
  }
  else
  {
    uint64_t v64 = 1;
    uint64_t v44 = v80;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v26, v64, 1, v13);
  sub_100021270((uint64_t)&v112, (uint64_t)v83, &qword_1000F87D8);
  sub_1000210BC((uint64_t)v26, (uint64_t)v23, &qword_1000F87D0);
  sub_100021270((uint64_t)v83, (uint64_t)&v85, &qword_1000F87D8);
  sub_100021270((uint64_t)&v85, a3, &qword_1000F87D8);
  uint64_t v65 = sub_100008614(&qword_1000F87E0);
  sub_1000210BC((uint64_t)v23, a3 + *(int *)(v65 + 48), &qword_1000F87D0);
  sub_100034544((uint64_t)&v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000344A8);
  sub_10000EC04((uint64_t)v26, &qword_1000F87D0);
  sub_10000EC04((uint64_t)v23, &qword_1000F87D0);
  sub_100021270((uint64_t)v83, (uint64_t)v99, &qword_1000F87D8);
  return sub_100034544((uint64_t)v99, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000345D0);
}

uint64_t sub_100033A14()
{
  swift_retain();
  PassthroughSubject.send(_:)();

  return swift_release();
}

uint64_t sub_100033A60@<X0>(uint64_t a1@<X8>)
{
  return sub_100030450(*v1, v1[1], a1);
}

unint64_t sub_100033A6C()
{
  unint64_t result = qword_1000F8670;
  if (!qword_1000F8670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8670);
  }
  return result;
}

uint64_t sub_100033AC0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100033B3C(uint64_t a1)
{
  sub_1000210BC(a1, (uint64_t)v3, &qword_1000F7810);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000210BC((uint64_t)v3, (uint64_t)&v2, &qword_1000F7810);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000EC04((uint64_t)v3, &qword_1000F7810);
}

uint64_t sub_100033BDC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100033C5C(uint64_t a1)
{
  sub_1000210BC(a1, (uint64_t)v3, (uint64_t *)&unk_1000F7820);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000210BC((uint64_t)v3, (uint64_t)&v2, (uint64_t *)&unk_1000F7820);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000EC04((uint64_t)v3, (uint64_t *)&unk_1000F7820);
}

unint64_t sub_100033D00()
{
  unint64_t result = qword_1000F86B8;
  if (!qword_1000F86B8)
  {
    sub_100009F40(&qword_1000F8680);
    sub_100012908(&qword_1000F86C0, &qword_1000F8678);
    sub_100012908(&qword_1000F86C8, &qword_1000F86D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F86B8);
  }
  return result;
}

uint64_t sub_100033DC4@<X0>(unsigned char *a1@<X8>)
{
  return sub_100025B5C(a1);
}

uint64_t sub_100033DD8()
{
  return sub_100025BD8();
}

unsigned char *sub_100033DEC@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (unint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100033E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *(*v7)(uint64_t *__return_ptr, void *);
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void v12[2];
  uint64_t v13;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    uint64_t v10 = _StringGuts._slowWithCString<A>(_:)();
    if (!v4) {
      uint64_t v10 = BYTE1(v13);
    }
  }
  else
  {
    __chkstk_darwin(a1, a2);
    if ((v6 & 0x2000000000000000) != 0)
    {
      v12[0] = v5;
      v12[1] = v6 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v10 = v7(&v13, v12);
      if (!v4) {
        uint64_t v10 = v13;
      }
    }
    else
    {
      if ((v5 & 0x1000000000000000) != 0)
      {
        uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v9 = v5 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v8 = _StringObject.sharedUTF8.getter();
      }
      uint64_t v10 = sub_100033F70(v8, v9, (void (*)(uint64_t *__return_ptr))sub_1000343F4);
    }
  }
  return v10 & 1;
}

uint64_t sub_100033F70(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

uint64_t sub_100033FD0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_release();
  if ((a3 & 1) == 0)
  {
    return swift_release();
  }
  return result;
}

uint64_t sub_10003401C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    char v14 = a3 & 1;
    return sub_10003408C(a1, a2, v14);
  }
  else
  {
    sub_10003408C(a1, a2, a3 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
}

uint64_t sub_10003408C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_retain();
    uint64_t v3 = vars8;
  }
  return swift_retain();
}

uint64_t sub_1000340C8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    char v14 = a3 & 1;
    return sub_100033FD0(a1, a2, v14);
  }
  else
  {
    sub_100033FD0(a1, a2, a3 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_100034138()
{
  unint64_t result = qword_1000F8740;
  if (!qword_1000F8740)
  {
    sub_100009F40(&qword_1000F8730);
    sub_1000341B4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8740);
  }
  return result;
}

unint64_t sub_1000341B4()
{
  unint64_t result = qword_1000F8748;
  if (!qword_1000F8748)
  {
    sub_100009F40(&qword_1000F8750);
    sub_100012908(&qword_1000F7C50, &qword_1000F7C58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8748);
  }
  return result;
}

uint64_t sub_100034254(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

unint64_t sub_10003426C()
{
  unint64_t result = qword_1000F8760;
  if (!qword_1000F8760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8760);
  }
  return result;
}

unint64_t sub_1000342C0()
{
  unint64_t result = qword_1000F8788;
  if (!qword_1000F8788)
  {
    sub_100009F40(&qword_1000F8708);
    sub_10003433C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8788);
  }
  return result;
}

unint64_t sub_10003433C()
{
  unint64_t result = qword_1000F8790;
  if (!qword_1000F8790)
  {
    sub_100009F40(&qword_1000F8700);
    sub_100012908(&qword_1000F8798, &qword_1000F86F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8790);
  }
  return result;
}

unsigned char *sub_1000343DC@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1000352C0(a1, a2);
}

void *sub_1000343F4@<X0>(unsigned char *a1@<X8>)
{
  return sub_100035330(a1);
}

double sub_100034414(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 255;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 241) = 0u;
  return result;
}

uint64_t sub_100034458@<X0>(unsigned char *a1@<X8>)
{
  return sub_100025B5C(a1);
}

uint64_t sub_100034480()
{
  return sub_100025BD8();
}

uint64_t sub_1000344A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13 != -1) {
    return sub_1000344D8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13 & 1);
  }
  return result;
}

uint64_t sub_1000344D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  swift_retain();
  if ((a13 & 1) == 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
  }

  return swift_retain();
}

uint64_t sub_100034544(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v5 = *(unsigned char *)(a1 + 256);
  long long v4 = *(_OWORD *)(a1 + 208);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v4,
    *((void *)&v4 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5);
  return a1;
}

uint64_t sub_1000345D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a13 != -1) {
    return sub_100034600(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13 & 1);
  }
  return result;
}

uint64_t sub_100034600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  swift_release();
  uint64_t result = swift_release();
  if ((a13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_100034670()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000346A8()
{
  return sub_100033A14();
}

uint64_t sub_1000346B0@<X0>(unsigned char *a1@<X8>)
{
  return sub_100025B5C(a1);
}

uint64_t sub_1000346D8()
{
  return sub_100025BD8();
}

uint64_t sub_100034700(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 96);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), v4);
  return a1;
}

unint64_t sub_100034764()
{
  unint64_t result = qword_1000F8818;
  if (!qword_1000F8818)
  {
    sub_100009F40(&qword_1000F87B8);
    sub_100012908(&qword_1000F8820, &qword_1000F87B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8818);
  }
  return result;
}

unint64_t sub_100034804()
{
  unint64_t result = qword_1000F8830;
  if (!qword_1000F8830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8830);
  }
  return result;
}

unint64_t sub_10003485C()
{
  unint64_t result = qword_1000F8890;
  if (!qword_1000F8890)
  {
    sub_100009F40(&qword_1000F8690);
    sub_1000348D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8890);
  }
  return result;
}

unint64_t sub_1000348D8()
{
  unint64_t result = qword_1000F8898;
  if (!qword_1000F8898)
  {
    sub_100009F40(&qword_1000F8688);
    sub_100035128(&qword_1000F86B0, &qword_1000F86A8, (void (*)(void))sub_100033D00);
    sub_100033D00();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8898);
  }
  return result;
}

uint64_t sub_100034978(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  sub_10000F7F8(v2);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1000349DC(uint64_t result)
{
  *(unsigned char *)(result + 440) = 1;
  return result;
}

uint64_t sub_1000349E8(uint64_t a1)
{
  uint64_t v16 = *(void *)(a1 + 168);
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v3 = *(void *)(a1 + 184);
  uint64_t v4 = *(void *)(a1 + 192);
  uint64_t v5 = *(void *)(a1 + 200);
  uint64_t v6 = *(void *)(a1 + 208);
  uint64_t v7 = *(void *)(a1 + 216);
  uint64_t v8 = *(void *)(a1 + 224);
  long long v15 = *(_OWORD *)(a1 + 232);
  long long v13 = *(_OWORD *)(a1 + 264);
  long long v14 = *(_OWORD *)(a1 + 248);
  long long v12 = *(_OWORD *)(a1 + 280);
  uint64_t v9 = *(void *)(a1 + 296);
  char v10 = *(unsigned char *)(a1 + 304);
  sub_100034B00(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(unsigned char *)(a1 + 160));
  sub_100034B00(v16, v2, v3, v4, v5, v6, v7, v8, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t sub_100034B00(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_1000298F0(a1, a2, a3 & 1);
  if ((a18 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_bridgeObjectRetain();

  return swift_retain();
}

unint64_t sub_100034B84()
{
  unint64_t result = qword_1000F88D0;
  if (!qword_1000F88D0)
  {
    sub_100009F40(&qword_1000F88C0);
    sub_100012908(&qword_1000F88D8, &qword_1000F88E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F88D0);
  }
  return result;
}

uint64_t sub_100034C24(uint64_t result)
{
  *(unsigned char *)(result + 440) = 0;
  return result;
}

uint64_t sub_100034C2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100034C88(uint64_t result)
{
  *(unsigned char *)(result + 136) = 1;
  return result;
}

uint64_t sub_100034C94(uint64_t a1)
{
  return a1;
}

uint64_t sub_100034CC8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100034CF4(uint64_t a1)
{
  return a1;
}

unint64_t sub_100034D20()
{
  unint64_t result = qword_1000F8908;
  if (!qword_1000F8908)
  {
    sub_100009F40(&qword_1000F88F8);
    sub_100012908(&qword_1000F8910, &qword_1000F8918);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8908);
  }
  return result;
}

uint64_t sub_100034DC0(uint64_t result)
{
  *(unsigned char *)(result + 136) = 0;
  return result;
}

unint64_t sub_100034DC8()
{
  unint64_t result = qword_1000F8940;
  if (!qword_1000F8940)
  {
    sub_100009F40(&qword_1000F8920);
    sub_100034E44();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8940);
  }
  return result;
}

unint64_t sub_100034E44()
{
  unint64_t result = qword_1000F8948;
  if (!qword_1000F8948)
  {
    sub_100009F40(&qword_1000F8950);
    sub_100035278(&qword_1000F8958, (void (*)(uint64_t))type metadata accessor for ActivityIconView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8948);
  }
  return result;
}

unint64_t sub_100034EF0()
{
  unint64_t result = qword_1000F8980;
  if (!qword_1000F8980)
  {
    sub_100009F40(&qword_1000F8960);
    sub_100034F6C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8980);
  }
  return result;
}

unint64_t sub_100034F6C()
{
  unint64_t result = qword_1000F8988;
  if (!qword_1000F8988)
  {
    sub_100009F40(&qword_1000F8990);
    sub_10003500C();
    sub_100012908(&qword_1000F89C8, &qword_1000F89D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8988);
  }
  return result;
}

unint64_t sub_10003500C()
{
  unint64_t result = qword_1000F8998;
  if (!qword_1000F8998)
  {
    sub_100009F40(&qword_1000F89A0);
    sub_100035088();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8998);
  }
  return result;
}

unint64_t sub_100035088()
{
  unint64_t result = qword_1000F89A8;
  if (!qword_1000F89A8)
  {
    sub_100009F40(&qword_1000F89B0);
    sub_100012908(&qword_1000F89B8, &qword_1000F89C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F89A8);
  }
  return result;
}

uint64_t sub_100035128(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009F40(a2);
    a3();
    sub_100012908(&qword_1000F86D8, &qword_1000F86E0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000351CC()
{
  unint64_t result = qword_1000F89F8;
  if (!qword_1000F89F8)
  {
    sub_100009F40(&qword_1000F89D8);
    sub_100035278(&qword_1000F6AC8, (void (*)(uint64_t))type metadata accessor for MovieView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F89F8);
  }
  return result;
}

uint64_t sub_100035278(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *sub_1000352C0@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_100035330@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_100035374(uint64_t a1)
{
  return a1;
}

void destroy for MediaTransferStatus(void **a1)
{
  uint64_t v1 = *a1;
  int v2 = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF) {
    int v2 = (int)v1;
  }
  if (v2 - 1 < 0) {
}
  }

void *_s13PCViewService19MediaTransferStatusOwCP_0(void *a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  LODWORD(v4) = -1;
  if (*(void *)a2 < 0xFFFFFFFFuLL) {
    BOOL v4 = *(void **)a2;
  }
  if ((int)v4 - 1 < 0)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *a1 = v3;
    a1[1] = v5;
    id v6 = v3;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

uint64_t assignWithCopy for MediaTransferStatus(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void **)a1;
  LODWORD(v5) = -1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v6) = -1;
  }
  else {
    id v6 = *(void **)a1;
  }
  int v7 = v6 - 1;
  uint64_t v8 = *(void **)a2;
  if (*(void *)a2 < 0xFFFFFFFFuLL) {
    uint64_t v5 = *(void **)a2;
  }
  int v9 = v5 - 1;
  if (v7 < 0)
  {
    if (v9 < 0)
    {
      *(void *)a1 = v8;
      id v12 = v8;

      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      return a1;
    }

    goto LABEL_11;
  }
  if ((v9 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = v8;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  id v10 = v8;
  return a1;
}

uint64_t assignWithTake for MediaTransferStatus(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = *(void **)a1;
  LODWORD(v5) = -1;
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    uint64_t v5 = *(void **)a1;
  }
  if ((int)v5 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if ((unint64_t)*a2 < 0xFFFFFFFF) {
      uint64_t v6 = *a2;
    }
    if ((int)v6 - 1 < 0)
    {
      *(void *)a1 = *a2;

      *(void *)(a1 + 8) = a2[1];
      return a1;
    }
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaTransferStatus(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  if ((v4 + 1) >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MediaTransferStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100035604(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void *sub_100035628(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    uint64_t v2 = a2 - 0x7FFFFFFF;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = a2;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MediaTransferStatus()
{
  return &type metadata for MediaTransferStatus;
}

void sub_100035664(void *a1, void *a2, void *a3)
{
  uint64_t v28 = a2;
  uint64_t v27 = a3;
  uint64_t v4 = sub_100008614(&qword_1000F8A68);
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v26 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v24 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008614(&qword_1000F8A70);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100008614(&qword_1000F8A78);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_100036560();
  uint64_t v17 = v28;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v17 == (void *)1)
  {
    LOBYTE(v31) = 0;
    sub_10003665C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  else
  {
    uint64_t v23 = v13;
    LOBYTE(v31) = 1;
    sub_1000365B4();
    id v18 = v17;
    uint64_t v19 = v24;
    uint64_t v20 = v12;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v31 = v17;
    char v30 = 0;
    sub_1000366B0();
    uint64_t v21 = v26;
    uint64_t v22 = v29;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v22)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v21);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v20);
      sub_10001CB40(v17);
    }
    else
    {
      uint64_t v29 = v20;
      uint64_t v31 = v27;
      char v30 = 1;
      type metadata accessor for PCInteractionDirection(0);
      sub_100036704(&qword_1000F8A88);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      sub_10001CB40(v17);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v21);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v29);
    }
  }
}

uint64_t sub_100035A44()
{
  if (*v0) {
    return 0x726566736E617274;
  }
  else {
    return 0x736E617254746F6ELL;
  }
}

uint64_t sub_100035A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100035DFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100035ABC(uint64_t a1)
{
  unint64_t v2 = sub_100036560();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100035AF8(uint64_t a1)
{
  unint64_t v2 = sub_100036560();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100035B34()
{
  return 0;
}

uint64_t sub_100035B40@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void sub_100035B70(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100035B7C(uint64_t a1)
{
  unint64_t v2 = sub_10003665C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100035BB8(uint64_t a1)
{
  unint64_t v2 = sub_10003665C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100035BF4()
{
  if (*v0) {
    return 0x6F69746365726964;
  }
  else {
    return 12383;
  }
}

uint64_t sub_100035C28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100035F2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100035C50(uint64_t a1)
{
  unint64_t v2 = sub_1000365B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100035C8C(uint64_t a1)
{
  unint64_t v2 = sub_1000365B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100035CC8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100036014(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

void sub_100035CF4(void *a1)
{
  sub_100035664(a1, *v1, v1[1]);
}

BOOL sub_100035D10(uint64_t a1, uint64_t a2)
{
  return sub_100035D24(*(void **)a1, *(void *)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
}

BOOL sub_100035D24(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1 == (void *)1) {
    return a3 == (void *)1;
  }
  if (a3 == (void *)1) {
    return 0;
  }
  if (a1)
  {
    if (!a3) {
      return 0;
    }
    sub_100036748();
    sub_100021250(a3);
    sub_100021250(a1);
    char v9 = static NSObject.== infix(_:_:)();
    sub_10001CB40(a3);
    sub_10001CB40(a1);
    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    sub_10001CB40(0);
    if (a3) {
      return 0;
    }
  }
  return a2 == a4;
}

uint64_t sub_100035DFC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736E617254746F6ELL && a2 == 0xEF676E6972726566;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726566736E617274 && a2 == 0xEC000000676E6972)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100035F2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100036014(void *a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F8A20);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v27 = v2;
  uint64_t v28 = v3;
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008614(&qword_1000F8A28);
  uint64_t v29 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100008614(&qword_1000F8A30);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  char v30 = a1;
  sub_10000AEFC(a1, v16);
  sub_100036560();
  uint64_t v17 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v17)
  {
    uint64_t v18 = v29;
    uint64_t v31 = v12;
    uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v19 + 16) == 1)
    {
      if (*(unsigned char *)(v19 + 32))
      {
        LOBYTE(v34) = 1;
        sub_1000365B4();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        LOBYTE(v33) = 0;
        sub_100036608();
        uint64_t v20 = v27;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v24 = v6;
        uint64_t v6 = v34;
        type metadata accessor for PCInteractionDirection(0);
        char v32 = 1;
        sub_100036704(&qword_1000F8A58);
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v25 = v31;
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v24, v20);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v15, v11);
      }
      else
      {
        LOBYTE(v34) = 0;
        sub_10003665C();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v7);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v11);
        uint64_t v6 = 1;
      }
    }
    else
    {
      uint64_t v21 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v6 = v22;
      sub_100008614(&qword_1000F8A40);
      *(void *)uint64_t v6 = &type metadata for MediaTransferStatus;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 104))(v6, enum case for DecodingError.typeMismatch(_:), v21);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v11);
    }
  }
  sub_10000AF94((uint64_t)v30);
  return v6;
}

unint64_t sub_100036560()
{
  unint64_t result = qword_1000F8A38;
  if (!qword_1000F8A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8A38);
  }
  return result;
}

unint64_t sub_1000365B4()
{
  unint64_t result = qword_1000F8A48;
  if (!qword_1000F8A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8A48);
  }
  return result;
}

unint64_t sub_100036608()
{
  unint64_t result = qword_1000F8A50;
  if (!qword_1000F8A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8A50);
  }
  return result;
}

unint64_t sub_10003665C()
{
  unint64_t result = qword_1000F8A60;
  if (!qword_1000F8A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8A60);
  }
  return result;
}

unint64_t sub_1000366B0()
{
  unint64_t result = qword_1000F8A80;
  if (!qword_1000F8A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8A80);
  }
  return result;
}

uint64_t sub_100036704(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PCInteractionDirection(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100036748()
{
  unint64_t result = qword_1000F8A90;
  if (!qword_1000F8A90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000F8A90);
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaTransferStatus.CodingKeys()
{
  return &type metadata for MediaTransferStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for MediaTransferStatus.NotTransferringCodingKeys()
{
  return &type metadata for MediaTransferStatus.NotTransferringCodingKeys;
}

unsigned char *_s13PCViewService19MediaTransferStatusO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100036878);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MediaTransferStatus.TransferringCodingKeys()
{
  return &type metadata for MediaTransferStatus.TransferringCodingKeys;
}

unint64_t sub_1000368B4()
{
  unint64_t result = qword_1000F8A98;
  if (!qword_1000F8A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8A98);
  }
  return result;
}

unint64_t sub_10003690C()
{
  unint64_t result = qword_1000F8AA0;
  if (!qword_1000F8AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8AA0);
  }
  return result;
}

unint64_t sub_100036964()
{
  unint64_t result = qword_1000F8AA8;
  if (!qword_1000F8AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8AA8);
  }
  return result;
}

unint64_t sub_1000369BC()
{
  unint64_t result = qword_1000F8AB0;
  if (!qword_1000F8AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8AB0);
  }
  return result;
}

unint64_t sub_100036A14()
{
  unint64_t result = qword_1000F8AB8;
  if (!qword_1000F8AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8AB8);
  }
  return result;
}

unint64_t sub_100036A6C()
{
  unint64_t result = qword_1000F8AC0;
  if (!qword_1000F8AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8AC0);
  }
  return result;
}

unint64_t sub_100036AC4()
{
  unint64_t result = qword_1000F8AC8;
  if (!qword_1000F8AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8AC8);
  }
  return result;
}

unint64_t sub_100036B1C()
{
  unint64_t result = qword_1000F8AD0;
  if (!qword_1000F8AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8AD0);
  }
  return result;
}

id sub_100036C44()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return [super dealloc];
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v5 = (objc_class *)type metadata accessor for AppDelegate();
  unsigned int v6 = NSStringFromClass(v5);
  UIApplicationMain(argc, (char **)argv, 0, v6);

  return 0;
}

uint64_t type metadata accessor for AppDelegate()
{
  return self;
}

uint64_t sub_100036CF8()
{
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_100008614((uint64_t *)&unk_1000F8B70);
  v0._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  id v1 = sub_10006EFE0();
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v1 ulog:40 message:v2];
  swift_bridgeObjectRelease();

  return 1;
}

unint64_t sub_100036DF0()
{
  unint64_t result = qword_1000F6850;
  if (!qword_1000F6850)
  {
    type metadata accessor for LaunchOptionsKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6850);
  }
  return result;
}

uint64_t *sub_100036E48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(int *)(v4 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t sub_100036F38(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
  uint64_t v3 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

void *sub_100036FB4(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_100037058(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

void *sub_1000370F0(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100037178(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
  int v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_100037208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003721C);
}

uint64_t sub_10003721C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100037288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003729C);
}

uint64_t sub_10003729C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for NearbySharingInteractionViewServiceContext()
{
  uint64_t result = qword_1000F8BD8;
  if (!qword_1000F8BD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100037358()
{
  uint64_t result = type metadata accessor for NearbySharingInteractionDisplayContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000373E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  __chkstk_darwin(v4, v5);
  uint64_t v18 = (uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008614(&qword_1000F8C18);
  uint64_t v17 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NearbySharingInteractionViewServiceContext();
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10003791C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_1000379D8(&qword_1000F8C28, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionDisplayContext);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v7);
    sub_100037970(v18, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
    sub_100037970((uint64_t)v14, v16, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionViewServiceContext);
  }
  return sub_10000AF94((uint64_t)a1);
}

unint64_t sub_10003764C()
{
  return 0xD00000000000002DLL;
}

uint64_t sub_100037668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100037BFC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100037694(uint64_t a1)
{
  unint64_t v2 = sub_10003791C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000376D0(uint64_t a1)
{
  unint64_t v2 = sub_10003791C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003770C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000373E4(a1, a2);
}

uint64_t sub_100037724(void *a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F8C30);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10003791C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for NearbySharingInteractionDisplayContext();
  sub_1000379D8(&qword_1000F8C38, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionDisplayContext);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_100037898(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000379D8(&qword_1000F7030, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewServiceContext);
  uint64_t result = sub_1000379D8(&qword_1000F8C10, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewServiceContext);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10003791C()
{
  unint64_t result = qword_1000F8C20;
  if (!qword_1000F8C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8C20);
  }
  return result;
}

uint64_t sub_100037970(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000379D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NearbySharingInteractionViewServiceContext.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100037ABCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewServiceContext.CodingKeys()
{
  return &type metadata for NearbySharingInteractionViewServiceContext.CodingKeys;
}

unint64_t sub_100037AF8()
{
  unint64_t result = qword_1000F8C40;
  if (!qword_1000F8C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8C40);
  }
  return result;
}

unint64_t sub_100037B50()
{
  unint64_t result = qword_1000F8C48;
  if (!qword_1000F8C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8C48);
  }
  return result;
}

unint64_t sub_100037BA8()
{
  unint64_t result = qword_1000F8C50;
  if (!qword_1000F8C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8C50);
  }
  return result;
}

uint64_t sub_100037BFC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000002DLL && a2 == 0x80000001000BEA10)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

_UNKNOWN **static UIBlurEffectStyle.allCases.getter()
{
  return &off_1000E2DF8;
}

unint64_t UIBlurEffectStyle.description.getter(uint64_t a1)
{
  unint64_t result = 0x67694C6172747865;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0x746867696CLL;
      break;
    case 2:
      unint64_t result = 1802658148;
      break;
    case 3:
      unint64_t result = 0x7261446172747865;
      break;
    case 4:
      unint64_t result = 0x72616C75676572;
      break;
    case 5:
      unint64_t result = 0x6E656E696D6F7270;
      break;
    case 6:
    case 12:
    case 19:
      unint64_t result = 0xD000000000000017;
      break;
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0x614D6D6574737973;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    case 11:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 13:
      unint64_t result = 0xD000000000000013;
      break;
    case 14:
      unint64_t result = 0xD000000000000018;
      break;
    case 15:
      unint64_t result = 0xD000000000000019;
      break;
    case 16:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 17:
      unint64_t result = 0xD000000000000016;
      break;
    case 18:
      unint64_t result = 0xD000000000000012;
      break;
    case 20:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t result = 0xD000000000000011;
      break;
  }
  return result;
}

unint64_t sub_100037FA4()
{
  unint64_t result = qword_1000F8C58;
  if (!qword_1000F8C58)
  {
    sub_100009F40(&qword_1000F8C60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8C58);
  }
  return result;
}

void sub_100038000(void *a1@<X8>)
{
  *a1 = &off_1000E2DF8;
}

uint64_t sub_100038010()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100038070()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_1000380C0()
{
  return UIBlurEffectStyle.description.getter(*v0);
}

unint64_t sub_1000380C8()
{
  unint64_t result = qword_1000F8C68;
  if (!qword_1000F8C68)
  {
    type metadata accessor for Style(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8C68);
  }
  return result;
}

uint64_t destroy for SchematicHandWithiPhoneView()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for SchematicHandWithiPhoneView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SchematicHandWithiPhoneView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SchematicHandWithiPhoneView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematicHandWithiPhoneView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchematicHandWithiPhoneView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SchematicHandWithiPhoneView()
{
  return &type metadata for SchematicHandWithiPhoneView;
}

uint64_t sub_100038338()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100038354@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v73 = a2;
  Swift::String v3 = (int *)type metadata accessor for CAImage();
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v7 = (uint64_t *)((char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v67 - v9;
  *(void *)&long long v67 = sub_100008614(&qword_1000F8C90);
  __chkstk_darwin(v67, v11);
  uint64_t v72 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_100008614(&qword_1000F8C98);
  __chkstk_darwin(v70, v13);
  uint64_t v71 = (uint64_t)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100008614(&qword_1000F8CA0);
  uint64_t v16 = __chkstk_darwin(v69, v15);
  uint64_t v74 = (uint64_t)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  uint64_t v75 = (uint64_t)&v67 - v19;
  if (qword_1000F66A0 != -1) {
    swift_once();
  }
  if (byte_100111A98) {
    unint64_t v20 = 0x80000001000BEC40;
  }
  else {
    unint64_t v20 = 0x80000001000BEC20;
  }
  double v21 = *a1;
  *(void *)&long long v77 = 0xD000000000000018;
  *((void *)&v77 + 1) = v20;
  double v22 = v21 / 152.0;
  swift_bridgeObjectRetain();
  uint64_t v68 = a1;
  v23._uint64_t countAndFlagsBits = 0x746867696C5FLL;
  v23._object = (void *)0xE600000000000000;
  String.append(_:)(v23);
  long long v24 = v77;
  *(void *)&long long v77 = 0xD000000000000018;
  *((void *)&v77 + 1) = v20;
  swift_bridgeObjectRetain();
  v25._uint64_t countAndFlagsBits = 0x6B7261645FLL;
  v25._object = (void *)0xE500000000000000;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  long long v26 = v77;
  *uint64_t v7 = swift_getKeyPath();
  sub_100008614(&qword_1000F7B40);
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = (char *)v7 + v3[5];
  *(void *)uint64_t v76 = 0;
  *(void *)&v76[8] = 0;
  sub_100008614(&qword_1000F8838);
  State.init(wrappedValue:)();
  uint64_t v28 = v78;
  *(_OWORD *)uint64_t v27 = v77;
  *((void *)v27 + 2) = v28;
  uint64_t v29 = (_OWORD *)((char *)v7 + v3[7]);
  *(_OWORD *)((char *)v7 + v3[6]) = v24;
  *uint64_t v29 = v26;
  sub_100022F64((uint64_t)v7, (uint64_t)v10);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v30 = v72;
  sub_100022EFC((uint64_t)v10, v72);
  uint64_t v31 = (_OWORD *)(v30 + *(int *)(v67 + 36));
  long long v32 = v127;
  *uint64_t v31 = v126;
  v31[1] = v32;
  v31[2] = v128;
  sub_100039328((uint64_t)v10);
  sub_100008614(&qword_1000F8CA8);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1000AF6A0;
  static Color.clear.getter();
  *(void *)(v33 + 32) = Gradient.Stop.init(color:location:)();
  *(void *)(v33 + 40) = v34;
  static Color.red.getter();
  *(void *)(v33 + 48) = Gradient.Stop.init(color:location:)();
  *(void *)(v33 + 56) = v35;
  static UnitPoint.bottom.getter();
  static UnitPoint.top.getter();
  Gradient.init(stops:)();
  LinearGradient.init(gradient:startPoint:endPoint:)();
  uint64_t v36 = v129;
  long long v67 = v130;
  uint64_t v37 = v131;
  uint64_t v38 = v132;
  uint64_t v39 = v71;
  sub_1000210BC(v30, v71, &qword_1000F8C90);
  uint64_t v40 = v39 + *(int *)(v70 + 36);
  *(void *)uint64_t v40 = v36;
  *(_OWORD *)(v40 + 8) = v67;
  *(void *)(v40 + 24) = v37;
  *(void *)(v40 + 32) = v38;
  sub_10000EC04(v30, &qword_1000F8C90);
  uint64_t v41 = v74;
  sub_1000210BC(v39, v74, &qword_1000F8C98);
  uint64_t v42 = v41 + *(int *)(v69 + 36);
  *(double *)uint64_t v42 = v22 * -2.5;
  *(void *)(v42 + 8) = 0;
  sub_10000EC04(v39, &qword_1000F8C98);
  uint64_t v43 = v75;
  sub_100039384(v41, v75);
  uint64_t v44 = static Color.white.getter();
  uint64_t v45 = static Alignment.center.getter();
  *(void *)&long long v67 = v45;
  uint64_t v69 = v46;
  uint64_t v47 = (uint64_t)v68;
  sub_100038D30((uint64_t)v68, v44, (uint64_t)v124);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v48 = v133;
  LOBYTE(v39) = v134;
  char v49 = v136;
  uint64_t v72 = v137;
  uint64_t v70 = v135;
  uint64_t v71 = v138;
  swift_release();
  long long v118 = v124[9];
  long long v119 = v124[10];
  long long v120 = v124[11];
  long long v114 = v124[5];
  long long v115 = v124[6];
  long long v116 = v124[7];
  long long v117 = v124[8];
  long long v110 = v124[1];
  long long v111 = v124[2];
  long long v112 = v124[3];
  long long v113 = v124[4];
  char v123 = v39;
  char v122 = v49;
  char v50 = *(unsigned char *)(v47 + 24);
  uint64_t v121 = v125;
  long long v109 = v124[0];
  if (v50) {
    double v51 = 0.0;
  }
  else {
    double v51 = 10.0;
  }
  if (v50) {
    double v52 = v22;
  }
  else {
    double v52 = 0.0;
  }
  char v53 = v49;
  char v54 = v123;
  static UnitPoint.center.getter();
  uint64_t v56 = v55;
  uint64_t v58 = v57;
  sub_1000210BC(v43, v41, &qword_1000F8CA0);
  uint64_t v59 = v73;
  sub_1000210BC(v41, v73, &qword_1000F8CA0);
  uint64_t v60 = (void *)(v59 + *(int *)(sub_100008614(&qword_1000F8CB0) + 48));
  uint64_t v61 = v69;
  *(void *)uint64_t v76 = v45;
  *(void *)&v76[8] = v69;
  *(_OWORD *)&v76[176] = v119;
  *(_OWORD *)&v76[192] = v120;
  *(_OWORD *)&v76[112] = v115;
  *(_OWORD *)&v76[128] = v116;
  *(_OWORD *)&v76[160] = v118;
  *(_OWORD *)&v76[144] = v117;
  *(_OWORD *)&v76[48] = v111;
  *(_OWORD *)&v76[64] = v112;
  *(_OWORD *)&v76[96] = v114;
  *(_OWORD *)&v76[80] = v113;
  *(_OWORD *)&v76[32] = v110;
  *(_OWORD *)&v76[16] = v109;
  *(void *)&v76[208] = v121;
  *(void *)&v76[216] = v48;
  uint64_t v62 = v48;
  v76[224] = v54;
  *(_DWORD *)&v76[225] = *(_DWORD *)v108;
  *(_DWORD *)&v76[228] = *(_DWORD *)&v108[3];
  uint64_t v63 = v70;
  uint64_t v64 = v71;
  *(void *)&v76[232] = v70;
  v76[240] = v53;
  *(_DWORD *)&v76[241] = *(_DWORD *)v107;
  *(_DWORD *)&v76[244] = *(_DWORD *)&v107[3];
  uint64_t v65 = v72;
  *(void *)&v76[248] = v72;
  *(void *)&v76[256] = v71;
  *(double *)&v76[264] = v51;
  v76[272] = 0;
  *(double *)&v76[280] = v52;
  *(double *)&v76[288] = v52;
  *(void *)&v76[296] = v56;
  *(void *)&v76[304] = v58;
  *(void *)&v76[312] = 0;
  *(double *)&v76[320] = v22 * -70.0;
  memcpy(v60, v76, 0x148uLL);
  sub_1000393EC((uint64_t)v76);
  sub_10000EC04(v75, &qword_1000F8CA0);
  *(void *)&long long v77 = v67;
  *((void *)&v77 + 1) = v61;
  long long v88 = v119;
  long long v89 = v120;
  long long v84 = v115;
  long long v85 = v116;
  long long v86 = v117;
  long long v87 = v118;
  long long v80 = v111;
  long long v81 = v112;
  long long v82 = v113;
  long long v83 = v114;
  long long v78 = v109;
  long long v79 = v110;
  uint64_t v90 = v121;
  uint64_t v91 = v62;
  char v92 = v54;
  *(_DWORD *)long long v93 = *(_DWORD *)v108;
  *(_DWORD *)&v93[3] = *(_DWORD *)&v108[3];
  uint64_t v94 = v63;
  char v95 = v53;
  *(_DWORD *)long long v96 = *(_DWORD *)v107;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v107[3];
  uint64_t v97 = v65;
  uint64_t v98 = v64;
  double v99 = v51;
  char v100 = 0;
  double v101 = v52;
  double v102 = v52;
  uint64_t v103 = v56;
  uint64_t v104 = v58;
  uint64_t v105 = 0;
  double v106 = v22 * -70.0;
  sub_100039470((uint64_t)&v77);
  return sub_10000EC04(v41, &qword_1000F8CA0);
}

unsigned char *sub_100038B80(unsigned char *result)
{
  if (*result == 1)
  {
    if (qword_1000F6680 != -1) {
      swift_once();
    }
    id v1 = *(id *)(qword_100111A10 + 272);
    char v2 = sub_10002DE94();

    if (v2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
      unint64_t result = (unsigned char *)swift_bridgeObjectRelease();
      if ((v3 & 1) == 0) {
        return result;
      }
    }
    sub_100008614(&qword_1000F8C88);
    State.wrappedValue.setter();
    id v4 = *(id *)(qword_100111A10 + 144);
    sub_10002E418();

    static Animation.linear(duration:)();
    Animation.delay(_:)();
    uint64_t v5 = swift_release();
    __chkstk_darwin(v5, v6);
    withAnimation<A>(_:_:)();
    return (unsigned char *)swift_release();
  }
  return result;
}

uint64_t sub_100038D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100008614(&qword_1000F8CB8);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&KeyPath - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v83 = *(_OWORD *)(a1 + 32);
  sub_100008614(&qword_1000F8C88);
  State.wrappedValue.getter();
  double v10 = *(float *)&v73;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v11 = v55;
  unsigned int v12 = v56;
  unsigned int v13 = v57;
  unsigned int v46 = v56;
  uint64_t v14 = v58;
  uint64_t v53 = v59;
  uint64_t v15 = v60;
  swift_retain();
  uint64_t v16 = static Alignment.center.getter();
  uint64_t v51 = v17;
  uint64_t v52 = v16;
  static UnitPoint.center.getter();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v22 = v63;
  uint64_t v45 = v63;
  uint64_t v50 = v65;
  uint64_t v48 = v61;
  uint64_t v49 = v66;
  char v70 = v62;
  unsigned __int8 v68 = v64;
  uint64_t v54 = Image.init(systemName:)();
  static Font.Weight.bold.getter();
  uint64_t v23 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v9, 1, 1, v23);
  uint64_t v47 = static Font.system(size:weight:design:)();
  sub_10000EC04((uint64_t)v9, &qword_1000F8CB8);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v24 = swift_getKeyPath();
  LOBYTE(a1) = v70;
  int v44 = v68;
  *(void *)&long long v73 = 0;
  *((double *)&v73 + 1) = v10;
  *(void *)&long long v74 = v11;
  *((void *)&v74 + 1) = __PAIR64__(v13, v12);
  unsigned int v25 = v13;
  *(void *)&long long v75 = v14;
  uint64_t v27 = v52;
  uint64_t v26 = v53;
  *((void *)&v75 + 1) = v53;
  *(void *)&long long v76 = v15;
  uint64_t v28 = a2;
  *((void *)&v76 + 1) = a2;
  LOWORD(v77) = 256;
  *(_DWORD *)((char *)&v77 + 2) = v71;
  WORD3(v77) = v72;
  uint64_t v29 = v51;
  *((void *)&v77 + 1) = v52;
  *(void *)&long long v78 = v51;
  *((void *)&v78 + 1) = 0xBFF921FB54442D18;
  *(void *)&long long v79 = v19;
  *((void *)&v79 + 1) = v21;
  uint64_t v31 = v48;
  uint64_t v30 = v49;
  *(void *)&long long v80 = v48;
  BYTE8(v80) = v70;
  *(_DWORD *)((char *)&v80 + 9) = *(_DWORD *)v69;
  HIDWORD(v80) = *(_DWORD *)&v69[3];
  *(void *)&long long v81 = v22;
  BYTE8(v81) = v68;
  *(_DWORD *)((char *)&v81 + 9) = *(_DWORD *)v67;
  HIDWORD(v81) = *(_DWORD *)&v67[3];
  uint64_t v32 = v50;
  *(void *)&long long v82 = v50;
  *((void *)&v82 + 1) = v49;
  long long v33 = v74;
  *(_OWORD *)a3 = v73;
  *(_OWORD *)(a3 + 16) = v33;
  long long v34 = v75;
  long long v35 = v76;
  long long v36 = v78;
  *(_OWORD *)(a3 + 64) = v77;
  *(_OWORD *)(a3 + 80) = v36;
  *(_OWORD *)(a3 + 32) = v34;
  *(_OWORD *)(a3 + 48) = v35;
  long long v37 = v79;
  long long v38 = v80;
  long long v39 = v82;
  *(_OWORD *)(a3 + 128) = v81;
  *(_OWORD *)(a3 + 144) = v39;
  *(_OWORD *)(a3 + 96) = v37;
  *(_OWORD *)(a3 + 112) = v38;
  uint64_t v40 = KeyPath;
  *(void *)(a3 + 160) = v54;
  *(void *)(a3 + 168) = v40;
  *(void *)(a3 + 176) = v47;
  *(void *)(a3 + 184) = v24;
  *(void *)(a3 + 192) = v28;
  uint64_t v41 = v28;
  swift_retain();
  sub_1000395AC((uint64_t)&v73);
  *(void *)&long long v83 = 0;
  *((double *)&v83 + 1) = v10;
  uint64_t v84 = v11;
  unsigned int v85 = v46;
  unsigned int v86 = v25;
  uint64_t v87 = v14;
  uint64_t v88 = v26;
  uint64_t v89 = v15;
  uint64_t v90 = v41;
  __int16 v91 = 256;
  int v92 = v71;
  __int16 v93 = v72;
  uint64_t v94 = v27;
  uint64_t v95 = v29;
  unint64_t v96 = 0xBFF921FB54442D18;
  uint64_t v97 = v19;
  uint64_t v98 = v21;
  uint64_t v99 = v31;
  char v100 = a1;
  *(_DWORD *)&v101[3] = *(_DWORD *)&v69[3];
  *(_DWORD *)double v101 = *(_DWORD *)v69;
  uint64_t v102 = v45;
  char v103 = v44;
  *(_DWORD *)uint64_t v104 = *(_DWORD *)v67;
  *(_DWORD *)&v104[3] = *(_DWORD *)&v67[3];
  uint64_t v105 = v32;
  uint64_t v106 = v30;
  return sub_1000395E4((uint64_t)&v83);
}

uint64_t sub_10003910C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100008614(&qword_1000F8C70);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (uint64_t *)&v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v7 = v1[1];
  *(_OWORD *)uint64_t v15 = *v1;
  *(_OWORD *)&v15[16] = v7;
  long long v16 = v1[2];
  *uint64_t v6 = static Alignment.center.getter();
  v6[1] = v8;
  uint64_t v9 = sub_100008614(&qword_1000F8C78);
  sub_100038354((double *)v15, (uint64_t)v6 + *(int *)(v9 + 44));
  char v10 = v15[24];
  long long v17 = *(_OWORD *)&v15[8];
  long long v18 = v16;
  uint64_t v11 = (_OWORD *)swift_allocObject();
  long long v12 = *(_OWORD *)&v15[16];
  v11[1] = *(_OWORD *)v15;
  v11[2] = v12;
  v11[3] = v16;
  sub_1000210BC((uint64_t)v6, a1, &qword_1000F8C70);
  uint64_t v13 = a1 + *(int *)(sub_100008614(&qword_1000F8C80) + 36);
  *(unsigned char *)uint64_t v13 = v10;
  *(void *)(v13 + 8) = sub_100039294;
  *(void *)(v13 + 16) = v11;
  sub_10003929C((uint64_t)&v17);
  sub_100026018((uint64_t)&v18);
  return sub_10000EC04((uint64_t)v6, &qword_1000F8C70);
}

uint64_t sub_100039254()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

unsigned char *sub_100039294(unsigned char *result)
{
  return sub_100038B80(result);
}

uint64_t sub_10003929C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000392C8()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100039328(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CAImage();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100039384(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008614(&qword_1000F8CA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000393EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100039470(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000394FC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100039528@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100039554()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_100039580()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_1000395AC(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000395E4(uint64_t a1)
{
  return a1;
}

unint64_t sub_100039620()
{
  unint64_t result = qword_1000F8CC0;
  if (!qword_1000F8CC0)
  {
    sub_100009F40(&qword_1000F8C80);
    sub_100012908(&qword_1000F8CC8, &qword_1000F8C70);
    sub_100012908(&qword_1000F8CD0, &qword_1000F8CD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8CC0);
  }
  return result;
}

uint64_t static CAMediaTimingFunctionName.allCases.getter()
{
  sub_100008614(&qword_1000F8CE0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1000B0120;
  *(void *)(v0 + 32) = kCAMediaTimingFunctionDefault;
  *(void *)(v0 + 40) = kCAMediaTimingFunctionEaseIn;
  *(void *)(v0 + 48) = kCAMediaTimingFunctionEaseInEaseOut;
  *(void *)(v0 + 56) = kCAMediaTimingFunctionEaseOut;
  *(void *)(v0 + 64) = kCAMediaTimingFunctionLinear;
  id v1 = kCAMediaTimingFunctionDefault;
  uint64_t v2 = kCAMediaTimingFunctionEaseIn;
  uint64_t v3 = kCAMediaTimingFunctionEaseInEaseOut;
  uint64_t v4 = kCAMediaTimingFunctionEaseOut;
  uint64_t v5 = kCAMediaTimingFunctionLinear;
  return v0;
}

uint64_t sub_100039798()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000397F8()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_100039848()
{
  unint64_t result = qword_1000F67C8;
  if (!qword_1000F67C8)
  {
    type metadata accessor for CAMediaTimingFunctionName(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F67C8);
  }
  return result;
}

id sub_1000398A0()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for VariableBlurView());

  return [v0 init];
}

void sub_1000398D4(uint64_t a1)
{
  *(void *)(a1 + OBJC_IVAR____TtC13PCViewService16VariableBlurView_blurRadius) = *v1;
  sub_100039C58();
}

uint64_t sub_100039908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003A0A4();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10003996C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10003A0A4();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000399D0()
{
}

char *sub_1000399F8()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService16VariableBlurView_backdropLayer;
  id v2 = objc_allocWithZone((Class)CABackdropLayer);
  uint64_t v3 = v0;
  *(void *)&v0[v1] = [v2 init];
  *(void *)&v3[OBJC_IVAR____TtC13PCViewService16VariableBlurView_blurRadius] = 0;

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for VariableBlurView();
  uint64_t v4 = (char *)objc_msgSendSuper2(&v8, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  id v5 = [v4 layer];
  unint64_t v6 = *(void **)&v4[OBJC_IVAR____TtC13PCViewService16VariableBlurView_backdropLayer];
  [v5 addSublayer:v6];

  [v4 bounds];
  [v6 setFrame:];
  sub_100039C58();

  return v4;
}

id sub_100039B24(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC13PCViewService16VariableBlurView_backdropLayer;
  id v4 = objc_allocWithZone((Class)CABackdropLayer);
  id v5 = v1;
  *(void *)&v1[v3] = [v4 init];
  *(void *)&v5[OBJC_IVAR____TtC13PCViewService16VariableBlurView_blurRadius] = 0;

  v12.receiver = v5;
  v12.super_class = (Class)type metadata accessor for VariableBlurView();
  [super initWithCoder:a1];
  id v7 = v6;
  if (v6)
  {
    objc_super v8 = (char *)v6;
    id v9 = [v8 layer];
    char v10 = *(void **)&v8[OBJC_IVAR____TtC13PCViewService16VariableBlurView_backdropLayer];
    [v9 addSublayer:v10];

    [v8 bounds];
    [v10 setFrame:];
    sub_100039C58();
  }
  return v7;
}

void sub_100039C58()
{
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [self imageNamed:v1];

  id v3 = [v2 CGImage];
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v4 = objc_allocWithZone((Class)CAFilter);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithType:v5];

  Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  NSString v8 = String._bridgeToObjectiveC()();
  [v6 setValue:isa forKey:v8];

  id v9 = v3;
  NSString v10 = String._bridgeToObjectiveC()();
  [v6 setValue:v9 forKey:v10];

  Class v11 = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v12 = String._bridgeToObjectiveC()();
  [v6 setValue:v11 forKey:v12];

  uint64_t v13 = *(void **)(v0 + OBJC_IVAR____TtC13PCViewService16VariableBlurView_backdropLayer);
  sub_100008614(&qword_1000F8D20);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1000B01B0;
  *(void *)(v14 + 56) = sub_100039FFC();
  *(void *)(v14 + 32) = v6;
  id v15 = v6;
  Class v16 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v13 setFilters:v16];
}

id sub_100039F94()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VariableBlurView();
  return [super dealloc];
}

uint64_t type metadata accessor for VariableBlurView()
{
  return self;
}

unint64_t sub_100039FFC()
{
  unint64_t result = qword_1000F8D28;
  if (!qword_1000F8D28)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000F8D28);
  }
  return result;
}

ValueMetadata *type metadata accessor for VariableBlur()
{
  return &type metadata for VariableBlur;
}

unint64_t sub_10003A050()
{
  unint64_t result = qword_1000F8D30;
  if (!qword_1000F8D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8D30);
  }
  return result;
}

unint64_t sub_10003A0A4()
{
  unint64_t result = qword_1000F8D38;
  if (!qword_1000F8D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8D38);
  }
  return result;
}

__n128 initializeWithCopy for SimpleSpring(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for SimpleSpring(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SimpleSpring(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 112) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SimpleSpring()
{
  return &type metadata for SimpleSpring;
}

ValueMetadata *type metadata accessor for SpringState()
{
  return &type metadata for SpringState;
}

void **initializeBufferWithCopyOfBuffer for MRNowPlayingPlayerResponseWrapper(void **a1, void **a2)
{
  char v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void destroy for MRNowPlayingPlayerResponseWrapper(id *a1)
{
}

void **assignWithCopy for MRNowPlayingPlayerResponseWrapper(void **a1, void **a2)
{
  char v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void **assignWithTake for MRNowPlayingPlayerResponseWrapper(void **a1, void **a2)
{
  char v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for MRNowPlayingPlayerResponseWrapper()
{
  return &type metadata for MRNowPlayingPlayerResponseWrapper;
}

uint64_t sub_10003A258(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100008614(&qword_1000F8D60);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  NSString v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10003A750();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[1] = a2;
  sub_100008614(&qword_1000F8D50);
  sub_10003A7A4(&qword_1000F8D68);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_10003A3C4()
{
  return 0x6E6F70736552726DLL;
}

uint64_t sub_10003A3E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6F70736552726DLL && a2 == 0xEA00000000006573)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10003A484(uint64_t a1)
{
  unint64_t v2 = sub_10003A750();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003A4C0(uint64_t a1)
{
  unint64_t v2 = sub_10003A750();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10003A4FC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10003A5BC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10003A528(void *a1)
{
  return sub_10003A258(a1, *v1);
}

uint64_t sub_10003A544(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  char v3 = *a2;
  if (*a1)
  {
    if (v3)
    {
      sub_100036748();
      id v4 = v3;
      id v5 = v2;
      char v6 = static NSObject.== infix(_:_:)();

      if (v6) {
        return 1;
      }
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

void *sub_10003A5BC(void *a1)
{
  uint64_t v3 = sub_100008614(&qword_1000F8D40);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  char v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v8 = sub_10000AEFC(a1, a1[3]);
  sub_10003A750();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000AF94((uint64_t)a1);
  }
  else
  {
    sub_100008614(&qword_1000F8D50);
    sub_10003A7A4(&qword_1000F8D58);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    NSString v8 = (void *)v10[1];
    sub_10000AF94((uint64_t)a1);
  }
  return v8;
}

unint64_t sub_10003A750()
{
  unint64_t result = qword_1000F8D48;
  if (!qword_1000F8D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8D48);
  }
  return result;
}

uint64_t sub_10003A7A4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009F40(&qword_1000F8D50);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MRNowPlayingPlayerResponseWrapper.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10003A888);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MRNowPlayingPlayerResponseWrapper.CodingKeys()
{
  return &type metadata for MRNowPlayingPlayerResponseWrapper.CodingKeys;
}

unint64_t sub_10003A8C4()
{
  unint64_t result = qword_1000F8D70;
  if (!qword_1000F8D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8D70);
  }
  return result;
}

unint64_t sub_10003A91C()
{
  unint64_t result = qword_1000F8D78;
  if (!qword_1000F8D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8D78);
  }
  return result;
}

unint64_t sub_10003A974()
{
  unint64_t result = qword_1000F8D80;
  if (!qword_1000F8D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8D80);
  }
  return result;
}

id sub_10003AA58(void *a1)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 BOOLForKey:v2];

  return v3;
}

void sub_10003AADC(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setBool:a3 forKey:v5];
}

double sub_10003ABB0(void *a1)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 doubleForKey:v2];
  double v4 = v3;

  return v4;
}

void sub_10003AC3C(void *a1, double a2)
{
  id v3 = a1;
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 setDouble:v4 forKey:a2];
}

id sub_10003AD18(void *a1)
{
  id v1 = a1;
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 integerForKey:v2];

  return v3;
}

void sub_10003AD9C(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 setInteger:a3 forKey:v5];
}

uint64_t sub_10003AE1C()
{
  id v1 = sub_10006A850();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  uint64_t v3 = v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_id;
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_10003CB58(v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delegate);

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10003AF34()
{
  return type metadata accessor for XPCConnectionManager();
}

uint64_t type metadata accessor for XPCConnectionManager()
{
  uint64_t result = qword_1000F8DD0;
  if (!qword_1000F8DD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10003AF88()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10003B044()
{
  *(void *)(v1 + 56) = v0;
  return _swift_task_switch(sub_10003B064, 0, 0);
}

uint64_t sub_10003B064()
{
  uint64_t v1 = *(void *)(v0 + 56);
  _StringGuts.grow(_:)(35);
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0xE000000000000000;
  v2._object = (void *)0x80000001000BEFD0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v2);
  double v4 = *(double *)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retryPolicy);
  unint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retryPolicy + 8);
  uint64_t v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retryPolicy + 16);
  *(double *)(v0 + 16) = v4;
  *(void *)(v0 + 24) = v3;
  *(unsigned char *)(v0 + 32) = v5;
  _print_unlocked<A, B>(_:_:)();
  id v6 = sub_10006A850();
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 ulog:60 message:v7];
  swift_bridgeObjectRelease();

  switch(v5)
  {
    case 1:
      uint64_t v9 = *(void *)(v0 + 56);
      goto LABEL_6;
    case 2:
      uint64_t v9 = *(void *)(v0 + 56);
      unint64_t v12 = *(void *)(v9 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retries);
      if ((v12 & 0x8000000000000000) == 0 && v12 >= v3) {
        goto LABEL_10;
      }
LABEL_6:
      uint64_t v10 = OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delayedRetryTask;
      if (*(void *)(v9 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delayedRetryTask))
      {
        char v11 = 1;
        goto LABEL_11;
      }
      *(void *)(v9 + v10) = sub_10003B55C(v4);
      swift_release();
      break;
    case 3:
      if (!(*(void *)&v4 | v3)) {
        goto LABEL_13;
      }
      break;
    default:
      unint64_t v8 = *(void *)(*(void *)(v0 + 56) + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retries);
      if ((v8 & 0x8000000000000000) != 0 || v8 < *(void *)&v4)
      {
LABEL_13:
        sub_10003B388();
      }
      else
      {
LABEL_10:
        char v11 = 2;
LABEL_11:
        sub_10003CB04();
        uint64_t v13 = swift_allocError();
        *uint64_t v14 = v11;
        swift_willThrow();
        _StringGuts.grow(_:)(35);
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0xE000000000000000;
        v15._object = (void *)0x80000001000BF000;
        v15._uint64_t countAndFlagsBits = 0xD000000000000021;
        String.append(_:)(v15);
        *(void *)(v0 + 40) = v13;
        sub_100008614(&qword_1000F7038);
        _print_unlocked<A, B>(_:_:)();
        id v16 = sub_10006A850();
        swift_bridgeObjectRetain();
        NSString v17 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v16 ulog:60 message:v17];

        swift_errorRelease();
        swift_bridgeObjectRelease();
      }
      break;
  }
  long long v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

void sub_10003B388()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  uint64_t v2 = OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retries;
  if (__OFADD__(*(void *)(v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retries), 1))
  {
    __break(1u);
  }
  else
  {
    v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 41;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    id v5 = sub_10006A850();
    swift_bridgeObjectRetain();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 ulog:40 message:v6];

    swift_bridgeObjectRelease();
    *(void *)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delayedRetryTask) = 0;
    swift_release();
    uint64_t v7 = OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx;
    unint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx);
    if (v8)
    {
      id v9 = v8;
      id v10 = sub_10006A850();
      NSString v11 = String._bridgeToObjectiveC()();
      [v10 ulog:40 message:v11];

      [v9 invalidate];
      unint64_t v12 = *(void **)(v1 + v7);
      *(void *)(v1 + v7) = 0;
    }
    uint64_t v13 = *(void *)(v1 + v2);
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (!v14)
    {
      *(void *)(v1 + v2) = v15;
      sub_10003BA44();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_10003B55C(double a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F8F28);
  __chkstk_darwin(v2 - 8, v3);
  id v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  v6._object = (void *)0x80000001000BEF90;
  v6._uint64_t countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v6);
  Double.write<A>(to:)();
  v7._uint64_t countAndFlagsBits = 0x73646E6F63657320;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  id v8 = sub_10006A850();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 ulog:40 message:v9];

  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v5, 1, 1, v10);
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = 0;
  *(double *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = v11;
  return sub_10006546C((uint64_t)v5, (uint64_t)&unk_1000F8F48, v12);
}

uint64_t sub_10003B750(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 48) = a5;
  *(double *)(v5 + 40) = a1;
  return _swift_task_switch(sub_10003B774, 0, 0);
}

uint64_t sub_10003B774(unint64_t a1)
{
  double v2 = *(double *)(v1 + 40) * 1000000000.0;
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v2 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v2 >= 1.84467441e19)
  {
LABEL_9:
    __break(1u);
    return static Task<>.sleep(nanoseconds:)(a1);
  }
  unint64_t v3 = (unint64_t)v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 56) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10003B858;
  a1 = v3;
  return static Task<>.sleep(nanoseconds:)(a1);
}

uint64_t sub_10003B858()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10003B98C, 0, 0);
  }
}

uint64_t sub_10003B98C()
{
  uint64_t v1 = *(void *)(v0 + 64);
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_10003B388();
      swift_release();
    }
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v2();
}

uint64_t sub_10003BA44()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  uint64_t aBlock = (void **)0xD000000000000022;
  unint64_t v38 = 0x80000001000BEEE0;
  uint64_t v2 = OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx;
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx);
  if (v3)
  {
    sub_10003C7F0();
    id v4 = v3;
    uint64_t v5 = String.init<A>(describing:)();
    unint64_t v7 = v6;
  }
  else
  {
    unint64_t v7 = 0xE300000000000000;
    uint64_t v5 = 7104878;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  id v9 = sub_10006A850();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 ulog:40 message:v10];

  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(v1 + v2);
  id v12 = sub_10006A850();
  if (v11)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    [v12 ulog:40 message:v13];

    uint64_t v14 = 0;
LABEL_15:

    return v14;
  }
  NSString v15 = String._bridgeToObjectiveC()();
  [v12 ulog:40 message:v15];

  uint64_t v16 = v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delegate;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v17 = *(void *)(v16 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(ObjectType, v17);
    id v20 = [v19 interruptionHandler];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v21;
      uint64_t v23 = sub_10003CD78;
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v22 = 0;
    }
    uint64_t v24 = (void *)swift_allocObject();
    v24[2] = v1;
    v24[3] = v23;
    v24[4] = v22;
    uint64_t v41 = sub_10003C704;
    uint64_t v42 = v24;
    uint64_t aBlock = _NSConcreteStackBlock;
    unint64_t v38 = 1107296256;
    long long v39 = sub_10003CE34;
    uint64_t v40 = &unk_1000E5430;
    unsigned int v25 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v36 = (uint64_t)v23;
    sub_10000F7F8((uint64_t)v23);
    swift_release();
    [v19 setInterruptionHandler:v25];
    _Block_release(v25);
    id v26 = [v19 invalidationHandler];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v27;
      uint64_t v29 = sub_100012990;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v28 = 0;
    }
    uint64_t v30 = swift_allocObject();
    swift_weakInit();
    uint64_t v31 = (void *)swift_allocObject();
    v31[2] = v30;
    v31[3] = v29;
    v31[4] = v28;
    uint64_t v41 = sub_10003C7AC;
    uint64_t v42 = v31;
    uint64_t aBlock = _NSConcreteStackBlock;
    unint64_t v38 = 1107296256;
    long long v39 = sub_10003CE34;
    uint64_t v40 = &unk_1000E54A8;
    uint64_t v32 = _Block_copy(&aBlock);
    sub_10000F7F8((uint64_t)v29);
    swift_release();
    [v19 setInvalidationHandler:v32];
    _Block_release(v32);
    [v19 activate];
    id v33 = sub_10006A850();
    NSString v34 = String._bridgeToObjectiveC()();
    [v33 ulog:40 message:v34];

    sub_10000F808(v36);
    sub_10000F808((uint64_t)v29);
    swift_unknownObjectRelease();
    NSString v13 = *(NSString *)(v1 + v2);
    *(void *)(v1 + v2) = v19;
    uint64_t v14 = 1;
    goto LABEL_15;
  }
  return 2;
}

__n128 initializeBufferWithCopyOfBuffer for XPCConnectionManager.ReconnectPolicy(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for XPCConnectionManager.ReconnectPolicy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCConnectionManager.ReconnectPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10003BFC0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_10003BFD8(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionManager.ReconnectPolicy()
{
  return &type metadata for XPCConnectionManager.ReconnectPolicy;
}

uint64_t sub_10003C000(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = sub_100008614(&qword_1000F8F28);
  __chkstk_darwin(v3 - 8, v4);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  id v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v8;
  sub_10009A358((uint64_t)v6, (uint64_t)&unk_1000F8F38, (uint64_t)v9);
  uint64_t result = swift_release();
  if (a2) {
    return a2(result);
  }
  return result;
}

uint64_t sub_10003C134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 64) = a4;
  return _swift_task_switch(sub_10003C154, 0, 0);
}

uint64_t sub_10003C154()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v1 = sub_10006A850();
    NSString v2 = String._bridgeToObjectiveC()();
    [v1 ulog:40 message:v2];
    swift_release();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[9] = Strong;
  if (Strong)
  {
    uint64_t v4 = Strong;
    uint64_t v5 = (void *)swift_task_alloc();
    v0[10] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10003C2E8;
    v5[7] = v4;
    return _swift_task_switch(sub_10003B064, 0, 0);
  }
  else
  {
    unint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_10003C2E8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_10003C3F8(uint64_t a1, void (*a2)(void))
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v3 = sub_10006A850();
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 ulog:40 message:v4];
    swift_release();
  }
  if (a2) {
    a2();
  }
}

uint64_t sub_10003C4BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_id;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10003C534()
{
  return 45;
}

unint64_t sub_10003C5FC()
{
  unint64_t result = qword_1000F8F18;
  if (!qword_1000F8F18)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8F18);
  }
  return result;
}

uint64_t sub_10003C664(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t sub_10003C704()
{
  return sub_10003C000(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_10003C710(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10003C720()
{
  return swift_release();
}

uint64_t sub_10003C728()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003C764()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10003C7AC()
{
  sub_10003C3F8(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_10003C7B8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10003C7F0()
{
  unint64_t result = qword_1000F8F20;
  if (!qword_1000F8F20)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000F8F20);
  }
  return result;
}

uint64_t sub_10003C830()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003C870()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10003C91C;
  v3[8] = v2;
  return _swift_task_switch(sub_10003C154, 0, 0);
}

uint64_t sub_10003C91C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10003CA10()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10003CA50()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10003C91C;
  v4[6] = v3;
  v4[5] = v2;
  return _swift_task_switch(sub_10003B774, 0, 0);
}

unint64_t sub_10003CB04()
{
  unint64_t result = qword_1000F8F50;
  if (!qword_1000F8F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8F50);
  }
  return result;
}

uint64_t sub_10003CB58(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCConnectionManager.ManagerError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for XPCConnectionManager.ManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003CCDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionManager.ManagerError()
{
  return &type metadata for XPCConnectionManager.ManagerError;
}

unint64_t sub_10003CD18()
{
  unint64_t result = qword_1000F8F58;
  if (!qword_1000F8F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F8F58);
  }
  return result;
}

uint64_t sub_10003CD7C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10003CE38(uint64_t a1)
{
  unint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_10003CE7C(void *a1, int a2)
{
  int v28 = a2;
  uint64_t v3 = sub_100008614(&qword_1000F9050);
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  __chkstk_darwin(v3, v4);
  unsigned int v25 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100008614(&qword_1000F9058);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  __chkstk_darwin(v6, v7);
  id v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F9060);
  uint64_t v22 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  NSString v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100008614(&qword_1000F9068);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  long long v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10003F0F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v28)
  {
    if (v28 == 1)
    {
      char v30 = 1;
      sub_10003F1A0();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
    }
    else
    {
      char v31 = 2;
      sub_10003F14C();
      uint64_t v19 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v27);
    }
  }
  else
  {
    char v29 = 0;
    sub_10003F1F4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t sub_10003D1E8()
{
  uint64_t v1 = 0x657463656E6E6F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x6164696C61766E69;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6574736575716572;
  }
}

uint64_t sub_10003D24C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10003EA00(a1, a2);
  *a3 = result;
  return result;
}

void sub_10003D274(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10003D280(uint64_t a1)
{
  unint64_t v2 = sub_10003F0F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003D2BC(uint64_t a1)
{
  unint64_t v2 = sub_10003F0F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003D2F8(uint64_t a1)
{
  unint64_t v2 = sub_10003F1A0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003D334(uint64_t a1)
{
  unint64_t v2 = sub_10003F1A0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003D370(uint64_t a1)
{
  unint64_t v2 = sub_10003F14C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003D3AC(uint64_t a1)
{
  unint64_t v2 = sub_10003F14C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003D3E8(uint64_t a1)
{
  unint64_t v2 = sub_10003F1F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003D424(uint64_t a1)
{
  unint64_t v2 = sub_10003F1F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10003D460@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10003EB88(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10003D48C(void *a1)
{
  return sub_10003CE7C(a1, *v1);
}

uint64_t sub_10003D4A8()
{
  return 45;
}

id sub_10003D5A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t aBlock = v0;
  sub_10004DC48(0xD000000000000013, (void *)0x80000001000BF0E0, 0, (uint64_t)v2, (uint64_t)&off_1000E5808);
  uint64_t v3 = *(void **)((char *)v0 + qword_1000F8F68);
  uint64_t v21 = v1;
  if (v3)
  {
    id v4 = v3;
  }
  else
  {
    id v5 = objc_allocWithZone((Class)NSXPCConnection);
    swift_bridgeObjectRetain();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v4 = [v5 initWithMachServiceName:v6 options:0];

    uint64_t v3 = 0;
  }
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v20 = v2[10];
  v7[2] = v20;
  uint64_t v19 = v2[11];
  v7[3] = v19;
  uint64_t v8 = v2[12];
  v7[4] = v8;
  uint64_t v9 = v2[13];
  void v7[5] = v9;
  uint64_t v10 = v2[14];
  v7[6] = v10;
  uint64_t v11 = v2[15];
  v7[7] = v11;
  v7[8] = v2;
  uint64_t v26 = sub_10003E914;
  uint64_t v27 = v7;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_10003CE34;
  unsigned int v25 = &unk_1000E5868;
  uint64_t v12 = _Block_copy(&aBlock);
  id v13 = v3;
  swift_release();
  [v4 setInterruptionHandler:v12];
  _Block_release(v12);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v20;
  v15[3] = v19;
  v15[4] = v8;
  v15[5] = v9;
  v15[6] = v10;
  v15[7] = v11;
  v15[8] = v14;
  v15[9] = v2;
  uint64_t v26 = sub_10003E9EC;
  uint64_t v27 = v15;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v23 = 1107296256;
  uint64_t v24 = sub_10003CE34;
  unsigned int v25 = &unk_1000E58E0;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_release();
  [v4 setInvalidationHandler:v16];
  _Block_release(v16);
  id v17 = [self interfaceWithProtocol:&OBJC_PROTOCOL____TtP13PCViewService15XPCLinkProtocol_];
  if (qword_1000F66A8 != -1) {
    swift_once();
  }
  [v4 _setQueue:qword_100111AB8];
  [v4 setExportedInterface:v17];
  [v4 setExportedObject:v21];
  [v4 setRemoteObjectInterface:v17];

  return v4;
}

uint64_t sub_10003D934(uint64_t a1, uint64_t a2)
{
  sub_10004DA44(0x61766E6920435058, (void *)0xEF6465746164696CLL, 0, a2, (uint64_t)&off_1000E5808);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t *sub_10003D9EC()
{
  uint64_t v1 = v0;
  sub_10004DC48(0x74696E696544, (void *)0xE600000000000000, 0, *v0, (uint64_t)&off_1000E5808);
  uint64_t v2 = (char *)v0 + qword_100111A00;
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10003DB10()
{
  sub_10003D9EC();

  return swift_deallocClassInstance();
}

uint64_t sub_10003DB68(uint64_t a1, unint64_t a2)
{
  unint64_t v21 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[0] = v2;
  sub_10004DC48(0xD000000000000019, (void *)0x80000001000BF180, 0, v4, (uint64_t)&off_1000E5808);
  if (qword_1000F66A8 != -1) {
    swift_once();
  }
  id v13 = (void *)qword_100111AB8;
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = *(_OWORD *)(v4 + 80);
  *(void *)(v15 + 32) = *(void *)(v4 + 96);
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(v4 + 104);
  *(void *)(v15 + 56) = *(void *)(v4 + 120);
  *(void *)(v15 + 64) = v14;
  unint64_t v16 = v21;
  *(void *)(v15 + 72) = a1;
  *(void *)(v15 + 80) = v16;
  aBlock[4] = sub_10003F288;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10003CE34;
  aBlock[3] = &unk_1000E5930;
  id v17 = _Block_copy(aBlock);
  id v18 = v13;
  swift_retain();
  sub_10000E780(a1, v16);
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_10003F2C0((unint64_t *)&qword_1000F6E20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100008614(&qword_1000F6E28);
  sub_10003F308();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v22);
  swift_release();
  return swift_release();
}

uint64_t sub_10003DF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v32 = a4;
  uint64_t v33 = a6;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v12 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v16 = __chkstk_darwin(v14, v15);
  id v18 = (char *)&v29 - v17;
  uint64_t v19 = *(void *)(a5 - 8);
  __chkstk_darwin(v16, v20);
  uint64_t v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v31 = result;
    uint64_t v29 = a7;
    uint64_t v30 = a9;
    uint64_t v24 = a8;
    sub_100063F88();
    (*(void (**)(char *, void, uint64_t, unint64_t))(v19 + 56))(v18, 0, 1, a5);
    (*(void (**)(char *, char *, unint64_t))(v19 + 32))(v22, v18, a5);
    uint64_t v42 = v31;
    uint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v25._object = (void *)0x80000001000BF1C0;
    v25._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v25);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    uint64_t v26 = v36;
    uint64_t v27 = (void *)v37;
    uint64_t v36 = v32;
    unint64_t v37 = a5;
    uint64_t v38 = v33;
    uint64_t v39 = v29;
    uint64_t v40 = v24;
    uint64_t v41 = v30;
    uint64_t v28 = type metadata accessor for XPCLink();
    sub_10004DC48(v26, v27, 0, v28, (uint64_t)&off_1000E5808);
    swift_bridgeObjectRelease();
    PassthroughSubject.send(_:)();
    (*(void (**)(char *, unint64_t))(v19 + 8))(v22, a5);
    return swift_release();
  }
  return result;
}

uint64_t sub_10003E3D0(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10003E664(a1, a2, a3, (void (*)(uint64_t, unint64_t))sub_10003DB68);
}

uint64_t type metadata accessor for XPCLink()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10003E400@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + qword_100111A00;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10003E478()
{
  return sub_10003D4A8();
}

void sub_10003E4A0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx);
  if (v1)
  {
    id v2 = v1;
    id v3 = [v2 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100008614(&qword_1000F9070);
    if (swift_dynamicCast())
    {
      v4.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
      [v8 handleWithSerializedObject:v4.super.isa];

      swift_unknownObjectRelease();
    }
    else
    {
      id v6 = sub_10006A850();
      v4.super.Class isa = (Class)String._bridgeToObjectiveC()();
      [v6 ulog:60 message:v4.super.isa];
    }
  }
  else
  {
    id v5 = sub_10006A850();
    NSString v7 = String._bridgeToObjectiveC()();
    [v5 ulog:60 message:v7];
  }
}

uint64_t sub_10003E664(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t, unint64_t))
{
  id v5 = a3;
  swift_retain();
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  a4(v6, v8);
  sub_10000D6B8(v6, v8);

  return swift_release();
}

ValueMetadata *type metadata accessor for XPCConnectionEvent()
{
  return &type metadata for XPCConnectionEvent;
}

void **assignWithCopy for XPCLinkRole(void **a1, void **a2)
{
  id v3 = *a2;
  NSData v4 = *a1;
  *a1 = *a2;
  id v5 = v3;

  return a1;
}

void **assignWithTake for XPCLinkRole(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for XPCLinkRole(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for XPCLinkRole(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_10003E81C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_10003E834(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for XPCLinkRole()
{
  return &type metadata for XPCLinkRole;
}

unint64_t sub_10003E868()
{
  unint64_t result = qword_1000F9008;
  if (!qword_1000F9008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9008);
  }
  return result;
}

uint64_t sub_10003E8BC()
{
  return sub_10003F2C0((unint64_t *)&qword_1000F8F18, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_10003E904()
{
  return _swift_deallocObject(v0, 72, 7);
}

void sub_10003E914()
{
  sub_10004DD60(60, 0xD000000000000013, (void *)0x80000001000BF100, 0, *(void *)(v0 + 64), (uint64_t)&off_1000E5808);
}

uint64_t sub_10003E964(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10003E974()
{
  return swift_release();
}

uint64_t sub_10003E97C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003E9B4()
{
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10003E9EC()
{
  return sub_10003D934(*(void *)(v0 + 64), *(void *)(v0 + 72));
}

uint64_t sub_10003EA00(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574736575716572 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657463656E6E6F63 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6164696C61766E69 && a2 == 0xEB00000000646574)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10003EB88(void *a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F9010);
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v33 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100008614(&qword_1000F9018);
  uint64_t v28 = *(void *)(v31 - 8);
  __chkstk_darwin(v31, v5);
  unint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008614(&qword_1000F9020);
  uint64_t v27 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100008614(&qword_1000F9028);
  uint64_t v32 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AEFC(a1, a1[3]);
  sub_10003F0F8();
  uint64_t v16 = (uint64_t)v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    goto LABEL_7;
  }
  uint64_t v26 = v8;
  uint64_t v17 = v33;
  uint64_t v34 = a1;
  id v18 = v15;
  uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v22;
    sub_100008614(&qword_1000F8A40);
    *uint64_t v15 = &type metadata for XPCConnectionEvent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v15, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v32 + 8))(v18, v12);
    a1 = v34;
LABEL_7:
    sub_10000AF94((uint64_t)a1);
    return v15;
  }
  uint64_t v15 = (void *)*(unsigned __int8 *)(v19 + 32);
  if (*(unsigned char *)(v19 + 32))
  {
    if (v15 == 1)
    {
      char v36 = 1;
      sub_10003F1A0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v32;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v31);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v18, v12);
    }
    else
    {
      char v37 = 2;
      sub_10003F14C();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v32;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v30);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v24 + 8))(v18, v12);
    }
  }
  else
  {
    char v35 = 0;
    sub_10003F1F4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v32 + 8))(v18, v12);
  }
  sub_10000AF94((uint64_t)v34);
  return v15;
}

unint64_t sub_10003F0F8()
{
  unint64_t result = qword_1000F9030;
  if (!qword_1000F9030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9030);
  }
  return result;
}

unint64_t sub_10003F14C()
{
  unint64_t result = qword_1000F9038;
  if (!qword_1000F9038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9038);
  }
  return result;
}

unint64_t sub_10003F1A0()
{
  unint64_t result = qword_1000F9040;
  if (!qword_1000F9040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9040);
  }
  return result;
}

unint64_t sub_10003F1F4()
{
  unint64_t result = qword_1000F9048;
  if (!qword_1000F9048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9048);
  }
  return result;
}

uint64_t sub_10003F248()
{
  swift_release();
  sub_10000D6B8(*(void *)(v0 + 72), *(void *)(v0 + 80));

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10003F288()
{
  return sub_10003DF08(*(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_10003F2C0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003F308()
{
  unint64_t result = qword_1000F6E30;
  if (!qword_1000F6E30)
  {
    sub_100009F40(&qword_1000F6E28);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6E30);
  }
  return result;
}

unsigned char *_s13PCViewService18XPCConnectionEventOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10003F430);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.CodingKeys()
{
  return &type metadata for XPCConnectionEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.RequestedCodingKeys()
{
  return &type metadata for XPCConnectionEvent.RequestedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.ConnectedCodingKeys()
{
  return &type metadata for XPCConnectionEvent.ConnectedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCConnectionEvent.InvalidatedCodingKeys()
{
  return &type metadata for XPCConnectionEvent.InvalidatedCodingKeys;
}

unint64_t sub_10003F49C()
{
  unint64_t result = qword_1000F9078;
  if (!qword_1000F9078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9078);
  }
  return result;
}

unint64_t sub_10003F4F4()
{
  unint64_t result = qword_1000F9080;
  if (!qword_1000F9080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9080);
  }
  return result;
}

unint64_t sub_10003F54C()
{
  unint64_t result = qword_1000F9088;
  if (!qword_1000F9088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9088);
  }
  return result;
}

unint64_t sub_10003F5A4()
{
  unint64_t result = qword_1000F9090;
  if (!qword_1000F9090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9090);
  }
  return result;
}

unint64_t sub_10003F5FC()
{
  unint64_t result = qword_1000F9098;
  if (!qword_1000F9098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9098);
  }
  return result;
}

unint64_t sub_10003F654()
{
  unint64_t result = qword_1000F90A0;
  if (!qword_1000F90A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F90A0);
  }
  return result;
}

unint64_t sub_10003F6AC()
{
  unint64_t result = qword_1000F90A8;
  if (!qword_1000F90A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F90A8);
  }
  return result;
}

unint64_t sub_10003F704()
{
  unint64_t result = qword_1000F90B0;
  if (!qword_1000F90B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F90B0);
  }
  return result;
}

unint64_t sub_10003F75C()
{
  unint64_t result = qword_1000F90B8;
  if (!qword_1000F90B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F90B8);
  }
  return result;
}

uint64_t sub_10003F7CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Color.RGBColorSpace();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unsigned int v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a1 = swift_getKeyPath();
  sub_100008614(&qword_1000F7B40);
  swift_storeEnumTagMultiPayload();
  unint64_t v7 = (int *)type metadata accessor for CloseButtonView();
  uint64_t v8 = v7[5];
  uint64_t v9 = enum case for Color.RGBColorSpace.sRGB(_:);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v10(v6, enum case for Color.RGBColorSpace.sRGB(_:), v2);
  *(uint64_t *)((char *)a1 + v8) = Color.init(_:white:opacity:)();
  uint64_t v11 = v7[6];
  v10(v6, v9, v2);
  *(uint64_t *)((char *)a1 + v11) = Color.init(_:white:opacity:)();
  uint64_t v12 = v7[7];
  v10(v6, v9, v2);
  *(uint64_t *)((char *)a1 + v12) = Color.init(_:white:opacity:)();
  uint64_t v13 = v7[8];
  v10(v6, v9, v2);
  uint64_t result = Color.init(_:white:opacity:)();
  *(uint64_t *)((char *)a1 + v13) = result;
  return result;
}

uint64_t sub_10003F99C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_100008614(&qword_1000F8CB8);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v41 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ColorScheme();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v15 = sub_100008614(&qword_1000F9160);
  __chkstk_darwin(v15 - 8, v16);
  id v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Image.init(systemName:)();
  static SymbolRenderingMode.palette.getter();
  uint64_t v19 = type metadata accessor for SymbolRenderingMode();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 0, 1, v19);
  uint64_t v40 = Image.symbolRenderingMode(_:)();
  swift_release();
  sub_10000EC04((uint64_t)v18, &qword_1000F9160);
  sub_1000407C8((uint64_t)v14);
  uint64_t v39 = v7;
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t))(v7 + 88);
  int v21 = v20(v14, v6);
  int v22 = enum case for ColorScheme.light(_:);
  if (v21 == enum case for ColorScheme.light(_:))
  {
    uint64_t v23 = *(void *)(v1 + *(int *)(type metadata accessor for CloseButtonView() + 20));
    swift_retain();
  }
  else
  {
    int v24 = v21;
    int v25 = enum case for ColorScheme.dark(_:);
    uint64_t v26 = type metadata accessor for CloseButtonView();
    if (v24 == v25)
    {
      uint64_t v23 = *(void *)(v1 + *(int *)(v26 + 24));
      swift_retain();
    }
    else
    {
      uint64_t v23 = *(void *)(v1 + *(int *)(v26 + 20));
      uint64_t v38 = *(void (**)(char *, uint64_t))(v39 + 8);
      swift_retain();
      v38(v14, v6);
    }
  }
  sub_1000407C8((uint64_t)v11);
  int v27 = v20(v11, v6);
  if (v27 == v22)
  {
    uint64_t v28 = *(int *)(type metadata accessor for CloseButtonView() + 28);
  }
  else
  {
    int v29 = v27;
    int v30 = enum case for ColorScheme.dark(_:);
    uint64_t v31 = type metadata accessor for CloseButtonView();
    if (v29 != v30)
    {
      uint64_t v32 = *(void *)(v1 + *(int *)(v31 + 28));
      uint64_t v33 = *(void (**)(char *, uint64_t))(v39 + 8);
      swift_retain();
      v33(v11, v6);
      goto LABEL_12;
    }
    uint64_t v28 = *(int *)(v31 + 32);
  }
  uint64_t v32 = *(void *)(v1 + v28);
  swift_retain();
LABEL_12:
  uint64_t v34 = type metadata accessor for Font.Design();
  uint64_t v35 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v41, 1, 1, v34);
  uint64_t v36 = static Font.system(size:weight:design:)();
  sub_10000EC04(v35, &qword_1000F8CB8);
  uint64_t result = swift_getKeyPath();
  *a1 = v40;
  a1[1] = v23;
  a1[2] = v32;
  a1[3] = result;
  a1[4] = v36;
  return result;
}

uint64_t sub_10003FD80()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10003FDA4()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_10003FDC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ColorScheme();
  __chkstk_darwin(v2, v3);
  (*(void (**)(char *, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return EnvironmentValues.colorScheme.setter();
}

uint64_t type metadata accessor for CloseButtonView()
{
  uint64_t result = qword_1000F9118;
  if (!qword_1000F9118) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_10003FEE0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    sub_100008614(&qword_1000F7B40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    }
    else
    {
      *uint64_t v4 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v10 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v10) = *(uint64_t *)((char *)a2 + v10);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100040030(uint64_t a1)
{
  sub_100008614(&qword_1000F7B40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for ColorScheme();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *sub_1000400F4(void *a1, void *a2, int *a3)
{
  sub_100008614(&qword_1000F7B40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for ColorScheme();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v7) = *(void *)((char *)a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1000401F8(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000EC04((uint64_t)a1, &qword_1000F7B40);
    sub_100008614(&qword_1000F7B40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for ColorScheme();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

char *sub_100040340(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_100008614(&qword_1000F7B40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for ColorScheme();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  *(void *)&a1[v8] = *(void *)&a2[v8];
  uint64_t v9 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  return a1;
}

char *sub_100040430(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_10000EC04((uint64_t)a1, &qword_1000F7B40);
    uint64_t v6 = sub_100008614(&qword_1000F7B40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for ColorScheme();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  swift_release();
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_release();
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  swift_release();
  return a1;
}

uint64_t sub_100040560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100040574);
}

uint64_t sub_100040574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100008614(&qword_1000F7B48);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100040638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004064C);
}

uint64_t sub_10004064C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100008614(&qword_1000F7B48);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

void sub_10004070C()
{
  sub_100021E58();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1000407AC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000407C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008614(&qword_1000F7B40);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100040B2C(v2, (uint64_t)v12);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = type metadata accessor for ColorScheme();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, v12, v13);
  }
  else
  {
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    uint64_t v16 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v20[1] = a1;
      uint64_t v21 = v19;
      *(_DWORD *)id v18 = 136315138;
      v20[2] = sub_10009CFB4(0x686353726F6C6F43, 0xEB00000000656D65, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_100040A7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100040AA8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100040AD4()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_100040B00()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_100040B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008614(&qword_1000F7B40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100040B98()
{
  unint64_t result = qword_1000F9168;
  if (!qword_1000F9168)
  {
    sub_100009F40(&qword_1000F9170);
    sub_100040C38();
    sub_100012908(&qword_1000F9198, &qword_1000F91A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9168);
  }
  return result;
}

unint64_t sub_100040C38()
{
  unint64_t result = qword_1000F9178;
  if (!qword_1000F9178)
  {
    sub_100009F40(&qword_1000F9180);
    sub_100012908(&qword_1000F9188, &qword_1000F9190);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9178);
  }
  return result;
}

uint64_t destroy for SchematicHandoffAnimationView(uint64_t a1)
{
  swift_bridgeObjectRelease();

  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SchematicHandoffAnimationView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  id v5 = v4;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SchematicHandoffAnimationView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  id v6 = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for SchematicHandoffAnimationView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SchematicHandoffAnimationView(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematicHandoffAnimationView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchematicHandoffAnimationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SchematicHandoffAnimationView()
{
  return &type metadata for SchematicHandoffAnimationView;
}

uint64_t sub_100040FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  static Alignment.top.getter();
  sub_10004119C((unsigned __int8 *)a2, a1, __src);
  memcpy(v19, __src, sizeof(v19));
  static Alignment.center.getter();
  sub_10002F0DC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v21, 0.0, 1, INFINITY, 0);
  sub_100041DD8((uint64_t)__src);
  uint64_t v6 = static Animation.linear(duration:)();
  int v7 = *(_DWORD *)(a2 + 32);
  uint64_t v8 = sub_1000418F8();
  unsigned __int8 v9 = *(unsigned char *)a2;
  uint64_t v10 = sub_1000418F8();
  sub_100008614(&qword_1000F7F58);
  State.wrappedValue.getter();
  uint64_t v11 = swift_allocObject();
  long long v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v11 + 64) = v12;
  *(void *)(v11 + 80) = *(void *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v11 + 32) = v13;
  uint64_t v14 = swift_allocObject();
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v14 + 64) = v15;
  *(void *)(v14 + 80) = *(void *)(a2 + 64);
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v14 + 32) = v16;
  memcpy((void *)a3, v21, 0x260uLL);
  *(void *)(a3 + 608) = v6;
  *(_DWORD *)(a3 + 616) = v7;
  *(void *)(a3 + 624) = v8;
  *(unsigned char *)(a3 + 632) = v9;
  *(void *)(a3 + 640) = v10;
  *(unsigned char *)(a3 + 648) = v18;
  *(void *)(a3 + 656) = sub_100041E28;
  *(void *)(a3 + 664) = v11;
  *(_OWORD *)(a3 + 672) = 0u;
  *(_DWORD *)(a3 + 688) = v7;
  *(void *)(a3 + 696) = sub_100041E34;
  *(void *)(a3 + 704) = v14;
  sub_100026320(a2);
  return sub_100026320(a2);
}

uint64_t sub_10004119C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v77 = a2;
  long long v67 = a3;
  *(double *)&uint64_t v4 = COERCE_DOUBLE(type metadata accessor for Color.RGBColorSpace());
  uint64_t v75 = *(void *)(v4 - 8);
  double v76 = *(double *)&v4;
  __chkstk_darwin(v4, v5);
  long long v74 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v7 = *(id *)(qword_100111A10 + 256);
  char v8 = sub_10002D38C();

  if (v8) {
    unsigned __int8 v9 = &type metadata for PerspectiveViewEffectProvider;
  }
  else {
    unsigned __int8 v9 = &type metadata for RegularViewEffectProvider;
  }
  if (v8) {
    uint64_t v10 = &off_1000E5C78;
  }
  else {
    uint64_t v10 = &off_1000E5C90;
  }
  v147 = v9;
  uint64_t v148 = v10;
  v146[0] = 0x3FB999999999999ALL;
  sub_10000AEFC(v146, (uint64_t)v9);
  int v11 = *a1;
  if (v11 == 2)
  {
    uint64_t v12 = 2;
  }
  else
  {
    v105[0] = *(_OWORD *)(a1 + 56);
    sub_100008614(&qword_1000F7F58);
    State.wrappedValue.getter();
    uint64_t v12 = (v106[0] & 1) == 0;
  }
  if (v8) {
    long long v13 = &off_1000E5C78;
  }
  else {
    long long v13 = &off_1000E5C90;
  }
  float v14 = *((float *)a1 + 8);
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, ValueMetadata *, _UNKNOWN **))v13[1])(&v149, v12, v77, v9, v10);
  uint64_t v16 = (uint64_t)v147;
  long long v15 = v148;
  sub_10000AEFC(v146, (uint64_t)v147);
  if (v11 == 2)
  {
    uint64_t v17 = 2;
  }
  else
  {
    v105[0] = *(_OWORD *)(a1 + 56);
    sub_100008614(&qword_1000F7F58);
    State.wrappedValue.getter();
    uint64_t v17 = (v106[0] & 1) == 0;
  }
  BOOL v66 = v11 == 2;
  ((void (*)(double *__return_ptr, uint64_t, uint64_t, uint64_t, _UNKNOWN **, float))v15[2])(v155, v17, v77, v16, v15, v14);
  GeometryProxy.size.getter();
  double v78 = v18 * 0.4;
  GeometryProxy.size.getter();
  double v65 = v19 * 0.3;
  uint64_t v57 = *((void *)a1 + 1);
  uint64_t v20 = v57;
  (*(void (**)(char *, void, double))(v75 + 104))(v74, enum case for Color.RGBColorSpace.sRGB(_:), COERCE_DOUBLE(*(void *)&v76));
  uint64_t v21 = Color.init(_:red:green:blue:opacity:)();
  uint64_t v22 = v150;
  uint64_t v77 = v149;
  uint64_t v23 = v151;
  uint64_t v55 = v151;
  uint64_t v56 = v150;
  uint64_t v69 = v152;
  uint64_t v24 = v21;
  swift_retain();
  static UnitPoint.center.getter();
  uint64_t v26 = v25;
  uint64_t v53 = v27;
  uint64_t v54 = v25;
  uint64_t v28 = v27;
  uint64_t v29 = v153;
  uint64_t v52 = v153;
  double v76 = v154 * 0.0174532925;
  static UnitPoint.center.getter();
  long long v74 = v30;
  uint64_t v75 = v31;
  uint64_t v51 = v24;
  swift_release();
  uint64_t v32 = *((void *)a1 + 3);
  uint64_t v64 = *((void *)a1 + 2);
  LODWORD(v106[0]) = 1065353216;
  swift_bridgeObjectRetain();
  State.init(wrappedValue:)();
  int v33 = v105[0];
  uint64_t v34 = *((void *)&v105[0] + 1);
  double v62 = v155[1];
  double v63 = v155[0];
  double v60 = v155[3];
  double v61 = v155[2];
  swift_retain();
  swift_bridgeObjectRetain();
  static UnitPoint.center.getter();
  uint64_t v50 = v35;
  uint64_t v59 = v36;
  float v58 = v14;
  double v72 = v155[5] * 0.0174532925;
  double v73 = v155[4];
  static UnitPoint.center.getter();
  uint64_t v70 = v38;
  uint64_t v71 = v37;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v39 = static Alignment.center.getter();
  sub_10002F298(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)&v105[22], 0.0, 1, INFINITY, 0, v39, v40, 0, 1);
  *(double *)&long long v82 = v78;
  *((void *)&v82 + 1) = v20;
  *(void *)&long long v83 = v24;
  *((float *)&v83 + 2) = v14;
  *(void *)&long long v84 = v77;
  *((void *)&v84 + 1) = v22;
  *(void *)&long long v85 = v23;
  *((void *)&v85 + 1) = v69;
  *(void *)&long long v86 = v69;
  *((void *)&v86 + 1) = v26;
  *(void *)&long long v87 = v28;
  *((void *)&v87 + 1) = v29;
  LOBYTE(v88) = 0;
  DWORD1(v88) = *(_DWORD *)&v79[3];
  *(_DWORD *)((char *)&v88 + 1) = *(_DWORD *)v79;
  *((double *)&v88 + 1) = v76;
  v105[2] = v84;
  v105[1] = v83;
  v105[0] = v82;
  v105[5] = v87;
  v105[6] = v88;
  HIDWORD(v94) = *(_DWORD *)&v81[3];
  *(_DWORD *)((char *)&v94 + 9) = *(_DWORD *)v81;
  *(_DWORD *)((char *)&v100 + 1) = *(_DWORD *)v80;
  DWORD1(v100) = *(_DWORD *)&v80[3];
  uint64_t v90 = 0;
  *(void *)&long long v91 = 0;
  uint64_t v89 = 0x3FF0000000000000;
  *((void *)&v91 + 1) = v74;
  *(void *)int v92 = v75;
  *(_OWORD *)&v92[8] = xmmword_1000AF0C0;
  long long v68 = xmmword_1000AF0C0;
  double v41 = v65;
  *(double *)&long long v93 = v65;
  uint64_t v42 = v64;
  *((void *)&v93 + 1) = v64;
  *(void *)&long long v94 = v32;
  LOBYTE(v20) = v66;
  BYTE8(v94) = v66;
  LODWORD(v26) = v33;
  LODWORD(v95) = v33;
  *((void *)&v95 + 1) = v34;
  double v44 = v62;
  double v43 = v63;
  *(double *)&long long v96 = v63;
  *((double *)&v96 + 1) = v62;
  uint64_t v45 = *(void *)&v60;
  double v46 = v61;
  *(double *)&long long v97 = v61;
  *((double *)&v97 + 1) = v60;
  uint64_t v47 = v50;
  *(double *)&long long v98 = v60;
  *((void *)&v98 + 1) = v50;
  uint64_t v48 = v59;
  *(void *)&long long v99 = v59;
  *((double *)&v99 + 1) = v73;
  LOBYTE(v100) = 0;
  *((double *)&v100 + 1) = v72;
  uint64_t v101 = 0x3FF0000000000000;
  uint64_t v102 = 0;
  *(void *)&long long v103 = 0;
  *((void *)&v103 + 1) = v71;
  *(void *)uint64_t v104 = v70;
  *(_OWORD *)&v104[8] = xmmword_1000AF0C0;
  v105[3] = v85;
  v105[4] = v86;
  v105[8] = v91;
  v105[9] = *(_OWORD *)v92;
  v105[7] = 0x3FF0000000000000uLL;
  *(_OWORD *)((char *)&v105[18] + 8) = 0x3FF0000000000000uLL;
  *(_OWORD *)((char *)&v105[19] + 8) = v103;
  *(_OWORD *)((char *)&v105[20] + 8) = *(_OWORD *)v104;
  *(_OWORD *)((char *)&v105[16] + 8) = v99;
  *(_OWORD *)((char *)&v105[17] + 8) = v100;
  *(_OWORD *)((char *)&v105[14] + 8) = v97;
  *(_OWORD *)((char *)&v105[15] + 8) = v98;
  *(_OWORD *)((char *)&v105[10] + 8) = v93;
  *(_OWORD *)((char *)&v105[11] + 8) = v94;
  *(_OWORD *)((char *)&v105[12] + 8) = v95;
  v108[0] = *(_DWORD *)v81;
  *(_DWORD *)((char *)v108 + 3) = *(_DWORD *)&v81[3];
  *(_DWORD *)long long v119 = *(_DWORD *)v80;
  *(_DWORD *)&v119[3] = *(_DWORD *)&v80[3];
  *(void *)&v105[10] = 0x3FE0000000000000;
  *((void *)&v105[21] + 1) = 0x3FE0000000000000;
  *(_OWORD *)((char *)&v105[13] + 8) = v96;
  memcpy(v67, v105, 0x1E0uLL);
  *(double *)uint64_t v106 = v41;
  v106[1] = v42;
  v106[2] = v32;
  char v107 = v20;
  *(_DWORD *)((char *)&v108[1] + 3) = v26;
  uint64_t v109 = v34;
  double v110 = v43;
  double v111 = v44;
  double v112 = v46;
  uint64_t v113 = v45;
  uint64_t v114 = v45;
  uint64_t v115 = v47;
  uint64_t v116 = v48;
  double v117 = v73;
  char v118 = 0;
  double v120 = v72;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v121 = 0x3FF0000000000000;
  uint64_t v124 = v71;
  uint64_t v125 = v70;
  long long v126 = v68;
  sub_100042268((uint64_t)&v82);
  sub_100042294((uint64_t)&v93);
  sub_1000422CC((uint64_t)v106);
  *(double *)long long v127 = v78;
  v127[1] = v57;
  v127[2] = v51;
  float v128 = v58;
  uint64_t v129 = v77;
  uint64_t v130 = v56;
  uint64_t v131 = v55;
  uint64_t v132 = v69;
  uint64_t v133 = v69;
  uint64_t v134 = v54;
  uint64_t v135 = v53;
  uint64_t v136 = v52;
  char v137 = 0;
  *(_DWORD *)uint64_t v138 = *(_DWORD *)v79;
  *(_DWORD *)&v138[3] = *(_DWORD *)&v79[3];
  double v139 = v76;
  uint64_t v140 = 0x3FF0000000000000;
  uint64_t v141 = 0;
  uint64_t v142 = 0;
  char v143 = v74;
  uint64_t v144 = v75;
  long long v145 = v68;
  sub_100042304((uint64_t)v127);
  return sub_10000AF94((uint64_t)v146);
}

uint64_t sub_1000418F8()
{
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v0 = *(id *)(qword_100111A10 + 160);
  double v1 = sub_10002E418();

  id v2 = *(id *)(qword_100111A10 + 168);
  double v3 = sub_10002E418();

  id v4 = *(id *)(qword_100111A10 + 176);
  double v5 = sub_10002E418();

  id v6 = *(id *)(qword_100111A10 + 184);
  double v7 = sub_10002E418();

  v8.n128_f64[0] = v1;
  v9.n128_f64[0] = v3;
  v10.n128_f64[0] = v5;
  v11.n128_f64[0] = v7;

  return static Animation.interpolatingSpring(mass:stiffness:damping:initialVelocity:)(v8, v9, v10, v11);
}

void sub_1000419E8(uint64_t a1)
{
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v2 = *(id *)(qword_100111A10 + 264);
  char v3 = sub_10002D38C();

  if (v3)
  {
    id v4 = self;
    uint64_t v5 = swift_allocObject();
    long long v6 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v5 + 64) = v6;
    *(void *)(v5 + 80) = *(void *)(a1 + 64);
    long long v7 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v5 + 32) = v7;
    uint64_t v12 = sub_1000421A8;
    uint64_t v13 = v5;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    __n128 v10 = sub_100061928;
    __n128 v11 = &unk_1000E5BB0;
    __n128 v8 = _Block_copy(&aBlock);
    sub_100026320(a1);
    swift_release();
    [v4 scheduledTimerWithTimeInterval:0 repeats:v8 block:1.0];
    _Block_release(v8);
    long long aBlock = *(_OWORD *)(a1 + 40);
    sub_100008614(&qword_1000F91A8);
    State.wrappedValue.setter();
  }
}

void sub_100041B78(float *a1, uint64_t a2)
{
  if (*a1 > 0.5)
  {
    long long v2 = *(_OWORD *)(a2 + 40);
    sub_100008614(&qword_1000F91A8);
    State.wrappedValue.getter();
    [v3 invalidate:v2];
  }
}

void sub_100041BE4(uint64_t a1, uint64_t a2)
{
  long long v9 = *(_OWORD *)(a2 + 56);
  char v14 = 1;
  sub_100008614(&qword_1000F7F58);
  State.wrappedValue.setter();
  id v3 = self;
  uint64_t v4 = swift_allocObject();
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v4 + 64) = v5;
  *(void *)(v4 + 80) = *(void *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v6;
  uint64_t v12 = sub_10004221C;
  uint64_t v13 = v4;
  *(void *)&long long v9 = _NSConcreteStackBlock;
  *((void *)&v9 + 1) = 1107296256;
  __n128 v10 = sub_100061928;
  __n128 v11 = &unk_1000E5C00;
  long long v7 = _Block_copy(&v9);
  sub_100026320(a2);
  swift_release();
  id v8 = [v3 scheduledTimerWithTimeInterval:0 repeats:v7 block:2.0];
  _Block_release(v7);
}

uint64_t sub_100041D28@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 48);
  v9[2] = *(_OWORD *)(v1 + 32);
  v9[3] = v3;
  uint64_t v10 = *(void *)(v1 + 64);
  long long v4 = *(_OWORD *)(v1 + 16);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v4;
  uint64_t v5 = swift_allocObject();
  long long v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(void *)(v5 + 80) = *(void *)(v1 + 64);
  long long v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v7;
  *a1 = sub_100041DD0;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v5;
  return sub_100026320((uint64_t)v9);
}

uint64_t sub_100041DB0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100041DD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100040FA0(a1, v2 + 16, a2);
}

uint64_t sub_100041DD8(uint64_t a1)
{
  return a1;
}

void sub_100041E28()
{
  sub_1000419E8(v0 + 16);
}

void sub_100041E34(float *a1)
{
  sub_100041B78(a1, v1 + 16);
}

void sub_100041E3C(char a1@<W0>, float64x2_t *a2@<X8>, float a3@<S0>)
{
  double v7 = *v3;
  GeometryProxy.size.getter();
  float64x2_t v9 = (float64x2_t)xmmword_1000B0CC0;
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0x3FF0000000000000;
      long long v21 = xmmword_1000B0CE0;
      uint64_t v22 = 0;
      long long v14 = xmmword_1000B0CC0;
      double v15 = v7 * v8;
      long long v16 = xmmword_1000B0CF0;
      sub_100013498((float64x2_t *)&v14, v13, a3);
      float64x2_t v9 = v13[0];
      int64x2_t v10 = (int64x2_t)v13[1];
      float64x2_t v11 = v13[2];
    }
    else
    {
      double v12 = v7 * v8;
      int64x2_t v10 = vdupq_lane_s64(0x3FF2666666666666, 0);
      *(double *)v10.i64 = v12;
      float64x2_t v11 = (float64x2_t)xmmword_1000B0CD0;
    }
  }
  else
  {
    int64x2_t v10 = (int64x2_t)xmmword_1000B0CB0;
    float64x2_t v11 = 0uLL;
  }
  *a2 = v9;
  a2[1] = (float64x2_t)v10;
  a2[2] = v11;
}

void sub_100041F30(char a1@<W0>, float64x2_t *a2@<X8>, float a3@<S0>)
{
  double v7 = *v3;
  GeometryProxy.size.getter();
  double v9 = v8 * 0.15;
  float64x2_t v10 = (float64x2_t)xmmword_1000B0CC0;
  if (a1)
  {
    if (a1 == 1)
    {
      long long v24 = xmmword_1000B0CC0;
      double v25 = v9 + v8 * 0.35;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v26 = 0x3FECCCCCCCCCCCCDLL;
      long long v19 = xmmword_1000B0CC0;
      double v20 = v9 + (v7 + 0.05) * v8;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v21 = 0x3FECCCCCCCCCCCCDLL;
      sub_100013498((float64x2_t *)&v19, v18, a3);
      float64x2_t v10 = v18[0];
      _Q1 = (int64x2_t)v18[1];
      float64x2_t v12 = v18[2];
    }
    else
    {
      double v13 = v9 + v7 * v8;
      __asm { FMOV            V1.2D, #1.0 }
      *(double *)_Q1.i64 = v13;
      float64x2_t v12 = 0uLL;
    }
  }
  else
  {
    _Q1 = vdupq_lane_s64(0x3FE6666666666666, 0);
    *(double *)_Q1.i64 = v9;
    float64x2_t v12 = (float64x2_t)xmmword_1000B0D00;
  }
  *a2 = v10;
  a2[1] = (float64x2_t)_Q1;
  a2[2] = v12;
}

double sub_100042058@<D0>(uint64_t a1@<X8>)
{
  double v3 = *v1;
  GeometryProxy.size.getter();
  double result = 1.0;
  *(_OWORD *)a1 = xmmword_1000B0CC0;
  *(double *)(a1 + 16) = v3 * v5;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0x3FF0000000000000;
  return result;
}

void sub_1000420AC(char a1@<W0>, float64x2_t *a2@<X8>, float a3@<S0>)
{
  double v7 = *v3;
  GeometryProxy.size.getter();
  __asm { FMOV            V0.2D, #1.0 }
  float64x2_t v14 = (float64x2_t)xmmword_1000B0CC0;
  float64x2_t v15 = 0uLL;
  if (a1)
  {
    if (a1 == 1)
    {
      long long v22 = xmmword_1000B0CC0;
      double v23 = v8 * 0.9;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v24 = 0x3FF0000000000000;
      long long v17 = xmmword_1000B0CC0;
      double v18 = (v7 + 0.15) * v8;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = 0x3FF0000000000000;
      sub_100013498((float64x2_t *)&v17, v16, a3);
      float64x2_t v14 = v16[0];
      _Q0 = v16[1];
      float64x2_t v15 = v16[2];
    }
    else
    {
      _Q0.f64[0] = (v7 + 0.15) * v8;
    }
  }
  else
  {
    _Q0.f64[0] = (v7 + 0.15) * v8 + v8 * 0.1;
  }
  *a2 = v14;
  a2[1] = _Q0;
  a2[2] = v15;
}

void sub_1000421A8(uint64_t a1)
{
  sub_100041BE4(a1, v1 + 16);
}

uint64_t sub_1000421B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000421C0()
{
  return swift_release();
}

uint64_t sub_1000421CC()
{
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10004221C()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100042268(uint64_t a1)
{
  return a1;
}

uint64_t sub_100042294(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000422CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100042304(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for PerspectiveViewEffectProvider()
{
  return &type metadata for PerspectiveViewEffectProvider;
}

ValueMetadata *type metadata accessor for RegularViewEffectProvider()
{
  return &type metadata for RegularViewEffectProvider;
}

unint64_t sub_100042354()
{
  unint64_t result = qword_1000F91B0;
  if (!qword_1000F91B0)
  {
    sub_100009F40(&qword_1000F91B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F91B0);
  }
  return result;
}

char *sub_1000423B8(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        a1[8] = a2[8];
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        double v7 = (void *)*((void *)a2 + 5);
        *((void *)a1 + 4) = *((void *)a2 + 4);
        *((void *)a1 + 5) = v7;
        uint64_t v8 = type metadata accessor for ActivityDisplayContext(0);
        uint64_t v9 = *(int *)(v8 + 32);
        float64x2_t v10 = &a1[v9];
        float64x2_t v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
        swift_bridgeObjectRetain();
        id v13 = v7;
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v80 = v12;
        if (EnumCaseMultiPayload == 2)
        {
          uint64_t v77 = v8;
          uint64_t v29 = *((void *)v11 + 1);
          *(void *)float64x2_t v10 = *(void *)v11;
          *((void *)v10 + 1) = v29;
          uint64_t v30 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          __dst = &v10[v30];
          uint64_t v31 = &v11[v30];
          uint64_t v32 = type metadata accessor for Date();
          uint64_t v33 = *(void *)(v32 - 8);
          uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
          swift_bridgeObjectRetain();
          if (v34(v31, 1, v32))
          {
            uint64_t v35 = sub_100008614(&qword_1000F91C0);
            memcpy(__dst, v31, *(void *)(*(void *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dst, v31, v32);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v8 = v77;
          goto LABEL_27;
        }
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v78 = v8;
          uint64_t v36 = *((void *)v11 + 1);
          *(void *)float64x2_t v10 = *(void *)v11;
          *((void *)v10 + 1) = v36;
          uint64_t v37 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          uint64_t v38 = *(int *)(v37 + 20);
          double v73 = &v10[v38];
          __dsta = (int *)v37;
          double v72 = &v11[v38];
          uint64_t v39 = type metadata accessor for Date();
          uint64_t v40 = *(void *)(v39 - 8);
          double v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
          swift_bridgeObjectRetain();
          if (v41(v72, 1, v39))
          {
            uint64_t v42 = sub_100008614(&qword_1000F91C0);
            memcpy(v73, v72, *(void *)(*(void *)(v42 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v73, v72, v39);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v73, 0, 1, v39);
          }
          uint64_t v8 = v78;
          uint64_t v12 = v80;
          uint64_t v43 = __dsta[6];
          double v44 = &v10[v43];
          uint64_t v45 = &v11[v43];
          uint64_t v46 = *((void *)v45 + 1);
          *(void *)double v44 = *(void *)v45;
          *((void *)v44 + 1) = v46;
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_27:
            uint64_t v47 = *(int *)(v8 + 36);
            uint64_t v48 = &a1[v47];
            uint64_t v49 = &a2[v47];
            int v50 = swift_getEnumCaseMultiPayload();
            if (v50 == 2)
            {
              uint64_t v52 = *((void *)v49 + 1);
              *(void *)uint64_t v48 = *(void *)v49;
              *((void *)v48 + 1) = v52;
              uint64_t v53 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
              uint64_t v54 = &v48[v53];
              uint64_t v55 = &v49[v53];
              uint64_t v56 = type metadata accessor for Date();
              uint64_t v57 = *(void *)(v56 - 8);
              float v58 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
              swift_bridgeObjectRetain();
              if (v58(v55, 1, v56))
              {
                uint64_t v59 = sub_100008614(&qword_1000F91C0);
                memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
              }
            }
            else if (v50 == 1)
            {
              uint64_t v60 = *((void *)v49 + 1);
              *(void *)uint64_t v48 = *(void *)v49;
              *((void *)v48 + 1) = v60;
              uint64_t v61 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
              uint64_t v62 = *(int *)(v61 + 20);
              __dstb = &v48[v62];
              uint64_t v79 = v61;
              double v63 = &v49[v62];
              uint64_t v64 = type metadata accessor for Date();
              uint64_t v65 = *(void *)(v64 - 8);
              BOOL v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
              swift_bridgeObjectRetain();
              if (v66(v63, 1, v64))
              {
                uint64_t v67 = sub_100008614(&qword_1000F91C0);
                memcpy(__dstb, v63, *(void *)(*(void *)(v67 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v65 + 16))(__dstb, v63, v64);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(__dstb, 0, 1, v64);
              }
              uint64_t v68 = *(int *)(v79 + 24);
              uint64_t v69 = &v48[v68];
              uint64_t v70 = &v49[v68];
              uint64_t v71 = *((void *)v70 + 1);
              *(void *)uint64_t v69 = *(void *)v70;
              *((void *)v69 + 1) = v71;
              swift_bridgeObjectRetain();
            }
            else
            {
              if (v50)
              {
                memcpy(v48, v49, *(void *)(*(void *)(v12 - 8) + 64));
                goto LABEL_16;
              }
              uint64_t v51 = *((void *)v49 + 1);
              *(void *)uint64_t v48 = *(void *)v49;
              *((void *)v48 + 1) = v51;
              swift_bridgeObjectRetain();
            }
            swift_storeEnumTagMultiPayload();
            goto LABEL_16;
          }
          uint64_t v15 = *((void *)v11 + 1);
          *(void *)float64x2_t v10 = *(void *)v11;
          *((void *)v10 + 1) = v15;
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_27;
      case 2u:
        uint64_t v18 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v18;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        return a1;
      case 3u:
        uint64_t v19 = *(void **)a2;
        if (*(void *)a2 == 1)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v27 = *((void *)a2 + 1);
          *(void *)a1 = v19;
          *((void *)a1 + 1) = v27;
          id v28 = v19;
        }
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
      case 4u:
        uint64_t v20 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v21 = v20;
        swift_storeEnumTagMultiPayload();
        return a1;
      case 6u:
        *(void *)a1 = *(void *)a2;
        uint64_t v22 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
        double v23 = &a1[v22];
        uint64_t v24 = &a2[v22];
        uint64_t v25 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
        swift_bridgeObjectRetain();
        v26(v23, v24, v25);
        swift_storeEnumTagMultiPayload();
        return a1;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
    }
  }
  uint64_t v16 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  a1 = (char *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return a1;
}

void sub_100042B5C(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();

      uint64_t v2 = type metadata accessor for ActivityDisplayContext(0);
      double v3 = (char *)a1 + *(int *)(v2 + 32);
      type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        swift_bridgeObjectRelease();
        float64x2_t v11 = &v3[*(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20)];
        uint64_t v12 = type metadata accessor for Date();
        uint64_t v13 = *(void *)(v12 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
          (*(void (**)(char *, uint64_t))(v13 + 8))(v11, v12);
        }
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          swift_bridgeObjectRelease();
          float64x2_t v14 = &v3[*(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20)];
          uint64_t v15 = type metadata accessor for Date();
          uint64_t v16 = *(void *)(v15 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
            (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
          }
        }
        else if (EnumCaseMultiPayload)
        {
          goto LABEL_21;
        }
        swift_bridgeObjectRelease();
      }
LABEL_21:
      long long v17 = (char *)a1 + *(int *)(v2 + 36);
      int v18 = swift_getEnumCaseMultiPayload();
      switch(v18)
      {
        case 2:
          swift_bridgeObjectRelease();
          uint64_t v19 = &v17[*(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20)];
          uint64_t v20 = type metadata accessor for Date();
          uint64_t v24 = *(void *)(v20 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v20))
          {
            uint64_t v8 = *(void (**)(char *, uint64_t))(v24 + 8);
            float64x2_t v10 = v19;
            uint64_t v9 = v20;
            goto LABEL_13;
          }
          break;
        case 1:
          swift_bridgeObjectRelease();
          id v21 = &v17[*(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20)];
          uint64_t v22 = type metadata accessor for Date();
          uint64_t v23 = *(void *)(v22 - 8);
          if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
            (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
          }
          goto LABEL_24;
        case 0:
          goto LABEL_24;
      }
      return;
    case 2u:
LABEL_24:
      swift_bridgeObjectRelease();
      return;
    case 3u:
      int v5 = *a1;
      if (*a1 != (void *)1) {
        goto LABEL_9;
      }
      return;
    case 4u:
      int v5 = *a1;
LABEL_9:

      return;
    case 6u:
      swift_bridgeObjectRelease();
      uint64_t v6 = (char *)a1 + *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
      uint64_t v7 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
      uint64_t v8 = *(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8);
      uint64_t v9 = v7;
      float64x2_t v10 = v6;
LABEL_13:
      v8(v10, v9);
      return;
    default:
      return;
  }
}

char *sub_100042FA8(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      uint64_t v6 = (void *)*((void *)a2 + 5);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *((void *)a1 + 5) = v6;
      uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
      uint64_t v8 = *(int *)(v7 + 32);
      uint64_t v9 = &a1[v8];
      float64x2_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
      swift_bridgeObjectRetain();
      id v12 = v6;
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v78 = v11;
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v75 = v7;
        uint64_t v26 = *((void *)v10 + 1);
        *(void *)uint64_t v9 = *(void *)v10;
        *((void *)v9 + 1) = v26;
        uint64_t v27 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
        __dst = &v9[v27];
        id v28 = &v10[v27];
        uint64_t v29 = type metadata accessor for Date();
        uint64_t v30 = *(void *)(v29 - 8);
        uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
        swift_bridgeObjectRetain();
        if (v31(v28, 1, v29))
        {
          uint64_t v32 = sub_100008614(&qword_1000F91C0);
          memcpy(__dst, v28, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v30 + 16))(__dst, v28, v29);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v7 = v75;
        goto LABEL_23;
      }
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v76 = v7;
        uint64_t v33 = *((void *)v10 + 1);
        *(void *)uint64_t v9 = *(void *)v10;
        *((void *)v9 + 1) = v33;
        uint64_t v34 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
        uint64_t v35 = *(int *)(v34 + 20);
        uint64_t v71 = &v9[v35];
        __dsta = (int *)v34;
        uint64_t v70 = &v10[v35];
        uint64_t v36 = type metadata accessor for Date();
        uint64_t v37 = *(void *)(v36 - 8);
        uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
        swift_bridgeObjectRetain();
        if (v38(v70, 1, v36))
        {
          uint64_t v39 = sub_100008614(&qword_1000F91C0);
          memcpy(v71, v70, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v71, v70, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v71, 0, 1, v36);
        }
        uint64_t v7 = v76;
        uint64_t v11 = v78;
        uint64_t v40 = __dsta[6];
        double v41 = &v9[v40];
        uint64_t v42 = &v10[v40];
        uint64_t v43 = *((void *)v42 + 1);
        *(void *)double v41 = *(void *)v42;
        *((void *)v41 + 1) = v43;
        swift_bridgeObjectRetain();
      }
      else
      {
        if (EnumCaseMultiPayload)
        {
          memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_23:
          uint64_t v44 = *(int *)(v7 + 36);
          uint64_t v45 = &a1[v44];
          uint64_t v46 = &a2[v44];
          int v47 = swift_getEnumCaseMultiPayload();
          if (v47 == 2)
          {
            uint64_t v49 = *((void *)v46 + 1);
            *(void *)uint64_t v45 = *(void *)v46;
            *((void *)v45 + 1) = v49;
            uint64_t v50 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
            uint64_t v51 = &v45[v50];
            uint64_t v52 = &v46[v50];
            uint64_t v53 = type metadata accessor for Date();
            uint64_t v54 = *(void *)(v53 - 8);
            uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
            swift_bridgeObjectRetain();
            if (v55(v52, 1, v53))
            {
              uint64_t v56 = sub_100008614(&qword_1000F91C0);
              memcpy(v51, v52, *(void *)(*(void *)(v56 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
            }
          }
          else if (v47 == 1)
          {
            uint64_t v57 = *((void *)v46 + 1);
            *(void *)uint64_t v45 = *(void *)v46;
            *((void *)v45 + 1) = v57;
            uint64_t v58 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
            uint64_t v59 = *(int *)(v58 + 20);
            __dstb = &v45[v59];
            uint64_t v77 = v58;
            uint64_t v60 = &v46[v59];
            uint64_t v61 = type metadata accessor for Date();
            uint64_t v62 = *(void *)(v61 - 8);
            double v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
            swift_bridgeObjectRetain();
            if (v63(v60, 1, v61))
            {
              uint64_t v64 = sub_100008614(&qword_1000F91C0);
              memcpy(__dstb, v60, *(void *)(*(void *)(v64 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v62 + 16))(__dstb, v60, v61);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(__dstb, 0, 1, v61);
            }
            uint64_t v65 = *(int *)(v77 + 24);
            BOOL v66 = &v45[v65];
            uint64_t v67 = &v46[v65];
            uint64_t v68 = *((void *)v67 + 1);
            *(void *)BOOL v66 = *(void *)v67;
            *((void *)v66 + 1) = v68;
            swift_bridgeObjectRetain();
          }
          else
          {
            if (v47)
            {
              memcpy(v45, v46, *(void *)(*(void *)(v11 - 8) + 64));
              goto LABEL_36;
            }
            uint64_t v48 = *((void *)v46 + 1);
            *(void *)uint64_t v45 = *(void *)v46;
            *((void *)v45 + 1) = v48;
            swift_bridgeObjectRetain();
          }
          swift_storeEnumTagMultiPayload();
          goto LABEL_36;
        }
        uint64_t v14 = *((void *)v10 + 1);
        *(void *)uint64_t v9 = *(void *)v10;
        *((void *)v9 + 1) = v14;
        swift_bridgeObjectRetain();
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_23;
    case 2u:
      uint64_t v15 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v15;
      swift_bridgeObjectRetain();
      goto LABEL_36;
    case 3u:
      uint64_t v16 = *(void **)a2;
      if (*(void *)a2 == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        uint64_t v24 = *((void *)a2 + 1);
        *(void *)a1 = v16;
        *((void *)a1 + 1) = v24;
        id v25 = v16;
      }
      goto LABEL_36;
    case 4u:
      long long v17 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v18 = v17;
      goto LABEL_36;
    case 6u:
      *(void *)a1 = *(void *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
      uint64_t v20 = &a1[v19];
      id v21 = &a2[v19];
      uint64_t v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      v23(v20, v21, v22);
LABEL_36:
      swift_storeEnumTagMultiPayload();
      return a1;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
  }
}

char *sub_1000436F8(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100045634((uint64_t)a1, type metadata accessor for ViewServiceInput);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = *(void *)a2;
        a1[8] = a2[8];
        *(void *)a1 = v6;
        *((void *)a1 + 2) = *((void *)a2 + 2);
        *((void *)a1 + 3) = *((void *)a2 + 3);
        *((void *)a1 + 4) = *((void *)a2 + 4);
        uint64_t v7 = (void *)*((void *)a2 + 5);
        *((void *)a1 + 5) = v7;
        uint64_t v8 = type metadata accessor for ActivityDisplayContext(0);
        uint64_t v9 = *(int *)(v8 + 32);
        float64x2_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
        swift_bridgeObjectRetain();
        id v13 = v7;
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v69 = v12;
        if (EnumCaseMultiPayload == 2)
        {
          BOOL v66 = (void *)v8;
          *(void *)float64x2_t v10 = *(void *)v11;
          *((void *)v10 + 1) = *((void *)v11 + 1);
          uint64_t v24 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          __dst = &v10[v24];
          id v25 = &v11[v24];
          uint64_t v26 = type metadata accessor for Date();
          uint64_t v27 = *(void *)(v26 - 8);
          id v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
          swift_bridgeObjectRetain();
          if (v28(v25, 1, v26))
          {
            uint64_t v29 = sub_100008614(&qword_1000F91C0);
            memcpy(__dst, v25, *(void *)(*(void *)(v29 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
          }
          swift_storeEnumTagMultiPayload();
          uint64_t v8 = (uint64_t)v66;
          goto LABEL_24;
        }
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v67 = (void *)v8;
          *(void *)float64x2_t v10 = *(void *)v11;
          *((void *)v10 + 1) = *((void *)v11 + 1);
          uint64_t v30 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          uint64_t v31 = *(int *)(v30 + 20);
          uint64_t v62 = v30;
          __dsta = &v10[v31];
          uint64_t v61 = &v11[v31];
          uint64_t v32 = type metadata accessor for Date();
          uint64_t v33 = *(void *)(v32 - 8);
          uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
          swift_bridgeObjectRetain();
          if (v34(v61, 1, v32))
          {
            uint64_t v35 = sub_100008614(&qword_1000F91C0);
            memcpy(__dsta, v61, *(void *)(*(void *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dsta, v61, v32);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dsta, 0, 1, v32);
          }
          uint64_t v8 = (uint64_t)v67;
          uint64_t v12 = v69;
          uint64_t v36 = *(int *)(v62 + 24);
          uint64_t v37 = &v10[v36];
          uint64_t v38 = &v11[v36];
          *(void *)uint64_t v37 = *(void *)v38;
          *((void *)v37 + 1) = *((void *)v38 + 1);
          swift_bridgeObjectRetain();
        }
        else
        {
          if (EnumCaseMultiPayload)
          {
            memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_24:
            uint64_t v39 = *(int *)(v8 + 36);
            uint64_t v40 = &a1[v39];
            double v41 = &a2[v39];
            int v42 = swift_getEnumCaseMultiPayload();
            if (v42 == 2)
            {
              *(void *)uint64_t v40 = *(void *)v41;
              *((void *)v40 + 1) = *((void *)v41 + 1);
              uint64_t v43 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
              uint64_t v44 = &v40[v43];
              uint64_t v45 = &v41[v43];
              uint64_t v46 = type metadata accessor for Date();
              uint64_t v47 = *(void *)(v46 - 8);
              uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
              swift_bridgeObjectRetain();
              if (v48(v45, 1, v46))
              {
                uint64_t v49 = sub_100008614(&qword_1000F91C0);
                memcpy(v44, v45, *(void *)(*(void *)(v49 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
              }
            }
            else if (v42 == 1)
            {
              *(void *)uint64_t v40 = *(void *)v41;
              *((void *)v40 + 1) = *((void *)v41 + 1);
              uint64_t v50 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
              uint64_t v51 = *(int *)(v50 + 20);
              __dstb = (int *)v50;
              uint64_t v68 = &v40[v51];
              uint64_t v52 = &v41[v51];
              uint64_t v53 = type metadata accessor for Date();
              uint64_t v54 = *(void *)(v53 - 8);
              uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
              swift_bridgeObjectRetain();
              if (v55(v52, 1, v53))
              {
                uint64_t v56 = sub_100008614(&qword_1000F91C0);
                memcpy(v68, v52, *(void *)(*(void *)(v56 - 8) + 64));
              }
              else
              {
                (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v68, v52, v53);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v68, 0, 1, v53);
              }
              uint64_t v57 = __dstb[6];
              uint64_t v58 = &v40[v57];
              uint64_t v59 = &v41[v57];
              *(void *)uint64_t v58 = *(void *)v59;
              *((void *)v58 + 1) = *((void *)v59 + 1);
              swift_bridgeObjectRetain();
            }
            else
            {
              if (v42)
              {
                memcpy(v40, v41, *(void *)(*(void *)(v12 - 8) + 64));
                goto LABEL_37;
              }
              *(void *)uint64_t v40 = *(void *)v41;
              *((void *)v40 + 1) = *((void *)v41 + 1);
              swift_bridgeObjectRetain();
            }
            swift_storeEnumTagMultiPayload();
            goto LABEL_37;
          }
          *(void *)float64x2_t v10 = *(void *)v11;
          *((void *)v10 + 1) = *((void *)v11 + 1);
          swift_bridgeObjectRetain();
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_24;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = *((void *)a2 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_37;
      case 3u:
        uint64_t v15 = *(void **)a2;
        if (*(void *)a2 == 1)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          *(void *)a1 = v15;
          *((void *)a1 + 1) = *((void *)a2 + 1);
          id v23 = v15;
        }
        goto LABEL_37;
      case 4u:
        uint64_t v16 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v17 = v16;
        goto LABEL_37;
      case 6u:
        *(void *)a1 = *(void *)a2;
        uint64_t v18 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
        uint64_t v19 = &a1[v18];
        uint64_t v20 = &a2[v18];
        uint64_t v21 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
        uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        v22(v19, v20, v21);
LABEL_37:
        swift_storeEnumTagMultiPayload();
        return a1;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
    }
  }
  return a1;
}

uint64_t type metadata accessor for ViewServiceInput(uint64_t a1)
{
  return sub_1000094F4(a1, qword_1000F9238);
}

char *sub_100043EEC(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 6)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v19 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    uint64_t v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
    goto LABEL_27;
  }
  if (!EnumCaseMultiPayload)
  {
    *(void *)a1 = *(void *)a2;
    a1[8] = a2[8];
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *((void *)a1 + 5) = *((void *)a2 + 5);
    uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
    uint64_t v8 = *(int *)(v7 + 32);
    uint64_t v9 = &a1[v8];
    float64x2_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
    int v12 = swift_getEnumCaseMultiPayload();
    if (v12 == 2)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      uint64_t v23 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      uint64_t v24 = &v9[v23];
      id v25 = &v10[v23];
      uint64_t v26 = type metadata accessor for Date();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = sub_100008614(&qword_1000F91C0);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
    }
    else
    {
      if (v12 != 1)
      {
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_16:
        uint64_t v29 = *(int *)(v7 + 36);
        uint64_t v30 = &a1[v29];
        uint64_t v31 = &a2[v29];
        int v32 = swift_getEnumCaseMultiPayload();
        if (v32 == 2)
        {
          *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
          uint64_t v40 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
          double v41 = &v30[v40];
          int v42 = &v31[v40];
          uint64_t v43 = type metadata accessor for Date();
          uint64_t v44 = *(void *)(v43 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
          {
            uint64_t v45 = sub_100008614(&qword_1000F91C0);
            memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
          }
LABEL_26:
          swift_storeEnumTagMultiPayload();
          goto LABEL_27;
        }
        if (v32 == 1)
        {
          *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
          uint64_t v33 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          uint64_t v34 = *(int *)(v33 + 20);
          uint64_t v35 = &v30[v34];
          uint64_t v36 = &v31[v34];
          uint64_t v37 = type metadata accessor for Date();
          uint64_t v38 = *(void *)(v37 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
          {
            uint64_t v39 = sub_100008614(&qword_1000F91C0);
            memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
          }
          *(_OWORD *)&v30[*(int *)(v33 + 24)] = *(_OWORD *)&v31[*(int *)(v33 + 24)];
          goto LABEL_26;
        }
        memcpy(v30, v31, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_27:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      uint64_t v13 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v14 = *(int *)(v13 + 20);
      uint64_t v47 = v13;
      __dst = &v9[v14];
      uint64_t v15 = &v10[v14];
      uint64_t v16 = type metadata accessor for Date();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = sub_100008614(&qword_1000F91C0);
        memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(__dst, v15, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      *(_OWORD *)&v9[*(int *)(v47 + 24)] = *(_OWORD *)&v10[*(int *)(v47 + 24)];
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_16;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_1000444D4(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100045634((uint64_t)a1, type metadata accessor for ViewServiceInput);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for NearbySharingInteractionDisplayContext() + 20);
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      uint64_t v22 = type metadata accessor for SFAirDrop.NearbySharingInteraction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
      goto LABEL_28;
    }
    if (!EnumCaseMultiPayload)
    {
      *(void *)a1 = *(void *)a2;
      a1[8] = a2[8];
      *((void *)a1 + 2) = *((void *)a2 + 2);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *((void *)a1 + 5) = *((void *)a2 + 5);
      uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
      uint64_t v8 = *(int *)(v7 + 32);
      uint64_t v9 = &a1[v8];
      float64x2_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
      int v12 = swift_getEnumCaseMultiPayload();
      if (v12 == 2)
      {
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        uint64_t v23 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
        uint64_t v24 = &v9[v23];
        id v25 = &v10[v23];
        uint64_t v26 = type metadata accessor for Date();
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = sub_100008614(&qword_1000F91C0);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
      }
      else
      {
        if (v12 != 1)
        {
          memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_17:
          uint64_t v29 = *(int *)(v7 + 36);
          uint64_t v30 = &a1[v29];
          uint64_t v31 = &a2[v29];
          int v32 = swift_getEnumCaseMultiPayload();
          if (v32 == 2)
          {
            *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
            uint64_t v40 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
            double v41 = &v30[v40];
            int v42 = &v31[v40];
            uint64_t v43 = type metadata accessor for Date();
            uint64_t v44 = *(void *)(v43 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
            {
              uint64_t v45 = sub_100008614(&qword_1000F91C0);
              memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v41, v42, v43);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
            }
LABEL_27:
            swift_storeEnumTagMultiPayload();
            goto LABEL_28;
          }
          if (v32 == 1)
          {
            *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
            uint64_t v33 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
            uint64_t v34 = *(int *)(v33 + 20);
            uint64_t v35 = &v30[v34];
            uint64_t v36 = &v31[v34];
            uint64_t v37 = type metadata accessor for Date();
            uint64_t v38 = *(void *)(v37 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
            {
              uint64_t v39 = sub_100008614(&qword_1000F91C0);
              memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
            }
            *(_OWORD *)&v30[*(int *)(v33 + 24)] = *(_OWORD *)&v31[*(int *)(v33 + 24)];
            goto LABEL_27;
          }
          memcpy(v30, v31, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_28:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        uint64_t v13 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
        uint64_t v14 = *(int *)(v13 + 20);
        uint64_t v47 = v13;
        __dst = &v9[v14];
        uint64_t v15 = &v10[v14];
        uint64_t v16 = type metadata accessor for Date();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
          uint64_t v18 = sub_100008614(&qword_1000F91C0);
          memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 32))(__dst, v15, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
        }
        *(_OWORD *)&v9[*(int *)(v47 + 24)] = *(_OWORD *)&v10[*(int *)(v47 + 24)];
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_17;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100044AEC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100044AFC()
{
  uint64_t result = type metadata accessor for ActivityDisplayContext(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NearbySharingInteractionDisplayContext();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

unint64_t sub_100044BF4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v21 = *(void *)a2;
      uint64_t v22 = *(void *)(a2 + 8);
      uint64_t v23 = *(void *)(a2 + 16);
      uint64_t v24 = *(void *)(a2 + 24);
      uint64_t v25 = *(void *)(a2 + 32);
      uint64_t v26 = *(void *)(a2 + 40);
      uint64_t v27 = *(void *)(a2 + 48);
      char v38 = *(unsigned char *)(a2 + 56);
      sub_100044F54(*(void *)a2, v22, v23, v24, v25, v26, v27, v38);
      *(void *)a1 = v21;
      *(void *)(a1 + 8) = v22;
      *(void *)(a1 + 16) = v23;
      *(void *)(a1 + 24) = v24;
      *(void *)(a1 + 32) = v25;
      *(void *)(a1 + 40) = v26;
      *(void *)(a1 + 48) = v27;
      *(unsigned char *)(a1 + 56) = v38;
      uint64_t v28 = *(int *)(sub_100008614(&qword_1000F9280) + 48);
      uint64_t v29 = a1 + v28;
      uint64_t v30 = a2 + v28;
      uint64_t v31 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v32 = *(int *)(sub_100008614(&qword_1000F9278) + 48);
      uint64_t v33 = a1 + v32;
      uint64_t v34 = a2 + v32;
      uint64_t v35 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 16))(v33, v34, v35);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, (const void *)a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = *(void *)a2;
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      uint64_t v12 = *(void *)(a2 + 32);
      uint64_t v13 = *(void *)(a2 + 40);
      uint64_t v14 = *(void *)(a2 + 48);
      unsigned __int8 v37 = *(unsigned char *)(a2 + 56);
      sub_100044EB8(*(void *)a2, v9, v10, v11, v12, v13, v14, v37);
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v10;
      *(void *)(a1 + 24) = v11;
      *(void *)(a1 + 32) = v12;
      *(void *)(a1 + 40) = v13;
      *(void *)(a1 + 48) = v14;
      *(unsigned char *)(a1 + 56) = v37;
      uint64_t v15 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v15;
      swift_bridgeObjectRetain();
      uint64_t v16 = *(int *)(sub_100008614(&qword_1000F9270) + 64);
      uint64_t v17 = a1 + v16;
      uint64_t v18 = a2 + v16;
      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100044EB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  int v8 = a8 >> 5;
  if (v8 == 2)
  {
    char v9 = a8 & 0x1F;
    return sub_100021050(result, a2, a3, a4, a5, a6, a7, v9);
  }
  else
  {
    if (v8 == 1)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else if (a8 >> 5)
    {
      return result;
    }
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_100044F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8)
  {
    if (a8 != 1) {
      return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_100044FB4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    sub_1000450A8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    long long v4 = &qword_1000F9280;
LABEL_7:
    uint64_t v3 = *(int *)(sub_100008614(v4) + 48);
    goto LABEL_8;
  }
  if (result == 1)
  {
    long long v4 = &qword_1000F9278;
    goto LABEL_7;
  }
  if (result) {
    return result;
  }
  sub_100020184(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  swift_bridgeObjectRelease();
  uint64_t v3 = *(int *)(sub_100008614(&qword_1000F9270) + 64);
LABEL_8:
  uint64_t v5 = a1 + v3;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_1000450A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if (a8)
  {
    if (a8 != 1) {
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100045108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v19 = *(void *)a2;
    uint64_t v20 = *(void *)(a2 + 8);
    uint64_t v21 = *(void *)(a2 + 16);
    uint64_t v22 = *(void *)(a2 + 24);
    uint64_t v23 = *(void *)(a2 + 32);
    uint64_t v24 = *(void *)(a2 + 40);
    uint64_t v25 = *(void *)(a2 + 48);
    char v36 = *(unsigned char *)(a2 + 56);
    sub_100044F54(*(void *)a2, v20, v21, v22, v23, v24, v25, v36);
    *(void *)a1 = v19;
    *(void *)(a1 + 8) = v20;
    *(void *)(a1 + 16) = v21;
    *(void *)(a1 + 24) = v22;
    *(void *)(a1 + 32) = v23;
    *(void *)(a1 + 40) = v24;
    *(void *)(a1 + 48) = v25;
    *(unsigned char *)(a1 + 56) = v36;
    uint64_t v26 = *(int *)(sub_100008614(&qword_1000F9280) + 48);
    uint64_t v27 = a1 + v26;
    uint64_t v28 = a2 + v26;
    uint64_t v29 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v30 = *(int *)(sub_100008614(&qword_1000F9278) + 48);
    uint64_t v31 = a1 + v30;
    uint64_t v32 = a2 + v30;
    uint64_t v33 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    uint64_t v11 = *(void *)(a2 + 32);
    uint64_t v12 = *(void *)(a2 + 40);
    uint64_t v13 = *(void *)(a2 + 48);
    unsigned __int8 v35 = *(unsigned char *)(a2 + 56);
    sub_100044EB8(*(void *)a2, v8, v9, v10, v11, v12, v13, v35);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = v12;
    *(void *)(a1 + 48) = v13;
    *(unsigned char *)(a1 + 56) = v35;
    uint64_t v14 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v14;
    swift_bridgeObjectRetain();
    uint64_t v15 = *(int *)(sub_100008614(&qword_1000F9270) + 64);
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100045388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100045634(a1, type metadata accessor for ViewServiceOutput);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v18 = *(void *)a2;
      uint64_t v19 = *(void *)(a2 + 8);
      uint64_t v20 = *(void *)(a2 + 16);
      uint64_t v21 = *(void *)(a2 + 24);
      uint64_t v22 = *(void *)(a2 + 32);
      uint64_t v23 = *(void *)(a2 + 40);
      uint64_t v24 = *(void *)(a2 + 48);
      char v35 = *(unsigned char *)(a2 + 56);
      sub_100044F54(*(void *)a2, v19, v20, v21, v22, v23, v24, v35);
      *(void *)a1 = v18;
      *(void *)(a1 + 8) = v19;
      *(void *)(a1 + 16) = v20;
      *(void *)(a1 + 24) = v21;
      *(void *)(a1 + 32) = v22;
      *(void *)(a1 + 40) = v23;
      *(void *)(a1 + 48) = v24;
      *(unsigned char *)(a1 + 56) = v35;
      uint64_t v25 = *(int *)(sub_100008614(&qword_1000F9280) + 48);
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      uint64_t v28 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v29 = *(int *)(sub_100008614(&qword_1000F9278) + 48);
      uint64_t v30 = a1 + v29;
      uint64_t v31 = a2 + v29;
      uint64_t v32 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      uint64_t v11 = *(void *)(a2 + 32);
      uint64_t v12 = *(void *)(a2 + 40);
      uint64_t v13 = *(void *)(a2 + 48);
      unsigned __int8 v34 = *(unsigned char *)(a2 + 56);
      sub_100044EB8(*(void *)a2, v8, v9, v10, v11, v12, v13, v34);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v9;
      *(void *)(a1 + 24) = v10;
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v12;
      *(void *)(a1 + 48) = v13;
      *(unsigned char *)(a1 + 56) = v34;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      uint64_t v14 = *(int *)(sub_100008614(&qword_1000F9270) + 64);
      uint64_t v15 = a1 + v14;
      uint64_t v16 = a2 + v14;
      uint64_t v17 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100045634(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for ViewServiceOutput(uint64_t a1)
{
  return sub_1000094F4(a1, qword_1000F92F8);
}

_OWORD *sub_1000456B4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    long long v12 = a2[1];
    *a1 = *a2;
    a1[1] = v12;
    a1[2] = a2[2];
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    uint64_t v13 = *(int *)(sub_100008614(&qword_1000F9280) + 48);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v17 = *(int *)(sub_100008614(&qword_1000F9278) + 48);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    long long v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    a1[4] = a2[4];
    uint64_t v8 = *(int *)(sub_100008614(&qword_1000F9270) + 64);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *sub_1000458A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100045634((uint64_t)a1, type metadata accessor for ViewServiceOutput);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      long long v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      a1[2] = a2[2];
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      uint64_t v13 = *(int *)(sub_100008614(&qword_1000F9280) + 48);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v17 = *(int *)(sub_100008614(&qword_1000F9278) + 48);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      a1[2] = a2[2];
      *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      a1[4] = a2[4];
      uint64_t v8 = *(int *)(sub_100008614(&qword_1000F9270) + 64);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100045AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100045AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_100045B00()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v5 = &v4;
    swift_getTupleTypeLayout2();
    uint64_t v6 = &v3;
    swift_getTupleTypeLayout2();
    long long v7 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CardMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC)
  {
    unsigned int v2 = a2 + 4;
    if (a2 + 4 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 4;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x100045C98);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 4;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 3) {
    unsigned int v8 = v7 - 2;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 3) {
    return v8 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for CardMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFC) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v7 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x100045D80);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t sub_100045DA8(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 3) {
    return v1 - 2;
  }
  else {
    return 0;
  }
}

unsigned char *sub_100045DBC(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardMode()
{
  return &type metadata for CardMode;
}

uint64_t sub_100045DDC(char a1)
{
  if (a1 == 3) {
    return 0x726F737365636361;
  }
  if (a1 == 4) {
    return 1701602409;
  }
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x736F6C4365766F6DLL;
    }
    else {
      uint64_t v3 = 0x6574656C706D6F63;
    }
    if (a1 == 1) {
      unint64_t v4 = 0xEA00000000007265;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x6F72746E69;
  }
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 10528;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  return 0xD000000000000015;
}

uint64_t sub_100045F04(void *a1, int a2)
{
  int v28 = a2;
  uint64_t v26 = sub_100008614(&qword_1000F9550);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v3);
  uint64_t v23 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100008614(&qword_1000F9558);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v5);
  unsigned int v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008614(&qword_1000F9560);
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100008614(&qword_1000F9568);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10004B7FC();
  char v17 = v28;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v17 == 4)
  {
    char v32 = 2;
    sub_10004B850();
    uint64_t v18 = v23;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v18, v26);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  if (v17 == 3)
  {
    char v29 = 0;
    sub_10004B94C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
  char v31 = 1;
  sub_10004B8A4();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  char v30 = v17;
  sub_10004B9A0();
  uint64_t v20 = v27;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t sub_1000462DC(uint64_t a1)
{
  unint64_t v2 = sub_10004B94C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100046318(uint64_t a1)
{
  unint64_t v2 = sub_10004B94C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100046354()
{
  uint64_t v1 = 0x6F69746163756465;
  if (*v0 != 1) {
    uint64_t v1 = 1701602409;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x726F737365636361;
  }
}

uint64_t sub_1000463B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10004B0E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000463DC(uint64_t a1)
{
  unint64_t v2 = sub_10004B7FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100046418(uint64_t a1)
{
  unint64_t v2 = sub_10004B7FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004645C()
{
  return 12383;
}

uint64_t sub_10004646C(uint64_t a1)
{
  unint64_t v2 = sub_10004B8A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000464A8(uint64_t a1)
{
  unint64_t v2 = sub_10004B8A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000464E4(uint64_t a1)
{
  unint64_t v2 = sub_10004B850();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100046520(uint64_t a1)
{
  unint64_t v2 = sub_10004B850();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004655C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10004B254(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100046588(void *a1)
{
  return sub_100045F04(a1, *v1);
}

uint64_t sub_1000465A4()
{
  return sub_100045DDC(*v0);
}

BOOL sub_1000465AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  if (v2 == 4) {
    return v3 == 4;
  }
  if (v2 == 3) {
    return v3 == 3;
  }
  if ((v3 - 3) < 2) {
    return 0;
  }
  return v2 == v3;
}

unint64_t sub_100046600(char a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x65646F4D64726163;
      break;
    case 2:
      unint64_t result = 0x7373696D736964;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x6E6F70736552726DLL;
      break;
    case 5:
      unint64_t result = 1735289200;
      break;
    case 6:
      unint64_t result = 0x73736572676F7270;
      break;
    case 7:
      unint64_t result = 0xD000000000000026;
      break;
    default:
      return result;
  }
  return result;
}

void sub_10004670C(void *a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F93D8);
  uint64_t v95 = *(void *)(v2 - 8);
  uint64_t v96 = v2;
  __chkstk_darwin(v2, v3);
  long long v94 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for NearbySharingInteractionDisplayContext();
  __chkstk_darwin(v92, v5);
  uint64_t v93 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008614(&qword_1000F93E0);
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v89 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F93E8);
  uint64_t v85 = *(void *)(v10 - 8);
  uint64_t v86 = v10;
  __chkstk_darwin(v10, v11);
  long long v82 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100008614(&qword_1000F93F0);
  uint64_t v87 = *(void *)(v13 - 8);
  uint64_t v88 = v13;
  __chkstk_darwin(v13, v14);
  long long v84 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_100008614(&qword_1000F93F8);
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v83, v16);
  uint64_t v80 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100008614(&qword_1000F9400);
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79, v18);
  uint64_t v77 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_100008614(&qword_1000F9408);
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76, v20);
  double v73 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_100008614(&qword_1000F9410);
  uint64_t v72 = *(void *)(v74 - 8);
  __chkstk_darwin(v74, v22);
  uint64_t v24 = (char *)&v71 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v25, v26);
  int v28 = (char *)&v71 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for ViewServiceInput(0);
  __chkstk_darwin(v29, v30);
  char v32 = (char *)&v71 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100008614(&qword_1000F9418);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v98 = v33;
  uint64_t v99 = v34;
  __chkstk_darwin(v33, v35);
  unsigned __int8 v37 = (char *)&v71 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10004A794();
  long long v97 = v37;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10004AF34(v100, (uint64_t)v32, type metadata accessor for ViewServiceInput);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v41 = *v32;
      LOBYTE(v101) = 1;
      sub_10004AA34();
      int v42 = v73;
      uint64_t v44 = v97;
      uint64_t v43 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v101) = v41;
      sub_10004ABEC();
      uint64_t v45 = v76;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v42, v45);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v44, v43);
      break;
    case 2u:
      LOBYTE(v101) = 2;
      sub_10004A9E0();
      uint64_t v46 = v77;
      uint64_t v48 = v97;
      uint64_t v47 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v49 = v79;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v46, v49);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v48, v47);
      break;
    case 3u:
      uint64_t v51 = *(void **)v32;
      uint64_t v50 = *((void *)v32 + 1);
      LOBYTE(v101) = 3;
      sub_10004A938();
      uint64_t v52 = v80;
      uint64_t v54 = v97;
      uint64_t v53 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v101 = v51;
      uint64_t v102 = v50;
      sub_10004AB98();
      uint64_t v55 = v83;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v52, v55);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v54, v53);
      sub_10001CB40(v51);
      break;
    case 4u:
      uint64_t v56 = *(void **)v32;
      LOBYTE(v101) = 4;
      sub_10004A8E4();
      uint64_t v57 = v84;
      uint64_t v59 = v97;
      uint64_t v58 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v101 = v56;
      sub_1000366B0();
      uint64_t v60 = v88;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v57, v60);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v59, v58);

      break;
    case 5u:
      LOBYTE(v101) = 6;
      sub_10004A83C();
      uint64_t v61 = v89;
      double v63 = v97;
      uint64_t v62 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v64 = v91;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v90 + 8))(v61, v64);
      goto LABEL_9;
    case 6u:
      uint64_t v65 = v93;
      sub_10004AB30((uint64_t)v32, v93, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
      LOBYTE(v101) = 7;
      sub_10004A7E8();
      BOOL v66 = v94;
      double v63 = v97;
      uint64_t v62 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10004AFF0(&qword_1000F8C38, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionDisplayContext);
      uint64_t v67 = v96;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v66, v67);
      sub_100045634(v65, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
LABEL_9:
      (*(void (**)(char *, uint64_t))(v99 + 8))(v63, v62);
      break;
    case 7u:
      LOBYTE(v101) = 5;
      sub_10004A890();
      uint64_t v68 = v82;
      uint64_t v70 = v97;
      uint64_t v69 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v85 + 8))(v68, v86);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v70, v69);
      break;
    default:
      sub_10004AB30((uint64_t)v32, (uint64_t)v28, type metadata accessor for ActivityDisplayContext);
      LOBYTE(v101) = 0;
      sub_10004AADC();
      uint64_t v39 = v97;
      uint64_t v38 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10004AFF0(&qword_1000F9430, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext);
      uint64_t v40 = v74;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v24, v40);
      sub_100045634((uint64_t)v28, type metadata accessor for ActivityDisplayContext);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v39, v38);
      break;
  }
}

uint64_t sub_10004733C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v134 = a2;
  uint64_t v3 = sub_100008614(&qword_1000F9330);
  uint64_t v120 = *(void *)(v3 - 8);
  uint64_t v121 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v129 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_100008614(&qword_1000F9338);
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin(v119, v6);
  float v128 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_100008614(&qword_1000F9340);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115, v8);
  long long v127 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_100008614(&qword_1000F9348);
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117, v10);
  long long v126 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_100008614(&qword_1000F9350);
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113, v12);
  uint64_t v133 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_100008614(&qword_1000F9358);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111, v14);
  uint64_t v125 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100008614(&qword_1000F9360);
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109, v16);
  uint64_t v124 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = sub_100008614(&qword_1000F9368);
  uint64_t v106 = *(void *)(v107 - 8);
  __chkstk_darwin(v107, v18);
  uint64_t v123 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = sub_100008614(&qword_1000F9370);
  uint64_t v130 = *(void *)(v132 - 8);
  __chkstk_darwin(v132, v20);
  uint64_t v22 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for ViewServiceInput(0);
  uint64_t v24 = __chkstk_darwin(v131, v23);
  uint64_t v122 = (char *)&v99 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v104 = (_DWORD *)((char *)&v99 - v28);
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v105 = (unsigned char **)((char *)&v99 - v31);
  uint64_t v33 = __chkstk_darwin(v30, v32);
  uint64_t v35 = (char *)&v99 - v34;
  uint64_t v37 = __chkstk_darwin(v33, v36);
  uint64_t v39 = (uint64_t *)((char *)&v99 - v38);
  uint64_t v41 = __chkstk_darwin(v37, v40);
  uint64_t v43 = (char *)&v99 - v42;
  uint64_t v45 = __chkstk_darwin(v41, v44);
  uint64_t v47 = (char *)&v99 - v46;
  __chkstk_darwin(v45, v48);
  uint64_t v50 = (char *)&v99 - v49;
  uint64_t v51 = a1[3];
  uint64_t v135 = a1;
  sub_10000AEFC(a1, v51);
  sub_10004A794();
  uint64_t v52 = v136;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v52)
  {
LABEL_22:
    uint64_t v61 = (uint64_t)v135;
    return sub_10000AF94(v61);
  }
  uint64_t v99 = v43;
  uint64_t v100 = v39;
  uint64_t v102 = v47;
  uint64_t v101 = v35;
  uint64_t v53 = v133;
  uint64_t v136 = 0;
  uint64_t v54 = v131;
  long long v103 = v50;
  uint64_t v55 = v134;
  uint64_t v56 = v132;
  uint64_t v57 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v57 + 16) != 1)
  {
    uint64_t v65 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v67 = v66;
    sub_100008614(&qword_1000F8A40);
    *uint64_t v67 = v54;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v65 - 8) + 104))(v67, enum case for DecodingError.typeMismatch(_:), v65);
    swift_willThrow();
LABEL_21:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v130 + 8))(v22, v56);
    goto LABEL_22;
  }
  uint64_t v58 = v136;
  switch(*(unsigned char *)(v57 + 32))
  {
    case 1:
      LOBYTE(v137) = 1;
      sub_10004AA34();
      uint64_t v68 = v124;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v58) {
        goto LABEL_21;
      }
      sub_10004AA88();
      uint64_t v69 = v109;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v108 + 8))(v68, v69);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v130 + 8))(v22, v56);
      uint64_t v70 = v99;
      *uint64_t v99 = v137;
      goto LABEL_24;
    case 2:
      LOBYTE(v137) = 2;
      sub_10004A9E0();
      uint64_t v71 = v125;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v58) {
        goto LABEL_21;
      }
      uint64_t v72 = v71;
      uint64_t v73 = v111;
      uint64_t v89 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v90 = *(void (**)(char *, uint64_t))(v110 + 8);
      uint64_t v136 = v91;
      v90(v72, v73);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v130 + 8))(v22, v56);
      uint64_t v92 = v100;
      uint64_t v93 = v136;
      *uint64_t v100 = v89;
      v92[1] = v93;
      swift_storeEnumTagMultiPayload();
      uint64_t v94 = (uint64_t)v92;
      goto LABEL_25;
    case 3:
      LOBYTE(v137) = 3;
      sub_10004A938();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v58) {
        goto LABEL_21;
      }
      sub_10004A98C();
      uint64_t v74 = v53;
      uint64_t v75 = v113;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v76 = v130;
      (*(void (**)(char *, uint64_t))(v112 + 8))(v74, v75);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v76 + 8))(v22, v56);
      uint64_t v70 = v101;
      _OWORD *v101 = v137;
      goto LABEL_24;
    case 4:
      LOBYTE(v137) = 4;
      sub_10004A8E4();
      uint64_t v77 = v126;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v58) {
        goto LABEL_21;
      }
      sub_100036608();
      uint64_t v78 = v77;
      uint64_t v79 = v117;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v80 = v130;
      (*(void (**)(char *, uint64_t))(v116 + 8))(v78, v79);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v22, v56);
      uint64_t v70 = v105;
      *uint64_t v105 = v137;
      goto LABEL_24;
    case 5:
      LOBYTE(v137) = 5;
      sub_10004A890();
      uint64_t v81 = v127;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v58) {
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v114 + 8))(v81, v115);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v130 + 8))(v22, v56);
      uint64_t v64 = (uint64_t)v103;
      swift_storeEnumTagMultiPayload();
      goto LABEL_26;
    case 6:
      LOBYTE(v137) = 6;
      sub_10004A83C();
      long long v82 = v128;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v58) {
        goto LABEL_21;
      }
      uint64_t v83 = v82;
      uint64_t v84 = v119;
      KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v85 = v130;
      int v96 = v95;
      (*(void (**)(char *, uint64_t))(v118 + 8))(v83, v84);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v85 + 8))(v22, v56);
      uint64_t v70 = v104;
      _DWORD *v104 = v96;
LABEL_24:
      swift_storeEnumTagMultiPayload();
      uint64_t v94 = (uint64_t)v70;
LABEL_25:
      uint64_t v64 = (uint64_t)v103;
      sub_10004AB30(v94, (uint64_t)v103, type metadata accessor for ViewServiceInput);
LABEL_26:
      uint64_t v61 = (uint64_t)v135;
      break;
    case 7:
      LOBYTE(v137) = 7;
      sub_10004A7E8();
      uint64_t v86 = v129;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v58) {
        goto LABEL_21;
      }
      type metadata accessor for NearbySharingInteractionDisplayContext();
      sub_10004AFF0(&qword_1000F8C28, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionDisplayContext);
      uint64_t v87 = v121;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v86, v87);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v130 + 8))(v22, v56);
      long long v97 = v122;
      swift_storeEnumTagMultiPayload();
      uint64_t v98 = (uint64_t)v97;
      uint64_t v64 = (uint64_t)v103;
      sub_10004AB30(v98, (uint64_t)v103, type metadata accessor for ViewServiceInput);
      uint64_t v55 = v134;
      uint64_t v61 = (uint64_t)v135;
      break;
    default:
      LOBYTE(v137) = 0;
      sub_10004AADC();
      uint64_t v59 = v123;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v58) {
        goto LABEL_21;
      }
      type metadata accessor for ActivityDisplayContext(0);
      sub_10004AFF0(&qword_1000F93D0, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext);
      uint64_t v60 = v107;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v59, v60);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v130 + 8))(v22, v56);
      uint64_t v61 = (uint64_t)v135;
      uint64_t v62 = (uint64_t)v102;
      swift_storeEnumTagMultiPayload();
      uint64_t v63 = v62;
      uint64_t v64 = (uint64_t)v103;
      sub_10004AB30(v63, (uint64_t)v103, type metadata accessor for ViewServiceInput);
      break;
  }
  sub_10004AB30(v64, v55, type metadata accessor for ViewServiceInput);
  return sub_10000AF94(v61);
}

unint64_t sub_10004836C(char a1)
{
  unint64_t result = 0x6E65764564726163;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64656873696E6966;
      break;
    case 2:
      unint64_t result = 1735289200;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100048424(void *a1)
{
  uint64_t v89 = sub_100008614(&qword_1000F94B8);
  uint64_t v79 = *(void *)(v89 - 8);
  __chkstk_darwin(v89, v2);
  uint64_t v88 = (uint64_t)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = sub_100008614(&qword_1000F94C0);
  uint64_t v78 = *(void *)(v87 - 8);
  __chkstk_darwin(v87, v4);
  uint64_t v85 = (uint64_t)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_100008614(&qword_1000F94C8);
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82, v6);
  uint64_t v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008614(&qword_1000F94D0);
  uint64_t v80 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = sub_100008614(&qword_1000F94D8);
  uint64_t v77 = *(void *)(v86 - 8);
  __chkstk_darwin(v86, v13);
  uint64_t v84 = (uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for Date();
  uint64_t v92 = *(void *)(v94 - 8);
  uint64_t v16 = __chkstk_darwin(v94, v15);
  uint64_t v90 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v83 = (uint64_t)&v76 - v20;
  __chkstk_darwin(v19, v21);
  uint64_t v91 = (char *)&v76 - v22;
  uint64_t v23 = type metadata accessor for ViewServiceOutput(0);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = sub_100008614(&qword_1000F94E0);
  uint64_t v93 = *(void *)(v98 - 8);
  __chkstk_darwin(v98, v27);
  uint64_t v29 = (char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10004AC40();
  long long v97 = v29;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10004AF34(v96, (uint64_t)v26, type metadata accessor for ViewServiceOutput);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v45 = *v26;
      uint64_t v46 = sub_100008614(&qword_1000F9278);
      uint64_t v47 = v92;
      uint64_t v48 = v83;
      uint64_t v49 = v94;
      (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(v83, &v26[*(int *)(v46 + 48)], v94);
      LOBYTE(v99) = 3;
      sub_10004AD3C();
      uint64_t v50 = v85;
      uint64_t v52 = v97;
      uint64_t v51 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v99) = v45;
      char v107 = 0;
      sub_10004B038();
      uint64_t v53 = v87;
      uint64_t v54 = v95;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (!v54)
      {
        LOBYTE(v99) = 1;
        sub_10004AFF0(&qword_1000F94F0, (void (*)(uint64_t))&type metadata accessor for Date);
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v50, v53);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v49);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v52, v51);
      break;
    case 2u:
      uint64_t v55 = *(void *)v26;
      uint64_t v56 = *((void *)v26 + 1);
      uint64_t v57 = *((void *)v26 + 3);
      uint64_t v96 = *((void *)v26 + 2);
      uint64_t v58 = *((void *)v26 + 4);
      uint64_t v91 = (char *)*((void *)v26 + 5);
      uint64_t v59 = *((void *)v26 + 6);
      LODWORD(v87) = v26[56];
      uint64_t v60 = sub_100008614(&qword_1000F9280);
      uint64_t v61 = v92;
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v90, &v26[*(int *)(v60 + 48)], v94);
      LOBYTE(v99) = 4;
      sub_10004AC94();
      uint64_t v62 = v88;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v86 = v55;
      uint64_t v99 = v55;
      uint64_t v100 = v56;
      uint64_t v85 = v56;
      uint64_t v63 = v96;
      uint64_t v101 = v96;
      uint64_t v102 = v57;
      uint64_t v84 = v58;
      long long v103 = (char *)v58;
      uint64_t v64 = (uint64_t)v91;
      uint64_t v104 = v91;
      uint64_t v105 = v59;
      uint64_t v83 = v59;
      char v65 = v87;
      char v106 = v87;
      char v107 = 0;
      sub_10004AF9C();
      uint64_t v66 = v89;
      uint64_t v67 = v95;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v67)
      {
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v62, v66);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v90, v94);
        (*(void (**)(char *, uint64_t))(v93 + 8))(v97, v98);
        uint64_t result = sub_1000450A8(v86, v85, v63, v57, v84, v64, v83, v65);
      }
      else
      {
        sub_1000450A8(v86, v85, v63, v57, v84, v64, v83, v65);
        LOBYTE(v99) = 1;
        sub_10004AFF0(&qword_1000F94F0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v71 = v90;
        uint64_t v72 = v94;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v62, v66);
        (*(void (**)(char *, uint64_t))(v92 + 8))(v71, v72);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v97, v98);
      }
      break;
    case 3u:
      LOBYTE(v99) = 1;
      sub_10004AE38();
      uint64_t v69 = v97;
      uint64_t v68 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v80 + 8))(v12, v9);
      goto LABEL_11;
    case 4u:
      LOBYTE(v99) = 2;
      sub_10004ADE4();
      uint64_t v69 = v97;
      uint64_t v68 = v98;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v8, v82);
LABEL_11:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v69, v68);
      break;
    default:
      uint64_t v30 = *(void *)v26;
      uint64_t v31 = *((void *)v26 + 1);
      uint64_t v32 = *((void *)v26 + 3);
      uint64_t v96 = *((void *)v26 + 2);
      uint64_t v33 = (char *)*((void *)v26 + 4);
      uint64_t v34 = *((void *)v26 + 5);
      uint64_t v89 = *((void *)v26 + 6);
      uint64_t v90 = v33;
      int v35 = v26[56];
      uint64_t v80 = *((void *)v26 + 8);
      uint64_t v81 = *((void *)v26 + 9);
      uint64_t v36 = sub_100008614(&qword_1000F9270);
      uint64_t v37 = v92;
      (*(void (**)(char *, char *, uint64_t))(v92 + 32))(v91, &v26[*(int *)(v36 + 64)], v94);
      LOBYTE(v99) = 0;
      sub_10004AE8C();
      uint64_t v38 = v84;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v87 = v31;
      uint64_t v88 = v30;
      uint64_t v99 = v30;
      uint64_t v100 = v31;
      uint64_t v39 = v96;
      uint64_t v101 = v96;
      uint64_t v102 = v32;
      uint64_t v85 = v32;
      uint64_t v40 = (uint64_t)v90;
      long long v103 = v90;
      uint64_t v104 = (char *)v34;
      uint64_t v83 = v34;
      uint64_t v41 = v89;
      uint64_t v105 = v89;
      LODWORD(v82) = v35;
      char v106 = v35;
      char v107 = 0;
      sub_10004B08C();
      uint64_t v42 = v86;
      uint64_t v43 = v95;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      if (v43)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v38, v42);
        (*(void (**)(char *, uint64_t))(v37 + 8))(v91, v94);
        (*(void (**)(char *, uint64_t))(v93 + 8))(v97, v98);
        uint64_t result = sub_100020184(v88, v87, v39, v85, v40, v83, v41, v82);
      }
      else
      {
        uint64_t v70 = v98;
        sub_100020184(v88, v87, v39, v85, v40, v83, v41, v82);
        LOBYTE(v99) = 1;
        KeyedEncodingContainer.encode(_:forKey:)();
        swift_bridgeObjectRelease();
        LOBYTE(v99) = 2;
        sub_10004AFF0(&qword_1000F94F0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v73 = v91;
        uint64_t v74 = v94;
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        uint64_t v75 = v92;
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v38, v42);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v73, v74);
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v97, v70);
      }
      break;
  }
  return result;
}

uint64_t sub_1000490C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v95 = a2;
  uint64_t v94 = sub_100008614(&qword_1000F9438);
  uint64_t v87 = *(void *)(v94 - 8);
  __chkstk_darwin(v94, v3);
  uint64_t v102 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = sub_100008614(&qword_1000F9440);
  uint64_t v101 = *(void *)(v93 - 8);
  __chkstk_darwin(v93, v5);
  uint64_t v99 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008614(&qword_1000F9448);
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  __chkstk_darwin(v7, v8);
  long long v97 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000F9450);
  uint64_t v88 = *(void *)(v10 - 8);
  uint64_t v89 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v96 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_100008614(&qword_1000F9458);
  uint64_t v86 = *(void *)(v92 - 8);
  __chkstk_darwin(v92, v13);
  uint64_t v98 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = sub_100008614(&qword_1000F9460);
  uint64_t v100 = *(void *)(v103 - 8);
  __chkstk_darwin(v103, v15);
  uint64_t v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ViewServiceOutput(0);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v26 = (char *)&v80 - v25;
  uint64_t v28 = __chkstk_darwin(v24, v27);
  uint64_t v30 = (char *)&v80 - v29;
  __chkstk_darwin(v28, v31);
  uint64_t v33 = (char *)&v80 - v32;
  uint64_t v34 = a1[3];
  uint64_t v104 = a1;
  sub_10000AEFC(a1, v34);
  sub_10004AC40();
  uint64_t v35 = v105;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v105 = v35;
  if (v35) {
    goto LABEL_22;
  }
  uint64_t v81 = v26;
  uint64_t v82 = v22;
  uint64_t v83 = v30;
  uint64_t v37 = v101;
  uint64_t v36 = v102;
  uint64_t v84 = v33;
  uint64_t v85 = v18;
  uint64_t v38 = v100;
  uint64_t v39 = v103;
  uint64_t v40 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v40 + 16) != 1)
  {
    uint64_t v47 = type metadata accessor for DecodingError();
    uint64_t v48 = v39;
    uint64_t v49 = swift_allocError();
    uint64_t v51 = v50;
    sub_100008614(&qword_1000F8A40);
    *uint64_t v51 = v85;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v47 - 8) + 104))(v51, enum case for DecodingError.typeMismatch(_:), v47);
    uint64_t v105 = v49;
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v48);
LABEL_22:
    uint64_t v58 = (uint64_t)v104;
    return sub_10000AF94(v58);
  }
  uint64_t v41 = v38;
  switch(*(unsigned char *)(v40 + 32))
  {
    case 1:
      char v110 = 1;
      sub_10004AE38();
      uint64_t v52 = v96;
      uint64_t v53 = v105;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v105 = v53;
      if (v53) {
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v88 + 8))(v52, v89);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v39);
      uint64_t v54 = (uint64_t)v84;
      goto LABEL_12;
    case 2:
      char v111 = 2;
      sub_10004ADE4();
      uint64_t v55 = v97;
      uint64_t v56 = v105;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v105 = v56;
      if (v56) {
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v90 + 8))(v55, v91);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v39);
      uint64_t v54 = (uint64_t)v84;
LABEL_12:
      swift_storeEnumTagMultiPayload();
      goto LABEL_13;
    case 3:
      uint64_t v59 = v37;
      char v114 = 3;
      sub_10004AD3C();
      uint64_t v60 = v99;
      uint64_t v61 = v105;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v105 = v61;
      if (v61) {
        goto LABEL_21;
      }
      char v113 = 0;
      sub_10004AD90();
      uint64_t v62 = (uint64_t)v81;
      uint64_t v63 = v93;
      uint64_t v64 = v105;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v105 = v64;
      if (v64) {
        goto LABEL_17;
      }
      sub_100008614(&qword_1000F9278);
      type metadata accessor for Date();
      char v112 = 1;
      sub_10004AFF0(&qword_1000F9480, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v63 = v93;
      uint64_t v65 = v105;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v105 = v65;
      if (v65)
      {
LABEL_17:
        (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v63);
        goto LABEL_21;
      }
      (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v63);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v39);
      swift_storeEnumTagMultiPayload();
      uint64_t v75 = v62;
      goto LABEL_32;
    case 4:
      char v117 = 4;
      sub_10004AC94();
      uint64_t v66 = v105;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v105 = v66;
      if (v66) {
        goto LABEL_21;
      }
      char v116 = 0;
      sub_10004ACE8();
      uint64_t v67 = (uint64_t)v82;
      uint64_t v68 = v94;
      uint64_t v69 = v36;
      uint64_t v70 = v105;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v105 = v70;
      if (v70)
      {
        (*(void (**)(char *, uint64_t))(v87 + 8))(v36, v68);
        goto LABEL_21;
      }
      sub_100008614(&qword_1000F9280);
      type metadata accessor for Date();
      char v115 = 1;
      sub_10004AFF0(&qword_1000F9480, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v73 = v94;
      uint64_t v74 = v105;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v105 = v74;
      if (v74)
      {
        (*(void (**)(char *, uint64_t))(v87 + 8))(v69, v73);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v39);
        sub_1000450A8(*(void *)v67, *(void *)(v67 + 8), *(void *)(v67 + 16), *(void *)(v67 + 24), *(void *)(v67 + 32), *(void *)(v67 + 40), *(void *)(v67 + 48), *(unsigned char *)(v67 + 56));
        goto LABEL_22;
      }
      (*(void (**)(char *, uint64_t))(v87 + 8))(v69, v73);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v39);
      swift_storeEnumTagMultiPayload();
      uint64_t v75 = v67;
      goto LABEL_32;
    default:
      char v109 = 0;
      sub_10004AE8C();
      uint64_t v42 = v98;
      uint64_t v43 = v105;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v105 = v43;
      if (v43) {
        goto LABEL_21;
      }
      char v108 = 0;
      sub_10004AEE0();
      uint64_t v44 = (uint64_t)v83;
      uint64_t v45 = v92;
      uint64_t v46 = v105;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v105 = v46;
      if (v46)
      {
        (*(void (**)(char *, uint64_t))(v86 + 8))(v42, v45);
LABEL_21:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v39);
        goto LABEL_22;
      }
      char v107 = 1;
      uint64_t v72 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v105 = 0;
      uint64_t v76 = v72;
      uint64_t v78 = v77;
      sub_100008614(&qword_1000F9270);
      *(void *)(v44 + 64) = v76;
      *(void *)(v44 + 72) = v78;
      type metadata accessor for Date();
      char v106 = 2;
      sub_10004AFF0(&qword_1000F9480, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v79 = v105;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v42, v45);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v103);
      uint64_t v105 = v79;
      if (v79)
      {
        swift_bridgeObjectRelease();
        sub_100020184(*(void *)v44, *(void *)(v44 + 8), *(void *)(v44 + 16), *(void *)(v44 + 24), *(void *)(v44 + 32), *(void *)(v44 + 40), *(void *)(v44 + 48), *(unsigned char *)(v44 + 56));
        goto LABEL_22;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v75 = v44;
LABEL_32:
      uint64_t v54 = (uint64_t)v84;
      sub_10004AB30(v75, (uint64_t)v84, type metadata accessor for ViewServiceOutput);
LABEL_13:
      uint64_t v57 = (uint64_t)v104;
      sub_10004AB30(v54, v95, type metadata accessor for ViewServiceOutput);
      uint64_t v58 = v57;
      break;
  }
  return sub_10000AF94(v58);
}

uint64_t sub_100049DBC(uint64_t a1)
{
  unint64_t v2 = sub_10004AADC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100049DF8(uint64_t a1)
{
  unint64_t v2 = sub_10004AADC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100049E34(uint64_t a1)
{
  unint64_t v2 = sub_10004AA34();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100049E70(uint64_t a1)
{
  unint64_t v2 = sub_10004AA34();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100049EAC()
{
  return sub_100046600(*v0);
}

uint64_t sub_100049EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10004D2C8(a1, a2);
  *a3 = result;
  return result;
}

void sub_100049EDC(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100049EE8(uint64_t a1)
{
  unint64_t v2 = sub_10004A794();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100049F24(uint64_t a1)
{
  unint64_t v2 = sub_10004A794();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100049F60()
{
  return 0x6E6F73616572;
}

uint64_t sub_100049F74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10004A004(uint64_t a1)
{
  unint64_t v2 = sub_10004A9E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A040(uint64_t a1)
{
  unint64_t v2 = sub_10004A9E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A07C(uint64_t a1)
{
  unint64_t v2 = sub_10004A938();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A0B8(uint64_t a1)
{
  unint64_t v2 = sub_10004A938();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A0F4(uint64_t a1)
{
  unint64_t v2 = sub_10004A8E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A130(uint64_t a1)
{
  unint64_t v2 = sub_10004A8E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A16C(uint64_t a1)
{
  unint64_t v2 = sub_10004A7E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A1A8(uint64_t a1)
{
  unint64_t v2 = sub_10004A7E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A1E4(uint64_t a1)
{
  unint64_t v2 = sub_10004A890();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A220(uint64_t a1)
{
  unint64_t v2 = sub_10004A890();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A25C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_10004A2DC(uint64_t a1)
{
  unint64_t v2 = sub_10004A83C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A318(uint64_t a1)
{
  unint64_t v2 = sub_10004A83C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A354@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10004733C(a1, a2);
}

void sub_10004A36C(void *a1)
{
}

uint64_t sub_10004A384()
{
  uint64_t v1 = 0x6E6F73616572;
  if (*v0 != 1) {
    uint64_t v1 = 0x6D617473656D6974;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 12383;
  }
}

uint64_t sub_10004A3D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10004D5FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10004A3FC(uint64_t a1)
{
  unint64_t v2 = sub_10004AE8C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A438(uint64_t a1)
{
  unint64_t v2 = sub_10004AE8C();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10004A474()
{
  return sub_10004836C(*v0);
}

uint64_t sub_10004A47C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10004D740(a1, a2);
  *a3 = result;
  return result;
}

void sub_10004A4A4(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10004A4B0(uint64_t a1)
{
  unint64_t v2 = sub_10004AC40();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A4EC(uint64_t a1)
{
  unint64_t v2 = sub_10004AC40();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A528(uint64_t a1)
{
  unint64_t v2 = sub_10004AE38();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A564(uint64_t a1)
{
  unint64_t v2 = sub_10004AE38();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A5A0()
{
  if (*v0) {
    return 0x6D617473656D6974;
  }
  else {
    return 12383;
  }
}

uint64_t sub_10004A5D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10004D950(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10004A5FC(uint64_t a1)
{
  unint64_t v2 = sub_10004AC94();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A638(uint64_t a1)
{
  unint64_t v2 = sub_10004AC94();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A674(uint64_t a1)
{
  unint64_t v2 = sub_10004ADE4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A6B0(uint64_t a1)
{
  unint64_t v2 = sub_10004ADE4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A6EC(uint64_t a1)
{
  unint64_t v2 = sub_10004AD3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10004A728(uint64_t a1)
{
  unint64_t v2 = sub_10004AD3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10004A764@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000490C8(a1, a2);
}

uint64_t sub_10004A77C(void *a1)
{
  return sub_100048424(a1);
}

unint64_t sub_10004A794()
{
  unint64_t result = qword_1000F9378;
  if (!qword_1000F9378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9378);
  }
  return result;
}

unint64_t sub_10004A7E8()
{
  unint64_t result = qword_1000F9380;
  if (!qword_1000F9380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9380);
  }
  return result;
}

unint64_t sub_10004A83C()
{
  unint64_t result = qword_1000F9388;
  if (!qword_1000F9388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9388);
  }
  return result;
}

unint64_t sub_10004A890()
{
  unint64_t result = qword_1000F9390;
  if (!qword_1000F9390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9390);
  }
  return result;
}

unint64_t sub_10004A8E4()
{
  unint64_t result = qword_1000F9398;
  if (!qword_1000F9398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9398);
  }
  return result;
}

unint64_t sub_10004A938()
{
  unint64_t result = qword_1000F93A0;
  if (!qword_1000F93A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F93A0);
  }
  return result;
}

unint64_t sub_10004A98C()
{
  unint64_t result = qword_1000F93A8;
  if (!qword_1000F93A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F93A8);
  }
  return result;
}

unint64_t sub_10004A9E0()
{
  unint64_t result = qword_1000F93B0;
  if (!qword_1000F93B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F93B0);
  }
  return result;
}

unint64_t sub_10004AA34()
{
  unint64_t result = qword_1000F93B8;
  if (!qword_1000F93B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F93B8);
  }
  return result;
}

unint64_t sub_10004AA88()
{
  unint64_t result = qword_1000F93C0;
  if (!qword_1000F93C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F93C0);
  }
  return result;
}

unint64_t sub_10004AADC()
{
  unint64_t result = qword_1000F93C8;
  if (!qword_1000F93C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F93C8);
  }
  return result;
}

uint64_t sub_10004AB30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10004AB98()
{
  unint64_t result = qword_1000F9420;
  if (!qword_1000F9420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9420);
  }
  return result;
}

unint64_t sub_10004ABEC()
{
  unint64_t result = qword_1000F9428;
  if (!qword_1000F9428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9428);
  }
  return result;
}

unint64_t sub_10004AC40()
{
  unint64_t result = qword_1000F9468;
  if (!qword_1000F9468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9468);
  }
  return result;
}

unint64_t sub_10004AC94()
{
  unint64_t result = qword_1000F9470;
  if (!qword_1000F9470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9470);
  }
  return result;
}

unint64_t sub_10004ACE8()
{
  unint64_t result = qword_1000F9478;
  if (!qword_1000F9478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9478);
  }
  return result;
}

unint64_t sub_10004AD3C()
{
  unint64_t result = qword_1000F9488;
  if (!qword_1000F9488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9488);
  }
  return result;
}

unint64_t sub_10004AD90()
{
  unint64_t result = qword_1000F9490;
  if (!qword_1000F9490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9490);
  }
  return result;
}

unint64_t sub_10004ADE4()
{
  unint64_t result = qword_1000F9498;
  if (!qword_1000F9498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9498);
  }
  return result;
}

unint64_t sub_10004AE38()
{
  unint64_t result = qword_1000F94A0;
  if (!qword_1000F94A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F94A0);
  }
  return result;
}

unint64_t sub_10004AE8C()
{
  unint64_t result = qword_1000F94A8;
  if (!qword_1000F94A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F94A8);
  }
  return result;
}

unint64_t sub_10004AEE0()
{
  unint64_t result = qword_1000F94B0;
  if (!qword_1000F94B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F94B0);
  }
  return result;
}

uint64_t sub_10004AF34(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10004AF9C()
{
  unint64_t result = qword_1000F94E8;
  if (!qword_1000F94E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F94E8);
  }
  return result;
}

uint64_t sub_10004AFF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004B038()
{
  unint64_t result = qword_1000F94F8;
  if (!qword_1000F94F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F94F8);
  }
  return result;
}

unint64_t sub_10004B08C()
{
  unint64_t result = qword_1000F9500;
  if (!qword_1000F9500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9500);
  }
  return result;
}

uint64_t sub_10004B0E0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x726F737365636361 && a2 == 0xED00007765695679
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F69746163756465 && a2 == 0xED0000776569566ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701602409 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10004B254(void *a1)
{
  uint64_t v27 = sub_100008614(&qword_1000F9508);
  uint64_t v29 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v2);
  uint64_t v32 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100008614(&qword_1000F9510);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  uint64_t v31 = v5;
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008614(&qword_1000F9518);
  uint64_t v28 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (uint64_t)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100008614(&qword_1000F9520);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v33 = a1;
  sub_10000AEFC(a1, v18);
  sub_10004B7FC();
  uint64_t v19 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v19)
  {
    uint64_t v20 = v32;
    uint64_t v34 = v14;
    uint64_t v21 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v21 + 16) == 1)
    {
      if (*(unsigned char *)(v21 + 32))
      {
        if (*(unsigned char *)(v21 + 32) == 1)
        {
          char v37 = 1;
          sub_10004B8A4();
          uint64_t v22 = v17;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          sub_10004B8F8();
          uint64_t v26 = v30;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v26);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v13);
          uint64_t v12 = v36;
        }
        else
        {
          char v38 = 2;
          sub_10004B850();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v27);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v13);
          uint64_t v12 = 4;
        }
      }
      else
      {
        char v35 = 0;
        sub_10004B94C();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v12, v9);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v13);
        uint64_t v12 = 3;
      }
    }
    else
    {
      uint64_t v12 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v24 = v23;
      sub_100008614(&qword_1000F8A40);
      *uint64_t v24 = &type metadata for CardMode;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v12);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v13);
    }
  }
  sub_10000AF94((uint64_t)v33);
  return v12;
}

unint64_t sub_10004B7FC()
{
  unint64_t result = qword_1000F9528;
  if (!qword_1000F9528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9528);
  }
  return result;
}

unint64_t sub_10004B850()
{
  unint64_t result = qword_1000F9530;
  if (!qword_1000F9530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9530);
  }
  return result;
}

unint64_t sub_10004B8A4()
{
  unint64_t result = qword_1000F9538;
  if (!qword_1000F9538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9538);
  }
  return result;
}

unint64_t sub_10004B8F8()
{
  unint64_t result = qword_1000F9540;
  if (!qword_1000F9540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9540);
  }
  return result;
}

unint64_t sub_10004B94C()
{
  unint64_t result = qword_1000F9548;
  if (!qword_1000F9548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9548);
  }
  return result;
}

unint64_t sub_10004B9A0()
{
  unint64_t result = qword_1000F9570;
  if (!qword_1000F9570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9570);
  }
  return result;
}

ValueMetadata *type metadata accessor for CardMode.CodingKeys()
{
  return &type metadata for CardMode.CodingKeys;
}

ValueMetadata *type metadata accessor for CardMode.AccessoryViewCodingKeys()
{
  return &type metadata for CardMode.AccessoryViewCodingKeys;
}

ValueMetadata *type metadata accessor for CardMode.EducationViewCodingKeys()
{
  return &type metadata for CardMode.EducationViewCodingKeys;
}

ValueMetadata *type metadata accessor for CardMode.IdleCodingKeys()
{
  return &type metadata for CardMode.IdleCodingKeys;
}

uint64_t getEnumTagSinglePayload for ViewServiceOutput.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ViewServiceOutput.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004BB9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.CodingKeys()
{
  return &type metadata for ViewServiceOutput.CodingKeys;
}

unsigned char *_s13PCViewService8CardModeO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004BCA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.CardEventCodingKeys()
{
  return &type metadata for ViewServiceOutput.CardEventCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.FinishedCodingKeys()
{
  return &type metadata for ViewServiceOutput.FinishedCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.PingCodingKeys()
{
  return &type metadata for ViewServiceOutput.PingCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.XpcConnectionEventCodingKeys()
{
  return &type metadata for ViewServiceOutput.XpcConnectionEventCodingKeys;
}

unsigned char *_s13PCViewService17ViewServiceOutputO28XpcConnectionEventCodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004BDD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceOutput.NearbySharingInteractionViewCodingKeys()
{
  return &type metadata for ViewServiceOutput.NearbySharingInteractionViewCodingKeys;
}

uint64_t getEnumTagSinglePayload for ViewServiceInput.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ViewServiceInput.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004BF6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceInput.CodingKeys()
{
  return &type metadata for ViewServiceInput.CodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.ActivityDisplayContextCodingKeys()
{
  return &type metadata for ViewServiceInput.ActivityDisplayContextCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.CardModeCodingKeys()
{
  return &type metadata for ViewServiceInput.CardModeCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.DismissCodingKeys()
{
  return &type metadata for ViewServiceInput.DismissCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.MediaTransferStatusCodingKeys()
{
  return &type metadata for ViewServiceInput.MediaTransferStatusCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.MrResponseCodingKeys()
{
  return &type metadata for ViewServiceInput.MrResponseCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.PingCodingKeys()
{
  return &type metadata for ViewServiceInput.PingCodingKeys;
}

ValueMetadata *type metadata accessor for ViewServiceInput.ProgressCodingKeys()
{
  return &type metadata for ViewServiceInput.ProgressCodingKeys;
}

unsigned char *_s13PCViewService8CardModeO23EducationViewCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10004C0B0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewServiceInput.NearbySharingInteractionDisplayContextCodingKeys()
{
  return &type metadata for ViewServiceInput.NearbySharingInteractionDisplayContextCodingKeys;
}

unint64_t sub_10004C0EC()
{
  unint64_t result = qword_1000F9578;
  if (!qword_1000F9578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9578);
  }
  return result;
}

unint64_t sub_10004C144()
{
  unint64_t result = qword_1000F9580;
  if (!qword_1000F9580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9580);
  }
  return result;
}

unint64_t sub_10004C19C()
{
  unint64_t result = qword_1000F9588;
  if (!qword_1000F9588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9588);
  }
  return result;
}

unint64_t sub_10004C1F4()
{
  unint64_t result = qword_1000F9590;
  if (!qword_1000F9590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9590);
  }
  return result;
}

unint64_t sub_10004C24C()
{
  unint64_t result = qword_1000F9598;
  if (!qword_1000F9598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9598);
  }
  return result;
}

unint64_t sub_10004C2A4()
{
  unint64_t result = qword_1000F95A0;
  if (!qword_1000F95A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95A0);
  }
  return result;
}

unint64_t sub_10004C2FC()
{
  unint64_t result = qword_1000F95A8;
  if (!qword_1000F95A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95A8);
  }
  return result;
}

unint64_t sub_10004C354()
{
  unint64_t result = qword_1000F95B0;
  if (!qword_1000F95B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95B0);
  }
  return result;
}

unint64_t sub_10004C3AC()
{
  unint64_t result = qword_1000F95B8;
  if (!qword_1000F95B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95B8);
  }
  return result;
}

unint64_t sub_10004C404()
{
  unint64_t result = qword_1000F95C0;
  if (!qword_1000F95C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95C0);
  }
  return result;
}

unint64_t sub_10004C45C()
{
  unint64_t result = qword_1000F95C8;
  if (!qword_1000F95C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95C8);
  }
  return result;
}

unint64_t sub_10004C4B4()
{
  unint64_t result = qword_1000F95D0;
  if (!qword_1000F95D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95D0);
  }
  return result;
}

unint64_t sub_10004C50C()
{
  unint64_t result = qword_1000F95D8;
  if (!qword_1000F95D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95D8);
  }
  return result;
}

unint64_t sub_10004C564()
{
  unint64_t result = qword_1000F95E0;
  if (!qword_1000F95E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95E0);
  }
  return result;
}

unint64_t sub_10004C5BC()
{
  unint64_t result = qword_1000F95E8;
  if (!qword_1000F95E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95E8);
  }
  return result;
}

unint64_t sub_10004C614()
{
  unint64_t result = qword_1000F95F0;
  if (!qword_1000F95F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95F0);
  }
  return result;
}

unint64_t sub_10004C66C()
{
  unint64_t result = qword_1000F95F8;
  if (!qword_1000F95F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F95F8);
  }
  return result;
}

unint64_t sub_10004C6C4()
{
  unint64_t result = qword_1000F9600;
  if (!qword_1000F9600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9600);
  }
  return result;
}

unint64_t sub_10004C71C()
{
  unint64_t result = qword_1000F9608;
  if (!qword_1000F9608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9608);
  }
  return result;
}

unint64_t sub_10004C774()
{
  unint64_t result = qword_1000F9610;
  if (!qword_1000F9610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9610);
  }
  return result;
}

unint64_t sub_10004C7CC()
{
  unint64_t result = qword_1000F9618;
  if (!qword_1000F9618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9618);
  }
  return result;
}

unint64_t sub_10004C824()
{
  unint64_t result = qword_1000F9620;
  if (!qword_1000F9620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9620);
  }
  return result;
}

unint64_t sub_10004C87C()
{
  unint64_t result = qword_1000F9628;
  if (!qword_1000F9628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9628);
  }
  return result;
}

unint64_t sub_10004C8D4()
{
  unint64_t result = qword_1000F9630;
  if (!qword_1000F9630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9630);
  }
  return result;
}

unint64_t sub_10004C92C()
{
  unint64_t result = qword_1000F9638;
  if (!qword_1000F9638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9638);
  }
  return result;
}

unint64_t sub_10004C984()
{
  unint64_t result = qword_1000F9640;
  if (!qword_1000F9640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9640);
  }
  return result;
}

unint64_t sub_10004C9DC()
{
  unint64_t result = qword_1000F9648;
  if (!qword_1000F9648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9648);
  }
  return result;
}

unint64_t sub_10004CA34()
{
  unint64_t result = qword_1000F9650;
  if (!qword_1000F9650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9650);
  }
  return result;
}

unint64_t sub_10004CA8C()
{
  unint64_t result = qword_1000F9658;
  if (!qword_1000F9658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9658);
  }
  return result;
}

unint64_t sub_10004CAE4()
{
  unint64_t result = qword_1000F9660;
  if (!qword_1000F9660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9660);
  }
  return result;
}

unint64_t sub_10004CB3C()
{
  unint64_t result = qword_1000F9668;
  if (!qword_1000F9668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9668);
  }
  return result;
}

unint64_t sub_10004CB94()
{
  unint64_t result = qword_1000F9670;
  if (!qword_1000F9670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9670);
  }
  return result;
}

unint64_t sub_10004CBEC()
{
  unint64_t result = qword_1000F9678;
  if (!qword_1000F9678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9678);
  }
  return result;
}

unint64_t sub_10004CC44()
{
  unint64_t result = qword_1000F9680;
  if (!qword_1000F9680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9680);
  }
  return result;
}

unint64_t sub_10004CC9C()
{
  unint64_t result = qword_1000F9688;
  if (!qword_1000F9688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9688);
  }
  return result;
}

unint64_t sub_10004CCF4()
{
  unint64_t result = qword_1000F9690;
  if (!qword_1000F9690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9690);
  }
  return result;
}

unint64_t sub_10004CD4C()
{
  unint64_t result = qword_1000F9698;
  if (!qword_1000F9698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9698);
  }
  return result;
}

unint64_t sub_10004CDA4()
{
  unint64_t result = qword_1000F96A0;
  if (!qword_1000F96A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96A0);
  }
  return result;
}

unint64_t sub_10004CDFC()
{
  unint64_t result = qword_1000F96A8;
  if (!qword_1000F96A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96A8);
  }
  return result;
}

unint64_t sub_10004CE54()
{
  unint64_t result = qword_1000F96B0;
  if (!qword_1000F96B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96B0);
  }
  return result;
}

unint64_t sub_10004CEAC()
{
  unint64_t result = qword_1000F96B8;
  if (!qword_1000F96B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96B8);
  }
  return result;
}

unint64_t sub_10004CF04()
{
  unint64_t result = qword_1000F96C0;
  if (!qword_1000F96C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96C0);
  }
  return result;
}

unint64_t sub_10004CF5C()
{
  unint64_t result = qword_1000F96C8;
  if (!qword_1000F96C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96C8);
  }
  return result;
}

unint64_t sub_10004CFB4()
{
  unint64_t result = qword_1000F96D0;
  if (!qword_1000F96D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96D0);
  }
  return result;
}

unint64_t sub_10004D00C()
{
  unint64_t result = qword_1000F96D8;
  if (!qword_1000F96D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96D8);
  }
  return result;
}

unint64_t sub_10004D064()
{
  unint64_t result = qword_1000F96E0;
  if (!qword_1000F96E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96E0);
  }
  return result;
}

unint64_t sub_10004D0BC()
{
  unint64_t result = qword_1000F96E8;
  if (!qword_1000F96E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96E8);
  }
  return result;
}

unint64_t sub_10004D114()
{
  unint64_t result = qword_1000F96F0;
  if (!qword_1000F96F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96F0);
  }
  return result;
}

unint64_t sub_10004D16C()
{
  unint64_t result = qword_1000F96F8;
  if (!qword_1000F96F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F96F8);
  }
  return result;
}

unint64_t sub_10004D1C4()
{
  unint64_t result = qword_1000F9700;
  if (!qword_1000F9700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9700);
  }
  return result;
}

unint64_t sub_10004D21C()
{
  unint64_t result = qword_1000F9708;
  if (!qword_1000F9708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9708);
  }
  return result;
}

unint64_t sub_10004D274()
{
  unint64_t result = qword_1000F9710;
  if (!qword_1000F9710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F9710);
  }
  return result;
}

uint64_t sub_10004D2C8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000016 && a2 == 0x80000001000BF240
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65646F4D64726163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7373696D736964 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001000BF260 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F70736552726DLL && a2 == 0xEA00000000006573 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1735289200 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x73736572676F7270 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000026 && a2 == 0x80000001000BF280)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_10004D5FC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10004D740(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65764564726163 && a2 == 0xE900000000000074;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64656873696E6966 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1735289200 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001000BF2B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x80000001000BF2D0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10004D950(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void sub_10004DA44(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
}

id sub_10004DA64(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 32))();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4];

  return v5;
}

uint64_t sub_10004DB14(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F6A28);
}

uint64_t sub_10004DB20(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 8))()) {
    return sub_10004E180();
  }
  swift_getMetatypeMetadata();
  return String.init<A>(describing:)();
}

uint64_t sub_10004DB84(uint64_t a1, uint64_t a2)
{
  return sub_10004E4F0(a1, a2, &qword_1000F6A28);
}

uint64_t sub_10004DB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 24))();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(a1, a2);
  BOOL v7 = v6;
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

void sub_10004DC48(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_10004DC68(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F6AD8);
}

uint64_t sub_10004DC74(uint64_t a1, uint64_t a2)
{
  return sub_10004E4F0(a1, a2, &qword_1000F6AD8);
}

void sub_10004DC80(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a4) {
    id v11 = sub_10004E0CC(a5, a6);
  }
  else {
    id v11 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
  }
  uint64_t v12 = v11;
  sub_10004E334(a2, a3, a5, a6);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:a1 message:v13];
}

void sub_10004DD60(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a4) {
    id v11 = sub_10004E018(a5, a6);
  }
  else {
    id v11 = sub_10004DF68(a5, a6);
  }
  uint64_t v12 = v11;
  sub_10004E334(a2, a3, a5, a6);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v12 ulog:a1 message:v13];
}

uint64_t sub_10004DE1C()
{
  return String.init<A>(describing:)();
}

uint64_t sub_10004DE50(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F9750);
}

uint64_t sub_10004DE5C(uint64_t a1, uint64_t a2)
{
  return sub_10004E4F0(a1, a2, &qword_1000F9750);
}

uint64_t sub_10004DE6C(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F9758);
}

uint64_t sub_10004DE78(uint64_t a1, uint64_t a2)
{
  return sub_10004E4F0(a1, a2, &qword_1000F9758);
}

uint64_t sub_10004DE84(uint64_t a1, uint64_t a2)
{
  return sub_10004DB20(v2, a2);
}

uint64_t sub_10004DE90(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F9748);
}

uint64_t sub_10004DE9C()
{
  sub_100008614(&qword_1000F9748);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

id sub_10004DF68(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4];

  return v5;
}

id sub_10004E018(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4 logFlags:0x10000000];

  return v5;
}

id sub_10004E0CC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 32))();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4 logFlags:0x10000000];

  return v5;
}

uint64_t sub_10004E180()
{
  swift_getMetatypeMetadata();
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

unint64_t sub_10004E244(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = String.index(after:)();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_10004E334(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = v8;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_10004E3C4(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F9740);
}

uint64_t sub_10004E3D0()
{
  sub_100008614(&qword_1000F9740);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10004E4A0(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F9728);
}

uint64_t sub_10004E4AC(uint64_t a1, uint64_t a2)
{
  return sub_10004E4F0(a1, a2, &qword_1000F9728);
}

uint64_t sub_10004E4BC(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F9720);
}

uint64_t sub_10004E4C8(uint64_t a1, uint64_t a2)
{
  return sub_10004E4F0(a1, a2, &qword_1000F9720);
}

uint64_t sub_10004E4D8(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F9718);
}

uint64_t sub_10004E4E4(uint64_t a1, uint64_t a2)
{
  return sub_10004E4F0(a1, a2, &qword_1000F9718);
}

uint64_t sub_10004E4F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100008614(a3);
  uint64_t v3 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v3, v4);
  if ((v5 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v3 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_10004E5BC(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F6A30);
}

uint64_t sub_10004E5C8(uint64_t a1, uint64_t a2)
{
  return sub_10004E4F0(a1, a2, &qword_1000F6A30);
}

uint64_t sub_10004E5D8(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F9730);
}

uint64_t sub_10004E5E4()
{
  sub_100008614(&qword_1000F9730);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_10004E6B4(uint64_t a1, uint64_t a2)
{
  return sub_10004E6C0(a1, a2, &qword_1000F9738);
}

uint64_t sub_10004E6C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100008614(a3);
  uint64_t v3 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v3, v4);
  if ((v5 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v3 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_10004E788(uint64_t a1, uint64_t a2)
{
  return sub_10004E4F0(a1, a2, &qword_1000F9738);
}

uint64_t sub_10004E794(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1952870259;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1952870259;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x746867696CLL;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x6D756964656DLL;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x7976616568;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6469676972;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x746867696CLL) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x6D756964656DLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x7976616568;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6469676972) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10004E930(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x7974697669746361;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7974697669746361;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x656369766564;
      break;
    case 2:
      unint64_t v6 = "deviceWithActivity";
      goto LABEL_6;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x7974706D65;
      break;
    case 4:
      unint64_t v6 = "proximityIndicator";
LABEL_6:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000012;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE600000000000000;
      unint64_t v2 = 0x656369766564;
      break;
    case 2:
      uint64_t v8 = "deviceWithActivity";
      goto LABEL_12;
    case 3:
      unint64_t v7 = 0xE500000000000000;
      unint64_t v2 = 0x7974706D65;
      break;
    case 4:
      uint64_t v8 = "proximityIndicator";
LABEL_12:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000012;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10004EAC8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x74756F656D6974;
  }
  else {
    uint64_t v3 = 0x6E6F74747562;
  }
  if (v2) {
    unint64_t v4 = 0xE600000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x74756F656D6974;
  }
  else {
    uint64_t v5 = 0x6E6F74747562;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10004EB6C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x737569646172;
  }
  else {
    uint64_t v3 = 0x656C797473;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x737569646172;
  }
  else {
    uint64_t v5 = 0x656C797473;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10004EC0C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x72656E6E6162;
  }
  else {
    uint64_t v3 = 0x6572757472657061;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x72656E6E6162;
  }
  else {
    uint64_t v5 = 0x6572757472657061;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10004ECB0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000014;
  }
  else {
    unint64_t v3 = 0x74696D69786F7270;
  }
  if (v2) {
    unint64_t v4 = 0xED00006472614379;
  }
  else {
    unint64_t v4 = 0x80000001000BCEC0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000014;
  }
  else {
    unint64_t v5 = 0x74696D69786F7270;
  }
  if (a2) {
    unint64_t v6 = 0x80000001000BCEC0;
  }
  else {
    unint64_t v6 = 0xED00006472614379;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

Swift::Int sub_10004ED68()
{
  return Hasher._finalize()();
}

uint64_t sub_10004EE50()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10004EF24()
{
  return Hasher._finalize()();
}

unint64_t sub_10004F008(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    BOOL v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008614(&qword_1000FBC18);
  BOOL v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10005BEAC(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004F11C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    BOOL v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100008614(qword_1000FBC20);
  BOOL v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unint64_t v4 = (id *)(a1 + 40);
  while (1)
  {
    char v5 = *(unsigned char *)v4;
    id v6 = *(v4 - 1);
    unint64_t result = sub_10005BF68((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v6;
    *(unsigned char *)(v2[7] + result) = v5;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10004F21C()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SharingDefaults()
{
  return self;
}

id *sub_10004F280()
{
  return v0;
}

uint64_t sub_10004F310()
{
  sub_10004F280();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BannerDefaults()
{
  return self;
}

id *sub_10004F368()
{
  return v0;
}

uint64_t sub_10004F3C0()
{
  sub_10004F368();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NearbydDefaults()
{
  return self;
}

void *sub_10004F418()
{
  type metadata accessor for Defaults();
  uint64_t v0 = swift_allocObject();
  unint64_t result = sub_100051500();
  qword_100111A10 = v0;
  return result;
}

uint64_t sub_10004F454(char *a1, char *a2)
{
  return sub_10004EAC8(*a1, *a2);
}

Swift::Int sub_10004F460()
{
  return Hasher._finalize()();
}

uint64_t sub_10004F4E0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10004F54C()
{
  return Hasher._finalize()();
}

uint64_t sub_10004F5C8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1000E3058;
  return sub_100050420(v2, a1, a2);
}

void sub_10004F5D4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6E6F74747562;
  if (*v1) {
    uint64_t v2 = 0x74756F656D6974;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10004F610()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10004F670()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_10004F6C0(void *a1@<X8>)
{
  *a1 = &off_1000E2D58;
}

id sub_10004F6D0(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F91C0);
  __chkstk_darwin(v2 - 8, v3);
  char v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005C620(a1, (uint64_t)v5);
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  id v6 = (void *)qword_100111B00;
  uint64_t v7 = (objc_class *)sub_100008614(&qword_1000FBC10);
  char v8 = objc_allocWithZone(v7);
  *(void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x80)) = 0;
  sub_10005C620((uint64_t)v5, (uint64_t)v8 + *(void *)((swift_isaMask & *v8) + 0x60));
  uint64_t v9 = (void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x68));
  *uint64_t v9 = 0xD000000000000015;
  v9[1] = 0x80000001000C2010;
  *(void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x70)) = v6;
  *((unsigned char *)v8 + *(void *)((swift_isaMask & *v8) + 0x78)) = 0;
  v13.receiver = v8;
  v13.super_class = v7;
  id v10 = v6;
  id v11 = [super init];
  sub_10005C688((uint64_t)v5);
  sub_10005C688(a1);
  return v11;
}

id sub_10004F8AC(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F91C0);
  __chkstk_darwin(v2 - 8, v3);
  char v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005C620(a1, (uint64_t)v5);
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  id v6 = (void *)qword_100111B00;
  uint64_t v7 = (objc_class *)sub_100008614(&qword_1000FBC10);
  char v8 = objc_allocWithZone(v7);
  *(void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x80)) = 0;
  sub_10005C620((uint64_t)v5, (uint64_t)v8 + *(void *)((swift_isaMask & *v8) + 0x60));
  uint64_t v9 = (void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x68));
  *uint64_t v9 = 0xD000000000000016;
  v9[1] = 0x80000001000C1FF0;
  *(void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x70)) = v6;
  *((unsigned char *)v8 + *(void *)((swift_isaMask & *v8) + 0x78)) = 0;
  v13.receiver = v8;
  v13.super_class = v7;
  id v10 = v6;
  id v11 = [super init];
  sub_10005C688((uint64_t)v5);
  sub_10005C688(a1);
  return v11;
}

id sub_10004FA88(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F91C0);
  __chkstk_darwin(v2 - 8, v3);
  char v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005C620(a1, (uint64_t)v5);
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  id v6 = (void *)qword_100111B00;
  uint64_t v7 = (objc_class *)sub_100008614(&qword_1000FBC10);
  char v8 = objc_allocWithZone(v7);
  *(void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x80)) = 0;
  sub_10005C620((uint64_t)v5, (uint64_t)v8 + *(void *)((swift_isaMask & *v8) + 0x60));
  uint64_t v9 = (void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x68));
  *uint64_t v9 = 0xD000000000000011;
  v9[1] = 0x80000001000C1FD0;
  *(void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x70)) = v6;
  *((unsigned char *)v8 + *(void *)((swift_isaMask & *v8) + 0x78)) = 0;
  v13.receiver = v8;
  v13.super_class = v7;
  id v10 = v6;
  [super init];
  sub_10005C688((uint64_t)v5);
  sub_10005C688(a1);
  return v11;
}

id sub_10004FC64(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F91C0);
  __chkstk_darwin(v2 - 8, v3);
  char v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005C620(a1, (uint64_t)v5);
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  id v6 = (void *)qword_100111B00;
  uint64_t v7 = (objc_class *)sub_100008614(&qword_1000FBC10);
  char v8 = objc_allocWithZone(v7);
  *(void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x80)) = 0;
  sub_10005C620((uint64_t)v5, (uint64_t)v8 + *(void *)((swift_isaMask & *v8) + 0x60));
  uint64_t v9 = (void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x68));
  *uint64_t v9 = 0xD000000000000023;
  v9[1] = 0x80000001000C1FA0;
  *(void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x70)) = v6;
  *((unsigned char *)v8 + *(void *)((swift_isaMask & *v8) + 0x78)) = 0;
  v13.receiver = v8;
  v13.super_class = v7;
  id v10 = v6;
  [super init];
  sub_10005C688((uint64_t)v5);
  sub_10005C688(a1);
  return v11;
}

id sub_10004FE40(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F91C0);
  __chkstk_darwin(v2 - 8, v3);
  char v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005C620(a1, (uint64_t)v5);
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  id v6 = (void *)qword_100111B00;
  uint64_t v7 = (objc_class *)sub_100008614(&qword_1000FBC10);
  char v8 = objc_allocWithZone(v7);
  *(void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x80)) = 0;
  sub_10005C620((uint64_t)v5, (uint64_t)v8 + *(void *)((swift_isaMask & *v8) + 0x60));
  uint64_t v9 = (void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x68));
  *uint64_t v9 = 0xD00000000000001ELL;
  v9[1] = 0x80000001000C1F80;
  *(void *)((char *)v8 + *(void *)((swift_isaMask & *v8) + 0x70)) = v6;
  *((unsigned char *)v8 + *(void *)((swift_isaMask & *v8) + 0x78)) = 0;
  v13.receiver = v8;
  v13.super_class = v7;
  id v10 = v6;
  [super init];
  sub_10005C688((uint64_t)v5);
  sub_10005C688(a1);
  return v11;
}

unint64_t sub_10005001C(char a1)
{
  unint64_t result = 0x7974697669746361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656369766564;
      break;
    case 2:
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x7974706D65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000500BC(char a1)
{
  unint64_t result = 0x7974697669746361;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656369766564;
      break;
    case 2:
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x7974706D65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005015C(unsigned __int8 *a1, char *a2)
{
  return sub_10004E930(*a1, *a2);
}

Swift::Int sub_100050168()
{
  return sub_10004ED68();
}

uint64_t sub_100050170()
{
  return sub_10004EE50();
}

Swift::Int sub_100050178()
{
  return sub_10004EF24();
}

unint64_t sub_100050180@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1000E3148;
  unint64_t result = sub_10005C488(*a1, v3);
  *a2 = result;
  return result;
}

unint64_t sub_1000501B8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000500BC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1000501E4(void *a1@<X8>)
{
  *a1 = &off_1000E2D80;
}

uint64_t sub_1000501F4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100050254()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_1000502A4()
{
  return sub_10005001C(*v0);
}

uint64_t sub_1000502AC(char *a1, char *a2)
{
  return sub_10004EB6C(*a1, *a2);
}

Swift::Int sub_1000502B8()
{
  return Hasher._finalize()();
}

uint64_t sub_100050334()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10005039C()
{
  return Hasher._finalize()();
}

uint64_t sub_100050414@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1000E3008;
  return sub_100050420(v2, a1, a2);
}

uint64_t sub_100050420@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4 == 1) {
    char v6 = 1;
  }
  else {
    char v6 = 2;
  }
  if (!v4) {
    char v6 = 0;
  }
  *a3 = v6;
  return result;
}

void sub_10005047C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x656C797473;
  if (*v1) {
    uint64_t v2 = 0x737569646172;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_1000504B4(void *a1@<X8>)
{
  *a1 = &off_1000E2D30;
}

uint64_t sub_1000504C4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100050524()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100050574(unsigned __int8 *a1, char *a2)
{
  return sub_10004E794(*a1, *a2);
}

Swift::Int sub_100050580()
{
  return Hasher._finalize()();
}

uint64_t sub_100050660()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100050728()
{
  return Hasher._finalize()();
}

unint64_t sub_100050804@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_1000E31E0;
  unint64_t result = sub_10005C488(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10005083C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1952870259;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x746867696CLL;
      goto LABEL_3;
    case 2:
      *a1 = 0x6D756964656DLL;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 0x7976616568;
      a1[1] = 0xE500000000000000;
      break;
    case 4:
      *a1 = 0x6469676972;
      a1[1] = 0xE500000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void sub_1000508E0(void *a1@<X8>)
{
  *a1 = &off_1000E2DA8;
}

uint64_t sub_1000508F0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100050950()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000509A0()
{
  uint64_t result = 1952870259;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x746867696CLL;
      break;
    case 2:
      uint64_t result = 0x6D756964656DLL;
      break;
    case 3:
      uint64_t result = 0x7976616568;
      break;
    case 4:
      uint64_t result = 0x6469676972;
      break;
    default:
      return result;
  }
  return result;
}

id *sub_100050A34()
{
  return v0;
}

uint64_t sub_100051024()
{
  sub_100050A34();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Defaults()
{
  return self;
}

ValueMetadata *type metadata accessor for Defaults.HapticFeedbackStyle()
{
  return &type metadata for Defaults.HapticFeedbackStyle;
}

ValueMetadata *type metadata accessor for Defaults.BlurInitType()
{
  return &type metadata for Defaults.BlurInitType;
}

unsigned char *_s13PCViewService8DefaultsC16ApertureViewTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100051174);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Defaults.ApertureViewType()
{
  return &type metadata for Defaults.ApertureViewType;
}

unsigned char *_s13PCViewService8DefaultsC15ContinueTriggerOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100051278);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Defaults.ContinueTrigger()
{
  return &type metadata for Defaults.ContinueTrigger;
}

uint64_t sub_1000512B0()
{
  return sub_100051458(&qword_1000FBB48, &qword_1000FBB50);
}

unint64_t sub_1000512DC()
{
  unint64_t result = qword_1000FBB58;
  if (!qword_1000FBB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBB58);
  }
  return result;
}

uint64_t sub_100051330()
{
  return sub_100051458(&qword_1000FBB60, &qword_1000FBB68);
}

unint64_t sub_10005135C()
{
  unint64_t result = qword_1000FBB70;
  if (!qword_1000FBB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBB70);
  }
  return result;
}

uint64_t sub_1000513B0()
{
  return sub_100051458(&qword_1000FBB78, &qword_1000FBB80);
}

unint64_t sub_1000513DC()
{
  unint64_t result = qword_1000FBB88;
  if (!qword_1000FBB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBB88);
  }
  return result;
}

uint64_t sub_100051430()
{
  return sub_100051458(&qword_1000FBB90, &qword_1000FBB98);
}

uint64_t sub_100051458(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009F40(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000514AC()
{
  unint64_t result = qword_1000FBBA0;
  if (!qword_1000FBBA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBBA0);
  }
  return result;
}

void *sub_100051500()
{
  uint64_t v1 = sub_100008614(&qword_1000F91C0);
  __chkstk_darwin(v1 - 8, v2);
  Class v671 = (Class)((char *)&v664 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  unsigned int v4 = (void *)qword_100111B00;
  uint64_t v5 = (objc_class *)sub_100008614((uint64_t *)&qword_1000F86E8);
  unsigned int v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[*(void *)((swift_isaMask & *(void *)v6) + 0x80)] = 0;
  v6[*(void *)((swift_isaMask & *(void *)v6) + 0x60)] = 0;
  uint64_t v7 = &v6[*(void *)((swift_isaMask & *(void *)v6) + 0x68)];
  *(void *)uint64_t v7 = 0xD000000000000014;
  *((void *)v7 + 1) = 0x80000001000C0D60;
  *(void *)&v6[*(void *)((swift_isaMask & *(void *)v6) + 0x70)] = v4;
  v6[*(void *)((swift_isaMask & *(void *)v6) + 0x78)] = 0;
  v870.receiver = v6;
  v870.super_class = v5;
  id v8 = v4;
  v0[2] = [super init];
  uint64_t v9 = (char *)objc_allocWithZone(v5);
  *(void *)&v9[*(void *)((swift_isaMask & *(void *)v9) + 0x80)] = 0;
  v9[*(void *)((swift_isaMask & *(void *)v9) + 0x60)] = 0;
  id v10 = &v9[*(void *)((swift_isaMask & *(void *)v9) + 0x68)];
  Class v677 = (Class)0xD00000000000001ELL;
  *(void *)id v10 = 0xD00000000000001ELL;
  *((void *)v10 + 1) = 0x80000001000C0D80;
  *(void *)&v9[*(void *)((swift_isaMask & *(void *)v9) + 0x70)] = v4;
  v9[*(void *)((swift_isaMask & *(void *)v9) + 0x78)] = 0;
  v869.receiver = v9;
  v869.super_class = v5;
  id v11 = v8;
  v0[3] = [super init];
  BOOL v12 = (char *)objc_allocWithZone(v5);
  *(void *)&v12[*(void *)((swift_isaMask & *(void *)v12) + 0x80)] = 0;
  v12[*(void *)((swift_isaMask & *(void *)v12) + 0x60)] = 1;
  objc_super v13 = &v12[*(void *)((swift_isaMask & *(void *)v12) + 0x68)];
  unint64_t v675 = 0xD000000000000020;
  *(void *)objc_super v13 = 0xD000000000000020;
  *((void *)v13 + 1) = 0x80000001000C0DA0;
  *(void *)&v12[*(void *)((swift_isaMask & *(void *)v12) + 0x70)] = v4;
  v12[*(void *)((swift_isaMask & *(void *)v12) + 0x78)] = 0;
  v868.receiver = v12;
  v868.super_class = v5;
  id v14 = v11;
  v0[4] = [super init];
  uint64_t v15 = (char *)objc_allocWithZone(v5);
  *(void *)&v15[*(void *)((swift_isaMask & *(void *)v15) + 0x80)] = 0;
  v15[*(void *)((swift_isaMask & *(void *)v15) + 0x60)] = 1;
  uint64_t v16 = &v15[*(void *)((swift_isaMask & *(void *)v15) + 0x68)];
  unint64_t v676 = 0xD00000000000001ALL;
  *(void *)uint64_t v16 = 0xD00000000000001ALL;
  *((void *)v16 + 1) = 0x80000001000C0DD0;
  *(void *)&v15[*(void *)((swift_isaMask & *(void *)v15) + 0x70)] = v4;
  v15[*(void *)((swift_isaMask & *(void *)v15) + 0x78)] = 0;
  v867.receiver = v15;
  v867.super_class = v5;
  id v17 = v14;
  v0[5] = [super init];
  uint64_t v18 = (char *)objc_allocWithZone(v5);
  *(void *)&v18[*(void *)((swift_isaMask & *(void *)v18) + 0x80)] = 0;
  v18[*(void *)((swift_isaMask & *(void *)v18) + 0x60)] = 1;
  uint64_t v19 = &v18[*(void *)((swift_isaMask & *(void *)v18) + 0x68)];
  Class v672 = (Class)0xD00000000000001FLL;
  *(void *)uint64_t v19 = 0xD00000000000001FLL;
  *((void *)v19 + 1) = 0x80000001000C0DF0;
  *(void *)&v18[*(void *)((swift_isaMask & *(void *)v18) + 0x70)] = v4;
  v18[*(void *)((swift_isaMask & *(void *)v18) + 0x78)] = 0;
  v866.receiver = v18;
  v866.super_class = v5;
  uint64_t v20 = v0;
  id v21 = v17;
  v0[6] = [super init];
  uint64_t v22 = (objc_class *)sub_100008614((uint64_t *)&qword_1000F8A10);
  Class v688 = v22;
  uint64_t v23 = (char *)objc_allocWithZone(v22);
  *(void *)&v23[*(void *)((swift_isaMask & *(void *)v23) + 0x80)] = 0;
  *(void *)&v23[*(void *)((swift_isaMask & *(void *)v23) + 0x60)] = 0x4020000000000000;
  uint64_t v24 = &v23[*(void *)((swift_isaMask & *(void *)v23) + 0x68)];
  *(void *)uint64_t v24 = v677;
  *((void *)v24 + 1) = 0x80000001000C0E10;
  *(void *)&v23[*(void *)((swift_isaMask & *(void *)v23) + 0x70)] = v4;
  v23[*(void *)((swift_isaMask & *(void *)v23) + 0x78)] = 0;
  v865.receiver = v23;
  v865.super_class = v22;
  id v25 = v21;
  v20[7] = [super init];
  uint64_t v26 = (char *)objc_allocWithZone(v5);
  *(void *)&v26[*(void *)((swift_isaMask & *(void *)v26) + 0x80)] = 0;
  v26[*(void *)((swift_isaMask & *(void *)v26) + 0x60)] = 0;
  uint64_t v27 = &v26[*(void *)((swift_isaMask & *(void *)v26) + 0x68)];
  unint64_t v687 = 0xD000000000000016;
  *(void *)uint64_t v27 = 0xD000000000000016;
  *((void *)v27 + 1) = 0x80000001000C0E30;
  *(void *)&v26[*(void *)((swift_isaMask & *(void *)v26) + 0x70)] = v4;
  v26[*(void *)((swift_isaMask & *(void *)v26) + 0x78)] = 0;
  v864.receiver = v26;
  v864.super_class = v5;
  id v28 = v25;
  v20[8] = [super init];
  uint64_t v29 = (char *)objc_allocWithZone(v5);
  *(void *)&v29[*(void *)((swift_isaMask & *(void *)v29) + 0x80)] = 0;
  v29[*(void *)((swift_isaMask & *(void *)v29) + 0x60)] = 0;
  uint64_t v30 = &v29[*(void *)((swift_isaMask & *(void *)v29) + 0x68)];
  unint64_t v674 = 0xD000000000000017;
  *(void *)uint64_t v30 = 0xD000000000000017;
  *((void *)v30 + 1) = 0x80000001000C0E50;
  *(void *)&v29[*(void *)((swift_isaMask & *(void *)v29) + 0x70)] = v4;
  v29[*(void *)((swift_isaMask & *(void *)v29) + 0x78)] = 0;
  v863.receiver = v29;
  v863.super_class = v5;
  id v31 = v28;
  v20[9] = [super init];
  uint64_t v32 = (char *)objc_allocWithZone(v5);
  *(void *)&v32[*(void *)((swift_isaMask & *(void *)v32) + 0x80)] = 0;
  v32[*(void *)((swift_isaMask & *(void *)v32) + 0x60)] = 1;
  uint64_t v33 = &v32[*(void *)((swift_isaMask & *(void *)v32) + 0x68)];
  unint64_t v678 = 0xD00000000000001DLL;
  *(void *)uint64_t v33 = 0xD00000000000001DLL;
  *((void *)v33 + 1) = 0x80000001000C0E70;
  *(void *)&v32[*(void *)((swift_isaMask & *(void *)v32) + 0x70)] = v4;
  v32[*(void *)((swift_isaMask & *(void *)v32) + 0x78)] = 0;
  v862.receiver = v32;
  v862.super_class = v5;
  id v34 = v31;
  v20[10] = [super init];
  char v35 = (char *)objc_allocWithZone(v5);
  *(void *)&v35[*(void *)((swift_isaMask & *(void *)v35) + 0x80)] = 0;
  v35[*(void *)((swift_isaMask & *(void *)v35) + 0x60)] = 1;
  unsigned __int8 v36 = &v35[*(void *)((swift_isaMask & *(void *)v35) + 0x68)];
  *(void *)unsigned __int8 v36 = 0xD00000000000002ALL;
  *((void *)v36 + 1) = 0x80000001000C0E90;
  *(void *)&v35[*(void *)((swift_isaMask & *(void *)v35) + 0x70)] = v4;
  v35[*(void *)((swift_isaMask & *(void *)v35) + 0x78)] = 0;
  v861.receiver = v35;
  v861.super_class = v5;
  id v37 = v34;
  v20[11] = [super init];
  char v38 = (char *)objc_allocWithZone(v5);
  *(void *)&v38[*(void *)((swift_isaMask & *(void *)v38) + 0x80)] = 0;
  v38[*(void *)((swift_isaMask & *(void *)v38) + 0x60)] = 0;
  uint64_t v39 = &v38[*(void *)((swift_isaMask & *(void *)v38) + 0x68)];
  unint64_t v686 = 0xD000000000000012;
  *(void *)uint64_t v39 = 0xD000000000000012;
  *((void *)v39 + 1) = 0x80000001000C0EC0;
  *(void *)&v38[*(void *)((swift_isaMask & *(void *)v38) + 0x70)] = v4;
  v38[*(void *)((swift_isaMask & *(void *)v38) + 0x78)] = 0;
  v860.receiver = v38;
  v860.super_class = v5;
  id v40 = v37;
  v20[12] = [super init];
  uint64_t v41 = (char *)objc_allocWithZone(v5);
  *(void *)&v41[*(void *)((swift_isaMask & *(void *)v41) + 0x80)] = 0;
  v41[*(void *)((swift_isaMask & *(void *)v41) + 0x60)] = 0;
  uint64_t v42 = &v41[*(void *)((swift_isaMask & *(void *)v41) + 0x68)];
  *(void *)uint64_t v42 = 0xD000000000000011;
  *((void *)v42 + 1) = 0x80000001000C0EE0;
  unint64_t v682 = 0xD000000000000011;
  *(void *)&v41[*(void *)((swift_isaMask & *(void *)v41) + 0x70)] = v4;
  v41[*(void *)((swift_isaMask & *(void *)v41) + 0x78)] = 0;
  v859.receiver = v41;
  v859.super_class = v5;
  id v43 = v40;
  v20[13] = [super init];
  uint64_t v44 = (char *)objc_allocWithZone(v5);
  *(void *)&v44[*(void *)((swift_isaMask & *(void *)v44) + 0x80)] = 0;
  v44[*(void *)((swift_isaMask & *(void *)v44) + 0x60)] = 1;
  uint64_t v45 = &v44[*(void *)((swift_isaMask & *(void *)v44) + 0x68)];
  *(void *)uint64_t v45 = 0xD000000000000011;
  *((void *)v45 + 1) = 0x80000001000C0F00;
  *(void *)&v44[*(void *)((swift_isaMask & *(void *)v44) + 0x70)] = v4;
  v44[*(void *)((swift_isaMask & *(void *)v44) + 0x78)] = 0;
  v858.receiver = v44;
  v858.super_class = v5;
  id v46 = v43;
  v20[14] = [super init];
  uint64_t v47 = (char *)objc_allocWithZone(v5);
  *(void *)&v47[*(void *)((swift_isaMask & *(void *)v47) + 0x80)] = 0;
  v47[*(void *)((swift_isaMask & *(void *)v47) + 0x60)] = 0;
  uint64_t v48 = &v47[*(void *)((swift_isaMask & *(void *)v47) + 0x68)];
  strcpy(v48, "debugModifiers");
  v48[15] = -18;
  *(void *)&v47[*(void *)((swift_isaMask & *(void *)v47) + 0x70)] = v4;
  v47[*(void *)((swift_isaMask & *(void *)v47) + 0x78)] = 0;
  v857.receiver = v47;
  v857.super_class = v5;
  id v49 = v46;
  v20[15] = [super init];
  uint64_t v50 = (char *)objc_allocWithZone(v5);
  *(void *)&v50[*(void *)((swift_isaMask & *(void *)v50) + 0x80)] = 0;
  v50[*(void *)((swift_isaMask & *(void *)v50) + 0x60)] = 1;
  uint64_t v51 = &v50[*(void *)((swift_isaMask & *(void *)v50) + 0x68)];
  unint64_t v668 = 0xD000000000000010;
  *(void *)uint64_t v51 = 0xD000000000000010;
  *((void *)v51 + 1) = 0x80000001000C0F20;
  *(void *)&v50[*(void *)((swift_isaMask & *(void *)v50) + 0x70)] = v4;
  v50[*(void *)((swift_isaMask & *(void *)v50) + 0x78)] = 0;
  v856.receiver = v50;
  v856.super_class = v5;
  id v52 = v49;
  v20[16] = [super init];
  uint64_t v53 = (char *)objc_allocWithZone(v5);
  *(void *)&v53[*(void *)((swift_isaMask & *(void *)v53) + 0x80)] = 0;
  v53[*(void *)((swift_isaMask & *(void *)v53) + 0x60)] = 1;
  uint64_t v54 = (unint64_t *)&v53[*(void *)((swift_isaMask & *(void *)v53) + 0x68)];
  unint64_t *v54 = v687;
  v54[1] = 0x80000001000C0F40;
  *(void *)&v53[*(void *)((swift_isaMask & *(void *)v53) + 0x70)] = v4;
  v53[*(void *)((swift_isaMask & *(void *)v53) + 0x78)] = 0;
  v855.receiver = v53;
  v855.super_class = v5;
  id v55 = v52;
  v20[17] = [super init];
  uint64_t v56 = v688;
  uint64_t v57 = (char *)objc_allocWithZone(v688);
  *(void *)&v57[*(void *)((swift_isaMask & *(void *)v57) + 0x80)] = 0;
  *(void *)&v57[*(void *)((swift_isaMask & *(void *)v57) + 0x60)] = 0x4020000000000000;
  uint64_t v58 = (unint64_t *)&v57[*(void *)((swift_isaMask & *(void *)v57) + 0x68)];
  *uint64_t v58 = v675;
  v58[1] = 0x80000001000C0F60;
  *(void *)&v57[*(void *)((swift_isaMask & *(void *)v57) + 0x70)] = v4;
  v57[*(void *)((swift_isaMask & *(void *)v57) + 0x78)] = 0;
  v854.receiver = v57;
  v854.super_class = v56;
  id v59 = v55;
  v20[18] = [super init];
  uint64_t v60 = (objc_class *)sub_100008614(&qword_1000F8870);
  Class v679 = v60;
  uint64_t v61 = (char *)objc_allocWithZone(v60);
  *(void *)&v61[*(void *)((swift_isaMask & *(void *)v61) + 0x80)] = 0;
  *(void *)&v61[*(void *)((swift_isaMask & *(void *)v61) + 0x60)] = 2;
  uint64_t v62 = &v61[*(void *)((swift_isaMask & *(void *)v61) + 0x68)];
  unint64_t v680 = 0xD000000000000019;
  *(void *)uint64_t v62 = 0xD000000000000019;
  *((void *)v62 + 1) = 0x80000001000C0F90;
  *(void *)&v61[*(void *)((swift_isaMask & *(void *)v61) + 0x70)] = v4;
  v61[*(void *)((swift_isaMask & *(void *)v61) + 0x78)] = 0;
  v853.receiver = v61;
  v853.super_class = v60;
  id v63 = v59;
  v20[19] = [super init];
  uint64_t v64 = (char *)objc_allocWithZone(v56);
  *(void *)&v64[*(void *)((swift_isaMask & *(void *)v64) + 0x80)] = 0;
  *(void *)&v64[*(void *)((swift_isaMask & *(void *)v64) + 0x60)] = 0x3FF0000000000000;
  uint64_t v65 = &v64[*(void *)((swift_isaMask & *(void *)v64) + 0x68)];
  unint64_t v681 = 0xD000000000000013;
  *(void *)uint64_t v65 = 0xD000000000000013;
  *((void *)v65 + 1) = 0x80000001000C0FB0;
  *(void *)&v64[*(void *)((swift_isaMask & *(void *)v64) + 0x70)] = v4;
  v64[*(void *)((swift_isaMask & *(void *)v64) + 0x78)] = 0;
  v852.receiver = v64;
  v852.super_class = v56;
  id v66 = v63;
  v20[20] = [super init];
  uint64_t v67 = (char *)objc_allocWithZone(v56);
  *(void *)&v67[*(void *)((swift_isaMask & *(void *)v67) + 0x80)] = 0;
  *(void *)&v67[*(void *)((swift_isaMask & *(void *)v67) + 0x60)] = 0x403E000000000000;
  uint64_t v68 = &v67[*(void *)((swift_isaMask & *(void *)v67) + 0x68)];
  unint64_t v684 = 0xD000000000000018;
  *(void *)uint64_t v68 = 0xD000000000000018;
  *((void *)v68 + 1) = 0x80000001000C0FD0;
  *(void *)&v67[*(void *)((swift_isaMask & *(void *)v67) + 0x70)] = v4;
  v67[*(void *)((swift_isaMask & *(void *)v67) + 0x78)] = 0;
  v851.receiver = v67;
  v851.super_class = v56;
  id v69 = v66;
  v20[21] = [super init];
  uint64_t v70 = (char *)objc_allocWithZone(v56);
  *(void *)&v70[*(void *)((swift_isaMask & *(void *)v70) + 0x80)] = 0;
  *(void *)&v70[*(void *)((swift_isaMask & *(void *)v70) + 0x60)] = 0x4024000000000000;
  uint64_t v71 = (unint64_t *)&v70[*(void *)((swift_isaMask & *(void *)v70) + 0x68)];
  *uint64_t v71 = v687;
  v71[1] = 0x80000001000C0FF0;
  *(void *)&v70[*(void *)((swift_isaMask & *(void *)v70) + 0x70)] = v4;
  v70[*(void *)((swift_isaMask & *(void *)v70) + 0x78)] = 0;
  v850.receiver = v70;
  v850.super_class = v56;
  id v72 = v69;
  v20[22] = [super init];
  uint64_t v73 = (char *)objc_allocWithZone(v56);
  *(void *)&v73[*(void *)((swift_isaMask & *(void *)v73) + 0x80)] = 0;
  *(void *)&v73[*(void *)((swift_isaMask & *(void *)v73) + 0x60)] = 0;
  uint64_t v74 = &v73[*(void *)((swift_isaMask & *(void *)v73) + 0x68)];
  *(void *)uint64_t v74 = v677;
  *((void *)v74 + 1) = 0x80000001000C1010;
  *(void *)&v73[*(void *)((swift_isaMask & *(void *)v73) + 0x70)] = v4;
  v73[*(void *)((swift_isaMask & *(void *)v73) + 0x78)] = 0;
  v849.receiver = v73;
  v849.super_class = v56;
  id v75 = v72;
  v20[23] = [super init];
  uint64_t v76 = (char *)objc_allocWithZone(v5);
  *(void *)&v76[*(void *)((swift_isaMask & *(void *)v76) + 0x80)] = 0;
  v76[*(void *)((swift_isaMask & *(void *)v76) + 0x60)] = 1;
  uint64_t v77 = (unint64_t *)&v76[*(void *)((swift_isaMask & *(void *)v76) + 0x68)];
  *uint64_t v77 = v676;
  v77[1] = 0x80000001000C1030;
  *(void *)&v76[*(void *)((swift_isaMask & *(void *)v76) + 0x70)] = v4;
  v76[*(void *)((swift_isaMask & *(void *)v76) + 0x78)] = 0;
  v848.receiver = v76;
  v848.super_class = v5;
  id v78 = v75;
  v20[24] = [super init];
  uint64_t v79 = (char *)objc_allocWithZone(v5);
  *(void *)&v79[*(void *)((swift_isaMask & *(void *)v79) + 0x80)] = 0;
  v79[*(void *)((swift_isaMask & *(void *)v79) + 0x60)] = 0;
  uint64_t v80 = (unint64_t *)&v79[*(void *)((swift_isaMask & *(void *)v79) + 0x68)];
  *uint64_t v80 = v686;
  v80[1] = 0x80000001000C1050;
  *(void *)&v79[*(void *)((swift_isaMask & *(void *)v79) + 0x70)] = v4;
  v79[*(void *)((swift_isaMask & *(void *)v79) + 0x78)] = 0;
  v847.receiver = v79;
  v847.super_class = v5;
  id v81 = v78;
  v20[25] = [super init];
  uint64_t v82 = (objc_class *)sub_100008614((uint64_t *)&qword_1000FBBC8);
  uint64_t v83 = (char *)objc_allocWithZone(v82);
  *(void *)&v83[*(void *)((swift_isaMask & *(void *)v83) + 0x80)] = 0;
  v83[*(void *)((swift_isaMask & *(void *)v83) + 0x60)] = 2;
  uint64_t v84 = &v83[*(void *)((swift_isaMask & *(void *)v83) + 0x68)];
  unint64_t v667 = 0xD000000000000022;
  *(void *)uint64_t v84 = 0xD000000000000022;
  *((void *)v84 + 1) = 0x80000001000C1070;
  *(void *)&v83[*(void *)((swift_isaMask & *(void *)v83) + 0x70)] = v4;
  v83[*(void *)((swift_isaMask & *(void *)v83) + 0x78)] = 0;
  v846.receiver = v83;
  v846.super_class = v82;
  id v85 = v81;
  v20[26] = [super init];
  uint64_t v86 = (char *)objc_allocWithZone(v82);
  *(void *)&v86[*(void *)((swift_isaMask & *(void *)v86) + 0x80)] = 0;
  v86[*(void *)((swift_isaMask & *(void *)v86) + 0x60)] = 2;
  uint64_t v87 = (unint64_t *)&v86[*(void *)((swift_isaMask & *(void *)v86) + 0x68)];
  *uint64_t v87 = v674;
  v87[1] = 0x80000001000C10A0;
  *(void *)&v86[*(void *)((swift_isaMask & *(void *)v86) + 0x70)] = v4;
  v86[*(void *)((swift_isaMask & *(void *)v86) + 0x78)] = 0;
  v845.receiver = v86;
  v845.super_class = v82;
  id v88 = v85;
  v20[27] = [super init];
  uint64_t v89 = (char *)objc_allocWithZone(v82);
  *(void *)&v89[*(void *)((swift_isaMask & *(void *)v89) + 0x80)] = 0;
  v89[*(void *)((swift_isaMask & *(void *)v89) + 0x60)] = 2;
  uint64_t v90 = (unint64_t *)&v89[*(void *)((swift_isaMask & *(void *)v89) + 0x68)];
  *uint64_t v90 = v680;
  v90[1] = 0x80000001000C10C0;
  *(void *)&v89[*(void *)((swift_isaMask & *(void *)v89) + 0x70)] = v4;
  v89[*(void *)((swift_isaMask & *(void *)v89) + 0x78)] = 0;
  v844.receiver = v89;
  v844.super_class = v82;
  id v91 = v88;
  v20[28] = [super init];
  Class v673 = v82;
  uint64_t v92 = (char *)objc_allocWithZone(v82);
  *(void *)&v92[*(void *)((swift_isaMask & *(void *)v92) + 0x80)] = 0;
  v92[*(void *)((swift_isaMask & *(void *)v92) + 0x60)] = 2;
  uint64_t v93 = (unint64_t *)&v92[*(void *)((swift_isaMask & *(void *)v92) + 0x68)];
  unint64_t v94 = v675;
  *uint64_t v93 = v675;
  v93[1] = 0x80000001000C10E0;
  *(void *)&v92[*(void *)((swift_isaMask & *(void *)v92) + 0x70)] = v4;
  v92[*(void *)((swift_isaMask & *(void *)v92) + 0x78)] = 0;
  v843.receiver = v92;
  v843.super_class = v82;
  id v95 = v91;
  v20[29] = [super init];
  uint64_t v96 = (char *)objc_allocWithZone(v5);
  *(void *)&v96[*(void *)((swift_isaMask & *(void *)v96) + 0x80)] = 0;
  v96[*(void *)((swift_isaMask & *(void *)v96) + 0x60)] = 0;
  long long v97 = &v96[*(void *)((swift_isaMask & *(void *)v96) + 0x68)];
  unint64_t v683 = 0xD00000000000001BLL;
  *(void *)long long v97 = 0xD00000000000001BLL;
  *((void *)v97 + 1) = 0x80000001000C1110;
  *(void *)&v96[*(void *)((swift_isaMask & *(void *)v96) + 0x70)] = v4;
  v96[*(void *)((swift_isaMask & *(void *)v96) + 0x78)] = 0;
  v842.receiver = v96;
  v842.super_class = v5;
  id v98 = v95;
  v20[30] = [super init];
  uint64_t v99 = (char *)objc_allocWithZone(v5);
  *(void *)&v99[*(void *)((swift_isaMask & *(void *)v99) + 0x80)] = 0;
  v99[*(void *)((swift_isaMask & *(void *)v99) + 0x60)] = 1;
  uint64_t v100 = &v99[*(void *)((swift_isaMask & *(void *)v99) + 0x68)];
  *(void *)uint64_t v100 = v94;
  *((void *)v100 + 1) = 0x80000001000C1130;
  *(void *)&v99[*(void *)((swift_isaMask & *(void *)v99) + 0x70)] = v4;
  v99[*(void *)((swift_isaMask & *(void *)v99) + 0x78)] = 0;
  v841.receiver = v99;
  v841.super_class = v5;
  id v101 = v98;
  v20[31] = [super init];
  uint64_t v102 = (char *)objc_allocWithZone(v5);
  *(void *)&v102[*(void *)((swift_isaMask & *(void *)v102) + 0x80)] = 0;
  v102[*(void *)((swift_isaMask & *(void *)v102) + 0x60)] = 0;
  uint64_t v103 = &v102[*(void *)((swift_isaMask & *(void *)v102) + 0x68)];
  unint64_t v666 = 0xD000000000000024;
  *(void *)uint64_t v103 = 0xD000000000000024;
  *((void *)v103 + 1) = 0x80000001000C1160;
  *(void *)&v102[*(void *)((swift_isaMask & *(void *)v102) + 0x70)] = v4;
  v102[*(void *)((swift_isaMask & *(void *)v102) + 0x78)] = 0;
  v840.receiver = v102;
  v840.super_class = v5;
  id v104 = v101;
  v20[32] = [super init];
  uint64_t v105 = (char *)objc_allocWithZone(v5);
  *(void *)&v105[*(void *)((swift_isaMask & *(void *)v105) + 0x80)] = 0;
  v105[*(void *)((swift_isaMask & *(void *)v105) + 0x60)] = 0;
  char v106 = &v105[*(void *)((swift_isaMask & *(void *)v105) + 0x68)];
  unint64_t v675 = 0xD00000000000001CLL;
  *(void *)char v106 = 0xD00000000000001CLL;
  *((void *)v106 + 1) = 0x80000001000C1190;
  *(void *)&v105[*(void *)((swift_isaMask & *(void *)v105) + 0x70)] = v4;
  v105[*(void *)((swift_isaMask & *(void *)v105) + 0x78)] = 0;
  v839.receiver = v105;
  v839.super_class = v5;
  id v107 = v104;
  v20[33] = [super init];
  char v108 = (objc_class *)sub_100008614((uint64_t *)&qword_1000F88A0);
  char v109 = (char *)objc_allocWithZone(v108);
  *(void *)&v109[*(void *)((swift_isaMask & *(void *)v109) + 0x80)] = 0;
  v109[*(void *)((swift_isaMask & *(void *)v109) + 0x60)] = 0;
  char v110 = &v109[*(void *)((swift_isaMask & *(void *)v109) + 0x68)];
  *(void *)char v110 = 0x65756E69746E6F63;
  *((void *)v110 + 1) = 0xEF72656767697254;
  *(void *)&v109[*(void *)((swift_isaMask & *(void *)v109) + 0x70)] = v4;
  v109[*(void *)((swift_isaMask & *(void *)v109) + 0x78)] = 0;
  v838.receiver = v109;
  v838.super_class = v108;
  id v111 = v107;
  v20[34] = [super init];
  char v112 = v679;
  char v113 = (char *)objc_allocWithZone(v679);
  *(void *)&v113[*(void *)((swift_isaMask & *(void *)v113) + 0x80)] = 0;
  *(void *)&v113[*(void *)((swift_isaMask & *(void *)v113) + 0x60)] = 28;
  char v114 = &v113[*(void *)((swift_isaMask & *(void *)v113) + 0x68)];
  unint64_t v670 = 0xD000000000000021;
  *(void *)char v114 = 0xD000000000000021;
  *((void *)v114 + 1) = 0x80000001000C11B0;
  *(void *)&v113[*(void *)((swift_isaMask & *(void *)v113) + 0x70)] = v4;
  char v115 = v4;
  v113[*(void *)((swift_isaMask & *(void *)v113) + 0x78)] = 0;
  v837.receiver = v113;
  v837.super_class = v112;
  id v116 = v111;
  v20[35] = [super init];
  unint64_t v117 = sub_10004F008((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v118 = (objc_class *)sub_100008614((uint64_t *)&qword_1000FBBD0);
  uint64_t v119 = (char *)objc_allocWithZone(v118);
  *(void *)&v119[*(void *)((swift_isaMask & *(void *)v119) + 0x80)] = 0;
  *(void *)&v119[*(void *)((swift_isaMask & *(void *)v119) + 0x60)] = v117;
  uint64_t v120 = &v119[*(void *)((swift_isaMask & *(void *)v119) + 0x68)];
  *(void *)uint64_t v120 = 0x6761735564726163;
  *((void *)v120 + 1) = 0xEA00000000007365;
  *(void *)&v119[*(void *)((swift_isaMask & *(void *)v119) + 0x70)] = v115;
  v119[*(void *)((swift_isaMask & *(void *)v119) + 0x78)] = 0;
  v836.receiver = v119;
  v836.super_class = v118;
  id v121 = v116;
  v20[36] = [super init];
  unint64_t v122 = sub_10004F008((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v123 = (char *)objc_allocWithZone(v118);
  *(void *)&v123[*(void *)((swift_isaMask & *(void *)v123) + 0x80)] = 0;
  *(void *)&v123[*(void *)((swift_isaMask & *(void *)v123) + 0x60)] = v122;
  uint64_t v124 = &v123[*(void *)((swift_isaMask & *(void *)v123) + 0x68)];
  *(void *)uint64_t v124 = 0x67617355746E6968;
  *((void *)v124 + 1) = 0xEA00000000007365;
  *(void *)&v123[*(void *)((swift_isaMask & *(void *)v123) + 0x70)] = v115;
  v123[*(void *)((swift_isaMask & *(void *)v123) + 0x78)] = 0;
  v835.receiver = v123;
  v835.super_class = v118;
  id v125 = v121;
  v20[37] = [super init];
  unint64_t v126 = sub_10004F008((uint64_t)&_swiftEmptyArrayStorage);
  long long v127 = (char *)objc_allocWithZone(v118);
  *(void *)&v127[*(void *)((swift_isaMask & *(void *)v127) + 0x80)] = 0;
  *(void *)&v127[*(void *)((swift_isaMask & *(void *)v127) + 0x60)] = v126;
  float v128 = &v127[*(void *)((swift_isaMask & *(void *)v127) + 0x68)];
  *(void *)float v128 = 0xD000000000000014;
  *((void *)v128 + 1) = 0x80000001000C11E0;
  *(void *)&v127[*(void *)((swift_isaMask & *(void *)v127) + 0x70)] = v115;
  v127[*(void *)((swift_isaMask & *(void *)v127) + 0x78)] = 0;
  v834.receiver = v127;
  v834.super_class = v118;
  id v129 = v125;
  v20[38] = [super init];
  unint64_t v130 = sub_10004F008((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v131 = (char *)objc_allocWithZone(v118);
  *(void *)&v131[*(void *)((swift_isaMask & *(void *)v131) + 0x80)] = 0;
  *(void *)&v131[*(void *)((swift_isaMask & *(void *)v131) + 0x60)] = v130;
  uint64_t v132 = &v131[*(void *)((swift_isaMask & *(void *)v131) + 0x68)];
  strcpy(v132, "transferUsages");
  v132[15] = -18;
  *(void *)&v131[*(void *)((swift_isaMask & *(void *)v131) + 0x70)] = v115;
  v131[*(void *)((swift_isaMask & *(void *)v131) + 0x78)] = 0;
  v833.receiver = v131;
  v833.super_class = v118;
  id v133 = v129;
  v20[39] = [super init];
  uint64_t v134 = (char *)objc_allocWithZone(v5);
  *(void *)&v134[*(void *)((swift_isaMask & *(void *)v134) + 0x80)] = 0;
  v134[*(void *)((swift_isaMask & *(void *)v134) + 0x60)] = 0;
  uint64_t v135 = (unint64_t *)&v134[*(void *)((swift_isaMask & *(void *)v134) + 0x68)];
  unint64_t v136 = v687;
  *uint64_t v135 = v687;
  v135[1] = 0x80000001000C1200;
  long long v137 = v115;
  *(void *)&v134[*(void *)((swift_isaMask & *(void *)v134) + 0x70)] = v115;
  v134[*(void *)((swift_isaMask & *(void *)v134) + 0x78)] = 0;
  v832.receiver = v134;
  v832.super_class = v5;
  id v138 = v133;
  v20[40] = [super init];
  double v139 = v5;
  uint64_t v140 = (char *)objc_allocWithZone(v5);
  *(void *)&v140[*(void *)((swift_isaMask & *(void *)v140) + 0x80)] = 0;
  v140[*(void *)((swift_isaMask & *(void *)v140) + 0x60)] = 0;
  uint64_t v141 = &v140[*(void *)((swift_isaMask & *(void *)v140) + 0x68)];
  *(void *)uint64_t v141 = v136;
  *((void *)v141 + 1) = 0x80000001000C1220;
  *(void *)&v140[*(void *)((swift_isaMask & *(void *)v140) + 0x70)] = v137;
  uint64_t v142 = v137;
  v140[*(void *)((swift_isaMask & *(void *)v140) + 0x78)] = 0;
  v831.receiver = v140;
  v831.super_class = v139;
  id v143 = v138;
  v20[41] = [super init];
  uint64_t v144 = (char *)objc_allocWithZone(v139);
  *(void *)&v144[*(void *)((swift_isaMask & *(void *)v144) + 0x80)] = 0;
  v144[*(void *)((swift_isaMask & *(void *)v144) + 0x60)] = 0;
  long long v145 = (unint64_t *)&v144[*(void *)((swift_isaMask & *(void *)v144) + 0x68)];
  unint64_t *v145 = v680;
  v145[1] = 0x80000001000C1240;
  *(void *)&v144[*(void *)((swift_isaMask & *(void *)v144) + 0x70)] = v137;
  v144[*(void *)((swift_isaMask & *(void *)v144) + 0x78)] = 0;
  v830.receiver = v144;
  v830.super_class = v139;
  id v146 = v143;
  v20[42] = [super init];
  Class v685 = v139;
  v147 = (char *)objc_allocWithZone(v139);
  *(void *)&v147[*(void *)((swift_isaMask & *(void *)v147) + 0x80)] = 0;
  v147[*(void *)((swift_isaMask & *(void *)v147) + 0x60)] = 0;
  uint64_t v148 = (unint64_t *)&v147[*(void *)((swift_isaMask & *(void *)v147) + 0x68)];
  *uint64_t v148 = v686;
  v148[1] = 0x80000001000C1260;
  *(void *)&v147[*(void *)((swift_isaMask & *(void *)v147) + 0x70)] = v137;
  v147[*(void *)((swift_isaMask & *(void *)v147) + 0x78)] = 0;
  v829.receiver = v147;
  v829.super_class = v139;
  id v149 = v146;
  v20[43] = [super init];
  uint64_t v150 = type metadata accessor for Date();
  uint64_t v151 = *(void (**)(void, void, void, void))(*(void *)(v150 - 8) + 56);
  Class v152 = v671;
  v151(v671, 1, 1, v150);
  v20[44] = sub_10004F6D0((uint64_t)v152);
  v151(v152, 1, 1, v150);
  v20[45] = sub_10004F8AC((uint64_t)v152);
  v151(v152, 1, 1, v150);
  v20[46] = sub_10004FA88((uint64_t)v152);
  v151(v152, 1, 1, v150);
  v20[47] = sub_10004FC64((uint64_t)v152);
  uint64_t v153 = v688;
  double v154 = (char *)objc_allocWithZone(v688);
  *(void *)&v154[*(void *)((swift_isaMask & *(void *)v154) + 0x80)] = 0;
  *(void *)&v154[*(void *)((swift_isaMask & *(void *)v154) + 0x60)] = 0x40F5180000000000;
  v155 = &v154[*(void *)((swift_isaMask & *(void *)v154) + 0x68)];
  *(void *)v155 = v672;
  *((void *)v155 + 1) = 0x80000001000C1280;
  *(void *)&v154[*(void *)((swift_isaMask & *(void *)v154) + 0x70)] = v142;
  v154[*(void *)((swift_isaMask & *(void *)v154) + 0x78)] = 0;
  v828.receiver = v154;
  v828.super_class = v153;
  id v156 = v149;
  v20[48] = [super init];
  v151(v152, 1, 1, v150);
  v20[49] = sub_10004FE40((uint64_t)v152);
  id v157 = v679;
  v158 = (char *)objc_allocWithZone(v679);
  *(void *)&v158[*(void *)((swift_isaMask & *(void *)v158) + 0x80)] = 0;
  *(void *)&v158[*(void *)((swift_isaMask & *(void *)v158) + 0x60)] = 0;
  uint64_t v159 = (unint64_t *)&v158[*(void *)((swift_isaMask & *(void *)v158) + 0x68)];
  *uint64_t v159 = v678;
  v159[1] = 0x80000001000C12A0;
  *(void *)&v158[*(void *)((swift_isaMask & *(void *)v158) + 0x70)] = v142;
  v158[*(void *)((swift_isaMask & *(void *)v158) + 0x78)] = 0;
  v827.receiver = v158;
  v827.super_class = v157;
  id v160 = v156;
  v20[50] = [super init];
  uint64_t v161 = v673;
  v162 = (char *)objc_allocWithZone(v673);
  *(void *)&v162[*(void *)((swift_isaMask & *(void *)v162) + 0x80)] = 0;
  v162[*(void *)((swift_isaMask & *(void *)v162) + 0x60)] = 1;
  uint64_t v163 = (unint64_t *)&v162[*(void *)((swift_isaMask & *(void *)v162) + 0x68)];
  *uint64_t v163 = v676;
  v163[1] = 0x80000001000C12C0;
  *(void *)&v162[*(void *)((swift_isaMask & *(void *)v162) + 0x70)] = v142;
  uint64_t v164 = v142;
  v162[*(void *)((swift_isaMask & *(void *)v162) + 0x78)] = 0;
  v826.receiver = v162;
  v826.super_class = v161;
  id v165 = v160;
  v20[51] = [super init];
  v166 = v688;
  v167 = (char *)objc_allocWithZone(v688);
  *(void *)&v167[*(void *)((swift_isaMask & *(void *)v167) + 0x80)] = 0;
  *(void *)&v167[*(void *)((swift_isaMask & *(void *)v167) + 0x60)] = 0xBFF0000000000000;
  uint64_t v168 = (unint64_t *)&v167[*(void *)((swift_isaMask & *(void *)v167) + 0x68)];
  *uint64_t v168 = v681;
  v168[1] = 0x80000001000C12E0;
  *(void *)&v167[*(void *)((swift_isaMask & *(void *)v167) + 0x70)] = v142;
  v167[*(void *)((swift_isaMask & *(void *)v167) + 0x78)] = 0;
  v825.receiver = v167;
  v825.super_class = v166;
  id v169 = v165;
  v20[52] = [super init];
  uint64_t v170 = (char *)objc_allocWithZone(v166);
  *(void *)&v170[*(void *)((swift_isaMask & *(void *)v170) + 0x80)] = 0;
  *(void *)&v170[*(void *)((swift_isaMask & *(void *)v170) + 0x60)] = 0xBFF0000000000000;
  uint64_t v171 = &v170[*(void *)((swift_isaMask & *(void *)v170) + 0x68)];
  *(void *)uint64_t v171 = 0xD000000000000014;
  *((void *)v171 + 1) = 0x80000001000C1300;
  *(void *)&v170[*(void *)((swift_isaMask & *(void *)v170) + 0x70)] = v142;
  v170[*(void *)((swift_isaMask & *(void *)v170) + 0x78)] = 0;
  v824.receiver = v170;
  v824.super_class = v166;
  id v172 = v169;
  v20[53] = [super init];
  uint64_t v173 = (objc_class *)sub_100008614((uint64_t *)&qword_1000FBBD8);
  uint64_t v174 = (char *)objc_allocWithZone(v173);
  *(void *)&v174[*(void *)((swift_isaMask & *(void *)v174) + 0x80)] = 0;
  v174[*(void *)((swift_isaMask & *(void *)v174) + 0x60)] = 0;
  v175 = (unint64_t *)&v174[*(void *)((swift_isaMask & *(void *)v174) + 0x68)];
  unint64_t v176 = v674;
  unint64_t *v175 = v674;
  v175[1] = 0x80000001000C1320;
  *(void *)&v174[*(void *)((swift_isaMask & *(void *)v174) + 0x70)] = v164;
  v174[*(void *)((swift_isaMask & *(void *)v174) + 0x78)] = 0;
  v823.receiver = v174;
  v823.super_class = v173;
  id v177 = v172;
  v20[54] = [super init];
  v178 = (char *)objc_allocWithZone(v173);
  *(void *)&v178[*(void *)((swift_isaMask & *(void *)v178) + 0x80)] = 0;
  v178[*(void *)((swift_isaMask & *(void *)v178) + 0x60)] = 1;
  uint64_t v179 = (unint64_t *)&v178[*(void *)((swift_isaMask & *(void *)v178) + 0x68)];
  *uint64_t v179 = v684;
  v179[1] = 0x80000001000C1340;
  *(void *)&v178[*(void *)((swift_isaMask & *(void *)v178) + 0x70)] = v164;
  v178[*(void *)((swift_isaMask & *(void *)v178) + 0x78)] = 0;
  v822.receiver = v178;
  v822.super_class = v173;
  id v180 = v177;
  v20[55] = [super init];
  v181 = (char *)objc_allocWithZone(v173);
  *(void *)&v181[*(void *)((swift_isaMask & *(void *)v181) + 0x80)] = 0;
  v181[*(void *)((swift_isaMask & *(void *)v181) + 0x60)] = 2;
  uint64_t v182 = &v181[*(void *)((swift_isaMask & *(void *)v181) + 0x68)];
  *(void *)uint64_t v182 = v176;
  *((void *)v182 + 1) = 0x80000001000C1360;
  *(void *)&v181[*(void *)((swift_isaMask & *(void *)v181) + 0x70)] = v164;
  v181[*(void *)((swift_isaMask & *(void *)v181) + 0x78)] = 0;
  v821.receiver = v181;
  v821.super_class = v173;
  id v183 = v180;
  v20[56] = [super init];
  v184 = (objc_class *)sub_100008614((uint64_t *)&qword_1000F8840);
  uint64_t v185 = (char *)objc_allocWithZone(v184);
  *(void *)&v185[*(void *)((swift_isaMask & *(void *)v185) + 0x80)] = 0;
  uint64_t v186 = &v185[*(void *)((swift_isaMask & *(void *)v185) + 0x60)];
  *(void *)uint64_t v186 = 0;
  *((void *)v186 + 1) = 0;
  uint64_t v187 = (unint64_t *)&v185[*(void *)((swift_isaMask & *(void *)v185) + 0x68)];
  *uint64_t v187 = v682;
  v187[1] = 0x80000001000C1380;
  *(void *)&v185[*(void *)((swift_isaMask & *(void *)v185) + 0x70)] = v164;
  v185[*(void *)((swift_isaMask & *(void *)v185) + 0x78)] = 0;
  v820.receiver = v185;
  v820.super_class = v184;
  id v188 = v183;
  v20[57] = [super init];
  uint64_t v189 = (char *)objc_allocWithZone(v184);
  *(void *)&v189[*(void *)((swift_isaMask & *(void *)v189) + 0x80)] = 0;
  uint64_t v190 = &v189[*(void *)((swift_isaMask & *(void *)v189) + 0x60)];
  *(void *)uint64_t v190 = 0;
  *((void *)v190 + 1) = 0;
  v191 = (unint64_t *)&v189[*(void *)((swift_isaMask & *(void *)v189) + 0x68)];
  unint64_t *v191 = v687;
  v191[1] = 0x80000001000C13A0;
  *(void *)&v189[*(void *)((swift_isaMask & *(void *)v189) + 0x70)] = v164;
  v189[*(void *)((swift_isaMask & *(void *)v189) + 0x78)] = 0;
  v819.receiver = v189;
  v819.super_class = v184;
  id v192 = v188;
  v20[58] = [super init];
  Class v671 = v184;
  uint64_t v193 = (char *)objc_allocWithZone(v184);
  *(void *)&v193[*(void *)((swift_isaMask & *(void *)v193) + 0x80)] = 0;
  v194 = &v193[*(void *)((swift_isaMask & *(void *)v193) + 0x60)];
  *(void *)v194 = 0;
  *((void *)v194 + 1) = 0;
  uint64_t v195 = &v193[*(void *)((swift_isaMask & *(void *)v193) + 0x68)];
  *(void *)uint64_t v195 = v176;
  *((void *)v195 + 1) = 0x80000001000C13C0;
  *(void *)&v193[*(void *)((swift_isaMask & *(void *)v193) + 0x70)] = v164;
  v193[*(void *)((swift_isaMask & *(void *)v193) + 0x78)] = 0;
  v818.receiver = v193;
  v818.super_class = v184;
  id v196 = v192;
  v20[59] = [super init];
  uint64_t v197 = v685;
  v198 = (char *)objc_allocWithZone(v685);
  *(void *)&v198[*(void *)((swift_isaMask & *(void *)v198) + 0x80)] = 0;
  v198[*(void *)((swift_isaMask & *(void *)v198) + 0x60)] = 0;
  uint64_t v199 = &v198[*(void *)((swift_isaMask & *(void *)v198) + 0x68)];
  *(void *)uint64_t v199 = 0xD000000000000025;
  *((void *)v199 + 1) = 0x80000001000C13E0;
  *(void *)&v198[*(void *)((swift_isaMask & *(void *)v198) + 0x70)] = v164;
  v198[*(void *)((swift_isaMask & *(void *)v198) + 0x78)] = 0;
  v817.receiver = v198;
  v817.super_class = v197;
  id v200 = v196;
  v20[60] = [super init];
  v201 = (char *)objc_allocWithZone(v197);
  *(void *)&v201[*(void *)((swift_isaMask & *(void *)v201) + 0x80)] = 0;
  v201[*(void *)((swift_isaMask & *(void *)v201) + 0x60)] = 0;
  uint64_t v202 = (unint64_t *)&v201[*(void *)((swift_isaMask & *(void *)v201) + 0x68)];
  *uint64_t v202 = v675;
  v202[1] = 0x80000001000C1410;
  *(void *)&v201[*(void *)((swift_isaMask & *(void *)v201) + 0x70)] = v164;
  v201[*(void *)((swift_isaMask & *(void *)v201) + 0x78)] = 0;
  v816.receiver = v201;
  v816.super_class = v197;
  id v203 = v200;
  v20[61] = [super init];
  v204 = (char *)objc_allocWithZone(v197);
  *(void *)&v204[*(void *)((swift_isaMask & *(void *)v204) + 0x80)] = 0;
  v204[*(void *)((swift_isaMask & *(void *)v204) + 0x60)] = 0;
  v205 = &v204[*(void *)((swift_isaMask & *(void *)v204) + 0x68)];
  *(void *)v205 = v672;
  *((void *)v205 + 1) = 0x80000001000C1430;
  *(void *)&v204[*(void *)((swift_isaMask & *(void *)v204) + 0x70)] = v164;
  v204[*(void *)((swift_isaMask & *(void *)v204) + 0x78)] = 0;
  v815.receiver = v204;
  v815.super_class = v197;
  id v206 = v203;
  v20[62] = [super init];
  v207 = (char *)objc_allocWithZone(v197);
  *(void *)&v207[*(void *)((swift_isaMask & *(void *)v207) + 0x80)] = 0;
  v207[*(void *)((swift_isaMask & *(void *)v207) + 0x60)] = 0;
  v208 = (unint64_t *)&v207[*(void *)((swift_isaMask & *(void *)v207) + 0x68)];
  unint64_t *v208 = v682;
  v208[1] = 0x80000001000C1450;
  *(void *)&v207[*(void *)((swift_isaMask & *(void *)v207) + 0x70)] = v164;
  v207[*(void *)((swift_isaMask & *(void *)v207) + 0x78)] = 0;
  v814.receiver = v207;
  v814.super_class = v197;
  id v209 = v206;
  v20[63] = [super init];
  uint64_t v210 = (char *)objc_allocWithZone(v197);
  *(void *)&v210[*(void *)((swift_isaMask & *(void *)v210) + 0x80)] = 0;
  v210[*(void *)((swift_isaMask & *(void *)v210) + 0x60)] = 0;
  uint64_t v211 = &v210[*(void *)((swift_isaMask & *(void *)v210) + 0x68)];
  strcpy(v211, "skipHomeCard");
  v211[13] = 0;
  *((_WORD *)v211 + 7) = -5120;
  *(void *)&v210[*(void *)((swift_isaMask & *(void *)v210) + 0x70)] = v164;
  v210[*(void *)((swift_isaMask & *(void *)v210) + 0x78)] = 0;
  v813.receiver = v210;
  v813.super_class = v197;
  id v212 = v209;
  v20[64] = [super init];
  v213 = v688;
  uint64_t v214 = (char *)objc_allocWithZone(v688);
  *(void *)&v214[*(void *)((swift_isaMask & *(void *)v214) + 0x80)] = 0;
  *(void *)&v214[*(void *)((swift_isaMask & *(void *)v214) + 0x60)] = 0x4020000000000000;
  v215 = (unint64_t *)&v214[*(void *)((swift_isaMask & *(void *)v214) + 0x68)];
  unint64_t v216 = v681;
  unint64_t *v215 = v681;
  v215[1] = 0x80000001000C1470;
  *(void *)&v214[*(void *)((swift_isaMask & *(void *)v214) + 0x70)] = v164;
  v214[*(void *)((swift_isaMask & *(void *)v214) + 0x78)] = 0;
  v812.receiver = v214;
  v812.super_class = v213;
  id v217 = v212;
  v20[65] = [super init];
  uint64_t v218 = (char *)objc_allocWithZone(v197);
  *(void *)&v218[*(void *)((swift_isaMask & *(void *)v218) + 0x80)] = 0;
  v218[*(void *)((swift_isaMask & *(void *)v218) + 0x60)] = 0;
  uint64_t v219 = &v218[*(void *)((swift_isaMask & *(void *)v218) + 0x68)];
  *(void *)uint64_t v219 = v216;
  *((void *)v219 + 1) = 0x80000001000C1490;
  *(void *)&v218[*(void *)((swift_isaMask & *(void *)v218) + 0x70)] = v164;
  v218[*(void *)((swift_isaMask & *(void *)v218) + 0x78)] = 0;
  v811.receiver = v218;
  v811.super_class = v197;
  id v220 = v217;
  id v221 = v20;
  v20[66] = [super init];
  v222 = (char *)objc_allocWithZone(v197);
  *(void *)&v222[*(void *)((swift_isaMask & *(void *)v222) + 0x80)] = 0;
  v222[*(void *)((swift_isaMask & *(void *)v222) + 0x60)] = 0;
  v223 = (unint64_t *)&v222[*(void *)((swift_isaMask & *(void *)v222) + 0x68)];
  unint64_t *v223 = v683;
  v223[1] = 0x80000001000C14B0;
  *(void *)&v222[*(void *)((swift_isaMask & *(void *)v222) + 0x70)] = v164;
  v222[*(void *)((swift_isaMask & *(void *)v222) + 0x78)] = 0;
  v810.receiver = v222;
  v810.super_class = v197;
  id v224 = v220;
  v20[67] = [super init];
  v225 = (char *)objc_allocWithZone(v213);
  *(void *)&v225[*(void *)((swift_isaMask & *(void *)v225) + 0x80)] = 0;
  *(void *)&v225[*(void *)((swift_isaMask & *(void *)v225) + 0x60)] = 0x3FE0000000000000;
  v226 = &v225[*(void *)((swift_isaMask & *(void *)v225) + 0x68)];
  *(void *)v226 = v677;
  *((void *)v226 + 1) = 0x80000001000C14D0;
  *(void *)&v225[*(void *)((swift_isaMask & *(void *)v225) + 0x70)] = v164;
  v225[*(void *)((swift_isaMask & *(void *)v225) + 0x78)] = 0;
  v809.receiver = v225;
  v809.super_class = v213;
  id v227 = v224;
  v20[68] = [super init];
  v228 = (objc_class *)sub_100008614(&qword_1000F87A0);
  v229 = (char *)objc_allocWithZone(v228);
  *(void *)&v229[*(void *)((swift_isaMask & *(void *)v229) + 0x80)] = 0;
  *(void *)&v229[*(void *)((swift_isaMask & *(void *)v229) + 0x60)] = 0x3FB999999999999ALL;
  v230 = (unint64_t *)&v229[*(void *)((swift_isaMask & *(void *)v229) + 0x68)];
  unint64_t *v230 = v675;
  v230[1] = 0x80000001000C14F0;
  *(void *)&v229[*(void *)((swift_isaMask & *(void *)v229) + 0x70)] = v164;
  v229[*(void *)((swift_isaMask & *(void *)v229) + 0x78)] = 0;
  v808.receiver = v229;
  v808.super_class = v228;
  id v231 = v227;
  v20[69] = [super init];
  v232 = (char *)objc_allocWithZone(v228);
  *(void *)&v232[*(void *)((swift_isaMask & *(void *)v232) + 0x80)] = 0;
  *(void *)&v232[*(void *)((swift_isaMask & *(void *)v232) + 0x60)] = 0x3FB999999999999ALL;
  v233 = (unint64_t *)&v232[*(void *)((swift_isaMask & *(void *)v232) + 0x68)];
  unint64_t *v233 = v678;
  v233[1] = 0x80000001000C1510;
  *(void *)&v232[*(void *)((swift_isaMask & *(void *)v232) + 0x70)] = v164;
  v232[*(void *)((swift_isaMask & *(void *)v232) + 0x78)] = 0;
  v807.receiver = v232;
  v807.super_class = v228;
  id v234 = v231;
  v20[70] = [super init];
  v235 = (char *)objc_allocWithZone(v228);
  *(void *)&v235[*(void *)((swift_isaMask & *(void *)v235) + 0x80)] = 0;
  *(void *)&v235[*(void *)((swift_isaMask & *(void *)v235) + 0x60)] = 0x3FF3333333333333;
  v236 = (unint64_t *)&v235[*(void *)((swift_isaMask & *(void *)v235) + 0x68)];
  unint64_t v237 = v667;
  unint64_t *v236 = v667;
  v236[1] = 0x80000001000C1530;
  *(void *)&v235[*(void *)((swift_isaMask & *(void *)v235) + 0x70)] = v164;
  v235[*(void *)((swift_isaMask & *(void *)v235) + 0x78)] = 0;
  v806.receiver = v235;
  v806.super_class = v228;
  id v238 = v234;
  v221[71] = [super init];
  v239 = (char *)objc_allocWithZone(v228);
  *(void *)&v239[*(void *)((swift_isaMask & *(void *)v239) + 0x80)] = 0;
  *(void *)&v239[*(void *)((swift_isaMask & *(void *)v239) + 0x60)] = 0xBFF4000000000000;
  v240 = &v239[*(void *)((swift_isaMask & *(void *)v239) + 0x68)];
  *(void *)v240 = 0xD000000000000023;
  *((void *)v240 + 1) = 0x80000001000C1560;
  *(void *)&v239[*(void *)((swift_isaMask & *(void *)v239) + 0x70)] = v164;
  v239[*(void *)((swift_isaMask & *(void *)v239) + 0x78)] = 0;
  v805.receiver = v239;
  v805.super_class = v228;
  id v241 = v238;
  v221[72] = [super init];
  v242 = (char *)objc_allocWithZone(v228);
  *(void *)&v242[*(void *)((swift_isaMask & *(void *)v242) + 0x80)] = 0;
  *(void *)&v242[*(void *)((swift_isaMask & *(void *)v242) + 0x60)] = 0x4039000000000000;
  v243 = (unint64_t *)&v242[*(void *)((swift_isaMask & *(void *)v242) + 0x68)];
  unint64_t *v243 = v670;
  v243[1] = 0x80000001000C1590;
  *(void *)&v242[*(void *)((swift_isaMask & *(void *)v242) + 0x70)] = v164;
  v242[*(void *)((swift_isaMask & *(void *)v242) + 0x78)] = 0;
  v804.receiver = v242;
  v804.super_class = v228;
  id v244 = v241;
  v221[73] = [super init];
  v245 = (char *)objc_allocWithZone(v228);
  *(void *)&v245[*(void *)((swift_isaMask & *(void *)v245) + 0x80)] = 0;
  *(void *)&v245[*(void *)((swift_isaMask & *(void *)v245) + 0x60)] = 0x4039000000000000;
  v246 = &v245[*(void *)((swift_isaMask & *(void *)v245) + 0x68)];
  *(void *)v246 = v237;
  *((void *)v246 + 1) = 0x80000001000C15C0;
  *(void *)&v245[*(void *)((swift_isaMask & *(void *)v245) + 0x70)] = v164;
  v245[*(void *)((swift_isaMask & *(void *)v245) + 0x78)] = 0;
  v803.receiver = v245;
  v803.super_class = v228;
  id v247 = v244;
  v221[74] = [super init];
  v248 = (char *)objc_allocWithZone(v228);
  *(void *)&v248[*(void *)((swift_isaMask & *(void *)v248) + 0x80)] = 0;
  *(void *)&v248[*(void *)((swift_isaMask & *(void *)v248) + 0x60)] = 0;
  v249 = &v248[*(void *)((swift_isaMask & *(void *)v248) + 0x68)];
  unint64_t v670 = 0xD000000000000015;
  *(void *)v249 = 0xD000000000000015;
  *((void *)v249 + 1) = 0x80000001000C15F0;
  *(void *)&v248[*(void *)((swift_isaMask & *(void *)v248) + 0x70)] = v164;
  v248[*(void *)((swift_isaMask & *(void *)v248) + 0x78)] = 0;
  v802.receiver = v248;
  v802.super_class = v228;
  id v250 = v247;
  v221[75] = [super init];
  v251 = (objc_class *)sub_100008614(&qword_1000F8880);
  v252 = (char *)objc_allocWithZone(v251);
  *(void *)&v252[*(void *)((swift_isaMask & *(void *)v252) + 0x80)] = 0;
  v252[*(void *)((swift_isaMask & *(void *)v252) + 0x60)] = 1;
  v253 = (unint64_t *)&v252[*(void *)((swift_isaMask & *(void *)v252) + 0x68)];
  unint64_t *v253 = v668;
  v253[1] = 0x80000001000C1610;
  *(void *)&v252[*(void *)((swift_isaMask & *(void *)v252) + 0x70)] = v164;
  v252[*(void *)((swift_isaMask & *(void *)v252) + 0x78)] = 0;
  v801.receiver = v252;
  v801.super_class = v251;
  id v254 = v250;
  v221[76] = [super init];
  v255 = v679;
  v256 = (char *)objc_allocWithZone(v679);
  *(void *)&v256[*(void *)((swift_isaMask & *(void *)v256) + 0x80)] = 0;
  *(void *)&v256[*(void *)((swift_isaMask & *(void *)v256) + 0x60)] = 11;
  v257 = &v256[*(void *)((swift_isaMask & *(void *)v256) + 0x68)];
  strcpy(v257, "cardBlurStyle");
  *((_WORD *)v257 + 7) = -4864;
  *(void *)&v256[*(void *)((swift_isaMask & *(void *)v256) + 0x70)] = v164;
  v256[*(void *)((swift_isaMask & *(void *)v256) + 0x78)] = 0;
  v800.receiver = v256;
  v800.super_class = v255;
  id v258 = v254;
  v221[77] = [super init];
  v259 = (char *)objc_allocWithZone(v228);
  *(void *)&v259[*(void *)((swift_isaMask & *(void *)v259) + 0x80)] = 0;
  *(void *)&v259[*(void *)((swift_isaMask & *(void *)v259) + 0x60)] = 0x4030000000000000;
  v260 = &v259[*(void *)((swift_isaMask & *(void *)v259) + 0x68)];
  strcpy(v260, "cardBlurRadius");
  v260[15] = -18;
  *(void *)&v259[*(void *)((swift_isaMask & *(void *)v259) + 0x70)] = v164;
  v259[*(void *)((swift_isaMask & *(void *)v259) + 0x78)] = 0;
  v799.receiver = v259;
  v799.super_class = v228;
  id v261 = v258;
  v221[78] = [super init];
  v262 = v685;
  v263 = (char *)objc_allocWithZone(v685);
  *(void *)&v263[*(void *)((swift_isaMask & *(void *)v263) + 0x80)] = 0;
  v263[*(void *)((swift_isaMask & *(void *)v263) + 0x60)] = 0;
  v264 = (unint64_t *)&v263[*(void *)((swift_isaMask & *(void *)v263) + 0x68)];
  unint64_t *v264 = v684;
  v264[1] = 0x80000001000C1630;
  *(void *)&v263[*(void *)((swift_isaMask & *(void *)v263) + 0x70)] = v164;
  v263[*(void *)((swift_isaMask & *(void *)v263) + 0x78)] = 0;
  v798.receiver = v263;
  v798.super_class = v262;
  id v265 = v261;
  v221[79] = [super init];
  v266 = (char *)objc_allocWithZone(v228);
  *(void *)&v266[*(void *)((swift_isaMask & *(void *)v266) + 0x80)] = 0;
  *(void *)&v266[*(void *)((swift_isaMask & *(void *)v266) + 0x60)] = 0x4034000000000000;
  v267 = &v266[*(void *)((swift_isaMask & *(void *)v266) + 0x68)];
  *(void *)v267 = 0xD000000000000014;
  *((void *)v267 + 1) = 0x80000001000C1650;
  *(void *)&v266[*(void *)((swift_isaMask & *(void *)v266) + 0x70)] = v164;
  v266[*(void *)((swift_isaMask & *(void *)v266) + 0x78)] = 0;
  v797.receiver = v266;
  v797.super_class = v228;
  id v268 = v265;
  v221[80] = [super init];
  Class v669 = v228;
  v269 = (char *)objc_allocWithZone(v228);
  *(void *)&v269[*(void *)((swift_isaMask & *(void *)v269) + 0x80)] = 0;
  *(void *)&v269[*(void *)((swift_isaMask & *(void *)v269) + 0x60)] = 0x4034000000000000;
  v270 = (unint64_t *)&v269[*(void *)((swift_isaMask & *(void *)v269) + 0x68)];
  unint64_t *v270 = v687;
  v270[1] = 0x80000001000C1670;
  *(void *)&v269[*(void *)((swift_isaMask & *(void *)v269) + 0x70)] = v164;
  v269[*(void *)((swift_isaMask & *(void *)v269) + 0x78)] = 0;
  v796.receiver = v269;
  v796.super_class = v228;
  id v271 = v268;
  v221[81] = [super init];
  v272 = v262;
  v273 = (char *)objc_allocWithZone(v262);
  *(void *)&v273[*(void *)((swift_isaMask & *(void *)v273) + 0x80)] = 0;
  v273[*(void *)((swift_isaMask & *(void *)v273) + 0x60)] = 1;
  v274 = (unint64_t *)&v273[*(void *)((swift_isaMask & *(void *)v273) + 0x68)];
  unint64_t v275 = v680;
  unint64_t *v274 = v680;
  v274[1] = 0x80000001000C1690;
  *(void *)&v273[*(void *)((swift_isaMask & *(void *)v273) + 0x70)] = v164;
  v273[*(void *)((swift_isaMask & *(void *)v273) + 0x78)] = 0;
  v795.receiver = v273;
  v795.super_class = v272;
  id v276 = v271;
  v221[82] = [super init];
  v277 = v688;
  v278 = (char *)objc_allocWithZone(v688);
  *(void *)&v278[*(void *)((swift_isaMask & *(void *)v278) + 0x80)] = 0;
  *(void *)&v278[*(void *)((swift_isaMask & *(void *)v278) + 0x60)] = 0x3FD3333333333333;
  v279 = (unint64_t *)&v278[*(void *)((swift_isaMask & *(void *)v278) + 0x68)];
  unint64_t *v279 = v686;
  v279[1] = 0x80000001000C16B0;
  *(void *)&v278[*(void *)((swift_isaMask & *(void *)v278) + 0x70)] = v164;
  v278[*(void *)((swift_isaMask & *(void *)v278) + 0x78)] = 0;
  v794.receiver = v278;
  v794.super_class = v277;
  id v280 = v276;
  v221[83] = [super init];
  v281 = (char *)objc_allocWithZone(v277);
  *(void *)&v281[*(void *)((swift_isaMask & *(void *)v281) + 0x80)] = 0;
  *(void *)&v281[*(void *)((swift_isaMask & *(void *)v281) + 0x60)] = 0x3FF4CCCCCCCCCCCDLL;
  v282 = &v281[*(void *)((swift_isaMask & *(void *)v281) + 0x68)];
  *(void *)v282 = 0x617078456C6C6970;
  *((void *)v282 + 1) = 0xEF656C616353646ELL;
  *(void *)&v281[*(void *)((swift_isaMask & *(void *)v281) + 0x70)] = v164;
  v281[*(void *)((swift_isaMask & *(void *)v281) + 0x78)] = 0;
  v793.receiver = v281;
  v793.super_class = v277;
  id v283 = v280;
  v221[84] = [super init];
  v284 = (objc_class *)sub_100008614((uint64_t *)&qword_1000FBBE0);
  v285 = (char *)objc_allocWithZone(v284);
  *(void *)&v285[*(void *)((swift_isaMask & *(void *)v285) + 0x80)] = 0;
  *(void *)&v285[*(void *)((swift_isaMask & *(void *)v285) + 0x60)] = kCAMediaTimingFunctionEaseOut;
  v286 = (unint64_t *)&v285[*(void *)((swift_isaMask & *(void *)v285) + 0x68)];
  unint64_t v287 = v675;
  unint64_t *v286 = v675;
  v286[1] = 0x80000001000C16D0;
  *(void *)&v285[*(void *)((swift_isaMask & *(void *)v285) + 0x70)] = v164;
  v285[*(void *)((swift_isaMask & *(void *)v285) + 0x78)] = 0;
  v792.receiver = v285;
  v792.super_class = v284;
  id v288 = v283;
  v289 = kCAMediaTimingFunctionEaseOut;
  v221[85] = [super init];
  v290 = (objc_class *)sub_100008614((uint64_t *)&qword_1000FBBE8);
  v291 = (char *)objc_allocWithZone(v290);
  *(void *)&v291[*(void *)((swift_isaMask & *(void *)v291) + 0x80)] = 0;
  v291[*(void *)((swift_isaMask & *(void *)v291) + 0x60)] = 0;
  v292 = &v291[*(void *)((swift_isaMask & *(void *)v291) + 0x68)];
  *(void *)v292 = v287;
  *((void *)v292 + 1) = 0x80000001000C16F0;
  *(void *)&v291[*(void *)((swift_isaMask & *(void *)v291) + 0x70)] = v164;
  v291[*(void *)((swift_isaMask & *(void *)v291) + 0x78)] = 0;
  v791.receiver = v291;
  v791.super_class = v290;
  id v293 = v288;
  v221[86] = [super init];
  v294 = (objc_class *)sub_100008614((uint64_t *)&qword_1000FBBF0);
  v295 = (char *)objc_allocWithZone(v294);
  *(void *)&v295[*(void *)((swift_isaMask & *(void *)v295) + 0x80)] = 0;
  v295[*(void *)((swift_isaMask & *(void *)v295) + 0x60)] = 0;
  v296 = &v295[*(void *)((swift_isaMask & *(void *)v295) + 0x68)];
  *(void *)v296 = v275;
  *((void *)v296 + 1) = 0x80000001000C1710;
  *(void *)&v295[*(void *)((swift_isaMask & *(void *)v295) + 0x70)] = v164;
  v295[*(void *)((swift_isaMask & *(void *)v295) + 0x78)] = 0;
  v790.receiver = v295;
  v790.super_class = v294;
  id v297 = v293;
  v221[87] = [super init];
  v298 = v685;
  v299 = (char *)objc_allocWithZone(v685);
  *(void *)&v299[*(void *)((swift_isaMask & *(void *)v299) + 0x80)] = 0;
  v299[*(void *)((swift_isaMask & *(void *)v299) + 0x60)] = 1;
  v300 = (unint64_t *)&v299[*(void *)((swift_isaMask & *(void *)v299) + 0x68)];
  unint64_t *v300 = v684;
  v300[1] = 0x80000001000C1730;
  *(void *)&v299[*(void *)((swift_isaMask & *(void *)v299) + 0x70)] = v164;
  v299[*(void *)((swift_isaMask & *(void *)v299) + 0x78)] = 0;
  v789.receiver = v299;
  v789.super_class = v298;
  id v301 = v297;
  v221[88] = [super init];
  v302 = v688;
  v303 = (char *)objc_allocWithZone(v688);
  *(void *)&v303[*(void *)((swift_isaMask & *(void *)v303) + 0x80)] = 0;
  *(void *)&v303[*(void *)((swift_isaMask & *(void *)v303) + 0x60)] = 0;
  v304 = &v303[*(void *)((swift_isaMask & *(void *)v303) + 0x68)];
  *(void *)v304 = 0xD000000000000014;
  *((void *)v304 + 1) = 0x80000001000C1750;
  *(void *)&v303[*(void *)((swift_isaMask & *(void *)v303) + 0x70)] = v164;
  v303[*(void *)((swift_isaMask & *(void *)v303) + 0x78)] = 0;
  v788.receiver = v303;
  v788.super_class = v302;
  id v305 = v301;
  v221[89] = [super init];
  v306 = (char *)objc_allocWithZone(v298);
  *(void *)&v306[*(void *)((swift_isaMask & *(void *)v306) + 0x80)] = 0;
  v306[*(void *)((swift_isaMask & *(void *)v306) + 0x60)] = 0;
  v307 = &v306[*(void *)((swift_isaMask & *(void *)v306) + 0x68)];
  *(void *)v307 = v672;
  *((void *)v307 + 1) = 0x80000001000C1770;
  *(void *)&v306[*(void *)((swift_isaMask & *(void *)v306) + 0x70)] = v164;
  v306[*(void *)((swift_isaMask & *(void *)v306) + 0x78)] = 0;
  v787.receiver = v306;
  v787.super_class = v298;
  id v308 = v305;
  v221[90] = [super init];
  v309 = (char *)objc_allocWithZone(v298);
  *(void *)&v309[*(void *)((swift_isaMask & *(void *)v309) + 0x80)] = 0;
  v309[*(void *)((swift_isaMask & *(void *)v309) + 0x60)] = 1;
  v310 = (unint64_t *)&v309[*(void *)((swift_isaMask & *(void *)v309) + 0x68)];
  unint64_t *v310 = v686;
  v310[1] = 0x80000001000C1790;
  *(void *)&v309[*(void *)((swift_isaMask & *(void *)v309) + 0x70)] = v164;
  v309[*(void *)((swift_isaMask & *(void *)v309) + 0x78)] = 0;
  v786.receiver = v309;
  v786.super_class = v298;
  id v311 = v308;
  v221[91] = [super init];
  v312 = (char *)objc_allocWithZone(v298);
  *(void *)&v312[*(void *)((swift_isaMask & *(void *)v312) + 0x80)] = 0;
  v312[*(void *)((swift_isaMask & *(void *)v312) + 0x60)] = 1;
  v313 = (unint64_t *)&v312[*(void *)((swift_isaMask & *(void *)v312) + 0x68)];
  unint64_t *v313 = v681;
  v313[1] = 0x80000001000C17B0;
  *(void *)&v312[*(void *)((swift_isaMask & *(void *)v312) + 0x70)] = v164;
  v312[*(void *)((swift_isaMask & *(void *)v312) + 0x78)] = 0;
  v785.receiver = v312;
  v785.super_class = v298;
  id v314 = v311;
  v221[92] = [super init];
  v315 = (objc_class *)sub_100008614((uint64_t *)&qword_1000FBBF8);
  v316 = (char *)objc_allocWithZone(v315);
  *(void *)&v316[*(void *)((swift_isaMask & *(void *)v316) + 0x80)] = 0;
  *(_DWORD *)&v316[*(void *)((swift_isaMask & *(void *)v316) + 0x60)] = 1041865114;
  v317 = &v316[*(void *)((swift_isaMask & *(void *)v316) + 0x68)];
  *(void *)v317 = 0xD000000000000014;
  *((void *)v317 + 1) = 0x80000001000C17D0;
  *(void *)&v316[*(void *)((swift_isaMask & *(void *)v316) + 0x70)] = v164;
  v316[*(void *)((swift_isaMask & *(void *)v316) + 0x78)] = 0;
  v784.receiver = v316;
  v784.super_class = v315;
  id v318 = v314;
  v221[93] = [super init];
  Class v672 = v315;
  v319 = (char *)objc_allocWithZone(v315);
  *(void *)&v319[*(void *)((swift_isaMask & *(void *)v319) + 0x80)] = 0;
  *(_DWORD *)&v319[*(void *)((swift_isaMask & *(void *)v319) + 0x60)] = 0;
  v320 = &v319[*(void *)((swift_isaMask & *(void *)v319) + 0x68)];
  *(void *)v320 = 0xD000000000000014;
  *((void *)v320 + 1) = 0x80000001000C17F0;
  *(void *)&v319[*(void *)((swift_isaMask & *(void *)v319) + 0x70)] = v164;
  v319[*(void *)((swift_isaMask & *(void *)v319) + 0x78)] = 0;
  v783.receiver = v319;
  v783.super_class = v315;
  id v321 = v318;
  v221[94] = [super init];
  v322 = (objc_class *)sub_100008614((uint64_t *)&qword_1000FBC00);
  v323 = (char *)objc_allocWithZone(v322);
  *(void *)&v323[*(void *)((swift_isaMask & *(void *)v323) + 0x80)] = 0;
  v323[*(void *)((swift_isaMask & *(void *)v323) + 0x60)] = 4;
  v324 = (unint64_t *)&v323[*(void *)((swift_isaMask & *(void *)v323) + 0x68)];
  unint64_t v325 = v682;
  unint64_t *v324 = v682;
  v324[1] = 0x80000001000C1810;
  *(void *)&v323[*(void *)((swift_isaMask & *(void *)v323) + 0x70)] = v164;
  v323[*(void *)((swift_isaMask & *(void *)v323) + 0x78)] = 0;
  v782.receiver = v323;
  v782.super_class = v322;
  id v326 = v321;
  v221[95] = [super init];
  v327 = v669;
  v328 = (char *)objc_allocWithZone(v669);
  *(void *)&v328[*(void *)((swift_isaMask & *(void *)v328) + 0x80)] = 0;
  *(void *)&v328[*(void *)((swift_isaMask & *(void *)v328) + 0x60)] = 0x3FF0000000000000;
  v329 = (unint64_t *)&v328[*(void *)((swift_isaMask & *(void *)v328) + 0x68)];
  unint64_t v330 = v670;
  unint64_t *v329 = v670;
  v329[1] = 0x80000001000C1830;
  *(void *)&v328[*(void *)((swift_isaMask & *(void *)v328) + 0x70)] = v164;
  v328[*(void *)((swift_isaMask & *(void *)v328) + 0x78)] = 0;
  v781.receiver = v328;
  v781.super_class = v327;
  id v331 = v326;
  v221[96] = [super init];
  v332 = (char *)objc_allocWithZone(v322);
  *(void *)&v332[*(void *)((swift_isaMask & *(void *)v332) + 0x80)] = 0;
  v332[*(void *)((swift_isaMask & *(void *)v332) + 0x60)] = 3;
  v333 = &v332[*(void *)((swift_isaMask & *(void *)v332) + 0x68)];
  *(void *)v333 = v325;
  *((void *)v333 + 1) = 0x80000001000C1850;
  *(void *)&v332[*(void *)((swift_isaMask & *(void *)v332) + 0x70)] = v164;
  v332[*(void *)((swift_isaMask & *(void *)v332) + 0x78)] = 0;
  v780.receiver = v332;
  v780.super_class = v322;
  id v334 = v331;
  v221[97] = [super init];
  v335 = v669;
  v336 = (char *)objc_allocWithZone(v669);
  *(void *)&v336[*(void *)((swift_isaMask & *(void *)v336) + 0x80)] = 0;
  *(void *)&v336[*(void *)((swift_isaMask & *(void *)v336) + 0x60)] = 0x3FF0000000000000;
  v337 = &v336[*(void *)((swift_isaMask & *(void *)v336) + 0x68)];
  *(void *)v337 = v330;
  *((void *)v337 + 1) = 0x80000001000C1870;
  *(void *)&v336[*(void *)((swift_isaMask & *(void *)v336) + 0x70)] = v164;
  v336[*(void *)((swift_isaMask & *(void *)v336) + 0x78)] = 0;
  v779.receiver = v336;
  v779.super_class = v335;
  id v338 = v334;
  v221[98] = [super init];
  v339 = v685;
  v340 = (char *)objc_allocWithZone(v685);
  *(void *)&v340[*(void *)((swift_isaMask & *(void *)v340) + 0x80)] = 0;
  v340[*(void *)((swift_isaMask & *(void *)v340) + 0x60)] = 0;
  v341 = &v340[*(void *)((swift_isaMask & *(void *)v340) + 0x68)];
  *(void *)v341 = 0xD000000000000027;
  *((void *)v341 + 1) = 0x80000001000C1890;
  *(void *)&v340[*(void *)((swift_isaMask & *(void *)v340) + 0x70)] = v164;
  v340[*(void *)((swift_isaMask & *(void *)v340) + 0x78)] = 0;
  v778.receiver = v340;
  v778.super_class = v339;
  id v342 = v338;
  v221[99] = [super init];
  v343 = (char *)objc_allocWithZone(v339);
  *(void *)&v343[*(void *)((swift_isaMask & *(void *)v343) + 0x80)] = 0;
  v343[*(void *)((swift_isaMask & *(void *)v343) + 0x60)] = 0;
  v344 = &v343[*(void *)((swift_isaMask & *(void *)v343) + 0x68)];
  *(void *)v344 = 0xD000000000000032;
  *((void *)v344 + 1) = 0x80000001000C18C0;
  *(void *)&v343[*(void *)((swift_isaMask & *(void *)v343) + 0x70)] = v164;
  v343[*(void *)((swift_isaMask & *(void *)v343) + 0x78)] = 0;
  v777.receiver = v343;
  v777.super_class = v339;
  id v345 = v342;
  v221[100] = [super init];
  v346 = (char *)objc_allocWithZone(v339);
  *(void *)&v346[*(void *)((swift_isaMask & *(void *)v346) + 0x80)] = 0;
  v346[*(void *)((swift_isaMask & *(void *)v346) + 0x60)] = 0;
  v347 = (unint64_t *)&v346[*(void *)((swift_isaMask & *(void *)v346) + 0x68)];
  unint64_t *v347 = v680;
  v347[1] = 0x80000001000C1900;
  *(void *)&v346[*(void *)((swift_isaMask & *(void *)v346) + 0x70)] = v164;
  v346[*(void *)((swift_isaMask & *(void *)v346) + 0x78)] = 0;
  v776.receiver = v346;
  v776.super_class = v339;
  id v348 = v345;
  v221[101] = [super init];
  v349 = (char *)objc_allocWithZone(v339);
  *(void *)&v349[*(void *)((swift_isaMask & *(void *)v349) + 0x80)] = 0;
  v349[*(void *)((swift_isaMask & *(void *)v349) + 0x60)] = 1;
  v350 = (unint64_t *)&v349[*(void *)((swift_isaMask & *(void *)v349) + 0x68)];
  unint64_t v351 = v674;
  unint64_t *v350 = v674;
  v350[1] = 0x80000001000C1920;
  *(void *)&v349[*(void *)((swift_isaMask & *(void *)v349) + 0x70)] = v164;
  v349[*(void *)((swift_isaMask & *(void *)v349) + 0x78)] = 0;
  v775.receiver = v349;
  v775.super_class = v339;
  id v352 = v348;
  v221[102] = [super init];
  v353 = (char *)objc_allocWithZone(v339);
  *(void *)&v353[*(void *)((swift_isaMask & *(void *)v353) + 0x80)] = 0;
  v353[*(void *)((swift_isaMask & *(void *)v353) + 0x60)] = 0;
  v354 = (unint64_t *)&v353[*(void *)((swift_isaMask & *(void *)v353) + 0x68)];
  unint64_t *v354 = v670;
  v354[1] = 0x80000001000C1940;
  *(void *)&v353[*(void *)((swift_isaMask & *(void *)v353) + 0x70)] = v164;
  v353[*(void *)((swift_isaMask & *(void *)v353) + 0x78)] = 0;
  v774.receiver = v353;
  v774.super_class = v339;
  id v355 = v352;
  v221[103] = [super init];
  v356 = (char *)objc_allocWithZone(v339);
  *(void *)&v356[*(void *)((swift_isaMask & *(void *)v356) + 0x80)] = 0;
  v356[*(void *)((swift_isaMask & *(void *)v356) + 0x60)] = 1;
  v357 = &v356[*(void *)((swift_isaMask & *(void *)v356) + 0x68)];
  *(void *)v357 = v677;
  *((void *)v357 + 1) = 0x80000001000C1960;
  *(void *)&v356[*(void *)((swift_isaMask & *(void *)v356) + 0x70)] = v164;
  v356[*(void *)((swift_isaMask & *(void *)v356) + 0x78)] = 0;
  v773.receiver = v356;
  v773.super_class = v339;
  id v358 = v355;
  v221[104] = [super init];
  v359 = (char *)objc_allocWithZone(v339);
  *(void *)&v359[*(void *)((swift_isaMask & *(void *)v359) + 0x80)] = 0;
  v359[*(void *)((swift_isaMask & *(void *)v359) + 0x60)] = 0;
  v360 = (unint64_t *)&v359[*(void *)((swift_isaMask & *(void *)v359) + 0x68)];
  unint64_t *v360 = v683;
  v360[1] = 0x80000001000C1980;
  *(void *)&v359[*(void *)((swift_isaMask & *(void *)v359) + 0x70)] = v164;
  v359[*(void *)((swift_isaMask & *(void *)v359) + 0x78)] = 0;
  v772.receiver = v359;
  v772.super_class = v339;
  id v361 = v358;
  v221[105] = [super init];
  v362 = (char *)objc_allocWithZone(v339);
  *(void *)&v362[*(void *)((swift_isaMask & *(void *)v362) + 0x80)] = 0;
  v362[*(void *)((swift_isaMask & *(void *)v362) + 0x60)] = 0;
  v363 = &v362[*(void *)((swift_isaMask & *(void *)v362) + 0x68)];
  *(void *)v363 = v351;
  *((void *)v363 + 1) = 0x80000001000C19A0;
  *(void *)&v362[*(void *)((swift_isaMask & *(void *)v362) + 0x70)] = v164;
  v362[*(void *)((swift_isaMask & *(void *)v362) + 0x78)] = 0;
  v771.receiver = v362;
  v771.super_class = v339;
  id v364 = v361;
  v221[106] = [super init];
  v365 = v688;
  v366 = (char *)objc_allocWithZone(v688);
  *(void *)&v366[*(void *)((swift_isaMask & *(void *)v366) + 0x80)] = 0;
  *(void *)&v366[*(void *)((swift_isaMask & *(void *)v366) + 0x60)] = 0;
  v367 = (unint64_t *)&v366[*(void *)((swift_isaMask & *(void *)v366) + 0x68)];
  unint64_t v368 = v682;
  unint64_t *v367 = v682;
  v367[1] = 0x80000001000C19C0;
  *(void *)&v366[*(void *)((swift_isaMask & *(void *)v366) + 0x70)] = v164;
  v366[*(void *)((swift_isaMask & *(void *)v366) + 0x78)] = 0;
  v770.receiver = v366;
  v770.super_class = v365;
  id v369 = v364;
  v221[107] = [super init];
  v370 = (char *)objc_allocWithZone(v339);
  *(void *)&v370[*(void *)((swift_isaMask & *(void *)v370) + 0x80)] = 0;
  v370[*(void *)((swift_isaMask & *(void *)v370) + 0x60)] = 0;
  v371 = (unint64_t *)&v370[*(void *)((swift_isaMask & *(void *)v370) + 0x68)];
  unint64_t *v371 = v676;
  v371[1] = 0x80000001000BED90;
  *(void *)&v370[*(void *)((swift_isaMask & *(void *)v370) + 0x70)] = v164;
  v370[*(void *)((swift_isaMask & *(void *)v370) + 0x78)] = 0;
  v769.receiver = v370;
  v769.super_class = v339;
  id v372 = v369;
  v221[108] = [super init];
  v373 = (char *)objc_allocWithZone(v339);
  *(void *)&v373[*(void *)((swift_isaMask & *(void *)v373) + 0x80)] = 0;
  v373[*(void *)((swift_isaMask & *(void *)v373) + 0x60)] = 0;
  v374 = (unint64_t *)&v373[*(void *)((swift_isaMask & *(void *)v373) + 0x68)];
  unint64_t *v374 = v687;
  v374[1] = 0x80000001000BEDB0;
  *(void *)&v373[*(void *)((swift_isaMask & *(void *)v373) + 0x70)] = v164;
  v373[*(void *)((swift_isaMask & *(void *)v373) + 0x78)] = 0;
  v768.receiver = v373;
  v768.super_class = v339;
  id v375 = v372;
  v221[109] = [super init];
  v376 = (char *)objc_allocWithZone(v339);
  *(void *)&v376[*(void *)((swift_isaMask & *(void *)v376) + 0x80)] = 0;
  v376[*(void *)((swift_isaMask & *(void *)v376) + 0x60)] = 0;
  v377 = &v376[*(void *)((swift_isaMask & *(void *)v376) + 0x68)];
  *(void *)v377 = v368;
  *((void *)v377 + 1) = 0x80000001000C19E0;
  *(void *)&v376[*(void *)((swift_isaMask & *(void *)v376) + 0x70)] = v164;
  v376[*(void *)((swift_isaMask & *(void *)v376) + 0x78)] = 0;
  v767.receiver = v376;
  v767.super_class = v339;
  id v378 = v375;
  v221[110] = [super init];
  v379 = v669;
  v380 = (char *)objc_allocWithZone(v669);
  *(void *)&v380[*(void *)((swift_isaMask & *(void *)v380) + 0x80)] = 0;
  *(void *)&v380[*(void *)((swift_isaMask & *(void *)v380) + 0x60)] = 0;
  v381 = &v380[*(void *)((swift_isaMask & *(void *)v380) + 0x68)];
  *(void *)v381 = 0x706C416567646162;
  *((void *)v381 + 1) = 0xEF6E696765426168;
  *(void *)&v380[*(void *)((swift_isaMask & *(void *)v380) + 0x70)] = v164;
  v380[*(void *)((swift_isaMask & *(void *)v380) + 0x78)] = 0;
  v766.receiver = v380;
  v766.super_class = v379;
  id v382 = v378;
  v221[111] = [super init];
  v383 = (char *)objc_allocWithZone(v379);
  *(void *)&v383[*(void *)((swift_isaMask & *(void *)v383) + 0x80)] = 0;
  *(void *)&v383[*(void *)((swift_isaMask & *(void *)v383) + 0x60)] = 0x3FF0000000000000;
  v384 = &v383[*(void *)((swift_isaMask & *(void *)v383) + 0x68)];
  strcpy(v384, "badgeAlphaEnd");
  *((_WORD *)v384 + 7) = -4864;
  *(void *)&v383[*(void *)((swift_isaMask & *(void *)v383) + 0x70)] = v164;
  v383[*(void *)((swift_isaMask & *(void *)v383) + 0x78)] = 0;
  v765.receiver = v383;
  v765.super_class = v379;
  id v385 = v382;
  v221[112] = [super init];
  v386 = v688;
  v387 = (char *)objc_allocWithZone(v688);
  *(void *)&v387[*(void *)((swift_isaMask & *(void *)v387) + 0x80)] = 0;
  *(void *)&v387[*(void *)((swift_isaMask & *(void *)v387) + 0x60)] = 0x3FF0000000000000;
  v388 = &v387[*(void *)((swift_isaMask & *(void *)v387) + 0x68)];
  *(void *)v388 = 0x6C65446567646162;
  *((void *)v388 + 1) = 0xEA00000000007961;
  *(void *)&v387[*(void *)((swift_isaMask & *(void *)v387) + 0x70)] = v164;
  v387[*(void *)((swift_isaMask & *(void *)v387) + 0x78)] = 0;
  v764.receiver = v387;
  v764.super_class = v386;
  id v389 = v385;
  v221[113] = [super init];
  v390 = (char *)objc_allocWithZone(v386);
  *(void *)&v390[*(void *)((swift_isaMask & *(void *)v390) + 0x80)] = 0;
  *(void *)&v390[*(void *)((swift_isaMask & *(void *)v390) + 0x60)] = 0x3FF0000000000000;
  v391 = &v390[*(void *)((swift_isaMask & *(void *)v390) + 0x68)];
  strcpy(v391, "badgeDuration");
  *((_WORD *)v391 + 7) = -4864;
  *(void *)&v390[*(void *)((swift_isaMask & *(void *)v390) + 0x70)] = v164;
  v390[*(void *)((swift_isaMask & *(void *)v390) + 0x78)] = 0;
  v763.receiver = v390;
  v763.super_class = v386;
  id v392 = v389;
  v221[114] = [super init];
  v393 = (char *)objc_allocWithZone(v379);
  *(void *)&v393[*(void *)((swift_isaMask & *(void *)v393) + 0x80)] = 0;
  *(void *)&v393[*(void *)((swift_isaMask & *(void *)v393) + 0x60)] = 0x3FE999999999999ALL;
  v394 = &v393[*(void *)((swift_isaMask & *(void *)v393) + 0x68)];
  unint64_t v665 = 0xEF6E69676542656CLL;
  *(void *)v394 = 0x6163536567646162;
  *((void *)v394 + 1) = 0xEF6E69676542656CLL;
  *(void *)&v393[*(void *)((swift_isaMask & *(void *)v393) + 0x70)] = v164;
  v393[*(void *)((swift_isaMask & *(void *)v393) + 0x78)] = 0;
  v762.receiver = v393;
  v762.super_class = v379;
  id v395 = v392;
  v221[115] = [super init];
  v396 = (char *)objc_allocWithZone(v379);
  *(void *)&v396[*(void *)((swift_isaMask & *(void *)v396) + 0x80)] = 0;
  *(void *)&v396[*(void *)((swift_isaMask & *(void *)v396) + 0x60)] = 0x3FF0000000000000;
  v397 = &v396[*(void *)((swift_isaMask & *(void *)v396) + 0x68)];
  unint64_t v664 = 0xED0000646E45656CLL;
  strcpy(v397, "badgeScaleEnd");
  *((_WORD *)v397 + 7) = -4864;
  *(void *)&v396[*(void *)((swift_isaMask & *(void *)v396) + 0x70)] = v164;
  v396[*(void *)((swift_isaMask & *(void *)v396) + 0x78)] = 0;
  v761.receiver = v396;
  v761.super_class = v379;
  id v398 = v395;
  v221[116] = [super init];
  v399 = (char *)objc_allocWithZone(v379);
  *(void *)&v399[*(void *)((swift_isaMask & *(void *)v399) + 0x80)] = 0;
  *(void *)&v399[*(void *)((swift_isaMask & *(void *)v399) + 0x60)] = 0;
  v400 = &v399[*(void *)((swift_isaMask & *(void *)v399) + 0x68)];
  strcpy(v400, "blurAlphaBegin");
  v400[15] = -18;
  *(void *)&v399[*(void *)((swift_isaMask & *(void *)v399) + 0x70)] = v164;
  v399[*(void *)((swift_isaMask & *(void *)v399) + 0x78)] = 0;
  v760.receiver = v399;
  v760.super_class = v379;
  id v401 = v398;
  v221[117] = [super init];
  v402 = (char *)objc_allocWithZone(v379);
  *(void *)&v402[*(void *)((swift_isaMask & *(void *)v402) + 0x80)] = 0;
  *(void *)&v402[*(void *)((swift_isaMask & *(void *)v402) + 0x60)] = 0x3FE0000000000000;
  v403 = &v402[*(void *)((swift_isaMask & *(void *)v402) + 0x68)];
  strcpy(v403, "blurAlphaEnd");
  v403[13] = 0;
  *((_WORD *)v403 + 7) = -5120;
  *(void *)&v402[*(void *)((swift_isaMask & *(void *)v402) + 0x70)] = v164;
  v402[*(void *)((swift_isaMask & *(void *)v402) + 0x78)] = 0;
  v759.receiver = v402;
  v759.super_class = v379;
  id v404 = v401;
  v221[118] = [super init];
  v405 = (char *)objc_allocWithZone(v379);
  *(void *)&v405[*(void *)((swift_isaMask & *(void *)v405) + 0x80)] = 0;
  *(void *)&v405[*(void *)((swift_isaMask & *(void *)v405) + 0x60)] = 0x402E000000000000;
  v406 = &v405[*(void *)((swift_isaMask & *(void *)v405) + 0x68)];
  *(void *)v406 = 0x6772614D72756C62;
  *((void *)v406 + 1) = 0xEA00000000006E69;
  *(void *)&v405[*(void *)((swift_isaMask & *(void *)v405) + 0x70)] = v164;
  v405[*(void *)((swift_isaMask & *(void *)v405) + 0x78)] = 0;
  v758.receiver = v405;
  v758.super_class = v379;
  id v407 = v404;
  v221[119] = [super init];
  v408 = (char *)objc_allocWithZone(v379);
  *(void *)&v408[*(void *)((swift_isaMask & *(void *)v408) + 0x80)] = 0;
  *(void *)&v408[*(void *)((swift_isaMask & *(void *)v408) + 0x60)] = 0x3FE0000000000000;
  v409 = &v408[*(void *)((swift_isaMask & *(void *)v408) + 0x68)];
  *(void *)v409 = 0x6964615272756C62;
  *((void *)v409 + 1) = 0xEA00000000007375;
  *(void *)&v408[*(void *)((swift_isaMask & *(void *)v408) + 0x70)] = v164;
  v408[*(void *)((swift_isaMask & *(void *)v408) + 0x78)] = 0;
  v757.receiver = v408;
  v757.super_class = v379;
  id v410 = v407;
  v221[120] = [super init];
  v411 = (objc_class *)sub_100008614((uint64_t *)&qword_1000FBC08);
  Class v677 = v411;
  v412 = (char *)objc_allocWithZone(v411);
  *(void *)&v412[*(void *)((swift_isaMask & *(void *)v412) + 0x80)] = 0;
  v413 = &v412[*(void *)((swift_isaMask & *(void *)v412) + 0x60)];
  *(void *)v413 = 0;
  v413[8] = 1;
  v414 = (unint64_t *)&v412[*(void *)((swift_isaMask & *(void *)v412) + 0x68)];
  unint64_t *v414 = v683;
  v414[1] = 0x80000001000C1A00;
  *(void *)&v412[*(void *)((swift_isaMask & *(void *)v412) + 0x70)] = v164;
  v412[*(void *)((swift_isaMask & *(void *)v412) + 0x78)] = 0;
  v756.receiver = v412;
  v756.super_class = v411;
  id v415 = v410;
  v221[121] = [super init];
  v416 = v671;
  v417 = (char *)objc_allocWithZone(v671);
  *(void *)&v417[*(void *)((swift_isaMask & *(void *)v417) + 0x80)] = 0;
  v418 = &v417[*(void *)((swift_isaMask & *(void *)v417) + 0x60)];
  *(void *)v418 = 0;
  *((void *)v418 + 1) = 0;
  v419 = (unint64_t *)&v417[*(void *)((swift_isaMask & *(void *)v417) + 0x68)];
  unint64_t *v419 = v687;
  v419[1] = 0x80000001000C1A20;
  *(void *)&v417[*(void *)((swift_isaMask & *(void *)v417) + 0x70)] = v164;
  v417[*(void *)((swift_isaMask & *(void *)v417) + 0x78)] = 0;
  v755.receiver = v417;
  v755.super_class = v416;
  id v420 = v415;
  v221[122] = [super init];
  v421 = (char *)objc_allocWithZone(v379);
  *(void *)&v421[*(void *)((swift_isaMask & *(void *)v421) + 0x80)] = 0;
  *(void *)&v421[*(void *)((swift_isaMask & *(void *)v421) + 0x60)] = 0;
  v422 = &v421[*(void *)((swift_isaMask & *(void *)v421) + 0x68)];
  *(void *)v422 = 0x706C416569766F6DLL;
  *((void *)v422 + 1) = 0xEF6E696765426168;
  *(void *)&v421[*(void *)((swift_isaMask & *(void *)v421) + 0x70)] = v164;
  v421[*(void *)((swift_isaMask & *(void *)v421) + 0x78)] = 0;
  v754.receiver = v421;
  v754.super_class = v379;
  id v423 = v420;
  v221[123] = [super init];
  v424 = (char *)objc_allocWithZone(v379);
  *(void *)&v424[*(void *)((swift_isaMask & *(void *)v424) + 0x80)] = 0;
  *(void *)&v424[*(void *)((swift_isaMask & *(void *)v424) + 0x60)] = 0x3FF0000000000000;
  v425 = &v424[*(void *)((swift_isaMask & *(void *)v424) + 0x68)];
  strcpy(v425, "movieAlphaEnd");
  *((_WORD *)v425 + 7) = -4864;
  *(void *)&v424[*(void *)((swift_isaMask & *(void *)v424) + 0x70)] = v164;
  v424[*(void *)((swift_isaMask & *(void *)v424) + 0x78)] = 0;
  v753.receiver = v424;
  v753.super_class = v379;
  id v426 = v423;
  v221[124] = [super init];
  v427 = v688;
  v428 = (char *)objc_allocWithZone(v688);
  *(void *)&v428[*(void *)((swift_isaMask & *(void *)v428) + 0x80)] = 0;
  *(void *)&v428[*(void *)((swift_isaMask & *(void *)v428) + 0x60)] = 0x3FE0000000000000;
  v429 = (unint64_t *)&v428[*(void *)((swift_isaMask & *(void *)v428) + 0x68)];
  unint64_t v430 = v686;
  unint64_t *v429 = v686;
  v429[1] = 0x80000001000C1A40;
  *(void *)&v428[*(void *)((swift_isaMask & *(void *)v428) + 0x70)] = v164;
  v428[*(void *)((swift_isaMask & *(void *)v428) + 0x78)] = 0;
  v752.receiver = v428;
  v752.super_class = v427;
  id v431 = v426;
  v221[125] = [super init];
  v432 = (char *)objc_allocWithZone(v379);
  *(void *)&v432[*(void *)((swift_isaMask & *(void *)v432) + 0x80)] = 0;
  *(void *)&v432[*(void *)((swift_isaMask & *(void *)v432) + 0x60)] = 0x3FB999999999999ALL;
  v433 = &v432[*(void *)((swift_isaMask & *(void *)v432) + 0x68)];
  unint64_t v434 = v665;
  *(void *)v433 = 0x6163536569766F6DLL;
  *((void *)v433 + 1) = v434;
  *(void *)&v432[*(void *)((swift_isaMask & *(void *)v432) + 0x70)] = v164;
  v432[*(void *)((swift_isaMask & *(void *)v432) + 0x78)] = 0;
  v751.receiver = v432;
  v751.super_class = v379;
  id v435 = v431;
  v221[126] = [super init];
  v436 = (char *)objc_allocWithZone(v379);
  *(void *)&v436[*(void *)((swift_isaMask & *(void *)v436) + 0x80)] = 0;
  *(void *)&v436[*(void *)((swift_isaMask & *(void *)v436) + 0x60)] = 0x3FF0000000000000;
  v437 = &v436[*(void *)((swift_isaMask & *(void *)v436) + 0x68)];
  unint64_t v438 = v664;
  *(void *)v437 = 0x6163536569766F6DLL;
  *((void *)v437 + 1) = v438;
  *(void *)&v436[*(void *)((swift_isaMask & *(void *)v436) + 0x70)] = v164;
  v436[*(void *)((swift_isaMask & *(void *)v436) + 0x78)] = 0;
  v750.receiver = v436;
  v750.super_class = v379;
  id v439 = v435;
  v221[127] = [super init];
  v440 = (char *)objc_allocWithZone(v379);
  *(void *)&v440[*(void *)((swift_isaMask & *(void *)v440) + 0x80)] = 0;
  *(void *)&v440[*(void *)((swift_isaMask & *(void *)v440) + 0x60)] = 0x4024000000000000;
  v441 = &v440[*(void *)((swift_isaMask & *(void *)v440) + 0x68)];
  *(void *)v441 = v430;
  *((void *)v441 + 1) = 0x80000001000C1A60;
  *(void *)&v440[*(void *)((swift_isaMask & *(void *)v440) + 0x70)] = v164;
  v440[*(void *)((swift_isaMask & *(void *)v440) + 0x78)] = 0;
  v749.receiver = v440;
  v749.super_class = v379;
  id v442 = v439;
  v221[128] = [super init];
  v443 = (char *)objc_allocWithZone(v379);
  *(void *)&v443[*(void *)((swift_isaMask & *(void *)v443) + 0x80)] = 0;
  *(void *)&v443[*(void *)((swift_isaMask & *(void *)v443) + 0x60)] = 0xC039000000000000;
  v444 = &v443[*(void *)((swift_isaMask & *(void *)v443) + 0x68)];
  *(void *)v444 = 0x6461506569766F6DLL;
  *((void *)v444 + 1) = 0xEF706F54676E6964;
  *(void *)&v443[*(void *)((swift_isaMask & *(void *)v443) + 0x70)] = v164;
  v443[*(void *)((swift_isaMask & *(void *)v443) + 0x78)] = 0;
  v748.receiver = v443;
  v748.super_class = v379;
  id v445 = v442;
  v221[129] = [super init];
  v446 = v688;
  v447 = (char *)objc_allocWithZone(v688);
  *(void *)&v447[*(void *)((swift_isaMask & *(void *)v447) + 0x80)] = 0;
  *(void *)&v447[*(void *)((swift_isaMask & *(void *)v447) + 0x60)] = 0x3FF0000000000000;
  v448 = (unint64_t *)&v447[*(void *)((swift_isaMask & *(void *)v447) + 0x68)];
  unint64_t v449 = v687;
  unint64_t *v448 = v687;
  v448[1] = 0x80000001000C1A80;
  *(void *)&v447[*(void *)((swift_isaMask & *(void *)v447) + 0x70)] = v164;
  v447[*(void *)((swift_isaMask & *(void *)v447) + 0x78)] = 0;
  v747.receiver = v447;
  v747.super_class = v446;
  id v450 = v445;
  v221[130] = [super init];
  v451 = (char *)objc_allocWithZone(v379);
  *(void *)&v451[*(void *)((swift_isaMask & *(void *)v451) + 0x80)] = 0;
  *(void *)&v451[*(void *)((swift_isaMask & *(void *)v451) + 0x60)] = 0x4049000000000000;
  v452 = &v451[*(void *)((swift_isaMask & *(void *)v451) + 0x68)];
  *(void *)v452 = v449;
  *((void *)v452 + 1) = 0x80000001000C1AA0;
  v453 = v164;
  *(void *)&v451[*(void *)((swift_isaMask & *(void *)v451) + 0x70)] = v164;
  v451[*(void *)((swift_isaMask & *(void *)v451) + 0x78)] = 0;
  v746.receiver = v451;
  v746.super_class = v379;
  id v454 = v450;
  v455 = v221;
  v221[131] = [super init];
  v456 = (char *)objc_allocWithZone(v379);
  *(void *)&v456[*(void *)((swift_isaMask & *(void *)v456) + 0x80)] = 0;
  *(void *)&v456[*(void *)((swift_isaMask & *(void *)v456) + 0x60)] = 0;
  v457 = &v456[*(void *)((swift_isaMask & *(void *)v456) + 0x68)];
  *(void *)v457 = 0xD000000000000014;
  *((void *)v457 + 1) = 0x80000001000C1AC0;
  *(void *)&v456[*(void *)((swift_isaMask & *(void *)v456) + 0x70)] = v164;
  v456[*(void *)((swift_isaMask & *(void *)v456) + 0x78)] = 0;
  v745.receiver = v456;
  v745.super_class = v379;
  id v458 = v454;
  v221[132] = [super init];
  v459 = v688;
  v460 = (char *)objc_allocWithZone(v688);
  *(void *)&v460[*(void *)((swift_isaMask & *(void *)v460) + 0x80)] = 0;
  *(void *)&v460[*(void *)((swift_isaMask & *(void *)v460) + 0x60)] = 0x4014000000000000;
  v461 = (unint64_t *)&v460[*(void *)((swift_isaMask & *(void *)v460) + 0x68)];
  unint64_t *v461 = v682;
  v461[1] = 0x80000001000C1AE0;
  *(void *)&v460[*(void *)((swift_isaMask & *(void *)v460) + 0x70)] = v164;
  v460[*(void *)((swift_isaMask & *(void *)v460) + 0x78)] = 0;
  v744.receiver = v460;
  v744.super_class = v459;
  id v462 = v458;
  v455[133] = [super init];
  v463 = v685;
  v464 = (char *)objc_allocWithZone(v685);
  *(void *)&v464[*(void *)((swift_isaMask & *(void *)v464) + 0x80)] = 0;
  v464[*(void *)((swift_isaMask & *(void *)v464) + 0x60)] = 0;
  v465 = &v464[*(void *)((swift_isaMask & *(void *)v464) + 0x68)];
  *(void *)v465 = 0x49556775626564;
  *((void *)v465 + 1) = 0xE700000000000000;
  *(void *)&v464[*(void *)((swift_isaMask & *(void *)v464) + 0x70)] = v453;
  v464[*(void *)((swift_isaMask & *(void *)v464) + 0x78)] = 0;
  v743.receiver = v464;
  v743.super_class = v463;
  id v466 = v462;
  v455[134] = [super init];
  v467 = (char *)objc_allocWithZone(v463);
  *(void *)&v467[*(void *)((swift_isaMask & *(void *)v467) + 0x80)] = 0;
  v467[*(void *)((swift_isaMask & *(void *)v467) + 0x60)] = 0;
  v468 = &v467[*(void *)((swift_isaMask & *(void *)v467) + 0x68)];
  *(void *)v468 = 0x655265726F6E6769;
  *((void *)v468 + 1) = 0xEA00000000006C61;
  *(void *)&v467[*(void *)((swift_isaMask & *(void *)v467) + 0x70)] = v453;
  v467[*(void *)((swift_isaMask & *(void *)v467) + 0x78)] = 0;
  v742.receiver = v467;
  v742.super_class = v463;
  id v469 = v466;
  v455[135] = [super init];
  v470 = (char *)objc_allocWithZone(v379);
  *(void *)&v470[*(void *)((swift_isaMask & *(void *)v470) + 0x80)] = 0;
  *(void *)&v470[*(void *)((swift_isaMask & *(void *)v470) + 0x60)] = 0x3FF3333333333333;
  v471 = &v470[*(void *)((swift_isaMask & *(void *)v470) + 0x68)];
  *(void *)v471 = 0xD000000000000014;
  *((void *)v471 + 1) = 0x80000001000C1B00;
  *(void *)&v470[*(void *)((swift_isaMask & *(void *)v470) + 0x70)] = v453;
  v470[*(void *)((swift_isaMask & *(void *)v470) + 0x78)] = 0;
  v741.receiver = v470;
  v741.super_class = v379;
  id v472 = v469;
  v455[136] = [super init];
  v473 = (char *)objc_allocWithZone(v379);
  *(void *)&v473[*(void *)((swift_isaMask & *(void *)v473) + 0x80)] = 0;
  *(void *)&v473[*(void *)((swift_isaMask & *(void *)v473) + 0x60)] = 0x4049000000000000;
  v474 = (unint64_t *)&v473[*(void *)((swift_isaMask & *(void *)v473) + 0x68)];
  unint64_t *v474 = v670;
  v474[1] = 0x80000001000C1B20;
  *(void *)&v473[*(void *)((swift_isaMask & *(void *)v473) + 0x70)] = v453;
  v473[*(void *)((swift_isaMask & *(void *)v473) + 0x78)] = 0;
  v740.receiver = v473;
  v740.super_class = v379;
  id v475 = v472;
  v455[137] = [super init];
  v476 = v671;
  v477 = (char *)objc_allocWithZone(v671);
  *(void *)&v477[*(void *)((swift_isaMask & *(void *)v477) + 0x80)] = 0;
  v478 = &v477[*(void *)((swift_isaMask & *(void *)v477) + 0x60)];
  *(void *)v478 = 0;
  *((void *)v478 + 1) = 0;
  v479 = &v477[*(void *)((swift_isaMask & *(void *)v477) + 0x68)];
  *(void *)v479 = 0x497070416F6D6544;
  *((void *)v479 + 1) = 0xEB000000006E6F63;
  *(void *)&v477[*(void *)((swift_isaMask & *(void *)v477) + 0x70)] = v453;
  v477[*(void *)((swift_isaMask & *(void *)v477) + 0x78)] = 0;
  v739.receiver = v477;
  v739.super_class = v476;
  id v480 = v475;
  v455[138] = [super init];
  v481 = v677;
  v482 = (char *)objc_allocWithZone(v677);
  *(void *)&v482[*(void *)((swift_isaMask & *(void *)v482) + 0x80)] = 0;
  v483 = &v482[*(void *)((swift_isaMask & *(void *)v482) + 0x60)];
  *(void *)v483 = 0;
  v483[8] = 1;
  v484 = &v482[*(void *)((swift_isaMask & *(void *)v482) + 0x68)];
  *(void *)v484 = 0x67616D496F6D6544;
  *((void *)v484 + 1) = 0xE900000000000065;
  *(void *)&v482[*(void *)((swift_isaMask & *(void *)v482) + 0x70)] = v453;
  v482[*(void *)((swift_isaMask & *(void *)v482) + 0x78)] = 0;
  v738.receiver = v482;
  v738.super_class = v481;
  id v485 = v480;
  v455[139] = [super init];
  v486 = (char *)objc_allocWithZone(v476);
  *(void *)&v486[*(void *)((swift_isaMask & *(void *)v486) + 0x80)] = 0;
  v487 = &v486[*(void *)((swift_isaMask & *(void *)v486) + 0x60)];
  *(void *)v487 = 0;
  *((void *)v487 + 1) = 0;
  v488 = &v486[*(void *)((swift_isaMask & *(void *)v486) + 0x68)];
  *(void *)v488 = 0x656D614E6F6D6544;
  *((void *)v488 + 1) = 0xE800000000000000;
  *(void *)&v486[*(void *)((swift_isaMask & *(void *)v486) + 0x70)] = v453;
  v489 = v453;
  v486[*(void *)((swift_isaMask & *(void *)v486) + 0x78)] = 0;
  v737.receiver = v486;
  v737.super_class = v476;
  id v490 = v485;
  v455[140] = [super init];
  v491 = (char *)objc_allocWithZone(v476);
  *(void *)&v491[*(void *)((swift_isaMask & *(void *)v491) + 0x80)] = 0;
  v492 = &v491[*(void *)((swift_isaMask & *(void *)v491) + 0x60)];
  *(void *)v492 = 0;
  *((void *)v492 + 1) = 0;
  v493 = &v491[*(void *)((swift_isaMask & *(void *)v491) + 0x68)];
  *(void *)v493 = 0x746275536F6D6544;
  *((void *)v493 + 1) = 0xEB00000000747865;
  *(void *)&v491[*(void *)((swift_isaMask & *(void *)v491) + 0x70)] = v453;
  v491[*(void *)((swift_isaMask & *(void *)v491) + 0x78)] = 0;
  v736.receiver = v491;
  v736.super_class = v476;
  id v494 = v490;
  v455[141] = [super init];
  v495 = v685;
  v496 = (char *)objc_allocWithZone(v685);
  *(void *)&v496[*(void *)((swift_isaMask & *(void *)v496) + 0x80)] = 0;
  v496[*(void *)((swift_isaMask & *(void *)v496) + 0x60)] = 0;
  v497 = (unint64_t *)&v496[*(void *)((swift_isaMask & *(void *)v496) + 0x68)];
  unint64_t *v497 = v666;
  v497[1] = 0x80000001000C1B40;
  *(void *)&v496[*(void *)((swift_isaMask & *(void *)v496) + 0x70)] = v453;
  v496[*(void *)((swift_isaMask & *(void *)v496) + 0x78)] = 0;
  v735.receiver = v496;
  v735.super_class = v495;
  id v498 = v494;
  v455[142] = [super init];
  v499 = (char *)objc_allocWithZone(v476);
  *(void *)&v499[*(void *)((swift_isaMask & *(void *)v499) + 0x80)] = 0;
  v500 = &v499[*(void *)((swift_isaMask & *(void *)v499) + 0x60)];
  *(void *)v500 = 0;
  *((void *)v500 + 1) = 0;
  v501 = (unint64_t *)&v499[*(void *)((swift_isaMask & *(void *)v499) + 0x68)];
  unint64_t *v501 = v667;
  v501[1] = 0x80000001000C1B70;
  *(void *)&v499[*(void *)((swift_isaMask & *(void *)v499) + 0x70)] = v453;
  v499[*(void *)((swift_isaMask & *(void *)v499) + 0x78)] = 0;
  v734.receiver = v499;
  v734.super_class = v476;
  id v502 = v498;
  v455[143] = [super init];
  v503 = v679;
  v504 = (char *)objc_allocWithZone(v679);
  *(void *)&v504[*(void *)((swift_isaMask & *(void *)v504) + 0x80)] = 0;
  *(void *)&v504[*(void *)((swift_isaMask & *(void *)v504) + 0x60)] = 0;
  v505 = &v504[*(void *)((swift_isaMask & *(void *)v504) + 0x68)];
  *(void *)v505 = 0x7543636974706168;
  *((void *)v505 + 1) = 0xEB00000000657672;
  *(void *)&v504[*(void *)((swift_isaMask & *(void *)v504) + 0x70)] = v453;
  v504[*(void *)((swift_isaMask & *(void *)v504) + 0x78)] = 0;
  v733.receiver = v504;
  v733.super_class = v503;
  id v506 = v502;
  v455[144] = [super init];
  v507 = (char *)objc_allocWithZone(v495);
  *(void *)&v507[*(void *)((swift_isaMask & *(void *)v507) + 0x80)] = 0;
  v507[*(void *)((swift_isaMask & *(void *)v507) + 0x60)] = 1;
  v508 = (unint64_t *)&v507[*(void *)((swift_isaMask & *(void *)v507) + 0x68)];
  unint64_t v509 = v686;
  unint64_t *v508 = v686;
  v508[1] = 0x80000001000C1BA0;
  *(void *)&v507[*(void *)((swift_isaMask & *(void *)v507) + 0x70)] = v453;
  v507[*(void *)((swift_isaMask & *(void *)v507) + 0x78)] = 0;
  v732.receiver = v507;
  v732.super_class = v495;
  id v510 = v506;
  v455[145] = [super init];
  v511 = v688;
  v512 = (char *)objc_allocWithZone(v688);
  *(void *)&v512[*(void *)((swift_isaMask & *(void *)v512) + 0x80)] = 0;
  *(void *)&v512[*(void *)((swift_isaMask & *(void *)v512) + 0x60)] = 0x404E000000000000;
  v513 = &v512[*(void *)((swift_isaMask & *(void *)v512) + 0x68)];
  *(void *)v513 = 0x7246636974706168;
  *((void *)v513 + 1) = 0xEF79636E65757165;
  *(void *)&v512[*(void *)((swift_isaMask & *(void *)v512) + 0x70)] = v453;
  v512[*(void *)((swift_isaMask & *(void *)v512) + 0x78)] = 0;
  v731.receiver = v512;
  v731.super_class = v511;
  id v514 = v510;
  v455[146] = [super init];
  v515 = v455;
  v516 = v672;
  v517 = (char *)objc_allocWithZone(v672);
  *(void *)&v517[*(void *)((swift_isaMask & *(void *)v517) + 0x80)] = 0;
  *(_DWORD *)&v517[*(void *)((swift_isaMask & *(void *)v517) + 0x60)] = 1059481190;
  v518 = &v517[*(void *)((swift_isaMask & *(void *)v517) + 0x68)];
  *(void *)v518 = v509;
  *((void *)v518 + 1) = 0x80000001000C1BC0;
  *(void *)&v517[*(void *)((swift_isaMask & *(void *)v517) + 0x70)] = v489;
  v517[*(void *)((swift_isaMask & *(void *)v517) + 0x78)] = 0;
  v730.receiver = v517;
  v730.super_class = v516;
  id v519 = v514;
  v455[147] = [super init];
  v520 = v516;
  v521 = (char *)objc_allocWithZone(v516);
  *(void *)&v521[*(void *)((swift_isaMask & *(void *)v521) + 0x80)] = 0;
  *(_DWORD *)&v521[*(void *)((swift_isaMask & *(void *)v521) + 0x60)] = 0;
  v522 = &v521[*(void *)((swift_isaMask & *(void *)v521) + 0x68)];
  *(void *)v522 = v509;
  *((void *)v522 + 1) = 0x80000001000C1BE0;
  *(void *)&v521[*(void *)((swift_isaMask & *(void *)v521) + 0x70)] = v489;
  v523 = v489;
  v521[*(void *)((swift_isaMask & *(void *)v521) + 0x78)] = 0;
  v729.receiver = v521;
  v729.super_class = v520;
  id v524 = v519;
  v455[148] = [super init];
  v525 = (char *)objc_allocWithZone(v520);
  *(void *)&v525[*(void *)((swift_isaMask & *(void *)v525) + 0x80)] = 0;
  *(_DWORD *)&v525[*(void *)((swift_isaMask & *(void *)v525) + 0x60)] = 1041865114;
  v526 = (unint64_t *)&v525[*(void *)((swift_isaMask & *(void *)v525) + 0x68)];
  unint64_t v527 = v668;
  unint64_t *v526 = v668;
  v526[1] = 0x80000001000C1C00;
  *(void *)&v525[*(void *)((swift_isaMask & *(void *)v525) + 0x70)] = v489;
  v525[*(void *)((swift_isaMask & *(void *)v525) + 0x78)] = 0;
  v728.receiver = v525;
  v728.super_class = v520;
  id v528 = v524;
  v455[149] = [super init];
  v529 = (char *)objc_allocWithZone(v520);
  *(void *)&v529[*(void *)((swift_isaMask & *(void *)v529) + 0x80)] = 0;
  *(_DWORD *)&v529[*(void *)((swift_isaMask & *(void *)v529) + 0x60)] = 1041865114;
  v530 = &v529[*(void *)((swift_isaMask & *(void *)v529) + 0x68)];
  *(void *)v530 = v527;
  *((void *)v530 + 1) = 0x80000001000C1C20;
  *(void *)&v529[*(void *)((swift_isaMask & *(void *)v529) + 0x70)] = v489;
  v529[*(void *)((swift_isaMask & *(void *)v529) + 0x78)] = 0;
  v727.receiver = v529;
  v727.super_class = v520;
  id v531 = v528;
  v455[150] = [super init];
  v532 = v688;
  v533 = (char *)objc_allocWithZone(v688);
  *(void *)&v533[*(void *)((swift_isaMask & *(void *)v533) + 0x80)] = 0;
  *(void *)&v533[*(void *)((swift_isaMask & *(void *)v533) + 0x60)] = 0x3FD3333333333333;
  v534 = &v533[*(void *)((swift_isaMask & *(void *)v533) + 0x68)];
  strcpy(v534, "hapticOffset");
  v534[13] = 0;
  *((_WORD *)v534 + 7) = -5120;
  *(void *)&v533[*(void *)((swift_isaMask & *(void *)v533) + 0x70)] = v489;
  v533[*(void *)((swift_isaMask & *(void *)v533) + 0x78)] = 0;
  v726.receiver = v533;
  v726.super_class = v532;
  id v535 = v531;
  v455[151] = [super init];
  v536 = (char *)objc_allocWithZone(v532);
  *(void *)&v536[*(void *)((swift_isaMask & *(void *)v536) + 0x80)] = 0;
  *(void *)&v536[*(void *)((swift_isaMask & *(void *)v536) + 0x60)] = 0x3FEAF5C28F5C28F6;
  v537 = (unint64_t *)&v536[*(void *)((swift_isaMask & *(void *)v536) + 0x68)];
  unint64_t *v537 = v681;
  v537[1] = 0x80000001000C1C40;
  *(void *)&v536[*(void *)((swift_isaMask & *(void *)v536) + 0x70)] = v489;
  v536[*(void *)((swift_isaMask & *(void *)v536) + 0x78)] = 0;
  v725.receiver = v536;
  v725.super_class = v532;
  id v538 = v535;
  v455[152] = [super init];
  v539 = (char *)objc_allocWithZone(v532);
  *(void *)&v539[*(void *)((swift_isaMask & *(void *)v539) + 0x80)] = 0;
  *(void *)&v539[*(void *)((swift_isaMask & *(void *)v539) + 0x60)] = 0x3FB0000000000000;
  v540 = (unint64_t *)&v539[*(void *)((swift_isaMask & *(void *)v539) + 0x68)];
  unint64_t *v540 = v675;
  v540[1] = 0x80000001000C1C60;
  *(void *)&v539[*(void *)((swift_isaMask & *(void *)v539) + 0x70)] = v489;
  v539[*(void *)((swift_isaMask & *(void *)v539) + 0x78)] = 0;
  v724.receiver = v539;
  v724.super_class = v532;
  id v541 = v538;
  v455[153] = [super init];
  v542 = (char *)objc_allocWithZone(v532);
  *(void *)&v542[*(void *)((swift_isaMask & *(void *)v542) + 0x80)] = 0;
  *(void *)&v542[*(void *)((swift_isaMask & *(void *)v542) + 0x60)] = 0x3FD999999999999ALL;
  v543 = &v542[*(void *)((swift_isaMask & *(void *)v542) + 0x68)];
  *(void *)v543 = 0xD000000000000014;
  *((void *)v543 + 1) = 0x80000001000C1C80;
  *(void *)&v542[*(void *)((swift_isaMask & *(void *)v542) + 0x70)] = v489;
  v542[*(void *)((swift_isaMask & *(void *)v542) + 0x78)] = 0;
  v723.receiver = v542;
  v723.super_class = v532;
  id v544 = v541;
  v455[154] = [super init];
  v545 = (char *)objc_allocWithZone(v532);
  *(void *)&v545[*(void *)((swift_isaMask & *(void *)v545) + 0x80)] = 0;
  *(void *)&v545[*(void *)((swift_isaMask & *(void *)v545) + 0x60)] = 0x3FC0000000000000;
  v546 = (unint64_t *)&v545[*(void *)((swift_isaMask & *(void *)v545) + 0x68)];
  unint64_t *v546 = v678;
  v546[1] = 0x80000001000C1CA0;
  *(void *)&v545[*(void *)((swift_isaMask & *(void *)v545) + 0x70)] = v489;
  v545[*(void *)((swift_isaMask & *(void *)v545) + 0x78)] = 0;
  v722.receiver = v545;
  v722.super_class = v532;
  id v547 = v544;
  v455[155] = [super init];
  v548 = (char *)objc_allocWithZone(v532);
  *(void *)&v548[*(void *)((swift_isaMask & *(void *)v548) + 0x80)] = 0;
  *(void *)&v548[*(void *)((swift_isaMask & *(void *)v548) + 0x60)] = 0;
  v549 = (unint64_t *)&v548[*(void *)((swift_isaMask & *(void *)v548) + 0x68)];
  unint64_t *v549 = v683;
  v549[1] = 0x80000001000C1CC0;
  *(void *)&v548[*(void *)((swift_isaMask & *(void *)v548) + 0x70)] = v489;
  v548[*(void *)((swift_isaMask & *(void *)v548) + 0x78)] = 0;
  v721.receiver = v548;
  v721.super_class = v532;
  id v550 = v547;
  v455[156] = [super init];
  v551 = v685;
  v552 = (char *)objc_allocWithZone(v685);
  *(void *)&v552[*(void *)((swift_isaMask & *(void *)v552) + 0x80)] = 0;
  v552[*(void *)((swift_isaMask & *(void *)v552) + 0x60)] = 0;
  v553 = (unint64_t *)&v552[*(void *)((swift_isaMask & *(void *)v552) + 0x68)];
  unint64_t *v553 = v686;
  v553[1] = 0x80000001000C1CE0;
  *(void *)&v552[*(void *)((swift_isaMask & *(void *)v552) + 0x70)] = v489;
  v552[*(void *)((swift_isaMask & *(void *)v552) + 0x78)] = 0;
  v720.receiver = v552;
  v720.super_class = v551;
  id v554 = v550;
  v515[157] = [super init];
  v555 = (char *)objc_allocWithZone(v551);
  *(void *)&v555[*(void *)((swift_isaMask & *(void *)v555) + 0x80)] = 0;
  v555[*(void *)((swift_isaMask & *(void *)v555) + 0x60)] = 1;
  v556 = &v555[*(void *)((swift_isaMask & *(void *)v555) + 0x68)];
  *(void *)v556 = 0x6D53676E69727073;
  *((void *)v556 + 1) = 0xEF676E6968746F6FLL;
  *(void *)&v555[*(void *)((swift_isaMask & *(void *)v555) + 0x70)] = v489;
  v555[*(void *)((swift_isaMask & *(void *)v555) + 0x78)] = 0;
  v719.receiver = v555;
  v719.super_class = v551;
  id v557 = v554;
  v515[158] = [super init];
  v558 = (char *)objc_allocWithZone(v551);
  *(void *)&v558[*(void *)((swift_isaMask & *(void *)v558) + 0x80)] = 0;
  v558[*(void *)((swift_isaMask & *(void *)v558) + 0x60)] = 0;
  v559 = (unint64_t *)&v558[*(void *)((swift_isaMask & *(void *)v558) + 0x68)];
  unint64_t *v559 = v674;
  v559[1] = 0x80000001000C1D00;
  *(void *)&v558[*(void *)((swift_isaMask & *(void *)v558) + 0x70)] = v489;
  v558[*(void *)((swift_isaMask & *(void *)v558) + 0x78)] = 0;
  v718.receiver = v558;
  v718.super_class = v551;
  id v560 = v557;
  v515[159] = [super init];
  v561 = v515;
  v562 = v672;
  v563 = (char *)objc_allocWithZone(v672);
  *(void *)&v563[*(void *)((swift_isaMask & *(void *)v563) + 0x80)] = 0;
  *(_DWORD *)&v563[*(void *)((swift_isaMask & *(void *)v563) + 0x60)] = 1082130432;
  v564 = (unint64_t *)&v563[*(void *)((swift_isaMask & *(void *)v563) + 0x68)];
  unint64_t v565 = v684;
  unint64_t *v564 = v684;
  v564[1] = 0x80000001000C1D20;
  *(void *)&v563[*(void *)((swift_isaMask & *(void *)v563) + 0x70)] = v523;
  v563[*(void *)((swift_isaMask & *(void *)v563) + 0x78)] = 0;
  v717.receiver = v563;
  v717.super_class = v562;
  id v566 = v560;
  v561[160] = [super init];
  v567 = (char *)objc_allocWithZone(v562);
  *(void *)&v567[*(void *)((swift_isaMask & *(void *)v567) + 0x80)] = 0;
  *(_DWORD *)&v567[*(void *)((swift_isaMask & *(void *)v567) + 0x60)] = 1050253722;
  v568 = (unint64_t *)&v567[*(void *)((swift_isaMask & *(void *)v567) + 0x68)];
  unint64_t *v568 = v681;
  v568[1] = 0x80000001000C1D40;
  *(void *)&v567[*(void *)((swift_isaMask & *(void *)v567) + 0x70)] = v523;
  v567[*(void *)((swift_isaMask & *(void *)v567) + 0x78)] = 0;
  v716.receiver = v567;
  v716.super_class = v562;
  id v569 = v566;
  v561[161] = [super init];
  v570 = v673;
  v571 = (char *)objc_allocWithZone(v673);
  *(void *)&v571[*(void *)((swift_isaMask & *(void *)v571) + 0x80)] = 0;
  v571[*(void *)((swift_isaMask & *(void *)v571) + 0x60)] = 2;
  v572 = &v571[*(void *)((swift_isaMask & *(void *)v571) + 0x68)];
  strcpy(v572, "forceResponder");
  v572[15] = -18;
  *(void *)&v571[*(void *)((swift_isaMask & *(void *)v571) + 0x70)] = v523;
  v571[*(void *)((swift_isaMask & *(void *)v571) + 0x78)] = 0;
  v715.receiver = v571;
  v715.super_class = v570;
  id v573 = v569;
  v561[162] = [super init];
  v574 = (char *)objc_allocWithZone(v551);
  *(void *)&v574[*(void *)((swift_isaMask & *(void *)v574) + 0x80)] = 0;
  v574[*(void *)((swift_isaMask & *(void *)v574) + 0x60)] = 0;
  v575 = &v574[*(void *)((swift_isaMask & *(void *)v574) + 0x68)];
  *(void *)v575 = v565;
  *((void *)v575 + 1) = 0x80000001000C1D60;
  *(void *)&v574[*(void *)((swift_isaMask & *(void *)v574) + 0x70)] = v523;
  v574[*(void *)((swift_isaMask & *(void *)v574) + 0x78)] = 0;
  v714.receiver = v574;
  v714.super_class = v551;
  id v576 = v573;
  v561[163] = [super init];
  v577 = (char *)objc_allocWithZone(v551);
  *(void *)&v577[*(void *)((swift_isaMask & *(void *)v577) + 0x80)] = 0;
  v577[*(void *)((swift_isaMask & *(void *)v577) + 0x60)] = 1;
  v578 = &v577[*(void *)((swift_isaMask & *(void *)v577) + 0x68)];
  *(void *)v578 = 0xD000000000000014;
  *((void *)v578 + 1) = 0x80000001000C1D80;
  *(void *)&v577[*(void *)((swift_isaMask & *(void *)v577) + 0x70)] = v523;
  v577[*(void *)((swift_isaMask & *(void *)v577) + 0x78)] = 0;
  v713.receiver = v577;
  v713.super_class = v551;
  id v579 = v576;
  v561[164] = [super init];
  v580 = (char *)objc_allocWithZone(v551);
  *(void *)&v580[*(void *)((swift_isaMask & *(void *)v580) + 0x80)] = 0;
  v580[*(void *)((swift_isaMask & *(void *)v580) + 0x60)] = 1;
  v581 = &v580[*(void *)((swift_isaMask & *(void *)v580) + 0x68)];
  *(void *)v581 = 0x45676E69676E6172;
  *((void *)v581 + 1) = 0xEF646563726F666ELL;
  *(void *)&v580[*(void *)((swift_isaMask & *(void *)v580) + 0x70)] = v523;
  v580[*(void *)((swift_isaMask & *(void *)v580) + 0x78)] = 0;
  v712.receiver = v580;
  v712.super_class = v551;
  id v582 = v579;
  v561[165] = [super init];
  v583 = v673;
  v584 = (char *)objc_allocWithZone(v673);
  *(void *)&v584[*(void *)((swift_isaMask & *(void *)v584) + 0x80)] = 0;
  v584[*(void *)((swift_isaMask & *(void *)v584) + 0x60)] = 2;
  v585 = (unint64_t *)&v584[*(void *)((swift_isaMask & *(void *)v584) + 0x68)];
  unint64_t *v585 = v683;
  v585[1] = 0x80000001000C1DA0;
  *(void *)&v584[*(void *)((swift_isaMask & *(void *)v584) + 0x70)] = v523;
  v584[*(void *)((swift_isaMask & *(void *)v584) + 0x78)] = 0;
  v711.receiver = v584;
  v711.super_class = v583;
  id v586 = v582;
  v561[166] = [super init];
  v587 = v671;
  v588 = (char *)objc_allocWithZone(v671);
  *(void *)&v588[*(void *)((swift_isaMask & *(void *)v588) + 0x80)] = 0;
  v589 = &v588[*(void *)((swift_isaMask & *(void *)v588) + 0x60)];
  *(void *)v589 = 0;
  *((void *)v589 + 1) = 0;
  v590 = (unint64_t *)&v588[*(void *)((swift_isaMask & *(void *)v588) + 0x68)];
  unint64_t v591 = v682;
  unint64_t *v590 = v682;
  v590[1] = 0x80000001000C1DC0;
  *(void *)&v588[*(void *)((swift_isaMask & *(void *)v588) + 0x70)] = v523;
  v588[*(void *)((swift_isaMask & *(void *)v588) + 0x78)] = 0;
  v710.receiver = v588;
  v710.super_class = v587;
  id v592 = v586;
  v561[167] = [super init];
  v593 = (char *)objc_allocWithZone(v551);
  *(void *)&v593[*(void *)((swift_isaMask & *(void *)v593) + 0x80)] = 0;
  v593[*(void *)((swift_isaMask & *(void *)v593) + 0x60)] = 1;
  v594 = &v593[*(void *)((swift_isaMask & *(void *)v593) + 0x68)];
  strcpy(v594, "allowRetries");
  v594[13] = 0;
  *((_WORD *)v594 + 7) = -5120;
  *(void *)&v593[*(void *)((swift_isaMask & *(void *)v593) + 0x70)] = v523;
  v593[*(void *)((swift_isaMask & *(void *)v593) + 0x78)] = 0;
  v709.receiver = v593;
  v709.super_class = v551;
  id v595 = v592;
  v561[168] = [super init];
  v596 = v679;
  v597 = (char *)objc_allocWithZone(v679);
  *(void *)&v597[*(void *)((swift_isaMask & *(void *)v597) + 0x80)] = 0;
  *(void *)&v597[*(void *)((swift_isaMask & *(void *)v597) + 0x60)] = 0;
  v598 = (unint64_t *)&v597[*(void *)((swift_isaMask & *(void *)v597) + 0x68)];
  unint64_t *v598 = v684;
  v598[1] = 0x80000001000BEE30;
  *(void *)&v597[*(void *)((swift_isaMask & *(void *)v597) + 0x70)] = v523;
  v597[*(void *)((swift_isaMask & *(void *)v597) + 0x78)] = 0;
  v708.receiver = v597;
  v708.super_class = v596;
  id v599 = v595;
  v561[169] = [super init];
  v600 = (char *)objc_allocWithZone(v596);
  *(void *)&v600[*(void *)((swift_isaMask & *(void *)v600) + 0x80)] = 0;
  *(void *)&v600[*(void *)((swift_isaMask & *(void *)v600) + 0x60)] = 0;
  v601 = (unint64_t *)&v600[*(void *)((swift_isaMask & *(void *)v600) + 0x68)];
  unint64_t *v601 = v687;
  v601[1] = 0x80000001000BEE50;
  *(void *)&v600[*(void *)((swift_isaMask & *(void *)v600) + 0x70)] = v523;
  v600[*(void *)((swift_isaMask & *(void *)v600) + 0x78)] = 0;
  v707.receiver = v600;
  v707.super_class = v596;
  id v602 = v599;
  v561[170] = [super init];
  v603 = v688;
  v604 = (char *)objc_allocWithZone(v688);
  *(void *)&v604[*(void *)((swift_isaMask & *(void *)v604) + 0x80)] = 0;
  *(void *)&v604[*(void *)((swift_isaMask & *(void *)v604) + 0x60)] = 0;
  v605 = (unint64_t *)&v604[*(void *)((swift_isaMask & *(void *)v604) + 0x68)];
  unint64_t *v605 = v678;
  v605[1] = 0x80000001000C1DE0;
  *(void *)&v604[*(void *)((swift_isaMask & *(void *)v604) + 0x70)] = v523;
  v604[*(void *)((swift_isaMask & *(void *)v604) + 0x78)] = 0;
  v706.receiver = v604;
  v706.super_class = v603;
  id v606 = v602;
  v561[171] = [super init];
  v607 = (char *)objc_allocWithZone(v551);
  *(void *)&v607[*(void *)((swift_isaMask & *(void *)v607) + 0x80)] = 0;
  v607[*(void *)((swift_isaMask & *(void *)v607) + 0x60)] = 0;
  v608 = &v607[*(void *)((swift_isaMask & *(void *)v607) + 0x68)];
  *(void *)v608 = 0x44676E69676E6172;
  *((void *)v608 + 1) = 0xEF64656C62617369;
  v609 = v523;
  *(void *)&v607[*(void *)((swift_isaMask & *(void *)v607) + 0x70)] = v523;
  v607[*(void *)((swift_isaMask & *(void *)v607) + 0x78)] = 0;
  v705.receiver = v607;
  v705.super_class = v551;
  id v610 = v606;
  v561[172] = [super init];
  v611 = v672;
  v612 = (char *)objc_allocWithZone(v672);
  *(void *)&v612[*(void *)((swift_isaMask & *(void *)v612) + 0x80)] = 0;
  *(_DWORD *)&v612[*(void *)((swift_isaMask & *(void *)v612) + 0x60)] = 1092616192;
  v613 = &v612[*(void *)((swift_isaMask & *(void *)v612) + 0x68)];
  *(void *)v613 = v591;
  *((void *)v613 + 1) = 0x80000001000C1E00;
  *(void *)&v612[*(void *)((swift_isaMask & *(void *)v612) + 0x70)] = v609;
  v614 = v609;
  v612[*(void *)((swift_isaMask & *(void *)v612) + 0x78)] = 0;
  v704.receiver = v612;
  v704.super_class = v611;
  id v615 = v610;
  v561[173] = [super init];
  v616 = (char *)objc_allocWithZone(v611);
  *(void *)&v616[*(void *)((swift_isaMask & *(void *)v616) + 0x80)] = 0;
  *(_DWORD *)&v616[*(void *)((swift_isaMask & *(void *)v616) + 0x60)] = 1092616192;
  v617 = &v616[*(void *)((swift_isaMask & *(void *)v616) + 0x68)];
  *(void *)v617 = 0x6E61747369447462;
  *((void *)v617 + 1) = 0xEF656772614C6563;
  *(void *)&v616[*(void *)((swift_isaMask & *(void *)v616) + 0x70)] = v609;
  v616[*(void *)((swift_isaMask & *(void *)v616) + 0x78)] = 0;
  v703.receiver = v616;
  v703.super_class = v611;
  id v618 = v615;
  v561[174] = [super init];
  v619 = (char *)objc_allocWithZone(v611);
  *(void *)&v619[*(void *)((swift_isaMask & *(void *)v619) + 0x80)] = 0;
  *(_DWORD *)&v619[*(void *)((swift_isaMask & *(void *)v619) + 0x60)] = 1092616192;
  v620 = &v619[*(void *)((swift_isaMask & *(void *)v619) + 0x68)];
  *(void *)v620 = 0x6E61747369447462;
  *((void *)v620 + 1) = 0xEF726568744F6563;
  *(void *)&v619[*(void *)((swift_isaMask & *(void *)v619) + 0x70)] = v609;
  v619[*(void *)((swift_isaMask & *(void *)v619) + 0x78)] = 0;
  v702.receiver = v619;
  v702.super_class = v611;
  id v621 = v618;
  v561[175] = [super init];
  v622 = (char *)objc_allocWithZone(v611);
  *(void *)&v622[*(void *)((swift_isaMask & *(void *)v622) + 0x80)] = 0;
  *(_DWORD *)&v622[*(void *)((swift_isaMask & *(void *)v622) + 0x60)] = 1056964608;
  v623 = (unint64_t *)&v622[*(void *)((swift_isaMask & *(void *)v622) + 0x68)];
  unint64_t v624 = v684;
  unint64_t *v623 = v684;
  v623[1] = 0x80000001000C1E20;
  *(void *)&v622[*(void *)((swift_isaMask & *(void *)v622) + 0x70)] = v614;
  v622[*(void *)((swift_isaMask & *(void *)v622) + 0x78)] = 0;
  v701.receiver = v622;
  v701.super_class = v611;
  id v625 = v621;
  v561[176] = [super init];
  v626 = (char *)objc_allocWithZone(v611);
  *(void *)&v626[*(void *)((swift_isaMask & *(void *)v626) + 0x80)] = 0;
  *(_DWORD *)&v626[*(void *)((swift_isaMask & *(void *)v626) + 0x60)] = 1033476506;
  v627 = (unint64_t *)&v626[*(void *)((swift_isaMask & *(void *)v626) + 0x68)];
  unint64_t *v627 = v687;
  v627[1] = 0x80000001000BEDF0;
  *(void *)&v626[*(void *)((swift_isaMask & *(void *)v626) + 0x70)] = v614;
  v626[*(void *)((swift_isaMask & *(void *)v626) + 0x78)] = 0;
  v700.receiver = v626;
  v700.super_class = v611;
  id v628 = v625;
  v561[177] = [super init];
  v629 = (char *)objc_allocWithZone(v611);
  *(void *)&v629[*(void *)((swift_isaMask & *(void *)v629) + 0x80)] = 0;
  *(_DWORD *)&v629[*(void *)((swift_isaMask & *(void *)v629) + 0x60)] = 1040522936;
  v630 = &v629[*(void *)((swift_isaMask & *(void *)v629) + 0x68)];
  *(void *)v630 = 0xD000000000000014;
  *((void *)v630 + 1) = 0x80000001000BEE10;
  *(void *)&v629[*(void *)((swift_isaMask & *(void *)v629) + 0x70)] = v614;
  v629[*(void *)((swift_isaMask & *(void *)v629) + 0x78)] = 0;
  v699.receiver = v629;
  v699.super_class = v611;
  id v631 = v628;
  v561[178] = [super init];
  v632 = (char *)objc_allocWithZone(v611);
  *(void *)&v632[*(void *)((swift_isaMask & *(void *)v632) + 0x80)] = 0;
  *(_DWORD *)&v632[*(void *)((swift_isaMask & *(void *)v632) + 0x60)] = 1042536202;
  v633 = &v632[*(void *)((swift_isaMask & *(void *)v632) + 0x68)];
  *(void *)v633 = 0xD000000000000014;
  *((void *)v633 + 1) = 0x80000001000C1E40;
  *(void *)&v632[*(void *)((swift_isaMask & *(void *)v632) + 0x70)] = v614;
  v632[*(void *)((swift_isaMask & *(void *)v632) + 0x78)] = 0;
  v698.receiver = v632;
  v698.super_class = v611;
  id v634 = v631;
  v561[179] = [super init];
  v635 = (char *)objc_allocWithZone(v611);
  *(void *)&v635[*(void *)((swift_isaMask & *(void *)v635) + 0x80)] = 0;
  *(_DWORD *)&v635[*(void *)((swift_isaMask & *(void *)v635) + 0x60)] = 0x40000000;
  v636 = (unint64_t *)&v635[*(void *)((swift_isaMask & *(void *)v635) + 0x68)];
  unint64_t *v636 = v676;
  v636[1] = 0x80000001000C1E60;
  *(void *)&v635[*(void *)((swift_isaMask & *(void *)v635) + 0x70)] = v614;
  v635[*(void *)((swift_isaMask & *(void *)v635) + 0x78)] = 0;
  v697.receiver = v635;
  v697.super_class = v611;
  id v637 = v634;
  v561[180] = [super init];
  v638 = (char *)objc_allocWithZone(v611);
  *(void *)&v638[*(void *)((swift_isaMask & *(void *)v638) + 0x80)] = 0;
  *(_DWORD *)&v638[*(void *)((swift_isaMask & *(void *)v638) + 0x60)] = 0x40000000;
  v639 = &v638[*(void *)((swift_isaMask & *(void *)v638) + 0x68)];
  *(void *)v639 = v624;
  *((void *)v639 + 1) = 0x80000001000C1E80;
  *(void *)&v638[*(void *)((swift_isaMask & *(void *)v638) + 0x70)] = v614;
  v638[*(void *)((swift_isaMask & *(void *)v638) + 0x78)] = 0;
  v696.receiver = v638;
  v696.super_class = v611;
  id v640 = v637;
  v561[181] = [super init];
  v641 = (char *)objc_allocWithZone(v611);
  *(void *)&v641[*(void *)((swift_isaMask & *(void *)v641) + 0x80)] = 0;
  *(_DWORD *)&v641[*(void *)((swift_isaMask & *(void *)v641) + 0x60)] = 0x40000000;
  v642 = &v641[*(void *)((swift_isaMask & *(void *)v641) + 0x68)];
  *(void *)v642 = v624;
  *((void *)v642 + 1) = 0x80000001000C1EA0;
  *(void *)&v641[*(void *)((swift_isaMask & *(void *)v641) + 0x70)] = v614;
  v641[*(void *)((swift_isaMask & *(void *)v641) + 0x78)] = 0;
  v695.receiver = v641;
  v695.super_class = v611;
  id v643 = v640;
  v561[182] = [super init];
  v644 = (char *)objc_allocWithZone(v611);
  *(void *)&v644[*(void *)((swift_isaMask & *(void *)v644) + 0x80)] = 0;
  *(_DWORD *)&v644[*(void *)((swift_isaMask & *(void *)v644) + 0x60)] = 1067450368;
  v645 = (unint64_t *)&v644[*(void *)((swift_isaMask & *(void *)v644) + 0x68)];
  unint64_t *v645 = v683;
  v645[1] = 0x80000001000C1EC0;
  *(void *)&v644[*(void *)((swift_isaMask & *(void *)v644) + 0x70)] = v614;
  v644[*(void *)((swift_isaMask & *(void *)v644) + 0x78)] = 0;
  v694.receiver = v644;
  v694.super_class = v611;
  id v646 = v643;
  v561[183] = [super init];
  v647 = (char *)objc_allocWithZone(v611);
  *(void *)&v647[*(void *)((swift_isaMask & *(void *)v647) + 0x80)] = 0;
  *(_DWORD *)&v647[*(void *)((swift_isaMask & *(void *)v647) + 0x60)] = 1067450368;
  v648 = (unint64_t *)&v647[*(void *)((swift_isaMask & *(void *)v647) + 0x68)];
  unint64_t v649 = v680;
  unint64_t *v648 = v680;
  v648[1] = 0x80000001000C1EE0;
  *(void *)&v647[*(void *)((swift_isaMask & *(void *)v647) + 0x70)] = v614;
  v647[*(void *)((swift_isaMask & *(void *)v647) + 0x78)] = 0;
  v693.receiver = v647;
  v693.super_class = v611;
  id v650 = v646;
  v561[184] = [super init];
  v651 = (char *)objc_allocWithZone(v611);
  *(void *)&v651[*(void *)((swift_isaMask & *(void *)v651) + 0x80)] = 0;
  *(_DWORD *)&v651[*(void *)((swift_isaMask & *(void *)v651) + 0x60)] = 1067450368;
  v652 = &v651[*(void *)((swift_isaMask & *(void *)v651) + 0x68)];
  *(void *)v652 = v649;
  *((void *)v652 + 1) = 0x80000001000C1F00;
  *(void *)&v651[*(void *)((swift_isaMask & *(void *)v651) + 0x70)] = v614;
  v651[*(void *)((swift_isaMask & *(void *)v651) + 0x78)] = 0;
  v692.receiver = v651;
  v692.super_class = v611;
  id v653 = v650;
  v561[185] = [super init];
  v654 = (char *)objc_allocWithZone(v611);
  *(void *)&v654[*(void *)((swift_isaMask & *(void *)v654) + 0x80)] = 0;
  *(_DWORD *)&v654[*(void *)((swift_isaMask & *(void *)v654) + 0x60)] = 1050253722;
  v655 = (unint64_t *)&v654[*(void *)((swift_isaMask & *(void *)v654) + 0x68)];
  unint64_t *v655 = v687;
  v655[1] = 0x80000001000C1F20;
  *(void *)&v654[*(void *)((swift_isaMask & *(void *)v654) + 0x70)] = v614;
  v654[*(void *)((swift_isaMask & *(void *)v654) + 0x78)] = 0;
  v691.receiver = v654;
  v691.super_class = v611;
  id v656 = v653;
  v561[186] = [super init];
  v657 = (char *)objc_allocWithZone(v611);
  *(void *)&v657[*(void *)((swift_isaMask & *(void *)v657) + 0x80)] = 0;
  *(_DWORD *)&v657[*(void *)((swift_isaMask & *(void *)v657) + 0x60)] = 1052266988;
  v658 = &v657[*(void *)((swift_isaMask & *(void *)v657) + 0x68)];
  *(void *)v658 = 0xD000000000000014;
  *((void *)v658 + 1) = 0x80000001000C1F40;
  *(void *)&v657[*(void *)((swift_isaMask & *(void *)v657) + 0x70)] = v614;
  v657[*(void *)((swift_isaMask & *(void *)v657) + 0x78)] = 0;
  v690.receiver = v657;
  v690.super_class = v611;
  id v659 = v656;
  v561[187] = [super init];
  v660 = (char *)objc_allocWithZone(v611);
  *(void *)&v660[*(void *)((swift_isaMask & *(void *)v660) + 0x80)] = 0;
  *(_DWORD *)&v660[*(void *)((swift_isaMask & *(void *)v660) + 0x60)] = 1052266988;
  v661 = &v660[*(void *)((swift_isaMask & *(void *)v660) + 0x68)];
  *(void *)v661 = 0xD000000000000014;
  *((void *)v661 + 1) = 0x80000001000C1F60;
  *(void *)&v660[*(void *)((swift_isaMask & *(void *)v660) + 0x70)] = v614;
  v660[*(void *)((swift_isaMask & *(void *)v660) + 0x78)] = 0;
  v689.receiver = v660;
  v689.super_class = v611;
  id v662 = v659;
  v561[188] = [super init];
  return v561;
}

unint64_t sub_10005BEAC(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10005C040(a1, a2, v4);
}

unint64_t sub_10005BF24(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10005C124(a1, v4);
}

unint64_t sub_10005BF68(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10005C1EC(a1, v4);
}

unint64_t sub_10005BFAC(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_10005C2F8(a1, v2);
}

unint64_t sub_10005C040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        objc_super v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10005C124(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10005C6E8(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100012998((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10005C1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10005C744();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10005C2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10005C470(Swift::String a1)
{
  v1._rawValue = &off_1000E3148;
  return sub_10005C488(a1, v1);
}

unint64_t sub_10005C47C(Swift::String a1)
{
  v1._rawValue = &off_1000E31E0;
  return sub_10005C488(a1, v1);
}

unint64_t sub_10005C488(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 5) {
    return 5;
  }
  else {
    return v5;
  }
}

unint64_t sub_10005C4D0()
{
  unint64_t result = qword_1000FBBA8;
  if (!qword_1000FBBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBBA8);
  }
  return result;
}

unint64_t sub_10005C524()
{
  unint64_t result = qword_1000FBBB0;
  if (!qword_1000FBBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBBB0);
  }
  return result;
}

unint64_t sub_10005C578()
{
  unint64_t result = qword_1000FBBB8;
  if (!qword_1000FBBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBBB8);
  }
  return result;
}

unint64_t sub_10005C5CC()
{
  unint64_t result = qword_1000FBBC0;
  if (!qword_1000FBBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBBC0);
  }
  return result;
}

uint64_t sub_10005C620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008614(&qword_1000F91C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005C688(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F91C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10005C6E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_10005C744()
{
  unint64_t result = qword_1000F7C70;
  if (!qword_1000F7C70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000F7C70);
  }
  return result;
}

uint64_t sub_10005C784()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10005C824@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 80) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 96));
}

uint64_t sub_10005C880(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)v2 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(*(void *)v2, a2);
  uint64_t v7 = (char *)v16 - v6;
  v16[0] = v5;
  swift_getMetatypeMetadata();
  uint64_t v8 = String.init<A>(describing:)();
  char v10 = v9;
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  v11._uint64_t countAndFlagsBits = 60;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._uint64_t countAndFlagsBits = v8;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  (*(void (**)(char *, char *))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 16))(v7, &v2[*(void *)(*(void *)v2 + 96)]);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v14._uint64_t countAndFlagsBits = 62;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return v16[0];
}

uint64_t *sub_10005CA4C()
{
  uint64_t v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 96));
  return v0;
}

uint64_t sub_10005CACC()
{
  return sub_10005DD5C((void (*)(void))sub_10005CA4C);
}

uint64_t type metadata accessor for Publishing()
{
  return sub_10000ED34();
}

uint64_t sub_10005CAFC()
{
  type metadata accessor for AnyPublisher();
  type metadata accessor for Optional();
  type metadata accessor for CurrentValueSubject();
  swift_getWitnessTable();
  type metadata accessor for Publishers.Map();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for Publishers.SwitchToLatest();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t sub_10005CCA0(uint64_t a1, uint64_t a2)
{
  return sub_10005C880(a1, a2);
}

uint64_t sub_10005CCC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for AnyPublisher();
  type metadata accessor for Optional();
  type metadata accessor for CurrentValueSubject();
  swift_getWitnessTable();
  v18[4] = v4;
  v18[5] = type metadata accessor for Publishers.Map();
  v18[6] = swift_getWitnessTable();
  v18[7] = swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for Publishers.SwitchToLatest();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  Swift::String v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  Swift::String v14 = (char *)v18 - v13;
  uint64_t v15 = (char *)v1 + *(void *)(v3 + 104);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v15, v6);
  uint64_t v16 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v5) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a1, v14, v5);
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  sub_10005CFF4((uint64_t)v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v11, a1, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v5);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v15, v11, v6);
  return swift_endAccess();
}

uint64_t sub_10005CFF4(uint64_t a1)
{
  type metadata accessor for Optional();
  type metadata accessor for CurrentValueSubject();
  type metadata accessor for AnyPublisher();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for Publishers.Map();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v8 - v5;
  v8[1] = *(void *)(a1 + 24);
  swift_retain();
  swift_retain();
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  swift_getWitnessTable();
  swift_getWitnessTable();
  Publisher<>.switchToLatest()();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_10005D200@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v29 = a3;
  uint64_t v26 = *a2;
  uint64_t v4 = *(void *)(v26 + class metadata base offset for CurrentValueSubject);
  uint64_t v5 = type metadata accessor for Just();
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  Swift::String v14 = (char *)&v25 - v13;
  uint64_t v15 = *(void *)(v4 - 8);
  uint64_t v17 = __chkstk_darwin(v12, v16);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v25 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v28, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    uint64_t v30 = a2;
    swift_getWitnessTable();
    uint64_t result = Publisher.eraseToAnyPublisher()();
    uint64_t v24 = result;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v22, v14, v4);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v19, v22, v4);
    Just.init(_:)();
    swift_getWitnessTable();
    uint64_t v24 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v5);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v22, v4);
  }
  *uint64_t v29 = v24;
  return result;
}

uint64_t sub_10005D554()
{
  return CurrentValueSubject.value.getter();
}

uint64_t sub_10005D578()
{
  return CurrentValueSubject.value.getter();
}

uint64_t sub_10005D59C()
{
  uint64_t v0 = type metadata accessor for AnyPublisher();
  type metadata accessor for Optional();
  type metadata accessor for CurrentValueSubject();
  swift_getWitnessTable();
  v7[0] = v0;
  v7[1] = type metadata accessor for Publishers.Map();
  v7[2] = swift_getWitnessTable();
  v7[3] = swift_getWitnessTable();
  uint64_t v1 = type metadata accessor for Publishers.SwitchToLatest();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v7 - v4;
  sub_10005CCC4((uint64_t)v7 - v4);
  swift_getWitnessTable();
  dispatch thunk of Publisher.receive<A>(subscriber:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

uint64_t sub_10005D78C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v7 = (char *)&v33 - v6;
  uint64_t v8 = *(void *)(v2 - 8);
  uint64_t v10 = __chkstk_darwin(v5, v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v33 - v14;
  sub_100008614(&qword_1000FBD28);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1000AF6A0;
  uint64_t v35 = v1;
  swift_getMetatypeMetadata();
  *(void *)(v16 + 32) = String.init<A>(describing:)();
  *(void *)(v16 + 40) = v17;
  uint64_t v35 = 0;
  unint64_t v36 = 0xE000000000000000;
  v18._uint64_t countAndFlagsBits = 0x3D65756C6176;
  v18._object = (void *)0xE600000000000000;
  String.append(_:)(v18);
  CurrentValueSubject.value.getter();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v15, v2);
  unint64_t v20 = v36;
  *(void *)(v16 + 48) = v35;
  *(void *)(v16 + 56) = v20;
  CurrentValueSubject.value.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v34);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v7, v2);
    uint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v21._uint64_t countAndFlagsBits = 0x656469727265766FLL;
    v21._object = (void *)0xEE003D65756C6156;
    String.append(_:)(v21);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    uint64_t v22 = v35;
    unint64_t v23 = v36;
    unint64_t v25 = *(void *)(v16 + 16);
    unint64_t v24 = *(void *)(v16 + 24);
    if (v25 >= v24 >> 1) {
      uint64_t v16 = (uint64_t)sub_1000690A0((void *)(v24 > 1), v25 + 1, 1, (void *)v16);
    }
    *(void *)(v16 + 16) = v25 + 1;
    uint64_t v26 = v16 + 16 * v25;
    *(void *)(v26 + 32) = v22;
    *(void *)(v26 + 40) = v23;
    v19(v12, v2);
  }
  uint64_t v35 = v16;
  sub_100008614(&qword_1000F8290);
  sub_10005DE24();
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  uint64_t v35 = 60;
  unint64_t v36 = 0xE100000000000000;
  v30._uint64_t countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = 62;
  v31._object = (void *)0xE100000000000000;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t sub_10005DB4C()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  type metadata accessor for AnyPublisher();
  type metadata accessor for Optional();
  type metadata accessor for CurrentValueSubject();
  swift_getWitnessTable();
  type metadata accessor for Publishers.Map();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for Publishers.SwitchToLatest();
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10005DD44()
{
  return sub_10005DD5C((void (*)(void))sub_10005DB4C);
}

uint64_t sub_10005DD5C(void (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Publishing2()
{
  return sub_10000ED34();
}

uint64_t sub_10005DDD0()
{
  return sub_10005D78C();
}

uint64_t sub_10005DDF4()
{
  return sub_10005D59C();
}

void *sub_10005DE18()
{
  return &protocol witness table for Never;
}

unint64_t sub_10005DE24()
{
  unint64_t result = qword_1000FBD30;
  if (!qword_1000FBD30)
  {
    sub_100009F40(&qword_1000F8290);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBD30);
  }
  return result;
}

uint64_t sub_10005DE80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10005D200(a1, v2, a2);
}

void *initializeWithCopy for CompoundSpring(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x170uLL);
}

uint64_t getEnumTagSinglePayload for CompoundSpring(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 368)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CompoundSpring(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 368) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CompoundSpring()
{
  return &type metadata for CompoundSpring;
}

uint64_t *sub_10005DF4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_10005E018(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_10005E08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_10005E10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_10005E198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_10005E214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_10005E298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005E2AC);
}

uint64_t sub_10005E2AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_10005E378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10005E38C);
}

uint64_t sub_10005E38C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for ActivityIcon(uint64_t a1)
{
  return sub_1000094F4(a1, qword_1000FBD90);
}

uint64_t sub_10005E468()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10005E500@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v57 = a1;
  uint64_t v3 = type metadata accessor for ActivityIconView(0);
  uint64_t v4 = v3 - 8;
  uint64_t v56 = *(void *)(v3 - 8);
  uint64_t v55 = *(void *)(v56 + 64);
  __chkstk_darwin(v3, v5);
  uint64_t v54 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ActivityIcon(0);
  __chkstk_darwin(v7 - 8, v8);
  id v52 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000FBE88);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (uint64_t *)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = sub_100008614(&qword_1000FBE90);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14, v16);
  Swift::String v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100008614(&qword_1000FBE98);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19, v21);
  unint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100008614(&qword_1000FBEA0);
  uint64_t v25 = v24 - 8;
  __chkstk_darwin(v24, v26);
  uint64_t v53 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v13 = static Alignment.center.getter();
  v13[1] = v28;
  uint64_t v29 = sub_100008614(&qword_1000FBEA8);
  sub_10005E9F4(v2, (uint64_t)v13 + *(int *)(v29 + 44));
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_1000210BC((uint64_t)v13, (uint64_t)v18, &qword_1000FBE88);
  Swift::String v30 = &v18[*(int *)(v15 + 44)];
  long long v31 = v62;
  *(_OWORD *)Swift::String v30 = v61;
  *((_OWORD *)v30 + 1) = v31;
  *((_OWORD *)v30 + 2) = v63;
  sub_10000EC04((uint64_t)v13, &qword_1000FBE88);
  uint64_t v32 = v2;
  uint64_t v33 = static Animation.easeOut(duration:)();
  uint64_t v34 = v2 + *(int *)(v4 + 56);
  char v35 = *(unsigned char *)v34;
  uint64_t v36 = *(void *)(v34 + 8);
  char v58 = v35;
  uint64_t v59 = v36;
  sub_100008614(&qword_1000F7F58);
  State.wrappedValue.getter();
  LOBYTE(v4) = v60;
  uint64_t v51 = v23;
  sub_1000210BC((uint64_t)v18, (uint64_t)v23, &qword_1000FBE90);
  id v37 = &v23[*(int *)(v20 + 44)];
  *(void *)id v37 = v33;
  v37[8] = v4;
  sub_10000EC04((uint64_t)v18, &qword_1000FBE90);
  sub_100008614(&qword_1000FBDC8);
  uint64_t v38 = (uint64_t)v52;
  Binding.wrappedValue.getter();
  uint64_t v39 = v54;
  sub_100060434(v32, v54, type metadata accessor for ActivityIconView);
  unint64_t v40 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  uint64_t v41 = swift_allocObject();
  sub_10006036C(v39, v41 + v40);
  uint64_t v42 = *(int *)(v25 + 44);
  uint64_t v43 = (uint64_t)v53;
  uint64_t v44 = &v53[v42];
  sub_100060434(v38, (uint64_t)&v53[v42], type metadata accessor for ActivityIcon);
  uint64_t v45 = (uint64_t (**)(uint64_t))&v44[*(int *)(sub_100008614(&qword_1000FBEB0) + 36)];
  *uint64_t v45 = sub_1000603D0;
  v45[1] = (uint64_t (*)(uint64_t))v41;
  uint64_t v46 = (uint64_t)v51;
  sub_1000210BC((uint64_t)v51, v43, &qword_1000FBE98);
  sub_100060714(v38, type metadata accessor for ActivityIcon);
  sub_10000EC04(v46, &qword_1000FBE98);
  sub_100060434(v32, v39, type metadata accessor for ActivityIconView);
  uint64_t v47 = swift_allocObject();
  sub_10006036C(v39, v47 + v40);
  uint64_t v48 = v57;
  sub_1000210BC(v43, v57, &qword_1000FBEA0);
  id v49 = (uint64_t (**)())(v48 + *(int *)(sub_100008614(&qword_1000FBEB8) + 36));
  *id v49 = sub_1000605FC;
  v49[1] = (uint64_t (*)())v47;
  v49[2] = 0;
  v49[3] = 0;
  return sub_10000EC04(v43, &qword_1000FBEA0);
}

uint64_t sub_10005E9F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = sub_100008614(&qword_1000FBEC8);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  uint64_t v35 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v34 = (uint64_t)&v34 - v9;
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v34 - v12;
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = (int *)type metadata accessor for ActivityIconView(0);
  Swift::String v18 = (uint64_t *)(a1 + v17[10]);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v37 = v20;
  uint64_t v38 = v19;
  sub_100008614(&qword_1000FBEC0);
  State.wrappedValue.getter();
  uint64_t v21 = v39;
  uint64_t v22 = a1 + v17[12];
  uint64_t v24 = *(void *)(v22 + 8);
  LOBYTE(v37) = *(unsigned char *)v22;
  char v23 = v37;
  uint64_t v38 = v24;
  sub_100008614(&qword_1000F7F58);
  State.wrappedValue.getter();
  sub_10005EC68(v21, v39, (uint64_t)v16);
  swift_release();
  uint64_t v25 = (uint64_t *)(a1 + v17[11]);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  uint64_t v37 = v27;
  uint64_t v38 = v26;
  State.wrappedValue.getter();
  uint64_t v28 = v39;
  LOBYTE(v37) = v23;
  uint64_t v38 = v24;
  State.wrappedValue.getter();
  sub_10005EC68(v28, (v39 & 1) == 0, (uint64_t)v13);
  swift_release();
  uint64_t v29 = v34;
  sub_1000210BC((uint64_t)v16, v34, &qword_1000FBEC8);
  uint64_t v30 = v35;
  sub_1000210BC((uint64_t)v13, v35, &qword_1000FBEC8);
  uint64_t v31 = v36;
  sub_1000210BC(v29, v36, &qword_1000FBEC8);
  uint64_t v32 = sub_100008614(&qword_1000FBED0);
  sub_1000210BC(v30, v31 + *(int *)(v32 + 48), &qword_1000FBEC8);
  sub_10000EC04((uint64_t)v13, &qword_1000FBEC8);
  sub_10000EC04((uint64_t)v16, &qword_1000FBEC8);
  sub_10000EC04(v30, &qword_1000FBEC8);
  return sub_10000EC04(v29, &qword_1000FBEC8);
}

uint64_t sub_10005EC68@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v51 = a2;
  uint64_t v52 = a1;
  uint64_t v54 = a3;
  uint64_t v48 = sub_100008614(&qword_1000FBED8) - 8;
  __chkstk_darwin(v48, v4);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RoundedRectangle();
  uint64_t v8 = v7 - 8;
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (double *)((char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100008614(&qword_1000FBEE0);
  uint64_t v13 = v12 - 8;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = sub_100008614(&qword_1000FBEE8);
  uint64_t v18 = v17 - 8;
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100008614(&qword_1000FBEF0);
  __chkstk_darwin(v47, v22);
  uint64_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100008614(&qword_1000FBEC8);
  __chkstk_darwin(v49, v25);
  uint64_t v50 = (uint64_t)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = (int *)type metadata accessor for ActivityIconView(0);
  uint64_t v27 = v46[5];
  uint64_t v53 = v3;
  double v28 = *(double *)(v3 + v27) * 0.25;
  uint64_t v29 = (char *)v11 + *(int *)(v8 + 28);
  uint64_t v30 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v31 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 104))(v29, v30, v31);
  *uint64_t v11 = v28;
  v11[1] = v28;
  sub_100060434((uint64_t)v11, (uint64_t)v6, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  *(_WORD *)&v6[*(int *)(v48 + 44)] = 256;
  uint64_t v32 = *(int *)(v13 + 44);
  char v33 = v51;
  sub_1000210BC((uint64_t)v6, (uint64_t)v16 + v32, &qword_1000FBED8);
  *uint64_t v16 = v52;
  swift_retain();
  sub_10000EC04((uint64_t)v6, &qword_1000FBED8);
  sub_100060714((uint64_t)v11, (uint64_t (*)(void))&type metadata accessor for RoundedRectangle);
  uint64_t v34 = 0;
  double v35 = 1.0;
  if (v33) {
    double v36 = 1.0;
  }
  else {
    double v36 = 0.0;
  }
  sub_1000210BC((uint64_t)v16, (uint64_t)v21, &qword_1000FBEE0);
  *(double *)&v21[*(int *)(v18 + 44)] = v36;
  sub_10000EC04((uint64_t)v16, &qword_1000FBEE0);
  if ((v33 & 1) == 0) {
    double v35 = *(double *)(v53 + v46[9]);
  }
  static UnitPoint.center.getter();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  sub_1000210BC((uint64_t)v21, (uint64_t)v24, &qword_1000FBEE8);
  uint64_t v41 = (double *)&v24[*(int *)(v47 + 36)];
  *uint64_t v41 = v35;
  v41[1] = v35;
  *((void *)v41 + 2) = v38;
  *((void *)v41 + 3) = v40;
  sub_10000EC04((uint64_t)v21, &qword_1000FBEE8);
  if ((v33 & 1) == 0) {
    uint64_t v34 = *(void *)(v53 + v46[8]);
  }
  uint64_t v42 = v50;
  sub_1000210BC((uint64_t)v24, v50, &qword_1000FBEF0);
  uint64_t v43 = v42 + *(int *)(v49 + 36);
  *(void *)uint64_t v43 = v34;
  *(unsigned char *)(v43 + 8) = 0;
  sub_10000EC04((uint64_t)v24, &qword_1000FBEF0);
  return sub_100021270(v42, v54, &qword_1000FBEC8);
}

uint64_t sub_10005F088(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v47 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v44 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for ActivityIconView(0);
  uint64_t v43 = *((void *)v10 - 1);
  uint64_t v11 = *(void *)(v43 + 64);
  __chkstk_darwin(v10, v12);
  uint64_t v13 = type metadata accessor for DispatchTime();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v41 - v20;
  uint64_t v22 = v1 + v10[12];
  char v23 = *(unsigned char *)v22;
  uint64_t v24 = *(void *)(v22 + 8);
  LOBYTE(aBlock) = v23;
  uint64_t v51 = v24;
  sub_100008614(&qword_1000F7F58);
  State.wrappedValue.getter();
  int v25 = v56;
  uint64_t v26 = *(int *)(type metadata accessor for ActivityIcon(0) + 20);
  uint64_t v27 = *(void *)(a1 + v26);
  if (v25 == 1)
  {
    if (v27) {
      uint64_t v28 = *(void *)(a1 + v26);
    }
    else {
      uint64_t v28 = AnyView.init<A>(_:)();
    }
    uint64_t v29 = v10[11];
  }
  else
  {
    if (v27) {
      uint64_t v28 = *(void *)(a1 + v26);
    }
    else {
      uint64_t v28 = AnyView.init<A>(_:)();
    }
    uint64_t v29 = v10[10];
  }
  uint64_t v30 = (void ***)(v2 + v29);
  uint64_t v32 = *v30;
  uint64_t v31 = (uint64_t)v30[1];
  long long aBlock = v32;
  uint64_t v51 = v31;
  uint64_t v56 = v28;
  swift_retain();
  sub_100008614(&qword_1000FBEC0);
  State.wrappedValue.setter();
  sub_100024504();
  char v33 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v42 = *(void (**)(char *, uint64_t))(v14 + 8);
  v42(v18, v13);
  sub_100060434(v2, (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ActivityIconView);
  unint64_t v34 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  uint64_t v35 = swift_allocObject();
  sub_10006036C((uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v35 + v34);
  uint64_t v54 = sub_100060618;
  uint64_t v55 = v35;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  uint64_t v52 = sub_10003CE34;
  uint64_t v53 = &unk_1000E6B98;
  double v36 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v37 = v44;
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  sub_1000606BC();
  sub_100008614(&qword_1000F6E28);
  sub_100012908((unint64_t *)&qword_1000F6E30, &qword_1000F6E28);
  uint64_t v38 = v47;
  uint64_t v39 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v36);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
  return ((uint64_t (*)(char *, uint64_t))v42)(v21, v13);
}

uint64_t sub_10005F5AC()
{
  uint64_t v0 = type metadata accessor for ActivityIcon(0);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008614(&qword_1000FBDC8);
  Binding.wrappedValue.getter();
  sub_10005F088((uint64_t)v3);
  return sub_100060714((uint64_t)v3, type metadata accessor for ActivityIcon);
}

uint64_t sub_10005F64C()
{
  return swift_release();
}

uint64_t sub_10005F6F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  sub_100021270(a1, a2, &qword_1000FBDC8);
  uint64_t v5 = (int *)type metadata accessor for ActivityIconView(0);
  *(double *)(a2 + v5[5]) = a3;
  *(void *)(a2 + v5[6]) = 0x3F50624DD2F1A9FCLL;
  *(void *)(a2 + v5[7]) = 0x3FD3333333333333;
  *(void *)(a2 + v5[8]) = 0x4024000000000000;
  *(void *)(a2 + v5[9]) = 0x3FB999999999999ALL;
  uint64_t v6 = (void *)(a2 + v5[10]);
  AnyView.init<A>(_:)();
  State.init(wrappedValue:)();
  *uint64_t v6 = v10;
  v6[1] = v11;
  uint64_t v7 = (void *)(a2 + v5[11]);
  AnyView.init<A>(_:)();
  State.init(wrappedValue:)();
  *uint64_t v7 = v10;
  v7[1] = v11;
  uint64_t v8 = a2 + v5[12];
  uint64_t result = State.init(wrappedValue:)();
  *(unsigned char *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  return result;
}

uint64_t type metadata accessor for ActivityIconView(uint64_t a1)
{
  return sub_1000094F4(a1, (uint64_t *)&unk_1000FBE28);
}

uint64_t *sub_10005F86C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    swift_retain();
    swift_retain();
    uint64_t v8 = *(int *)(sub_100008614(&qword_1000FBDC8) + 32);
    uint64_t v9 = (char *)v7 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = type metadata accessor for ActivityIcon(0);
    *(void *)&v9[*(int *)(v12 + 20)] = *(void *)&v10[*(int *)(v12 + 20)];
    uint64_t v13 = a3[6];
    *(uint64_t *)((char *)v7 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v7 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v14 = a3[8];
    *(uint64_t *)((char *)v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v7 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[10];
    *(uint64_t *)((char *)v7 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    uint64_t v16 = (uint64_t *)((char *)v7 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = a3[11];
    uint64_t v20 = a3[12];
    uint64_t v21 = (uint64_t *)((char *)v7 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (char *)v7 + v20;
    int v25 = (char *)a2 + v20;
    *uint64_t v24 = *v25;
    *((void *)v24 + 1) = *((void *)v25 + 1);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t sub_10005FA18(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t v2 = a1 + *(int *)(sub_100008614(&qword_1000FBDC8) + 32);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  type metadata accessor for ActivityIcon(0);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void *sub_10005FB00(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_retain();
  uint64_t v7 = *(int *)(sub_100008614(&qword_1000FBDC8) + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for ActivityIcon(0);
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  uint64_t v12 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  uint64_t v14 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = a3[11];
  uint64_t v19 = a3[12];
  uint64_t v20 = (void *)((char *)a1 + v18);
  uint64_t v21 = (void *)((char *)a2 + v18);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = (char *)a1 + v19;
  uint64_t v24 = (char *)a2 + v19;
  *uint64_t v23 = *v24;
  *((void *)v23 + 1) = *((void *)v24 + 1);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_10005FC54(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(sub_100008614(&qword_1000FBDC8) + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for ActivityIcon(0);
  *(void *)&v7[*(int *)(v10 + 20)] = *(void *)&v8[*(int *)(v10 + 20)];
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  uint64_t v11 = a3[10];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  swift_retain();
  swift_release();
  *((void *)v12 + 1) = *((void *)v13 + 1);
  swift_retain();
  swift_release();
  uint64_t v14 = a3[11];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  swift_retain();
  swift_release();
  *((void *)v15 + 1) = *((void *)v16 + 1);
  swift_retain();
  swift_release();
  uint64_t v17 = a3[12];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  *uint64_t v18 = *v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  swift_retain();
  swift_release();
  return a1;
}

void *sub_10005FE18(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(sub_100008614(&qword_1000FBDC8) + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for ActivityIcon(0);
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  uint64_t v12 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  uint64_t v14 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  uint64_t v15 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

void *sub_10005FF14(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = *(int *)(sub_100008614(&qword_1000FBDC8) + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for ActivityIcon(0);
  *(void *)&v7[*(int *)(v10 + 20)] = *(void *)&v8[*(int *)(v10 + 20)];
  swift_release();
  uint64_t v11 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);
  swift_release();
  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_release();
  uint64_t v16 = a3[11];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  swift_release();
  *((void *)v17 + 1) = *((void *)v18 + 1);
  swift_release();
  uint64_t v19 = a3[12];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *uint64_t v20 = *v21;
  *((void *)v20 + 1) = *((void *)v21 + 1);
  swift_release();
  return a1;
}

uint64_t sub_10006008C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000600A0);
}

uint64_t sub_1000600A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100008614(&qword_1000FBDC8);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 40));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100060164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100060178);
}

uint64_t sub_100060178(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100008614(&qword_1000FBDC8);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 40)) = (a2 - 1);
  }
  return result;
}

void sub_100060238()
{
  sub_1000602F0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000602F0()
{
  if (!qword_1000FBE38)
  {
    type metadata accessor for ActivityIcon(255);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000FBE38);
    }
  }
}

uint64_t sub_100060348()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_10006036C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ActivityIconView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000603D0(uint64_t a1)
{
  return sub_10005F088(a1);
}

uint64_t sub_100060434(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000604A0()
{
  uint64_t v1 = *(void *)(type metadata accessor for ActivityIconView(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();
  uint64_t v7 = v6 + *(int *)(sub_100008614(&qword_1000FBDC8) + 32);
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  type metadata accessor for ActivityIcon(0);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1000605FC()
{
  return sub_100060630((uint64_t (*)(uint64_t))sub_10005F5AC);
}

uint64_t sub_100060618()
{
  return sub_100060630((uint64_t (*)(uint64_t))sub_10005F64C);
}

uint64_t sub_100060630(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for ActivityIconView(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_1000606A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000606B4()
{
  return swift_release();
}

unint64_t sub_1000606BC()
{
  unint64_t result = qword_1000F6E20;
  if (!qword_1000F6E20)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6E20);
  }
  return result;
}

uint64_t sub_100060714(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100060778()
{
  unint64_t result = qword_1000FBEF8;
  if (!qword_1000FBEF8)
  {
    sub_100009F40(&qword_1000FBEB8);
    sub_1000607F4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBEF8);
  }
  return result;
}

unint64_t sub_1000607F4()
{
  unint64_t result = qword_1000FBF00;
  if (!qword_1000FBF00)
  {
    sub_100009F40(&qword_1000FBEA0);
    sub_100060894();
    sub_100012908(&qword_1000FBF20, &qword_1000FBEB0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBF00);
  }
  return result;
}

unint64_t sub_100060894()
{
  unint64_t result = qword_1000FBF08;
  if (!qword_1000FBF08)
  {
    sub_100009F40(&qword_1000FBE98);
    sub_100060934();
    sub_100012908(&qword_1000F89C8, &qword_1000F89D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBF08);
  }
  return result;
}

unint64_t sub_100060934()
{
  unint64_t result = qword_1000FBF10;
  if (!qword_1000FBF10)
  {
    sub_100009F40(&qword_1000FBE90);
    sub_100012908(&qword_1000FBF18, &qword_1000FBE88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FBF10);
  }
  return result;
}

uint64_t sub_1000609D4@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  sub_100060EF8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC13PCViewService33NearbySharingInteractionViewModel__displayContext;
  swift_beginAccess();
  return sub_10000B038(v3, a1);
}

uint64_t sub_100060A70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC13PCViewService33NearbySharingInteractionViewModel__displayContext;
  swift_beginAccess();
  sub_100060E8C(a2, v3);
  return swift_endAccess();
}

uint64_t sub_100060ADC()
{
  return swift_retain();
}

uint64_t sub_100060B58@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100060EF8();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  *a2 = *(void *)(v3
                  + OBJC_IVAR____TtC13PCViewService33NearbySharingInteractionViewModel__nearbySharingInteractionViewEventSubject);
  return swift_retain();
}

uint64_t sub_100060BDC()
{
  return swift_release();
}

uint64_t sub_100060C8C()
{
  swift_bridgeObjectRelease();
  sub_10000B09C(v0 + OBJC_IVAR____TtC13PCViewService33NearbySharingInteractionViewModel__displayContext);
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC13PCViewService33NearbySharingInteractionViewModel___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100060D54()
{
  return type metadata accessor for NearbySharingInteractionViewModel();
}

uint64_t type metadata accessor for NearbySharingInteractionViewModel()
{
  uint64_t result = qword_1000FBF68;
  if (!qword_1000FBF68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100060DA8()
{
  uint64_t result = type metadata accessor for NearbySharingInteractionDisplayContext();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100060E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_100060EF8()
{
  unint64_t result = qword_1000FC0A8;
  if (!qword_1000FC0A8)
  {
    type metadata accessor for NearbySharingInteractionViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FC0A8);
  }
  return result;
}

uint64_t sub_100060F50()
{
  *(void *)(*(void *)(v0 + 16)
            + OBJC_IVAR____TtC13PCViewService33NearbySharingInteractionViewModel__nearbySharingInteractionViewEventSubject) = *(void *)(v0 + 24);
  swift_retain();
  return swift_release();
}

uint64_t destroy for NearbySharingInteractionView()
{
  swift_release();

  return swift_release();
}

void *_s13PCViewService28NearbySharingInteractionViewVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for NearbySharingInteractionView(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for NearbySharingInteractionView(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NearbySharingInteractionView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NearbySharingInteractionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionView()
{
  return &type metadata for NearbySharingInteractionView;
}

uint64_t sub_100061148()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100061164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100008614(&qword_1000FC0B8);
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v7 = v45;
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v51 = &v43[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v50 = &v43[-v13];
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v52 = &v43[-v16];
  __chkstk_darwin(v15, v17);
  uint64_t v19 = &v43[-v18];
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v47 = v21;
  uint64_t v48 = v20;
  uint64_t v49 = v22;
  int v24 = v23 & 1;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = a1;
  *(void *)(v25 + 24) = a2;
  swift_retain();
  swift_retain();
  sub_100008614(&qword_1000FC0C0);
  sub_1000617F0();
  uint64_t v46 = v19;
  Button.init(action:label:)();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = a1;
  *(void *)(v26 + 24) = a2;
  swift_retain();
  swift_retain();
  uint64_t v27 = v52;
  Button.init(action:label:)();
  int v44 = v24;
  char v53 = v24;
  uint64_t v28 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16);
  uint64_t v29 = v50;
  uint64_t v30 = v19;
  uint64_t v31 = v6;
  v28(v50, v30, v6);
  uint64_t v32 = v51;
  v28(v51, v27, v6);
  uint64_t v33 = v48;
  unint64_t v34 = a3;
  *a3 = v48;
  uint64_t v35 = v47;
  v34[1] = v47;
  *((unsigned char *)v34 + 16) = v24;
  v34[3] = v49;
  uint64_t v36 = sub_100008614(&qword_1000FC0D0);
  v28((unsigned char *)v34 + *(int *)(v36 + 48), v29, v31);
  v28((unsigned char *)v34 + *(int *)(v36 + 64), v32, v31);
  uint64_t v37 = v33;
  uint64_t v38 = v33;
  uint64_t v39 = v35;
  LOBYTE(v33) = v44;
  sub_1000298F0(v38, v35, v44);
  swift_bridgeObjectRetain();
  uint64_t v40 = v37;
  sub_1000298F0(v37, v39, v33);
  uint64_t v41 = *(void (**)(unsigned char *, uint64_t))(v45 + 8);
  swift_bridgeObjectRetain();
  v41(v52, v31);
  v41(v46, v31);
  sub_1000298D8(v40, v39, v33);
  swift_bridgeObjectRelease();
  v41(v32, v31);
  v41(v29, v31);
  sub_1000298D8(v40, v39, v53);
  return swift_bridgeObjectRelease();
}

double sub_100061578@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_10006166C(a1).n128_u64[0];
  return result;
}

uint64_t sub_100061588()
{
  return swift_release();
}

double sub_100061658@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = sub_10006166C(a1).n128_u64[0];
  return result;
}

__n128 sub_10006166C@<Q0>(uint64_t a1@<X8>)
{
  LocalizedStringKey.init(stringLiteral:)();
  uint64_t v2 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  uint64_t v9 = static Alignment.center.getter();
  sub_10002F444(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 40.0, 0, v9, v10, v2, v4, v8, v6);
  sub_1000298D8(v2, v4, v8);
  swift_bridgeObjectRelease();
  long long v11 = v15[7];
  *(_OWORD *)(a1 + 96) = v15[6];
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v15[8];
  long long v12 = v15[3];
  *(_OWORD *)(a1 + 32) = v15[2];
  *(_OWORD *)(a1 + 48) = v12;
  long long v13 = v15[5];
  *(_OWORD *)(a1 + 64) = v15[4];
  *(_OWORD *)(a1 + 80) = v13;
  __n128 result = (__n128)v15[1];
  *(_OWORD *)a1 = v15[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100061770@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  uint64_t v5 = sub_100008614(&qword_1000FC0B0);
  return sub_100061164(v4, v3, (uint64_t *)(a1 + *(int *)(v5 + 44)));
}

uint64_t sub_1000617D0()
{
  return sub_100061588();
}

unint64_t sub_1000617F0()
{
  unint64_t result = qword_1000FC0C8;
  if (!qword_1000FC0C8)
  {
    sub_100009F40(&qword_1000FC0C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FC0C8);
  }
  return result;
}

uint64_t sub_100061868()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000618A8()
{
  return sub_100061588();
}

unint64_t sub_1000618CC()
{
  unint64_t result = qword_1000FC0E0;
  if (!qword_1000FC0E0)
  {
    sub_100009F40(&qword_1000FC0E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FC0E0);
  }
  return result;
}

void sub_100061928(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_100061990@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 3);
  *(void *)&__src[0] = *((void *)a1 + 2);
  *((void *)&__src[0] + 1) = v3;
  sub_1000264AC();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  static Font.title.getter();
  uint64_t v9 = Text.font(_:)();
  uint64_t v11 = v10;
  char v13 = v12;
  swift_release();
  sub_1000298D8(v4, v6, v8);
  swift_bridgeObjectRelease();
  uint64_t v14 = Text.bold()();
  uint64_t v43 = v15;
  uint64_t v44 = v14;
  char v17 = v16;
  uint64_t v42 = v18;
  sub_1000298D8(v9, v11, v13 & 1);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = swift_getKeyPath();
  uint64_t v39 = swift_getKeyPath();
  unsigned __int8 v19 = static Edge.Set.leading.getter();
  unsigned __int8 v20 = static Edge.Set.trailing.getter();
  char v21 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v19) {
    char v21 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() == v20) {
    char v38 = v21;
  }
  else {
    char v38 = Edge.Set.init(rawValue:)();
  }
  EdgeInsets.init(_all:)();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  char v60 = v17 & 1;
  char v59 = 0;
  char v58 = 0;
  uint64_t v30 = *((void *)a1 + 4);
  long long v91 = *a1;
  uint64_t v31 = *((void *)&v91 + 1);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  sub_100026018((uint64_t)&v91);
  static Published.subscript.getter();
  swift_release();
  swift_release();
  sub_100026050((uint64_t)&v91);
  char v32 = __src[0];
  __src[0] = *(long long *)((char *)a1 + 40);
  swift_retain();
  sub_100008614(&qword_1000F7F58);
  State.wrappedValue.getter();
  char v33 = v73[0];
  *(void *)&v73[0] = 0;
  State.init(wrappedValue:)();
  State.init(wrappedValue:)();
  uint64_t v92 = v30;
  char v93 = v32;
  unint64_t v94 = sub_10006297C;
  uint64_t v95 = v31;
  char v96 = v33;
  long long v97 = __src[0];
  char v98 = __src[0];
  uint64_t v99 = *((void *)&__src[0] + 1);
  static Alignment.center.getter();
  sub_10002F638(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v46, 0.0, 1, 0.0, 1);
  swift_bridgeObjectRelease();
  sub_10000F808((uint64_t)sub_10006297C);
  swift_release();
  swift_release();
  char v36 = v59;
  char v37 = v60;
  *(void *)&long long v61 = v44;
  *((void *)&v61 + 1) = v43;
  LOBYTE(v62) = v60;
  *((void *)&v62 + 1) = v42;
  *(void *)&long long v63 = KeyPath;
  BYTE8(v63) = 1;
  *(void *)&long long v64 = v40;
  *((void *)&v64 + 1) = 3;
  LOBYTE(v65) = v59;
  *((void *)&v65 + 1) = v39;
  *(void *)&long long v66 = 0x3FE6666666666666;
  BYTE8(v66) = v38;
  *(void *)&long long v67 = v23;
  *((void *)&v67 + 1) = v25;
  *(void *)&long long v68 = v27;
  *((void *)&v68 + 1) = v29;
  v70[8] = v54;
  v70[9] = v55;
  v70[10] = v56;
  unsigned char v70[4] = v50;
  v70[5] = v51;
  v70[6] = v52;
  v70[7] = v53;
  v70[0] = v46;
  v70[1] = v47;
  v70[2] = v48;
  v70[3] = v49;
  __src[6] = v67;
  __src[7] = v68;
  __src[2] = v63;
  __src[3] = v64;
  __src[4] = v65;
  __src[5] = v66;
  __src[0] = v61;
  __src[1] = v62;
  *(_OWORD *)((char *)&__src[16] + 8) = v54;
  *(_OWORD *)((char *)&__src[17] + 8) = v55;
  *(_OWORD *)((char *)&__src[18] + 8) = v56;
  *(_OWORD *)((char *)&__src[12] + 8) = v50;
  *(_OWORD *)((char *)&__src[13] + 8) = v51;
  *(_OWORD *)((char *)&__src[14] + 8) = v52;
  *(_OWORD *)((char *)&__src[15] + 8) = v53;
  *(_OWORD *)((char *)&__src[8] + 8) = v46;
  *(_OWORD *)((char *)&__src[9] + 8) = v47;
  *(_OWORD *)((char *)&__src[10] + 8) = v48;
  char v34 = v58;
  char v69 = v58;
  uint64_t v71 = v57;
  LOBYTE(__src[8]) = v58;
  *((void *)&__src[19] + 1) = v57;
  *(_OWORD *)((char *)&__src[11] + 8) = v49;
  memcpy(a2, __src, 0x140uLL);
  v73[8] = v54;
  v73[9] = v55;
  v73[10] = v56;
  uint64_t v74 = v57;
  v73[4] = v50;
  v73[5] = v51;
  v73[6] = v52;
  v73[7] = v53;
  v73[0] = v46;
  v73[1] = v47;
  v73[2] = v48;
  v73[3] = v49;
  sub_100062980((uint64_t)&v61);
  sub_100034978((uint64_t)v70);
  sub_1000629F0((uint64_t)v73);
  v75[0] = v44;
  v75[1] = v43;
  char v76 = v37;
  uint64_t v77 = v42;
  uint64_t v78 = KeyPath;
  char v79 = 1;
  uint64_t v80 = v40;
  uint64_t v81 = 3;
  char v82 = v36;
  uint64_t v83 = v39;
  uint64_t v84 = 0x3FE6666666666666;
  char v85 = v38;
  uint64_t v86 = v23;
  uint64_t v87 = v25;
  uint64_t v88 = v27;
  uint64_t v89 = v29;
  char v90 = v34;
  return sub_100062A54((uint64_t)v75);
}

void sub_100061F64(uint64_t a1)
{
  uint64_t v2 = self;
  uint64_t v3 = swift_allocObject();
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v3 + 64) = *(void *)(a1 + 48);
  void v7[4] = sub_100062800;
  void v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100061928;
  v7[3] = &unk_1000E6DA0;
  uint64_t v5 = _Block_copy(v7);
  sub_100020444(a1);
  swift_release();
  id v6 = [v2 scheduledTimerWithTimeInterval:0 repeats:v5 block:0.5];
  _Block_release(v5);
}

uint64_t sub_10006207C@<X0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  long long v8 = *(_OWORD *)v1;
  long long v9 = v3;
  long long v10 = *(_OWORD *)(v1 + 32);
  uint64_t v11 = *(void *)(v1 + 48);
  uint64_t v4 = static HorizontalAlignment.center.getter();
  sub_100061990(&v8, __src);
  v13[328] = 0;
  memcpy(&v13[7], __src, 0x140uLL);
  uint64_t v5 = swift_allocObject();
  long long v6 = v9;
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v6;
  *(_OWORD *)(v5 + 48) = v10;
  *(void *)(v5 + 64) = v11;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0x4028000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  memcpy((void *)(a1 + 17), v13, 0x147uLL);
  *(void *)(a1 + 344) = sub_1000627A4;
  *(void *)(a1 + 352) = v5;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  return sub_100020444((uint64_t)&v8);
}

uint64_t sub_100062168@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100062194()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_1000621BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000621F0()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_100062220@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for HandoffFeatureEducationViewModel();
  sub_100062498();
  uint64_t v2 = ObservedObject.init(wrappedValue:)();
  uint64_t v32 = v3;
  uint64_t v33 = v2;
  uint64_t v4 = self;
  id v5 = [v4 localizedStringForKey:17];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v7;
  uint64_t v31 = v6;

  sub_10007B7D0(0, 3, 0);
  id v8 = [v4 localizedStringForKey:18];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  unint64_t v13 = _swiftEmptyArrayStorage[2];
  unint64_t v12 = _swiftEmptyArrayStorage[3];
  if (v13 >= v12 >> 1) {
    sub_10007B7D0(v12 > 1, v13 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v13 + 1;
  uint64_t v14 = (char *)&_swiftEmptyArrayStorage[3 * v13];
  v14[32] = 0;
  *((void *)v14 + 5) = v9;
  *((void *)v14 + 6) = v11;
  id v15 = [v4 localizedStringForKey:19];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  unint64_t v20 = _swiftEmptyArrayStorage[2];
  unint64_t v19 = _swiftEmptyArrayStorage[3];
  if (v20 >= v19 >> 1) {
    sub_10007B7D0(v19 > 1, v20 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v20 + 1;
  char v21 = (char *)&_swiftEmptyArrayStorage[3 * v20];
  v21[32] = 1;
  *((void *)v21 + 5) = v16;
  *((void *)v21 + 6) = v18;
  id v22 = [v4 localizedStringForKey:20];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v25 = v24;

  unint64_t v27 = _swiftEmptyArrayStorage[2];
  unint64_t v26 = _swiftEmptyArrayStorage[3];
  if (v27 >= v26 >> 1) {
    sub_10007B7D0(v26 > 1, v27 + 1, 1);
  }
  _swiftEmptyArrayStorage[2] = v27 + 1;
  uint64_t v28 = (char *)&_swiftEmptyArrayStorage[3 * v27];
  v28[32] = 2;
  *((void *)v28 + 5) = v23;
  *((void *)v28 + 6) = v25;
  uint64_t result = State.init(wrappedValue:)();
  *(void *)a1 = v33;
  *(void *)(a1 + 8) = v32;
  *(void *)(a1 + 16) = v31;
  *(void *)(a1 + 24) = v30;
  *(void *)(a1 + 32) = _swiftEmptyArrayStorage;
  *(unsigned char *)(a1 + 40) = _swiftEmptyArrayStorage;
  *(void *)(a1 + 48) = v34;
  return result;
}

unint64_t sub_100062498()
{
  unint64_t result = qword_1000F77F8;
  if (!qword_1000F77F8)
  {
    type metadata accessor for HandoffFeatureEducationViewModel();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F77F8);
  }
  return result;
}

uint64_t destroy for HandoffFeatureEducationViewHeader()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for HandoffFeatureEducationViewHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HandoffFeatureEducationViewHeader(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for CodableError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HandoffFeatureEducationViewHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HandoffFeatureEducationViewHeader(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HandoffFeatureEducationViewHeader(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffFeatureEducationViewHeader()
{
  return &type metadata for HandoffFeatureEducationViewHeader;
}

uint64_t sub_100062784()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_1000627A4()
{
  sub_100061F64(v0 + 16);
}

uint64_t sub_1000627B0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100062800()
{
  return State.wrappedValue.setter();
}

uint64_t sub_100062850(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100062860()
{
  return swift_release();
}

uint64_t sub_100062868@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100062894()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_1000628BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000628F0()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t sub_100062920@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.minimumScaleFactor.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_10006294C()
{
  return EnvironmentValues.minimumScaleFactor.setter();
}

uint64_t sub_100062980(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000629F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_bridgeObjectRelease();
  sub_10000F808(v2);
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_100062A54(uint64_t a1)
{
  return a1;
}

unint64_t sub_100062AC8()
{
  unint64_t result = qword_1000FC0F0;
  if (!qword_1000FC0F0)
  {
    sub_100009F40(&qword_1000FC0F8);
    sub_100062B44();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FC0F0);
  }
  return result;
}

unint64_t sub_100062B44()
{
  unint64_t result = qword_1000FC100;
  if (!qword_1000FC100)
  {
    sub_100009F40(&qword_1000FC108);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FC100);
  }
  return result;
}

Swift::UInt64 sub_100062BA0()
{
  if (*(unsigned char *)(v0 + 32) & 1) != 0 || (*(unsigned char *)(v0 + 48))
  {
    if (*(unsigned char *)(v0 + 16)) {
      return 0x646570706F7473;
    }
    else {
      return 0x676E696E6E7572;
    }
  }
  else
  {
    unint64_t v2 = *(void *)(v0 + 24);
    unint64_t v3 = *(void *)(v0 + 40);
    Swift::UInt64 result = v3 - v2;
    if (v3 < v2)
    {
      __break(1u);
    }
    else
    {
      double v4 = UpTicksToSecondsF(_:)(result);
      return sub_100099044(v4);
    }
  }
  return result;
}

uint64_t sub_100062C18()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Stopwatch()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for Stopwatch.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *Swift::UInt64 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100062D18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *Swift::UInt64 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Stopwatch.State()
{
  return &type metadata for Stopwatch.State;
}

uint64_t sub_100062D50()
{
  if (*v0) {
    return 0x646570706F7473;
  }
  else {
    return 0x676E696E6E7572;
  }
}

unint64_t sub_100062D88()
{
  unint64_t result = qword_1000FC228;
  if (!qword_1000FC228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FC228);
  }
  return result;
}

Swift::UInt64 sub_100062DDC()
{
  return sub_100062BA0();
}

uint64_t sub_100062E00(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  UUID.init()();
  uint64_t v8 = qword_1000F8F60;
  sub_100008614(&qword_1000FC488);
  swift_allocObject();
  *(void *)(v3 + v8) = PassthroughSubject.init()();
  *(void *)(v3 + qword_1000F8F70) = 0;
  uint64_t v9 = qword_1000F8F78;
  sub_100008614(&qword_1000FC490);
  swift_allocObject();
  *(void *)(v3 + v9) = PassthroughSubject.init()();
  *(void *)(v3 + qword_1000F8F80) = 0;
  *(void *)(v3 + qword_1000F8F68) = a1;
  uint64_t v10 = (uint64_t *)(v3 + qword_100111A08);
  *uint64_t v10 = a2;
  v10[1] = (uint64_t)a3;
  id v11 = a1;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(29);
  v12._uint64_t countAndFlagsBits = 0x6F72203A74696E49;
  v12._object = (void *)0xEB000000003D656CLL;
  String.append(_:)(v12);
  _print_unlocked<A, B>(_:_:)();
  v13._uint64_t countAndFlagsBits = 0x65536863616D202CLL;
  v13._object = (void *)0xEE003D6563697672;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = a2;
  v14._object = a3;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  sub_10002CBA8();
  id v15 = objc_allocWithZone((Class)CULogHandle);
  NSString v16 = String._bridgeToObjectiveC()();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v18 = [v15 initWithSubsystem:v16 category:v17];

  swift_bridgeObjectRetain();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v18 ulog:40 message:v19];
  swift_bridgeObjectRelease();

  return v4;
}

uint64_t sub_100063078()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClientModel()
{
  return self;
}

uint64_t type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClientState()
{
  return self;
}

uint64_t *sub_1000630F8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_100008614(&qword_1000FC480);
  swift_allocObject();
  v2[4] = sub_100062E00(0, 0xD000000000000031, (void *)0x80000001000C23B0);
  v2[5] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10004DA44(1953066569, (void *)0xE400000000000000, 0, v5, (uint64_t)&off_1000E6E58);
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t sub_1000631CC()
{
  id v0 = sub_10006EE30();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClient()
{
  return self;
}

void sub_100063290()
{
  uint64_t v1 = v0;
  uint64_t v10 = sub_100008614(&qword_1000FC498);
  uint64_t v2 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = sub_10006EE30();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  uint64_t v11 = *(void *)(*(void *)(v1 + 16) + 16);
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_100008614(&qword_1000FC4A0);
  sub_100012908(&qword_1000FC4A8, &qword_1000FC4A0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v8 = *(void *)(v1 + 32);
  uint64_t v11 = sub_1000655EC();
  sub_100008614(&qword_1000FC4B0);
  sub_100012908(&qword_1000FC4B8, &qword_1000FC4B0);
  Publisher.filter(_:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100012908(&qword_1000FC4C0, &qword_1000FC498);
  uint64_t v9 = v10;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v9);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v11 = *(void *)(v8 + qword_1000F8F60);
  sub_100008614(&qword_1000FC488);
  sub_100012908(&qword_1000FC4C8, &qword_1000FC488);
  uint64_t v11 = Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_weakInit();
  sub_100008614(&qword_1000FC4D0);
  sub_100012908(&qword_1000FC4D8, &qword_1000FC4D0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_1000656B0();
}

uint64_t sub_1000636C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ViewServiceOutput(0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v16 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  char v12 = *(unsigned char *)(a1 + 56);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v15[1] = v2;
    swift_retain();
    swift_release();
    sub_100008614(&qword_1000F9280);
    uint64_t v14 = v16;
    *(void *)uint64_t v5 = v16;
    *((void *)v5 + 1) = v6;
    *((void *)v5 + 2) = v7;
    *((void *)v5 + 3) = v8;
    *((void *)v5 + 4) = v9;
    *((void *)v5 + 5) = v10;
    *((void *)v5 + 6) = v11;
    v5[56] = v12;
    sub_100044F54(v14, v6, v7, v8, v9, v10, v11, v12);
    static Date.now.getter();
    swift_storeEnumTagMultiPayload();
    sub_100065140((uint64_t)v5);
    swift_release();
    return sub_100063F28((uint64_t)v5, type metadata accessor for ViewServiceOutput);
  }
  return result;
}

uint64_t sub_100063848(char *a1)
{
  uint64_t v2 = type metadata accessor for ViewServiceOutput(0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    sub_100008614(&qword_1000F9278);
    *uint64_t v5 = v6;
    Date.init()();
    swift_storeEnumTagMultiPayload();
    sub_100065140((uint64_t)v5);
    swift_release();
    return sub_100063F28((uint64_t)v5, type metadata accessor for ViewServiceOutput);
  }
  return result;
}

uint64_t sub_10006396C(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000639CC(a1);
    return swift_release();
  }
  return result;
}

void sub_1000639CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NearbySharingInteractionDisplayContext();
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  char v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v4, v7);
  uint64_t v10 = (char *)&v30 - v9;
  uint64_t v12 = __chkstk_darwin(v8, v11);
  uint64_t v14 = (char *)&v30 - v13;
  __chkstk_darwin(v12, v15);
  NSString v17 = (char *)&v30 - v16;
  uint64_t v18 = type metadata accessor for ViewServiceInput(0);
  __chkstk_darwin(v18, v19);
  char v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v22._object = (void *)0x80000001000C23F0;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 0x3D7475706E69203ALL;
  v23._object = (void *)0xE800000000000000;
  String.append(_:)(v23);
  _print_unlocked<A, B>(_:_:)();
  id v24 = sub_10006EE30();
  swift_bridgeObjectRetain();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v24 ulog:40 message:v25];
  swift_bridgeObjectRelease();

  sub_100063E70(a1, (uint64_t)v21, type metadata accessor for ViewServiceInput);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 5u:
      goto LABEL_6;
    case 2u:
      unint64_t v26 = *((void *)v21 + 1);
      id v31 = *(id *)v21;
      unint64_t v32 = v26;
      swift_retain();
      PassthroughSubject.send(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      return;
    case 3u:
      sub_10001CB40(*(id *)v21);
      goto LABEL_6;
    case 4u:

      goto LABEL_6;
    case 6u:
      sub_100063E0C((uint64_t)v21, (uint64_t)v17);
      sub_100063E70((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
      swift_beginAccess();
      sub_100063E70((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
      sub_100063E70((uint64_t)v10, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
      swift_retain();
      sub_10006AE08((uint64_t)v6);
      sub_100063F28((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
      swift_release();
      sub_100063F28((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
      sub_100063F28((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
      return;
    case 7u:
      return;
    default:
      sub_100063F28((uint64_t)v21, type metadata accessor for ViewServiceInput);
LABEL_6:
      id v31 = 0;
      unint64_t v32 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      v27._object = (void *)0x80000001000C2410;
      v27._uint64_t countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v27);
      _print_unlocked<A, B>(_:_:)();
      id v28 = sub_10006EE30();
      swift_bridgeObjectRetain();
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v28 ulog:60 message:v29];
      swift_bridgeObjectRelease();

      return;
  }
}

uint64_t sub_100063E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100063E70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100063ED8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100063F10(uint64_t a1)
{
  return sub_1000636C4(a1);
}

uint64_t sub_100063F18(char *a1)
{
  return sub_100063848(a1);
}

uint64_t sub_100063F20(uint64_t a1)
{
  return sub_10006396C(a1);
}

uint64_t sub_100063F28(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100063F88()
{
  return swift_release();
}

uint64_t sub_100064024@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  sub_100064C54((unint64_t *)&qword_1000FC0A8, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC13PCViewService33NearbySharingInteractionViewModel__displayContext;
  swift_beginAccess();
  return sub_10000B038(v4, a2);
}

uint64_t sub_1000640F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000B038(a1, (uint64_t)v7);
  uint64_t v8 = *a2;
  swift_getKeyPath();
  uint64_t v11 = v8;
  uint64_t v12 = v7;
  uint64_t v13 = v8;
  sub_100064C54((unint64_t *)&qword_1000FC0A8, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return sub_10000B09C((uint64_t)v7);
}

uint64_t sub_100064218()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NearbySharingInteractionViewPresenterModel()
{
  return self;
}

uint64_t type metadata accessor for NearbySharingInteractionViewPresenterState()
{
  return self;
}

uint64_t sub_1000642A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100008614(&qword_1000F7A48);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for NearbySharingInteractionDisplayContext();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 32))
  {
    uint64_t v11 = *(void *)(v0 + 32);
  }
  else
  {
    swift_retain();
    CurrentValueSubject.value.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      CurrentValueSubject.value.getter();
      sub_10000EC04((uint64_t)v5, &qword_1000F7A48);
    }
    else
    {
      sub_100063E0C((uint64_t)v5, (uint64_t)v10);
    }
    swift_release();
    uint64_t v12 = *(void *)(*(void *)(v0 + 24) + 16);
    type metadata accessor for NearbySharingInteractionViewModel();
    uint64_t v11 = swift_allocObject();
    swift_retain();
    ObservationRegistrar.init()();
    *(void *)(v11 + 16) = 0x706F6F625FLL;
    *(void *)(v11 + 24) = 0xE500000000000000;
    sub_100063E0C((uint64_t)v10, v11 + OBJC_IVAR____TtC13PCViewService33NearbySharingInteractionViewModel__displayContext);
    *(void *)(v11
              + OBJC_IVAR____TtC13PCViewService33NearbySharingInteractionViewModel__nearbySharingInteractionViewEventSubject) = v12;
    *(void *)(v1 + 32) = v11;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v11;
}

uint64_t *sub_1000644BC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  v2[4] = 0;
  v2[5] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10004DA44(1953066569, (void *)0xE400000000000000, 0, v5, (uint64_t)&off_1000E6EB8);
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t sub_100064548()
{
  id v0 = sub_10006EE50();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NearbySharingInteractionViewPresenter()
{
  return self;
}

void sub_10006460C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100008614(&qword_1000F78D8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100008614(&qword_1000FC7A8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = sub_10006EE50();
  NSString v12 = String._bridgeToObjectiveC()();
  [v11 ulog:40 message:v12];

  uint64_t v13 = *(void *)(v1 + 16);
  [*(id *)(v13 + 24) setDesiredHardwareButtonEvents:16];
  memset(v24, 0, sizeof(v24));
  char v25 = 2;
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  id v23 = (id)sub_1000642A8();
  type metadata accessor for NearbySharingInteractionViewModel();
  State.init(wrappedValue:)();
  long long v14 = *(_OWORD *)v24;
  id v15 = objc_allocWithZone((Class)sub_100008614(&qword_1000FC7B0));
  *(_OWORD *)id v24 = v14;
  swift_retain();
  swift_retain();
  uint64_t v16 = (void *)UIHostingController.init(rootView:)();
  id v17 = *(id *)(v13 + 16);
  sub_100011D20(v16, 0);

  *(void *)id v24 = 1;
  memset(&v24[8], 0, 48);
  char v25 = 2;
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  *(void *)id v24 = *(void *)(v13 + 32);
  sub_100024504();
  swift_retain();
  id v23 = (id)static OS_dispatch_queue.main.getter();
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v5, 1, 1, v18);
  sub_100008614(&qword_1000FC7B8);
  sub_100012908(&qword_1000FC7C0, &qword_1000FC7B8);
  sub_100064C54((unint64_t *)&qword_1000F7940, (void (*)(uint64_t))sub_100024504);
  Publisher.receive<A>(on:options:)();
  sub_10000EC04((uint64_t)v5, &qword_1000F78D8);

  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100012908(qword_1000FC7C8, &qword_1000FC7A8);
  uint64_t v19 = v21;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v19);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_100064A5C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NearbySharingInteractionDisplayContext();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = sub_1000642A8();
    swift_release();
    sub_10000B038(a1, (uint64_t)v5);
    uint64_t KeyPath = swift_getKeyPath();
    __chkstk_darwin(KeyPath, v9);
    v10[-2] = v7;
    v10[-1] = v5;
    void v10[2] = v7;
    sub_100064C54((unint64_t *)&qword_1000FC0A8, (void (*)(uint64_t))type metadata accessor for NearbySharingInteractionViewModel);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    sub_10000B09C((uint64_t)v5);
    return swift_release();
  }
  return result;
}

uint64_t sub_100064BF0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100064C28(uint64_t a1)
{
  return sub_100064A5C(a1);
}

uint64_t sub_100064C38()
{
  return sub_100060A70(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100064C54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100064C9C()
{
  return sub_100064C38();
}

uint64_t sub_100064CB4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100064CF8(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = objc_allocWithZone(v1);
  uint64_t v5 = sub_100065058(a1);
  (*(void (**)(uint64_t))(*(void *)(*(void *)((char *)v2 + qword_100111A18) - 8) + 8))(a1);
  return v5;
}

uint64_t sub_100064D78()
{
  return 1;
}

uint64_t sub_100064D80()
{
  return 1;
}

void *sub_100064D88(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_100064DCC(a1, a2);
}

void *sub_100064DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((swift_isaMask & *v2) + qword_100111A18);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(a1, a2);
  (*(void (**)(char *))(v5 + 16))((char *)&v11 - v6);
  uint64_t v7 = (void *)UIHostingController.init(coder:rootView:)();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  id v9 = v7;
  v8(a2, v4);
  if (v7) {

  }
  return v7;
}

id sub_100064F04(void *a1)
{
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for LockscreenViewableUIHostingController();
  [super initWithCoder:a1];

  return v3;
}

id sub_100064F9C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100064F04(a3);
}

id sub_100064FC4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LockscreenViewableUIHostingController();
  return [super dealloc];
}

uint64_t type metadata accessor for LockscreenViewableUIHostingController()
{
  return sub_10000ED34();
}

uint64_t sub_100065058(uint64_t a1)
{
  __chkstk_darwin(a1, a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - v1);
  return UIHostingController.init(rootView:)();
}

uint64_t sub_100065140(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v1 = type metadata accessor for ViewServiceOutput(0);
  uint64_t v21 = *(void *)(v1 - 8);
  uint64_t v2 = *(void *)(v21 + 64);
  __chkstk_darwin(v1, v3);
  uint64_t v4 = sub_100008614(&qword_1000F8F28);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 0x293A5F28646E6573;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 0x3D7475706E69203ALL;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  _print_unlocked<A, B>(_:_:)();
  sub_10002CBA8();
  id v10 = objc_allocWithZone((Class)CULogHandle);
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v10 initWithSubsystem:v11 category:v12];

  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:40 message:v14];
  swift_bridgeObjectRelease();

  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  sub_100066E2C(v20, (uint64_t)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ViewServiceOutput);
  unint64_t v17 = (*(unsigned __int8 *)(v21 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = 0;
  float64x2_t v18[3] = 0;
  v18[4] = v16;
  sub_100067010((uint64_t)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v18 + v17, type metadata accessor for ViewServiceOutput);
  sub_10006546C((uint64_t)v7, (uint64_t)&unk_1000FCB58, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_10006546C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_100067160(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1000655EC()
{
  uint64_t v1 = qword_1000F8F80;
  if (*(void *)(v0 + qword_1000F8F80))
  {
    uint64_t v2 = *(void *)(v0 + qword_1000F8F80);
  }
  else
  {
    uint64_t v3 = v0;
    sub_100008614(&qword_1000FC490);
    sub_100012908(&qword_1000FCB68, &qword_1000FC490);
    uint64_t v2 = Publisher.eraseToAnyPublisher()();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void sub_1000656B0()
{
  sub_10002CBA8();
  id v0 = objc_allocWithZone((Class)CULogHandle);
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 initWithSubsystem:v1 category:v2];

  NSString v4 = String._bridgeToObjectiveC()();
  [v3 ulog:40 message:v4];

  sub_1000657A0();
}

void sub_1000657A0()
{
  sub_10002CBA8();
  id v1 = objc_allocWithZone((Class)CULogHandle);
  NSString v2 = String._bridgeToObjectiveC()();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v1 initWithSubsystem:v2 category:v3];

  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  sub_1000658C4();
  if (!*(void *)(v0 + qword_1000F8F68))
  {
    sub_100065A14();
  }
}

uint64_t sub_1000658C4()
{
  uint64_t v1 = v0;
  sub_10002CBA8();
  id v2 = objc_allocWithZone((Class)CULogHandle);
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithSubsystem:v3 category:v4];

  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:40 message:v6];

  sub_1000A2900();
  LODWORD(v5) = sub_10003BA44();
  uint64_t result = swift_release();
  if (v5 == 1 && !*(void *)(v1 + qword_1000F8F68))
  {
    sub_100065A14();
    swift_retain();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

void sub_100065A14()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  NSString v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002CBA8();
  id v5 = objc_allocWithZone((Class)CULogHandle);
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v5 initWithSubsystem:v6 category:v7];

  NSString v9 = String._bridgeToObjectiveC()();
  [v8 ulog:40 message:v9];

  static String.Encoding.ascii.getter();
  uint64_t v10 = String.data(using:allowLossyConversion:)();
  unint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (v12 >> 60 == 15)
  {
    sub_10002CBA8();
    id v13 = objc_allocWithZone((Class)CULogHandle);
    NSString v14 = String._bridgeToObjectiveC()();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v16 = [v13 initWithSubsystem:v14 category:v15];

    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:60 message:v17];
  }
  else
  {
    uint64_t v18 = (void *)sub_1000A2900();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v18 handleWithSerializedObject:isa];
    swift_release();

    sub_100066DB8(v10, v12);
  }
}

uint64_t sub_100065CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  return _swift_task_switch(sub_100065CDC, 0, 0);
}

uint64_t sub_100065CDC()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    type metadata accessor for ViewServiceOutput(0);
    sub_1000671C0();
    uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v3 = v2;
    swift_release();
    sub_1000658C4();
    NSString v4 = (void *)sub_1000A2900();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v4 handleWithSerializedObject:isa];

    swift_release();
    sub_10000D6B8(v1, v3);
    swift_release();
  }
  NSString v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t type metadata accessor for ClassicCardAlertDaemonBridgeClientModel()
{
  return self;
}

uint64_t sub_100065E60()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClassicCardAlertDaemonBridgeClientState()
{
  return self;
}

uint64_t *sub_100065EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_100008614(&qword_1000FC480);
  swift_allocObject();
  v2[4] = sub_100062E00(0, 0xD000000000000031, (void *)0x80000001000C23B0);
  v2[5] = (uint64_t)&_swiftEmptySetSingleton;
  sub_10004DA44(1953066569, (void *)0xE400000000000000, 0, v5, (uint64_t)&off_1000E6FD0);
  v2[2] = a1;
  v2[3] = a2;
  return v2;
}

uint64_t sub_100065FB8()
{
  id v0 = sub_10006EDBC();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClassicCardAlertDaemonBridgeClient()
{
  return self;
}

void sub_10006607C()
{
  uint64_t v1 = v0;
  uint64_t v12 = sub_100008614(&qword_1000FC498);
  uint64_t v2 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = sub_10006EDBC();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  uint64_t v13 = *(void *)(*(void *)(v1 + 16) + 16);
  uint64_t v8 = swift_allocObject();
  swift_weakInit();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_100066D1C;
  *(void *)(v9 + 24) = v8;
  swift_retain();
  sub_100008614(&qword_1000FCB40);
  sub_100012908(&qword_1000FCB48, &qword_1000FCB40);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v10 = *(void *)(v1 + 32);
  uint64_t v13 = sub_1000655EC();
  sub_100008614(&qword_1000FC4B0);
  sub_100012908(&qword_1000FC4B8, &qword_1000FC4B0);
  Publisher.filter(_:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100012908(&qword_1000FC4C0, &qword_1000FC498);
  uint64_t v11 = v12;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v11);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v13 = *(void *)(v10 + qword_1000F8F60);
  sub_100008614(&qword_1000FC488);
  sub_100012908(&qword_1000FC4C8, &qword_1000FC488);
  uint64_t v13 = Publisher.eraseToAnyPublisher()();
  swift_allocObject();
  swift_weakInit();
  sub_100008614(&qword_1000FC4D0);
  sub_100012908(&qword_1000FC4D8, &qword_1000FC4D0);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_1000656B0();
}

uint64_t sub_1000664DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ViewServiceOutput(0);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    sub_100008614(&qword_1000F9270);
    sub_100067218(a1, (uint64_t)v9);
    *((void *)v9 + 8) = a2;
    *((void *)v9 + 9) = a3;
    sub_100067274(a1);
    swift_bridgeObjectRetain();
    Date.init()();
    swift_storeEnumTagMultiPayload();
    sub_100065140((uint64_t)v9);
    swift_release();
    return sub_100066DCC((uint64_t)v9, type metadata accessor for ViewServiceOutput);
  }
  return result;
}

uint64_t sub_10006662C(char *a1)
{
  uint64_t v2 = type metadata accessor for ViewServiceOutput(0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    sub_100008614(&qword_1000F9278);
    *uint64_t v5 = v6;
    Date.init()();
    swift_storeEnumTagMultiPayload();
    sub_100065140((uint64_t)v5);
    swift_release();
    return sub_100066DCC((uint64_t)v5, type metadata accessor for ViewServiceOutput);
  }
  return result;
}

uint64_t sub_100066750(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000667B0(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000667B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  char v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v4, v7);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v12 = __chkstk_darwin(v8, v11);
  NSString v14 = (char *)&v40 - v13;
  __chkstk_darwin(v12, v15);
  NSString v17 = (char *)&v40 - v16;
  uint64_t v18 = type metadata accessor for ViewServiceInput(0);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = 0;
  unint64_t v42 = 0xE000000000000000;
  v22._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v22._object = (void *)0x80000001000C23F0;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 0x3D7475706E69203ALL;
  v23._object = (void *)0xE800000000000000;
  String.append(_:)(v23);
  _print_unlocked<A, B>(_:_:)();
  id v24 = sub_10006EDBC();
  swift_bridgeObjectRetain();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v24 ulog:40 message:v25];
  swift_bridgeObjectRelease();

  sub_100066E2C(a1, (uint64_t)v21, type metadata accessor for ViewServiceInput);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      char v29 = *v21;
      swift_beginAccess();
      swift_retain();
      sub_10006B7B0(v29);
      return swift_release();
    case 2:
      uint64_t v30 = *(void *)v21;
      unint64_t v31 = *((void *)v21 + 1);
      uint64_t v41 = v30;
      unint64_t v42 = v31;
      swift_retain();
      PassthroughSubject.send(_:)();
      swift_bridgeObjectRelease();
      return swift_release();
    case 3:
      uint64_t v33 = *(void **)v21;
      uint64_t v32 = *((void *)v21 + 1);
      swift_beginAccess();
      swift_retain();
      sub_100021250(v33);
      sub_10006BB5C(v33, v32);
      sub_10001CB40(v33);
      return swift_release();
    case 4:
      uint64_t v34 = *(void **)v21;
      swift_beginAccess();
      id v35 = v34;
      swift_retain();
      sub_10006BF64(v34);

      return swift_release();
    case 5:
      float v36 = *(float *)v21;
      swift_beginAccess();
      swift_retain();
      sub_10006C35C(v36);
      return swift_release();
    case 6:
      uint64_t v41 = 0;
      unint64_t v42 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      v37._object = (void *)0x80000001000C2410;
      v37._uint64_t countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v37);
      _print_unlocked<A, B>(_:_:)();
      id v38 = sub_10006EDBC();
      swift_bridgeObjectRetain();
      NSString v39 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v38 ulog:40 message:v39];
      swift_bridgeObjectRelease();

      id v28 = type metadata accessor for ViewServiceInput;
      uint64_t v27 = (uint64_t)v21;
      return sub_100066DCC(v27, v28);
    case 7:
      return result;
    default:
      sub_100067010((uint64_t)v21, (uint64_t)v17, type metadata accessor for ActivityDisplayContext);
      sub_100066E2C((uint64_t)v17, (uint64_t)v14, type metadata accessor for ActivityDisplayContext);
      swift_beginAccess();
      sub_100066E2C((uint64_t)v14, (uint64_t)v10, type metadata accessor for ActivityDisplayContext);
      sub_100066E2C((uint64_t)v10, (uint64_t)v6, type metadata accessor for ActivityDisplayContext);
      swift_retain();
      sub_10006B2DC((uint64_t)v6);
      sub_100066DCC((uint64_t)v10, type metadata accessor for ActivityDisplayContext);
      swift_release();
      sub_100066DCC((uint64_t)v14, type metadata accessor for ActivityDisplayContext);
      uint64_t v27 = (uint64_t)v17;
      id v28 = type metadata accessor for ActivityDisplayContext;
      return sub_100066DCC(v27, v28);
  }
}

uint64_t sub_100066CE4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100066D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000664DC(a1, a2, a3);
}

uint64_t sub_100066D24()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100066D5C(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(unsigned char *, void, void))(v1 + 16);
  sub_100067218(a1, (uint64_t)v5);
  return v3(v5, *(void *)(a1 + 64), *(void *)(a1 + 72));
}

uint64_t sub_100066DA8(char *a1)
{
  return sub_10006662C(a1);
}

uint64_t sub_100066DB0(uint64_t a1)
{
  return sub_100066750(a1);
}

uint64_t sub_100066DB8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000D6B8(a1, a2);
  }
  return a1;
}

uint64_t sub_100066DCC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100066E2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100066E94()
{
  uint64_t v1 = *(void *)(type metadata accessor for ViewServiceOutput(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    sub_1000450A8(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(unsigned char *)(v5 + 56));
    uint64_t v8 = &qword_1000F9280;
LABEL_7:
    uint64_t v7 = *(int *)(sub_100008614(v8) + 48);
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = &qword_1000F9278;
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload) {
    goto LABEL_9;
  }
  sub_100020184(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(unsigned char *)(v5 + 56));
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(sub_100008614(&qword_1000F9270) + 64);
LABEL_8:
  uint64_t v9 = v5 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
LABEL_9:

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100067010(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100067078()
{
  uint64_t v2 = *(void *)(type metadata accessor for ViewServiceOutput(0) - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10003C91C;
  v5[5] = v3;
  v5[6] = v4;
  return _swift_task_switch(sub_100065CDC, 0, 0);
}

uint64_t sub_100067160(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F8F28);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000671C0()
{
  unint64_t result = qword_1000FCB60;
  if (!qword_1000FCB60)
  {
    type metadata accessor for ViewServiceOutput(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FCB60);
  }
  return result;
}

uint64_t sub_100067218(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100067274(uint64_t a1)
{
  return a1;
}

void *sub_1000672B0(uint64_t a1, int a2, void *a3, unint64_t a4, void *a5, float a6)
{
  uint64_t v7 = v6;
  id v27 = a5;
  int v26 = a2;
  uint64_t v12 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14, v17);
  uint64_t v19 = &v25[-v18];
  sub_100008614(&qword_1000F76E0);
  swift_allocObject();
  v6[5] = sub_10001C434(0, 0, 0, 0);
  uint64_t v20 = (uint64_t **)(v6 + 5);
  sub_100008614(&qword_1000FCB70);
  swift_allocObject();
  v6[7] = PassthroughSubject.init()();
  sub_100066E2C(a1, (uint64_t)v19, type metadata accessor for ActivityDisplayContext);
  swift_beginAccess();
  sub_100066E2C((uint64_t)v19, (uint64_t)v16, type metadata accessor for ActivityDisplayContext);
  sub_100008614(&qword_1000F7930);
  swift_allocObject();
  uint64_t v21 = sub_10001CB50((uint64_t)v16, 0, 0, 0, 0, 0);
  sub_100066DCC((uint64_t)v19, type metadata accessor for ActivityDisplayContext);
  v7[2] = v21;
  swift_endAccess();
  swift_beginAccess();
  sub_100008614(&qword_1000F79D8);
  swift_allocObject();
  v7[3] = sub_10001CBD0(v26, 0, 0, 0);
  swift_endAccess();
  swift_beginAccess();
  sub_100008614(&qword_1000F7980);
  swift_allocObject();
  sub_100021250(a3);
  void v7[4] = sub_10001D2C0(a3, a4, 0, 0, 0);
  swift_endAccess();
  swift_beginAccess();
  id v22 = v27;
  id v23 = v27;
  swift_release();
  swift_allocObject();
  *uint64_t v20 = sub_10001C434(v22, 0, 0, 0);
  swift_endAccess();
  swift_beginAccess();
  sub_100008614(&qword_1000F79A0);
  swift_allocObject();
  void v7[6] = sub_10001DA28(0, 0, 0, a6);
  swift_endAccess();
  sub_100066DCC(a1, type metadata accessor for ActivityDisplayContext);
  return v7;
}

void *sub_100067610(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10007B6A8(0, v1, 0);
    uint64_t v3 = a1 + 32;
    do
    {
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      swift_getAtKeyPath();
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        sub_10007B6A8(v4 > 1, v5 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v5 + 1;
      _swiftEmptyArrayStorage[v5 + 4] = v7;
      v3 += 8;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100067724(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10007B6A8(0, v1, 0);
    uint64_t v3 = a1 + 56;
    do
    {
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      swift_getAtKeyPath();
      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v5 = _swiftEmptyArrayStorage[2];
      unint64_t v4 = _swiftEmptyArrayStorage[3];
      if (v5 >= v4 >> 1) {
        sub_10007B6A8(v4 > 1, v5 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v5 + 1;
      _swiftEmptyArrayStorage[v5 + 4] = v7;
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100067848(uint64_t a1, uint64_t a2, int64_t a3, int a4)
{
  unint64_t v5 = v4;
  LODWORD(v100) = a4;
  sub_100008614(&qword_1000FCB78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1000AF6A0;
  uint64_t v7 = v4[2];
  unint64_t v8 = v4[4];
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = v8;
  if (!v7)
  {
    swift_bridgeObjectRetain();
    unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  unint64_t v9 = (unint64_t)sub_1000692C0(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v11 = *(void *)(v9 + 16);
  unint64_t v10 = *(void *)(v9 + 24);
  int64_t v12 = v11 + 1;
  if (v11 >= v10 >> 1) {
    goto LABEL_77;
  }
  while (1)
  {
    *(void *)(v9 + 16) = v12;
    *(void *)(v9 + 8 * v11 + 32) = v7;
LABEL_5:
    unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
    unint64_t v102 = v8;
    if (v8)
    {
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v9 = (unint64_t)sub_1000692C0(0, *(void *)(v9 + 16) + 1, 1, (void *)v9);
      }
      unint64_t v14 = *(void *)(v9 + 16);
      unint64_t v13 = *(void *)(v9 + 24);
      if (v14 >= v13 >> 1) {
        unint64_t v9 = (unint64_t)sub_1000692C0((void *)(v13 > 1), v14 + 1, 1, (void *)v9);
      }
      *(void *)(v9 + 16) = v14 + 1;
      *(void *)(v9 + 8 * v14 + 32) = v102;
    }
    swift_release();
    uint64_t v99 = v5[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100069744(v9);
    uint64_t v15 = swift_bridgeObjectRetain();
    sub_100069744(v15);
    sub_100008614(&qword_1000FCB80);
    swift_arrayDestroy();
    int64_t v12 = (int64_t)_swiftEmptyArrayStorage[2];
    if (!v12) {
      break;
    }
    char v98 = (void *)v7;
    uint64_t v16 = v5;
    sub_10007B6A8(0, v12, 0);
    unint64_t v11 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v17 = &_swiftEmptyArrayStorage[4];
    unint64_t v9 = (unint64_t)_swiftEmptyArrayStorage[2];
    do
    {
      int8x8_t v18 = *(int8x8_t *)(*(void *)v17 + 16);
      unint64_t v19 = (unint64_t)_swiftEmptyArrayStorage[3];
      unint64_t v8 = v9 + 1;
      if (v9 >= v19 >> 1) {
        sub_10007B6A8(v19 > 1, v9 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = (int8x8_t)v8;
      _swiftEmptyArrayStorage[v9 + 4] = v18;
      ++v17;
      ++v9;
      --v12;
    }
    while (v12);
LABEL_19:
    int8x8_t v20 = _swiftEmptyArrayStorage[4];
    unint64_t v21 = v8 - 1;
    if (v8 == 1)
    {
      unint64_t v5 = v16;
      uint64_t v7 = (uint64_t)v98;
      goto LABEL_30;
    }
    unint64_t v5 = v16;
    if (v21 >= 4)
    {
      unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v23 = vdupq_n_s64(*(void *)&v20);
      id v24 = (int64x2_t *)&_swiftEmptyArrayStorage[7];
      unint64_t v25 = v21 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v26 = v23;
      uint64_t v7 = (uint64_t)v98;
      do
      {
        int64x2_t v23 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v23, v24[-1]), (int8x16_t)v23, (int8x16_t)v24[-1]);
        int64x2_t v26 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v26, *v24), (int8x16_t)v26, *(int8x16_t *)v24);
        v24 += 2;
        v25 -= 4;
      }
      while (v25);
      int8x16_t v27 = vbslq_s8((int8x16_t)vcgtq_s64(v23, v26), (int8x16_t)v23, (int8x16_t)v26);
      uint64_t v28 = vextq_s8(v27, v27, 8uLL).u64[0];
      int8x8_t v20 = vbsl_s8((int8x8_t)vcgtd_s64(v27.i64[0], v28), *(int8x8_t *)v27.i8, (int8x8_t)v28);
      if (v21 == (v21 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v22 = 1;
      uint64_t v7 = (uint64_t)v98;
    }
    unint64_t v29 = v8 - v22;
    uint64_t v30 = &_swiftEmptyArrayStorage[v22 + 4];
    do
    {
      int8x8_t v32 = *v30++;
      int8x8_t v31 = v32;
      if (*(void *)&v20 <= *(void *)&v32) {
        int8x8_t v20 = v31;
      }
      --v29;
    }
    while (v29);
LABEL_30:
    swift_bridgeObjectRelease();
    if ((*(void *)&v20 & 0x8000000000000000) == 0) {
      goto LABEL_31;
    }
    __break(1u);
LABEL_77:
    unint64_t v9 = (unint64_t)sub_1000692C0((void *)(v10 > 1), v12, 1, (void *)v9);
  }
  unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage[2];
  if (v8)
  {
    char v98 = (void *)v7;
    uint64_t v16 = v5;
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  int8x8_t v20 = 0;
LABEL_31:
  uint64_t v33 = sub_100069E98(0, *(void *)&v20, (uint64_t)_swiftEmptyArrayStorage, a3, v100 & 1);
  swift_bridgeObjectRelease();
  uint64_t v34 = sub_100008614(&qword_1000FCB88);
  uint64_t v35 = swift_initStackObject();
  *(_OWORD *)(v35 + 16) = xmmword_1000B01B0;
  int64_t v37 = *v5;
  int64_t v36 = v5[1];
  *(void *)(v35 + 32) = *v5;
  *(void *)(v35 + 40) = v36;
  if (v36)
  {
    swift_bridgeObjectRetain_n();
    id v38 = sub_1000690A0(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v40 = v38[2];
    unint64_t v39 = v38[3];
    uint64_t v41 = v38;
    if (v40 >= v39 >> 1) {
      uint64_t v41 = sub_1000690A0((void *)(v39 > 1), v40 + 1, 1, v38);
    }
    v41[2] = v40 + 1;
    unint64_t v42 = &v41[2 * v40];
    v42[4] = v37;
    v42[5] = v36;
  }
  swift_release();
  uint64_t v43 = swift_initStackObject();
  uint64_t v44 = v43;
  *(_OWORD *)(v43 + 16) = xmmword_1000B01B0;
  unint64_t v45 = v102;
  if (!v7)
  {
    *(void *)(v43 + 32) = 0;
    *(void *)(v43 + 40) = 0;
    uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_56;
  }
  uint64_t v100 = v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = sub_1000685E4(v7, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v46 = sub_100067610(v34);
  unint64_t v47 = v46[2];
  if (v47)
  {
    int64_t v48 = v46[4];
    unint64_t v49 = v47 - 1;
    if (v47 != 1)
    {
      if (v47 >= 5)
      {
        unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFFCLL | 1;
        int64x2_t v53 = vdupq_n_s64(v48);
        long long v54 = (int64x2_t *)(v46 + 7);
        unint64_t v55 = v49 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v56 = v53;
        do
        {
          int64x2_t v53 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v53, v54[-1]), (int8x16_t)v53, (int8x16_t)v54[-1]);
          int64x2_t v56 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v56, *v54), (int8x16_t)v56, *(int8x16_t *)v54);
          v54 += 2;
          v55 -= 4;
        }
        while (v55);
        int8x16_t v57 = vbslq_s8((int8x16_t)vcgtq_s64(v53, v56), (int8x16_t)v53, (int8x16_t)v56);
        uint64_t v58 = vextq_s8(v57, v57, 8uLL).u64[0];
        int64_t v48 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v57.i64[0], v58), *(int8x8_t *)v57.i8, (int8x8_t)v58);
        if (v49 != (v49 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_46;
        }
      }
      else
      {
        unint64_t v50 = 1;
LABEL_46:
        unint64_t v59 = v47 - v50;
        char v60 = &v46[v50 + 4];
        do
        {
          int64_t v62 = *v60++;
          int64_t v61 = v62;
          if (v48 <= v62) {
            int64_t v48 = v61;
          }
          --v59;
        }
        while (v59);
      }
    }
    uint64_t v51 = swift_bridgeObjectRelease();
    if (v48 < 0)
    {
      __break(1u);
      goto LABEL_79;
    }
  }
  else
  {
    uint64_t v51 = swift_bridgeObjectRelease();
  }
  __chkstk_darwin(v51, v52);
  sub_100008614(&qword_1000F8198);
  sub_10006A2DC();
  Sequence.flatMap<A>(_:)();
  swift_bridgeObjectRelease();
  sub_100008614(&qword_1000F8290);
  sub_10005DE24();
  int64_t v48 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v34 = v64;
  swift_bridgeObjectRelease();
  *(void *)(v44 + 32) = v48;
  *(void *)(v44 + 40) = v34;
  if (!v34)
  {
    uint64_t v7 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_55;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = (uint64_t)sub_1000690A0(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v45 = *(void *)(v7 + 16);
  unint64_t v63 = *(void *)(v7 + 24);
  int64_t v37 = v45 + 1;
  if (v45 >= v63 >> 1) {
    goto LABEL_80;
  }
  while (2)
  {
    *(void *)(v7 + 16) = v37;
    long long v65 = (void *)(v7 + 16 * v45);
    v65[4] = v48;
    v65[5] = v34;
LABEL_55:
    unint64_t v45 = v102;
    uint64_t v34 = v100;
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100069FF0(v99, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v66 = swift_initStackObject();
    int64_t v37 = v66;
    *(_OWORD *)(v66 + 16) = xmmword_1000B01B0;
    if (!v45)
    {
      id v72 = (void *)(v66 + 32);
      swift_bridgeObjectRelease();
      *id v72 = 0;
      *(void *)(v37 + 40) = 0;
      goto LABEL_75;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v67 = sub_1000685E4(v45, v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v68 = sub_100067610(v67);
    unint64_t v69 = v68[2];
    if (v69)
    {
      int64_t v48 = v68[4];
      unint64_t v70 = v69 - 1;
      if (v69 != 1)
      {
        if (v69 >= 5)
        {
          unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFFCLL | 1;
          int64x2_t v75 = vdupq_n_s64(v48);
          char v76 = (int64x2_t *)(v68 + 7);
          unint64_t v77 = v70 & 0xFFFFFFFFFFFFFFFCLL;
          int64x2_t v78 = v75;
          do
          {
            int64x2_t v75 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v75, v76[-1]), (int8x16_t)v75, (int8x16_t)v76[-1]);
            int64x2_t v78 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v78, *v76), (int8x16_t)v78, *(int8x16_t *)v76);
            v76 += 2;
            v77 -= 4;
          }
          while (v77);
          int8x16_t v79 = vbslq_s8((int8x16_t)vcgtq_s64(v75, v78), (int8x16_t)v75, (int8x16_t)v78);
          uint64_t v80 = vextq_s8(v79, v79, 8uLL).u64[0];
          int64_t v48 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v79.i64[0], v80), *(int8x8_t *)v79.i8, (int8x8_t)v80);
          if (v70 != (v70 & 0xFFFFFFFFFFFFFFFCLL)) {
            goto LABEL_66;
          }
        }
        else
        {
          unint64_t v71 = 1;
LABEL_66:
          unint64_t v81 = v69 - v71;
          char v82 = &v68[v71 + 4];
          do
          {
            int64_t v84 = *v82++;
            int64_t v83 = v84;
            if (v48 <= v84) {
              int64_t v48 = v83;
            }
            --v81;
          }
          while (v81);
        }
      }
      uint64_t v73 = swift_bridgeObjectRelease();
      if ((v48 & 0x8000000000000000) == 0) {
        goto LABEL_71;
      }
LABEL_79:
      __break(1u);
LABEL_80:
      uint64_t v7 = (uint64_t)sub_1000690A0((void *)(v63 > 1), v37, 1, (void *)v7);
      continue;
    }
    break;
  }
  uint64_t v73 = swift_bridgeObjectRelease();
LABEL_71:
  __chkstk_darwin(v73, v74);
  sub_100008614(&qword_1000F8198);
  sub_10006A2DC();
  Sequence.flatMap<A>(_:)();
  swift_bridgeObjectRelease();
  sub_100008614(&qword_1000F8290);
  sub_10005DE24();
  uint64_t v85 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v87 = v86;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v37 + 32) = v85;
  *(void *)(v37 + 40) = v87;
  if (v87)
  {
    swift_bridgeObjectRetain();
    uint64_t v88 = sub_1000690A0(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v90 = v88[2];
    unint64_t v89 = v88[3];
    if (v90 >= v89 >> 1) {
      uint64_t v88 = sub_1000690A0((void *)(v89 > 1), v90 + 1, 1, v88);
    }
    v88[2] = v90 + 1;
    long long v91 = &v88[2 * v90];
    v91[4] = v85;
    v91[5] = v87;
  }
LABEL_75:
  swift_bridgeObjectRelease();
  uint64_t v92 = swift_bridgeObjectRetain();
  sub_1000695F0(v92);
  uint64_t v93 = swift_bridgeObjectRetain();
  sub_1000695F0(v93);
  uint64_t v94 = swift_bridgeObjectRetain();
  sub_1000695F0(v94);
  uint64_t v95 = swift_bridgeObjectRetain();
  sub_1000695F0(v95);
  sub_100008614(&qword_1000F8290);
  swift_arrayDestroy();
  sub_10005DE24();
  uint64_t v96 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v96;
}

uint64_t sub_1000682B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int64_t a3@<X2>, char a4@<W3>, int64_t *a5@<X8>)
{
  char v5 = a4;
  int64_t v6 = a3;
  uint64_t v7 = a5;
  int64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    int64_t v38 = a3;
    unint64_t v39 = a5;
    char v40 = a4;
    uint64_t v10 = *a1;
    sub_10007B688(0, v8, 0);
    uint64_t v11 = a2 + 32;
    do
    {
      uint64_t v12 = 0;
      unint64_t v13 = 0xE000000000000000;
      if ((v10 & 0x8000000000000000) == 0 && v10 < *(void *)(*(void *)v11 + 16))
      {
        uint64_t v14 = *(void *)v11 + 16 * v10;
        uint64_t v12 = *(void *)(v14 + 32);
        unint64_t v13 = *(void *)(v14 + 40);
        swift_bridgeObjectRetain();
      }
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      unint64_t v17 = v16 + 1;
      if (v16 >= v15 >> 1) {
        sub_10007B688(v15 > 1, v16 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v17;
      int8x8_t v18 = &_swiftEmptyArrayStorage[2 * v16];
      v18[4] = v12;
      v18[5] = v13;
      v11 += 8;
      --v8;
    }
    while (v8);
  }
  else
  {
    unint64_t v17 = _swiftEmptyArrayStorage[2];
    if (!v17)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    int64_t v38 = a3;
    unint64_t v39 = a5;
    char v40 = a4;
  }
  swift_bridgeObjectRetain();
  sub_1000264AC();
  unint64_t v19 = &_swiftEmptyArrayStorage[5];
  do
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
    swift_bridgeObjectRelease();
    sub_100069898(v20);
    v19 += 2;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease_n();
  char v5 = v40;
  int64_t v6 = v38;
  uint64_t v7 = v39;
LABEL_15:
  unint64_t v21 = sub_100067724((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  unint64_t v22 = v21[2];
  if (v22)
  {
    int64_t v23 = v21[4];
    unint64_t v24 = v22 - 1;
    if (v22 != 1)
    {
      if (v22 >= 5)
      {
        unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFFCLL | 1;
        int64x2_t v26 = vdupq_n_s64(v23);
        int8x16_t v27 = (int64x2_t *)(v21 + 7);
        unint64_t v28 = v24 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v29 = v26;
        do
        {
          int64x2_t v26 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v26, v27[-1]), (int8x16_t)v26, (int8x16_t)v27[-1]);
          int64x2_t v29 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v29, *v27), (int8x16_t)v29, *(int8x16_t *)v27);
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        int8x16_t v30 = vbslq_s8((int8x16_t)vcgtq_s64(v26, v29), (int8x16_t)v26, (int8x16_t)v29);
        uint64_t v31 = vextq_s8(v30, v30, 8uLL).u64[0];
        int64_t v23 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v30.i64[0], v31), *(int8x8_t *)v30.i8, (int8x8_t)v31);
        if (v24 == (v24 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v25 = 1;
      }
      unint64_t v32 = v22 - v25;
      uint64_t v33 = &v21[v25 + 4];
      do
      {
        int64_t v35 = *v33++;
        int64_t v34 = v35;
        if (v23 <= v35) {
          int64_t v23 = v34;
        }
        --v32;
      }
      while (v32);
    }
  }
  else
  {
    int64_t v23 = 0;
  }
LABEL_27:
  uint64_t result = swift_bridgeObjectRelease();
  if (v23 >= v6) {
    int64_t v37 = v6;
  }
  else {
    int64_t v37 = v23;
  }
  if (v5) {
    int64_t v37 = v23;
  }
  *uint64_t v7 = v37;
  return result;
}

uint64_t sub_100068578@<X0>(uint64_t *a1@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v2 = Substring.distance(from:to:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1000685E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *(void *)(a1 + 16);
  char v5 = *(void **)(a2 + 16);
  if ((unint64_t)v5 >= v4) {
    int64_t v6 = *(void *)(a1 + 16);
  }
  else {
    int64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v80 = _swiftEmptyArrayStorage;
  sub_10007B6C8(0, v6, 0);
  uint64_t v7 = _swiftEmptyArrayStorage;
  unint64_t v69 = v4;
  uint64_t v70 = v3;
  uint64_t v64 = a2;
  long long v68 = v5;
  int64_t v71 = v6;
  if (!v6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v33 = 0;
LABEL_25:
    if (v4 <= (unint64_t)v5)
    {
LABEL_48:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v7;
    }
    uint64_t result = v64;
    uint64_t v65 = v64 + 32;
    uint64_t v66 = v3 + 32;
    if (v33 <= (uint64_t)v5) {
      int64_t v34 = v5;
    }
    else {
      int64_t v34 = (void *)v33;
    }
    uint64_t v67 = v34;
    while (1)
    {
      if (v33 == v4) {
        goto LABEL_52;
      }
      if ((void *)v33 == v5) {
        goto LABEL_48;
      }
      if ((void *)v33 == v67) {
        goto LABEL_53;
      }
      uint64_t v74 = v7;
      int64_t v35 = (void *)(v66 + 16 * v33);
      int64_t v36 = (void *)*v35;
      int64_t v37 = (void *)v35[1];
      int64_t v71 = v33;
      uint64_t v38 = *(void *)(v65 + 8 * v33);
      int64x2_t v75 = v36;
      char v76 = v37;
      sub_1000264AC();
      uint64_t v73 = v37;
      swift_bridgeObjectRetain();
      uint64_t result = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      int8x16_t v79 = _swiftEmptyArrayStorage;
      uint64_t v39 = *(void *)(result + 16);
      if (v39)
      {
        if (!v38) {
          goto LABEL_54;
        }
        char v40 = (uint64_t *)(result + 56);
        do
        {
          uint64_t v41 = (void *)*(v40 - 2);
          uint64_t v42 = *(v40 - 1);
          uint64_t v43 = *v40;
          int64x2_t v75 = (void *)*(v40 - 3);
          char v76 = v41;
          uint64_t v77 = v42;
          uint64_t v78 = v43;
          swift_bridgeObjectRetain();
          uint64_t v44 = Substring.distance(from:to:)();
          __chkstk_darwin(v44, v45);
          int64_t v62 = &v75;
          uint64_t v63 = v38;
          unint64_t v47 = sub_100068C58((void *(*)(long long *__return_ptr, int64_t *))sub_10006A654, (uint64_t)v61, 0, v46, v38);
          swift_bridgeObjectRelease();
          sub_100069898((uint64_t)v47);
          v40 += 4;
          --v39;
        }
        while (v39);
        swift_bridgeObjectRelease();
        int64_t v48 = v79;
        int64_t v49 = v79[2];
        if (v49)
        {
LABEL_38:
          int64x2_t v75 = _swiftEmptyArrayStorage;
          sub_10007B688(0, v49, 0);
          unint64_t v50 = v75;
          id v72 = v48;
          uint64_t v51 = v48 + 7;
          do
          {
            swift_bridgeObjectRetain();
            uint64_t v52 = static String._fromSubstring(_:)();
            uint64_t v54 = v53;
            swift_bridgeObjectRelease();
            int64x2_t v75 = v50;
            unint64_t v56 = v50[2];
            unint64_t v55 = v50[3];
            if (v56 >= v55 >> 1)
            {
              sub_10007B688(v55 > 1, v56 + 1, 1);
              unint64_t v50 = v75;
            }
            v50[2] = v56 + 1;
            int8x16_t v57 = &v50[2 * v56];
            _DWORD v57[4] = v52;
            void v57[5] = v54;
            v51 += 4;
            --v49;
          }
          while (v49);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_45;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        int64_t v48 = _swiftEmptyArrayStorage;
        int64_t v49 = _swiftEmptyArrayStorage[2];
        if (v49) {
          goto LABEL_38;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v50 = _swiftEmptyArrayStorage;
LABEL_45:
      uint64_t v7 = v74;
      uint64_t v80 = v74;
      unint64_t v59 = v74[2];
      unint64_t v58 = v74[3];
      int64_t v60 = v71;
      if (v59 >= v58 >> 1)
      {
        sub_10007B6C8(v58 > 1, v59 + 1, 1);
        int64_t v60 = v71;
        uint64_t v7 = v80;
      }
      int64_t v33 = v60 + 1;
      v7[2] = v59 + 1;
      v7[v59 + 4] = v50;
      char v5 = v68;
      unint64_t v4 = v69;
      uint64_t result = v64;
      if (v33 == v69) {
        goto LABEL_48;
      }
    }
  }
  uint64_t v65 = a2 + 32;
  uint64_t v66 = v3 + 32;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  while (v9 != v4)
  {
    if ((void *)v9 == v5) {
      goto LABEL_50;
    }
    uint64_t v73 = (void *)v9;
    uint64_t v74 = v7;
    uint64_t v10 = *(void **)(v66 + 16 * v9 + 8);
    uint64_t v11 = *(void *)(v65 + 8 * v9);
    int64x2_t v75 = *(void **)(v66 + 16 * v9);
    char v76 = v10;
    sub_1000264AC();
    id v72 = v10;
    swift_bridgeObjectRetain();
    uint64_t result = StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
    int8x16_t v79 = _swiftEmptyArrayStorage;
    uint64_t v12 = *(void *)(result + 16);
    if (v12)
    {
      if (!v11) {
        goto LABEL_51;
      }
      unint64_t v13 = (uint64_t *)(result + 56);
      do
      {
        uint64_t v14 = (void *)*(v13 - 2);
        uint64_t v15 = *(v13 - 1);
        uint64_t v16 = *v13;
        int64x2_t v75 = (void *)*(v13 - 3);
        char v76 = v14;
        uint64_t v77 = v15;
        uint64_t v78 = v16;
        swift_bridgeObjectRetain();
        uint64_t v17 = Substring.distance(from:to:)();
        __chkstk_darwin(v17, v18);
        int64_t v62 = &v75;
        uint64_t v63 = v11;
        uint64_t v20 = sub_100068C58((void *(*)(long long *__return_ptr, int64_t *))sub_10006A5A0, (uint64_t)v61, 0, v19, v11);
        swift_bridgeObjectRelease();
        sub_100069898((uint64_t)v20);
        v13 += 4;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      unint64_t v21 = v79;
      uint64_t v3 = v70;
      int64_t v22 = v79[2];
      if (v22)
      {
LABEL_13:
        int64x2_t v75 = _swiftEmptyArrayStorage;
        sub_10007B688(0, v22, 0);
        int64_t v23 = v75;
        uint64_t v67 = v21;
        unint64_t v24 = v21 + 7;
        do
        {
          swift_bridgeObjectRetain();
          uint64_t v25 = static String._fromSubstring(_:)();
          uint64_t v27 = v26;
          swift_bridgeObjectRelease();
          int64x2_t v75 = v23;
          unint64_t v29 = v23[2];
          unint64_t v28 = v23[3];
          if (v29 >= v28 >> 1)
          {
            sub_10007B688(v28 > 1, v29 + 1, 1);
            int64_t v23 = v75;
          }
          v23[2] = v29 + 1;
          int8x16_t v30 = &v23[2 * v29];
          v30[4] = v25;
          v30[5] = v27;
          v24 += 4;
          --v22;
        }
        while (v22);
        swift_bridgeObjectRelease();
        uint64_t v3 = v70;
        goto LABEL_20;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v21 = _swiftEmptyArrayStorage;
      int64_t v22 = _swiftEmptyArrayStorage[2];
      if (v22) {
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    int64_t v23 = _swiftEmptyArrayStorage;
LABEL_20:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v7 = v74;
    uint64_t v80 = v74;
    unint64_t v32 = v74[2];
    unint64_t v31 = v74[3];
    if (v32 >= v31 >> 1)
    {
      uint64_t result = sub_10007B6C8(v31 > 1, v32 + 1, 1);
      uint64_t v7 = v80;
    }
    uint64_t v9 = (uint64_t)v73 + 1;
    v7[2] = v32 + 1;
    v7[v32 + 4] = v23;
    int64_t v33 = v71;
    char v5 = v68;
    unint64_t v4 = v69;
    if (v9 == v71) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

void *sub_100068C58(void *(*a1)(long long *__return_ptr, int64_t *), uint64_t a2, int64_t a3, int64_t a4, uint64_t a5)
{
  int64_t v7 = a4;
  int64_t v8 = a3;
  int64_t v9 = 0;
  int64_t v10 = a3;
  while (1)
  {
    BOOL v11 = v10 <= a4;
    if (a5 > 0) {
      BOOL v11 = v10 >= a4;
    }
    if (v11) {
      break;
    }
    BOOL v12 = __OFADD__(v10, a5);
    v10 += a5;
    if (v12) {
      int64_t v10 = (v10 >> 63) ^ 0x8000000000000000;
    }
    BOOL v12 = __OFADD__(v9++, 1);
    if (v12)
    {
      __break(1u);
      break;
    }
  }
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t result = (void *)sub_10007B7F0(0, v9, 0);
  uint64_t v14 = _swiftEmptyArrayStorage;
  int64_t v34 = v7;
  if (v9)
  {
    while (1)
    {
      BOOL v15 = v8 <= v7;
      if (a5 > 0) {
        BOOL v15 = v8 >= v7;
      }
      if (v15) {
        break;
      }
      if (__OFADD__(v8, a5)) {
        int64_t v16 = ((v8 + a5) >> 63) ^ 0x8000000000000000;
      }
      else {
        int64_t v16 = v8 + a5;
      }
      int64_t v36 = v8;
      char v37 = 0;
      uint64_t result = a1(&v38, &v36);
      if (v5) {
        goto LABEL_36;
      }
      long long v17 = v38;
      uint64_t v19 = v39;
      uint64_t v18 = v40;
      uint64_t v41 = v14;
      unint64_t v21 = v14[2];
      unint64_t v20 = v14[3];
      if (v21 >= v20 >> 1)
      {
        long long v32 = v38;
        uint64_t result = (void *)sub_10007B7F0(v20 > 1, v21 + 1, 1);
        long long v17 = v32;
        uint64_t v14 = v41;
      }
      void v14[2] = v21 + 1;
      int64_t v22 = &v14[4 * v21];
      *((_OWORD *)v22 + 2) = v17;
      v22[6] = v19;
      v22[7] = v18;
      int64_t v8 = v16;
      --v9;
      int64_t v7 = v34;
      if (!v9) {
        goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
    int64_t v16 = v8;
LABEL_23:
    BOOL v23 = v16 <= v7;
    if (a5 > 0) {
      BOOL v23 = v16 >= v7;
    }
    if (!v23)
    {
      while (1)
      {
        int64_t v24 = __OFADD__(v16, a5) ? ((v16 + a5) >> 63) ^ 0x8000000000000000 : v16 + a5;
        int64_t v36 = v16;
        a1(&v38, &v36);
        if (v5) {
          break;
        }
        long long v25 = v38;
        uint64_t v26 = v39;
        uint64_t v27 = v40;
        uint64_t v41 = v14;
        unint64_t v29 = v14[2];
        unint64_t v28 = v14[3];
        if (v29 >= v28 >> 1)
        {
          long long v33 = v38;
          sub_10007B7F0(v28 > 1, v29 + 1, 1);
          long long v25 = v33;
          int64_t v7 = v34;
          uint64_t v14 = v41;
        }
        void v14[2] = v29 + 1;
        int8x16_t v30 = &v14[4 * v29];
        *((_OWORD *)v30 + 2) = v25;
        v30[6] = v26;
        v30[7] = v27;
        BOOL v31 = v24 <= v7;
        if (a5 > 0) {
          BOOL v31 = v24 >= v7;
        }
        int64_t v16 = v24;
        if (v31) {
          return v14;
        }
      }
LABEL_36:
      swift_release();
    }
    return v14;
  }
  return result;
}

uint64_t sub_100068EBC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  swift_bridgeObjectRetain();
  sub_10006A474(a1, (uint64_t (*)(uint64_t, uint64_t))sub_10006A35C);
  swift_bridgeObjectRelease();
  sub_100008614(&qword_1000F8290);
  sub_10005DE24();
  uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v6 = v5;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v6;
  return result;
}

unint64_t sub_100068F98(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = result;
  if (*(void *)(a3 + 16) <= result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)(a3 + 8 * result + 32);
  if ((a4 & 0x8000000000000000) == 0 && *(void *)(a2 + 16) > a4)
  {
    uint64_t v7 = *(void *)(a2 + 16 * a4 + 32);
    swift_bridgeObjectRetain();
  }
  if (*(void *)(a5 + 16) - 1 <= v5) {
    return v7;
  }
  uint64_t result = String.count.getter();
  Swift::Int v9 = v8 - result;
  if (!__OFSUB__(v8, result))
  {
    if (v9 >= 1)
    {
      v10._uint64_t countAndFlagsBits = 32;
      v10._object = (void *)0xE100000000000000;
      Swift::String v11 = String.init(repeating:count:)(v10, v9);
      swift_bridgeObjectRetain();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return v7;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_100069098@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_1000690A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100008614(&qword_1000FBD28);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100069AB0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

int8x8_t *sub_1000691B0(int8x8_t *result, int64_t a2, char a3, int8x8_t *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  int8x8_t v6 = a4[3];
  uint64_t v7 = *(void *)&v6 >> 1;
  if (*(void *)&v6 >> 1 >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = *(void *)&v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(*(void *)&v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = (uint64_t)a4[2];
    if (v7 <= v8) {
      uint64_t v9 = (uint64_t)a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100008614(&qword_1000FCBB0);
      Swift::String v10 = (int8x8_t *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = (int8x8_t)v8;
      void v10[3] = (int8x8_t)(2 * (v12 >> 5));
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, &a4[4], 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100069BA4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000692C0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100008614(&qword_1000FCB98);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 3);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100069CB0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1000693D0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100008614(&qword_1000FCBC0);
      Swift::String v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      unint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10006A368(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000694E0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100008614(&qword_1000FCBA0);
      Swift::String v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      void v10[3] = 2 * (v12 >> 5);
      unint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      Swift::String v10 = _swiftEmptyArrayStorage;
      unint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100069DA4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000695F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000690A0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    _OWORD v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100069744(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000692C0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    _OWORD v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100069898(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000694E0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    _OWORD v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000699EC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  unint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = Substring.index(_:offsetBy:)();
  uint64_t result = Substring.index(_:offsetBy:limitedBy:)();
  if (v6) {
    unint64_t v7 = v3;
  }
  else {
    unint64_t v7 = result;
  }
  if (v7 >> 14 < v4 >> 14)
  {
    __break(1u);
  }
  else
  {
    uint64_t result = Substring.subscript.getter();
    *a2 = result;
    a2[1] = v8;
    a2[2] = v9;
    a2[3] = v10;
  }
  return result;
}

uint64_t sub_100069AB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100069BA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_100008614(&qword_1000FCBB8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100069CB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100069DA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100069E98(uint64_t result, uint64_t a2, uint64_t a3, int64_t a4, char a5)
{
  uint64_t v6 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v7 = v5;
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (!v6) {
    return (uint64_t)v8;
  }
  uint64_t v11 = result;
  int64_t v22 = _swiftEmptyArrayStorage;
  uint64_t result = sub_10007B6A8(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    char v17 = a5 & 1;
    uint64_t v8 = v22;
    if (a2 <= v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = a2;
    }
    uint64_t v13 = v11;
    while (a2 != v13)
    {
      uint64_t v20 = v13;
      uint64_t result = sub_1000682B8(&v20, a3, a4, v17, &v21);
      if (v7)
      {
        swift_release();
        return (uint64_t)v8;
      }
      uint64_t v7 = 0;
      int64_t v14 = v21;
      int64_t v22 = v8;
      unint64_t v16 = v8[2];
      unint64_t v15 = v8[3];
      if (v16 >= v15 >> 1)
      {
        uint64_t result = sub_10007B6A8(v15 > 1, v16 + 1, 1);
        uint64_t v8 = v22;
      }
      void v8[2] = v16 + 1;
      v8[v16 + 4] = v14;
      if (a2 < v11) {
        goto LABEL_19;
      }
      if (v12 == v13) {
        goto LABEL_20;
      }
      if (a2 == ++v13) {
        return (uint64_t)v8;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
  return result;
}

void *sub_100069FF0(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10007B688(0, v2, 0);
  uint64_t v4 = 0;
  int64_t v30 = v2;
  uint64_t v31 = a1 + 32;
  while (1)
  {
    uint64_t v5 = *(void *)(v31 + 8 * v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1000685E4(v5, a2);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_100067610(v6);
    unint64_t v8 = v7[2];
    if (v8) {
      break;
    }
    uint64_t result = (void *)swift_bridgeObjectRelease();
LABEL_16:
    __chkstk_darwin(result, v13);
    sub_100008614(&qword_1000F8198);
    sub_10006A2DC();
    Sequence.flatMap<A>(_:)();
    swift_bridgeObjectRelease();
    sub_100008614(&qword_1000F8290);
    sub_10005DE24();
    uint64_t v24 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v28 = _swiftEmptyArrayStorage[2];
    unint64_t v27 = _swiftEmptyArrayStorage[3];
    if (v28 >= v27 >> 1) {
      sub_10007B688(v27 > 1, v28 + 1, 1);
    }
    ++v4;
    _swiftEmptyArrayStorage[2] = v28 + 1;
    unint64_t v29 = &_swiftEmptyArrayStorage[2 * v28];
    v29[4] = v24;
    v29[5] = v26;
    if (v4 == v30) {
      return _swiftEmptyArrayStorage;
    }
  }
  int64_t v9 = v7[4];
  unint64_t v10 = v8 - 1;
  if (v8 != 1)
  {
    if (v8 >= 5)
    {
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v14 = vdupq_n_s64(v9);
      unint64_t v15 = (int64x2_t *)(v7 + 7);
      unint64_t v16 = v10 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v17 = v14;
      do
      {
        int64x2_t v14 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v14, v15[-1]), (int8x16_t)v14, (int8x16_t)v15[-1]);
        int64x2_t v17 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v17, *v15), (int8x16_t)v17, *(int8x16_t *)v15);
        v15 += 2;
        v16 -= 4;
      }
      while (v16);
      int8x16_t v18 = vbslq_s8((int8x16_t)vcgtq_s64(v14, v17), (int8x16_t)v14, (int8x16_t)v17);
      uint64_t v19 = vextq_s8(v18, v18, 8uLL).u64[0];
      int64_t v9 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v18.i64[0], v19), *(int8x8_t *)v18.i8, (int8x8_t)v19);
      if (v10 == (v10 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v11 = 1;
    }
    unint64_t v20 = v8 - v11;
    int64_t v21 = &v7[v11 + 4];
    do
    {
      int64_t v23 = *v21++;
      int64_t v22 = v23;
      if (v9 <= v23) {
        int64_t v9 = v22;
      }
      --v20;
    }
    while (v20);
  }
LABEL_15:
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if ((v9 & 0x8000000000000000) == 0) {
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006A2BC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100068EBC(*(void *)(v1 + 16), a1);
}

unint64_t sub_10006A2DC()
{
  unint64_t result = qword_1000FCB90;
  if (!qword_1000FCB90)
  {
    sub_100009F40(&qword_1000F8198);
    sub_100029884();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FCB90);
  }
  return result;
}

unint64_t sub_10006A35C(unint64_t a1, uint64_t a2)
{
  return sub_100068F98(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_10006A368(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_100008614(&qword_1000FCBC8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10006A474(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  sub_10007B688(0, 0, 0);
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1 + 32;
    do
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4);
      swift_bridgeObjectRetain();
      uint64_t v7 = a2(v4, v6);
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        sub_10007B688(v10 > 1, v11 + 1, 1);
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v11 + 1;
      uint64_t v12 = &_swiftEmptyArrayStorage[2 * v11];
      void v12[4] = v7;
      v12[5] = v9;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10006A590@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)result + 16);
  return result;
}

uint64_t sub_10006A5A0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000699EC(*(void *)(v1 + 16), a1);
}

unint64_t sub_10006A5C4()
{
  unint64_t result = qword_1000FCBA8;
  if (!qword_1000FCBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FCBA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for TableFormatter()
{
  return &type metadata for TableFormatter;
}

ValueMetadata *type metadata accessor for TableFormatter.Row()
{
  return &type metadata for TableFormatter.Row;
}

uint64_t sub_10006A63C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10006A2BC(a1);
}

uint64_t sub_10006A654@<X0>(uint64_t *a1@<X8>)
{
  return sub_10006A5A0(a1);
}

id sub_10006A66C()
{
  return sub_10006A70C((void (*)(void))type metadata accessor for ActivityDisplayContext.CallDisplayContext, &qword_1000F9720);
}

id sub_10006A68C()
{
  return sub_10006A70C((void (*)(void))type metadata accessor for ActivityDisplayContext.TimerDisplayContext, &qword_1000F9718);
}

id sub_10006A6AC()
{
  return sub_10006A70C((void (*)(void))type metadata accessor for ActivityDisplayContext, &qword_1000F9728);
}

id sub_10006A6CC()
{
  return sub_10006A70C((void (*)(void))type metadata accessor for CAImage, &qword_1000F9750);
}

id sub_10006A6EC()
{
  return sub_10006A70C((void (*)(void))type metadata accessor for MovieView, &qword_1000F6AD8);
}

id sub_10006A70C(void (*a1)(void), uint64_t *a2)
{
  a1(0);
  sub_100008614(a2);
  uint64_t v3 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v3, v4);
  if ((v5 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v6 = objc_allocWithZone((Class)CULogHandle);
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithSubsystem:v7 category:v8];

  return v9;
}

id sub_10006A850()
{
  type metadata accessor for XPCConnectionManager();
  sub_100008614(&qword_1000FCE70);
  uint64_t v0 = String.init<A>(describing:)();
  unint64_t v2 = v1;
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v3 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    uint64_t v0 = static String._fromSubstring(_:)();
    unint64_t v2 = v4;
    swift_bridgeObjectRelease();
  }
  swift_retain();
  UUID.uuidString.getter();
  swift_release();
  sub_10003C664(8);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  sub_100034804();
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v0;
  unint64_t v16 = v2;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 45;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v10 = objc_allocWithZone((Class)CULogHandle);
  NSString v11 = String._bridgeToObjectiveC()();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v10 initWithSubsystem:v11 category:v12];

  return v13;
}

void sub_10006AA58(char a1)
{
  unint64_t v2 = v1;
  char v28 = a1;
  CurrentValueSubject.send(_:)();
  if (*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8))
  {
    char v4 = a1 & 1;
    LOBYTE(v26) = a1 & 1;
    swift_bridgeObjectRetain();
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    self;
    uint64_t v5 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    uint64_t v6 = *v1;
    if (v5)
    {
      uint64_t v7 = *(void **)((char *)v1 + *(void *)(v6 + 112));
      if (v7)
      {
        id v8 = v7;
        NSString v9 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v8 removeObjectForKey:v9];

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    if ((*((unsigned char *)v1 + *(void *)(v6 + 120)) & 1) == 0)
    {
      id v10 = *(void **)((char *)v1 + *(void *)(v6 + 112));
      if (v10)
      {
        LOBYTE(v26) = v4;
        id v11 = v10;
        uint64_t v12 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        NSString v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v11 setValue:v12 forKey:v13];

        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_8;
    }
    char v25 = v4;
    sub_100008614(&qword_1000F7718);
    if (swift_dynamicCast())
    {
      sub_10006EE90(v24, &v26);
      sub_10000AEFC(&v26, v27);
      uint64_t v14 = sub_1000A5D78();
      uint64_t v18 = v14;
      unint64_t v19 = v15;
      unint64_t v20 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
      if (v20)
      {
        id v21 = v20;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v21 setValue:isa forKey:v23];
        sub_10000D6B8(v18, v19);
      }
      else
      {
        sub_10000D6B8(v14, v15);
        swift_bridgeObjectRelease();
      }
      sub_10000AF94((uint64_t)&v26);
    }
    else
    {
      memset(v24, 0, sizeof(v24));
      swift_bridgeObjectRelease();
      sub_10006E5D4((uint64_t)v24);
      id v16 = sub_10006F144(&qword_1000FCE50, &qword_1000FCE58);
      NSString v17 = String._bridgeToObjectiveC()();
      [v16 ulog:60 message:v17];
    }
  }
}

uint64_t sub_10006AE08(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for NearbySharingInteractionDisplayContext();
  uint64_t v6 = __chkstk_darwin(v4, v5);
  id v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6, v9);
  id v11 = &v29[-v10];
  CurrentValueSubject.send(_:)();
  if (!*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8)) {
    return sub_10006F27C(a1, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
  }
  sub_10006F2DC(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
  swift_bridgeObjectRetain();
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  uint64_t v13 = *v1;
  if (v12)
  {
    uint64_t v14 = *(void **)((char *)v1 + *(void *)(v13 + 112));
    if (v14)
    {
      id v15 = v14;
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v15 removeObjectForKey:v16];
LABEL_5:

      return sub_10006F27C(a1, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
    }
    goto LABEL_10;
  }
  if ((*((unsigned char *)v1 + *(void *)(v13 + 120)) & 1) == 0)
  {
    uint64_t v18 = *(void **)((char *)v1 + *(void *)(v13 + 112));
    if (v18)
    {
      sub_10006F2DC(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
      id v19 = v18;
      uint64_t v20 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 setValue:v20 forKey:v21];

      swift_unknownObjectRelease();
      return sub_10006F27C(a1, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
    }
LABEL_10:
    sub_10006F27C(a1, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
    return swift_bridgeObjectRelease();
  }
  sub_10006F2DC(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
  sub_100008614(&qword_1000F7718);
  if (!swift_dynamicCast())
  {
    memset(v30, 0, sizeof(v30));
    swift_bridgeObjectRelease();
    sub_10006E5D4((uint64_t)v30);
    id v15 = sub_10006F144(&qword_1000FC7B8, &qword_1000FCF08);
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 ulog:60 message:v16];
    goto LABEL_5;
  }
  sub_10006EE90(v30, &v31);
  sub_10000AEFC(&v31, v32);
  uint64_t v22 = sub_1000A5D78();
  unint64_t v24 = v23;
  char v25 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
  if (v25)
  {
    id v26 = v25;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v26 setValue:isa forKey:v28];
    sub_10000D6B8(v22, v24);

    sub_10006F27C(a1, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
  }
  else
  {
    sub_10006F27C(a1, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
    sub_10000D6B8(v22, v24);
    swift_bridgeObjectRelease();
  }
  return sub_10000AF94((uint64_t)&v31);
}

uint64_t sub_10006B2DC(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  id v8 = &v29[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6, v9);
  id v11 = &v29[-v10];
  CurrentValueSubject.send(_:)();
  if (!*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8)) {
    return sub_10006F27C(a1, type metadata accessor for ActivityDisplayContext);
  }
  sub_10006F2DC(a1, (uint64_t)v11, type metadata accessor for ActivityDisplayContext);
  swift_bridgeObjectRetain();
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  uint64_t v13 = *v1;
  if (v12)
  {
    uint64_t v14 = *(void **)((char *)v1 + *(void *)(v13 + 112));
    if (v14)
    {
      id v15 = v14;
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v15 removeObjectForKey:v16];
LABEL_5:

      return sub_10006F27C(a1, type metadata accessor for ActivityDisplayContext);
    }
    goto LABEL_10;
  }
  if ((*((unsigned char *)v1 + *(void *)(v13 + 120)) & 1) == 0)
  {
    uint64_t v18 = *(void **)((char *)v1 + *(void *)(v13 + 112));
    if (v18)
    {
      sub_10006F2DC(a1, (uint64_t)v11, type metadata accessor for ActivityDisplayContext);
      id v19 = v18;
      uint64_t v20 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 setValue:v20 forKey:v21];

      swift_unknownObjectRelease();
      return sub_10006F27C(a1, type metadata accessor for ActivityDisplayContext);
    }
LABEL_10:
    sub_10006F27C(a1, type metadata accessor for ActivityDisplayContext);
    return swift_bridgeObjectRelease();
  }
  sub_10006F2DC(a1, (uint64_t)v8, type metadata accessor for ActivityDisplayContext);
  sub_100008614(&qword_1000F7718);
  if (!swift_dynamicCast())
  {
    memset(v30, 0, sizeof(v30));
    swift_bridgeObjectRelease();
    sub_10006E5D4((uint64_t)v30);
    id v15 = sub_10006F144(&qword_1000F7930, &qword_1000FCEE0);
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 ulog:60 message:v16];
    goto LABEL_5;
  }
  sub_10006EE90(v30, &v31);
  sub_10000AEFC(&v31, v32);
  uint64_t v22 = sub_1000A5D78();
  unint64_t v24 = v23;
  char v25 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
  if (v25)
  {
    id v26 = v25;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    NSString v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v26 setValue:isa forKey:v28];
    sub_10000D6B8(v22, v24);

    sub_10006F27C(a1, type metadata accessor for ActivityDisplayContext);
  }
  else
  {
    sub_10006F27C(a1, type metadata accessor for ActivityDisplayContext);
    sub_10000D6B8(v22, v24);
    swift_bridgeObjectRelease();
  }
  return sub_10000AF94((uint64_t)&v31);
}

void sub_10006B7B0(char a1)
{
  unint64_t v2 = v1;
  char v27 = a1;
  CurrentValueSubject.send(_:)();
  if (*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8))
  {
    LOBYTE(v25) = a1;
    swift_bridgeObjectRetain();
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    uint64_t v5 = *v1;
    if (v4)
    {
      uint64_t v6 = *(void **)((char *)v1 + *(void *)(v5 + 112));
      if (v6)
      {
        id v7 = v6;
        NSString v8 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v7 removeObjectForKey:v8];

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    if ((*((unsigned char *)v1 + *(void *)(v5 + 120)) & 1) == 0)
    {
      uint64_t v9 = *(void **)((char *)v1 + *(void *)(v5 + 112));
      if (v9)
      {
        LOBYTE(v25) = a1;
        id v10 = v9;
        uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v10 setValue:v11 forKey:v12];

        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_8;
    }
    char v24 = a1;
    sub_100008614(&qword_1000F7718);
    if (swift_dynamicCast())
    {
      sub_10006EE90(v23, &v25);
      sub_10000AEFC(&v25, v26);
      uint64_t v13 = sub_1000A5D78();
      uint64_t v17 = v13;
      unint64_t v18 = v14;
      id v19 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
      if (v19)
      {
        id v20 = v19;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v20 setValue:isa forKey:v22];
        sub_10000D6B8(v17, v18);
      }
      else
      {
        sub_10000D6B8(v13, v14);
        swift_bridgeObjectRelease();
      }
      sub_10000AF94((uint64_t)&v25);
    }
    else
    {
      memset(v23, 0, sizeof(v23));
      swift_bridgeObjectRelease();
      sub_10006E5D4((uint64_t)v23);
      id v15 = sub_10006F144(&qword_1000F79D8, &qword_1000FCEE8);
      NSString v16 = String._bridgeToObjectiveC()();
      [v15 ulog:60 message:v16];
    }
  }
}

void sub_10006BB5C(void *a1, uint64_t a2)
{
  char v3 = v2;
  id v28 = a1;
  uint64_t v29 = a2;
  CurrentValueSubject.send(_:)();
  if (!*(void *)((char *)v3 + *(void *)(*v3 + 128) + 8)) {
    goto LABEL_9;
  }
  *(void *)&long long v26 = a1;
  *((void *)&v26 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_100021250(a1);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  self;
  uint64_t v6 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  uint64_t v7 = *v2;
  if (v6)
  {
    NSString v8 = *(void **)((char *)v2 + *(void *)(v7 + 112));
    if (v8)
    {
      id v9 = v8;
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v9 removeObjectForKey:v10];

LABEL_8:
LABEL_9:
      sub_10001CB40(a1);
      return;
    }
LABEL_10:
    sub_10001CB40(a1);
    swift_bridgeObjectRelease();
    return;
  }
  if ((*((unsigned char *)v2 + *(void *)(v7 + 120)) & 1) == 0)
  {
    uint64_t v11 = *(void **)((char *)v2 + *(void *)(v7 + 112));
    if (v11)
    {
      *(void *)&long long v26 = a1;
      *((void *)&v26 + 1) = a2;
      sub_100021250(a1);
      id v12 = v11;
      uint64_t v13 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v12 setValue:v13 forKey:v10];

      swift_unknownObjectRelease();
      goto LABEL_8;
    }
    goto LABEL_10;
  }
  char v24 = a1;
  uint64_t v25 = a2;
  sub_100021250(a1);
  sub_100008614(&qword_1000F7718);
  if (swift_dynamicCast())
  {
    sub_10006EE90(v23, &v26);
    sub_10000AEFC(&v26, v27);
    uint64_t v16 = sub_1000A5D78();
    unint64_t v18 = v17;
    id v19 = *(void **)((char *)v3 + *(void *)(*v3 + 112));
    if (v19)
    {
      id v20 = v19;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v20 setValue:isa forKey:v22];
      sub_10000D6B8(v16, v18);

      sub_10001CB40(v28);
    }
    else
    {
      sub_10001CB40(v28);
      sub_10000D6B8(v16, v18);
      swift_bridgeObjectRelease();
    }
    sub_10000AF94((uint64_t)&v26);
  }
  else
  {
    memset(v23, 0, sizeof(v23));
    swift_bridgeObjectRelease();
    sub_10006E5D4((uint64_t)v23);
    id v14 = sub_10006F144(&qword_1000F7980, &qword_1000FCEF0);
    NSString v15 = String._bridgeToObjectiveC()();
    [v14 ulog:60 message:v15];

    sub_10001CB40(v28);
  }
}

void sub_10006BF64(void *a1)
{
  unint64_t v2 = v1;
  id v29 = a1;
  CurrentValueSubject.send(_:)();
  if (!*(uint64_t *)((char *)v2 + *(void *)(*v2 + 128) + 8))
  {

    return;
  }
  *(void *)&long long v27 = a1;
  id v4 = a1;
  swift_bridgeObjectRetain();
  sub_100008614(&qword_1000F7710);
  _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  self;
  uint64_t v5 = swift_dynamicCastObjCClass();
  swift_unknownObjectRelease();
  uint64_t v6 = *v2;
  if (v5)
  {
    uint64_t v7 = *(void **)((char *)v2 + *(void *)(v6 + 112));
    if (v7)
    {
      id v8 = v7;
      NSString v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v8 removeObjectForKey:v9];

      return;
    }
LABEL_9:
    swift_bridgeObjectRelease();

    return;
  }
  if ((*((unsigned char *)v2 + *(void *)(v6 + 120)) & 1) == 0)
  {
    NSString v10 = *(void **)((char *)v2 + *(void *)(v6 + 112));
    if (v10)
    {
      *(void *)&long long v27 = a1;
      id v11 = v4;
      id v12 = v10;
      uint64_t v13 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v12 setValue:v13 forKey:v14];

      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_9;
  }
  long long v26 = a1;
  id v15 = v4;
  sub_100008614(&qword_1000F7718);
  if (swift_dynamicCast())
  {
    sub_10006EE90(v25, &v27);
    sub_10000AEFC(&v27, v28);
    uint64_t v18 = sub_1000A5D78();
    unint64_t v20 = v19;
    NSString v21 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
    if (v21)
    {
      id v22 = v21;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v22 setValue:isa forKey:v24];
      sub_10000D6B8(v18, v20);
    }
    else
    {

      sub_10000D6B8(v18, v20);
      swift_bridgeObjectRelease();
    }
    sub_10000AF94((uint64_t)&v27);
  }
  else
  {
    memset(v25, 0, sizeof(v25));
    swift_bridgeObjectRelease();
    sub_10006E5D4((uint64_t)v25);
    id v16 = sub_10006F144(&qword_1000F76E0, &qword_1000FCEF8);
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:60 message:v17];
  }
}

void sub_10006C35C(float a1)
{
  unint64_t v2 = v1;
  float v27 = a1;
  CurrentValueSubject.send(_:)();
  if (*(void *)((char *)v2 + *(void *)(*v2 + 128) + 8))
  {
    v25[0] = a1;
    swift_bridgeObjectRetain();
    _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();
    swift_unknownObjectRelease();
    uint64_t v5 = *v1;
    if (v4)
    {
      uint64_t v6 = *(void **)((char *)v1 + *(void *)(v5 + 112));
      if (v6)
      {
        id v7 = v6;
        NSString v8 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v7 removeObjectForKey:v8];

        return;
      }
LABEL_8:
      swift_bridgeObjectRelease();
      return;
    }
    if ((*((unsigned char *)v1 + *(void *)(v5 + 120)) & 1) == 0)
    {
      NSString v9 = *(void **)((char *)v1 + *(void *)(v5 + 112));
      if (v9)
      {
        v25[0] = a1;
        id v10 = v9;
        uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v10 setValue:v11 forKey:v12];

        swift_unknownObjectRelease();
        return;
      }
      goto LABEL_8;
    }
    float v24 = a1;
    sub_100008614(&qword_1000F7718);
    if (swift_dynamicCast())
    {
      sub_10006EE90(v23, v25);
      sub_10000AEFC(v25, v26);
      uint64_t v13 = sub_1000A5D78();
      uint64_t v17 = v13;
      unint64_t v18 = v14;
      unint64_t v19 = *(void **)((char *)v2 + *(void *)(*v2 + 112));
      if (v19)
      {
        id v20 = v19;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        NSString v22 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v20 setValue:isa forKey:v22];
        sub_10000D6B8(v17, v18);
      }
      else
      {
        sub_10000D6B8(v13, v14);
        swift_bridgeObjectRelease();
      }
      sub_10000AF94((uint64_t)v25);
    }
    else
    {
      memset(v23, 0, sizeof(v23));
      swift_bridgeObjectRelease();
      sub_10006E5D4((uint64_t)v23);
      id v15 = sub_10006F144(&qword_1000F79A0, &qword_1000FCF00);
      NSString v16 = String._bridgeToObjectiveC()();
      [v15 ulog:60 message:v16];
    }
  }
}

uint64_t *sub_10006C710()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridge;
  if (*(void *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridge))
  {
    unint64_t v2 = *(uint64_t **)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridge);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = sub_10006C7C0();
    uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_daemonBridgeState);
    type metadata accessor for ClassicCardAlertDaemonBridgeClient();
    swift_allocObject();
    swift_retain();
    unint64_t v2 = sub_100065EE4(v4, v5);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10006C7C0()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridgeModel;
  if (*(void *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridgeModel))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridgeModel);
  }
  else
  {
    uint64_t v3 = v0;
    sub_100008614(&qword_1000FCED0);
    sub_100012908(&qword_1000FCED8, &qword_1000FCED0);
    uint64_t v4 = Publisher.eraseToAnyPublisher()();
    type metadata accessor for ClassicCardAlertDaemonBridgeClientModel();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v4;
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

id sub_10006C8A4()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenter;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenter);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenter);
  }
  else
  {
    uint64_t v4 = v0;
    uint64_t v5 = sub_10006C958();
    uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_cardPresenterState);
    id v7 = objc_allocWithZone((Class)type metadata accessor for CardPresenter(0));
    swift_retain();
    id v8 = sub_10001FC44(v5, v6);
    swift_release();
    swift_release();
    NSString v9 = *(void **)(v4 + v1);
    *(void *)(v4 + v1) = v8;
    id v3 = v8;

    uint64_t v2 = 0;
  }
  id v10 = v2;
  return v3;
}

uint64_t sub_10006C958()
{
  uint64_t v1 = v0;
  uint64_t v2 = _s8CardInfoOMa();
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenterModel;
  if (*(void *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenterModel))
  {
    uint64_t v7 = *(void *)(v0
                   + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenterModel);
  }
  else
  {
    uint64_t v8 = v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_context;
    NSString v9 = (int *)type metadata accessor for ClassicCardViewServiceContext();
    sub_10006F2DC(v8 + v9[8], (uint64_t)v5, (uint64_t (*)(void))_s8CardInfoOMa);
    uint64_t v10 = *(void *)(v8 + v9[9]);
    uint64_t v30 = *(void *)(v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_host);
    uint64_t v31 = v10;
    uint64_t v11 = v8 + v9[7];
    NSString v12 = *(void **)v11;
    uint64_t v28 = *(void *)(v11 + 8);
    uint64_t v29 = (uint64_t)v12;
    uint64_t v13 = *(char **)(v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_rootViewController);
    swift_unknownObjectRetain();
    sub_100021250(v12);
    uint64_t v27 = sub_1000123B4();
    uint64_t v26 = v14;
    uint64_t v24 = *(void *)(v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment__isActive);
    id v15 = *(void **)(v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_daemonBridgeState);
    swift_beginAccess();
    uint64_t v16 = v15[2];
    swift_beginAccess();
    uint64_t v17 = v15[3];
    swift_beginAccess();
    uint64_t v18 = v15[4];
    swift_beginAccess();
    uint64_t v19 = v15[5];
    swift_beginAccess();
    uint64_t v20 = v15[6];
    uint64_t v32 = *(void *)&v13[OBJC_IVAR___MainViewController_homeGestureEventSubject];
    uint64_t v25 = v13;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100008614(&qword_1000F7050);
    sub_100012908(&qword_1000FCEB8, &qword_1000F7050);
    uint64_t v21 = Publisher.eraseToAnyPublisher()();
    type metadata accessor for CardPresenterModel(0);
    swift_allocObject();
    uint64_t v7 = sub_1000142CC((uint64_t)v5, v31, v30, v29, v28, v27, v26, (uint64_t)v25, v24, v16, v17, v18, v19, v20, v21);
    *(void *)(v1 + v6) = v7;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v7;
}

uint64_t sub_10006CC40(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v68 = a4;
  uint64_t v69 = a5;
  uint64_t v10 = *(void *)v5;
  uint64_t v11 = sub_100008614(&qword_1000FCF18);
  uint64_t v60 = *(void *)(v11 - 8);
  uint64_t v61 = v11;
  __chkstk_darwin(v11, v12);
  unint64_t v58 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100008614(&qword_1000FCF20);
  uint64_t v62 = *(void *)(v14 - 8);
  uint64_t v63 = v14;
  __chkstk_darwin(v14, v15);
  unint64_t v59 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v17 - 8, v18);
  uint64_t v65 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000F66A8 != -1) {
    swift_once();
  }
  uint64_t v20 = (void *)qword_100111AB8;
  *(void *)(v5 + 16) = qword_100111AB8;
  *(void *)(v5 + 56) = &_swiftEmptySetSingleton;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  id v21 = v20;
  UUID.init()();
  uint64_t v22 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment__isActive;
  sub_100008614(&qword_1000FCE50);
  swift_allocObject();
  *(void *)(v5 + v22) = sub_10001BDB4(1, 0, 0, 0);
  uint64_t v23 = (uint64_t *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_finishedHandler);
  *uint64_t v23 = 0;
  v23[1] = 0;
  *(void *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridge) = 0;
  *(void *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___daemonBridgeModel) = 0;
  *(void *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenter) = 0;
  *(void *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment____lazy_storage___cardPresenterModel) = 0;
  uint64_t v24 = OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_cardPresenterState;
  type metadata accessor for CardPresenterState();
  uint64_t v25 = swift_allocObject();
  sub_100008614(&qword_1000FCED0);
  swift_allocObject();
  *(void *)(v25 + 16) = PassthroughSubject.init()();
  uint64_t v64 = sub_100008614(&qword_1000FCB70);
  swift_allocObject();
  *(void *)(v25 + 24) = PassthroughSubject.init()();
  *(void *)(v5 + v24) = v25;
  uint64_t v70 = 0;
  int64_t v71 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v26._uint64_t countAndFlagsBits = 0x6F63203A74696E49;
  v26._object = (void *)0xEE003D747865746ELL;
  String.append(_:)(v26);
  uint64_t v27 = (int *)type metadata accessor for ClassicCardViewServiceContext();
  _print_unlocked<A, B>(_:_:)();
  sub_10004DA44(v70, v71, 0, v10, (uint64_t)&off_1000E7118);
  swift_bridgeObjectRelease();
  sub_10006F2DC(a1, v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_context, (uint64_t (*)(void))type metadata accessor for ClassicCardViewServiceContext);
  *(void *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_host) = a2;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  *(void *)(v5 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_rootViewController) = a3;
  uint64_t v30 = *v23;
  uint64_t v32 = v68;
  uint64_t v31 = v69;
  *uint64_t v23 = v68;
  v23[1] = v31;
  uint64_t v66 = v28;
  swift_unknownObjectRetain();
  long long v33 = v29;
  sub_10000F7F8(v32);
  sub_10000F808(v30);
  uint64_t v34 = (uint64_t)v65;
  sub_10006F2DC(a1, (uint64_t)v65, type metadata accessor for ActivityDisplayContext);
  uint64_t v35 = a1 + v27[7];
  int64_t v36 = *(void **)v35;
  unint64_t v37 = *(void *)(v35 + 8);
  uint64_t v38 = v27[5];
  uint64_t v39 = *(void **)(a1 + v27[6]);
  uint64_t v67 = a1;
  LODWORD(v27) = *(unsigned __int8 *)(a1 + v38);
  type metadata accessor for ClassicCardAlertDaemonBridgeClientState();
  swift_allocObject();
  sub_100021250(v36);
  id v40 = v39;
  uint64_t v41 = sub_1000672B0(v34, (int)v27, v36, v37, v39, 0.0);

  sub_10001CB40(v36);
  *(void *)(v6 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_daemonBridgeState) = v41;
  uint64_t v70 = v41[7];
  swift_allocObject();
  swift_weakInit();
  sub_100012908(&qword_1000FCF28, &qword_1000FCB70);
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v65 = v33;
  uint64_t v70 = *(void *)&v33[OBJC_IVAR___MainViewController_backlightLuminanceBecameReducedSubject];
  uint64_t v42 = swift_allocObject();
  swift_weakInit();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = sub_10006F374;
  *(void *)(v43 + 24) = v42;
  swift_retain();
  sub_100008614(&qword_1000F7050);
  sub_100012908(&qword_1000FCEB8, &qword_1000F7050);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v70 = *(void *)(*(void *)(v6 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_cardPresenterState)
                  + 24);
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_10006C710();
  sub_10006607C();
  swift_release();
  id v44 = sub_10006C8A4();
  sub_100014D80();

  if (qword_1000F6680 != -1) {
    swift_once();
  }
  uint64_t v45 = *(void **)(qword_100111A10 + 872);
  int64_t v46 = *(void **)((char *)v45 + *(void *)((swift_isaMask & *v45) + 0x70));
  if (v46)
  {
    unint64_t v47 = v45;
    id v48 = v46;
    NSString v49 = String._bridgeToObjectiveC()();
    [v48 setBool:0 forKey:v49];
  }
  uint64_t v50 = v68;
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  uint64_t v51 = v67;
  if (qword_100111B00)
  {
    swift_getKeyPath();
    uint64_t v52 = v58;
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
    swift_release();
    sub_100012908(&qword_1000FCF30, &qword_1000FCF18);
    uint64_t v53 = v59;
    uint64_t v54 = v61;
    Publisher.filter(_:)();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v52, v54);
    sub_100012908(qword_1000FCF38, &qword_1000FCF20);
    uint64_t v55 = v63;
    Publisher<>.sink(receiveValue:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v53, v55);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  sub_10000F808(v50);
  swift_unknownObjectRelease();

  sub_10006F27C(v51, (uint64_t (*)(void))type metadata accessor for ClassicCardViewServiceContext);
  return v6;
}

uint64_t sub_10006D668()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10006DF6C(0xD00000000000001CLL, (void *)0x80000001000C2980);
    return swift_release();
  }
  return result;
}

uint64_t sub_10006D6D8(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a3(v4, v5);
    return swift_release();
  }
  return result;
}

void sub_10006D750()
{
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  uint64_t v0 = *(void **)(qword_100111A10 + 872);
  uint64_t v1 = *(void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x70));
  if (v1)
  {
    uint64_t v2 = v0;
    id v3 = v1;
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 setBool:0 forKey:v4];
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_10006D894()
{
  id v1 = sub_10006F000((void (*)(void))type metadata accessor for ClassicCardAlertEnvironment, &qword_1000FCE38);
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  sub_10006DC1C();
  sub_10000F808(*(void *)(v0 + 24));
  sub_10000F808(*(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_id;
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  sub_10006F27C(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_context, (uint64_t (*)(void))type metadata accessor for ClassicCardViewServiceContext);
  swift_unknownObjectRelease();

  sub_10000F808(*(void *)(v0 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_finishedHandler));
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10006DA48()
{
  sub_10006D894();

  return swift_deallocClassInstance();
}

uint64_t sub_10006DAA0()
{
  return type metadata accessor for ClassicCardAlertEnvironment();
}

uint64_t type metadata accessor for ClassicCardAlertEnvironment()
{
  uint64_t result = qword_1000FCC28;
  if (!qword_1000FCC28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10006DAF4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ClassicCardViewServiceContext();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

void sub_10006DC1C()
{
  id v0 = sub_10006F000((void (*)(void))type metadata accessor for ClassicCardAlertEnvironment, &qword_1000FCE38);
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];

  sub_10006C710();
  id v2 = sub_10006F000((void (*)(void))type metadata accessor for ClassicCardAlertDaemonBridgeClient, &qword_1000FCEB0);
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  sub_1000A2B6C();
  swift_release();
  id v4 = sub_10006C8A4();
  id v5 = sub_10006F000((void (*)(void))type metadata accessor for CardPresenter, &qword_1000FCEA8);
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:40 message:v6];
}

id sub_10006DDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  String.append(_:)(*(Swift::String *)&a1);
  id v4 = sub_10006F000((void (*)(void))type metadata accessor for ClassicCardAlertEnvironment, &qword_1000FCE38);
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 ulog:40 message:v5 0xD00000000000001ALL 0x80000001000C2900];
  swift_bridgeObjectRelease();

  NSString v6 = *(void (**)(uint64_t))(v3 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_finishedHandler);
  if (v6)
  {
    uint64_t v7 = swift_retain();
    v6(v7);
    return (id)sub_10000F808((uint64_t)v6);
  }
  else
  {
    id v9 = sub_10006F000((void (*)(void))type metadata accessor for ClassicCardAlertEnvironment, &qword_1000FCE38);
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 ulog:60 message:v10];

    uint64_t v11 = *(void **)(v3 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_host);
    return [v11 invalidate];
  }
}

uint64_t sub_10006DF6C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long aBlock = (void **)0xD00000000000001DLL;
  unint64_t v23 = 0x80000001000C28E0;
  v12._uint64_t countAndFlagsBits = a1;
  v12._object = a2;
  String.append(_:)(v12);
  id v13 = sub_10006F000((void (*)(void))type metadata accessor for ClassicCardAlertEnvironment, &qword_1000FCE38);
  swift_bridgeObjectRetain();
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v13 ulog:40 message:v14];
  swift_bridgeObjectRelease();

  sub_100024504();
  uint64_t v15 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v16;
  v17[3] = a1;
  v17[4] = a2;
  Swift::String v26 = sub_10006EF74;
  uint64_t v27 = v17;
  long long aBlock = _NSConcreteStackBlock;
  unint64_t v23 = 1107296256;
  uint64_t v24 = sub_10003CE34;
  uint64_t v25 = &unk_1000E71B0;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  long long aBlock = (void **)_swiftEmptyArrayStorage;
  sub_10006EF98((unint64_t *)&qword_1000F6E20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100008614(&qword_1000F6E28);
  sub_100012908((unint64_t *)&qword_1000F6E30, &qword_1000F6E28);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v20);
}

void sub_10006E310(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v5 = sub_10006C8A4();
    swift_release();
    sub_10001A3C0(a2, a3, 0, 0);
  }
}

uint64_t sub_10006E398()
{
  return sub_10006E3BC();
}

uint64_t sub_10006E3BC()
{
  type metadata accessor for ClassicCardAlertEnvironment();
  sub_100008614(&qword_1000FCE38);
  v0._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x3D64690A3D3D20;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  sub_10006EF98(&qword_1000FCE40, (void (*)(uint64_t))&type metadata accessor for UUID);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 2112829;
}

uint64_t sub_10006E4C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC13PCViewService27ClassicCardAlertEnvironment_id;
  uint64_t v4 = type metadata accessor for UUID();
  id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10006E538(char a1)
{
  swift_retain();
  sub_10006AA58(a1);

  return swift_release();
}

uint64_t sub_10006E58C()
{
  return sub_10006EF98((unint64_t *)&qword_1000F8F18, (void (*)(uint64_t))&type metadata accessor for UUID);
}

uint64_t sub_10006E5D4(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000FCE48);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10006E634()
{
  sub_100008614(&qword_1000F6A28);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_10006E770()
{
  sub_100008614(&qword_1000F9758);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_10006E8AC()
{
  sub_100008614(&qword_1000F9738);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_10006E9E8()
{
  sub_100008614(&qword_1000F9748);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_10006EB24()
{
  sub_100008614(&qword_1000F9740);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_10006EC60()
{
  type metadata accessor for PCActivityAssetType(0);
  sub_100008614(&qword_1000F9730);
  uint64_t v0 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v0, v1);
  if ((v2 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v3 = objc_allocWithZone((Class)CULogHandle);
  NSString v4 = String._bridgeToObjectiveC()();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v3 initWithSubsystem:v4 category:v5];

  return v6;
}

id sub_10006ED9C()
{
  return sub_10006F000((void (*)(void))type metadata accessor for MainViewController, &qword_1000FCEC0);
}

id sub_10006EDBC()
{
  return sub_10006F000((void (*)(void))type metadata accessor for ClassicCardAlertDaemonBridgeClient, &qword_1000FCEB0);
}

id sub_10006EDDC()
{
  return sub_10006F000((void (*)(void))type metadata accessor for CardPresenter, &qword_1000FCEA8);
}

id sub_10006EDFC()
{
  return sub_10006F144(&qword_1000F7738, &qword_1000FCEC8);
}

id sub_10006EE10()
{
  return sub_10006F000((void (*)(void))type metadata accessor for HomeAccessoryViewHandle, &qword_1000FCE98);
}

id sub_10006EE30()
{
  return sub_10006F000((void (*)(void))type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClient, &qword_1000FCE78);
}

id sub_10006EE50()
{
  return sub_10006F000((void (*)(void))type metadata accessor for NearbySharingInteractionViewPresenter, &qword_1000FCE68);
}

id sub_10006EE70()
{
  return sub_10006F000((void (*)(void))type metadata accessor for NearbySharingInteractionAlertEnvironment, &qword_1000FCE60);
}

_OWORD *sub_10006EE90(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

id sub_10006EEA8()
{
  return sub_10006F000((void (*)(void))type metadata accessor for ProximityCardHeaderViewModel, &qword_1000FCE80);
}

id sub_10006EEC8()
{
  return sub_10006F144(&qword_1000FCE88, &qword_1000FCE90);
}

id sub_10006EEDC()
{
  return sub_10006F000((void (*)(void))type metadata accessor for ArtworkAnimation, &qword_1000FCEA0);
}

uint64_t sub_10006EEFC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006EF34()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10006EF74()
{
  sub_10006E310(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10006EF80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006EF90()
{
  return swift_release();
}

uint64_t sub_10006EF98(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_10006EFE0()
{
  return sub_10006F000((void (*)(void))type metadata accessor for AppDelegate, &qword_1000FCF10);
}

id sub_10006F000(void (*a1)(void), uint64_t *a2)
{
  a1(0);
  sub_100008614(a2);
  uint64_t v3 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v3, v4);
  if ((v5 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v6 = objc_allocWithZone((Class)CULogHandle);
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithSubsystem:v7 category:v8];

  return v9;
}

id sub_10006F144(uint64_t *a1, uint64_t *a2)
{
  sub_100008614(a1);
  sub_100008614(a2);
  uint64_t v3 = String.init<A>(describing:)();
  sub_10004E244(60, 0xE100000000000000, v3, v4);
  if ((v5 & 1) == 0)
  {
    String.subscript.getter();
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  id v6 = objc_allocWithZone((Class)CULogHandle);
  NSString v7 = String._bridgeToObjectiveC()();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v6 initWithSubsystem:v7 category:v8];

  return v9;
}

uint64_t sub_10006F27C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10006F2DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006F344(uint64_t *a1)
{
  return sub_10006D6D8(a1, v1, (void (*)(uint64_t, uint64_t))sub_10006DF6C);
}

uint64_t sub_10006F374()
{
  return sub_10006D668();
}

uint64_t sub_10006F37C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10006F3B4(uint64_t a1)
{
  return sub_100017234(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10006F3BC(uint64_t *a1)
{
  return sub_10006D6D8(a1, v1, (void (*)(uint64_t, uint64_t))sub_10006DDC0);
}

const char *sub_10006F3EC()
{
  return "forceKillPCViewService";
}

uint64_t sub_10006F400()
{
  uint64_t result = type metadata accessor for Loader.State();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10006F4B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Loader();
  sub_10004DC48(0x74696E696544, (void *)0xE600000000000000, 0, v2, (uint64_t)&off_1000E7328);
  swift_release();
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  uint64_t v4 = type metadata accessor for Loader.State();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10006F5A8()
{
  sub_10006F4B0();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Loader()
{
  return sub_10000ED34();
}

uint64_t type metadata accessor for Loader.State()
{
  return sub_10000ED34();
}

uint64_t sub_10006F630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_10006F638()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_10006F6B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    unint64_t v9 = v10 + v8;
  }
  uint64_t v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          unsigned int v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            uint64_t v18 = 4;
          }
          else
          {
            BOOL v20 = v19 != 0;
            BOOL v13 = v19 >= 0xFF;
            uint64_t v18 = 2;
            if (!v13) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_10006F8AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 2, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_10006F970(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_10006FAC0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *sub_10006FC90(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_10006FDE0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t sub_10006FFB0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 2;
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 1)
  {
    unsigned int v6 = 0;
    if (v7 <= 3)
    {
      unsigned int v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        uint64_t v8 = 4;
      }
      else
      {
        BOOL v10 = v9 != 0;
        BOOL v11 = v9 >= 0xFF;
        uint64_t v8 = 2;
        if (!v11) {
          uint64_t v8 = v10;
        }
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    v7 += v8;
  }
  if (!a2) {
    return 0;
  }
  int v12 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_30;
  }
  char v13 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)((char *)a1 + v7);
      if (!v14) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_30:
      if (v6)
      {
        unsigned int v19 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v19 >= 3) {
          return v19 - 2;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_30;
  }
LABEL_20:
  int v16 = (v14 - 1) << v13;
  if (v7 > 3) {
    int v16 = 0;
  }
  if (v7)
  {
    if (v7 <= 3) {
      int v17 = v7;
    }
    else {
      int v17 = 4;
    }
    switch(v17)
    {
      case 2:
        int v18 = *a1;
        break;
      case 3:
        int v18 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)a1;
        break;
      default:
        int v18 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v18 = 0;
  }
  return v6 + (v18 | v16) + 1;
}

void sub_1000701A4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 2;
  size_t v9 = *(void *)(v6 + 64);
  if (v7 <= 1)
  {
    unsigned int v8 = 0;
    if (v9 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    v9 += v10;
  }
  BOOL v13 = a3 >= v8;
  unsigned int v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      unsigned int v18 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v18))
      {
        int v15 = 4;
      }
      else if (v18 >= 0x100)
      {
        int v15 = 2;
      }
      else
      {
        int v15 = v18 > 1;
      }
    }
    else
    {
      int v15 = 1;
    }
  }
  else
  {
    int v15 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v16 = ~v8 + a2;
    if (v9 < 4)
    {
      int v17 = (v16 >> (8 * v9)) + 1;
      if (v9)
      {
        int v19 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v9] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v17;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v9] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x100070428);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        BOOL v20 = *(void (**)(void))(v6 + 56);
        v20();
      }
      return;
  }
}

uint64_t sub_100070450(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t sub_100070480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

void sub_1000704B0()
{
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v0 = *(id *)(qword_100111A10 + 584);
  double v1 = sub_10002D8E0();

  id v2 = *(id *)(qword_100111A10 + 568);
  double v3 = sub_10002D8E0();

  id v4 = *(id *)(qword_100111A10 + 552);
  double v5 = sub_10002D8E0();

  id v6 = *(id *)(qword_100111A10 + 600);
  double v7 = sub_10002D8E0();

  *(double *)&xmmword_100111A58 = v1;
  *((double *)&xmmword_100111A58 + 1) = v3;
  qword_100111A68 = *(void *)&v5;
  unk_100111A70 = *(void *)&v7;
}

void sub_100070590()
{
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v0 = *(id *)(qword_100111A10 + 592);
  double v1 = sub_10002D8E0();

  id v2 = *(id *)(qword_100111A10 + 576);
  double v3 = sub_10002D8E0();

  id v4 = *(id *)(qword_100111A10 + 560);
  double v5 = sub_10002D8E0();

  id v6 = *(id *)(qword_100111A10 + 600);
  double v7 = sub_10002D8E0();

  *(double *)&xmmword_100111A78 = v1;
  *((double *)&xmmword_100111A78 + 1) = v3;
  qword_100111A88 = *(void *)&v5;
  unk_100111A90 = *(void *)&v7;
}

uint64_t sub_100070670()
{
  id v1 = sub_10006EEDC();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ArtworkAnimation()
{
  return self;
}

void sub_100070734()
{
  uint64_t v1 = v0;
  *(void *)&long long v29 = 0;
  *((void *)&v29 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  v28[0] = v29;
  v2._uint64_t countAndFlagsBits = 0x2865726170657270;
  v2._object = (void *)0xE900000000000029;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 0x662E666C6573203ALL;
  v3._object = (void *)0xEC0000003D6D6F72;
  String.append(_:)(v3);
  long long v4 = *(_OWORD *)(v0 + 72);
  long long v29 = *(_OWORD *)(v0 + 56);
  long long v30 = v4;
  _print_unlocked<A, B>(_:_:)();
  v5._uint64_t countAndFlagsBits = 0x742E666C6573202CLL;
  v5._object = (void *)0xEA00000000003D6FLL;
  String.append(_:)(v5);
  long long v6 = *(_OWORD *)(v0 + 104);
  long long v29 = *(_OWORD *)(v0 + 88);
  long long v30 = v6;
  _print_unlocked<A, B>(_:_:)();
  id v7 = sub_10006EEDC();
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 ulog:40 message:v8 v28[0]];
  swift_bridgeObjectRelease();

  id v9 = [*(id *)(v1 + 16) scrollView];
  [v9 setClipsToBounds:0];

  uint64_t v10 = *(void **)(v1 + 32);
  if (v10)
  {
    unsigned int v11 = self;
    id v12 = v10;
    id v13 = [v11 clearColor];
    [v12 setBackgroundColor:v13];
  }
  id v14 = [*(id *)(v1 + 16) view];
  if (v14)
  {
    int v15 = v14;
    id v16 = *(id *)(v1 + 24);
    int v17 = sub_10009DD84((uint64_t)v16);

    *(void *)(v1 + 120) = v17;
    swift_bridgeObjectRelease();
    id v18 = [*(id *)(v1 + 24) layer];
    sub_100008614(&qword_1000F8D20);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1000B01B0;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v20 = objc_allocWithZone((Class)CAFilter);
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v22 = [v20 initWithType:v21];

    Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
    [v22 setValue:isa forKey:kCAFilterInputRadius];

    *(void *)(v19 + 56) = sub_10001280C(0, (unint64_t *)&qword_1000F8D28);
    *(void *)(v19 + 32) = v22;
    Class v24 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v18 setFilters:v24];

    id v25 = [*(id *)(v1 + 24) layer];
    sub_100071410(&v29, *(CGFloat *)(v1 + 72), *(double *)(v1 + 64));
    v28[0] = v29;
    v28[1] = v30;
    void v28[2] = v31;
    v28[3] = v32;
    v28[4] = v33;
    v28[5] = v34;
    v28[6] = v35;
    v28[7] = v36;
    [v25 setTransform:v28];

    id v26 = [*(id *)(v1 + 24) layer];
    double v27 = *(double *)(v1 + 80);
    *(float *)&double v27 = v27;
    [v26 setOpacity:v27];
  }
  else
  {
    __break(1u);
  }
}

void sub_100070B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  _StringGuts.grow(_:)(35);
  v6._uint64_t countAndFlagsBits = 0xD000000000000014;
  v6._object = (void *)0x80000001000C2A50;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0x642E666C6573203ALL;
  v7._object = (void *)0xED00003D79616C65;
  String.append(_:)(v7);
  Double.write<A>(to:)();
  v8._object = (void *)0x80000001000C2A70;
  v8._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v8);
  Double.write<A>(to:)();
  id v9 = sub_10006EEDC();
  swift_bridgeObjectRetain();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v9 ulog:40 message:v10];
  swift_bridgeObjectRelease();

  unsigned int v11 = self;
  [v11 begin];
  id v12 = (void *)swift_allocObject();
  v12[2] = v3;
  v12[3] = a1;
  void v12[4] = a2;
  long long v36 = sub_100071698;
  unint64_t v37 = v12;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  long long v34 = sub_10003CE34;
  long long v35 = &unk_1000E7448;
  id v13 = _Block_copy(&aBlock);
  swift_retain();
  sub_10000F7F8(a1);
  swift_release();
  [v11 setCompletionBlock:v13];
  _Block_release(v13);
  if (qword_1000F6698 != -1) {
    swift_once();
  }
  [v11 setAnimationTimingFunction:qword_1000FD040];
  *(void *)&long long aBlock = 0x2E737265746C6966;
  *((void *)&aBlock + 1) = 0xE800000000000000;
  v14._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 46;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  sub_10001280C(0, &qword_1000FD208);
  id v17 = sub_1000710DC(*(double *)(v3 + 48), *(double *)(v3 + 40));
  Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  [v17 setFromValue:isa];

  Class v19 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  [v17 setToValue:v19];

  id v20 = [*(id *)(v3 + 24) layer];
  NSString v21 = String._bridgeToObjectiveC()();
  [v20 addAnimation:v17 forKey:v21];

  id v22 = sub_1000710DC(*(double *)(v3 + 48), *(double *)(v3 + 40));
  sub_100071410(v32, *(CGFloat *)(v3 + 72), *(double *)(v3 + 64));
  Class v23 = CATransform3D._bridgeToObjectiveC()().super.isa;
  [v22 setFromValue:v23];

  sub_100071410(&aBlock, *(CGFloat *)(v3 + 104), *(double *)(v3 + 96));
  Class v24 = CATransform3D._bridgeToObjectiveC()().super.isa;
  [v22 setToValue:v24];

  id v25 = [*(id *)(v3 + 24) layer];
  NSString v26 = String._bridgeToObjectiveC()();
  [v25 addAnimation:v22 forKey:v26];

  id v27 = sub_1000710DC(*(double *)(v3 + 48), *(double *)(v3 + 40));
  Class v28 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  [v27 setFromValue:v28];

  Class v29 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  [v27 setToValue:v29];

  id v30 = [*(id *)(v3 + 24) layer];
  NSString v31 = String._bridgeToObjectiveC()();
  [v30 addAnimation:v27 forKey:v31];

  [v11 commit];
}

id sub_1000710DC(double a1, double a2)
{
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [ObjCClassFromMetadata animationWithKeyPath:v5];

  id v7 = v6;
  [v7 setDuration:a1];
  [v7 setFillMode:kCAFillModeForwards];
  [v7 setRemovedOnCompletion:0];
  Swift::String v8 = self;
  id v9 = v7;
  id v10 = [v8 functionWithName:kCAMediaTimingFunctionEaseOut];
  [v9 setTimingFunction:v10];

  [v9 setBeginTime:CACurrentMediaTime() + a2];
  return v9;
}

void sub_100071228()
{
  uint64_t v1 = v0;
  id v2 = sub_10006EEDC();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  [*(id *)(v1 + 16) externalAnimationsEnded];
  long long v4 = *(void **)(v1 + 32);
  if (v4)
  {
    NSString v5 = self;
    id v6 = v4;
    id v7 = [v5 systemBackgroundColor];
    [v6 setBackgroundColor:v7];
  }
  id v8 = [*(id *)(v1 + 16) view];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)(v1 + 120);
    id v11 = *(id *)(v1 + 24);
    swift_bridgeObjectRetain();
    sub_10009E0D8((uint64_t)v11, v10);

    swift_bridgeObjectRelease();
    id v12 = [*(id *)(v1 + 24) layer];
    [v12 setFilters:0];

    id v13 = [*(id *)(v1 + 24) layer];
    long long v14 = *(_OWORD *)&CATransform3DIdentity.m13;
    v20[0] = *(_OWORD *)&CATransform3DIdentity.m11;
    v20[1] = v14;
    long long v15 = *(_OWORD *)&CATransform3DIdentity.m23;
    v20[2] = *(_OWORD *)&CATransform3DIdentity.m21;
    void v20[3] = v15;
    long long v16 = *(_OWORD *)&CATransform3DIdentity.m33;
    v20[4] = *(_OWORD *)&CATransform3DIdentity.m31;
    v20[5] = v16;
    long long v17 = *(_OWORD *)&CATransform3DIdentity.m43;
    v20[6] = *(_OWORD *)&CATransform3DIdentity.m41;
    v20[7] = v17;
    [v13 setTransform:v20];

    id v18 = [*(id *)(v1 + 24) layer];
    LODWORD(v19) = 1.0;
    [v18 setOpacity:v19];
  }
  else
  {
    __break(1u);
  }
}

CGFloat sub_100071410@<D0>(_OWORD *a1@<X8>, CGFloat a2@<D0>, double a3@<D1>)
{
  uint64_t v4 = v3;
  CATransform3DMakeScale(&a, a2, a2, 1.0);
  long long v34 = *(_OWORD *)&a.m13;
  long long v35 = *(_OWORD *)&a.m11;
  long long v32 = *(_OWORD *)&a.m23;
  long long v33 = *(_OWORD *)&a.m21;
  long long v30 = *(_OWORD *)&a.m33;
  long long v31 = *(_OWORD *)&a.m31;
  long long v29 = *(_OWORD *)&a.m41;
  CGFloat m43 = a.m43;
  CGFloat m44 = a.m44;
  [*(id *)(v3 + 24) center];
  a.m11 = 1.28513257e-27;
  a.m12 = -5.98008217e197;
  v9._uint64_t countAndFlagsBits = Double.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  id v10 = sub_10006EEDC();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();

  [*(id *)(v4 + 24) center];
  CATransform3DMakeTranslation(&a, 0.0, v12 * a3, 0.0);
  long long v13 = *(_OWORD *)&a.m11;
  long long v14 = *(_OWORD *)&a.m13;
  long long v15 = *(_OWORD *)&a.m21;
  long long v16 = *(_OWORD *)&a.m23;
  long long v17 = *(_OWORD *)&a.m31;
  long long v18 = *(_OWORD *)&a.m33;
  long long v19 = *(_OWORD *)&a.m41;
  long long v20 = *(_OWORD *)&a.m43;
  *(_OWORD *)&a.m11 = v35;
  *(_OWORD *)&a.m13 = v34;
  *(_OWORD *)&a.m21 = v33;
  *(_OWORD *)&a.m23 = v32;
  *(_OWORD *)&a.m31 = v31;
  *(_OWORD *)&a.m33 = v30;
  *(_OWORD *)&a.m41 = v29;
  a.CGFloat m43 = m43;
  a.CGFloat m44 = m44;
  *(_OWORD *)&b.m11 = v13;
  *(_OWORD *)&b.m13 = v14;
  *(_OWORD *)&b.m21 = v15;
  *(_OWORD *)&b.m23 = v16;
  *(_OWORD *)&b.m31 = v17;
  *(_OWORD *)&b.m33 = v18;
  *(_OWORD *)&b.m41 = v19;
  *(_OWORD *)&b.CGFloat m43 = v20;
  CATransform3DConcat(&v36, &a, &b);
  CGFloat result = v36.m11;
  long long v22 = *(_OWORD *)&v36.m13;
  long long v23 = *(_OWORD *)&v36.m21;
  long long v24 = *(_OWORD *)&v36.m23;
  long long v25 = *(_OWORD *)&v36.m31;
  long long v26 = *(_OWORD *)&v36.m33;
  long long v27 = *(_OWORD *)&v36.m41;
  long long v28 = *(_OWORD *)&v36.m43;
  *a1 = *(_OWORD *)&v36.m11;
  a1[1] = v22;
  a1[2] = v23;
  a1[3] = v24;
  a1[4] = v25;
  a1[5] = v26;
  a1[6] = v27;
  a1[7] = v28;
  return result;
}

ValueMetadata *type metadata accessor for ArtworkAnimationState()
{
  return &type metadata for ArtworkAnimationState;
}

id sub_1000715F4()
{
  id v0 = objc_allocWithZone((Class)CAMediaTimingFunction);
  LODWORD(v1) = 1046227190;
  LODWORD(v2) = 1058810102;
  LODWORD(v3) = 1052099215;
  LODWORD(v4) = 1.0;
  id result = [v0 initWithControlPoints:v1 :v2 :v3 :v4];
  qword_1000FD040 = (uint64_t)result;
  return result;
}

uint64_t sub_100071650()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100071698()
{
  double v1 = *(void (**)(void))(v0 + 24);
  sub_100071228();
  if (v1) {
    v1();
  }
}

uint64_t sub_1000716DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000716EC()
{
  return swift_release();
}

uint64_t destroy for SchematicHomePodView()
{
  return swift_release();
}

uint64_t initializeWithCopy for SchematicHomePodView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SchematicHomePodView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for SchematicHomePodView(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SchematicHomePodView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SchematicHomePodView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 28)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchematicHomePodView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 28) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SchematicHomePodView()
{
  return &type metadata for SchematicHomePodView;
}

uint64_t sub_100071894()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000718B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, float a5@<S1>)
{
  uint64_t v52 = a2;
  Swift::String v9 = (int *)type metadata accessor for CAImage();
  uint64_t v11 = __chkstk_darwin(v9, v10);
  long long v13 = (uint64_t *)((char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11, v14);
  long long v16 = (char *)&v50 - v15;
  uint64_t v17 = sub_100008614(&qword_1000F8C90);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v53 = (uint64_t)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v21);
  long long v23 = (char *)&v50 - v22;
  unint64_t v24 = 0x80000001000C2AD0;
  unint64_t v25 = 0xD000000000000011;
  switch(a1)
  {
    case 1:
    case 6:
    case 7:
      break;
    case 3:
      unint64_t v24 = 0xEC00000065756C62;
      goto LABEL_7;
    case 4:
      uint64_t v26 = 0x776F6C6C6579;
      goto LABEL_6;
    case 5:
      uint64_t v26 = 0x65676E61726FLL;
LABEL_6:
      unint64_t v24 = v26 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
LABEL_7:
      unint64_t v25 = 0x5F646F70656D6F68;
      break;
    default:
      unint64_t v25 = 0x5F646F70656D6F68;
      unint64_t v24 = 0xED00006574696877;
      break;
  }
  *long long v13 = swift_getKeyPath();
  sub_100008614(&qword_1000F7B40);
  swift_storeEnumTagMultiPayload();
  long long v27 = (char *)v13 + v9[5];
  long long v54 = 0uLL;
  sub_100008614(&qword_1000F8838);
  State.init(wrappedValue:)();
  uint64_t v28 = v58;
  *(_OWORD *)long long v27 = v57;
  *((void *)v27 + 2) = v28;
  long long v29 = (uint64_t *)((char *)v13 + v9[7]);
  *long long v29 = 0;
  v29[1] = 0;
  long long v30 = (unint64_t *)((char *)v13 + v9[6]);
  *long long v30 = v25;
  v30[1] = v24;
  sub_100022F64((uint64_t)v13, (uint64_t)v16);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v31 = v53;
  sub_100022EFC((uint64_t)v16, v53);
  long long v32 = (_OWORD *)(v31 + *(int *)(v17 + 36));
  long long v33 = v55;
  *long long v32 = v54;
  v32[1] = v33;
  v32[2] = v56;
  sub_100039328((uint64_t)v16);
  sub_100071DE0(v31, (uint64_t)v23);
  double v34 = a4 / 176.0;
  if (a4 / 176.0 * 40.0 > a4 / 176.0 * 50.0)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  double v36 = v34 * 10.0;
  double v37 = v34 * 20.0;
  if (v34 * 10.0 > v34 * 20.0)
  {
LABEL_16:
    __break(1u);
    JUMPOUT(0x100071D48);
  }
  uint64_t v51 = v57;
  char v38 = BYTE8(v57);
  uint64_t v39 = v58;
  char v40 = v59;
  double v41 = a5;
  uint64_t v42 = v60;
  uint64_t v43 = v61;
  if (a5 > 0.0)
  {
    if (a5 >= 1.0) {
      double v36 = v37;
    }
    else {
      double v36 = v37 * v41 + v36 * (float)(1.0 - a5);
    }
  }
  uint64_t v44 = static Animation.linear(duration:)();
  uint64_t v45 = v53;
  sub_100071E50((uint64_t)v23, v53);
  sub_100071E50(v45, a3);
  uint64_t v46 = a3 + *(int *)(sub_100008614(&qword_1000FD218) + 48);
  uint64_t v47 = v51;
  uint64_t v48 = v52;
  *(void *)uint64_t v46 = KeyPath;
  *(void *)(v46 + 8) = v48;
  *(void *)(v46 + 16) = v47;
  *(unsigned char *)(v46 + 24) = v38;
  *(void *)(v46 + 32) = v39;
  *(unsigned char *)(v46 + 40) = v40;
  *(void *)(v46 + 48) = v42;
  *(void *)(v46 + 56) = v43;
  *(double *)(v46 + 64) = v41;
  *(double *)(v46 + 72) = v41;
  *(double *)(v46 + 80) = v36;
  *(unsigned char *)(v46 + 88) = 0;
  *(void *)(v46 + 96) = v44;
  *(float *)(v46 + 104) = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100071EB8((uint64_t)v23);
  swift_release();
  swift_release();
  swift_release();
  return sub_100071EB8(v45);
}

uint64_t sub_100071D6C@<X0>(uint64_t *a1@<X8>)
{
  double v3 = *(double *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  float v6 = *(float *)(v1 + 24);
  *a1 = static Alignment.center.getter();
  a1[1] = v7;
  uint64_t v8 = sub_100008614(&qword_1000FD210);
  return sub_1000718B0(v4, v5, (uint64_t)a1 + *(int *)(v8 + 44), v3, v6);
}

uint64_t sub_100071DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008614(&qword_1000F8C90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100071E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008614(&qword_1000F8C90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100071EB8(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000F8C90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100071F1C()
{
  unint64_t result = qword_1000FD220;
  if (!qword_1000FD220)
  {
    sub_100009F40(&qword_1000FD228);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD220);
  }
  return result;
}

uint64_t *sub_100071F78(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  double v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *double v3 = *a2;
    double v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    swift_bridgeObjectRetain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = sub_100008614(&qword_1000F91C0);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t sub_1000720EC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void *sub_1000721BC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  if (v10(v7, 1, v8))
  {
    uint64_t v11 = sub_100008614(&qword_1000F91C0);
    memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

void *sub_1000722E0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100008614(&qword_1000F91C0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

_OWORD *sub_100072478(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_100008614(&qword_1000F91C0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *sub_10007258C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100008614(&qword_1000F91C0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t sub_100072714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100072728);
}

uint64_t sub_10007272C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100072740);
}

uint64_t type metadata accessor for ActivityDisplayContext.TimerDisplayContext(uint64_t a1)
{
  return sub_1000094F4(a1, (uint64_t *)&unk_1000FD288);
}

void sub_100072764()
{
  sub_1000727FC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000727FC()
{
  if (!qword_1000FD298)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000FD298);
    }
  }
}

uint64_t *sub_100072854(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100008614(&qword_1000F91C0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = *(int *)(a3 + 24);
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000729F0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *sub_100072AC4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100008614(&qword_1000F91C0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100072C10(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100008614(&qword_1000F91C0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100072DDC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100008614(&qword_1000F91C0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_100072F0C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100008614(&qword_1000F91C0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000730B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000730CC);
}

uint64_t sub_1000730D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100008614(&qword_1000F91C0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_100073190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000731A4);
}

uint64_t sub_1000731A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_100008614(&qword_1000F91C0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ActivityDisplayContext.CallDisplayContext(uint64_t a1)
{
  return sub_1000094F4(a1, qword_1000FD320);
}

void sub_100073274()
{
  sub_1000727FC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_10007330C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      uint64_t v12 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      int v13 = (char *)a1 + v12;
      int v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for Date();
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      swift_bridgeObjectRetain();
      if (v17(v14, 1, v15))
      {
        uint64_t v18 = sub_100008614(&qword_1000F91C0);
        memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v19 = a2[1];
      *a1 = *a2;
      a1[1] = v19;
      uint64_t v20 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v21 = *(int *)(v20 + 20);
      __dst = (char *)a1 + v21;
      uint64_t v22 = (char *)a2 + v21;
      uint64_t v23 = type metadata accessor for Date();
      uint64_t v24 = *(void *)(v23 - 8);
      unint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
      swift_bridgeObjectRetain();
      if (v25(v22, 1, v23))
      {
        uint64_t v26 = sub_100008614(&qword_1000F91C0);
        memcpy(__dst, v22, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(__dst, v22, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
      }
      uint64_t v27 = *(int *)(v20 + 24);
      uint64_t v28 = (uint64_t *)((char *)a1 + v27);
      long long v29 = (uint64_t *)((char *)a2 + v27);
      uint64_t v30 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v30;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100073630(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v4 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v4 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v3, 1, v4);
    if (!result)
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
      return v8(v3, v4);
    }
  }
  else
  {
    if (result == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = a1 + *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20);
      uint64_t v6 = type metadata accessor for Date();
      uint64_t v7 = *(void *)(v6 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
      }
    }
    else if (result)
    {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100073800(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for Date();
      uint64_t v13 = *(void *)(v12 - 8);
      int v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
      swift_bridgeObjectRetain();
      if (v14(v11, 1, v12))
      {
        uint64_t v15 = sub_100008614(&qword_1000F91C0);
        memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      goto LABEL_14;
    case 1:
      uint64_t v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      uint64_t v17 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v18 = *(int *)(v17 + 20);
      __dst = (char *)a1 + v18;
      uint64_t v19 = (char *)a2 + v18;
      uint64_t v20 = type metadata accessor for Date();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
      swift_bridgeObjectRetain();
      if (v22(v19, 1, v20))
      {
        uint64_t v23 = sub_100008614(&qword_1000F91C0);
        memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
      }
      uint64_t v24 = *(int *)(v17 + 24);
      unint64_t v25 = (void *)((char *)a1 + v24);
      uint64_t v26 = (void *)((char *)a2 + v24);
      uint64_t v27 = v26[1];
      *unint64_t v25 = *v26;
      v25[1] = v27;
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 0:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
LABEL_14:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *sub_100073AD8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10007B30C((uint64_t)a1, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v7 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = type metadata accessor for Date();
        uint64_t v11 = *(void *)(v10 - 8);
        uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
        swift_bridgeObjectRetain();
        if (v12(v9, 1, v10))
        {
          uint64_t v13 = sub_100008614(&qword_1000F91C0);
          memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        }
        goto LABEL_14;
      case 1:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v14 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
        uint64_t v15 = *(int *)(v14 + 20);
        __dst = (char *)a1 + v15;
        uint64_t v16 = (char *)a2 + v15;
        uint64_t v17 = type metadata accessor for Date();
        uint64_t v18 = *(void *)(v17 - 8);
        uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
        swift_bridgeObjectRetain();
        if (v19(v16, 1, v17))
        {
          uint64_t v20 = sub_100008614(&qword_1000F91C0);
          memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
        }
        uint64_t v21 = *(int *)(v14 + 24);
        uint64_t v22 = (void *)((char *)a1 + v21);
        uint64_t v23 = (void *)((char *)a2 + v21);
        *uint64_t v22 = *v23;
        v22[1] = v23[1];
        swift_bridgeObjectRetain();
        goto LABEL_14;
      case 0:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
LABEL_14:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata accessor for ActivityDisplayContext.DynamicTextScheme(uint64_t a1)
{
  return sub_1000094F4(a1, qword_1000FD3D0);
}

_OWORD *sub_100073E14(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v14 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_100008614(&qword_1000F91C0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    uint64_t v7 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v8 = *(int *)(v7 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_100008614(&qword_1000F91C0);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
    goto LABEL_11;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *sub_100074098(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10007B30C((uint64_t)a1, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v14 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      uint64_t v17 = type metadata accessor for Date();
      uint64_t v18 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        uint64_t v19 = sub_100008614(&qword_1000F91C0);
        memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v7 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = sub_100008614(&qword_1000F91C0);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
      goto LABEL_12;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_100074340()
{
  uint64_t result = type metadata accessor for ActivityDisplayContext.CallDisplayContext(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_100074410(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v4;
  }
  *(void *)a1 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  uint64_t v7 = (void *)a2[5];
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)((char *)a2 + v8);
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v7;
  uint64_t v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  swift_bridgeObjectRetain();
  id v12 = v7;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v65 = v11;
    uint64_t v17 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v17;
    uint64_t v18 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    __dst = (char *)v9 + v18;
    uint64_t v19 = (char *)v10 + v18;
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    if (v22(v19, 1, v20))
    {
      uint64_t v23 = sub_100008614(&qword_1000F91C0);
      memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    uint64_t v11 = v65;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v66 = v11;
    uint64_t v24 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v24;
    uint64_t v25 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v26 = *(int *)(v25 + 20);
    uint64_t v61 = v25;
    __dstCATransform3D a = (char *)v9 + v26;
    uint64_t v60 = (char *)v10 + v26;
    uint64_t v27 = type metadata accessor for Date();
    uint64_t v28 = *(void *)(v27 - 8);
    long long v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain();
    if (v29(v60, 1, v27))
    {
      uint64_t v30 = sub_100008614(&qword_1000F91C0);
      memcpy(__dsta, v60, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dsta, v60, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dsta, 0, 1, v27);
    }
    uint64_t v31 = *(int *)(v61 + 24);
    long long v32 = (void *)((char *)v9 + v31);
    long long v33 = (void *)((char *)v10 + v31);
    uint64_t v34 = v33[1];
    *long long v32 = *v33;
    v32[1] = v34;
    swift_bridgeObjectRetain();
    uint64_t v11 = v66;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
      goto LABEL_18;
    }
    uint64_t v14 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v14;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_18:
  uint64_t v35 = *(int *)(a3 + 36);
  double v36 = (void *)((char *)v4 + v35);
  double v37 = (uint64_t *)((char *)a2 + v35);
  int v38 = swift_getEnumCaseMultiPayload();
  if (v38 == 2)
  {
    uint64_t v40 = v37[1];
    *double v36 = *v37;
    v36[1] = v40;
    uint64_t v41 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v42 = (char *)v36 + v41;
    uint64_t v43 = (char *)v37 + v41;
    uint64_t v44 = type metadata accessor for Date();
    uint64_t v45 = *(void *)(v44 - 8);
    uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    swift_bridgeObjectRetain();
    if (v46(v43, 1, v44))
    {
      uint64_t v47 = sub_100008614(&qword_1000F91C0);
      memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
    }
    swift_storeEnumTagMultiPayload();
  }
  else if (v38 == 1)
  {
    uint64_t v48 = v37[1];
    *double v36 = *v37;
    v36[1] = v48;
    uint64_t v49 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v50 = *(int *)(v49 + 20);
    __dstCATransform3D b = (char *)v36 + v50;
    uint64_t v51 = (char *)v37 + v50;
    uint64_t v52 = type metadata accessor for Date();
    uint64_t v53 = *(void *)(v52 - 8);
    long long v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
    swift_bridgeObjectRetain();
    if (v54(v51, 1, v52))
    {
      uint64_t v55 = sub_100008614(&qword_1000F91C0);
      memcpy(__dstb, v51, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(__dstb, v51, v52);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(__dstb, 0, 1, v52);
    }
    uint64_t v56 = *(int *)(v49 + 24);
    long long v57 = (void *)((char *)v36 + v56);
    uint64_t v58 = (void *)((char *)v37 + v56);
    uint64_t v59 = v58[1];
    *long long v57 = *v58;
    v57[1] = v59;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (v38)
  {
    memcpy(v36, v37, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v39 = v37[1];
    *double v36 = *v37;
    v36[1] = v39;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return v4;
}

uint64_t sub_100074A3C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();

  uint64_t v4 = a1 + *(int *)(a2 + 32);
  type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = v4 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    }
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = v4 + *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20);
      uint64_t v10 = type metadata accessor for Date();
      uint64_t v11 = *(void *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
      }
    }
    else if (EnumCaseMultiPayload)
    {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
LABEL_10:
  uint64_t v12 = a1 + *(int *)(a2 + 36);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = v12 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v15 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v14, 1, v15);
    if (!result)
    {
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v20 + 8);
      return v19(v14, v15);
    }
  }
  else
  {
    if (result == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = v12 + *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20);
      uint64_t v17 = type metadata accessor for Date();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
    }
    else if (result)
    {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100074DAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3 = a3;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  swift_bridgeObjectRetain();
  id v11 = v6;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v14 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v14;
    uint64_t v15 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    __dst = (char *)v8 + v15;
    uint64_t v16 = (char *)v9 + v15;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain();
    if (v19(v16, 1, v17))
    {
      uint64_t v20 = sub_100008614(&qword_1000F91C0);
      memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v59 = v10;
    uint64_t v63 = v3;
    uint64_t v21 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v21;
    uint64_t v58 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v22 = *(int *)(v58 + 20);
    __dstCATransform3D a = (char *)v8 + v22;
    uint64_t v23 = (char *)v9 + v22;
    uint64_t v24 = type metadata accessor for Date();
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    swift_bridgeObjectRetain();
    if (v26(v23, 1, v24))
    {
      uint64_t v27 = sub_100008614(&qword_1000F91C0);
      memcpy(__dsta, v23, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dsta, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dsta, 0, 1, v24);
    }
    uint64_t v3 = v63;
    uint64_t v10 = v59;
    uint64_t v28 = *(int *)(v58 + 24);
    long long v29 = (void *)((char *)v8 + v28);
    uint64_t v30 = (void *)((char *)v9 + v28);
    uint64_t v31 = v30[1];
    *long long v29 = *v30;
    v29[1] = v31;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      goto LABEL_14;
    }
    uint64_t v13 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v13;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_14:
  uint64_t v32 = v3[9];
  long long v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  int v35 = swift_getEnumCaseMultiPayload();
  switch(v35)
  {
    case 2:
      uint64_t v37 = v34[1];
      *long long v33 = *v34;
      v33[1] = v37;
      uint64_t v38 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      uint64_t v39 = (char *)v33 + v38;
      uint64_t v40 = (char *)v34 + v38;
      uint64_t v41 = type metadata accessor for Date();
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
      swift_bridgeObjectRetain();
      if (v43(v40, 1, v41))
      {
        uint64_t v44 = sub_100008614(&qword_1000F91C0);
        memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      goto LABEL_26;
    case 1:
      uint64_t v45 = v34[1];
      *long long v33 = *v34;
      v33[1] = v45;
      uint64_t v46 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v47 = *(int *)(v46 + 20);
      __dstCATransform3D b = (int *)v46;
      uint64_t v64 = (char *)v33 + v47;
      uint64_t v48 = (char *)v34 + v47;
      uint64_t v49 = type metadata accessor for Date();
      uint64_t v50 = *(void *)(v49 - 8);
      uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      swift_bridgeObjectRetain();
      if (v51(v48, 1, v49))
      {
        uint64_t v52 = sub_100008614(&qword_1000F91C0);
        memcpy(v64, v48, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v64, v48, v49);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v64, 0, 1, v49);
      }
      uint64_t v53 = __dstb[6];
      long long v54 = (void *)((char *)v33 + v53);
      uint64_t v55 = (void *)((char *)v34 + v53);
      uint64_t v56 = v55[1];
      void *v54 = *v55;
      v54[1] = v56;
      swift_bridgeObjectRetain();
      goto LABEL_26;
    case 0:
      uint64_t v36 = v34[1];
      *long long v33 = *v34;
      v33[1] = v36;
      swift_bridgeObjectRetain();
LABEL_26:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(v33, v34, *(void *)(*(void *)(v10 - 8) + 64));
  return a1;
}

uint64_t sub_100075380(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = (void *)a2[5];
  *(void *)(a1 + 40) = v8;
  id v9 = v8;

  if ((uint64_t *)a1 == a2) {
    return a1;
  }
  uint64_t v10 = *(int *)(a3 + 32);
  id v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)((char *)a2 + v10);
  sub_10007B30C(a1 + v10, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  uint64_t v13 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v58 = v13;
      *id v11 = *v12;
      v11[1] = v12[1];
      uint64_t v15 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      __dst = (char *)v11 + v15;
      uint64_t v16 = (char *)v12 + v15;
      uint64_t v17 = type metadata accessor for Date();
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      swift_bridgeObjectRetain();
      if (v19(v16, 1, v17))
      {
        uint64_t v20 = sub_100008614(&qword_1000F91C0);
        memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
      }
      uint64_t v13 = v58;
      goto LABEL_15;
    case 1:
      uint64_t v53 = a3;
      uint64_t v59 = v13;
      *id v11 = *v12;
      v11[1] = v12[1];
      uint64_t v21 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v22 = *(int *)(v21 + 20);
      long long v54 = (char *)v11 + v22;
      __dstCATransform3D a = (int *)v21;
      uint64_t v23 = (char *)v12 + v22;
      uint64_t v24 = type metadata accessor for Date();
      uint64_t v25 = *(void *)(v24 - 8);
      uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
      swift_bridgeObjectRetain();
      if (v26(v23, 1, v24))
      {
        uint64_t v27 = sub_100008614(&qword_1000F91C0);
        memcpy(v54, v23, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v54, v23, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v54, 0, 1, v24);
      }
      a3 = v53;
      uint64_t v28 = __dsta[6];
      long long v29 = (void *)((char *)v11 + v28);
      uint64_t v30 = (void *)((char *)v12 + v28);
      *long long v29 = *v30;
      v29[1] = v30[1];
      swift_bridgeObjectRetain();
      uint64_t v13 = v59;
      goto LABEL_15;
    case 0:
      *id v11 = *v12;
      v11[1] = v12[1];
      swift_bridgeObjectRetain();
LABEL_15:
      swift_storeEnumTagMultiPayload();
      goto LABEL_16;
  }
  memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
LABEL_16:
  uint64_t v31 = *(int *)(a3 + 36);
  uint64_t v32 = (void *)(a1 + v31);
  long long v33 = (uint64_t *)((char *)a2 + v31);
  sub_10007B30C(a1 + v31, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  int v34 = swift_getEnumCaseMultiPayload();
  switch(v34)
  {
    case 2:
      *uint64_t v32 = *v33;
      v32[1] = v33[1];
      uint64_t v35 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      uint64_t v36 = (char *)v32 + v35;
      uint64_t v37 = (char *)v33 + v35;
      uint64_t v38 = type metadata accessor for Date();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      swift_bridgeObjectRetain();
      if (v40(v37, 1, v38))
      {
        uint64_t v41 = sub_100008614(&qword_1000F91C0);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      goto LABEL_28;
    case 1:
      *uint64_t v32 = *v33;
      v32[1] = v33[1];
      uint64_t v42 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v43 = *(int *)(v42 + 20);
      __dstCATransform3D b = (char *)v32 + v43;
      uint64_t v44 = (char *)v33 + v43;
      uint64_t v45 = type metadata accessor for Date();
      uint64_t v46 = *(void *)(v45 - 8);
      uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
      swift_bridgeObjectRetain();
      if (v47(v44, 1, v45))
      {
        uint64_t v48 = sub_100008614(&qword_1000F91C0);
        memcpy(__dstb, v44, *(void *)(*(void *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(__dstb, v44, v45);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(__dstb, 0, 1, v45);
      }
      uint64_t v49 = *(int *)(v42 + 24);
      uint64_t v50 = (void *)((char *)v32 + v49);
      uint64_t v51 = (void *)((char *)v33 + v49);
      *uint64_t v50 = *v51;
      v50[1] = v51[1];
      swift_bridgeObjectRetain();
      goto LABEL_28;
    case 0:
      *uint64_t v32 = *v33;
      v32[1] = v33[1];
      swift_bridgeObjectRetain();
LABEL_28:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(v32, v33, *(void *)(*(void *)(v13 - 8) + 64));
  return a1;
}

uint64_t sub_1000759F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (_OWORD *)(a1 + v6);
  uint64_t v8 = (_OWORD *)(a2 + v6);
  uint64_t v9 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *uint64_t v7 = *v8;
    uint64_t v17 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v18 = (char *)v7 + v17;
    uint64_t v19 = (char *)v8 + v17;
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = sub_100008614(&qword_1000F91C0);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
      goto LABEL_12;
    }
    *uint64_t v7 = *v8;
    uint64_t v11 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v12 = *(int *)(v11 + 20);
    __dst = (char *)v7 + v12;
    uint64_t v13 = (char *)v8 + v12;
    uint64_t v14 = type metadata accessor for Date();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = sub_100008614(&qword_1000F91C0);
      memcpy(__dst, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    *(_OWORD *)((char *)v7 + *(int *)(v11 + 24)) = *(_OWORD *)((char *)v8 + *(int *)(v11 + 24));
  }
  swift_storeEnumTagMultiPayload();
LABEL_12:
  uint64_t v23 = *(int *)(a3 + 36);
  uint64_t v24 = (_OWORD *)(a1 + v23);
  uint64_t v25 = (_OWORD *)(a2 + v23);
  int v26 = swift_getEnumCaseMultiPayload();
  if (v26 == 2)
  {
    *uint64_t v24 = *v25;
    uint64_t v34 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v35 = (char *)v24 + v34;
    uint64_t v36 = (char *)v25 + v34;
    uint64_t v37 = type metadata accessor for Date();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = sub_100008614(&qword_1000F91C0);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
LABEL_22:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (v26 == 1)
  {
    *uint64_t v24 = *v25;
    uint64_t v27 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v28 = *(int *)(v27 + 20);
    long long v29 = (char *)v24 + v28;
    uint64_t v30 = (char *)v25 + v28;
    uint64_t v31 = type metadata accessor for Date();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = sub_100008614(&qword_1000F91C0);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    *(_OWORD *)((char *)v24 + *(int *)(v27 + 24)) = *(_OWORD *)((char *)v25 + *(int *)(v27 + 24));
    goto LABEL_22;
  }
  memcpy(v24, v25, *(void *)(*(void *)(v9 - 8) + 64));
  return a1;
}

uint64_t sub_100075F28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  if (a1 == a2) {
    return a1;
  }
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  sub_10007B30C(a1 + v7, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  uint64_t v10 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *uint64_t v8 = *v9;
    uint64_t v18 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v19 = (char *)v8 + v18;
    uint64_t v20 = (char *)v9 + v18;
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_100008614(&qword_1000F91C0);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
LABEL_12:
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v8 = *v9;
    uint64_t v12 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v13 = *(int *)(v12 + 20);
    __dst = (char *)v8 + v13;
    uint64_t v14 = (char *)v9 + v13;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_100008614(&qword_1000F91C0);
      memcpy(__dst, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_OWORD *)((char *)v8 + *(int *)(v12 + 24)) = *(_OWORD *)((char *)v9 + *(int *)(v12 + 24));
    goto LABEL_12;
  }
  memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
LABEL_13:
  uint64_t v24 = *(int *)(a3 + 36);
  uint64_t v25 = (_OWORD *)(a1 + v24);
  int v26 = (_OWORD *)(a2 + v24);
  sub_10007B30C(a1 + v24, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  int v27 = swift_getEnumCaseMultiPayload();
  if (v27 == 2)
  {
    *uint64_t v25 = *v26;
    uint64_t v35 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v36 = (char *)v25 + v35;
    uint64_t v37 = (char *)v26 + v35;
    uint64_t v38 = type metadata accessor for Date();
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = sub_100008614(&qword_1000F91C0);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
LABEL_23:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (v27 == 1)
  {
    *uint64_t v25 = *v26;
    uint64_t v28 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v29 = *(int *)(v28 + 20);
    uint64_t v30 = (char *)v25 + v29;
    uint64_t v31 = (char *)v26 + v29;
    uint64_t v32 = type metadata accessor for Date();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = sub_100008614(&qword_1000F91C0);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    *(_OWORD *)((char *)v25 + *(int *)(v28 + 24)) = *(_OWORD *)((char *)v26 + *(int *)(v28 + 24));
    goto LABEL_23;
  }
  memcpy(v25, v26, *(void *)(*(void *)(v10 - 8) + 64));
  return a1;
}

uint64_t sub_1000764AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000764C0);
}

uint64_t sub_1000764C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100076570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100076584);
}

uint64_t sub_100076584(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ActivityDisplayContext(uint64_t a1)
{
  return sub_1000094F4(a1, qword_1000FD460);
}

uint64_t sub_10007664C()
{
  uint64_t result = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100076704(void *a1)
{
  v46._uint64_t countAndFlagsBits = type metadata accessor for ActivityDisplayContext(0);
  sub_100008614(&qword_1000F9728);
  uint64_t v2 = String.init<A>(describing:)();
  unint64_t v4 = v3;
  uint64_t v44 = v2;
  uint64_t v45 = v3;
  sub_10000AEFC(a1, a1[3]);
  uint64_t DynamicType = swift_getDynamicType();
  if (swift_isClassType()) {
    uint64_t v6 = DynamicType;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = a1[3];
    uint64_t v8 = sub_10000AEFC(a1, v7);
    uint64_t v9 = *(void *)(v7 - 8);
    __chkstk_darwin(v8, v8);
    uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    uint64_t v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    swift_unknownObjectRelease();
    v46._uint64_t countAndFlagsBits = 0;
    v46._object = (void *)0xE000000000000000;
    v13._uint64_t countAndFlagsBits = 32;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    uint64_t v43 = v12;
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    uint64_t v2 = v44;
    unint64_t v4 = v45;
  }
  v46._uint64_t countAndFlagsBits = 60;
  v46._object = (void *)0xE100000000000000;
  v14._uint64_t countAndFlagsBits = v2;
  v14._object = v4;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = 62;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v46._countAndFlagsBits;
  object = v46._object;
  uint64_t v18 = sub_100076AE8((uint64_t)a1);
  int64_t v19 = (int64_t)v18[2];
  if (v19)
  {
    uint64_t v34 = countAndFlagsBits;
    uint64_t v35 = object;
    v46._uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
    sub_10007B6E8(0, v19, 0);
    uint64_t v20 = (int8x8_t *)v46._countAndFlagsBits;
    v33[1] = v18;
    uint64_t v21 = v18 + 7;
    long long v36 = xmmword_1000AF6A0;
    do
    {
      int8x8_t v23 = v21[-3];
      int8x8_t v22 = v21[-2];
      int8x8_t v24 = v21[-1];
      int8x8_t v25 = *v21;
      sub_100008614(&qword_1000FBD28);
      uint64_t v26 = swift_allocObject();
      *(_OWORD *)(v26 + 16) = v36;
      *(int8x8_t *)(v26 + 32) = v23;
      *(int8x8_t *)(v26 + 40) = v22;
      *(int8x8_t *)(v26 + 48) = v24;
      *(int8x8_t *)(v26 + 56) = v25;
      v46._uint64_t countAndFlagsBits = (uint64_t)v20;
      unint64_t v27 = (unint64_t)v20[2];
      unint64_t v28 = (unint64_t)v20[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v27 >= v28 >> 1)
      {
        sub_10007B6E8(v28 > 1, v27 + 1, 1);
        uint64_t v20 = (int8x8_t *)v46._countAndFlagsBits;
      }
      v21 += 4;
      v20[2] = (int8x8_t)(v27 + 1);
      v20[v27 + 4] = (int8x8_t)v26;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v34;
    object = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = _swiftEmptyArrayStorage;
  }
  v46._uint64_t countAndFlagsBits = countAndFlagsBits;
  v46._object = object;
  uint64_t v47 = 0;
  uint64_t v48 = v20;
  uint64_t v49 = 0;
  uint64_t v29 = sub_100067848(2128928, 0xE300000000000000, 0, 1);
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = v29;
  uint64_t v42 = v31;
  uint64_t v39 = 10;
  unint64_t v40 = 0xE100000000000000;
  uint64_t v37 = 2105354;
  unint64_t v38 = 0xE300000000000000;
  sub_10007B708();
  sub_10007B75C();
  RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)();
  swift_bridgeObjectRelease();
  return v43;
}

int8x8_t *sub_100076AE8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Mirror();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E724(a1, (uint64_t)v22);
  Mirror.init(reflecting:)();
  uint64_t v7 = Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  uint64_t v20 = v7;
  swift_release();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  if (*((void *)&v23 + 1))
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    do
    {
      v21[0] = v22[0];
      v21[1] = v22[1];
      v21[2] = v23;
      uint64_t v10 = sub_100076D20((uint64_t *)v21);
      int8x8_t v12 = v11;
      int8x8_t v14 = v13;
      int8x8_t v16 = v15;
      sub_10000EC04((uint64_t)v21, &qword_1000FD5F8);
      if (v12)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = sub_1000691B0(0, *(void *)&v8[2] + 1, 1, v8);
        }
        unint64_t v18 = (unint64_t)v8[2];
        unint64_t v17 = (unint64_t)v8[3];
        if (v18 >= v17 >> 1) {
          uint64_t v8 = sub_1000691B0((int8x8_t *)(v17 > 1), v18 + 1, 1, v8);
        }
        void v8[2] = (int8x8_t)(v18 + 1);
        uint64_t v9 = &v8[4 * v18];
        _OWORD v9[4] = (int8x8_t)v10;
        v9[5] = v12;
        v9[6] = v14;
        v9[7] = v16;
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
    }
    while (*((void *)&v23 + 1));
  }
  else
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
  swift_release();
  swift_release();
  return v8;
}

uint64_t sub_100076D20(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (uint64_t)(a1 + 2);
  *(void *)&long long v21 = *a1;
  *((void *)&v21 + 1) = v3;
  sub_10000E724((uint64_t)(a1 + 2), (uint64_t)v22);
  if (v3)
  {
    *(void *)&long long v17 = v2;
    *((void *)&v17 + 1) = v3;
    v16[0] = 0xD000000000000012;
    v16[1] = 0x80000001000C2AF0;
    sub_10007B75C();
    Collection<>.trimmingPrefix<A>(_:)();
    sub_10000AF94((uint64_t)v22);
    uint64_t v5 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000AF94((uint64_t)v22);
    uint64_t v5 = 63;
  }
  String.lowercased()();
  v6._uint64_t countAndFlagsBits = 0x736B736174;
  v6._object = (void *)0xE500000000000000;
  Swift::Bool v7 = String.hasSuffix(_:)(v6);
  swift_bridgeObjectRelease();
  if (v7)
  {
    long long v21 = *(_OWORD *)a1;
    sub_10000E724(v4, (uint64_t)v22);
    sub_100008614(&qword_1000FD610);
    if (swift_dynamicCast())
    {
      sub_100034254(&v17, (uint64_t)v20);
      *(void *)&long long v21 = 40;
      *((void *)&v21 + 1) = 0xE100000000000000;
      sub_10000AEFC(v20, v20[3]);
      *(void *)&long long v17 = dispatch thunk of Collection.count.getter();
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 41;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
LABEL_14:
      sub_10000AF94((uint64_t)v20);
      return v5;
    }
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    sub_10000EC04((uint64_t)&v17, &qword_1000FD618);
  }
  long long v21 = *(_OWORD *)a1;
  sub_10000E724(v4, (uint64_t)v22);
  sub_100008614(&qword_1000FD600);
  if (swift_dynamicCast())
  {
    sub_100034254(&v17, (uint64_t)v20);
    v16[5] = 0;
    v16[6] = 0xE000000000000000;
    sub_100013224((uint64_t)v20, (uint64_t)&v21);
    sub_1000210BC((uint64_t)&v21, (uint64_t)&v17, &qword_1000FD608);
    if (*((void *)&v18 + 1))
    {
      sub_100034254(&v17, (uint64_t)v16);
      sub_100013224((uint64_t)v16, (uint64_t)&v15);
      uint64_t v10 = String.init<A>(describing:)();
      int8x8_t v12 = v11;
      sub_10000AF94((uint64_t)v16);
    }
    else
    {
      int8x8_t v12 = (void *)0xE300000000000000;
      uint64_t v10 = 7104878;
    }
    sub_10000EC04((uint64_t)&v21, &qword_1000FD608);
    v13._uint64_t countAndFlagsBits = v10;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  sub_10000EC04((uint64_t)&v17, &qword_1000FD608);
  *(void *)&long long v21 = 0;
  *((void *)&v21 + 1) = 0xE000000000000000;
  _print_unlocked<A, B>(_:_:)();
  return v5;
}

uint64_t sub_1000770A0()
{
  uint64_t v1 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  __chkstk_darwin(v5 - 8, v6);
  Swift::String v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  __chkstk_darwin(v9, v10);
  int8x8_t v12 = (uint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for ActivityDisplayContext(0);
  sub_10007B3C0(v0 + *(int *)(v13 + 32), (uint64_t)v12, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10007B5CC((uint64_t)v12, (uint64_t)v8, type metadata accessor for ActivityDisplayContext.CallDisplayContext);
      uint64_t v14 = sub_100078818();
      uint64_t v16 = v15;
      sub_10007B30C((uint64_t)v8, type metadata accessor for ActivityDisplayContext.CallDisplayContext);
      if (!v16) {
        goto LABEL_6;
      }
      break;
    case 2u:
      sub_10007B5CC((uint64_t)v12, (uint64_t)v4, type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
      uint64_t v14 = sub_100078BBC();
      uint64_t v18 = v17;
      sub_10007B30C((uint64_t)v4, type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
      if (!v18) {
        goto LABEL_6;
      }
      break;
    case 3u:
LABEL_6:
      id v19 = [self localizedStringForKey:10];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      swift_bridgeObjectRelease();

      break;
    default:
      uint64_t v14 = *v12;
      break;
  }
  return v14;
}

uint64_t sub_100077304()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (uint64_t *)((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10007B3C0(v1, (uint64_t)v13, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  uint64_t v14 = 0;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_10007B5CC((uint64_t)v13, (uint64_t)v9, type metadata accessor for ActivityDisplayContext.CallDisplayContext);
      uint64_t v14 = sub_100078818();
      uint64_t v15 = type metadata accessor for ActivityDisplayContext.CallDisplayContext;
      uint64_t v16 = (uint64_t)v9;
      goto LABEL_5;
    case 2u:
      sub_10007B5CC((uint64_t)v13, (uint64_t)v5, type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
      uint64_t v14 = sub_100078BBC();
      uint64_t v15 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext;
      uint64_t v16 = (uint64_t)v5;
LABEL_5:
      sub_10007B30C(v16, v15);
      break;
    case 3u:
      return v14;
    default:
      uint64_t v14 = *v13;
      break;
  }
  return v14;
}

uint64_t sub_100077518()
{
  uint64_t v1 = sub_100008614(&qword_1000FD638);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100008614(&qword_1000FD640);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000FD648);
  uint64_t v41 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v39 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100008614(&qword_1000FD650);
  uint64_t v42 = *(void *)(v13 - 8);
  uint64_t v43 = v13;
  __chkstk_darwin(v13, v14);
  unint64_t v40 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  uint64_t v38 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v38 + 64);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v21);
  long long v23 = (char *)&v37 - v22;
  uint64_t v44 = v0;
  sub_10007B3C0(v0, (uint64_t)&v37 - v22, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    if (!EnumCaseMultiPayload) {
      sub_10007B30C((uint64_t)v23, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    }
    uint64_t v45 = sub_100077304();
    uint64_t v46 = v35;
    sub_100008614(&qword_1000F8838);
    Just.init(_:)();
    sub_100012908(&qword_1000FD690, &qword_1000FD638);
    uint64_t v34 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  else
  {
    sub_10007B30C((uint64_t)v23, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    sub_10007C248();
    id v25 = [self mainRunLoop];
    uint64_t v26 = type metadata accessor for NSRunLoop.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v9, 1, 1, v26);
    uint64_t v27 = static NSTimer.publish(every:tolerance:on:in:options:)();

    sub_10000EC04((uint64_t)v9, &qword_1000FD640);
    uint64_t v45 = v27;
    type metadata accessor for NSTimer.TimerPublisher();
    sub_10007B25C(&qword_1000FD660, (void (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher);
    uint64_t v28 = ConnectablePublisher.autoconnect()();
    swift_release();
    uint64_t v45 = v28;
    sub_100008614(&qword_1000FD668);
    type metadata accessor for Date();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1000B01B0;
    Date.init()();
    sub_100008614(&qword_1000FD670);
    sub_100012908(&qword_1000FD678, &qword_1000FD670);
    uint64_t v29 = v39;
    Publisher.prepend(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    sub_10007B3C0(v44, (uint64_t)v20, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    unint64_t v30 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
    uint64_t v31 = swift_allocObject();
    sub_10007B5CC((uint64_t)v20, v31 + v30, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    sub_100008614(&qword_1000F8838);
    sub_100012908(&qword_1000FD680, &qword_1000FD648);
    uint64_t v32 = v40;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v10);
    sub_100012908(&qword_1000FD688, &qword_1000FD650);
    uint64_t v33 = v43;
    uint64_t v34 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v32, v33);
  }
  return v34;
}

uint64_t sub_100077C08@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[1];
  if (v4)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = v4;
  }
  else
  {
    id v7 = [self localizedStringForKey:10];
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v8;
  }
  *a2 = v5;
  a2[1] = v6;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100077C98(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100008614(&qword_1000FD5B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10007B634();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = *((unsigned char *)v3 + 8);
  uint64_t v12 = *v3;
  char v13 = v10;
  char v14 = 0;
  type metadata accessor for PCActivityType(0);
  sub_10007B25C(&qword_1000FD5B8, type metadata accessor for PCActivityType);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v12 = v3[2];
    char v14 = 1;
    type metadata accessor for PCActivityAssetType(0);
    sub_10007B25C(&qword_1000FD5C0, type metadata accessor for PCActivityAssetType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = v3[5];
    char v14 = 3;
    sub_100008614(&qword_1000FD598);
    sub_100012908(&qword_1000FD5C8, &qword_1000FD598);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for ActivityDisplayContext(0);
    LOBYTE(v12) = 4;
    type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
    sub_10007B25C(&qword_1000FD5D0, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void sub_100077FFC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  char v10 = (char *)&v27 - v9;
  uint64_t v11 = sub_100008614(&qword_1000FD578);
  uint64_t v30 = *(void *)(v11 - 8);
  uint64_t v31 = v11;
  __chkstk_darwin(v11, v12);
  char v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v18 + 5) = 0;
  uint64_t v19 = a1[3];
  uint64_t v33 = a1;
  sub_10000AEFC(a1, v19);
  sub_10007B634();
  uint64_t v32 = v14;
  uint64_t v20 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20)
  {
    sub_10000AF94((uint64_t)v33);
  }
  else
  {
    uint64_t v34 = v7;
    uint64_t v21 = v30;
    type metadata accessor for PCActivityType(0);
    char v37 = 0;
    sub_10007B25C(&qword_1000FD588, type metadata accessor for PCActivityType);
    uint64_t v22 = v31;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v23 = v36;
    *(void *)uint64_t v18 = v35;
    void v18[8] = v23;
    type metadata accessor for PCActivityAssetType(0);
    char v37 = 1;
    sub_10007B25C(&qword_1000FD590, type metadata accessor for PCActivityAssetType);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((void *)v18 + 2) = v35;
    LOBYTE(v35) = 2;
    uint64_t v24 = v21;
    *((void *)v18 + 3) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v18 + 4) = v25;
    sub_100008614(&qword_1000FD598);
    char v37 = 3;
    sub_100012908(&qword_1000FD5A0, &qword_1000FD598);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((void *)v18 + 5) = v35;
    LOBYTE(v35) = 4;
    sub_10007B25C(&qword_1000FD5A8, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    uint64_t v28 = v10;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_10007B5CC((uint64_t)v28, (uint64_t)&v18[*(int *)(v15 + 32)], type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    LOBYTE(v35) = 5;
    uint64_t v26 = (uint64_t)v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v32, v22);
    sub_10007B5CC(v26, (uint64_t)&v18[*(int *)(v15 + 36)], type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    sub_10007B3C0((uint64_t)v18, v29, type metadata accessor for ActivityDisplayContext);
    sub_10000AF94((uint64_t)v33);
    sub_10007B30C((uint64_t)v18, type metadata accessor for ActivityDisplayContext);
  }
}

unint64_t sub_100078580()
{
  unint64_t result = 0x7974697669746361;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x7079547465737361;
      break;
    case 2:
      unint64_t result = 0x614E656369766564;
      break;
    case 3:
      unint64_t result = 0x6461654864726163;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0x74786554746E6968;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100078674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007D334(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007869C(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1000786A8(uint64_t a1)
{
  unint64_t v2 = sub_10007B634();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000786E4(uint64_t a1)
{
  unint64_t v2 = sub_10007B634();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100078720(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100078738(void *a1)
{
  return sub_100077C98(a1);
}

uint64_t sub_100078750(uint64_t a1)
{
  v5[3] = a1;
  unint64_t v2 = sub_100020730(v5);
  sub_10007B3C0(v1, (uint64_t)v2, type metadata accessor for ActivityDisplayContext);
  uint64_t v3 = sub_100076704(v5);
  sub_10000AF94((uint64_t)v5);
  return v3;
}

uint64_t sub_1000787C0(uint64_t a1)
{
  uint64_t result = sub_10007B25C(&qword_1000FD4A8, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100078818()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100008614(&qword_1000F91C0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  char v14 = (char *)v37 - v13;
  uint64_t v15 = v1[1];
  if (!v15)
  {
    id v20 = sub_10006A66C();
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 ulog:60 message:v21];

    uint64_t v22 = *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 24);
LABEL_9:
    uint64_t v33 = *(uint64_t *)((char *)v1 + v22);
    swift_bridgeObjectRetain();
    return v33;
  }
  uint64_t v16 = *v1;
  uint64_t v17 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  sub_1000210BC((uint64_t)v1 + *(int *)(v17 + 20), (uint64_t)v5, &qword_1000F91C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10000EC04((uint64_t)v5, &qword_1000F91C0);
    id v18 = sub_10006A66C();
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 ulog:60 message:v19];

LABEL_8:
    uint64_t v22 = *(int *)(v17 + 24);
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v5, v6);
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v24 = v23;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v7 + 8);
  v25(v11, v6);
  id v26 = [self formattedDurationFor:v24];
  if (!v26)
  {
    id v34 = sub_10006A66C();
    NSString v35 = String._bridgeToObjectiveC()();
    [v34 ulog:60 message:v35];

    v25(v14, v6);
    goto LABEL_8;
  }
  uint64_t v27 = v26;
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  v37[0] = v16;
  v37[1] = v15;
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = 2108704;
  v31._object = (void *)0xE300000000000000;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = v28;
  v32._object = v30;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = v37[0];
  v25(v14, v6);
  return v33;
}

uint64_t sub_100078BBC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100008614(&qword_1000F91C0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  char v14 = (char *)v38 - v13;
  uint64_t v15 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  sub_1000210BC((uint64_t)v1 + *(int *)(v15 + 20), (uint64_t)v5, &qword_1000F91C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_10000EC04((uint64_t)v5, &qword_1000F91C0);
    id v16 = sub_10006A68C();
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:60 message:v17];

LABEL_3:
    uint64_t v18 = *v1;
    swift_bridgeObjectRetain();
    return v18;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v14, v5, v6);
  Date.init()();
  char v19 = static Date.> infix(_:_:)();
  id v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v11, v6);
  if ((v19 & 1) == 0)
  {
    id v33 = sub_10006A68C();
    NSString v34 = String._bridgeToObjectiveC()();
    [v33 ulog:60 message:v34];

    v20(v14, v6);
    return 0;
  }
  Date.timeIntervalSinceNow.getter();
  id v22 = [self formattedDurationFor:v21];
  if (!v22)
  {
    id v36 = sub_10006A68C();
    NSString v37 = String._bridgeToObjectiveC()();
    [v36 ulog:60 message:v37];

    v20(v14, v6);
    goto LABEL_3;
  }
  double v23 = v22;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v26 = v25;

  v38[0] = 0;
  v38[1] = 0xE000000000000000;
  uint64_t v27 = (void *)v1[1];
  if (v27) {
    uint64_t v28 = *v1;
  }
  else {
    uint64_t v28 = 0;
  }
  if (v27) {
    uint64_t v29 = v27;
  }
  else {
    uint64_t v29 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v30._uint64_t countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 2108704;
  v31._object = (void *)0xE300000000000000;
  String.append(_:)(v31);
  v32._uint64_t countAndFlagsBits = v24;
  v32._object = v26;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  uint64_t v18 = v38[0];
  v20(v14, v6);
  return v18;
}

uint64_t sub_100078F8C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10007B3C0(a1, (uint64_t)v15, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  uint64_t result = swift_getEnumCaseMultiPayload();
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  switch((int)result)
  {
    case 1:
      sub_10007B5CC((uint64_t)v15, (uint64_t)v11, type metadata accessor for ActivityDisplayContext.CallDisplayContext);
      uint64_t v17 = sub_100078818();
      uint64_t v18 = v19;
      id v20 = type metadata accessor for ActivityDisplayContext.CallDisplayContext;
      uint64_t v21 = (uint64_t)v11;
      goto LABEL_5;
    case 2:
      sub_10007B5CC((uint64_t)v15, (uint64_t)v7, type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
      uint64_t v17 = sub_100078BBC();
      uint64_t v18 = v22;
      id v20 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext;
      uint64_t v21 = (uint64_t)v7;
LABEL_5:
      uint64_t result = sub_10007B30C(v21, v20);
      break;
    case 3:
      break;
    default:
      uint64_t v17 = *v15;
      uint64_t v18 = v15[1];
      break;
  }
  *a2 = v17;
  a2[1] = v18;
  return result;
}

uint64_t sub_1000791A0(void *a1)
{
  uint64_t v2 = sub_100008614(&qword_1000FD540);
  uint64_t v51 = *(void *)(v2 - 8);
  uint64_t v52 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v50 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  __chkstk_darwin(v48, v5);
  uint64_t v49 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008614(&qword_1000FD548);
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v44 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  __chkstk_darwin(v42, v10);
  uint64_t v43 = (uint64_t)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100008614(&qword_1000FD550);
  uint64_t v40 = *(void *)(v12 - 8);
  uint64_t v41 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100008614(&qword_1000FD558);
  uint64_t v47 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100008614(&qword_1000FD560);
  uint64_t v53 = *(void *)(v24 - 8);
  uint64_t v54 = v24;
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v39 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10007B428();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10007B3C0(v55, (uint64_t)v23, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v31 = v43;
      sub_10007B5CC((uint64_t)v23, v43, type metadata accessor for ActivityDisplayContext.CallDisplayContext);
      char v58 = 2;
      sub_10007B4D0();
      NSString v37 = v44;
      uint64_t v33 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10007B25C(&qword_1000FD570, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext.CallDisplayContext);
      uint64_t v38 = v46;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v38);
      NSString v35 = type metadata accessor for ActivityDisplayContext.CallDisplayContext;
      goto LABEL_6;
    case 2u:
      uint64_t v31 = v49;
      sub_10007B5CC((uint64_t)v23, v49, type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
      char v59 = 3;
      sub_10007B47C();
      Swift::String v32 = v50;
      uint64_t v33 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10007B25C(&qword_1000FD568, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
      uint64_t v34 = v52;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v34);
      NSString v35 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext;
LABEL_6:
      sub_10007B30C(v31, v35);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v27, v33);
      break;
    case 3u:
      char v56 = 0;
      sub_10007B578();
      uint64_t v36 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v19, v16);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v27, v36);
      break;
    default:
      char v57 = 1;
      sub_10007B524();
      uint64_t v28 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v41;
      KeyedEncodingContainer.encode(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v15, v29);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v27, v28);
      break;
  }
  return result;
}

uint64_t sub_1000798C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v81 = a2;
  uint64_t v70 = sub_100008614(&qword_1000FD4E0);
  uint64_t v73 = *(void *)(v70 - 8);
  __chkstk_darwin(v70, v3);
  char v76 = (char *)&v63 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100008614(&qword_1000FD4E8);
  uint64_t v80 = *(void *)(v71 - 8);
  __chkstk_darwin(v71, v5);
  int8x16_t v79 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100008614(&qword_1000FD4F0);
  uint64_t v72 = *(void *)(v69 - 8);
  __chkstk_darwin(v69, v7);
  int64x2_t v75 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008614(&qword_1000FD4F8);
  uint64_t v67 = *(void *)(v9 - 8);
  uint64_t v68 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v74 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100008614(&qword_1000FD500);
  uint64_t v77 = *(void *)(v12 - 8);
  uint64_t v78 = v12;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v18, v21);
  uint64_t v24 = (char *)&v63 - v23;
  uint64_t v26 = __chkstk_darwin(v22, v25);
  uint64_t v28 = (uint64_t *)((char *)&v63 - v27);
  __chkstk_darwin(v26, v29);
  uint64_t v31 = (char *)&v63 - v30;
  uint64_t v32 = a1[3];
  char v82 = a1;
  sub_10000AEFC(a1, v32);
  sub_10007B428();
  uint64_t v33 = v83;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v33)
  {
    uint64_t v63 = v28;
    uint64_t v64 = v24;
    uint64_t v65 = v20;
    uint64_t v66 = v31;
    NSString v35 = v79;
    uint64_t v34 = v80;
    uint64_t v83 = v16;
    uint64_t v36 = v81;
    uint64_t v37 = v78;
    uint64_t v38 = KeyedDecodingContainer.allKeys.getter();
    if (*(void *)(v38 + 16) == 1)
    {
      switch(*(unsigned char *)(v38 + 32))
      {
        case 1:
          uint64_t v46 = v36;
          char v85 = 1;
          sub_10007B524();
          uint64_t v47 = v75;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v48 = v15;
          uint64_t v49 = v69;
          uint64_t v58 = KeyedDecodingContainer.decode(_:forKey:)();
          uint64_t v60 = v59;
          (*(void (**)(char *, uint64_t))(v72 + 8))(v47, v49);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v77 + 8))(v48, v37);
          uint64_t v61 = (uint64_t)v63;
          *uint64_t v63 = v58;
          *(void *)(v61 + 8) = v60;
          swift_storeEnumTagMultiPayload();
          uint64_t v40 = (uint64_t)v66;
          sub_10007B5CC(v61, (uint64_t)v66, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
          uint64_t v41 = v46;
          break;
        case 2:
          uint64_t v50 = v34;
          char v86 = 2;
          sub_10007B4D0();
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
          uint64_t v51 = v35;
          sub_10007B25C(&qword_1000FD528, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext.CallDisplayContext);
          uint64_t v52 = (uint64_t)v64;
          uint64_t v53 = v71;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v54 = v77;
          (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v53);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v54 + 8))(v15, v37);
          goto LABEL_9;
        case 3:
          char v87 = 3;
          sub_10007B47C();
          uint64_t v55 = v76;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
          sub_10007B25C(&qword_1000FD518, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
          uint64_t v52 = (uint64_t)v65;
          uint64_t v56 = v70;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          uint64_t v57 = v77;
          (*(void (**)(char *, uint64_t))(v73 + 8))(v55, v56);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v57 + 8))(v15, v37);
LABEL_9:
          swift_storeEnumTagMultiPayload();
          uint64_t v40 = (uint64_t)v66;
          sub_10007B5CC(v52, (uint64_t)v66, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
          uint64_t v41 = v81;
          break;
        default:
          char v84 = 0;
          sub_10007B578();
          uint64_t v39 = v74;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          (*(void (**)(char *, uint64_t))(v67 + 8))(v39, v68);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v77 + 8))(v15, v37);
          uint64_t v40 = (uint64_t)v66;
          swift_storeEnumTagMultiPayload();
          uint64_t v41 = v36;
          break;
      }
      sub_10007B5CC(v40, v41, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
    }
    else
    {
      uint64_t v42 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v43 = v15;
      uint64_t v45 = v44;
      sub_100008614(&qword_1000F8A40);
      *uint64_t v45 = v83;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v42 - 8) + 104))(v45, enum case for DecodingError.typeMismatch(_:), v42);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v43, v37);
    }
  }
  return sub_10000AF94((uint64_t)v82);
}

uint64_t sub_10007A27C(uint64_t a1)
{
  unint64_t v2 = sub_10007B4D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A2B8(uint64_t a1)
{
  unint64_t v2 = sub_10007B4D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007A2F4()
{
  uint64_t result = 1701736302;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x636974617473;
      break;
    case 2:
      uint64_t result = 1819042147;
      break;
    case 3:
      uint64_t result = 0x72656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10007A368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007D628(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007A390(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10007A39C(uint64_t a1)
{
  unint64_t v2 = sub_10007B428();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A3D8(uint64_t a1)
{
  unint64_t v2 = sub_10007B428();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007A414(uint64_t a1)
{
  unint64_t v2 = sub_10007B578();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A450(uint64_t a1)
{
  unint64_t v2 = sub_10007B578();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007A48C(uint64_t a1)
{
  unint64_t v2 = sub_10007B524();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A4C8(uint64_t a1)
{
  unint64_t v2 = sub_10007B524();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007A504(uint64_t a1)
{
  unint64_t v2 = sub_10007B47C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007A540(uint64_t a1)
{
  unint64_t v2 = sub_10007B47C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007A57C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000798C4(a1, a2);
}

uint64_t sub_10007A594(void *a1)
{
  return sub_1000791A0(a1);
}

uint64_t sub_10007A5AC(void *a1)
{
  uint64_t v3 = sub_100008614(&qword_1000FD4D8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000AEFC(a1, a1[3]);
  sub_10007B36C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    v9[14] = 1;
    type metadata accessor for Date();
    sub_10007B25C(&qword_1000F94F0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v9[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_10007A798@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v4 = sub_100008614(&qword_1000F91C0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008614(&qword_1000FD4C8);
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AEFC(a1, a1[3]);
  sub_10007B36C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000AF94((uint64_t)a1);
  }
  uint64_t v26 = v12;
  uint64_t v16 = v28;
  char v32 = 0;
  uint64_t v17 = (uint64_t)v15;
  *uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v15[1] = v18;
  type metadata accessor for Date();
  char v31 = 1;
  sub_10007B25C(&qword_1000F9480, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v19 = (uint64_t)v7;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v20 = v26;
  sub_10007B2A4(v19, v17 + *(int *)(v26 + 20));
  char v30 = 2;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v29);
  uint64_t v24 = (uint64_t *)(v17 + *(int *)(v20 + 24));
  *uint64_t v24 = v21;
  v24[1] = v23;
  sub_10007B3C0(v17, v27, type metadata accessor for ActivityDisplayContext.CallDisplayContext);
  sub_10000AF94((uint64_t)a1);
  return sub_10007B30C(v17, type metadata accessor for ActivityDisplayContext.CallDisplayContext);
}

uint64_t sub_10007AB18()
{
  uint64_t v1 = 0x7461447472617473;
  if (*v0 != 1) {
    uint64_t v1 = 0x656C746974;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x4E79616C70736964;
  }
}

uint64_t sub_10007AB7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007D7B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007ABA4(uint64_t a1)
{
  unint64_t v2 = sub_10007B36C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007ABE0(uint64_t a1)
{
  unint64_t v2 = sub_10007B36C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007AC1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007A798(a1, a2);
}

uint64_t sub_10007AC34(void *a1)
{
  return sub_10007A5AC(a1);
}

uint64_t sub_10007AC4C(void *a1)
{
  uint64_t v3 = sub_100008614(&qword_1000FD4C0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000AEFC(a1, a1[3]);
  sub_10007B208();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
    v9[14] = 1;
    type metadata accessor for Date();
    sub_10007B25C(&qword_1000F94F0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_10007AE04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = sub_100008614(&qword_1000F91C0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008614(&qword_1000FD4B0);
  uint64_t v22 = *(void *)(v8 - 8);
  uint64_t v23 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AEFC(a1, a1[3]);
  sub_10007B208();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000AF94((uint64_t)a1);
  }
  uint64_t v20 = v12;
  uint64_t v16 = v22;
  uint64_t v17 = v23;
  char v25 = 0;
  *uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v15[1] = v18;
  type metadata accessor for Date();
  char v24 = 1;
  sub_10007B25C(&qword_1000F9480, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v11, v17);
  sub_10007B2A4((uint64_t)v7, (uint64_t)v15 + *(int *)(v20 + 20));
  sub_10007B3C0((uint64_t)v15, v21, type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
  sub_10000AF94((uint64_t)a1);
  return sub_10007B30C((uint64_t)v15, type metadata accessor for ActivityDisplayContext.TimerDisplayContext);
}

uint64_t sub_10007B0F4()
{
  if (*v0) {
    return 0x6574614465726966;
  }
  else {
    return 0x4E79616C70736964;
  }
}

uint64_t sub_10007B138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007D928(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007B160(uint64_t a1)
{
  unint64_t v2 = sub_10007B208();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007B19C(uint64_t a1)
{
  unint64_t v2 = sub_10007B208();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007B1D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007AE04(a1, a2);
}

uint64_t sub_10007B1F0(void *a1)
{
  return sub_10007AC4C(a1);
}

unint64_t sub_10007B208()
{
  unint64_t result = qword_1000FD4B8;
  if (!qword_1000FD4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD4B8);
  }
  return result;
}

uint64_t sub_10007B25C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007B2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100008614(&qword_1000F91C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007B30C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10007B36C()
{
  unint64_t result = qword_1000FD4D0;
  if (!qword_1000FD4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD4D0);
  }
  return result;
}

uint64_t sub_10007B3C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10007B428()
{
  unint64_t result = qword_1000FD508;
  if (!qword_1000FD508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD508);
  }
  return result;
}

unint64_t sub_10007B47C()
{
  unint64_t result = qword_1000FD510;
  if (!qword_1000FD510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD510);
  }
  return result;
}

unint64_t sub_10007B4D0()
{
  unint64_t result = qword_1000FD520;
  if (!qword_1000FD520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD520);
  }
  return result;
}

unint64_t sub_10007B524()
{
  unint64_t result = qword_1000FD530;
  if (!qword_1000FD530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD530);
  }
  return result;
}

unint64_t sub_10007B578()
{
  unint64_t result = qword_1000FD538;
  if (!qword_1000FD538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD538);
  }
  return result;
}

uint64_t sub_10007B5CC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_10007B634()
{
  unint64_t result = qword_1000FD580;
  if (!qword_1000FD580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD580);
  }
  return result;
}

uint64_t sub_10007B688(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007B810(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007B6A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007B97C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007B6C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007BADC(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10007B6E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007BC68(a1, a2, a3, *v3);
  *uint64_t v3 = (int8x8_t *)result;
  return result;
}

unint64_t sub_10007B708()
{
  unint64_t result = qword_1000FD5D8;
  if (!qword_1000FD5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD5D8);
  }
  return result;
}

unint64_t sub_10007B75C()
{
  unint64_t result = qword_1000FD5E0;
  if (!qword_1000FD5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD5E0);
  }
  return result;
}

uint64_t sub_10007B7B0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007BDD4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007B7D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007BF34(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10007B7F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10007C0DC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10007B810(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008614(&qword_1000FBD28);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007B97C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008614(&qword_1000FD5F0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007BADC(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008614(&qword_1000FD5E8);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    void v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_100008614(&qword_1000F8290);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007BC68(char a1, int64_t a2, char a3, int8x8_t *a4)
{
  if (a3)
  {
    int8x8_t v6 = a4[3];
    int8x8_t v7 = (int8x8_t)(*(void *)&v6 >> 1);
    if (*(void *)&v6 >> 1 < a2)
    {
      if (*(void *)&v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int8x8_t v7 = (int8x8_t)(*(void *)&v6 & 0xFFFFFFFFFFFFFFFELL);
      if ((uint64_t)(*(void *)&v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int8x8_t v7 = (int8x8_t)a2;
      }
    }
  }
  else
  {
    int8x8_t v7 = (int8x8_t)a2;
  }
  int8x8_t v8 = a4[2];
  if (*(void *)&v7 <= *(void *)&v8) {
    int8x8_t v9 = a4[2];
  }
  else {
    int8x8_t v9 = v7;
  }
  if (v9)
  {
    sub_100008614(&qword_1000FCB98);
    uint64_t v10 = (int8x8_t *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    void v10[2] = v8;
    void v10[3] = (int8x8_t)(2 * (v12 >> 3));
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 4;
  unint64_t v14 = a4 + 4;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[*(void *)&v8]) {
      memmove(v13, v14, 8 * *(void *)&v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[*(void *)&v8] || v13 >= &v14[*(void *)&v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007BDD4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008614(&qword_1000FD620);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007BF34(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008614(&qword_1000FD628);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    void v10[2] = v8;
    void v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = &_swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    sub_100008614(&qword_1000FD630);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10007C0DC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008614(&qword_1000FCBA0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10007C248()
{
  unint64_t result = qword_1000FD658;
  if (!qword_1000FD658)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000FD658);
  }
  return result;
}

uint64_t sub_10007C288()
{
  uint64_t v1 = *(void *)(type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v5 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = v5 + *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20);
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void *)(v11 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      }
    }
    else if (EnumCaseMultiPayload)
    {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
LABEL_10:

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_10007C494@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100078F8C(v4, a1);
}

uint64_t getEnumTagSinglePayload for ActivityDisplayContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ActivityDisplayContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007C670);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.CodingKeys()
{
  return &type metadata for ActivityDisplayContext.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ActivityDisplayContext.DynamicTextScheme.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ActivityDisplayContext.DynamicTextScheme.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007C804);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.DynamicTextScheme.CodingKeys()
{
  return &type metadata for ActivityDisplayContext.DynamicTextScheme.CodingKeys;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.DynamicTextScheme.NoneCodingKeys()
{
  return &type metadata for ActivityDisplayContext.DynamicTextScheme.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.DynamicTextScheme.StaticCodingKeys()
{
  return &type metadata for ActivityDisplayContext.DynamicTextScheme.StaticCodingKeys;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.DynamicTextScheme.CallCodingKeys()
{
  return &type metadata for ActivityDisplayContext.DynamicTextScheme.CallCodingKeys;
}

unsigned char *_s13PCViewService22ActivityDisplayContextV17DynamicTextSchemeO16StaticCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10007C90CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.DynamicTextScheme.TimerCodingKeys()
{
  return &type metadata for ActivityDisplayContext.DynamicTextScheme.TimerCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ActivityDisplayContext.CallDisplayContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007CA10);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.CallDisplayContext.CodingKeys()
{
  return &type metadata for ActivityDisplayContext.CallDisplayContext.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ActivityDisplayContext.TimerDisplayContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007CB14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityDisplayContext.TimerDisplayContext.CodingKeys()
{
  return &type metadata for ActivityDisplayContext.TimerDisplayContext.CodingKeys;
}

unint64_t sub_10007CB50()
{
  unint64_t result = qword_1000FD698;
  if (!qword_1000FD698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD698);
  }
  return result;
}

unint64_t sub_10007CBA8()
{
  unint64_t result = qword_1000FD6A0;
  if (!qword_1000FD6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6A0);
  }
  return result;
}

unint64_t sub_10007CC00()
{
  unint64_t result = qword_1000FD6A8;
  if (!qword_1000FD6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6A8);
  }
  return result;
}

unint64_t sub_10007CC58()
{
  unint64_t result = qword_1000FD6B0;
  if (!qword_1000FD6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6B0);
  }
  return result;
}

unint64_t sub_10007CCB0()
{
  unint64_t result = qword_1000FD6B8;
  if (!qword_1000FD6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6B8);
  }
  return result;
}

unint64_t sub_10007CD08()
{
  unint64_t result = qword_1000FD6C0;
  if (!qword_1000FD6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6C0);
  }
  return result;
}

unint64_t sub_10007CD60()
{
  unint64_t result = qword_1000FD6C8;
  if (!qword_1000FD6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6C8);
  }
  return result;
}

unint64_t sub_10007CDB8()
{
  unint64_t result = qword_1000FD6D0;
  if (!qword_1000FD6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6D0);
  }
  return result;
}

unint64_t sub_10007CE10()
{
  unint64_t result = qword_1000FD6D8;
  if (!qword_1000FD6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6D8);
  }
  return result;
}

unint64_t sub_10007CE68()
{
  unint64_t result = qword_1000FD6E0;
  if (!qword_1000FD6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6E0);
  }
  return result;
}

unint64_t sub_10007CEC0()
{
  unint64_t result = qword_1000FD6E8;
  if (!qword_1000FD6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6E8);
  }
  return result;
}

unint64_t sub_10007CF18()
{
  unint64_t result = qword_1000FD6F0;
  if (!qword_1000FD6F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6F0);
  }
  return result;
}

unint64_t sub_10007CF70()
{
  unint64_t result = qword_1000FD6F8;
  if (!qword_1000FD6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD6F8);
  }
  return result;
}

unint64_t sub_10007CFC8()
{
  unint64_t result = qword_1000FD700;
  if (!qword_1000FD700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD700);
  }
  return result;
}

unint64_t sub_10007D020()
{
  unint64_t result = qword_1000FD708;
  if (!qword_1000FD708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD708);
  }
  return result;
}

unint64_t sub_10007D078()
{
  unint64_t result = qword_1000FD710;
  if (!qword_1000FD710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD710);
  }
  return result;
}

unint64_t sub_10007D0D0()
{
  unint64_t result = qword_1000FD718;
  if (!qword_1000FD718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD718);
  }
  return result;
}

unint64_t sub_10007D128()
{
  unint64_t result = qword_1000FD720;
  if (!qword_1000FD720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD720);
  }
  return result;
}

unint64_t sub_10007D180()
{
  unint64_t result = qword_1000FD728;
  if (!qword_1000FD728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD728);
  }
  return result;
}

unint64_t sub_10007D1D8()
{
  unint64_t result = qword_1000FD730;
  if (!qword_1000FD730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD730);
  }
  return result;
}

unint64_t sub_10007D230()
{
  unint64_t result = qword_1000FD738;
  if (!qword_1000FD738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD738);
  }
  return result;
}

unint64_t sub_10007D288()
{
  unint64_t result = qword_1000FD740;
  if (!qword_1000FD740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD740);
  }
  return result;
}

unint64_t sub_10007D2E0()
{
  unint64_t result = qword_1000FD748;
  if (!qword_1000FD748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD748);
  }
  return result;
}

uint64_t sub_10007D334(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7974697669746361 && a2 == 0xEC00000065707954;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7079547465737361 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x614E656369766564 && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6461654864726163 && a2 == 0xEF6567616D497265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001000C2BA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74786554746E6968 && a2 == 0xEE00656D65686353)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_10007D628(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636974617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1819042147 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x72656D6974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10007D7B4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10007D928(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E79616C70736964 && a2 == 0xEB00000000656D61;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574614465726966 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

ValueMetadata *type metadata accessor for EducationViewEvent()
{
  return &type metadata for EducationViewEvent;
}

ValueMetadata *type metadata accessor for EducationViewState()
{
  return &type metadata for EducationViewState;
}

uint64_t *sub_10007DA58@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_10007DA70(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_10007DA7C(void *a1@<X8>)
{
  *a1 = &off_1000E2CE0;
}

uint64_t sub_10007DA8C()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10007DAEC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10007DB3C()
{
  uint64_t v1 = 0x736F6C4365766F6DLL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6574656C706D6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F72746E69;
  }
}

unint64_t sub_10007DB9C()
{
  unint64_t result = qword_1000FD750;
  if (!qword_1000FD750)
  {
    sub_100009F40(&qword_1000FD758);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD750);
  }
  return result;
}

unint64_t sub_10007DBFC()
{
  unint64_t result = qword_1000FD760;
  if (!qword_1000FD760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD760);
  }
  return result;
}

uint64_t sub_10007DC50(void *a1, int a2)
{
  int v28 = a2;
  uint64_t v3 = sub_100008614(&qword_1000FD7B0);
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  __chkstk_darwin(v3, v4);
  char v25 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100008614(&qword_1000FD7B8);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000FD7C0);
  uint64_t v22 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  unint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100008614(&qword_1000FD7C8);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10007E9D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((_BYTE)v28)
  {
    if (v28 == 1)
    {
      char v30 = 1;
      sub_10007EA78();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
    }
    else
    {
      char v31 = 2;
      sub_10007EA24();
      uint64_t v19 = v25;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v27);
    }
  }
  else
  {
    char v29 = 0;
    sub_10007EACC();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v10);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t sub_10007DFBC()
{
  unint64_t v1 = 0xD000000000000012;
  if (*v0 == 1) {
    unint64_t v1 = 0x65756E69746E6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65756E69746E6F63;
  }
}

uint64_t sub_10007E024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10007E2CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10007E04C(uint64_t a1)
{
  unint64_t v2 = sub_10007E9D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007E088(uint64_t a1)
{
  unint64_t v2 = sub_10007E9D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007E0C4(uint64_t a1)
{
  unint64_t v2 = sub_10007EACC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007E100(uint64_t a1)
{
  unint64_t v2 = sub_10007EACC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007E13C(uint64_t a1)
{
  unint64_t v2 = sub_10007EA78();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007E178(uint64_t a1)
{
  unint64_t v2 = sub_10007EA78();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10007E1B4(uint64_t a1)
{
  unint64_t v2 = sub_10007EA24();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007E1F0(uint64_t a1)
{
  unint64_t v2 = sub_10007EA24();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10007E22C@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10007E460(a1);
  if (!v2) {
    *a2 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_10007E258(void *a1)
{
  return sub_10007DC50(a1, *v1);
}

unint64_t sub_10007E278()
{
  unint64_t result = qword_1000FD768;
  if (!qword_1000FD768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD768);
  }
  return result;
}

uint64_t sub_10007E2CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756E69746E6F63 && a2 == 0xEE00646570706154;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756E69746E6F63 && a2 == 0xEF74756F656D6954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001000C2BC0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10007E460(void *a1)
{
  uint64_t v2 = sub_100008614(&qword_1000FD770);
  uint64_t v29 = *(void *)(v2 - 8);
  uint64_t v30 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v33 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_100008614(&qword_1000FD778);
  uint64_t v28 = *(void *)(v31 - 8);
  __chkstk_darwin(v31, v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008614(&qword_1000FD780);
  uint64_t v27 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100008614(&qword_1000FD788);
  uint64_t v32 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000AEFC(a1, a1[3]);
  sub_10007E9D0();
  uint64_t v16 = (uint64_t)v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    goto LABEL_7;
  }
  uint64_t v26 = v8;
  uint64_t v17 = v33;
  uint64_t v34 = a1;
  uint64_t v18 = v15;
  uint64_t v19 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v19 + 16) != 1)
  {
    uint64_t v21 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v15 = v22;
    sub_100008614(&qword_1000F8A40);
    *uint64_t v15 = &type metadata for EducationViewEvent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v15, enum case for DecodingError.typeMismatch(_:), v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v32 + 8))(v18, v12);
    a1 = v34;
LABEL_7:
    sub_10000AF94((uint64_t)a1);
    return v15;
  }
  uint64_t v15 = (void *)*(unsigned __int8 *)(v19 + 32);
  if (*(unsigned char *)(v19 + 32))
  {
    if (v15 == 1)
    {
      char v36 = 1;
      sub_10007EA78();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v20 = v32;
      (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v31);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v20 + 8))(v18, v12);
    }
    else
    {
      char v37 = 2;
      sub_10007EA24();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v32;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v30);
      swift_bridgeObjectRelease();
      (*(void (**)(void *, uint64_t))(v24 + 8))(v18, v12);
    }
  }
  else
  {
    char v35 = 0;
    sub_10007EACC();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t))(v32 + 8))(v18, v12);
  }
  sub_10000AF94((uint64_t)v34);
  return v15;
}

unint64_t sub_10007E9D0()
{
  unint64_t result = qword_1000FD790;
  if (!qword_1000FD790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD790);
  }
  return result;
}

unint64_t sub_10007EA24()
{
  unint64_t result = qword_1000FD798;
  if (!qword_1000FD798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD798);
  }
  return result;
}

unint64_t sub_10007EA78()
{
  unint64_t result = qword_1000FD7A0;
  if (!qword_1000FD7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD7A0);
  }
  return result;
}

unint64_t sub_10007EACC()
{
  unint64_t result = qword_1000FD7A8;
  if (!qword_1000FD7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD7A8);
  }
  return result;
}

unint64_t sub_10007EB20()
{
  unint64_t result = qword_1000FD7D0;
  if (!qword_1000FD7D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD7D0);
  }
  return result;
}

unsigned char *_s13PCViewService18EducationViewStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007EC40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EducationViewEvent.CodingKeys()
{
  return &type metadata for EducationViewEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for EducationViewEvent.ContinueTappedCodingKeys()
{
  return &type metadata for EducationViewEvent.ContinueTappedCodingKeys;
}

ValueMetadata *type metadata accessor for EducationViewEvent.ContinueTimeoutCodingKeys()
{
  return &type metadata for EducationViewEvent.ContinueTimeoutCodingKeys;
}

ValueMetadata *type metadata accessor for EducationViewEvent.SubtitleSwipedBackCodingKeys()
{
  return &type metadata for EducationViewEvent.SubtitleSwipedBackCodingKeys;
}

unint64_t sub_10007ECAC()
{
  unint64_t result = qword_1000FD7D8;
  if (!qword_1000FD7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD7D8);
  }
  return result;
}

unint64_t sub_10007ED04()
{
  unint64_t result = qword_1000FD7E0;
  if (!qword_1000FD7E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD7E0);
  }
  return result;
}

unint64_t sub_10007ED5C()
{
  unint64_t result = qword_1000FD7E8;
  if (!qword_1000FD7E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD7E8);
  }
  return result;
}

unint64_t sub_10007EDB4()
{
  unint64_t result = qword_1000FD7F0;
  if (!qword_1000FD7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD7F0);
  }
  return result;
}

unint64_t sub_10007EE0C()
{
  unint64_t result = qword_1000FD7F8;
  if (!qword_1000FD7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD7F8);
  }
  return result;
}

unint64_t sub_10007EE64()
{
  unint64_t result = qword_1000FD800;
  if (!qword_1000FD800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD800);
  }
  return result;
}

unint64_t sub_10007EEBC()
{
  unint64_t result = qword_1000FD808;
  if (!qword_1000FD808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD808);
  }
  return result;
}

unint64_t sub_10007EF14()
{
  unint64_t result = qword_1000FD810;
  if (!qword_1000FD810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD810);
  }
  return result;
}

unint64_t sub_10007EF6C()
{
  unint64_t result = qword_1000FD818;
  if (!qword_1000FD818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD818);
  }
  return result;
}

uint64_t Publisher.conditionalDebounce<A>(for:tolerance:scheduler:options:when:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v70 = a6;
  uint64_t v68 = a4;
  uint64_t v69 = a5;
  uint64_t v67 = a3;
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  uint64_t v71 = a9;
  uint64_t v58 = a8;
  swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v75 = *(void *)(v13 - 8);
  uint64_t v76 = v13;
  uint64_t v66 = *(void *)(v75 + 64);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  uint64_t v74 = (char *)&v49 - v16;
  uint64_t v72 = *(void *)(a8 - 8);
  uint64_t v62 = *(void *)(v72 + 64);
  __chkstk_darwin(v15, v17);
  uint64_t v73 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = a11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v53 = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v26 = (char *)&v49 - v25;
  uint64_t v54 = (char *)&v49 - v25;
  uint64_t v51 = AssociatedTypeWitness;
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = *(void *)(v27 + 64);
  __chkstk_darwin(v24, v29);
  uint64_t v31 = (char *)&v49 - v30;
  uint64_t v52 = (char *)&v49 - v30;
  uint64_t v56 = a10;
  uint64_t v55 = a7;
  swift_getAssociatedTypeWitness();
  uint64_t v59 = type metadata accessor for AnyPublisher();
  uint64_t v32 = type metadata accessor for Publishers.Map();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v60 = v32;
  uint64_t v61 = v33;
  __chkstk_darwin(v32, v34);
  uint64_t v57 = (char *)&v49 - v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v31, v64, AssociatedTypeWitness);
  uint64_t v50 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v26, v65, v20);
  uint64_t v36 = v72;
  uint64_t v37 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v73, v67, v58);
  uint64_t v38 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, v68, v76);
  unint64_t v39 = (*(unsigned __int8 *)(v27 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  unint64_t v40 = (v28 + *(unsigned __int8 *)(v21 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v41 = (v22 + *(unsigned __int8 *)(v36 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  unint64_t v42 = (v62 + *(unsigned __int8 *)(v38 + 80) + v41) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v43 = (char *)swift_allocObject();
  *((void *)v43 + 2) = v55;
  *((void *)v43 + 3) = v37;
  uint64_t v44 = v63;
  *((void *)v43 + 4) = v56;
  *((void *)v43 + 5) = v44;
  uint64_t v45 = v70;
  *((void *)v43 + 6) = v69;
  *((void *)v43 + 7) = v45;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v43[v39], v52, v51);
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(&v43[v40], v54, v53);
  (*(void (**)(char *, char *, uint64_t))(v72 + 32))(&v43[v41], v73, v37);
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(&v43[v42], v74, v76);
  swift_retain();
  uint64_t v46 = v57;
  Publisher.map<A>(_:)();
  swift_release();
  uint64_t v47 = v60;
  swift_getWitnessTable();
  swift_getWitnessTable();
  Publisher<>.switchToLatest()();
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v46, v47);
}

uint64_t sub_10007F5DC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v29[5] = a5;
  v29[6] = a6;
  v29[4] = a4;
  void v29[2] = a3;
  uint64_t v31 = a2;
  uint64_t v32 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v13);
  uint64_t v15 = (char *)v29 - v14;
  uint64_t v16 = type metadata accessor for Just();
  uint64_t v30 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v29 - v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v33 = v16;
  uint64_t v34 = a8;
  v29[1] = a8;
  uint64_t v35 = WitnessTable;
  uint64_t v36 = a10;
  v29[3] = a10;
  uint64_t v21 = type metadata accessor for Publishers.Delay();
  v29[0] = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)v29 - v23;
  char v25 = v31(a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, AssociatedTypeWitness);
  Just.init(_:)();
  uint64_t v26 = (void (**)(char *, uint64_t))(v30 + 8);
  if (v25)
  {
    Publisher.delay<A>(for:tolerance:scheduler:options:)();
    (*v26)(v19, v16);
    swift_getWitnessTable();
    uint64_t v27 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29[0] + 8))(v24, v21);
  }
  else
  {
    uint64_t v27 = Publisher.eraseToAnyPublisher()();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v26)(v19, v16);
  }
  *uint64_t v32 = v27;
  return result;
}

uint64_t sub_10007F8F4()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v22 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v21 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v6 = (((v22 + 64) & ~v22) + v4 + v21) & ~v21;
  uint64_t v7 = *(void *)(v1 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v8 = (v6 + *(void *)(v5 + 64) + v20) & ~v20;
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v17 = (v8 + v9 + v12) & ~v12;
  uint64_t v18 = v8;
  uint64_t v19 = *(void *)(v11 + 64);
  swift_release();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v13(v0 + ((v22 + 64) & ~v22), AssociatedTypeWitness);
  uint64_t v14 = v0 + v6;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v14, 1, AssociatedTypeWitness)) {
    v13(v14, AssociatedTypeWitness);
  }
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v18, v1);
  uint64_t v15 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v0 + v17, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v0 + v17, v10);
  }

  return _swift_deallocObject(v0, v17 + v19, v22 | v21 | v20 | v12 | 7);
}

uint64_t sub_10007FC5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(v2 + 32);
  uint64_t v5 = *(void *)(v2 + 40);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (v11 + *(void *)(v10 + 64) + *(unsigned __int8 *)(*(void *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v13 = *(void *)(*(void *)(v4 - 8) + 64);
  swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(type metadata accessor for Optional() - 8);
  return sub_10007F5DC(a1, *(uint64_t (**)(uint64_t))(v2 + 48), v2 + v8, v2 + v11, v2 + v12, v2 + ((v12 + v13 + *(unsigned __int8 *)(v14 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), a2, v4, v6, v5);
}

uint64_t sub_10007FE94()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ViewServiceExperienceType()
{
  return &type metadata for ViewServiceExperienceType;
}

unsigned char *_s13PCViewService21HandoffExperienceTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100080114);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HandoffExperienceType()
{
  return &type metadata for HandoffExperienceType;
}

uint64_t sub_10008014C(char *a1, char *a2)
{
  return sub_10004EC0C(*a1, *a2);
}

Swift::Int sub_100080158()
{
  return Hasher._finalize()();
}

uint64_t sub_1000801D8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100080244()
{
  return Hasher._finalize()();
}

uint64_t sub_1000802C0@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1000E30F8;
  return sub_100050420(v2, a1, a2);
}

void sub_1000802CC(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6572757472657061;
  if (*v1) {
    uint64_t v2 = 0x72656E6E6162;
  }
  unint64_t v3 = 0xE800000000000000;
  if (*v1) {
    unint64_t v3 = 0xE600000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100080308(void *a1@<X8>)
{
  *a1 = &off_1000E2D08;
}

uint64_t sub_100080318()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100080378()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000803C8()
{
  if (*v0) {
    return 0x72656E6E6142;
  }
  else {
    return 0x2063696D616E7944;
  }
}

uint64_t sub_10008040C()
{
  return sub_100051458(&qword_1000FD820, &qword_1000FD828);
}

unint64_t sub_100080438()
{
  unint64_t result = qword_1000FD830;
  if (!qword_1000FD830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD830);
  }
  return result;
}

uint64_t sub_10008048C(char *a1, char *a2)
{
  return sub_10004ECB0(*a1, *a2);
}

Swift::Int sub_100080498()
{
  return Hasher._finalize()();
}

uint64_t sub_10008052C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000805AC()
{
  return Hasher._finalize()();
}

uint64_t sub_10008063C@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_1000E30A8;
  return sub_100050420(v2, a1, a2);
}

void sub_100080648(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x74696D69786F7270;
  if (*v1) {
    unint64_t v2 = 0xD000000000000014;
  }
  unint64_t v3 = 0x80000001000BCEC0;
  if (!*v1) {
    unint64_t v3 = 0xED00006472614379;
  }
  *a1 = v2;
  a1[1] = v3;
}

void sub_100080698(void *a1@<X8>)
{
  *a1 = &off_1000E2CB8;
}

uint64_t sub_1000806A8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100080708()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100080758()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0x74696D69786F7270;
  }
}

uint64_t sub_1000807A4()
{
  return sub_100051458(&qword_1000FD838, &qword_1000FD840);
}

unint64_t sub_1000807D0()
{
  unint64_t result = qword_1000FD848;
  if (!qword_1000FD848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD848);
  }
  return result;
}

unint64_t sub_100080824()
{
  unint64_t result = qword_1000FD850;
  if (!qword_1000FD850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD850);
  }
  return result;
}

unint64_t sub_100080878()
{
  unint64_t result = qword_1000FD858;
  if (!qword_1000FD858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD858);
  }
  return result;
}

uint64_t sub_1000808CC()
{
  uint64_t result = SBUIIsSystemApertureEnabled();
  byte_100111A98 = result;
  return result;
}

uint64_t sub_1000808EC(void *a1)
{
  uint64_t v38 = sub_100008614(&qword_1000FD940);
  uint64_t v35 = *(void *)(v38 - 8);
  __chkstk_darwin(v38, v2);
  unsigned int v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100008614(&qword_1000FD948);
  uint64_t v36 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v5);
  uint64_t v44 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v43 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = _s8CardInfoOMa();
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100008614(&qword_1000FD950);
  uint64_t v41 = *(void *)(v45 - 8);
  __chkstk_darwin(v45, v18);
  uint64_t v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_100081F9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_1000820FC(v42, (uint64_t)v17);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = v35;
    uint64_t v44 = (char *)*((void *)v17 + 2);
    char v51 = 1;
    sub_100081FF0();
    uint64_t v22 = v45;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v50 = 0;
    uint64_t v23 = v38;
    uint64_t v24 = v40;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    if (!v24)
    {
      char v49 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v23);
    return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v20, v22);
  }
  else
  {
    char v25 = &v17[*(int *)(sub_100008614(&qword_1000FD860) + 48)];
    uint64_t v26 = v37;
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
    v27(v13, v17, v7);
    v27(v43, v25, v7);
    char v48 = 0;
    sub_1000820A8();
    uint64_t v28 = v45;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    char v47 = 0;
    sub_100082160(&qword_1000F8288);
    uint64_t v29 = v39;
    uint64_t v30 = v40;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (v30)
    {
      (*(void (**)(char *, uint64_t))(v36 + 8))(v44, v29);
      uint64_t v31 = *(void (**)(char *, uint64_t))(v26 + 8);
      v31(v43, v7);
      v31(v13, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v20, v28);
    }
    else
    {
      char v46 = 1;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v44, v29);
      uint64_t v33 = *(void (**)(char *, uint64_t))(v26 + 8);
      v33(v43, v7);
      v33(v13, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v20, v45);
    }
  }
}

uint64_t sub_100080E9C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v64 = a2;
  uint64_t v3 = sub_100008614(&qword_1000FD910);
  uint64_t v57 = *(void *)(v3 - 8);
  uint64_t v58 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v63 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100008614(&qword_1000FD918);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v59 = v6;
  uint64_t v60 = v7;
  __chkstk_darwin(v6, v8);
  uint64_t v62 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000FD920);
  uint64_t v61 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = _s8CardInfoOMa();
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (char *)&v53 - v21;
  __chkstk_darwin(v20, v23);
  char v25 = (char *)&v53 - v24;
  uint64_t v26 = a1[3];
  uint64_t v65 = a1;
  sub_10000AEFC(a1, v26);
  sub_100081F9C();
  uint64_t v27 = v66;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v27)
  {
    uint64_t v54 = (uint64_t *)v18;
    uint64_t v55 = v25;
    uint64_t v28 = v62;
    uint64_t v29 = v63;
    uint64_t v56 = (uint64_t *)v22;
    uint64_t v66 = v14;
    uint64_t v30 = v64;
    uint64_t v31 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v32 = v31;
    uint64_t v33 = (char *)v10;
    if (*(void *)(v31 + 16) == 1)
    {
      if (*(unsigned char *)(v31 + 32))
      {
        char v72 = 1;
        sub_100081FF0();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        char v71 = 0;
        uint64_t v34 = v58;
        uint64_t v35 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v43 = v42;
        uint64_t v60 = v35;
        uint64_t v53 = v32;
        uint64_t v62 = v33;
        char v70 = 1;
        uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
        uint64_t v45 = (void (**)(char *, char *))(v61 + 8);
        uint64_t v49 = v48;
        char v50 = *(void (**)(char *, uint64_t))(v57 + 8);
        uint64_t v61 = v44;
        v50(v29, v34);
        swift_bridgeObjectRelease();
        (*v45)(v13, v62);
        char v51 = v54;
        uint64_t *v54 = v60;
        v51[1] = v43;
        _OWORD v51[2] = v61;
        v51[3] = v49;
      }
      else
      {
        char v69 = 0;
        sub_1000820A8();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        uint64_t v53 = v32;
        type metadata accessor for UUID();
        char v68 = 0;
        sub_100082160(&qword_1000F82A8);
        char v51 = v56;
        uint64_t v40 = v28;
        uint64_t v41 = v59;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        sub_100008614(&qword_1000FD860);
        char v67 = 1;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        uint64_t v46 = v41;
        uint64_t v47 = v61;
        (*(void (**)(char *, uint64_t))(v60 + 8))(v40, v46);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v10);
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v52 = (uint64_t)v55;
      sub_100082044((uint64_t)v51, (uint64_t)v55);
      sub_100082044(v52, v30);
    }
    else
    {
      uint64_t v36 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v38 = v37;
      sub_100008614(&qword_1000F8A40);
      *uint64_t v38 = v66;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, enum case for DecodingError.typeMismatch(_:), v36);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v13, v10);
    }
  }
  return sub_10000AF94((uint64_t)v65);
}

uint64_t sub_100081598()
{
  if (*v0) {
    return 0x756F52616964656DLL;
  }
  else {
    return 0x74696B656D6F68;
  }
}

uint64_t sub_1000815D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000825E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100081600(uint64_t a1)
{
  unint64_t v2 = sub_100081F9C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008163C(uint64_t a1)
{
  unint64_t v2 = sub_100081F9C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100081678()
{
  if (*v0) {
    return 0x4449656D6F68;
  }
  else {
    return 0x726F737365636361;
  }
}

uint64_t sub_1000816B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000826E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000816E0(uint64_t a1)
{
  unint64_t v2 = sub_1000820A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008171C(uint64_t a1)
{
  unint64_t v2 = sub_1000820A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100081758()
{
  if (*v0) {
    return 1701667182;
  }
  else {
    return 25705;
  }
}

uint64_t sub_100081780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000827E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000817A8(uint64_t a1)
{
  unint64_t v2 = sub_100081FF0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000817E4(uint64_t a1)
{
  unint64_t v2 = sub_100081FF0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100081820@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100080E9C(a1, a2);
}

uint64_t sub_100081838(void *a1)
{
  return sub_1000808EC(a1);
}

uint64_t *sub_100081850(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = a2[2];
      uint64_t v8 = a2[3];
      a1[2] = v7;
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v10 = type metadata accessor for UUID();
      uint64_t v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16);
      v11(a1, a2, v10);
      uint64_t v12 = sub_100008614(&qword_1000FD860);
      v11((uint64_t *)((char *)a1 + *(int *)(v12 + 48)), (uint64_t *)((char *)a2 + *(int *)(v12 + 48)), v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100081994(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = type metadata accessor for UUID();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v5)((void *)(v3 - 8), a1, v3);
    uint64_t v4 = a1 + *(int *)(sub_100008614(&qword_1000FD860) + 48);
    return v5(v4, v3);
  }
}

void *sub_100081A6C(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    uint64_t v5 = a2[2];
    uint64_t v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = sub_100008614(&qword_1000FD860);
    v8((void *)((char *)a1 + *(int *)(v9 + 48)), (void *)((char *)a2 + *(int *)(v9 + 48)), v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_100081B60(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_100081C74((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = type metadata accessor for UUID();
      uint64_t v5 = *(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16);
      v5(a1, a2, v4);
      uint64_t v6 = sub_100008614(&qword_1000FD860);
      v5((void *)((char *)a1 + *(int *)(v6 + 48)), (void *)((char *)a2 + *(int *)(v6 + 48)), v4);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100081C74(uint64_t a1)
{
  uint64_t v2 = _s8CardInfoOMa();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s8CardInfoOMa()
{
  uint64_t result = qword_1000FD8D8;
  if (!qword_1000FD8D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

char *sub_100081D1C(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for UUID();
    uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
    v7(a1, a2, v6);
    uint64_t v8 = sub_100008614(&qword_1000FD860);
    v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *sub_100081E04(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100081C74((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for UUID();
      uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
      v7(a1, a2, v6);
      uint64_t v8 = sub_100008614(&qword_1000FD860);
      v7(&a1[*(int *)(v8 + 48)], &a2[*(int *)(v8 + 48)], v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100081EFC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v2[4] = v2;
    v2[5] = " ";
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_100081F9C()
{
  unint64_t result = qword_1000FD928;
  if (!qword_1000FD928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD928);
  }
  return result;
}

unint64_t sub_100081FF0()
{
  unint64_t result = qword_1000FD930;
  if (!qword_1000FD930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD930);
  }
  return result;
}

uint64_t sub_100082044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s8CardInfoOMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000820A8()
{
  unint64_t result = qword_1000FD938;
  if (!qword_1000FD938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD938);
  }
  return result;
}

uint64_t sub_1000820FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _s8CardInfoOMa();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100082160(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *_s8CardInfoO10CodingKeysOMa()
{
  return &_s8CardInfoO10CodingKeysON;
}

ValueMetadata *_s8CardInfoO17HomekitCodingKeysOMa()
{
  return &_s8CardInfoO17HomekitCodingKeysON;
}

unsigned char *_s8CardInfoO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100082294);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s8CardInfoO20MediaRouteCodingKeysOMa()
{
  return &_s8CardInfoO20MediaRouteCodingKeysON;
}

unint64_t sub_1000822D0()
{
  unint64_t result = qword_1000FD958;
  if (!qword_1000FD958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD958);
  }
  return result;
}

unint64_t sub_100082328()
{
  unint64_t result = qword_1000FD960;
  if (!qword_1000FD960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD960);
  }
  return result;
}

unint64_t sub_100082380()
{
  unint64_t result = qword_1000FD968;
  if (!qword_1000FD968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD968);
  }
  return result;
}

unint64_t sub_1000823D8()
{
  unint64_t result = qword_1000FD970;
  if (!qword_1000FD970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD970);
  }
  return result;
}

unint64_t sub_100082430()
{
  unint64_t result = qword_1000FD978;
  if (!qword_1000FD978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD978);
  }
  return result;
}

unint64_t sub_100082488()
{
  unint64_t result = qword_1000FD980;
  if (!qword_1000FD980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD980);
  }
  return result;
}

unint64_t sub_1000824E0()
{
  unint64_t result = qword_1000FD988;
  if (!qword_1000FD988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD988);
  }
  return result;
}

unint64_t sub_100082538()
{
  unint64_t result = qword_1000FD990;
  if (!qword_1000FD990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD990);
  }
  return result;
}

unint64_t sub_100082590()
{
  unint64_t result = qword_1000FD998;
  if (!qword_1000FD998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD998);
  }
  return result;
}

uint64_t sub_1000825E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74696B656D6F68 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756F52616964656DLL && a2 == 0xEA00000000006574)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000826E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F737365636361 && a2 == 0xEB00000000444979;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449656D6F68 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000827E8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000828B4(uint64_t a1, uint64_t a2)
{
  __chkstk_darwin(a1, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a1);
  return AnyView.init<A>(_:)();
}

uint64_t AnyTransition.init(arrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = sub_1000829F0(a1);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000829B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1000829F0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1000829F0(uint64_t a1)
{
  uint64_t v2 = static AnyTransition.identity.getter();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return v2;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  do
  {
    ++v4;
    swift_retain();
    uint64_t v5 = AnyTransition.combined(with:)();
    swift_release();
    swift_release();
  }
  while (v3 != v4);
  swift_release();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100082AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DaemonError(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for DaemonError(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for DaemonError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DaemonError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonError()
{
  return &type metadata for DaemonError;
}

uint64_t sub_100082C14(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v13 = a4;
  uint64_t v6 = sub_100008614(&qword_1000FD9C0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_1000835A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    char v15 = v13;
    char v14 = 1;
    sub_10008364C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_100082D9C()
{
  if (*v0) {
    return 1684957547;
  }
  else {
    return 1868983913;
  }
}

uint64_t sub_100082DC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000832C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100082DE8(uint64_t a1)
{
  unint64_t v2 = sub_1000835A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100082E24(uint64_t a1)
{
  unint64_t v2 = sub_1000835A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100082E60(uint64_t a1)
{
  unint64_t v2 = sub_100082FE8();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100082E9C(uint64_t a1)
{
  unint64_t v2 = sub_100082FE8();

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100082EDC()
{
  return qword_1000B5C30[*(char *)(v0 + 16)];
}

uint64_t sub_100082EF4()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void **)(v0 + 8);
  v3._uint64_t countAndFlagsBits = sub_10008303C(*(unsigned char *)(v0 + 16));
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 656423463;
  v4._object = (void *)0xE400000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 39;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 39;
}

uint64_t sub_100082F94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10008339C(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100082FC4(void *a1)
{
  return sub_100082C14(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

unint64_t sub_100082FE8()
{
  unint64_t result = qword_1000FD9A0;
  if (!qword_1000FD9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD9A0);
  }
  return result;
}

unint64_t sub_10008303C(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x4979646165726C41;
      break;
    case 4:
      unint64_t result = 0x7075727265746E69;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x6974696E49746F4ELL;
      break;
    case 7:
      unint64_t result = 0x6F6974617265704FLL;
      break;
    case 8:
      unint64_t result = 0x74756F656D6954;
      break;
    case 9:
      unint64_t result = 0x7463657078656E55;
      break;
    case 10:
      unint64_t result = 0xD000000000000011;
      break;
    case 11:
      unint64_t result = 0x6E776F6E6B6E55;
      break;
    case 12:
      unint64_t result = 0x726F707075736E55;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000831E4@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100083AEC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100083210()
{
  return sub_10008303C(*v0);
}

uint64_t sub_100083218()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100083278()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000832C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1868983913 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684957547 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10008339C(void *a1)
{
  uint64_t v3 = sub_100008614(&qword_1000FD9A8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = a1[4];
  sub_10000AEFC(a1, a1[3]);
  sub_1000835A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10000AF94((uint64_t)a1);
  }
  else
  {
    v10[15] = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    v10[13] = 1;
    sub_1000835F8();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
    sub_10000AF94((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  return v8;
}

unint64_t sub_1000835A4()
{
  unint64_t result = qword_1000FD9B0;
  if (!qword_1000FD9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD9B0);
  }
  return result;
}

unint64_t sub_1000835F8()
{
  unint64_t result = qword_1000FD9B8;
  if (!qword_1000FD9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD9B8);
  }
  return result;
}

unint64_t sub_10008364C()
{
  unint64_t result = qword_1000FD9C8;
  if (!qword_1000FD9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD9C8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DaemonError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008376CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonError.CodingKeys()
{
  return &type metadata for DaemonError.CodingKeys;
}

uint64_t getEnumTagSinglePayload for DaemonError.Kind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DaemonError.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100083900);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DaemonError.Kind()
{
  return &type metadata for DaemonError.Kind;
}

unint64_t sub_10008393C()
{
  unint64_t result = qword_1000FD9D0;
  if (!qword_1000FD9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD9D0);
  }
  return result;
}

unint64_t sub_100083994()
{
  unint64_t result = qword_1000FD9D8;
  if (!qword_1000FD9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD9D8);
  }
  return result;
}

unint64_t sub_1000839EC()
{
  unint64_t result = qword_1000FD9E0;
  if (!qword_1000FD9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD9E0);
  }
  return result;
}

unint64_t sub_100083A44()
{
  unint64_t result = qword_1000FD9E8;
  if (!qword_1000FD9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD9E8);
  }
  return result;
}

unint64_t sub_100083A98()
{
  unint64_t result = qword_1000FD9F0;
  if (!qword_1000FD9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FD9F0);
  }
  return result;
}

unint64_t sub_100083AEC(unint64_t result)
{
  if (result >= 0xD) {
    return 13;
  }
  return result;
}

uint64_t sub_100083AFC()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    uint64_t v2 = v0;
    int v3 = *(void **)(v0 + 24);
    sub_100008614(&qword_1000F7A18);
    swift_allocObject();
    id v4 = v3;
    uint64_t v1 = CurrentValueSubject.init(_:)();
    *(void *)(v2 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t sub_100083B90()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    uint64_t v2 = v0;
    sub_100008614(&qword_1000F77C8);
    swift_allocObject();
    uint64_t v1 = CurrentValueSubject.init(_:)();
    *(void *)(v2 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void *sub_100083C20()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(17);
  v2._uint64_t countAndFlagsBits = 0x56746E6572727563;
  v2._object = (void *)0xEE00292865756C61;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 0x732E666C6573203ALL;
  v3._object = (void *)0xED00003D65746174;
  String.append(_:)(v3);
  uint64_t v9 = *(void *)(v0 + 32);
  LOBYTE(v10) = *(unsigned char *)(v0 + 40);
  sub_100008614(&qword_1000FDD40);
  _print_unlocked<A, B>(_:_:)();
  id v4 = sub_10006EEC8();
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 ulog:40 message:v5, v9, v10];
  swift_bridgeObjectRelease();

  unsigned int v6 = *(unsigned __int8 *)(v1 + 40);
  if (v6 > 0xFD) {
    return 0;
  }
  BOOL v7 = *(void **)(v1 + 32);
  sub_100020718(v7, v6 & 1);
  return v7;
}

void sub_100083D80(uint64_t a1, void *a2, void *a3)
{
  NSString v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_100083E0C()
{
  sub_100081C74(v0 + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel_cardInfo);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100083E90()
{
  return type metadata accessor for HomeAccessoryViewHandleModel();
}

uint64_t type metadata accessor for HomeAccessoryViewHandleModel()
{
  uint64_t result = qword_1000FDA30;
  if (!qword_1000FDA30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100083EE4()
{
  uint64_t result = _s8CardInfoOMa();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for HomeAccessoryViewHandleState()
{
  return self;
}

uint64_t *sub_100083FA8(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v6 = *v2;
  v3[4] = 0;
  sub_100008614(&qword_1000FDD58);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  *(void *)(v7 + 24) = 0;
  v3[5] = v7;
  v3[6] = 0;
  v3[7] = 0;
  v3[8] = (uint64_t)&_swiftEmptySetSingleton;
  v3[9] = 0;
  sub_10004DA44(1953066569, (void *)0xE400000000000000, 0, v6, (uint64_t)&off_1000E8190);
  _OWORD v3[2] = a1;
  v3[3] = a2;
  return v3;
}

uint64_t sub_10008405C()
{
  id v1 = sub_10006EE10();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10000F808(*(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1000840FC()
{
  sub_10008405C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HomeAccessoryViewHandle()
{
  return self;
}

uint64_t sub_100084154()
{
  id v1 = v0;
  if (v0[9])
  {
    uint64_t v2 = v0[9];
  }
  else
  {
    uint64_t v3 = *v0;
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v3;
    sub_100008614(&qword_1000FCE88);
    uint64_t v2 = swift_allocObject();
    uint64_t v6 = *(void *)v2;
    *(void *)(v2 + 32) = 0;
    *(unsigned char *)(v2 + 40) = -1;
    *(void *)(v2 + 48) = &_swiftEmptyArrayStorage;
    sub_10004DA44(1953066569, (void *)0xE400000000000000, 0, v6, (uint64_t)&off_1000E7328);
    *(void *)(v2 + 16) = sub_100085A7C;
    *(void *)(v2 + 24) = v5;
    v1[9] = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000842A8(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = _s8CardInfoOMa();
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_1000820FC(*(void *)(Strong + 16) + OBJC_IVAR____TtC13PCViewService28HomeAccessoryViewHandleModel_cardInfo, (uint64_t)v10);
    uint64_t v13 = swift_allocObject();
    swift_weakInit();
    char v14 = (void *)swift_allocObject();
    void v14[2] = v13;
    void v14[3] = sub_100085ABC;
    void v14[4] = v11;
    v14[5] = a4;
    swift_retain();
    swift_retain();
    sub_100085F5C((uint64_t)v10, (uint64_t)sub_100085B3C, (uint64_t)v14);
    swift_release();
    sub_100081C74((uint64_t)v10);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_retain();
    swift_release();
    sub_10001339C();
    uint64_t v16 = swift_allocError();
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0xE000000000000000;
    *(unsigned char *)(v17 + 16) = 9;
    uint64_t v19 = v16;
    char v20 = 1;
    a1(&v19);
    return swift_errorRelease();
  }
}

void sub_10008449C(void *a1, char a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
    sub_10001339C();
    swift_allocError();
    *(void *)uint64_t v19 = 0;
    *(void *)(v19 + 8) = 0xE000000000000000;
    *(unsigned char *)(v19 + 16) = 9;
    a4();
    swift_errorRelease();
    return;
  }
  if (a2)
  {
    *(void *)&long long v30 = 0;
    *((void *)&v30 + 1) = 0xE000000000000000;
    swift_errorRetain();
    _StringGuts.grow(_:)(33);
    v20._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v20._object = (void *)0x80000001000C3100;
    String.append(_:)(v20);
    *(void *)&v35[0] = a1;
    sub_100008614(&qword_1000F7038);
    _print_unlocked<A, B>(_:_:)();
    id v21 = sub_10006EE10();
    swift_bridgeObjectRetain();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v21 ulog:40 message:v22];
    swift_bridgeObjectRelease();

    sub_100020718(a1, 1);
    swift_retain();
    sub_100099688((uint64_t)a1, v35);
    long long v30 = v35[0];
    long long v31 = v35[1];
    uint64_t v32 = v36;
    long long v33 = v37;
    LOBYTE(v34) = 0;
    PassthroughSubject.send(_:)();
    swift_release();
    sub_1000860DC((uint64_t)v35);
    swift_errorRetain();
    ((void (*)(void *, uint64_t))a4)(a1, 1);
    swift_release();
    sub_100020724(a1, 1);
    uint64_t v23 = a1;
    char v24 = 1;
  }
  else
  {
    sub_100020718(a1, 0);
    id v10 = sub_10006EE10();
    NSString v11 = String._bridgeToObjectiveC()();
    [v10 ulog:40 message:v11];

    LOBYTE(v34) = 2;
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    id v12 = [a1 topViewController:1uLL, 0, 0, 0, v34];
    if (!v12)
    {
      id v25 = sub_10006EE10();
      NSString v26 = String._bridgeToObjectiveC()();
      [v25 ulog:60 message:v26];

      sub_10001339C();
      swift_allocError();
      *(void *)uint64_t v27 = 0;
      *(void *)(v27 + 8) = 0xE000000000000000;
      *(unsigned char *)(v27 + 16) = 9;
      a4();
      swift_errorRelease();
      sub_100020724(a1, 0);
      swift_release();
      return;
    }
    uint64_t v13 = v12;
    [v12 removeFromParentViewController];
    id v14 = [self sharedInstance];
    NSString v15 = [v14 nowPlayingViewController];

    if (v15)
    {
      uint64_t v16 = swift_allocObject();
      swift_weakInit();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v16;
      *(void *)(v17 + 24) = a6;
      uint64_t v32 = sub_100086128;
      *(void *)&long long v33 = v17;
      *(void *)&long long v30 = _NSConcreteStackBlock;
      *((void *)&v30 + 1) = 1107296256;
      *(void *)&long long v31 = sub_100084AE0;
      *((void *)&v31 + 1) = &unk_1000E8330;
      uint64_t v18 = _Block_copy(&v30);
      swift_release();
      [v15 setCoordinatedDismissalBlock:v18];
      _Block_release(v18);
    }
    else
    {
      id v28 = sub_10006EE10();
      NSString v15 = String._bridgeToObjectiveC()();
      [v28 ulog:60 message:v15];
    }
    id v29 = v13;
    ((void (*)(void *, void))a4)(v13, 0);

    swift_release();
    uint64_t v23 = a1;
    char v24 = 0;
  }
  sub_100020724(v23, v24);
}

void sub_1000849B8(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong
    && (uint64_t v8 = *(void (**)(uint64_t (*)(), uint64_t))(Strong + 48),
        sub_10000F7F8((uint64_t)v8),
        swift_release(),
        v8))
  {
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a1;
    *(void *)(v9 + 24) = a2;
    sub_10000F7F8((uint64_t)a1);
    v8(sub_1000861A8, v9);
    swift_release();
    sub_10000F808((uint64_t)v8);
  }
  else
  {
    sub_10004DD60(60, 0xD00000000000002CLL, (void *)0x80000001000C31C0, 0, a4, (uint64_t)&off_1000E8190);
    if (a1) {
      a1();
    }
  }
}

uint64_t sub_100084AE0(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(void (**)(void *, uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  if (v3)
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    uint64_t v3 = sub_100012990;
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_retain();
  v2(v3, v4);
  sub_10000F808((uint64_t)v3);

  return swift_release();
}

void sub_100084B88(void *a1)
{
  uint64_t v2 = v1;
  id v4 = sub_10006EE10();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v6 = *(id *)(qword_100111A10 + 504);
  char v7 = sub_10002D38C();

  if ((v7 & 1) != 0 || *(void *)(*(void *)(v2 + 40) + 24))
  {
    id v8 = sub_10006EE10();
    NSString v21 = String._bridgeToObjectiveC()();
    [v8 ulog:40 message:v21];
  }
  else
  {
    id v9 = [self sharedInstance];
    id v10 = [v9 nowPlayingViewController];

    if (v10)
    {
      id v11 = objc_allocWithZone((Class)MRUNowPlayingQueueHandoffCoordinator);
      id v12 = a1;
      id v13 = [v11 init];
      [v13 setResponse:v12];
      [v13 setHideArtwork:0];

      uint64_t v14 = *(void *)(v2 + 40);
      NSString v15 = *(void **)(v14 + 24);
      *(void *)(v14 + 24) = v13;
      id v16 = v13;
      swift_retain();

      sub_100083AFC();
      id v17 = *(id *)(v14 + 24);
      CurrentValueSubject.send(_:)();
      swift_release();

      swift_release();
      _StringGuts.grow(_:)(53);
      v18._uint64_t countAndFlagsBits = 0xD000000000000033;
      v18._object = (void *)0x80000001000C2FF0;
      String.append(_:)(v18);
      sub_10001280C(0, (unint64_t *)&qword_1000F8A90);
      sub_1000859A4();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      id v19 = sub_10006EE10();
      swift_bridgeObjectRetain();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v19 ulog:40 message:v20];
      swift_bridgeObjectRelease();

      [v10 initiateQueueHandoffTansitionWithCoordinator:v16];
      [v16 setupTransition];
      [v16 beginTransition];

      return;
    }
    id v8 = sub_10006EE10();
    NSString v23 = String._bridgeToObjectiveC()();
    [v8 ulog:60 message:v23];
  }
}

void sub_100084F34()
{
  id v1 = sub_10006EE10();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  uint64_t v3 = *(void **)(*(void *)(v0 + 40) + 24);
  if (v3)
  {
    id v4 = v3;
    [v4 endTransition];
    [v4 completeHandoff];
    uint64_t v5 = *(void *)(v0 + 40);
    id v6 = *(void **)(v5 + 24);
    *(void *)(v5 + 24) = 0;
    swift_retain();

    sub_100083AFC();
    id v7 = *(id *)(v5 + 24);
    CurrentValueSubject.send(_:)();

    swift_release();
    swift_release();
  }
  else
  {
    id v8 = sub_10006EE10();
    NSString v9 = String._bridgeToObjectiveC()();
    [v8 ulog:60 message:v9];
  }
}

void sub_1000850A4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  id v6 = sub_10006EE10();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  if (v2[4])
  {
    swift_retain();
    sub_10004DA44(0xD00000000000001DLL, (void *)0x80000001000BDF70, 0, v5, (uint64_t)&off_1000E8190);
    id v8 = (void *)swift_allocObject();
    void v8[2] = a1;
    v8[3] = a2;
    void v8[4] = v5;
    swift_retain();
    sub_100070B4C((uint64_t)sub_100085940, (uint64_t)v8);
    swift_release();
    swift_release();
  }
  else
  {
    id v9 = sub_10006EE10();
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 ulog:60 message:v10];
  }
}

void sub_10008526C(char a1)
{
  char v2 = a1 & 1;
  id v3 = sub_10006EE10();
  NSString v4 = String._bridgeToObjectiveC()();
  [v3 ulog:40 message:v4];

  uint64_t v5 = sub_10008539C(v2);
  if (v5)
  {
    *(void *)(v1 + 32) = v5;
    swift_retain();
    swift_release();
    sub_100070734();
    swift_release();
  }
  else
  {
    id v6 = sub_10006EE10();
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 ulog:60 message:v7];
  }
}

uint64_t sub_10008539C(char a1)
{
  uint64_t v3 = *v1;
  id v4 = sub_10006EE10();
  NSString v5 = String._bridgeToObjectiveC()();
  [v4 ulog:40 message:v5];

  sub_100084154();
  id v6 = sub_100083C20();
  unsigned __int8 v8 = v7;
  int v9 = ~v7;
  swift_release();
  if (!v9) {
    goto LABEL_10;
  }
  if ((v8 & 1) != 0 || (self, (uint64_t v10 = swift_dynamicCastObjCClass()) == 0))
  {
    sub_1000858F0(v6, v8);
LABEL_10:
    sub_10004DD60(60, 0xD000000000000016, (void *)0x80000001000C2E00, 0, v3, (uint64_t)&off_1000E8190);
    return 0;
  }
  uint64_t v11 = v10;
  id v12 = [self sharedInstance];
  id v13 = [v12 nowPlayingViewController];

  if (!v13)
  {
    id v23 = sub_10006EE10();
    NSString v24 = String._bridgeToObjectiveC()();
    [v23 ulog:60 message:v24];

    sub_1000858F0(v6, v8);
    return 0;
  }
  sub_100020718(v6, 0);
  id v14 = [v13 artworkView];
  type metadata accessor for ArtworkAnimation();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 32) = 0;
  *(_OWORD *)(v15 + 40) = xmmword_1000B5CA0;
  *(void *)(v15 + 56) = 0;
  *(void *)(v15 + 64) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v15 + 72) = _Q0;
  *(void *)(v15 + 88) = 0;
  *(void *)(v15 + 96) = 0;
  long long v27 = _Q0;
  *(_OWORD *)(v15 + 104) = _Q0;
  *(void *)(v15 + 120) = sub_10004F11C((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v15 + 16) = v11;
  *(void *)(v15 + 24) = v14;
  *(void *)(v15 + 32) = 0;
  if (a1)
  {
    if (qword_1000F6690 != -1) {
      swift_once();
    }
    NSString v21 = &xmmword_100111A78;
  }
  else
  {
    if (qword_1000F6688 != -1) {
      swift_once();
    }
    NSString v21 = &xmmword_100111A58;
  }
  uint64_t v25 = *((void *)v21 + 2);
  uint64_t v26 = *((void *)v21 + 3);
  *(_OWORD *)(v15 + 56) = *v21;
  *(void *)(v15 + 72) = v25;
  *(void *)(v15 + 80) = v26;
  sub_1000858F0(v6, v8);

  *(void *)(v15 + 88) = 0;
  *(void *)(v15 + 96) = 0;
  *(_OWORD *)(v15 + 104) = v27;
  return v15;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewManager()
{
  return &type metadata for HomeAccessoryViewManager;
}

void sub_1000856BC(void *a1, char a2, void (*a3)(void *, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    uint64_t v6 = 1;
  }
  else
  {
    id v7 = a1;
    uint64_t v6 = 0;
  }
  a3(a1, v6);

  sub_100020724(a1, a2 & 1);
}

void sub_100085730(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  id v6 = sub_100008EB8();
  NSString v7 = String._bridgeToObjectiveC()();
  [v6 ulog:40 message:v7];

  if (a2)
  {
    swift_errorRetain();
    a3(a2, 1);
LABEL_7:
    swift_errorRelease();
    return;
  }
  if (!a1)
  {
LABEL_6:
    sub_10001339C();
    uint64_t v11 = swift_allocError();
    *(void *)uint64_t v12 = 0;
    *(void *)(v12 + 8) = 0xE000000000000000;
    *(unsigned char *)(v12 + 16) = 9;
    a3(v11, 1);
    goto LABEL_7;
  }
  id v8 = objc_allocWithZone((Class)NSNull);
  id v9 = a1;
  id v10 = [v8 init];
  sub_10001280C(0, &qword_1000FDD50);
  LOBYTE(v8) = static NSObject.== infix(_:_:)();

  if (v8)
  {

    goto LABEL_6;
  }
  id v13 = v9;
  a3((uint64_t)a1, 0);
}

void sub_1000858F0(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_100020724(a1, a2 & 1);
  }
}

uint64_t sub_100085908()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100085940()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  sub_10004DA44(0xD00000000000001ALL, (void *)0x80000001000BDF20, 0, *(void *)(v0 + 32), (uint64_t)&off_1000E8190);
  return v1();
}

unint64_t sub_1000859A4()
{
  unint64_t result = qword_1000FDD48;
  if (!qword_1000FDD48)
  {
    sub_10001280C(255, (unint64_t *)&qword_1000F8A90);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDD48);
  }
  return result;
}

uint64_t sub_100085A0C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100085A44()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100085A7C(void (*a1)(uint64_t *), uint64_t a2)
{
  return sub_1000842A8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100085A84()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100085ABC(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_100085AFC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100085B3C(void *a1, char a2)
{
  sub_10008449C(a1, a2 & 1, *(void *)(v2 + 16), *(void (**)(void))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

void sub_100085B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  id v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)&v35 - v11;
  uint64_t v13 = _s8CardInfoOMa();
  __chkstk_darwin(v13, v14);
  id v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long aBlock = 0;
  unint64_t v38 = 0xE000000000000000;
  v17._object = (void *)0x80000001000C3090;
  v17._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = 0x3D6F666E69203ALL;
  v18._object = (void *)0xE700000000000000;
  String.append(_:)(v18);
  _print_unlocked<A, B>(_:_:)();
  id v19 = sub_100008EB8();
  swift_bridgeObjectRetain();
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v19 ulog:40 message:v20];
  swift_bridgeObjectRelease();

  sub_1000820FC(a1, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    NSString v21 = self;
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v24 = [v21 SAHomePodCardForMediaRoutingIdentifier:v22 deviceName:v23 mediaAccessoryItemType:2];
  }
  else
  {
    uint64_t v25 = &v16[*(int *)(sub_100008614(&qword_1000FD860) + 48)];
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v26(v12, v16, v4);
    v26(v9, v25, v4);
    long long v27 = self;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    Class v29 = UUID._bridgeToObjectiveC()().super.isa;
    id v24 = [v27 SAHomePodCardWithQuickControlsForDeviceUUID:isa inHomeWithUUID:v29];

    long long v30 = *(void (**)(char *, uint64_t))(v5 + 8);
    v30(v9, v4);
    v30(v12, v4);
  }
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = v36;
  *(void *)(v31 + 16) = v35;
  *(void *)(v31 + 24) = v32;
  uint64_t v41 = sub_1000860BC;
  uint64_t v42 = v31;
  long long aBlock = _NSConcreteStackBlock;
  unint64_t v38 = 1107296256;
  uint64_t v39 = sub_100083D80;
  uint64_t v40 = &unk_1000E82E0;
  long long v33 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v34 = [v24 addCompletionBlock:v33];
  _Block_release(v33);
}

uint64_t sub_100085F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6._object = (void *)0x80000001000C3070;
  v6._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 0x6E4964726163203ALL;
  v7._object = (void *)0xEB000000003D6F66;
  String.append(_:)(v7);
  _s8CardInfoOMa();
  _print_unlocked<A, B>(_:_:)();
  id v8 = sub_100008EB8();
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v8 ulog:v9 message:0xE000000000000000];
  swift_bridgeObjectRelease();

  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  swift_retain();
  sub_100085B4C(a1, (uint64_t)sub_1000860B0, v10);
  return swift_release();
}

void sub_1000860B0(void *a1, char a2)
{
  sub_1000856BC(a1, a2 & 1, *(void (**)(void *, uint64_t))(v2 + 16));
}

void sub_1000860BC(void *a1, uint64_t a2)
{
  sub_100085730(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000860C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000860D4()
{
  return swift_release();
}

uint64_t sub_1000860DC(uint64_t a1)
{
  return a1;
}

void sub_100086128(void (*a1)(void), uint64_t a2)
{
  sub_1000849B8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_100086130()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100086168()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000861A8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1) {
    return v1();
  }
  return result;
}

void *sub_1000861EC(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
    return v4;
  }
  *(void *)a1 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  Swift::String v7 = (void *)a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v9 = *(int *)(v8 + 32);
  uint64_t v10 = (void *)((char *)v4 + v9);
  uint64_t v11 = (uint64_t *)((char *)a2 + v9);
  uint64_t v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  swift_bridgeObjectRetain();
  id v13 = v7;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v87 = v12;
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v83 = (void *)v8;
    uint64_t v17 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v17;
    uint64_t v18 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    __dst = (char *)v10 + v18;
    id v19 = (char *)v11 + v18;
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    NSString v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    if (v22(v19, 1, v20))
    {
      uint64_t v23 = sub_100008614(&qword_1000F91C0);
      memcpy(__dst, v19, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dst, v19, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
    }
    uint64_t v8 = (uint64_t)v83;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    char v84 = (void *)v8;
    uint64_t v24 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v24;
    uint64_t v25 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v26 = *(int *)(v25 + 20);
    uint64_t v78 = v25;
    __dstCATransform3D a = (char *)v10 + v26;
    uint64_t v77 = (char *)v11 + v26;
    uint64_t v27 = type metadata accessor for Date();
    uint64_t v28 = *(void *)(v27 - 8);
    Class v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    swift_bridgeObjectRetain();
    if (v29(v77, 1, v27))
    {
      uint64_t v30 = sub_100008614(&qword_1000F91C0);
      memcpy(__dsta, v77, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dsta, v77, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dsta, 0, 1, v27);
    }
    uint64_t v8 = (uint64_t)v84;
    uint64_t v12 = v87;
    uint64_t v31 = *(int *)(v78 + 24);
    uint64_t v32 = (void *)((char *)v10 + v31);
    long long v33 = (void *)((char *)v11 + v31);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
      goto LABEL_17;
    }
    uint64_t v15 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v15;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_17:
  uint64_t v35 = *(int *)(v8 + 36);
  uint64_t v36 = (void *)((char *)v4 + v35);
  long long v37 = (uint64_t *)((char *)a2 + v35);
  int v38 = swift_getEnumCaseMultiPayload();
  switch(v38)
  {
    case 2:
      uint64_t v40 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v40;
      uint64_t v41 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      char v85 = (char *)v36 + v41;
      uint64_t v42 = (char *)v37 + v41;
      uint64_t v43 = type metadata accessor for Date();
      uint64_t v44 = *(void *)(v43 - 8);
      uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
      swift_bridgeObjectRetain();
      if (v45(v42, 1, v43))
      {
        uint64_t v46 = sub_100008614(&qword_1000F91C0);
        memcpy(v85, v42, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v85, v42, v43);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v85, 0, 1, v43);
      }
      goto LABEL_29;
    case 1:
      uint64_t v47 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v47;
      uint64_t v48 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v49 = *(int *)(v48 + 20);
      __dstCATransform3D b = (int *)v48;
      char v86 = (char *)v36 + v49;
      int8x16_t v79 = (char *)v37 + v49;
      uint64_t v50 = type metadata accessor for Date();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
      swift_bridgeObjectRetain();
      if (v52(v79, 1, v50))
      {
        uint64_t v53 = sub_100008614(&qword_1000F91C0);
        memcpy(v86, v79, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v86, v79, v50);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v86, 0, 1, v50);
      }
      uint64_t v54 = __dstb[6];
      uint64_t v55 = (void *)((char *)v36 + v54);
      uint64_t v56 = (void *)((char *)v37 + v54);
      uint64_t v57 = v56[1];
      *uint64_t v55 = *v56;
      v55[1] = v57;
      swift_bridgeObjectRetain();
      goto LABEL_29;
    case 0:
      uint64_t v39 = v37[1];
      *uint64_t v36 = *v37;
      v36[1] = v39;
      swift_bridgeObjectRetain();
LABEL_29:
      swift_storeEnumTagMultiPayload();
      goto LABEL_30;
  }
  memcpy(v36, v37, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_30:
  uint64_t v58 = a3[6];
  *((unsigned char *)v4 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v59 = *(void **)((char *)a2 + v58);
  *(void *)((char *)v4 + v58) = v59;
  uint64_t v60 = a3[7];
  uint64_t v61 = (char *)v4 + v60;
  uint64_t v62 = (uint64_t)a2 + v60;
  uint64_t v63 = *(void **)((char *)a2 + v60);
  id v64 = v59;
  if (v63 == (void *)1)
  {
    *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
  }
  else
  {
    uint64_t v65 = *(void *)(v62 + 8);
    *(void *)uint64_t v61 = v63;
    *((void *)v61 + 1) = v65;
    id v66 = v63;
  }
  uint64_t v67 = a3[8];
  char v68 = (void *)((char *)v4 + v67);
  char v69 = (uint64_t *)((char *)a2 + v67);
  _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v70 = v69[1];
    *char v68 = *v69;
    v68[1] = v70;
    uint64_t v71 = v69[2];
    uint64_t v72 = v69[3];
    v68[2] = v71;
    v68[3] = v72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v73 = type metadata accessor for UUID();
    uint64_t v74 = *(void (**)(void *, void *, uint64_t))(*(void *)(v73 - 8) + 16);
    v74(v68, v69, v73);
    uint64_t v75 = sub_100008614(&qword_1000FD860);
    v74((void *)((char *)v68 + *(int *)(v75 + 48)), (void *)((char *)v69 + *(int *)(v75 + 48)), v73);
  }
  swift_storeEnumTagMultiPayload();
  *(void *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  return v4;
}

uint64_t sub_100086954(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();

  uint64_t v4 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v5 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    }
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = v5 + *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20);
      uint64_t v11 = type metadata accessor for Date();
      uint64_t v12 = *(void *)(v11 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      }
    }
    else if (EnumCaseMultiPayload)
    {
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
LABEL_10:
  uint64_t v13 = a1 + *(int *)(v4 + 36);
  int v14 = swift_getEnumCaseMultiPayload();
  if (v14 == 2)
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = v13 + *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void *)(v16 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16)) {
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    }
  }
  else
  {
    if (v14 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v18 = v13 + *(int *)(type metadata accessor for ActivityDisplayContext.CallDisplayContext(0) + 20);
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v20 = *(void *)(v19 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      }
    }
    else if (v14)
    {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
LABEL_19:

  uint64_t v21 = *(void **)(a1 + a2[7]);
  if (v21 != (void *)1) {

  }
  uint64_t v22 = a1 + a2[8];
  _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v26)((void *)(v24 - 8), v22, v24);
    uint64_t v25 = v22 + *(int *)(sub_100008614(&qword_1000FD860) + 48);
    return v26(v25, v24);
  }
}

uint64_t sub_100086D80(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  Swift::String v6 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  swift_bridgeObjectRetain();
  id v12 = v6;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  char v85 = a3;
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v81 = (void *)v7;
    uint64_t v15 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v15;
    uint64_t v16 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    __dst = (char *)v9 + v16;
    uint64_t v17 = (char *)v10 + v16;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    if (v20(v17, 1, v18))
    {
      uint64_t v21 = sub_100008614(&qword_1000F91C0);
      memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = (uint64_t)v81;
    a3 = v85;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v76 = v11;
    char v82 = (void *)v7;
    uint64_t v22 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v22;
    uint64_t v75 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v23 = *(int *)(v75 + 20);
    __dstCATransform3D a = (char *)v9 + v23;
    uint64_t v24 = (char *)v10 + v23;
    uint64_t v25 = type metadata accessor for Date();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = sub_100008614(&qword_1000F91C0);
      memcpy(__dsta, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(__dsta, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(__dsta, 0, 1, v25);
    }
    uint64_t v7 = (uint64_t)v82;
    uint64_t v11 = v76;
    uint64_t v29 = *(int *)(v75 + 24);
    uint64_t v30 = (void *)((char *)v9 + v29);
    uint64_t v31 = (void *)((char *)v10 + v29);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    a3 = v85;
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v14;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v33 = *(int *)(v7 + 36);
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  int v36 = swift_getEnumCaseMultiPayload();
  if (v36 == 2)
  {
    uint64_t v38 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v38;
    uint64_t v39 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v83 = (char *)v34 + v39;
    uint64_t v40 = (char *)v35 + v39;
    uint64_t v41 = type metadata accessor for Date();
    uint64_t v42 = *(void *)(v41 - 8);
    uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    swift_bridgeObjectRetain();
    if (v43(v40, 1, v41))
    {
      uint64_t v44 = sub_100008614(&qword_1000F91C0);
      memcpy(v83, v40, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v83, v40, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v83, 0, 1, v41);
    }
    a3 = v85;
  }
  else if (v36 == 1)
  {
    uint64_t v45 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v45;
    uint64_t v46 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v47 = *(int *)(v46 + 20);
    __dstCATransform3D b = (int *)v46;
    char v84 = (char *)v34 + v47;
    uint64_t v77 = (char *)v35 + v47;
    uint64_t v48 = type metadata accessor for Date();
    uint64_t v49 = *(void *)(v48 - 8);
    uint64_t v50 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
    swift_bridgeObjectRetain();
    if (v50(v77, 1, v48))
    {
      uint64_t v51 = sub_100008614(&qword_1000F91C0);
      memcpy(v84, v77, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v84, v77, v48);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v84, 0, 1, v48);
    }
    a3 = v85;
    uint64_t v52 = __dstb[6];
    uint64_t v53 = (void *)((char *)v34 + v52);
    uint64_t v54 = (void *)((char *)v35 + v52);
    uint64_t v55 = v54[1];
    *uint64_t v53 = *v54;
    v53[1] = v55;
    swift_bridgeObjectRetain();
  }
  else
  {
    if (v36)
    {
      memcpy(v34, v35, *(void *)(*(void *)(v11 - 8) + 64));
      goto LABEL_28;
    }
    uint64_t v37 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v37;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_28:
  uint64_t v56 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v57 = *(void **)(a2 + v56);
  *(void *)(a1 + v56) = v57;
  uint64_t v58 = a3[7];
  uint64_t v59 = a1 + v58;
  uint64_t v60 = a2 + v58;
  uint64_t v61 = *(void **)(a2 + v58);
  id v62 = v57;
  if (v61 == (void *)1)
  {
    *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
  }
  else
  {
    uint64_t v63 = *(void *)(v60 + 8);
    *(void *)uint64_t v59 = v61;
    *(void *)(v59 + 8) = v63;
    id v64 = v61;
  }
  uint64_t v65 = a3[8];
  id v66 = (void *)(a1 + v65);
  uint64_t v67 = (void *)(a2 + v65);
  _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v68 = v67[1];
    *id v66 = *v67;
    v66[1] = v68;
    uint64_t v69 = v67[2];
    uint64_t v70 = v67[3];
    v66[2] = v69;
    v66[3] = v70;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v71 = type metadata accessor for UUID();
    uint64_t v72 = *(void (**)(void *, void *, uint64_t))(*(void *)(v71 - 8) + 16);
    v72(v66, v67, v71);
    uint64_t v73 = sub_100008614(&qword_1000FD860);
    v72((void *)((char *)v66 + *(int *)(v73 + 48)), (void *)((char *)v67 + *(int *)(v73 + 48)), v71);
  }
  swift_storeEnumTagMultiPayload();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000874A8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = (void *)a2[5];
  *(void *)(a1 + 40) = v8;
  id v9 = v8;

  uint64_t v10 = type metadata accessor for ActivityDisplayContext(0);
  if ((uint64_t *)a1 == a2) {
    goto LABEL_30;
  }
  uint64_t v11 = v10;
  uint64_t v12 = *(int *)(v10 + 32);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)((char *)a2 + v12);
  sub_100089B18(a1 + v12, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  uint64_t v15 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v77 = v15;
  uint64_t v78 = a3;
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *uint64_t v13 = *v14;
      v13[1] = v14[1];
      uint64_t v17 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
      __dst = (char *)v13 + v17;
      uint64_t v18 = (char *)v14 + v17;
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
      swift_bridgeObjectRetain();
      if (v21(v18, 1, v19))
      {
        uint64_t v22 = sub_100008614(&qword_1000F91C0);
        memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
      }
      a3 = v78;
      goto LABEL_15;
    case 1:
      *uint64_t v13 = *v14;
      v13[1] = v14[1];
      uint64_t v23 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
      uint64_t v24 = *(int *)(v23 + 20);
      uint64_t v72 = (char *)v13 + v24;
      __dstCATransform3D a = (int *)v23;
      uint64_t v71 = (char *)v14 + v24;
      uint64_t v25 = type metadata accessor for Date();
      uint64_t v26 = *(void *)(v25 - 8);
      uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
      swift_bridgeObjectRetain();
      if (v27(v71, 1, v25))
      {
        uint64_t v28 = sub_100008614(&qword_1000F91C0);
        memcpy(v72, v71, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v72, v71, v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v72, 0, 1, v25);
      }
      uint64_t v15 = v77;
      uint64_t v29 = __dsta[6];
      uint64_t v30 = (void *)((char *)v13 + v29);
      uint64_t v31 = (void *)((char *)v14 + v29);
      *uint64_t v30 = *v31;
      v30[1] = v31[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      a3 = v78;
      goto LABEL_16;
    case 0:
      *uint64_t v13 = *v14;
      v13[1] = v14[1];
      swift_bridgeObjectRetain();
LABEL_15:
      swift_storeEnumTagMultiPayload();
      goto LABEL_16;
  }
  memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
LABEL_16:
  uint64_t v32 = *(int *)(v11 + 36);
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (uint64_t *)((char *)a2 + v32);
  sub_100089B18(a1 + v32, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  int v35 = swift_getEnumCaseMultiPayload();
  if (v35 == 2)
  {
    *uint64_t v33 = *v34;
    v33[1] = v34[1];
    uint64_t v36 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v37 = (char *)v33 + v36;
    uint64_t v38 = (char *)v34 + v36;
    uint64_t v39 = type metadata accessor for Date();
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    swift_bridgeObjectRetain();
    if (v41(v38, 1, v39))
    {
      uint64_t v42 = sub_100008614(&qword_1000F91C0);
      memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    a3 = v78;
LABEL_29:
    swift_storeEnumTagMultiPayload();
    goto LABEL_30;
  }
  if (v35 != 1)
  {
    if (v35)
    {
      memcpy(v33, v34, *(void *)(*(void *)(v15 - 8) + 64));
      goto LABEL_30;
    }
    *uint64_t v33 = *v34;
    v33[1] = v34[1];
    swift_bridgeObjectRetain();
    goto LABEL_29;
  }
  *uint64_t v33 = *v34;
  v33[1] = v34[1];
  uint64_t v43 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
  uint64_t v44 = *(int *)(v43 + 20);
  uint64_t v73 = (char *)v33 + v44;
  __dstCATransform3D b = (int *)v43;
  uint64_t v45 = (char *)v34 + v44;
  uint64_t v46 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  if (v48(v45, 1, v46))
  {
    uint64_t v49 = sub_100008614(&qword_1000F91C0);
    memcpy(v73, v45, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v73, v45, v46);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v73, 0, 1, v46);
  }
  uint64_t v50 = __dstb[6];
  uint64_t v51 = (void *)((char *)v33 + v50);
  uint64_t v52 = (void *)((char *)v34 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  a3 = v78;
LABEL_30:
  *(unsigned char *)(a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
  uint64_t v53 = a3[6];
  uint64_t v54 = *(void **)(a1 + v53);
  uint64_t v55 = *(void **)((char *)a2 + v53);
  *(void *)(a1 + v53) = v55;
  id v56 = v55;

  uint64_t v57 = a3[7];
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (uint64_t)a2 + v57;
  uint64_t v60 = *(void **)(a1 + v57);
  uint64_t v61 = *(void **)((char *)a2 + v57);
  if (v60 == (void *)1)
  {
    if (v61 != (void *)1)
    {
      *uint64_t v58 = v61;
      v58[1] = *(void *)(v59 + 8);
      id v62 = v61;
      if ((uint64_t *)a1 == a2) {
        goto LABEL_43;
      }
      goto LABEL_39;
    }
  }
  else
  {
    if (v61 != (void *)1)
    {
      *uint64_t v58 = v61;
      id v63 = v61;

      v58[1] = *(void *)(v59 + 8);
      if ((uint64_t *)a1 == a2) {
        goto LABEL_43;
      }
      goto LABEL_39;
    }
    sub_100087CD8((uint64_t)v58);
  }
  *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
  if ((uint64_t *)a1 == a2) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v64 = a3[8];
  uint64_t v65 = (void *)(a1 + v64);
  id v66 = (uint64_t *)((char *)a2 + v64);
  sub_100089B18(a1 + v64, (uint64_t (*)(void))_s8CardInfoOMa);
  _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v65 = *v66;
    v65[1] = v66[1];
    _OWORD v65[2] = v66[2];
    v65[3] = v66[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v67 = type metadata accessor for UUID();
    uint64_t v68 = *(void (**)(void *, void *, uint64_t))(*(void *)(v67 - 8) + 16);
    v68(v65, v66, v67);
    uint64_t v69 = sub_100008614(&qword_1000FD860);
    v68((void *)((char *)v65 + *(int *)(v69 + 48)), (void *)((char *)v66 + *(int *)(v69 + 48)), v67);
  }
  swift_storeEnumTagMultiPayload();
LABEL_43:
  *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_100087CD8(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000FDD60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100087D38(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  id v9 = (_OWORD *)(a2 + v7);
  uint64_t v10 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *uint64_t v8 = *v9;
    uint64_t v18 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v19 = (char *)v8 + v18;
    uint64_t v20 = (char *)v9 + v18;
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = sub_100008614(&qword_1000F91C0);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      goto LABEL_12;
    }
    *uint64_t v8 = *v9;
    uint64_t v12 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v13 = *(int *)(v12 + 20);
    uint64_t v49 = v12;
    __dst = (char *)v8 + v13;
    uint64_t v14 = (char *)v9 + v13;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = sub_100008614(&qword_1000F91C0);
      memcpy(__dst, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    *(_OWORD *)((char *)v8 + *(int *)(v49 + 24)) = *(_OWORD *)((char *)v9 + *(int *)(v49 + 24));
  }
  swift_storeEnumTagMultiPayload();
LABEL_12:
  uint64_t v24 = *(int *)(v6 + 36);
  uint64_t v25 = (_OWORD *)(a1 + v24);
  uint64_t v26 = (_OWORD *)(a2 + v24);
  int v27 = swift_getEnumCaseMultiPayload();
  if (v27 == 2)
  {
    *uint64_t v25 = *v26;
    uint64_t v34 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    int v35 = (char *)v25 + v34;
    uint64_t v36 = (char *)v26 + v34;
    uint64_t v37 = type metadata accessor for Date();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      uint64_t v39 = sub_100008614(&qword_1000F91C0);
      memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
  }
  else
  {
    if (v27 != 1)
    {
      memcpy(v25, v26, *(void *)(*(void *)(v10 - 8) + 64));
      goto LABEL_23;
    }
    *uint64_t v25 = *v26;
    uint64_t v28 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v29 = *(int *)(v28 + 20);
    __dstCATransform3D a = (char *)v25 + v29;
    uint64_t v30 = (char *)v26 + v29;
    uint64_t v31 = type metadata accessor for Date();
    uint64_t v32 = *(void *)(v31 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    {
      uint64_t v33 = sub_100008614(&qword_1000F91C0);
      memcpy(__dsta, v30, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v32 + 32))(__dsta, v30, v31);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(__dsta, 0, 1, v31);
    }
    *(_OWORD *)((char *)v25 + *(int *)(v28 + 24)) = *(_OWORD *)((char *)v26 + *(int *)(v28 + 24));
  }
  swift_storeEnumTagMultiPayload();
LABEL_23:
  uint64_t v40 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v40) = *(void *)(a2 + v40);
  uint64_t v41 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v42 = (char *)(a1 + v41);
  uint64_t v43 = (char *)(a2 + v41);
  uint64_t v44 = _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    uint64_t v45 = type metadata accessor for UUID();
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32);
    v46(v42, v43, v45);
    uint64_t v47 = sub_100008614(&qword_1000FD860);
    v46(&v42[*(int *)(v47 + 48)], &v43[*(int *)(v47 + 48)], v45);
    swift_storeEnumTagMultiPayload();
  }
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100088368(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
  if (a1 == a2) {
    goto LABEL_24;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(int *)(v7 + 32);
  uint64_t v10 = (_OWORD *)(a1 + v9);
  uint64_t v11 = (_OWORD *)(a2 + v9);
  sub_100089B18(a1 + v9, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  uint64_t v12 = type metadata accessor for ActivityDisplayContext.DynamicTextScheme(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *uint64_t v10 = *v11;
    uint64_t v20 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v21 = (char *)v10 + v20;
    uint64_t v22 = (char *)v11 + v20;
    uint64_t v23 = type metadata accessor for Date();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_100008614(&qword_1000F91C0);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
LABEL_12:
    swift_storeEnumTagMultiPayload();
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload == 1)
  {
    *uint64_t v10 = *v11;
    uint64_t v14 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v15 = *(int *)(v14 + 20);
    uint64_t v56 = v14;
    __dst = (char *)v10 + v15;
    uint64_t v16 = (char *)v11 + v15;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_100008614(&qword_1000F91C0);
      memcpy(__dst, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(__dst, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
    }
    *(_OWORD *)((char *)v10 + *(int *)(v56 + 24)) = *(_OWORD *)((char *)v11 + *(int *)(v56 + 24));
    goto LABEL_12;
  }
  memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
LABEL_13:
  uint64_t v26 = *(int *)(v8 + 36);
  int v27 = (_OWORD *)(a1 + v26);
  uint64_t v28 = (_OWORD *)(a2 + v26);
  sub_100089B18(a1 + v26, type metadata accessor for ActivityDisplayContext.DynamicTextScheme);
  int v29 = swift_getEnumCaseMultiPayload();
  if (v29 == 2)
  {
    *int v27 = *v28;
    uint64_t v36 = *(int *)(type metadata accessor for ActivityDisplayContext.TimerDisplayContext(0) + 20);
    uint64_t v37 = (char *)v27 + v36;
    uint64_t v38 = (char *)v28 + v36;
    uint64_t v39 = type metadata accessor for Date();
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      uint64_t v41 = sub_100008614(&qword_1000F91C0);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v37, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
  }
  else
  {
    if (v29 != 1)
    {
      memcpy(v27, v28, *(void *)(*(void *)(v12 - 8) + 64));
      goto LABEL_24;
    }
    *int v27 = *v28;
    uint64_t v30 = type metadata accessor for ActivityDisplayContext.CallDisplayContext(0);
    uint64_t v31 = *(int *)(v30 + 20);
    __dstCATransform3D a = (char *)v27 + v31;
    uint64_t v32 = (char *)v28 + v31;
    uint64_t v33 = type metadata accessor for Date();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = sub_100008614(&qword_1000F91C0);
      memcpy(__dsta, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(__dsta, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dsta, 0, 1, v33);
    }
    *(_OWORD *)((char *)v27 + *(int *)(v30 + 24)) = *(_OWORD *)((char *)v28 + *(int *)(v30 + 24));
  }
  swift_storeEnumTagMultiPayload();
LABEL_24:
  uint64_t v42 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  uint64_t v43 = *(void **)(a1 + v42);
  *(void *)(a1 + v42) = *(void *)(a2 + v42);

  uint64_t v44 = a3[7];
  uint64_t v45 = (void *)(a1 + v44);
  uint64_t v46 = (void *)(a2 + v44);
  uint64_t v47 = *(void **)(a1 + v44);
  if (v47 != (void *)1)
  {
    if (*v46 != 1)
    {
      *uint64_t v45 = *v46;

      v45[1] = v46[1];
      if (a1 == a2) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    sub_100087CD8((uint64_t)v45);
  }
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  if (a1 == a2) {
    goto LABEL_33;
  }
LABEL_30:
  uint64_t v48 = a3[8];
  uint64_t v49 = (char *)(a1 + v48);
  uint64_t v50 = (char *)(a2 + v48);
  sub_100089B18(a1 + v48, (uint64_t (*)(void))_s8CardInfoOMa);
  uint64_t v51 = _s8CardInfoOMa();
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v49, v50, *(void *)(*(void *)(v51 - 8) + 64));
  }
  else
  {
    uint64_t v52 = type metadata accessor for UUID();
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 32);
    v53(v49, v50, v52);
    uint64_t v54 = sub_100008614(&qword_1000FD860);
    v53(&v49[*(int *)(v54 + 48)], &v50[*(int *)(v54 + 48)], v52);
    swift_storeEnumTagMultiPayload();
  }
LABEL_33:
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100088A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100088A70);
}

uint64_t sub_100088A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = _s8CardInfoOMa();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 32);
    return v13(v15, a2, v14);
  }
}

uint64_t sub_100088BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100088BBC);
}

uint64_t sub_100088BBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
  else
  {
    uint64_t v11 = _s8CardInfoOMa();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for ClassicCardViewServiceContext()
{
  uint64_t result = qword_1000FDDC0;
  if (!qword_1000FDDC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100088D34()
{
  uint64_t result = type metadata accessor for ActivityDisplayContext(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = _s8CardInfoOMa();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_100088E24(char a1)
{
  unint64_t result = 0xD00000000000001DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x436C616974696E69;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 4:
      unint64_t result = 0x6F666E4964726163;
      break;
    case 5:
      unint64_t result = 0x7341656369766564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100088F14(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100008614(&qword_1000FDE28);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_1000899F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for ActivityDisplayContext(0);
  sub_100089B78(&qword_1000F9430, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    unint64_t v10 = (int *)type metadata accessor for ClassicCardViewServiceContext();
    LOBYTE(v12) = *(unsigned char *)(v3 + v10[5]);
    char v13 = 1;
    sub_10004ABEC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *(void *)(v3 + v10[6]);
    char v13 = 2;
    sub_100008614(&qword_1000F8D50);
    sub_10003A7A4(&qword_1000F8D68);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + v10[7]);
    char v13 = 3;
    sub_10004AB98();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 4;
    _s8CardInfoOMa();
    sub_100089B78(&qword_1000FDE30, (void (*)(uint64_t))_s8CardInfoOMa);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v12 = *(void *)(v3 + v10[9]);
    char v13 = 5;
    type metadata accessor for PCActivityAssetType(0);
    sub_100089B78(&qword_1000FD5C0, type metadata accessor for PCActivityAssetType);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void sub_100089288(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = _s8CardInfoOMa();
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v7, v8);
  uint64_t v26 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000FDE10);
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (int *)type metadata accessor for ClassicCardViewServiceContext();
  uint64_t v17 = *(int *)(__chkstk_darwin(v14, v15) + 24);
  uint64_t v18 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = a1;
  uint64_t v29 = v17;
  *(void *)&v18[v17] = 0;
  sub_10000AEFC(a1, a1[3]);
  sub_1000899F8();
  int v27 = v13;
  uint64_t v19 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    uint64_t v22 = v29;
    sub_10000AF94((uint64_t)v28);
  }
  else
  {
    uint64_t v20 = v24;
    LOBYTE(v31) = 0;
    sub_100089B78(&qword_1000F93D0, (void (*)(uint64_t))type metadata accessor for ActivityDisplayContext);
    uint64_t v21 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100089A4C(v26, (uint64_t)v18, type metadata accessor for ActivityDisplayContext);
    char v32 = 1;
    sub_10004AA88();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v18[v14[5]] = v31;
    sub_100008614(&qword_1000F8D50);
    char v32 = 2;
    sub_10003A7A4(&qword_1000F8D58);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(void *)&v18[v29] = v31;
    char v32 = 3;
    sub_10004A98C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v18[v14[7]] = v31;
    LOBYTE(v31) = 4;
    sub_100089B78(&qword_1000FDE20, (void (*)(uint64_t))_s8CardInfoOMa);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100089A4C((uint64_t)v6, (uint64_t)&v18[v14[8]], (uint64_t (*)(void))_s8CardInfoOMa);
    type metadata accessor for PCActivityAssetType(0);
    char v32 = 5;
    sub_100089B78(&qword_1000FD590, type metadata accessor for PCActivityAssetType);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v21);
    *(void *)&v18[v14[9]] = v31;
    sub_100089AB4((uint64_t)v18, v23);
    sub_10000AF94((uint64_t)v28);
    sub_100089B18((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ClassicCardViewServiceContext);
  }
}

unint64_t sub_10008989C()
{
  return sub_100088E24(*v0);
}

uint64_t sub_1000898A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100089DCC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000898CC(uint64_t a1)
{
  unint64_t v2 = sub_1000899F8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100089908(uint64_t a1)
{
  unint64_t v2 = sub_1000899F8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100089944(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_10008995C(void *a1)
{
  return sub_100088F14(a1);
}

uint64_t sub_100089974(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100089B78(&qword_1000F7040, (void (*)(uint64_t))type metadata accessor for ClassicCardViewServiceContext);
  uint64_t result = sub_100089B78(&qword_1000FDE08, (void (*)(uint64_t))type metadata accessor for ClassicCardViewServiceContext);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000899F8()
{
  unint64_t result = qword_1000FDE18;
  if (!qword_1000FDE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDE18);
  }
  return result;
}

uint64_t sub_100089A4C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100089AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClassicCardViewServiceContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100089B18(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100089B78(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ClassicCardViewServiceContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100089C8CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClassicCardViewServiceContext.CodingKeys()
{
  return &type metadata for ClassicCardViewServiceContext.CodingKeys;
}

unint64_t sub_100089CC8()
{
  unint64_t result = qword_1000FDE38;
  if (!qword_1000FDE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDE38);
  }
  return result;
}

unint64_t sub_100089D20()
{
  unint64_t result = qword_1000FDE40;
  if (!qword_1000FDE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDE40);
  }
  return result;
}

unint64_t sub_100089D78()
{
  unint64_t result = qword_1000FDE48;
  if (!qword_1000FDE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDE48);
  }
  return result;
}

uint64_t sub_100089DCC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001DLL && a2 == 0x80000001000BDB00
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x436C616974696E69 && a2 == 0xEF65646F4D647261 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001000C31F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001000BD980 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F666E4964726163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x7341656369766564 && a2 == 0xEF65707954746573)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t destroy for HomeAccessoryViewEvent(uint64_t a1)
{
  return sub_100020220(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
}

uint64_t initializeWithCopy for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_100021050(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_100021050(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  char v18 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v10;
  sub_100020220(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

__n128 initializeWithTake for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HomeAccessoryViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  char v13 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v4;
  sub_100020220(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for HomeAccessoryViewEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HomeAccessoryViewEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10008A2EC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 56) <= 1u) {
    return *(unsigned __int8 *)(a1 + 56);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_10008A304(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 56) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent()
{
  return &type metadata for HomeAccessoryViewEvent;
}

uint64_t sub_10008A33C()
{
  sub_10008C748(v0, &v16);
  sub_10008C748(v0, &v17);
  if (v21)
  {
    uint64_t v1 = v17;
    if (v21 == 1)
    {
      unint64_t v2 = (void *)*((void *)&v17 + 1);
      *(void *)&long long v22 = 0;
      *((void *)&v22 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)&long long v22 = 0xD000000000000012;
      *((void *)&v22 + 1) = 0x80000001000C3250;
      v3._uint64_t countAndFlagsBits = v1;
      v3._object = v2;
      String.append(_:)(v3);
      v4._uint64_t countAndFlagsBits = 10528;
      v4._object = (void *)0xE200000000000000;
      String.append(_:)(v4);
      return v22;
    }
    else
    {
      uint64_t v11 = *((void *)&v18 + 1) | v18 | *((void *)&v17 + 1);
      if (*((void *)&v19 + 1) | v20 | (unint64_t)v17 | (unint64_t)v19 | v11)
      {
        uint64_t v12 = *((void *)&v19 + 1) | v20 | v19 | v11;
        if ((void)v17 != 1 || v12)
        {
          if ((void)v17 != 2 || v12)
          {
            if ((void)v17 != 3 || v12)
            {
              if ((void)v17 == 4 && v12 == 0) {
                return 0xD00000000000001DLL;
              }
              else {
                return 0xD000000000000014;
              }
            }
            else
            {
              return 0x65746E6573657270;
            }
          }
          else
          {
            return 0x69746E6573657270;
          }
        }
        else
        {
          return 0x646564616F6CLL;
        }
      }
      else
      {
        return 0x6574736575716572;
      }
    }
  }
  else
  {
    long long v22 = v17;
    long long v23 = v18;
    long long v24 = v19;
    uint64_t v25 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    strcpy((char *)v15, "failed( error=");
    HIBYTE(v15[1]) = -18;
    sub_10008CB04();
    LocalizedError.errorDescription.getter();
    uint64_t v7 = v6;
    sub_10008CB58((uint64_t)v0);
    if (v7)
    {
      uint64_t v8 = String.init<A>(describing:)();
      unint64_t v10 = v9;
    }
    else
    {
      unint64_t v10 = 0xE300000000000000;
      uint64_t v8 = 7104878;
    }
    unint64_t v13 = v10;
    String.append(_:)(*(Swift::String *)&v8);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 10528;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    return v15[0];
  }
}

unint64_t sub_10008A610(char a1)
{
  unint64_t result = 0x6574736575716572;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x646564616F6CLL;
      break;
    case 2:
      unint64_t result = 0x64656C696166;
      break;
    case 3:
      unint64_t result = 0x69746E6573657270;
      break;
    case 4:
      unint64_t result = 0x65746E6573657270;
      break;
    case 5:
      unint64_t result = 0x657373696D736964;
      break;
    case 6:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10008A71C(void *a1)
{
  uint64_t v50 = sub_100008614(&qword_1000FDEE8);
  uint64_t v49 = *(void *)(v50 - 8);
  __chkstk_darwin(v50, v2);
  uint64_t v48 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100008614(&qword_1000FDEF0);
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47, v4);
  uint64_t v45 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100008614(&qword_1000FDEF8);
  uint64_t v62 = *(void *)(v63 - 8);
  __chkstk_darwin(v63, v6);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_100008614(&qword_1000FDF00);
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53, v9);
  uint64_t v51 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_100008614(&qword_1000FDF08);
  uint64_t v55 = *(void *)(v56 - 8);
  __chkstk_darwin(v56, v11);
  uint64_t v54 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100008614(&qword_1000FDF10);
  uint64_t v61 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  long long v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100008614(&qword_1000FDF18);
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59, v17);
  uint64_t v57 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100008614(&qword_1000FDF20);
  uint64_t v60 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v20);
  long long v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100008614(&qword_1000FDF28);
  uint64_t v66 = *(void *)(v65 - 8);
  __chkstk_darwin(v65, v23);
  uint64_t v25 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10008C768();
  uint64_t v64 = v25;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10008C748(v81, &v71);
  if (v75)
  {
    if (v75 == 1)
    {
      LOBYTE(v67) = 5;
      sub_10008C864();
      uint64_t v26 = v65;
      int v27 = v64;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v28 = v63;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v8, v28);
      return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v27, v26);
    }
    else
    {
      uint64_t v32 = *((void *)&v72 + 1) | v72 | *((void *)&v71 + 1);
      if (*((void *)&v73 + 1) | v74 | (unint64_t)v71 | (unint64_t)v73 | v32)
      {
        uint64_t v33 = *((void *)&v73 + 1) | v74 | v73 | v32;
        if ((void)v71 != 1 || v33)
        {
          if ((void)v71 != 2 || v33)
          {
            if ((void)v71 != 3 || v33)
            {
              if ((void)v71 != 4 || v33)
              {
                LOBYTE(v67) = 7;
                sub_10008C7BC();
                uint64_t v43 = v48;
                uint64_t v35 = v65;
                uint64_t v36 = v64;
                KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
                uint64_t v37 = *(void (**)(char *, void))(v49 + 8);
                uint64_t v38 = v43;
                uint64_t v39 = (char *)&v74;
              }
              else
              {
                LOBYTE(v67) = 6;
                sub_10008C810();
                uint64_t v42 = v45;
                uint64_t v35 = v65;
                uint64_t v36 = v64;
                KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
                uint64_t v37 = *(void (**)(char *, void))(v46 + 8);
                uint64_t v38 = v42;
                uint64_t v39 = (char *)&v72 + 8;
              }
            }
            else
            {
              LOBYTE(v67) = 4;
              sub_10008C8B8();
              uint64_t v41 = v51;
              uint64_t v35 = v65;
              uint64_t v36 = v64;
              KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
              uint64_t v37 = *(void (**)(char *, void))(v52 + 8);
              uint64_t v38 = v41;
              uint64_t v39 = (char *)&v76 + 8;
            }
          }
          else
          {
            LOBYTE(v67) = 3;
            sub_10008C90C();
            uint64_t v40 = v54;
            uint64_t v35 = v65;
            uint64_t v36 = v64;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
            uint64_t v37 = *(void (**)(char *, void))(v55 + 8);
            uint64_t v38 = v40;
            uint64_t v39 = (char *)&v78;
          }
        }
        else
        {
          LOBYTE(v67) = 1;
          sub_10008CA08();
          uint64_t v34 = v57;
          uint64_t v35 = v65;
          uint64_t v36 = v64;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          uint64_t v37 = *(void (**)(char *, void))(v58 + 8);
          uint64_t v38 = v34;
          uint64_t v39 = &v80;
        }
        v37(v38, *((void *)v39 - 32));
      }
      else
      {
        LOBYTE(v67) = 0;
        sub_10008CA5C();
        uint64_t v35 = v65;
        uint64_t v36 = v64;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v60 + 8))(v22, v19);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v36, v35);
    }
  }
  else
  {
    long long v76 = v71;
    long long v77 = v72;
    long long v78 = v73;
    uint64_t v79 = v74;
    LOBYTE(v67) = 2;
    sub_10008C960();
    uint64_t v30 = v65;
    long long v31 = v64;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    long long v67 = v76;
    long long v68 = v77;
    long long v69 = v78;
    uint64_t v70 = v79;
    sub_10008CAB0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v16, v13);
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v31, v30);
  }
}

unint64_t sub_10008B0F0()
{
  return sub_10008A610(*v0);
}

uint64_t sub_10008B0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008B774(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008B120(uint64_t a1)
{
  unint64_t v2 = sub_10008C768();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B15C(uint64_t a1)
{
  unint64_t v2 = sub_10008C768();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B198(uint64_t a1)
{
  unint64_t v2 = sub_10008C810();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B1D4(uint64_t a1)
{
  unint64_t v2 = sub_10008C810();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B210(uint64_t a1)
{
  unint64_t v2 = sub_10008C7BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B24C(uint64_t a1)
{
  unint64_t v2 = sub_10008C7BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B288(uint64_t a1)
{
  unint64_t v2 = sub_10008C864();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B2C4(uint64_t a1)
{
  unint64_t v2 = sub_10008C864();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B300(uint64_t a1)
{
  unint64_t v2 = sub_10008C960();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B33C(uint64_t a1)
{
  unint64_t v2 = sub_10008C960();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B378(uint64_t a1)
{
  unint64_t v2 = sub_10008CA08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B3B4(uint64_t a1)
{
  unint64_t v2 = sub_10008CA08();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B3F0(uint64_t a1)
{
  unint64_t v2 = sub_10008C8B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B42C(uint64_t a1)
{
  unint64_t v2 = sub_10008C8B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B468(uint64_t a1)
{
  unint64_t v2 = sub_10008C90C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B4A4(uint64_t a1)
{
  unint64_t v2 = sub_10008C90C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008B4E0(uint64_t a1)
{
  unint64_t v2 = sub_10008CA5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008B51C(uint64_t a1)
{
  unint64_t v2 = sub_10008CA5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

_OWORD *sub_10008B558@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = (_OWORD *)sub_10008BAC8(a1, (uint64_t)v5);
  if (!v2) {
    return sub_10008C748(v5, a2);
  }
  return result;
}

uint64_t sub_10008B5A0(void *a1)
{
  sub_10008C748(v1, v4);
  return sub_10008A71C(a1);
}

uint64_t sub_10008B5F0()
{
  sub_10008C748(v0, v2);
  return sub_10008A33C();
}

BOOL sub_10008B628(uint64_t *a1, uint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 56);
  if (*((unsigned char *)a1 + 56))
  {
    if (*((unsigned char *)a1 + 56) == 1) {
      return v2 == 1;
    }
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    uint64_t v10 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v11 = a2[6];
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    uint64_t v14 = a1[2];
    uint64_t v15 = a1[5] | a1[6];
    uint64_t v16 = v12 | v14 | v3;
    if (!(v15 | v4 | v13 | v16)) {
      return v2 == 2 && !(v8 | v5 | v6 | v7 | v10 | v9 | v11);
    }
    uint64_t v17 = v15 | v13 | v16;
    if (v4 != 1 || v17)
    {
      if (v4 != 2 || v17)
      {
        if (v4 != 3 || v17)
        {
          if (v4 != 4 || v17)
          {
            if (v2 != 2 || v6 != 5) {
              return 0;
            }
          }
          else if (v2 != 2 || v6 != 4)
          {
            return 0;
          }
        }
        else if (v2 != 2 || v6 != 3)
        {
          return 0;
        }
      }
      else if (v2 != 2 || v6 != 2)
      {
        return 0;
      }
    }
    else if (v2 != 2 || v6 != 1)
    {
      return 0;
    }
    if (!(v8 | v5 | v7 | v10 | v9 | v11)) {
      return 1;
    }
  }
  else if (!*((unsigned char *)a2 + 56))
  {
    return 1;
  }
  return 0;
}

uint64_t sub_10008B774(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6574736575716572 && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x646564616F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x69746E6573657270 && a2 == 0xEA0000000000676ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65746E6573657270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x657373696D736964 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001000C3230 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001000C3210)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_10008BAC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v79 = a2;
  uint64_t v3 = sub_100008614(&qword_1000FDE50);
  uint64_t v74 = *(void *)(v3 - 8);
  uint64_t v75 = v3;
  __chkstk_darwin(v3, v4);
  char v82 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100008614(&qword_1000FDE58);
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v73 = v6;
  __chkstk_darwin(v6, v7);
  long long v78 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = sub_100008614(&qword_1000FDE60);
  uint64_t v61 = *(void *)(v71 - 8);
  __chkstk_darwin(v71, v9);
  uint64_t v81 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100008614(&qword_1000FDE68);
  uint64_t v70 = *(void *)(v69 - 8);
  __chkstk_darwin(v69, v11);
  long long v76 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100008614(&qword_1000FDE70);
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68, v13);
  char v80 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100008614(&qword_1000FDE78);
  uint64_t v66 = *(void *)(v65 - 8);
  __chkstk_darwin(v65, v15);
  long long v77 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100008614(&qword_1000FDE80);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64, v17);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100008614(&qword_1000FDE88);
  uint64_t v62 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100008614(&qword_1000FDE90);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v26);
  uint64_t v28 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a1[3];
  uint64_t v83 = a1;
  sub_10000AEFC(a1, v29);
  sub_10008C768();
  uint64_t v30 = v91;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v31 = v30;
  if (v30) {
    return sub_10000AF94((uint64_t)v83);
  }
  uint64_t v60 = v23;
  uint64_t v59 = v20;
  uint64_t v32 = v80;
  uint64_t v33 = v81;
  uint64_t v34 = v82;
  uint64_t v91 = v25;
  uint64_t v35 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v35 + 16) != 1)
  {
    uint64_t v43 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v44 = v28;
    uint64_t v45 = v24;
    uint64_t v47 = v46;
    sub_100008614(&qword_1000F8A40);
    *uint64_t v47 = &type metadata for HomeAccessoryViewEvent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v43 - 8) + 104))(v47, enum case for DecodingError.typeMismatch(_:), v43);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v91 + 8))(v44, v45);
    return sub_10000AF94((uint64_t)v83);
  }
  switch(*(unsigned char *)(v35 + 32))
  {
    case 1:
      LOBYTE(v84) = 1;
      sub_10008CA08();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v77 = 0;
      (*(void (**)(char *, uint64_t))(v63 + 8))(v19, v64);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v24);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      char v48 = 2;
      uint64_t v37 = 1;
      break;
    case 2:
      LOBYTE(v84) = 2;
      sub_10008C960();
      uint64_t v49 = v77;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10008C9B4();
      uint64_t v50 = v65;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v49, v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v24);
      long long v77 = 0;
      char v48 = 0;
      uint64_t v37 = v84;
      uint64_t v38 = v85;
      uint64_t v39 = v86;
      uint64_t v40 = v87;
      uint64_t v41 = v88;
      uint64_t v42 = v89;
      uint64_t v31 = v90;
      break;
    case 3:
      LOBYTE(v84) = 3;
      sub_10008C90C();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v77 = 0;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v32, v68);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v24);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v37 = 2;
      goto LABEL_9;
    case 4:
      LOBYTE(v84) = 4;
      sub_10008C8B8();
      uint64_t v51 = v76;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v77 = 0;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v51, v69);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v24);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      char v48 = 2;
      uint64_t v37 = 3;
      break;
    case 5:
      LOBYTE(v84) = 5;
      sub_10008C864();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v52 = v71;
      uint64_t v37 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v31 = 0;
      uint64_t v53 = v91;
      uint64_t v38 = v56;
      long long v77 = 0;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v33, v52);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v28, v24);
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      char v48 = 1;
      break;
    case 6:
      LOBYTE(v84) = 6;
      sub_10008C810();
      uint64_t v54 = v78;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v77 = 0;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v54, v73);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v24);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      char v48 = 2;
      uint64_t v37 = 4;
      break;
    case 7:
      LOBYTE(v84) = 7;
      sub_10008C7BC();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v77 = 0;
      (*(void (**)(char *, uint64_t))(v74 + 8))(v34, v75);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v24);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      char v48 = 2;
      uint64_t v37 = 5;
      break;
    default:
      LOBYTE(v84) = 0;
      sub_10008CA5C();
      uint64_t v36 = v60;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v77 = 0;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v36, v59);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v24);
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
LABEL_9:
      char v48 = 2;
      break;
  }
  uint64_t v57 = v79;
  uint64_t result = sub_10000AF94((uint64_t)v83);
  *(void *)uint64_t v57 = v37;
  *(void *)(v57 + 8) = v38;
  *(void *)(v57 + 16) = v39;
  *(void *)(v57 + 24) = v40;
  *(void *)(v57 + 32) = v41;
  *(void *)(v57 + 40) = v42;
  *(void *)(v57 + 48) = v31;
  *(unsigned char *)(v57 + 56) = v48;
  return result;
}

_OWORD *sub_10008C748(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(_OWORD *)((char *)a2 + 41) = *(long long *)((char *)a1 + 41);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

unint64_t sub_10008C768()
{
  unint64_t result = qword_1000FDE98;
  if (!qword_1000FDE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDE98);
  }
  return result;
}

unint64_t sub_10008C7BC()
{
  unint64_t result = qword_1000FDEA0;
  if (!qword_1000FDEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDEA0);
  }
  return result;
}

unint64_t sub_10008C810()
{
  unint64_t result = qword_1000FDEA8;
  if (!qword_1000FDEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDEA8);
  }
  return result;
}

unint64_t sub_10008C864()
{
  unint64_t result = qword_1000FDEB0;
  if (!qword_1000FDEB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDEB0);
  }
  return result;
}

unint64_t sub_10008C8B8()
{
  unint64_t result = qword_1000FDEB8;
  if (!qword_1000FDEB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDEB8);
  }
  return result;
}

unint64_t sub_10008C90C()
{
  unint64_t result = qword_1000FDEC0;
  if (!qword_1000FDEC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDEC0);
  }
  return result;
}

unint64_t sub_10008C960()
{
  unint64_t result = qword_1000FDEC8;
  if (!qword_1000FDEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDEC8);
  }
  return result;
}

unint64_t sub_10008C9B4()
{
  unint64_t result = qword_1000FDED0;
  if (!qword_1000FDED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDED0);
  }
  return result;
}

unint64_t sub_10008CA08()
{
  unint64_t result = qword_1000FDED8;
  if (!qword_1000FDED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDED8);
  }
  return result;
}

unint64_t sub_10008CA5C()
{
  unint64_t result = qword_1000FDEE0;
  if (!qword_1000FDEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDEE0);
  }
  return result;
}

unint64_t sub_10008CAB0()
{
  unint64_t result = qword_1000FDF30;
  if (!qword_1000FDF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF30);
  }
  return result;
}

unint64_t sub_10008CB04()
{
  unint64_t result = qword_1000FDF38;
  if (!qword_1000FDF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF38);
  }
  return result;
}

uint64_t sub_10008CB58(uint64_t a1)
{
  return a1;
}

unsigned char *storeEnumTagSinglePayload for HomeAccessoryViewEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008CC60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.CodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.RequestedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.RequestedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.LoadedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.LoadedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.FailedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.PresentingCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.PresentingCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.PresentedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.PresentedCodingKeys;
}

unsigned char *_s13PCViewService22HomeAccessoryViewEventO16FailedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10008CD88);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.DismissedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.DismissedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.CoordinatedDismissalRequestedCodingKeys;
}

ValueMetadata *type metadata accessor for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys()
{
  return &type metadata for HomeAccessoryViewEvent.DisambigButtonTappedCodingKeys;
}

unint64_t sub_10008CDE4()
{
  unint64_t result = qword_1000FDF40;
  if (!qword_1000FDF40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF40);
  }
  return result;
}

unint64_t sub_10008CE3C()
{
  unint64_t result = qword_1000FDF48;
  if (!qword_1000FDF48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF48);
  }
  return result;
}

unint64_t sub_10008CE94()
{
  unint64_t result = qword_1000FDF50;
  if (!qword_1000FDF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF50);
  }
  return result;
}

unint64_t sub_10008CEEC()
{
  unint64_t result = qword_1000FDF58;
  if (!qword_1000FDF58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF58);
  }
  return result;
}

unint64_t sub_10008CF44()
{
  unint64_t result = qword_1000FDF60;
  if (!qword_1000FDF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF60);
  }
  return result;
}

unint64_t sub_10008CF9C()
{
  unint64_t result = qword_1000FDF68;
  if (!qword_1000FDF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF68);
  }
  return result;
}

unint64_t sub_10008CFF4()
{
  unint64_t result = qword_1000FDF70;
  if (!qword_1000FDF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF70);
  }
  return result;
}

unint64_t sub_10008D04C()
{
  unint64_t result = qword_1000FDF78;
  if (!qword_1000FDF78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF78);
  }
  return result;
}

unint64_t sub_10008D0A4()
{
  unint64_t result = qword_1000FDF80;
  if (!qword_1000FDF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF80);
  }
  return result;
}

unint64_t sub_10008D0FC()
{
  unint64_t result = qword_1000FDF88;
  if (!qword_1000FDF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF88);
  }
  return result;
}

unint64_t sub_10008D154()
{
  unint64_t result = qword_1000FDF90;
  if (!qword_1000FDF90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF90);
  }
  return result;
}

unint64_t sub_10008D1AC()
{
  unint64_t result = qword_1000FDF98;
  if (!qword_1000FDF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDF98);
  }
  return result;
}

unint64_t sub_10008D204()
{
  unint64_t result = qword_1000FDFA0;
  if (!qword_1000FDFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDFA0);
  }
  return result;
}

unint64_t sub_10008D25C()
{
  unint64_t result = qword_1000FDFA8;
  if (!qword_1000FDFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDFA8);
  }
  return result;
}

unint64_t sub_10008D2B4()
{
  unint64_t result = qword_1000FDFB0;
  if (!qword_1000FDFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDFB0);
  }
  return result;
}

unint64_t sub_10008D30C()
{
  unint64_t result = qword_1000FDFB8;
  if (!qword_1000FDFB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDFB8);
  }
  return result;
}

unint64_t sub_10008D364()
{
  unint64_t result = qword_1000FDFC0;
  if (!qword_1000FDFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDFC0);
  }
  return result;
}

unint64_t sub_10008D3BC()
{
  unint64_t result = qword_1000FDFC8;
  if (!qword_1000FDFC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDFC8);
  }
  return result;
}

unint64_t sub_10008D414()
{
  unint64_t result = qword_1000FDFD0;
  if (!qword_1000FDFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDFD0);
  }
  return result;
}

unint64_t sub_10008D46C()
{
  unint64_t result = qword_1000FDFD8;
  if (!qword_1000FDFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDFD8);
  }
  return result;
}

unint64_t sub_10008D4C4()
{
  unint64_t result = qword_1000FDFE0;
  if (!qword_1000FDFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FDFE0);
  }
  return result;
}

uint64_t sub_10008D518()
{
  return swift_initClassMetadata2();
}

id sub_10008D578()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  strcpy((char *)v10, "Deinit: key=");
  BYTE5(v10[1]) = 0;
  HIWORD(v10[1]) = -5120;
  uint64_t v11 = v0;
  uint64_t v3 = *(void *)&v0[qword_1000FDFF0];
  unsigned int v4 = *(void **)&v0[qword_1000FDFF0 + 8];
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  sub_10004DC48(v10[0], (void *)v10[1], 0, (uint64_t)ObjectType, (uint64_t)&off_1000E8810);
  swift_bridgeObjectRelease();
  id v6 = *(id *)&v0[qword_1000FDFE8];
  swift_bridgeObjectRetain();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v6 removeObserver:v1 forKeyPath:v7 context:0];

  v9.receiver = v1;
  v9.super_class = ObjectType;
  return [super dealloc];
}

id sub_10008D6A8(void *a1)
{
  id v1 = a1;
  return sub_10008D578();
}

uint64_t sub_10008D6D0(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_10008D734(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a3)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    memset(v17, 0, sizeof(v17));
    id v14 = a5;
    id v15 = a1;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  uint64_t v8 = 0;
  uint64_t v10 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  swift_unknownObjectRetain();
  id v11 = a5;
  id v12 = a1;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  type metadata accessor for NSKeyValueChangeKey(0);
  sub_10008DD1C();
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_8:
  sub_10008D880(v8, v10, (uint64_t)v17, v13);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1000127AC((uint64_t)v17);
}

void sub_10008D840()
{
}

uint64_t type metadata accessor for UserDefaultsObserver()
{
  return sub_10000ED34();
}

uint64_t sub_10008D880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(void *)((swift_isaMask & *v4) + 0x50);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v11 - 8);
  uint64_t v37 = v11;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v35 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v38 = *(void *)(v10 - 8);
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v35 - v20;
  *(void *)&long long v39 = v4;
  *(void *)&v41[0] = 0;
  *((void *)&v41[0] + 1) = 0xE000000000000000;
  v22._object = (void *)0x80000001000C32B0;
  v22._uint64_t countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v22);
  v23._uint64_t countAndFlagsBits = 0x65676E616863203ALL;
  v23._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v23);
  uint64_t v42 = a4;
  sub_100008614(&qword_1000FE080);
  sub_10008DD74();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  sub_10004DC80(10, *(uint64_t *)&v41[0], *((void **)&v41[0] + 1), 0, ObjectType, (uint64_t)&off_1000E8810);
  uint64_t result = swift_bridgeObjectRelease();
  if (a4 && a2)
  {
    if (*(void *)((char *)v4 + qword_1000FDFF0) == a1 && *(void *)((char *)v4 + qword_1000FDFF0 + 8) == a2
      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      if (*(void *)(a4 + 16))
      {
        uint64_t v25 = NSKeyValueChangeNewKey;
        unint64_t v26 = sub_10005BFAC((uint64_t)v25);
        if (v27)
        {
          sub_10000E724(*(void *)(a4 + 56) + 32 * v26, (uint64_t)&v39);
        }
        else
        {
          long long v39 = 0u;
          long long v40 = 0u;
        }
        uint64_t v28 = v38;

        if (*((void *)&v40 + 1))
        {
          sub_10000E714(&v39, v41);
          sub_10000E724((uint64_t)v41, (uint64_t)&v39);
          int v29 = swift_dynamicCast();
          uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
          if (v29)
          {
            v30(v18, 0, 1, v10);
            (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v21, v18, v10);
            uint64_t v31 = v35;
            (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v35, v21, v10);
            v30(v31, 0, 1, v10);
            (*(void (**)(char *))((char *)v5 + qword_1000FDFF8))(v31);
            (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v37);
            (*(void (**)(char *, uint64_t))(v28 + 8))(v21, v10);
          }
          else
          {
            v30(v18, 1, 1, v10);
            uint64_t v32 = v37;
            uint64_t v33 = *(void (**)(char *, uint64_t))(v36 + 8);
            v33(v18, v37);
            uint64_t v34 = v35;
            v30(v35, 1, 1, v10);
            (*(void (**)(char *))((char *)v5 + qword_1000FDFF8))(v34);
            v33(v34, v32);
          }
          return sub_10000AF94((uint64_t)v41);
        }
      }
      else
      {
        long long v39 = 0u;
        long long v40 = 0u;
      }
      return sub_1000127AC((uint64_t)&v39);
    }
  }
  return result;
}

void sub_10008DCEC()
{
}

unint64_t sub_10008DD1C()
{
  unint64_t result = qword_1000F6860;
  if (!qword_1000F6860)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F6860);
  }
  return result;
}

unint64_t sub_10008DD74()
{
  unint64_t result = qword_1000FE088;
  if (!qword_1000FE088)
  {
    sub_100009F40(&qword_1000FE080);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE088);
  }
  return result;
}

uint64_t sub_10008DDD0()
{
  return sub_10008DDF8();
}

uint64_t sub_10008DDE4()
{
  return sub_10008DDF8();
}

uint64_t sub_10008DDF8()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10008DE68()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10008DEDC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10008DF50()
{
  return sub_1000236C8();
}

uint64_t sub_10008DF64()
{
  return sub_1000236C8();
}

uint64_t sub_10008DF78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100008614(&qword_1000FE3D0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ActivityDisplayContext(0);
  v9[1] = sub_100077518();
  sub_100008614(&qword_1000FE3D8);
  sub_100012908(&qword_1000FE3E0, &qword_1000FE3D8);
  Publisher.map<A>(_:)();
  swift_release();
  sub_100012908(&qword_1000FE3E8, &qword_1000FE3D0);
  uint64_t v7 = Publisher.eraseToAnyPublisher()();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *a1 = v7;
  return result;
}

uint64_t sub_10008E120()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    return static Published.subscript.setter();
  }
  return result;
}

id sub_10008E1C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(a1 + 40);
  *a2 = v2;
  return v2;
}

uint64_t sub_10008E1CC(UIImage **a1, UIImage **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2 && (uint64_t v4 = UIImagePNGRepresentation(v2)) != 0)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;

    if (!v3) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v8 = 0xF000000000000000;
    if (!v3) {
      goto LABEL_9;
    }
  }
  uint64_t v9 = UIImagePNGRepresentation(v3);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v3 = (UIImage *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    goto LABEL_10;
  }
  uint64_t v3 = 0;
LABEL_9:
  unint64_t v12 = 0xF000000000000000;
LABEL_10:
  if (v8 >> 60 == 15)
  {
    if (v12 >> 60 == 15) {
      return 1;
    }
    goto LABEL_14;
  }
  if (v12 >> 60 == 15)
  {
LABEL_14:
    sub_100066DB8(v6, v8);
    sub_100066DB8((uint64_t)v3, v12);
    return 0;
  }
  sub_1000935F4(v6, v8);
  char v14 = sub_100092610(v6, v8, (uint64_t)v3, v12);
  sub_100066DB8((uint64_t)v3, v12);
  sub_100066DB8(v6, v8);
  sub_100066DB8(v6, v8);
  return v14 & 1;
}

uint64_t sub_10008E308(void **a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    id v3 = v1;
    return static Published.subscript.setter();
  }
  return result;
}

uint64_t sub_10008E39C()
{
  id v1 = sub_10006EEA8();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  id v3 = [self defaultCenter];
  [v3 removeObserver:v0];

  uint64_t v4 = v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__activityDisplayContext;
  uint64_t v5 = sub_100008614(&qword_1000FE350);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__movie;
  uint64_t v7 = sub_100008614(&qword_1000FE358);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  sub_10000F808(*(void *)(v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_eventHandler));
  uint64_t v8 = v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__subtitle;
  uint64_t v9 = sub_100008614(&qword_1000FE360);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__activityImage;
  uint64_t v11 = sub_100008614(&qword_1000FE368);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__canShowActivityIcon;
  uint64_t v13 = sub_100008614(&qword_1000F7EC0);
  char v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  v14(v12, v13);
  v14(v0 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__isOptimisticStateActive, v13);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10008E5F0()
{
  sub_10008E39C();

  return swift_deallocClassInstance();
}

uint64_t sub_10008E648()
{
  return type metadata accessor for ProximityCardHeaderViewModel();
}

uint64_t type metadata accessor for ProximityCardHeaderViewModel()
{
  uint64_t result = qword_1000FE0F0;
  if (!qword_1000FE0F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10008E69C()
{
  uint64_t v1 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v65 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AdjustedMovie(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v63 = (uint64_t)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v59 - v11;
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v59 - v14;
  uint64_t v16 = sub_100008614(&qword_1000FE110);
  uint64_t v18 = __chkstk_darwin(v16 - 8, v17);
  uint64_t v61 = (uint64_t)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v60 = (uint64_t)&v59 - v22;
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v64 = (uint64_t *)((char *)&v59 - v25);
  uint64_t v27 = __chkstk_darwin(v24, v26);
  int v29 = (char *)&v59 - v28;
  uint64_t v31 = __chkstk_darwin(v27, v30);
  uint64_t v33 = (char *)&v59 - v32;
  __chkstk_darwin(v31, v34);
  uint64_t v36 = (char *)&v59 - v35;
  unint64_t v67 = 0;
  unint64_t v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  unint64_t v67 = 0xD000000000000022;
  unint64_t v68 = 0x80000001000C3390;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v66 = v0;
  static Published.subscript.getter();
  swift_release();
  uint64_t v37 = v4;
  swift_release();
  sub_1000210BC((uint64_t)v36, (uint64_t)v33, &qword_1000FE110);
  uint64_t v62 = v5;
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v38(v33, 1, v4) == 1)
  {
    long long v39 = (void *)0xE300000000000000;
    uint64_t v40 = 7104878;
  }
  else
  {
    sub_10009241C((uint64_t)v33, (uint64_t)v15);
    sub_100094B38((uint64_t)v15, (uint64_t)v12, type metadata accessor for AdjustedMovie);
    uint64_t v40 = String.init<A>(describing:)();
    long long v39 = v41;
    sub_100094BA0((uint64_t)v15, type metadata accessor for AdjustedMovie);
  }
  uint64_t v42 = v37;
  sub_10000EC04((uint64_t)v36, &qword_1000FE110);
  v43._uint64_t countAndFlagsBits = v40;
  v43._object = v39;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  id v44 = sub_10006EEA8();
  swift_bridgeObjectRetain();
  NSString v45 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v44 ulog:40 message:v45];
  swift_bridgeObjectRelease();

  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  LODWORD(v45) = v38(v29, 1, v42);
  sub_10000EC04((uint64_t)v29, &qword_1000FE110);
  if (v45 == 1)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v46 = (uint64_t)v65;
    static Published.subscript.getter();
    swift_release();
    swift_release();
    uint64_t v47 = *(void *)(v46 + 16);
    sub_100094BA0(v46, type metadata accessor for ActivityDisplayContext);
    char v48 = v64;
    sub_100008148(v47, v64);
    if (v38((char *)v48, 1, v42) == 1)
    {
      sub_10000EC04((uint64_t)v48, &qword_1000FE110);
      unint64_t v67 = 0;
      unint64_t v68 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      unint64_t v67 = 0xD000000000000026;
      unint64_t v68 = 0x80000001000C33C0;
      swift_getKeyPath();
      swift_getKeyPath();
      static Published.subscript.getter();
      swift_release();
      swift_release();
      uint64_t v49 = *(void *)(v46 + 16);
      sub_100094BA0(v46, type metadata accessor for ActivityDisplayContext);
      uint64_t v50 = sub_100092310(v49);
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v53 = v52;

      v54._uint64_t countAndFlagsBits = v51;
      v54._object = v53;
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      id v55 = sub_10006EEA8();
      swift_bridgeObjectRetain();
      NSString v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v55 ulog:60 message:v56];
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v57 = v63;
      sub_10009241C((uint64_t)v48, v63);
      uint64_t v58 = v60;
      sub_100094B38(v57, v60, type metadata accessor for AdjustedMovie);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v58, 0, 1, v42);
      swift_getKeyPath();
      swift_getKeyPath();
      sub_1000210BC(v58, v61, &qword_1000FE110);
      swift_retain();
      static Published.subscript.setter();
      sub_10000EC04(v58, &qword_1000FE110);
      sub_100094BA0(v57, type metadata accessor for AdjustedMovie);
    }
  }
}

void sub_10008EDD0()
{
  sub_100093E88(319, &qword_1000FE100, type metadata accessor for ActivityDisplayContext, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Published);
  if (v0 <= 0x3F)
  {
    sub_10002FDFC(319, &qword_1000FE108, &qword_1000FE110);
    if (v1 <= 0x3F)
    {
      sub_100024470(319, &qword_1000FE118);
      if (v2 <= 0x3F)
      {
        sub_10002FDFC(319, &qword_1000FE120, (uint64_t *)&unk_1000FE128);
        if (v3 <= 0x3F)
        {
          sub_100024470(319, (unint64_t *)&qword_1000F7CF8);
          if (v4 <= 0x3F) {
            swift_updateClassMetadata2();
          }
        }
      }
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ProximityCardHeaderViewEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10008F0A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProximityCardHeaderViewEvent()
{
  return &type metadata for ProximityCardHeaderViewEvent;
}

unint64_t sub_10008F0DC()
{
  unint64_t result = qword_1000FE348;
  if (!qword_1000FE348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE348);
  }
  return result;
}

uint64_t sub_10008F130@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ProximityCardHeaderViewModel();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10008F170()
{
  uint64_t v0 = type metadata accessor for ActivityDisplayContext(0);
  __chkstk_darwin(v0 - 8, v1);
  int v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v4 = *((void *)v3 + 3);
  swift_bridgeObjectRetain();
  sub_100094BA0((uint64_t)v3, type metadata accessor for ActivityDisplayContext);
  return v4;
}

uint64_t sub_10008F250()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_10008F2C8()
{
  return sub_10008F2F0();
}

uint64_t sub_10008F2DC()
{
  return sub_10008F2F0();
}

uint64_t sub_10008F2F0()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_10008F360(uint64_t result)
{
  uint64_t v2 = *(void (**)(uint64_t))(v1 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_eventHandler);
  if (v2)
  {
    uint64_t v3 = result & 1;
    swift_retain();
    v2(v3);
    return sub_10000F808((uint64_t)v2);
  }
  return result;
}

uint64_t sub_10008F3DC(uint64_t a1)
{
  uint64_t result = sub_100094AF0((unint64_t *)&unk_1000F7840, (void (*)(uint64_t))type metadata accessor for ProximityCardHeaderViewModel);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10008F434(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActivityIcon(0);
  __chkstk_darwin(v2 - 8, v3);
  sub_100094B38(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ActivityIcon);
  sub_100008614(qword_1000FE3F0);
  State.wrappedValue.setter();
  return sub_100094BA0(a1, type metadata accessor for ActivityIcon);
}

uint64_t sub_10008F4F8()
{
  return State.projectedValue.getter();
}

BOOL sub_10008F534(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100008614(&qword_1000FE110);
  uint64_t v6 = __chkstk_darwin(v4 - 8, v5);
  uint64_t v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void *)(a1 - 8);
  __chkstk_darwin(v6, v10);
  uint64_t v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = (char *)(v1 + *(int *)(a1 + 44));
  char v14 = *v13;
  uint64_t v15 = *((void *)v13 + 1);
  v23[8] = v14;
  uint64_t v24 = v15;
  sub_100008614(&qword_1000F7F58);
  State.wrappedValue.getter();
  int v16 = v25;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v9 + 16))(v12, v2, a1);
  if (v16 == 1)
  {
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v17 = *(void *)(a1 + 24);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v17 + 40);
    swift_unknownObjectRetain();
    v19(v18, v17);
    swift_unknownObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, a1);
    uint64_t v20 = type metadata accessor for AdjustedMovie(0);
    BOOL v21 = (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v8, 1, v20) != 1;
    sub_10000EC04((uint64_t)v8, &qword_1000FE110);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, a1);
    return 0;
  }
  return v21;
}

uint64_t sub_10008F758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v36 = a3;
  uint64_t v34 = *(void *)(a1 - 8);
  uint64_t v31 = *(void *)(v34 + 64);
  __chkstk_darwin(a1, a2);
  uint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008614(&qword_1000FE480);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100008614(&qword_1000FE488) - 8;
  __chkstk_darwin(v35, v12);
  uint64_t v37 = (uint64_t)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v11 = static VerticalAlignment.center.getter();
  *((void *)v11 + 1) = 0;
  v11[16] = 1;
  uint64_t v14 = sub_100008614(&qword_1000FE490);
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  sub_10008FA94(v3, v16, v15, (uint64_t)&v11[*(int *)(v14 + 44)]);
  uint64_t v33 = v3;
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v15 + 32);
  swift_unknownObjectRetain();
  uint64_t v30 = v17(v16, v15);
  swift_unknownObjectRelease();
  uint64_t v18 = v34;
  uint64_t v32 = *(void (**)(char *, double *, uint64_t))(v34 + 16);
  v32(v7, v4, a1);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (v19 + 32) & ~v19;
  v31 += v20;
  v29[1] = v19 | 7;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v15;
  uint64_t v34 = *(void *)(v18 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v34)(v21 + v20, v7, a1);
  uint64_t v22 = v37;
  sub_1000210BC((uint64_t)v11, v37, &qword_1000FE480);
  uint64_t v23 = (uint64_t *)(v22 + *(int *)(v35 + 44));
  *uint64_t v23 = v30;
  v23[1] = (uint64_t)sub_100093F34;
  v23[2] = v21;
  sub_10000EC04((uint64_t)v11, &qword_1000FE480);
  v32(v7, v33, a1);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v16;
  *(void *)(v24 + 24) = v15;
  ((void (*)(uint64_t, char *, uint64_t))v34)(v24 + v20, v7, a1);
  uint64_t v25 = v36;
  uint64_t v26 = v37;
  sub_1000210BC(v37, v36, &qword_1000FE488);
  uint64_t v27 = (uint64_t (**)())(v25 + *(int *)(sub_100008614(&qword_1000FE498) + 36));
  *uint64_t v27 = sub_100093F9C;
  v27[1] = (uint64_t (*)())v24;
  v27[2] = 0;
  v27[3] = 0;
  return sub_10000EC04(v26, &qword_1000FE488);
}

uint64_t sub_10008FA94@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v54 = a4;
  uint64_t v7 = sub_100008614(&qword_1000FE4B0);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  uint64_t v55 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v54 - v12;
  uint64_t v14 = sub_100008614(&qword_1000FE4B8);
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (uint64_t *)((char *)&v54 - v21);
  __chkstk_darwin(v20, v23);
  uint64_t v25 = (char *)&v54 - v24;
  *uint64_t v22 = static Alignment.bottomTrailing.getter();
  v22[1] = v26;
  uint64_t v27 = sub_100008614(&qword_1000FE4C0);
  sub_10008FF68(a1, a2, a3, (uint64_t)v22 + *(int *)(v27 + 44));
  uint64_t v28 = (uint64_t)v25;
  sub_100021270((uint64_t)v22, (uint64_t)v25, &qword_1000FE4B8);
  uint64_t v29 = type metadata accessor for ProximityCardHeaderView();
  sub_100090880(v29, (uint64_t)v67);
  memcpy(v65, v67, 0x131uLL);
  LOBYTE(a3) = static Edge.Set.leading.getter();
  EdgeInsets.init(_all:)();
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  memcpy(v58, v65, 0x131uLL);
  v65[312] = 0;
  v58[312] = a3;
  *(_DWORD *)uint64_t v59 = *(_DWORD *)v66;
  *(_DWORD *)&v59[3] = *(_DWORD *)&v66[3];
  uint64_t v60 = v31;
  uint64_t v61 = v33;
  uint64_t v62 = v35;
  uint64_t v63 = v37;
  char v64 = 0;
  uint64_t v38 = static Color.blue.getter();
  sub_100031D14(v38, 0, v67);
  swift_release();
  sub_100094094((uint64_t)v65);
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  id v39 = *(id *)(qword_100111A10 + 488);
  char v40 = sub_10002D38C();

  if (v40)
  {
    sub_100090904(v29, v57);
    uint64_t v41 = v57[0];
  }
  else
  {
    uint64_t v41 = 0;
  }
  id v42 = *(id *)(qword_100111A10 + 536);
  char v43 = sub_10002D38C();

  if (v43)
  {
    uint64_t v44 = (uint64_t)v13;
    sub_1000909B8(v29);
    uint64_t v45 = sub_100008614(&qword_1000FE4C8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v13, 0, 1, v45);
  }
  else
  {
    uint64_t v46 = sub_100008614(&qword_1000FE4C8);
    uint64_t v44 = (uint64_t)v13;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v13, 1, 1, v46);
  }
  sub_1000210BC((uint64_t)v25, (uint64_t)v18, &qword_1000FE4B8);
  uint64_t v47 = v55;
  sub_1000210BC(v44, v55, &qword_1000FE4B0);
  uint64_t v48 = v54;
  sub_1000210BC((uint64_t)v18, v54, &qword_1000FE4B8);
  uint64_t v49 = v44;
  uint64_t v50 = (int *)sub_100008614(&qword_1000FE4D0);
  uint64_t v51 = (void *)(v48 + v50[12]);
  memcpy(v56, v67, 0x1B9uLL);
  memcpy(v51, v67, 0x1B9uLL);
  uint64_t v52 = v48 + v50[16];
  *(void *)uint64_t v52 = 0;
  *(unsigned char *)(v52 + 8) = 1;
  *(void *)(v48 + v50[20]) = v41;
  sub_1000210BC(v47, v48 + v50[24], &qword_1000FE4B0);
  sub_10009441C((uint64_t)v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100094228);
  swift_retain();
  sub_10000EC04(v49, &qword_1000FE4B0);
  sub_10000EC04(v28, &qword_1000FE4B8);
  sub_10000EC04(v47, &qword_1000FE4B0);
  swift_release();
  memcpy(v57, v67, 0x1B9uLL);
  sub_10009441C((uint64_t)v57, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000944D8);
  return sub_10000EC04((uint64_t)v18, &qword_1000FE4B8);
}

uint64_t sub_10008FF68@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v88 = a4;
  uint64_t v7 = sub_100008614(&qword_1000FBDC8);
  __chkstk_darwin(v7 - 8, v8);
  char v80 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ActivityIconView(0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v83 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = sub_100008614(&qword_1000F8950);
  __chkstk_darwin(v78, v13);
  uint64_t v81 = (uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100008614(&qword_1000F8920);
  __chkstk_darwin(v79, v15);
  uint64_t v82 = (uint64_t)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100008614(&qword_1000FE4E8);
  uint64_t v86 = *(void *)(v17 - 8);
  uint64_t v87 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v77 = (uint64_t)&v76 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100008614(&qword_1000FE4F0);
  uint64_t v22 = __chkstk_darwin(v20 - 8, v21);
  uint64_t v85 = (uint64_t)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  uint64_t v84 = (uint64_t)&v76 - v25;
  uint64_t v26 = sub_100008614(&qword_1000F8990);
  __chkstk_darwin(v26 - 8, v27);
  uint64_t v29 = (char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_100008614(&qword_1000F8960);
  uint64_t v31 = v30 - 8;
  __chkstk_darwin(v30, v32);
  uint64_t v34 = (char *)&v76 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_100008614(&qword_1000FE4F8);
  uint64_t v37 = __chkstk_darwin(v35 - 8, v36);
  id v39 = (char *)&v76 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37, v40);
  id v42 = (char *)&v76 - v41;
  uint64_t v43 = type metadata accessor for ProximityCardHeaderView();
  sub_1000905F0(v43, (uint64_t)v29);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_1000210BC((uint64_t)v29, (uint64_t)v34, &qword_1000F8990);
  uint64_t v44 = &v34[*(int *)(v31 + 44)];
  long long v45 = v90;
  *(_OWORD *)uint64_t v44 = v89;
  *((_OWORD *)v44 + 1) = v45;
  *((_OWORD *)v44 + 2) = v91;
  sub_10000EC04((uint64_t)v29, &qword_1000F8990);
  uint64_t v46 = static Color.blue.getter();
  sub_100031F28(v46, 0, (uint64_t)v39);
  swift_release();
  sub_10000EC04((uint64_t)v34, &qword_1000F8960);
  sub_100021270((uint64_t)v39, (uint64_t)v42, &qword_1000FE4F8);
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 48);
  swift_unknownObjectRetain();
  char v48 = v47(a2, a3);
  swift_unknownObjectRelease();
  if (v48)
  {
    sub_100008614(qword_1000FE3F0);
    uint64_t v49 = (uint64_t)v80;
    State.projectedValue.getter();
    uint64_t v50 = v83;
    sub_10005F6F0(v49, v83, *a1);
    char v51 = static Edge.Set.all.getter();
    EdgeInsets.init(_all:)();
    uint64_t v53 = v52;
    uint64_t v55 = v54;
    uint64_t v57 = v56;
    uint64_t v59 = v58;
    uint64_t v60 = v81;
    sub_100094B38(v50, v81, type metadata accessor for ActivityIconView);
    uint64_t v61 = v60 + *(int *)(v78 + 36);
    *(unsigned char *)uint64_t v61 = v51;
    *(void *)(v61 + 8) = v53;
    *(void *)(v61 + 16) = v55;
    *(void *)(v61 + 24) = v57;
    *(void *)(v61 + 32) = v59;
    *(unsigned char *)(v61 + 40) = 0;
    sub_100094BA0(v50, type metadata accessor for ActivityIconView);
    uint64_t v62 = v82;
    sub_1000210BC(v60, v82, &qword_1000F8950);
    __asm { FMOV            V0.2D, #6.0 }
    *(_OWORD *)(v62 + *(int *)(v79 + 36)) = _Q0;
    sub_10000EC04(v60, &qword_1000F8950);
    uint64_t v68 = static Color.blue.getter();
    uint64_t v69 = v77;
    sub_100032270(v68, 0, v77);
    swift_release();
    sub_10000EC04(v62, &qword_1000F8920);
    uint64_t v70 = v84;
    sub_100021270(v69, v84, &qword_1000FE4E8);
    uint64_t v71 = 0;
  }
  else
  {
    uint64_t v71 = 1;
    uint64_t v70 = v84;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 56))(v70, v71, 1, v87);
  sub_1000210BC((uint64_t)v42, (uint64_t)v39, &qword_1000FE4F8);
  uint64_t v72 = v85;
  sub_1000210BC(v70, v85, &qword_1000FE4F0);
  uint64_t v73 = v88;
  sub_1000210BC((uint64_t)v39, v88, &qword_1000FE4F8);
  uint64_t v74 = sub_100008614(&qword_1000FE500);
  sub_1000210BC(v72, v73 + *(int *)(v74 + 48), &qword_1000FE4F0);
  sub_10000EC04(v70, &qword_1000FE4F0);
  sub_10000EC04((uint64_t)v42, &qword_1000FE4F8);
  sub_10000EC04(v72, &qword_1000FE4F0);
  return sub_10000EC04((uint64_t)v39, &qword_1000FE4F8);
}

uint64_t sub_1000905F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v4 = sub_100008614(&qword_1000F89C0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (uint64_t *)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_100008614(&qword_1000F89B0);
  uint64_t v9 = v8 - 8;
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100008614(&qword_1000F89A0);
  uint64_t v14 = v13 - 8;
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100008614(&qword_1000F8990);
  uint64_t v19 = v18 - 8;
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *uint64_t v7 = static Alignment.center.getter();
  v7[1] = v23;
  uint64_t v24 = sub_100008614(&qword_1000FE508);
  sub_100090EF0(v2, *(void *)(a1 + 16), *(void *)(a1 + 24), (uint64_t)v7 + *(int *)(v24 + 44));
  double v25 = 0.0;
  if (sub_10008F534(a1)) {
    double v26 = 0.0;
  }
  else {
    double v26 = 10.0;
  }
  sub_1000210BC((uint64_t)v7, (uint64_t)v12, &qword_1000F89C0);
  uint64_t v27 = &v12[*(int *)(v9 + 44)];
  *(double *)uint64_t v27 = v26;
  v27[8] = 0;
  sub_10000EC04((uint64_t)v7, &qword_1000F89C0);
  if (sub_10008F534(a1)) {
    double v25 = 1.0;
  }
  sub_1000210BC((uint64_t)v12, (uint64_t)v17, &qword_1000F89B0);
  *(double *)&v17[*(int *)(v14 + 44)] = v25;
  sub_10000EC04((uint64_t)v12, &qword_1000F89B0);
  uint64_t v28 = static Animation.default.getter();
  BOOL v29 = sub_10008F534(a1);
  sub_1000210BC((uint64_t)v17, (uint64_t)v22, &qword_1000F89A0);
  uint64_t v30 = &v22[*(int *)(v19 + 44)];
  *(void *)uint64_t v30 = v28;
  v30[8] = v29;
  sub_10000EC04((uint64_t)v17, &qword_1000F89A0);
  return sub_100021270((uint64_t)v22, v33, &qword_1000F8990);
}

void *sub_100090880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = static HorizontalAlignment.leading.getter();
  sub_100091454(*(void *)(a1 + 16), *(void *)(a1 + 24), v6);
  memcpy(&__src[7], v6, 0x119uLL);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  return memcpy((void *)(a2 + 17), __src, 0x120uLL);
}

uint64_t sub_100090904@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 56);
  swift_unknownObjectRetain();
  v5(v4, v3);
  swift_unknownObjectRelease();
  uint64_t result = Image.init(systemName:)();
  *a2 = result;
  return result;
}

uint64_t sub_1000909B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(a1, v2);
  (*(void (**)(char *))(v4 + 16))((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v7 + v6, (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  sub_100008614(&qword_1000FE4D8);
  sub_1000948B8();
  return Button.init(action:label:)();
}

uint64_t sub_100090B18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActivityIcon(0);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v10[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100090C8C(a1, (uint64_t)v10);
  uint64_t v6 = v11;
  if (v11)
  {
    uint64_t v7 = v12;
    sub_10000AEFC(v10, v11);
    uint64_t v6 = sub_1000828B4(v6, v7);
    sub_10000AF94((uint64_t)v10);
  }
  else
  {
    sub_10000EC04((uint64_t)v10, &qword_1000F7810);
  }
  UUID.init()();
  *(void *)&v5[*(int *)(v2 + 20)] = v6;
  return sub_10008F434((uint64_t)v5);
}

uint64_t sub_100090C18()
{
  uint64_t v0 = type metadata accessor for ProximityCardHeaderView();
  sub_100090B18(v0);
  sub_100008614(&qword_1000F7F58);
  return State.wrappedValue.setter();
}

void sub_100090C8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Image.ResizingMode();
  uint64_t v19 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 32);
  swift_unknownObjectRetain();
  id v20 = (id)v12(v11, v10);
  swift_unknownObjectRelease();
  if (v20)
  {
    double v13 = *v3;
    v22.width = *v3;
    v22.height = *v3;
    UIGraphicsBeginImageContextWithOptions(v22, 0, 0.0);
    [v20 drawInRect:0.0, 0.0, v13, v13];
    uint64_t v14 = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    if (v14)
    {
      uint64_t v15 = v14;
      Image.init(uiImage:)();
      uint64_t v16 = v19;
      (*(void (**)(char *, void, uint64_t))(v19 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v6);
      uint64_t v17 = Image.resizable(capInsets:resizingMode:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v6);
      *(void *)(a2 + 24) = sub_100008614(&qword_1000FE4A0);
      *(void *)(a2 + 32) = sub_100094020();

      *(void *)a2 = v17;
      *(void *)(a2 + 8) = 0;
      *(_WORD *)(a2 + 16) = 1;
    }
    else
    {
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      id v18 = v20;
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

uint64_t sub_100090EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v64 = a4;
  uint64_t v7 = sub_100008614(&qword_1000FE510);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MovieView(0);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v61 = (uint64_t)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = sub_100008614(&qword_1000F89D8);
  __chkstk_darwin(v59, v14);
  uint64_t v62 = (uint64_t)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100008614(&qword_1000FE518);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v60 = (uint64_t)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  uint64_t v63 = (uint64_t)&v56 - v21;
  uint64_t v22 = sub_100008614(&qword_1000FE110);
  __chkstk_darwin(v22 - 8, v23);
  double v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for AdjustedMovie(0);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v28);
  uint64_t v58 = (uint64_t)&v56 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = (char *)(a1 + *(int *)(type metadata accessor for ProximityCardHeaderView() + 44));
  char v31 = *v30;
  uint64_t v32 = *((void *)v30 + 1);
  char v65 = v31;
  uint64_t v66 = v32;
  sub_100008614(&qword_1000F7F58);
  State.wrappedValue.getter();
  if (v67 != 1) {
    goto LABEL_4;
  }
  uint64_t v57 = v10;
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(a3 + 40);
  swift_unknownObjectRetain();
  v33(a2, a3);
  swift_unknownObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1)
  {
    sub_10000EC04((uint64_t)v25, &qword_1000FE110);
LABEL_4:
    swift_storeEnumTagMultiPayload();
    sub_1000949D4();
    return _ConditionalContent<>.init(storage:)();
  }
  uint64_t v35 = (uint64_t)v25;
  uint64_t v36 = v58;
  sub_10009241C(v35, v58);
  uint64_t v37 = v61;
  sub_100094B38(v36, v61, type metadata accessor for AdjustedMovie);
  unsigned __int8 v38 = static Edge.Set.leading.getter();
  char v39 = static Edge.Set.trailing.getter();
  char v40 = Edge.Set.init(rawValue:)();
  Edge.Set.init(rawValue:)();
  if (Edge.Set.init(rawValue:)() != v38) {
    char v40 = Edge.Set.init(rawValue:)();
  }
  Edge.Set.init(rawValue:)();
  char v41 = Edge.Set.init(rawValue:)();
  uint64_t v42 = (uint64_t)v57;
  if (v41 != v39) {
    char v40 = Edge.Set.init(rawValue:)();
  }
  EdgeInsets.init(_all:)();
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v48 = v47;
  uint64_t v50 = v49;
  uint64_t v51 = v62;
  sub_100094B38(v37, v62, type metadata accessor for MovieView);
  uint64_t v52 = v51 + *(int *)(v59 + 36);
  *(unsigned char *)uint64_t v52 = v40;
  *(void *)(v52 + 8) = v44;
  *(void *)(v52 + 16) = v46;
  *(void *)(v52 + 24) = v48;
  *(void *)(v52 + 32) = v50;
  *(unsigned char *)(v52 + 40) = 0;
  sub_100094BA0(v37, type metadata accessor for MovieView);
  uint64_t v53 = static Color.blue.getter();
  uint64_t v54 = v60;
  sub_1000325B8(v53, 0, v60);
  swift_release();
  sub_10000EC04(v51, &qword_1000F89D8);
  uint64_t v55 = v63;
  sub_100021270(v54, v63, &qword_1000FE518);
  sub_1000210BC(v55, v42, &qword_1000FE518);
  swift_storeEnumTagMultiPayload();
  sub_1000949D4();
  _ConditionalContent<>.init(storage:)();
  sub_10000EC04(v55, &qword_1000FE518);
  return sub_100094BA0(v36, type metadata accessor for AdjustedMovie);
}

uint64_t sub_100091454@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
  swift_unknownObjectRetain();
  uint64_t v6 = v5(v4, a2);
  uint64_t v8 = v7;
  swift_unknownObjectRelease();
  *(void *)&__src[0] = v6;
  *((void *)&__src[0] + 1) = v8;
  sub_1000264AC();
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  static Font.headline.getter();
  uint64_t v14 = Text.font(_:)();
  uint64_t v16 = v15;
  LOBYTE(v4) = v17;
  swift_release();
  char v18 = v4 & 1;
  sub_1000298D8(v9, v11, v13);
  swift_bridgeObjectRelease();
  static Color.primary.getter();
  uint64_t v19 = Text.foregroundColor(_:)();
  uint64_t v21 = v20;
  LOBYTE(v11) = v22;
  swift_release();
  sub_1000298D8(v14, v16, v18);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  uint64_t v23 = static Color.blue.getter();
  sub_100032900(v23, 0, (uint64_t)__src);
  swift_release();
  sub_1000298D8(v19, v21, v11 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  long long v66 = __src[6];
  *(_OWORD *)char v67 = __src[7];
  *(_OWORD *)&v67[9] = *(_OWORD *)((char *)&__src[7] + 9);
  long long v62 = __src[2];
  long long v63 = __src[3];
  long long v64 = __src[4];
  long long v65 = __src[5];
  long long v60 = __src[0];
  long long v61 = __src[1];
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  swift_unknownObjectRetain();
  uint64_t v25 = v24(a1, a2);
  uint64_t v27 = v26;
  swift_unknownObjectRelease();
  *(void *)&__src[0] = v25;
  *((void *)&__src[0] + 1) = v27;
  uint64_t v28 = Text.init<A>(_:)();
  uint64_t v30 = v29;
  LOBYTE(v24) = v31 & 1;
  static Font.headline.getter();
  uint64_t v32 = Text.font(_:)();
  uint64_t v34 = v33;
  char v36 = v35;
  swift_release();
  sub_1000298D8(v28, v30, (char)v24);
  swift_bridgeObjectRelease();
  static Color.secondary.getter();
  uint64_t v37 = Text.foregroundColor(_:)();
  uint64_t v39 = v38;
  LOBYTE(v24) = v40;
  swift_release();
  sub_1000298D8(v32, v34, v36 & 1);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  uint64_t v41 = static Color.blue.getter();
  sub_100032900(v41, 0, (uint64_t)__src);
  swift_release();
  sub_1000298D8(v37, v39, v24 & 1);
  swift_release();
  swift_bridgeObjectRelease();
  long long v58 = __src[6];
  *(_OWORD *)uint64_t v59 = __src[7];
  *(_OWORD *)&v59[9] = *(_OWORD *)((char *)&__src[7] + 9);
  long long v54 = __src[2];
  long long v55 = __src[3];
  long long v56 = __src[4];
  long long v57 = __src[5];
  long long v52 = __src[0];
  long long v53 = __src[1];
  v68[6] = v66;
  v69[0] = *(_OWORD *)v67;
  *(_OWORD *)((char *)v69 + 9) = *(_OWORD *)&v67[9];
  v68[2] = v62;
  v68[3] = v63;
  v68[4] = v64;
  v68[5] = v65;
  v68[0] = v60;
  v68[1] = v61;
  long long v42 = __src[6];
  v70[6] = __src[6];
  v71[0] = *(_OWORD *)v59;
  *(_OWORD *)((char *)v71 + 9) = *(_OWORD *)((char *)&__src[7] + 9);
  long long v43 = __src[2];
  long long v44 = __src[3];
  v70[2] = __src[2];
  v70[3] = __src[3];
  long long v46 = __src[4];
  long long v45 = __src[5];
  unsigned char v70[4] = __src[4];
  v70[5] = __src[5];
  long long v48 = __src[0];
  long long v47 = __src[1];
  v70[0] = __src[0];
  v70[1] = __src[1];
  __src[6] = v66;
  __src[7] = *(_OWORD *)v67;
  *(_OWORD *)((char *)&__src[7] + 9) = *(_OWORD *)&v67[9];
  __src[2] = v62;
  __src[3] = v63;
  __src[4] = v64;
  __src[5] = v65;
  __src[0] = v60;
  __src[1] = v61;
  *(_OWORD *)((char *)&__src[16] + 9) = *(_OWORD *)&v59[9];
  __src[15] = v42;
  __src[16] = *(_OWORD *)v59;
  __src[11] = v43;
  __src[12] = v44;
  __src[13] = v46;
  __src[14] = v45;
  __src[9] = v48;
  __src[10] = v47;
  memcpy(a3, __src, 0x119uLL);
  v73[6] = v58;
  v74[0] = *(_OWORD *)v59;
  *(_OWORD *)((char *)v74 + 9) = *(_OWORD *)&v59[9];
  v73[2] = v54;
  v73[3] = v55;
  v73[5] = v57;
  v73[4] = v56;
  v73[1] = v53;
  v73[0] = v52;
  sub_100094968((uint64_t)v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100034B00);
  sub_100094968((uint64_t)v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_100034B00);
  sub_100094968((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000941AC);
  v75[6] = v66;
  v76[0] = *(_OWORD *)v67;
  *(_OWORD *)((char *)v76 + 9) = *(_OWORD *)&v67[9];
  void v75[2] = v62;
  v75[3] = v63;
  v75[4] = v64;
  v75[5] = v65;
  v75[0] = v60;
  v75[1] = v61;
  return sub_100094968((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))sub_1000941AC);
}

uint64_t sub_100091974@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100008614(&qword_1000F8CB8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Image.init(systemName:)();
  uint64_t v7 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  uint64_t v8 = static Font.system(size:weight:design:)();
  sub_10000EC04((uint64_t)v5, &qword_1000F8CB8);
  uint64_t result = swift_getKeyPath();
  *a1 = v6;
  a1[1] = result;
  a1[2] = v8;
  return result;
}

uint64_t sub_100091A90()
{
  return sub_100091DBC();
}

uint64_t sub_100091AA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ActivityDisplayContext(0);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_100094B38(a1, (uint64_t)&v11 - v8, type metadata accessor for ActivityDisplayContext);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_100094B38((uint64_t)v9, (uint64_t)v6, type metadata accessor for ActivityDisplayContext);
  swift_retain();
  static Published.subscript.setter();
  return sub_100094BA0((uint64_t)v9, type metadata accessor for ActivityDisplayContext);
}

uint64_t sub_100091BC0@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_100091C40()
{
  return static Published.subscript.setter();
}

uint64_t sub_100091CC4@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_100091D44(void **a1)
{
  uint64_t v1 = *a1;
  swift_getKeyPath();
  swift_getKeyPath();
  id v2 = v1;
  swift_retain();
  return static Published.subscript.setter();
}

uint64_t sub_100091DBC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();

  return swift_release();
}

uint64_t sub_100091E34(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000FE110);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  sub_1000210BC(a1, (uint64_t)&v11 - v8, &qword_1000FE110);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1000210BC((uint64_t)v9, (uint64_t)v6, &qword_1000FE110);
  swift_retain();
  static Published.subscript.setter();
  return sub_10000EC04((uint64_t)v9, &qword_1000FE110);
}

uint64_t sub_100091F44@<X0>(unsigned char *a1@<X8>)
{
  return sub_100025B5C(a1);
}

uint64_t sub_100091F58()
{
  return sub_100025BD8();
}

uint64_t sub_100091F6C@<X0>(unsigned char *a1@<X8>)
{
  return sub_100025B5C(a1);
}

uint64_t sub_100091F80@<X0>(unsigned char *a1@<X8>)
{
  return sub_100025B5C(a1);
}

uint64_t sub_100091FA8()
{
  return sub_100025BD8();
}

uint64_t sub_100091FBC()
{
  return sub_100025BD8();
}

uint64_t sub_100091FE4@<X0>(unsigned char *a1@<X8>)
{
  return sub_100025B5C(a1);
}

uint64_t sub_10009200C()
{
  return sub_100025BD8();
}

uint64_t sub_100092034()
{
  return sub_100091DBC();
}

uint64_t sub_100092070()
{
  return sub_100091DBC();
}

uint64_t sub_10009209C@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_10000E780(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x100092300);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10000D6B8(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      char v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

__CFString *sub_100092310(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = @"miniDark";
      goto LABEL_11;
    case 2:
      uint64_t v1 = @"miniLight";
      goto LABEL_11;
    case 3:
      uint64_t v1 = @"FPO_B";
      goto LABEL_11;
    case 4:
      uint64_t v1 = @"FPO_Y";
      goto LABEL_11;
    case 5:
      uint64_t v1 = @"FPO_O";
      goto LABEL_11;
    case 6:
      uint64_t v1 = @"miniBasalt";
      goto LABEL_11;
    case 7:
      uint64_t v1 = @"b620Dark";
      goto LABEL_11;
    case 8:
      uint64_t v1 = @"b620Light";
LABEL_11:
      uint64_t v2 = v1;
      break;
    default:
      uint64_t v1 = +[NSString stringWithFormat:@"? (%ld)", a1];
      break;
  }

  return v1;
}

uint64_t sub_10009241C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AdjustedMovie(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100092480(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10009209C((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100092558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_10009209C(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_100092610(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x100092878);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_10000E780(a3, a4);
                  sub_10000E780(a1, a2);
                  char v17 = sub_100092558((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10000D6B8(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_10000E780(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_100092558(v21, v22, v20, a3, a4);
                  sub_10000D6B8(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_10000E780(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_10000E780(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_100092480(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10000D6B8(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t (**sub_1000928A8(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v4 = v3;
  uint64_t v88 = a3;
  uint64_t v87 = a2;
  uint64_t v103 = a1;
  long long v90 = *v3;
  uint64_t v5 = sub_100008614(&qword_1000FE370);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v98 = v5;
  uint64_t v99 = v6;
  __chkstk_darwin(v5, v7);
  uint64_t v96 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008614(&qword_1000FE378);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v100 = v9;
  uint64_t v101 = v10;
  __chkstk_darwin(v9, v11);
  long long v97 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_100008614(&qword_1000FE380);
  uint64_t v104 = *(void *)(v91 - 8);
  __chkstk_darwin(v91, v13);
  unint64_t v102 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100008614(&qword_1000FE388);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v92 = v15;
  uint64_t v93 = v16;
  __chkstk_darwin(v15, v17);
  uint64_t v86 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100008614(&qword_1000FE390);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v94 = v19;
  uint64_t v95 = v20;
  __chkstk_darwin(v19, v21);
  long long v89 = (char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = (void (*)(char *, uint64_t))type metadata accessor for ActivityDisplayContext(0);
  uint64_t v24 = __chkstk_darwin(v84, v23);
  uint64_t v83 = (uint64_t)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v26);
  uint64_t v82 = (uint64_t)&v77 - v27;
  uint64_t v81 = sub_100008614(&qword_1000F7EC0);
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81, v28);
  char v30 = (char *)&v77 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100008614(&qword_1000FE368);
  uint64_t v78 = *(void *)(v79 - 8);
  __chkstk_darwin(v79, v31);
  uint64_t v33 = (char *)&v77 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = sub_100008614(&qword_1000FE358);
  uint64_t v34 = *(void *)(v85 - 8);
  __chkstk_darwin(v85, v35);
  uint64_t v37 = (char *)&v77 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100008614(&qword_1000FE110);
  uint64_t v40 = __chkstk_darwin(v38, v39);
  long long v42 = (char *)&v77 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40, v43);
  long long v45 = (char *)&v77 - v44;
  long long v46 = (char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__movie;
  uint64_t v47 = type metadata accessor for AdjustedMovie(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v45, 1, 1, v47);
  sub_1000210BC((uint64_t)v45, (uint64_t)v42, &qword_1000FE110);
  Published.init(initialValue:)();
  sub_10000EC04((uint64_t)v45, &qword_1000FE110);
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v46, v37, v85);
  long long v48 = (uint64_t *)((char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_eventHandler);
  *long long v48 = 0;
  v48[1] = 0;
  uint64_t v49 = (char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__activityImage;
  id v107 = 0;
  uint64_t v85 = sub_100008614((uint64_t *)&unk_1000FE128);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v49, v33, v79);
  uint64_t v50 = (char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__canShowActivityIcon;
  LOBYTE(v107) = 0;
  Published.init(initialValue:)();
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v80 + 32);
  uint64_t v52 = v81;
  v51(v50, v30, v81);
  long long v53 = (char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel__isOptimisticStateActive;
  LOBYTE(v107) = 0;
  Published.init(initialValue:)();
  v51(v53, v30, v52);
  *(uint64_t (**)(uint64_t))((char *)v4 + OBJC_IVAR____TtC13PCViewService28ProximityCardHeaderViewModel_tasks) = (uint64_t (*)(uint64_t))&_swiftEmptySetSingleton;
  sub_10004DA44(1953066569, (void *)0xE400000000000000, 0, (uint64_t)v90, (uint64_t)&off_1000E8920);
  uint64_t v54 = v82;
  long long v90 = type metadata accessor for ActivityDisplayContext;
  sub_100094B38(v103, v82, type metadata accessor for ActivityDisplayContext);
  swift_beginAccess();
  sub_100094B38(v54, v83, type metadata accessor for ActivityDisplayContext);
  Published.init(initialValue:)();
  sub_100094BA0(v54, type metadata accessor for ActivityDisplayContext);
  swift_endAccess();
  uint64_t v55 = *v48;
  uint64_t v56 = v87;
  uint64_t v57 = v88;
  *long long v48 = v87;
  v48[1] = v57;
  sub_10000F7F8(v56);
  sub_10000F808(v55);
  uint64_t v58 = sub_1000770A0();
  uint64_t v60 = v59;
  swift_beginAccess();
  uint64_t v105 = v58;
  uint64_t v106 = v60;
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  uint64_t v88 = sub_100008614(&qword_1000FE350);
  long long v61 = v102;
  Published.projectedValue.getter();
  swift_endAccess();
  sub_100008614(&qword_1000FE398);
  uint64_t v87 = sub_100012908(&qword_1000FE3A0, &qword_1000FE380);
  long long v62 = v86;
  uint64_t v63 = v91;
  Publisher.map<A>(_:)();
  long long v64 = *(void (**)(char *, uint64_t))(v104 + 8);
  v104 += 8;
  uint64_t v84 = v64;
  v64(v61, v63);
  sub_100012908(&qword_1000FE3A8, &qword_1000FE388);
  sub_100012908(&qword_1000FE3B0, &qword_1000FE398);
  long long v65 = v89;
  uint64_t v66 = v92;
  Publisher<>.switchToLatest()();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v62, v66);
  swift_allocObject();
  swift_weakInit();
  sub_100012908(&qword_1000FE3B8, &qword_1000FE390);
  uint64_t v67 = v94;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v95 + 8))(v65, v67);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v68 = *(void **)(v103 + 40);
  swift_getKeyPath();
  swift_getKeyPath();
  id v107 = v68;
  id v69 = v68;
  swift_retain();
  static Published.subscript.setter();
  swift_beginAccess();
  uint64_t v70 = v102;
  Published.projectedValue.getter();
  swift_endAccess();
  uint64_t v71 = v96;
  Publisher.map<A>(_:)();
  v84(v70, v63);
  sub_100012908(&qword_1000FE3C0, &qword_1000FE370);
  uint64_t v73 = v97;
  uint64_t v72 = v98;
  Publisher.removeDuplicates(by:)();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v71, v72);
  swift_allocObject();
  swift_weakInit();
  sub_100012908(&qword_1000FE3C8, &qword_1000FE378);
  uint64_t v74 = v100;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v101 + 8))(v73, v74);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_10008E69C();
  id v75 = [self defaultCenter];
  [v75 addObserver:v4 selector:"createMovieIfNeeded" name:kPCAssetManagerNotificationNameQueryDidComplete object:0];

  sub_100094BA0(v103, v90);
  return v4;
}

uint64_t sub_1000935AC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000935E4()
{
  return sub_10008E120();
}

uint64_t sub_1000935EC(void **a1)
{
  return sub_10008E308(a1);
}

uint64_t sub_1000935F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000E780(a1, a2);
  }
  return a1;
}

void sub_100093608()
{
  sub_100093E88(319, &qword_1000FE478, type metadata accessor for ActivityIcon, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for State);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_1000936E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = *(int *)(a3 + 40);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_unknownObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = type metadata accessor for ActivityIcon(0);
    *(void *)&v8[*(int *)(v12 + 20)] = *(void *)&v9[*(int *)(v12 + 20)];
    swift_retain();
    uint64_t v13 = sub_100008614(qword_1000FE3F0);
    *(void *)&v8[*(int *)(v13 + 28)] = *(void *)&v9[*(int *)(v13 + 28)];
    uint64_t v14 = *(int *)(a3 + 44);
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    *uint64_t v15 = *v16;
    *((void *)v15 + 1) = *((void *)v16 + 1);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100093838(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  type metadata accessor for ActivityIcon(0);
  swift_release();
  sub_100008614(qword_1000FE3F0);
  swift_release();

  return swift_release();
}

uint64_t sub_1000938F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_unknownObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = type metadata accessor for ActivityIcon(0);
  *(void *)(v7 + *(int *)(v11 + 20)) = *(void *)(v8 + *(int *)(v11 + 20));
  swift_retain();
  uint64_t v12 = sub_100008614(qword_1000FE3F0);
  *(void *)(v7 + *(int *)(v12 + 28)) = *(void *)(v8 + *(int *)(v12 + 28));
  uint64_t v13 = *(int *)(a3 + 44);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  swift_retain();
  swift_retain();
  return a1;
}

void *sub_1000939FC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for ActivityIcon(0);
  *(void *)&v7[*(int *)(v10 + 20)] = *(void *)&v8[*(int *)(v10 + 20)];
  swift_retain();
  swift_release();
  uint64_t v11 = sub_100008614(qword_1000FE3F0);
  *(void *)&v7[*(int *)(v11 + 28)] = *(void *)&v8[*(int *)(v11 + 28)];
  swift_retain();
  swift_release();
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  *uint64_t v13 = *v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100093B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for ActivityIcon(0);
  *(void *)(v7 + *(int *)(v10 + 20)) = *(void *)(v8 + *(int *)(v10 + 20));
  uint64_t v11 = sub_100008614(qword_1000FE3F0);
  *(void *)(v7 + *(int *)(v11 + 28)) = *(void *)(v8 + *(int *)(v11 + 28));
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

void *sub_100093BEC(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_unknownObjectRelease();
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for ActivityIcon(0);
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  swift_release();
  uint64_t v12 = sub_100008614(qword_1000FE3F0);
  *(void *)&v8[*(int *)(v12 + 28)] = *(void *)&v9[*(int *)(v12 + 28)];
  swift_release();
  uint64_t v13 = *(int *)(a3 + 44);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *uint64_t v14 = *v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_release();
  return a1;
}

uint64_t sub_100093CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100093CFC);
}

uint64_t sub_100093CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100008614(qword_1000FE3F0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100093DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100093DC4);
}

uint64_t sub_100093DC4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100008614(qword_1000FE3F0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ProximityCardHeaderView()
{
  return sub_10000ED34();
}

void sub_100093E88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_100093EEC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_100093F34()
{
  uint64_t v0 = type metadata accessor for ProximityCardHeaderView();
  return sub_100090B18(v0);
}

uint64_t sub_100093F9C()
{
  type metadata accessor for ProximityCardHeaderView();

  return sub_100090C18();
}

unint64_t sub_100094020()
{
  unint64_t result = qword_1000FE4A8;
  if (!qword_1000FE4A8)
  {
    sub_100009F40(&qword_1000FE4A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE4A8);
  }
  return result;
}

uint64_t sub_100094094(uint64_t a1)
{
  uint64_t v16 = *(void *)(a1 + 168);
  uint64_t v2 = *(void *)(a1 + 176);
  uint64_t v3 = *(void *)(a1 + 184);
  uint64_t v4 = *(void *)(a1 + 192);
  uint64_t v5 = *(void *)(a1 + 200);
  uint64_t v6 = *(void *)(a1 + 208);
  uint64_t v7 = *(void *)(a1 + 216);
  uint64_t v8 = *(void *)(a1 + 224);
  long long v15 = *(_OWORD *)(a1 + 232);
  long long v13 = *(_OWORD *)(a1 + 264);
  long long v14 = *(_OWORD *)(a1 + 248);
  long long v12 = *(_OWORD *)(a1 + 280);
  uint64_t v9 = *(void *)(a1 + 296);
  char v10 = *(unsigned char *)(a1 + 304);
  sub_1000941AC(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(unsigned char *)(a1 + 160));
  sub_1000941AC(v16, v2, v3, v4, v5, v6, v7, v8, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9, v10);
  return a1;
}

uint64_t sub_1000941AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_1000298D8(a1, a2, a3 & 1);
  if ((a18 & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100094228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a56)
  {
    sub_100034B00(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21 & 1);
    return sub_100034B00(a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39 & 1);
  }
  else
  {
    sub_100034B00(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21 & 1);
    sub_100034B00(a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39 & 1);
    swift_bridgeObjectRetain();
    return swift_retain();
  }
}

uint64_t sub_10009441C(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v16 = *(unsigned char *)(a1 + 440);
  long long v14 = *(_OWORD *)(a1 + 400);
  long long v15 = *(_OWORD *)(a1 + 416);
  long long v12 = *(_OWORD *)(a1 + 368);
  long long v13 = *(_OWORD *)(a1 + 384);
  long long v10 = *(_OWORD *)(a1 + 336);
  long long v11 = *(_OWORD *)(a1 + 352);
  long long v8 = *(_OWORD *)(a1 + 304);
  long long v9 = *(_OWORD *)(a1 + 320);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v5 = *(_OWORD *)(a1 + 256);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    v8,
    *((void *)&v8 + 1),
    v9,
    *((void *)&v9 + 1),
    v10,
    *((void *)&v10 + 1),
    v11,
    *((void *)&v11 + 1),
    v12,
    *((void *)&v12 + 1),
    v13,
    *((void *)&v13 + 1),
    v14,
    *((void *)&v14 + 1),
    v15,
    *((void *)&v15 + 1),
    *(void *)(a1 + 432),
    v16);
  return a1;
}

uint64_t sub_1000944D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a56)
  {
    sub_1000941AC(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21 & 1);
    return sub_1000941AC(a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39 & 1);
  }
  else
  {
    sub_1000941AC(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21 & 1);
    sub_1000941AC(a22, a23, a24, a25, a26, a27, a28, a29, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39 & 1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000946D0()
{
  uint64_t v1 = (int *)(type metadata accessor for ProximityCardHeaderView() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_unknownObjectRelease();
  uint64_t v7 = v6 + v1[12];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  type metadata accessor for ActivityIcon(0);
  swift_release();
  sub_100008614(qword_1000FE3F0);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100094804()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  type metadata accessor for ProximityCardHeaderView();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 64);
  swift_unknownObjectRetain();
  v3(1, v1, v2);

  return swift_unknownObjectRelease();
}

unint64_t sub_1000948B8()
{
  unint64_t result = qword_1000FE4E0;
  if (!qword_1000FE4E0)
  {
    sub_100009F40(&qword_1000FE4D8);
    sub_100012908(&qword_1000F9198, &qword_1000F91A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE4E0);
  }
  return result;
}

uint64_t sub_100094968(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 136);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), v4);
  return a1;
}

unint64_t sub_1000949D4()
{
  unint64_t result = qword_1000FE520;
  if (!qword_1000FE520)
  {
    sub_100009F40(&qword_1000FE518);
    sub_100094A50();
    sub_1000351CC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE520);
  }
  return result;
}

unint64_t sub_100094A50()
{
  unint64_t result = qword_1000F89F0;
  if (!qword_1000F89F0)
  {
    sub_100009F40(&qword_1000F89E8);
    sub_1000351CC();
    sub_100012908(&qword_1000F86D8, &qword_1000F86E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000F89F0);
  }
  return result;
}

uint64_t sub_100094AF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100094B38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100094BA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100094C04()
{
  unint64_t result = qword_1000FE528;
  if (!qword_1000FE528)
  {
    sub_100009F40(&qword_1000FE498);
    sub_100094C80();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE528);
  }
  return result;
}

unint64_t sub_100094C80()
{
  unint64_t result = qword_1000FE530;
  if (!qword_1000FE530)
  {
    sub_100009F40(&qword_1000FE488);
    sub_100012908(&qword_1000FE538, &qword_1000FE480);
    sub_100012908(&qword_1000FE540, &qword_1000FE548);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE530);
  }
  return result;
}

uint64_t destroy for CardEvent(uint64_t a1)
{
  return sub_100020184(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
}

uint64_t initializeWithCopy for CardEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 56);
  sub_100044EB8(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for CardEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 56);
  sub_100044EB8(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  unsigned __int8 v18 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v10;
  sub_100020184(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for CardEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v4;
  sub_100020184(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for CardEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3C && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 60);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 56) >> 5) & 0xFFFFFFC7 | (8 * ((*(unsigned __int8 *)(a1 + 56) >> 2) & 7))) ^ 0x3F;
  if (v3 >= 0x3B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for CardEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3B)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)unint64_t result = a2 - 60;
    if (a3 >= 0x3C) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3C) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2)
    {
      *(void *)(result + 48) = 0;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)unint64_t result = 0u;
      *(unsigned char *)(result + 56) = 4 * (((-a2 >> 3) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_100094FBC(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 56);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 5;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_100094FDC(uint64_t result)
{
  *(unsigned char *)(result + 56) &= 0x1Fu;
  return result;
}

uint64_t sub_100094FEC(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(unsigned char *)(result + 56) = *(unsigned char *)(result + 56) & 3 | (32 * a2);
  }
  else
  {
    *(void *)unint64_t result = a2 - 4;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(unsigned char *)(result + 56) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardEvent()
{
  return &type metadata for CardEvent;
}

uint64_t sub_100095038()
{
  sub_100067218(v0, (uint64_t)&v14);
  uint64_t v1 = v14;
  switch(v16 >> 5)
  {
    case 1:
      v16 &= 0x1Fu;
      v17[0] = v14;
      v17[1] = *(_OWORD *)v15;
      _OWORD v17[2] = *(_OWORD *)&v15[16];
      uint64_t v18 = *(void *)&v15[32];
      _StringGuts.grow(_:)(17);
      v6._uint64_t countAndFlagsBits = 0x202864656C696166;
      v6._object = (void *)0xEE003D726F727265;
      String.append(_:)(v6);
      _print_unlocked<A, B>(_:_:)();
      v7._uint64_t countAndFlagsBits = 32;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      uint64_t result = 0;
      break;
    case 2:
      v16 &= 0x1Fu;
      sub_10008C748(&v14, v17);
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      v8._uint64_t countAndFlagsBits = sub_10008A33C();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = 10528;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
      uint64_t result = 0x726F737365636361;
      break;
    case 3:
      uint64_t v10 = 0x65756E69746E6F63;
      v16 &= 0x1Fu;
      *(void *)&v17[0] = 0;
      *((void *)&v17[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      *(void *)&v17[0] = 0x6F69746163756465;
      *((void *)&v17[0] + 1) = 0xEF2028776569566ELL;
      if ((_BYTE)v1)
      {
        if (v1 == 1)
        {
          uint64_t v11 = (void *)0xEF74756F656D6954;
        }
        else
        {
          uint64_t v10 = 0xD000000000000012;
          uint64_t v11 = (void *)0x80000001000C2BC0;
        }
      }
      else
      {
        uint64_t v11 = (void *)0xEE00646570706154;
      }
      v12._uint64_t countAndFlagsBits = v10;
      v12._object = v11;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 4:
      int8x16_t v4 = vorrq_s8(*(int8x16_t *)&v15[8], *(int8x16_t *)&v15[24]);
      if (((v16 == 128) & ((*(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | *(void *)v15 | *((void *)&v14 + 1) | (unint64_t)v14) == 0)) != 0) {
        uint64_t result = 0x69746E6573657270;
      }
      else {
        uint64_t result = 0x65746E6573657270;
      }
      break;
    default:
      v16 &= 0x1Fu;
      int v2 = (void *)*((void *)&v14 + 1);
      *(void *)&v17[0] = 0;
      *((void *)&v17[0] + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      *(void *)&v17[0] = 0xD000000000000012;
      *((void *)&v17[0] + 1) = 0x80000001000C3250;
      v3._uint64_t countAndFlagsBits = v1;
      v3._object = v2;
      String.append(_:)(v3);
LABEL_15:
      v13._uint64_t countAndFlagsBits = 10528;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      uint64_t result = *(void *)&v17[0];
      break;
  }
  return result;
}

uint64_t sub_10009538C(void *a1)
{
  uint64_t v2 = sub_100008614(&qword_1000FE5D0);
  uint64_t v50 = *(void *)(v2 - 8);
  uint64_t v51 = v2;
  __chkstk_darwin(v2, v3);
  long long v48 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_100008614(&qword_1000FE5D8);
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49, v5);
  long long v46 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008614(&qword_1000FE5E0);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v43 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100008614(&qword_1000FE5E8);
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  __chkstk_darwin(v10, v11);
  Swift::String v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100008614(&qword_1000FE5F0);
  uint64_t v39 = *(void *)(v14 - 8);
  uint64_t v40 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100008614(&qword_1000FE5F8);
  uint64_t v38 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100008614(&qword_1000FE600);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v52 = v22;
  uint64_t v53 = v23;
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (char *)&v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_100097234();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100067218(v64, (uint64_t)v56);
  char v27 = v56[0];
  switch(v58 >> 5)
  {
    case 1:
      v58 &= 0x1Fu;
      long long v59 = v56[0];
      long long v60 = v56[1];
      long long v61 = v56[2];
      uint64_t v62 = v57;
      LOBYTE(v54[0]) = 3;
      sub_1000973D8();
      uint64_t v33 = v43;
      uint64_t v34 = v52;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      v54[0] = v59;
      v54[1] = v60;
      _OWORD v54[2] = v61;
      uint64_t v55 = v62;
      sub_10008CAB0();
      uint64_t v35 = v45;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v36 = v44;
      goto LABEL_9;
    case 2:
      v58 &= 0x1Fu;
      sub_10008C748(v56, v63);
      LOBYTE(v54[0]) = 4;
      sub_100097330();
      uint64_t v33 = v46;
      uint64_t v34 = v52;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10008C748(v63, v54);
      sub_10009757C();
      uint64_t v35 = v49;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v36 = v47;
      goto LABEL_9;
    case 3:
      v58 &= 0x1Fu;
      LOBYTE(v54[0]) = 5;
      sub_100097288();
      uint64_t v33 = v48;
      uint64_t v34 = v52;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      LOBYTE(v54[0]) = v27;
      sub_100097528();
      uint64_t v35 = v51;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v36 = v50;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v26, v34);
      break;
    case 4:
      if (v58 != 128
        || (int8x16_t v31 = vorrq_s8(*(int8x16_t *)((char *)v56 + 8), *(int8x16_t *)((char *)&v56[1] + 8)),
            *(void *)&vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)) | *((void *)&v56[2] + 1) | v57 | *(void *)&v56[0]))
      {
        LOBYTE(v54[0]) = 1;
        sub_100097480();
        uint64_t v32 = v52;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v17, v40);
      }
      else
      {
        LOBYTE(v54[0]) = 0;
        sub_1000974D4();
        uint64_t v32 = v52;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v21, v18);
      }
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v26, v32);
      break;
    default:
      v58 &= 0x1Fu;
      LOBYTE(v54[0]) = 2;
      sub_10009742C();
      uint64_t v28 = v52;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v42;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v13, v29);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v26, v28);
      break;
  }
  return result;
}

uint64_t sub_100095B14(uint64_t a1)
{
  unint64_t v2 = sub_100097330();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100095B50(uint64_t a1)
{
  unint64_t v2 = sub_100097330();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100095B8C()
{
  uint64_t result = 0x69746E6573657270;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65746E6573657270;
      break;
    case 2:
      uint64_t result = 0x657373696D736964;
      break;
    case 3:
      uint64_t result = 0x64656C696166;
      break;
    case 4:
      uint64_t result = 0x726F737365636361;
      break;
    case 5:
      uint64_t result = 0x6F69746163756465;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100095C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100096460(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100095C98(uint64_t a1)
{
  unint64_t v2 = sub_100097234();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100095CD4(uint64_t a1)
{
  unint64_t v2 = sub_100097234();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100095D10(uint64_t a1)
{
  unint64_t v2 = sub_10009742C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100095D4C(uint64_t a1)
{
  unint64_t v2 = sub_10009742C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100095D88(uint64_t a1)
{
  unint64_t v2 = sub_100097288();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100095DC4(uint64_t a1)
{
  unint64_t v2 = sub_100097288();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100095E00(uint64_t a1)
{
  unint64_t v2 = sub_1000973D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100095E3C(uint64_t a1)
{
  unint64_t v2 = sub_1000973D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100095E78(uint64_t a1)
{
  unint64_t v2 = sub_100097480();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100095EB4(uint64_t a1)
{
  unint64_t v2 = sub_100097480();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100095EF0(uint64_t a1)
{
  unint64_t v2 = sub_1000974D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100095F2C(uint64_t a1)
{
  unint64_t v2 = sub_1000974D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100095F68(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100096720(a1, v4);
  if (!v2) {
    sub_100067218((uint64_t)v4, a2);
  }
}

uint64_t sub_100095FB0(void *a1)
{
  sub_100067218(v1, (uint64_t)&v4);
  return sub_10009538C(a1);
}

uint64_t sub_100096000()
{
  sub_100067218(v0, (uint64_t)&v2);
  return sub_100095038();
}

uint64_t sub_100096038(uint64_t a1, uint64_t a2)
{
  sub_100067218(a1, (uint64_t)v4);
  sub_100067218(a2, (uint64_t)v5);
  return sub_100096084((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t sub_100096084(uint64_t a1, uint64_t a2)
{
  sub_100067218(a1, (uint64_t)&v29);
  unsigned __int8 v3 = v29;
  switch(v34 >> 5)
  {
    case 1:
      v34 &= 0x1Fu;
      sub_100067218(a2, (uint64_t)&v36);
      return (v40 & 0xE0) == 0x20;
    case 2:
      v34 &= 0x1Fu;
      sub_10008C748((long long *)&v29, v35);
      sub_100067218(a2, (uint64_t)v21);
      if ((v22 & 0xE0) != 0x40) {
        return 0;
      }
      v22 &= 0x1Fu;
      sub_10008C748(v21, v23);
      sub_10008C748(v35, &v36);
      if (!v40)
      {
        sub_10008C748(v23, &v24);
        return !v28;
      }
      if (v40 == 1)
      {
        sub_10008C748(v23, &v24);
        return v28 == 1;
      }
      uint64_t v19 = v38.i64[0] | v37 | *((void *)&v36 + 1);
      if (!(v39.i64[0] | v39.i64[1] | (unint64_t)v36 | v38.i64[1] | v19))
      {
        sub_10008C748(v23, &v24);
        if (v28 != 2) {
          return 0;
        }
        int8x16_t v13 = v27;
        int8x16_t v14 = v26;
        uint64_t v16 = *((void *)&v24 + 1);
        uint64_t v15 = v25;
        uint64_t v17 = v24;
LABEL_26:
        int8x16_t v18 = vorrq_s8(v14, v13);
        return !(*(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)) | v15 | v16 | v17);
      }
      uint64_t v20 = v39.i64[0] | v39.i64[1] | v38.i64[1] | v19;
      if ((void)v36 != 1 || v20)
      {
        if ((void)v36 != 2 || v20)
        {
          if ((void)v36 != 3 || v20)
          {
            if ((void)v36 != 4 || v20)
            {
              sub_10008C748(v23, &v24);
              if (v28 != 2 || (void)v24 != 5) {
                return 0;
              }
            }
            else
            {
              sub_10008C748(v23, &v24);
              if (v28 != 2 || (void)v24 != 4) {
                return 0;
              }
            }
          }
          else
          {
            sub_10008C748(v23, &v24);
            if (v28 != 2 || (void)v24 != 3) {
              return 0;
            }
          }
        }
        else
        {
          sub_10008C748(v23, &v24);
          if (v28 != 2 || (void)v24 != 2) {
            return 0;
          }
        }
LABEL_55:
        int8x16_t v8 = v27;
        int8x16_t v9 = v26;
        uint64_t v11 = *((void *)&v24 + 1);
        uint64_t v10 = v25;
        goto LABEL_21;
      }
      sub_10008C748(v23, &v24);
      if (v28 == 2 && (void)v24 == 1) {
        goto LABEL_55;
      }
      return 0;
    case 3:
      v34 &= 0x1Fu;
      sub_100067218(a2, (uint64_t)&v36);
      if ((v40 & 0xE0) != 0x60) {
        return 0;
      }
      return v36 == v3;
    case 4:
      int8x16_t v5 = vorrq_s8(v30, v31);
      uint64_t v6 = *(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | v32 | v33 | v29;
      if (v34 == 128 && v6 == 0)
      {
        sub_100067218(a2, (uint64_t)&v36);
        if ((v40 & 0xE0) == 0x80 && v40 == 128)
        {
          int8x16_t v13 = v39;
          int8x16_t v14 = v38;
          uint64_t v16 = *((void *)&v36 + 1);
          uint64_t v15 = v37;
          uint64_t v17 = v36;
          goto LABEL_26;
        }
      }
      else
      {
        sub_100067218(a2, (uint64_t)&v36);
        if ((v40 & 0xE0) == 0x80 && v40 == 128 && (void)v36 == 1)
        {
          int8x16_t v8 = v39;
          int8x16_t v9 = v38;
          uint64_t v11 = *((void *)&v36 + 1);
          uint64_t v10 = v37;
LABEL_21:
          int8x16_t v12 = vorrq_s8(v9, v8);
          if (!(*(void *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)) | v10 | v11)) {
            return 1;
          }
        }
      }
      return 0;
    default:
      v34 &= 0x1Fu;
      sub_100067218(a2, (uint64_t)&v36);
      return v40 < 0x20u;
  }
}

uint64_t sub_100096460(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x69746E6573657270 && a2 == 0xEA0000000000676ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65746E6573657270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657373696D736964 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED00007765695679 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F69746163756465 && a2 == 0xED0000776569566ELL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

double sub_100096720@<D0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v70 = a2;
  uint64_t v63 = sub_100008614(&qword_1000FE550);
  uint64_t v68 = *(void *)(v63 - 8);
  __chkstk_darwin(v63, v3);
  uint64_t v73 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100008614(&qword_1000FE558);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v66 = v5;
  uint64_t v67 = v6;
  __chkstk_darwin(v5, v7);
  uint64_t v72 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008614(&qword_1000FE560);
  uint64_t v64 = *(void *)(v9 - 8);
  uint64_t v65 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v71 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_100008614(&qword_1000FE568);
  uint64_t v62 = *(void *)(v61 - 8);
  __chkstk_darwin(v61, v12);
  id v69 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_100008614(&qword_1000FE570);
  uint64_t v59 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v14);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100008614(&qword_1000FE578);
  uint64_t v58 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100008614(&qword_1000FE580);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  uint64_t v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = a1[3];
  uint64_t v82 = a1;
  sub_10000AEFC(a1, v26);
  sub_100097234();
  uint64_t v27 = v74;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v28 = v27;
  if (v27) {
    goto LABEL_6;
  }
  uint64_t v57 = v20;
  uint64_t v56 = v17;
  uint64_t v29 = v16;
  int8x16_t v30 = v71;
  int8x16_t v31 = v72;
  uint64_t v32 = v73;
  *(void *)&long long v74 = v22;
  uint64_t v33 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v33 + 16) != 1)
  {
    uint64_t v40 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v42 = v41;
    sub_100008614(&qword_1000F8A40);
    *uint64_t v42 = &type metadata for CardEvent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v40 - 8) + 104))(v42, enum case for DecodingError.typeMismatch(_:), v40);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v25, v21);
LABEL_6:
    sub_10000AF94((uint64_t)v82);
    return result;
  }
  switch(*(unsigned char *)(v33 + 32))
  {
    case 1:
      LOBYTE(v75) = 1;
      sub_100097480();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v29, v60);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v25, v21);
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      long long v74 = 0u;
      char v39 = 0x80;
      uint64_t v35 = 1;
      break;
    case 2:
      LOBYTE(v75) = 2;
      sub_10009742C();
      uint64_t v44 = v69;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v45 = v61;
      uint64_t v46 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v47 = v74;
      uint64_t v35 = v46;
      uint64_t v36 = v54;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v45);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v25, v21);
      uint64_t v28 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      char v39 = 0;
      long long v74 = 0u;
      break;
    case 3:
      LOBYTE(v75) = 3;
      sub_1000973D8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10008C9B4();
      uint64_t v48 = v65;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v49 = v74;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v30, v48);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v21);
      uint64_t v35 = v75;
      uint64_t v36 = v76;
      uint64_t v28 = v77;
      uint64_t v37 = v78;
      uint64_t v38 = v79;
      char v39 = 32;
      long long v74 = v80;
      break;
    case 4:
      LOBYTE(v75) = 4;
      sub_100097330();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_100097384();
      uint64_t v50 = v66;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v51 = v74;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v31, v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v51 + 8))(v25, v21);
      uint64_t v35 = v75;
      uint64_t v36 = v76;
      uint64_t v28 = v77;
      uint64_t v37 = v78;
      uint64_t v38 = v79;
      long long v74 = v80;
      char v39 = v81 | 0x40;
      break;
    case 5:
      LOBYTE(v75) = 5;
      sub_100097288();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_1000972DC();
      uint64_t v52 = v63;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v53 = v74;
      (*(void (**)(char *, uint64_t))(v68 + 8))(v32, v52);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v25, v21);
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v35 = v75;
      long long v74 = 0u;
      char v39 = 96;
      break;
    default:
      LOBYTE(v75) = 0;
      sub_1000974D4();
      unsigned __int8 v34 = v57;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v34, v56);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v74 + 8))(v25, v21);
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      long long v74 = 0u;
      char v39 = 0x80;
      break;
  }
  sub_10000AF94((uint64_t)v82);
  uint64_t v55 = v70;
  *uint64_t v70 = v35;
  v55[1] = v36;
  _DWORD v55[2] = v28;
  v55[3] = v37;
  v55[4] = v38;
  double result = *(double *)&v74;
  *(_OWORD *)(v55 + 5) = v74;
  *((unsigned char *)v55 + 56) = v39;
  return result;
}

unint64_t sub_100097234()
{
  unint64_t result = qword_1000FE588;
  if (!qword_1000FE588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE588);
  }
  return result;
}

unint64_t sub_100097288()
{
  unint64_t result = qword_1000FE590;
  if (!qword_1000FE590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE590);
  }
  return result;
}

unint64_t sub_1000972DC()
{
  unint64_t result = qword_1000FE598;
  if (!qword_1000FE598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE598);
  }
  return result;
}

unint64_t sub_100097330()
{
  unint64_t result = qword_1000FE5A0;
  if (!qword_1000FE5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE5A0);
  }
  return result;
}

unint64_t sub_100097384()
{
  unint64_t result = qword_1000FE5A8;
  if (!qword_1000FE5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE5A8);
  }
  return result;
}

unint64_t sub_1000973D8()
{
  unint64_t result = qword_1000FE5B0;
  if (!qword_1000FE5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE5B0);
  }
  return result;
}

unint64_t sub_10009742C()
{
  unint64_t result = qword_1000FE5B8;
  if (!qword_1000FE5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE5B8);
  }
  return result;
}

unint64_t sub_100097480()
{
  unint64_t result = qword_1000FE5C0;
  if (!qword_1000FE5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE5C0);
  }
  return result;
}

unint64_t sub_1000974D4()
{
  unint64_t result = qword_1000FE5C8;
  if (!qword_1000FE5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE5C8);
  }
  return result;
}

unint64_t sub_100097528()
{
  unint64_t result = qword_1000FE608;
  if (!qword_1000FE608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE608);
  }
  return result;
}

unint64_t sub_10009757C()
{
  unint64_t result = qword_1000FE610;
  if (!qword_1000FE610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE610);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CardEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009769CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CardEvent.CodingKeys()
{
  return &type metadata for CardEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for CardEvent.PresentingCodingKeys()
{
  return &type metadata for CardEvent.PresentingCodingKeys;
}

ValueMetadata *type metadata accessor for CardEvent.PresentedCodingKeys()
{
  return &type metadata for CardEvent.PresentedCodingKeys;
}

ValueMetadata *type metadata accessor for CardEvent.DismissedCodingKeys()
{
  return &type metadata for CardEvent.DismissedCodingKeys;
}

ValueMetadata *type metadata accessor for CardEvent.FailedCodingKeys()
{
  return &type metadata for CardEvent.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for CardEvent.AccessoryViewCodingKeys()
{
  return &type metadata for CardEvent.AccessoryViewCodingKeys;
}

unsigned char *_s13PCViewService9CardEventO19DismissedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000977C4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CardEvent.EducationViewCodingKeys()
{
  return &type metadata for CardEvent.EducationViewCodingKeys;
}

unint64_t sub_100097800()
{
  unint64_t result = qword_1000FE618;
  if (!qword_1000FE618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE618);
  }
  return result;
}

unint64_t sub_100097858()
{
  unint64_t result = qword_1000FE620;
  if (!qword_1000FE620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE620);
  }
  return result;
}

unint64_t sub_1000978B0()
{
  unint64_t result = qword_1000FE628;
  if (!qword_1000FE628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE628);
  }
  return result;
}

unint64_t sub_100097908()
{
  unint64_t result = qword_1000FE630;
  if (!qword_1000FE630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE630);
  }
  return result;
}

unint64_t sub_100097960()
{
  unint64_t result = qword_1000FE638;
  if (!qword_1000FE638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE638);
  }
  return result;
}

unint64_t sub_1000979B8()
{
  unint64_t result = qword_1000FE640;
  if (!qword_1000FE640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE640);
  }
  return result;
}

unint64_t sub_100097A10()
{
  unint64_t result = qword_1000FE648;
  if (!qword_1000FE648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE648);
  }
  return result;
}

unint64_t sub_100097A68()
{
  unint64_t result = qword_1000FE650;
  if (!qword_1000FE650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE650);
  }
  return result;
}

unint64_t sub_100097AC0()
{
  unint64_t result = qword_1000FE658;
  if (!qword_1000FE658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE658);
  }
  return result;
}

unint64_t sub_100097B18()
{
  unint64_t result = qword_1000FE660;
  if (!qword_1000FE660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE660);
  }
  return result;
}

unint64_t sub_100097B70()
{
  unint64_t result = qword_1000FE668;
  if (!qword_1000FE668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE668);
  }
  return result;
}

unint64_t sub_100097BC8()
{
  unint64_t result = qword_1000FE670;
  if (!qword_1000FE670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE670);
  }
  return result;
}

unint64_t sub_100097C20()
{
  unint64_t result = qword_1000FE678;
  if (!qword_1000FE678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE678);
  }
  return result;
}

unint64_t sub_100097C78()
{
  unint64_t result = qword_1000FE680;
  if (!qword_1000FE680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE680);
  }
  return result;
}

unint64_t sub_100097CD0()
{
  unint64_t result = qword_1000FE688;
  if (!qword_1000FE688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE688);
  }
  return result;
}

unint64_t sub_100097D28()
{
  unint64_t result = qword_1000FE690;
  if (!qword_1000FE690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE690);
  }
  return result;
}

unint64_t sub_100097D80()
{
  unint64_t result = qword_1000FE698;
  if (!qword_1000FE698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE698);
  }
  return result;
}

unint64_t sub_100097DD8()
{
  unint64_t result = qword_1000FE6A0;
  if (!qword_1000FE6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE6A0);
  }
  return result;
}

unint64_t sub_100097E30()
{
  unint64_t result = qword_1000FE6A8;
  if (!qword_1000FE6A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE6A8);
  }
  return result;
}

BOOL sub_100097E84()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  unsigned int v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = enum case for DispatchTimeInterval.never(_:);
  unsigned int v6 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v6(v4, enum case for DispatchTimeInterval.never(_:), v0);
  char v7 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  if (v7) {
    return 1;
  }
  v6(v4, v5, v0);
  char v10 = static DispatchTimeInterval.== infix(_:_:)();
  v8(v4, v0);
  if (v10) {
    return 0;
  }
  uint64_t v11 = sub_1000984DC();
  return v11 >= sub_1000984DC();
}

BOOL sub_100098004()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  unsigned int v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = enum case for DispatchTimeInterval.never(_:);
  unsigned int v6 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v6(v4, enum case for DispatchTimeInterval.never(_:), v0);
  char v7 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  if (v7) {
    return 1;
  }
  v6(v4, v5, v0);
  char v10 = static DispatchTimeInterval.== infix(_:_:)();
  v8(v4, v0);
  if (v10) {
    return 0;
  }
  uint64_t v11 = sub_1000984DC();
  return v11 >= sub_1000984DC();
}

uint64_t sub_100098184()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  unsigned int v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue_serial.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8, v8);
  sub_100098C64();
  static DispatchQoS.default.getter();
  v10[1] = _swiftEmptyArrayStorage;
  sub_100098CA4(&qword_1000FE768, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes);
  sub_100008614(&qword_1000FE770);
  sub_100098CEC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  uint64_t result = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100111AB8 = result;
  return result;
}

uint64_t sub_1000983B8()
{
  type metadata accessor for WorkActor();
  uint64_t v0 = swift_allocObject();
  if (qword_1000F66A8 != -1) {
    swift_once();
  }
  uint64_t result = OS_dispatch_queue_serial_executor.asUnownedSerialExecutor()();
  *(void *)(v0 + 16) = result;
  *(void *)(v0 + 24) = v2;
  qword_100111AC0 = v0;
  return result;
}

uint64_t sub_100098430()
{
  return swift_deallocClassInstance();
}

uint64_t sub_100098440()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100098448()
{
  if (qword_1000F66B0 != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t sub_1000984A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for WorkActor();

  return static GlobalActor.sharedUnownedExecutor.getter(v3, a2);
}

uint64_t sub_1000984DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v6, v1, v2);
  LODWORD(result) = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v6, v2);
  if (result == enum case for DispatchTimeInterval.seconds(_:))
  {
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t))(v3 + 96);
    v3 += 96;
    v8(v6, v2);
    uint64_t result = 1000000000 * *v6;
    if ((unsigned __int128)(*v6 * (__int128)1000000000) >> 64 == result >> 63) {
      return result;
    }
    __break(1u);
  }
  if (result == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t))(v3 + 96);
    v3 += 96;
    v9(v6, v2);
    uint64_t result = 1000000 * *v6;
    if ((unsigned __int128)(*v6 * (__int128)1000000) >> 64 == result >> 63) {
      return result;
    }
    __break(1u);
  }
  if (result == enum case for DispatchTimeInterval.microseconds(_:))
  {
    char v10 = *(void (**)(uint64_t *, uint64_t))(v3 + 96);
    v3 += 96;
    v10(v6, v2);
    uint64_t result = 1000 * *v6;
    if ((unsigned __int128)(*v6 * (__int128)1000) >> 64 == result >> 63) {
      return result;
    }
    __break(1u);
  }
  if (result == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v6, v2);
    return *v6;
  }
  else if (result == enum case for DispatchTimeInterval.never(_:))
  {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

BOOL static DispatchTimeInterval.< infix(_:_:)()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v6(v4, enum case for DispatchTimeInterval.never(_:), v0);
  char v7 = static DispatchTimeInterval.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  if (v7) {
    return 0;
  }
  v6(v4, v5, v0);
  char v10 = static DispatchTimeInterval.== infix(_:_:)();
  v8(v4, v0);
  if (v10) {
    return 1;
  }
  uint64_t v11 = sub_1000984DC();
  return v11 < sub_1000984DC();
}

uint64_t sub_1000988BC()
{
  return sub_100098CA4(&qword_1000FE6B0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchTimeInterval);
}

BOOL sub_100098908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(char *, void))v8)(v6, enum case for DispatchTimeInterval.never(_:));
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  char v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, a3);
  if (v9) {
    return 0;
  }
  v8(v6, v7, a3);
  char v12 = static DispatchTimeInterval.== infix(_:_:)();
  v10(v6, a3);
  if (v12) {
    return 1;
  }
  uint64_t v13 = sub_1000984DC();
  return v13 < sub_1000984DC();
}

BOOL sub_100098A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = enum case for DispatchTimeInterval.never(_:);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  ((void (*)(char *, void))v8)(v6, enum case for DispatchTimeInterval.never(_:));
  char v9 = static DispatchTimeInterval.== infix(_:_:)();
  char v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, a3);
  if (v9) {
    return 0;
  }
  v8(v6, v7, a3);
  char v12 = static DispatchTimeInterval.== infix(_:_:)();
  v10(v6, a3);
  if (v12) {
    return 1;
  }
  uint64_t v13 = sub_1000984DC();
  return v13 < sub_1000984DC();
}

uint64_t type metadata accessor for WorkActor()
{
  return self;
}

uint64_t sub_100098C1C(uint64_t a1, uint64_t a2)
{
  return sub_100098CA4(&qword_1000FE758, a2, (void (*)(uint64_t))type metadata accessor for WorkActor);
}

unint64_t sub_100098C64()
{
  unint64_t result = qword_1000FE760;
  if (!qword_1000FE760)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000FE760);
  }
  return result;
}

uint64_t sub_100098CA4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100098CEC()
{
  unint64_t result = qword_1000FE778;
  if (!qword_1000FE778)
  {
    sub_100009F40(&qword_1000FE770);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE778);
  }
  return result;
}

uint64_t sub_100098D48()
{
  return swift_getWitnessTable();
}

BOOL sub_100098D64()
{
  type metadata accessor for Weak();
  Swift::Int v0 = sub_100098DC0();
  return v0 == sub_100098DC0();
}

Swift::Int sub_100098DC0()
{
  return Hasher._finalize()();
}

BOOL sub_100098E08()
{
  return sub_100098D64();
}

void sub_100098E14()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v2);
  uint64_t v4 = (char *)&v7 - v3;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    Swift::UInt v8 = Strong;
    dispatch thunk of Identifiable.id.getter();
    swift_unknownObjectRelease();
    swift_getAssociatedConformanceWitness();
    Swift::UInt v6 = dispatch thunk of Hashable.hashValue.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, AssociatedTypeWitness);
  }
  else
  {
    Swift::UInt v8 = 0;
    swift_stdlib_random();
    Swift::UInt v6 = v8;
  }
  Hasher._combine(_:)(v6);
}

Swift::Int sub_100098F8C()
{
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Weak()
{
  return sub_10000ED34();
}

uint64_t sub_100098FFC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10009901C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

uint64_t sub_100099044(double a1)
{
  id v2 = [objc_allocWithZone((Class)NSNumberFormatter) init];
  [v2 setMaximumFractionDigits:3];
  if (a1 >= 0.001)
  {
    id v4 = [objc_allocWithZone((Class)NSNumber) initWithDouble:a1];
    id v5 = [v2 stringFromNumber:v4];

    if (v5)
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v8 = v6;
      v7._uint64_t countAndFlagsBits = 115;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
    }
    else
    {
      uint64_t v8 = 0;
      Double.write<A>(to:)();
    }

    return v8;
  }
  else
  {

    return 0x736D31203CLL;
  }
}

uint64_t sub_100099170(void *a1)
{
  uint64_t v3 = sub_100008614(&qword_1000FE828);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  Swift::String v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000AEFC(a1, a1[3]);
  sub_10009A098();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t sub_100099320()
{
  unint64_t result = 0x646F43726F727265;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6D6F44726F727265;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000993C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100099C04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000993F0(uint64_t a1)
{
  unint64_t v2 = sub_10009A098();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009942C(uint64_t a1)
{
  unint64_t v2 = sub_10009A098();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100099468@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100099DD8(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1000994B8(void *a1)
{
  return sub_100099170(a1);
}

uint64_t sub_1000994D0()
{
  return *(void *)v0;
}

uint64_t sub_1000994D8(uint64_t a1)
{
  unint64_t v2 = sub_10009A0EC();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100099514(uint64_t a1)
{
  unint64_t v2 = sub_10009A0EC();

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100099550(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  return sub_1000995BC(v5, v7) & 1;
}

uint64_t sub_1000995BC(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  BOOL v4 = a1[1] == a2[1] && a1[2] == a2[2];
  if (v4 || (v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[3] == a2[3] && a1[4] == a2[4];
    if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v8 & 1) != 0))
    {
      uint64_t v9 = a1[6];
      uint64_t v10 = a2[6];
      if (v9)
      {
        if (v10 && (a1[5] == a2[5] && v9 == v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
          return 1;
        }
      }
      else if (!v10)
      {
        return 1;
      }
      return 0;
    }
  }
  return result;
}

void sub_100099688(uint64_t a1@<X0>, void *a2@<X8>)
{
  *(void *)&v25[0] = a1;
  swift_errorRetain();
  sub_100008614(&qword_1000F7038);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    id v4 = (id)v28[0];
    uint64_t v5 = v28[1];
    uint64_t v6 = v28[2];
    uint64_t v7 = v29;
    uint64_t v8 = v30;
    uint64_t v9 = v31;
    uint64_t v10 = v32;
  }
  else
  {
    uint64_t v27 = a1;
    swift_errorRetain();
    sub_100008614(&qword_1000FE800);
    if (swift_dynamicCast())
    {
      sub_100034254(v25, (uint64_t)v28);
      uint64_t v11 = (void *)_convertErrorToNSError(_:)();
      id v24 = [v11 code];
      id v12 = [v11 domain];
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v13;

      sub_10000AEFC(v28, v29);
      uint64_t v7 = Error.localizedDescription.getter();
      uint64_t v8 = v14;
      sub_10000AEFC(v28, v29);
      uint64_t v9 = dispatch thunk of LocalizedError.failureReason.getter();
      uint64_t v10 = v15;
      swift_errorRelease();

      sub_10000AF94((uint64_t)v28);
    }
    else
    {
      uint64_t v26 = 0;
      memset(v25, 0, sizeof(v25));
      sub_10009990C((uint64_t)v25);
      uint64_t v16 = (void *)_convertErrorToNSError(_:)();
      id v24 = [v16 code];
      id v17 = [v16 domain];
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v18;

      id v19 = [v16 localizedDescription];
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v20;

      id v21 = [v16 localizedFailureReason];
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v10 = v23;
        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();

        uint64_t v10 = 0;
        uint64_t v9 = 0;
      }
    }
    id v4 = v24;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
}

uint64_t sub_10009990C(uint64_t a1)
{
  uint64_t v2 = sub_100008614(&qword_1000FE808);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for CodableError()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CodableError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CodableError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CodableError(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableError(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CodableError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableError()
{
  return &type metadata for CodableError;
}

unint64_t sub_100099BB0()
{
  unint64_t result = qword_1000FE810;
  if (!qword_1000FE810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE810);
  }
  return result;
}

uint64_t sub_100099C04(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x646F43726F727265 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D6F44726F727265 && a2 == 0xEB000000006E6961 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001000C3530 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001000C3550)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_100099DD8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100008614(&qword_1000FE818);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_10009A098();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000AF94((uint64_t)a1);
  }
  char v31 = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v30 = 1;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v27 = v11;
  char v29 = 2;
  swift_bridgeObjectRetain();
  uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v26 = v14;
  char v28 = 3;
  swift_bridgeObjectRetain();
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v24 = v15;
  v18(v9, v5);
  swift_bridgeObjectRetain();
  sub_10000AF94((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v26;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v21 = v27;
  *a2 = v10;
  a2[1] = v21;
  uint64_t v22 = v25;
  a2[2] = v13;
  a2[3] = v22;
  uint64_t v23 = v24;
  a2[4] = v19;
  a2[5] = v23;
  a2[6] = v17;
  return result;
}

unint64_t sub_10009A098()
{
  unint64_t result = qword_1000FE820;
  if (!qword_1000FE820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE820);
  }
  return result;
}

unint64_t sub_10009A0EC()
{
  unint64_t result = qword_1000FE830;
  if (!qword_1000FE830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE830);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CodableError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10009A20CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodableError.CodingKeys()
{
  return &type metadata for CodableError.CodingKeys;
}

unint64_t sub_10009A248()
{
  unint64_t result = qword_1000FE838;
  if (!qword_1000FE838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE838);
  }
  return result;
}

unint64_t sub_10009A2A0()
{
  unint64_t result = qword_1000FE840;
  if (!qword_1000FE840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE840);
  }
  return result;
}

unint64_t sub_10009A2F8()
{
  unint64_t result = qword_1000FE848;
  if (!qword_1000FE848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE848);
  }
  return result;
}

uint64_t sub_10009A34C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_10009A358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10000EC04(a1, &qword_1000F8F28);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10009A504(void *a1)
{
  id v1 = [a1 userInfo];
  if (!v1)
  {
    long long v11 = 0u;
    long long v12 = 0u;
LABEL_10:
    sub_10000EC04((uint64_t)&v11, &qword_1000F6CC0);
    goto LABEL_11;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  AnyHashable.init<A>(_:)();
  if (*(void *)(v3 + 16) && (unint64_t v4 = sub_10005BF24((uint64_t)v10), (v5 & 1) != 0))
  {
    sub_10000E724(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v11);
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  sub_100012998((uint64_t)v10);
  swift_bridgeObjectRelease();
  if (!*((void *)&v12 + 1)) {
    goto LABEL_10;
  }
  if (swift_dynamicCast())
  {
    uint64_t v6 = v10[0];
    unint64_t v7 = v10[1];
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    type metadata accessor for PCUserAlertPresentationContext();
    sub_10009DD1C(&qword_1000F82B8, (void (*)(uint64_t))type metadata accessor for PCUserAlertPresentationContext);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    return sub_10000D6B8(v6, v7);
  }
LABEL_11:
  sub_100008614(&qword_1000FE8C8);
  sub_100012908(&qword_1000FE8D0, &qword_1000FE8C8);
  swift_allocError();
  *uint64_t v9 = 0xD000000000000013;
  v9[1] = 0x80000001000C37C0;
  return swift_willThrow();
}

uint64_t sub_10009A750()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10009D688(v0, qword_1000FE850);
  sub_10009CF7C(v0, (uint64_t)qword_1000FE850);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10009A7D4()
{
  if ([v0 _remoteViewControllerProxy])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  sub_100012744((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    sub_100008614(&qword_1000F7048);
    if (swift_dynamicCast()) {
      return v2;
    }
    else {
      return 0;
    }
  }
  else
  {
    sub_10000EC04((uint64_t)v4, &qword_1000F6CC0);
    return 0;
  }
}

void sub_10009A898(void *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for PCUserAlertPresentationContext();
  __chkstk_darwin(v8 - 8, v9);
  long long v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000F66B8 != -1) {
    goto LABEL_13;
  }
  while (1)
  {
    uint64_t v12 = type metadata accessor for Logger();
    uint64_t v13 = sub_10009CF7C(v12, (uint64_t)qword_1000FE850);
    id v14 = a1;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v25[1] = v13;
      uint64_t v26 = v4;
      uint64_t v27 = a2;
      uint64_t v17 = swift_slowAlloc();
      v25[0] = swift_slowAlloc();
      v30[0] = v25[0];
      *(_DWORD *)uint64_t v17 = 136315394;
      uint64_t v29 = sub_10009CFB4(0xD00000000000001BLL, 0x80000001000C37A0, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v28 = a3;
      if (!a1) {
        goto LABEL_7;
      }
      id v18 = [v14 userInfo];
      if (v18)
      {
        uint64_t v19 = v18;
        uint64_t v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v29 = v20;
        sub_100008614(qword_1000F7080);
        uint64_t v21 = String.init<A>(describing:)();
        unint64_t v23 = v22;
      }
      else
      {
LABEL_7:
        unint64_t v23 = 0xE300000000000000;
        uint64_t v21 = 7104878;
      }
      uint64_t v29 = sub_10009CFB4(v21, v23, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: context=%s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a2 = v27;
      a3 = v28;
      uint64_t v4 = v26;
    }
    else
    {
    }
    if (!a1) {
      break;
    }
    a1 = 0;
    sub_10009A504(v14);
    sub_10009B218((uint64_t)v11);
    uint64_t v24 = sub_10009DCBC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PCUserAlertPresentationContext);
    if (a2)
    {
      a2(v24);
      return;
    }
    __break(1u);
LABEL_13:
    swift_once();
  }
  __break(1u);
}

void sub_10009ADF4(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_1000F66B8 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10009CF7C(v4, (uint64_t)qword_1000FE850);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    sub_10009CFB4(0x5F28656C646E6168, 0xEA0000000000293ALL, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2080;
    sub_10001280C(0, &qword_1000F7060);
    sub_100012848();
    swift_bridgeObjectRetain();
    uint64_t v8 = Set.description.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    sub_10009CFB4(v8, v10, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: buttonActions=%s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v11 = sub_100010664(a1);
  char v12 = sub_10000C964(16, v11);
  swift_bridgeObjectRelease();
  if (v12)
  {
    uint64_t v13 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = (uint64_t)sub_10009CA24;
    aBlock[5] = v13;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10003CE34;
    aBlock[3] = (uint64_t)&unk_1000E9100;
    id v14 = _Block_copy(aBlock);
    swift_release();
    [v2 dismissViewControllerAnimated:1 completion:v14];
    _Block_release(v14);
  }
}

void sub_10009B1A4()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    uint64_t v2 = (void *)sub_10009A7D4();

    if (v2)
    {
      [v2 invalidate];
      swift_unknownObjectRelease();
    }
  }
}

void sub_10009B218(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v63 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v62 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v61 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for DispatchTime();
  uint64_t v60 = *(void *)(v66 - 8);
  uint64_t v10 = __chkstk_darwin(v66, v9);
  char v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v65 = (char *)&v57 - v14;
  uint64_t v15 = (int *)type metadata accessor for PCUserAlertPresentationContext();
  uint64_t v73 = *((void *)v15 - 1);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v71 = (uint64_t)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = v18;
  uint64_t v19 = *(int *)(v17 + 24);
  uint64_t v20 = *(void *)(a1 + *(int *)(v17 + 20) + 8);
  uint64_t v76 = a1;
  uint64_t v21 = *(void *)(a1 + v19 + 8);
  if (v20)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (v21)
    {
LABEL_3:
      NSString v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    NSString v22 = 0;
    if (v21) {
      goto LABEL_3;
    }
  }
  NSString v23 = 0;
LABEL_6:
  id v24 = [self alertControllerWithTitle:v22 message:v23 preferredStyle:1];

  uint64_t v25 = (uint64_t *)(v76 + v15[7]);
  uint64_t v26 = v25[1];
  uint64_t v27 = &unk_1000AE000;
  if (v26)
  {
    uint64_t v28 = *v25;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v28;
    *(void *)(v29 + 24) = v26;
    uint64_t v82 = sub_10009CA1C;
    uint64_t v83 = (void *)v29;
    long long aBlock = (int8x8_t *)_NSConcreteStackBlock;
    uint64_t v79 = 1107296256;
    long long v80 = sub_10009BB58;
    char v81 = &unk_1000E9060;
    char v30 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain();
    swift_release();
    [v24 addTextFieldWithConfigurationHandler:v30];
    _Block_release(v30);
  }
  uint64_t v31 = *(void *)(v76 + v15[10]);
  uint64_t v32 = *(void *)(v31 + 16);
  id v74 = v24;
  uint64_t v64 = v6;
  uint64_t v67 = v15;
  if (v32)
  {
    uint64_t v57 = v12;
    uint64_t v58 = v3;
    uint64_t v59 = v2;
    uint64_t v33 = self;
    uint64_t v68 = &v80;
    id v69 = v33;
    unsigned __int8 v34 = *(char **)(v31 + 16);
    swift_bridgeObjectRetain();
    uint64_t v35 = 0;
    uint64_t v36 = v31 + 40;
    uint64_t v70 = v31;
    uint64_t v37 = v74;
    while (v35 < v34)
    {
      uint64_t v77 = v35 + 1;
      uint64_t v38 = swift_allocObject();
      swift_unknownObjectWeakInit();
      char v39 = v27;
      uint64_t v40 = v71;
      sub_10002B4C8(v76, v71);
      unint64_t v41 = (*(unsigned __int8 *)(v73 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
      uint64_t v42 = (void *)swift_allocObject();
      _OWORD v42[2] = v37;
      v42[3] = v38;
      v42[4] = v35;
      uint64_t v43 = v40;
      uint64_t v27 = v39;
      sub_10009C8E8(v43, (uint64_t)v42 + v41);
      swift_bridgeObjectRetain();
      id v44 = v37;
      swift_retain();
      NSString v45 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v82 = sub_10009C94C;
      uint64_t v83 = v42;
      long long aBlock = (int8x8_t *)_NSConcreteStackBlock;
      uint64_t v79 = 1107296256;
      long long v80 = sub_10009BB58;
      char v81 = &unk_1000E8FE8;
      uint64_t v46 = _Block_copy(&aBlock);
      swift_release();
      id v47 = [v69 actionWithTitle:v45 style:0 handler:v46];
      uint64_t v48 = v46;
      uint64_t v49 = v70;
      _Block_release(v48);
      swift_release();

      [v44 addAction:v47];
      unsigned __int8 v34 = *(char **)(v49 + 16);
      v36 += 16;
      uint64_t v35 = v77;
      if (v77 == v34)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v59;
        uint64_t v3 = v58;
        uint64_t v15 = v67;
        id v24 = v74;
        char v12 = v57;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    [v75 presentViewController:v24 animated:1 completion:0];
    if ((*(unsigned char *)(v76 + v15[8] + 8) & 1) == 0)
    {
      sub_10001280C(0, (unint64_t *)&qword_1000F77E8);
      uint64_t v50 = (void *)static OS_dispatch_queue.main.getter();
      static DispatchTime.now()();
      + infix(_:_:)();
      uint64_t v77 = *(char **)(v60 + 8);
      ((void (*)(char *, uint64_t))v77)(v12, v66);
      uint64_t v51 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v82 = sub_10009C9DC;
      uint64_t v83 = (void *)v51;
      long long aBlock = (int8x8_t *)_NSConcreteStackBlock;
      uint64_t v79 = v27[2];
      long long v80 = (void (*)(uint64_t, void *))sub_10003CE34;
      char v81 = &unk_1000E9010;
      uint64_t v52 = _Block_copy(&aBlock);
      swift_release();
      uint64_t v53 = v61;
      static DispatchQoS.unspecified.getter();
      long long aBlock = _swiftEmptyArrayStorage;
      sub_10009DD1C((unint64_t *)&qword_1000F6E20, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100008614(&qword_1000F6E28);
      sub_100012908((unint64_t *)&qword_1000F6E30, &qword_1000F6E28);
      uint64_t v54 = v63;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v55 = v65;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v52);

      uint64_t v15 = v67;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v54, v2);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v53, v64);
      ((void (*)(char *, uint64_t))v77)(v55, v66);
      id v24 = v74;
    }
    if (*(unsigned char *)(v76 + v15[9]) == 1 && (uint64_t v56 = (void *)sub_10009A7D4()) != 0)
    {
      [v56 setDesiredHardwareButtonEvents:16];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

void sub_10009BAD8(void *a1)
{
  [a1 setAutocapitalizationType:2];
  NSString v2 = String._bridgeToObjectiveC()();
  [a1 setPlaceholder:v2];
}

void sub_10009BB5C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for PCUserAlertPresentationContext();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8, v11);
  char v12 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100008614(&qword_1000F8F28);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [a2 textFields];
  if (!v17) {
    goto LABEL_12;
  }
  sub_10001280C(0, &qword_1000FE8A0);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    id v17 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  id v17 = *(id *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v17) {
    goto LABEL_11;
  }
LABEL_4:
  if ((v18 & 0xC000000000000001) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v19 = *(id *)(v18 + 32);
  }
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  id v21 = [v20 text];

  if (v21)
  {
    id v17 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    goto LABEL_13;
  }
  id v17 = 0;
LABEL_12:
  uint64_t v23 = 0;
LABEL_13:
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v31 = Strong;
    uint64_t v25 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v16, 1, 1, v25);
    sub_10002B4C8(a5, (uint64_t)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
    type metadata accessor for MainActor();
    swift_bridgeObjectRetain();
    uint64_t v26 = static MainActor.shared.getter();
    unint64_t v27 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    unint64_t v28 = (v10 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = v26;
    *(void *)(v29 + 24) = &protocol witness table for MainActor;
    sub_10009C8E8((uint64_t)v12, v29 + v27);
    *(void *)(v29 + v28) = a4;
    char v30 = (void *)(v29 + ((v28 + 15) & 0xFFFFFFFFFFFFFFF8));
    *char v30 = v17;
    v30[1] = v23;
    sub_10009A358((uint64_t)v16, (uint64_t)&unk_1000FE898, v29);

    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

void sub_10009BEBC()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v1 = (void *)Strong;
    uint64_t v2 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = sub_10009CA24;
    aBlock[5] = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10003CE34;
    aBlock[3] = &unk_1000E9088;
    uint64_t v3 = _Block_copy(aBlock);
    swift_release();
    [v1 dismissViewControllerAnimated:1 completion:v3];
    _Block_release(v3);
  }
}

uint64_t sub_10009BFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[5] = a6;
  void v7[6] = a7;
  _OWORD v7[3] = a4;
  void v7[4] = a5;
  v7[7] = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
  v7[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v7[9] = static MainActor.shared.getter();
  uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
  v7[10] = v9;
  v7[11] = v8;
  return _swift_task_switch(sub_10009C088, v9, v8);
}

uint64_t sub_10009C088()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  type metadata accessor for PCProximityHandoffClient();
  swift_allocObject();
  uint64_t v7 = PCProximityHandoffClient.init(identifier:)(0, 0);
  v0[12] = v7;
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v1, v5, v8);
  *(void *)(v1 + *(int *)(v2 + 20)) = v6;
  uint64_t v9 = (void *)(v1 + *(int *)(v2 + 24));
  *uint64_t v9 = v4;
  v9[1] = v3;
  uint64_t v13 = (uint64_t (*)(uint64_t))(*(void *)((swift_isaMask & *v7) + 0x78)
                                        + **(int **)((swift_isaMask & *v7) + 0x78));
  swift_bridgeObjectRetain();
  uint64_t v10 = (void *)swift_task_alloc();
  v0[13] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10009C240;
  uint64_t v11 = v0[8];
  return v13(v11);
}

uint64_t sub_10009C240()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  sub_10009DCBC(v3, type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters);
  uint64_t v4 = *(void *)(v2 + 88);
  uint64_t v5 = *(void *)(v2 + 80);
  if (v0) {
    uint64_t v6 = sub_10009C420;
  }
  else {
    uint64_t v6 = sub_10009C3AC;
  }
  return _swift_task_switch(v6, v5, v4);
}

uint64_t sub_10009C3AC()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009C420()
{
  swift_release();
  swift_release();
  if (qword_1000F66B8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10009CF7C(v1, (uint64_t)qword_1000FE850);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "### Failed to handle action: %@", v4, 0xCu);
    sub_100008614(&qword_1000FE8B8);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

id sub_10009C728()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PCUserAlertViewController();
  return [super dealloc];
}

uint64_t type metadata accessor for PCUserAlertViewController()
{
  return self;
}

uint64_t sub_10009C780()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009C7B8()
{
  uint64_t v1 = *(void *)(type metadata accessor for PCUserAlertPresentationContext() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  swift_release();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10009C8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PCUserAlertPresentationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10009C94C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for PCUserAlertPresentationContext() - 8);
  uint64_t v4 = (void *)v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_10009BB5C(a1, v4, v5, v6, v7);
}

uint64_t sub_10009C9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10009C9D4()
{
  return swift_release();
}

void sub_10009C9DC()
{
}

uint64_t sub_10009C9E4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10009CA1C(void *a1)
{
}

void sub_10009CA24()
{
}

uint64_t sub_10009CA2C()
{
  uint64_t v1 = *(void *)(type metadata accessor for PCUserAlertPresentationContext() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_10009CB74(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for PCUserAlertPresentationContext() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = (uint64_t *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_10003C91C;
  return sub_10009BFBC(a1, v7, v8, v10, v9, v12, v13);
}

uint64_t sub_10009CCB8(uint64_t a1, int *a2)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10009CD94;
  return v6(a1);
}

uint64_t sub_10009CD94()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10009CE8C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009CEC4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_10003C91C;
  unint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1000FE8A8 + dword_1000FE8A8);
  return v6(a1, v4);
}

uint64_t sub_10009CF7C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10009CFB4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10009D088(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10000E724((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10000E724((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10000AF94((uint64_t)v12);
  return v7;
}

uint64_t sub_10009D088(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10009D244(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10009D244(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10009D2DC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10009D538(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10009D538(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10009D2DC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10009D454(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10009D454(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100008614(&qword_1000FE8C0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10009D4BC(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_10009D538(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100008614(&qword_1000FE8C0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t *sub_10009D688(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

int64_t sub_10009D6EC(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_10009D7D0(uint64_t a1, int a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001) != 0)
  {
    if (a3)
    {
      __CocoaSet.element(at:)();
      sub_10001280C(0, &qword_1000F7060);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      return;
    }
    goto LABEL_24;
  }
  if (a3) {
    goto LABEL_10;
  }
  if (a1 < 0 || 1 << *(unsigned char *)(a4 + 32) <= a1)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)a1 >> 6) + 56) >> a1) & 1) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    goto LABEL_17;
  }
  __break(1u);
LABEL_10:
  if (__CocoaSet.Index.age.getter() != *(_DWORD *)(a4 + 36))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  __CocoaSet.Index.element.getter();
  sub_10001280C(0, &qword_1000F7060);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v4 = v16;
  swift_unknownObjectRelease();
  Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
  uint64_t v8 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v6 = v7 & ~v8;
  if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
  {
LABEL_23:

    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  id v9 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
  char v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v6 = (v6 + 1) & v11;
      if (((*(void *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
        goto LABEL_23;
      }
      id v12 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
      char v13 = static NSObject.== infix(_:_:)();
    }
    while ((v13 & 1) == 0);
  }

LABEL_17:
  uint64_t v14 = *(void **)(*(void *)(a4 + 48) + 8 * v6);

  id v15 = v14;
}

uint64_t sub_10009DA48(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  id v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10009DC74()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009DCAC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_10009DCBC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10009DD1C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10009DD84(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10004F11C((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v3 = sub_10009E2E8(a1);
  if (!v3) {
    return v2;
  }
  unint64_t v4 = v3;
  unint64_t v30 = v3;
  char v5 = (void *)(v3 & 0xFFFFFFFFFFFFFF8);
  if (v3 >> 62) {
    goto LABEL_32;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    if ((v3 & 0xC000000000000001) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
LABEL_35:
    __break(1u);
  }
  uint64_t result = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
  unint64_t v7 = result;
  if (!v5[2]) {
    goto LABEL_45;
  }
  do
  {
    sub_10009E984(0, 1);

    a1 = v30;
    if (!(v30 >> 62))
    {
      char v5 = *(void **)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v5) {
        goto LABEL_10;
      }
LABEL_39:
      swift_bridgeObjectRelease_n();
      return v2;
    }
    while (2)
    {
      swift_bridgeObjectRetain_n();
      char v5 = (void *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        goto LABEL_39;
      }
LABEL_10:
      uint64_t v27 = a1;
      unint64_t v28 = a1 & 0xC000000000000001;
      uint64_t v8 = 4;
      while (1)
      {
        unint64_t v4 = v8 - 4;
        if (!v28) {
          break;
        }
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v11 = v8 - 3;
        if (__OFADD__(v4, 1)) {
          goto LABEL_29;
        }
LABEL_18:
        a1 = (uint64_t)v5;
        char v5 = v10;
        unsigned __int8 v12 = [v5 clipsToBounds];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v29 = v2;
        unint64_t v4 = (unint64_t)v2;
        unint64_t v15 = sub_10005BF68((uint64_t)v5);
        uint64_t v16 = v2[2];
        BOOL v17 = (v14 & 1) == 0;
        uint64_t v18 = v16 + v17;
        if (__OFADD__(v16, v17)) {
          goto LABEL_30;
        }
        char v19 = v14;
        if (v2[3] >= v18)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v2 = v29;
            if (v14) {
              goto LABEL_11;
            }
          }
          else
          {
            unint64_t v4 = (unint64_t)&v29;
            sub_10009E7E0();
            uint64_t v2 = v29;
            if (v19) {
              goto LABEL_11;
            }
          }
        }
        else
        {
          sub_10009E518(v18, isUniquelyReferenced_nonNull_native);
          unint64_t v4 = (unint64_t)v29;
          unint64_t v20 = sub_10005BF68((uint64_t)v5);
          if ((v19 & 1) != (v21 & 1)) {
            goto LABEL_42;
          }
          unint64_t v15 = v20;
          uint64_t v2 = v29;
          if (v19)
          {
LABEL_11:
            *(unsigned char *)(v2[7] + v15) = v12;
            goto LABEL_12;
          }
        }
        v2[(v15 >> 6) + 8] |= 1 << v15;
        *(void *)(v2[6] + 8 * v15) = v5;
        *(unsigned char *)(v2[7] + v15) = v12;
        uint64_t v22 = v2[2];
        BOOL v23 = __OFADD__(v22, 1);
        uint64_t v24 = v22 + 1;
        if (v23) {
          goto LABEL_31;
        }
        v2[2] = v24;
        uint64_t v25 = v5;
LABEL_12:

        swift_bridgeObjectRelease();
        [v5 setClipsToBounds:0];

        ++v8;
        char v5 = (void *)a1;
        BOOL v9 = v11 == a1;
        a1 = v27;
        if (v9) {
          goto LABEL_39;
        }
      }
      id v10 = *(id *)(a1 + 8 * v8);
      uint64_t v11 = v8 - 3;
      if (!__OFADD__(v4, 1)) {
        goto LABEL_18;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      if (_CocoaArrayWrapper.endIndex.getter())
      {
        swift_bridgeObjectRetain();
        a1 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!a1)
        {
          __break(1u);
          goto LABEL_35;
        }
      }
      else
      {
        __break(1u);
LABEL_42:
        sub_10001280C(0, (unint64_t *)&qword_1000F7C70);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
      }
      if ((v4 & 0xC000000000000001) == 0)
      {
LABEL_5:
        if (!v5[2])
        {
          __break(1u);
          continue;
        }
        uint64_t result = *(id *)(v4 + 32);
        goto LABEL_7;
      }
      break;
    }
    unint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = (void *)swift_bridgeObjectRelease();
  }
  while (v26);
LABEL_45:
  __break(1u);
  return result;
}

unint64_t sub_10009E0D8(uint64_t a1, uint64_t a2)
{
  unint64_t result = sub_10009E2E8(a1);
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  unint64_t v14 = result;
  unsigned int v6 = (void *)(result & 0xFFFFFFFFFFFFFF8);
  if (result >> 62) {
    goto LABEL_21;
  }
  if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_24;
  }
  if ((result & 0xC000000000000001) != 0) {
    goto LABEL_25;
  }
LABEL_5:
  if (v6[2])
  {
    unint64_t result = (unint64_t)*(id *)(v5 + 32);
    goto LABEL_7;
  }
  __break(1u);
LABEL_27:
  swift_bridgeObjectRetain_n();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    return swift_bridgeObjectRelease_n();
  }
  while (1)
  {
    uint64_t v9 = 4;
    uint64_t v5 = 0;
    if ((v2 & 0xC000000000000001) != 0)
    {
LABEL_11:
      id v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_13;
    }
    while (1)
    {
      id v10 = *(id *)(v2 + 8 * v9);
LABEL_13:
      unsigned int v6 = v10;
      if (__OFADD__(v5, 1)) {
        break;
      }
      if (*(void *)(a2 + 16))
      {
        unint64_t v11 = sub_10005BF68((uint64_t)v10);
        if (v12) {
          [v6 setClipsToBounds:*(unsigned __int8 *)(*(void *)(a2 + 56) + v11)];
        }
      }

      if (v5 + 1 == v8) {
        return swift_bridgeObjectRelease_n();
      }
      uint64_t v5 = ++v9 - 4;
      if ((v2 & 0xC000000000000001) != 0) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_21:
    if (_CocoaArrayWrapper.endIndex.getter()) {
      break;
    }
    __break(1u);
LABEL_31:
    if ((v5 & 0xC000000000000001) == 0) {
      goto LABEL_5;
    }
    unint64_t v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v13) {
      goto LABEL_33;
    }
LABEL_8:
    sub_10009E984(0, 1);

    uint64_t v2 = v14;
    if (v14 >> 62) {
      goto LABEL_27;
    }
    uint64_t v8 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v8) {
      return swift_bridgeObjectRelease_n();
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_31;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  unint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_7:
  unint64_t v7 = (void *)result;
  if (v6[2]) {
    goto LABEL_8;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_10009E2E8(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_10001280C(0, &qword_1000FDD50);
  if (static NSObject.== infix(_:_:)())
  {
    sub_100008614(&qword_1000F77C0);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1000AE8C0;
    *(void *)(v4 + 32) = v1;
    uint64_t v18 = v4;
    specialized Array._endMutation()();
    uint64_t v5 = v18;
    id v6 = v2;
    return v5;
  }
  id v7 = [v1 subviews];
  sub_10001280C(0, (unint64_t *)&qword_1000F7C70);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_5;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_18:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_12;
  }
LABEL_5:
  uint64_t v10 = 4;
  while (1)
  {
    if ((v8 & 0xC000000000000001) != 0) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(v8 + 8 * v10);
    }
    char v12 = v11;
    uint64_t v13 = v10 - 3;
    if (__OFADD__(v10 - 4, 1))
    {
      __break(1u);
      goto LABEL_18;
    }
    uint64_t v14 = sub_10009E2E8(a1);
    if (v14) {
      break;
    }

    ++v10;
    if (v13 == v9) {
      goto LABEL_12;
    }
  }
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  id v16 = v2;
  swift_bridgeObjectRetain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v5 = v15;

  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10009E518(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100008614(qword_1000FBC20);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v34 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v34 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_33:
          swift_release();
          unint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v34 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v34 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_31:
    uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v20);
    char v30 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((a2 & 1) == 0) {
      id v31 = v29;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v17);
      }
      while (v28 == -1);
      unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v29;
    *(unsigned char *)(*(void *)(v7 + 56) + v18) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v3 = v33;
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v22, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v3 = v7;
  return result;
}

id sub_10009E7E0()
{
  unint64_t v1 = v0;
  sub_100008614(qword_1000FBC20);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    char v17 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = v16;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v17;
    id result = v16;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10009E984(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!((unint64_t)*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v21 + v5;
    if (!__OFADD__(v21, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v12 = v11 + 32;
  int64_t v13 = (char *)(v11 + 32 + 8 * v4);
  sub_10001280C(0, (unint64_t *)&qword_1000F7C70);
  swift_arrayDestroy();
  if (v5)
  {
    if ((unint64_t)*v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v2;
      if (!__OFSUB__(v22, v2))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        unint64_t v16 = (char *)(v12 + 8 * v2);
        if (v4 != v2 || v13 >= &v16[8 * v15]) {
          memmove(v13, v16, 8 * v15);
        }
        if (!((unint64_t)*v3 >> 62))
        {
          uint64_t v17 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v18 = v17 + v5;
          if (!__OFADD__(v17, v5))
          {
LABEL_23:
            *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v5;
        if (!__OFADD__(v23, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v15 = v14 - v2;
      if (!__OFSUB__(v14, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t destroy for NearbySharingInteractionViewEvent(uint64_t a1)
{
  return sub_1000450A8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
}

uint64_t initializeWithCopy for NearbySharingInteractionViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_100044F54(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  return a1;
}

uint64_t assignWithCopy for NearbySharingInteractionViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  sub_100044F54(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  char v18 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v10;
  sub_1000450A8(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for NearbySharingInteractionViewEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  char v13 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v4;
  sub_1000450A8(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent()
{
  return &type metadata for NearbySharingInteractionViewEvent;
}

uint64_t sub_10009EE64()
{
  sub_10008C748(v0, &v9);
  uint64_t countAndFlagsBits = v9._countAndFlagsBits;
  if (v13)
  {
    if (v13 == 1)
    {
      Swift::String v14 = v9;
      long long v15 = v10;
      long long v16 = v11;
      uint64_t v17 = v12;
      v2._uint64_t countAndFlagsBits = 0x202864656C696166;
      v2._object = (void *)0xE800000000000000;
      String.append(_:)(v2);
      _print_unlocked<A, B>(_:_:)();
      v3._uint64_t countAndFlagsBits = 10528;
      v3._object = (void *)0xE200000000000000;
      String.append(_:)(v3);
      return 0;
    }
    else
    {
      uint64_t v7 = *((void *)&v10 + 1) | v10 | (__int128)v9._object;
      if (*((void *)&v11 + 1) | v12 | v9._countAndFlagsBits | (unint64_t)v11 | v7)
      {
        uint64_t v8 = *((void *)&v11 + 1) | v12 | v11 | v7;
        if (v9._countAndFlagsBits != 1 || v8)
        {
          if (v9._countAndFlagsBits == 2 && v8 == 0) {
            return 0xD000000000000010;
          }
          else {
            return 0x61546C65636E6163;
          }
        }
        else
        {
          return 0x65746E6573657270;
        }
      }
      else
      {
        return 0x69746E6573657270;
      }
    }
  }
  else
  {
    object = v9._object;
    v14._uint64_t countAndFlagsBits = 0x657373696D736964;
    v14._object = (void *)0xEB00000000202864;
    String.append(_:)(*(Swift::String *)&countAndFlagsBits);
    v6._uint64_t countAndFlagsBits = 10528;
    v6._object = (void *)0xE200000000000000;
    String.append(_:)(v6);
    return v14._countAndFlagsBits;
  }
}

uint64_t sub_10009F03C(void *a1)
{
  uint64_t v40 = sub_100008614(&qword_1000FE948);
  uint64_t v39 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v2);
  uint64_t v38 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_100008614(&qword_1000FE950);
  uint64_t v36 = *(void *)(v37 - 8);
  __chkstk_darwin(v37, v4);
  uint64_t v35 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100008614(&qword_1000FE958);
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v47, v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008614(&qword_1000FE960);
  uint64_t v45 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100008614(&qword_1000FE968);
  uint64_t v42 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v13);
  unint64_t v41 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100008614(&qword_1000FE970);
  uint64_t v44 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  char v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_100008614(&qword_1000FE978);
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v19);
  uint64_t v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_1000A0B34();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10008C748((long long *)v63[1], &v54);
  if (v58)
  {
    if (v58 == 1)
    {
      long long v59 = v54;
      long long v60 = v55;
      long long v61 = v56;
      uint64_t v62 = v57;
      LOBYTE(v50) = 3;
      sub_1000A0C30();
      uint64_t v22 = v48;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      long long v50 = v59;
      long long v51 = v60;
      long long v52 = v61;
      uint64_t v53 = v62;
      sub_10008CAB0();
      uint64_t v23 = v47;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v23);
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v21, v22);
    }
    else
    {
      uint64_t v26 = *((void *)&v55 + 1) | v55 | *((void *)&v54 + 1);
      if (*((void *)&v56 + 1) | v57 | (unint64_t)v54 | (unint64_t)v56 | v26)
      {
        uint64_t v27 = *((void *)&v56 + 1) | v57 | v56 | v26;
        if ((void)v54 != 1 || v27)
        {
          if ((void)v54 != 2 || v27)
          {
            LOBYTE(v50) = 5;
            sub_1000A0B88();
            uint64_t v34 = v38;
            uint64_t v29 = v48;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
            char v30 = *(void (**)(char *, void))(v39 + 8);
            id v31 = v34;
            uint64_t v32 = (char *)&v61 + 8;
          }
          else
          {
            LOBYTE(v50) = 4;
            sub_1000A0BDC();
            uint64_t v33 = v35;
            uint64_t v29 = v48;
            KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
            char v30 = *(void (**)(char *, void))(v36 + 8);
            id v31 = v33;
            uint64_t v32 = (char *)&v60;
          }
        }
        else
        {
          LOBYTE(v50) = 1;
          sub_1000A0CD8();
          uint64_t v28 = v41;
          uint64_t v29 = v48;
          KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
          char v30 = *(void (**)(char *, void))(v42 + 8);
          id v31 = v28;
          uint64_t v32 = (char *)v63;
        }
        v30(v31, *((void *)v32 - 32));
      }
      else
      {
        LOBYTE(v50) = 0;
        sub_1000A0D2C();
        uint64_t v29 = v48;
        KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v15);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v21, v29);
    }
  }
  else
  {
    LOBYTE(v50) = 2;
    sub_1000A0C84();
    uint64_t v25 = v48;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v21, v25);
  }
}

uint64_t sub_10009F7F8(uint64_t a1)
{
  unint64_t v2 = sub_1000A0B88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009F834(uint64_t a1)
{
  unint64_t v2 = sub_1000A0B88();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10009F870()
{
  unint64_t result = 0x69746E6573657270;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x65746E6573657270;
      break;
    case 2:
      unint64_t result = 0x657373696D736964;
      break;
    case 3:
      unint64_t result = 0x64656C696166;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x61546C65636E6163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10009F944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10009FE18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10009F96C(uint64_t a1)
{
  unint64_t v2 = sub_1000A0B34();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009F9A8(uint64_t a1)
{
  unint64_t v2 = sub_1000A0B34();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009F9E4(uint64_t a1)
{
  unint64_t v2 = sub_1000A0C84();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009FA20(uint64_t a1)
{
  unint64_t v2 = sub_1000A0C84();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009FA5C(uint64_t a1)
{
  unint64_t v2 = sub_1000A0C30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009FA98(uint64_t a1)
{
  unint64_t v2 = sub_1000A0C30();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009FAD4(uint64_t a1)
{
  unint64_t v2 = sub_1000A0CD8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009FB10(uint64_t a1)
{
  unint64_t v2 = sub_1000A0CD8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009FB4C(uint64_t a1)
{
  unint64_t v2 = sub_1000A0D2C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009FB88(uint64_t a1)
{
  unint64_t v2 = sub_1000A0D2C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10009FBC4(uint64_t a1)
{
  unint64_t v2 = sub_1000A0BDC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10009FC00(uint64_t a1)
{
  unint64_t v2 = sub_1000A0BDC();

  return CodingKey.debugDescription.getter(a1, v2);
}

_OWORD *sub_10009FC3C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = (_OWORD *)sub_1000A00C8(a1, (uint64_t)v5);
  if (!v2) {
    return sub_10008C748(v5, a2);
  }
  return result;
}

uint64_t sub_10009FC84(void *a1)
{
  sub_10008C748(v1, v4);
  return sub_10009F03C(a1);
}

uint64_t sub_10009FCD4()
{
  sub_10008C748(v0, v2);
  return sub_10009EE64();
}

BOOL sub_10009FD0C(uint64_t *a1, uint64_t *a2)
{
  int v2 = *((unsigned __int8 *)a2 + 56);
  if (*((unsigned char *)a1 + 56))
  {
    if (*((unsigned char *)a1 + 56) == 1) {
      return v2 == 1;
    }
    uint64_t v4 = *a1;
    uint64_t v3 = a1[1];
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    uint64_t v8 = a2[2];
    uint64_t v7 = a2[3];
    uint64_t v10 = a2[4];
    uint64_t v9 = a2[5];
    uint64_t v11 = a2[6];
    uint64_t v12 = a1[3];
    uint64_t v13 = a1[4];
    uint64_t v14 = a1[2];
    uint64_t v15 = a1[5] | a1[6];
    uint64_t v16 = v12 | v14 | v3;
    if (!(v15 | v4 | v13 | v16)) {
      return v2 == 2 && !(v8 | v5 | v6 | v7 | v10 | v9 | v11);
    }
    uint64_t v17 = v15 | v13 | v16;
    if (v4 != 1 || v17)
    {
      if (v4 != 2 || v17)
      {
        if (v2 != 2 || v6 != 3) {
          return 0;
        }
      }
      else if (v2 != 2 || v6 != 2)
      {
        return 0;
      }
    }
    else if (v2 != 2 || v6 != 1)
    {
      return 0;
    }
    if (!(v8 | v5 | v7 | v10 | v9 | v11)) {
      return 1;
    }
  }
  else if (!*((unsigned char *)a2 + 56))
  {
    return 1;
  }
  return 0;
}

uint64_t sub_10009FE18(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x69746E6573657270 && a2 == 0xEA0000000000676ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65746E6573657270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657373696D736964 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64656C696166 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001000C3840 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x61546C65636E6163 && a2 == 0xEC00000064657070)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1000A00C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v65 = sub_100008614(&qword_1000FE8D8);
  uint64_t v58 = *(void *)(v65 - 8);
  __chkstk_darwin(v65, v3);
  uint64_t v70 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_100008614(&qword_1000FE8E0);
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63, v5);
  id v69 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = sub_100008614(&qword_1000FE8E8);
  uint64_t v64 = *(void *)(v62 - 8);
  __chkstk_darwin(v62, v7);
  uint64_t v66 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008614(&qword_1000FE8F0);
  uint64_t v59 = *(void *)(v9 - 8);
  uint64_t v60 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v68 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_100008614(&qword_1000FE8F8);
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57, v12);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100008614(&qword_1000FE900);
  uint64_t v55 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  char v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100008614(&qword_1000FE908);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a1[3];
  uint64_t v71 = a1;
  sub_10000AEFC(a1, v24);
  sub_1000A0B34();
  uint64_t v25 = v79;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v26 = v25;
  if (v25) {
    return sub_10000AF94((uint64_t)v71);
  }
  long long v54 = v18;
  uint64_t v53 = v15;
  uint64_t v27 = v14;
  uint64_t v28 = v68;
  uint64_t v29 = v69;
  char v30 = v70;
  uint64_t v79 = v20;
  uint64_t v31 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v31 + 16) != 1)
  {
    uint64_t v39 = type metadata accessor for DecodingError();
    swift_allocError();
    unint64_t v41 = v40;
    sub_100008614(&qword_1000F8A40);
    *unint64_t v41 = &type metadata for NearbySharingInteractionViewEvent;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v39 - 8) + 104))(v41, enum case for DecodingError.typeMismatch(_:), v39);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v23, v19);
    return sub_10000AF94((uint64_t)v71);
  }
  switch(*(unsigned char *)(v31 + 32))
  {
    case 1:
      LOBYTE(v72) = 1;
      sub_1000A0CD8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v52 = 0;
      (*(void (**)(char *, uint64_t))(v56 + 8))(v27, v57);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v23, v19);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      char v42 = 2;
      uint64_t v33 = 1;
      break;
    case 2:
      LOBYTE(v72) = 2;
      sub_1000A0C84();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v43 = v60;
      uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
      uint64_t v45 = v79;
      uint64_t v26 = 0;
      uint64_t v33 = v44;
      uint64_t v34 = v50;
      uint64_t v52 = 0;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v28, v43);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v23, v19);
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      char v42 = 0;
      break;
    case 3:
      LOBYTE(v72) = 3;
      sub_1000A0C30();
      uint64_t v46 = v66;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      sub_10008C9B4();
      uint64_t v47 = v62;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v48 = v79;
      uint64_t v52 = 0;
      (*(void (**)(char *, uint64_t))(v64 + 8))(v46, v47);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v23, v19);
      uint64_t v33 = v72;
      uint64_t v34 = v73;
      uint64_t v26 = v74;
      uint64_t v35 = v75;
      uint64_t v36 = v76;
      uint64_t v37 = v77;
      char v42 = 1;
      uint64_t v38 = v78;
      break;
    case 4:
      LOBYTE(v72) = 4;
      sub_1000A0BDC();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v52 = 0;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v29, v63);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v23, v19);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v33 = 2;
      goto LABEL_10;
    case 5:
      LOBYTE(v72) = 5;
      sub_1000A0B88();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v52 = 0;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v65);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v23, v19);
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      char v42 = 2;
      uint64_t v33 = 3;
      break;
    default:
      LOBYTE(v72) = 0;
      sub_1000A0D2C();
      uint64_t v32 = v54;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v52 = 0;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v53);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v23, v19);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
LABEL_10:
      char v42 = 2;
      break;
  }
  uint64_t v51 = v67;
  uint64_t result = sub_10000AF94((uint64_t)v71);
  *(void *)uint64_t v51 = v33;
  *(void *)(v51 + 8) = v34;
  *(void *)(v51 + 16) = v26;
  *(void *)(v51 + 24) = v35;
  *(void *)(v51 + 32) = v36;
  *(void *)(v51 + 40) = v37;
  *(void *)(v51 + 48) = v38;
  *(unsigned char *)(v51 + 56) = v42;
  return result;
}

unint64_t sub_1000A0B34()
{
  unint64_t result = qword_1000FE910;
  if (!qword_1000FE910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE910);
  }
  return result;
}

unint64_t sub_1000A0B88()
{
  unint64_t result = qword_1000FE918;
  if (!qword_1000FE918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE918);
  }
  return result;
}

unint64_t sub_1000A0BDC()
{
  unint64_t result = qword_1000FE920;
  if (!qword_1000FE920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE920);
  }
  return result;
}

unint64_t sub_1000A0C30()
{
  unint64_t result = qword_1000FE928;
  if (!qword_1000FE928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE928);
  }
  return result;
}

unint64_t sub_1000A0C84()
{
  unint64_t result = qword_1000FE930;
  if (!qword_1000FE930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE930);
  }
  return result;
}

unint64_t sub_1000A0CD8()
{
  unint64_t result = qword_1000FE938;
  if (!qword_1000FE938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE938);
  }
  return result;
}

unint64_t sub_1000A0D2C()
{
  unint64_t result = qword_1000FE940;
  if (!qword_1000FE940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE940);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NearbySharingInteractionViewEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A0E4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.CodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.PresentingCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.PresentingCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.PresentedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.PresentedCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.DismissedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.DismissedCodingKeys;
}

unsigned char *_s13PCViewService33NearbySharingInteractionViewEventO19DismissedCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000A0F54);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.FailedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.FailedCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.SendButtonTappedCodingKeys;
}

ValueMetadata *type metadata accessor for NearbySharingInteractionViewEvent.CancelTappedCodingKeys()
{
  return &type metadata for NearbySharingInteractionViewEvent.CancelTappedCodingKeys;
}

unint64_t sub_1000A0FB0()
{
  unint64_t result = qword_1000FE980;
  if (!qword_1000FE980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE980);
  }
  return result;
}

unint64_t sub_1000A1008()
{
  unint64_t result = qword_1000FE988;
  if (!qword_1000FE988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE988);
  }
  return result;
}

unint64_t sub_1000A1060()
{
  unint64_t result = qword_1000FE990;
  if (!qword_1000FE990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE990);
  }
  return result;
}

unint64_t sub_1000A10B8()
{
  unint64_t result = qword_1000FE998;
  if (!qword_1000FE998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE998);
  }
  return result;
}

unint64_t sub_1000A1110()
{
  unint64_t result = qword_1000FE9A0;
  if (!qword_1000FE9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9A0);
  }
  return result;
}

unint64_t sub_1000A1168()
{
  unint64_t result = qword_1000FE9A8;
  if (!qword_1000FE9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9A8);
  }
  return result;
}

unint64_t sub_1000A11C0()
{
  unint64_t result = qword_1000FE9B0;
  if (!qword_1000FE9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9B0);
  }
  return result;
}

unint64_t sub_1000A1218()
{
  unint64_t result = qword_1000FE9B8;
  if (!qword_1000FE9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9B8);
  }
  return result;
}

unint64_t sub_1000A1270()
{
  unint64_t result = qword_1000FE9C0;
  if (!qword_1000FE9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9C0);
  }
  return result;
}

unint64_t sub_1000A12C8()
{
  unint64_t result = qword_1000FE9C8;
  if (!qword_1000FE9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9C8);
  }
  return result;
}

unint64_t sub_1000A1320()
{
  unint64_t result = qword_1000FE9D0;
  if (!qword_1000FE9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9D0);
  }
  return result;
}

unint64_t sub_1000A1378()
{
  unint64_t result = qword_1000FE9D8;
  if (!qword_1000FE9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9D8);
  }
  return result;
}

unint64_t sub_1000A13D0()
{
  unint64_t result = qword_1000FE9E0;
  if (!qword_1000FE9E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9E0);
  }
  return result;
}

unint64_t sub_1000A1428()
{
  unint64_t result = qword_1000FE9E8;
  if (!qword_1000FE9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9E8);
  }
  return result;
}

unint64_t sub_1000A1480()
{
  unint64_t result = qword_1000FE9F0;
  if (!qword_1000FE9F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9F0);
  }
  return result;
}

unint64_t sub_1000A14D8()
{
  unint64_t result = qword_1000FE9F8;
  if (!qword_1000FE9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FE9F8);
  }
  return result;
}

unint64_t sub_1000A1530()
{
  unint64_t result = qword_1000FEA00;
  if (!qword_1000FEA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FEA00);
  }
  return result;
}

uint64_t PCInteractionDirection.description.getter(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 1701736302;
    case 1:
      return 1752397168;
    case 2:
      return 1819047280;
  }
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0xD000000000000011;
}

uint64_t sub_1000A1660()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000A16C0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000A1710()
{
  return PCInteractionDirection.description.getter(*v0);
}

unint64_t sub_1000A1718()
{
  unint64_t result = qword_1000FEA08;
  if (!qword_1000FEA08)
  {
    type metadata accessor for PCInteractionDirection(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FEA08);
  }
  return result;
}

void sub_1000A1774()
{
  id v0 = objc_allocWithZone((Class)CULogHandle);
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v0 initWithSubsystem:v1 category:v2];

  qword_1000FEA10 = (uint64_t)v3;
}

os_activity_t _makeActivity(named:dso:)(char *description, int a2, char a3, void *dso)
{
  if ((a3 & 1) == 0)
  {
    if (description)
    {
      if (dso)
      {
        if (qword_1000F66C8 == -1)
        {
LABEL_5:
          unsigned int v6 = qword_1000FEA18;
          return _os_activity_create(dso, description, v6, OS_ACTIVITY_FLAG_DEFAULT);
        }
LABEL_20:
        swift_once();
        goto LABEL_5;
      }
LABEL_30:
      os_activity_t result = (os_activity_t)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if ((unint64_t)description >> 32) {
    goto LABEL_19;
  }
  if (description >> 11 == 27) {
    goto LABEL_29;
  }
  if (description >> 16 > 0x10)
  {
    __break(1u);
  }
  else if ((description & 0xFFFFFF80) == 0)
  {
    if (description <= 0xFF)
    {
      unsigned int v8 = ((_BYTE)description + 1);
      goto LABEL_14;
    }
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int v9 = (description & 0x3F) << 8;
  unsigned int v10 = (v9 | (description >> 6)) + 33217;
  unsigned int v11 = (v9 | (description >> 6) & 0x3F) << 8;
  unsigned int v12 = (((v11 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
  unsigned int v13 = (v11 | (description >> 12)) + 8487393;
  if (description >> 16) {
    unsigned int v8 = v12;
  }
  else {
    unsigned int v8 = v13;
  }
  if (description < 0x800) {
    unsigned int v8 = v10;
  }
LABEL_14:
  *(void *)descriptionCATransform3D a = (v8 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v8) & 0x38)) & 0x38));
  if (!dso) {
    goto LABEL_30;
  }
  if (qword_1000F66C8 != -1) {
    swift_once();
  }
  return _os_activity_create(dso, descriptiona, (os_activity_t)qword_1000FEA18, OS_ACTIVITY_FLAG_DEFAULT);
}

uint64_t sub_1000A1A2C()
{
  if (v0[4].opaque[0])
  {
    v1._uint64_t countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    if (qword_1000F66C0 != -1) {
      swift_once();
    }
    NSString v2 = (void *)qword_1000FEA10;
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 ulog:40 message:v3];
    swift_bridgeObjectRelease();

    swift_beginAccess();
    os_activity_scope_leave(v0 + 3);
    swift_endAccess();
    v0[4].opaque[0] = 0;
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t sub_1000A1B64(uint64_t *a1, uint64_t *a2)
{
  return sub_1000A2304(*a1, *a2);
}

unint64_t sub_1000A1B70()
{
  Hasher.init(_seed:)();
  unint64_t result = *(void *)(v0 + 16);
  if ((*(unsigned char *)(v0 + 32) & 1) == 0)
  {
    if (result)
    {
LABEL_9:
      static String._fromUTF8Repairing(_:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      return Hasher._finalize()();
    }
    __break(1u);
    goto LABEL_11;
  }
  if (HIDWORD(result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (result >> 11 != 27)
  {
    if (WORD1(result) > 0x10u)
    {
LABEL_12:
      __break(1u);
      goto LABEL_9;
    }
    if ((result & 0xFFFFFF80) != 0 || result <= 0xFF) {
      goto LABEL_9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_1000A1CCC()
{
  return sub_1000A1B70();
}

unint64_t sub_1000A1CF0()
{
  unint64_t result = *(void *)(*(void *)v0 + 16);
  if (*(unsigned char *)(*(void *)v0 + 32))
  {
    if (!HIDWORD(result))
    {
      if (result >> 11 == 27)
      {
LABEL_14:
        __break(1u);
        return result;
      }
      if (WORD1(result) <= 0x10u)
      {
        sub_1000A2234();
        goto LABEL_8;
      }
LABEL_13:
      __break(1u);
      goto LABEL_14;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  static String._fromUTF8Repairing(_:)();
LABEL_8:
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

unint64_t sub_1000A1DA4()
{
  Hasher.init(_seed:)();
  unint64_t result = *(void *)(*(void *)v0 + 16);
  if ((*(unsigned char *)(*(void *)v0 + 32) & 1) == 0)
  {
    if (result)
    {
      static String._fromUTF8Repairing(_:)();
LABEL_8:
      String.hash(into:)();
      swift_bridgeObjectRelease();
      return Hasher._finalize()();
    }
    __break(1u);
    goto LABEL_10;
  }
  if (HIDWORD(result))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (result >> 11 != 27)
  {
    if (WORD1(result) <= 0x10u)
    {
      sub_1000A2234();
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1000A1E58(uint64_t a1, uint64_t a2)
{
  return _ss12StaticStringV13PCViewServiceE2eeoiySbAB_ABtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

uint64_t StaticString.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    if (a2)
    {
LABEL_9:
      static String._fromUTF8Repairing(_:)();
      String.hash(into:)();
      return swift_bridgeObjectRelease();
    }
    __break(1u);
    goto LABEL_11;
  }
  if (HIDWORD(a2))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a2 >> 11 != 27)
  {
    if (WORD1(a2) > 0x10u)
    {
LABEL_12:
      __break(1u);
      goto LABEL_9;
    }
    if ((a2 & 0xFFFFFF80) != 0 || a2 <= 0xFF) {
      goto LABEL_9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int StaticString.hashValue.getter(unint64_t a1, uint64_t a2, char a3)
{
  Swift::Int result = Hasher.init(_seed:)();
  if ((a3 & 1) == 0)
  {
    if (a1)
    {
LABEL_9:
      static String._fromUTF8Repairing(_:)();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      return Hasher._finalize()();
    }
    __break(1u);
    goto LABEL_11;
  }
  if (HIDWORD(a1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a1 >> 11 != 27)
  {
    if (WORD1(a1) > 0x10u)
    {
LABEL_12:
      __break(1u);
      goto LABEL_9;
    }
    if ((a1 & 0xFFFFFF80) != 0 || a1 <= 0xFF) {
      goto LABEL_9;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Int sub_1000A2128()
{
  return StaticString.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_1000A2134(uint64_t a1)
{
  return StaticString.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int sub_1000A2140()
{
  unint64_t v1 = *v0;
  char v2 = *((unsigned char *)v0 + 16);
  Swift::Int result = Hasher.init(_seed:)();
  if ((v2 & 1) == 0)
  {
    if (v1)
    {
      static String._fromUTF8Repairing(_:)();
LABEL_8:
      String.hash(into:)();
      swift_bridgeObjectRelease();
      return Hasher._finalize()();
    }
    __break(1u);
    goto LABEL_10;
  }
  if (HIDWORD(v1))
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v1 >> 11 != 27)
  {
    if (WORD1(v1) <= 0x10u)
    {
      sub_1000A2234();
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1000A21F8()
{
  qword_1000FEA18 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");

  return swift_unknownObjectRetain();
}

uint64_t sub_1000A2234()
{
  return static String._fromUTF8Repairing(_:)();
}

unint64_t sub_1000A2304(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 32);
  if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    if (result) {
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_23;
  }
  if (HIDWORD(result))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_9;
  }
  if (result >> 11 == 27)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (WORD1(result) > 0x10u) {
    goto LABEL_24;
  }
  if ((result & 0xFFFFFF80) == 0 && result > 0xFF) {
    goto LABEL_28;
  }
LABEL_9:
  unint64_t result = static String._fromUTF8Repairing(_:)();
  unint64_t v3 = result;
  uint64_t v2 = v8;
  if ((v7 & 1) == 0)
  {
    if (v6) {
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_27;
  }
  if (HIDWORD(v6))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v6 >> 11 == 27)
  {
LABEL_33:
    __break(1u);
    return result;
  }
  if (WORD1(v6) <= 0x10u)
  {
    if ((v6 & 0xFFFFFF80) != 0 || v6 <= 0xFF) {
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_32;
  }
LABEL_29:
  __break(1u);
LABEL_17:
  if (v3 == static String._fromUTF8Repairing(_:)() && v2 == v9) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

unint64_t _ss12StaticStringV13PCViewServiceE2eeoiySbAB_ABtFZ_0(unint64_t result, uint64_t a2, char a3, unint64_t a4, uint64_t a5, char a6)
{
  if ((a3 & 1) == 0)
  {
    if (result) {
      goto LABEL_9;
    }
    __break(1u);
  }
  if (HIDWORD(result))
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_9;
  }
  if (result >> 11 == 27)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (WORD1(result) > 0x10u) {
    goto LABEL_23;
  }
  if ((result & 0xFFFFFF80) == 0 && result > 0xFF) {
    goto LABEL_27;
  }
LABEL_9:
  unint64_t result = static String._fromUTF8Repairing(_:)();
  unint64_t v7 = result;
  uint64_t v6 = v10;
  if ((a6 & 1) == 0)
  {
    if (a4) {
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_26;
  }
  if (HIDWORD(a4))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a4 >> 11 == 27)
  {
LABEL_32:
    __break(1u);
    return result;
  }
  if (WORD1(a4) <= 0x10u)
  {
    if ((a4 & 0xFFFFFF80) != 0 || a4 <= 0xFF) {
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_31;
  }
LABEL_28:
  __break(1u);
LABEL_17:
  if (v7 == static String._fromUTF8Repairing(_:)() && v6 == v11) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

unint64_t sub_1000A2830()
{
  unint64_t result = qword_1000FEA20;
  if (!qword_1000FEA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FEA20);
  }
  return result;
}

uint64_t type metadata accessor for Transaction()
{
  return self;
}

unint64_t sub_1000A28AC()
{
  unint64_t result = qword_1000FEC10;
  if (!qword_1000FEC10)
  {
    type metadata accessor for Transaction();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FEC10);
  }
  return result;
}

uint64_t sub_1000A2900()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = qword_1000F8F70;
  if (*(void *)(v0 + qword_1000F8F70))
  {
    uint64_t v8 = *(void *)(v0 + qword_1000F8F70);
  }
  else
  {
    BOOL v9 = *(void *)(v0 + qword_1000F8F68) == 0;
    if (*(void *)(v0 + qword_1000F8F68)) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = 0x4008000000000000;
    }
    uint64_t v11 = 10;
    if (*(void *)(v0 + qword_1000F8F68)) {
      uint64_t v11 = 0;
    }
    uint64_t v19 = v11;
    uint64_t v20 = v10;
    if (v9) {
      char v12 = 2;
    }
    else {
      char v12 = 3;
    }
    unsigned int v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v13(v6, v0 + qword_100111A00, v2);
    type metadata accessor for XPCConnectionManager();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delegate + 8) = 0;
    swift_unknownObjectWeakInit();
    *(void *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx) = 0;
    *(void *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delayedRetryTask) = 0;
    *(void *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retries) = 0;
    v13((char *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_id), (uint64_t)v6, v2);
    uint64_t v14 = v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_retryPolicy;
    uint64_t v15 = v19;
    *(void *)uint64_t v14 = v20;
    *(void *)(v14 + 8) = v15;
    *(unsigned char *)(v14 + 16) = v12;
    *(void *)(v8 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_delegate + 8) = &off_1000E57D8;
    swift_unknownObjectWeakAssign();
    swift_retain();
    id v16 = sub_10006A850();
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 ulog:40 message:v17];

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    swift_release();
    *(void *)(v1 + v7) = v8;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v8;
}

void sub_1000A2B6C()
{
  sub_10002CBA8();
  id v0 = objc_allocWithZone((Class)CULogHandle);
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 initWithSubsystem:v1 category:v2];

  NSString v4 = String._bridgeToObjectiveC()();
  [v3 ulog:40 message:v4];

  uint64_t v5 = sub_1000A2900();
  uint64_t v6 = OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx;
  uint64_t v7 = *(void **)(v5 + OBJC_IVAR____TtC13PCViewService20XPCConnectionManager_internalCnx);
  if (v7)
  {
    id v8 = v7;
    id v9 = sub_10006A850();
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 ulog:40 message:v10];

    [v8 invalidate];
    id v11 = *(id *)(v5 + v6);
    *(void *)(v5 + v6) = 0;
    swift_release();
  }
  else
  {
    swift_release();
  }
}

id sub_1000A2D28@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 forceKillPCViewService];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000A2D5C(unsigned __int8 *a1, id *a2)
{
  return [*a2 setForceKillPCViewService:*a1];
}

uint64_t *sub_1000A2D70()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridge;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridge))
  {
    NSString v2 = *(uint64_t **)(v0
                     + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridge);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = sub_1000A2E20();
    uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_daemonBridgeState);
    type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClient();
    swift_allocObject();
    swift_retain();
    NSString v2 = sub_1000630F8(v4, v5);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1000A2E20()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridgeModel;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridgeModel))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridgeModel);
  }
  else
  {
    uint64_t v3 = v0;
    sub_100008614(&qword_1000FEE18);
    sub_100012908(&qword_1000FEE20, &qword_1000FEE18);
    uint64_t v4 = Publisher.eraseToAnyPublisher()();
    type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClientModel();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v4;
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t *sub_1000A2F04()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenter;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenter))
  {
    uint64_t v2 = *(uint64_t **)(v0
                     + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenter);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = sub_1000A2FB4();
    uint64_t v5 = *(void *)(v3
                   + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_nearbySharingInteractionViewPresenterState);
    type metadata accessor for NearbySharingInteractionViewPresenter();
    swift_allocObject();
    swift_retain();
    uint64_t v2 = sub_1000644BC((uint64_t)v4, v5);
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

void *sub_1000A2FB4()
{
  uint64_t v1 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenterModel;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenterModel))
  {
    uint64_t v2 = *(void **)(v0
                    + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenterModel);
  }
  else
  {
    uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_rootViewController);
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_host);
    uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_daemonBridgeState);
    swift_beginAccess();
    uint64_t v6 = *(void *)(v5 + 16);
    type metadata accessor for NearbySharingInteractionViewPresenterModel();
    uint64_t v2 = (void *)swift_allocObject();
    v2[2] = v3;
    v2[3] = v4;
    _OWORD v2[4] = v6;
    *(void *)(v0 + v1) = v2;
    id v7 = v3;
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t *sub_1000A309C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v75 = a4;
  uint64_t v76 = a5;
  uint64_t v74 = (void *)a3;
  uint64_t v9 = *v5;
  uint64_t v10 = sub_100008614(&qword_1000FCF18);
  uint64_t v63 = *(void *)(v10 - 8);
  uint64_t v64 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v61 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100008614(&qword_1000FCF20);
  uint64_t v65 = *(void *)(v13 - 8);
  uint64_t v66 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v62 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100008614(&qword_1000FEE28);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v71 = v16;
  uint64_t v72 = v17;
  __chkstk_darwin(v16, v18);
  uint64_t v70 = (char *)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for NearbySharingInteractionDisplayContext();
  uint64_t v22 = __chkstk_darwin(v20 - 8, v21);
  uint64_t v68 = (uint64_t)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v27 = (char *)&v61 - v26;
  __chkstk_darwin(v25, v28);
  uint64_t v67 = (uint64_t)&v61 - v29;
  v5[2] = (uint64_t)&_swiftEmptySetSingleton;
  UUID.init()();
  uint64_t v30 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment__isActive;
  sub_100008614(&qword_1000FCE50);
  swift_allocObject();
  *(uint64_t *)((char *)v5 + v30) = (uint64_t)sub_10001BDB4(1, 0, 0, 0);
  uint64_t v31 = (uint64_t *)((char *)v5
                  + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_finishedHandler);
  *uint64_t v31 = 0;
  v31[1] = 0;
  *(uint64_t *)((char *)v5
             + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridge) = 0;
  *(uint64_t *)((char *)v5
             + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___daemonBridgeModel) = 0;
  *(uint64_t *)((char *)v5
             + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenter) = 0;
  *(uint64_t *)((char *)v5
             + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment____lazy_storage___nearbySharingInteractionViewPresenterModel) = 0;
  uint64_t v32 = OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_nearbySharingInteractionViewPresenterState;
  type metadata accessor for NearbySharingInteractionViewPresenterState();
  uint64_t v33 = swift_allocObject();
  uint64_t v69 = sub_100008614(&qword_1000FEE18);
  swift_allocObject();
  *(void *)(v33 + 16) = PassthroughSubject.init()();
  *(uint64_t *)((char *)v5 + v32) = v33;
  uint64_t v77 = 0;
  uint64_t v78 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  v34._uint64_t countAndFlagsBits = 0x6F63203A74696E49;
  v34._object = (void *)0xEE003D747865746ELL;
  String.append(_:)(v34);
  type metadata accessor for NearbySharingInteractionViewServiceContext();
  _print_unlocked<A, B>(_:_:)();
  sub_10004DA44(v77, v78, 0, v9, (uint64_t)&off_1000E9450);
  swift_bridgeObjectRelease();
  sub_1000A4748(a1, (uint64_t)v5 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_context, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionViewServiceContext);
  uint64_t v35 = a2;
  *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_host) = a2;
  uint64_t v36 = v74;
  uint64_t v37 = v75;
  *(uint64_t *)((char *)v5 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_rootViewController) = (uint64_t)v74;
  uint64_t v38 = *v31;
  uint64_t v39 = v76;
  *uint64_t v31 = v37;
  v31[1] = v39;
  uint64_t v73 = v35;
  swift_unknownObjectRetain();
  uint64_t v40 = v36;
  sub_10000F7F8(v37);
  sub_10000F808(v38);
  uint64_t v74 = (void *)a1;
  uint64_t v41 = a1;
  char v42 = v40;
  uint64_t v43 = v67;
  sub_1000A4748(v41, v67, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
  type metadata accessor for NearbySharingInteractionAlertDaemonBridgeClientState();
  uint64_t v44 = swift_allocObject();
  sub_100008614(&qword_1000FCB70);
  swift_allocObject();
  *(void *)(v44 + 24) = PassthroughSubject.init()();
  sub_1000A4748(v43, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
  swift_beginAccess();
  uint64_t v45 = v68;
  sub_1000A4748((uint64_t)v27, v68, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
  sub_100008614(&qword_1000FC7B8);
  swift_allocObject();
  uint64_t v46 = sub_10001E124(v45, 0, 0, 0, 0, 0);
  sub_1000A47B0((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
  *(void *)(v44 + 16) = v46;
  swift_endAccess();
  sub_1000A47B0(v43, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionDisplayContext);
  *(uint64_t *)((char *)v6 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_daemonBridgeState) = v44;
  uint64_t v77 = *(void *)(v44 + 24);
  swift_allocObject();
  swift_weakInit();
  sub_100012908(&qword_1000FCF28, &qword_1000FCB70);
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v77 = *(void *)&v42[OBJC_IVAR___MainViewController_homeGestureEventSubject];
  uint64_t v47 = swift_allocObject();
  swift_weakInit();
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = sub_1000A4850;
  *(void *)(v48 + 24) = v47;
  swift_retain();
  sub_100008614(&qword_1000F7050);
  sub_100012908(&qword_1000FCEB8, &qword_1000F7050);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  uint64_t v77 = *(void *)(*(uint64_t *)((char *)v6
                               + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_nearbySharingInteractionViewPresenterState)
                  + 16);
  sub_100012908(&qword_1000FEE20, &qword_1000FEE18);
  swift_retain();
  uint64_t v49 = v70;
  Publisher.filter(_:)();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_100012908(&qword_1000FEE30, &qword_1000FEE28);
  uint64_t v50 = v71;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v49, v50);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  sub_1000A2D70();
  sub_100063290();
  swift_release();
  sub_1000A2F04();
  sub_10006460C();
  swift_release();
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  uint64_t v51 = *(void **)(qword_100111A10 + 872);
  uint64_t v52 = *(void **)((char *)v51 + *(void *)((swift_isaMask & *v51) + 0x70));
  if (v52)
  {
    uint64_t v53 = v51;
    id v54 = v52;
    NSString v55 = String._bridgeToObjectiveC()();
    [v54 setBool:0 forKey:v55];
  }
  if (qword_1000F66D0 != -1) {
    swift_once();
  }
  if (qword_100111B00)
  {
    swift_getKeyPath();
    uint64_t v56 = v61;
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
    swift_release();
    sub_100012908(&qword_1000FCF30, &qword_1000FCF18);
    uint64_t v57 = v62;
    uint64_t v58 = v64;
    Publisher.filter(_:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v56, v58);
    sub_100012908(qword_1000FCF38, &qword_1000FCF20);
    uint64_t v59 = v66;
    Publisher<>.sink(receiveValue:)();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v57, v59);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
  }
  sub_10000F808(v75);
  swift_unknownObjectRelease();

  sub_1000A47B0((uint64_t)v74, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionViewServiceContext);
  return v6;
}

uint64_t sub_1000A3BF4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000A43AC(v1, v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000A3C64()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000A43AC(0x74756220656D6F48, 0xEB000000006E6F74);
    return swift_release();
  }
  return result;
}

BOOL sub_1000A3CD8(uint64_t *a1)
{
  if (*((unsigned __int8 *)a1 + 56) < 2u) {
    return 0;
  }
  uint64_t v1 = a1[4];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[5] | a1[6];
  uint64_t v4 = a1[3] | a1[2] | a1[1];
  if (!(v3 | *a1 | v1 | v4)) {
    return 0;
  }
  uint64_t v5 = v3 | v1 | v4;
  if (v2 == 1 && v5 == 0) {
    return 0;
  }
  return v2 != 2 || v5 != 0;
}

uint64_t sub_1000A3D3C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000A43AC(0x74206C65636E6143, 0xED00006465707061);
    return swift_release();
  }
  return result;
}

void sub_1000A3DB4()
{
  if (qword_1000F6680 != -1) {
    swift_once();
  }
  uint64_t v0 = *(void **)(qword_100111A10 + 872);
  uint64_t v1 = *(void **)((char *)v0 + *(void *)((swift_isaMask & *v0) + 0x70));
  if (v1)
  {
    uint64_t v2 = v0;
    id v3 = v1;
    NSString v4 = String._bridgeToObjectiveC()();
    [v3 setBool:0 forKey:v4];
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1000A3EF8()
{
  id v1 = sub_10006EE70();
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 ulog:40 message:v2];

  sub_1000A423C();
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_id;
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  sub_1000A47B0(v0 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_context, (uint64_t (*)(void))type metadata accessor for NearbySharingInteractionViewServiceContext);
  swift_unknownObjectRelease();

  sub_10000F808(*(void *)(v0
                          + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_finishedHandler));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000A4078()
{
  sub_1000A3EF8();

  return swift_deallocClassInstance();
}

uint64_t sub_1000A40D0()
{
  return type metadata accessor for NearbySharingInteractionAlertEnvironment();
}

uint64_t type metadata accessor for NearbySharingInteractionAlertEnvironment()
{
  uint64_t result = qword_1000FEC70;
  if (!qword_1000FEC70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A4124()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for NearbySharingInteractionDisplayContext();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_1000A423C()
{
  id v0 = sub_10006EE70();
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 ulog:40 message:v1];

  sub_1000A2D70();
  id v2 = sub_10006EE30();
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 ulog:40 message:v3];

  sub_1000A2B6C();
  swift_release();
  uint64_t v4 = sub_1000A2F04();
  id v5 = sub_10006EE50();
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 ulog:40 message:v6];

  swift_beginAccess();
  v4[5] = (uint64_t)&_swiftEmptySetSingleton;
  swift_release();
  return swift_bridgeObjectRelease();
}

id sub_1000A43AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  String.append(_:)(*(Swift::String *)&a1);
  id v4 = sub_10006EE70();
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v4 ulog:40 message:v5 0xD00000000000001ALL 0x80000001000C2900];
  swift_bridgeObjectRelease();

  NSString v6 = *(void (**)(uint64_t))(v3
                                      + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_finishedHandler);
  if (v6)
  {
    uint64_t v7 = swift_retain();
    v6(v7);
    return (id)sub_10000F808((uint64_t)v6);
  }
  else
  {
    id v9 = sub_10006EE70();
    NSString v10 = String._bridgeToObjectiveC()();
    [v9 ulog:60 message:v10];

    uint64_t v11 = *(void **)(v3 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_host);
    return [v11 invalidate];
  }
}

uint64_t sub_1000A4520()
{
  return sub_1000A4544();
}

uint64_t sub_1000A4544()
{
  v0._uint64_t countAndFlagsBits = sub_10004DE1C();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x3D64690A3D3D20;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  type metadata accessor for UUID();
  sub_100082160(&qword_1000FCE40);
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 2112829;
}

uint64_t sub_1000A4648@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC13PCViewService40NearbySharingInteractionAlertEnvironment_id;
  uint64_t v4 = type metadata accessor for UUID();
  NSString v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1000A46C0(char a1)
{
  swift_retain();
  sub_10006AA58(a1);

  return swift_release();
}

uint64_t sub_1000A4714()
{
  return sub_100082160((unint64_t *)&qword_1000F8F18);
}

uint64_t sub_1000A4748(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A47B0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A4810()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A4848(uint64_t *a1)
{
  return sub_1000A3BF4(a1);
}

uint64_t sub_1000A4850()
{
  return sub_1000A3C64();
}

uint64_t sub_1000A4858()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A4890()
{
  return sub_1000A3D3C();
}

id sub_1000A4898@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = [*a1 forceKillPCViewService];
  *a2 = (_BYTE)result;
  return result;
}

id sub_1000A48CC(unsigned __int8 *a1, id *a2)
{
  return [*a2 setForceKillPCViewService:*a1];
}

ValueMetadata *type metadata accessor for PrimaryButtonStyle()
{
  return &type metadata for PrimaryButtonStyle;
}

uint64_t sub_1000A48F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1000A490C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v84 = a2;
  uint64_t v87 = a3;
  uint64_t v88 = a1;
  uint64_t v86 = type metadata accessor for RoundedRectangle() - 8;
  __chkstk_darwin(v86, v3);
  uint64_t v85 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100008614(&qword_1000F8CB8);
  __chkstk_darwin(v5 - 8, v6);
  id v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ButtonStyleConfiguration.Label();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_100008614(&qword_1000FEE38);
  __chkstk_darwin(v75, v14);
  uint64_t v16 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_100008614(&qword_1000FEE40);
  uint64_t v76 = *(void *)(v79 - 8);
  __chkstk_darwin(v79, v17);
  uint64_t v74 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100008614(&qword_1000FEE48);
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_100008614(&qword_1000F8A00) - 8;
  __chkstk_darwin(v77, v24);
  uint64_t v26 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100008614(&qword_1000F8A08);
  __chkstk_darwin(v27 - 8, v28);
  uint64_t v78 = (uint64_t)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = sub_100008614(&qword_1000FEE50) - 8;
  __chkstk_darwin(v81, v30);
  uint64_t v80 = (uint64_t)&v73 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_100008614(&qword_1000FEE58) - 8;
  __chkstk_darwin(v83, v32);
  uint64_t v82 = (char *)&v73 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  ButtonStyleConfiguration.label.getter();
  uint64_t v34 = type metadata accessor for Font.Design();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v8, 1, 1, v34);
  uint64_t v35 = static Font.system(size:weight:design:)();
  sub_10000EC04((uint64_t)v8, &qword_1000F8CB8);
  uint64_t KeyPath = swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v16, v13, v9);
  uint64_t v37 = (uint64_t *)&v16[*(int *)(v75 + 36)];
  *uint64_t v37 = KeyPath;
  v37[1] = v35;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  static Font.Weight.medium.getter();
  sub_1000A52E8();
  uint64_t v38 = v74;
  View.fontWeight(_:)();
  sub_10000EC04((uint64_t)v16, &qword_1000FEE38);
  LOBYTE(v16) = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43;
  uint64_t v46 = v45;
  uint64_t v47 = v76;
  uint64_t v48 = v79;
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v23, v38, v79);
  uint64_t v49 = &v23[*(int *)(v20 + 44)];
  *uint64_t v49 = (char)v16;
  *((void *)v49 + 1) = v40;
  *((void *)v49 + 2) = v42;
  *((void *)v49 + 3) = v44;
  *((void *)v49 + 4) = v46;
  v49[40] = 0;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v38, v48);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  sub_1000210BC((uint64_t)v23, (uint64_t)v26, &qword_1000FEE48);
  uint64_t v50 = &v26[*(int *)(v77 + 44)];
  long long v51 = v91;
  *(_OWORD *)uint64_t v50 = v90;
  *((_OWORD *)v50 + 1) = v51;
  *((_OWORD *)v50 + 2) = v92;
  sub_10000EC04((uint64_t)v23, &qword_1000FEE48);
  uint64_t v52 = static Alignment.center.getter();
  uint64_t v53 = v78;
  sub_10002F804(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v78, 0.0, 1, 0.0, 1, v52, v54);
  sub_10000EC04((uint64_t)v26, &qword_1000F8A00);
  sub_1000A50C0(v84, &v89);
  uint64_t v55 = v89;
  LOBYTE(v16) = static Edge.Set.all.getter();
  uint64_t v56 = v80;
  sub_1000210BC(v53, v80, &qword_1000F8A08);
  uint64_t v57 = v56 + *(int *)(v81 + 44);
  *(void *)uint64_t v57 = v55;
  *(unsigned char *)(v57 + 8) = (_BYTE)v16;
  sub_10000EC04(v53, &qword_1000F8A08);
  uint64_t v58 = v85;
  uint64_t v59 = &v85[*(int *)(v86 + 28)];
  uint64_t v60 = enum case for RoundedCornerStyle.continuous(_:);
  uint64_t v61 = type metadata accessor for RoundedCornerStyle();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v61 - 8) + 104))(v59, v60, v61);
  __asm { FMOV            V0.2D, #12.0 }
  *uint64_t v58 = _Q0;
  uint64_t v67 = (uint64_t)v82;
  uint64_t v68 = (uint64_t)&v82[*(int *)(v83 + 44)];
  sub_1000A53E0((uint64_t)v58, v68);
  *(_WORD *)(v68 + *(int *)(sub_100008614(&qword_1000FBED8) + 36)) = 256;
  sub_1000210BC(v56, v67, &qword_1000FEE50);
  sub_1000A5444((uint64_t)v58);
  sub_10000EC04(v56, &qword_1000FEE50);
  uint64_t v69 = static Animation.easeOut(duration:)();
  LOBYTE(v60) = ButtonStyleConfiguration.isPressed.getter();
  uint64_t v70 = v87;
  sub_1000210BC(v67, v87, &qword_1000FEE58);
  uint64_t v71 = v70 + *(int *)(sub_100008614(&qword_1000FEE70) + 36);
  *(void *)uint64_t v71 = v69;
  *(unsigned char *)(v71 + 8) = v60 & 1;
  return sub_10000EC04(v67, &qword_1000FEE58);
}

uint64_t sub_1000A50C0@<X0>(char a1@<W1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Material();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100008614(&qword_1000FEE78);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    static Material.thin.getter();
    char v13 = ButtonStyleConfiguration.isPressed.getter();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v12, v8, v4);
    float v14 = 0.7;
    if ((v13 & 1) == 0) {
      float v14 = 1.0;
    }
    *(float *)&v12[*(int *)(v9 + 36)] = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_100012908(&qword_1000FEE80, &qword_1000FEE78);
  }
  else
  {
    char v15 = ButtonStyleConfiguration.isPressed.getter();
    uint64_t v16 = self;
    uint64_t v17 = &selRef_systemGray5Color;
    if ((v15 & 1) == 0) {
      uint64_t v17 = &selRef_systemGray6Color;
    }
    id v18 = [v16 *v17];
    v20[1] = Color.init(_:)();
  }
  uint64_t result = AnyShapeStyle.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t sub_1000A52D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000A490C(a1, *(unsigned __int8 *)(v2 + 8), a2);
}

unint64_t sub_1000A52E8()
{
  unint64_t result = qword_1000FEE60;
  if (!qword_1000FEE60)
  {
    sub_100009F40(&qword_1000FEE38);
    sub_1000A5388();
    sub_100012908(&qword_1000F9198, &qword_1000F91A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FEE60);
  }
  return result;
}

unint64_t sub_1000A5388()
{
  unint64_t result = qword_1000FEE68;
  if (!qword_1000FEE68)
  {
    type metadata accessor for ButtonStyleConfiguration.Label();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FEE68);
  }
  return result;
}

uint64_t sub_1000A53E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A5444(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RoundedRectangle();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000A54A4()
{
  unint64_t result = qword_1000FEE88;
  if (!qword_1000FEE88)
  {
    sub_100009F40(&qword_1000FEE70);
    sub_1000A5544();
    sub_100012908(&qword_1000F89C8, &qword_1000F89D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FEE88);
  }
  return result;
}

unint64_t sub_1000A5544()
{
  unint64_t result = qword_1000FEE90;
  if (!qword_1000FEE90)
  {
    sub_100009F40(&qword_1000FEE58);
    sub_1000A55E4();
    sub_100012908(&qword_1000FEEC8, &qword_1000FBED8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FEE90);
  }
  return result;
}

unint64_t sub_1000A55E4()
{
  unint64_t result = qword_1000FEE98;
  if (!qword_1000FEE98)
  {
    sub_100009F40(&qword_1000FEE50);
    sub_1000A56E0(&qword_1000FEEA0, &qword_1000F8A08, (void (*)(void))sub_1000A56B0);
    sub_100012908(&qword_1000FEEB8, &qword_1000FEEC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FEE98);
  }
  return result;
}

uint64_t sub_1000A56B0()
{
  return sub_1000A56E0(&qword_1000FEEA8, &qword_1000F8A00, (void (*)(void))sub_1000A575C);
}

uint64_t sub_1000A56E0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100009F40(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000A575C()
{
  unint64_t result = qword_1000FEEB0;
  if (!qword_1000FEEB0)
  {
    sub_100009F40(&qword_1000FEE48);
    sub_100009F40(&qword_1000FEE38);
    sub_1000A52E8();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FEEB0);
  }
  return result;
}

uint64_t sub_1000A580C()
{
  uint64_t v1 = *(void *)(v0 + 80);

  sub_10000F808(v1);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Spring()
{
  return self;
}

uint64_t sub_1000A5888(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a5;
  uint64_t v32 = a8;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v30 = *(void *)(a5 - 8);
  __chkstk_darwin(a1, a2);
  uint64_t v43 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void (***)(char *, uint64_t))(AssociatedTypeWitness - 8);
  uint64_t v11 = __chkstk_darwin(AssociatedTypeWitness, v10);
  char v13 = (char *)&v29 - v12;
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(v17 - 8);
  uint64_t v34 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v29 - v19;
  uint64_t v21 = dispatch thunk of Collection.count.getter();
  if (!v21) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v22 = v21;
  uint64_t v46 = ContiguousArray.init()();
  uint64_t v35 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v22);
  uint64_t v39 = v8;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v37 = (void (**)(char *))(v36 + 2);
    uint64_t v38 = v16;
    ++v36;
    while (1)
    {
      uint64_t v24 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      uint64_t v25 = v13;
      uint64_t v26 = v13;
      uint64_t v27 = AssociatedTypeWitness;
      (*v37)(v25);
      v24(v45, 0);
      uint64_t v28 = v44;
      v41(v26, v43);
      if (v28) {
        break;
      }
      uint64_t v44 = 0;
      (*v36)(v26, v27);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      --v22;
      char v13 = v26;
      if (!v22)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
        return v46;
      }
    }
    (*v36)(v26, v27);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v34);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v32, v43, v31);
  }
  return result;
}

uint64_t sub_1000A5C88()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of Identifiable.id.getter();
  uint64_t v5 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5;
}

uint64_t sub_1000A5D78()
{
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v0 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

_UNKNOWN **static Bool.allCases.getter()
{
  return &off_1000E32A0;
}

void sub_1000A5E14(void *a1@<X8>)
{
  *a1 = &off_1000E2DD0;
}

uint64_t sub_1000A5E24()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t static Optional<A>.allCases.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v6);
  uint64_t v8 = &v15[-v7];
  uint64_t v9 = type metadata accessor for Optional();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(v10, 1, 1, a1);
  type metadata accessor for Array();
  dispatch thunk of static CaseIterable.allCases.getter();
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000A5888((void (*)(char *, char *))sub_1000A6110, (uint64_t)v15, AssociatedTypeWitness, v9, (uint64_t)&type metadata for Never, AssociatedConformanceWitness, (uint64_t)&protocol witness table for Never, v12);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
  uint64_t v13 = static Array.+ infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

void sub_1000A60A0()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithSuiteName:v1];

  qword_100111B00 = (uint64_t)v2;
}

uint64_t sub_1000A6110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

unint64_t sub_1000A61C8()
{
  unint64_t result = qword_1000FF290;
  if (!qword_1000FF290)
  {
    sub_100009F40(qword_1000FF298);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FF290);
  }
  return result;
}

uint64_t sub_1000A6224(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1000A6280(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t _s11UnwrapErrorVMa()
{
  return sub_10000ED34();
}

uint64_t sub_1000A62E8()
{
  return swift_getWitnessTable();
}

_UNKNOWN **static PCActivityAssetType.allCases.getter()
{
  return &off_1000E2EC0;
}

uint64_t PCActivityAssetType.description.getter(uint64_t a1)
{
  NSString v1 = sub_1000A635C(a1);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

__CFString *sub_1000A635C(uint64_t a1)
{
  switch(a1)
  {
    case 1:
      NSString v1 = @"miniDark";
      goto LABEL_11;
    case 2:
      NSString v1 = @"miniLight";
      goto LABEL_11;
    case 3:
      NSString v1 = @"FPO_B";
      goto LABEL_11;
    case 4:
      NSString v1 = @"FPO_Y";
      goto LABEL_11;
    case 5:
      NSString v1 = @"FPO_O";
      goto LABEL_11;
    case 6:
      NSString v1 = @"miniBasalt";
      goto LABEL_11;
    case 7:
      NSString v1 = @"b620Dark";
      goto LABEL_11;
    case 8:
      NSString v1 = @"b620Light";
LABEL_11:
      uint64_t v2 = v1;
      break;
    default:
      NSString v1 = +[NSString stringWithFormat:@"? (%ld)", a1];
      break;
  }

  return v1;
}

unint64_t sub_1000A646C()
{
  unint64_t result = qword_1000FF320;
  if (!qword_1000FF320)
  {
    sub_100009F40(&qword_1000FF328);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FF320);
  }
  return result;
}

void sub_1000A64C8(void *a1@<X8>)
{
  *a1 = &off_1000E2EC0;
}

uint64_t sub_1000A64D8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000A6538()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000A6588()
{
  NSString v1 = sub_1000A635C(*v0);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

unint64_t sub_1000A65D8()
{
  unint64_t result = qword_1000FF330;
  if (!qword_1000FF330)
  {
    type metadata accessor for PCActivityAssetType(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FF330);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for HomeAccessoryView(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for HomeAccessoryView(id *a1)
{
  return swift_release();
}

uint64_t assignWithCopy for HomeAccessoryView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

id *assignWithTake for HomeAccessoryView(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for HomeAccessoryView()
{
  return &type metadata for HomeAccessoryView;
}

void sub_1000A6754()
{
  v0._object = (void *)0x80000001000BD0A0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = 0x7865746E6F63203ALL;
  v1._object = (void *)0xEA00000000003D74;
  String.append(_:)(v1);
  sub_100008614(&qword_1000FF340);
  _print_unlocked<A, B>(_:_:)();
  id v2 = sub_10006E8AC();
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v2 ulog:40 message:v3];
  swift_bridgeObjectRelease();

  sub_100008614(&qword_1000FF348);
  State.wrappedValue.getter();
  id v4 = [v5 view];

  if (!v4) {
    __break(1u);
  }
}

void sub_1000A68A8()
{
}

uint64_t sub_1000A68B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000A69A4();

  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000A6918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000A69A4();

  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000A697C()
{
}

unint64_t sub_1000A69A4()
{
  unint64_t result = qword_1000FF338;
  if (!qword_1000FF338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000FF338);
  }
  return result;
}

void sub_1000A69F8(void *a1)
{
  _StringGuts.grow(_:)(24);
  v2._object = (void *)0x80000001000BD080;
  v2._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = 0x776569566975203ALL;
  v3._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v3);
  id v4 = [a1 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x747865746E6F6320;
  v9._object = (void *)0xE90000000000003DLL;
  String.append(_:)(v9);
  sub_100008614(&qword_1000FF340);
  _print_unlocked<A, B>(_:_:)();
  id v10 = sub_10006E8AC();
  swift_bridgeObjectRetain();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v10 ulog:40 message:v11];
  swift_bridgeObjectRelease();
}

uint64_t sub_1000A6B70()
{
  if (*v0) {
    return 0x726568746FLL;
  }
  else {
    return 0x6553776569566370;
  }
}

uint64_t sub_1000A6BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A8588(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A6BDC(uint64_t a1)
{
  unint64_t v2 = sub_1000A702C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A6C18(uint64_t a1)
{
  unint64_t v2 = sub_1000A702C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A6C54(uint64_t a1)
{
  unint64_t v2 = sub_1000A7080();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A6C90(uint64_t a1)
{
  unint64_t v2 = sub_1000A7080();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000A6CCC(uint64_t a1)
{
  unint64_t v2 = sub_1000A70D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A6D08(uint64_t a1)
{
  unint64_t v2 = sub_1000A70D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PCProximityHandoffClient.Identifier.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a3;
  uint64_t v21 = a2;
  uint64_t v4 = sub_100008614(&qword_1000FF350);
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100008614(&qword_1000FF358);
  uint64_t v19 = *(void *)(v8 - 8);
  uint64_t v20 = v8;
  __chkstk_darwin(v8, v9);
  NSString v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100008614(&qword_1000FF360);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_1000A702C();
  uint64_t v17 = v23;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v17)
  {
    char v25 = 1;
    sub_1000A7080();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v4);
  }
  else
  {
    char v24 = 0;
    sub_1000A70D4();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

unint64_t sub_1000A702C()
{
  unint64_t result = qword_100110B40;
  if (!qword_100110B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110B40);
  }
  return result;
}

unint64_t sub_1000A7080()
{
  unint64_t result = qword_100110B48;
  if (!qword_100110B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110B48);
  }
  return result;
}

unint64_t sub_1000A70D4()
{
  unint64_t result = qword_100110B50;
  if (!qword_100110B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100110B50);
  }
  return result;
}

uint64_t PCProximityHandoffClient.Identifier.init(from:)(void *a1)
{
  return sub_1000A8698(a1);
}

uint64_t sub_1000A7140@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000A8698(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1000A716C(void *a1)
{
  return PCProximityHandoffClient.Identifier.encode(to:)(a1, *v1, v1[1]);
}

uint64_t PCProximityHandoffClient.clientIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t variable initialization expression of PCProximityHandoffClient.queue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8, v8);
  sub_100024504();
  static DispatchQoS.default.getter();
  v10[1] = _swiftEmptyArrayStorage;
  sub_1000A8BCC(&qword_1000FF368, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100008614(&qword_1000FF370);
  sub_1000A8B2C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

id PCProximityHandoffClient.__allocating_init(identifier:)(uint64_t a1, uint64_t a2)
{
  return PCProximityHandoffClient.init(identifier:)(a1, a2);
}

id PCProximityHandoffClient.init(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9, v10);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8, v12);
  swift_defaultActor_initialize();
  sub_100024504();
  swift_retain();
  static DispatchQoS.default.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_1000A8BCC(&qword_1000FF368, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100008614(&qword_1000FF370);
  sub_1000A8B2C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  uint64_t v13 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v3[15] = v19;
  v3[16] = v20;
  v3[17] = v13;
  type metadata accessor for SFXPCConnection();
  SFProximityHandoffMachServiceName.getter();
  id v14 = v13;
  v3[14] = SFXPCConnection.__allocating_init(machServiceName:queue:)();
  swift_release();
  uint64_t v15 = (objc_class *)type metadata accessor for PCProximityHandoffClient();
  v21.receiver = v3;
  v21.super_class = v15;
  id v16 = [super init];
  swift_retain();
  SFXPCConnection.activate()();
  swift_release();

  return v16;
}

uint64_t PCProximityHandoffClient.deinit()
{
  SFXPCConnection.invalidate()();
  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t PCProximityHandoffClient.__deallocating_deinit()
{
  SFXPCConnection.invalidate()();
  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t PCProximityHandoffClient.userAlertAction(params:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for VoidResponse();
  _OWORD v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  void v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000A7864, v1, 0);
}

uint64_t sub_1000A7864()
{
  uint64_t v1 = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction(0);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  uint64_t v3 = sub_1000A8BCC(&qword_1000FF388, (void (*)(uint64_t))type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction);
  *uint64_t v2 = v0;
  v2[1] = sub_1000A795C;
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[2];
  return SFXPCConnection.asyncInvoke<A>(_:parameters:)(v4, v1, v5, v1, v3);
}

uint64_t sub_1000A795C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[3];
    uint64_t v4 = sub_1000A7AF4;
  }
  else
  {
    uint64_t v5 = v2[3];
    (*(void (**)(void, void))(v2[5] + 8))(v2[6], v2[4]);
    uint64_t v4 = sub_1000A7A90;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000A7A90()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000A7AF4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void PCProximityHandoffClient.__allocating_init()()
{
}

void PCProximityHandoffClient.init()()
{
}

uint64_t PCProximityHandoffClient.unownedExecutor.getter()
{
  return v0;
}

uint64_t sub_1000A7C14()
{
  return 1;
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.actionIndex.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0)
                            + 20));
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.textResponse.getter()
{
  uint64_t v1 = *(void *)(v0
                 + *(int *)(type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0)
                          + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.init(id:actionIndex:textResponse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t result = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
  *(void *)(a5 + *(int *)(result + 20)) = a2;
  uint64_t v12 = (void *)(a5 + *(int *)(result + 24));
  *uint64_t v12 = a3;
  v12[1] = a4;
  return result;
}

uint64_t sub_1000A7D80()
{
  uint64_t v1 = 0x6E496E6F69746361;
  if (*v0 != 1) {
    uint64_t v1 = 0x7073655274786574;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t sub_1000A7DE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A9CD0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000A7E08(uint64_t a1)
{
  unint64_t v2 = sub_1000A8C34();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000A7E44(uint64_t a1)
{
  unint64_t v2 = sub_1000A8C34();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100008614(&qword_1000FF390);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000AEFC(a1, a1[3]);
  sub_1000A8C34();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  type metadata accessor for UUID();
  sub_1000A8BCC(&qword_1000F8288, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[13] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v29 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100008614(&qword_1000FF398);
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PCProximityHandoffServiceInvocations.UserAlertAction.Parameters(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000AEFC(a1, a1[3]);
  sub_1000A8C34();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10000AF94((uint64_t)a1);
  }
  char v24 = v13;
  uint64_t v15 = v26;
  uint64_t v14 = v27;
  char v32 = 0;
  sub_1000A8BCC(&qword_1000F82A8, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v16 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v24, v29, v4);
  char v31 = 1;
  *(void *)&v24[*(int *)(v10 + 20)] = KeyedDecodingContainer.decode(_:forKey:)();
  char v30 = 2;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v16);
  uint64_t v21 = (uint64_t)v24;
  uint64_t v20 = v25;
  uint64_t v22 = (uint64_t *)&v24[*(int *)(v10 + 24)];
  *uint64_t v22 = v17;
  v22[1] = v19;
  sub_1000A8C88(v21, v20);
  sub_10000AF94((uint64_t)a1);
  return sub_1000A8CEC(v21);
}

uint64_t sub_1000A83CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.init(from:)(a1, a2);
}

uint64_t sub_1000A83E4(void *a1)
{
  return PCProximityHandoffServiceInvocations.UserAlertAction.Parameters.encode(to:)(a1);
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.__allocating_init(name:)()
{
  id v1 = objc_allocWithZone(v0);
  return SFXPCInvocation.init(name:)();
}

id PCProximityHandoffServiceInvocations.UserAlertAction.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id PCProximityHandoffServiceInvocations.UserAlertAction.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super init];
}

id sub_1000A84B0(void *a1)
{
  v2.receiver = a1;
  v2.super_class = (Class)swift_getObjectType();
  return [super init];
}

uint64_t PCProximityHandoffServiceInvocations.UserAlertAction.__allocating_init(coder:)()
{
  id v1 = objc_allocWithZone(v0);
  return SFXPCInvocation.init(coder:)();
}

uint64_t sub_1000A8528(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  return SFXPCInvocation.init(coder:)();
}

id PCProximityHandoffServiceInvocations.UserAlertAction.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_1000A8588(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6553776569566370 && a2 == 0xED00006563697672;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726568746FLL && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000A8698(void *a1)
{
  uint64_t v2 = sub_100008614(&qword_1000FF4B8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v27 = v2;
  uint64_t v28 = v3;
  __chkstk_darwin(v2, v4);
  char v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100008614(&qword_1000FF4C0);
  uint64_t v30 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100008614(&qword_1000FF4C8);
  uint64_t v29 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)sub_10000AEFC(a1, a1[3]);
  sub_1000A702C();
  uint64_t v16 = (uint64_t)v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    goto LABEL_9;
  }
  uint64_t v17 = v30;
  uint64_t v26 = v7;
  char v31 = a1;
  uint64_t v18 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v18 + 16) != 1)
  {
    uint64_t v22 = type metadata accessor for DecodingError();
    swift_allocError();
    char v24 = v23;
    sub_100008614(&qword_1000F8A40);
    *char v24 = &type metadata for PCProximityHandoffClient.Identifier;
    uint64_t v15 = (uint64_t)v14;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v22 - 8) + 104))(v24, enum case for DecodingError.typeMismatch(_:), v22);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v11);
    a1 = v31;
LABEL_9:
    sub_10000AF94((uint64_t)a1);
    return v15;
  }
  if (*(unsigned char *)(v18 + 32))
  {
    char v33 = 1;
    sub_1000A7080();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v19 = v27;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v20 = v6;
    uint64_t v21 = v29;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v20, v19);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v14, v11);
  }
  else
  {
    char v32 = 0;
    sub_1000A70D4();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v11);
    uint64_t v15 = 0;
  }
  sub_10000AF94((uint64_t)v31);
  return v15;
}