void sub_301158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,std::__shared_weak_count *a43,uint64_t a44,char a45,uint64_t a46)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_30148C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = sub_E1B78(a1, a2);
  if (!v5)
  {
    uint64_t v19 = sub_32A48(13);
    v20 = sub_7D5E8(1, *(void **)v19, *(void *)(v19 + 8));
    v21 = v20;
    if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v26 = 1024;
      int v27 = 3334;
      __int16 v28 = 1024;
      LODWORD(v29) = a2;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [vaPort is NULL]: \"Lookup of VirtualAudio port with id %u failed\"", buf, 0x18u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Lookup of VirtualAudio port with id %u failed");
  }
  unint64_t v6 = v5;
  uint64_t v7 = sub_32A48(2);
  uint64_t v8 = sub_32A48(13);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_8;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_8:
  id v14 = *(id *)v7;
  v15 = v14;
  if (v14)
  {
    v16 = v14;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, unint64_t))(*(void *)v6 + 96))(__p, v6);
      if (v24 >= 0) {
        v17 = __p;
      }
      else {
        v17 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v26 = 1024;
      int v27 = 3337;
      __int16 v28 = 2080;
      v29 = v17;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d - VirtualAudio_Port: %s is added to the unroutable list.", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  sub_30174C((uint64_t **)(a3 + 440), v6);
  return sub_E7404((uint64_t *)(a3 + 464), v6, v6);
}

void sub_301720(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_30174C(uint64_t **a1, unint64_t a2)
{
  v4 = (uint64_t *)(a1 + 1);
  v3 = a1[1];
  if (v3)
  {
    uint64_t v5 = v4;
    unint64_t v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        char v9 = (uint64_t **)v6;
      }
      else {
        char v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      unint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v5;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_89144(v3, v5);
      operator delete(v5);
    }
  }
}

uint64_t sub_301824()
{
  return 1;
}

void sub_301834(uint64_t a1, void *a2)
{
  *a2 = off_632FB8;
}

void *sub_301854()
{
  result = operator new(0x10uLL);
  void *result = off_632FB8;
  return result;
}

void sub_30188C()
{
}

void sub_3018A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = sub_E1B78(a1, a2);
  if (!v5)
  {
    uint64_t v18 = sub_32A48(13);
    uint64_t v19 = sub_7D5E8(1, *(void **)v18, *(void *)(v18 + 8));
    v20 = v19;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v25 = 1024;
      int v26 = 3347;
      __int16 v27 = 1024;
      LODWORD(v28) = a2;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [vaPort is NULL]: \"Lookup of VirtualAudio port with id %u failed\"", buf, 0x18u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Lookup of VirtualAudio port with id %u failed");
  }
  unint64_t v6 = v5;
  uint64_t v7 = sub_32A48(2);
  uint64_t v8 = sub_32A48(13);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_8;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_8:
  id v14 = *(id *)v7;
  v15 = v14;
  if (v14)
  {
    v16 = v14;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, unint64_t))(*(void *)v6 + 96))(__p, v6);
      if (v23 >= 0) {
        v17 = __p;
      }
      else {
        v17 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v25 = 1024;
      int v26 = 3350;
      __int16 v27 = 2080;
      __int16 v28 = v17;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d - VirtualAudio_Port: %s is added to the routable list.", buf, 0x1Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  sub_E7404((uint64_t *)(a3 + 440), v6, v6);
  sub_30174C((uint64_t **)(a3 + 464), v6);
}

void sub_301B38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_301B64(uint64_t a1, uint64_t a2)
{
  return sub_24F39C(a2) != 2;
}

void sub_301B90(uint64_t a1, void *a2)
{
  *a2 = off_633070;
}

void *sub_301BB0()
{
  result = operator new(0x10uLL);
  void *result = off_633070;
  return result;
}

void sub_301BE8()
{
}

void *sub_301C00(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      sub_60548();
    }
    v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    v15 = result + 2;
    v4 = (char *)sub_106EC(a2);
    uint64_t v7 = *v2;
    unint64_t v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      uint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      uint64_t v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
        *(void *)unint64_t v6 = 0;
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    *v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v13 = v10;
    uint64_t v11 = v2[2];
    v2[2] = &v4[8 * v5];
    id v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)sub_A78F0((uint64_t)&v12);
  }
  return result;
}

void sub_301CC0(long long *a1, long long *a2)
{
  long long v17 = *a1;
  long long v18 = a1[1];
  long long v19 = a1[2];
  long long v20 = a1[3];
  uint64_t v5 = (void *)*((void *)a1 + 8);
  v4 = a1 + 4;
  unint64_t v6 = (void *)a1 + 9;
  uint64_t v7 = (void *)*((void *)a1 + 9);
  v21 = v5;
  v22 = v7;
  uint64_t v23 = *((void *)a1 + 10);
  if (v23)
  {
    v7[2] = &v22;
    void *v4 = v6;
    *unint64_t v6 = 0;
    *((void *)a1 + 10) = 0;
  }
  else
  {
    v21 = &v22;
  }
  long long v24 = *(long long *)((char *)a1 + 88);
  uint64_t v25 = *((void *)a1 + 13);
  *((void *)a1 + 12) = 0;
  *((void *)a1 + 13) = 0;
  *((void *)a1 + 11) = 0;
  int v26 = *((_DWORD *)a1 + 28);
  long long v8 = a2[3];
  long long v10 = *a2;
  long long v9 = a2[1];
  a1[2] = a2[2];
  a1[3] = v8;
  *a1 = v10;
  a1[1] = v9;
  sub_302014(v4, (void *)a2 + 8);
  uint64_t v11 = (void **)a2 + 11;
  uint64_t v12 = (void *)*((void *)a1 + 11);
  if (v12)
  {
    *((void *)a1 + 12) = v12;
    operator delete(v12);
    *((void *)a1 + 11) = 0;
    *((void *)a1 + 12) = 0;
    *((void *)a1 + 13) = 0;
  }
  *(long long *)((char *)a1 + 88) = *(long long *)((char *)a2 + 88);
  *((void *)a1 + 13) = *((void *)a2 + 13);
  *uint64_t v11 = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((_DWORD *)a1 + 28) = *((_DWORD *)a2 + 28);
  *a2 = v17;
  a2[1] = v18;
  a2[2] = v19;
  a2[3] = v20;
  uint64_t v13 = (uint64_t)a2 + 72;
  sub_463E0(*((void **)a2 + 9));
  id v14 = v22;
  *((void *)a2 + 8) = v21;
  *((void *)a2 + 9) = v14;
  uint64_t v15 = v23;
  *((void *)a2 + 10) = v23;
  if (v15)
  {
    v14[2] = v13;
    id v14 = 0;
    v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    *((void *)a2 + 8) = v13;
  }
  v16 = *v11;
  if (*v11)
  {
    *((void *)a2 + 12) = v16;
    operator delete(v16);
    id v14 = v22;
  }
  *(long long *)((char *)a2 + 88) = v24;
  *((void *)a2 + 13) = v25;
  uint64_t v25 = 0;
  long long v24 = 0uLL;
  *((_DWORD *)a2 + 28) = v26;
  sub_463E0(v14);
}

long long *sub_301E50(long long *result, uint64_t *a2)
{
  uint64_t v2 = *((void *)result + 2);
  *((void *)result + 2) = a2[2];
  a2[2] = v2;
  long long v3 = *result;
  void *result = *(_OWORD *)a2;
  *(_OWORD *)a2 = v3;
  if (*((void *)result + 2))
  {
    **((void **)result + 1) = result;
    v4 = *(long long **)result;
  }
  else
  {
    *(void *)result = result;
    v4 = result;
  }
  *((void *)v4 + 1) = result;
  if (a2[2])
  {
    *(void *)a2[1] = a2;
    uint64_t v5 = (uint64_t *)*a2;
  }
  else
  {
    *a2 = (uint64_t)a2;
    uint64_t v5 = a2;
  }
  v5[1] = (uint64_t)a2;
  return result;
}

uint64_t sub_301EC4(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  unint64_t v6 = (void *)a2 + 9;
  uint64_t v7 = *((void *)a2 + 9);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = a1 + 72;
  uint64_t v9 = *((void *)a2 + 10);
  *(void *)(a1 + 80) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *((void *)a2 + 8) = v6;
    *unint64_t v6 = 0;
    *((void *)a2 + 10) = 0;
  }
  else
  {
    *(void *)(a1 + 64) = v8;
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 11) = 0;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(void *)(a1 + 120) = a1 + 120;
  *(void *)(a1 + 128) = a1 + 120;
  *(void *)(a1 + 136) = 0;
  sub_D39BC(a1 + 120, (uint64_t *)(a1 + 120), (void *)a2 + 15);
  return a1;
}

uint64_t sub_301F70(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  sub_302014((void *)(a1 + 64), (void *)a2 + 8);
  uint64_t v7 = *(void **)(a1 + 88);
  if (v7)
  {
    *(void *)(a1 + 96) = v7;
    operator delete(v7);
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
  }
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  sub_8108((uint64_t *)(a1 + 120));
  sub_D39BC(a1 + 120, (uint64_t *)(a1 + 120), (void *)a2 + 15);
  return a1;
}

void sub_302014(void *a1, void *a2)
{
  long long v4 = a1 + 1;
  sub_463E0((void *)a1[1]);
  *a1 = *a2;
  long long v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  a1[2] = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *long long v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *a1 = v4;
  }
}

void sub_302080(uint64_t a1, uint64_t a2, void *a3)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    long long v5 = *(id *)sub_32A48(13);
    uint64_t v6 = v5;
    if (v5 && os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v35 = 1024;
      int v36 = 4738;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The routing mutex is not held by this thread.\"", buf, 0x12u);
    }
  }
  Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  *(void *)a1 = Mutable;
  *(_WORD *)(a1 + 8) = 257;
  sub_7F024((uint64_t)v32, a3);
  uint64_t v8 = *(uint64_t **)(a2 + 144);
  int v26 = *(uint64_t **)(a2 + 152);
  if (v8 == v26) {
    goto LABEL_47;
  }
  do
  {
    sub_2F4540((uint64_t *)&v30, (uint64_t)v32, *(_DWORD *)(*v8 + 580));
    long long v10 = v30;
    uint64_t v9 = v31;
    if (v30 == v31) {
      goto LABEL_44;
    }
    do
    {
      uint64_t v11 = *v8;
      uint64_t v12 = *(void *)(*v8 + 576);
      uint64_t v29 = v12;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 112))(v11))
      {
        uint64_t v13 = sub_32A48(2);
        if (*(unsigned char *)(v13 + 8))
        {
          id v14 = *(id *)v13;
          if (v14)
          {
            uint64_t v15 = v14;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
            {
              sub_4D60(&__p, (unsigned int *)&v29);
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
              __int16 v35 = 1024;
              int v36 = 4750;
              __int16 v37 = 2080;
              v38 = p_p;
              _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d VAD %s is marked hidden, excluding from Device Descriptions", buf, 0x1Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        goto LABEL_42;
      }
      *(void *)buf = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      *(_WORD *)&buf[8] = 257;
      sub_1D4AF4((uint64_t)buf, @"device ID", *(_DWORD *)(*v8 + 8));
      if (buf[9])
      {
        long long v17 = *(const void **)(*v8 + 592);
        if (v17) {
          BOOL v18 = *(void *)buf == 0;
        }
        else {
          BOOL v18 = 1;
        }
        if (v18) {
          goto LABEL_24;
        }
        CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, @"device UID", v17);
        if (buf[9])
        {
          long long v17 = *(const void **)(*v8 + 592);
LABEL_24:
          if (v17) {
            BOOL v19 = *(void *)buf == 0;
          }
          else {
            BOOL v19 = 1;
          }
          if (!v19) {
            CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, @"device name", v17);
          }
        }
      }
      sub_1D4AF4((uint64_t)buf, @"device type", v12);
      if (*v10) {
        sub_1D4AF4((uint64_t)buf, @"audio session id", *v10);
      }
      sub_1D4A4C((uint64_t)buf, @"persisted", 1);
      long long v20 = *(void **)sub_BC8B0(*v8, 0);
      uint64_t v21 = sub_BC8B0(*v8, 0);
      sub_45120((uint64_t)&__p, v20, (void *)(v21 + 8));
      if (buf[9] && __p.__r_.__value_.__r.__words[0] && *(void *)buf) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, @"input ports", __p.__r_.__value_.__l.__data_);
      }
      v22 = *(void **)sub_BC8B0(*v8, 1);
      uint64_t v23 = sub_BC8B0(*v8, 1);
      sub_45120((uint64_t)value, v22, (void *)(v23 + 8));
      long long v24 = *(const void **)buf;
      if (buf[9] && value[0] && *(void *)buf)
      {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, @"output ports", value[0]);
        long long v24 = *(const void **)buf;
      }
      if (Mutable) {
        CFArrayAppendValue(Mutable, v24);
      }
      sub_3D61C((uint64_t)value);
      sub_3D61C((uint64_t)&__p);
      sub_80594((uint64_t)buf);
LABEL_42:
      ++v10;
    }
    while (v10 != v9);
    long long v10 = v30;
LABEL_44:
    if (v10)
    {
      v31 = v10;
      operator delete(v10);
    }
    ++v8;
  }
  while (v8 != v26);
LABEL_47:
  sub_7F264(v33);
}

void sub_3024FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

void sub_302590(uint64_t a1)
{
  v1 = *(void **)(a1 + 8);
  uint64_t v2 = (void *)v1[23];
  v1 += 23;
  sub_463E0(v2);
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
}

uint64_t sub_3025C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_6331D8;
  a2[1] = v2;
  return result;
}

void *sub_3025EC(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_6331D8;
  result[1] = v3;
  return result;
}

void sub_302634()
{
}

void sub_30264C(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_E1B78(a2, a3);
  if (!v5)
  {
    uint64_t v12 = sub_32A48(13);
    uint64_t v13 = sub_7D5E8(1, *(void **)v12, *(void *)(v12 + 8));
    id v14 = v13;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 977;
      __int16 v20 = 1024;
      LODWORD(v21) = a3;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"No virtual audio port found with port id %u\"", buf, 0x18u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No virtual audio port found with port id %u");
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 96);
  *(void *)buf = *(void *)(v5 + 88);
  *(void *)&buf[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_43F38(v18, (uint64_t *)buf, "", 979);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = sub_32A48(2);
  if (*(unsigned char *)(v7 + 8))
  {
    id v8 = *(id *)v7;
    if (v8)
    {
      uint64_t v9 = v8;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        long long v10 = *(const void **)(v18[0] + 248);
        v16 = v10;
        char v17 = *(unsigned char *)(v18[0] + 256);
        if (v17 && v10) {
          CFRetain(v10);
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 980;
        __int16 v20 = 2112;
        uint64_t v21 = v10;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Requested port is %@", buf, 0x1Cu);
        sub_72924((uint64_t)&v16);
      }
    }
  }
  uint64_t v11 = (std::__shared_weak_count *)v18[1];
  *a1 = v18[0];
  a1[1] = v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_4636C(v11);
  }
}

void sub_302894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_4636C(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3028E8(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_112C40((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_302950(_Unwind_Exception *a1)
{
  sub_10E118(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_302964(uint64_t result, int a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    BOOL v4 = v2 != 1 || a2 == 0;
    if (!v4)
    {
      uint64_t v43 = sub_32A48(13);
      v44 = sub_7D5E8(1, *(void **)v43, *(void *)(v43 + 8));
      v45 = v44;
      if (v44)
      {
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)value = 136315394;
          *(void *)&value[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&value[12] = 1024;
          *(_DWORD *)&value[14] = 4663;
          _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", value, 0x12u);
        }
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    uint64_t v5 = (void *)result;
    CFMutableArrayRef theArray = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    __int16 v49 = 257;
    if (a2)
    {
      uint64_t v6 = (void *)*v5;
      if ((void *)*v5 != v5 + 1)
      {
        do
        {
          sub_3A8A8();
          uint64_t v7 = sub_33438(*((_DWORD *)v6 + 7));
          id v8 = *(std::__shared_weak_count **)(v7 + 96);
          if (v8)
          {
            uint64_t v9 = *(void *)(v7 + 88);
            atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            long long v10 = std::__shared_weak_count::lock(v8);
            std::__shared_weak_count::__release_weak(v8);
            if (v10)
            {
              if (v9)
              {
                (*(void (**)(unsigned char *__return_ptr))(**(void **)(v9 + 192) + 128))(value);
                if (theArray) {
                  CFArrayAppendValue(theArray, *(const void **)value);
                }
                sub_72924((uint64_t)value);
              }
              sub_4636C(v10);
            }
          }
          uint64_t v11 = (void *)v6[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v6[2];
              BOOL v4 = *v12 == (void)v6;
              uint64_t v6 = v12;
            }
            while (!v4);
          }
          uint64_t v6 = v12;
        }
        while (v12 != v5 + 1);
      }
    }
    uint64_t v13 = sub_32A48(2);
    uint64_t v14 = sub_32A48(34);
    char v15 = 0;
    uint64_t v16 = 0;
    *(void *)value = 0x100000002;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = *(int *)&value[4 * v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1;
      if (v19) {
        goto LABEL_28;
      }
    }
    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
LABEL_28:
    id v20 = *(id *)v13;
    uint64_t v21 = v20;
    if (v20)
    {
      v22 = v20;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        sub_3828CC(&__p, v5);
        uint64_t v23 = "deaggregation";
        if (a2) {
          uint64_t v23 = "aggregation";
        }
        *(void *)&value[4] = "VirtualAudio_PlugIn.mm";
        *(_DWORD *)value = 136315906;
        *(_WORD *)&value[12] = 1024;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)&value[14] = 4681;
        __int16 v52 = 2080;
        v53 = v23;
        __int16 v54 = 2080;
        v55 = p_p;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting %s for ports: %s.", value, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    uint64_t v25 = (void *)*v5;
    if ((void *)*v5 != v5 + 1)
    {
      if (a2) {
        int v26 = "Aggregation";
      }
      else {
        int v26 = "Deaggregation";
      }
      do
      {
        sub_3A8A8();
        uint64_t v27 = sub_33438(*((_DWORD *)v25 + 7));
        if (theArray)
        {
          CFRetain(theArray);
          CFMutableArrayRef v28 = theArray;
        }
        else
        {
          CFMutableArrayRef v28 = 0;
        }
        *(void *)value = &off_637B38;
        *(void *)&value[8] = v28;
        __p.__r_.__value_.__r.__words[0] = 0x676C6F6277736167;
        LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
        CFMutableArrayRef v50 = v28;
        int v29 = sub_3A70E8(v27, (uint64_t)&__p, 0, 0, 8, (uint64_t)&v50);
        sub_49A90(value);
        if (v29)
        {
          uint64_t v30 = sub_32A48(2);
          uint64_t v31 = sub_32A48(34);
          char v32 = 0;
          uint64_t v33 = 0;
          *(void *)value = 0x100000002;
          uint64_t v34 = *(void *)(v30 + 8);
          while (1)
          {
            uint64_t v35 = *(int *)&value[4 * v33];
            char v36 = v32;
            if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
              break;
            }
            char v32 = 1;
            uint64_t v33 = 1;
            if (v36) {
              goto LABEL_52;
            }
          }
          if ((v34 & v35) == 0) {
            uint64_t v30 = v31;
          }
LABEL_52:
          id v37 = *(id *)v30;
          v38 = v37;
          if (v37)
          {
            v39 = v37;
            if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
            {
              sub_3828CC(&__p, v5);
              v40 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)value = 136315906;
              *(void *)&value[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&value[12] = 1024;
              *(_DWORD *)&value[14] = 4688;
              __int16 v52 = 2080;
              v53 = v26;
              __int16 v54 = 2080;
              v55 = v40;
              _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d %s failed for ports: %s.", value, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        v41 = (void *)v25[1];
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = (void *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (void *)v25[2];
            BOOL v4 = *v42 == (void)v25;
            uint64_t v25 = v42;
          }
          while (!v4);
        }
        uint64_t v25 = v42;
      }
      while (v42 != v5 + 1);
    }
    return sub_3D61C((uint64_t)&theArray);
  }
  return result;
}

void sub_302F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_302F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_144BD4(a1, a2);
  *(unsigned char *)(v4 + 408) = *(unsigned char *)(a2 + 408);
  uint64_t v5 = (uint64_t **)(v4 + 424);
  *(void *)(v4 + 424) = 0;
  *(void *)(v4 + 432) = 0;
  *(void *)(v4 + 416) = v4 + 424;
  uint64_t v6 = *(void **)(a2 + 416);
  if (v6 != (void *)(a2 + 424))
  {
    do
    {
      uint64_t v7 = v6 + 4;
      id v8 = *v5;
      uint64_t v9 = v5;
      if (*(uint64_t ***)(a1 + 416) == v5) {
        goto LABEL_8;
      }
      long long v10 = *v5;
      uint64_t v11 = v5;
      if (v8)
      {
        do
        {
          uint64_t v9 = (uint64_t **)v10;
          long long v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t **)v11[2];
          BOOL v12 = *v9 == (uint64_t *)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      unint64_t v13 = *v7;
      if ((unint64_t)v9[4] < *v7)
      {
LABEL_8:
        if (v8) {
          uint64_t v14 = v9;
        }
        else {
          uint64_t v14 = v5;
        }
        if (v8) {
          char v15 = v9 + 1;
        }
        else {
          char v15 = v5;
        }
      }
      else
      {
        uint64_t v14 = v5;
        char v15 = v5;
        if (v8)
        {
          char v15 = v5;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v8;
              unint64_t v20 = v8[4];
              if (v13 >= v20) {
                break;
              }
              id v8 = *v14;
              char v15 = v14;
              if (!*v14) {
                goto LABEL_15;
              }
            }
            if (v20 >= v13) {
              break;
            }
            char v15 = v14 + 1;
            id v8 = v14[1];
            if (!v8) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_15:
        uint64_t v16 = operator new(0x38uLL);
        long long v17 = *(_OWORD *)v7;
        v16[6] = v6[6];
        *((_OWORD *)v16 + 2) = v17;
        sub_46CA8((uint64_t **)(a1 + 416), (uint64_t)v14, v15, v16);
      }
      uint64_t v18 = (void *)v6[1];
      if (v18)
      {
        do
        {
          char v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          char v19 = (void *)v6[2];
          BOOL v12 = *v19 == (void)v6;
          uint64_t v6 = v19;
        }
        while (!v12);
      }
      uint64_t v6 = v19;
    }
    while (v19 != (void *)(a2 + 424));
  }
  sub_303940(a1 + 440, (void *)(a2 + 440));
  sub_303940(a1 + 464, (void *)(a2 + 464));
  sub_46A4C((uint64_t *)(a1 + 488), a2 + 488);
  sub_46A4C((uint64_t *)(a1 + 512), a2 + 512);
  sub_F2720((unsigned char *)(a1 + 536), a2 + 536);
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  uint64_t v21 = *(unsigned char **)(a2 + 560);
  v22 = *(unsigned char **)(a2 + 568);
  int64_t v23 = v22 - v21;
  if (v22 != v21)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v23 >> 4) >= 0x555555555555556) {
      sub_60548();
    }
    long long v24 = (char *)sub_2FF668(0xAAAAAAAAAAAAAAABLL * (v23 >> 4));
    *(void *)(a1 + 560) = v24;
    *(void *)(a1 + 568) = v24;
    *(void *)(a1 + 576) = &v24[48 * v25];
    memmove(v24, v21, v23);
    *(void *)(a1 + 568) = &v24[16 * (v23 >> 4)];
  }
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  sub_F2720((unsigned char *)(a1 + 592), a2 + 592);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  uint64_t v26 = *(void *)(a2 + 624);
  if (v26) {
    CFRetain(*(CFTypeRef *)(a2 + 624));
  }
  *(void *)(a1 + 624) = v26;
  int v27 = *(_DWORD *)(a2 + 632);
  *(unsigned char *)(a1 + 636) = *(unsigned char *)(a2 + 636);
  *(_DWORD *)(a1 + 632) = v27;
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  uint64_t v28 = *(void *)(a2 + 648);
  *(void *)(a1 + 648) = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  uint64_t v29 = *(void *)(a2 + 664);
  *(void *)(a1 + 664) = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 16), 1uLL, memory_order_relaxed);
  }
  sub_2D9EAC(a1 + 672, a2 + 672);
  *(unsigned char *)(a1 + 704) = 0;
  *(unsigned char *)(a1 + 728) = 0;
  if (*(unsigned char *)(a2 + 728))
  {
    sub_ED624(a1 + 704, (void *)(a2 + 704));
    *(unsigned char *)(a1 + 728) = 1;
  }
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  return a1;
}

void sub_3032A0(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 728)) {
    sub_7DB7C(*(void **)(v1 + 712));
  }
  if (*(unsigned char *)(v1 + 696))
  {
    uint64_t v7 = *v4;
    if (*v4)
    {
      *(void *)(v1 + 680) = v7;
      operator delete(v7);
    }
  }
  sub_2FF988(v1 + 632);
  sub_63908((const void **)(v1 + 624));
  if (*(unsigned char *)(v1 + 608)) {
    sub_80594(v3);
  }
  id v8 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 568) = v8;
    operator delete(v8);
  }
  if (*(unsigned char *)(v1 + 552)) {
    sub_80594(v2);
  }
  sub_463E0(*(void **)(v1 + 520));
  sub_463E0(*(void **)(v1 + 496));
  sub_463E0(*(void **)(v1 + 472));
  sub_463E0(*(void **)(v1 + 448));
  sub_463E0(*(void **)(v1 + 424));
  sub_143D84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_30338C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_3036C0(a1, a2);
  *(unsigned char *)(v4 + 408) = *(unsigned char *)(a2 + 408);
  *(void *)(v4 + 416) = *(void *)(a2 + 416);
  uint64_t v5 = v4 + 424;
  uint64_t v6 = *(void *)(a2 + 424);
  *(void *)(v4 + 424) = v6;
  uint64_t v7 = *(void *)(a2 + 432);
  *(void *)(v4 + 432) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v5;
    *(void *)(a2 + 416) = a2 + 424;
    *(void *)(a2 + 424) = 0;
    *(void *)(a2 + 432) = 0;
  }
  else
  {
    *(void *)(a1 + 416) = v5;
  }
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  uint64_t v8 = a1 + 448;
  uint64_t v9 = *(void *)(a2 + 448);
  *(void *)(a1 + 448) = v9;
  uint64_t v10 = *(void *)(a2 + 456);
  *(void *)(a1 + 456) = v10;
  if (v10)
  {
    *(void *)(v9 + 16) = v8;
    *(void *)(a2 + 440) = a2 + 448;
    *(void *)(a2 + 448) = 0;
    *(void *)(a2 + 456) = 0;
  }
  else
  {
    *(void *)(a1 + 440) = v8;
  }
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  uint64_t v11 = a1 + 472;
  uint64_t v12 = *(void *)(a2 + 472);
  *(void *)(a1 + 472) = v12;
  uint64_t v13 = *(void *)(a2 + 480);
  *(void *)(a1 + 480) = v13;
  if (v13)
  {
    *(void *)(v12 + 16) = v11;
    *(void *)(a2 + 464) = a2 + 472;
    *(void *)(a2 + 472) = 0;
    *(void *)(a2 + 480) = 0;
  }
  else
  {
    *(void *)(a1 + 464) = v11;
  }
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  uint64_t v14 = a1 + 496;
  uint64_t v15 = *(void *)(a2 + 496);
  *(void *)(a1 + 496) = v15;
  uint64_t v16 = *(void *)(a2 + 504);
  *(void *)(a1 + 504) = v16;
  if (v16)
  {
    *(void *)(v15 + 16) = v14;
    *(void *)(a2 + 488) = a2 + 496;
    *(void *)(a2 + 496) = 0;
    *(void *)(a2 + 504) = 0;
  }
  else
  {
    *(void *)(a1 + 488) = v14;
  }
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  uint64_t v17 = a1 + 520;
  uint64_t v18 = *(void *)(a2 + 520);
  *(void *)(a1 + 520) = v18;
  uint64_t v19 = *(void *)(a2 + 528);
  *(void *)(a1 + 528) = v19;
  if (v19)
  {
    *(void *)(v18 + 16) = v17;
    *(void *)(a2 + 512) = a2 + 520;
    *(void *)(a2 + 520) = 0;
    *(void *)(a2 + 528) = 0;
  }
  else
  {
    *(void *)(a1 + 512) = v17;
  }
  sub_3038E8((unsigned char *)(a1 + 536), a2 + 536);
  *(void *)(a1 + 576) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a2 + 576) = 0;
  *(_OWORD *)(a2 + 560) = 0u;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  sub_3038E8((unsigned char *)(a1 + 592), a2 + 592);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a2 + 624) = 0;
  int v20 = *(_DWORD *)(a2 + 632);
  *(unsigned char *)(a1 + 636) = *(unsigned char *)(a2 + 636);
  *(_DWORD *)(a1 + 632) = v20;
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
  *(void *)(a2 + 648) = 0;
  *(void *)(a2 + 640) = 0;
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(void *)(a2 + 664) = 0;
  *(void *)(a2 + 656) = 0;
  *(unsigned char *)(a1 + 672) = 0;
  *(unsigned char *)(a1 + 696) = 0;
  if (*(unsigned char *)(a2 + 696))
  {
    *(void *)(a1 + 688) = 0;
    *(_OWORD *)(a1 + 672) = 0u;
    *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
    *(void *)(a1 + 688) = *(void *)(a2 + 688);
    *(void *)(a2 + 688) = 0;
    *(_OWORD *)(a2 + 672) = 0u;
    *(unsigned char *)(a1 + 696) = 1;
  }
  *(unsigned char *)(a1 + 704) = 0;
  *(unsigned char *)(a1 + 728) = 0;
  if (*(unsigned char *)(a2 + 728))
  {
    *(void *)(a1 + 704) = *(void *)(a2 + 704);
    uint64_t v21 = a1 + 712;
    uint64_t v22 = *(void *)(a2 + 712);
    *(void *)(a1 + 712) = v22;
    uint64_t v23 = *(void *)(a2 + 720);
    *(void *)(a1 + 720) = v23;
    if (v23)
    {
      *(void *)(v22 + 16) = v21;
      *(void *)(a2 + 704) = a2 + 712;
      *(void *)(a2 + 712) = 0;
      *(void *)(a2 + 720) = 0;
    }
    else
    {
      *(void *)(a1 + 704) = v21;
    }
    *(unsigned char *)(a1 + 728) = 1;
  }
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  return a1;
}

void sub_303608(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 568) = v5;
    operator delete(v5);
  }
  if (*(unsigned char *)(v1 + 552)) {
    sub_80594(v2);
  }
  sub_463E0(*(void **)(v1 + 520));
  sub_463E0(*(void **)(v1 + 496));
  sub_463E0(*(void **)(v1 + 472));
  sub_463E0(*(void **)(v1 + 448));
  sub_463E0(*(void **)(v1 + 424));
  sub_143D84(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_30366C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_13A5C8(a1, a2);
  sub_302F8C(v5 + 40, a3);
  *(unsigned char *)(a1 + 784) = 1;
  return a1;
}

void sub_3036AC(_Unwind_Exception *a1)
{
  sub_11A520(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3036C0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = (void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v7;
  if (v7)
  {
    *(void *)(v5 + 16) = v6;
    *(void *)(a2 + 16) = v4;
    void *v4 = 0;
    *(void *)(a2 + 32) = 0;
  }
  else
  {
    *(void *)(a1 + 16) = v6;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = (void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = a1 + 48;
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *(void *)(a2 + 40) = v8;
    *uint64_t v8 = 0;
    *(void *)(a2 + 56) = 0;
  }
  else
  {
    *(void *)(a1 + 40) = v10;
  }
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v12 = (void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 72);
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = a1 + 72;
  uint64_t v15 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v15;
  if (v15)
  {
    *(void *)(v13 + 16) = v14;
    *(void *)(a2 + 64) = v12;
    *uint64_t v12 = 0;
    *(void *)(a2 + 80) = 0;
  }
  else
  {
    *(void *)(a1 + 64) = v14;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v16 = (void *)(a2 + 96);
  uint64_t v17 = *(void *)(a2 + 96);
  *(void *)(a1 + 96) = v17;
  uint64_t v18 = a1 + 96;
  uint64_t v19 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v19;
  if (v19)
  {
    *(void *)(v17 + 16) = v18;
    *(void *)(a2 + 88) = v16;
    void *v16 = 0;
    *(void *)(a2 + 104) = 0;
  }
  else
  {
    *(void *)(a1 + 88) = v18;
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  int v20 = (void *)(a2 + 120);
  uint64_t v21 = *(void *)(a2 + 120);
  *(void *)(a1 + 120) = v21;
  uint64_t v22 = a1 + 120;
  uint64_t v23 = *(void *)(a2 + 128);
  *(void *)(a1 + 128) = v23;
  if (v23)
  {
    *(void *)(v21 + 16) = v22;
    *(void *)(a2 + 112) = v20;
    void *v20 = 0;
    *(void *)(a2 + 128) = 0;
  }
  else
  {
    *(void *)(a1 + 112) = v22;
  }
  uint64_t v24 = *(void *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 136) = v24;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  long long v25 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v25;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 160) = 0;
  uint64_t v26 = *(void *)(a2 + 184);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 184) = v26;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  sub_6DBFC(a1 + 240, (uint64_t *)(a2 + 240));
  sub_6DBFC(a1 + 280, (uint64_t *)(a2 + 280));
  sub_6DBFC(a1 + 320, (uint64_t *)(a2 + 320));
  uint64_t v27 = *(void *)(a2 + 360);
  *(_DWORD *)(a1 + 368) = *(_DWORD *)(a2 + 368);
  *(void *)(a1 + 360) = v27;
  *(unsigned char *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  if (*(unsigned char *)(a2 + 400))
  {
    long long v28 = *(_OWORD *)(a2 + 376);
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = v28;
    *(void *)(a2 + 384) = 0;
    *(void *)(a2 + 392) = 0;
    *(void *)(a2 + 376) = 0;
    *(unsigned char *)(a1 + 400) = 1;
  }
  return a1;
}

unsigned char *sub_3038E8(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(unsigned char *)(a2 + 16)) {
    sub_F36C0((uint64_t)a1, a2);
  }
  return a1;
}

void sub_303924(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 16)) {
    sub_80594(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_303940(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(uint64_t **)(a1 + 8);
      uint64_t v7 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void **)(a1 + 8);
      uint64_t v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          uint64_t v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v9[2];
          BOOL v10 = *v7 == (void)v9;
          uint64_t v9 = v7;
        }
        while (v10);
      }
      unint64_t v11 = v5[4];
      if (v7[4] < v11)
      {
LABEL_8:
        if (v6) {
          uint64_t v12 = (uint64_t **)v7;
        }
        else {
          uint64_t v12 = (uint64_t **)v3;
        }
        if (v6) {
          uint64_t v13 = (uint64_t **)(v7 + 1);
        }
        else {
          uint64_t v13 = (uint64_t **)v3;
        }
      }
      else
      {
        uint64_t v12 = (uint64_t **)v3;
        uint64_t v13 = (uint64_t **)v3;
        if (v6)
        {
          uint64_t v13 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v6;
              unint64_t v17 = v6[4];
              if (v11 >= v17) {
                break;
              }
              uint64_t v6 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_15;
              }
            }
            if (v17 >= v11) {
              break;
            }
            uint64_t v13 = v12 + 1;
            uint64_t v6 = v12[1];
            if (!v6) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        uint64_t v14 = (uint64_t *)operator new(0x28uLL);
        v14[4] = v5[4];
        sub_46CA8((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          uint64_t v5 = v16;
        }
        while (!v10);
      }
      uint64_t v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_303AA4(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_303AB8(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    BOOL v10 = operator new(0x40uLL);
    v12[1] = v6;
    v10[8] = *a3;
    *((void *)v10 + 5) = v10 + 10;
    *((void *)v10 + 6) = v10 + 10;
    *((void *)v10 + 7) = 0;
    char v13 = 1;
    sub_46CA8(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    sub_FB6C8((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

unsigned char *sub_303B8C(unsigned char *result, uint64_t a2)
{
  if (result[16] == *(unsigned char *)(a2 + 16))
  {
    if (result[16])
    {
      return (unsigned char *)sub_2EB458((uint64_t)result, a2);
    }
  }
  else if (result[16])
  {
    result = (unsigned char *)sub_80594((uint64_t)result);
    result[16] = 0;
  }
  else
  {
    return sub_F36C0((uint64_t)result, a2);
  }
  return result;
}

void sub_303BF0(CFDictionaryRef *a1, uint64_t a2, long long **a3)
{
  memset(buf, 0, 24);
  sub_2189C((char *)buf, a3[4], a3[5], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[5] - (char *)a3[4]) >> 3));
  uint64_t v6 = sub_219BC(*(uint64_t *)buf, *(uint64_t *)&buf[8], (uint64_t **)(a2 + 144));
  *(void *)&long long valuePtr = buf;
  sub_217F8((void ***)&valuePtr);
  if (!v6)
  {
    uint64_t v104 = sub_32A48(13);
    v105 = sub_7D5E8(1, *(void **)v104, *(void *)(v104 + 8));
    v106 = v105;
    if (v105 && os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7927;
      _os_log_impl(&def_1E50E8, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [outputVAD is NULL]: \"No output VAD\"", buf, 0x12u);
    }

    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No output VAD");
  }
  char v144 = *(unsigned char *)a3;
  sub_305374((CFStringRef *)buf, (const UInt8 *)aGoingActive, &v144);
  char v143 = *((unsigned char *)a3 + 1);
  sub_305374((CFStringRef *)&buf[16], (const UInt8 *)aStayingActive, &v143);
  sub_2417C(v140, *(_DWORD *)(a2 + 224));
  if ((v141 & 0x80u) == 0) {
    uint64_t v7 = v140;
  }
  else {
    uint64_t v7 = (void **)v140[0];
  }
  if (v7)
  {
    if ((v141 & 0x80u) == 0) {
      CFIndex v8 = v141;
    }
    else {
      CFIndex v8 = (CFIndex)v140[1];
    }
    CFTypeRef v142 = CFStringCreateWithBytes(0, (const UInt8 *)v7, v8, 0x8000100u, 0);
    if (!v142)
    {
      unsigned int v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v9, "Could not construct");
    }
  }
  else
  {
    CFTypeRef v142 = 0;
  }
  sub_305464((uint64_t)&v162, "category", &v142);
  sub_2417C(v137, *(_DWORD *)(a2 + 228));
  if ((v138 & 0x80u) == 0) {
    BOOL v10 = v137;
  }
  else {
    BOOL v10 = (void **)v137[0];
  }
  if (v10)
  {
    if ((v138 & 0x80u) == 0) {
      CFIndex v11 = v138;
    }
    else {
      CFIndex v11 = (CFIndex)v137[1];
    }
    CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)v10, v11, 0x8000100u, 0);
    CFStringRef v139 = v12;
    if (!v12)
    {
      char v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v13, "Could not construct");
    }
  }
  else
  {
    CFStringRef v12 = 0;
    CFStringRef v139 = 0;
  }
  sub_22210(v163, "mode");
  if (v12) {
    CFRetain(v12);
  }
  CFStringRef v111 = v12;
  v163[1] = v12;
  sub_382D98(&v135, (uint64_t *)(a2 + 376), *(_DWORD *)(a2 + 228));
  if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v135;
  }
  else {
    uint64_t v14 = (std::string *)v135.__r_.__value_.__r.__words[0];
  }
  if (v14)
  {
    if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v135.__r_.__value_.__l.__size_;
    }
    CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)v14, size, 0x8000100u, 0);
    CFStringRef v136 = v16;
    if (!v16)
    {
      unint64_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v17, "Could not construct");
    }
  }
  else
  {
    CFStringRef v16 = 0;
    CFStringRef v136 = 0;
  }
  sub_22210(v164, "active devices");
  if (v16) {
    CFRetain(v16);
  }
  v164[1] = v16;
  sub_7F024((uint64_t)v131, *(void **)(a2 + 120));
  sub_2F6078(&v133, (unsigned int **)(a2 + 376), (uint64_t)v131);
  if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v18 = &v133;
  }
  else {
    uint64_t v18 = (std::string *)v133.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    if ((v133.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v133.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v133.__r_.__value_.__l.__size_;
    }
    CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
    CFStringRef v134 = v20;
    if (!v20)
    {
      uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Could not construct");
    }
  }
  else
  {
    CFStringRef v20 = 0;
    CFStringRef v134 = 0;
  }
  sub_22210(v165, "active on demand devices");
  if (v20) {
    CFRetain(v20);
  }
  CFStringRef v110 = v20;
  v165[1] = v20;
  int v22 = *((_DWORD *)a3 + 1);
  sub_22210(&v166, "session app state");
  LODWORD(valuePtr) = v22;
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v108, "Could not construct");
  }
  int v23 = *((unsigned __int8 *)a3 + 2);
  sub_22210(v168, "session input running");
  if (v23) {
    CFStringRef v24 = (const __CFString *)kCFBooleanTrue;
  }
  else {
    CFStringRef v24 = (const __CFString *)kCFBooleanFalse;
  }
  v168[1] = v24;
  int v25 = *((unsigned __int8 *)a3 + 3);
  sub_22210(v169, "session output running");
  if (v25) {
    CFStringRef v26 = (const __CFString *)kCFBooleanTrue;
  }
  else {
    CFStringRef v26 = (const __CFString *)kCFBooleanFalse;
  }
  v169[1] = v26;
  LODWORD(valuePtr) = *(_DWORD *)(a2 + 400) != 0;
  CFStringRef v27 = (const __CFString *)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFStringRef v130 = v27;
  if (!v27)
  {
    v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v109, "Could not construct");
  }
  sub_22210(v170, "expanse session");
  CFRetain(v27);
  v170[1] = v27;
  uint64_t v28 = sub_298DA4();
  unsigned int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 8))(v28);
  if (v29 > 6) {
    uint64_t v30 = "unknown";
  }
  else {
    uint64_t v30 = off_623840[v29];
  }
  sub_21C8C(v127, v30);
  if ((v128 & 0x80u) == 0) {
    uint64_t v31 = v127;
  }
  else {
    uint64_t v31 = (void **)v127[0];
  }
  if (v31)
  {
    if ((v128 & 0x80u) == 0) {
      CFIndex v32 = v128;
    }
    else {
      CFIndex v32 = (CFIndex)v127[1];
    }
    CFStringRef v33 = CFStringCreateWithBytes(0, (const UInt8 *)v31, v32, 0x8000100u, 0);
    CFStringRef v129 = v33;
    if (!v33)
    {
      uint64_t v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v34, "Could not construct");
    }
  }
  else
  {
    CFStringRef v33 = 0;
    CFStringRef v129 = 0;
  }
  sub_22210(v171, "session user pref");
  if (v33) {
    CFRetain(v33);
  }
  v171[1] = v33;
  uint64_t v35 = *(void *)(v6 + 1008);
  if (v35)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v35 + 504))(&v122);
  }
  else
  {
    v122 = 0;
    v123 = 0;
    uint64_t v124 = 0;
  }
  v114 = a1;
  CFStringRef v112 = v33;
  CFStringRef v113 = v16;
  sub_21C8C(&v125, "{ ");
  char v36 = v122;
  v115 = v123;
  if (v122 != v123)
  {
    char v37 = 0;
    do
    {
      if (v37) {
        std::string::append(&v125, ", ", 2uLL);
      }
      std::string::append(&v125, "{ ", 2uLL);
      v116 = v36;
      uint64_t v39 = *v36;
      uint64_t v38 = v36[1];
      if (v39 != v38)
      {
        char v40 = 0;
        do
        {
          if (v40) {
            std::string::append(&v125, ", ", 2uLL);
          }
          std::to_string(&v151, *(_DWORD *)(v39 + 32));
          v41 = std::string::insert(&v151, 0, "[ ", 2uLL);
          long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
          v152.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v42;
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          uint64_t v43 = std::string::append(&v152, "/", 1uLL);
          long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v44;
          v43->__r_.__value_.__l.__size_ = 0;
          v43->__r_.__value_.__r.__words[2] = 0;
          v43->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v150, *(double *)v39);
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v45 = &v150;
          }
          else {
            v45 = (std::string *)v150.__r_.__value_.__r.__words[0];
          }
          if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v46 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v46 = v150.__r_.__value_.__l.__size_;
          }
          v47 = std::string::append(&v153, (const std::string::value_type *)v45, v46);
          long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v154.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          __int16 v49 = std::string::append(&v154, "/", 1uLL);
          long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v155.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v149, *(_DWORD *)(v39 + 28));
          if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v51 = &v149;
          }
          else {
            v51 = (std::string *)v149.__r_.__value_.__r.__words[0];
          }
          if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v52 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v52 = v149.__r_.__value_.__l.__size_;
          }
          v53 = std::string::append(&v155, (const std::string::value_type *)v51, v52);
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v156.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          v55 = std::string::append(&v156, " ", 1uLL);
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v157.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          sub_2417C(&__p, *(_DWORD *)(v39 + 8));
          if ((v148 & 0x80u) == 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if ((v148 & 0x80u) == 0) {
            std::string::size_type v58 = v148;
          }
          else {
            std::string::size_type v58 = v147;
          }
          v59 = std::string::append(&v157, p_p, v58);
          long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v158.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          v61 = std::string::append(&v158, " ]", 2uLL);
          long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          int64_t v160 = v61->__r_.__value_.__r.__words[2];
          long long valuePtr = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          if (v160 >= 0) {
            p_long long valuePtr = (const std::string::value_type *)&valuePtr;
          }
          else {
            p_long long valuePtr = (const std::string::value_type *)valuePtr;
          }
          if (v160 >= 0) {
            std::string::size_type v64 = HIBYTE(v160);
          }
          else {
            std::string::size_type v64 = *((void *)&valuePtr + 1);
          }
          std::string::append(&v125, p_valuePtr, v64);
          if (SHIBYTE(v160) < 0) {
            operator delete((void *)valuePtr);
          }
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v158.__r_.__value_.__l.__data_);
          }
          if ((char)v148 < 0) {
            operator delete(__p);
          }
          if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v157.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v156.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v149.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v155.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v154.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v150.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v153.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v152.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v151.__r_.__value_.__l.__data_);
          }
          v39 += 40;
          char v40 = 1;
        }
        while (v39 != v38);
      }
      std::string::append(&v125, " }", 2uLL);
      char v36 = v116 + 3;
      char v37 = 1;
    }
    while (v116 + 3 != v115);
  }
  std::string::append(&v125, " }", 2uLL);
  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v65 = &v125;
  }
  else {
    v65 = (std::string *)v125.__r_.__value_.__r.__words[0];
  }
  if (v65)
  {
    if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v66 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v66 = v125.__r_.__value_.__l.__size_;
    }
    CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)v65, v66, 0x8000100u, 0);
    if (!cf)
    {
      v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "Could not construct");
    }
  }
  else
  {
    CFTypeRef cf = 0;
  }
  sub_22210(v172, "session available formats");
  CFStringRef v68 = (const __CFString *)cf;
  if (cf) {
    CFRetain(cf);
  }
  v172[1] = v68;
  uint64_t v69 = *(void *)(v6 + 1008);
  if (v69)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v69 + 512))(&v117);
  }
  else
  {
    v117 = 0;
    v118 = 0;
    uint64_t v119 = 0;
  }
  sub_21C8C(&v120, "{ ");
  v70 = (double *)v117;
  v71 = v118;
  if (v117 != v118)
  {
    char v72 = 0;
    do
    {
      if (v72) {
        std::string::append(&v120, ", ", 2uLL);
      }
      std::to_string(&v151, *((_DWORD *)v70 + 8));
      v73 = std::string::insert(&v151, 0, "[ ", 2uLL);
      long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      v152.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v152.__r_.__value_.__l.__data_ = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      v75 = std::string::append(&v152, "/", 1uLL);
      long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
      v153.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v153.__r_.__value_.__l.__data_ = v76;
      v75->__r_.__value_.__l.__size_ = 0;
      v75->__r_.__value_.__r.__words[2] = 0;
      v75->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v150, *v70);
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v77 = &v150;
      }
      else {
        v77 = (std::string *)v150.__r_.__value_.__r.__words[0];
      }
      if ((v150.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v78 = HIBYTE(v150.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v78 = v150.__r_.__value_.__l.__size_;
      }
      v79 = std::string::append(&v153, (const std::string::value_type *)v77, v78);
      long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
      v154.__r_.__value_.__r.__words[2] = v79->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v154.__r_.__value_.__l.__data_ = v80;
      v79->__r_.__value_.__l.__size_ = 0;
      v79->__r_.__value_.__r.__words[2] = 0;
      v79->__r_.__value_.__r.__words[0] = 0;
      v81 = std::string::append(&v154, "/", 1uLL);
      long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
      v155.__r_.__value_.__r.__words[2] = v81->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v82;
      v81->__r_.__value_.__l.__size_ = 0;
      v81->__r_.__value_.__r.__words[2] = 0;
      v81->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v149, *((_DWORD *)v70 + 7));
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v83 = &v149;
      }
      else {
        v83 = (std::string *)v149.__r_.__value_.__r.__words[0];
      }
      if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v84 = HIBYTE(v149.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v84 = v149.__r_.__value_.__l.__size_;
      }
      v85 = std::string::append(&v155, (const std::string::value_type *)v83, v84);
      long long v86 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
      v156.__r_.__value_.__r.__words[2] = v85->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v86;
      v85->__r_.__value_.__l.__size_ = 0;
      v85->__r_.__value_.__r.__words[2] = 0;
      v85->__r_.__value_.__r.__words[0] = 0;
      v87 = std::string::append(&v156, " ", 1uLL);
      long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
      v157.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v157.__r_.__value_.__l.__data_ = v88;
      v87->__r_.__value_.__l.__size_ = 0;
      v87->__r_.__value_.__r.__words[2] = 0;
      v87->__r_.__value_.__r.__words[0] = 0;
      sub_2417C(&__p, *((_DWORD *)v70 + 2));
      if ((v148 & 0x80u) == 0) {
        v89 = (const std::string::value_type *)&__p;
      }
      else {
        v89 = (const std::string::value_type *)__p;
      }
      if ((v148 & 0x80u) == 0) {
        std::string::size_type v90 = v148;
      }
      else {
        std::string::size_type v90 = v147;
      }
      v91 = std::string::append(&v157, v89, v90);
      long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
      v158.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v158.__r_.__value_.__l.__data_ = v92;
      v91->__r_.__value_.__l.__size_ = 0;
      v91->__r_.__value_.__r.__words[2] = 0;
      v91->__r_.__value_.__r.__words[0] = 0;
      v93 = std::string::append(&v158, " ]", 2uLL);
      long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
      int64_t v160 = v93->__r_.__value_.__r.__words[2];
      long long valuePtr = v94;
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      if (v160 >= 0) {
        v95 = (const std::string::value_type *)&valuePtr;
      }
      else {
        v95 = (const std::string::value_type *)valuePtr;
      }
      if (v160 >= 0) {
        std::string::size_type v96 = HIBYTE(v160);
      }
      else {
        std::string::size_type v96 = *((void *)&valuePtr + 1);
      }
      std::string::append(&v120, v95, v96);
      if (SHIBYTE(v160) < 0) {
        operator delete((void *)valuePtr);
      }
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v158.__r_.__value_.__l.__data_);
      }
      if ((char)v148 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v157.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v156.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v149.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v155.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v154.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v150.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v153.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v152.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
      v70 += 5;
      char v72 = 1;
    }
    while (v70 != v71);
  }
  std::string::append(&v120, " }", 2uLL);
  if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v97 = &v120;
  }
  else {
    v97 = (std::string *)v120.__r_.__value_.__r.__words[0];
  }
  if (v97)
  {
    if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v98 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v98 = v120.__r_.__value_.__l.__size_;
    }
    CFTypeRef v121 = CFStringCreateWithBytes(0, (const UInt8 *)v97, v98, 0x8000100u, 0);
    if (!v121)
    {
      v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v99, "Could not construct");
    }
  }
  else
  {
    CFTypeRef v121 = 0;
  }
  sub_22210(&v173, "session selected format");
  CFTypeRef v100 = v121;
  if (v121) {
    CFRetain(v121);
  }
  v174[0] = v100;
  v145[0] = buf;
  v145[1] = 13;
  uint64_t v101 = 0;
  CFDictionaryRef *v114 = sub_4D3D8((uint64_t)v145);
  do
  {
    v102 = (const void *)v174[v101];
    if (v102) {
      CFRelease(v102);
    }
    v103 = (const void *)v174[v101 - 1];
    if (v103) {
      CFRelease(v103);
    }
    v101 -= 2;
  }
  while (v101 != -26);
  if (v121) {
    CFRelease(v121);
  }
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v120.__r_.__value_.__l.__data_);
  }
  if (v117)
  {
    v118 = (double *)v117;
    operator delete(v117);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v125.__r_.__value_.__l.__data_);
  }
  *(void *)&long long valuePtr = &v122;
  sub_15B944((void ***)&valuePtr);
  if (v112) {
    CFRelease(v112);
  }
  if ((char)v128 < 0) {
    operator delete(v127[0]);
  }
  CFRelease(v27);
  if (v110) {
    CFRelease(v110);
  }
  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v133.__r_.__value_.__l.__data_);
  }
  sub_7F264(v132);
  if (v113) {
    CFRelease(v113);
  }
  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v135.__r_.__value_.__l.__data_);
    if (!v111) {
      goto LABEL_243;
    }
    goto LABEL_242;
  }
  if (v111) {
LABEL_242:
  }
    CFRelease(v111);
LABEL_243:
  if ((char)v138 < 0) {
    operator delete(v137[0]);
  }
  if (v142) {
    CFRelease(v142);
  }
  if ((char)v141 < 0) {
    operator delete(v140[0]);
  }
}

void sub_304D2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFStringRef *sub_305374(CFStringRef *a1, const UInt8 *a2, unsigned char *a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFIndex v8 = &kCFBooleanTrue;
  if (!*a3) {
    CFIndex v8 = &kCFBooleanFalse;
  }
  a1[1] = (CFStringRef)*v8;
  return a1;
}

void sub_305438(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_305464(uint64_t a1, char *a2, const void **a3)
{
  sub_22210((CFStringRef *)a1, a2);
  CFIndex v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

void sub_3054A8(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    CFIndex v5 = (void *)(v4 + 176);
    do
    {
      uint64_t v23 = *(void *)((char *)v3 + 28);
      uint64_t v6 = sub_2EA964(v23, SHIDWORD(v23), *(uint64_t **)(v4 + 144), *(uint64_t **)(v4 + 152));
      if (v6)
      {
        uint64_t v7 = v6;
        id v8 = *(id *)sub_32A48(31);
        unsigned int v9 = v8;
        if (v8)
        {
          BOOL v10 = v8;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            int v11 = *(_DWORD *)(v7 + 8);
            sub_4D60(&__p, (unsigned int *)&v23);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136316162;
            *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4627;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v11;
            __int16 v25 = 2048;
            uint64_t v26 = v7;
            __int16 v27 = 2080;
            uint64_t v28 = p_p;
            _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Notifying device %u (%p) of VAD '%s' that route change failed.", buf, 0x2Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        memset(buf, 0, sizeof(buf));
        sub_3B7EC();
        sub_AF08C(&__p, (uint64_t)&qword_64CC40);
        sub_CBA7C((atomic_ullong *)v7, (uint64_t *)buf);
        sub_AF1B0(&__p);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        sub_EE3E4((void ***)&__p);
      }
      uint64_t v13 = sub_1202D0(v4 + 176, v23, HIDWORD(v23));
      if (v4 + 184 != v13)
      {
        uint64_t v14 = (uint64_t *)v13;
        uint64_t v15 = *(void **)(v13 + 8);
        if (v15)
        {
          do
          {
            CFStringRef v16 = v15;
            uint64_t v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          unint64_t v17 = (void *)v13;
          do
          {
            CFStringRef v16 = (void *)v17[2];
            BOOL v18 = *v16 == (void)v17;
            unint64_t v17 = v16;
          }
          while (!v18);
        }
        if (*v5 == v13) {
          *CFIndex v5 = v16;
        }
        std::string::size_type v19 = *(uint64_t **)(v4 + 184);
        --*(void *)(v4 + 192);
        sub_89144(v19, v14);
        operator delete(v14);
      }
      CFStringRef v20 = (void *)v3[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          CFStringRef v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)v3[2];
          BOOL v18 = *v21 == (void)v3;
          uint64_t v3 = v21;
        }
        while (!v18);
      }
      uint64_t v3 = v21;
    }
    while (v21 != v2);
  }
}

void sub_3059C0(_Unwind_Exception *a1)
{
}

void sub_3059CC(_Unwind_Exception *a1)
{
}

void sub_3059D8(_Unwind_Exception *a1)
{
}

void sub_3059E4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_3059F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_305A10()
{
}

void sub_305A28(uint64_t a1, uint64_t **a2, void *a3)
{
  uint64_t v94 = *(void *)(a1 + 8);
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    uint64_t v3 = *(id *)sub_32A48(13);
    uint64_t v4 = v3;
    if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3944;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The routing mutex is not held by this thread.\"", buf, 0x12u);
    }
  }
  uint64_t v6 = *(void *)(v94 + 144);
  uint64_t v5 = *(void *)(v94 + 152);
  if (v6 != v5)
  {
    uint64_t v7 = a3 + 1;
    while (1)
    {
      uint64_t v8 = *v7;
      if (!*v7) {
        goto LABEL_36;
      }
      unsigned int v9 = *(_DWORD **)v6;
      unsigned int v10 = *(_DWORD *)(*(void *)v6 + 576);
      unsigned int v11 = *(_DWORD *)(*(void *)v6 + 580);
      CFStringRef v12 = a3 + 1;
      do
      {
        unsigned int v13 = *(_DWORD *)(v8 + 28);
        BOOL v15 = v13 == v10;
        BOOL v14 = v13 < v10;
        if (v15) {
          BOOL v14 = *(_DWORD *)(v8 + 32) < v11;
        }
        BOOL v15 = !v14;
        if (v14) {
          CFStringRef v16 = (uint64_t *)(v8 + 8);
        }
        else {
          CFStringRef v16 = (uint64_t *)v8;
        }
        if (v15) {
          CFStringRef v12 = (uint64_t *)v8;
        }
        uint64_t v8 = *v16;
      }
      while (*v16);
      if (v12 == v7) {
        goto LABEL_36;
      }
      unsigned int v17 = *((_DWORD *)v12 + 7);
      BOOL v18 = *((_DWORD *)v12 + 8) > v11;
      BOOL v15 = v17 == v10;
      BOOL v19 = v17 > v10;
      if (v15) {
        BOOL v19 = v18;
      }
      if (v19) {
        goto LABEL_36;
      }
      BOOL v20 = v94 + 184 == sub_1202D0(v94 + 176, v10, v11);
      uint64_t v21 = (*(uint64_t (**)(_DWORD *))(*(void *)v9 + 528))(v9);
      int v22 = pthread_self();
      int v23 = pthread_equal(v22, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v21 + 16), memory_order_acquire));
      if (v20) {
        break;
      }
      if (v23) {
        goto LABEL_36;
      }
      CFStringRef v24 = pthread_self();
      if (pthread_equal(v24, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v21 + 104), memory_order_acquire)))
      {
        goto LABEL_36;
      }
      __int16 v25 = *(id *)sub_32A48(13);
      uint64_t v26 = v25;
      if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        int v27 = v9[2];
        *(_DWORD *)buf = 136315906;
        *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3953;
        __int16 v103 = 1024;
        int v104 = v27;
        __int16 v105 = 2048;
        v106 = v9;
        uint64_t v28 = v26;
        unsigned int v29 = "%25s:%-5d ASSERTION FAILURE: \"deviceRouteChangeInProgess is true, but the IO monitor for device ID %u (%p"
              ") is not held by this thread.\"";
LABEL_34:
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, v29, buf, 0x22u);
      }
LABEL_35:

LABEL_36:
      v6 += 8;
      if (v6 == v5) {
        goto LABEL_37;
      }
    }
    if (!v23)
    {
      uint64_t v30 = pthread_self();
      if (!pthread_equal(v30, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v21 + 104), memory_order_acquire)))goto LABEL_36; {
    }
      }
    uint64_t v31 = *(id *)sub_32A48(13);
    uint64_t v26 = v31;
    if (!v31 || !os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      goto LABEL_35;
    }
    int v32 = v9[2];
    *(_DWORD *)buf = 136315906;
    *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3956;
    __int16 v103 = 1024;
    int v104 = v32;
    __int16 v105 = 2048;
    v106 = v9;
    uint64_t v28 = v26;
    unsigned int v29 = "%25s:%-5d ASSERTION FAILURE: \"deviceRouteChangeInProgess is false, but the IO monitor for device ID %u (%p) i"
          "s held by this thread.\"";
    goto LABEL_34;
  }
LABEL_37:
  uint64_t v34 = *a2;
  CFStringRef v33 = a2[1];
  if (*a2 != v33)
  {
    while (*(_DWORD *)(*v34 + 4) || *(_DWORD *)*v34 != 1986291046)
    {
      v34 += 27;
      if (v34 == v33) {
        goto LABEL_41;
      }
    }
  }
  if (v33 == v34)
  {
LABEL_41:
    uint64_t v35 = *(id *)sub_32A48(13);
    char v36 = v35;
    if (v35)
    {
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3962;
        _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_F2720(theDict, *(void *)(v94 + 216) + 8);
  if (v101 && theDict[0] && CFDictionaryGetCount(theDict[0]))
  {
    int v38 = *((_DWORD *)v34 + 3);
    if (v38 <= 1987077986)
    {
      if (v38 == 1768057203) {
        goto LABEL_68;
      }
      int v39 = 1919776355;
    }
    else
    {
      if (v38 == 1987077987 || v38 == 1987081833) {
        goto LABEL_68;
      }
      int v39 = 1987081839;
    }
    if (v38 == v39) {
      goto LABEL_68;
    }
    int v40 = *((_DWORD *)v34 + 2);
    if (v40 > 1668313714)
    {
      if (v40 != 1668313715 && v40 != 1668703084)
      {
        int v41 = 1668576377;
LABEL_63:
        if (v40 != v41) {
          goto LABEL_68;
        }
      }
    }
    else if (v40 != 1668301427 && v40 != 1668309362)
    {
      int v41 = 1668313666;
      goto LABEL_63;
    }
    long long v42 = *(id *)sub_32A48(2);
    uint64_t v43 = v42;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3971;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VP block was provided in a play and record category, but not in a chat mode! Please file a bug against \"Audio (New Bugs)\". Will need to figure out what app has a malformed session.", buf, 0x12u);
    }
  }
LABEL_68:
  if (*(void *)(v94 + 144) != *(void *)(v94 + 152))
  {
    long long v44 = *a2;
    v45 = a2[1];
    if (*a2 != v45)
    {
      do
      {
        uint64_t v46 = *v44;
        v109[0] = off_6330B8;
        v109[3] = v109;
        sub_241504((uint64_t)buf, (void *)(v46 + 16), (uint64_t)v109);
        sub_6AFD4(v109);
        std::string::size_type v98 = 0;
        uint64_t v99 = 0;
        v97 = &v98;
        v47 = *(std::__shared_weak_count ***)buf;
        if (*(unsigned char **)buf != &buf[8])
        {
          do
          {
            long long v48 = std::__shared_weak_count::lock(v47[5]);
            unint64_t v49 = (unint64_t)v47[4][8].__vftable;
            long long v50 = v98;
            v51 = &v98;
            std::string::size_type v52 = &v98;
            if (v98)
            {
              while (1)
              {
                while (1)
                {
                  std::string::size_type v52 = (uint64_t **)v50;
                  unint64_t v53 = v50[4];
                  if (v49 >= v53) {
                    break;
                  }
                  long long v50 = *v52;
                  v51 = v52;
                  if (!*v52) {
                    goto LABEL_78;
                  }
                }
                if (v53 >= v49) {
                  break;
                }
                long long v50 = v52[1];
                if (!v50)
                {
                  v51 = v52 + 1;
                  goto LABEL_78;
                }
              }
            }
            else
            {
LABEL_78:
              long long v54 = (uint64_t *)operator new(0x28uLL);
              v54[4] = v49;
              *long long v54 = 0;
              v54[1] = 0;
              v54[2] = (uint64_t)v52;
              std::string *v51 = v54;
              if (*v97)
              {
                v97 = (uint64_t **)*v97;
                long long v54 = *v51;
              }
              sub_46D00(v98, v54);
              ++v99;
            }
            sub_4636C(v48);
            v55 = v47[1];
            if (v55)
            {
              do
              {
                long long v56 = (std::__shared_weak_count **)v55;
                v55 = (std::__shared_weak_count *)v55->__vftable;
              }
              while (v55);
            }
            else
            {
              do
              {
                long long v56 = (std::__shared_weak_count **)v47[2];
                BOOL v15 = *v56 == (std::__shared_weak_count *)v47;
                v47 = v56;
              }
              while (!v15);
            }
            v47 = v56;
          }
          while (v56 != (std::__shared_weak_count **)&buf[8]);
          v57 = v97;
          if (v97 != &v98)
          {
            do
            {
              (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*v57[4] + 232))(v57[4], v94 + 376, v44);
              std::string::size_type v58 = v57[1];
              if (v58)
              {
                do
                {
                  v59 = (uint64_t **)v58;
                  std::string::size_type v58 = (uint64_t *)*v58;
                }
                while (v58);
              }
              else
              {
                do
                {
                  v59 = (uint64_t **)v57[2];
                  BOOL v15 = *v59 == (uint64_t *)v57;
                  v57 = v59;
                }
                while (!v15);
              }
              v57 = v59;
            }
            while (v59 != &v98);
          }
        }
        sub_463E0(v98);
        sub_10E118(*(void **)&buf[8]);
        v44 += 27;
      }
      while (v44 != v45);
    }
  }
  std::string::size_type v98 = 0;
  uint64_t v99 = 0;
  v97 = &v98;
  long long v60 = *(void **)(v94 + 176);
  long long v62 = a3 + 1;
  v61 = (void *)*a3;
  *(void *)buf = &v97;
  *(void *)&buf[8] = &v98;
  if (v60 == (void *)(v94 + 184) || v61 == v62) {
    goto LABEL_123;
  }
  do
  {
    unsigned int v63 = *((_DWORD *)v60 + 7);
    unsigned int v64 = *((_DWORD *)v60 + 8);
    unsigned int v65 = *((_DWORD *)v61 + 7);
    unsigned int v66 = *((_DWORD *)v61 + 8);
    BOOL v67 = v64 < v66;
    if (v63 != v65) {
      BOOL v67 = v63 < v65;
    }
    if (v67)
    {
      CFStringRef v68 = (void *)v60[1];
      if (v68)
      {
        do
        {
          long long v60 = v68;
          CFStringRef v68 = (void *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          uint64_t v69 = v60;
          long long v60 = (void *)v60[2];
        }
        while ((void *)*v60 != v69);
      }
    }
    else
    {
      BOOL v70 = v66 < v64;
      if (v63 == v65) {
        BOOL v71 = v70;
      }
      else {
        BOOL v71 = v65 < v63;
      }
      if (v71)
      {
        char v72 = v60;
      }
      else
      {
        sub_3065A8((uint64_t)buf, (unsigned int *)v60 + 7);
        v73 = (void *)v60[1];
        if (v73)
        {
          do
          {
            char v72 = v73;
            v73 = (void *)*v73;
          }
          while (v73);
        }
        else
        {
          do
          {
            char v72 = (void *)v60[2];
            BOOL v15 = *v72 == (void)v60;
            long long v60 = v72;
          }
          while (!v15);
        }
      }
      long long v74 = (void *)v61[1];
      if (v74)
      {
        do
        {
          v61 = v74;
          long long v74 = (void *)*v74;
        }
        while (v74);
      }
      else
      {
        do
        {
          v75 = v61;
          v61 = (void *)v61[2];
        }
        while ((void *)*v61 != v75);
      }
      long long v60 = v72;
    }
  }
  while (v60 != (void *)(v94 + 184) && v61 != v62);
  if (!v99)
  {
LABEL_123:
    long long v76 = (void *)*a3;
    if ((void *)*a3 != v62)
    {
      do
      {
        uint64_t v77 = *(void *)((char *)v76 + 28);
        uint64_t v96 = v77;
        uint64_t v78 = sub_2EA964(v77, SHIDWORD(v77), *(uint64_t **)(v94 + 144), *(uint64_t **)(v94 + 152));
        if (v78)
        {
          uint64_t v79 = v78;
          uint64_t v80 = sub_32A48(2);
          if (*(unsigned char *)(v80 + 8))
          {
            id v81 = *(id *)v80;
            if (v81)
            {
              long long v82 = v81;
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
              {
                int v83 = *(_DWORD *)(v79 + 8);
                sub_4D60(&__p, (unsigned int *)&v96);
                std::string::size_type v84 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &__p
                    : (std::string *)__p.__r_.__value_.__r.__words[0];
                *(_DWORD *)buf = 136316162;
                *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4006;
                __int16 v103 = 1024;
                int v104 = v83;
                __int16 v105 = 2048;
                v106 = (_DWORD *)v79;
                __int16 v107 = 2080;
                v108 = v84;
                _os_log_impl(&def_1E50E8, v82, OS_LOG_TYPE_DEBUG, "%25s:%-5d Notifying device %u (%p) %s to prepare for route change", buf, 0x2Cu);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
          }
          sub_C0A40((atomic_ullong *)v79);
        }
        sub_125D8C((uint64_t **)(v94 + 176), v77, HIDWORD(v77), &v96);
        v85 = (void *)v76[1];
        if (v85)
        {
          do
          {
            long long v86 = v85;
            v85 = (void *)*v85;
          }
          while (v85);
        }
        else
        {
          do
          {
            long long v86 = (void *)v76[2];
            BOOL v15 = *v86 == (void)v76;
            long long v76 = v86;
          }
          while (!v15);
        }
        long long v76 = v86;
      }
      while (v86 != v62);
    }
  }
  v87 = *a2;
  long long v88 = a2[1];
LABEL_142:
  if (v87 != v88)
  {
    uint64_t v89 = *v87 + 16;
    for (uint64_t i = *(void *)(*v87 + 24); ; uint64_t i = *(void *)(i + 8))
    {
      if (i == v89)
      {
        v87 += 27;
        goto LABEL_142;
      }
      if (sub_241364(1886545251, (uint64_t *)(i + 16))) {
        break;
      }
    }
    v91 = *(void (**)(void))(v94 + 200);
    if (v91) {
      v91(*(void *)(v94 + 208));
    }
  }
  sub_463E0(v98);
  if (v101) {
    sub_80594((uint64_t)theDict);
  }
}

void sub_306508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a24) {
    sub_80594((uint64_t)&a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3065A8(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = sub_127EA0(*(uint64_t ***)a1, *(uint64_t **)(a1 + 8), *a2, a2[1], (uint64_t *)a2);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      uint64_t v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_306614(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int16 *)(a2 + 184) >> 4) & 1;
}

void sub_306628(uint64_t a1, void *a2)
{
  *a2 = off_6330B8;
}

void *sub_306648()
{
  result = operator new(0x10uLL);
  void *result = off_6330B8;
  return result;
}

void sub_306680()
{
}

void sub_306698()
{
}

void sub_3066B0(void *a1, int a2)
{
  sub_3926E0((uint64_t)a1, a2);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_6588D8, memory_order_acquire) != -1)
  {
    *(void *)buf = &v24;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::__call_once(&qword_6588D8, &__p, (void (__cdecl *)(void *))sub_306B94);
  }
  if ((byte_64BB11 & 1) == 0)
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t v3 = getenv("AudioRoutingEngine");
    if (!v3) {
      goto LABEL_8;
    }
    sub_63574(&__p, v3);
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
LABEL_8:
      CFStringRef v5 = (const __CFString *)CFPreferencesCopyValue(@"AudioRoutingEngine", @"com.apple.celestial", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
      if (v5)
      {
        sub_21B7C(buf, v5);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string __p = *(std::string *)buf;
        CFRelease(v5);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v6 = __p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_)
      {
        byte_64BB11 = 1;
LABEL_33:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_34;
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::size_type v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
      {
        byte_64BB11 = 1;
        goto LABEL_34;
      }
      p_p = &__p;
    }
    uint64_t v8 = (std::string *)((char *)p_p + v6);
    while (p_p != v8)
    {
      p_p->__r_.__value_.__s.__data_[0] = __tolower(p_p->__r_.__value_.__s.__data_[0]);
      p_p = (std::string *)((char *)p_p + 1);
    }
    unsigned int v9 = (os_log_t *)sub_32A48(13);
    unsigned int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unsigned int v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&buf[4] = "RunTimeDefaults.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 266;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "com.apple.celestial AudioRoutingEngine";
      __int16 v27 = 2080;
      uint64_t v28 = v11;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %s.", buf, 0x26u);
    }
    int v12 = std::string::compare(&__p, "virtualaudio");
    if (!v12 || !std::string::compare(&__p, "none") || !std::string::compare(&__p, "mecca")) {
      byte_64BB10 = v12 != 0;
    }
    byte_64BB11 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_33;
    }
  }
LABEL_34:
  int v13 = byte_64BB10;
  uint64_t v14 = sub_32A48(2);
  if (v13)
  {
    BOOL v15 = *(id *)v14;
    CFStringRef v16 = v15;
    if (v15)
    {
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5049;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Using Virtual Audio Plug-In: NO", buf, 0x12u);
      }
    }
  }
  else
  {
    if (*(unsigned char *)(v14 + 8))
    {
      unsigned int v17 = *(id *)v14;
      if (v17)
      {
        BOOL v18 = v17;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 5054;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using Virtual Audio Plug-In: YES", buf, 0x12u);
        }
      }
    }
    __p.__r_.__value_.__r.__words[0] = 0x676C6F62696E6F74;
    LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
    OSStatus v19 = AudioObjectAddPropertyListener(1u, (const AudioObjectPropertyAddress *)&__p, (AudioObjectPropertyListenerProc)sub_2DCC94, a1);
    if (v19)
    {
      uint64_t v20 = sub_32A48(13);
      uint64_t v21 = sub_7D5E8(1, *(void **)v20, *(void *)(v20 + 8));
      int v22 = v21;
      if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 5063;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theError) [error theError is an error]: \"error registering a kAudioHardwarePropertyIsInitingOrExiting property listener with the HAL system\"", buf, 0x12u);
      }

      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = v19;
    }
  }
}

void sub_306B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_306B94()
{
  sub_32A48(0);
  v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
    {
      int v2 = 136315394;
      uint64_t v3 = "Log.cpp";
      __int16 v4 = 1024;
      int v5 = 115;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Virtual Audio logging has been initialized.", (uint8_t *)&v2, 0x12u);
    }
  }
}

uint64_t sub_306C58(uint64_t a1, void *a2, int a3)
{
  uint64_t v3 = a2 + 1;
  __int16 v4 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = sub_E1B78(*(void *)(a1 + 128), *((_DWORD *)v4 + 7));
    if (v7)
    {
      uint64_t v8 = *(std::__shared_weak_count **)(v7 + 96);
      if (v8)
      {
        uint64_t v9 = *(void *)(v7 + 88);
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        unsigned int v10 = std::__shared_weak_count::lock(v8);
        std::__shared_weak_count::__release_weak(v8);
        if (v10) {
          break;
        }
      }
    }
LABEL_8:
    unsigned int v11 = (void *)v4[1];
    if (v11)
    {
      do
      {
        int v12 = v11;
        unsigned int v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        int v12 = (void *)v4[2];
        BOOL v13 = *v12 == (void)v4;
        __int16 v4 = v12;
      }
      while (!v13);
    }
    __int16 v4 = v12;
    if (v12 == v3) {
      return 0;
    }
  }
  if (!v9 || *(_DWORD *)(v9 + 144) != a3)
  {
    sub_4636C(v10);
    goto LABEL_8;
  }
  sub_4636C(v10);
  return 1;
}

uint64_t sub_306D48(uint64_t a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v6 = sub_298DA4();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 304))(v6) & 1) == 0)
  {
    uint64_t v18 = sub_32A48(13);
    OSStatus v19 = sub_7D5E8(1, *(void **)v18, *(void *)(v18 + 8));
    uint64_t v20 = v19;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2530;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Attempt to change routes prior to establishing a valid serialization context.\"", buf, 0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  sub_3B7EC();
  (*(void (**)(void))(qword_64CC40 + 16))();
  std::string::size_type v47 = a2;
  *(void *)buf = off_632EE8;
  *(void *)&buf[8] = &v47;
  *(void *)&v44[4] = buf;
  sub_528DC(v48, 0, (uint64_t)buf);
  sub_4F750(buf);
  v7.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_RouteChange", 0xEuLL) == &qword_659450)
  {
    os_signpost_id_t v8 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v8 = os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    uint64_t v9 = (id)qword_659470;
    unsigned int v10 = v9;
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "VA_RouteChange", "Route configuration change", buf, 2u);
    }
  }
  os_signpost_id_t v35 = v8;
  uint64_t v11 = sub_32A48(42);
  if (*(unsigned char *)(v11 + 8))
  {
    int v12 = *(id *)v11;
    if (v12)
    {
      BOOL v13 = v12;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "SignpostUtilities.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 85;
        __int16 v43 = 2080;
        *(void *)long long v44 = "kRouteChange";
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }
  uint64_t v14 = *(void *)(a3 + 24);
  if (!v14) {
    sub_56964();
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v14 + 48))(buf);
  *(double *)&v44[4] = (double)((std::chrono::system_clock::now().__d_.__rep_ - v7.__d_.__rep_) / 1000);
  char v45 = 1;
  sub_2E8BE0((uint64_t)&v31, a2, (uint64_t)buf);
  if (v31)
  {
    uint64_t v22 = sub_32A48(13);
    int v23 = sub_7D5E8(1, *(void **)v22, *(void *)(v22 + 8));
    char v24 = v23;
    if (v23)
    {
      __int16 v25 = v23;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v31);
        uint64_t v26 = v30 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)char v36 = 136315650;
        char v37 = "VirtualAudio_PlugIn.mm";
        __int16 v38 = 1024;
        int v39 = 2549;
        __int16 v40 = 2080;
        int v41 = v26;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (routeUpdateInfo.first): \"Route change failed: %s.\"", v36, 0x1Cu);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    __int16 v27 = __cxa_allocate_exception(0x10uLL);
    unsigned int v28 = v31;
    *(void *)__int16 v27 = &off_6414D8;
    v27[2] = v28;
  }
  *(_DWORD *)a1 = *(_DWORD *)&buf[12];
  CFTypeRef v15 = cf;
  *(void *)(a1 + 8) = cf;
  int v16 = v33;
  *(unsigned char *)(a1 + 16) = v33;
  *(unsigned char *)(a1 + 17) = v34;
  if (v16 && v15) {
    CFRetain(v15);
  }
  sub_80594((uint64_t)&cf);
  if (v46[744]) {
    sub_2E9FD8((uint64_t)v46);
  }
  sub_11A520(buf);
  sub_30DDE8(&v35);
  return sub_52588((uint64_t)v48);
}

void sub_3072F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  os_signpost_id_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);

  sub_80594((uint64_t)va);
  sub_2EA138((uint64_t)va2);
  sub_30DDE8((os_signpost_id_t *)va1);
  sub_52588(v6);
  _Unwind_Resume(a1);
}

void *sub_307370(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

NSObject *sub_3073F4(uint64_t a1)
{
  sub_3B7EC();
  long long v42 = &qword_64CC40;
  char v43 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  sub_F2720(v41, *(void *)(a1 + 216) + 8);
  sub_F2778((uint64_t)buf, a1 + 224, (uint64_t)v41, *(_DWORD *)(a1 + 492), a1 + 440);
  uint64_t v2 = **(void **)(a1 + 112);
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v3 = v2 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 >= *(_DWORD *)buf;
    if (v7 >= *(_DWORD *)buf) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(_DWORD *)(v6 + 32) <= *(_DWORD *)buf)
  {
    unsigned __int16 v30 = sub_37C624(v6 + 80, v47);
    if ((_BYTE)v30) {
      BOOL v31 = 0;
    }
    else {
      BOOL v31 = v30 >= 0x100u;
    }
    char v10 = !v31;
  }
  else
  {
LABEL_12:
    char v10 = 1;
  }
  sub_463E0(*(void **)&v51[4]);
  if (v41[16]) {
    sub_80594((uint64_t)v41);
  }
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 216);
    if (*(unsigned char *)v11 && *(void *)(v11 + 32))
    {
      uint64_t v12 = sub_2EA964(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
      unint64_t v13 = sub_30D834(a1, v12);
      if (HIDWORD(v13))
      {
        float v14 = *(float *)&v13;
        if (*(float *)&v13 != (float)*(unsigned int *)(*(void *)(a1 + 216) + 48))
        {
          uint64_t v15 = *(id *)sub_32A48(2);
          uint64_t v16 = v15;
          if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136315650;
            std::string::size_type v47 = "VirtualAudio_PlugIn.mm";
            __int16 v48 = 1024;
            int v49 = 2001;
            __int16 v50 = 2048;
            *(double *)v51 = v14;
            _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_INFO, "%25s:%-5d Setting beam direction (%f) on VP", buf, 0x1Cu);
          }

          sub_30DCD0(*(void *)(a1 + 216), v14);
          goto LABEL_66;
        }
      }
      goto LABEL_61;
    }
    uint64_t v20 = *(uint64_t **)(a1 + 144);
    uint64_t v21 = *(uint64_t **)(a1 + 152);
    uint64_t v22 = sub_2EA964(1986291305, 0, v20, v21);
    if (v22)
    {
      uint64_t v23 = v22;
      if ((*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(v22 + 1008) + 352))(*(void *)(v22 + 1008), 1650814258, 0, 0))goto LABEL_33; {
      uint64_t v20 = *(uint64_t **)(a1 + 144);
      }
      uint64_t v21 = *(uint64_t **)(a1 + 152);
    }
    uint64_t v23 = sub_2EA964(1986291046, 0, v20, v21);
    if (!v23)
    {
      uint64_t v37 = sub_32A48(13);
      __int16 v38 = sub_7D5E8(1, *(void **)v37, *(void *)(v37 + 8));
      int v39 = v38;
      if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        std::string::size_type v47 = "VirtualAudio_PlugIn.mm";
        __int16 v48 = 1024;
        int v49 = 2056;
        _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [deviceToUpdate is NULL]: \"VAD is Null on Setting Beam Direction\"", buf, 0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "VAD is Null on Setting Beam Direction");
    }
LABEL_33:
    unint64_t v24 = sub_30D834(a1, v23);
    if (HIDWORD(v24))
    {
      float v25 = *(float *)&v24;
      sub_30DCD0(*(void *)(a1 + 216), *(float *)&v24);
      if ((*(unsigned int (**)(void, uint64_t, void, void))(**(void **)(v23 + 1008) + 352))(*(void *)(v23 + 1008), 1650814258, 0, 0)&& (*(float (**)(void, uint64_t, void, void))(**(void **)(v23 + 1008) + 360))(*(void *)(v23 + 1008), 1650814258, 0, 0) != v25)
      {
        uint64_t v26 = 1650814258;
        id v27 = *(id *)sub_32A48(2);
        if (v27)
        {
          unsigned int v28 = v27;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
          {
            uint64_t v44 = *(void *)(v23 + 576);
            sub_4D60(&__p, (unsigned int *)&v44);
            unsigned int v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315906;
            std::string::size_type v47 = "VirtualAudio_PlugIn.mm";
            __int16 v48 = 1024;
            int v49 = 2016;
            __int16 v50 = 2048;
            *(double *)v51 = v25;
            *(_WORD *)&v51[8] = 2080;
            *(void *)&v51[10] = v29;
            _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_INFO, "%25s:%-5d Applying beam direction preference (%f) on VAD: '%s'.", buf, 0x26u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          unsigned int v28 = 0;
        }
        uint64_t v34 = 0;
LABEL_65:

        (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(v23 + 1008) + 368))(*(void *)(v23 + 1008), v26, v34, 0, v25);
LABEL_66:
        OSStatus v19 = (&def_1E50E8 + 1);
        goto LABEL_62;
      }
      if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v23 + 1008) + 384))(*(void *)(v23 + 1008), 1685287015, 1818980210, 0)&& (*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v23 + 1008) + 352))(*(void *)(v23 + 1008), 1685287015, 1667524978, 0)&& (*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v23 + 1008) + 352))(*(void *)(v23 + 1008), 1685287015, 1667657590, 0)&& (*(float (**)(void, uint64_t, uint64_t, void))(**(void **)(v23 + 1008) + 360))(*(void *)(v23 + 1008), 1685287015, 1667524978, 0) != v25)
      {
        int v32 = *(id *)sub_32A48(2);
        unsigned __int8 v33 = v32;
        if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          std::string::size_type v47 = "VirtualAudio_PlugIn.mm";
          __int16 v48 = 1024;
          int v49 = 2034;
          __int16 v50 = 1024;
          *(_DWORD *)v51 = (int)v25;
          _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_INFO, "%25s:%-5d Setting camera direction %d on DSP", buf, 0x18u);
        }

        (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(v23 + 1008) + 368))(*(void *)(v23 + 1008), 1685287015, 1667524978, 0, v25);
        uint64_t v26 = 1685287015;
        uint64_t v34 = 1667657590;
        os_signpost_id_t v35 = *(id *)sub_32A48(2);
        unsigned int v28 = v35;
        if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          std::string::size_type v47 = "VirtualAudio_PlugIn.mm";
          __int16 v48 = 1024;
          int v49 = 2037;
          __int16 v50 = 2048;
          *(void *)v51 = 0x404B000000000000;
          _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_INFO, "%25s:%-5d Setting camera fov %f on DSP", buf, 0x1Cu);
        }
        float v25 = 54.0;
        goto LABEL_65;
      }
    }
LABEL_61:
    OSStatus v19 = 0;
    goto LABEL_62;
  }
  uint64_t v17 = sub_32A48(2);
  if ((*(unsigned char *)(v17 + 8) & 1) == 0) {
    goto LABEL_61;
  }
  uint64_t v18 = *(id *)v17;
  OSStatus v19 = v18;
  if (v18)
  {
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      std::string::size_type v47 = "VirtualAudio_PlugIn.mm";
      __int16 v48 = 1024;
      int v49 = 1958;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ignoring all beam former preferences based on current category and mode", buf, 0x12u);
    }

    goto LABEL_61;
  }
LABEL_62:
  sub_3BCAC(&v42);
  return v19;
}

void sub_307C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

void sub_307CF8(uint64_t **a1)
{
  uint64_t v2 = *(id *)sub_32A48(2);
  uint64_t v3 = v2;
  if (v2 && os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    unsigned int v7 = "VirtualAudio_PlugIn.mm";
    __int16 v8 = 1024;
    int v9 = 1060;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_INFO, "%25s:%-5d PV_OverlayTunings for devices", (uint8_t *)&v6, 0x12u);
  }

  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  while (v5 != v4)
  {
    if (*v5) {
      sub_C7754(*v5);
    }
    ++v5;
  }
}

void sub_307DE4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_307E38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = sub_2EA964(1986291046, 0, a1, a2);
  uint64_t v3 = operator new(8uLL);
  void *v3 = 0xC2F0000000000000;
  uint64_t v4 = *(id *)sub_32A48(2);
  uint64_t v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = 136315394;
    unsigned int v7 = "VirtualAudio_PlugIn.mm";
    __int16 v8 = 1024;
    int v9 = 7341;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring Earplug DSP", (uint8_t *)&v6, 0x12u);
  }

  (*(void (**)(void, uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(**(void **)(v2 + 1008) + 400))(*(void *)(v2 + 1008), 1886156135, 64002, v3, 8, 1, 0);
  operator delete(v3);
}

void sub_307F90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_307FB0(uint64_t a1, uint64_t a2)
{
  sub_3B7EC();
  BOOL v67 = &qword_64CC40;
  char v68 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  if (MGGetSInt32Answer() != 4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v66 = 0;
    int __val = 2;
    strcpy(buf, "rpscgcrv");
    unsigned char buf[12] = 0;
    *(void *)&buf[16] = &buf[24];
    *(void *)&uint8_t buf[24] = 0;
    char v72 = 0;
    v73 = 0;
    uint64_t v70 = 0;
    BOOL v71 = &v72;
    long long v74 = &v75;
    uint64_t v75 = 0;
    v78[0] = 0;
    v78[1] = 0;
    CFTypeRef cf = 0;
    uint64_t v77 = v78;
    v79[0] = 0;
    v79[1] = 0;
    v78[2] = v79;
    char v80 = 0;
    char v81 = 0;
    memset(&v84, 0, sizeof(v84));
    uint64_t v85 = 0x756E64656175746FLL;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    uint64_t v91 = 1065353216;
    long long v92 = 0u;
    long long v93 = 0u;
    uint64_t v94 = 1065353216;
    long long v95 = 0u;
    long long v96 = 0u;
    uint64_t v97 = 1065353216;
    char v98 = 0;
    char v99 = 0;
    char v101 = 0;
    char v102 = 0;
    int v100 = 0;
    int v12 = *(_DWORD *)(a2 + 240);
    int v82 = 1668248944;
    int v83 = v12;
    std::string::operator=(&v84, (const std::string *)(a2 + 248));
    uint64_t v85 = *(void *)(a2 + 272);
    sub_147760((uint64_t)&v62, *(uint64_t **)(a2 + 112), (uint64_t)buf, &qword_6588A0, 0);
    int __val = (int)v62.__r_.__value_.__l.__data_;
    unint64_t v13 = (uint64_t *)__p[0];
    if (__p[0])
    {
      float v14 = (uint64_t *)__p[1];
      uint64_t v15 = __p[0];
      if (__p[1] != __p[0])
      {
        do
        {
          uint64_t v16 = v14 - 4;
          sub_8108(v14 - 3);
          float v14 = v16;
        }
        while (v16 != v13);
        uint64_t v15 = __p[0];
      }
      __p[1] = v13;
      operator delete(v15);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)&v62.__r_.__value_.__r.__words[1];
    uint64_t v66 = v63;
    uint64_t v63 = 0;
    *(_OWORD *)&v62.__r_.__value_.__r.__words[1] = 0uLL;
    p_std::string::size_type size = &v62.__r_.__value_.__l.__size_;
    sub_1486D0((void ***)&p_size);
    sub_143D84((uint64_t)buf);
    if (__val)
    {
      id v17 = *(id *)sub_32A48(1);
      uint64_t v18 = v17;
      if (v17)
      {
        OSStatus v19 = v17;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          std::to_string(&v62, __val);
          uint64_t v20 = (v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v62
              : (std::string *)v62.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7623;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Couldn't find active ports for speech recognition: '%s'.", buf, 0x1Cu);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
        }
      }
      *(_DWORD *)a1 = 1936289391;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
LABEL_110:
      *(void *)buf = __p;
      sub_1486D0((void ***)buf);
      return sub_3BCAC(&v67);
    }
    memset(&v62, 0, sizeof(v62));
    uint64_t v21 = __p[0];
    if (__p[0] != __p[1])
    {
      while (v21[1] || *v21 != 1986291046)
      {
        v21 += 8;
        if (v21 == __p[1]) {
          goto LABEL_35;
        }
      }
    }
    if (v21 == __p[1])
    {
LABEL_35:
      uint64_t v23 = sub_32A48(13);
      unint64_t v24 = sub_7D5E8(1, *(void **)v23, *(void *)(v23 + 8));
      float v25 = v24;
      if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7635;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to find default VAD\"", buf, 0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to find default VAD");
    }
    memset(buf, 0, 24);
    strcpy(&buf[24], "cwdv");
    LOBYTE(v70) = 0;
    LODWORD(v71) = 3;
    v73 = 0;
    long long v74 = 0;
    char v72 = &v73;
    CFTypeRef cf = 0;
    LODWORD(v75) = 44731034;
    sub_2E3690((uint64_t *)&p_size, a2, (uint64_t)(v21 + 2), (uint64_t)buf);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v73);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    id v27 = __p[0];
    unsigned int v28 = __p[1];
    if (__p[0] != __p[1])
    {
      while (v27[1] || *v27 != 1987276900)
      {
        v27 += 8;
        if (v27 == __p[1])
        {
          id v27 = __p[1];
          break;
        }
      }
    }
    uint64_t v30 = sub_32A48(8);
    if (*(unsigned char *)(v30 + 8))
    {
      id v31 = *(id *)v30;
      if (v31)
      {
        int v32 = v31;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(&v59, *(_DWORD *)(a2 + 240));
          unsigned __int8 v33 = (v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v59
              : (std::string *)v59.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7651;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v33;
          _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Using mClientRequestedActivationInfo %s.", buf, 0x1Cu);
          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v59.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    uint64_t v34 = __p[0];
    os_signpost_id_t v35 = __p[1];
    if (__p[0] != __p[1])
    {
      while (v34[1] || *v34 != 1987277417)
      {
        v34 += 8;
        if (v34 == __p[1])
        {
          uint64_t v34 = __p[1];
          break;
        }
      }
    }
    int v37 = *(_DWORD *)(a2 + 240);
    if (v37 > 1752396913)
    {
      if (v37 == 1918986611 || v37 == 1752396914)
      {
        int v41 = *(id *)sub_32A48(2);
        long long v42 = v41;
        if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7664;
          _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d activation trigger is raiseToSpeak or HS Training", buf, 0x12u);
        }

        if (v27 == v28) {
          int v43 = -2569;
        }
        else {
          int v43 = 1269;
        }
        int v39 = v43 + 1936289391;
        goto LABEL_89;
      }
    }
    else if (v37 == 1651795060 || v37 == 1751414371)
    {
      goto LABEL_73;
    }
    int v53 = sub_F09C4(*(_DWORD *)(a2 + 240)) ^ 1;
    if (v37 == 1684108899) {
      LOBYTE(v53) = 0;
    }
    if (v53)
    {
      if (v34 == v35)
      {
        if (sub_30D648(p_size, v61, a2))
        {
          int v39 = 1936289391;
          if (sub_30D72C(p_size, v61, a2))
          {
            sub_30D370((uint64_t)buf, a2, &p_size);
            if ((_BYTE)v70) {
              int v39 = *(_DWORD *)buf;
            }
            else {
              int v39 = 1936289391;
            }
            if ((_BYTE)v70)
            {
              if ((buf[31] & 0x80000000) != 0) {
                sub_21E8C(&v59, *(void **)&buf[8], *(unint64_t *)&buf[16]);
              }
              else {
                std::string v59 = *(std::string *)&buf[8];
              }
            }
            else
            {
              sub_21C8C(&v59, "");
            }
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
            std::string v62 = v59;
            if ((_BYTE)v70 && (buf[31] & 0x80000000) != 0) {
              operator delete(*(void **)&buf[8]);
            }
          }
        }
        else
        {
          int v39 = 1936289391;
        }
      }
      else
      {
        memset(buf, 0, 24);
        strcpy(&buf[24], "cwdv");
        LOBYTE(v70) = 0;
        LODWORD(v71) = 3;
        v73 = 0;
        long long v74 = 0;
        char v72 = &v73;
        CFTypeRef cf = 0;
        LODWORD(v75) = 44731034;
        sub_2E3690((uint64_t *)&v59, a2, (uint64_t)(v34 + 2), (uint64_t)buf);
        sub_470A4((uint64_t)buf);
        sub_30D370((uint64_t)buf, a2, &v59);
        if ((_BYTE)v70) {
          int v39 = *(_DWORD *)buf;
        }
        else {
          int v39 = 1936289391;
        }
        if ((_BYTE)v70)
        {
          if ((buf[31] & 0x80000000) != 0) {
            sub_21E8C(&__dst, *(void **)&buf[8], *(unint64_t *)&buf[16]);
          }
          else {
            std::string __dst = *(std::string *)&buf[8];
          }
        }
        else
        {
          sub_21C8C(&__dst, "");
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        std::string v62 = __dst;
        if ((_BYTE)v70 && (buf[31] & 0x80000000) != 0) {
          operator delete(*(void **)&buf[8]);
        }
        sub_463E0((void *)v59.__r_.__value_.__l.__size_);
      }
      goto LABEL_89;
    }
LABEL_73:
    std::string::operator=(&v62, (const std::string *)(a2 + 248));
    if (*(_DWORD *)(a2 + 240) == 1684108899) {
      int v39 = 1936024681;
    }
    else {
      int v39 = 1936679529;
    }
LABEL_89:
    std::string::size_type size = HIBYTE(v62.__r_.__value_.__r.__words[2]);
    if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v62.__r_.__value_.__l.__size_;
    }
    if (v27 == v28) {
      int v45 = 1936286822;
    }
    else {
      int v45 = 1936290660;
    }
    if (size) {
      unsigned int v46 = v39;
    }
    else {
      unsigned int v46 = v45;
    }
    id v47 = *(id *)sub_32A48(2);
    __int16 v48 = v47;
    if (v47)
    {
      int v49 = v47;
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(&v59, v46);
        __int16 v50 = (v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v59
            : (std::string *)v59.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7725;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v50;
        _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Siri input source: %s.", buf, 0x1Cu);
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
      }
    }
    *(_DWORD *)a1 = v46;
    v51 = (std::string *)(a1 + 8);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      sub_21E8C(v51, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    }
    else {
      std::string *v51 = v62;
    }
    sub_463E0(v61[0]);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    goto LABEL_110;
  }
  uint64_t v4 = **(void **)(a2 + 112);
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v5 = v4 + 8;
  uint64_t v6 = v7;
  if (v7)
  {
    uint64_t v8 = v5;
    do
    {
      unsigned int v9 = *(_DWORD *)(v6 + 32);
      BOOL v10 = v9 >= 0x63737072;
      if (v9 >= 0x63737072) {
        uint64_t v11 = (uint64_t *)v6;
      }
      else {
        uint64_t v11 = (uint64_t *)(v6 + 8);
      }
      if (v10) {
        uint64_t v8 = v6;
      }
      uint64_t v6 = *v11;
    }
    while (*v11);
    if (v8 != v5 && *(_DWORD *)(v8 + 32) <= 0x63737072u)
    {
      uint64_t v54 = sub_32A48(13);
      v55 = sub_7D5E8(1, *(void **)v54, *(void *)(v54 + 8));
      long long v56 = v55;
      if (v55 && os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7576;
        _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }

      v57 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v57, "Precondition failure.");
    }
  }
  *(_DWORD *)a1 = 1936289391;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  return sub_3BCAC(&v67);
}

void sub_308B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void **buf,void *__p,__int16 a36,__int16 a37,int a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a43 && a42 < 0) {
    operator delete(__p);
  }
  sub_463E0(a19);
  if (a26 < 0) {
    operator delete(a21);
  }
  buf = a10;
  sub_1486D0(&buf);
  sub_3BCAC(&a32);
  _Unwind_Resume(a1);
}

void sub_308F48(uint64_t a1, uint64_t **a2, unint64_t a3, uint64_t a4, int a5)
{
  if (!sub_209D00())
  {
    if (!sub_23AC0()) {
      return;
    }
    sub_3B7EC();
    if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
    {
      int v39 = *(id *)sub_32A48(13);
      __int16 v40 = v39;
      if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7435;
        _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The routing mutex is not held by this thread\"", buf, 0x12u);
      }
    }
    uint64_t v41 = sub_2EA964(1986291046, 0, *a2, a2[1]);
    if (!v41)
    {
      uint64_t v93 = sub_32A48(13);
      uint64_t v94 = sub_7D5E8(1, *(void **)v93, *(void *)(v93 + 8));
      long long v95 = v94;
      if (v94 && os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 7438;
        _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No default VAD present\"", buf, 0x12u);
      }

      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "No default VAD present");
    }
    long long v42 = (void *)sub_BC8B0(v41, 1);
    int v43 = sub_306C58(a1, v42, 1886613611);
    uint64_t v44 = *a2;
    int v45 = a2[1];
    if (*a2 == v45) {
      return;
    }
    unint64_t v46 = HIDWORD(a3);
    BOOL v48 = a3 == 1668703084 || a3 == 1668576377;
    BOOL v97 = v48;
    int v49 = v43 ^ 1;
    while (1)
    {
      uint64_t v50 = *v44;
      uint64_t v51 = sub_BC8B0(*v44, 1);
      sub_46A4C((uint64_t *)&__p, v51);
      if (!sub_306C58(a1, &__p, 1886613611)) {
        goto LABEL_134;
      }
      int v52 = sub_16414C();
      if (v46 == 1918990112) {
        int v53 = v52;
      }
      else {
        int v53 = 0;
      }
      *(void *)buf = 0x273706163;
      *(_DWORD *)&buf[8] = 0;
      uint64_t v54 = sub_BCA14(v50);
      *((void *)&v57 + 1) = v55;
      *(void *)&long long v57 = v54;
      uint64_t v56 = v57 >> 32;
      if ((v56 & 0xFF00000000) != 0) {
        int v58 = v56;
      }
      else {
        int v58 = 0;
      }
      id v59 = *(id *)sub_32A48(2);
      long long v60 = v59;
      if (v59)
      {
        v61 = v59;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v107 = *(void *)(v50 + 576);
          sub_4D60(&v102, (unsigned int *)&v107);
          std::string v62 = &v102;
          if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string v62 = (std::string *)v102.__r_.__value_.__r.__words[0];
          }
          if (v58) {
            int v63 = v53;
          }
          else {
            int v63 = 1;
          }
          BOOL v26 = v63 == 0;
          *(_DWORD *)buf = 136315906;
          unsigned int v64 = "active";
          if (!v26) {
            unsigned int v64 = "none";
          }
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7453;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v62;
          *(_WORD *)&unsigned char buf[28] = 2080;
          *(void *)&buf[30] = v64;
          _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VA/HAL Speaker protection for VAD '%s' is %s.", buf, 0x26u);
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v102.__r_.__value_.__l.__data_);
          }
        }
      }
      if ((sub_209B38() & 1) == 0) {
        break;
      }
      int v65 = 0;
LABEL_118:
      int v67 = v65 ^ 1;
      if (v58) {
        int v67 = 0;
      }
      if (*(void *)(v50 + 576) == 1986291046) {
        BOOL v68 = v67;
      }
      else {
        BOOL v68 = v58 == 0;
      }
      if (v53)
      {
        if (v58)
        {
          uint64_t v69 = *(id *)sub_32A48(2);
          uint64_t v70 = v69;
          if (v69 && os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7470;
            _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d RawModeDisablesSpeakerProcessing is active, but Speaker Protection is also active in HAL", buf, 0x12u);
          }
        }
      }
      else if (v68 && sub_207A20())
      {
        char v80 = *(NSObject **)sub_32A48(2);
        int v82 = v81 = v80;
        if (os_log_type_enabled(v82, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl(&def_1E50E8, v80, OS_LOG_TYPE_FAULT, "Speaker Protection is not active on speaker route", buf, 2u);
        }
LABEL_151:

        std::terminate();
      }
      int v71 = v65 ^ 1;
      if (*(void *)(v50 + 576) == 1986291046) {
        int v71 = 1;
      }
      if (((v71 | v49) & 1) == 0)
      {
        uint64_t v74 = sub_32A48(13);
        uint64_t v75 = sub_7D5E8(1, *(void **)v74, *(void *)(v74 + 8));
        long long v76 = v75;
        if (v75)
        {
          uint64_t v77 = v75;
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
          {
            uint64_t v107 = *(void *)(v50 + 576);
            sub_4D60(&v102, (unsigned int *)&v107);
            uint64_t v78 = (v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v102
                : (std::string *)v102.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 7492;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v78;
            _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unexpected HAL speaker protection for VAD %s. Error as default route has *VP* speaker protection\"", buf, 0x1Cu);
            if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v102.__r_.__value_.__l.__data_);
            }
          }
        }
        uint64_t v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v79, "Unexpected HAL speaker protection for VAD %s. Error as default route has *VP* speaker protection");
      }
LABEL_134:
      sub_463E0((void *)__p.__r_.__value_.__l.__size_);
      if (++v44 == v45) {
        return;
      }
    }
    if ((int)v46 <= 1987077986)
    {
      if (v46 == 1768057203) {
        goto LABEL_115;
      }
      int v66 = 1919776355;
    }
    else
    {
      if (v46 == 1987077987 || v46 == 1987081839) {
        goto LABEL_115;
      }
      int v66 = 1987081833;
    }
    if (v46 != v66)
    {
LABEL_116:
      int v65 = v97;
      goto LABEL_118;
    }
LABEL_115:
    if (!a5)
    {
      int v65 = 1;
      goto LABEL_118;
    }
    goto LABEL_116;
  }
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    uint64_t v7 = *(id *)sub_32A48(13);
    uint64_t v8 = v7;
    if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7359;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The routing mutex is not held by this thread\"", buf, 0x12u);
    }
  }
  if ((sub_209D00() & 1) == 0)
  {
    uint64_t v83 = sub_32A48(13);
    std::string v84 = sub_7D5E8(1, *(void **)v83, *(void *)(v83 + 8));
    uint64_t v85 = v84;
    if (v84 && os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7360;
      _os_log_impl(&def_1E50E8, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    long long v86 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v86, "Precondition failure.");
  }
  BOOL v10 = *a2;
  unsigned int v9 = a2[1];
  if (*a2 == v9) {
    return;
  }
  int v100 = 0;
  int v98 = 0;
  do
  {
    uint64_t v11 = (void *)*v10;
    int v12 = (void *)sub_BC8B0(*v10, 1);
    if (sub_306C58(a1, v12, 1886613611))
    {
      *(void *)buf = 0x273706163;
      *(_DWORD *)&buf[8] = 0;
      uint64_t v13 = sub_BCA14((uint64_t)v11);
      uint64_t v15 = v14;
      uint64_t v107 = *(void *)"cpsdptuo";
      int v108 = 0;
      CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"dsp chain name", 14, 0x8000100u, 0);
      v106[1] = v16;
      if (!v16)
      {
        char v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v72, "Could not construct");
      }
      v106[0] = 0;
      int v105 = 8;
      int v105 = (*(uint64_t (**)(void *, uint64_t *, uint64_t, CFStringRef))(*v11 + 48))(v11, &v107, 8, v16);
      if (v105 != 8)
      {
        id v17 = *(id *)sub_32A48(13);
        uint64_t v18 = v17;
        if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7372;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v105;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid chain name size of %u returned by GetPropertyDataSize\"", buf, 0x18u);
        }
      }
      (*(void (**)(void *, uint64_t *, uint64_t, CFStringRef, int *, CFTypeRef *))(*v11 + 56))(v11, &v107, 8, v16, &v105, v106);
      if (v106[0])
      {
        sub_14E44(&cf, v106[0]);
        if (!cf)
        {
          v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v73, "Could not construct");
        }
        sub_21C8C(&__p, "<none>");
        CFStringRef v19 = (const __CFString *)cf;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          sub_21E8C(buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)buf = __p;
        }
        if (v19 && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v19)))
        {
          sub_65FBC((uint64_t)&v102, v19);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
        }
        else
        {
          std::string v102 = *(std::string *)buf;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
      else
      {
        sub_21C8C(&v102, "<none>");
      }
      CFRelease(v16);
      int64_t size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        uint64_t v22 = &v102;
      }
      else
      {
        int64_t size = v102.__r_.__value_.__l.__size_;
        uint64_t v22 = (std::string *)v102.__r_.__value_.__r.__words[0];
      }
      uint64_t v23 = (char *)v22 + size;
      if (size >= 7)
      {
        unint64_t v24 = v22;
        do
        {
          float v25 = (char *)memchr(v24, 115, size - 6);
          if (!v25) {
            break;
          }
          BOOL v26 = *(_DWORD *)v25 == 1634037875 && *(_DWORD *)(v25 + 3) == 1919249249;
          if (v26) {
            goto LABEL_44;
          }
          unint64_t v24 = (std::string *)(v25 + 1);
          int64_t size = v23 - (char *)v24;
        }
        while (v23 - (char *)v24 > 6);
      }
      float v25 = v23;
LABEL_44:
      *((void *)&v28 + 1) = v15;
      *(void *)&long long v28 = v13;
      uint64_t v27 = v28 >> 32;
      BOOL v30 = v25 != v23 && v25 - (char *)v22 != -1;
      if ((v27 & 0xFF00000000) != 0) {
        int v31 = v27 != 0;
      }
      else {
        int v31 = v30;
      }
      id v32 = *(id *)sub_32A48(2);
      unsigned __int8 v33 = v32;
      if (v32)
      {
        uint64_t v34 = v32;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          int v35 = SHIBYTE(v102.__r_.__value_.__r.__words[2]);
          std::string::size_type v36 = v102.__r_.__value_.__r.__words[0];
          uint64_t v107 = v11[72];
          sub_4D60(&__p, (unsigned int *)&v107);
          int v37 = &v102;
          if (v35 < 0) {
            int v37 = (std::string *)v36;
          }
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 7396;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v31;
          *(_WORD *)&uint8_t buf[24] = 2080;
          *(void *)&buf[26] = v37;
          *(_WORD *)&buf[34] = 2080;
          *(void *)&buf[36] = p_p;
          _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SpeakerProtectionActive: %d, chainName: %s for VAD %s", buf, 0x2Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
      ++v100;
      v98 += v31;
    }
    ++v10;
  }
  while (v10 != v9);
  if (v100 <= 0) {
    return;
  }
  if (v100 > 2)
  {
LABEL_156:
    uint64_t v87 = sub_32A48(2);
    long long v88 = sub_7D5E8(3, *(void **)v87, *(void *)(v87 + 8));
    long long v89 = v88;
    if (v88 && os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      int v90 = *(unsigned __int8 *)(a1 + 168);
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 7411;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v100;
      *(_WORD *)&uint8_t buf[24] = 1024;
      *(_DWORD *)&buf[26] = v98;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&unsigned char buf[32] = v90;
      _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Speaker protection checks failed! VADs routed to speaker: %d, VADs with speaker protection: %d, Policy Mute: %d", buf, 0x24u);
    }

    char v80 = *(NSObject **)sub_32A48(2);
    long long v92 = v91 = v80;
    if (os_log_type_enabled(v92, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&def_1E50E8, v80, OS_LOG_TYPE_FAULT, "Speaker Protection checks failed", buf, 2u);
    }
    goto LABEL_151;
  }
  if (v100 != 2)
  {
    if (v98 < 2) {
      return;
    }
    goto LABEL_156;
  }
  if (!*(unsigned char *)(a1 + 168) || v98 > 1) {
    goto LABEL_156;
  }
}

void sub_309D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  __cxa_free_exception(v29);
  _Unwind_Resume(a1);
}

void sub_309E4C(uint64_t a1)
{
  uint64_t v2 = sub_2EA964(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
  if (v2 && (uint64_t v3 = v2, sub_C9B28(*(void *)(v2 + 1008), 0)))
  {
    uint64_t v4 = sub_2EA964(1987277417, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
    uint64_t v5 = v4;
    if (v4) {
      int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
    }
    else {
      int v41 = 1;
    }
    uint64_t v6 = sub_BC8B0(v3, 1);
    sub_46A4C((uint64_t *)&v43, v6);
    uint64_t v7 = v43;
    if (v43 == v44)
    {
      int v42 = 0;
    }
    else
    {
      do
      {
        uint64_t v8 = sub_E1B78(*(void *)(a1 + 128), *((_DWORD *)v7 + 7));
        if (v8)
        {
          unsigned int v9 = *(std::__shared_weak_count **)(v8 + 96);
          if (v9)
          {
            uint64_t v10 = *(void *)(v8 + 88);
            atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            uint64_t v11 = std::__shared_weak_count::lock(v9);
            std::__shared_weak_count::__release_weak(v9);
            if (v11)
            {
              if (v10)
              {
                char v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 480))(v10);
                sub_4636C(v11);
                if (v12)
                {
                  int v42 = 1;
                  goto LABEL_24;
                }
              }
              else
              {
                sub_4636C(v11);
              }
            }
          }
        }
        uint64_t v13 = v7[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = (void **)v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void **)v7[2];
            BOOL v23 = *v14 == v7;
            uint64_t v7 = v14;
          }
          while (!v23);
        }
        uint64_t v7 = v14;
      }
      while (v14 != v44);
      int v42 = 0;
LABEL_24:
      uint64_t v7 = v43;
    }
    if (v7 != v44)
    {
      do
      {
        uint64_t v15 = sub_E1B78(*(void *)(a1 + 128), *((_DWORD *)v7 + 7));
        if (v15)
        {
          CFStringRef v16 = *(std::__shared_weak_count **)(v15 + 96);
          if (v16)
          {
            uint64_t v17 = *(void *)(v15 + 88);
            atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            uint64_t v18 = std::__shared_weak_count::lock(v16);
            std::__shared_weak_count::__release_weak(v16);
            if (v18)
            {
              if (!v17) {
                goto LABEL_42;
              }
              uint64_t v19 = *(void *)(v17 + 192);
              strcpy(buf, "empsbolg");
              buf[9] = 0;
              *(_WORD *)&buf[10] = 0;
              uint64_t v20 = sub_99A40(v19);
              *((void *)&v22 + 1) = v21;
              *(void *)&long long v22 = v20;
              BOOL v23 = ((v22 >> 32) & 0xFF00000000) == 0 || (v20 & 0x100000000) == 0;
              if (!v23)
              {
                uint64_t v27 = *(id *)sub_32A48(17);
                long long v28 = v27;
                if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2281;
                  _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PME running on far end. Bypassing source side processing.", buf, 0x12u);
                }

LABEL_42:
                sub_4636C(v18);
                goto LABEL_43;
              }
              sub_2F6834(buf, a1);
              uint64_t v25 = *(void *)buf;
              uint64_t v24 = *(void *)&buf[8];
              sub_2E9FD8((uint64_t)buf);
              v45[0] = v25;
              v45[1] = v24;
              BOOL v26 = sub_251050(v17, (int *)v45);
              sub_4636C(v18);
              if (v26)
              {
                int v40 = 1;
                goto LABEL_50;
              }
            }
          }
        }
LABEL_43:
        unsigned int v29 = v7[1];
        if (v29)
        {
          do
          {
            BOOL v30 = (void **)v29;
            unsigned int v29 = (void *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            BOOL v30 = (void **)v7[2];
            BOOL v23 = *v30 == v7;
            uint64_t v7 = v30;
          }
          while (!v23);
        }
        uint64_t v7 = v30;
      }
      while (v30 != v44);
    }
    int v40 = 0;
LABEL_50:
    if (v42)
    {
      sub_2F6834(buf, a1);
      uint64_t v31 = *(void *)buf;
      sub_2E9FD8((uint64_t)buf);
      id v32 = *(id *)sub_32A48(2);
      unsigned __int8 v33 = v32;
      if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2301;
        __int16 v48 = 1024;
        int v49 = v31;
        __int16 v50 = 1024;
        int v51 = HIDWORD(v31);
        _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Port Subtype supported by PME for route category %u and mode %u", buf, 0x1Eu);
      }

      if (v40)
      {
        sub_3DEB58();
        byte_65FAF0 = 1;
      }
      sub_CE094(v3, v40, v31, SHIDWORD(v31));
      if (v5) {
        sub_CE094(v5, v40, v31, SHIDWORD(v31));
      }
    }
    else
    {
      uint64_t v34 = *(id *)sub_32A48(2);
      int v35 = v34;
      if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2318;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Port Subtype is not supported by PME - Clearing PME state", buf, 0x12u);
      }

      sub_30D32C();
    }
    sub_F13E8(v3);
    if (v5) {
      sub_F13E8(v5);
    }
    if ((v41 | v42 & v40) == 1)
    {
      if (*(unsigned char *)(v3 + 1074))
      {
        std::string::size_type v36 = *(void **)(v3 + 1040);
        if (v36 != (void *)(v3 + 1048))
        {
          do
          {
            int v37 = *((_DWORD *)v36 + 7);
            *(void *)buf = 0x6F757470766F6C6DLL;
            *(_DWORD *)&buf[8] = v37;
            LODWORD(v45[0]) = 0;
            unsigned int v46 = 4;
            (*(void (**)(uint64_t, unsigned char *, void, void, unsigned int *, void *))(*(void *)v3 + 56))(v3, buf, 0, 0, &v46, v45);
            (*(void (**)(uint64_t, unsigned char *, void, void, void, void *, void))(*(void *)v3 + 64))(v3, buf, 0, 0, v46, v45, 0);
            __int16 v38 = (void *)v36[1];
            if (v38)
            {
              do
              {
                int v39 = v38;
                __int16 v38 = (void *)*v38;
              }
              while (v38);
            }
            else
            {
              do
              {
                int v39 = (void *)v36[2];
                BOOL v23 = *v39 == (void)v36;
                std::string::size_type v36 = v39;
              }
              while (!v23);
            }
            std::string::size_type v36 = v39;
          }
          while (v39 != (void *)(v3 + 1048));
        }
      }
      else
      {
        strcpy(buf, "mlovptuo");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        LODWORD(v45[0]) = 0;
        unsigned int v46 = 4;
        (*(void (**)(uint64_t, unsigned char *, void, void, unsigned int *, void *))(*(void *)v3 + 56))(v3, buf, 0, 0, &v46, v45);
        (*(void (**)(uint64_t, unsigned char *, void, void, void, void *, void))(*(void *)v3 + 64))(v3, buf, 0, 0, v46, v45, 0);
      }
    }
    sub_463E0(v44[0]);
  }
  else
  {
    sub_30D32C();
  }
}

void sub_30A558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t sub_30A5AC(uint64_t a1)
{
  sub_2F6834(&v3, a1);
  uint64_t v1 = v3;
  sub_2E9FD8((uint64_t)&v3);
  return v1;
}

void sub_30A5F8(uint64_t a1, unint64_t a2, int a3, CFTypeRef cf)
{
  if (cf)
  {
    CFRetain(cf);
    sub_22084(&cfa, cf);
  }
  else
  {
    CFTypeRef cfa = 0;
  }
  if ((int)a2 > 1668313665)
  {
    if (a2 == 1668313715) {
      goto LABEL_10;
    }
    unsigned __int16 v7 = 29250;
  }
  else
  {
    if (a2 == 1668301427) {
      goto LABEL_10;
    }
    unsigned __int16 v7 = 24946;
  }
  if (a2 != (v7 | 0x63700000)) {
    goto LABEL_19;
  }
LABEL_10:
  unint64_t v8 = HIDWORD(a2);
  if ((int)v8 > 1936749156)
  {
    if (v8 != 1937007472)
    {
      unsigned __int16 v9 = 29285;
LABEL_15:
      if (v8 != (v9 | 0x73700000)) {
        goto LABEL_19;
      }
    }
  }
  else if (v8 != 1835229549)
  {
    unsigned __int16 v9 = 25456;
    goto LABEL_15;
  }
  uint64_t v11 = *(uint64_t **)(a1 + 144);
  uint64_t v10 = *(uint64_t **)(a1 + 152);
  uint64_t v12 = sub_2EA964(1986291305, 0, v11, v10);
  if (!v12) {
    uint64_t v12 = sub_2EA964(1986291046, 0, v11, v10);
  }
  sub_CC99C(v12, (const __CFDictionary *)cfa, v8);
LABEL_19:
  if (cfa) {
    CFRelease(cfa);
  }
}

void sub_30A748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_60394((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_30A768(uint64_t a1, long long *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = off_63E708;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (void *)(a3 + 24);
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7)
  {
    uint64_t v6 = (void *)(a1 + 40);
    goto LABEL_5;
  }
  if (v7 != a3)
  {
    *(void *)(a1 + 40) = v7;
LABEL_5:
    *uint64_t v6 = 0;
    goto LABEL_7;
  }
  *(void *)(a1 + 40) = v5;
  (*(void (**)(void, uint64_t))(*(void *)*v6 + 24))(*v6, v5);
LABEL_7:
  unint64_t v8 = (unsigned char *)(a1 + 48);
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C(v8, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 64) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v8 = v9;
  }
  return a1;
}

void sub_30A840(_Unwind_Exception *a1)
{
  sub_30A854(v1);
  _Unwind_Resume(a1);
}

void *sub_30A854(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_30A8D8(uint64_t *a1)
{
  uint64_t v49 = *a1;
  BOOL v1 = sub_1642B8();
  int v2 = sub_1645B0("EnableHALMediaMonitor");
  uint64_t v3 = *(id *)sub_32A48(2);
  uint64_t v4 = v3;
  if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    __int16 v53 = 1024;
    int v54 = 7961;
    __int16 v55 = 1024;
    LODWORD(v56[0]) = v1;
    WORD2(v56[0]) = 1024;
    *(_DWORD *)((char *)v56 + 6) = v2 > 0;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlugInHUPhandler VAD capture=%d HAL capture=%d\n", buf, 0x1Eu);
  }

  uint64_t v5 = sub_32A48(2);
  uint64_t v6 = sub_32A48(13);
  char v7 = 0;
  uint64_t v8 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&buf[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1;
    if (v11) {
      goto LABEL_10;
    }
  }
  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_10:
  uint64_t v12 = *(id *)v5;
  uint64_t v13 = v12;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    __int16 v53 = 1024;
    int v54 = 7133;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>", buf, 0x12u);
  }

  uint64_t v14 = sub_32A48(2);
  uint64_t v15 = sub_32A48(13);
  char v16 = 0;
  uint64_t v17 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v18 = *(void *)(v14 + 8);
  while (1)
  {
    uint64_t v19 = *(int *)&buf[4 * v17];
    char v20 = v16;
    if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
      break;
    }
    char v16 = 1;
    uint64_t v17 = 1;
    if (v20) {
      goto LABEL_19;
    }
  }
  if ((v18 & v19) == 0) {
    uint64_t v14 = v15;
  }
LABEL_19:
  uint64_t v21 = *(id *)v14;
  long long v22 = v21;
  if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    __int16 v53 = 1024;
    int v54 = 7134;
    _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ***** Logging Current VA State *****", buf, 0x12u);
  }

  sub_2E12AC((std::string::size_type)&v50, v49);
  BOOL v23 = v50;
  for (uint64_t i = v51; v23 != i; v23 += 3)
  {
    uint64_t v25 = sub_32A48(2);
    uint64_t v26 = sub_32A48(13);
    char v27 = 0;
    uint64_t v28 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v29 = *(void *)(v25 + 8);
    while (1)
    {
      uint64_t v30 = *(int *)&buf[4 * v28];
      char v31 = v27;
      if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
        break;
      }
      char v27 = 1;
      uint64_t v28 = 1;
      if (v31) {
        goto LABEL_29;
      }
    }
    if ((v29 & v30) == 0) {
      uint64_t v25 = v26;
    }
LABEL_29:
    id v32 = *(id *)v25;
    unsigned __int8 v33 = v32;
    if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = v23;
      if (*((char *)v23 + 23) < 0) {
        uint64_t v34 = (uint64_t *)*v23;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v53 = 1024;
      int v54 = 7139;
      __int16 v55 = 2080;
      v56[0] = v34;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
    }
  }
  uint64_t v35 = sub_32A48(2);
  uint64_t v36 = sub_32A48(13);
  char v37 = 0;
  uint64_t v38 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v39 = *(void *)(v35 + 8);
  while (1)
  {
    uint64_t v40 = *(int *)&buf[4 * v38];
    char v41 = v37;
    if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
      break;
    }
    char v37 = 1;
    uint64_t v38 = 1;
    if (v41) {
      goto LABEL_41;
    }
  }
  if ((v39 & v40) == 0) {
    uint64_t v35 = v36;
  }
LABEL_41:
  int v42 = *(id *)v35;
  int v43 = v42;
  if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    __int16 v53 = 1024;
    int v54 = 7143;
    _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", buf, 0x12u);
  }

  *(void *)buf = &v50;
  sub_217F8((void ***)buf);
  uint64_t v44 = *(id *)sub_32A48(2);
  int v45 = v44;
  if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
    __int16 v53 = 1024;
    int v54 = 7731;
    _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d updating stream capture settings", buf, 0x12u);
  }

  unsigned int v46 = *(void **)(v49 + 144);
  id v47 = *(void **)(v49 + 152);
  while (v46 != v47)
  {
    (*(void (**)(void))(*(void *)*v46 + 800))(*v46);
    ++v46;
  }
  uint64_t v48 = sub_298DA4();
  (*(void (**)(uint64_t))(*(void *)v48 + 336))(v48);
  if (qword_64A238 != -1) {
    dispatch_once(&qword_64A238, &stru_61F710);
  }
  if (byte_64A228)
  {
    if ((+[CiderService ServiceIsRunning] & 1) == 0) {
      +[CiderService StartService];
    }
  }
  operator delete();
}

void sub_30AF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, long long buf, long long a18, __int16 a19, __int16 a20,int a21,uint64_t a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  *(void *)&buf = &a14;
  sub_217F8((void ***)&buf);
  if (a2 == 3)
  {
    uint64_t v24 = __cxa_begin_catch(exception_object);
    id v25 = *(id *)sub_32A48(13);
    if (v25)
    {
      uint64_t v26 = v25;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        int v27 = v24[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a18) = 1024;
        DWORD1(a18) = v27;
        WORD4(a18) = 2080;
        *(void *)((char *)&a18 + 10) = "";
        a20 = 1024;
        a21 = 98;
        uint64_t v28 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v29 = v26;
        uint32_t v30 = 40;
LABEL_13:
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, v28, (uint8_t *)&buf, v30);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    char v31 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      id v32 = v31;
      id v33 = *(id *)sub_32A48(13);
      if (v33)
      {
        uint64_t v26 = v33;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v32 + 16))(v32);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a18) = 2080;
          *(void *)((char *)&a18 + 4) = v34;
          WORD6(a18) = 2080;
          *(void *)((char *)&a18 + 14) = "";
          HIWORD(a21) = 1024;
          LODWORD(a22) = 98;
          uint64_t v28 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v29 = v26;
          uint32_t v30 = 44;
          goto LABEL_13;
        }
LABEL_14:

LABEL_16:
        __cxa_end_catch();
        JUMPOUT(0x30AE9CLL);
      }
    }
    else
    {
      id v35 = *(id *)sub_32A48(13);
      if (v35)
      {
        uint64_t v26 = v35;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a18) = 2080;
          *(void *)((char *)&a18 + 4) = "";
          WORD6(a18) = 1024;
          *(_DWORD *)((char *)&a18 + 14) = 98;
          uint64_t v28 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          uint64_t v29 = v26;
          uint32_t v30 = 34;
          goto LABEL_13;
        }
        goto LABEL_14;
      }
    }
  }
  uint64_t v26 = 0;
  goto LABEL_16;
}

uint64_t sub_30B1EC(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_30B228(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_30B264@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1[1];
  *(void *)buf = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(_WORD *)&buf[8] = 257;
  sub_2F69B0(v46, v4, (const __CFDictionary **)buf, 0, 0);
  sub_80594((uint64_t)buf);
  uint64_t v5 = *(void *)(v4 + 112);
  char v7 = (uint64_t *)a1[2];
  uint64_t v6 = (uint64_t *)a1[3];
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    char v41 = (os_log_t *)sub_32A48(13);
    int v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v50 = 1024;
      int v51 = 5508;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!*(unsigned char *)(v5 + 384))
  {
    uint64_t v21 = (os_log_t *)sub_32A48(13);
    long long v22 = *v21;
    if (*v21)
    {
      if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v50 = 1024;
        int v51 = 5509;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"This method should only be used in the context of a current expanse route\"", buf, 0x12u);
      }
    }
  }
  uint64_t v8 = (std::__shared_weak_count *)v6[1];
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *v6;
      if (*v6)
      {
        uint64_t v12 = *(const void **)(v11 + 248);
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
        int v13 = *(unsigned __int8 *)(v11 + 256);
        __p[0].__r_.__value_.__s.__data_[8] = v13;
        if (v13) {
          BOOL v14 = v12 == 0;
        }
        else {
          BOOL v14 = 1;
        }
        if (!v14) {
          CFRetain(v12);
        }
        uint64_t v15 = (void *)(v5 + 72);
        uint64_t v16 = sub_14DF24(v5 + 72, (CFStringRef *)__p);
        if (v5 + 80 != v16)
        {
          uint64_t v17 = sub_14DF24(v5 + 72, (CFStringRef *)(v16 + 32));
          uint64_t v18 = (uint64_t *)v17;
          if (v5 + 80 != v17)
          {
            uint64_t v19 = *(void **)(v17 + 8);
            if (v19)
            {
              do
              {
                char v20 = v19;
                uint64_t v19 = (void *)*v19;
              }
              while (v19);
            }
            else
            {
              BOOL v23 = (void *)v17;
              do
              {
                char v20 = (void *)v23[2];
                BOOL v14 = *v20 == (void)v23;
                BOOL v23 = v20;
              }
              while (!v14);
            }
            if (*v15 == v17) {
              void *v15 = v20;
            }
            uint64_t v24 = *(uint64_t **)(v5 + 80);
            --*(void *)(v5 + 88);
            sub_89144(v24, v18);
            sub_72924((uint64_t)(v18 + 4));
            operator delete(v18);
          }
        }
        id v25 = (os_log_t *)sub_32A48(8);
        uint64_t v26 = *v25;
        if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          __int16 v50 = 1024;
          int v51 = 5520;
          __int16 v52 = 2112;
          std::string::size_type v53 = __p[0].__r_.__value_.__r.__words[0];
          _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d RouteToPartner: Allowing port %@", buf, 0x1Cu);
        }
        sub_72924((uint64_t)__p);
      }
      sub_4636C(v10);
    }
  }
  int v27 = (std::__shared_weak_count *)v7[1];
  if (v27)
  {
    uint64_t v28 = std::__shared_weak_count::lock(v27);
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = *v7;
      if (v30)
      {
        char v31 = *(const void **)(v30 + 248);
        *(void *)buf = v31;
        buf[8] = *(unsigned char *)(v30 + 256);
        if (buf[8] && v31) {
          CFRetain(v31);
        }
        sub_128528((uint64_t **)(v5 + 72), (CFStringRef *)buf, (uint64_t)buf);
        sub_72924((uint64_t)buf);
        id v32 = (os_log_t *)sub_32A48(8);
        id v33 = *v32;
        if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v34 = *(const void **)(v30 + 248);
          id v47 = v34;
          char v48 = *(unsigned char *)(v30 + 256);
          if (v48 && v34) {
            CFRetain(v34);
          }
          sub_2417C(__p, *(_DWORD *)(v30 + 144));
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            id v35 = __p;
          }
          else {
            id v35 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
          __int16 v50 = 1024;
          int v51 = 5527;
          __int16 v52 = 2112;
          std::string::size_type v53 = (std::string::size_type)v34;
          __int16 v54 = 2080;
          __int16 v55 = v35;
          _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disallowing current port (%@, %s)", buf, 0x26u);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          sub_72924((uint64_t)&v47);
        }
      }
      sub_4636C(v29);
    }
  }
  uint64_t v36 = (os_log_t *)sub_32A48(8);
  char v37 = *v36;
  if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_DEFAULT))
  {
    sub_120C30(__p, v5 + 72);
    uint64_t v38 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? __p
        : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    __int16 v50 = 1024;
    int v51 = 5530;
    __int16 v52 = 2080;
    std::string::size_type v53 = (std::string::size_type)v38;
    _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d All disallowed ports : %s", buf, 0x1Cu);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  sub_14C070((uint64_t)v45, v5, 1919907442);
  sub_302F8C((uint64_t)__p, (uint64_t)v46);
  int data = (int)__p[0].__r_.__value_.__l.__data_;
  if (LODWORD(__p[0].__r_.__value_.__l.__data_) == 1668509810) {
    int data = 1668309362;
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = data;
  sub_30338C((uint64_t)buf, (uint64_t)__p);
  sub_30366C(a2, (uint64_t)v45, (uint64_t)buf);
  sub_2E9FD8((uint64_t)buf);
  sub_2E9FD8((uint64_t)__p);
  sub_11A520(v45);
  return sub_2E9FD8((uint64_t)v46);
}

void sub_30B840(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  sub_2E9FD8((uint64_t)&STACK[0x318]);
  _Unwind_Resume(a1);
}

__n128 sub_30B8F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_633418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_30B924(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = off_633418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_30B978()
{
}

void sub_30B990(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  *(unsigned char *)(v2 + 404) = *(unsigned char *)(a1 + 20);
  *(_DWORD *)(v2 + 400) = v3;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v2 + 416);
  *(void *)(v2 + 408) = v5;
  *(void *)(v2 + 416) = v4;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 432);
  *(void *)(v2 + 424) = v8;
  *(void *)(v2 + 432) = v7;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v10 = *(id *)sub_32A48(2);
  uint64_t v11 = v10;
  if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    int v13 = "VirtualAudio_PlugIn.mm";
    __int16 v14 = 1024;
    int v15 = 7061;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Resetting state as routing to partner failed", (uint8_t *)&v12, 0x12u);
  }
}

void sub_30BAB8(void *a1)
{
  sub_30BAF4((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_30BAF4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_30BB44(uint64_t a1)
{
}

uint64_t sub_30BB4C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = off_6333D0;
  *(void *)(a2 + 8) = v2;
  LODWORD(v2) = *(_DWORD *)(result + 16);
  *(unsigned char *)(a2 + 20) = *(unsigned char *)(result + 20);
  *(_DWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(result + 48);
  *(void *)(a2 + 40) = *(void *)(result + 40);
  *(void *)(a2 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_30BBB0(uint64_t a1)
{
  __n128 result = operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_6333D0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  *((unsigned char *)result + 20) = *(unsigned char *)(a1 + 20);
  uint64_t v4 = *(void *)(a1 + 32);
  result[3] = *(void *)(a1 + 24);
  result[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  result[5] = *(void *)(a1 + 40);
  result[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_30BC38(void *a1)
{
  *a1 = off_6333D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

void *sub_30BCB0(void *a1)
{
  *a1 = off_6333D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_30BD08()
{
  sub_3B7EC();
  v0 = *(uint64_t (**)(void))(qword_64CC40 + 24);

  return v0();
}

void sub_30BD60(uint64_t a1, void *a2)
{
  *a2 = off_633388;
}

void *sub_30BD80()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_633388;
  return result;
}

void sub_30BDB8()
{
}

uint64_t sub_30BDD0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_139F20((uint64_t **)a1, v4, *a2, a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_30BE38(_Unwind_Exception *a1)
{
  sub_12B050(*v1);
  _Unwind_Resume(a1);
}

void sub_30BE4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)(*(void *)(a1 + 8) + 112);
  int v30 = **(_DWORD **)(a1 + 16);
  sub_30C274((uint64_t)v31, &v30, 1);
  uint64_t v5 = *(void **)(a1 + 24);
  uint64_t v6 = (os_log_t *)sub_32A48(2);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_135C0C(&__p, v5);
    uint64_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    *(void *)int v43 = "RoutingManager.cpp";
    *(_WORD *)&v43[8] = 1024;
    *(_DWORD *)&v43[10] = 4071;
    __int16 v44 = 2080;
    int v45 = v8;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Undo disallowed ports : %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v11 = (void *)*v5;
  uint64_t v9 = v5 + 1;
  uint64_t v10 = v11;
  if (v11 != v9)
  {
    int v12 = v4 + 13;
    do
    {
      unsigned int v13 = *((_DWORD *)v10 + 8);
      sub_128240((uint64_t)&v34, v10 + 5);
      uint64_t v14 = *v12;
      if (!*v12) {
        goto LABEL_21;
      }
      int v15 = v4 + 13;
      do
      {
        unsigned int v16 = *(_DWORD *)(v14 + 32);
        BOOL v17 = v16 >= v13;
        if (v16 >= v13) {
          uint64_t v18 = (uint64_t *)v14;
        }
        else {
          uint64_t v18 = (uint64_t *)(v14 + 8);
        }
        if (v17) {
          int v15 = (uint64_t *)v14;
        }
        uint64_t v14 = *v18;
      }
      while (*v18);
      if (v15 != v12 && *((_DWORD *)v15 + 8) <= v13)
      {
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
        long long v22 = (CFStringRef *)v15[5];
        uint64_t v40 = (CFStringRef *)(v15 + 6);
        char v41 = v22;
        uint64_t v38 = &v35;
        uint64_t v39 = v34;
        v37.n128_u64[0] = (unint64_t)&__p;
        v37.n128_u64[1] = (unint64_t)&__p.__r_.__value_.__l.__size_;
        sub_1469BC((uint64_t)buf, &v41, &v40, (uint64_t)&v39, &v38, &v37);
        if (__p.__r_.__value_.__r.__words[2])
        {
          if (v15 + 5 != (uint64_t *)&__p) {
            sub_146BDC((uint64_t)(v15 + 5), __p.__r_.__value_.__l.__data_, &__p.__r_.__value_.__l.__size_);
          }
        }
        else
        {
          BOOL v23 = (uint64_t *)v15[1];
          uint64_t v24 = v15;
          if (v23)
          {
            do
            {
              id v25 = v23;
              BOOL v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              id v25 = (uint64_t *)v24[2];
              BOOL v26 = *v25 == (void)v24;
              uint64_t v24 = v25;
            }
            while (!v26);
          }
          if ((uint64_t *)v4[12] == v15) {
            v4[12] = v25;
          }
          int v27 = (uint64_t *)v4[13];
          --v4[14];
          sub_89144(v27, v15);
          sub_87810((void *)v15[6]);
          operator delete(v15);
        }
        sub_87810((void *)__p.__r_.__value_.__l.__size_);
      }
      else
      {
LABEL_21:
        uint64_t v19 = (os_log_t *)sub_32A48(13);
        char v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(&__p, v13);
          uint64_t v21 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(void *)int v43 = "PortTypes.h";
          *(_WORD *)&v43[8] = 1024;
          *(_DWORD *)&v43[10] = 111;
          __int16 v44 = 2080;
          int v45 = v21;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Could not find entry for VAD '%s'\"", buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      sub_87810(v35);
      uint64_t v28 = (void *)v10[1];
      if (v28)
      {
        do
        {
          uint64_t v29 = v28;
          uint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          uint64_t v29 = (void *)v10[2];
          BOOL v26 = *v29 == (void)v10;
          uint64_t v10 = v29;
        }
        while (!v26);
      }
      uint64_t v10 = v29;
    }
    while (v29 != v9);
  }
  sub_14D324((uint64_t *)buf, (uint64_t)v31);
  sub_14C334((uint64_t)v33, (uint64_t)v4, 0, (void **)buf);
  sub_463E0(*(void **)&v43[4]);
  sub_13A5C8(a2, (uint64_t)v33);
  *(unsigned char *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 784) = 0;
  sub_11A520(v33);
  sub_463E0(v32);
}

void sub_30C214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_11A520(va);
  sub_463E0(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_30C274(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 4 * a3;
    do
    {
      sub_14CC60((uint64_t **)a1, v4, *a2, *a2);
      ++a2;
      v6 -= 4;
    }
    while (v6);
  }
  return a1;
}

void sub_30C2DC(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

__n128 sub_30C2F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_6334A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_30C328(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_6334A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_30C37C()
{
}

uint64_t sub_30C394(uint64_t result, CFDictionaryRef theDict, void *key)
{
  *(void *)__n128 result = &off_637B38;
  *(void *)(result + 8) = 0;
  if (theDict)
  {
    uint64_t v3 = result;
    value = 0;
    __n128 result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if (result)
    {
      CFTypeID v4 = value ? CFGetTypeID(value) : 0;
      __n128 result = CFArrayGetTypeID();
      if (v4 == result)
      {
        uint64_t v5 = value;
        if (value)
        {
          CFRetain(value);
          uint64_t v6 = v3;
          uint64_t v7 = (uint64_t)v5;
        }
        else
        {
          uint64_t v6 = v3;
          uint64_t v7 = 0;
        }
        return sub_89E18(v6, v7);
      }
    }
  }
  return result;
}

void sub_30C454(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (**(_DWORD **)(a1 + 8) == 1986095474)
  {
    CFTypeID v4 = *(uint64_t **)(a1 + 16);
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    *(void *)buf = v6;
    *(void *)&buf[8] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    sub_3028E8((uint64_t)&v48, (unint64_t *)buf, 1);
    LODWORD(v54) = 1986291046;
    __int16 v55 = v48;
    uint64_t v56 = v49;
    long long v57 = v50;
    if (v50)
    {
      v49[2] = &v56;
      char v48 = &v49;
      uint64_t v49 = 0;
      __int16 v50 = 0;
    }
    else
    {
      __int16 v55 = &v56;
    }
    sub_30BDD0((uint64_t)&v51, (unsigned int *)&v54, 1);
    sub_10E118(v56);
    sub_10E118(v49);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  else
  {
    v52[0] = 0;
    v52[1] = 0;
    int v51 = v52;
  }
  uint64_t v7 = *(void *)(v3 + 112);
  int v45 = **(_DWORD **)(a1 + 32);
  sub_30C274((uint64_t)v46, &v45, 1);
  uint64_t v42 = v7 + 72;
  sub_14D3E0(&v54, (CFStringRef **)(v7 + 72));
  uint64_t v43 = v7;
  uint64_t v10 = *(uint64_t ***)(v7 + 96);
  uint64_t v9 = (uint64_t **)(v7 + 96);
  uint64_t v8 = v10;
  int v58 = 0;
  uint64_t v59 = 0;
  long long v57 = &v58;
  uint64_t v11 = v9 + 1;
  if (v10 != v9 + 1)
  {
    do
    {
      int v12 = sub_1283A0(&v57, (uint64_t *)&v58, (uint64_t **)buf, (uint64_t *)&__p, *((_DWORD *)v8 + 8));
      if (!*v12)
      {
        unsigned int v13 = v12;
        uint64_t v14 = (uint64_t)operator new(0x40uLL);
        *(_DWORD *)(v14 + 32) = *((_DWORD *)v8 + 8);
        sub_14D3E0((uint64_t *)(v14 + 40), (CFStringRef **)v8 + 5);
        uint64_t v15 = *(void *)buf;
        *(void *)uint64_t v14 = 0;
        *(void *)(v14 + 8) = 0;
        *(void *)(v14 + 16) = v15;
        *unsigned int v13 = v14;
        if (*v57)
        {
          long long v57 = (uint64_t **)*v57;
          uint64_t v14 = *v13;
        }
        sub_46D00(v58, (uint64_t *)v14);
        ++v59;
      }
      unsigned int v16 = v8[1];
      if (v16)
      {
        do
        {
          BOOL v17 = (uint64_t **)v16;
          unsigned int v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          BOOL v17 = (uint64_t **)v8[2];
          BOOL v18 = *v17 == (uint64_t *)v8;
          uint64_t v8 = v17;
        }
        while (!v18);
      }
      uint64_t v8 = v17;
    }
    while (v17 != v11);
  }
  uint64_t v19 = v51;
  if (v51 != v52)
  {
    do
    {
      sub_128240((uint64_t)&__p, v19 + 5);
      unsigned int v20 = *((_DWORD *)v19 + 8);
      uint64_t v21 = *v11;
      if (!*v11) {
        goto LABEL_33;
      }
      long long v22 = v9 + 1;
      do
      {
        unsigned int v23 = *((_DWORD *)v21 + 8);
        BOOL v24 = v23 >= v20;
        if (v23 >= v20) {
          id v25 = (uint64_t **)v21;
        }
        else {
          id v25 = (uint64_t **)(v21 + 1);
        }
        if (v24) {
          long long v22 = (uint64_t **)v21;
        }
        uint64_t v21 = *v25;
      }
      while (*v25);
      if (v22 != v11 && *((_DWORD *)v22 + 8) <= v20)
      {
        sub_14D434((uint64_t *)v22 + 5, (CFStringRef *)__p.__r_.__value_.__l.__data_, (CFStringRef **)&__p.__r_.__value_.__l.__size_);
      }
      else
      {
LABEL_33:
        *(_DWORD *)buf = *((_DWORD *)v19 + 8);
        sub_14D3E0((uint64_t *)&buf[8], (CFStringRef **)&__p);
        BOOL v26 = *v11;
        int v27 = v9 + 1;
        uint64_t v28 = v9 + 1;
        if (*v11)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v28 = (uint64_t **)v26;
              unsigned int v29 = *((_DWORD *)v26 + 8);
              if (*(_DWORD *)buf >= v29) {
                break;
              }
              BOOL v26 = *v28;
              int v27 = v28;
              if (!*v28) {
                goto LABEL_40;
              }
            }
            if (v29 >= *(_DWORD *)buf) {
              break;
            }
            BOOL v26 = v28[1];
            if (!v26)
            {
              int v27 = v28 + 1;
              goto LABEL_40;
            }
          }
        }
        else
        {
LABEL_40:
          int v30 = operator new(0x40uLL);
          int v31 = *(_DWORD *)buf;
          uint64_t v33 = *(void *)&buf[8];
          uint64_t v32 = *(void *)&buf[16];
          v30[6] = *(void *)&buf[16];
          uint64_t v34 = (char *)(v30 + 6);
          *((_DWORD *)v30 + 8) = v31;
          v30[5] = v33;
          uint64_t v35 = *(void *)&buf[24];
          v30[7] = *(void *)&buf[24];
          if (v35)
          {
            *(void *)(v32 + 16) = v34;
            *(void *)&buf[8] = &buf[16];
            *(void *)&buf[16] = 0;
            *(void *)&uint8_t buf[24] = 0;
          }
          else
          {
            v30[5] = v34;
          }
          sub_46CA8(v9, (uint64_t)v28, v27, v30);
        }
        sub_87810(*(void **)&buf[16]);
      }
      sub_87810((void *)__p.__r_.__value_.__l.__size_);
      uint64_t v36 = v19[1];
      if (v36)
      {
        do
        {
          __n128 v37 = (void **)v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          __n128 v37 = (void **)v19[2];
          BOOL v18 = *v37 == v19;
          uint64_t v19 = v37;
        }
        while (!v18);
      }
      uint64_t v19 = v37;
    }
    while (v37 != v52);
  }
  uint64_t v38 = (os_log_t *)sub_32A48(8);
  uint64_t v39 = *v38;
  if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
  {
    sub_120C30(&__p, v42);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4097;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = p_p;
    _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disallowed Ports: %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  sub_14D324((uint64_t *)buf, (uint64_t)v46);
  sub_14D378((uint64_t)&v48, v43, (uint64_t)buf);
  sub_463E0(*(void **)&buf[8]);
  sub_120BDC(v58);
  sub_87810(v55);
  uint64_t v41 = sub_13A5C8(a2, (uint64_t)&v48);
  *(unsigned char *)(v41 + 40) = 0;
  *(unsigned char *)(v41 + 784) = 0;
  sub_11A520(&v48);
  sub_463E0(v47);
  sub_12B050(v52[0]);
}

void sub_30C938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  sub_120BDC(*(void **)(v28 + 32));
  sub_87810(a28);
  sub_463E0(a14);
  sub_12B050(a22);
  _Unwind_Resume(a1);
}

__n128 sub_30CA08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_633460;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_30CA38(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_633460;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_30CA8C()
{
}

uint64_t sub_30CAA4()
{
  return std::operator+<char>();
}

uint64_t sub_30CAB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (!v1) {
    sub_56964();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void sub_30CB04(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_30A854((void *)(a1 + 16));

  operator delete();
}

uint64_t sub_30CB60(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_30A854((void *)(a1 + 16));
  return a1;
}

void sub_30CB9C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 112);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v10 = 0x700000006;
    sub_30C274((uint64_t)&v7, (int *)&v10, 2);
    sub_14D378(a2, v3, (uint64_t)&v7);
    CFTypeID v4 = v8;
  }
  else
  {
    uint64_t v9 = 0x700000006;
    sub_30C274((uint64_t)v5, (int *)&v9, 2);
    sub_14D324((uint64_t *)&v7, (uint64_t)v5);
    sub_14C334(a2, v3, 0, &v7);
    sub_463E0(v8);
    CFTypeID v4 = v6;
  }
  sub_463E0(v4);
}

void sub_30CC78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
}

__n128 sub_30CCBC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_633340;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_30CCE4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_633340;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_30CD30()
{
}

void *sub_30CD48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2E5830(a2, *(void *)(a1 + 8), *(const __CFDictionary ***)(a1 + 16), (uint64_t)"client request");
}

__n128 sub_30CD64(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_6332F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_30CD8C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_6332F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_30CDD8()
{
}

uint64_t sub_30CDF0(uint64_t a1, unsigned __int8 *a2)
{
  return sub_2F34DC(*(void *)(a1 + 8), *a2);
}

uint64_t sub_30CE04(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_6332B0;
  a2[1] = v2;
  return result;
}

void *sub_30CE28(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_6332B0;
  result[1] = v3;
  return result;
}

void sub_30CE70()
{
}

void sub_30CE88(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v6, *(unsigned __int8 *)(a1 + 12));
  uint64_t v3 = std::string::insert(&v6, 0, "Route change for PolicyMute (", 0x1DuLL);
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v7, ")", 1uLL);
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_30CF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_30CF6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 12);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  sub_3B7EC();
  unsigned int v20 = &qword_64CC40;
  char v21 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  uint64_t v7 = sub_32A48(8);
  uint64_t v8 = sub_32A48(34);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_7;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_7:
  uint64_t v14 = *(NSObject **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v15 = BYTE4(v6) ? v6 : 1852796517;
    sub_2417C(__p, v15);
    unsigned int v16 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
    __int16 v23 = 1024;
    int v24 = 3745;
    __int16 v25 = 1024;
    int v26 = v4;
    __int16 v27 = 2080;
    uint64_t v28 = v16;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Policy Mute Settings Update %d, new output mode = %s", buf, 0x22u);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_12053C(a2, 1920099684);
  *(_DWORD *)(v5 + 40) = v6;
  *(unsigned char *)(v5 + 44) = BYTE4(v6);
  sub_14C070((uint64_t)buf, v5, 1919970403);
  sub_120690(a2, (uint64_t)buf);
  sub_11A520(buf);
  sub_10C78C(&v20);
  uint64_t result = sub_128688(*(_DWORD *)(a2 + 12));
  if (result) {
    return sub_4F86C(a1 + 32, *(unsigned char *)(a1 + 12));
  }
  return result;
}

void sub_30D1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10C78C(va);
  _Unwind_Resume(a1);
}

void sub_30D1EC(void *a1)
{
  *a1 = off_632F88;
  sub_56A54(a1 + 4);

  operator delete();
}

void *sub_30D250(void *a1)
{
  *a1 = off_632F88;
  sub_56A54(a1 + 4);
  return a1;
}

uint64_t sub_30D294(uint64_t a1, unsigned __int8 *a2)
{
  return sub_2F34DC(*(void *)(a1 + 8), *a2);
}

uint64_t sub_30D2A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_633268;
  a2[1] = v2;
  return result;
}

void *sub_30D2CC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_633268;
  result[1] = v3;
  return result;
}

void sub_30D314()
{
}

uint64_t sub_30D32C()
{
  sub_3DEB58();
  byte_65FAF0 = 0;
  uint64_t result = sub_3AEEEC();
  if (!*(_DWORD *)(result + 8))
  {
    uint64_t result = sub_3DE688();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_3AEEEC();
      *(void *)result &= ~2uLL;
    }
  }
  return result;
}

void sub_30D370(uint64_t a1, uint64_t a2, void *a3)
{
  LOBYTE(__p[0]) = 0;
  char v23 = 0;
  uint64_t v5 = a3 + 1;
  uint64_t v6 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    while (1)
    {
      uint64_t v7 = sub_E1B78(*(void *)(a2 + 128), *((_DWORD *)v6 + 7));
      if (v7)
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 + 96);
        uint64_t v24 = *(void *)(v7 + 88);
        __int16 v25 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_43F38((uint64_t *)&v19, &v24, "", 7539);
        char v9 = (*(uint64_t (**)(void))(*(void *)v19 + 416))(v19);
        if (*((void *)&v19 + 1)) {
          sub_4636C(*((std::__shared_weak_count **)&v19 + 1));
        }
        if (v8) {
          std::__shared_weak_count::__release_weak(v8);
        }
        if (v9) {
          break;
        }
      }
      uint64_t v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v12);
      }
      uint64_t v6 = v11;
      if (v11 == v5)
      {
        int v13 = 0;
        int v14 = 1936289391;
        goto LABEL_35;
      }
    }
  }
  int v14 = 1936289391;
  if (v6 == v5 || (uint64_t v15 = sub_E1B78(*(void *)(a2 + 128), *((_DWORD *)v6 + 7))) == 0)
  {
    int v13 = 0;
  }
  else
  {
    unsigned int v16 = *(std::__shared_weak_count **)(v15 + 96);
    *(void *)&long long v19 = *(void *)(v15 + 88);
    *((void *)&v19 + 1) = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_43F38(&v24, (uint64_t *)&v19, "", 7547);
    if (v16) {
      std::__shared_weak_count::__release_weak(v16);
    }
    uint64_t v17 = v24;
    if (v24)
    {
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v24 + 440))(&v19, v24);
      *(_OWORD *)std::string __p = v19;
      uint64_t v22 = v20;
      int v13 = 1;
      char v23 = 1;
      if (*(_DWORD *)(v17 + 264) == 1781740087)
      {
        int v14 = 1936024681;
      }
      else
      {
        BOOL v18 = (void *)HIBYTE(v22);
        if (v22 < 0) {
          BOOL v18 = __p[1];
        }
        if (v18) {
          int v14 = 1936679529;
        }
        else {
          int v14 = 1936289391;
        }
      }
    }
    else
    {
      int v13 = 0;
    }
    if (v25) {
      sub_4636C(v25);
    }
  }
LABEL_35:
  *(_DWORD *)a1 = v14;
  sub_CAE80((unsigned char *)(a1 + 8), (long long *)__p);
  if (v13)
  {
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_30D5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    sub_4636C(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_30D648(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  uint64_t v19 = v3;
  uint64_t v20 = v4;
  char v9 = a1;
  while (1)
  {
    uint64_t v10 = sub_E1B78(*(void *)(a3 + 128), *((_DWORD *)v9 + 7));
    if (v10)
    {
      uint64_t v15 = 0x676C6F6264706964;
      int v16 = 0;
      if ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v10 + 32))(v10, &v15)) {
        break;
      }
    }
    uint64_t v11 = (void *)v9[1];
    if (v11)
    {
      do
      {
        BOOL v12 = v11;
        uint64_t v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        BOOL v12 = (void *)v9[2];
        BOOL v13 = *v12 == (void)v9;
        char v9 = v12;
      }
      while (!v13);
    }
    char v9 = v12;
    if (v12 == a2) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_30D72C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v6 = sub_E1B78(*(void *)(a3 + 128), *((_DWORD *)v5 + 7));
      if (v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v6 + 96);
        if (v7)
        {
          uint64_t v8 = *(void *)(v6 + 88);
          atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          char v9 = std::__shared_weak_count::lock(v7);
          std::__shared_weak_count::__release_weak(v7);
          if (v9)
          {
            if (v8)
            {
              BOOL v10 = sub_24EC98(v8);
              sub_4636C(v9);
              if (v10) {
                return 0;
              }
            }
            else
            {
              sub_4636C(v9);
            }
          }
        }
      }
      uint64_t v11 = (void *)v5[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)v5[2];
          BOOL v13 = *v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v13);
      }
      uint64_t v5 = v12;
    }
    while (v12 != a2);
  }
  return 1;
}

void sub_30D820(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_30D834(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)sub_BC8B0(a2, 0);
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)*v3;
  if ((void *)*v3 == v3 + 1)
  {
    unsigned int v34 = 0;
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v39 = 0;
    uint64_t v38 = a1;
    do
    {
      uint64_t v8 = (unsigned char *)sub_E1B78(*(void *)(a1 + 128), *((_DWORD *)v5 + 7));
      char v9 = v8;
      if (v8 && v8[105])
      {
        uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 112))(v8);
        id v11 = *(id *)sub_32A48(2);
        BOOL v12 = v11;
        if (v11)
        {
          BOOL v13 = v11;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            uint64_t v14 = *((void *)v9 + 11);
            uint64_t v15 = (std::__shared_weak_count *)*((void *)v9 + 12);
            if (BYTE4(v10)) {
              double v16 = *(float *)&v10;
            }
            else {
              double v16 = -1.0;
            }
            v40[0] = v14;
            v40[1] = (uint64_t)v15;
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            sub_43F38((uint64_t *)&v41, v40, "", 1977);
            sub_4F64((uint64_t)&__p, v41 + 2);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315906;
            int v45 = "VirtualAudio_PlugIn.mm";
            __int16 v46 = 1024;
            int v47 = 1977;
            __int16 v48 = 2048;
            double v49 = v16;
            __int16 v50 = 2080;
            int v51 = p_p;
            _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_INFO, "%25s:%-5d In ApplyBeamFormerPreference, beam direction preference (%f) for port %s", buf, 0x26u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            a1 = v38;
            if (v42) {
              sub_4636C(v42);
            }
            if (v15) {
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        if (BYTE4(v10))
        {
          if ((unint64_t)v7 >= v39)
          {
            uint64_t v18 = (v7 - v6) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              sub_60548();
            }
            if ((uint64_t)(v39 - (void)v6) >> 1 > v19) {
              unint64_t v19 = (uint64_t)(v39 - (void)v6) >> 1;
            }
            if (v39 - (unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20) {
              unint64_t v20 = (unint64_t)sub_46BF4(v20);
            }
            else {
              uint64_t v21 = 0;
            }
            uint64_t v22 = (char *)(v20 + 4 * v18);
            *(_DWORD *)uint64_t v22 = v10;
            char v23 = v22 + 4;
            while (v7 != v6)
            {
              int v24 = *((_DWORD *)v7 - 1);
              v7 -= 4;
              *((_DWORD *)v22 - 1) = v24;
              v22 -= 4;
            }
            unint64_t v39 = v20 + 4 * v21;
            if (v6) {
              operator delete(v6);
            }
            uint64_t v6 = v22;
            uint64_t v7 = v23;
            a1 = v38;
          }
          else
          {
            *(_DWORD *)uint64_t v7 = v10;
            v7 += 4;
          }
        }
      }
      __int16 v25 = (void *)v5[1];
      if (v25)
      {
        do
        {
          int v26 = v25;
          __int16 v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          int v26 = (void *)v5[2];
          BOOL v27 = *v26 == (void)v5;
          uint64_t v5 = v26;
        }
        while (!v27);
      }
      uint64_t v5 = v26;
    }
    while (v26 != v4);
    if (v6 != v7)
    {
      if ((unint64_t)(v7 - v6) >= 5)
      {
        id v28 = *(id *)sub_32A48(2);
        unsigned int v29 = v28;
        if (v28)
        {
          int v30 = v28;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v41 = *(os_unfair_lock_s **)(a2 + 576);
            sub_4D60(&__p, (unsigned int *)&v41);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v31 = &__p;
            }
            else {
              int v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315650;
            int v45 = "VirtualAudio_PlugIn.mm";
            __int16 v46 = 1024;
            int v47 = 1988;
            __int16 v48 = 2080;
            double v49 = *(double *)&v31;
            _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d More than one beam form port preference on VAD: '%s'.", buf, 0x1Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      unsigned int v32 = *(_DWORD *)v6;
      uint64_t v33 = 0x100000000;
      goto LABEL_59;
    }
    unsigned int v32 = 0;
    uint64_t v33 = 0;
    unsigned int v34 = 0;
    uint64_t v35 = 0;
    if (v6)
    {
LABEL_59:
      operator delete(v6);
      unsigned int v34 = v32;
      uint64_t v35 = v33;
    }
  }
  return v35 & 0x100000000 | v34;
}

void sub_30DC60(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_30DCD0(uint64_t a1, float a2)
{
  uint64_t v4 = *(id *)sub_32A48(2);
  uint64_t v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(a1 + 48);
    int v9 = 136315906;
    uint64_t v10 = "VirtualAudio_PlugIn.mm";
    __int16 v11 = 1024;
    int v12 = 329;
    __int16 v13 = 2048;
    double v14 = a2;
    __int16 v15 = 1024;
    int v16 = v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting beam index to %f (was %u).", (uint8_t *)&v9, 0x22u);
  }

  uint64_t result = a2;
  *(_DWORD *)(a1 + 48) = result;
  if (*(unsigned char *)a1)
  {
    uint64_t v8 = *(uint64_t (**)(void))(a1 + 32);
    if (v8) {
      return v8();
    }
  }
  return result;
}

os_signpost_id_t *sub_30DDE8(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(id *)v2;
    if (v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136315650;
        uint64_t v10 = "SignpostUtilities.h";
        __int16 v11 = 1024;
        int v12 = 85;
        __int16 v13 = 2080;
        double v14 = "kRouteChange";
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v9, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    uint64_t v5 = (id)qword_659470;
    int v6 = v5;
    os_signpost_id_t v7 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v9) = 0;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v6, OS_SIGNPOST_INTERVAL_END, v7, "VA_RouteChange", "", (uint8_t *)&v9, 2u);
    }
  }
  return a1;
}

void sub_30DF90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_30DF9C(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *(void *)(*v1 + 144);
  for (uint64_t i = *(void *)(*v1 + 152); v3 != i; v3 += 8)
  {
    uint64_t v4 = *(_DWORD **)v3;
    uint64_t v5 = *v1;
    if (v5 + 184 != sub_1202D0(*v1 + 176, *(_DWORD *)(*(void *)v3 + 576), *(_DWORD *)(*(void *)v3 + 580)))
    {
      uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)v4 + 528))(v4);
      os_signpost_id_t v7 = pthread_self();
      if (pthread_equal(v7, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v6 + 16), memory_order_acquire))
        || (uint64_t v8 = pthread_self(),
            pthread_equal(v8, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v6 + 104), memory_order_acquire))))
      {
        int v9 = (atomic_ullong *)(*(uint64_t (**)(_DWORD *))(*(void *)v4 + 528))(v4);
        sub_B3DBC(v9);
        uint64_t v10 = *(id *)sub_32A48(2);
        __int16 v11 = v10;
        if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = v4[2];
          *(_DWORD *)buf = 136315650;
          uint64_t v21 = "VirtualAudio_PlugIn.mm";
          __int16 v22 = 1024;
          int v23 = 2474;
          __int16 v24 = 1024;
          LODWORD(v25) = v12;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d The IO monitor for device %u was left held after handling a route change. Unlocked it.", buf, 0x18u);
        }
      }
    }
  }
  sub_3B7EC();
  if ((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40))
  {
    sub_3B7EC();
    (*(void (**)(uint64_t *))(qword_64CC40 + 24))(&qword_64CC40);
    __int16 v13 = *(id *)sub_32A48(2);
    double v14 = v13;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v21 = "VirtualAudio_PlugIn.mm";
      __int16 v22 = 1024;
      int v23 = 2497;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d The routing mutex was left held after handling a route change. Unlocked it.", buf, 0x12u);
    }
  }
  uint64_t v15 = *v1;
  if (*(void *)(*v1 + 192))
  {
    int v16 = *(id *)sub_32A48(2);
    uint64_t v17 = v16;
    if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v21 = "VirtualAudio_PlugIn.mm";
      __int16 v22 = 1024;
      int v23 = 2514;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VirtualAudio_Plugin belived it had changing devices after handling a route change. Clear it.", buf, 0x12u);
    }

    uint64_t v15 = *v1;
  }
  unint64_t v19 = *(void **)(v15 + 184);
  uint64_t v18 = (void *)(v15 + 184);
  sub_463E0(v19);
  *(v18 - 1) = v18;
  *uint64_t v18 = 0;
  v18[1] = 0;
}

void sub_30E4BC(_Unwind_Exception *a1)
{
}

void sub_30E4C8(_Unwind_Exception *a1)
{
}

void sub_30E4D4(_Unwind_Exception *a1)
{
}

void sub_30E4E0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, long long a16)
{
  if (a2)
  {
    if (a2 == 3)
    {
      uint64_t v17 = __cxa_begin_catch(a1);
      uint64_t v18 = *(id *)sub_32A48(2);
      unint64_t v19 = v18;
      if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        int v20 = v17[2];
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 2501;
        WORD1(a16) = 1024;
        DWORD1(a16) = v20;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException: %d.", (uint8_t *)&buf, 0x18u);
      }
    }
    else
    {
      uint64_t v21 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        __int16 v22 = v21;
        int v23 = *(id *)sub_32A48(2);
        unint64_t v19 = v23;
        if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 2505;
          WORD1(a16) = 2080;
          *(void *)((char *)&a16 + 4) = v24;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception: %s.", (uint8_t *)&buf, 0x1Cu);
        }
      }
      else
      {
        uint64_t v25 = *(id *)sub_32A48(2);
        unint64_t v19 = v25;
        if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "VirtualAudio_PlugIn.mm";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 2509;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception.", (uint8_t *)&buf, 0x12u);
        }
      }
    }

    __cxa_end_catch();
    JUMPOUT(0x30E3E8);
  }
  _Unwind_Resume(a1);
}

void sub_30E6E0(_Unwind_Exception *a1)
{
}

void sub_30E6EC(_Unwind_Exception *a1)
{
}

void sub_30E6F8(_Unwind_Exception *a1)
{
}

void sub_30E704(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_30E728(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_632EE8;
  a2[1] = v2;
  return result;
}

void *sub_30E74C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_632EE8;
  result[1] = v3;
  return result;
}

void sub_30E794()
{
}

void *sub_30E7AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = **(_DWORD ***)(a1 + 16);
  if (v3[2]) {
    goto LABEL_17;
  }
  uint64_t v4 = sub_32A48(2);
  uint64_t v5 = sub_32A48(34);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_8;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_8:
  id v11 = *(id *)v4;
  int v12 = v11;
  if (v11)
  {
    __int16 v13 = v11;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v3 + 24))(__p, v3);
      double v14 = v78 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      __int16 v80 = 1024;
      int v81 = 3872;
      __int16 v82 = 2080;
      uint64_t v83 = "internal update";
      __int16 v84 = 2080;
      uint64_t v85 = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route configuration change initiated [ %s ]. Cause: %s.", buf, 0x26u);
      if (v78 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v3[2])
  {
LABEL_17:
    uint64_t v15 = sub_32A48(2);
    uint64_t v16 = sub_32A48(34);
    char v17 = 0;
    uint64_t v18 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1;
      if (v21) {
        goto LABEL_23;
      }
    }
    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
LABEL_23:
    id v22 = *(id *)v15;
    int v23 = v22;
    if (v22)
    {
      uint64_t v24 = v22;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)v3 + 24))(__p, v3);
        uint64_t v25 = v78 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        __int16 v80 = 1024;
        int v81 = 3875;
        __int16 v82 = 2080;
        uint64_t v83 = "internal update";
        __int16 v84 = 2080;
        uint64_t v85 = v25;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Route configuration change initiated [ %s ]. Cause: %s.", buf, 0x26u);
        if (v78 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  (*(void (**)(unsigned char *__return_ptr, _DWORD *))(*(void *)v3 + 16))(buf, v3);
  sub_13A5C8(a2, (uint64_t)buf);
  *(unsigned char *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 784) = 0;
  uint64_t result = sub_11A520(buf);
  if (*(_DWORD *)(a2 + 8))
  {
    sub_12053C((uint64_t)__p, 1920099684);
    sub_13A5C8((uint64_t)buf, (uint64_t)__p);
    LOBYTE(v86) = 0;
    unsigned __int8 v155 = 0;
    sub_120690(a2, (uint64_t)buf);
    if (*(unsigned __int8 *)(a2 + 784) == v155)
    {
      if (!*(unsigned char *)(a2 + 784))
      {
LABEL_110:
        sub_11A520(buf);
        return sub_11A520(__p);
      }
      *(_OWORD *)(a2 + 40) = v86;
      uint64_t v27 = a2 + 64;
      sub_10E118(*(void **)(a2 + 64));
      uint64_t v28 = v88;
      *(void *)(a2 + 56) = v87;
      *(void *)(a2 + 64) = v28;
      uint64_t v29 = v89;
      *(void *)(a2 + 72) = v89;
      if (v29)
      {
        *(void *)(v28 + 16) = v27;
        uint64_t v87 = &v88;
        uint64_t v88 = 0;
        uint64_t v89 = 0;
      }
      else
      {
        *(void *)(a2 + 56) = v27;
      }
      uint64_t v30 = a2 + 88;
      sub_10E118(*(void **)(a2 + 88));
      uint64_t v31 = v91;
      *(void *)(a2 + 80) = v90;
      *(void *)(a2 + 88) = v31;
      uint64_t v32 = v92;
      *(void *)(a2 + 96) = v92;
      if (v32)
      {
        *(void *)(v31 + 16) = v30;
        int v90 = &v91;
        uint64_t v91 = 0;
        uint64_t v92 = 0;
      }
      else
      {
        *(void *)(a2 + 80) = v30;
      }
      uint64_t v33 = a2 + 112;
      sub_12B050(*(void **)(a2 + 112));
      uint64_t v34 = v94;
      *(void *)(a2 + 104) = v93;
      *(void *)(a2 + 112) = v34;
      uint64_t v35 = v95;
      *(void *)(a2 + 120) = v95;
      if (v35)
      {
        *(void *)(v34 + 16) = v33;
        uint64_t v93 = &v94;
        uint64_t v94 = 0;
        uint64_t v95 = 0;
      }
      else
      {
        *(void *)(a2 + 104) = v33;
      }
      uint64_t v36 = a2 + 136;
      sub_463E0(*(void **)(a2 + 136));
      uint64_t v37 = v97;
      *(void *)(a2 + 128) = v96;
      *(void *)(a2 + 136) = v37;
      uint64_t v38 = v98;
      *(void *)(a2 + 144) = v98;
      if (v38)
      {
        *(void *)(v37 + 16) = v36;
        long long v96 = &v97;
        uint64_t v97 = 0;
        uint64_t v98 = 0;
      }
      else
      {
        *(void *)(a2 + 128) = v36;
      }
      uint64_t v39 = a2 + 160;
      sub_463E0(*(void **)(a2 + 160));
      uint64_t v40 = v100;
      *(void *)(a2 + 152) = v99;
      *(void *)(a2 + 160) = v40;
      uint64_t v41 = v101;
      *(void *)(a2 + 168) = v101;
      if (v41)
      {
        *(void *)(v40 + 16) = v39;
        char v99 = &v100;
        uint64_t v100 = 0;
        uint64_t v101 = 0;
      }
      else
      {
        *(void *)(a2 + 152) = v39;
      }
      *(void *)(a2 + 176) = v102;
      int v42 = v104;
      *(_DWORD *)(a2 + 184) = v103;
      *(_DWORD *)(a2 + 192) = v42;
      uint64_t v43 = (void **)(a2 + 200);
      if (*(char *)(a2 + 223) < 0) {
        operator delete(*v43);
      }
      *(_OWORD *)uint64_t v43 = v105;
      uint64_t v44 = v107;
      *(void *)(a2 + 216) = v106;
      HIBYTE(v106) = 0;
      LOBYTE(v105) = 0;
      *(void *)(a2 + 224) = v44;
      sub_7E22C((void **)(a2 + 232));
      *(_OWORD *)(a2 + 232) = v108;
      *(void *)(a2 + 248) = v109;
      uint64_t v109 = 0;
      long long v108 = 0uLL;
      sub_7E22C((void **)(a2 + 256));
      *(_OWORD *)(a2 + 256) = v110;
      *(void *)(a2 + 272) = v111;
      uint64_t v111 = 0;
      long long v110 = 0uLL;
      sub_2FF6EC(a2 + 280, v112);
      sub_2FF6EC(a2 + 320, v113);
      sub_2FF6EC(a2 + 360, v114);
      *(void *)(a2 + 400) = v114[5];
      *(_DWORD *)(a2 + 408) = v115;
      int v45 = (void **)(a2 + 416);
      if (*(unsigned __int8 *)(a2 + 440) == v118)
      {
        if (*(unsigned char *)(a2 + 440))
        {
          if (*(char *)(a2 + 439) < 0) {
            operator delete(*v45);
          }
          *(_OWORD *)int v45 = v116;
          *(void *)(a2 + 432) = v117;
          HIBYTE(v117) = 0;
          LOBYTE(v116) = 0;
        }
      }
      else if (*(unsigned char *)(a2 + 440))
      {
        if (*(char *)(a2 + 439) < 0) {
          operator delete(*v45);
        }
        *(unsigned char *)(a2 + 440) = 0;
      }
      else
      {
        *(_OWORD *)int v45 = v116;
        *(void *)(a2 + 432) = v117;
        uint64_t v117 = 0;
        long long v116 = 0uLL;
        *(unsigned char *)(a2 + 440) = 1;
      }
      *(unsigned char *)(a2 + 448) = v119;
      uint64_t v46 = a2 + 464;
      sub_463E0(*(void **)(a2 + 464));
      uint64_t v47 = v121;
      *(void *)(a2 + 456) = v120;
      *(void *)(a2 + 464) = v47;
      uint64_t v48 = v122;
      *(void *)(a2 + 472) = v122;
      if (v48)
      {
        *(void *)(v47 + 16) = v46;
        std::string v120 = &v121;
        uint64_t v121 = 0;
        uint64_t v122 = 0;
      }
      else
      {
        *(void *)(a2 + 456) = v46;
      }
      uint64_t v49 = a2 + 488;
      sub_463E0(*(void **)(a2 + 488));
      uint64_t v50 = v124;
      *(void *)(a2 + 480) = v123;
      *(void *)(a2 + 488) = v50;
      uint64_t v51 = v125;
      *(void *)(a2 + 496) = v125;
      if (v51)
      {
        *(void *)(v50 + 16) = v49;
        v123 = &v124;
        uint64_t v124 = 0;
        uint64_t v125 = 0;
      }
      else
      {
        *(void *)(a2 + 480) = v49;
      }
      uint64_t v52 = a2 + 512;
      sub_463E0(*(void **)(a2 + 512));
      uint64_t v53 = v127;
      *(void *)(a2 + 504) = v126;
      *(void *)(a2 + 512) = v53;
      uint64_t v54 = v128;
      *(void *)(a2 + 520) = v128;
      if (v54)
      {
        *(void *)(v53 + 16) = v52;
        v126 = &v127;
        uint64_t v127 = 0;
        uint64_t v128 = 0;
      }
      else
      {
        *(void *)(a2 + 504) = v52;
      }
      uint64_t v55 = a2 + 536;
      sub_463E0(*(void **)(a2 + 536));
      *(void *)(a2 + 528) = v129;
      uint64_t v56 = v130;
      *(void *)(a2 + 536) = v130;
      uint64_t v57 = v131;
      *(void *)(a2 + 544) = v131;
      if (v57)
      {
        *(void *)(v56 + 16) = v55;
        CFStringRef v129 = &v130;
        uint64_t v130 = 0;
        uint64_t v131 = 0;
      }
      else
      {
        *(void *)(a2 + 528) = v55;
      }
      uint64_t v58 = a2 + 560;
      sub_463E0(*(void **)(a2 + 560));
      *(void *)(a2 + 552) = v132;
      uint64_t v59 = v133;
      *(void *)(a2 + 560) = v133;
      uint64_t v60 = v134;
      *(void *)(a2 + 568) = v134;
      if (v60)
      {
        *(void *)(v59 + 16) = v58;
        v132 = &v133;
        uint64_t v133 = 0;
        uint64_t v134 = 0;
      }
      else
      {
        *(void *)(a2 + 552) = v58;
      }
      sub_303B8C((unsigned char *)(a2 + 576), (uint64_t)&v135);
      v61 = (void *)(a2 + 600);
      std::string v62 = *(void **)(a2 + 600);
      if (v62)
      {
        *(void *)(a2 + 608) = v62;
        operator delete(v62);
        void *v61 = 0;
        *(void *)(a2 + 608) = 0;
        *(void *)(a2 + 616) = 0;
      }
      *(_OWORD *)v61 = v136;
      *(void *)(a2 + 616) = v137;
      uint64_t v137 = 0;
      long long v136 = 0uLL;
      *(_DWORD *)(a2 + 624) = v138;
      *(unsigned char *)(a2 + 628) = v139;
      sub_303B8C((unsigned char *)(a2 + 632), (uint64_t)v140);
      *(_DWORD *)(a2 + 656) = v140[6];
      *(unsigned char *)(a2 + 660) = v141;
      uint64_t v63 = *(void *)(a2 + 664);
      *(void *)(a2 + 664) = v142;
      uint64_t v142 = v63;
      *(_DWORD *)(a2 + 672) = v143;
      *(unsigned char *)(a2 + 676) = v144;
      long long v64 = v145;
      long long v145 = 0uLL;
      int v65 = *(std::__shared_weak_count **)(a2 + 688);
      *(_OWORD *)(a2 + 680) = v64;
      if (v65) {
        std::__shared_weak_count::__release_weak(v65);
      }
      long long v66 = v146;
      long long v146 = 0uLL;
      int v67 = *(std::__shared_weak_count **)(a2 + 704);
      *(_OWORD *)(a2 + 696) = v66;
      if (v67) {
        std::__shared_weak_count::__release_weak(v67);
      }
      BOOL v68 = (void **)(a2 + 712);
      if (*(unsigned __int8 *)(a2 + 736) == v149)
      {
        if (*(unsigned char *)(a2 + 736))
        {
          uint64_t v69 = *v68;
          if (*v68)
          {
            *(void *)(a2 + 720) = v69;
            operator delete(v69);
            *BOOL v68 = 0;
            *(void *)(a2 + 720) = 0;
            *(void *)(a2 + 728) = 0;
          }
          *(_OWORD *)BOOL v68 = v147;
          *(void *)(a2 + 728) = v148;
          uint64_t v148 = 0;
          long long v147 = 0uLL;
        }
      }
      else if (*(unsigned char *)(a2 + 736))
      {
        uint64_t v70 = *v68;
        if (*v68)
        {
          *(void *)(a2 + 720) = v70;
          operator delete(v70);
        }
        *(unsigned char *)(a2 + 736) = 0;
      }
      else
      {
        *(_OWORD *)BOOL v68 = v147;
        *(void *)(a2 + 728) = v148;
        uint64_t v148 = 0;
        long long v147 = 0uLL;
        *(unsigned char *)(a2 + 736) = 1;
      }
      if (*(unsigned __int8 *)(a2 + 768) == v153)
      {
        if (*(unsigned char *)(a2 + 768))
        {
          uint64_t v71 = a2 + 752;
          sub_7DB7C(*(void **)(a2 + 752));
          *(void *)(a2 + 744) = v150;
          uint64_t v72 = v151;
          *(void *)(a2 + 752) = v151;
          uint64_t v73 = v152;
          *(void *)(a2 + 760) = v152;
          if (v73)
          {
            *(void *)(v72 + 16) = v71;
            std::string v150 = &v151;
            uint64_t v151 = 0;
            uint64_t v152 = 0;
          }
          else
          {
            *(void *)(a2 + 744) = v71;
          }
        }
      }
      else if (*(unsigned char *)(a2 + 768))
      {
        sub_7DB7C(*(void **)(a2 + 752));
        *(unsigned char *)(a2 + 768) = 0;
      }
      else
      {
        *(void *)(a2 + 744) = v150;
        uint64_t v74 = a2 + 752;
        uint64_t v75 = v151;
        *(void *)(a2 + 752) = v151;
        uint64_t v76 = v152;
        *(void *)(a2 + 760) = v152;
        if (v76)
        {
          *(void *)(v75 + 16) = v74;
          std::string v150 = &v151;
          uint64_t v151 = 0;
          uint64_t v152 = 0;
        }
        else
        {
          *(void *)(a2 + 744) = v74;
        }
        *(unsigned char *)(a2 + 768) = 1;
      }
      *(void *)(a2 + 776) = v154;
    }
    else if (*(unsigned char *)(a2 + 784))
    {
      sub_2E9FD8(a2 + 40);
      *(unsigned char *)(a2 + 784) = 0;
    }
    else
    {
      sub_30338C(a2 + 40, (uint64_t)&v86);
      *(unsigned char *)(a2 + 784) = 1;
    }
    if (v155) {
      sub_2E9FD8((uint64_t)&v86);
    }
    goto LABEL_110;
  }
  return result;
}

void sub_30F18C(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v2;

  _Unwind_Resume(a1);
}

__n128 sub_30F22C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_633220;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_30F254(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_633220;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_30F2A0()
{
}

uint64_t sub_30F2B8(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  uint64_t v3 = 0x676C6F6268657973;
  int v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v1 + 72))(v1, 1, &v3, 1);
}

void sub_30F320(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(id *)sub_32A48(2);
  uint64_t v3 = v2;
  if (v2 && os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(v1 + 108);
    int v5 = 136315650;
    char v6 = "VirtualAudio_PlugIn.mm";
    __int16 v7 = 1024;
    int v8 = 5471;
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlugIn initialized ? %d", (uint8_t *)&v5, 0x18u);
  }
}

unint64_t sub_30F3F8(uint64_t a1, int a2, unsigned int *a3)
{
  if ((a2 | 4) != 4)
  {
    uint64_t v9 = sub_32A48(13);
    int v10 = sub_7D5E8(1, *(void **)v9, *(void *)(v9 + 8));
    id v11 = v10;
    if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      double v14 = "VirtualAudio_PlugIn.mm";
      __int16 v15 = 1024;
      int v16 = 2436;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((a2 == 0) != (a3 == 0))
  {
    uint64_t v5 = sub_32A48(13);
    char v6 = sub_7D5E8(1, *(void **)v5, *(void *)(v5 + 8));
    __int16 v7 = v6;
    if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      double v14 = "VirtualAudio_PlugIn.mm";
      __int16 v15 = 1024;
      int v16 = 2437;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }

    int v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v8, "Precondition failure.");
  }
  uint64_t v3 = (unsigned int *)(a1 + 224);
  if (a3) {
    uint64_t v3 = a3;
  }
  return *v3 | ((unint64_t)*(unsigned int *)(a1 + 228) << 32);
}

void sub_30F600(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_30F620(uint64_t a1, _OWORD *a2, void *a3, uint64_t a4, uint64_t **a5, uint64_t a6, uint64_t a7, char a8)
{
  *(_OWORD *)a1 = *a2;
  sub_139C70(a1 + 16, a3);
  *(void *)(a1 + 48) = 0;
  double v14 = (uint64_t *)(a1 + 48);
  __int16 v15 = (uint64_t **)(a1 + 40);
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  uint64_t v45 = a1;
  sub_46A4C((uint64_t *)(a1 + 88), a4);
  sub_46A4C((uint64_t *)(a1 + 112), a6);
  *(_DWORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 1;
  *(_DWORD *)(a1 + 144) = 1668248944;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)a7;
  int v16 = (_OWORD *)(a1 + 160);
  if (*(char *)(a7 + 31) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 160), *(void **)(a7 + 8), *(void *)(a7 + 16));
  }
  else
  {
    long long v17 = *(_OWORD *)(a7 + 8);
    *(void *)(a1 + 176) = *(void *)(a7 + 24);
    _OWORD *v16 = v17;
  }
  uint64_t v18 = *(void *)(a7 + 32);
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 184) = v18;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(void *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 272) = 1065353216;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_DWORD *)(a1 + 352) = 1065353216;
  *(unsigned char *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 364) = 0;
  *(_WORD *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 370) = a8;
  *(unsigned char *)(a1 + 371) = 0;
  *(unsigned char *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  if (v15 != a5)
  {
    char v21 = *a5;
    uint64_t v19 = (uint64_t *)(a5 + 1);
    uint64_t v20 = v21;
    if (*(void *)(a1 + 56))
    {
      id v22 = *v15;
      std::__shared_weak_count *v15 = v14;
      *(void *)(*v14 + 16) = 0;
      *double v14 = 0;
      *(void *)(a1 + 56) = 0;
      if (v22[1]) {
        int v23 = (uint64_t *)v22[1];
      }
      else {
        int v23 = v22;
      }
      if (v23)
      {
        uint64_t v24 = sub_6CA9C((uint64_t)v23);
        if (v20 == v19)
        {
          int v26 = v23;
        }
        else
        {
          uint64_t v25 = v20;
          do
          {
            int v26 = v24;
            uint64_t v28 = v25[4];
            uint64_t v27 = v25[5];
            if (v27) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 16), 1uLL, memory_order_relaxed);
            }
            uint64_t v29 = (std::__shared_weak_count *)v23[5];
            v23[4] = v28;
            v23[5] = v27;
            if (v29) {
              std::__shared_weak_count::__release_weak(v29);
            }
            uint64_t v30 = (uint64_t *)*v14;
            uint64_t v31 = (uint64_t **)(a1 + 48);
            uint64_t v32 = (uint64_t **)(a1 + 48);
            if (*v14)
            {
              do
              {
                while (1)
                {
                  uint64_t v31 = (uint64_t **)v30;
                  if (!sub_E0404((unint64_t *)v23 + 4, (unint64_t *)v30 + 4)) {
                    break;
                  }
                  uint64_t v30 = *v31;
                  uint64_t v32 = v31;
                  if (!*v31) {
                    goto LABEL_22;
                  }
                }
                uint64_t v30 = v31[1];
              }
              while (v30);
              uint64_t v32 = v31 + 1;
            }
LABEL_22:
            sub_46CA8(v15, (uint64_t)v31, v32, v23);
            if (v26) {
              uint64_t v24 = sub_6CA9C((uint64_t)v26);
            }
            else {
              uint64_t v24 = 0;
            }
            uint64_t v33 = (uint64_t *)v25[1];
            if (v33)
            {
              do
              {
                uint64_t v20 = v33;
                uint64_t v33 = (uint64_t *)*v33;
              }
              while (v33);
            }
            else
            {
              do
              {
                uint64_t v20 = (uint64_t *)v25[2];
                BOOL v34 = *v20 == (void)v25;
                uint64_t v25 = v20;
              }
              while (!v34);
            }
            if (!v26) {
              break;
            }
            int v23 = v26;
            uint64_t v25 = v20;
          }
          while (v20 != v19);
        }
        sub_10E118(v26);
        if (v24)
        {
          for (uint64_t i = (uint64_t *)v24[2]; i; uint64_t i = (uint64_t *)i[2])
            uint64_t v24 = i;
          sub_10E118(v24);
        }
        int v16 = (_OWORD *)(a1 + 160);
      }
      else
      {
        sub_10E118(0);
      }
    }
    if (v20 != v19)
    {
      do
      {
        uint64_t v36 = operator new(0x30uLL);
        uint64_t v37 = v16;
        uint64_t v38 = v20[5];
        uint8_t v36[4] = v20[4];
        v36[5] = v38;
        if (v38) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 16), 1uLL, memory_order_relaxed);
        }
        uint64_t v39 = (uint64_t *)*v14;
        uint64_t v40 = (uint64_t **)v14;
        uint64_t v41 = (uint64_t **)v14;
        if (*v14)
        {
          do
          {
            while (1)
            {
              uint64_t v40 = (uint64_t **)v39;
              if (!sub_E0404(v36 + 4, (unint64_t *)v39 + 4)) {
                break;
              }
              uint64_t v39 = *v40;
              uint64_t v41 = v40;
              if (!*v40) {
                goto LABEL_49;
              }
            }
            uint64_t v39 = v40[1];
          }
          while (v39);
          uint64_t v41 = v40 + 1;
        }
LABEL_49:
        sub_46CA8(v15, (uint64_t)v40, v41, v36);
        int v42 = (uint64_t *)v20[1];
        if (v42)
        {
          do
          {
            uint64_t v43 = v42;
            int v42 = (uint64_t *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            uint64_t v43 = (uint64_t *)v20[2];
            BOOL v34 = *v43 == (void)v20;
            uint64_t v20 = v43;
          }
          while (!v34);
        }
        uint64_t v20 = v43;
        int v16 = v37;
      }
      while (v43 != v19);
    }
  }
  return v45;
}

void sub_30F9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  sub_463E0(a10[15]);
  sub_463E0(a10[12]);
  sub_12CE80(v10);
  sub_10E118(a10[3]);
  _Unwind_Resume(a1);
}

void sub_30FA38(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  CFMutableArrayRef theArray = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  *(void *)a1 = theArray;
  *(_WORD *)(a1 + 8) = 257;
  sub_7F024((uint64_t)v47, a4);
  uint64_t v8 = *a3;
  uint64_t v21 = a3[1];
  if (*a3 != v21)
  {
    do
    {
      sub_2F4540((uint64_t *)&v45, (uint64_t)v47, *(_DWORD *)(v8 + 4));
      uint64_t v9 = v45;
      uint64_t v24 = v46;
      if (v45 != v46)
      {
        uint64_t v22 = v8;
        uint64_t v23 = v8 + 8;
        do
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          __int16 v44 = 257;
          sub_1D4AF4((uint64_t)&Mutable, @"device type", *(_DWORD *)v8);
          if (*v9) {
            sub_1D4AF4((uint64_t)&Mutable, @"audio session id", *v9);
          }
          int v26 = v9;
          uint64_t v10 = sub_2EA964(*(_DWORD *)v8, *(_DWORD *)(v8 + 4), *(uint64_t **)(a2 + 144), *(uint64_t **)(a2 + 152));
          id v11 = (unsigned int *)v8;
          uint64_t v12 = v10;
          sub_16F4A4(&v42, v11);
          if (HIBYTE(v44) && v42 && Mutable) {
            CFDictionarySetValue(Mutable, @"device UID", v42);
          }
          if (v12 && ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 112))(v12) & 1) == 0)
          {
            sub_1D4AF4((uint64_t)&Mutable, @"device ID", *(_DWORD *)(v12 + 8));
            if (HIBYTE(v44))
            {
              int v13 = *(const void **)(v12 + 592);
              if (v13)
              {
                if (Mutable) {
                  CFDictionarySetValue(Mutable, @"device name", v13);
                }
              }
            }
            sub_1D4A4C((uint64_t)&Mutable, @"persisted", 1);
          }
          CFMutableArrayRef v40 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          __int16 v41 = 257;
          value = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          __int16 v39 = 257;
          sub_BCAD8(&v36, v23, "", 4721);
          for (uint64_t i = v37; i != &v36; uint64_t i = (uint64_t *)i[1])
          {
            uint64_t v15 = i[2];
            __int16 v16 = *(_WORD *)(v15 + 184);
            std::string __p = 0;
            uint64_t v28 = 0;
            uint64_t v29 = 0;
            strcpy(v30, "cwdv");
            v30[8] = 0;
            int v31 = 3;
            v33[0] = 0;
            v33[1] = 0;
            uint64_t v32 = v33;
            CFTypeRef cf = 0;
            int v34 = 44731050;
            int v17 = sub_E00F4(*(void *)(a2 + 128), v15, (uint64_t)&__p);
            if (v16) {
              p_value = (void **)&v40;
            }
            else {
              p_value = &value;
            }
            sub_451D0((uint64_t)p_value, v17);
            if (cf) {
              CFRelease(cf);
            }
            sub_463E0(v33[0]);
            if (__p)
            {
              uint64_t v28 = __p;
              operator delete(__p);
            }
          }
          sub_B8E4(&v36);
          uint64_t v19 = Mutable;
          if (HIBYTE(v44))
          {
            uint64_t v8 = v22;
            uint64_t v20 = v26;
            if (!v40
              || !Mutable
              || (CFDictionarySetValue(Mutable, @"input ports", v40), uint64_t v19 = Mutable, HIBYTE(v44)))
            {
              if (value && v19)
              {
                CFDictionarySetValue(v19, @"output ports", value);
                uint64_t v19 = Mutable;
              }
            }
          }
          else
          {
            uint64_t v8 = v22;
            uint64_t v20 = v26;
          }
          if (theArray) {
            CFArrayAppendValue(theArray, v19);
          }
          sub_3D61C((uint64_t)&value);
          sub_3D61C((uint64_t)&v40);
          if (v42) {
            CFRelease(v42);
          }
          sub_80594((uint64_t)&Mutable);
          uint64_t v9 = v20 + 1;
        }
        while (v9 != v24);
        uint64_t v9 = v45;
      }
      if (v9)
      {
        uint64_t v46 = v9;
        operator delete(v9);
      }
      v8 += 32;
    }
    while (v8 != v21);
  }
  sub_7F264(v48);
}

void sub_30FDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,CFTypeRef cf,char a28,uint64_t a29,uint64_t a30,char a31)
{
}

BOOL sub_30FEC0(uint64_t a1, uint64_t a2)
{
  return ((a2 << 63 >> 63) & a1) != 0;
}

CFArrayRef sub_30FED0(uint64_t *a1, CFArrayRef *a2, uint64_t a3, __n128 a4)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  v164 = a1;
  a1[2] = 0;
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  if (v5)
  {
    char v6 = sub_16AC60(a3);
    __int16 v7 = v164;
    v6[1] = v164;
    uint64_t v8 = *v7;
    *char v6 = *v7;
    *(void *)(v8 + 8) = v6;
    *__int16 v7 = (uint64_t)v6;
    ++v7[2];
  }
  unsigned int v9 = 0;
  a4.n128_u64[0] = 136315906;
  __n128 v162 = a4;
  a4.n128_u64[0] = 136315650;
  __n128 v163 = a4;
  int64_t v160 = a2;
  while (1)
  {
    CFArrayRef result = *a2;
    if (*a2) {
      CFArrayRef result = (const __CFArray *)CFArrayGetCount(result);
    }
    if (v9 >= result) {
      return result;
    }
    CFDictionaryRef v188 = 0;
    sub_1D1C44(a2, v9, &v188);
    CFDictionaryRef v186 = v188;
    __int16 v187 = 0;
    sub_21C8C(&v183, "");
    unsigned int v182 = 0;
    if (sub_1D4800(v186, @"device ID", &v182))
    {
      std::to_string((std::string *)v189, v182);
      id v11 = std::string::insert((std::string *)v189, 0, "- Device ID: ", 0xDuLL);
      std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
      v194.__r_.__value_.__r.__words[0] = v11->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
      char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      double v14 = operator new(0x28uLL);
      std::string::size_type v15 = v194.__r_.__value_.__r.__words[0];
      v14[2] = v12;
      v14[3] = v15;
      *(void *)((char *)v14 + 31) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
      *((unsigned char *)v14 + 39) = v13;
      __int16 v16 = v164;
      uint64_t v17 = *v164;
      *double v14 = *v164;
      v14[1] = v16;
      *(void *)(v17 + 8) = v14;
      uint64_t *v16 = (uint64_t)v14;
      ++v16[2];
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
      if (v185 < 0)
      {
        uint64_t v184 = 2;
        uint64_t v18 = v183;
      }
      else
      {
        char v185 = 2;
        uint64_t v18 = (char *)&v183;
      }
      strcpy(v18, "  ");
    }
    unsigned int v181 = 0;
    if (sub_1D4800(v186, @"device type", &v181))
    {
      if (v185 >= 0) {
        size_t v19 = v185;
      }
      else {
        size_t v19 = v184;
      }
      sub_5E220((uint64_t)v189, v19 + 15);
      if (v191[3] >= 0) {
        uint64_t v20 = v189;
      }
      else {
        uint64_t v20 = *(unsigned char **)v189;
      }
      if (v19)
      {
        if (v185 >= 0) {
          uint64_t v21 = (void **)&v183;
        }
        else {
          uint64_t v21 = (void **)v183;
        }
        memmove(v20, v21, v19);
      }
      strcpy(&v20[v19], "- Device Type: ");
      sub_2417C(&v194, v181);
      if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v22 = &v194;
      }
      else {
        uint64_t v22 = (std::string *)v194.__r_.__value_.__r.__words[0];
      }
      if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v194.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v194.__r_.__value_.__l.__size_;
      }
      uint64_t v24 = std::string::append((std::string *)v189, (const std::string::value_type *)v22, size);
      std::string::size_type v25 = v24->__r_.__value_.__r.__words[0];
      *(void *)&long long inAddress = v24->__r_.__value_.__l.__size_;
      *(void *)((char *)&inAddress + 7) = *(std::string::size_type *)((char *)&v24->__r_.__value_.__r.__words[1] + 7);
      char v26 = HIBYTE(v24->__r_.__value_.__r.__words[2]);
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      uint64_t v27 = operator new(0x28uLL);
      uint64_t v28 = inAddress;
      v27[2] = v25;
      v27[3] = v28;
      *(void *)((char *)v27 + 31) = *(void *)((char *)&inAddress + 7);
      *((unsigned char *)v27 + 39) = v26;
      uint64_t v29 = v164;
      uint64_t v30 = *v164;
      *uint64_t v27 = *v164;
      v27[1] = v29;
      *(void *)(v30 + 8) = v27;
      *uint64_t v29 = (uint64_t)v27;
      ++v29[2];
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v194.__r_.__value_.__l.__data_);
      }
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
    }
    CFStringRef v180 = 0;
    if (sub_1D486C(v186, @"device UID", (const __CFDictionary **)&v180))
    {
      sub_21B7C(v189, v180);
      int v31 = std::string::insert((std::string *)v189, 0, "  - Device UID: ", 0x10uLL);
      std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
      v194.__r_.__value_.__r.__words[0] = v31->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
      char v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      int v34 = operator new(0x28uLL);
      std::string::size_type v35 = v194.__r_.__value_.__r.__words[0];
      v34[2] = v32;
      v34[3] = v35;
      *(void *)((char *)v34 + 31) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
      *((unsigned char *)v34 + 39) = v33;
      uint64_t v36 = v164;
      uint64_t v37 = *v164;
      *int v34 = *v164;
      v34[1] = v36;
      *(void *)(v37 + 8) = v34;
      *uint64_t v36 = (uint64_t)v34;
      ++v36[2];
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
    }
    CFStringRef v179 = 0;
    if (sub_1D486C(v186, @"device name", (const __CFDictionary **)&v179))
    {
      sub_21B7C(v189, v179);
      uint64_t v38 = std::string::insert((std::string *)v189, 0, "  - Device Name: ", 0x11uLL);
      std::string::size_type v39 = v38->__r_.__value_.__r.__words[0];
      v194.__r_.__value_.__r.__words[0] = v38->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7);
      char v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      __int16 v41 = operator new(0x28uLL);
      std::string::size_type v42 = v194.__r_.__value_.__r.__words[0];
      v41[2] = v39;
      v41[3] = v42;
      *(void *)((char *)v41 + 31) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
      *((unsigned char *)v41 + 39) = v40;
      uint64_t v43 = v164;
      uint64_t v44 = *v164;
      void *v41 = *v164;
      v41[1] = v43;
      *(void *)(v44 + 8) = v41;
      *uint64_t v43 = (uint64_t)v41;
      ++v43[2];
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
    }
    unsigned int v178 = 0;
    if (sub_1D4800(v186, @"audio session id", &v178))
    {
      if (v185 >= 0) {
        size_t v45 = v185;
      }
      else {
        size_t v45 = v184;
      }
      sub_5E220((uint64_t)v189, v45 + 14);
      if (v191[3] >= 0) {
        uint64_t v46 = v189;
      }
      else {
        uint64_t v46 = *(unsigned char **)v189;
      }
      if (v45)
      {
        if (v185 >= 0) {
          uint64_t v47 = (void **)&v183;
        }
        else {
          uint64_t v47 = (void **)v183;
        }
        memmove(v46, v47, v45);
      }
      strcpy(&v46[v45], "- Context ID: ");
      sub_2417C(&v194, v178);
      if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v48 = &v194;
      }
      else {
        uint64_t v48 = (std::string *)v194.__r_.__value_.__r.__words[0];
      }
      if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v49 = v194.__r_.__value_.__l.__size_;
      }
      uint64_t v50 = std::string::append((std::string *)v189, (const std::string::value_type *)v48, v49);
      std::string::size_type v51 = v50->__r_.__value_.__r.__words[0];
      *(void *)&long long inAddress = v50->__r_.__value_.__l.__size_;
      *(void *)((char *)&inAddress + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
      char v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      uint64_t v53 = operator new(0x28uLL);
      uint64_t v54 = inAddress;
      v53[2] = v51;
      v53[3] = v54;
      *(void *)((char *)v53 + 31) = *(void *)((char *)&inAddress + 7);
      *((unsigned char *)v53 + 39) = v52;
      uint64_t v55 = v164;
      uint64_t v56 = *v164;
      void *v53 = *v164;
      v53[1] = v55;
      *(void *)(v56 + 8) = v53;
      uint64_t *v55 = (uint64_t)v53;
      ++v55[2];
      if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v194.__r_.__value_.__l.__data_);
      }
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
    }
    char v177 = 0;
    if (sub_1D4750(v186, @"persisted", &v177))
    {
      uint64_t v57 = v177 ? "True" : "False";
      uint64_t v58 = (std::string *)sub_21C8C(v189, v57);
      uint64_t v59 = std::string::insert(v58, 0, "  - Device Persisted: ", 0x16uLL);
      std::string::size_type v60 = v59->__r_.__value_.__r.__words[0];
      v194.__r_.__value_.__r.__words[0] = v59->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v59->__r_.__value_.__r.__words[1] + 7);
      char v61 = HIBYTE(v59->__r_.__value_.__r.__words[2]);
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      std::string v62 = operator new(0x28uLL);
      std::string::size_type v63 = v194.__r_.__value_.__r.__words[0];
      v62[2] = v60;
      v62[3] = v63;
      *(void *)((char *)v62 + 31) = *(std::string::size_type *)((char *)v194.__r_.__value_.__r.__words + 7);
      *((unsigned char *)v62 + 39) = v61;
      long long v64 = v164;
      uint64_t v65 = *v164;
      *std::string v62 = *v164;
      v62[1] = v64;
      *(void *)(v65 + 8) = v62;
      *long long v64 = (uint64_t)v62;
      ++v64[2];
      if ((v191[3] & 0x80000000) != 0) {
        operator delete(*(void **)v189);
      }
    }
    CFDictionaryRef v176 = 0;
    if (sub_1D48CC(v186, @"input ports", &v176))
    {
      v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v176;
      LOWORD(v194.__r_.__value_.__r.__words[1]) = 0;
      sub_16B4F0((uint64_t)v189, (CFArrayRef *)&v194);
      long long v66 = (void *)sub_3D61C((uint64_t)&v194);
      sub_21C8C(v66, "  - Input Ports: { ");
      int v67 = *(_DWORD **)v189;
      if (*(void *)&v189[8] != *(void *)v189)
      {
        uint64_t v68 = 0;
        unint64_t v69 = (uint64_t)(*(void *)&v189[8] - *(void *)v189) >> 2;
        for (unsigned int i = 1; ; ++i)
        {
          LODWORD(v166) = 0;
          uint64_t v175 = 0x400000000;
          uint64_t v174 = 0x676C6F6270747970;
          AudioObjectGetPropertyData(v67[v68], (const AudioObjectPropertyAddress *)&v174, 0, 0, (UInt32 *)&v175 + 1, &v166);
          std::to_string(&v170, v67[v68]);
          uint64_t v71 = std::string::insert(&v170, 0, "(", 1uLL);
          long long v72 = *(_OWORD *)&v71->__r_.__value_.__l.__data_;
          v171.__r_.__value_.__r.__words[2] = v71->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v72;
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          uint64_t v73 = std::string::append(&v171, ":", 1uLL);
          long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
          v172.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v74;
          v73->__r_.__value_.__l.__size_ = 0;
          v73->__r_.__value_.__r.__words[2] = 0;
          v73->__r_.__value_.__r.__words[0] = 0;
          sub_2417C(&v167, v166);
          if ((v169 & 0x80u) == 0) {
            uint64_t v75 = (const std::string::value_type *)&v167;
          }
          else {
            uint64_t v75 = v167;
          }
          if ((v169 & 0x80u) == 0) {
            std::string::size_type v76 = v169;
          }
          else {
            std::string::size_type v76 = v168;
          }
          uint64_t v77 = std::string::append(&v172, v75, v76);
          long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
          v173.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v78;
          v77->__r_.__value_.__l.__size_ = 0;
          v77->__r_.__value_.__r.__words[2] = 0;
          v77->__r_.__value_.__r.__words[0] = 0;
          uint64_t v79 = std::string::append(&v173, ")", 1uLL);
          long long v80 = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
          int64_t v193 = v79->__r_.__value_.__r.__words[2];
          long long inAddress = v80;
          v79->__r_.__value_.__l.__size_ = 0;
          v79->__r_.__value_.__r.__words[2] = 0;
          v79->__r_.__value_.__r.__words[0] = 0;
          if (v193 >= 0) {
            p_long long inAddress = (const std::string::value_type *)&inAddress;
          }
          else {
            p_long long inAddress = (const std::string::value_type *)inAddress;
          }
          if (v193 >= 0) {
            std::string::size_type v82 = HIBYTE(v193);
          }
          else {
            std::string::size_type v82 = *((void *)&inAddress + 1);
          }
          std::string::append(&v194, p_inAddress, v82);
          if (SHIBYTE(v193) < 0) {
            operator delete((void *)inAddress);
          }
          if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v173.__r_.__value_.__l.__data_);
          }
          if ((char)v169 < 0) {
            operator delete(v167);
          }
          if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v172.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v171.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v170.__r_.__value_.__l.__data_);
          }
          if (v69 <= i) {
            break;
          }
          std::string::append(&v194, ", ", 2uLL);
          uint64_t v68 = i;
        }
      }
      std::string::append(&v194, " }", 2uLL);
      uint64_t v83 = sub_16AC60((uint64_t)&v194);
      __int16 v84 = v164;
      v83[1] = v164;
      uint64_t v85 = *v84;
      void *v83 = *v84;
      *(void *)(v85 + 8) = v83;
      *__int16 v84 = (uint64_t)v83;
      ++v84[2];
      if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v67) {
          goto LABEL_104;
        }
LABEL_103:
        operator delete(v67);
        goto LABEL_104;
      }
      operator delete(v194.__r_.__value_.__l.__data_);
      if (v67) {
        goto LABEL_103;
      }
    }
LABEL_104:
    CFDictionaryRef v166 = 0;
    if (!sub_1D48CC(v186, @"output ports", &v166)) {
      goto LABEL_136;
    }
    v194.__r_.__value_.__r.__words[0] = (std::string::size_type)v166;
    LOWORD(v194.__r_.__value_.__r.__words[1]) = 0;
    sub_16B4F0((uint64_t)v189, (CFArrayRef *)&v194);
    long long v86 = (void *)sub_3D61C((uint64_t)&v194);
    sub_21C8C(v86, "  - Output Ports: { ");
    uint64_t v87 = *(_DWORD **)v189;
    if (*(void *)&v189[8] != *(void *)v189)
    {
      uint64_t v88 = 0;
      unint64_t v89 = (uint64_t)(*(void *)&v189[8] - *(void *)v189) >> 2;
      for (unsigned int j = 1; ; ++j)
      {
        uint64_t v175 = 0;
        UInt32 v165 = 4;
        uint64_t v174 = 0x676C6F6270747970;
        AudioObjectGetPropertyData(v87[v88], (const AudioObjectPropertyAddress *)&v174, 0, 0, &v165, (char *)&v175 + 4);
        std::to_string(&v170, v87[v88]);
        uint64_t v91 = std::string::insert(&v170, 0, "(", 1uLL);
        long long v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
        v171.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v92;
        v91->__r_.__value_.__l.__size_ = 0;
        v91->__r_.__value_.__r.__words[2] = 0;
        v91->__r_.__value_.__r.__words[0] = 0;
        uint64_t v93 = std::string::append(&v171, ":", 1uLL);
        long long v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
        v172.__r_.__value_.__r.__words[2] = v93->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v172.__r_.__value_.__l.__data_ = v94;
        v93->__r_.__value_.__l.__size_ = 0;
        v93->__r_.__value_.__r.__words[2] = 0;
        v93->__r_.__value_.__r.__words[0] = 0;
        sub_2417C(&v167, HIDWORD(v175));
        if ((v169 & 0x80u) == 0) {
          uint64_t v95 = (const std::string::value_type *)&v167;
        }
        else {
          uint64_t v95 = v167;
        }
        if ((v169 & 0x80u) == 0) {
          std::string::size_type v96 = v169;
        }
        else {
          std::string::size_type v96 = v168;
        }
        uint64_t v97 = std::string::append(&v172, v95, v96);
        long long v98 = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
        v173.__r_.__value_.__r.__words[2] = v97->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v173.__r_.__value_.__l.__data_ = v98;
        v97->__r_.__value_.__l.__size_ = 0;
        v97->__r_.__value_.__r.__words[2] = 0;
        v97->__r_.__value_.__r.__words[0] = 0;
        char v99 = std::string::append(&v173, ")", 1uLL);
        long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
        int64_t v193 = v99->__r_.__value_.__r.__words[2];
        long long inAddress = v100;
        v99->__r_.__value_.__l.__size_ = 0;
        v99->__r_.__value_.__r.__words[2] = 0;
        v99->__r_.__value_.__r.__words[0] = 0;
        if (v193 >= 0) {
          uint64_t v101 = (const std::string::value_type *)&inAddress;
        }
        else {
          uint64_t v101 = (const std::string::value_type *)inAddress;
        }
        if (v193 >= 0) {
          std::string::size_type v102 = HIBYTE(v193);
        }
        else {
          std::string::size_type v102 = *((void *)&inAddress + 1);
        }
        std::string::append(&v194, v101, v102);
        if (SHIBYTE(v193) < 0) {
          operator delete((void *)inAddress);
        }
        if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v173.__r_.__value_.__l.__data_);
        }
        if ((char)v169 < 0) {
          operator delete(v167);
        }
        if (SHIBYTE(v172.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v172.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v171.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v170.__r_.__value_.__l.__data_);
        }
        if (v89 <= j) {
          break;
        }
        std::string::append(&v194, ", ", 2uLL);
        uint64_t v88 = j;
      }
    }
    std::string::append(&v194, " }", 2uLL);
    int v103 = sub_16AC60((uint64_t)&v194);
    int v104 = v164;
    v103[1] = v164;
    uint64_t v105 = *v104;
    void *v103 = *v104;
    *(void *)(v105 + 8) = v103;
    *int v104 = (uint64_t)v103;
    ++v104[2];
    if ((SHIBYTE(v194.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!v87) {
        goto LABEL_136;
      }
LABEL_135:
      operator delete(v87);
      goto LABEL_136;
    }
    operator delete(v194.__r_.__value_.__l.__data_);
    if (v87) {
      goto LABEL_135;
    }
LABEL_136:
    if (v182)
    {
      unsigned int v161 = v9;
      char v106 = 0;
      uint64_t v107 = 0;
      LOWORD(v172.__r_.__value_.__l.__data_) = 256;
      do
      {
        char v108 = v106;
        int v109 = v172.__r_.__value_.__s.__data_[v107];
        if (v172.__r_.__value_.__s.__data_[v107]) {
          unsigned int v110 = 1869968496;
        }
        else {
          unsigned int v110 = 1768845428;
        }
        LODWORD(inAddress) = 1937009955;
        *(void *)((char *)&inAddress + 4) = v110;
        LODWORD(v173.__r_.__value_.__l.__data_) = 0;
        uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(v182, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, (UInt32 *)&v173);
        if (LODWORD(v173.__r_.__value_.__l.__data_)) {
          BOOL v112 = PropertyDataSize == 0;
        }
        else {
          BOOL v112 = 0;
        }
        if (v112)
        {
          unint64_t v113 = 4 * ((unint64_t)LODWORD(v173.__r_.__value_.__l.__data_) >> 2);
          __chkstk_darwin(PropertyDataSize);
          v114 = (char *)&v160 - ((v113 + 15) & 0x1FFFFFFF0);
          if (AudioObjectGetPropertyData(v182, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, (UInt32 *)&v173, v114))
          {
            uint64_t v115 = sub_32A48(2);
            uint64_t v116 = sub_32A48(1);
            char v117 = 0;
            uint64_t v118 = 0;
            *(void *)v189 = 0x100000002;
            uint64_t v119 = *(void *)(v115 + 8);
            while (1)
            {
              uint64_t v120 = *(int *)&v189[4 * v118];
              char v121 = v117;
              if (((v119 & v120) != 0) != ((*(void *)(v116 + 8) & v120) != 0)) {
                break;
              }
              char v117 = 1;
              uint64_t v118 = 1;
              if (v121) {
                goto LABEL_176;
              }
            }
            if ((v119 & v120) == 0) {
              uint64_t v115 = v116;
            }
LABEL_176:
            uint64_t v134 = sub_32A48(4);
            char v135 = 0;
            uint64_t v136 = 0;
            *(void *)v189 = 0x100000002;
            uint64_t v137 = *(void *)(v115 + 8);
            while (1)
            {
              uint64_t v138 = *(int *)&v189[4 * v136];
              char v139 = v135;
              if (((v137 & v138) != 0) != ((*(void *)(v134 + 8) & v138) != 0)) {
                break;
              }
              char v135 = 1;
              uint64_t v136 = 1;
              if (v139) {
                goto LABEL_182;
              }
            }
            if ((v137 & v138) == 0) {
              uint64_t v115 = v134;
            }
LABEL_182:
            id v140 = *(id *)v115;
            char v141 = v140;
            if (v140)
            {
              uint64_t v142 = v140;
              if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
              {
                sub_16C9C4((uint64_t)&v194, (unsigned int *)&inAddress);
                int v143 = (v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &v194
                     : (std::string *)v194.__r_.__value_.__r.__words[0];
                *(_DWORD *)v189 = v163.n128_u32[0];
                *(void *)&v189[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&v189[12] = 1024;
                *(_DWORD *)&v189[14] = 665;
                __int16 v190 = 2080;
                *(void *)v191 = v143;
                _os_log_impl(&def_1E50E8, v142, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioObjectGetPropertyData(%s) failed.", v189, 0x1Cu);
                if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v194.__r_.__value_.__l.__data_);
                }
              }
            }
            uint64_t v144 = sub_32A48(2);
            uint64_t v145 = sub_32A48(1);
            char v146 = 0;
            uint64_t v147 = 0;
            *(void *)v189 = 0x100000002;
            uint64_t v148 = *(void *)(v144 + 8);
            while (1)
            {
              uint64_t v149 = *(int *)&v189[4 * v147];
              char v150 = v146;
              if (((v148 & v149) != 0) != ((*(void *)(v145 + 8) & v149) != 0)) {
                break;
              }
              char v146 = 1;
              uint64_t v147 = 1;
              if (v150) {
                goto LABEL_196;
              }
            }
            if ((v148 & v149) == 0) {
              uint64_t v144 = v145;
            }
LABEL_196:
            uint64_t v151 = sub_32A48(4);
            char v152 = 0;
            uint64_t v153 = 0;
            *(void *)v189 = 0x100000002;
            uint64_t v154 = *(void *)(v144 + 8);
            while (1)
            {
              uint64_t v155 = *(int *)&v189[4 * v153];
              char v156 = v152;
              if (((v154 & v155) != 0) != ((*(void *)(v151 + 8) & v155) != 0)) {
                break;
              }
              char v152 = 1;
              uint64_t v153 = 1;
              if (v156) {
                goto LABEL_202;
              }
            }
            if ((v154 & v155) == 0) {
              uint64_t v144 = v151;
            }
LABEL_202:
            id v157 = *(id *)v144;
            std::string v158 = v157;
            if (v157)
            {
              v159 = v157;
              if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v189 = v162.n128_u32[0];
                *(void *)&v189[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&v189[12] = 1024;
                *(_DWORD *)&v189[14] = 667;
                __int16 v190 = 1024;
                *(_DWORD *)v191 = v173.__r_.__value_.__l.__data_;
                *(_WORD *)&v191[4] = 2048;
                *(void *)&v191[6] = v113;
                _os_log_impl(&def_1E50E8, v159, OS_LOG_TYPE_ERROR, "%25s:%-5d The HAL returned a size of %u while we expected %lu", v189, 0x22u);
              }
            }
          }
          else
          {
            unint64_t data_low = LODWORD(v173.__r_.__value_.__l.__data_);
            v123 = (std::string *)sub_21C8C(v189, "  - ");
            if (v109) {
              uint64_t v124 = "Output";
            }
            else {
              uint64_t v124 = "Input";
            }
            if (v109) {
              std::string::size_type v125 = 6;
            }
            else {
              std::string::size_type v125 = 5;
            }
            std::string::append(v123, v124, v125);
            std::string::append((std::string *)v189, " Stream IDs: { ", 0xFuLL);
            if (data_low >= 4)
            {
              uint64_t v126 = 0;
              unint64_t v127 = data_low >> 2;
              if ((data_low >> 2) <= 1) {
                uint64_t v128 = 1;
              }
              else {
                uint64_t v128 = v127;
              }
              do
              {
                std::to_string(&v194, *(_DWORD *)&v114[4 * v126]);
                if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  CFStringRef v129 = &v194;
                }
                else {
                  CFStringRef v129 = (std::string *)v194.__r_.__value_.__r.__words[0];
                }
                if ((v194.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v130 = HIBYTE(v194.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v130 = v194.__r_.__value_.__l.__size_;
                }
                std::string::append((std::string *)v189, (const std::string::value_type *)v129, v130);
                if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v194.__r_.__value_.__l.__data_);
                }
                if (++v126 < v127) {
                  std::string::append((std::string *)v189, ", ", 2uLL);
                }
              }
              while (v128 != v126);
            }
            std::string::append((std::string *)v189, " }", 2uLL);
            uint64_t v131 = sub_16AC60((uint64_t)v189);
            v132 = v164;
            v131[1] = v164;
            uint64_t v133 = *v132;
            *uint64_t v131 = *v132;
            *(void *)(v133 + 8) = v131;
            uint64_t *v132 = (uint64_t)v131;
            ++v132[2];
            if ((v191[3] & 0x80000000) != 0) {
              operator delete(*(void **)v189);
            }
          }
        }
        char v106 = 1;
        uint64_t v107 = 1;
      }
      while ((v108 & 1) == 0);
      a2 = v160;
      unsigned int v9 = v161;
    }
    if (v185 < 0) {
      operator delete(v183);
    }
    sub_80594((uint64_t)&v186);
    ++v9;
  }
}

void sub_310F20(_Unwind_Exception *a1)
{
  sub_16A560(*(void **)(v1 + 56));
  _Unwind_Resume(a1);
}

void sub_311150(os_signpost_id_t *a1)
{
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_ActiveNonWirelessPorts", 0x19uLL) == &qword_659450)
  {
    os_signpost_id_t v2 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    uint64_t v3 = (id)qword_659470;
    int v4 = v3;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      LOWORD(v8) = 0;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v4, OS_SIGNPOST_INTERVAL_BEGIN, v2, "VA_ActiveNonWirelessPorts", "Query for kActiveNonWirelessPortsForRouteConfiguration", (uint8_t *)&v8, 2u);
    }
  }
  *a1 = v2;
  uint64_t v5 = sub_32A48(42);
  if (*(unsigned char *)(v5 + 8))
  {
    char v6 = *(id *)v5;
    if (v6)
    {
      __int16 v7 = v6;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        unsigned int v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 55;
        __int16 v12 = 2080;
        char v13 = "kActiveNonWirelessPorts";
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", (uint8_t *)&v8, 0x1Cu);
      }
    }
  }
}

os_signpost_id_t *sub_311368(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(id *)v2;
    if (v3)
    {
      int v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136315650;
        __int16 v10 = "SignpostUtilities.h";
        __int16 v11 = 1024;
        int v12 = 55;
        __int16 v13 = 2080;
        double v14 = "kActiveNonWirelessPorts";
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v9, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    uint64_t v5 = (id)qword_659470;
    char v6 = v5;
    os_signpost_id_t v7 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v9) = 0;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v6, OS_SIGNPOST_INTERVAL_END, v7, "VA_ActiveNonWirelessPorts", "", (uint8_t *)&v9, 2u);
    }
  }
  return a1;
}

void sub_311510(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

BOOL sub_31151C(uint64_t a1, CFDictionaryRef *a2)
{
  if (CFDictionaryContainsKey(*a2, @"overridden ports"))
  {
    uint64_t v122 = sub_32A48(13);
    v123 = sub_7D5E8(1, *(void **)v122, *(void *)(v122 + 8));
    uint64_t v124 = v123;
    if (v123 && os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v194 = 136315394;
      v195 = "VirtualAudio_PlugIn.mm";
      __int16 v196 = 1024;
      int v197 = 4785;
      _os_log_impl(&def_1E50E8, v124, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurationIsDisruptive doesn't support kVirtualAudioPlugInRouteConfigurationOverriddenPortsKey.\"", v194, 0x12u);
    }

    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (CFDictionaryContainsKey(*a2, @"routable ports"))
  {
    uint64_t v126 = sub_32A48(13);
    unint64_t v127 = sub_7D5E8(1, *(void **)v126, *(void *)(v126 + 8));
    uint64_t v128 = v127;
    if (v127 && os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v194 = 136315394;
      v195 = "VirtualAudio_PlugIn.mm";
      __int16 v196 = 1024;
      int v197 = 4789;
      _os_log_impl(&def_1E50E8, v128, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurationIsDisruptive doesn't support kVirtualAudioPlugInRouteConfigurationRoutablePortsKey.\"", v194, 0x12u);
    }

    CFStringRef v129 = __cxa_allocate_exception(0x10uLL);
    *(void *)CFStringRef v129 = &off_6414D8;
    v129[2] = 1852797029;
  }
  if (CFDictionaryContainsKey(*a2, @"unroutable ports"))
  {
    uint64_t v130 = sub_32A48(13);
    uint64_t v131 = sub_7D5E8(1, *(void **)v130, *(void *)(v130 + 8));
    v132 = v131;
    if (v131 && os_log_type_enabled(v131, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v194 = 136315394;
      v195 = "VirtualAudio_PlugIn.mm";
      __int16 v196 = 1024;
      int v197 = 4793;
      _os_log_impl(&def_1E50E8, v132, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurationIsDisruptive doesn't support kVirtualAudioPlugInRouteConfigurationUnroutablePortsKey.\"", v194, 0x12u);
    }

    uint64_t v133 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v133 = &off_6414D8;
    v133[2] = 1852797029;
  }
  if (CFDictionaryContainsKey(*a2, @"preferred sub-ports"))
  {
    uint64_t v134 = sub_32A48(13);
    char v135 = sub_7D5E8(1, *(void **)v134, *(void *)(v134 + 8));
    uint64_t v136 = v135;
    if (v135 && os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v194 = 136315394;
      v195 = "VirtualAudio_PlugIn.mm";
      __int16 v196 = 1024;
      int v197 = 4797;
      _os_log_impl(&def_1E50E8, v136, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurationIsDisruptive doesn't support \" \"kVirtualAudioPlugInRouteConfigurationPreferredSubPortsKey.\"", v194, 0x12u);
    }

    uint64_t v137 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v137 = &off_6414D8;
    v137[2] = 1852797029;
  }
  if (CFDictionaryContainsKey(*a2, @"active data sources"))
  {
    uint64_t v138 = sub_32A48(13);
    char v139 = sub_7D5E8(1, *(void **)v138, *(void *)(v138 + 8));
    id v140 = v139;
    if (v139 && os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v194 = 136315394;
      v195 = "VirtualAudio_PlugIn.mm";
      __int16 v196 = 1024;
      int v197 = 4801;
      _os_log_impl(&def_1E50E8, v140, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurationIsDisruptive doesn't support \" \"kVirtualAudioPlugInRouteConfigurationActiveDataSourcesKey.\"", v194, 0x12u);
    }

    char v141 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v141 = &off_6414D8;
    v141[2] = 1852797029;
  }
  if (CFDictionaryContainsKey(*a2, @"voice processing configuration"))
  {
    uint64_t v142 = sub_32A48(13);
    int v143 = sub_7D5E8(1, *(void **)v142, *(void *)(v142 + 8));
    uint64_t v144 = v143;
    if (v143 && os_log_type_enabled(v143, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v194 = 136315394;
      v195 = "VirtualAudio_PlugIn.mm";
      __int16 v196 = 1024;
      int v197 = 4805;
      _os_log_impl(&def_1E50E8, v144, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurationIsDisruptive doesn't support \" \"kVirtualAudioPlugInRouteConfigurationVPBlockConfigurationKey.\"", v194, 0x12u);
    }

    uint64_t v145 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v145 = &off_6414D8;
    void v145[2] = 1852797029;
  }
  if (CFDictionaryContainsKey(*a2, @"sub-port preferences"))
  {
    uint64_t v146 = sub_32A48(13);
    uint64_t v147 = sub_7D5E8(1, *(void **)v146, *(void *)(v146 + 8));
    uint64_t v148 = v147;
    if (v147 && os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v194 = 136315394;
      v195 = "VirtualAudio_PlugIn.mm";
      __int16 v196 = 1024;
      int v197 = 4809;
      _os_log_impl(&def_1E50E8, v148, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurationIsDisruptive doesn't support \" \"kVirtualAudioPlugInRouteConfigurationSubPortPreferencesKey.\"", v194, 0x12u);
    }

    uint64_t v149 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v149 = &off_6414D8;
    v149[2] = 1852797029;
  }
  if (CFDictionaryContainsKey(*a2, @"screen dark policy enabled"))
  {
    uint64_t v150 = sub_32A48(13);
    uint64_t v151 = sub_7D5E8(1, *(void **)v150, *(void *)(v150 + 8));
    char v152 = v151;
    if (v151 && os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v194 = 136315394;
      v195 = "VirtualAudio_PlugIn.mm";
      __int16 v196 = 1024;
      int v197 = 4813;
      _os_log_impl(&def_1E50E8, v152, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioPlugInPropertyRouteConfigurationIsDisruptive doesn't support \" \"kVirtualAudioPlugInRouteConfigurationScreenDarkPolicyEnabledKey.\"", v194, 0x12u);
    }

    uint64_t v153 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v153 = &off_6414D8;
    v153[2] = 1852797029;
  }
  uint64_t v4 = sub_2EA964(1986291046, 0, *(uint64_t **)(a1 + 144), *(uint64_t **)(a1 + 152));
  if (!v4)
  {
    uint64_t v154 = sub_32A48(13);
    uint64_t v155 = sub_7D5E8(1, *(void **)v154, *(void *)(v154 + 8));
    char v156 = v155;
    if (v155 && os_log_type_enabled(v155, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string v194 = 136315394;
      v195 = "VirtualAudio_PlugIn.mm";
      __int16 v196 = 1024;
      int v197 = 4817;
      _os_log_impl(&def_1E50E8, v156, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [defaultDevice is NULL]: \"No default VAD could be found!\"", v194, 0x12u);
    }

    id v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v157, "No default VAD could be found!");
  }
  uint64_t v5 = sub_BC8B0(v4, 1);
  sub_46A4C((uint64_t *)&v184, v5);
  sub_2F69B0(v194, a1, a2, 0, 1);
  unsigned int v6 = v198;
  if (v198 <= 1684108898)
  {
    if (v198 <= 1668047727)
    {
      if (v198 <= 1651794543)
      {
        if (v198 == 845504882 || v198 == 1635087471) {
          goto LABEL_56;
        }
        int v9 = 1635213689;
        goto LABEL_46;
      }
      if (v198 == 1651794544 || v198 == 1651795060)
      {
LABEL_51:
        uint64_t v10 = sub_32A48(2);
        uint64_t v11 = sub_32A48(34);
        char v12 = 0;
        uint64_t v13 = 0;
        *(void *)buf = 0x100000002;
        uint64_t v14 = *(void *)(v10 + 8);
        while (1)
        {
          uint64_t v15 = *(int *)&buf[4 * v13];
          char v16 = v12;
          if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
            break;
          }
          char v12 = 1;
          uint64_t v13 = 1;
          if (v16)
          {
            if ((v14 & 1) == 0) {
              goto LABEL_77;
            }
            goto LABEL_69;
          }
        }
        if ((v14 & v15) == 0) {
          uint64_t v10 = v11;
        }
        if (*(void *)(v10 + 8))
        {
LABEL_69:
          id v21 = *(id *)v10;
          if (v21)
          {
            uint64_t v22 = v21;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            {
              sub_2417C(&__p, v198);
              uint64_t v23 = SHIBYTE(v182) >= 0 ? &__p : (void **)__p;
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4946;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v23;
              _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d The initiation context trigger value: %s would be disruptive", buf, 0x1Cu);
              if (SHIBYTE(v182) < 0) {
                operator delete(__p);
              }
            }
          }
        }
LABEL_77:
        BOOL v24 = 1;
        goto LABEL_254;
      }
      unsigned __int16 v8 = 25204;
    }
    else if (v198 <= 1668050282)
    {
      if (v198 == 1668047728) {
        goto LABEL_51;
      }
      if (v198 == 1668047974) {
        goto LABEL_56;
      }
      unsigned __int16 v8 = 26735;
    }
    else
    {
      if (v198 > 1668051823)
      {
        if (v198 == 1668051824) {
          goto LABEL_51;
        }
        int v7 = 1668314723;
        goto LABEL_50;
      }
      if (v198 == 1668050283) {
        goto LABEL_51;
      }
      unsigned __int16 v8 = 29545;
    }
    int v7 = v8 | 0x636C0000;
    goto LABEL_50;
  }
  if (v198 > 1852796516)
  {
    if (v198 > 1969840751)
    {
      if (v198 > 1987012962)
      {
        if (v198 == 1987012963) {
          goto LABEL_56;
        }
        int v7 = 2003329648;
      }
      else
      {
        if (v198 == 1969840752) {
          goto LABEL_56;
        }
        int v7 = 1986357346;
      }
      goto LABEL_50;
    }
    if (v198 == 1852796517 || v198 == 1886352244) {
      goto LABEL_56;
    }
    int v9 = 1918986611;
LABEL_46:
    if (v198 != v9) {
      goto LABEL_319;
    }
    goto LABEL_56;
  }
  if (v198 <= 1752132964)
  {
    if (v198 == 1684108899) {
      goto LABEL_51;
    }
    if (v198 == 1684628340) {
      goto LABEL_56;
    }
    int v7 = 1751414371;
LABEL_50:
    if (v198 == v7) {
      goto LABEL_51;
    }
LABEL_319:
    UInt32 v165 = (os_log_t *)sub_32A48(13);
    CFDictionaryRef v166 = *v165;
    if (*v165 && os_log_type_enabled(*v165, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&__p, v6);
      v167 = SHIBYTE(v182) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4198;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v167;
      _os_log_impl(&def_1E50E8, v166, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported trigger %s.\"", buf, 0x1Cu);
      if (SHIBYTE(v182) < 0) {
        operator delete(__p);
      }
    }
    std::string::size_type v168 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v168, "Unsupported trigger %s.");
  }
  if (v198 > 1768764004)
  {
    if (v198 == 1768764005) {
      goto LABEL_56;
    }
    int v9 = 1768780647;
    goto LABEL_46;
  }
  if (v198 != 1752132965)
  {
    int v7 = 1752396914;
    goto LABEL_50;
  }
LABEL_56:
  if (v199[24]) {
    uint64_t v17 = (uint64_t *)v199;
  }
  else {
    uint64_t v17 = &qword_6588A0;
  }
  sub_ED624((uint64_t)v183, v17);
  sub_147760((uint64_t)&__p, *(uint64_t **)(a1 + 112), (uint64_t)v194, v183, 0);
  if (__p)
  {
    if (__p == 2)
    {
      uint64_t v158 = sub_32A48(13);
      v159 = sub_7D5E8(1, *(void **)v158, *(void *)(v158 + 8));
      uint64_t v120 = v159;
      int v121 = 1852793716;
      if (!v159 || !os_log_type_enabled(v159, OS_LOG_TYPE_ERROR)) {
        goto LABEL_317;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4833;
      int64_t v160 = "%25s:%-5d EXCEPTION (kVirtualAudioObjectCategoryNotSupportedError): (\"Error processing kVirtualAudioPlugIn"
             "PropertyRouteConfigurationIsDisruptive.\")";
    }
    else
    {
      if (__p == 1)
      {
        uint64_t v118 = sub_32A48(13);
        uint64_t v119 = sub_7D5E8(1, *(void **)v118, *(void *)(v118 + 8));
        uint64_t v120 = v119;
        int v121 = 1852797556;
        if (v119 && os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4833;
          _os_log_impl(&def_1E50E8, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): (\"Error processing kVirtualAudioPlugInPropertyRouteConfigurationIsDisruptive.\")", buf, 0x12u);
          int v121 = 1852797556;
        }
LABEL_317:

        __n128 v163 = __cxa_allocate_exception(0x10uLL);
        *(void *)__n128 v163 = &off_6414D8;
        CFStringRef v163[2] = v121;
      }
      uint64_t v161 = sub_32A48(13);
      int v121 = 2003329396;
      __n128 v162 = sub_7D5E8(1, *(void **)v161, *(void *)(v161 + 8));
      uint64_t v120 = v162;
      if (!v162 || !os_log_type_enabled(v162, OS_LOG_TYPE_ERROR)) {
        goto LABEL_317;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4833;
      int64_t v160 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): (\"Error processing kVirtualAudioPlugInPropertyRouteC"
             "onfigurationIsDisruptive.\")";
    }
    _os_log_impl(&def_1E50E8, v120, OS_LOG_TYPE_ERROR, v160, buf, 0x12u);
    goto LABEL_317;
  }
  unsigned int v178 = 0;
  uint64_t v179 = 0;
  char v177 = &v178;
  *(void *)&buf[8] = 0;
  *(void *)&buf[16] = 0;
  *(void *)buf = &buf[8];
  uint64_t v18 = *(void *)(a1 + 144);
  uint64_t v19 = *(void *)(a1 + 152);
  if (v18 == v19)
  {
    uint64_t v20 = 0;
    uint64_t v175 = 0;
    uint64_t v176 = 0;
  }
  else
  {
    do
    {
      if (((*(uint64_t (**)(void))(**(void **)v18 + 112))() & 1) == 0)
      {
        v186.__r_.__value_.__r.__words[0] = *(void *)(*(void *)v18 + 576);
        sub_125D8C((uint64_t **)buf, v186.__r_.__value_.__l.__data_, HIDWORD(v186.__r_.__value_.__r.__words[0]), (uint64_t *)&v186);
      }
      v18 += 8;
    }
    while (v18 != v19);
    uint64_t v20 = *(void **)&buf[8];
    uint64_t v174 = *(void ***)buf;
    uint64_t v175 = *(void **)&buf[8];
    uint64_t v176 = *(void *)&buf[16];
    if (*(void *)&buf[16])
    {
      *(void *)(*(void *)&buf[8] + 16) = &v175;
      *(void *)buf = &buf[8];
      *(void *)&buf[8] = 0;
      *(void *)&buf[16] = 0;
      uint64_t v20 = 0;
      goto LABEL_80;
    }
  }
  uint64_t v174 = &v175;
LABEL_80:
  sub_463E0(v20);
  *(void *)&buf[8] = 0;
  *(void *)&buf[16] = 0;
  *(void *)buf = &buf[8];
  std::string::size_type v25 = v181;
  char v26 = v182;
  if (v181 == v182)
  {
    char v33 = 0;
    std::string v172 = 0;
    uint64_t v173 = 0;
LABEL_93:
    std::string v171 = (unsigned int *)&v172;
    goto LABEL_94;
  }
  uint64_t v27 = (uint64_t *)&buf[8];
  do
  {
    uint64_t v28 = *v25;
    uint64_t v29 = sub_127F20((uint64_t **)buf, v27, (uint64_t **)&v186, (uint64_t **)&v169, *v25, HIDWORD(*v25));
    uint64_t v30 = (uint64_t *)*v29;
    if (!*v29)
    {
      int v31 = (uint64_t **)v29;
      uint64_t v30 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v30 + 28) = v28;
      sub_46CA8((uint64_t **)buf, (uint64_t)v186.__r_.__value_.__l.__data_, v31, v30);
    }
    std::string::size_type v32 = (uint64_t *)v30[1];
    if (v32)
    {
      do
      {
        uint64_t v27 = v32;
        std::string::size_type v32 = (uint64_t *)*v32;
      }
      while (v32);
    }
    else
    {
      do
      {
        uint64_t v27 = (uint64_t *)v30[2];
        BOOL v56 = *v27 == (void)v30;
        uint64_t v30 = v27;
      }
      while (!v56);
    }
    v25 += 4;
  }
  while (v25 != v26);
  char v33 = *(void **)&buf[8];
  std::string v171 = *(unsigned int **)buf;
  std::string v172 = *(void **)&buf[8];
  uint64_t v173 = *(void *)&buf[16];
  if (!*(void *)&buf[16]) {
    goto LABEL_93;
  }
  *(void *)(*(void *)&buf[8] + 16) = &v172;
  *(void *)buf = &buf[8];
  *(void *)&buf[8] = 0;
  *(void *)&buf[16] = 0;
  char v33 = 0;
LABEL_94:
  sub_463E0(v33);
  int v34 = (uint64_t **)&v169;
  v170[0] = 0;
  v170[1] = 0;
  unsigned __int8 v169 = (unsigned int *)v170;
  std::string::size_type v35 = v174;
  uint64_t v36 = v171;
  v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&v169;
  v186.__r_.__value_.__l.__size_ = (std::string::size_type)v170;
  if (v174 == &v175)
  {
    std::string::size_type size = v170;
LABEL_120:
    sub_313F98((uint64_t)buf, v36, (unsigned int *)&v172, (uint64_t)v34, (uint64_t)size);
  }
  else
  {
    while (v36 != (unsigned int *)&v172)
    {
      unsigned int v37 = *((_DWORD *)v35 + 7);
      unsigned int v38 = *((_DWORD *)v35 + 8);
      unsigned int v39 = v36[7];
      unsigned int v40 = v36[8];
      BOOL v41 = v38 < v40;
      if (v37 != v39) {
        BOOL v41 = v37 < v39;
      }
      if (v41)
      {
        sub_3065A8((uint64_t)&v186, (unsigned int *)v35 + 7);
        std::string::size_type v42 = (void *)v35[1];
        if (v42)
        {
          do
          {
            std::string::size_type v35 = v42;
            std::string::size_type v42 = (void *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            uint64_t v43 = v35;
            std::string::size_type v35 = (void *)v35[2];
          }
          while ((void *)*v35 != v43);
        }
      }
      else
      {
        BOOL v44 = v40 < v38;
        if (v37 != v39) {
          BOOL v44 = v39 < v37;
        }
        if (v44)
        {
          sub_3065A8((uint64_t)&v186, v36 + 7);
        }
        else
        {
          size_t v45 = (void *)v35[1];
          uint64_t v46 = v35;
          if (v45)
          {
            do
            {
              std::string::size_type v35 = v45;
              size_t v45 = (void *)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              std::string::size_type v35 = (void *)v46[2];
              BOOL v56 = *v35 == (void)v46;
              uint64_t v46 = v35;
            }
            while (!v56);
          }
        }
        uint64_t v47 = (unsigned int *)*((void *)v36 + 1);
        if (v47)
        {
          do
          {
            uint64_t v36 = v47;
            uint64_t v47 = *(unsigned int **)v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            uint64_t v48 = v36;
            uint64_t v36 = (unsigned int *)*((void *)v36 + 2);
          }
          while (*(unsigned int **)v36 != v48);
        }
      }
      if (v35 == &v175)
      {
        std::string::size_type size = (void **)v186.__r_.__value_.__l.__size_;
        int v34 = (uint64_t **)v186.__r_.__value_.__r.__words[0];
        goto LABEL_120;
      }
    }
    sub_313F98((uint64_t)buf, (unsigned int *)v35, (unsigned int *)&v175, (uint64_t)v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_);
  }
  uint64_t v50 = sub_32A48(2);
  if (*(unsigned char *)(v50 + 8))
  {
    id v51 = *(id *)v50;
    if (v51)
    {
      char v52 = v51;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        sub_E7F10(&v186, v169, (unsigned int *)v170);
        uint64_t v53 = (v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v186
            : (std::string *)v186.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4895;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v53;
        _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d Differing Devices : %s", buf, 0x1Cu);
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v186.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v54 = (uint64_t *)v169;
  if (v169 != (unsigned int *)v170)
  {
    do
    {
      int v55 = *((_DWORD *)v54 + 7);
      if (v55 > 1987276896)
      {
        if (v55 > 1987277416)
        {
          if (v55 != 1987277417)
          {
            if ((v55 - 1987279212) <= 7 && ((1 << (v55 - 108)) & 0xC1) != 0 || v55 == 1987738234) {
              goto LABEL_252;
            }
LABEL_243:
            id v103 = *(id *)sub_32A48(13);
            int v104 = v103;
            if (v103)
            {
              uint64_t v105 = v103;
              if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
              {
                sub_2417C(&v186, *((_DWORD *)v54 + 7));
                char v106 = (v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &v186
                     : (std::string *)v186.__r_.__value_.__r.__words[0];
                *(_DWORD *)buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4889;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v106;
                _os_log_impl(&def_1E50E8, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid Virtual Audio Device Type %s\"", buf, 0x1Cu);
                if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v186.__r_.__value_.__l.__data_);
                }
              }
            }
LABEL_252:
            BOOL v24 = 1;
            goto LABEL_253;
          }
        }
        else
        {
          BOOL v56 = v55 == 1987276897 || v55 == 1987276900;
          if (!v56) {
            goto LABEL_243;
          }
        }
      }
      else if (v55 > 1986552182)
      {
        if (v55 != 1986552183 && v55 != 1986818404 && v55 != 1987011684) {
          goto LABEL_243;
        }
      }
      else if (v55 != 1986224492)
      {
        if (v55 == 1986291046 || v55 == 1986291305) {
          goto LABEL_252;
        }
        goto LABEL_243;
      }
      uint64_t v59 = (uint64_t *)v54[1];
      if (v59)
      {
        do
        {
          std::string::size_type v60 = v59;
          uint64_t v59 = (uint64_t *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          std::string::size_type v60 = (uint64_t *)v54[2];
          BOOL v56 = *v60 == (void)v54;
          uint64_t v54 = v60;
        }
        while (!v56);
      }
      uint64_t v54 = v60;
    }
    while (v60 != (uint64_t *)v170);
  }
  char v61 = v181;
  if (v181 != v182)
  {
    while (*((_DWORD *)v61 + 1) || *(_DWORD *)v61 != 1986291046)
    {
      v61 += 4;
      if (v61 == v182) {
        goto LABEL_163;
      }
    }
  }
  if (v61 == v182)
  {
LABEL_163:
    uint64_t v63 = sub_32A48(13);
    long long v64 = sub_7D5E8(1, *(void **)v63, *(void *)(v63 + 8));
    uint64_t v65 = v64;
    if (v64 && os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4907;
      _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No Default vad found\"", buf, 0x12u);
    }

    long long v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v66, "No Default vad found");
  }
  sub_BCAD8((uint64_t *)&v186, (uint64_t)(v61 + 1), "", 4911);
  for (unsigned int i = (std::string *)v186.__r_.__value_.__l.__size_; i != &v186; unsigned int i = (std::string *)i->__r_.__value_.__l.__size_)
  {
    uint64_t v68 = i->__r_.__value_.__r.__words[2];
    if ((*(_WORD *)(v68 + 184) & 1) == 0)
    {
      memset(buf, 0, 24);
      strcpy(&buf[24], "cwdv");
      char v188 = 0;
      int v189 = 3;
      v191[0] = 0;
      v191[1] = 0;
      __int16 v190 = v191;
      CFTypeRef cf = 0;
      int v192 = 44731050;
      unsigned int v69 = sub_E00F4(*(void *)(a1 + 128), v68, (uint64_t)buf);
      sub_6CB40((uint64_t *)&v177, v69, v69);
      if (cf) {
        CFRelease(cf);
      }
      sub_463E0(v191[0]);
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
  }
  sub_B8E4((uint64_t *)&v186);
  uint64_t v70 = sub_32A48(2);
  uint64_t v71 = sub_32A48(34);
  char v72 = 0;
  uint64_t v73 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v74 = *(void *)(v70 + 8);
  while (1)
  {
    uint64_t v75 = *(int *)&buf[4 * v73];
    char v76 = v72;
    if (((v74 & v75) != 0) != ((*(void *)(v71 + 8) & v75) != 0)) {
      break;
    }
    char v72 = 1;
    uint64_t v73 = 1;
    if (v76)
    {
      if ((v74 & 1) == 0) {
        goto LABEL_191;
      }
      goto LABEL_183;
    }
  }
  if ((v74 & v75) == 0) {
    uint64_t v70 = v71;
  }
  if (*(void *)(v70 + 8))
  {
LABEL_183:
    id v77 = *(id *)v70;
    if (v77)
    {
      long long v78 = v77;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
      {
        sub_134EF0(&v186, v184, v185);
        uint64_t v79 = (v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v186
            : (std::string *)v186.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4922;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v79;
        _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_DEBUG, "%25s:%-5d The current route configuration's default device has the following ouputs: %s", buf, 0x1Cu);
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v186.__r_.__value_.__l.__data_);
        }
      }
    }
  }
LABEL_191:
  uint64_t v80 = sub_32A48(2);
  uint64_t v81 = sub_32A48(34);
  char v82 = 0;
  uint64_t v83 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v84 = *(void *)(v80 + 8);
  while (1)
  {
    uint64_t v85 = *(int *)&buf[4 * v83];
    char v86 = v82;
    if (((v84 & v85) != 0) != ((*(void *)(v81 + 8) & v85) != 0)) {
      break;
    }
    char v82 = 1;
    uint64_t v83 = 1;
    if (v86)
    {
      if ((v84 & 1) == 0) {
        goto LABEL_207;
      }
      goto LABEL_199;
    }
  }
  if ((v84 & v85) == 0) {
    uint64_t v80 = v81;
  }
  if (*(void *)(v80 + 8))
  {
LABEL_199:
    id v87 = *(id *)v80;
    if (v87)
    {
      uint64_t v88 = v87;
      if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
      {
        sub_134EF0(&v186, v177, &v178);
        unint64_t v89 = (v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v186
            : (std::string *)v186.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4925;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v89;
        _os_log_impl(&def_1E50E8, v88, OS_LOG_TYPE_DEBUG, "%25s:%-5d The proposed route configuration's default device has the following ouputs: %s", buf, 0x1Cu);
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v186.__r_.__value_.__l.__data_);
        }
      }
    }
  }
LABEL_207:
  BOOL v24 = 1;
  if (v179 == 1 && v185[1] == (void *)((char *)&def_1E50E8 + 1))
  {
    int v90 = v184;
    if (v184 != v185)
    {
      uint64_t v91 = v177;
      while (*((_DWORD *)v90 + 7) == *((_DWORD *)v91 + 7))
      {
        long long v92 = (void *)v90[1];
        uint64_t v93 = v90;
        if (v92)
        {
          do
          {
            int v90 = v92;
            long long v92 = (void *)*v92;
          }
          while (v92);
        }
        else
        {
          do
          {
            int v90 = (void *)v93[2];
            BOOL v56 = *v90 == (void)v93;
            uint64_t v93 = v90;
          }
          while (!v56);
        }
        long long v94 = (void *)v91[1];
        if (v94)
        {
          do
          {
            uint64_t v95 = v94;
            long long v94 = (void *)*v94;
          }
          while (v94);
        }
        else
        {
          do
          {
            uint64_t v95 = (void *)v91[2];
            BOOL v56 = *v95 == (void)v91;
            uint64_t v91 = v95;
          }
          while (!v56);
        }
        uint64_t v91 = v95;
        if (v90 == v185) {
          goto LABEL_223;
        }
      }
      goto LABEL_252;
    }
LABEL_223:
    LODWORD(v186.__r_.__value_.__l.__data_) = *((_DWORD *)v177 + 7);
    strcpy(buf, "pytpbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v96 = sub_26DAC((AudioObjectID *)&v186, (const AudioObjectPropertyAddress *)buf, 0, 0);
    int v98 = v96;
    if (v96 || !v97)
    {
      v164 = __cxa_allocate_exception(0x10uLL);
      *(void *)v164 = &off_6414D8;
      CFStringRef v164[2] = v98;
    }
    BOOL v24 = HIDWORD(v96) != 1885892727 && HIDWORD(v96) != 1886613611;
  }
LABEL_253:
  sub_463E0(v170[0]);
  sub_463E0(v172);
  sub_463E0(v175);
  sub_463E0(v178);
  *(void *)buf = &v181;
  sub_1486D0((void ***)buf);
  sub_7DB7C((void *)v183[1]);
LABEL_254:
  uint64_t v107 = sub_32A48(2);
  uint64_t v108 = sub_32A48(34);
  char v109 = 0;
  uint64_t v110 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v111 = *(void *)(v107 + 8);
  while (1)
  {
    uint64_t v112 = *(int *)&buf[4 * v110];
    char v113 = v109;
    if (((v111 & v112) != 0) != ((*(void *)(v108 + 8) & v112) != 0)) {
      break;
    }
    char v109 = 1;
    uint64_t v110 = 1;
    if (v113)
    {
      if ((v111 & 1) == 0) {
        goto LABEL_268;
      }
      goto LABEL_262;
    }
  }
  if ((v111 & v112) == 0) {
    uint64_t v107 = v108;
  }
  if (*(void *)(v107 + 8))
  {
LABEL_262:
    v114 = *(id *)v107;
    if (v114)
    {
      uint64_t v115 = v114;
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v116 = "not be";
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_DWORD *)buf = 136315650;
        if (v24) {
          uint64_t v116 = "be";
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4951;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v116;
        _os_log_impl(&def_1E50E8, v115, OS_LOG_TYPE_DEBUG, "%25s:%-5d The proposed route configuration would %s disruptive", buf, 0x1Cu);
      }
    }
  }
LABEL_268:
  sub_2E9FD8((uint64_t)v194);
  sub_463E0(v185[0]);
  return v24;
}

void sub_313114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void **a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  sub_463E0(a11);
  sub_463E0(a14);
  sub_463E0(a17);
  sub_463E0(a20);
  a19 = (void **)&a23;
  sub_1486D0(&a19);
  sub_7DB7C(a27);
  sub_2E9FD8((uint64_t)&a47);
  sub_463E0(a30);
  _Unwind_Resume(a1);
}

void *sub_313294(void *result, void *a2)
{
  if (result != 1735159650)
  {
    uint64_t v4 = (void *)a2[1];
    uint64_t v5 = a2;
    if (v4 == a2) {
      goto LABEL_33;
    }
    int v6 = (int)result;
    int v7 = (void *)a2[1];
    while (1)
    {
      unsigned __int16 v8 = (std::__shared_weak_count *)v7[3];
      if (!v8) {
        goto LABEL_16;
      }
      int v9 = std::__shared_weak_count::lock(v8);
      if (!v9) {
        goto LABEL_16;
      }
      uint64_t v10 = v7[2];
      if (!v10) {
        goto LABEL_15;
      }
      if (v6 == 1768845428)
      {
        if ((*(_WORD *)(v10 + 184) & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_12;
      }
      if (v6 != 1869968496) {
        break;
      }
      if (*(_WORD *)(v10 + 184)) {
        goto LABEL_15;
      }
LABEL_12:
      sub_4636C(v9);
      int v7 = (void *)v7[1];
      if (v7 == a2)
      {
        uint64_t v5 = a2;
        goto LABEL_33;
      }
    }
    int v7 = v4;
LABEL_15:
    sub_4636C(v9);
LABEL_16:
    uint64_t v5 = a2;
    if (v7 != a2)
    {
      uint64_t v11 = (void *)v7[1];
      if (v11 != a2)
      {
        uint64_t v5 = v7;
        while (1)
        {
          char v12 = (std::__shared_weak_count *)v11[3];
          if (v12)
          {
            uint64_t v13 = std::__shared_weak_count::lock(v12);
            if (v13)
            {
              uint64_t v14 = (long long *)(v11 + 2);
              uint64_t v15 = v11[2];
              if (v15)
              {
                if (v6 == 1768845428)
                {
                  if (*(_WORD *)(v15 + 184)) {
                    goto LABEL_27;
                  }
                }
                else if (v6 == 1869968496 && (*(_WORD *)(v15 + 184) & 1) == 0)
                {
LABEL_27:
                  sub_4636C(v13);
                  long long v16 = *v14;
                  *(void *)uint64_t v14 = 0;
                  v11[3] = 0;
                  uint64_t v17 = (std::__shared_weak_count *)v5[3];
                  *((_OWORD *)v5 + 1) = v16;
                  if (v17) {
                    std::__shared_weak_count::__release_weak(v17);
                  }
                  uint64_t v5 = (void *)v5[1];
                  goto LABEL_30;
                }
              }
              sub_4636C(v13);
            }
          }
LABEL_30:
          uint64_t v11 = (void *)v11[1];
          if (v11 == a2) {
            goto LABEL_33;
          }
        }
      }
      uint64_t v5 = v7;
    }
LABEL_33:
    return sub_12CDFC((uint64_t)a2, v5, a2);
  }
  return result;
}

void sub_313424(os_signpost_id_t *a1)
{
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_BuiltInPorts", 0xFuLL) == &qword_659450)
  {
    os_signpost_id_t v2 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    uint64_t v3 = (id)qword_659470;
    uint64_t v4 = v3;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      LOWORD(v8) = 0;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v4, OS_SIGNPOST_INTERVAL_BEGIN, v2, "VA_BuiltInPorts", "Query for kVirtualAudioPlugInPropertyBuiltInPortsForCategory", (uint8_t *)&v8, 2u);
    }
  }
  *a1 = v2;
  uint64_t v5 = sub_32A48(42);
  if (*(unsigned char *)(v5 + 8))
  {
    int v6 = *(id *)v5;
    if (v6)
    {
      int v7 = v6;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        int v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 58;
        __int16 v12 = 2080;
        uint64_t v13 = "kBuiltInPorts";
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", (uint8_t *)&v8, 0x1Cu);
      }
    }
  }
}

os_signpost_id_t *sub_31363C(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(id *)v2;
    if (v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136315650;
        __int16 v10 = "SignpostUtilities.h";
        __int16 v11 = 1024;
        int v12 = 58;
        __int16 v13 = 2080;
        uint64_t v14 = "kBuiltInPorts";
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v9, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    uint64_t v5 = (id)qword_659470;
    int v6 = v5;
    os_signpost_id_t v7 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v9) = 0;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v6, OS_SIGNPOST_INTERVAL_END, v7, "VA_BuiltInPorts", "", (uint8_t *)&v9, 2u);
    }
  }
  return a1;
}

void sub_3137E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_3137F0(os_signpost_id_t *a1)
{
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_ConnectedPorts", 0x11uLL) == &qword_659450)
  {
    os_signpost_id_t v2 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    uint64_t v3 = (id)qword_659470;
    uint64_t v4 = v3;
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      LOWORD(v8) = 0;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v4, OS_SIGNPOST_INTERVAL_BEGIN, v2, "VA_ConnectedPorts", "Query for ConnectedPortsForRouteConfiguration", (uint8_t *)&v8, 2u);
    }
  }
  *a1 = v2;
  uint64_t v5 = sub_32A48(42);
  if (*(unsigned char *)(v5 + 8))
  {
    int v6 = *(id *)v5;
    if (v6)
    {
      os_signpost_id_t v7 = v6;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v8 = 136315650;
        int v9 = "SignpostUtilities.h";
        __int16 v10 = 1024;
        int v11 = 61;
        __int16 v12 = 2080;
        __int16 v13 = "kConnectedPorts";
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", (uint8_t *)&v8, 0x1Cu);
      }
    }
  }
}

os_signpost_id_t *sub_313A08(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(id *)v2;
    if (v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136315650;
        __int16 v10 = "SignpostUtilities.h";
        __int16 v11 = 1024;
        int v12 = 61;
        __int16 v13 = 2080;
        uint64_t v14 = "kConnectedPorts";
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v9, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    uint64_t v5 = (id)qword_659470;
    int v6 = v5;
    os_signpost_id_t v7 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v9) = 0;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v6, OS_SIGNPOST_INTERVAL_END, v7, "VA_ConnectedPorts", "", (uint8_t *)&v9, 2u);
    }
  }
  return a1;
}

void sub_313BB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

CFNumberRef *sub_313BBC(CFNumberRef *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_313C48(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_313C74(uint64_t a1)
{
  sub_4ECEC(&__p, *(void *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    CFNumberRef v3 = *(uint64_t **)a1;
    uint64_t v4 = __p;
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v3++;
      *v4++ = v6;
      v5 -= 8;
    }
    while (v5);
  }
  CFArrayRef v7 = sub_55EFC((const void **)__p, (uint64_t)v10);
  if (__p)
  {
    __int16 v10 = __p;
    operator delete(__p);
  }
  return v7;
}

void sub_313CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_313D08(uint64_t a1, CFTypeRef cf)
{
  CFStringRef v3 = CFCopyDescription(cf);
  sub_20B40(a1, v3);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_313D50(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_313D6C(uint64_t result, _DWORD *a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  unint64_t v4 = *a2;
  if (v3 > v4 >> 2)
  {
    uint64_t v7 = sub_32A48(13);
    int v8 = sub_7D5E8(1, *(void **)v7, *(void *)(v7 + 8));
    int v9 = v8;
    if (v8 && os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      long long v16 = "StandardUtilities.h";
      __int16 v17 = 1024;
      int v18 = 170;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"provided list exceeds the size of the provided array.\"", (uint8_t *)&v15, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "provided list exceeds the size of the provided array.");
  }
  if (!v4)
  {
    uint64_t v11 = sub_32A48(13);
    int v12 = sub_7D5E8(1, *(void **)v11, *(void *)(v11 + 8));
    __int16 v13 = v12;
    if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      long long v16 = "StandardUtilities.h";
      __int16 v17 = 1024;
      int v18 = 171;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"ioDataSize is 0.\"", (uint8_t *)&v15, 0x12u);
    }

    uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "ioDataSize is 0.");
  }
  uint64_t v5 = *(void *)(result + 8);
  if (v5 != result)
  {
    unsigned int v6 = 0;
    do
    {
      *(_DWORD *)(a3 + 4 * v6++) = *(_DWORD *)(v5 + 16);
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != result);
  }
  *a2 = 4 * v3;
  return result;
}

void sub_313F78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_313F98(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  *(void *)&long long v12 = a4;
  *((void *)&v12 + 1) = a5;
  if (a2 != a3)
  {
    do
    {
      sub_3065A8((uint64_t)&v12, v5 + 7);
      int v8 = (unsigned int *)*((void *)v5 + 1);
      if (v8)
      {
        do
        {
          int v9 = v8;
          int v8 = *(unsigned int **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (unsigned int *)*((void *)v5 + 2);
          BOOL v10 = *(void *)v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != a3);
    uint64_t v5 = a3;
  }
  *(void *)a1 = v5;
  double result = *(double *)&v12;
  *(_OWORD *)(a1 + 8) = v12;
  return result;
}

void sub_314030(uint64_t a1)
{
  sub_314068(a1);

  operator delete();
}

uint64_t sub_314068(uint64_t a1)
{
  *(void *)a1 = off_632E10;
  uint64_t v2 = *(void **)(a1 + 496);
  *(void *)(a1 + 496) = 0;

  sub_2EA6D8((uint64_t **)(a1 + 480), 0);
  if (*(unsigned char *)(a1 + 472))
  {
    unint64_t v3 = *(void **)(a1 + 448);
    if (v3)
    {
      *(void *)(a1 + 456) = v3;
      operator delete(v3);
    }
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 432);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 416);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  long long v12 = (void **)(a1 + 376);
  sub_1486D0(&v12);
  sub_463E0(*(void **)(a1 + 344));
  sub_463E0(*(void **)(a1 + 320));
  unsigned int v6 = *(void **)(a1 + 288);
  if (v6)
  {
    *(void *)(a1 + 296) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void *)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  if (v7) {
    sub_307DE4(v7);
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  uint64_t v8 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v8) {
    sub_3141DC(v8);
  }
  sub_463E0(*(void **)(a1 + 184));
  int v9 = *(void **)(a1 + 144);
  if (v9)
  {
    *(void *)(a1 + 152) = v9;
    operator delete(v9);
  }
  sub_2E54E0((uint64_t **)(a1 + 136), 0);
  uint64_t v10 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_2E5480((uint64_t *)(a1 + 120), 0);
  sub_2E5560((uint64_t *)(a1 + 112), 0);

  return sub_392778(a1);
}

void sub_3141DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24)) {
    sub_80594(a1 + 8);
  }

  operator delete();
}

uint64_t New_VirtualAudio_PlugIn(uint64_t a1, const void *a2)
{
  CFUUIDRef v3 = CFUUIDGetConstantUUIDWithBytes(0, 0xF8u, 0xBBu, 0x1Cu, 0x28u, 0xBAu, 0xE8u, 0x11u, 0xD6u, 0x9Cu, 0x31u, 0, 3u, 0x93u, 0x15u, 0xCDu, 0x46u);
  if (CFEqual(a2, v3)) {
    operator new();
  }
  return 0;
}

void sub_314650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

id *sub_3147B8(id *a1)
{
  id v2 = *a1;
  *a1 = 0;

  return a1;
}

unsigned char *sub_3147F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 != 1)
  {
    uint64_t v22 = sub_32A48(13);
    uint64_t v23 = sub_7D5E8(1, *(void **)v22, *(void *)(v22 + 8));
    BOOL v24 = v23;
    if (v23)
    {
      std::string::size_type v25 = v23;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        sub_464158(&__str, a3);
        char v26 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__str
            : (std::string *)__str.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        __int16 v43 = 1024;
        int v44 = 5018;
        __int16 v45 = 2080;
        uint64_t v46 = v26;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Listener updated about %s, instead of time sync device creation!\"", buf, 0x1Cu);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Listener updated about %s, instead of time sync device creation!");
  }
  if (*(_DWORD *)a1 != 1986291046 && *(_DWORD *)a1 != 1986817911)
  {
    uint64_t v28 = sub_32A48(13);
    uint64_t v29 = sub_7D5E8(1, *(void **)v28, *(void *)(v28 + 8));
    uint64_t v30 = v29;
    if (v29)
    {
      int v31 = v29;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&__str, *(_DWORD *)a1);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        __int16 v43 = 1024;
        int v44 = 5022;
        __int16 v45 = 2080;
        uint64_t v46 = p_str;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Listener updated about time sync device creation, but virtual audio device type is %s instead of Default or Low-Latency\"", buf, 0x1Cu);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
      }
    }
    char v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v33, "Listener updated about time sync device creation, but virtual audio device type is %s instead of Default or Low-Latency");
  }
  sub_3B7EC();
  int v34 = &qword_64CC40;
  char v35 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  uint64_t v7 = sub_2EA964(*(_DWORD *)a1, *(_DWORD *)(a1 + 4), *(uint64_t **)(a4 + 144), *(uint64_t **)(a4 + 152));
  if (v7)
  {
    uint64_t v8 = v7;
    sub_3B7EC();
    uint64_t v36 = &qword_64CC40;
    char v37 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    uint64_t v9 = *(void *)(v8 + 1008);
    uint64_t v10 = (uint64_t *)(v9 + 268);
    *(void *)buf = *(void *)(v9 + 268);
    sub_329CBC((uint64_t)&__str, (uint64_t *)buf);
    if (v41)
    {
      uint64_t v11 = (os_log_t *)sub_32A48(16);
      long long v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v13 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __int16 v13 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
        __int16 v43 = 1024;
        int v44 = 728;
        __int16 v45 = 2080;
        uint64_t v46 = v13;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Clock to TimeSync %s", buf, 0x1Cu);
      }
      uint64_t v14 = (os_log_t *)sub_32A48(16);
      int v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
      {
        long long v16 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v16 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
        __int16 v43 = 1024;
        int v44 = 950;
        __int16 v45 = 2080;
        uint64_t v46 = v16;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d gPTP clock is %s", buf, 0x1Cu);
      }
      std::string::operator=((std::string *)(v9 + 368), &__str);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 448))(v9))
      {
        atomic_store(1u, (unsigned __int8 *)(v9 + 365));
      }
      else
      {
        atomic_store(0, (unsigned __int8 *)(v9 + 365));
        buf[0] = 0;
        char v47 = 0;
        sub_21E95C(v9, (uint64_t)buf);
      }
    }
    else
    {
      __int16 v17 = (os_log_t *)sub_32A48(16);
      int v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = *v10;
        sub_4D60(&__p, (unsigned int *)&v38);
        uint64_t v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
        __int16 v43 = 1024;
        int v44 = 724;
        __int16 v45 = 2080;
        uint64_t v46 = v19;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d TimeSync clock is not valid for device %s", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    if (v41 && SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_3BCAC(&v36);
  }
  return sub_3BCAC(&v34);
}

void sub_314D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

uint64_t sub_314E24(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  sub_3B7EC();
  uint64_t v29 = &qword_64CC40;
  char v30 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  uint64_t v8 = a1[27];
  if (*(unsigned char *)v8
    && (*(void *)(v8 + 32) ? (BOOL v9 = a3 == 1650814258) : (BOOL v9 = 0), v9 ? (v10 = a4 == 0) : (v10 = 0), v10))
  {
    uint64_t v26 = 1;
  }
  else
  {
    uint64_t v11 = a1[18];
    if (a1[19] != v11)
    {
      uint64_t v12 = 0;
      unsigned int v13 = 0;
      while (2)
      {
        char v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(v11 + 8 * v12);
        __int16 v28 = 256;
        do
        {
          char v17 = v14;
          uint64_t v18 = sub_BC8B0(v16, *((unsigned __int8 *)&v28 + v15));
          uint64_t v21 = *(void *)(v18 + 8);
          uint64_t v19 = v18 + 8;
          uint64_t v20 = v21;
          if (v21)
          {
            uint64_t v22 = v19;
            do
            {
              unsigned int v23 = *(_DWORD *)(v20 + 28);
              BOOL v24 = v23 >= a2;
              if (v23 >= a2) {
                std::string::size_type v25 = (uint64_t *)v20;
              }
              else {
                std::string::size_type v25 = (uint64_t *)(v20 + 8);
              }
              if (v24) {
                uint64_t v22 = v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != v19 && *(_DWORD *)(v22 + 28) <= a2)
            {
              uint64_t v26 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v16 + 1008) + 352))(*(void *)(v16 + 1008), a3, a4, 0);
              goto LABEL_28;
            }
          }
          char v14 = 1;
          uint64_t v15 = 1;
        }
        while ((v17 & 1) == 0);
        uint64_t v11 = a1[18];
        uint64_t v12 = ++v13;
        if (v13 < (unint64_t)((a1[19] - v11) >> 3)) {
          continue;
        }
        break;
      }
    }
    uint64_t v26 = 0;
  }
LABEL_28:
  sub_3BCAC(&v29);
  return v26;
}

void sub_314FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

float sub_314FE8(void *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  sub_3B7EC();
  std::string::size_type v32 = &qword_64CC40;
  char v33 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  uint64_t v8 = a1[27];
  if (*(unsigned char *)v8
    && (*(void *)(v8 + 32) ? (BOOL v9 = a3 == 1650814258) : (BOOL v9 = 0), v9 ? (v10 = a4 == 0) : (v10 = 0), v10))
  {
    float v30 = (float)*(unsigned int *)(v8 + 48);
  }
  else
  {
    uint64_t v11 = a1[18];
    if (a1[19] == v11) {
      goto LABEL_26;
    }
    uint64_t v12 = 0;
    unsigned int v13 = 0;
LABEL_11:
    char v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = *(void *)(v11 + 8 * v12);
    *(_WORD *)buf = 256;
    while (1)
    {
      char v17 = v14;
      uint64_t v18 = sub_BC8B0(v16, buf[v15]);
      uint64_t v21 = *(void *)(v18 + 8);
      uint64_t v19 = v18 + 8;
      uint64_t v20 = v21;
      if (v21)
      {
        uint64_t v22 = v19;
        do
        {
          unsigned int v23 = *(_DWORD *)(v20 + 28);
          BOOL v24 = v23 >= a2;
          if (v23 >= a2) {
            std::string::size_type v25 = (uint64_t *)v20;
          }
          else {
            std::string::size_type v25 = (uint64_t *)(v20 + 8);
          }
          if (v24) {
            uint64_t v22 = v20;
          }
          uint64_t v20 = *v25;
        }
        while (*v25);
        if (v22 != v19
          && *(_DWORD *)(v22 + 28) <= a2
          && (*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v16 + 1008) + 352))(*(void *)(v16 + 1008), a3, a4, 0))
        {
          break;
        }
      }
      char v14 = 1;
      uint64_t v15 = 1;
      if (v17)
      {
        uint64_t v11 = a1[18];
        uint64_t v12 = ++v13;
        if (v13 >= (unint64_t)((a1[19] - v11) >> 3))
        {
LABEL_26:
          uint64_t v26 = sub_32A48(13);
          uint64_t v27 = sub_7D5E8(1, *(void **)v26, *(void *)(v26 + 8));
          __int16 v28 = v27;
          if (v27)
          {
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              char v35 = "VirtualAudio_PlugIn.mm";
              __int16 v36 = 1024;
              int v37 = 1577;
              __int16 v38 = 1024;
              unsigned int v39 = a2;
              _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Unable to locate a VirtualAudio_Device that uses VirtualAudioPortID %u.\"", buf, 0x18u);
            }
          }

          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &off_6414D8;
          exception[2] = 1852797029;
        }
        goto LABEL_11;
      }
    }
    float v30 = (*(float (**)(void, uint64_t, uint64_t, void))(**(void **)(v16 + 1008) + 360))(*(void *)(v16 + 1008), a3, a4, 0);
  }
  sub_3BCAC(&v32);
  return v30;
}

void sub_3152DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_315308(uint64_t a1, const __CFDictionary **a2)
{
  sub_2F69B0(&v4, a1, a2, 0, 1);
  uint64_t v2 = v4;
  sub_2E9FD8((uint64_t)&v4);
  return v2;
}

uint64_t sub_315360()
{
  return 0;
}

uint64_t sub_315368(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if ((char *)a2[1] - (char *)*a2 != 48
    || (unint64_t)(v2[1] - *v2) < 0x208
    || (unint64_t)(v2[4] - v2[3]) < 0x308)
  {
    return 0;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    unsigned int v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)(a1 + 16);
      if (v8)
      {
        BOOL v9 = *(NSObject **)(v8 + 72);
        int v10 = *(_DWORD *)(a1 + 88);
        int v11 = *(_DWORD *)(a1 + 84) + 1;
        *(_DWORD *)(a1 + 84) = v11;
        float v12 = (float)((float)*(unsigned int *)(a1 + 68) / *(float *)(a1 + 64)) * (float)(v11 - v10);
        if (v12 >= *(float *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 88) = v11;
          *(unsigned char *)(a1 + 80) = 0;
        }
        else if (v12 >= *(float *)(a1 + 76) && !*(unsigned char *)(a1 + 80))
        {
          *(unsigned char *)(a1 + 80) = 1;
          unsigned int v13 = *(std::__shared_weak_count **)(a1 + 40);
          if (!v13 || (uint64_t v14 = *(void *)(a1 + 32), (v15 = std::__shared_weak_count::lock(v13)) == 0)) {
            sub_5CABC();
          }
          uint64_t v16 = v15;
          p_shared_weak_owners = &v15->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v15);
          block[0] = _NSConcreteStackBlock;
          block[1] = 1174405120;
          block[2] = sub_315670;
          block[3] = &unk_633548;
          block[4] = a1;
          block[5] = v14;
          __int16 v38 = v16;
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          uint64_t v39 = v8;
          unsigned int v40 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          dispatch_async(v9, block);
          if (v40) {
            sub_4636C(v40);
          }
          if (v38) {
            std::__shared_weak_count::__release_weak(v38);
          }
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      sub_4636C(v7);
    }
  }
  float v18 = *(float *)(a1 + 144);
  if (*(float *)(a1 + 148) == v18) {
    return 0;
  }
  uint64_t v21 = *(void *)(a1 + 96);
  uint64_t v20 = *(void *)(a1 + 104);
  unint64_t v22 = v20 - v21;
  if (v20 == v21 || *(void *)(a1 + 128) == *(void *)(a1 + 120)) {
    return 0;
  }
  *(float *)(a1 + 148) = v18;
  uint64_t v23 = **a2;
  BOOL v24 = (_DWORD *)(*a2)[3];
  if (v22 >= 0x400) {
    uint64_t v25 = 128;
  }
  else {
    uint64_t v25 = (v22 >> 3);
  }
  *(_DWORD *)(v23 + 4) = 4 * v25;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 72) = 0u;
  *(_OWORD *)(v23 + 88) = 0u;
  *(_OWORD *)(v23 + 104) = 0u;
  *(_OWORD *)(v23 + 120) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(_OWORD *)(v23 + 152) = 0u;
  *(_OWORD *)(v23 + 168) = 0u;
  *(_OWORD *)(v23 + 184) = 0u;
  *(_OWORD *)(v23 + 200) = 0u;
  *(_OWORD *)(v23 + 216) = 0u;
  *(_OWORD *)(v23 + 232) = 0u;
  *(_OWORD *)(v23 + 248) = 0u;
  *(_OWORD *)(v23 + 8) = 0u;
  *(_OWORD *)(v23 + 264) = 0u;
  *(_OWORD *)(v23 + 280) = 0u;
  *(_OWORD *)(v23 + 296) = 0u;
  *(_OWORD *)(v23 + 312) = 0u;
  *(_OWORD *)(v23 + 328) = 0u;
  *(_OWORD *)(v23 + 344) = 0u;
  *(_OWORD *)(v23 + 360) = 0u;
  *(_OWORD *)(v23 + 376) = 0u;
  *(_OWORD *)(v23 + 392) = 0u;
  *(_OWORD *)(v23 + 408) = 0u;
  *(_OWORD *)(v23 + 424) = 0u;
  *(_OWORD *)(v23 + 440) = 0u;
  *(_OWORD *)(v23 + 456) = 0u;
  *(_OWORD *)(v23 + 472) = 0u;
  *(_OWORD *)(v23 + 488) = 0u;
  *(_OWORD *)(v23 + 504) = 0u;
  if (v25)
  {
    uint64_t v26 = *(double **)(a1 + 96);
    uint64_t v27 = (float *)(v23 + 8);
    do
    {
      double v28 = *v26++;
      float v29 = v28;
      *v27++ = v29;
      --v25;
    }
    while (v25);
  }
  int v30 = *(_DWORD *)(a1 + 144);
  *BOOL v24 = v30;
  *(_DWORD *)uint64_t v23 = v30;
  unint64_t v31 = *(void *)(a1 + 128) - *(void *)(a1 + 120);
  if (v31 >= 0x600) {
    uint64_t v32 = 192;
  }
  else {
    uint64_t v32 = (v31 >> 3);
  }
  v24[1] = 4 * v32;
  char v33 = (float *)(v24 + 2);
  bzero(v24 + 2, 0x300uLL);
  if (!v32) {
    return 1296;
  }
  int v34 = *(double **)(a1 + 120);
  uint64_t result = 1296;
  do
  {
    double v35 = *v34++;
    float v36 = v35;
    *v33++ = v36;
    --v32;
  }
  while (v32);
  return result;
}

void sub_31565C(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_315670(void *a1)
{
  uint64_t v2 = a1[4];
  CFUUIDRef v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      uint64_t v5 = a1[5];
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  unsigned int v6 = *(std::__shared_weak_count **)(v2 + 24);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = v7;
      if (v5 && *(void *)(v2 + 16))
      {
        uint64_t v9 = a1[7];
        *(void *)(v2 + 104) = *(void *)(v2 + 96);
        *(void *)(v2 + 128) = *(void *)(v2 + 120);
        unsigned int v10 = *(_DWORD *)(v2 + 84);
        float v12 = *(float *)(v2 + 64);
        unsigned int v11 = *(_DWORD *)(v2 + 68);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 176))(v9, 3508);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 176))(v9, 3520, v2 + 120);
        *(float *)(v2 + 144) = (float)((float)v11 / v12) * (float)v10;
      }
      sub_4636C(v8);
    }
  }
  if (v4) {
    sub_4636C(v4);
  }
}

void sub_3157DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10)
{
  if (a2)
  {
    if (a2 == 3)
    {
      unsigned int v11 = __cxa_begin_catch(exception_object);
      float v12 = (os_log_t *)sub_32A48(25);
      unsigned int v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = (*(uint64_t (**)(void *))(*(void *)v11 + 16))(v11);
        LODWORD(a9) = 136315650;
        *(void *)((char *)&a9 + 4) = "AncFilterLoggerV2.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 172;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v14;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&a9, 0x1Cu);
      }
    }
    else
    {
      uint64_t v15 = (void **)__cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        uint64_t v16 = v15;
        char v17 = (os_log_t *)sub_32A48(25);
        float v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v16 + 23) < 0) {
            uint64_t v16 = (void **)*v16;
          }
          LODWORD(a9) = 136315650;
          *(void *)((char *)&a9 + 4) = "AncFilterLoggerV2.cpp";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 173;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = v16;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&a9, 0x1Cu);
        }
      }
      else
      {
        uint64_t v19 = (os_log_t *)sub_32A48(25);
        uint64_t v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315394;
          *(void *)((char *)&a9 + 4) = "AncFilterLoggerV2.cpp";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 174;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown.", (uint8_t *)&a9, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x31578CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_315A14(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_4636C(v2);
  }
  CFUUIDRef v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_315A64(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_315A98(uint64_t result, float a2)
{
  *(float *)(result + 72) = a2;
  *(float *)(result + 76) = fmaxf(a2 + -0.1, 0.0);
  return result;
}

uint64_t sub_315AB4(uint64_t a1, int a2, float a3, float a4)
{
  *(float *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 68) = a2;
  uint64_t result = (*(uint64_t (**)(uint64_t, float))(*(void *)a1 + 64))(a1, a4);
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  return result;
}

BOOL sub_315B08(uint64_t a1)
{
  return *(void *)(a1 + 56) != 0;
}

void sub_315B18(uint64_t a1)
{
  if (sub_5CCA0(a1, 0x64u))
  {
    uint64_t v2 = *(FILE **)(a1 + 48);
    if (v2) {
      fclose(v2);
    }
    uint64_t v3 = *(FILE **)(a1 + 56);
    if (v3) {
      fclose(v3);
    }
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    atomic_store(0, (unsigned __int8 *)(a1 + 8));
  }
  else
  {
    uint64_t v4 = (os_log_t *)sub_32A48(25);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315906;
      uint64_t v7 = "AncFilterLoggerV2.cpp";
      __int16 v8 = 1024;
      int v9 = 130;
      __int16 v10 = 2080;
      unsigned int v11 = "CloseFile";
      __int16 v12 = 1024;
      int v13 = 100;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d %s failed to aquire lock after %u ms", (uint8_t *)&v6, 0x22u);
    }
  }
}

BOOL sub_315C30(void *a1, const char **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  if (!a1[2]) {
    goto LABEL_14;
  }
  uint64_t v7 = *a2;
  if (a2[1] - *a2 != 48) {
    goto LABEL_14;
  }
  __int16 v8 = *a2;
  if (v7[23] < 0) {
    __int16 v8 = *(const char **)v7;
  }
  int v9 = v7 + 24;
  if (v7[47] < 0) {
    int v9 = *(const char **)v9;
  }
  if ((!a1[6] || !a1[7]) && (__int16 v10 = fopen(v8, "w"), (a1[6] = v10) != 0))
  {
    unsigned int v11 = fopen(v9, "w");
    a1[7] = v11;
    BOOL v12 = v11 != 0;
  }
  else
  {
LABEL_14:
    BOOL v12 = 0;
  }
  sub_4636C(v6);
  return v12;
}

void sub_315D04(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_315D18()
{
  return 776;
}

uint64_t sub_315D20()
{
  return 520;
}

void sub_315D28(void *a1)
{
  sub_315D60(a1);

  operator delete();
}

void *sub_315D60(void *a1)
{
  *a1 = off_6334F0;
  sub_315B18((uint64_t)a1);
  uint64_t v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[12];
  if (v3)
  {
    a1[13] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  *a1 = off_633588;
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t sub_315E04(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_315E28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_6335F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_315E7C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_6335F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_315E9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == *(void *)(a1 + 16)) {
    return 1;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 32))();
    if ((result & 1) == 0) {
      break;
    }
    v1 += 16;
  }
  while (v1 != *(void *)(a1 + 16));
  return result;
}

uint64_t sub_315F0C(uint64_t a1)
{
  return sub_315F14(a1 - 80);
}

uint64_t sub_315F14(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 88);
  if (v1 == *(uint64_t **)(a1 + 96))
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "MasterMuteControl_HAL_Common.cpp";
      __int16 v10 = 1024;
      int v11 = 35;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"mute control list is empty\"", (uint8_t *)&v8, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  while (v1 != *(uint64_t **)(a1 + 96));
  return result;
}

uint64_t sub_316060(uint64_t a1)
{
  return sub_316068(a1 - 80);
}

uint64_t sub_316068(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 88);
  if (v1 == *(uint64_t **)(a1 + 96))
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "MasterMuteControl_HAL_Common.cpp";
      __int16 v10 = 1024;
      int v11 = 24;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"mute control list is empty\"", (uint8_t *)&v8, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  while (v1 != *(uint64_t **)(a1 + 96));
  return result;
}

void sub_3161B4(uint64_t a1)
{
  sub_3161F0((void *)(a1 - 80));

  operator delete();
}

uint64_t sub_3161F0(void *a1)
{
  *a1 = off_63E770;
  a1[10] = off_63E7E8;
  uint64_t v2 = a1[11];
  if (v2)
  {
    uint64_t v3 = a1[12];
    uint64_t v4 = (void *)a1[11];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          sub_4636C(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[11];
    }
    a1[12] = v2;
    operator delete(v4);
  }

  return sub_FE920((uint64_t)a1);
}

uint64_t sub_3162A4(uint64_t a1)
{
  return sub_3161F0((void *)(a1 - 80));
}

uint64_t sub_3162AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1 == *(void *)(a1 + 96)) {
    return 1;
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 32))();
    if ((result & 1) == 0) {
      break;
    }
    v1 += 16;
  }
  while (v1 != *(void *)(a1 + 96));
  return result;
}

void sub_31631C(void *a1)
{
  sub_3161F0(a1);

  operator delete();
}

void sub_316358(void *a1, void *a2)
{
  if (!*a2)
  {
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      BOOL v24 = "MasterMuteControl_HAL_Common.cpp";
      __int16 v25 = 1024;
      int v26 = 64;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inSubMuteControl is NULL]: \"Argument inSubMuteControl is NULL\"", (uint8_t *)&v23, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "Argument inSubMuteControl is NULL");
  }
  uint64_t v5 = (_OWORD *)a1[12];
  unint64_t v4 = a1[13];
  if ((unint64_t)v5 < v4)
  {
    *uint64_t v5 = *(_OWORD *)a2;
    int v6 = v5 + 1;
    *a2 = 0;
    a2[1] = 0;
    a1[12] = v6;
    goto LABEL_20;
  }
  uint64_t v7 = a1[11];
  uint64_t v8 = ((uint64_t)v5 - v7) >> 4;
  if ((unint64_t)(v8 + 1) >> 60) {
    sub_60548();
  }
  uint64_t v9 = v4 - v7;
  uint64_t v10 = v9 >> 3;
  if (v9 >> 3 <= (unint64_t)(v8 + 1)) {
    uint64_t v10 = v8 + 1;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11 >> 60) {
    sub_60560();
  }
  BOOL v12 = (char *)operator new(16 * v11);
  int v13 = &v12[16 * v8];
  *(_OWORD *)int v13 = *(_OWORD *)a2;
  int v6 = v13 + 16;
  uint64_t v14 = &v12[16 * v11];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v15 = (void *)a1[11];
  uint64_t v16 = (void *)a1[12];
  if (v16 == v15)
  {
    a1[11] = v13;
    a1[12] = v6;
    a1[13] = v14;
    if (!v16) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  do
  {
    long long v17 = *((_OWORD *)v16 - 1);
    v16 -= 2;
    *((_OWORD *)v13 - 1) = v17;
    v13 -= 16;
    void *v16 = 0;
    v16[1] = 0;
  }
  while (v16 != v15);
  float v18 = (void *)a1[11];
  uint64_t v16 = (void *)a1[12];
  a1[11] = v13;
  a1[12] = v6;
  a1[13] = v14;
  if (v16 != v18)
  {
    do
    {
      uint64_t v19 = (std::__shared_weak_count *)*(v16 - 1);
      if (v19) {
        sub_4636C(v19);
      }
      v16 -= 2;
    }
    while (v16 != v18);
    uint64_t v16 = v18;
  }
  if (v16) {
LABEL_19:
  }
    operator delete(v16);
LABEL_20:
  a1[12] = v6;
}

void sub_316560(_Unwind_Exception *exception_object)
{
}

void sub_31657C()
{
  uint64_t v103 = 0x696D6932696D6931;
  sub_72300(__p, (__int32 *)&v103, 2);
  sub_857F4((uint64_t)&qword_6589C0, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  long long v94 = 0;
  uint64_t v95 = 0;
  unint64_t v96 = 0;
  sub_46B38(&v94, (const void *)qword_658A18, qword_658A20[0], (qword_658A20[0] - qword_658A18) >> 2);
  LODWORD(v103) = 1768778033;
  sub_72300(v83, (__int32 *)&v103, 1);
  v0 = (char *)operator new(0x18uLL);
  v81[1] = v0 + 24;
  v81[2] = v0 + 24;
  qmemcpy(v0, "ivpvovpvcgpvcvmrgcrvgsmv", 24);
  v81[0] = v0;
  uint64_t v1 = (char *)operator new(0xCuLL);
  v80[1] = v1 + 12;
  v80[2] = v1 + 12;
  qmemcpy(v1, " wargcrvgsmv", 12);
  v80[0] = v1;
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = 0x766D736776726367;
  v79[1] = v2 + 1;
  void v79[2] = v2 + 1;
  v79[0] = v2;
  sub_72384((uint64_t)&v103, 1953460273, (uint64_t)v83, 1869442665, -1, (uint64_t)v81);
  sub_72384((uint64_t)v89, 1650811245, (uint64_t)&v94, 1935827812, 1, (uint64_t)v80);
  sub_72384((uint64_t)v84, 1650811245, (uint64_t)&v94, 1668441188, 0, (uint64_t)v80);
  sub_72384((uint64_t)&v98, 1634495520, (uint64_t)&qword_658A18, 1852796517, -1, (uint64_t)v79);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_658AB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_658AB8))
  {
    sub_7245C((uint64_t)v97, (uint64_t)&v103);
    sub_724F8(v78, (uint64_t)v97, 1uLL);
    sub_7258C((uint64_t)&unk_658A80, 1835216945, 1835234416, 0, 1970303090, 1953460256, v78);
    char v82 = (void **)v78;
    sub_72620(&v82);
    sub_726A4(v97);
    __cxa_guard_release(&qword_658AB8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_658AF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_658AF8))
  {
    sub_7245C((uint64_t)v97, (uint64_t)v89);
    sub_724F8(v78, (uint64_t)v97, 1uLL);
    sub_7258C((uint64_t)&unk_658AC0, 1835216946, 1835229803, 0, 1970303090, 1650549611, v78);
    char v82 = (void **)v78;
    sub_72620(&v82);
    sub_726A4(v97);
    __cxa_guard_release(&qword_658AF8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_658B38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_658B38))
  {
    sub_7245C((uint64_t)v97, (uint64_t)v84);
    sub_724F8(v78, (uint64_t)v97, 1uLL);
    sub_7258C((uint64_t)&unk_658B00, 1835216947, 1835230834, 0, 1970303090, 1718775412, v78);
    char v82 = (void **)v78;
    sub_72620(&v82);
    sub_726A4(v97);
    __cxa_guard_release(&qword_658B38);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_658B78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_658B78))
  {
    sub_7245C((uint64_t)v97, (uint64_t)&v98);
    sub_724F8(v78, (uint64_t)v97, 1uLL);
    sub_72890((uint64_t)&unk_658B40, 1634495520, 1835229548, 1, v78);
    char v82 = (void **)v78;
    sub_72620(&v82);
    sub_726A4(v97);
    __cxa_guard_release(&qword_658B78);
  }
  uint64_t v3 = qword_6589C8;
  if (qword_6589C8 >= (unint64_t)qword_6589D0)
  {
    uint64_t v5 = (qword_6589C8 - qword_6589C0) >> 3;
    if ((unint64_t)(v5 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v6 = (qword_6589D0 - qword_6589C0) >> 2;
    if (v6 <= v5 + 1) {
      unint64_t v6 = v5 + 1;
    }
    if ((unint64_t)(qword_6589D0 - qword_6589C0) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v7 = v6;
    }
    if (v7) {
      unint64_t v7 = (unint64_t)sub_106EC(v7);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = (void *)(v7 + 8 * v5);
    uint64_t v10 = v7 + 8 * v8;
    *uint64_t v9 = &unk_658A80;
    unint64_t v4 = v9 + 1;
    uint64_t v12 = qword_6589C0;
    unint64_t v11 = (char *)qword_6589C8;
    if (qword_6589C8 != qword_6589C0)
    {
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *--uint64_t v9 = v13;
      }
      while (v11 != (char *)v12);
      unint64_t v11 = (char *)qword_6589C0;
    }
    qword_6589C0 = (uint64_t)v9;
    qword_6589C8 = (uint64_t)v4;
    qword_6589D0 = v10;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(void *)qword_6589C8 = &unk_658A80;
    unint64_t v4 = (void *)(v3 + 8);
  }
  qword_6589C8 = (uint64_t)v4;
  if ((unint64_t)v4 >= qword_6589D0)
  {
    uint64_t v15 = ((uint64_t)v4 - qword_6589C0) >> 3;
    if ((unint64_t)(v15 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v16 = (qword_6589D0 - qword_6589C0) >> 2;
    if (v16 <= v15 + 1) {
      unint64_t v16 = v15 + 1;
    }
    if ((unint64_t)(qword_6589D0 - qword_6589C0) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v17) {
      unint64_t v17 = (unint64_t)sub_106EC(v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (void *)(v17 + 8 * v15);
    uint64_t v20 = v17 + 8 * v18;
    *uint64_t v19 = &unk_658AC0;
    uint64_t v14 = v19 + 1;
    uint64_t v22 = qword_6589C0;
    uint64_t v21 = (char *)qword_6589C8;
    if (qword_6589C8 != qword_6589C0)
    {
      do
      {
        uint64_t v23 = *((void *)v21 - 1);
        v21 -= 8;
        *--uint64_t v19 = v23;
      }
      while (v21 != (char *)v22);
      uint64_t v21 = (char *)qword_6589C0;
    }
    qword_6589C0 = (uint64_t)v19;
    qword_6589C8 = (uint64_t)v14;
    qword_6589D0 = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    void *v4 = &unk_658AC0;
    uint64_t v14 = v4 + 1;
  }
  qword_6589C8 = (uint64_t)v14;
  if ((unint64_t)v14 >= qword_6589D0)
  {
    uint64_t v25 = ((uint64_t)v14 - qword_6589C0) >> 3;
    if ((unint64_t)(v25 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v26 = (qword_6589D0 - qword_6589C0) >> 2;
    if (v26 <= v25 + 1) {
      unint64_t v26 = v25 + 1;
    }
    if ((unint64_t)(qword_6589D0 - qword_6589C0) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v26;
    }
    if (v27) {
      unint64_t v27 = (unint64_t)sub_106EC(v27);
    }
    else {
      uint64_t v28 = 0;
    }
    float v29 = (void *)(v27 + 8 * v25);
    uint64_t v30 = v27 + 8 * v28;
    *float v29 = &unk_658B00;
    BOOL v24 = v29 + 1;
    uint64_t v32 = qword_6589C0;
    unint64_t v31 = (char *)qword_6589C8;
    if (qword_6589C8 != qword_6589C0)
    {
      do
      {
        uint64_t v33 = *((void *)v31 - 1);
        v31 -= 8;
        *--float v29 = v33;
      }
      while (v31 != (char *)v32);
      unint64_t v31 = (char *)qword_6589C0;
    }
    qword_6589C0 = (uint64_t)v29;
    qword_6589C8 = (uint64_t)v24;
    qword_6589D0 = v30;
    if (v31) {
      operator delete(v31);
    }
  }
  else
  {
    *uint64_t v14 = &unk_658B00;
    BOOL v24 = v14 + 1;
  }
  qword_6589C8 = (uint64_t)v24;
  if ((unint64_t)v24 >= qword_6589D0)
  {
    uint64_t v35 = ((uint64_t)v24 - qword_6589C0) >> 3;
    if ((unint64_t)(v35 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v36 = (qword_6589D0 - qword_6589C0) >> 2;
    if (v36 <= v35 + 1) {
      unint64_t v36 = v35 + 1;
    }
    if ((unint64_t)(qword_6589D0 - qword_6589C0) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v37 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v36;
    }
    if (v37) {
      unint64_t v37 = (unint64_t)sub_106EC(v37);
    }
    else {
      uint64_t v38 = 0;
    }
    uint64_t v39 = (void *)(v37 + 8 * v35);
    uint64_t v40 = v37 + 8 * v38;
    void *v39 = &unk_658B40;
    uint64_t v34 = (uint64_t)(v39 + 1);
    uint64_t v42 = qword_6589C0;
    char v41 = (char *)qword_6589C8;
    if (qword_6589C8 != qword_6589C0)
    {
      do
      {
        uint64_t v43 = *((void *)v41 - 1);
        v41 -= 8;
        *--uint64_t v39 = v43;
      }
      while (v41 != (char *)v42);
      char v41 = (char *)qword_6589C0;
    }
    qword_6589C0 = (uint64_t)v39;
    qword_6589C8 = v34;
    qword_6589D0 = v40;
    if (v41) {
      operator delete(v41);
    }
  }
  else
  {
    *BOOL v24 = &unk_658B40;
    uint64_t v34 = (uint64_t)(v24 + 1);
  }
  qword_6589C8 = v34;
  qword_6589D8 = (uint64_t)&unk_658A80;
  int v44 = v94;
  sub_6720C((char *)&qword_658A20[2], (char *)v94, (uint64_t)v95, (v95 - (unsigned char *)v94) >> 2);
  sub_6720C((char *)qword_658A48, v104, (uint64_t)v105, (v105 - v104) >> 2);
  sub_6720C((char *)&qword_658A50[2], (char *)qword_658A48[0], qword_658A50[0], (qword_658A50[0] - qword_658A48[0]) >> 2);
  if (v101)
  {
    std::string::size_type v102 = v101;
    operator delete(v101);
  }
  if (v99)
  {
    long long v100 = v99;
    operator delete(v99);
  }
  if (v87)
  {
    uint64_t v88 = v87;
    operator delete(v87);
  }
  if (v85)
  {
    char v86 = v85;
    operator delete(v85);
  }
  if (v92)
  {
    uint64_t v93 = v92;
    operator delete(v92);
  }
  if (v90)
  {
    uint64_t v91 = v90;
    operator delete(v90);
  }
  if (v106)
  {
    uint64_t v107 = v106;
    operator delete(v106);
  }
  if (v104)
  {
    uint64_t v105 = v104;
    operator delete(v104);
  }
  if (v79[0]) {
    operator delete(v79[0]);
  }
  if (v80[0]) {
    operator delete(v80[0]);
  }
  if (v81[0]) {
    operator delete(v81[0]);
  }
  if (v83[0])
  {
    v83[1] = v83[0];
    operator delete(v83[0]);
  }
  if (v44) {
    operator delete(v44);
  }
  memset(v97, 0, 24);
  sub_46B38(v97, (const void *)qword_658A18, qword_658A20[0], (qword_658A20[0] - qword_658A18) >> 2);
  __int16 v45 = (char *)operator new(8uLL);
  *(void *)__int16 v45 = 0x726D76637670766FLL;
  uint64_t v95 = v45 + 8;
  unint64_t v96 = v45 + 8;
  long long v94 = v45;
  sub_72384((uint64_t)&v103, 1650811245, (uint64_t)v97, 1935827812, 1, (uint64_t)&v94);
  sub_72384((uint64_t)v89, 1650811245, (uint64_t)v97, 1668441188, 0, (uint64_t)&v94);
  sub_72384((uint64_t)v84, 1634495520, (uint64_t)&qword_658A18, 1852796517, -1, (uint64_t)&v94);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_658BB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_658BB8))
  {
    sub_7245C((uint64_t)&v98, (uint64_t)&v103);
    sub_724F8(v83, (uint64_t)&v98, 1uLL);
    sub_7258C((uint64_t)&unk_658B80, 1835216946, 1835229803, 0, 1970303090, 1650549611, (uint64_t *)v83);
    v81[0] = v83;
    sub_72620((void ***)v81);
    sub_726A4(&v98);
    __cxa_guard_release(&qword_658BB8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_658BF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_658BF8))
  {
    sub_7245C((uint64_t)&v98, (uint64_t)v89);
    sub_724F8(v83, (uint64_t)&v98, 1uLL);
    sub_7258C((uint64_t)&unk_658BC0, 1835216947, 1835230834, 0, 1970303090, 1718775412, (uint64_t *)v83);
    v81[0] = v83;
    sub_72620((void ***)v81);
    sub_726A4(&v98);
    __cxa_guard_release(&qword_658BF8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_658C38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_658C38))
  {
    sub_7245C((uint64_t)&v98, (uint64_t)v84);
    sub_724F8(v83, (uint64_t)&v98, 1uLL);
    sub_72890((uint64_t)&unk_658C00, 1634495520, 1835229548, 2, (uint64_t *)v83);
    v81[0] = v83;
    sub_72620((void ***)v81);
    sub_726A4(&v98);
    __cxa_guard_release(&qword_658C38);
  }
  uint64_t v46 = qword_6589E8;
  if (qword_6589E8 >= (unint64_t)qword_6589F0)
  {
    uint64_t v48 = (qword_6589E8 - qword_6589E0) >> 3;
    if ((unint64_t)(v48 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v49 = (qword_6589F0 - qword_6589E0) >> 2;
    if (v49 <= v48 + 1) {
      unint64_t v49 = v48 + 1;
    }
    if ((unint64_t)(qword_6589F0 - qword_6589E0) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v49;
    }
    if (v50) {
      unint64_t v50 = (unint64_t)sub_106EC(v50);
    }
    else {
      uint64_t v51 = 0;
    }
    char v52 = (void *)(v50 + 8 * v48);
    *char v52 = &unk_658B80;
    char v47 = v52 + 1;
    uint64_t v53 = v50 + 8 * v51;
    uint64_t v55 = qword_6589E0;
    uint64_t v54 = (char *)qword_6589E8;
    if (qword_6589E8 != qword_6589E0)
    {
      do
      {
        uint64_t v56 = *((void *)v54 - 1);
        v54 -= 8;
        *--char v52 = v56;
      }
      while (v54 != (char *)v55);
      uint64_t v54 = (char *)qword_6589E0;
    }
    qword_6589E0 = (uint64_t)v52;
    qword_6589E8 = (uint64_t)v47;
    qword_6589F0 = v53;
    if (v54) {
      operator delete(v54);
    }
  }
  else
  {
    *(void *)qword_6589E8 = &unk_658B80;
    char v47 = (void *)(v46 + 8);
  }
  qword_6589E8 = (uint64_t)v47;
  if ((unint64_t)v47 >= qword_6589F0)
  {
    uint64_t v58 = ((uint64_t)v47 - qword_6589E0) >> 3;
    if ((unint64_t)(v58 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v59 = (qword_6589F0 - qword_6589E0) >> 2;
    if (v59 <= v58 + 1) {
      unint64_t v59 = v58 + 1;
    }
    if ((unint64_t)(qword_6589F0 - qword_6589E0) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v60 = v59;
    }
    if (v60) {
      unint64_t v60 = (unint64_t)sub_106EC(v60);
    }
    else {
      uint64_t v61 = 0;
    }
    std::string v62 = (void *)(v60 + 8 * v58);
    *std::string v62 = &unk_658BC0;
    uint64_t v57 = v62 + 1;
    uint64_t v63 = v60 + 8 * v61;
    uint64_t v65 = qword_6589E0;
    long long v64 = (char *)qword_6589E8;
    if (qword_6589E8 != qword_6589E0)
    {
      do
      {
        uint64_t v66 = *((void *)v64 - 1);
        v64 -= 8;
        *--std::string v62 = v66;
      }
      while (v64 != (char *)v65);
      long long v64 = (char *)qword_6589E0;
    }
    qword_6589E0 = (uint64_t)v62;
    qword_6589E8 = (uint64_t)v57;
    qword_6589F0 = v63;
    if (v64) {
      operator delete(v64);
    }
  }
  else
  {
    void *v47 = &unk_658BC0;
    uint64_t v57 = v47 + 1;
  }
  qword_6589E8 = (uint64_t)v57;
  if ((unint64_t)v57 >= qword_6589F0)
  {
    uint64_t v68 = ((uint64_t)v57 - qword_6589E0) >> 3;
    if ((unint64_t)(v68 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v69 = (qword_6589F0 - qword_6589E0) >> 2;
    if (v69 <= v68 + 1) {
      unint64_t v69 = v68 + 1;
    }
    if ((unint64_t)(qword_6589F0 - qword_6589E0) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v70 = v69;
    }
    if (v70) {
      unint64_t v70 = (unint64_t)sub_106EC(v70);
    }
    else {
      uint64_t v71 = 0;
    }
    char v72 = (void *)(v70 + 8 * v68);
    *char v72 = &unk_658C00;
    uint64_t v67 = (uint64_t)(v72 + 1);
    uint64_t v73 = v70 + 8 * v71;
    uint64_t v75 = qword_6589E0;
    uint64_t v74 = (char *)qword_6589E8;
    if (qword_6589E8 != qword_6589E0)
    {
      do
      {
        uint64_t v76 = *((void *)v74 - 1);
        v74 -= 8;
        *--char v72 = v76;
      }
      while (v74 != (char *)v75);
      uint64_t v74 = (char *)qword_6589E0;
    }
    qword_6589E0 = (uint64_t)v72;
    qword_6589E8 = v67;
    qword_6589F0 = v73;
    if (v74) {
      operator delete(v74);
    }
  }
  else
  {
    void *v57 = &unk_658C00;
    uint64_t v67 = (uint64_t)(v57 + 1);
  }
  qword_6589E8 = v67;
  qword_6589F8 = (uint64_t)&unk_658BC0;
  if (v87)
  {
    uint64_t v88 = v87;
    operator delete(v87);
  }
  if (v85)
  {
    char v86 = v85;
    operator delete(v85);
  }
  if (v92)
  {
    uint64_t v93 = v92;
    operator delete(v92);
  }
  if (v90)
  {
    uint64_t v91 = v90;
    operator delete(v90);
  }
  if (v106)
  {
    uint64_t v107 = v106;
    operator delete(v106);
  }
  if (v104)
  {
    uint64_t v105 = v104;
    operator delete(v104);
  }
  if (v94) {
    operator delete(v94);
  }
  if (v97[0]) {
    operator delete(v97[0]);
  }
}

void sub_317304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *__p)
{
  sub_72620((void ***)&a22);
  sub_726A4((void *)(v48 - 200));
  __cxa_guard_abort(&qword_658C38);
  sub_726A4(&a29);
  unint64_t v50 = a45;
  sub_726A4(&a37);
  sub_726A4((void *)(v48 - 136));
  if (v50)
  {
    a46 = (uint64_t)v50;
    operator delete(v50);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_72960((uint64_t)&qword_6589C0);
  _Unwind_Resume(a1);
}

void sub_3175E4(uint64_t a1)
{
  unsigned int v1 = sub_3176F4(a1);
  if (v1)
  {
    unsigned int v2 = v1;
    uint64_t v3 = (os_log_t *)sub_32A48(22);
    unint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v2);
        if (v7 >= 0) {
          uint64_t v5 = __p;
        }
        else {
          uint64_t v5 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        uint64_t v9 = "VirtualStream.cpp";
        __int16 v10 = 1024;
        int v11 = 898;
        __int16 v12 = 2080;
        uint64_t v13 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Received error '%s' when attempting to refresh stream formats", buf, 0x1Cu);
        if (v7 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

uint64_t sub_3176F4(uint64_t a1)
{
  uint64_t v301 = a1 + 440;
  char v302 = 1;
  sub_F648(a1 + 440);
  v299[0] = 0;
  v299[1] = 0;
  v300 = 0;
  int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 176))(*(void *)(a1 + 136));
  uint64_t v3 = (uint64_t *)(a1 + 80);
  if (v2)
  {
    sub_4188((uint64_t *)buf, v3, "", 1142);
    uint64_t v4 = *(void *)buf;
    uint64_t v5 = *(void *)(a1 + 136);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 176))(v5);
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v4 + 104))(v4, v299, 1936092513);
  }
  else
  {
    sub_4188((uint64_t *)buf, v3, "", 1147);
    uint64_t v7 = *(void *)buf;
    uint64_t v8 = *(void *)(a1 + 136);
    if (v8 && ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8) & 1) != 0) {
      uint64_t v9 = 1936092513;
    }
    else {
      uint64_t v9 = 1885762657;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v7 + 104))(v7, v299, v9);
  }
  uint64_t v10 = v6;
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v10)
  {
    int v11 = (os_log_t *)sub_32A48(22);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v311, v10);
      int v13 = v311[23];
      uint64_t v14 = *(unsigned char **)v311;
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
      uint64_t v15 = v311;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (__p[23] >= 0) {
        unint64_t v16 = __p;
      }
      else {
        unint64_t v16 = *(unsigned char **)__p;
      }
      uint64_t v17 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1153;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v15;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&buf[30] = v16;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&uint8_t buf[40] = v17;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' getting physical stream formats from actual stream for virtual stream '%s' of aggregate device %p.", buf, 0x30u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v311[23] & 0x80000000) != 0)
      {
        uint64_t v18 = *(void **)v311;
LABEL_493:
        operator delete(v18);
        goto LABEL_494;
      }
    }
    goto LABEL_494;
  }
  if (sub_31A248((uint64_t *)a1) && (_os_feature_enabled_impl() & 1) != 0)
  {
    uint64_t v19 = (os_log_t *)sub_32A48(22);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1168;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_INFO, "%25s:%-5d Skipping format cullings on this device. Culling happens internally", buf, 0x12u);
    }
    goto LABEL_301;
  }
  uint64_t v21 = *(void *)(a1 + 96);
  strcpy(buf, "3cadbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v22 = sub_99A40(v21);
  *((void *)&v25 + 1) = v23;
  *(void *)&long long v25 = v22;
  uint64_t v24 = v25 >> 32;
  BOOL v26 = (v24 & 0xFF00000000) == 0 || v24 == 0;
  int v27 = !v26;
  uint64_t v28 = *(void *)(a1 + 104);
  if (!v28) {
    goto LABEL_54;
  }
  strcpy(buf, "+btmbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v29 = sub_99A40(v28);
  *((void *)&v32 + 1) = v30;
  *(void *)&long long v32 = v29;
  uint64_t v31 = v32 >> 32;
  uint64_t v33 = *(void *)(a1 + 104);
  if (v33)
  {
    strcpy(buf, "+ctmbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v34 = sub_99A40(v33);
    *((void *)&v37 + 1) = v35;
    *(void *)&long long v37 = v34;
    uint64_t v36 = v37 >> 32;
    BOOL v39 = (v31 & 0xFF00000000) != 0 && v31 != 0;
    if ((v36 & 0xFF00000000) != 0)
    {
      if (v36) {
        char v40 = 1;
      }
      else {
        char v40 = v39;
      }
      if ((v40 & 1) == 0) {
        goto LABEL_54;
      }
    }
    else if (!v39)
    {
LABEL_54:
      BOOL v41 = 0;
      goto LABEL_55;
    }
LABEL_53:
    BOOL v41 = MGGetSInt32Answer() == 4;
    goto LABEL_55;
  }
  BOOL v41 = 0;
  if ((v31 & 0xFF00000000) != 0 && v31) {
    goto LABEL_53;
  }
LABEL_55:
  if (!sub_31B098(a1)) {
    goto LABEL_212;
  }
  int v42 = sub_21EF80((_DWORD *)(*(void *)(a1 + 96) + 264));
  if (v27)
  {
    uint64_t v43 = sub_32A48(22);
    if (*(unsigned char *)(v43 + 8))
    {
      int v44 = *(NSObject **)v43;
      if (*(void *)v43)
      {
        if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1097;
          _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d AC-3 formats are simulated", buf, 0x12u);
        }
      }
    }
  }
  uint64_t v45 = sub_298DA4();
  int v46 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 8))(v45);
  char v47 = *(unsigned char *)(a1 + 401);
  BOOL v48 = sub_31A248((uint64_t *)a1);
  int v297 = *(unsigned __int8 *)(a1 + 728);
  buf[8] = 0;
  buf[16] = 0;
  *(_DWORD *)buf = 0;
  *(_WORD *)&uint8_t buf[4] = 0;
  *(_DWORD *)&uint8_t buf[24] = v46;
  *(void *)&unsigned char buf[32] = v299;
  uint8_t buf[40] = 0;
  buf[44] = 0;
  LOBYTE(v314) = v42;
  BYTE1(v314) = v48;
  *(_DWORD *)v311 = 0;
  if (sub_1614F4(@"OverrideLPCMChannelCount", @"com.apple.audio.virtualaudio", v311))
  {
    int v49 = *(_DWORD *)v311;
    unint64_t v50 = (os_log_t *)sub_32A48(13);
    uint64_t v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v311 = 136315906;
      *(void *)&v311[4] = "RunTimeDefaults.cpp";
      *(_WORD *)&v311[12] = 1024;
      *(_DWORD *)&v311[14] = 2109;
      *(_WORD *)&v311[18] = 2080;
      *(void *)&v311[20] = "OverrideLPCMChannelCount";
      *(_WORD *)&v311[28] = 1024;
      *(_DWORD *)&v311[30] = v49;
      _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", v311, 0x22u);
    }
    char v52 = v299[0];
    if (v299[0] != v299[1])
    {
      while (1)
      {
        BOOL v53 = v52[2] == 1819304813 && (v52[3] & 1) == 0;
        if (v53 && v52[7] == v49) {
          break;
        }
        v52 += 14;
        if (v52 == v299[1]) {
          goto LABEL_73;
        }
      }
      long long v100 = (os_log_t *)sub_32A48(22);
      uint64_t v101 = *v100;
      if (*v100 && os_log_type_enabled(*v100, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v311 = 136315650;
        *(void *)&v311[4] = "VirtualStream.cpp";
        *(_WORD *)&v311[12] = 1024;
        *(_DWORD *)&v311[14] = 1577;
        *(_WORD *)&v311[18] = 1024;
        *(_DWORD *)&v311[20] = v49;
        _os_log_impl(&def_1E50E8, v101, OS_LOG_TYPE_DEFAULT, "%25s:%-5d LPCM format with channel count %u is available. Forcing this format", v311, 0x18u);
      }
      *(_DWORD *)&uint8_t buf[40] = v49;
      buf[44] = 1;
      goto LABEL_127;
    }
LABEL_73:
    uint64_t v54 = (os_log_t *)sub_32A48(22);
    uint64_t v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v311 = 136315650;
      *(void *)&v311[4] = "VirtualStream.cpp";
      *(_WORD *)&v311[12] = 1024;
      *(_DWORD *)&v311[14] = 1586;
      *(_WORD *)&v311[18] = 1024;
      *(_DWORD *)&v311[20] = v49;
      _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_DEFAULT, "%25s:%-5d LPCM format with channel count %u is not available.", v311, 0x18u);
    }
  }
  if (v42)
  {
    if (v48) {
      char v56 = _os_feature_enabled_impl() ^ 1;
    }
    else {
      char v56 = 1;
    }
    buf[5] = v56;
  }
  int v57 = 0;
  switch(v46)
  {
    case 0:
      buf[0] = v27;
      buf[2] = v47;
      int v57 = v27;
      break;
    case 3:
      goto LABEL_86;
    case 4:
      int v57 = 0;
      *(_WORD *)&buf[3] = 257;
      buf[1] = 1;
      buf[5] = 1;
      goto LABEL_119;
    case 5:
      *(_WORD *)buf = 257;
      *(_WORD *)&buf[3] = 257;
      int v57 = 1;
      buf[5] = 1;
      break;
    case 6:
      buf[5] = 1;
LABEL_86:
      if (v299[0] == v299[1])
      {
        int v61 = 0;
        int v66 = 1;
        buf[3] = 1;
      }
      else
      {
        uint64_t v58 = (char *)v299[0] + 56;
        do
        {
          BOOL v60 = (*(v58 - 44) & 1) == 0 && *((_DWORD *)v58 - 12) == 1819304813 && *((_DWORD *)v58 - 7) == 6;
          int v61 = v60;
          if (v60) {
            break;
          }
          BOOL v26 = v58 == v299[1];
          v58 += 56;
        }
        while (!v26);
        buf[3] = v61 ^ 1;
        std::string v62 = (char *)v299[0] + 56;
        do
        {
          BOOL v64 = (*(v62 - 44) & 1) == 0 && *((_DWORD *)v62 - 12) == 1819304813 && *((_DWORD *)v62 - 7) == 8;
          int v65 = v64;
          if (v64) {
            break;
          }
          BOOL v26 = v62 == v299[1];
          v62 += 56;
        }
        while (!v26);
        int v66 = v65 ^ 1;
      }
      uint8_t buf[4] = v66;
      if (v61 | v66 ^ 1) {
        int v57 = 1;
      }
      else {
        int v57 = v27;
      }
      buf[0] = v57;
      buf[1] = 1;
LABEL_119:
      buf[2] = v47;
      break;
    default:
      break;
  }
  if (!v41) {
    buf[5] = 1;
  }
  if (!v57)
  {
    char v82 = (double *)v299[0];
    if (v299[0] != v299[1])
    {
      while (1)
      {
        int v83 = *((_DWORD *)v82 + 2);
        BOOL v84 = v83 == 1633889587 || v83 == 1667588915;
        BOOL v85 = v84 || v83 == 1667326771;
        if (v85 && v82[6] >= 48000.0 && v82[5] <= 48000.0) {
          break;
        }
        v82 += 7;
        if (v82 == v299[1]) {
          goto LABEL_123;
        }
      }
      *(void *)&buf[8] = 0x40E7700000000000;
      buf[16] = 1;
    }
  }
LABEL_123:
  if (v297)
  {
    buf[5] = 1;
    buf[0] = 1;
  }
  if (v42)
  {
    buf[0] = 1;
LABEL_127:
    if ((sub_31A248((uint64_t *)a1) & v42) == 1)
    {
      uint64_t v67 = (os_log_t *)sub_32A48(22);
      uint64_t v68 = *v67;
      if (*v67)
      {
        if (os_log_type_enabled(*v67, OS_LOG_TYPE_DEFAULT))
        {
          sub_31B340((std::string *)__p, (uint64_t)buf);
          unint64_t v69 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)v311 = 136315650;
          *(void *)&v311[4] = "VirtualStream.cpp";
          *(_WORD *)&v311[12] = 1024;
          *(_DWORD *)&v311[14] = 1108;
          *(_WORD *)&v311[18] = 2080;
          *(void *)&v311[20] = v69;
          _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parrot and call: {%s}", v311, 0x1Cu);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
      }
    }
    goto LABEL_136;
  }
  sub_31A248((uint64_t *)a1);
LABEL_136:
  uint64_t v70 = sub_32A48(22);
  if (*(unsigned char *)(v70 + 8))
  {
    uint64_t v71 = *(NSObject **)v70;
    if (*(void *)v70)
    {
      if (os_log_type_enabled(*(os_log_t *)v70, OS_LOG_TYPE_DEBUG))
      {
        sub_31B340((std::string *)__p, (uint64_t)buf);
        char v72 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)v311 = 136315650;
        *(void *)&v311[4] = "VirtualStream.cpp";
        *(_WORD *)&v311[12] = 1024;
        *(_DWORD *)&v311[14] = 1109;
        *(_WORD *)&v311[18] = 2080;
        *(void *)&v311[20] = v72;
        _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d {%s}", v311, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }
  uint64_t v73 = v299[0];
  int64_t v74 = (char *)v299[1] - (char *)v299[0];
  if (v299[1] == v299[0])
  {
    id v77 = 0;
    long long v78 = 0uLL;
  }
  else
  {
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (v74 >> 3)) > 0x492492492492492) {
      sub_60548();
    }
    uint64_t v75 = (char *)sub_1927E0(0x6DB6DB6DB6DB6DB7 * (v74 >> 3));
    id v77 = &v75[56 * v76];
    memmove(v75, v73, v74);
    *(void *)&long long v78 = v75;
    *((void *)&v78 + 1) = &v75[8 * (v74 >> 3)];
  }
  uint64_t v79 = v78;
  long long v298 = v78;
  uint64_t v80 = *((void *)&v78 + 1);
  uint64_t v81 = v78;
  if ((void)v78 != *((void *)&v78 + 1))
  {
    uint64_t v81 = v78;
    while ((sub_31B72C((uint64_t)buf, v81) & 1) == 0)
    {
      v81 += 56;
      if (v81 == v80) {
        goto LABEL_174;
      }
    }
    if (v81 != v80)
    {
      for (uint64_t i = v81 + 56; i != v80; i += 56)
      {
        if ((sub_31B72C((uint64_t)buf, i) & 1) == 0)
        {
          long long v87 = *(_OWORD *)i;
          long long v88 = *(_OWORD *)(i + 16);
          long long v89 = *(_OWORD *)(i + 32);
          *(void *)(v81 + 48) = *(void *)(i + 48);
          *(_OWORD *)(v81 + 16) = v88;
          *(_OWORD *)(v81 + 32) = v89;
          *(_OWORD *)uint64_t v81 = v87;
          v81 += 56;
        }
      }
    }
  }
  if (v81 != v80)
  {
    uint64_t v80 = v81;
    *(void *)&long long v90 = v298;
    *((void *)&v90 + 1) = v81;
    long long v298 = v90;
  }
LABEL_174:
  if (v79 == v80)
  {
    char v97 = (os_log_t *)sub_32A48(13);
    uint64_t v98 = *v97;
    if (*v97)
    {
      if (os_log_type_enabled(*v97, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v311 = 136315394;
        *(void *)&v311[4] = "VirtualStream.cpp";
        *(_WORD *)&v311[12] = 1024;
        *(_DWORD *)&v311[14] = 1744;
        _os_log_impl(&def_1E50E8, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"No remaining stream formats after applying multi-channel culling policy\"", v311, 0x12u);
      }
    }
  }
  char v91 = buf[2];
  if (buf[2])
  {
    if ((void)v298 == *((void *)&v298 + 1))
    {
LABEL_186:
      uint64_t v95 = sub_32A48(22);
      if (*(unsigned char *)(v95 + 8))
      {
        unint64_t v96 = *(NSObject **)v95;
        if (*(void *)v95)
        {
          if (os_log_type_enabled(*(os_log_t *)v95, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v311 = 136315394;
            *(void *)&v311[4] = "VirtualStream.cpp";
            *(_WORD *)&v311[12] = 1024;
            *(_DWORD *)&v311[14] = 1762;
            _os_log_impl(&def_1E50E8, v96, OS_LOG_TYPE_DEBUG, "%25s:%-5d Skipped culling of stereo and mono LPCM stream formats", v311, 0x12u);
          }
        }
      }
    }
    else
    {
      long long v92 = (_DWORD *)v298;
      while (1)
      {
        BOOL v93 = v92[2] == 1819304813 && (v92[3] & 1) == 0;
        if (!v93 || v92[7] >= 3u) {
          break;
        }
        v92 += 14;
        if (v92 == *((_DWORD **)&v298 + 1)) {
          goto LABEL_186;
        }
      }
      uint64_t v99 = v298;
      while ((sub_31B9CC(v91, v99) & 1) == 0)
      {
        v99 += 56;
        if (v99 == *((void *)&v298 + 1)) {
          goto LABEL_209;
        }
      }
      if (v99 != *((void *)&v298 + 1))
      {
        for (uint64_t j = v99 + 56; j != *((void *)&v298 + 1); j += 56)
        {
          if ((sub_31B9CC(buf[2], j) & 1) == 0)
          {
            long long v103 = *(_OWORD *)j;
            long long v104 = *(_OWORD *)(j + 16);
            long long v105 = *(_OWORD *)(j + 32);
            *(void *)(v99 + 48) = *(void *)(j + 48);
            *(_OWORD *)(v99 + 16) = v104;
            *(_OWORD *)(v99 + 32) = v105;
            *(_OWORD *)uint64_t v99 = v103;
            v99 += 56;
          }
        }
      }
      if (v99 != *((void *)&v298 + 1))
      {
        *(void *)&long long v106 = v298;
        *((void *)&v106 + 1) = v99;
        long long v298 = v106;
      }
    }
  }
LABEL_209:
  if (v299[0])
  {
    v299[1] = v299[0];
    operator delete(v299[0]);
  }
  *(_OWORD *)v299 = v298;
  v300 = v77;
LABEL_212:
  if (!*(unsigned char *)(a1 + 408))
  {
    if (sub_163D84())
    {
      uint64_t v116 = (os_log_t *)sub_32A48(22);
      char v117 = *v116;
      if (*v116)
      {
        int v111 = 0;
        if (!os_log_type_enabled(*v116, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_247;
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 123;
        _os_log_impl(&def_1E50E8, v117, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Forcing use of 24-bit stream formats when available", buf, 0x12u);
      }
LABEL_245:
      int v111 = 0;
      goto LABEL_247;
    }
    uint64_t v118 = sub_298DA4();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v118 + 24))(v118) != 1752260981)
    {
LABEL_246:
      int v111 = 1;
      goto LABEL_247;
    }
    uint64_t v119 = (void *)(a1 + 112);
    while (1)
    {
      while (1)
      {
        uint64_t v119 = (void *)v119[1];
        if (v119 == (void *)(a1 + 112)) {
          goto LABEL_246;
        }
        uint64_t v120 = (std::__shared_weak_count *)v119[3];
        if (v120)
        {
          int v121 = std::__shared_weak_count::lock(v120);
          if (v121) {
            break;
          }
        }
      }
      uint64_t v122 = v121;
      uint64_t v123 = v119[2];
      if (v123 && (*(_WORD *)(v123 + 184) & 0x200) != 0)
      {
        std::string::size_type v125 = (os_log_t *)sub_32A48(22);
        uint64_t v126 = *v125;
        if (!*v125) {
          goto LABEL_243;
        }
        int v124 = 0;
        if (os_log_type_enabled(*v125, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 114;
          _os_log_impl(&def_1E50E8, v126, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Format culling policy is using kCullLessThan24Bit based on GetHighQualityPCMPreferenceState()", buf, 0x12u);
LABEL_243:
          int v124 = 0;
        }
      }
      else
      {
        int v124 = 1;
      }
      sub_4636C(v122);
      if (!v124) {
        goto LABEL_245;
      }
    }
  }
  uint64_t v107 = (os_log_t *)sub_32A48(22);
  uint64_t v108 = *v107;
  if (*v107 && os_log_type_enabled(*v107, OS_LOG_TYPE_DEFAULT))
  {
    if (!*(unsigned char *)(a1 + 408)) {
      goto LABEL_507;
    }
    char v109 = "kCullLessThan24Bit";
    int v110 = *(_DWORD *)(a1 + 404);
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_DWORD *)buf = 136315650;
    if (v110 == 1) {
      char v109 = "kCullGreaterThan16Bit";
    }
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 97;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v109;
    _os_log_impl(&def_1E50E8, v108, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Format culling policy is using %s based on mCullingPolicyOption", buf, 0x1Cu);
  }
  if (!*(unsigned char *)(a1 + 408)) {
LABEL_507:
  }
    sub_7F218();
  int v111 = *(_DWORD *)(a1 + 404);
  int v112 = sub_163D84();
  if (v111 == 1) {
    int v113 = v112;
  }
  else {
    int v113 = 0;
  }
  if (v113 == 1)
  {
    v114 = (os_log_t *)sub_32A48(22);
    uint64_t v115 = *v114;
    if (*v114 && os_log_type_enabled(*v114, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 99;
      _os_log_impl(&def_1E50E8, v115, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring preference to force 24-bit stream formats because 16-bit stream formats were specified in the routing database.", buf, 0x12u);
    }
    goto LABEL_246;
  }
LABEL_247:
  unint64_t v127 = (os_log_t *)sub_32A48(22);
  uint64_t v128 = *v127;
  if (*v127 && os_log_type_enabled(*v127, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v129 = "cull < 24-bit";
    uint64_t v130 = *(void *)(a1 + 96);
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)buf = 136316162;
    if (v111 == 1) {
      CFStringRef v129 = "cull > 16-bit";
    }
    *(_DWORD *)&buf[14] = 1163;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v129;
    *(_WORD *)&unsigned char buf[28] = 2048;
    *(void *)&buf[30] = a1;
    *(_WORD *)&buf[38] = 2048;
    *(void *)&uint8_t buf[40] = v130;
    _os_log_impl(&def_1E50E8, v128, OS_LOG_TYPE_DEFAULT, "%25s:%-5d culling policy is %s for virtual stream %p of aggregate device %p.", buf, 0x30u);
  }
  uint64_t v131 = (double *)v299[0];
  if (v299[1] != v299[0])
  {
    while (1)
    {
      if (v111 == 1)
      {
        if (*((_DWORD *)v131 + 8) <= 0x10u) {
          goto LABEL_299;
        }
        goto LABEL_258;
      }
      if (!v111) {
        break;
      }
      int v143 = (os_log_t *)sub_32A48(13);
      uint64_t v144 = *v143;
      if (*v143 && os_log_type_enabled(*v143, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 144;
        _os_log_impl(&def_1E50E8, v144, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unhandled case in switch\"", buf, 0x12u);
      }
LABEL_299:
      v131 += 7;
      uint64_t v142 = (double *)v299[1];
LABEL_300:
      if (v142 == v131) {
        goto LABEL_301;
      }
    }
    if (*((_DWORD *)v131 + 8) > 0x17u) {
      goto LABEL_299;
    }
LABEL_258:
    if (*((_DWORD *)v131 + 2) != 1819304813 || (*((_DWORD *)v131 + 3) & 1) != 0) {
      goto LABEL_299;
    }
    BOOL v133 = 0;
    uint64_t v134 = (double *)v299[0];
    while (1)
    {
      if (v134 == v299[1]) {
        goto LABEL_299;
      }
      if (v111 == 1) {
        break;
      }
      if (*((_DWORD *)v134 + 8) >= 0x18u && *((_DWORD *)v134 + 2) == 1819304813 && (*((_DWORD *)v134 + 3) & 1) == 0) {
        goto LABEL_276;
      }
LABEL_285:
      v134 += 7;
      if (v133)
      {
        uint64_t v138 = sub_32A48(22);
        if (*(unsigned char *)(v138 + 8))
        {
          char v139 = *(NSObject **)v138;
          if (*(void *)v138)
          {
            if (os_log_type_enabled(*(os_log_t *)v138, OS_LOG_TYPE_DEBUG))
            {
              sub_16BC04((std::string *)v311, (uint64_t)v131);
              id v140 = v311;
              if (v311[23] < 0) {
                id v140 = *(unsigned char **)v311;
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 212;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v140;
              _os_log_impl(&def_1E50E8, v139, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culled stream format: %s", buf, 0x1Cu);
              if ((v311[23] & 0x80000000) != 0) {
                operator delete(*(void **)v311);
              }
            }
          }
        }
        char v141 = (char *)((char *)v299[1] - (char *)(v131 + 7));
        if (v299[1] != v131 + 7) {
          memmove(v131, v131 + 7, (char *)v299[1] - (char *)(v131 + 7));
        }
        uint64_t v142 = (double *)&v141[(void)v131];
        v299[1] = &v141[(void)v131];
        goto LABEL_300;
      }
    }
    if (*((_DWORD *)v134 + 8) >= 0x11u) {
      goto LABEL_285;
    }
    if (*((_DWORD *)v134 + 2) != 1819304813 || (*((_DWORD *)v134 + 3) & 1) != 0) {
      goto LABEL_285;
    }
LABEL_276:
    BOOL v136 = v131[5] < v134[5] || v131[6] > v134[6];
    BOOL v133 = !v136 && *v131 == *v134 && *((_DWORD *)v131 + 7) == *((_DWORD *)v134 + 7);
    goto LABEL_285;
  }
LABEL_301:
  uint64_t v145 = *(void *)(a1 + 104);
  if (v145)
  {
    uint64_t v146 = (*(uint64_t (**)(uint64_t))(*(void *)v145 + 208))(v145);
    if ((v146 & 0xFF00000000) != 0)
    {
      uint64_t v147 = (os_log_t *)sub_32A48(22);
      uint64_t v148 = *v147;
      if (*v147)
      {
        if (os_log_type_enabled(*v147, OS_LOG_TYPE_DEFAULT))
        {
          sub_4F64((uint64_t)v311, (os_unfair_lock_t)(*(void *)(a1 + 104) + 8));
          uint64_t v149 = v311[23] >= 0 ? v311 : *(unsigned char **)v311;
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1174;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v149;
          _os_log_impl(&def_1E50E8, v148, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Applying sample rate culling policy to device %s", buf, 0x1Cu);
          if ((v311[23] & 0x80000000) != 0) {
            operator delete(*(void **)v311);
          }
        }
      }
    }
    sub_31A310((uint64_t *)v299, v146, *(void *)(a1 + 96));
  }
  uint64_t v150 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 536))(*(void *)(a1 + 96));
  if ((v150 & 0xFF00000000) != 0
    && (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 136))(*(void *)(a1 + 96)) == *(void *)(a1 + 104))
  {
    uint64_t v151 = (os_log_t *)sub_32A48(22);
    char v152 = *v151;
    if (*v151 && os_log_type_enabled(*v151, OS_LOG_TYPE_DEFAULT))
    {
      sub_4F64((uint64_t)v311, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
      int v153 = v311[23];
      uint64_t v154 = *(unsigned char **)v311;
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 104) + 8));
      uint64_t v155 = v311;
      if (v153 < 0) {
        uint64_t v155 = v154;
      }
      if (__p[23] >= 0) {
        char v156 = __p;
      }
      else {
        char v156 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1183;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v155;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&buf[30] = v156;
      _os_log_impl(&def_1E50E8, v152, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Applying aggregate device %s sample rate culling policy to device %s", buf, 0x26u);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if ((v311[23] & 0x80000000) != 0) {
        operator delete(*(void **)v311);
      }
    }
    sub_31A310((uint64_t *)v299, v150, *(void *)(a1 + 96));
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 96) + 152))(*(void *)(a1 + 96))
    && sub_31B098(a1)
    && *(unsigned char *)(a1 + 416))
  {
    if (*(_DWORD *)(a1 + 412) != 1)
    {
      v294 = (os_log_t *)sub_32A48(13);
      v295 = *v294;
      if (*v294 && os_log_type_enabled(*v294, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1043;
        _os_log_impl(&def_1E50E8, v295, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    id v157 = (double *)v299[0];
    if (v299[0] != v299[1])
    {
      while (1)
      {
        double v158 = fabs(*v157);
        if (v158 < 48000.0) {
          double v158 = 48000.0;
        }
        double v159 = v158 >= 1.0 ? v158 * 2.22044605e-16 : 2.22044605e-16;
        if (fabs(*v157 + -48000.0) <= v159) {
          break;
        }
        v157 += 7;
        if (v157 == v299[1]) {
          goto LABEL_343;
        }
      }
    }
    if (v157 == v299[1])
    {
LABEL_343:
      __n128 v163 = (os_log_t *)sub_32A48(22);
      v164 = *v163;
      if (*v163 && os_log_type_enabled(*v163, OS_LOG_TYPE_ERROR))
      {
        uint64_t v165 = *(void *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1058;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v165;
        _os_log_impl(&def_1E50E8, v164, OS_LOG_TYPE_ERROR, "%25s:%-5d Expanse preferred sample rate of 48KHz is unavailable for device %p - we may have errors!!", buf, 0x1Cu);
      }
    }
    else
    {
      int64_t v160 = (os_log_t *)sub_32A48(22);
      uint64_t v161 = *v160;
      if (*v160 && os_log_type_enabled(*v160, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v162 = *(void *)(a1 + 96);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1052;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v162;
        _os_log_impl(&def_1E50E8, v161, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Applying sample rate culling policy to device %p for expanse", buf, 0x1Cu);
      }
      sub_31A310((uint64_t *)v299, *(void *)(a1 + 412), *(void *)(a1 + 96));
    }
  }
  *(void *)(a1 + 216) = *(void *)(a1 + 208);
  *(void *)(a1 + 240) = *(void *)(a1 + 232);
  if (v299[1] != v299[0])
  {
    uint64_t v166 = 0;
    unsigned int v167 = 0;
    unint64_t v168 = 0x6DB6DB6DB6DB6DB7 * (((char *)v299[1] - (char *)v299[0]) >> 3);
    while (1)
    {
      unsigned __int8 v169 = (double *)v299[0];
      std::string v170 = (char *)v299[0] + 56 * v166;
      *(_OWORD *)buf = *(_OWORD *)v170;
      *(_OWORD *)&buf[16] = *((_OWORD *)v170 + 1);
      *(_OWORD *)&unsigned char buf[32] = *((_OWORD *)v170 + 2);
      double v314 = *((double *)v170 + 6);
      *(_OWORD *)v311 = *(_OWORD *)v170;
      *(_OWORD *)&v311[16] = *((_OWORD *)v170 + 1);
      *(void *)&v311[32] = *((void *)v170 + 4);
      if (*(_DWORD *)&buf[8] == 1819304813) {
        break;
      }
      if (*(int *)&buf[8] > 1836343850)
      {
        if (*(_DWORD *)&buf[8] == 1836344107) {
          goto LABEL_357;
        }
        int v173 = 1836343851;
      }
      else
      {
        if (*(_DWORD *)&buf[8] == 1667443507) {
          goto LABEL_357;
        }
        int v173 = 1667509043;
      }
      if (*(_DWORD *)&buf[8] == v173)
      {
LABEL_357:
        uint64_t v174 = *(void *)(a1 + 104);
        strcpy(__p, "rrapbolg");
        __p[9] = 0;
        *(_WORD *)&__p[10] = 0;
        uint64_t v175 = sub_99A40(v174);
        *((void *)&v178 + 1) = v176;
        *(void *)&long long v178 = v175;
        uint64_t v177 = v178 >> 32;
        if ((v177 & 0xFF00000000) == 0 || !v177 || (_os_feature_enabled_impl() & 1) == 0)
        {
          double v179 = *(double *)buf;
          double v180 = fabs(*(double *)buf);
          double v181 = 2.22044605e-16;
          if (v180 >= 1.0) {
            double v181 = v180 * 2.22044605e-16;
          }
          if (v180 <= v181) {
            double v179 = v314;
          }
          *(double *)buf = v179 * 0.0625;
          *(_DWORD *)&buf[28] *= 16;
          LODWORD(v182) = vshr_n_u32(*(uint32x2_t *)&buf[20], 4uLL).u32[0];
          HIDWORD(v182) = vshl_n_s32(*(int32x2_t *)(buf + 20), 4uLL).i32[1];
          *(void *)&buf[20] = v182;
          *(double *)&uint8_t buf[40] = v179 * 0.0625;
          double v314 = v179 * 0.0625;
        }
      }
LABEL_392:
      uint64_t v191 = sub_32A48(22);
      if (*(unsigned char *)(v191 + 8))
      {
        int v192 = *(NSObject **)v191;
        if (*(void *)v191)
        {
          if (os_log_type_enabled(*(os_log_t *)v191, OS_LOG_TYPE_DEBUG))
          {
            sub_259A4((std::string *)v305, (uint64_t)v311);
            int v193 = SBYTE3(v309);
            std::string v194 = *(unsigned char **)v305;
            sub_259A4(&v303, (uint64_t)buf);
            v195 = v305;
            if (v193 < 0) {
              v195 = v194;
            }
            __int16 v196 = &v303;
            if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v196 = (std::string *)v303.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)std::string __p = 136315906;
            *(void *)&__p[4] = "VirtualStream.cpp";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1365;
            *(_WORD *)&__p[18] = 2080;
            *(void *)&__p[20] = v195;
            *(_WORD *)&__p[28] = 2080;
            *(void *)&__p[30] = v196;
            _os_log_impl(&def_1E50E8, v192, OS_LOG_TYPE_DEBUG, "%25s:%-5d Virtualized format %s to %s", __p, 0x26u);
            if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v303.__r_.__value_.__l.__data_);
            }
            if (SBYTE3(v309) < 0) {
              operator delete(*(void **)v305);
            }
          }
        }
      }
      uint64_t v197 = *(void *)(a1 + 232);
      uint64_t v198 = *(void *)(a1 + 240) - v197;
      if (!v198) {
        goto LABEL_410;
      }
      unint64_t v199 = 0;
      int v200 = 0;
      unint64_t v201 = 0x6DB6DB6DB6DB6DB7 * (v198 >> 3);
      do
      {
        int v202 = sub_ED3E0((uint64_t)buf, v197 + 56 * v199);
        unint64_t v199 = v200 + (v202 ^ 1u);
        if (v202) {
          break;
        }
        v200 += v202 ^ 1;
      }
      while (v201 > v199);
      if (v202)
      {
        uint64_t v203 = *(void *)(a1 + 208);
        v204 = operator new(0x38uLL);
        v205 = (long long *)(v203 + 56 * v199);
        long long v206 = *v205;
        long long v207 = v205[1];
        long long v208 = v205[2];
        v204[6] = *((void *)v205 + 6);
        *((_OWORD *)v204 + 1) = v207;
        *((_OWORD *)v204 + 2) = v208;
        *(_OWORD *)v204 = v206;
        v209 = (char *)sub_1927E0(2uLL);
        long long v210 = *(_OWORD *)v170;
        long long v211 = *((_OWORD *)v170 + 1);
        long long v212 = *((_OWORD *)v170 + 2);
        *((void *)v209 + 13) = *((void *)v170 + 6);
        *(_OWORD *)(v209 + 88) = v212;
        *(_OWORD *)(v209 + 72) = v211;
        *(_OWORD *)(v209 + 56) = v210;
        long long v213 = *(_OWORD *)v204;
        long long v214 = *((_OWORD *)v204 + 1);
        long long v215 = *((_OWORD *)v204 + 2);
        *((void *)v209 + 6) = v204[6];
        *((_OWORD *)v209 + 1) = v214;
        *((_OWORD *)v209 + 2) = v215;
        *(_OWORD *)v209 = v213;
        operator delete(v204);
        sub_31FB10((uint64_t)v311, (uint64_t)v209, (uint64_t)(v209 + 112), (uint64_t)buf);
        uint64_t v216 = *(void *)(a1 + 208) + 56 * v199;
        *(_OWORD *)uint64_t v216 = *(_OWORD *)v311;
        *(_OWORD *)(v216 + 16) = *(_OWORD *)&v311[16];
        *(_OWORD *)(v216 + 32) = *(_OWORD *)&v311[32];
        *(void *)(v216 + 48) = v312;
        if (v209) {
          operator delete(v209);
        }
      }
      else
      {
LABEL_410:
        unint64_t v217 = *(void *)(a1 + 216);
        unint64_t v218 = *(void *)(a1 + 224);
        if (v217 >= v218)
        {
          uint64_t v223 = *(void *)(a1 + 208);
          uint64_t v224 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v217 - v223) >> 3);
          unint64_t v225 = v224 + 1;
          if ((unint64_t)(v224 + 1) > 0x492492492492492) {
            goto LABEL_498;
          }
          unint64_t v226 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v218 - v223) >> 3);
          if (2 * v226 > v225) {
            unint64_t v225 = 2 * v226;
          }
          if (v226 >= 0x249249249249249) {
            unint64_t v227 = 0x492492492492492;
          }
          else {
            unint64_t v227 = v225;
          }
          if (v227) {
            unint64_t v227 = (unint64_t)sub_1927E0(v227);
          }
          else {
            uint64_t v228 = 0;
          }
          unint64_t v229 = v227 + 56 * v224;
          long long v230 = *(_OWORD *)v170;
          long long v231 = *((_OWORD *)v170 + 1);
          long long v232 = *((_OWORD *)v170 + 2);
          *(void *)(v229 + 48) = *((void *)v170 + 6);
          *(_OWORD *)(v229 + 16) = v231;
          *(_OWORD *)(v229 + 32) = v232;
          *(_OWORD *)unint64_t v229 = v230;
          v234 = *(char **)(a1 + 208);
          v233 = *(char **)(a1 + 216);
          unint64_t v235 = v229;
          if (v233 != v234)
          {
            do
            {
              long long v236 = *(_OWORD *)(v233 - 56);
              long long v237 = *(_OWORD *)(v233 - 40);
              long long v238 = *(_OWORD *)(v233 - 24);
              *(void *)(v235 - 8) = *((void *)v233 - 1);
              *(_OWORD *)(v235 - 24) = v238;
              *(_OWORD *)(v235 - 40) = v237;
              *(_OWORD *)(v235 - 56) = v236;
              v235 -= 56;
              v233 -= 56;
            }
            while (v233 != v234);
            v233 = *(char **)(a1 + 208);
          }
          unint64_t v222 = v229 + 56;
          *(void *)(a1 + 208) = v235;
          *(void *)(a1 + 216) = v229 + 56;
          *(void *)(a1 + 224) = v227 + 56 * v228;
          if (v233) {
            operator delete(v233);
          }
        }
        else
        {
          long long v219 = *(_OWORD *)v170;
          long long v220 = *((_OWORD *)v170 + 1);
          long long v221 = *((_OWORD *)v170 + 2);
          *(void *)(v217 + 48) = *((void *)v170 + 6);
          *(_OWORD *)(v217 + 16) = v220;
          *(_OWORD *)(v217 + 32) = v221;
          *(_OWORD *)unint64_t v217 = v219;
          unint64_t v222 = v217 + 56;
        }
        *(void *)(a1 + 216) = v222;
        unint64_t v239 = *(void *)(a1 + 240);
        unint64_t v240 = *(void *)(a1 + 248);
        if (v239 >= v240)
        {
          uint64_t v242 = *(void *)(a1 + 232);
          uint64_t v243 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v239 - v242) >> 3);
          unint64_t v244 = v243 + 1;
          if ((unint64_t)(v243 + 1) > 0x492492492492492) {
LABEL_498:
          }
            sub_60548();
          unint64_t v245 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v240 - v242) >> 3);
          if (2 * v245 > v244) {
            unint64_t v244 = 2 * v245;
          }
          if (v245 >= 0x249249249249249) {
            unint64_t v246 = 0x492492492492492;
          }
          else {
            unint64_t v246 = v244;
          }
          if (v246) {
            unint64_t v246 = (unint64_t)sub_1927E0(v246);
          }
          else {
            uint64_t v247 = 0;
          }
          unint64_t v248 = v246 + 56 * v243;
          *(_OWORD *)unint64_t v248 = *(_OWORD *)buf;
          *(_OWORD *)(v248 + 16) = *(_OWORD *)&buf[16];
          *(_OWORD *)(v248 + 32) = *(_OWORD *)&buf[32];
          *(double *)(v248 + 48) = v314;
          v250 = *(char **)(a1 + 232);
          v249 = *(char **)(a1 + 240);
          unint64_t v251 = v248;
          if (v249 != v250)
          {
            do
            {
              long long v252 = *(_OWORD *)(v249 - 56);
              long long v253 = *(_OWORD *)(v249 - 40);
              long long v254 = *(_OWORD *)(v249 - 24);
              *(void *)(v251 - 8) = *((void *)v249 - 1);
              *(_OWORD *)(v251 - 24) = v254;
              *(_OWORD *)(v251 - 40) = v253;
              *(_OWORD *)(v251 - 56) = v252;
              v251 -= 56;
              v249 -= 56;
            }
            while (v249 != v250);
            v249 = *(char **)(a1 + 232);
          }
          unint64_t v241 = v248 + 56;
          *(void *)(a1 + 232) = v251;
          *(void *)(a1 + 240) = v248 + 56;
          *(void *)(a1 + 248) = v246 + 56 * v247;
          if (v249) {
            operator delete(v249);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v239 = *(_OWORD *)buf;
          *(_OWORD *)(v239 + 16) = *(_OWORD *)&buf[16];
          *(_OWORD *)(v239 + 32) = *(_OWORD *)&buf[32];
          *(double *)(v239 + 48) = v314;
          unint64_t v241 = v239 + 56;
        }
        *(void *)(a1 + 240) = v241;
      }
      uint64_t v166 = ++v167;
      if (v168 <= v167) {
        goto LABEL_444;
      }
    }
    int data = *(_DWORD *)(a1 + 188);
    if (data)
    {
      char v172 = 1;
    }
    else
    {
      int data = *(_DWORD *)&buf[28];
      if (v299[0] == v299[1])
      {
LABEL_369:
        char v172 = 0;
      }
      else
      {
        while (*((_DWORD *)v169 + 7) != *(_DWORD *)(a1 + 184) || *v169 != *(double *)buf)
        {
          v169 += 7;
          if (v169 == v299[1]) {
            goto LABEL_369;
          }
        }
        char v172 = 1;
        int data = *(_DWORD *)(a1 + 184);
      }
    }
    if (*(unsigned char *)(*(void *)(a1 + 136) + 448))
    {
      char v183 = BYTE12(xmmword_658CD8);
      if (v172) {
        goto LABEL_389;
      }
      if ((sub_31B098(a1) & 1) == 0 && sub_4F900(*(void *)(a1 + 136))) {
        int data = sub_1AAA6C(*(void *)(a1 + 136));
      }
      if (sub_31B098(a1)
        && (*(unsigned int (**)(void))(**(void **)(a1 + 136) + 80))(*(void *)(a1 + 136))
        && sub_1B89C8(*(void *)(a1 + 136)))
      {
        uint64_t v184 = *(void *)(a1 + 136);
        if (!sub_1B89C8(v184))
        {
          uint64_t v286 = sub_32A48(13);
          v287 = sub_7D5E8(1, *(void **)v286, *(void *)(v286 + 8));
          v288 = v287;
          if (v287 && os_log_type_enabled(v287, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "DSPChain.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1553;
            _os_log_impl(&def_1E50E8, v288, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
          }

          v289 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v289, "Precondition failure.");
        }
        *(void *)v305 = v184 + 48;
        v305[8] = 1;
        sub_39ECC(v184 + 48);
        LODWORD(v303.__r_.__value_.__l.__data_) = 0;
        uint64_t v186 = *(void *)(v184 + 24);
        uint64_t v185 = *(void *)(v184 + 32);
        if (v186 == v185) {
          goto LABEL_503;
        }
        while (1)
        {
          char v304 = 0;
          int v187 = (*(uint64_t (**)(void, uint64_t, void, char *))(**(void **)(v186 + 8) + 248))(*(void *)(v186 + 8), 1, 0, &v304);
          if (v187)
          {
            v279 = *(id *)sub_32A48(13);
            v280 = v279;
            if (v279 && os_log_type_enabled(v279, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "DSPChain.mm";
              *(_WORD *)&__p[12] = 1024;
              *(_DWORD *)&__p[14] = 1562;
              _os_log_impl(&def_1E50E8, v280, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (stat) [error stat is an error]: \"Unexpected error from HasStaticChannelCountForBus\"", __p, 0x12u);
            }

            v281 = __cxa_allocate_exception(0x10uLL);
            *(void *)v281 = &off_6414D8;
            v281[2] = v187;
          }
          if (v304) {
            break;
          }
          v186 += 24;
          if (v186 == v185)
          {
            uint64_t v186 = v185;
            break;
          }
        }
        if (v186 == *(void *)(v184 + 32))
        {
LABEL_503:
          uint64_t v282 = sub_32A48(13);
          v283 = sub_7D5E8(1, *(void **)v282, *(void *)(v282 + 8));
          v284 = v283;
          if (v283 && os_log_type_enabled(v283, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "DSPChain.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1566;
            _os_log_impl(&def_1E50E8, v284, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
          }

          v285 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v285, "Precondition failure.");
        }
        int v188 = (*(uint64_t (**)(void, uint64_t, void, std::string *))(**(void **)(v186 + 8) + 256))(*(void *)(v186 + 8), 1, 0, &v303);
        if (v188)
        {
          uint64_t v290 = sub_32A48(13);
          v291 = sub_7D5E8(1, *(void **)v290, *(void *)(v290 + 8));
          v292 = v291;
          if (v291 && os_log_type_enabled(v291, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "DSPChain.mm";
            *(_WORD *)&__p[12] = 1024;
            *(_DWORD *)&__p[14] = 1568;
            _os_log_impl(&def_1E50E8, v292, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (stat) [error stat is an error]: \"Unexpected error from GetChannelCountForBus\"", __p, 0x12u);
          }

          v293 = __cxa_allocate_exception(0x10uLL);
          *(void *)v293 = &off_6414D8;
          v293[2] = v188;
        }
        int data = (int)v303.__r_.__value_.__l.__data_;
        sub_3A3E8((uint64_t)v305);
        if ((v183 & 0x20) != 0) {
          goto LABEL_388;
        }
      }
      else
      {
LABEL_389:
        if ((v183 & 0x20) != 0)
        {
LABEL_388:
          int v189 = 4;
          int v190 = 41;
LABEL_391:
          *(_DWORD *)&buf[8] = 1819304813;
          *(_DWORD *)&unsigned char buf[12] = v190;
          *(_DWORD *)&buf[16] = v189;
          *(_DWORD *)&buf[20] = 1;
          *(_DWORD *)&uint8_t buf[24] = v189;
          *(_DWORD *)&unsigned char buf[28] = data;
          *(void *)&unsigned char buf[32] = 32;
          goto LABEL_392;
        }
      }
    }
    int v189 = 4 * data;
    int v190 = 9;
    goto LABEL_391;
  }
LABEL_444:
  v255 = (os_log_t *)sub_32A48(22);
  v256 = *v255;
  if (*v255 && os_log_type_enabled(*v255, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v257 = *(void *)(a1 + 96);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1238;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = a1;
    *(_WORD *)&unsigned char buf[28] = 2048;
    *(void *)&buf[30] = v257;
    _os_log_impl(&def_1E50E8, v256, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Virtualized-to-physical format mappings for virtual stream %p of aggregate device %p:", buf, 0x26u);
  }
  if (*(void *)(a1 + 216) != *(void *)(a1 + 208))
  {
    uint64_t v258 = 0;
    unsigned int v259 = 1;
    do
    {
      v260 = (os_log_t *)sub_32A48(22);
      v261 = *v260;
      if (*v260 && os_log_type_enabled(*v260, OS_LOG_TYPE_DEFAULT))
      {
        sub_16BC04((std::string *)v311, *(void *)(a1 + 232) + 56 * v258);
        v262 = v311;
        if (v311[23] < 0) {
          v262 = *(unsigned char **)v311;
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1242;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v259 - 1;
        *(_WORD *)&uint8_t buf[24] = 2080;
        *(void *)&buf[26] = v262;
        _os_log_impl(&def_1E50E8, v261, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   %uv: %s", buf, 0x22u);
        if ((v311[23] & 0x80000000) != 0) {
          operator delete(*(void **)v311);
        }
      }
      v263 = (os_log_t *)sub_32A48(22);
      v264 = *v263;
      if (*v263 && os_log_type_enabled(*v263, OS_LOG_TYPE_DEFAULT))
      {
        sub_16BC04((std::string *)v311, *(void *)(a1 + 208) + 56 * v258);
        v265 = v311;
        if (v311[23] < 0) {
          v265 = *(unsigned char **)v311;
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1244;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v259 - 1;
        *(_WORD *)&uint8_t buf[24] = 2080;
        *(void *)&buf[26] = v265;
        _os_log_impl(&def_1E50E8, v264, OS_LOG_TYPE_DEFAULT, "%25s:%-5d   %ua: %s", buf, 0x22u);
        if ((v311[23] & 0x80000000) != 0) {
          operator delete(*(void **)v311);
        }
      }
      uint64_t v258 = v259;
      BOOL v136 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3) > (unint64_t)v259++;
    }
    while (v136);
  }
  uint64_t v10 = sub_31A740((uint64_t *)a1, (uint64_t)buf);
  if (v10)
  {
    v266 = (os_log_t *)sub_32A48(22);
    v267 = *v266;
    if (!*v266 || !os_log_type_enabled(*v266, OS_LOG_TYPE_ERROR)) {
      goto LABEL_494;
    }
    sub_2417C(__p, v10);
    v268 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)v311 = 136315650;
    *(void *)&v311[4] = "VirtualStream.cpp";
    *(_WORD *)&v311[12] = 1024;
    *(_DWORD *)&v311[14] = 1253;
    *(_WORD *)&v311[18] = 2080;
    *(void *)&v311[20] = v268;
    _os_log_impl(&def_1E50E8, v267, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' ensuring valid physical stream format", v311, 0x1Cu);
    if ((__p[23] & 0x80000000) == 0) {
      goto LABEL_494;
    }
    uint64_t v18 = *(void **)__p;
    goto LABEL_493;
  }
  uint64_t v10 = sub_50A2C(a1, (uint64_t)buf, (uint64_t)v311);
  if (v10)
  {
    v269 = (os_log_t *)sub_32A48(22);
    v270 = *v269;
    if (*v269 && os_log_type_enabled(*v269, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v305, v10);
      int v271 = SBYTE3(v309);
      v272 = *(unsigned char **)v305;
      sub_259A4(&v303, (uint64_t)buf);
      v273 = v305;
      if (v271 < 0) {
        v273 = v272;
      }
      if ((v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v274 = &v303;
      }
      else {
        v274 = (std::string *)v303.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "VirtualStream.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 1263;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v273;
      *(_WORD *)&__p[28] = 2080;
      *(void *)&__p[30] = v274;
      _os_log_impl(&def_1E50E8, v270, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' getting client format for physical format %s", __p, 0x26u);
      if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v303.__r_.__value_.__l.__data_);
      }
      if (SBYTE3(v309) < 0)
      {
        uint64_t v18 = *(void **)v305;
        goto LABEL_493;
      }
    }
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    *(_OWORD *)&__p[16] = *(_OWORD *)&buf[16];
    *(void *)&__p[32] = *(void *)&buf[32];
    if (*(_DWORD *)&buf[8] == 1819304813 && (__p[12] & 0x40) == 0)
    {
      *(_DWORD *)&__p[12] = 9;
      *(_DWORD *)&__p[16] = 4 * *(_DWORD *)&__p[28];
      *(_DWORD *)&__p[20] = 1;
      *(_DWORD *)&__p[24] = 4 * *(_DWORD *)&__p[28];
      *(_DWORD *)&__p[32] = 32;
    }
    uint64_t v10 = sub_31ABD4(a1, (uint64_t)__p, (long long *)v311);
    if (v10)
    {
      v275 = (os_log_t *)sub_32A48(22);
      v276 = *v275;
      if (*v275)
      {
        if (os_log_type_enabled(*v275, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(&v303, v10);
          v277 = (v303.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v303
               : (std::string *)v303.__r_.__value_.__r.__words[0];
          *(_DWORD *)v305 = 136315650;
          *(void *)&v305[4] = "VirtualStream.cpp";
          __int16 v306 = 1024;
          int v307 = 1274;
          __int16 v308 = 2080;
          v309 = v277;
          _os_log_impl(&def_1E50E8, v276, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' configuring the DSP chain", v305, 0x1Cu);
          if (SHIBYTE(v303.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v18 = (void *)v303.__r_.__value_.__r.__words[0];
            goto LABEL_493;
          }
        }
      }
    }
  }
LABEL_494:
  if (v299[0])
  {
    v299[1] = v299[0];
    operator delete(v299[0]);
  }
  sub_C7D4(&v301);
  return v10;
}

void sub_31A08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (__p) {
    operator delete(__p);
  }
  sub_C7D4(&a16);
  _Unwind_Resume(a1);
}

BOOL sub_31A248(uint64_t *a1)
{
  unsigned int v1 = a1 + 14;
  int v2 = (uint64_t *)a1[15];
  if (v2 == a1 + 14) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = (std::__shared_weak_count *)v2[3];
    if (!v4) {
      goto LABEL_8;
    }
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (!v5) {
      goto LABEL_8;
    }
    uint64_t v6 = v2[2];
    if (!v6)
    {
      sub_4636C(v5);
      goto LABEL_8;
    }
    int v7 = *(_DWORD *)(v6 + 144);
    sub_4636C(v5);
    if (v7 == 1885889645) {
      break;
    }
LABEL_8:
    int v2 = (uint64_t *)v2[1];
    if (v2 == v1) {
      return 0;
    }
  }
  uint64_t v9 = sub_99A40(a1[13]);
  *((void *)&v12 + 1) = v10;
  *(void *)&long long v12 = v9;
  uint64_t v11 = v12 >> 32;
  return (v11 & 0xFF00000000) != 0 && v11 != 0;
}

void sub_31A310(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0xFF00000000) == 0) {
    return;
  }
  int v4 = a2;
  uint64_t v6 = (os_log_t *)sub_32A48(22);
  int v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    sub_31B128(&__p, *a1, a1[1]);
    uint64_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    uint64_t v29 = "VirtualStream.cpp";
    __int16 v30 = 1024;
    int v31 = 278;
    __int16 v32 = 2080;
    uint64_t v33 = v8;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Format list before culling: %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      double v9 = 48000.0;
    }
    else
    {
      if (v4)
      {
        uint64_t v17 = (os_log_t *)sub_32A48(22);
        uint64_t v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          uint64_t v29 = "VirtualStream.cpp";
          __int16 v30 = 1024;
          int v31 = 294;
          __int16 v32 = 1024;
          LODWORD(v33) = v4;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unexpected sample rate policy value %d", buf, 0x18u);
        }
        goto LABEL_15;
      }
      double v9 = 16000.0;
    }
    sub_31B240(a1, v9);
    goto LABEL_15;
  }
  if (!a3)
  {
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    long long v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v29 = "VirtualStream.cpp";
      __int16 v30 = 1024;
      int v31 = 290;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inAggregateDevice is NULL]: \"AggregateDevice was not specified for kCullNonMatching sample rate culling policy.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "AggregateDevice was not specified for kCullNonMatching sample rate culling policy.");
  }
  (*(void (**)(uint64_t))(*(void *)a3 + 104))(a3);
  uint64_t v15 = *a1;
  uint64_t v14 = a1[1];
  while (1)
  {
    if (v15 == v14) {
      goto LABEL_15;
    }
    if (*(double *)v15 == 0.0) {
      break;
    }
    if (*(double *)v15 == v13) {
      goto LABEL_37;
    }
LABEL_33:
    v15 += 56;
  }
  if (*(double *)(v15 + 40) < v13 || *(double *)(v15 + 48) > v13) {
    goto LABEL_33;
  }
LABEL_37:
  if (v15 == v14) {
    goto LABEL_50;
  }
  uint64_t v19 = v15 + 56;
  if (v15 + 56 == v14) {
    goto LABEL_50;
  }
  while (2)
  {
    if (*(double *)v19 != 0.0)
    {
      if (*(double *)v19 == v13) {
        goto LABEL_46;
      }
LABEL_45:
      long long v21 = *(_OWORD *)v19;
      long long v22 = *(_OWORD *)(v19 + 16);
      long long v23 = *(_OWORD *)(v19 + 32);
      *(void *)(v15 + 48) = *(void *)(v19 + 48);
      *(_OWORD *)(v15 + 16) = v22;
      *(_OWORD *)(v15 + 32) = v23;
      *(_OWORD *)uint64_t v15 = v21;
      v15 += 56;
      goto LABEL_46;
    }
    if (*(double *)(v19 + 40) < v13 || *(double *)(v19 + 48) > v13) {
      goto LABEL_45;
    }
LABEL_46:
    v19 += 56;
    if (v19 != v14) {
      continue;
    }
    break;
  }
  uint64_t v14 = a1[1];
LABEL_50:
  if (v15 != v14) {
    a1[1] = v15;
  }
LABEL_15:
  uint64_t v10 = (os_log_t *)sub_32A48(22);
  uint64_t v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
  {
    sub_31B128(&__p, *a1, a1[1]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    uint64_t v29 = "VirtualStream.cpp";
    __int16 v30 = 1024;
    int v31 = 297;
    __int16 v32 = 2080;
    uint64_t v33 = p_p;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Format list after culling: %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_31A724(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_31A740(uint64_t *a1, uint64_t a2)
{
  int v4 = a1 + 10;
  sub_4188((uint64_t *)buf, a1 + 10, "", 1447);
  uint64_t v5 = *(void *)buf;
  uint64_t v6 = a1[17];
  if (v6 && ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 176))(v6) & 1) != 0) {
    uint64_t v7 = 1936092532;
  }
  else {
    uint64_t v7 = 1885762592;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v5 + 120))(v5, &v51, v7);
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v8)
  {
    uint64_t v10 = a1[26];
    uint64_t v9 = a1[27];
    uint64_t v11 = v9;
    if (v10 != v9)
    {
      uint64_t v44 = a2;
      double v12 = *(double *)&v51;
      int v13 = DWORD2(v51);
      int v14 = v52;
      int v15 = DWORD1(v52);
      int v17 = DWORD2(v52);
      int v16 = HIDWORD(v52);
      uint64_t v11 = a1[26];
      int v18 = v53;
      while (1)
      {
        if (*(double *)v11 == 0.0 || (v12 != 0.0 ? (BOOL v19 = *(double *)v11 == v12) : (BOOL v19 = 1), v19))
        {
          int v20 = *(_DWORD *)(v11 + 8);
          BOOL v21 = !v20 || v13 == 0;
          if (v21 || v20 == v13)
          {
            int v23 = *(_DWORD *)(v11 + 16);
            BOOL v24 = !v23 || v14 == 0;
            if (v24 || v23 == v14)
            {
              int v26 = *(_DWORD *)(v11 + 20);
              if (!v26 || !v15 || v26 == v15)
              {
                int v27 = *(_DWORD *)(v11 + 24);
                if (!v27 || !v17 || v27 == v17)
                {
                  int v28 = *(_DWORD *)(v11 + 28);
                  if (!v28 || !v16 || v28 == v16)
                  {
                    int v29 = *(_DWORD *)(v11 + 32);
                    if (!v29 || !v18 || v29 == v18)
                    {
                      int v43 = v18;
                      int v30 = sub_EBDC(v11, (uint64_t)&v51);
                      int v18 = v43;
                      if (v30)
                      {
                        if (*(double *)(v11 + 40) <= v12 && *(double *)(v11 + 48) >= v12) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v11 += 56;
        if (v11 == v9)
        {
          uint64_t v11 = v9;
          break;
        }
      }
      a2 = v44;
    }
    if (v9 == v11)
    {
      uint64_t v50 = 0;
      long long v48 = 0u;
      long long v49 = 0u;
      sub_320180((uint64_t)&v48, v10, v9, (uint64_t *)&v51);
      int v31 = (os_log_t *)sub_32A48(22);
      __int16 v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = &v47;
        sub_259A4(&v47, (uint64_t)&v51);
        if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v33 = (std::string *)v47.__r_.__value_.__r.__words[0];
        }
        sub_31B128(&v46, a1[26], a1[27]);
        int v34 = SHIBYTE(v46.__r_.__value_.__r.__words[2]);
        std::string::size_type v35 = v46.__r_.__value_.__r.__words[0];
        sub_259A4(&__p, (uint64_t)&v48);
        uint64_t v36 = &v46;
        if (v34 < 0) {
          uint64_t v36 = (std::string *)v35;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1461;
        __int16 v55 = 2080;
        char v56 = v33;
        __int16 v57 = 2080;
        uint64_t v58 = v36;
        __int16 v59 = 2080;
        BOOL v60 = p_p;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [POTENTIAL_VA_RACE] Physical stream format list does not contain current physical stream format: %s. Current physical stream formats: %s. Setting closest matching physical format in physical stream format list:     %s", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v46.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v47.__r_.__value_.__l.__data_);
        }
      }
      long long v51 = v48;
      long long v52 = v49;
      uint64_t v53 = v50;
      sub_4188((uint64_t *)buf, v4, "", 1466);
      uint64_t v38 = *(void *)buf;
      uint64_t v39 = a1[17];
      if (v39 && ((*(uint64_t (**)(uint64_t))(*(void *)v39 + 176))(v39) & 1) != 0) {
        uint64_t v40 = 1936092532;
      }
      else {
        uint64_t v40 = 1885762592;
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, uint64_t))(*(void *)v38 + 152))(v38, &v51, v40);
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (a2 && !v8)
    {
      long long v41 = v52;
      *(_OWORD *)a2 = v51;
      *(_OWORD *)(a2 + 16) = v41;
      *(void *)(a2 + 32) = v53;
    }
  }
  return v8;
}

void sub_31AB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31ABD4(uint64_t a1, uint64_t a2, long long *a3)
{
  if (*((_DWORD *)a3 + 2) != 1819304813 || *(_DWORD *)(a2 + 8) != 1819304813) {
    return 0;
  }
  double v7 = (double)sub_31AE40(a1) / *(double *)a2;
  char v8 = sub_31B098(a1);
  uint64_t v9 = *(void *)(a1 + 136);
  if (v8)
  {
    long long v10 = a3[1];
    v27[0] = *a3;
    v27[1] = v10;
    uint64_t v28 = *((void *)a3 + 4);
    uint64_t v11 = operator new(0x28uLL);
    __int16 v32 = v11 + 5;
    uint64_t v33 = (char *)(v11 + 5);
    v11[4] = *((void *)a3 + 4);
    long long v12 = a3[1];
    *(_OWORD *)uint64_t v11 = *a3;
    *((_OWORD *)v11 + 1) = v12;
    int v31 = v11;
    long long v13 = *(_OWORD *)(a2 + 16);
    v25[0] = *(_OWORD *)a2;
    v25[1] = v13;
    uint64_t v26 = *(void *)(a2 + 32);
    int v14 = (*(uint64_t (**)(uint64_t, _OWORD *, void **, _OWORD *, double))(*(void *)v9 + 136))(v9, v27, &v31, v25, v7);
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_OWORD *)&buf[16] = v15;
    uint64_t v35 = *(void *)(a2 + 32);
    int v16 = operator new(0x28uLL);
    __int16 v32 = v16 + 5;
    uint64_t v33 = (char *)(v16 + 5);
    uint64_t v17 = *((void *)a3 + 4);
    v16[4] = v17;
    long long v19 = *a3;
    long long v18 = a3[1];
    *(_OWORD *)int v16 = *a3;
    *((_OWORD *)v16 + 1) = v18;
    int v31 = v16;
    v29[0] = v19;
    v29[1] = v18;
    uint64_t v30 = v17;
    int v14 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, _OWORD *, double))(*(void *)v9 + 136))(v9, buf, &v31, v29, v7);
  }
  int v20 = v14;
  if (v31)
  {
    __int16 v32 = v31;
    operator delete(v31);
  }
  if (!v20) {
    return 0;
  }
  BOOL v21 = (os_log_t *)sub_32A48(22);
  uint64_t v22 = 2003329396;
  int v23 = *v21;
  if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1501;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v20;
    _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting the DSP chain format", buf, 0x18u);
  }
  return v22;
}

void sub_31AE14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(void *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31AE40(uint64_t a1)
{
  int v10 = 4;
  unsigned int v11 = 0;
  if (*(void *)(a1 + 104))
  {
    if (sub_31B098(a1)) {
      int v2 = 1869968496;
    }
    else {
      int v2 = 1768845428;
    }
    v9[0] = 1819569763;
    v9[1] = v2;
    v9[2] = 0;
    if ((*(unsigned int (**)(void, _DWORD *))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104), v9))
    {
      (*(void (**)(void, _DWORD *, void, void, int *, unsigned int *))(**(void **)(a1 + 104) + 40))(*(void *)(a1 + 104), v9, 0, 0, &v10, &v11);
    }
    else
    {
      int v4 = (os_log_t *)sub_32A48(22);
      uint64_t v5 = *v4;
      if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
      {
        int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 120))(*(void *)(a1 + 104));
        (*(void (**)(void *__return_ptr))(**(void **)(a1 + 104) + 128))(v8);
        *(_DWORD *)buf = 136315906;
        long long v13 = "VirtualStream.cpp";
        __int16 v14 = 1024;
        int v15 = 786;
        __int16 v16 = 1024;
        int v17 = v6;
        __int16 v18 = 2112;
        uint64_t v19 = v8[0];
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_INFO, "%25s:%-5d PhysicalDevice ID %u (uid \"%@\"), does not support kAudioDevicePropertyLatency", buf, 0x22u);
        sub_72924((uint64_t)v8);
      }
    }
  }
  else
  {
    if (sub_31B098(a1)) {
      unsigned int v3 = 1869968496;
    }
    else {
      unsigned int v3 = 1768845428;
    }
    *(_DWORD *)buf = 1752657012;
    long long v13 = (const char *)v3;
    (*(void (**)(void, uint8_t *, void, void, int *, unsigned int *))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), buf, 0, 0, &v10, &v11);
  }
  return v11;
}

uint64_t sub_31B098(uint64_t a1)
{
  sub_4188(&v3, (uint64_t *)(a1 + 80), "", 687);
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 88))(v3);
  if (v4) {
    sub_4636C(v4);
  }
  return v1;
}

void sub_31B110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_31B128(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_16BC04(&__p, a2);
      int v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a2 += 56;
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_31B204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_31B240(uint64_t *result, double a2)
{
  uint64_t v3 = *result;
  int v2 = (long long *)result[1];
  if ((long long *)*result != v2)
  {
    do
    {
      if (*(double *)v3 == 0.0)
      {
        if (*(double *)(v3 + 40) >= a2 && *(double *)(v3 + 48) <= a2)
        {
LABEL_11:
          if ((long long *)v3 == v2 || (uint64_t v5 = (long long *)(v3 + 56), (long long *)(v3 + 56) == v2))
          {
LABEL_25:
            if ((long long *)v3 != v2) {
              result[1] = v3;
            }
            return result;
          }
          while (2)
          {
            if (*(double *)v5 == 0.0)
            {
              if (*((double *)v5 + 5) >= a2 && *((double *)v5 + 6) <= a2)
              {
LABEL_23:
                uint64_t v5 = (long long *)((char *)v5 + 56);
                if (v5 == v2)
                {
                  int v2 = (long long *)result[1];
                  goto LABEL_25;
                }
                continue;
              }
            }
            else if (*(double *)v5 < a2)
            {
              goto LABEL_23;
            }
            break;
          }
          long long v7 = *v5;
          long long v8 = v5[1];
          long long v9 = v5[2];
          *(void *)(v3 + 48) = *((void *)v5 + 6);
          *(_OWORD *)(v3 + 16) = v8;
          *(_OWORD *)(v3 + 32) = v9;
          *(_OWORD *)uint64_t v3 = v7;
          v3 += 56;
          goto LABEL_23;
        }
      }
      else if (*(double *)v3 < a2)
      {
        goto LABEL_11;
      }
      v3 += 56;
    }
    while ((long long *)v3 != v2);
  }
  return result;
}

void sub_31B340(std::string *a1, uint64_t a2)
{
  memset(&v12, 0, sizeof(v12));
  if (*(unsigned char *)a2)
  {
    std::string::append(&v12, "cull AC-3", 9uLL);
    if (!*(unsigned char *)(a2 + 16))
    {
LABEL_11:
      if (!*(unsigned char *)(a2 + 5))
      {
LABEL_14:
        if (!*(unsigned char *)(a2 + 1))
        {
LABEL_27:
          if (!*(unsigned char *)(a2 + 2))
          {
LABEL_30:
            if (!*(unsigned char *)(a2 + 49))
            {
LABEL_33:
              if (!*(unsigned char *)(a2 + 48)) {
                goto LABEL_36;
              }
              std::string::append(&v12, "; ", 2uLL);
              goto LABEL_35;
            }
            std::string::append(&v12, "; ", 2uLL);
LABEL_32:
            std::string::append(&v12, "is on parrot device", 0x13uLL);
            goto LABEL_33;
          }
          std::string::append(&v12, "; ", 2uLL);
LABEL_29:
          std::string::append(&v12, "cull stereo and mono LPCM", 0x19uLL);
          goto LABEL_30;
        }
        std::string::append(&v12, "; ", 2uLL);
LABEL_16:
        std::string::append(&v12, "cull multi-channel LPCM", 0x17uLL);
        if (!*(unsigned char *)(a2 + 3) || !*(unsigned char *)(a2 + 4))
        {
          std::string::append(&v12, ", except ", 9uLL);
          if (*(unsigned char *)(a2 + 3))
          {
            int v4 = "8-channel";
            std::string::size_type v5 = 9;
          }
          else
          {
            if (*(unsigned char *)(a2 + 4)) {
              int v4 = "6-channel";
            }
            else {
              int v4 = "6- and 8-channel";
            }
            if (*(unsigned char *)(a2 + 4)) {
              std::string::size_type v5 = 9;
            }
            else {
              std::string::size_type v5 = 16;
            }
          }
          std::string::append(&v12, v4, v5);
        }
        goto LABEL_27;
      }
      std::string::append(&v12, "; ", 2uLL);
LABEL_13:
      std::string::append(&v12, "cull Atmos", 0xAuLL);
      goto LABEL_14;
    }
    std::string::append(&v12, "; ", 2uLL);
LABEL_10:
    std::string::append(&v12, "cull non-48k AC-3", 0x11uLL);
    goto LABEL_11;
  }
  if (*(unsigned char *)(a2 + 1) || *(unsigned char *)(a2 + 2) || *(unsigned char *)(a2 + 3) || *(unsigned char *)(a2 + 4) || *(unsigned char *)(a2 + 16))
  {
    if (*(unsigned char *)(a2 + 16)) {
      goto LABEL_10;
    }
    if (*(unsigned char *)(a2 + 5)) {
      goto LABEL_13;
    }
    if (*(unsigned char *)(a2 + 1)) {
      goto LABEL_16;
    }
    if (*(unsigned char *)(a2 + 2)) {
      goto LABEL_29;
    }
    if (*(unsigned char *)(a2 + 49)) {
      goto LABEL_32;
    }
    if (*(unsigned char *)(a2 + 48))
    {
LABEL_35:
      std::string::append(&v12, "in call like route", 0x12uLL);
      goto LABEL_36;
    }
    int v10 = (os_log_t *)sub_32A48(13);
    unsigned int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "VirtualStream.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 1853;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"unexpected empty string for MultiChannelCullingPolicy\"", __p, 0x12u);
    }
  }
  else
  {
    *((unsigned char *)&v12.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v12, "cull none");
  }
LABEL_36:
  sub_21C8C(a1, "pref:");
  sub_2417C(__p, *(_DWORD *)(a2 + 24));
  if ((v14 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = *(const std::string::value_type **)__p;
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v7 = v14;
  }
  else {
    std::string::size_type v7 = *(void *)&__p[8];
  }
  std::string::append(a1, v6, v7);
  if ((char)v14 < 0) {
    operator delete(*(void **)__p);
  }
  std::string::append(a1, "; policy:", 9uLL);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v8 = &v12;
  }
  else {
    long long v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v8, size);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_31B6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31B72C(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  unsigned int v4 = *(_DWORD *)(a2 + 28);
  if (*(unsigned char *)(a1 + 44))
  {
    BOOL v5 = v3 == 1819304813 && (*(_DWORD *)(a2 + 12) & 1) == 0;
    if (v5 && v4 == *(_DWORD *)(a1 + 40)) {
      return 0;
    }
    goto LABEL_38;
  }
  if (v3 <= 1836343667)
  {
    if (v3 <= 1667443506)
    {
      if (v3 != 1633889587 && v3 != 1667326771) {
        goto LABEL_47;
      }
      goto LABEL_27;
    }
    if (v3 != 1667443507 && v3 != 1667509043)
    {
      if (v3 != 1667588915) {
        goto LABEL_47;
      }
LABEL_27:
      if (!*(unsigned char *)a1)
      {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 16);
        if (!*(unsigned char *)(a1 + 16)) {
          return v6;
        }
        double v9 = *(double *)(a1 + 8);
        if (*(double *)(a2 + 48) >= v9 && *(double *)(a2 + 40) <= v9) {
          return 0;
        }
      }
      goto LABEL_38;
    }
LABEL_37:
    uint64_t v6 = *(unsigned __int8 *)(a1 + 5);
    if (!*(unsigned char *)(a1 + 5)) {
      return v6;
    }
    goto LABEL_38;
  }
  if (v3 > 1836343923)
  {
    if (v3 == 1836343924) {
      goto LABEL_38;
    }
    if (v3 != 1836344107)
    {
      if (v3 == 1836344180) {
        goto LABEL_38;
      }
      goto LABEL_47;
    }
    goto LABEL_37;
  }
  if (v3 == 1836343668) {
    goto LABEL_38;
  }
  if (v3 == 1836343851) {
    goto LABEL_37;
  }
LABEL_47:
  uint64_t v6 = 0;
  if (v3 != 1819304813 || (*(_DWORD *)(a2 + 12) & 1) != 0 || v4 < 3) {
    return v6;
  }
  if (v4 == 8)
  {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 4);
    if (!*(unsigned char *)(a1 + 4)) {
      return v6;
    }
  }
  else if (v4 == 6)
  {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 3);
    if (!*(unsigned char *)(a1 + 3)) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 1);
    if (!*(unsigned char *)(a1 + 1)) {
      return v6;
    }
  }
LABEL_38:
  unsigned int v11 = (os_log_t *)sub_32A48(22);
  std::string v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
  {
    sub_16BC04(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    int v17 = "VirtualStream.cpp";
    __int16 v18 = 1024;
    int v19 = 1738;
    __int16 v20 = 2080;
    BOOL v21 = p_p;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culled stream format: %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return 1;
}

uint64_t sub_31B9CC(char a1, uint64_t a2)
{
  if (a1) {
    BOOL v2 = *(_DWORD *)(a2 + 8) == 1819304813;
  }
  else {
    BOOL v2 = 0;
  }
  unsigned int v3 = v2;
  if (*(unsigned char *)(a2 + 12)) {
    unsigned int v3 = 0;
  }
  if (*(_DWORD *)(a2 + 28) < 3u) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == 1)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(22);
    std::string::size_type v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
      {
        sub_16BC04(&__p, a2);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315650;
        std::string v12 = "VirtualStream.cpp";
        __int16 v13 = 1024;
        int v14 = 1756;
        __int16 v15 = 2080;
        __int16 v16 = p_p;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Culled stream format: %s", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  return v4;
}

char *sub_31BB10(void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_60548();
  }
  uint64_t result = (char *)sub_1927E0(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t *sub_31BB64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_3524(a2, (void *)(a1 + 112));
}

uint64_t sub_31BB70(uint64_t a1, long long *a2, int a3)
{
  if (a3 != 1936092532)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    BOOL v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      long long v8 = "VirtualStream.cpp";
      __int16 v9 = 1024;
      int v10 = 848;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  return sub_31BCA8(a1, a2, 1);
}

void sub_31BC8C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_31BCA8(uint64_t a1, long long *a2, char a3)
{
  v58.__r_.__value_.__r.__words[0] = a1 + 440;
  v58.__r_.__value_.__s.__data_[8] = 1;
  sub_39ECC(a1 + 440);
  if (!sub_55F80(*(void *)(a1 + 232), *(void *)(a1 + 240), (uint64_t)a2, *(void *)(a1 + 208), *(void *)(a1 + 216), (uint64_t)v59))
  {
    if (!*(unsigned char *)(a1 + 400)) {
      goto LABEL_38;
    }
    int v10 = (os_log_t *)sub_32A48(22);
    unsigned int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1419;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = a1;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to translate client format to physical format for virtual stream %p of aggregate device %p.", buf, 0x26u);
    }
    __int16 v13 = (os_log_t *)sub_32A48(22);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      sub_259A4((std::string *)__p, (uint64_t)a2);
      __int16 v15 = SBYTE3(v65) >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1420;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v15;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d - Given client format: %s", buf, 0x1Cu);
      if (SBYTE3(v65) < 0) {
        operator delete(*(void **)__p);
      }
    }
    __int16 v16 = (os_log_t *)sub_32A48(22);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1421;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d - Cached formats:", buf, 0x12u);
    }
    if (*(void *)(a1 + 216) == *(void *)(a1 + 208))
    {
LABEL_38:
      sub_3A3E8((uint64_t)&v58);
    }
    else
    {
      char v56 = a2;
      uint64_t v18 = 0;
      unsigned int v19 = 0;
      do
      {
        __int16 v20 = (os_log_t *)sub_32A48(22);
        BOOL v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          sub_16BC04((std::string *)__p, *(void *)(a1 + 232) + 56 * v18);
          uint64_t v22 = SBYTE3(v65) >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1425;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v19;
          *(_WORD *)&uint8_t buf[24] = 2080;
          *(void *)&buf[26] = v22;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d   %uv: %s", buf, 0x22u);
          if (SBYTE3(v65) < 0) {
            operator delete(*(void **)__p);
          }
        }
        int v23 = (os_log_t *)sub_32A48(22);
        BOOL v24 = *v23;
        if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          sub_16BC04((std::string *)__p, *(void *)(a1 + 208) + 56 * v18);
          long long v25 = SBYTE3(v65) >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1426;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v19;
          *(_WORD *)&uint8_t buf[24] = 2080;
          *(void *)&buf[26] = v25;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d   %ua: %s", buf, 0x22u);
          if (SBYTE3(v65) < 0) {
            operator delete(*(void **)__p);
          }
        }
        uint64_t v18 = ++v19;
      }
      while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 3) > (unint64_t)v19);
      sub_3A3E8((uint64_t)&v58);
      a2 = v56;
    }
    uint64_t v26 = 2003329396;
    int v27 = (os_log_t *)sub_32A48(22);
    os_log_t v28 = *v27;
    if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR)) {
      return v26;
    }
    sub_2417C(__p, 0x77686174u);
    int v29 = SBYTE3(v65);
    uint64_t v30 = *(unsigned char **)__p;
    sub_259A4(&v58, (uint64_t)a2);
    int v31 = __p;
    if (v29 < 0) {
      int v31 = v30;
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v32 = &v58;
    }
    else {
      __int16 v32 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 863;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v31;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v32;
    uint64_t v33 = "%25s:%-5d Error '%s' getting physical format for client format %s";
    int v34 = v28;
    goto LABEL_65;
  }
  sub_3A3E8((uint64_t)&v58);
  uint64_t v6 = (uint64_t *)(a1 + 80);
  if (a3)
  {
    sub_4188((uint64_t *)buf, v6, "", 869);
    uint64_t v7 = *(void *)buf;
    uint64_t v8 = *(void *)(a1 + 136);
    if (v8 && ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8) & 1) != 0) {
      uint64_t v9 = 1936092532;
    }
    else {
      uint64_t v9 = 1885762592;
    }
    uint64_t v38 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v7 + 152))(v7, v59, v9);
  }
  else
  {
    sub_4188((uint64_t *)buf, v6, "", 871);
    uint64_t v35 = *(void *)buf;
    uint64_t v36 = *(void *)(a1 + 136);
    if (v36 && ((*(uint64_t (**)(uint64_t))(*(void *)v36 + 176))(v36) & 1) != 0) {
      uint64_t v37 = 1936092532;
    }
    else {
      uint64_t v37 = 1885762592;
    }
    uint64_t v38 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t))(*(void *)v35 + 136))(v35, v59, v37);
  }
  uint64_t v26 = v38;
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v26)
  {
    uint64_t v39 = (os_log_t *)sub_32A48(22);
    os_log_t v40 = *v39;
    if (!*v39 || !os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR)) {
      return v26;
    }
    sub_2417C(__p, v26);
    int v41 = SBYTE3(v65);
    int v42 = *(unsigned char **)__p;
    sub_259A4(&v58, (uint64_t)v59);
    int v43 = __p;
    if (v41 < 0) {
      int v43 = v42;
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v44 = &v58;
    }
    else {
      uint64_t v44 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 875;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v43;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v44;
    uint64_t v33 = "%25s:%-5d Error '%s' setting physical stream format %s";
    int v34 = v40;
LABEL_65:
    _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, v33, buf, 0x26u);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    if (SBYTE3(v65) < 0)
    {
      uint64_t v45 = *(void **)__p;
LABEL_69:
      operator delete(v45);
      return v26;
    }
    return v26;
  }
  *(_OWORD *)buf = v59[0];
  *(_OWORD *)&buf[16] = v59[1];
  *(void *)&unsigned char buf[32] = v60;
  if (DWORD2(v59[0]) == 1819304813 && (buf[12] & 0x40) == 0)
  {
    *(_DWORD *)&unsigned char buf[12] = 9;
    *(_DWORD *)&buf[16] = 4 * *(_DWORD *)&buf[28];
    *(_DWORD *)&buf[20] = 1;
    *(_DWORD *)&uint8_t buf[24] = 4 * *(_DWORD *)&buf[28];
    *(_DWORD *)&unsigned char buf[32] = 32;
  }
  uint64_t v46 = sub_32A48(22);
  if (*(unsigned char *)(v46 + 8))
  {
    std::string v47 = *(NSObject **)v46;
    if (*(void *)v46)
    {
      if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
      {
        sub_259A4(&v58, (uint64_t)a2);
        int v48 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
        std::string::size_type v49 = v58.__r_.__value_.__r.__words[0];
        sub_259A4(&v57, (uint64_t)buf);
        uint64_t v50 = &v58;
        if (v48 < 0) {
          uint64_t v50 = (std::string *)v49;
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v51 = &v57;
        }
        else {
          long long v51 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "VirtualStream.cpp";
        __int16 v62 = 1024;
        int v63 = 882;
        __int16 v64 = 2080;
        int v65 = v50;
        __int16 v66 = 2080;
        uint64_t v67 = v51;
        _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d HAL IOProc format for client format %s is %s", __p, 0x26u);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v26 = sub_31ABD4(a1, (uint64_t)buf, a2);
  if (v26)
  {
    long long v52 = (os_log_t *)sub_32A48(22);
    uint64_t v53 = *v52;
    if (*v52)
    {
      if (os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&v58, v26);
        uint64_t v54 = (v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v58
            : (std::string *)v58.__r_.__value_.__r.__words[0];
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "VirtualStream.cpp";
        __int16 v62 = 1024;
        int v63 = 888;
        __int16 v64 = 2080;
        int v65 = v54;
        _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' configuring the DSP chain", __p, 0x1Cu);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v45 = (void *)v58.__r_.__value_.__r.__words[0];
          goto LABEL_69;
        }
      }
    }
  }
  return v26;
}

void sub_31C5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31C634(uint64_t a1, long long *a2)
{
  return sub_31BCA8(a1, a2, 1);
}

uint64_t sub_31C63C(uint64_t a1, long long *a2, int a3)
{
  if (a3 != 1936092532)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    BOOL v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "VirtualStream.cpp";
      __int16 v9 = 1024;
      int v10 = 835;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }

  return sub_31BCA8(a1, a2, 0);
}

void sub_31C758(_Unwind_Exception *exception_object)
{
}

uint64_t sub_31C774(uint64_t a1, long long *a2)
{
  return sub_31BCA8(a1, a2, 0);
}

uint64_t sub_31C77C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = 1885762592;
  uint64_t v16 = a1 + 440;
  char v17 = 1;
  sub_39ECC(a1 + 440);
  if (a3 == 1885762592)
  {
    sub_4188((uint64_t *)buf, (uint64_t *)(a1 + 80), "", 748);
    uint64_t v7 = *(void *)buf;
    uint64_t v8 = *(void *)(a1 + 136);
    if (v8 && ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 176))(v8) & 1) != 0) {
      uint64_t v6 = 1936092532;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 120))(v7, a2, v6);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v9)
    {
      int v10 = (os_log_t *)sub_32A48(22);
      unsigned int v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, v9);
          if (v15 >= 0) {
            uint64_t v12 = __p;
          }
          else {
            uint64_t v12 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 751;
          __int16 v19 = 2080;
          __int16 v20 = v12;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' getting physical stream format", buf, 0x1Cu);
          if (v15 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v9 = sub_513F8(a1, a2);
  }
  sub_3A3E8((uint64_t)&v16);
  return v9;
}

void sub_31C964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3A3E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_31C998(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v10 = a1 + 440;
  char v11 = 1;
  sub_39ECC(a1 + 440);
  if (a3 != 1936092513)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v13 = "VirtualStream.cpp";
      __int16 v14 = 1024;
      int v15 = 707;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"specified inSelector is not valid\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "specified inSelector is not valid");
  }
  sub_31CB08(a1, a2);
  sub_3A3E8((uint64_t)&v10);
  return 0;
}

void sub_31CAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  sub_3A3E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_31CB08(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1 + 440;
  char v9 = 1;
  sub_39ECC(a1 + 440);
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    BOOL v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      char v11 = "VirtualStream.cpp";
      __int16 v12 = 1024;
      int v13 = 694;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"specified StreamFormatList is not empty\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "specified StreamFormatList is not empty");
  }
  if (a1 + 232 != a2) {
    sub_31CC90((char *)a2, *(char **)(a1 + 232), *(void *)(a1 + 240), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3));
  }
  sub_3A3E8((uint64_t)&v8);
  return 0;
}

void sub_31CC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  sub_3A3E8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_31CC90(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      sub_60548();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v12 = 0x492492492492492;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_31BB10(v7, v12);
    __int16 v14 = (char *)v7[1];
    int v13 = (void **)(v7 + 1);
    char v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      __int16 v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v13 = (void **)(result + 8);
  int v15 = (unsigned char *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    char v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    __int16 v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v13 = &v9[v17];
  return result;
}

void sub_31CDE8(uint64_t a1)
{
  unsigned int v2 = sub_3176F4(a1);
  if (v2)
  {
    unsigned int v30 = v2;
    int v31 = (os_log_t *)sub_32A48(13);
    __int16 v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&__p, v30);
      uint64_t v33 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      __int16 v39 = 1024;
      int v40 = 415;
      __int16 v41 = 2080;
      int v42 = v33;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (err): \"Aborting initialization due to error '%s' while attempting to initialize stream formats\"", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v30;
  }
  sub_31D430(a1, 1);
  unsigned int v3 = (os_log_t *)sub_32A48(22);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
  {
    sub_4F64((uint64_t)&__p, (os_unfair_lock_t)(a1 + 8));
    BOOL v5 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t v6 = *(void *)(a1 + 96);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    __int16 v39 = 1024;
    int v40 = 419;
    __int16 v41 = 2080;
    int v42 = v5;
    __int16 v43 = 2048;
    uint64_t v44 = v6;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d VirtualStream created: %s for aggregate device %p.", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v7 = (os_log_t *)sub_32A48(22);
  uint64_t v8 = *v7;
  if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEBUG))
  {
    sub_31D55C(&__p, *(void *)(a1 + 232), *(void *)(a1 + 240));
    char v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    __int16 v39 = 1024;
    int v40 = 420;
    __int16 v41 = 2080;
    int v42 = v9;
    _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d - mClientStreamFormats: %s.", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v10 = (os_log_t *)sub_32A48(22);
  uint64_t v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
  {
    sub_31D55C(&__p, *(void *)(a1 + 208), *(void *)(a1 + 216));
    unint64_t v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
    __int16 v39 = 1024;
    int v40 = 421;
    __int16 v41 = 2080;
    int v42 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d - mPhysicalStreamFormats: %s.", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v13 = *(void *)(a1 + 136);
  if (!*(unsigned char *)(v13 + 392))
  {
    (*(void (**)(uint64_t, void))(*(void *)v13 + 16))(v13, *(void *)(a1 + 424));
    uint64_t v13 = *(void *)(a1 + 136);
  }
  long long v14 = *(_OWORD *)(v13 + 1040);
  int v15 = *(std::__shared_weak_count **)(v13 + 1048);
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    long long v35 = v14;
    sub_4636C(v15);
    long long v14 = v35;
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 160);
  *(_OWORD *)(a1 + 152) = v14;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  long long v17 = *(_OWORD *)(*(void *)(a1 + 136) + 1056);
  uint64_t v18 = *(void *)(*(void *)(a1 + 136) + 1064);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 16), 1uLL, memory_order_relaxed);
  }
  __int16 v19 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v17;
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  uint64_t v20 = *(void *)(a1 + 136);
  if (!*(unsigned char *)(v20 + 448) && !*(void *)(v20 + 584) && !*(void *)(v20 + 672))
  {
    if (*(void *)(a1 + 128))
    {
      uint64_t v21 = *(void *)(a1 + 120);
      uint64_t v22 = *(std::__shared_weak_count **)(v21 + 24);
      if (v22)
      {
        int v23 = std::__shared_weak_count::lock(v22);
        if (v23)
        {
          BOOL v24 = v23;
          uint64_t v25 = *(void *)(v21 + 16);
          if (v25)
          {
            if (*(_DWORD *)(v25 + 144) == 1886745455
              && (uint64_t v26 = *(void *)(v25 + 192),
                  unsigned int v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 440))(v26, 1),
                  int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v26 + 88))(v26, 1),
                  v27 <= 2)
              && v28 == 1
              || *(_DWORD *)(v25 + 264) == 1970496068)
            {
              (*(void (**)(std::string *__return_ptr))(**(void **)(v25 + 192) + 448))(&__p);
              (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v25 + 144))(buf, v25);
              int v29 = *(const void **)buf;
              if (*(void *)buf) {
                CFRetain(*(CFTypeRef *)buf);
              }
              sub_14E44(&cf, v29);
              sub_72924((uint64_t)buf);
              sub_87458();
              (*(void (**)(void))(qword_64A1C8 + 48))();
              if (cf) {
                CFRelease(cf);
              }
              if (__p.__r_.__value_.__r.__words[0]) {
                CFRelease(__p.__r_.__value_.__l.__data_);
              }
            }
          }
          sub_4636C(v24);
        }
      }
    }
  }
  sub_D26B4(a1);
}

void sub_31D3C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_31D430(uint64_t a1, int a2)
{
  uint64_t v4 = sub_32A48(22);
  if (*(unsigned char *)(v4 + 8))
  {
    BOOL v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        int v6 = *(unsigned __int8 *)(a1 + 400);
        unint64_t v10 = "VirtualStream.cpp";
        int v9 = 136316162;
        if (v6 == a2) {
          uint64_t v7 = "(Redundant) ";
        }
        else {
          uint64_t v7 = "";
        }
        uint64_t v8 = "false";
        __int16 v11 = 1024;
        int v12 = 945;
        long long v14 = v7;
        __int16 v13 = 2080;
        if (a2) {
          uint64_t v8 = "true";
        }
        __int16 v15 = 2080;
        uint64_t v16 = v8;
        __int16 v17 = 2048;
        uint64_t v18 = a1;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d %ssetting trustworthiness flag to %s on stream at %p", (uint8_t *)&v9, 0x30u);
      }
    }
  }
  *(unsigned char *)(a1 + 400) = a2;
}

std::string *sub_31D55C(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_16BC04(&__p, a2);
      int v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a2 += 56;
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_31D638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31D674(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 == 1936482676)
  {
    *(void *)uint64_t v15 = *(void *)a2;
    *(_DWORD *)&v15[8] = a2[2];
    *(void *)&v17[2] = a3;
    uint64_t v18 = a4;
    sub_1A4260(a1 + 32, (unsigned int *)v15, (uint64_t)v15);
    return 1;
  }
  int v9 = (std::__shared_weak_count *)a1[11];
  if (!v9)
  {
    unint64_t v10 = 0;
LABEL_10:
    __int16 v13 = (os_log_t *)sub_32A48(22);
    long long v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v15 = 136315394;
      *(void *)&v15[4] = "VirtualStream.cpp";
      __int16 v16 = 1024;
      *(_DWORD *)__int16 v17 = 1017;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VirtualStream::UnregisterRelayedListener() underlying stream is nullptr - This is expected if the stream was destroyed before UnregisterRelayedListener is called", v15, 0x12u);
    }
    if (v10) {
      sub_4636C(v10);
    }
    return 0;
  }
  unint64_t v10 = std::__shared_weak_count::lock(v9);
  if (!v10) {
    goto LABEL_10;
  }
  uint64_t v11 = a1[10];
  if (!v11) {
    goto LABEL_10;
  }
  int v12 = sub_FEEF8(v11, a2, (uint64_t)sub_31D83C, (uint64_t)a1);
  sub_4636C(v10);
  if (!v12)
  {
    *(void *)uint64_t v15 = *(void *)a2;
    *(_DWORD *)&v15[8] = a2[2];
    *(void *)&v17[2] = a3;
    uint64_t v18 = a4;
    sub_1A4260(a1 + 32, (unsigned int *)v15, (uint64_t)v15);
    return 1;
  }
  return 0;
}

void sub_31D814(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_31D83C(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)(a4 + 80);
  sub_4188((uint64_t *)buf, (uint64_t *)(a4 + 80), "", 1513);
  uint64_t v9 = *(void *)buf;
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v9 != a1)
  {
    unint64_t v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1513;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"got an unexpected Object pointer in callback\"", buf, 0x12u);
      }
    }
  }
  sub_4188((uint64_t *)buf, v8, "", 1515);
  uint64_t v12 = *(void *)buf;
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v12 == a1 && a2)
  {
    uint64_t v13 = a2;
    long long v14 = (void *)(a4 + 256);
    do
    {
      uint64_t v26 = *a3;
      int v27 = *((_DWORD *)a3 + 2);
      if (sub_1A1BE4(v14, (uint64_t)&v26))
      {
        uint64_t v24 = *a3;
        int v25 = *((_DWORD *)a3 + 2);
        sub_1A1D20(v14, (unsigned int *)&v24);
        if (*(_DWORD *)a3 == 1936092532)
        {
          uint64_t v22 = 0x676C6F62736C6174;
          int v23 = 0;
          if (sub_1A1BE4(v14, (uint64_t)&v22)) {
            sub_1A1D20(v14, (unsigned int *)&v22);
          }
        }
      }
      else
      {
        uint64_t v15 = (os_log_t *)sub_32A48(22);
        __int16 v16 = *v15;
        if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = *a3;
          int v19 = *((_DWORD *)a3 + 2);
          sub_16C9C4((uint64_t)__p, (unsigned int *)&v18);
          __int16 v17 = __p;
          if (v21 < 0) {
            __int16 v17 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1549;
          __int16 v29 = 2080;
          unsigned int v30 = v17;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Unregistered relay property address %s", buf, 0x1Cu);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      a3 = (uint64_t *)((char *)a3 + 12);
      --v13;
    }
    while (v13);
  }
}

void sub_31DBB8(_Unwind_Exception *a1)
{
}

void sub_31DBC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_31DBE4(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = *(void *)a2;
  int v27 = a2[2];
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  int v6 = a1 + 32;
  sub_1A4AA0(a1 + 32, (unsigned int *)&v26, (uint64_t)&v26);
  if (*a2 == 1936482676) {
    return 1;
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[11];
  if (!v8)
  {
    uint64_t v9 = 0;
LABEL_9:
    uint64_t v12 = (os_log_t *)sub_32A48(22);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v31 = "VirtualStream.cpp";
      __int16 v32 = 1024;
      int v33 = 984;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d VirtualStream::RegisterRelayedListener() underlying stream is nullptr", buf, 0x12u);
    }
    unsigned int v11 = 560947818;
    if (v9) {
      sub_4636C(v9);
    }
    goto LABEL_14;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v8);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = a1[10];
  if (!v10) {
    goto LABEL_9;
  }
  unsigned int v11 = sub_FEAC0(v10, a2, (uint64_t)sub_31D83C, (uint64_t)a1);
  sub_4636C(v9);
  if (!v11) {
    return 1;
  }
LABEL_14:
  long long v14 = (os_log_t *)sub_32A48(22);
  uint64_t v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(v24, v11);
    int v16 = v25;
    __int16 v17 = (void **)v24[0];
    uint64_t v20 = *(void *)a2;
    int v21 = a2[2];
    sub_16C9C4((uint64_t)__p, (unsigned int *)&v20);
    uint64_t v18 = v24;
    if (v16 < 0) {
      uint64_t v18 = v17;
    }
    if (v23 >= 0) {
      int v19 = __p;
    }
    else {
      int v19 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315906;
    int v31 = "VirtualStream.cpp";
    __int16 v32 = 1024;
    int v33 = 990;
    __int16 v34 = 2080;
    long long v35 = v18;
    __int16 v36 = 2080;
    uint64_t v37 = v19;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Error '%s' adding listener on actual stream for property %s", buf, 0x26u);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
  sub_1A4260(v6, (unsigned int *)&v26, (uint64_t)&v26);
  return 0;
}

void sub_31DE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_4636C(v19);
  _Unwind_Resume(a1);
}

void sub_31DEB8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  snprintf(__str, 0x13uLL, "%p", (const void *)a1);
  sub_21C8C(&v29, __str);
  uint64_t v4 = std::string::insert(&v29, 0, "[ addr: ", 8uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v31 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if (v31 >= 0) {
    std::string::size_type v7 = HIBYTE(v31);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (sub_31B098(a1)) {
    uint64_t v8 = "out";
  }
  else {
    uint64_t v8 = "in";
  }
  sub_21C8C(&v29, v8);
  uint64_t v9 = std::string::insert(&v29, 0, "; dir: ", 7uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v31 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    unsigned int v11 = __p;
  }
  else {
    unsigned int v11 = (void **)__p[0];
  }
  if (v31 >= 0) {
    std::string::size_type v12 = HIBYTE(v31);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, *(_DWORD *)(a1 + 184));
  uint64_t v13 = std::string::insert(&v29, 0, "; pref virt chans: ", 0x13uLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v31 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    uint64_t v15 = __p;
  }
  else {
    uint64_t v15 = (void **)__p[0];
  }
  if (v31 >= 0) {
    std::string::size_type v16 = HIBYTE(v31);
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, *(_DWORD *)(a1 + 188));
  __int16 v17 = std::string::insert(&v29, 0, "; forced virt chans: ", 0x15uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  int64_t v31 = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    int v19 = __p;
  }
  else {
    int v19 = (void **)__p[0];
  }
  if (v31 >= 0) {
    std::string::size_type v20 = HIBYTE(v31);
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v19, v20);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  int v21 = *(std::__shared_weak_count **)(a1 + 88);
  if (v21 && (uint64_t v22 = std::__shared_weak_count::lock(v21)) != 0)
  {
    char v23 = v22;
    uint64_t v24 = *(os_unfair_lock_s **)(a1 + 80);
    if (v24)
    {
      sub_4F64((uint64_t)&v29, v24 + 2);
      goto LABEL_50;
    }
  }
  else
  {
    char v23 = 0;
  }
  sub_21C8C(&v29, "nullptr");
LABEL_50:
  char v25 = std::string::insert(&v29, 0, "; actual strm: ", 0xFuLL);
  long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  int64_t v31 = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    int v27 = __p;
  }
  else {
    int v27 = (void **)__p[0];
  }
  if (v31 >= 0) {
    std::string::size_type v28 = HIBYTE(v31);
  }
  else {
    std::string::size_type v28 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v27, v28);
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, " ]", 2uLL);
  if (v23) {
    sub_4636C(v23);
  }
}

void sub_31E228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v22) {
    sub_4636C(v22);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_31E2E0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6)
{
  if (sub_31E63C(a1, a2, a3, a4) > a5)
  {
    int v19 = (os_log_t *)sub_32A48(13);
    std::string::size_type v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v24 = 136315394;
      *(void *)&v24[4] = "VirtualStream.cpp";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 654;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"data size too small for specified property\"", v24, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 561211770;
  }
  int v12 = *a2;
  if (*a2 > 1936092514)
  {
    if (v12 == 1936092515)
    {
      *(unsigned char *)(a1 + 401) = *(_DWORD *)a6 != 0;
      return;
    }
    int v13 = 1936092532;
  }
  else
  {
    if (v12 == 1718641517)
    {
      *(unsigned char *)(a1 + 728) = *(_DWORD *)a6 != 0;
      return;
    }
    int v13 = 1885762592;
  }
  if (v12 == v13)
  {
    int v14 = sub_31BCA8(a1, a6, 0);
    if (*(unsigned char *)(a1 + 400))
    {
      if (v14)
      {
        int v15 = v14;
        std::string::size_type v16 = (os_log_t *)sub_32A48(13);
        __int16 v17 = *v16;
        if (*v16)
        {
          if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v24 = 136315394;
            *(void *)&v24[4] = "VirtualStream.cpp";
            *(_WORD *)&v24[12] = 1024;
            *(_DWORD *)&v24[14] = 664;
            _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"error setting current stream format\"", v24, 0x12u);
          }
        }
        long long v18 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v18 = &off_6414D8;
        uint64_t v18[2] = v15;
      }
    }
    else if (v14)
    {
      int v22 = v14;
      char v23 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v23 = &off_6414D8;
      v23[2] = v22;
    }
  }
  else
  {
    sub_4188((uint64_t *)v24, (uint64_t *)(a1 + 80), "", 680);
    (*(void (**)(void, int *, uint64_t, uint64_t, uint64_t, long long *))(**(void **)v24 + 48))(*(void *)v24, a2, a3, a4, a5, a6);
    if (*(void *)&v24[8]) {
      sub_4636C(*(std::__shared_weak_count **)&v24[8]);
    }
  }
}

void sub_31E61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31E63C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v8 = *a2;
  uint64_t v9 = 40;
  if (*a2 > 1936092512)
  {
    if (v8 > 1936092531)
    {
      if (v8 == 1936092532) {
        return v9;
      }
      int v11 = 1936482676;
LABEL_16:
      if (v8 == v11) {
        return 4;
      }
      goto LABEL_21;
    }
    if (v8 != 1936092513)
    {
      int v11 = 1936092515;
      goto LABEL_16;
    }
    uint64_t v17 = a1 + 440;
    char v18 = 1;
    sub_39ECC(a1 + 440);
    sub_513F8(a1, (uint64_t)&v15);
    uint64_t v9 = 56;
    if ((int)v16 > 1836343850)
    {
      if (v16 != 1836343851)
      {
        int v13 = 1836344107;
LABEL_25:
        if (v16 != v13) {
          uint64_t v9 = (*(_DWORD *)(a1 + 240) - *(_DWORD *)(a1 + 232)) & 0xFFFFFFF8;
        }
      }
    }
    else if (v16 != 1667443507)
    {
      int v13 = 1667509043;
      goto LABEL_25;
    }
    int v12 = &v17;
    goto LABEL_28;
  }
  if (v8 <= 1885762591)
  {
    if (v8 != 1685025633 && v8 != 1718641517) {
      goto LABEL_21;
    }
    return 4;
  }
  if (v8 == 1885762592) {
    return v9;
  }
  if (v8 == 1885762657)
  {
    uint64_t v15 = a1 + 440;
    LOBYTE(v16) = 1;
    sub_39ECC(a1 + 440);
    uint64_t v9 = (*(_DWORD *)(a1 + 240) - *(_DWORD *)(a1 + 232)) & 0xFFFFFFF8;
    int v12 = &v15;
LABEL_28:
    sub_3A3E8((uint64_t)v12);
    return v9;
  }
LABEL_21:
  sub_4188(&v15, (uint64_t *)(a1 + 80), "", 552);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, a2, a3, a4);
  if (v16) {
    sub_4636C(v16);
  }
  return v9;
}

void sub_31E858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a11) {
    sub_4636C(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_31E880(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unsigned int *a6)
{
  unsigned int v12 = sub_31E63C(a1, a2, a3, a4);
  if (*a5 < v12)
  {
    uint64_t v50 = (os_log_t *)sub_32A48(13);
    long long v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 562;
      _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"data size too small for specified property\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 561211770;
  }
  unsigned int v13 = v12;
  int v14 = *a2;
  if (*a2 > 1936092512)
  {
    if (v14 <= 1936092531)
    {
      if (v14 != 1936092513)
      {
        if (v14 == 1936092515)
        {
          unsigned int v15 = *(unsigned __int8 *)(a1 + 401);
          goto LABEL_11;
        }
        goto LABEL_40;
      }
      std::string __p = (void *)(a1 + 440);
      char v58 = 1;
      sub_39ECC(a1 + 440);
      sub_513F8(a1, (uint64_t)v67);
      if (*(int *)&v67[8] > 1836343850)
      {
        if (*(_DWORD *)&v67[8] == 1836344107) {
          goto LABEL_47;
        }
        int v24 = 1836343851;
      }
      else
      {
        if (*(_DWORD *)&v67[8] == 1667443507) {
          goto LABEL_47;
        }
        int v24 = 1667509043;
      }
      if (*(_DWORD *)&v67[8] != v24)
      {
        long long v35 = *(unsigned char **)(a1 + 232);
        size_t v34 = v13;
        goto LABEL_48;
      }
LABEL_47:
      *(_OWORD *)buf = *(_OWORD *)v67;
      *(_OWORD *)&buf[16] = *(_OWORD *)&v67[16];
      uint64_t v64 = *(void *)&v67[32];
      uint64_t v65 = *(void *)v67;
      uint64_t v66 = *(void *)v67;
      size_t v34 = v13;
      long long v35 = buf;
LABEL_48:
      memcpy(a6, v35, v34);
      *a5 = v13;
      p_p = &__p;
      goto LABEL_49;
    }
    if (v14 != 1936482676)
    {
      if (v14 != 1936092532) {
        goto LABEL_40;
      }
      goto LABEL_17;
    }
    int v25 = sub_31C77C(a1, (uint64_t)buf, 1885762592);
    if (v25)
    {
      uint64_t v53 = (os_log_t *)sub_32A48(13);
      uint64_t v54 = *v53;
      if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v67 = 136315394;
        *(void *)&v67[4] = "VirtualStream.cpp";
        *(_WORD *)&v67[12] = 1024;
        *(_DWORD *)&v67[14] = 618;
        _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"error getting current stream format\"", v67, 0x12u);
      }
      __int16 v55 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v55 = &off_6414D8;
      v55[2] = v25;
    }
    uint64_t v26 = *(void *)(a1 + 96);
    double v27 = 1.0;
    if (((*(uint64_t (**)(uint64_t))(*(void *)v26 + 144))(v26) & 1) == 0)
    {
      double v28 = (*(double (**)(uint64_t))(*(void *)v26 + 104))(v26);
      double v29 = *(double *)buf;
      if (v28 != *(double *)buf)
      {
        unsigned int v30 = (os_log_t *)sub_32A48(22);
        int64_t v31 = *v30;
        if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v67 = 136315906;
          *(void *)&v67[4] = "VirtualStream.cpp";
          *(_WORD *)&v67[12] = 1024;
          *(_DWORD *)&v67[14] = 309;
          *(_WORD *)&v67[18] = 2048;
          *(double *)&v67[20] = v28;
          *(_WORD *)&v67[28] = 2048;
          *(double *)&v67[30] = v29;
          _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Aggregate device sample rate (%f) is different from physical device sample rate(%f)", v67, 0x26u);
        }
        double v27 = v28 / v29;
      }
    }
    int v61 = 4;
    unsigned int v62 = 0;
    if (sub_31B098(a1)) {
      int v32 = 1869968496;
    }
    else {
      int v32 = 1768845428;
    }
    v60[0] = 1819569763;
    v60[1] = v32;
    v60[2] = 0;
    if (sub_31F1F4(a1, v60))
    {
      sub_31E880(a1, v60, 0, 0, &v61, &v62);
      unsigned int v33 = v62;
    }
    else
    {
      __int16 v36 = (os_log_t *)sub_32A48(22);
      uint64_t v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_INFO))
      {
        sub_4F64((uint64_t)&__p, (os_unfair_lock_t)(a1 + 8));
        uint64_t v38 = v59 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)uint64_t v67 = 136315650;
        *(void *)&v67[4] = "VirtualStream.cpp";
        *(_WORD *)&v67[12] = 1024;
        *(_DWORD *)&v67[14] = 811;
        *(_WORD *)&v67[18] = 2080;
        *(void *)&v67[20] = v38;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_INFO, "%25s:%-5d Virtual stream %s, does not support kAudioStreamPropertyLatency", v67, 0x1Cu);
        if (v59 < 0) {
          operator delete(__p);
        }
      }
      unsigned int v33 = 0;
    }
    unsigned int v39 = sub_31AE40(a1);
    if (*(int *)&buf[8] > 1836343850)
    {
      if (*(_DWORD *)&buf[8] == 1836344107) {
        goto LABEL_64;
      }
      int v40 = 1836343851;
    }
    else
    {
      if (*(_DWORD *)&buf[8] == 1667443507) {
        goto LABEL_64;
      }
      int v40 = 1667509043;
    }
    if (*(_DWORD *)&buf[8] != v40)
    {
LABEL_68:
      int v46 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 128))(*(void *)(a1 + 136));
      std::string v47 = (os_log_t *)sub_32A48(22);
      unsigned int v48 = (v27 * (double)(v39 + v33 + v46));
      std::string::size_type v49 = *v47;
      if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t v67 = 136315650;
        *(void *)&v67[4] = "VirtualStream.cpp";
        *(_WORD *)&v67[12] = 1024;
        *(_DWORD *)&v67[14] = 630;
        *(_WORD *)&v67[18] = 1024;
        *(_DWORD *)&v67[20] = v48;
        _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adjusted StreamLatency is %d", v67, 0x18u);
      }
      *a6 = v48;
      return;
    }
LABEL_64:
    uint64_t v41 = *(void *)(a1 + 104);
    strcpy(v67, "rrapbolg");
    v67[9] = 0;
    *(_WORD *)&v67[10] = 0;
    uint64_t v42 = sub_99A40(v41);
    *((void *)&v45 + 1) = v43;
    *(void *)&long long v45 = v42;
    uint64_t v44 = v45 >> 32;
    if ((v44 & 0xFF00000000) == 0 || !v44 || (_os_feature_enabled_impl() & 1) == 0)
    {
      v33 >>= 4;
      v39 >>= 4;
    }
    goto LABEL_68;
  }
  if (v14 > 1885762591)
  {
    if (v14 != 1885762592)
    {
      if (v14 == 1885762657)
      {
        *(void *)buf = a1 + 440;
        buf[8] = 1;
        sub_39ECC(a1 + 440);
        memcpy(a6, *(const void **)(a1 + 232), v13);
        *a5 = v13;
        p_p = (void **)buf;
LABEL_49:
        sub_3A3E8((uint64_t)p_p);
        return;
      }
LABEL_40:
      sub_4188((uint64_t *)buf, (uint64_t *)(a1 + 80), "", 646);
      (*(void (**)(void, int *, uint64_t, uint64_t, unsigned int *, unsigned int *))(**(void **)buf + 40))(*(void *)buf, a2, a3, a4, a5, a6);
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      return;
    }
LABEL_17:
    int v17 = sub_31C77C(a1, (uint64_t)a6, v14);
    int v18 = v17;
    if (*(unsigned char *)(a1 + 400))
    {
      if (v17)
      {
        int v19 = (os_log_t *)sub_32A48(13);
        std::string::size_type v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualStream.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 572;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"error getting current stream format\"", buf, 0x12u);
        }
        uint64_t v21 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v21 = &off_6414D8;
        v21[2] = v18;
      }
    }
    else if (v17)
    {
      char v56 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v56 = &off_6414D8;
      v56[2] = v18;
    }
    *a5 = v13;
    return;
  }
  if (v14 != 1685025633)
  {
    if (v14 == 1718641517)
    {
      unsigned int v15 = *(unsigned __int8 *)(a1 + 728);
LABEL_11:
      *a6 = v15;
      return;
    }
    goto LABEL_40;
  }
  uint64_t v22 = *(void *)(a1 + 136);
  if (*(unsigned char *)(v22 + 796)) {
    int v23 = *(unsigned __int8 *)(v22 + 797);
  }
  else {
    int v23 = 0;
  }

  sub_9EC7C(v23, a5, a6);
}

void sub_31F1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_4636C(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31F1F4(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = 1;
  if (*a2 > 1885762656)
  {
    BOOL v5 = (v3 - 1936092513) <= 0x13 && ((1 << (v3 - 97)) & 0x80005) != 0 || v3 == 1885762657;
    int v6 = 1936482676;
  }
  else
  {
    BOOL v5 = v3 == 1685025633 || v3 == 1718641517;
    int v6 = 1885762592;
  }
  if (!v5 && v3 != v6)
  {
    sub_4188(&v10, (uint64_t *)(a1 + 80), "", 473);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v10 + 16))(v10, a2);
    if (v11) {
      sub_4636C(v11);
    }
  }
  return v4;
}

void sub_31F2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31F30C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = 1;
  if (*a2 > 1936092512)
  {
    if (v3 <= 1936092531)
    {
      if (v3 != 1936092513)
      {
        int v5 = 1936092515;
LABEL_8:
        if (v3 == v5) {
          return v4;
        }
        goto LABEL_17;
      }
      return 0;
    }
    if (v3 == 1936092532) {
      return v4;
    }
    int v6 = 1936482676;
  }
  else
  {
    if (v3 <= 1885762591)
    {
      if (v3 != 1685025633)
      {
        int v5 = 1718641517;
        goto LABEL_8;
      }
      return 0;
    }
    if (v3 == 1885762592) {
      return v4;
    }
    int v6 = 1885762657;
  }
  if (v3 == v6) {
    return 0;
  }
LABEL_17:
  sub_4188(&v8, (uint64_t *)(a1 + 80), "", 501);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v8 + 24))(v8, a2);
  if (v9) {
    sub_4636C(v9);
  }
  return v4;
}

void sub_31F448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_31F460(void *a1)
{
  sub_31F498(a1);

  operator delete();
}

uint64_t sub_31F498(void *a1)
{
  uint64_t v2 = a1[11];
  if (v2 && *(void *)(v2 + 8) != -1) {
    sub_31F554(a1);
  }
  sub_1B6FA0((uint64_t)(a1 + 55));
  sub_1A97C8((uint64_t)(a1 + 32));
  int v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[26];
  if (v4)
  {
    a1[27] = v4;
    operator delete(v4);
  }
  int v5 = (std::__shared_weak_count *)a1[22];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  int v6 = (std::__shared_weak_count *)a1[20];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  std::string::size_type v7 = (std::__shared_weak_count *)a1[18];
  if (v7) {
    sub_4636C(v7);
  }
  sub_8108(a1 + 14);
  uint64_t v8 = (std::__shared_weak_count *)a1[11];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }

  return sub_FE920((uint64_t)a1);
}

void sub_31F554(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (!v2)
  {
    int v3 = 0;
    goto LABEL_30;
  }
  int v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = a1[10]) == 0)
  {
LABEL_30:
    std::string::size_type v16 = (os_log_t *)sub_32A48(22);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v24 = "VirtualStream.cpp";
      __int16 v25 = 1024;
      int v26 = 391;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d UnregisterAllPropertyListeners() underlying stream is nullptr", buf, 0x12u);
    }
LABEL_33:
    if (!v3) {
      return;
    }
    goto LABEL_34;
  }
  uint64_t v5 = a1[45];
  if (v5)
  {
    for (unint64_t i = 0; i != v5; ++i)
    {
      if (a1[45] <= i)
      {
        int v18 = (os_log_t *)sub_32A48(13);
        int v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          int v24 = "StandardUtilities.h";
          __int16 v25 = 1024;
          int v26 = 933;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"Index out of range\"", buf, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Index out of range");
      }
      std::string::size_type v7 = (void *)a1[43];
      if ((i & 0x8000000000000000) != 0)
      {
        unint64_t v13 = i;
        do
        {
          int v14 = (void *)*v7;
          if (*v7)
          {
            do
            {
              uint64_t v10 = v14;
              int v14 = (void *)v14[1];
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v10 = (void *)v7[2];
              BOOL v11 = *v10 == (void)v7;
              std::string::size_type v7 = v10;
            }
            while (v11);
          }
          std::string::size_type v7 = v10;
        }
        while (!__CFADD__(v13++, 1));
      }
      else if (i)
      {
        uint64_t v8 = i;
        do
        {
          uint64_t v9 = (void *)v7[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              uint64_t v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (void *)v7[2];
              BOOL v11 = *v10 == (void)v7;
              std::string::size_type v7 = v10;
            }
            while (!v11);
          }
          std::string::size_type v7 = v10;
        }
        while (v8-- > 1);
      }
      else
      {
        uint64_t v10 = (void *)a1[43];
      }
      uint64_t v21 = v10[4];
      int v22 = *((_DWORD *)v10 + 10);
      sub_FEEF8(v4, &v21, (uint64_t)sub_31D83C, (uint64_t)a1);
    }
    goto LABEL_33;
  }
LABEL_34:
  sub_4636C(v3);
}

void sub_31F7FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_31F830(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = &off_633628;
  *(void *)(a1 + 80) = *a2;
  uint64_t v13 = a2[1];
  *(void *)(a1 + 88) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = a3;
  *(void *)(a1 + 104) = a4;
  sub_3524((uint64_t *)(a1 + 112), a5);
  if (!*a6)
  {
    sub_24ABB0(&__p, (uint64_t)a5);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    sub_1B7178((void *)(a1 + 136), (uint64_t)&__p, 1684434036);
  }
  *(void *)(a1 + 136) = *a6;
  *(void *)(a1 + 144) = a6[1];
  *a6 = 0;
  a6[1] = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 184) = *(void *)a8;
  long long v14 = *(_OWORD *)(a8 + 8);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 192) = v14;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  sub_1A9860(a1 + 256);
  *(_WORD *)(a1 + 400) = 0;
  *(void *)(a1 + 404) = *(void *)(a8 + 24);
  *(void *)(a1 + 412) = *(void *)(a8 + 32);
  *(void *)(a1 + 424) = a7;
  uint64_t v15 = *(void *)(a1 + 136);
  if (v15
    && (*(unsigned char *)(v15 + 448) || *(void *)(v15 + 584) || *(void *)(v15 + 672))
    && (v16 = sub_4FD74(v15), (unint64_t v17 = HIDWORD(v16)) != 0))
  {
    unint64_t v18 = v16 >> 8;
  }
  else
  {
    unint64_t v16 = *(unsigned int *)(a8 + 40) | ((unint64_t)*(unsigned __int8 *)(a8 + 44) << 32);
    unint64_t v18 = v16 >> 8;
    LOBYTE(v17) = *(unsigned char *)(a8 + 44);
  }
  *(void *)(a1 + 432) = v16 | ((unint64_t)v17 << 32) | (v18 << 8);
  sub_89EC8(a1 + 440);
  *(unsigned char *)(a1 + 728) = 0;
  return a1;
}

void sub_31F9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_8108(v15);
  unint64_t v17 = *(std::__shared_weak_count **)(v14 + 88);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  sub_FE920(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_31FAA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 424);
  if (v2 && *(unsigned char *)(v2 + 52)) {
    sub_1BAD7C(*(void *)(a1 + 136), 0);
  }
  int v3 = *(uint64_t (**)(void))(**(void **)(a1 + 136) + 160);

  return v3();
}

uint64_t sub_31FB10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3 - a2;
  if (a3 == a2)
  {
    uint64_t v70 = (os_log_t *)sub_32A48(13);
    uint64_t v71 = *v70;
    if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "StreamUtilities.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 77;
      _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inFormatList is empty\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inFormatList is empty");
  }
  int v6 = *(_DWORD *)(a4 + 8);
  int v7 = *(_DWORD *)(a4 + 12);
  int v9 = *(_DWORD *)(a4 + 28);
  int v8 = *(_DWORD *)(a4 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)buf = *(_OWORD *)a2;
  *(_OWORD *)&buf[16] = v10;
  *(void *)uint64_t v81 = *(void *)(a2 + 32);
  *(_OWORD *)&v81[8] = *(_OWORD *)(a2 + 40);
  if (*(double *)buf != 0.0 && *(double *)a4 != 0.0 && *(double *)buf != *(double *)a4) {
    goto LABEL_161;
  }
  if (*(_DWORD *)&buf[8] && v6 && *(_DWORD *)&buf[8] != v6) {
    goto LABEL_161;
  }
  if (*(_DWORD *)&buf[16])
  {
    int v12 = *(_DWORD *)(a4 + 16);
    if (v12)
    {
      if (*(_DWORD *)&buf[16] != v12) {
        goto LABEL_161;
      }
    }
  }
  if (*(_DWORD *)&buf[20])
  {
    int v13 = *(_DWORD *)(a4 + 20);
    if (v13)
    {
      if (*(_DWORD *)&buf[20] != v13) {
        goto LABEL_161;
      }
    }
  }
  if (*(_DWORD *)&buf[24])
  {
    int v14 = *(_DWORD *)(a4 + 24);
    if (v14)
    {
      if (*(_DWORD *)&buf[24] != v14) {
        goto LABEL_161;
      }
    }
  }
  if (*(_DWORD *)&buf[28] && v9 && *(_DWORD *)&buf[28] != v9 || *(_DWORD *)v81 && v8 && *(_DWORD *)v81 != v8) {
    goto LABEL_161;
  }
  uint64_t v66 = result;
  uint64_t v67 = a4;
  if (sub_EBDC((uint64_t)buf, a4))
  {
    BOOL v68 = *(double *)(v67 + 40) >= *(double *)&v81[8];
    if (*(double *)(v67 + 48) > *(double *)&v81[16]) {
      BOOL v68 = 0;
    }
  }
  else
  {
    BOOL v68 = 0;
  }
  uint64_t result = v66;
  a4 = v67;
  if (!v68)
  {
LABEL_161:
    unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * (v4 >> 3);
    if (v15 >= 2)
    {
      unint64_t v16 = &buf[16];
      double v17 = *(double *)(a4 + 40);
      double v18 = *(double *)(a4 + 48);
      double v19 = *(double *)a4;
      int v20 = *(_DWORD *)(a4 + 16);
      int v21 = *(_DWORD *)(a4 + 20);
      int v22 = *(_DWORD *)(a4 + 24);
      int v24 = *(_DWORD *)&buf[8];
      int v23 = *(_DWORD *)&buf[12];
      int v25 = *(_DWORD *)&buf[28];
      int v26 = *(_DWORD *)v81;
      double v27 = (double *)(a2 + 104);
      unint64_t v28 = 2;
      double v30 = *(double *)&v81[8];
      double v29 = *(double *)&v81[16];
      do
      {
        double v31 = *(v27 - 6);
        int v32 = *((_DWORD *)v27 - 10);
        int v33 = *((_DWORD *)v27 - 9);
        int v34 = *((_DWORD *)v27 - 5);
        uint64_t v35 = *((void *)v27 - 2);
        double v36 = *(v27 - 1);
        double v37 = *v27;
        BOOL v38 = v24 == v6;
        BOOL v39 = v32 == v6 && v24 != v6;
        if (v32 == v6) {
          BOOL v38 = v24 != v6;
        }
        int v40 = v17 >= v30;
        if (v18 > v29) {
          int v40 = 0;
        }
        BOOL v41 = v17 >= v36;
        if (v18 > v37) {
          BOOL v41 = 0;
        }
        int v42 = v41 & ~v40;
        BOOL v43 = v40 & !v41;
        if (v38) {
          BOOL v43 = v24 == v6 && v32 != v6;
        }
        else {
          BOOL v39 = v42;
        }
        BOOL v44 = v25 == v9;
        BOOL v45 = v25 != v9;
        int v46 = v34 - v9;
        if (v34 == v9) {
          BOOL v44 = 0;
        }
        else {
          BOOL v45 = 0;
        }
        if (v43)
        {
          BOOL v45 = v39;
          BOOL v44 = v43;
        }
        if (!v39)
        {
          BOOL v39 = v45;
          BOOL v43 = v44;
        }
        BOOL v47 = v26 == v8;
        BOOL v48 = v26 != v8;
        if (v35 == v8) {
          BOOL v47 = 0;
        }
        else {
          BOOL v48 = 0;
        }
        if (v43)
        {
          BOOL v48 = v39;
          BOOL v47 = v43;
        }
        if (v39) {
          BOOL v47 = v43;
        }
        else {
          BOOL v39 = v48;
        }
        BOOL v49 = v23 == v7;
        BOOL v50 = v23 != v7;
        if (v33 == v7) {
          BOOL v49 = 0;
        }
        else {
          BOOL v50 = 0;
        }
        if (v47)
        {
          BOOL v50 = v39;
          BOOL v51 = v47;
        }
        else
        {
          BOOL v51 = v49;
        }
        if (v39) {
          BOOL v52 = v39;
        }
        else {
          BOOL v52 = v50;
        }
        if (v39) {
          BOOL v53 = v47;
        }
        else {
          BOOL v53 = v51;
        }
        if (v52 || v53)
        {
          if (!v52) {
            goto LABEL_136;
          }
          goto LABEL_77;
        }
        if (v17 < v30 || v18 > v29)
        {
          BOOL v55 = v29 >= v17;
          if (v30 > v18) {
            BOOL v55 = 0;
          }
          if (v30 >= v17) {
            double v56 = v30;
          }
          else {
            double v56 = v17;
          }
          if (v18 >= v29) {
            double v57 = v29;
          }
          else {
            double v57 = v18;
          }
          if (v37 < v17 || v36 > v18)
          {
            if (!v55)
            {
              double v60 = v29 - v17;
              if (v29 >= v17) {
                double v60 = v30 - v18;
              }
              double v61 = v37 - v17;
              if (v37 >= v17) {
                double v61 = v36 - v18;
              }
              if (v60 < 0.0 == v61 >= 0.0)
              {
                if (v61 >= 0.0) {
                  goto LABEL_77;
                }
              }
              else if (fabs(v61) < fabs(v60))
              {
                goto LABEL_77;
              }
            }
          }
          else
          {
            if (!v55) {
              goto LABEL_77;
            }
            double v58 = v18 >= v37 ? *v27 : v18;
            double v59 = v36 >= v17 ? *(v27 - 1) : v17;
            if (v58 - v59 > v57 - v56) {
              goto LABEL_77;
            }
          }
        }
        int v54 = v25 - v9;
        if (v25 == v9) {
          goto LABEL_126;
        }
        if ((v46 ^ v54) < 0)
        {
          if (v46 < 0) {
            goto LABEL_126;
          }
        }
        else
        {
          if (v46 < 0) {
            int v46 = v9 - v34;
          }
          if (v54 < 0) {
            int v54 = v9 - v25;
          }
          if (v46 >= v54)
          {
LABEL_126:
            int v62 = v26 - v8;
            if (v26 == v8)
            {
              int v26 = v8;
              goto LABEL_136;
            }
            int v63 = v35 - v8;
            if (((v35 - v8) ^ v62) < 0)
            {
              if (v63 < 0) {
                goto LABEL_136;
              }
            }
            else
            {
              if (v63 < 0) {
                int v63 = v8 - v35;
              }
              if (v62 < 0) {
                int v62 = v8 - v26;
              }
              if (v63 >= v62) {
                goto LABEL_136;
              }
            }
          }
        }
LABEL_77:
        *(double *)buf = *(v27 - 6);
        *(_DWORD *)&buf[8] = v32;
        *(_DWORD *)&unsigned char buf[12] = v33;
        *(double *)unint64_t v16 = *(v27 - 4);
        *((_DWORD *)v16 + 2) = *((_DWORD *)v27 - 6);
        *(_DWORD *)&unsigned char buf[28] = v34;
        *(void *)uint64_t v81 = v35;
        *(double *)&v81[8] = v36;
        *(double *)&v81[16] = v37;
        int v26 = v35;
        if (v31 != 0.0 && v19 != 0.0 && v31 != v19
          || v32 && v6 != 0 && v32 != v6
          || *(_DWORD *)&buf[16] && v20 && *(_DWORD *)&buf[16] != v20
          || *(_DWORD *)&buf[20] && v21 && *(_DWORD *)&buf[20] != v21
          || *(_DWORD *)&buf[24] && v22 && *(_DWORD *)&buf[24] != v22
          || v34 && v9 && v34 != v9
          || v35 && v8 && v35 != v8)
        {
          double v29 = v37;
          double v30 = v36;
          int v25 = v34;
          int v23 = v33;
          int v24 = v32;
        }
        else
        {
          int v73 = v22;
          int v74 = v21;
          int v75 = v20;
          uint64_t v76 = v16;
          unint64_t v77 = v15;
          uint64_t v78 = a4;
          uint64_t v79 = result;
          if (sub_EBDC((uint64_t)buf, a4)) {
            BOOL v65 = v18 <= v37 && v17 >= v36;
          }
          else {
            BOOL v65 = 0;
          }
          double v29 = v37;
          double v30 = v36;
          int v25 = v34;
          int v23 = v33;
          int v24 = v32;
          a4 = v78;
          uint64_t result = v79;
          unint64_t v16 = v76;
          unint64_t v15 = v77;
          int v21 = v74;
          int v20 = v75;
          int v22 = v73;
          if (v65) {
            break;
          }
        }
LABEL_136:
        v27 += 7;
      }
      while (v28++ < v15);
    }
  }
  long long v69 = *(_OWORD *)&buf[16];
  *(_OWORD *)uint64_t result = *(_OWORD *)buf;
  *(_OWORD *)(result + 16) = v69;
  *(_OWORD *)(result + 32) = *(_OWORD *)v81;
  *(void *)(result + 48) = *(void *)&v81[16];
  return result;
}

void sub_320164(_Unwind_Exception *exception_object)
{
}

uint64_t sub_320180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v6 = *((_OWORD *)a4 + 1);
  v12[0] = *(_OWORD *)a4;
  v12[1] = v6;
  uint64_t v13 = a4[4];
  uint64_t v14 = *a4;
  uint64_t v15 = v14;
  uint64_t result = sub_31FB10((uint64_t)v16, a2, a3, (uint64_t)v12);
  long long v8 = v17;
  long long v9 = v18;
  long long v21 = v17;
  long long v22 = v18;
  double v10 = v19;
  double v11 = v20;
  if (v20 > *(double *)a4) {
    double v11 = *(double *)a4;
  }
  if (v19 < *(double *)a4) {
    double v10 = v11;
  }
  *(double *)a1 = v10;
  *(_OWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = v9;
  return result;
}

unint64_t sub_3201FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  int v21 = 1;
  unsigned int v22 = a5;
  long long v23 = *(_OWORD *)sub_3AEE60();
  int v24 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  unint64_t v10 = sub_37FB48(a2, (uint64_t)&v21);
  int v11 = BYTE4(v10);
  if (!BYTE4(v10))
  {
    int v21 = 0;
    unsigned int v22 = a5;
    long long v23 = *(_OWORD *)sub_3AEE60();
    int v24 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    unint64_t v10 = sub_37FB48(a2, (uint64_t)&v21);
    int v11 = BYTE4(v10);
    if (!BYTE4(v10))
    {
      unint64_t v10 = sub_377E58(a3, a5);
      int v11 = BYTE4(v10);
    }
  }
  if (v11) {
    int v12 = v10;
  }
  else {
    int v12 = 0;
  }
  *(_DWORD *)a1 = v12;
  int v21 = 1;
  unsigned int v22 = a5;
  long long v23 = *(_OWORD *)sub_3AEE60();
  int v24 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  unint64_t v13 = sub_37FDA8(a2, (uint64_t)&v21);
  int v14 = BYTE4(v13);
  if (!BYTE4(v13))
  {
    int v21 = 0;
    unsigned int v22 = a5;
    long long v23 = *(_OWORD *)sub_3AEE60();
    int v24 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    unint64_t v13 = sub_37FDA8(a2, (uint64_t)&v21);
    int v14 = BYTE4(v13);
    if (!BYTE4(v13))
    {
      unint64_t v13 = sub_378010(a3, a5);
      int v14 = BYTE4(v13);
    }
  }
  if (v14) {
    int v15 = v13;
  }
  else {
    int v15 = 0;
  }
  *(_DWORD *)(a1 + 4) = v15;
  int v21 = 1;
  unsigned int v22 = a5;
  long long v23 = *(_OWORD *)sub_3AEE60();
  int v24 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  *(void *)(a1 + 8) = sub_380268(a2, (uint64_t)&v21);
  *(unsigned char *)(a1 + 16) = v16;
  if (!v16)
  {
    int v21 = 0;
    unsigned int v22 = a5;
    long long v23 = *(_OWORD *)sub_3AEE60();
    int v24 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    *(void *)(a1 + 8) = sub_380268(a2, (uint64_t)&v21);
    *(unsigned char *)(a1 + 16) = v17;
  }
  uint64_t v18 = sub_378718(a3, a5, a4);
  *(_DWORD *)(a1 + 24) = v18;
  *(unsigned char *)(a1 + 28) = BYTE4(v18);
  uint64_t v19 = sub_378AEC(a3, a5, a4);
  *(_DWORD *)(a1 + 32) = v19;
  *(unsigned char *)(a1 + 36) = BYTE4(v19);
  int v21 = 1;
  unsigned int v22 = a5;
  long long v23 = *(_OWORD *)sub_3AEE60();
  int v24 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  unint64_t result = sub_380008(a2, (uint64_t)&v21);
  *(_DWORD *)(a1 + 40) = result;
  *(unsigned char *)(a1 + 44) = BYTE4(result);
  if (!HIDWORD(result))
  {
    int v21 = 0;
    unsigned int v22 = a5;
    long long v23 = *(_OWORD *)sub_3AEE60();
    int v24 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    unint64_t result = sub_380008(a2, (uint64_t)&v21);
    *(_DWORD *)(a1 + 40) = result;
    *(unsigned char *)(a1 + 44) = BYTE4(result);
    if (!HIDWORD(result))
    {
      unint64_t result = sub_379058(a3, a5);
      *(_DWORD *)(a1 + 40) = result;
      *(unsigned char *)(a1 + 44) = BYTE4(result);
    }
  }
  return result;
}

void sub_320494(uint64_t *a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  uint64_t v6 = a4 + 32;
  uint64_t v7 = 8;
  if (a2) {
    uint64_t v7 = 32;
  }
  else {
    uint64_t v6 = a4 + 8;
  }
  uint64_t v8 = *(void *)(a4 + v7);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v6 + 8) - v8) >> 3) <= a3)
  {
    uint64_t v25 = (os_log_t *)sub_32A48(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      int v28 = 136315394;
      double v29 = "StreamUtilities.cpp";
      __int16 v30 = 1024;
      int v31 = 41;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"invalid stream index\"", (uint8_t *)&v28, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid stream index");
  }
  long long v9 = (void *)(v8 + 24 * a3);
  unint64_t v10 = (void *)v9[1];
  if (v9 != v10)
  {
    uint64_t v11 = a5 + 16;
    int v12 = (uint64_t *)(a5 + 24);
    do
    {
      uint64_t v14 = v10[2];
      unint64_t v13 = (std::__shared_weak_count *)v10[3];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v15 = v12;
      do
      {
        uint64_t v16 = *v15;
        if (v11 == *v15)
        {
          unsigned int v22 = (os_log_t *)sub_32A48(13);
          long long v23 = *v22;
          if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
          {
            int v28 = 136315394;
            double v29 = "StreamUtilities.cpp";
            __int16 v30 = 1024;
            int v31 = 61;
            _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [matchingConnection is NULL]: \"could not find matching connection\"", (uint8_t *)&v28, 0x12u);
          }
          int v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v24, "could not find matching connection");
        }
        if (v13 && (char v17 = std::__shared_weak_count::lock(v13)) != 0)
        {
          uint64_t v18 = v17;
          if (v14)
          {
            uint64_t v19 = v16 + 16;
            if (!sub_242098(v14, (void *)(v16 + 16))) {
              uint64_t v19 = 0;
            }
          }
          else
          {
            uint64_t v19 = 0;
          }
          sub_4636C(v18);
        }
        else
        {
          uint64_t v19 = 0;
        }
        int v15 = (uint64_t *)(v16 + 8);
      }
      while (!v19);
      double v20 = operator new(0x18uLL);
      v20[1] = a1;
      v20[2] = v19;
      uint64_t v21 = *a1;
      void *v20 = *a1;
      *(void *)(v21 + 8) = v20;
      *a1 = (uint64_t)v20;
      ++a1[2];
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
      unint64_t v10 = (void *)v10[1];
    }
    while (v9 != v10);
  }
}

void sub_320774(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

void sub_3207CC(uint64_t a1, int a2, _OWORD *a3, int a4, unsigned int a5, uint64_t a6, unsigned int *a7)
{
  (*(void (**)(unsigned char *__return_ptr))(**(void **)a6 + 264))(v64);
  sub_4188(&v50, (uint64_t *)v64, "", 341);
  if (*(void *)&v64[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v64[8]);
  }
  if (!v50)
  {
    BOOL v38 = (os_log_t *)sub_32A48(13);
    BOOL v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v64 = 136315394;
      *(void *)&v64[4] = "StreamUtilities.cpp";
      *(_WORD *)&v64[12] = 1024;
      *(_DWORD *)&v64[14] = 342;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [physicalStream is NULL]: \"physical stream is NULL\"", v64, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "physical stream is NULL");
  }
  uint64_t v12 = 8;
  if (a4)
  {
    uint64_t v12 = 32;
    uint64_t v13 = a6 + 32;
  }
  else
  {
    uint64_t v13 = a6 + 8;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v13 + 8) - *(void *)(a6 + v12)) >> 3) <= a5)
  {
    BOOL v41 = (os_log_t *)sub_32A48(13);
    int v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v64 = 136315394;
      *(void *)&v64[4] = "StreamUtilities.cpp";
      *(_WORD *)&v64[12] = 1024;
      *(_DWORD *)&v64[14] = 346;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"invalid stream index\"", v64, 0x12u);
    }
    BOOL v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v43, "invalid stream index");
  }
  uint64_t v49 = 0;
  kdebug_trace();
  sub_320494((uint64_t *)v57, a4, a5, a6, (uint64_t)a7);
  if (!v58)
  {
LABEL_51:
    sub_45F50(v57);
    sub_320494((uint64_t *)buf, a4, a5, a6, (uint64_t)a7);
    if (*(void *)&buf[16])
    {
      if (*(void *)&buf[16] == 1) {
        uint64_t v35 = *(uint64_t **)(*(void *)(*(void *)&buf[8] + 16) + 56);
      }
      else {
        uint64_t v35 = &qword_668DD0;
      }
      sub_3201FC((uint64_t)v64, (uint64_t)v35, *((void *)a7 + 5), *a7, a2);
    }
    else
    {
      v64[16] = 0;
      unsigned __int8 v65 = 0;
      LOBYTE(v66) = 0;
      char v67 = 0;
      char v68 = 0;
      char v69 = 0;
      char v70 = 0;
      *(void *)uint64_t v64 = 0;
      v64[8] = 0;
    }
    sub_45F50(buf);
    operator new();
  }
  if (v58 != 1 && (a4 & 1) == 0)
  {
    BOOL v44 = (os_log_t *)sub_32A48(13);
    BOOL v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v64 = 136315394;
      *(void *)&v64[4] = "StreamUtilities.cpp";
      *(_WORD *)&v64[12] = 1024;
      *(_DWORD *)&v64[14] = 385;
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"input stream has more than one associated connection\"", v64, 0x12u);
    }
    int v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "input stream has more than one associated connection");
  }
  uint64_t v14 = (unint64_t *)*((void *)v57[1] + 2);
  if (a4) {
    int v15 = (uint64_t *)(a6 + 32);
  }
  else {
    int v15 = (uint64_t *)(a6 + 8);
  }
  uint64_t v16 = *v15;
  char v17 = (void *)(v16 + 24 * a5);
  if (a4)
  {
    if (v14) {
      uint64_t v18 = (uint64_t *)v14[7];
    }
    else {
      uint64_t v18 = &qword_668DD0;
    }
    sub_24288C((uint64_t *)v64, a2, a3, (void *)(v16 + 24 * a5), (uint64_t)v18, *((void *)a7 + 5), a7, &v49);
    goto LABEL_51;
  }
  uint64_t v19 = (std::__shared_weak_count *)v14[1];
  unint64_t v55 = *v14;
  double v56 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  double v20 = sub_1EDFC0(a6 + 56, &v55);
  std::string __p = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  if ((void *)(a6 + 64) != v20) {
    sub_46B38(&__p, (const void *)v20[6], v20[7], (uint64_t)(v20[7] - v20[6]) >> 2);
  }
  uint64_t v21 = v14[7];
  int v63 = a2;
  sub_24A4F8(v64, a2, a3, v21, v17[1], v17[2], (uint64_t)&__p);
  int v22 = v65;
  if (v65)
  {
    double v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    sub_E46E0(&v60, *(const void **)v64, *(uint64_t *)&v64[8], (uint64_t)(*(void *)&v64[8] - *(void *)v64) >> 3);
    long long v23 = (uint64_t *)v60;
    uint64_t v47 = v61 - (void)v60;
    if ((unint64_t)(v61 - (void)v60) >= 9)
    {
      uint64_t v24 = sub_32A48(20);
      uint64_t v25 = sub_32A48(24);
      char v26 = 0;
      uint64_t v27 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v28 = *(void *)(v24 + 8);
      while (1)
      {
        uint64_t v29 = *(int *)&buf[4 * v27];
        char v30 = v26;
        if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
          break;
        }
        char v26 = 1;
        uint64_t v27 = 1;
        if (v30) {
          goto LABEL_31;
        }
      }
      if ((v28 & v29) == 0) {
        uint64_t v24 = v25;
      }
LABEL_31:
      int v31 = *(NSObject **)v24;
      if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1371;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v47 >> 3;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_INFO, "%25s:%-5d Get DSP properties returned a list of %lu entries. We currently base DSP on the first entry only.", buf, 0x1Cu);
      }
    }
    uint64_t v32 = *v23;
    if (*v23 && *(void *)v32 != *(void *)(v32 + 8) && (unint64_t)(v53 - (void)__p) <= 0xB)
    {
      uint64_t v49 = *v23;
      if (*(unsigned char *)(v32 + 52))
      {
        v59[0] = *(void *)a7;
        v59[1] = v32;
        sub_242CF8();
        sub_88BF8((uint64_t)buf, (uint64_t)v59);
        if (buf[16])
        {
          uint64_t v33 = *(void *)buf;
          if (*(void *)buf) {
            sub_1BAD7C(*(uint64_t *)buf, 1);
          }
          int v34 = *(std::__shared_weak_count **)&buf[8];
          *(void *)&long long v51 = v33;
          *((void *)&v51 + 1) = *(void *)&buf[8];
          if (*(void *)&buf[8])
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
            sub_4636C(v34);
          }
        }
        else
        {
          sub_242D7C(&v51, (uint64_t **)&v60, v17, a7, &v63);
          sub_242CF8();
          sub_88E9C((uint64_t)v59, (uint64_t *)&v51);
        }
      }
      else
      {
        double v36 = (os_log_t *)sub_32A48(24);
        double v37 = *v36;
        if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1399;
          _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_INFO, "%25s:%-5d Creating input DSP Chain, not caching.", buf, 0x12u);
        }
        sub_242D7C(&v51, (uint64_t **)&v60, v17, a7, &v63);
      }
      if (v60) {
        operator delete(v60);
      }
      if (!v65) {
        goto LABEL_47;
      }
      goto LABEL_45;
    }
    operator delete(v23);
  }
  long long v51 = 0uLL;
  if (!v22)
  {
LABEL_47:
    if (__p) {
      operator delete(__p);
    }
    if (v56) {
      std::__shared_weak_count::__release_weak(v56);
    }
    goto LABEL_51;
  }
LABEL_45:
  if (*(void *)v64) {
    operator delete(*(void **)v64);
  }
  goto LABEL_47;
}

void sub_3211F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,uint64_t a23,char a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,std::__shared_weak_count *a42,uint64_t a43,char a44)
{
  if (a20) {
    sub_4636C(a20);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a44 && a41) {
    operator delete(a41);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  sub_45F50(&a26);
  if (a18) {
    sub_4636C(a18);
  }
  _Unwind_Resume(a1);
}

BOOL sub_3213C4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_3213E4(uint64_t a1, void *a2)
{
  *a2 = off_633898;
}

void *sub_321404()
{
  unint64_t result = operator new(0x10uLL);
  void *result = off_633898;
  return result;
}

void sub_32143C()
{
}

BOOL sub_321454(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_321474(uint64_t a1, void *a2)
{
  *a2 = off_633850;
}

void *sub_321494()
{
  unint64_t result = operator new(0x10uLL);
  void *result = off_633850;
  return result;
}

void sub_3214CC()
{
}

uint64_t sub_3214E4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_321558(uint64_t a1, void *a2)
{
  *a2 = off_633808;
}

void *sub_321578()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633808;
  return result;
}

void sub_3215B0()
{
}

uint64_t sub_3215C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_321600(uint64_t a1, void *a2)
{
  *a2 = off_6337C0;
}

void *sub_321620()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6337C0;
  return result;
}

void sub_321658()
{
}

uint64_t sub_321670(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_3216A8(uint64_t a1, void *a2)
{
  *a2 = off_633778;
}

void *sub_3216C8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633778;
  return result;
}

void sub_321700()
{
}

BOOL sub_321718(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_321740(uint64_t a1, void *a2)
{
  *a2 = off_633730;
}

void *sub_321760()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633730;
  return result;
}

void sub_321798()
{
}

uint64_t sub_3217B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_3217E8(uint64_t a1, void *a2)
{
  *a2 = off_6336E8;
}

void *sub_321808()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6336E8;
  return result;
}

void sub_321840()
{
}

std::string *sub_321858@<X0>(const void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  unsigned int v3 = (*(uint64_t (**)(const void *))(*(void *)a1 + 120))(a1);
  std::to_string(&v51, v3);
  uint64_t v4 = std::string::insert(&v51, 0, "id: ", 4uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v52, "; ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v54 = v6->__r_.__value_.__r.__words[2];
  long long __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v54 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v54 >= 0) {
    std::string::size_type v9 = HIBYTE(v54);
  }
  else {
    std::string::size_type v9 = *((void *)&__p + 1);
  }
  std::string::append(a2, p_p, v9);
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  snprintf((char *)&__str, 0x13uLL, "%p", a1);
  sub_21C8C(&v51, (char *)&__str);
  unint64_t v10 = std::string::insert(&v51, 0, "addr: ", 6uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  uint64_t v12 = std::string::append(&v52, "; ", 2uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v54 = v12->__r_.__value_.__r.__words[2];
  long long __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v54 >= 0) {
    uint64_t v14 = (const std::string::value_type *)&__p;
  }
  else {
    uint64_t v14 = (const std::string::value_type *)__p;
  }
  if (v54 >= 0) {
    std::string::size_type v15 = HIBYTE(v54);
  }
  else {
    std::string::size_type v15 = *((void *)&__p + 1);
  }
  std::string::append(a2, v14, v15);
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  (*(void (**)(std::string *__return_ptr, const void *))(*(void *)a1 + 128))(&__str, a1);
  sub_21B7C(&v51, (CFStringRef)__str.__r_.__value_.__l.__data_);
  uint64_t v16 = std::string::insert(&v51, 0, "uid: \"", 6uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  uint64_t v18 = std::string::append(&v52, "\"; ", 3uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v54 = v18->__r_.__value_.__r.__words[2];
  long long __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v54 >= 0) {
    double v20 = (const std::string::value_type *)&__p;
  }
  else {
    double v20 = (const std::string::value_type *)__p;
  }
  if (v54 >= 0) {
    std::string::size_type v21 = HIBYTE(v54);
  }
  else {
    std::string::size_type v21 = *((void *)&__p + 1);
  }
  std::string::append(a2, v20, v21);
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  sub_72924((uint64_t)&__str);
  sub_21C8C(&v46, "{ ");
  char v22 = 0;
  uint64_t v23 = 0;
  __int16 v55 = 256;
  do
  {
    char v45 = v22;
    int v24 = *((unsigned __int8 *)&v55 + v23);
    unsigned int v25 = (*(uint64_t (**)(const void *, void))(*(void *)a1 + 88))(a1, *((unsigned __int8 *)&v55 + v23));
    if (v25)
    {
      uint64_t v26 = 0;
      if (v24) {
        uint64_t v27 = "o/";
      }
      else {
        uint64_t v27 = "i/";
      }
      do
      {
        uint64_t v28 = (unsigned int *)(*(uint64_t (**)(const void *, BOOL, uint64_t))(*(void *)a1 + 96))(a1, v24 != 0, v26);
        std::to_string(&__str, v28[20]);
        uint64_t v29 = std::string::insert(&__str, 0, v27, 2uLL);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        int v31 = std::string::append(&v51, "/", 1uLL);
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        snprintf(__s, 0x13uLL, "%p", v28);
        sub_21C8C(v49, __s);
        if ((v50 & 0x80u) == 0) {
          uint64_t v33 = v49;
        }
        else {
          uint64_t v33 = (void **)v49[0];
        }
        if ((v50 & 0x80u) == 0) {
          std::string::size_type v34 = v50;
        }
        else {
          std::string::size_type v34 = (std::string::size_type)v49[1];
        }
        uint64_t v35 = std::string::append(&v52, (const std::string::value_type *)v33, v34);
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        int64_t v54 = v35->__r_.__value_.__r.__words[2];
        long long __p = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          double v37 = (const std::string::value_type *)&__p;
        }
        else {
          double v37 = (const std::string::value_type *)__p;
        }
        if (v54 >= 0) {
          std::string::size_type v38 = HIBYTE(v54);
        }
        else {
          std::string::size_type v38 = *((void *)&__p + 1);
        }
        std::string::append(&v46, v37, v38);
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)__p);
        }
        if ((char)v50 < 0) {
          operator delete(v49[0]);
        }
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v52.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        uint64_t v26 = (v26 + 1);
        if (!v24 || v26 < v25) {
          std::string::append(&v46, ", ", 2uLL);
        }
      }
      while (v25 != v26);
    }
    char v22 = 1;
    uint64_t v23 = 1;
  }
  while ((v45 & 1) == 0);
  std::string::append(&v46, " }", 2uLL);
  BOOL v39 = std::string::insert(&v46, 0, "streams: ", 9uLL);
  long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  int64_t v48 = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v47 = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (v48 >= 0) {
    BOOL v41 = v47;
  }
  else {
    BOOL v41 = (void **)v47[0];
  }
  if (v48 >= 0) {
    std::string::size_type v42 = HIBYTE(v48);
  }
  else {
    std::string::size_type v42 = (std::string::size_type)v47[1];
  }
  std::string::append(a2, (const std::string::value_type *)v41, v42);
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_321E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (*(char *)(a10 + 23) < 0) {
    operator delete(*(void **)a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_321FF8()
{
  return 1970171760;
}

uint64_t sub_322004(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a1)
  {
    std::string::size_type v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    char v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 552;
    long long v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceCreateIO"
          "ProcIDWithClockedProc: no plug-in\"";
LABEL_21:
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v21, 0x12u);
    goto LABEL_22;
  }
  if (!a3)
  {
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v18;
    if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    char v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 553;
    long long v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inProc is NULL]: \"HP_HardwarePlugIn_DeviceCreateIO"
          "ProcIDWithClockedProc: no IOProc to add\"";
    goto LABEL_21;
  }
  if (!a5)
  {
    long long v19 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      int v24 = 554;
      long long v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outIOProcID is NULL]: \"HP_HardwarePlugIn_DeviceC"
            "reateIOProcIDWithClockedProc: nowhere to put the return value\"";
      goto LABEL_21;
    }
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  std::string::size_type v9 = (_DWORD *)sub_33438(a2);
  if (!v9 || (int v10 = v9[3], v10 != 1633773415) && v10 != 1633969526)
  {
    uint64_t v12 = (os_log_t *)sub_32A48(13);
    long long v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      int v24 = 559;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceCreateIOProcIDWithClockedProc: no device with given ID\"", (uint8_t *)&v21, 0x12u);
    }
    uint64_t v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v14 = &off_6414D8;
    v14[2] = 560227702;
  }
  *a5 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v9 + 288))(v9, a3, a4);
  return 0;
}

void sub_32231C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x3220B8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_32237C(uint64_t a1, void *a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  if (!a1)
  {
    std::string::size_type v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    char v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 519;
    long long v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceCreateIO"
          "ProcIDWithBlock: no plug-in\"";
LABEL_21:
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v21, 0x12u);
    goto LABEL_22;
  }
  if (!a5)
  {
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v18;
    if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    char v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 520;
    long long v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"HP_HardwarePlugIn_DeviceCreateIOProcIDWithBlock: "
          "no IOBlock to add\"";
    goto LABEL_21;
  }
  if (!a2)
  {
    long long v19 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      int v24 = 521;
      long long v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outIOProcID is NULL]: \"HP_HardwarePlugIn_DeviceC"
            "reateIOProcIDWithBlock: nowhere to put the return value\"";
      goto LABEL_21;
    }
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  std::string::size_type v9 = (_DWORD *)sub_33438(a3);
  if (!v9 || (int v10 = v9[3], v10 != 1633773415) && v10 != 1633969526)
  {
    uint64_t v12 = (os_log_t *)sub_32A48(13);
    long long v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      int v24 = 526;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceCreateIOProcIDWithBlock: no device with given ID\"", (uint8_t *)&v21, 0x12u);
    }
    uint64_t v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v14 = &off_6414D8;
    v14[2] = 560227702;
  }
  *a2 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v9 + 296))(v9, a4, a5);
  return 0;
}

void sub_322694(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x322430);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3226F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a1)
  {
    uint64_t v12 = (os_log_t *)sub_32A48(13);
    long long v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "HP_HardwarePlugInInterface.cpp";
      __int16 v17 = 1024;
      int v18 = 592;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceDestroyIOProcID: no plug-in\"", (uint8_t *)&v15, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  long long v5 = (_DWORD *)sub_33438(a2);
  if (!v5 || ((int v6 = v5[3], v6 != 1633773415) ? (v7 = v6 == 1633969526) : (v7 = 1), !v7))
  {
    std::string::size_type v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        int v15 = 136315394;
        uint64_t v16 = "HP_HardwarePlugInInterface.cpp";
        __int16 v17 = 1024;
        int v18 = 596;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceAddIOProc: no device with given ID\"", (uint8_t *)&v15, 0x12u);
      }
    }
    long long v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v11 = &off_6414D8;
    v11[2] = 560227702;
  }
  (*(void (**)(_DWORD *, uint64_t))(*(void *)v5 + 304))(v5, a3);
  return 0;
}

void sub_322930(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x322788);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_32297C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a1)
  {
    int v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    char v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 487;
    __int16 v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceCreateIO"
          "ProcID: no plug-in\"";
LABEL_21:
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v21, 0x12u);
    goto LABEL_22;
  }
  if (!a3)
  {
    int v18 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v18;
    if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v21 = 136315394;
    char v22 = "HP_HardwarePlugInInterface.cpp";
    __int16 v23 = 1024;
    int v24 = 488;
    __int16 v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inProc is NULL]: \"HP_HardwarePlugIn_DeviceCreateIO"
          "ProcID: no IOProc to add\"";
    goto LABEL_21;
  }
  if (!a5)
  {
    long long v19 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      int v24 = 489;
      __int16 v17 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outIOProcID is NULL]: \"HP_HardwarePlugIn_DeviceC"
            "reateIOProcID: nowhere to put the return value\"";
      goto LABEL_21;
    }
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  std::string::size_type v9 = (_DWORD *)sub_33438(a2);
  if (!v9 || (int v10 = v9[3], v10 != 1633773415) && v10 != 1633969526)
  {
    uint64_t v12 = (os_log_t *)sub_32A48(13);
    long long v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "HP_HardwarePlugInInterface.cpp";
      __int16 v23 = 1024;
      int v24 = 493;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceCreateIOProcID: no device with given ID\"", (uint8_t *)&v21, 0x12u);
    }
    uint64_t v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v14 = &off_6414D8;
    v14[2] = 560227702;
  }
  *a5 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v9 + 280))(v9, a3, a4);
  return 0;
}

void sub_322C94(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x322A30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_322CF4(uint64_t a1, unsigned int a2)
{
  if (!a1)
  {
    long long v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "HP_HardwarePlugInInterface.cpp";
      __int16 v13 = 1024;
      int v14 = 212;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_ObjectShow: no plug-in\"", (uint8_t *)&v11, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  uint64_t v3 = sub_33438(a2);
  if (!v3)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    std::string::size_type v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "HP_HardwarePlugInInterface.cpp";
      __int16 v13 = 1024;
      int v14 = 216;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theObject is NULL]: \"HP_HardwarePlugIn_ObjectShow: no object with given ID\"", (uint8_t *)&v11, 0x12u);
    }
    int v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v10 = &off_6414D8;
    v10[2] = 560947818;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
}

void sub_322EF8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x322D54);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_322F24(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "HP_HardwarePlugInInterface.cpp";
      __int16 v7 = 1024;
      int v8 = 158;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_Initialize: no plug-in\"", (uint8_t *)&v5, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  (*(void (**)(void))(*(void *)(a1 - 80) + 104))();
  return 0;
}

void sub_323060(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x322F74);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3230A4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    __int16 v13 = (os_log_t *)sub_32A48(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      long long v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 888;
      int v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceGetNea"
            "restStartTime: no plug-in\"";
LABEL_17:
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v18, 0x12u);
    }
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (!a3)
  {
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    int v14 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      long long v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 889;
      int v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [ioRequestedStartTime is NULL]: \"HP_HardwarePlugI"
            "n_DeviceGetNearestStartTime: no time stamp\"";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  sub_3A8A8();
  __int16 v7 = (_DWORD *)sub_33438(a2);
  if (!v7 || (int v8 = v7[3], v8 != 1633773415) && v8 != 1633969526)
  {
    int v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      long long v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 893;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceGetNearestStartTime: no device with given ID\"", (uint8_t *)&v18, 0x12u);
    }
    uint64_t v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v12 = &off_6414D8;
    _OWORD v12[2] = 560227702;
  }
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v7 + 624))(v7, a3, a4);
  return 0;
}

void sub_323354(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x32314CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3233A8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1)
  {
    uint64_t v27 = (os_log_t *)sub_32A48(13);
    uint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v33 = 1024;
      int v34 = 717;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceStartAtTime: no plug-in\"", buf, 0x12u);
    }
    int v26 = 1852797029;
LABEL_34:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v26;
  }
  sub_3A8A8();
  uint64_t v9 = sub_33438(a2);
  if (!v9 || ((uint64_t v10 = v9, v11 = *(_DWORD *)(v9 + 12), v11 != 1633773415) ? (v12 = v11 == 1633969526) : (v12 = 1), !v12))
  {
    int v24 = (os_log_t *)sub_32A48(13);
    unsigned int v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
        __int16 v33 = 1024;
        int v34 = 721;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceStartAtTime: no device with given ID\"", buf, 0x12u);
      }
    }
    int v26 = 560227702;
    goto LABEL_34;
  }
  uint64_t v13 = sub_32A48(5);
  uint64_t v14 = sub_32A48(31);
  char v15 = 0;
  uint64_t v16 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v17 = *(void *)(v13 + 8);
  while (1)
  {
    uint64_t v18 = *(int *)&buf[4 * v16];
    char v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    char v15 = 1;
    uint64_t v16 = 1;
    if (v19) {
      goto LABEL_14;
    }
  }
  if ((v17 & v18) == 0) {
    uint64_t v13 = v14;
  }
LABEL_14:
  __int16 v20 = *(NSObject **)v13;
  if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 96))(__p, v10);
    int v21 = v31 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "HP_HardwarePlugInInterface.cpp";
    __int16 v33 = 1024;
    int v34 = 724;
    __int16 v35 = 2048;
    uint64_t v36 = a3;
    __int16 v37 = 2080;
    std::string::size_type v38 = v21;
    _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Client request to start IO proc ID %p on VAD: '%s'.", buf, 0x26u);
    if (v31 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v22 = *(void *)v10;
  if (a3 && a4) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 360))(v10, a3, a4, a5);
  }
  else {
    (*(void (**)(uint64_t, uint64_t))(v22 + 344))(v10, a3);
  }
  return 0;
}

void sub_323740(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf, __int16 a17, __int16 a18, long long a19)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v21 = (os_log_t *)sub_32A48(5);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      if (!v19)
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 739;
        a18 = 2048;
        WORD2(a19) = 2080;
        *(void *)((char *)&a19 + 6) = "unknown";
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.", (uint8_t *)&buf, 0x26u);
        goto LABEL_20;
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v19 + 96))(&__p, v19);
      __int16 v23 = a15 >= 0 ? &__p : (void **)__p;
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 739;
      a18 = 2048;
      WORD2(a19) = 2080;
      *(void *)((char *)&a19 + 6) = v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.", (uint8_t *)&buf, 0x26u);
      if (a15 < 0) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    int v24 = (os_log_t *)sub_32A48(5);
    unsigned int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      if (!v19)
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 746;
        a18 = 2048;
        WORD2(a19) = 2080;
        *(void *)((char *)&a19 + 6) = "unknown";
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.", (uint8_t *)&buf, 0x26u);
        goto LABEL_20;
      }
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v19 + 96))(&__p, v19);
      int v26 = a15 >= 0 ? &__p : (void **)__p;
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HP_HardwarePlugInInterface.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 746;
      a18 = 2048;
      WORD2(a19) = 2080;
      *(void *)((char *)&a19 + 6) = v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to start IO proc ID %p on VAD: '%s'.", (uint8_t *)&buf, 0x26u);
      if (a15 < 0) {
LABEL_18:
      }
        operator delete(__p);
    }
  }
LABEL_20:
  __cxa_end_catch();
  JUMPOUT(0x3235D0);
}

uint64_t sub_323A70(uint64_t a1, unsigned int a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    uint64_t v22 = (os_log_t *)sub_32A48(13);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      int v26 = "HP_HardwarePlugInInterface.cpp";
      __int16 v27 = 1024;
      int v28 = 1182;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_StreamSetProperty: no plug-in\"", (uint8_t *)&v25, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  uint64_t v13 = (_DWORD *)sub_33438(a2);
  uint64_t v14 = v13;
  if (!v13 || v13[3] != 1634956402)
  {
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    __int16 v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      int v26 = "HP_HardwarePlugInInterface.cpp";
      __int16 v27 = 1024;
      int v28 = 1186;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theStream is NULL]: \"HP_HardwarePlugIn_StreamSetProperty: no device with given ID\"", (uint8_t *)&v25, 0x12u);
    }
    int v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v21 = &off_6414D8;
    v21[2] = 560947818;
  }
  uint64_t v15 = (*(uint64_t (**)(_DWORD *))(*(void *)v13 + 16))(v13);
  uint64_t v16 = v15;
  if (v15) {
    int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
  }
  else {
    int v17 = 0;
  }
  int v25 = a5;
  LODWORD(v26) = 1735159650;
  HIDWORD(v26) = a4;
  (*(void (**)(_DWORD *, int *, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 64))(v14, &v25, 0, 0, a6, a7, a3);
  if (v16 && v17) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  return 0;
}

void sub_323DA4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x323BE8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_323E1C(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  if (!a1)
  {
    __int16 v20 = (os_log_t *)sub_32A48(13);
    int v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      int v26 = "HP_HardwarePlugInInterface.cpp";
      __int16 v27 = 1024;
      int v28 = 1133;
      uint64_t v22 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_StreamGetPro"
            "perty: no plug-in\"";
LABEL_22:
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, v22, (uint8_t *)&v25, 0x12u);
    }
LABEL_23:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (!a5)
  {
    __int16 v23 = (os_log_t *)sub_32A48(13);
    int v21 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      int v26 = "HP_HardwarePlugInInterface.cpp";
      __int16 v27 = 1024;
      int v28 = 1134;
      uint64_t v22 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [ioPropertyDataSize is NULL]: \"HP_HardwarePlugIn_"
            "StreamGetProperty: no data size\"";
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  sub_3A8A8();
  int v11 = (_DWORD *)sub_33438(a2);
  BOOL v12 = v11;
  if (!v11 || v11[3] != 1634956402)
  {
    int v17 = (os_log_t *)sub_32A48(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v25 = 136315394;
      int v26 = "HP_HardwarePlugInInterface.cpp";
      __int16 v27 = 1024;
      int v28 = 1138;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theStream is NULL]: \"HP_HardwarePlugIn_StreamGetProperty: no device with given ID\"", (uint8_t *)&v25, 0x12u);
    }
    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = &off_6414D8;
    v19[2] = 560947818;
  }
  uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)v11 + 16))(v11);
  uint64_t v14 = v13;
  if (v13) {
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
  }
  else {
    int v15 = 0;
  }
  int v25 = a4;
  LODWORD(v26) = 1735159650;
  HIDWORD(v26) = a3;
  (*(void (**)(_DWORD *, int *, void, void, uint64_t, uint64_t))(*(void *)v12 + 56))(v12, &v25, 0, 0, a5, a6);
  if (v14 && v15) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  return 0;
}

void sub_3241A0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x323F8CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_324220(uint64_t a1, unsigned int a2, int a3, int a4, _DWORD *a5, unsigned char *a6)
{
  if (!a1)
  {
    __int16 v20 = (os_log_t *)sub_32A48(13);
    int v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v28 = "HP_HardwarePlugInInterface.cpp";
      __int16 v29 = 1024;
      int v30 = 1077;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_StreamGetPropertyInfo: no plug-in\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  int v11 = (_DWORD *)sub_33438(a2);
  BOOL v12 = v11;
  if (!v11 || v11[3] != 1634956402)
  {
    int v17 = (os_log_t *)sub_32A48(13);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v28 = "HP_HardwarePlugInInterface.cpp";
      __int16 v29 = 1024;
      int v30 = 1081;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theStream is NULL]: \"HP_HardwarePlugIn_StreamGetPropertyInfo: no device with given ID\"", buf, 0x12u);
    }
    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = &off_6414D8;
    v19[2] = 560947818;
  }
  uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)v11 + 16))(v11);
  uint64_t v14 = v13;
  if (v13) {
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
  }
  else {
    int v15 = 0;
  }
  v26[0] = a4;
  v26[1] = 1735159650;
  v26[2] = a3;
  if (((*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)v12 + 32))(v12, v26) & 1) == 0)
  {
    __int16 v23 = (os_log_t *)sub_32A48(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v28 = "HP_HardwarePlugInInterface.cpp";
      __int16 v29 = 1024;
      int v30 = 1096;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"HP_HardwarePlugIn_StreamGetPropertyInfo: no such property\"", buf, 0x12u);
    }
    int v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v25 = &off_6414D8;
    _OWORD v25[2] = 2003332927;
  }
  if (a5) {
    *a5 = (*(uint64_t (**)(_DWORD *, _DWORD *, void, void))(*(void *)v12 + 48))(v12, v26, 0, 0);
  }
  if (a6) {
    *a6 = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)v12 + 40))(v12, v26);
  }
  if (v14 && v15) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  return 0;
}

void sub_324668(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x3243C0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3246E4(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    __int16 v27 = (os_log_t *)sub_32A48(13);
    int v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      int v30 = 136315394;
      char v31 = "HP_HardwarePlugInInterface.cpp";
      __int16 v32 = 1024;
      int v33 = 1026;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceSetProperty: no plug-in\"", (uint8_t *)&v30, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  int v15 = (_DWORD *)sub_33438(a2);
  uint64_t v16 = v15;
  if (!v15 || ((v17 = v15[3], v17 != 1633773415) ? (BOOL v18 = v17 == 1633969526) : (BOOL v18 = 1), !v18))
  {
    int v24 = (os_log_t *)sub_32A48(13);
    int v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        int v30 = 136315394;
        char v31 = "HP_HardwarePlugInInterface.cpp";
        __int16 v32 = 1024;
        int v33 = 1030;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceSetProperty: no device with given ID\"", (uint8_t *)&v30, 0x12u);
      }
    }
    int v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v26 = &off_6414D8;
    v26[2] = 560947818;
  }
  uint64_t v19 = (*(uint64_t (**)(_DWORD *))(*(void *)v15 + 16))(v15);
  uint64_t v20 = v19;
  if (v19) {
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
  }
  else {
    int v21 = 0;
  }
  if (a5) {
    int v22 = 1768845428;
  }
  else {
    int v22 = 1869968496;
  }
  int v30 = a6;
  char v31 = (const char *)__PAIR64__(a4, v22);
  (*(void (**)(_DWORD *, int *, void, void, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 64))(v16, &v30, 0, 0, a7, a8, a3);
  if (v20 && v21) {
    (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
  }
  return 0;
}

void sub_324A38(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x32487CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_324AB0(uint64_t a1, unsigned int a2, unsigned int a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  if (!a1)
  {
    int v24 = (os_log_t *)sub_32A48(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      int v30 = "HP_HardwarePlugInInterface.cpp";
      __int16 v31 = 1024;
      int v32 = 976;
      int v26 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceGetPro"
            "perty: no plug-in\"";
LABEL_26:
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&v29, 0x12u);
    }
LABEL_27:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (!a6)
  {
    __int16 v27 = (os_log_t *)sub_32A48(13);
    int v25 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      int v30 = "HP_HardwarePlugInInterface.cpp";
      __int16 v31 = 1024;
      int v32 = 977;
      int v26 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [ioPropertyDataSize is NULL]: \"HP_HardwarePlugIn_"
            "DeviceGetProperty: no data size\"";
      goto LABEL_26;
    }
    goto LABEL_27;
  }
  sub_3A8A8();
  uint64_t v13 = (_DWORD *)sub_33438(a2);
  uint64_t v14 = v13;
  if (!v13 || (int v15 = v13[3], v15 != 1633773415) && v15 != 1633969526)
  {
    int v21 = (os_log_t *)sub_32A48(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      int v30 = "HP_HardwarePlugInInterface.cpp";
      __int16 v31 = 1024;
      int v32 = 981;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceGetProperty: no device with given ID\"", (uint8_t *)&v29, 0x12u);
    }
    __int16 v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v23 = &off_6414D8;
    v23[2] = 560947818;
  }
  uint64_t v16 = (*(uint64_t (**)(_DWORD *))(*(void *)v13 + 16))(v13);
  uint64_t v17 = v16;
  if (v16) {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 16))(v16);
  }
  else {
    int v18 = 0;
  }
  if (a4) {
    int v19 = 1768845428;
  }
  else {
    int v19 = 1869968496;
  }
  int v29 = a5;
  int v30 = (const char *)__PAIR64__(a3, v19);
  (*(void (**)(_DWORD *, int *, void, void, uint64_t, uint64_t))(*(void *)v14 + 56))(v14, &v29, 0, 0, a6, a7);
  if (v17 && v18) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  return 0;
}

void sub_324E60(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x324C48);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_324EE0(uint64_t a1, unsigned int a2, int a3, int a4, int a5, _DWORD *a6, unsigned char *a7)
{
  if (!a1)
  {
    int v25 = (os_log_t *)sub_32A48(13);
    int v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v33 = "HP_HardwarePlugInInterface.cpp";
      __int16 v34 = 1024;
      int v35 = 919;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceGetPropertyInfo: no plug-in\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  uint64_t v13 = (_DWORD *)sub_33438(a2);
  uint64_t v14 = v13;
  if (!v13 || ((int v15 = v13[3], v15 != 1633773415) ? (v16 = v15 == 1633969526) : (v16 = 1), !v16))
  {
    int v22 = (os_log_t *)sub_32A48(13);
    __int16 v23 = *v22;
    if (*v22)
    {
      if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        int v33 = "HP_HardwarePlugInInterface.cpp";
        __int16 v34 = 1024;
        int v35 = 923;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadObjectError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceGetPropertyInfo: no device with given ID\"", buf, 0x12u);
      }
    }
    int v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v24 = &off_6414D8;
    v24[2] = 560947818;
  }
  uint64_t v17 = (*(uint64_t (**)(_DWORD *))(*(void *)v13 + 16))(v13);
  uint64_t v18 = v17;
  if (v17) {
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
  }
  else {
    int v19 = 0;
  }
  if (a4) {
    int v20 = 1768845428;
  }
  else {
    int v20 = 1869968496;
  }
  v31[0] = a5;
  v31[1] = v20;
  v31[2] = a3;
  if (((*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)v14 + 32))(v14, v31) & 1) == 0)
  {
    int v28 = (os_log_t *)sub_32A48(13);
    int v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v33 = "HP_HardwarePlugInInterface.cpp";
      __int16 v34 = 1024;
      int v35 = 939;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"HP_HardwarePlugIn_DeviceGetPropertyInfo: no such property\"", buf, 0x12u);
    }
    int v30 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v30 = &off_6414D8;
    v30[2] = 2003332927;
  }
  if (a6) {
    *a6 = (*(uint64_t (**)(_DWORD *, _DWORD *, void, void))(*(void *)v14 + 48))(v14, v31, 0, 0);
  }
  if (a7) {
    *a7 = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(void *)v14 + 40))(v14, v31);
  }
  if (v18 && v19) {
    (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
  }
  return 0;
}

void sub_325350(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x3250A4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3253CC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    uint64_t v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v19 = 136315394;
    int v20 = "HP_HardwarePlugInInterface.cpp";
    __int16 v21 = 1024;
    int v22 = 858;
    int v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceTranslat"
          "eTime: no plug-in\"";
LABEL_21:
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v19, 0x12u);
    goto LABEL_22;
  }
  if (!a3)
  {
    BOOL v16 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v16;
    if (!*v16 || !os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v19 = 136315394;
    int v20 = "HP_HardwarePlugInInterface.cpp";
    __int16 v21 = 1024;
    int v22 = 859;
    int v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inTime is NULL]: \"HP_HardwarePlugIn_DeviceTranslat"
          "eTime: no input time stamp\"";
    goto LABEL_21;
  }
  if (!a4)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      int v20 = "HP_HardwarePlugInInterface.cpp";
      __int16 v21 = 1024;
      int v22 = 860;
      int v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outTime is NULL]: \"HP_HardwarePlugIn_DeviceTrans"
            "lateTime: no place for the return data\"";
      goto LABEL_21;
    }
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  __int16 v7 = (_DWORD *)sub_33438(a2);
  if (!v7 || (int v8 = v7[3], v8 != 1633773415) && v8 != 1633969526)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      int v20 = "HP_HardwarePlugInInterface.cpp";
      __int16 v21 = 1024;
      int v22 = 864;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceTranslateTime: no device with given ID\"", (uint8_t *)&v19, 0x12u);
    }
    BOOL v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v12 = &off_6414D8;
    _OWORD v12[2] = 560227702;
  }
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v7 + 616))(v7, a3, a4);
  return 0;
}

void sub_3256DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x325478);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_325738(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a1)
  {
    int v11 = (os_log_t *)sub_32A48(13);
    BOOL v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "HP_HardwarePlugInInterface.cpp";
      __int16 v18 = 1024;
      int v19 = 829;
      uint64_t v13 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceGetCur"
            "rentTime: no plug-in\"";
LABEL_17:
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v16, 0x12u);
    }
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (!a3)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    BOOL v12 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "HP_HardwarePlugInInterface.cpp";
      __int16 v18 = 1024;
      int v19 = 830;
      uint64_t v13 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outTime is NULL]: \"HP_HardwarePlugIn_DeviceGetCu"
            "rrentTime: no place for the return data\"";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  sub_3A8A8();
  int v5 = (_DWORD *)sub_33438(a2);
  if (!v5 || (int v6 = v5[3], v6 != 1633773415) && v6 != 1633969526)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "HP_HardwarePlugInInterface.cpp";
      __int16 v18 = 1024;
      int v19 = 834;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceGetCurrentTime: no device with given ID\"", (uint8_t *)&v16, 0x12u);
    }
    uint64_t v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v10 = &off_6414D8;
    v10[2] = 560227702;
  }
  (*(void (**)(_DWORD *, uint64_t))(*(void *)v5 + 608))(v5, a3);
  return 0;
}

void sub_3259D8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x3257D4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_325A2C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    uint64_t v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v19 = 136315394;
    int v20 = "HP_HardwarePlugInInterface.cpp";
    __int16 v21 = 1024;
    int v22 = 799;
    int v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceRead: no plug-in\"";
LABEL_21:
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v19, 0x12u);
    goto LABEL_22;
  }
  if (!a3)
  {
    int v16 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v16;
    if (!*v16 || !os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR)) {
      goto LABEL_22;
    }
    int v19 = 136315394;
    int v20 = "HP_HardwarePlugInInterface.cpp";
    __int16 v21 = 1024;
    int v22 = 800;
    int v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inStartTime is NULL]: \"HP_HardwarePlugIn_DeviceRea"
          "d: no start time\"";
    goto LABEL_21;
  }
  if (!a4)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      int v20 = "HP_HardwarePlugInInterface.cpp";
      __int16 v21 = 1024;
      int v22 = 801;
      int v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outData is NULL]: \"HP_HardwarePlugIn_DeviceRead:"
            " no place for the data\"";
      goto LABEL_21;
    }
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  sub_3A8A8();
  __int16 v7 = (_DWORD *)sub_33438(a2);
  if (!v7 || (int v8 = v7[3], v8 != 1633773415) && v8 != 1633969526)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      int v20 = "HP_HardwarePlugInInterface.cpp";
      __int16 v21 = 1024;
      int v22 = 805;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceRead: no device with given ID\"", (uint8_t *)&v19, 0x12u);
    }
    BOOL v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v12 = &off_6414D8;
    _OWORD v12[2] = 560227702;
  }
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v7 + 536))(v7, a3, a4);
  return 0;
}

void sub_325D3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x325AD8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_325D98(uint64_t a1, unsigned int a2, const void *a3)
{
  if (!a1)
  {
    __int16 v21 = (os_log_t *)sub_32A48(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 136315394;
      *(void *)&__p[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v25 = 1024;
      int v26 = 762;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceStop: no plug-in\"", __p, 0x12u);
    }
    int v20 = 1852797029;
LABEL_28:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v20;
  }
  sub_3A8A8();
  uint64_t v5 = sub_33438(a2);
  if (!v5 || ((uint64_t v6 = v5, v7 = *(_DWORD *)(v5 + 12), v7 != 1633773415) ? (v8 = v7 == 1633969526) : (v8 = 1), !v8))
  {
    __int16 v18 = (os_log_t *)sub_32A48(13);
    int v19 = *v18;
    if (*v18)
    {
      if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long __p = 136315394;
        *(void *)&__p[4] = "HP_HardwarePlugInInterface.cpp";
        __int16 v25 = 1024;
        int v26 = 766;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceStop: no device with given ID\"", __p, 0x12u);
      }
    }
    int v20 = 560227702;
    goto LABEL_28;
  }
  uint64_t v9 = sub_32A48(5);
  uint64_t v10 = sub_32A48(31);
  char v11 = 0;
  uint64_t v12 = 0;
  *(void *)long long __p = 0x100000002;
  uint64_t v13 = *(void *)(v9 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&__p[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
      break;
    }
    char v11 = 1;
    uint64_t v12 = 1;
    if (v15) {
      goto LABEL_14;
    }
  }
  if ((v13 & v14) == 0) {
    uint64_t v9 = v10;
  }
LABEL_14:
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v6 + 96))(__p, v6);
  if (v27 >= 0) {
    int v16 = __p;
  }
  else {
    int v16 = *(const char **)__p;
  }
  sub_6974(3, v9, (uint64_t)"", 769, (uint64_t)"", "Client request to stop IO proc ID %p on VAD: '%s'.", a3, v16);
  if (v27 < 0) {
    operator delete(*(void **)__p);
  }
  (*(void (**)(uint64_t, const void *))(*(void *)v6 + 376))(v6, a3);
  return 0;
}

#error "326220: call analysis failed (funcsize=88)"

uint64_t sub_3262C0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a1)
  {
    char v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "HP_HardwarePlugInInterface.cpp";
      __int16 v18 = 1024;
      int v19 = 649;
      uint64_t v13 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceRemove"
            "IOProc: no plug-in\"";
LABEL_17:
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v16, 0x12u);
    }
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (!a3)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "HP_HardwarePlugInInterface.cpp";
      __int16 v18 = 1024;
      int v19 = 650;
      uint64_t v13 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inProc is NULL]: \"HP_HardwarePlugIn_DeviceRemove"
            "IOProc: no IOProc to remove\"";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  sub_3A8A8();
  uint64_t v5 = (_DWORD *)sub_33438(a2);
  if (!v5 || (int v6 = v5[3], v6 != 1633773415) && v6 != 1633969526)
  {
    BOOL v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      uint64_t v17 = "HP_HardwarePlugInInterface.cpp";
      __int16 v18 = 1024;
      int v19 = 654;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceRemoveIOProc: no device with given ID\"", (uint8_t *)&v16, 0x12u);
    }
    uint64_t v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v10 = &off_6414D8;
    v10[2] = 560227702;
  }
  (*(void (**)(_DWORD *, uint64_t))(*(void *)v5 + 328))(v5, a3);
  return 0;
}

void sub_326560(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x32635CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3265B4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
  {
    uint64_t v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      int v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 620;
      char v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_DeviceAddIOP"
            "roc: no plug-in\"";
LABEL_17:
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v18, 0x12u);
    }
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (!a3)
  {
    int v16 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      int v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 621;
      char v15 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inProc is NULL]: \"HP_HardwarePlugIn_DeviceAddIOP"
            "roc: no IOProc to add\"";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  sub_3A8A8();
  int v7 = (_DWORD *)sub_33438(a2);
  if (!v7 || (int v8 = v7[3], v8 != 1633773415) && v8 != 1633969526)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    char v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      int v19 = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 625;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadDeviceError) [theDevice is NULL]: \"HP_HardwarePlugIn_DeviceAddIOProc: no device with given ID\"", (uint8_t *)&v18, 0x12u);
    }
    uint64_t v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v12 = &off_6414D8;
    _OWORD v12[2] = 560227702;
  }
  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v7 + 312))(v7, a3, a4);
  return 0;
}

void sub_326864(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x32665CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3268B8(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "HP_HardwarePlugInInterface.cpp";
      __int16 v7 = 1024;
      int v8 = 185;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_Teardown: no plug-in\"", (uint8_t *)&v5, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  (*(void (**)(void))(*(void *)(a1 - 80) + 112))();
  return 0;
}

void sub_3269F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x326908);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_326A38(uint64_t a1)
{
  if (a1) {
    return 0;
  }
  uint64_t v1 = 1852797029;
  uint64_t v3 = (os_log_t *)sub_32A48(13);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    int v6 = "HP_HardwarePlugInInterface.cpp";
    __int16 v7 = 1024;
    int v8 = 144;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d HP_HardwarePlugIn_Initialize: no plug-in", (uint8_t *)&v5, 0x12u);
  }
  return v1;
}

uint64_t sub_326B0C(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "HP_HardwarePlugInInterface.cpp";
      __int16 v7 = 1024;
      int v8 = 66;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_Release: no plug-in\"", (uint8_t *)&v5, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 - 80) + 128))();
}

void sub_326C40(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x326B58);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_326C68(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "HP_HardwarePlugInInterface.cpp";
      __int16 v7 = 1024;
      int v8 = 38;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_AddRef: no plug-in\"", (uint8_t *)&v5, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 - 80) + 120))();
}

void sub_326D9C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x326CB4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_326DC4(uint64_t a1, CFUUIDBytes a2, void *a3)
{
  if (!a1)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    char v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cf2 = 136315394;
      *(void *)&cf2[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 95;
      int v16 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [inSelf is NULL]: \"HP_HardwarePlugIn_QueryInterfa"
            "ce: no plug-in\"";
LABEL_19:
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, v16, cf2, 0x12u);
    }
LABEL_20:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (!a3)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    char v15 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cf2 = 136315394;
      *(void *)&cf2[4] = "HP_HardwarePlugInInterface.cpp";
      __int16 v20 = 1024;
      int v21 = 96;
      int v16 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError) [outInterface is NULL]: \"HP_HardwarePlugIn_QueryI"
            "nterface: no place to store the return value\"";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  *a3 = 0;
  *(void *)cf2 = CFUUIDCreateFromUUIDBytes(0, a2);
  cf2[8] = 1;
  CFUUIDRef v5 = CFUUIDGetConstantUUIDWithBytes(0, 0x40u, 0x67u, 0x8Cu, 0x4Bu, 0x3Fu, 0, 0x41u, 0xF7u, 0xB1u, 0xD4u, 0xCAu, 0xF9u, 0xCEu, 0xBu, 0xB4u, 0xCFu);
  if (CFEqual(v5, *(CFTypeRef *)cf2)
    || (CFUUIDRef v6 = CFUUIDGetConstantUUIDWithBytes(0, 0x47u, 2u, 0x31u, 0x57u, 0xCu, 0x55u, 0x44u, 0xAAu, 0x89u, 0x96u, 0xB8u, 0x1Fu, 0x69u, 0xAEu, 0x87u, 0x6Eu), CFEqual(v6, *(CFTypeRef *)cf2))|| (v7 = CFUUIDGetConstantUUIDWithBytes(
               0,
               0xE9u,
               0x6Cu,
               0x3Eu,
               0x92u,
               0xE7u,
               0x45u,
               0x4Cu,
               0xB7u,
               0xBAu,
               0x91u,
               0xB3u,
               0x3Cu,
               0x68u,
               0xF2u,
               0xF0u,
               0x26u),
        CFEqual(v7, *(CFTypeRef *)cf2))
    || (CFUUIDRef v8 = CFUUIDGetConstantUUIDWithBytes(0, 0x38u, 0xD7u, 0x8Au, 0x18u, 0x77u, 0xA5u, 0x11u, 0xD8u, 0xB8u, 0xB8u, 0, 0xAu, 0x95u, 0x88u, 0x78u, 0x7Eu), CFEqual(v8, *(CFTypeRef *)cf2))|| (v9 = CFUUIDGetConstantUUIDWithBytes(
               0,
               0x5Du,
               0x80u,
               0xCBu,
               0x6Cu,
               0x48u,
               0x4Fu,
               0x11u,
               0xD7u,
               0x85u,
               0x71u,
               0,
               0xAu,
               0x95u,
               0x77u,
               0x12u,
               0x82u),
        CFEqual(v9, *(CFTypeRef *)cf2))
    || (CFUUIDRef v10 = CFUUIDGetConstantUUIDWithBytes(0, 0xFAu, 0xFCu, 0xAFu, 0xC3u, 0xBAu, 0xE8u, 0x11u, 0xD6u, 0xB4u, 0xA8u, 0, 3u, 0x93u, 0x15u, 0xCDu, 0x46u), CFEqual(v10, *(CFTypeRef *)cf2))|| (v11 = CFUUIDGetConstantUUIDWithBytes(
                kCFAllocatorSystemDefault,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                0xC0u,
                0,
                0,
                0,
                0,
                0,
                0,
                0x46u),
        CFEqual(v11, *(CFTypeRef *)cf2)))
  {
    (*(void (**)(void))(*(void *)(a1 - 80) + 120))();
    uint64_t v12 = 0;
    *a3 = a1;
  }
  else
  {
    uint64_t v12 = 2147483652;
  }
  sub_327234((uint64_t)cf2);
  return v12;
}

void sub_3271B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x32705CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_327234(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1)
    {
      CFRelease(v2);
      *(void *)a1 = 0;
    }
  }
  return a1;
}

BOOL sub_327274(uint64_t a1, char a2)
{
  if (a2) {
    return 0;
  }
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)a1 + 304))(&cf);
  if (cf)
  {
    (*(void (**)(CFArrayRef *__return_ptr, uint64_t))(*(void *)a1 + 304))(&theArray, a1);
    if (!theArray)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    BOOL v2 = (unint64_t)CFArrayGetCount(theArray) < 2;
    if (theArray) {
      CFRelease(theArray);
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    BOOL v2 = 1;
  }
  if (MGGetSInt32Answer() == 4)
  {
    CFTypeRef cf = (CFTypeRef)0x676C6F6269616170;
    int v20 = 0;
    uint64_t v4 = sub_99A40(a1);
    *((void *)&v7 + 1) = v5;
    *(void *)&long long v7 = v4;
    uint64_t v6 = v7 >> 32;
    BOOL v9 = (v6 & 0xFF00000000) == 0 || v6 != 1;
    CFTypeRef cf = (CFTypeRef)0x676C6F6264636174;
    int v20 = 0;
    uint64_t v10 = sub_99A40(a1);
    *((void *)&v13 + 1) = v11;
    *(void *)&long long v13 = v10;
    uint64_t v12 = v13 >> 32;
    int v15 = (v12 & 0xFF00000000) == 0 || v12 != 1 || v9;
    return v2 & v15;
  }
  return v2;
}

void sub_327414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  sub_63908((const void **)va);
  sub_63908((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_327454(unsigned __int8 *a1)
{
  inAddress.mSelector = 1;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F62636C6B23;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  sub_869C8((uint64_t)buf, &inAddress.mSelector, (AudioObjectPropertyAddress *)&__p, 0, 0);
  if (buf[32])
  {
    uint64_t v3 = *(unsigned int **)&buf[8];
    uint64_t v4 = *(unsigned int **)&buf[16];
    uint64_t v5 = (os_log_t *)sub_32A48(16);
    uint64_t v1 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      sub_89C0C(&__p, v3, v4);
      uint64_t v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 176;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v6;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Clock IDs: %s", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    long long v7 = v3;
    if (v3 != v4)
    {
      uint64_t v1 = &buf[8];
      long long v7 = v3;
      while (1)
      {
        AudioObjectID v8 = *v7;
        inAddress.mElement = 0;
        AudioObjectID v36 = v8;
        *(void *)&inAddress.mSelector = 0x676C6F6263756964;
        sub_CDE9C((uint64_t)buf, &v36, &inAddress, 0, 0);
        if (!buf[24]) {
          goto LABEL_43;
        }
        std::string::size_type v9 = *(void *)&buf[16];
        *(void *)&buf[16] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_63E5A8;
        __p.__r_.__value_.__l.__size_ = v9;
        __p.__r_.__value_.__s.__data_[16] = 1;
        sub_49A90(&buf[8]);
        if (!__p.__r_.__value_.__s.__data_[16]) {
          goto LABEL_43;
        }
        uint64_t v10 = (os_log_t *)sub_32A48(16);
        uint64_t v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
        {
          AudioObjectID v12 = *v7;
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 183;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v12;
          *(_WORD *)&uint8_t buf[24] = 2112;
          *(void *)&buf[26] = __p.__r_.__value_.__l.__size_;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d \tClock UID   %d : %@", buf, 0x22u);
        }
        sub_21B7C(buf, (CFStringRef)__p.__r_.__value_.__l.__size_);
        if (buf[23] >= 0) {
          uint64_t v13 = buf[23];
        }
        else {
          uint64_t v13 = *(void *)&buf[8];
        }
        uint64_t v14 = a1[23];
        int v15 = (char)v14;
        if ((v14 & 0x80u) != 0) {
          uint64_t v14 = *((void *)a1 + 1);
        }
        if (v13 != v14) {
          break;
        }
        if (v15 >= 0) {
          int v16 = a1;
        }
        else {
          int v16 = *(unsigned __int8 **)a1;
        }
        if ((buf[23] & 0x80) != 0)
        {
          int v26 = *(void **)buf;
          BOOL v25 = memcmp(*(const void **)buf, v16, *(size_t *)&buf[8]) == 0;
          goto LABEL_38;
        }
        if (buf[23])
        {
          uint64_t v17 = buf[23] - 1;
          int v18 = buf;
          do
          {
            int v20 = *v18++;
            int v19 = v20;
            int v22 = *v16++;
            int v21 = v22;
            BOOL v24 = v17-- != 0;
            BOOL v25 = v19 == v21;
          }
          while (v19 == v21 && v24);
          if ((buf[23] & 0x80) != 0) {
            goto LABEL_36;
          }
        }
        else
        {
          BOOL v25 = 1;
        }
LABEL_40:
        if (__p.__r_.__value_.__s.__data_[16]) {
          sub_49A90(&__p);
        }
        if (v25) {
          goto LABEL_49;
        }
LABEL_43:
        if (++v7 == v4) {
          goto LABEL_52;
        }
      }
      BOOL v25 = 0;
      if ((buf[23] & 0x80) == 0) {
        goto LABEL_40;
      }
LABEL_36:
      int v26 = *(void **)buf;
LABEL_38:
      operator delete(v26);
      goto LABEL_40;
    }
LABEL_49:
    if (v7 != v4)
    {
      LODWORD(v29) = *v7;
      LODWORD(v1) = *v7 >> 8;
      uint64_t v30 = 1;
      if (!v3) {
        return v29 | (((unint64_t)v1 & 0xFFFFFF) << 8) | (v30 << 32);
      }
      goto LABEL_61;
    }
LABEL_52:
    __int16 v31 = (os_log_t *)sub_32A48(16);
    int v29 = *v31;
    if (*v31)
    {
      if (os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
      {
        if ((a1[23] & 0x80u) == 0) {
          int v32 = a1;
        }
        else {
          int v32 = *(unsigned __int8 **)a1;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 195;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v32;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No clock with UID %s found!", buf, 0x1Cu);
      }
      uint64_t v30 = 0;
      LOBYTE(v29) = 0;
    }
    else
    {
      uint64_t v30 = 0;
    }
    if (v3) {
LABEL_61:
    }
      operator delete(v3);
  }
  else
  {
    char v27 = (os_log_t *)sub_32A48(16);
    int v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 172;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No clock devices in the system ?", buf, 0x12u);
    }
    LOBYTE(v29) = 0;
    uint64_t v30 = 0;
  }
  return v29 | (((unint64_t)v1 & 0xFFFFFF) << 8) | (v30 << 32);
}

void sub_3278F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_327934(uint64_t a1, unsigned int *a2, unint64_t a3, os_unfair_lock_s *a4, int a5, unsigned int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v99 = (os_log_t *)sub_32A48(13);
    long long v100 = *v99;
    if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cStr = 136315394;
      *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&cStr[12] = 1024;
      *(_DWORD *)&cStr[14] = 266;
      _os_log_impl(&def_1E50E8, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inAggregateTopology is empty.\"", cStr, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inAggregateTopology is empty.");
  }
  if (!sub_3292F4())
  {
    std::string::size_type v102 = (os_log_t *)sub_32A48(13);
    long long v103 = *v102;
    if (*v102 && os_log_type_enabled(*v102, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cStr = 136315394;
      *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&cStr[12] = 1024;
      *(_DWORD *)&cStr[14] = 267;
      _os_log_impl(&def_1E50E8, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"HAL v5 plugin ID is 0.\"", cStr, 0x12u);
    }
    long long v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v104, "HAL v5 plugin ID is 0.");
  }
  inQualifierData[0] = *(void **)a2;
  sub_4D60(&__p, (unsigned int *)inQualifierData);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  snprintf((char *)&__str, 0x100uLL, "VAD %s AggDev", (const char *)p_p);
  snprintf(cStr, 0x100uLL, "%s %u", (const char *)&__str, dword_648A38);
  ++dword_648A38;
  int v16 = (void *)CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x600u);
  value = v16;
  char v134 = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    int v16 = value;
  }
  if (!v16)
  {
    long long v105 = (os_log_t *)sub_32A48(13);
    long long v106 = *v105;
    if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)cStr = 136315394;
      *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&cStr[12] = 1024;
      *(_DWORD *)&cStr[14] = 270;
      _os_log_impl(&def_1E50E8, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to create a valid UID for the aggregate device.\"", cStr, 0x12u);
    }
    uint64_t v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v107, "Unable to create a valid UID for the aggregate device.");
  }
  sub_16F4A4((CFStringRef *)&v132, a2);
  uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 8) + 24) + 16);
  int v118 = a7;
  if (a4)
  {
    BOOL v18 = v17 == (void)a4;
    uint64_t v17 = (uint64_t)a4;
    if (!v18)
    {
      int v19 = (os_log_t *)sub_32A48(16);
      int v20 = *v19;
      uint64_t v17 = (uint64_t)a4;
      if (*v19)
      {
        uint64_t v17 = (uint64_t)a4;
        if (os_log_type_enabled(*v19, OS_LOG_TYPE_INFO))
        {
          sub_4F64((uint64_t)&__str, (os_unfair_lock_t)(*(void *)(*(void *)(*(void *)(a1 + 8) + 24) + 16) + 8));
          int v21 = v140;
          int v22 = __str;
          sub_4F64((uint64_t)&__p, a4 + 2);
          p_str = &__str;
          if (v21 < 0) {
            p_str = (CFStringRef **)v22;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v24 = &__p;
          }
          else {
            BOOL v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)cStr = 136315906;
          *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
          *(_WORD *)&cStr[12] = 1024;
          *(_DWORD *)&cStr[14] = 277;
          __int16 v142 = 2080;
          *(void *)int v143 = p_str;
          *(_WORD *)&v143[8] = 2080;
          *(void *)&v143[10] = v24;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_INFO, "%25s:%-5d Overrode default master device (%s) with device %s.", cStr, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          a7 = v118;
          if (v140 < 0) {
            operator delete(__str);
          }
          uint64_t v17 = (uint64_t)a4;
        }
      }
    }
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFMutableDictionaryRef theDict = Mutable;
  __int16 v131 = 257;
  if (value && Mutable) {
    CFDictionarySetValue(Mutable, @"uid", value);
  }
  if (theDict) {
    CFDictionarySetValue(theDict, @"name", @"VAD Aggregate Device");
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v17 + 128))(cStr, v17);
  if (*(void *)cStr && theDict) {
    CFDictionarySetValue(theDict, @"master", *(const void **)cStr);
  }
  sub_72924((uint64_t)cStr);
  if ((a10 & 0xFF00000000) != 0) {
    sub_1D4AF4((uint64_t)&theDict, @"isolated use case", a10);
  }
  if (*a2 == 1986818404) {
    sub_1D4A4C((uint64_t)&theDict, @"LDCM", 1);
  }
  if (a11) {
    sub_1D4AF4((uint64_t)&theDict, @"use legacy reference stream offset", 1);
  }
  strcpy(cStr, "dklcbolg");
  cStr[9] = 0;
  *(_WORD *)&cStr[10] = 0;
  uint64_t v114 = v17;
  if ((*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)v17 + 16))(v17, cStr)) {
    LODWORD(v26) = sub_329450(v17);
  }
  else {
    LODWORD(v26) = 0;
  }
  BOOL v121 = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a9 + 56) && HIDWORD(a3)) {
    BOOL v121 = sub_327274((uint64_t)a4, a8);
  }
  if (*(unsigned char *)(a9 + 24) || v121)
  {
    BOOL v27 = *(unsigned __int8 *)(a9 + 24) == 0;
    if (*(unsigned char *)(a9 + 24)) {
      uint64_t v28 = a9;
    }
    else {
      uint64_t v28 = a9 + 32;
    }
    unint64_t v29 = sub_327454((unsigned __int8 *)v28);
    if (*(char *)(v28 + 23) < 0)
    {
      if (!*(void *)(a9 + 32 * v27))
      {
        CFStringRef v31 = 0;
LABEL_53:
        CFTypeRef cf = v31;
        if (HIDWORD(v29))
        {
          int v32 = (os_log_t *)sub_32A48(16);
          int v33 = *v32;
          if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
          {
            sub_2417C(&__str, *a2);
            __int16 v34 = v140 >= 0 ? (CFStringRef *)&__str : __str;
            *(_DWORD *)cStr = 136315906;
            *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
            *(_WORD *)&cStr[12] = 1024;
            *(_DWORD *)&cStr[14] = 335;
            __int16 v142 = 2112;
            *(void *)int v143 = v31;
            *(_WORD *)&v143[8] = 2080;
            *(void *)&v143[10] = v34;
            _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding external clock %@ to aggregate device dictionary for %s. This implies that drift correction will be enabled on subdevices.", cStr, 0x26u);
            if (v140 < 0) {
              operator delete(__str);
            }
          }
          if (HIBYTE(v131) && v31 && theDict) {
            CFDictionarySetValue(theDict, @"clock", v31);
          }
          LODWORD(__str) = v29;
          strcpy(cStr, "dklcbolg");
          cStr[9] = 0;
          *(_WORD *)&cStr[10] = 0;
          unint64_t v35 = sub_26DAC((AudioObjectID *)&__str, (const AudioObjectPropertyAddress *)cStr, 0, 0);
          int v37 = v35;
          if (v35 || !v36)
          {
            int v113 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v113 = &off_6414D8;
            v113[2] = v37;
          }
          unint64_t v26 = HIDWORD(v35);
        }
        goto LABEL_68;
      }
      CFIndex v30 = *(void *)(v28 + 8);
      uint64_t v28 = *(void *)(a9 + 32 * v27);
    }
    else
    {
      CFIndex v30 = *(unsigned __int8 *)(v28 + 23);
    }
    CFStringRef v31 = CFStringCreateWithBytes(0, (const UInt8 *)v28, v30, 0x8000100u, 0);
    if (!v31)
    {
      int v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v112, "Could not construct");
    }
    goto LABEL_53;
  }
LABEL_68:
  std::string::size_type v38 = (os_log_t *)sub_32A48(16);
  BOOL v39 = *v38;
  if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v40 = *(void *)(a1 + 16);
    *(_DWORD *)cStr = 136315650;
    *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
    *(_WORD *)&cStr[12] = 1024;
    *(_DWORD *)&cStr[14] = 340;
    __int16 v142 = 2048;
    *(void *)int v143 = v40;
    _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d Topology contains %lu items...", cStr, 0x1Cu);
  }
  BOOL v41 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFMutableArrayRef v127 = v41;
  __int16 v128 = 257;
  uint64_t v42 = *(void *)(a1 + 8);
  if (v42 != a1)
  {
    do
    {
      BOOL v43 = (os_log_t *)sub_32A48(16);
      BOOL v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v45 = *(void *)(v42 + 32);
        *(_DWORD *)cStr = 136315650;
        *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
        *(_WORD *)&cStr[12] = 1024;
        *(_DWORD *)&cStr[14] = 345;
        __int16 v142 = 2048;
        *(void *)int v143 = v45;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d Vertical topo item contains %lu elements...", cStr, 0x1Cu);
      }
      std::string v46 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      uint64_t v47 = v42 + 16;
      CFMutableArrayRef theArray = v46;
      __int16 v126 = 257;
      uint64_t v117 = v42;
      uint64_t v48 = *(void *)(v42 + 24);
      if (v48 != v47)
      {
        while (1)
        {
          uint64_t v49 = (os_log_t *)sub_32A48(16);
          unsigned __int8 v50 = *v49;
          if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_DEBUG))
          {
            int v51 = (*(uint64_t (**)(void))(**(void **)(v48 + 16) + 120))(*(void *)(v48 + 16));
            (*(void (**)(CFStringRef **__return_ptr))(**(void **)(v48 + 16) + 128))(&__str);
            *(_DWORD *)cStr = 136315906;
            *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
            *(_WORD *)&cStr[12] = 1024;
            *(_DWORD *)&cStr[14] = 351;
            __int16 v142 = 1024;
            *(_DWORD *)int v143 = v51;
            *(_WORD *)&v143[4] = 2112;
            *(void *)&v143[6] = __str;
            _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d Scanning PhysicalDevice ID %u (uid \"%@\").", cStr, 0x22u);
            sub_72924((uint64_t)&__str);
          }
          CFMutableDictionaryRef outData = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          __int16 v124 = 257;
          (*(void (**)(unsigned char *__return_ptr))(**(void **)(v48 + 16) + 128))(cStr);
          if (HIBYTE(v124) && *(void *)cStr && outData) {
            CFDictionarySetValue(outData, @"uid", *(const void **)cStr);
          }
          sub_72924((uint64_t)cStr);
          std::string v52 = *(os_unfair_lock_s **)(v48 + 16);
          strcpy(cStr, "dklcbolg");
          cStr[9] = 0;
          *(_WORD *)&cStr[10] = 0;
          if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned char *))(*(void *)&v52->_os_unfair_lock_opaque
                                                                           + 16))(v52, cStr))
          {
            unsigned int v53 = sub_329450((uint64_t)v52);
          }
          else
          {
            unsigned int v53 = 0;
          }
          if (v53 == v26)
          {
            if (v26)
            {
              if (!v121)
              {
                uint64_t v78 = (os_log_t *)sub_32A48(16);
                uint64_t v79 = *v78;
                if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_DEFAULT))
                {
                  sub_4F64((uint64_t)&__str, (os_unfair_lock_t)(*(void *)(v48 + 16) + 8));
                  uint64_t v80 = &__str;
                  if (v140 < 0) {
                    uint64_t v80 = (CFStringRef **)__str;
                  }
                  *(_DWORD *)cStr = 136315650;
                  *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
                  *(_WORD *)&cStr[12] = 1024;
                  *(_DWORD *)&cStr[14] = 379;
                  __int16 v142 = 2080;
                  *(void *)int v143 = v80;
                  _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Drift compensation is NOT being applied to subdevice %s", cStr, 0x1Cu);
                  if (v140 < 0) {
                    operator delete(__str);
                  }
                }
                goto LABEL_140;
              }
              int64_t v54 = (os_log_t *)sub_32A48(16);
              __int16 v55 = *v54;
              if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_DEBUG))
              {
                sub_4F64((uint64_t)&__str, v52 + 2);
                double v56 = &__str;
                if (v140 < 0) {
                  double v56 = (CFStringRef **)__str;
                }
                *(_DWORD *)cStr = 136315650;
                *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
                *(_WORD *)&cStr[12] = 1024;
                *(_DWORD *)&cStr[14] = 246;
                __int16 v142 = 2080;
                *(void *)int v143 = v56;
                _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_DEBUG, "%25s:%-5d Enabling drift correction because: Aggregate device uses a TimeSync clock. Device: %s.", cStr, 0x1Cu);
                if (v140 < 0) {
                  operator delete(__str);
                }
              }
LABEL_114:
              sub_4E004();
              if ((qword_64C550 & 0xFF00000000) != 0) {
                unsigned int v66 = qword_64C550;
              }
              else {
                unsigned int v66 = 64;
              }
              int v67 = 2;
              goto LABEL_118;
            }
            uint64_t v64 = (os_log_t *)sub_32A48(16);
            unsigned __int8 v65 = *v64;
            if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)cStr = 136315394;
              *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
              *(_WORD *)&cStr[12] = 1024;
              *(_DWORD *)&cStr[14] = 228;
              _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_DEBUG, "%25s:%-5d Enabling drift correction because: Main clock has an unspecified clock domain.", cStr, 0x12u);
            }
          }
          else
          {
            double v57 = (os_log_t *)sub_32A48(16);
            uint64_t v58 = *v57;
            if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_DEBUG))
            {
              sub_2417C(&__str, v53);
              if (v140 >= 0) {
                double v59 = &__str;
              }
              else {
                double v59 = (CFStringRef **)__str;
              }
              sub_2417C(&__p, v26);
              int v60 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
              std::string::size_type v61 = __p.__r_.__value_.__r.__words[0];
              sub_4F64((uint64_t)inQualifierData, v52 + 2);
              uint64_t v62 = &__p;
              if (v60 < 0) {
                uint64_t v62 = (std::string *)v61;
              }
              int v63 = inQualifierData;
              if (v136 < 0) {
                int v63 = (void **)inQualifierData[0];
              }
              *(_DWORD *)cStr = 136316162;
              *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
              *(_WORD *)&cStr[12] = 1024;
              *(_DWORD *)&cStr[14] = 220;
              __int16 v142 = 2080;
              *(void *)int v143 = v59;
              *(_WORD *)&v143[8] = 2080;
              *(void *)&v143[10] = v62;
              *(_WORD *)&v143[18] = 2080;
              uint64_t v144 = v63;
              _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d Enabling drift correction because: Device's clock domain (%s) diverges from the domain of the aggregate's main clock (%s). Device: %s.", cStr, 0x30u);
              if (v136 < 0) {
                operator delete(inQualifierData[0]);
              }
              a7 = v118;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (v140 < 0) {
                operator delete(__str);
              }
            }
          }
          int v67 = a5;
          unsigned int v66 = a6;
          if (v121) {
            goto LABEL_114;
          }
LABEL_118:
          char v68 = (os_log_t *)sub_32A48(16);
          char v69 = *v68;
          if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_DEFAULT))
          {
            sub_2417C(&__str, v67);
            if (v140 >= 0) {
              char v70 = &__str;
            }
            else {
              char v70 = (CFStringRef **)__str;
            }
            uint64_t v71 = "min";
            if (v66 >= 0x20)
            {
              uint64_t v71 = "low";
              if (v66 >= 0x40)
              {
                uint64_t v71 = "medium";
                if (v66 >= 0x60)
                {
                  if (v66 >= 0x7F) {
                    uint64_t v71 = "max";
                  }
                  else {
                    uint64_t v71 = "high";
                  }
                }
              }
            }
            sub_21C8C(&__p, v71);
            int v72 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v73 = __p.__r_.__value_.__r.__words[0];
            sub_4F64((uint64_t)inQualifierData, (os_unfair_lock_t)(*(void *)(v48 + 16) + 8));
            int v74 = &__p;
            if (v72 < 0) {
              int v74 = (std::string *)v73;
            }
            int v75 = inQualifierData;
            if (v136 < 0) {
              int v75 = (void **)inQualifierData[0];
            }
            *(_DWORD *)cStr = 136316162;
            *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
            *(_WORD *)&cStr[12] = 1024;
            *(_DWORD *)&cStr[14] = 371;
            __int16 v142 = 2080;
            *(void *)int v143 = v70;
            *(_WORD *)&v143[8] = 2080;
            *(void *)&v143[10] = v74;
            *(_WORD *)&v143[18] = 2080;
            uint64_t v144 = v75;
            _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Applying drift compensation (algorithm: %s, quality: %s) to subdevice %s.", cStr, 0x30u);
            if (v136 < 0) {
              operator delete(inQualifierData[0]);
            }
            a7 = v118;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v140 < 0) {
              operator delete(__str);
            }
          }
          sub_1D4AF4((uint64_t)&outData, @"drift", 1);
          sub_1D4AF4((uint64_t)&outData, @"drift algorithm", v67);
          sub_1D4AF4((uint64_t)&outData, @"drift quality", v66);
LABEL_140:
          if (a7)
          {
            uint64_t v76 = (os_log_t *)sub_32A48(16);
            unint64_t v77 = *v76;
            if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)cStr = 136315394;
              *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
              *(_WORD *)&cStr[12] = 1024;
              *(_DWORD *)&cStr[14] = 385;
              _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_INFO, "%25s:%-5d Disabling HAL safety offset padding", cStr, 0x12u);
            }
            sub_1D4AF4((uint64_t)&outData, @"don't pad", 1);
          }
          if (theArray && HIBYTE(v126)) {
            CFArrayAppendValue(theArray, outData);
          }
          sub_80594((uint64_t)&outData);
          uint64_t v48 = *(void *)(v48 + 8);
          if (v48 == v47)
          {
            std::string v46 = theArray;
            break;
          }
        }
      }
      if (v127 && HIBYTE(v128)) {
        CFArrayAppendValue(v127, v46);
      }
      sub_3D61C((uint64_t)&theArray);
      uint64_t v42 = *(void *)(v117 + 8);
    }
    while (v42 != a1);
    BOOL v41 = v127;
  }
  if (HIBYTE(v131) && v41 && theDict) {
    CFDictionarySetValue(theDict, @"subdevices", v41);
  }
  if (a8)
  {
    uint64_t v81 = (os_log_t *)sub_32A48(16);
    char v82 = *v81;
    if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)cStr = 136315394;
      *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&cStr[12] = 1024;
      *(_DWORD *)&cStr[14] = 398;
      _os_log_impl(&def_1E50E8, v82, OS_LOG_TYPE_INFO, "%25s:%-5d Disabling HAL AirPods offload DSP for VP use case", cStr, 0x12u);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    int v83 = sub_4D3D8((uint64_t)&__p);
    CFMutableArrayRef theArray = v83;
    sub_22210((CFStringRef *)&__str, "airpods noise suppression");
    if (v83) {
      CFRetain(v83);
    }
    char v139 = v83;
    *(void *)cStr = &__str;
    *(void *)&cStr[8] = 1;
    CFDictionaryRef v84 = sub_4D3D8((uint64_t)cStr);
    inQualifierData[0] = v84;
    if (v139) {
      CFRelease(v139);
    }
    if (__str) {
      CFRelease(__str);
    }
    if (v83) {
      CFRelease(v83);
    }
    if (HIBYTE(v131) && v84 && theDict) {
      CFDictionarySetValue(theDict, @"dsp offload bypass override", v84);
    }
    CFRelease(v84);
  }
  LODWORD(outData) = 0;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F6263616767;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  inQualifierData[0] = theDict;
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_AggregateCreation", 0x14uLL) == &qword_659450)
  {
    BOOL v85 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    BOOL v85 = (__CFArray *)os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    if ((unint64_t)v85 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      char v86 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        *(_DWORD *)cStr = 138412290;
        *(void **)&cStr[4] = inQualifierData[0];
        _os_signpost_emit_with_name_impl(&def_1E50E8, v86, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v85, "VA_AggregateCreation", "Creating HAL aggregate with dictionary: %@", cStr, 0xCu);
      }
    }
  }
  CFMutableArrayRef theArray = v85;
  uint64_t v87 = sub_32A48(42);
  if (*(unsigned char *)(v87 + 8))
  {
    long long v88 = *(NSObject **)v87;
    if (*(void *)v87)
    {
      if (os_log_type_enabled(*(os_log_t *)v87, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)cStr = 136315650;
        *(void *)&cStr[4] = "SignpostUtilities.h";
        *(_WORD *)&cStr[12] = 1024;
        *(_DWORD *)&cStr[14] = 88;
        __int16 v142 = 2080;
        *(void *)int v143 = "kAggregateCreation";
        _os_log_impl(&def_1E50E8, v88, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", cStr, 0x1Cu);
      }
    }
  }
  long long v89 = (os_log_t *)sub_32A48(16);
  long long v90 = *v89;
  if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)cStr = 136315650;
    *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
    *(_WORD *)&cStr[12] = 1024;
    *(_DWORD *)&cStr[14] = 412;
    __int16 v142 = 2112;
    *(void **)int v143 = inQualifierData[0];
    _os_log_impl(&def_1E50E8, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating HAL Aggregate with dictionary: %@", cStr, 0x1Cu);
  }
  UInt32 ioDataSize = 4;
  AudioObjectID v91 = sub_3292F4();
  OSStatus PropertyData = AudioObjectGetPropertyData(v91, (const AudioObjectPropertyAddress *)&__p, 8u, inQualifierData, &ioDataSize, &outData);
  if (PropertyData)
  {
    uint64_t v108 = (os_log_t *)sub_32A48(13);
    char v109 = *v108;
    if (*v108 && os_log_type_enabled(*v108, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&__str, PropertyData);
      int v110 = v140 >= 0 ? (CFStringRef *)&__str : __str;
      *(_DWORD *)cStr = 136315650;
      *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
      *(_WORD *)&cStr[12] = 1024;
      *(_DWORD *)&cStr[14] = 415;
      __int16 v142 = 2080;
      *(void *)int v143 = v110;
      _os_log_impl(&def_1E50E8, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"HAL failure during attempt to create the aggregate device: %s\"", cStr, 0x1Cu);
      if (v140 < 0) {
        operator delete(__str);
      }
    }
    int v111 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v111 = &off_6414D8;
    v111[2] = PropertyData;
  }
  BOOL v93 = (os_log_t *)sub_32A48(16);
  long long v94 = *v93;
  if (*v93 && os_log_type_enabled(*v93, OS_LOG_TYPE_DEBUG))
  {
    int v95 = (int)outData;
    int v96 = (*(uint64_t (**)(uint64_t))(*(void *)v114 + 120))(v114);
    (*(void (**)(CFStringRef **__return_ptr, uint64_t))(*(void *)v114 + 128))(&__str, v114);
    *(_DWORD *)cStr = 136316162;
    *(void *)&cStr[4] = "AggregateDeviceUtilities.cpp";
    *(_WORD *)&cStr[12] = 1024;
    *(_DWORD *)&cStr[14] = 418;
    __int16 v142 = 1024;
    *(_DWORD *)int v143 = v95;
    *(_WORD *)&v143[4] = 1024;
    *(_DWORD *)&v143[6] = v96;
    *(_WORD *)&v143[10] = 2112;
    *(void *)&v143[12] = __str;
    _os_log_impl(&def_1E50E8, v94, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created aggregate device ID %u with master PhysicalDevice ID %u (uid \"%@\").", cStr, 0x28u);
    sub_72924((uint64_t)&__str);
  }
  uint64_t v97 = outData;
  sub_3294EC((os_signpost_id_t *)&theArray);
  sub_3D61C((uint64_t)&v127);
  if (cf) {
    CFRelease(cf);
  }
  sub_80594((uint64_t)&theDict);
  if (v132) {
    CFRelease(v132);
  }
  sub_72924((uint64_t)&value);
  return v97;
}

void sub_329094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_signpost_id_t a29,uint64_t a30,char a31,uint64_t a32,const void *a33,__int16 a34,uint64_t a35,const void *a36,__int16 a37)
{
}

uint64_t sub_3292F4()
{
  uint64_t result = dword_659468;
  if (!dword_659468)
  {
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    *(void *)&inAddress.mSelector = 0x676C6F6262696470;
    CFStringRef inQualifierData = @"com.apple.audio.V5";
    OSStatus PropertyData = AudioObjectGetPropertyData(1u, &inAddress, 8u, &inQualifierData, &ioDataSize, &dword_659468);
    if (PropertyData)
    {
      OSStatus v5 = PropertyData;
      BOOL v2 = (os_log_t *)sub_32A48(13);
      uint64_t v3 = *v2;
      if (*v2)
      {
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          uint64_t v10 = "AggregateDeviceUtilities.cpp";
          __int16 v11 = 1024;
          int v12 = 60;
          _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"HAL error when attempting to retrieve plugin ID.\"", buf, 0x12u);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = v5;
    }
    return dword_659468;
  }
  return result;
}

unint64_t sub_329450(uint64_t a1)
{
  unint64_t v1 = sub_99A40(a1);
  if (v1 || !v2)
  {
    int v4 = v1;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v4;
  }
  return HIDWORD(v1);
}

os_signpost_id_t *sub_3294EC(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        AudioObjectID v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 88;
        __int16 v11 = 2080;
        int v12 = "kAggregateCreation";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      OSStatus v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_AggregateCreation", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_32967C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_329688(int a1)
{
  int outData = a1;
  if (a1)
  {
    *(void *)&inAddress.mSelector = 0x676C6F6264616767;
    inAddress.mElement = 0;
    UInt32 ioDataSize = 4;
    AudioObjectID v1 = sub_3292F4();
    OSStatus PropertyData = AudioObjectGetPropertyData(v1, &inAddress, 0, 0, &ioDataSize, &outData);
    if (PropertyData)
    {
      uint64_t v3 = (os_log_t *)sub_32A48(16);
      os_signpost_id_t v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, PropertyData);
          if (v7 >= 0) {
            OSStatus v5 = __p;
          }
          else {
            OSStatus v5 = (void **)__p[0];
          }
          *(_DWORD *)buf = 136315650;
          int v12 = "AggregateDeviceUtilities.cpp";
          __int16 v13 = 1024;
          int v14 = 431;
          __int16 v15 = 2080;
          int v16 = v5;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL returned error '%s' when attempting to destroy the aggregate device.", buf, 0x1Cu);
          if (v7 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
}

void sub_3297D0()
{
}

void sub_329844()
{
}

AudioDeviceIOProcID sub_329868(AudioObjectID a1, OSStatus (__cdecl *a2)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a3)
{
  AudioDeviceIOProcID outIOProcID = 0;
  OSStatus v3 = AudioDeviceCreateIOProcID(a1, a2, a3, &outIOProcID);
  if (v3)
  {
    OSStatus v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v13 = "AggregateDeviceUtilities.cpp";
      __int16 v14 = 1024;
      int v15 = 493;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"error creating IOProc ID\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v3;
  }
  AudioDeviceIOProcID result = outIOProcID;
  if (!outIOProcID)
  {
    AudioObjectID v8 = (os_log_t *)sub_32A48(13);
    __int16 v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        __int16 v13 = "AggregateDeviceUtilities.cpp";
        __int16 v14 = 1024;
        int v15 = 494;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [outIOProcID is NULL]: \"got a NULL IOProc ID\"", buf, 0x12u);
      }
    }
    int v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "got a NULL IOProc ID");
  }
  return result;
}

void sub_329A30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_329A4C(uint64_t result, OSStatus (__cdecl *a2)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  if (!result && a2)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    OSStatus v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "AggregateDeviceUtilities.cpp";
      __int16 v7 = 1024;
      int v8 = 501;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to destroy a non-zero IO Proc ID using an invalid device ID\"", (uint8_t *)&v5, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to destroy a non-zero IO Proc ID using an invalid device ID");
  }
  if (result && a2)
  {
    return AudioDeviceDestroyIOProcID(result, a2);
  }
  return result;
}

void sub_329B8C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_329BA8(uint64_t a1)
{
  if (*(void *)a1) {
    sub_329A4C(*(unsigned int *)(a1 + 8), *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))a1);
  }
  return a1;
}

uint64_t sub_329BE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == a1) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    if (v3)
    {
      uint64_t v4 = sub_99A40(v3);
      *((void *)&v6 + 1) = v5;
      *(void *)&long long v6 = v4;
      uint64_t v7 = sub_99A40(*(void *)(v1 + 16));
      uint64_t v9 = DWORD1(v6);
      if (((v6 >> 32) & 0xFF00000000) != 0 && v9 != 0) {
        break;
      }
      *((void *)&v11 + 1) = v8;
      *(void *)&long long v11 = v7;
      if (((v11 >> 32) & 0xFF00000000) != 0 && HIDWORD(v7) != 0) {
        break;
      }
    }
    uint64_t v1 = *(void *)(v1 + 8);
    if (v1 == a1) {
      return 0;
    }
  }
  return 1;
}

void sub_329CBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_3E6788();
  sub_21C8C(v7, "GetTimeSyncClockUIDForVAD");
  uint64_t v5 = *a2;
  v10[0] = v4;
  v10[1] = v5;
  if (SHIBYTE(v8) < 0)
  {
    sub_21E8C(&__p, v7[0], (unint64_t)v7[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v7;
    uint64_t v12 = v8;
  }
  long long v6 = *(NSObject **)(v4 + 168);
  __int16 v13 = v10;
  CFTypeRef cf = 0;
  *(void *)&long long block = _NSConcreteStackBlock;
  *((void *)&block + 1) = 0x40000000;
  int v15 = sub_3E8B44;
  int v16 = &unk_63C890;
  p_CFTypeRef cf = &cf;
  BOOL v18 = &v13;
  dispatch_sync(v6, &block);
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  if (cf)
  {
    sub_168A8C((uint64_t)&block, (const __CFString *)cf);
    *(_OWORD *)a1 = block;
    *(void *)(a1 + 16) = v15;
    *(unsigned char *)(a1 + 24) = 1;
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
}

void sub_329E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_329E34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)a1)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3 != v2)
    {
      int v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(*(void *)(v3 + 24) + 16);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, 1))
        {
          if (v4 == *(_DWORD *)(a1 + 16)) {
            return v5;
          }
          ++v4;
        }
        uint64_t v3 = *(void *)(v3 + 8);
      }
      while (v3 != *(void *)(a1 + 8));
    }
    return 0;
  }
  uint64_t v6 = *(void *)(v2 + 8);
  if (v6 == v2) {
    return 0;
  }
  int v7 = 0;
  while (2)
  {
    sub_86438(v10, v6 + 16);
    for (unint64_t i = (void *)v10[1]; i != v10; unint64_t i = (void *)i[1])
    {
      uint64_t v5 = i[2];
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)v5 + 88))(v5, 0))
      {
        if (v7 == *(_DWORD *)(a1 + 16))
        {
          sub_45F50(v10);
          return v5;
        }
        ++v7;
      }
    }
    sub_45F50(v10);
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6 != *(void *)(a1 + 8)) {
      continue;
    }
    break;
  }
  return v5;
}

void sub_329F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_45F50((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_329FA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == a1) {
    goto LABEL_6;
  }
  while (((*(uint64_t (**)(void))(**(void **)(*(void *)(v2 + 24) + 16) + 352))(*(void *)(*(void *)(v2 + 24) + 16)) & 1) == 0)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (v2 == a1) {
      goto LABEL_6;
    }
  }
  if (v2 == a1) {
LABEL_6:
  }
    uint64_t v2 = *(void *)(a1 + 8);
  return *(void *)(*(void *)(v2 + 24) + 16);
}

void sub_32A02C(uint64_t a1)
{
  if (!*(unsigned char *)(sub_6C174(a1) + 4)) {
    *(unsigned char *)(a1 + 4) = 1;
  }
  *(_DWORD *)a1 = 1953460273;
  *(_WORD *)(a1 + 84) = 257;
  *(void *)(a1 + 72) = 0x101010101010101;
  *(_WORD *)(a1 + 88) = 256;
  *(_DWORD *)(a1 + 304) = -1047527424;
  *(unsigned char *)(a1 + 308) = 1;
  *(_DWORD *)(a1 + 340) = 1103101952;
  *(unsigned char *)(a1 + 344) = 1;
  *(_DWORD *)(a1 + 364) = 0;
  *(unsigned char *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 372) = 0;
  *(unsigned char *)(a1 + 376) = 1;
  *(_DWORD *)(a1 + 356) = 0;
  *(unsigned char *)(a1 + 360) = 1;
  *(_DWORD *)(a1 + 420) = 1090519040;
  *(unsigned char *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 380) = -1040187392;
  *(unsigned char *)(a1 + 384) = 1;
  *(_WORD *)(a1 + 430) = 257;
  *(_DWORD *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 316) = 1;
  *(_WORD *)(a1 + 320) = 257;
  *(_WORD *)(a1 + 428) = 257;
  *(unsigned char *)(a1 + 121) = 1;
  sub_21C8C(&v40, "");
  sub_208ED4(&v95);
  sub_21C8C(&v101, off_648B50);
  sub_21C8C(&v98, "AU");
  sub_21C8C(&v97, "VAD");
  sub_6D364((char *)__dst, &v40, (uint64_t)&v95, &v101, &v98, &v97);
  sub_6D600(a1 + 432, (long long *)__dst);
  if (v71 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete(v67);
  }
  if (v66 < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  if (!*(unsigned char *)(a1 + 708)) {
    *(unsigned char *)(a1 + 708) = 1;
  }
  *(_DWORD *)(a1 + 704) = 8;
  if (!sub_23AC0())
  {
    sub_32B304(&v40);
    goto LABEL_101;
  }
  sub_32B304(&v40);
  sub_32C67C((uint64_t)__dst, "speaker_general");
  sub_21C8C(&v95, "speaker_general");
  uint64_t v3 = sub_32CA70(&v40, (unsigned __int8 *)&v95);
  if (!v3) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CB6C((uint64_t)(v3 + 40), (long long *)__dst);
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  sub_6C878((uint64_t)__dst);
  sub_32C67C((uint64_t)__dst, "speaker_latenight_general");
  sub_21C8C(&v95, "speaker_latenight_general");
  int v4 = sub_32CA70(&v40, (unsigned __int8 *)&v95);
  if (!v4) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CB6C((uint64_t)(v4 + 40), (long long *)__dst);
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  sub_6C878((uint64_t)__dst);
  sub_32C67C((uint64_t)__dst, "speaker_movie");
  sub_21C8C(&v95, "speaker_movie");
  uint64_t v5 = sub_32CA70(&v40, (unsigned __int8 *)&v95);
  if (!v5) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CB6C((uint64_t)(v5 + 40), (long long *)__dst);
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  sub_6C878((uint64_t)__dst);
  sub_32C67C((uint64_t)__dst, "speaker_latenight_movie");
  sub_21C8C(&v95, "speaker_latenight_movie");
  uint64_t v6 = sub_32CA70(&v40, (unsigned __int8 *)&v95);
  if (!v6) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CB6C((uint64_t)(v6 + 40), (long long *)__dst);
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  sub_6C878((uint64_t)__dst);
  sub_32C67C((uint64_t)__dst, "speaker_ringtone");
  sub_21C8C(&v95, "speaker_ringtone");
  int v7 = sub_32CA70(&v40, (unsigned __int8 *)&v95);
  if (!v7) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CB6C((uint64_t)(v7 + 40), (long long *)__dst);
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  sub_6C878((uint64_t)__dst);
  sub_32C67C((uint64_t)__dst, "speaker_siri");
  uint64_t v8 = sub_21C8C(&v101, "speaker_siri");
  unint64_t v9 = sub_6789C((uint64_t)v8);
  unint64_t v10 = v9;
  unint64_t v11 = *((void *)&v40 + 1);
  if (*((void *)&v40 + 1))
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v40 + 8));
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v1 = v9;
      if (v9 >= *((void *)&v40 + 1)) {
        unint64_t v1 = v9 % *((void *)&v40 + 1);
      }
    }
    else
    {
      unint64_t v1 = (*((void *)&v40 + 1) - 1) & v9;
    }
    __int16 v14 = *(void ***)(v40 + 8 * v1);
    if (v14)
    {
      int v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = *((void *)v15 + 1);
          if (v16 == v10)
          {
            if (sub_67CEC((unsigned __int8 *)v15 + 16, (unsigned __int8 *)&v101)) {
              goto LABEL_77;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v1) {
              break;
            }
          }
          int v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  int v15 = (char *)operator new(0x158uLL);
  *(void *)&long long v95 = v15;
  *((void *)&v95 + 1) = &v41;
  LOBYTE(v96) = 0;
  *(void *)int v15 = 0;
  *((void *)v15 + 1) = v10;
  *(std::string *)(v15 + 16) = v101;
  memset(&v101, 0, sizeof(v101));
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 104) = 0u;
  *(_OWORD *)(v15 + 120) = 0u;
  *(_OWORD *)(v15 + 136) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 184) = 0u;
  *(_OWORD *)(v15 + 200) = 0u;
  *(_OWORD *)(v15 + 216) = 0u;
  *(_OWORD *)(v15 + 232) = 0u;
  *(_OWORD *)(v15 + 248) = 0u;
  *(_OWORD *)(v15 + 264) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_OWORD *)(v15 + 280) = 0u;
  *(_OWORD *)(v15 + 296) = 0u;
  *(_OWORD *)(v15 + 312) = 0u;
  *(_OWORD *)(v15 + 328) = 0u;
  sub_32CDD4((uint64_t)(v15 + 40));
  LOBYTE(v96) = 1;
  float v17 = (float)(unint64_t)(v42 + 1);
  if (!v11 || (float)(*(float *)&v43 * (float)v11) < v17)
  {
    BOOL v18 = 1;
    if (v11 >= 3) {
      BOOL v18 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v11);
    unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&v43);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_6DEC4((uint64_t)&v40, v21);
    unint64_t v11 = *((void *)&v40 + 1);
    if ((*((void *)&v40 + 1) & (*((void *)&v40 + 1) - 1)) != 0)
    {
      if (v10 >= *((void *)&v40 + 1)) {
        unint64_t v1 = v10 % *((void *)&v40 + 1);
      }
      else {
        unint64_t v1 = v10;
      }
    }
    else
    {
      unint64_t v1 = (*((void *)&v40 + 1) - 1) & v10;
    }
  }
  uint64_t v22 = v40;
  __int16 v23 = *(void **)(v40 + 8 * v1);
  if (v23)
  {
    *(void *)int v15 = *v23;
  }
  else
  {
    *(void *)int v15 = v41;
    BOOL v41 = v15;
    *(void *)(v22 + 8 * v1) = &v41;
    if (!*(void *)v15) {
      goto LABEL_76;
    }
    unint64_t v24 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11) {
        v24 %= v11;
      }
    }
    else
    {
      v24 &= v11 - 1;
    }
    __int16 v23 = (void *)(v40 + 8 * v24);
  }
  *__int16 v23 = v15;
LABEL_76:
  *(void *)&long long v95 = 0;
  ++v42;
  sub_6E0C0((uint64_t)&v95);
LABEL_77:
  sub_32CB6C((uint64_t)(v15 + 40), (long long *)__dst);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  sub_6C878((uint64_t)__dst);
  sub_21C8C(__dst, "speaker_measurement");
  int v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  sub_21C8C(__p, "speaker_measurement");
  sub_21C8C(v72, "speaker_measurement");
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  int v76 = 1668049011;
  BOOL v25 = operator new(0xCuLL);
  v98.__r_.__value_.__l.__size_ = (std::string::size_type)(v25 + 3);
  v98.__r_.__value_.__r.__words[2] = (std::string::size_type)(v25 + 3);
  *(void *)BOOL v25 = 0x6473706700000001;
  _OWORD v25[2] = 1869768046;
  v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  memset(&v101, 0, sizeof(v101));
  *(void *)&long long v95 = &v101;
  BYTE8(v95) = 0;
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v101.__r_.__value_.__l.__size_ = v101.__r_.__value_.__r.__words[0];
  v101.__r_.__value_.__r.__words[2] = v101.__r_.__value_.__r.__words[0] + 24;
  v101.__r_.__value_.__l.__size_ = (std::string::size_type)sub_1CDC20((uint64_t)&v101.__r_.__value_.__r.__words[2], (uint64_t)&v98, (uint64_t)&v99, v101.__r_.__value_.__l.__data_);
  sub_1CDCD4((uint64_t)&v99, (uint64_t *)&v101);
  uint64_t v62 = &v99;
  uint64_t v63 = 1;
  CFDictionaryRef v26 = sub_4D3D8((uint64_t)&v62);
  LODWORD(v97.__r_.__value_.__l.__data_) = 1768907891;
  v97.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
  uint64_t v64 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v77 = 0;
  *(void *)&long long v95 = &v77;
  BYTE8(v95) = 0;
  unint64_t v77 = (char *)operator new(0x10uLL);
  uint64_t v78 = v77;
  BOOL v27 = v77 + 16;
  uint64_t v79 = v77 + 16;
  sub_6D16C((uint64_t)v77, 1768907891, v26);
  uint64_t v78 = v27;
  long long v80 = 0u;
  long long v81 = 0u;
  uint64_t v28 = operator new(8uLL);
  *((void *)&v80 + 1) = v28;
  *uint64_t v28 = 0x74766F6C76756764;
  *((void *)&v81 + 1) = v28 + 1;
  *(void *)&long long v81 = v28 + 1;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  char v82 = &v83;
  uint64_t v87 = 0;
  BOOL v85 = 0;
  char v86 = 0;
  unint64_t v29 = operator new(8uLL);
  BOOL v85 = v29;
  *unint64_t v29 = 0x800000002;
  uint64_t v87 = v29 + 1;
  char v86 = v29 + 1;
  char v88 = 0;
  char v89 = 0;
  long long v91 = 0u;
  long long v90 = 0u;
  uint64_t v92 = 0;
  long long v95 = xmmword_5968C4;
  int v96 = (void *)(&def_1E50E8 + 2);
  sub_6D1AC((uint64_t)&v90, (int *)&v95, 3);
  char v93 = 0;
  uint64_t v94 = 0;
  sub_21C8C(&v95, "speaker_measurement");
  CFIndex v30 = sub_32CA70(&v40, (unsigned __int8 *)&v95);
  if (!v30) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CB6C((uint64_t)(v30 + 40), (long long *)__dst);
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  sub_6C878((uint64_t)__dst);
  if (v26) {
    CFRelease(v26);
  }
  if (v100) {
    CFRelease(v100);
  }
  if (v99) {
    CFRelease(v99);
  }
  *(void *)&long long v95 = &v101;
  sub_15B944((void ***)&v95);
  if (v98.__r_.__value_.__r.__words[0])
  {
    v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  sub_21C8C(__dst, "speaker_raw");
  int v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  sub_21C8C(__p, "speaker_measurement");
  sub_21C8C(v72, "speaker_raw");
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  int v76 = 1668049011;
  CFStringRef v31 = operator new(0xCuLL);
  v98.__r_.__value_.__l.__size_ = (std::string::size_type)(v31 + 3);
  v98.__r_.__value_.__r.__words[2] = (std::string::size_type)(v31 + 3);
  *(void *)CFStringRef v31 = 0x6473706700000001;
  v31[2] = 1869768046;
  v98.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  memset(&v101, 0, sizeof(v101));
  *(void *)&long long v95 = &v101;
  BYTE8(v95) = 0;
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
  v101.__r_.__value_.__l.__size_ = v101.__r_.__value_.__r.__words[0];
  v101.__r_.__value_.__r.__words[2] = v101.__r_.__value_.__r.__words[0] + 24;
  v101.__r_.__value_.__l.__size_ = (std::string::size_type)sub_1CDC20((uint64_t)&v101.__r_.__value_.__r.__words[2], (uint64_t)&v98, (uint64_t)&v99, v101.__r_.__value_.__l.__data_);
  sub_1CDCD4((uint64_t)&v99, (uint64_t *)&v101);
  uint64_t v62 = &v99;
  uint64_t v63 = 1;
  CFDictionaryRef v32 = sub_4D3D8((uint64_t)&v62);
  LODWORD(v97.__r_.__value_.__l.__data_) = 1768907891;
  v97.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
  uint64_t v64 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v77 = 0;
  *(void *)&long long v95 = &v77;
  BYTE8(v95) = 0;
  unint64_t v77 = (char *)operator new(0x10uLL);
  uint64_t v78 = v77;
  int v33 = v77 + 16;
  uint64_t v79 = v77 + 16;
  sub_6D16C((uint64_t)v77, 1768907891, v32);
  uint64_t v78 = v33;
  long long v80 = 0u;
  long long v81 = 0u;
  __int16 v34 = operator new(8uLL);
  *((void *)&v80 + 1) = v34;
  *__int16 v34 = 0x74766F6C76756764;
  *((void *)&v81 + 1) = v34 + 1;
  *(void *)&long long v81 = v34 + 1;
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  char v82 = &v83;
  uint64_t v87 = 0;
  BOOL v85 = 0;
  char v86 = 0;
  unint64_t v35 = operator new(8uLL);
  BOOL v85 = v35;
  *unint64_t v35 = 0x800000002;
  uint64_t v87 = v35 + 1;
  char v86 = v35 + 1;
  char v88 = 0;
  char v89 = 0;
  long long v91 = 0u;
  long long v90 = 0u;
  uint64_t v92 = 0;
  long long v95 = xmmword_5968C4;
  int v96 = (void *)(&def_1E50E8 + 2);
  sub_6D1AC((uint64_t)&v90, (int *)&v95, 3);
  char v93 = 0;
  uint64_t v94 = 0;
  sub_21C8C(&v95, "speaker_raw");
  char v36 = sub_32CA70(&v40, (unsigned __int8 *)&v95);
  if (!v36) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CB6C((uint64_t)(v36 + 40), (long long *)__dst);
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  sub_6C878((uint64_t)__dst);
  if (v32) {
    CFRelease(v32);
  }
  if (v100) {
    CFRelease(v100);
  }
  if (v99) {
    CFRelease(v99);
  }
  *(void *)&long long v95 = &v101;
  sub_15B944((void ***)&v95);
  if (v98.__r_.__value_.__r.__words[0])
  {
    v98.__r_.__value_.__l.__size_ = v98.__r_.__value_.__r.__words[0];
    operator delete(v98.__r_.__value_.__l.__data_);
  }
LABEL_101:
  sub_6D31C(a1 + 512, (uint64_t *)&v40);
  sub_6C7E4(v41);
  int v37 = (void *)v40;
  *(void *)&long long v40 = 0;
  if (v37) {
    operator delete(v37);
  }
  sub_21C8C(&v98, "speaker_protection");
  sub_21C8C(&v40, "speaker_hal");
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  sub_21C8C(v45, "speaker_hal");
  sub_21C8C(v46, "speaker_hal");
  memset(&v46[3], 0, 24);
  int v47 = 1684434036;
  CFTypeRef v99 = 0;
  LODWORD(v97.__r_.__value_.__l.__data_) = 1936749683;
  v97.__r_.__value_.__l.__size_ = 0;
  uint64_t v49 = 0;
  unsigned __int8 v50 = 0;
  uint64_t v48 = 0;
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  v101.__r_.__value_.__s.__data_[8] = 0;
  uint64_t v48 = (char *)operator new(0x10uLL);
  uint64_t v49 = v48;
  std::string::size_type v38 = v48 + 16;
  unsigned __int8 v50 = v48 + 16;
  sub_6D16C((uint64_t)v48, 1936749683, 0);
  v54[0] = 0;
  v54[1] = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v49 = v38;
  unsigned int v53 = v54;
  memset(v55, 0, sizeof(v55));
  sub_6E5D0((char *)v55, (uint64_t *)qword_6594C8, (uint64_t *)qword_6594D0, (qword_6594D0 - qword_6594C8) >> 3);
  char v56 = 0;
  char v57 = 0;
  memset(v58, 0, sizeof(v58));
  uint64_t v59 = 0;
  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v101.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v58, (int *)&v101, 3);
  char v60 = 0;
  uint64_t v61 = 0;
  sub_6D224(__dst, (long long *)&v98, &v40);
  sub_6D2A0((uint64_t)&v95, (unsigned __int8 *)__dst, 1);
  sub_6D31C(a1 + 640, (uint64_t *)&v95);
  sub_6C7E4(v96);
  BOOL v39 = (void *)v95;
  *(void *)&long long v95 = 0;
  if (v39) {
    operator delete(v39);
  }
  sub_6C878((uint64_t)&v67);
  if (v66 < 0) {
    operator delete(__dst[0]);
  }
  sub_6C878((uint64_t)&v40);
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  sub_21C8C(&v40, "");
  sub_21C8C(&v95, "");
  sub_21C8C(&v101, off_648B50);
  sub_21C8C(&v98, "AU");
  sub_21C8C(&v97, off_648B48[0]);
  sub_6D364((char *)__dst, &v40, (uint64_t)&v95, &v101, &v98, &v97);
  sub_6D600(a1 + 560, (long long *)__dst);
  if (v71 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete(v67);
  }
  if (v66 < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v97.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v98.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v96) < 0) {
    operator delete((void *)v95);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
}

void sub_32AED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  sub_6E0C0(v55 - 256);
  if (*(char *)(v55 - 121) < 0) {
    operator delete(*(void **)(v55 - 144));
  }
  sub_6C878((uint64_t)&a54);
  sub_6C74C((uint64_t)&a12);
  sub_6C63C(v54);
  _Unwind_Resume(a1);
}

void sub_32B304(void *a1)
{
  uint64_t v2 = operator new(4uLL);
  *uint64_t v2 = 3;
  v69[43] = v2 + 1;
  v69[41] = v2;
  uint64_t v3 = operator new(8uLL);
  void *v3 = 0x400000003;
  v69[40] = v3 + 1;
  v69[38] = v3;
  sub_424954((uint64_t)a1);
  v69[39] = v3;
  operator delete(v3);
  v69[42] = v2;
  operator delete(v2);
  uint64_t v4 = sub_3EFF58();
  uint64_t v6 = *(void *)(v4 + 88);
  uint64_t v5 = *(void *)(v4 + 96);
  int v7 = (uint64_t *)operator new(8uLL);
  unint64_t v8 = v5 - v6;
  *int v7 = ((unint64_t)(v5 - v6) >> 2) | 0x100000000;
  unint64_t v9 = v7 + 1;
  char v56 = v7;
  sub_21C8C(__p, "speaker_general");
  unint64_t v10 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v10) {
    sub_8251C("unordered_map::at: key not found");
  }
  unint64_t v11 = (uint64_t *)(v10 + 248);
  if (v11 != &qword_6594C8) {
    sub_6EEA4(v11, (uint64_t *)qword_6594C8, (uint64_t *)qword_6594D0, (qword_6594D0 - qword_6594C8) >> 3);
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "speaker_latenight_general");
  uint8x8_t v12 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v12) {
    sub_8251C("unordered_map::at: key not found");
  }
  unint64_t v13 = (uint64_t *)(v12 + 248);
  if (v13 != &qword_6594C8) {
    sub_6EEA4(v13, (uint64_t *)qword_6594C8, (uint64_t *)qword_6594D0, (qword_6594D0 - qword_6594C8) >> 3);
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "speaker_movie");
  __int16 v14 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v14) {
    sub_8251C("unordered_map::at: key not found");
  }
  int v15 = (uint64_t *)(v14 + 248);
  if (v15 != &qword_6594C8) {
    sub_6EEA4(v15, (uint64_t *)qword_6594C8, (uint64_t *)qword_6594D0, (qword_6594D0 - qword_6594C8) >> 3);
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "speaker_latenight_movie");
  unint64_t v16 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v16) {
    sub_8251C("unordered_map::at: key not found");
  }
  float v17 = (uint64_t *)(v16 + 248);
  if (v17 != &qword_6594C8) {
    sub_6EEA4(v17, (uint64_t *)qword_6594C8, (uint64_t *)qword_6594D0, (qword_6594D0 - qword_6594C8) >> 3);
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "speaker_measurement");
  BOOL v18 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v18) {
    sub_8251C("unordered_map::at: key not found");
  }
  unint64_t v19 = (uint64_t *)(v18 + 248);
  if (v19 != &qword_6594C8) {
    sub_6EEA4(v19, (uint64_t *)qword_6594C8, (uint64_t *)qword_6594D0, (qword_6594D0 - qword_6594C8) >> 3);
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "speaker_raw");
  unint64_t v20 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v20) {
    sub_8251C("unordered_map::at: key not found");
  }
  size_t v21 = (uint64_t *)(v20 + 248);
  if (v21 != &qword_6594C8) {
    sub_6EEA4(v21, (uint64_t *)qword_6594C8, (uint64_t *)qword_6594D0, (qword_6594D0 - qword_6594C8) >> 3);
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "speaker_ringtone");
  uint64_t v22 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v22) {
    sub_8251C("unordered_map::at: key not found");
  }
  __int16 v23 = (uint64_t *)(v22 + 248);
  if (v23 != &qword_6594C8) {
    sub_6EEA4(v23, (uint64_t *)qword_6594C8, (uint64_t *)qword_6594D0, (qword_6594D0 - qword_6594C8) >> 3);
  }
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "omni_mic_general");
  unint64_t v24 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v24) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_6EEA4((void *)v24 + 31, v7, v9, 1uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "omni_mic_measurement");
  BOOL v25 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v25) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_6EEA4((void *)v25 + 31, v7, v9, 1uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "omni_mic_hearing_accessibility");
  CFDictionaryRef v26 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v26) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_6EEA4((void *)v26 + 31, v7, v9, 1uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "omni_mic_video_recording");
  BOOL v27 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v27) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_6EEA4((void *)v27 + 31, v7, v9, 1uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "beamformed_mic_general");
  uint64_t v28 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v28) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_6EEA4((void *)v28 + 31, v7, v9, 1uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "beamformed_mic_measurement");
  unint64_t v29 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v29) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_6EEA4((void *)v29 + 31, v7, v9, 1uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "beamformed_mic_video_recording");
  CFIndex v30 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v30) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_6EEA4((void *)v30 + 31, v7, v9, 1uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "beamformed_mic_voice_messages");
  CFStringRef v31 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v31) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_6EEA4((void *)v31 + 31, v7, v9, 1uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "beamformed_mic_voice_recognition");
  CFDictionaryRef v32 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v32) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_6EEA4((void *)v32 + 31, v7, v9, 1uLL);
  unint64_t v33 = v8 >> 2;
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  *(void *)((char *)&v85 + 4) = 0x800000002;
  LODWORD(v85) = v8 >> 2;
  HIDWORD(v85) = 0;
  sub_21C8C(__p, "siri_barge_in");
  __int16 v34 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v34) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CF54((void *)v34 + 31, (uint64_t *)&v85, &v86, 2uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v85 = v33 | 0x300000000;
  sub_21C8C(__p, "multicam_recording");
  unint64_t v35 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v35) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CF54((void *)v35 + 31, (uint64_t *)&v85, (uint64_t *)&v85 + 1, 1uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  *(void *)&long long v85 = v33 | 0x400000000;
  sub_21C8C(__p, "mic_peripheral_allmics");
  char v36 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v36) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CF54((void *)v36 + 31, (uint64_t *)&v85, (uint64_t *)&v85 + 1, 1uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(&v65, "spatial_video_recording");
  sub_21C8C(&v85, "spatial_video_recording");
  uint64_t v88 = 0;
  uint64_t v87 = 0;
  uint64_t v89 = 0;
  sub_21C8C(v90, "mic_spatial");
  sub_21C8C(v91, "mic_spatial");
  uint64_t v93 = 0;
  uint64_t v92 = 0;
  uint64_t v94 = 0;
  int v95 = 1684434036;
  int v37 = (int *)operator new(8uLL);
  *(void *)int v37 = 0x7472696D706D6269;
  uint64_t v78 = v37 + 2;
  int v76 = v37;
  CFDictionaryRef v77 = (CFDictionaryRef)(v37 + 2);
  CFArrayRef v38 = sub_650B4(&v76);
  CFArrayRef v79 = v38;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v61 = 0;
  *(void *)&long long v114 = &v61;
  BYTE8(v114) = 0;
  uint64_t v61 = (uint64_t *)operator new(8uLL);
  uint64_t v62 = v61;
  BOOL v39 = v61 + 1;
  uint64_t v63 = v61 + 1;
  sub_1CE2D0(v61, v38);
  uint64_t v62 = v39;
  sub_1CE30C((uint64_t)&v80, &v61);
  v64[0] = &v80;
  v64[1] = 1;
  CFDictionaryRef v40 = sub_4D3D8((uint64_t)v64);
  LODWORD(v82) = 1684303986;
  *((void *)&v82 + 1) = v40;
  v64[2] = 0;
  BOOL v41 = operator new(0xCuLL);
  int v72 = (char *)(v41 + 3);
  *(void *)BOOL v41 = 0x6473706700000000;
  v41[2] = 1969844082;
  CFTypeRef v70 = v41;
  CFTypeRef v71 = v41 + 3;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  char v57 = 0;
  *(void *)&long long v114 = &v57;
  BYTE8(v114) = 0;
  char v57 = operator new(0x18uLL);
  uint64_t v58 = v57;
  uint64_t v59 = v57 + 3;
  uint64_t v58 = sub_1CDC20((uint64_t)&v59, (uint64_t)&v70, (uint64_t)&v73, v57);
  sub_1CDCD4((uint64_t)&v73, (uint64_t *)&v57);
  v75[0] = &v73;
  v75[1] = &def_1E50E8 + 1;
  CFDictionaryRef v42 = sub_4D3D8((uint64_t)v75);
  LODWORD(v83) = 1768907891;
  CFDictionaryRef v84 = v42;
  CFTypeRef cf = 0;
  std::string v97 = 0;
  std::string v98 = 0;
  int v96 = 0;
  *(void *)&long long v114 = &v96;
  BYTE8(v114) = 0;
  uint64_t v43 = (char *)operator new(0x20uLL);
  uint64_t v44 = 0;
  uint64_t v45 = (v8 >> 2);
  int v96 = v43;
  std::string v97 = v43;
  std::string v98 = v43 + 32;
  do
  {
    sub_6D16C((uint64_t)&v43[v44], *(_DWORD *)((char *)&v82 + v44), *(CFTypeRef *)((char *)&v82 + v44 + 8));
    v44 += 16;
  }
  while (v44 != 32);
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  long long v99 = 0u;
  long long v100 = 0u;
  std::string v97 = v43 + 32;
  std::string v101 = &v102;
  long long v106 = 0;
  long long v104 = 0;
  long long v105 = 0;
  std::string v46 = operator new(8uLL);
  long long v104 = v46;
  *std::string v46 = v45 | 0x200000000;
  long long v106 = v46 + 1;
  long long v105 = v46 + 1;
  char v107 = 0;
  char v108 = 0;
  long long v110 = 0u;
  long long v109 = 0u;
  uint64_t v111 = 0;
  long long v114 = xmmword_5968C4;
  uint64_t v115 = 2;
  sub_6D1AC((uint64_t)&v109, (int *)&v114, 3);
  char v112 = 0;
  uint64_t v113 = 0;
  sub_6D224(__p, &v65, &v85);
  sub_32D080((uint64_t)a1, (unsigned __int8 *)__p, (uint64_t)__p);
  sub_6C878((uint64_t)v69);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_6C878((uint64_t)&v85);
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v48 = *(const void **)((char *)&v82 + i);
    if (v48) {
      CFRelease(v48);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v74) {
    CFRelease(v74);
  }
  if (v73) {
    CFRelease(v73);
  }
  *(void *)&long long v114 = &v57;
  sub_15B944((void ***)&v114);
  if (v70)
  {
    CFTypeRef v71 = v70;
    operator delete((void *)v70);
  }
  if (v81) {
    CFRelease(v81);
  }
  if (v80) {
    CFRelease(v80);
  }
  *(void *)&long long v114 = &v61;
  sub_15CB74((void ***)&v114);
  if (v38) {
    CFRelease(v38);
  }
  operator delete(v37);
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)v65);
  }
  sub_21C8C(&v114, "stereo_recording");
  sub_21C8C(&v85, "spatial_video_recording");
  uint64_t v88 = 0;
  uint64_t v87 = 0;
  uint64_t v89 = 0;
  sub_21C8C(v90, "mic_spatial");
  sub_21C8C(v91, "mic_spatial");
  uint64_t v93 = 0;
  uint64_t v92 = 0;
  uint64_t v94 = 0;
  int v95 = 1684434036;
  uint64_t v49 = (uint64_t *)operator new(8uLL);
  *uint64_t v49 = 0x7472696D706D6269;
  uint64_t v62 = v49 + 1;
  uint64_t v63 = v49 + 1;
  uint64_t v61 = v49;
  CFArrayRef v50 = sub_650B4((int **)&v61);
  v75[0] = v50;
  uint64_t v66 = 0;
  long long v65 = 0uLL;
  *(void *)&long long v82 = &v65;
  BYTE8(v82) = 0;
  *(void *)&long long v65 = operator new(8uLL);
  *((void *)&v65 + 1) = v65;
  uint64_t v51 = v65 + 8;
  uint64_t v66 = v65 + 8;
  sub_1CE2D0((void *)v65, v50);
  *((void *)&v65 + 1) = v51;
  sub_1CE30C((uint64_t)&v70, (uint64_t **)&v65);
  char v57 = &v70;
  uint64_t v58 = (void *)(&def_1E50E8 + 1);
  CFDictionaryRef v52 = sub_4D3D8((uint64_t)&v57);
  LODWORD(v76) = 1684303986;
  CFDictionaryRef v77 = v52;
  CFTypeRef v80 = 0;
  std::string v97 = 0;
  std::string v98 = 0;
  int v96 = 0;
  *(void *)&long long v82 = &v96;
  BYTE8(v82) = 0;
  int v96 = (char *)operator new(0x10uLL);
  std::string v97 = v96;
  unsigned int v53 = v96 + 16;
  std::string v98 = v96 + 16;
  sub_6D16C((uint64_t)v96, 1684303986, v52);
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  long long v99 = 0u;
  long long v100 = 0u;
  std::string v97 = v53;
  std::string v101 = &v102;
  long long v106 = 0;
  long long v104 = 0;
  long long v105 = 0;
  uint64_t v54 = operator new(8uLL);
  long long v104 = v54;
  *uint64_t v54 = v45 | 0x200000000;
  long long v106 = v54 + 1;
  long long v105 = v54 + 1;
  char v107 = 0;
  char v108 = 0;
  long long v110 = 0u;
  long long v109 = 0u;
  uint64_t v111 = 0;
  long long v82 = xmmword_5968C4;
  uint64_t v83 = 2;
  sub_6D1AC((uint64_t)&v109, (int *)&v82, 3);
  char v112 = 0;
  uint64_t v113 = 0;
  sub_6D224(__p, &v114, &v85);
  sub_32D080((uint64_t)a1, (unsigned __int8 *)__p, (uint64_t)__p);
  sub_6C878((uint64_t)v69);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  sub_6C878((uint64_t)&v85);
  if (v52) {
    CFRelease(v52);
  }
  if (v71) {
    CFRelease(v71);
  }
  if (v70) {
    CFRelease(v70);
  }
  *(void *)&long long v82 = &v65;
  sub_15CB74((void ***)&v82);
  if (v75[0]) {
    CFRelease(v75[0]);
  }
  operator delete(v49);
  if (SHIBYTE(v115) < 0) {
    operator delete((void *)v114);
  }
  *(void *)((char *)&v85 + 4) = 0x800000001;
  LODWORD(v85) = v33;
  HIDWORD(v85) = 0;
  sub_21C8C(__p, "mic_echo_cancellation");
  uint64_t v55 = sub_32CA70(a1, (unsigned __int8 *)__p);
  if (!v55) {
    sub_8251C("unordered_map::at: key not found");
  }
  sub_32CF54((void *)v55 + 31, (uint64_t *)&v85, &v86, 2uLL);
  if (v68 < 0) {
    operator delete(__p[0]);
  }
  operator delete(v56);
}

void sub_32C168(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_32C67C(uint64_t a1, char *a2)
{
  uint64_t v4 = sub_21C8C((void *)a1, "speaker_general");
  v4[3] = 0;
  v4[4] = 0;
  v4[5] = 0;
  sub_21C8C(v4 + 6, a2);
  sub_21C8C((void *)(a1 + 72), "speaker_general");
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1668049011;
  uint64_t v5 = operator new(0xCuLL);
  unint64_t v16 = v5 + 3;
  float v17 = (char *)(v5 + 3);
  *(void *)uint64_t v5 = 0x6473706700000001;
  v5[2] = 1869768046;
  long long __p = v5;
  uint8x8_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v11 = 0;
  *(void *)&long long v22 = &v11;
  BYTE8(v22) = 0;
  unint64_t v11 = operator new(0x18uLL);
  uint8x8_t v12 = v11;
  unint64_t v13 = v11 + 3;
  uint8x8_t v12 = sub_1CDC20((uint64_t)&v13, (uint64_t)&__p, (uint64_t)&v18, v11);
  sub_1CDCD4((uint64_t)&v18, (uint64_t *)&v11);
  v14[0] = &v18;
  v14[1] = 1;
  CFDictionaryRef v6 = sub_4D3D8((uint64_t)v14);
  int v20 = 1768907891;
  CFDictionaryRef v21 = v6;
  *(void *)&long long v22 = a1 + 128;
  v14[2] = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  BYTE8(v22) = 0;
  int v7 = (char *)operator new(0x10uLL);
  *(void *)(a1 + 128) = v7;
  *(void *)(a1 + 136) = v7;
  unint64_t v8 = v7 + 16;
  *(void *)(a1 + 144) = v7 + 16;
  sub_6D16C((uint64_t)v7, 1768907891, v6);
  *(void *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  unint64_t v9 = (char *)operator new(0xCuLL);
  *(void *)(a1 + 208) = 0;
  qmemcpy(v9, "ulovlovllovt", 12);
  *(void *)(a1 + 160) = v9;
  *(void *)(a1 + 168) = v9 + 12;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = v9 + 12;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  unint64_t v10 = operator new(8uLL);
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 208) = v10;
  *v10++ = 0x800000002;
  *(void *)(a1 + 216) = v10;
  *(void *)(a1 + 224) = v10;
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = 0;
  long long v22 = xmmword_5968C4;
  uint64_t v23 = 2;
  sub_6D1AC(a1 + 248, (int *)&v22, 3);
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  if (v6) {
    CFRelease(v6);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  *(void *)&long long v22 = &v11;
  sub_15B944((void ***)&v22);
  if (__p)
  {
    unint64_t v16 = __p;
    operator delete(__p);
  }
}

void sub_32C92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_32CA60()
{
}

void sub_32CA68()
{
}

unsigned __int8 *sub_32CA70(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_6789C((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (sub_67CEC(i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t sub_32CB6C(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  int8x8_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)int8x8_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  uint8x8_t v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)uint8x8_t v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  unint64_t v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)unint64_t v9 = v10;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  unint64_t v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  long long v12 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)unint64_t v11 = v12;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 30);
  sub_6F66C((void **)(a1 + 128));
  *(_OWORD *)(a1 + 128) = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  uint64_t v13 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = *((void *)a2 + 19);
  *((void *)a2 + 19) = v13;
  __int16 v14 = *(void **)(a1 + 160);
  if (v14)
  {
    *(void *)(a1 + 168) = v14;
    operator delete(v14);
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
  }
  *(_OWORD *)(a1 + 160) = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  uint64_t v15 = a1 + 192;
  sub_6C9A0(*(void **)(a1 + 192));
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  unint64_t v16 = a2 + 12;
  uint64_t v17 = *((void *)a2 + 24);
  *(void *)(a1 + 192) = v17;
  uint64_t v18 = *((void *)a2 + 25);
  *(void *)(a1 + 200) = v18;
  if (v18)
  {
    *(void *)(v17 + 16) = v15;
    *((void *)a2 + 23) = v16;
    void *v16 = 0;
    *((void *)a2 + 25) = 0;
  }
  else
  {
    *(void *)(a1 + 184) = v15;
  }
  unint64_t v19 = *(void **)(a1 + 208);
  if (v19)
  {
    *(void *)(a1 + 216) = v19;
    operator delete(v19);
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
  }
  *(_OWORD *)(a1 + 208) = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  *((void *)a2 + 28) = 0;
  if (*(unsigned __int8 *)(a1 + 240) == *((unsigned __int8 *)a2 + 240))
  {
    if (*(unsigned char *)(a1 + 240))
    {
      *(_DWORD *)(a1 + 232) = *((_DWORD *)a2 + 58);
      *(_DWORD *)(a1 + 236) = *((_DWORD *)a2 + 59);
    }
  }
  else if (*(unsigned char *)(a1 + 240))
  {
    *(unsigned char *)(a1 + 240) = 0;
  }
  else
  {
    *(void *)(a1 + 232) = *((void *)a2 + 29);
    *(unsigned char *)(a1 + 240) = 1;
  }
  sub_198D88(a1 + 248, (uint64_t *)a2 + 31);
  *(unsigned char *)(a1 + 288) = *((unsigned char *)a2 + 288);
  uint64_t v20 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = *((void *)a2 + 37);
  *((void *)a2 + 37) = v20;
  return a1;
}

uint64_t sub_32CDD4(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 120) = 1684434036;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 192;
  *(unsigned char *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  long long v3 = xmmword_5968C4;
  uint64_t v4 = 2;
  sub_6D1AC(a1 + 248, (int *)&v3, 3);
  *(void *)(a1 + 296) = 0;
  return a1;
}

void sub_32CEB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  int8x8_t v5 = v3;
  uint8x8_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v2 + 216) = v7;
    operator delete(v7);
  }
  sub_6C9A0(*(void **)(v2 + 192));
  long long v8 = *(void **)(v2 + 160);
  if (v8)
  {
    *(void *)(v2 + 168) = v8;
    operator delete(v8);
  }
  sub_60394(v4);
  sub_6C9F4((void ***)va);
  if (*(char *)(v2 + 119) < 0) {
    operator delete(*(void **)(v2 + 96));
  }
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*(void **)(v2 + 72));
  }
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*(void **)(v2 + 48));
  }
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*(void **)(v2 + 24));
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

char *sub_32CF54(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  long long v6 = a2;
  uint64_t v8 = a1[2];
  AudioDeviceIOProcID result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    uint64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    long long v12 = v18;
    unint64_t v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      BOOL v25 = result;
      while (v6 != a3)
      {
        uint64_t v26 = *v6++;
        *(void *)BOOL v25 = v26;
        v25 += 8;
      }
      uint64_t v17 = (char *)(v25 - result);
      long long v12 = result;
    }
    else
    {
      uint64_t v20 = &a2[v19];
      if (v12 != result)
      {
        uint64_t v21 = 8 * v19;
        do
        {
          uint64_t v22 = *v6++;
          *(void *)AudioDeviceIOProcID result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      uint64_t v23 = v12;
      while (v20 != a3)
      {
        uint64_t v24 = *v20++;
        *(void *)uint64_t v23 = v24;
        v23 += 8;
      }
      uint64_t v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    AudioDeviceIOProcID result = sub_66F48(a1, v11);
    __int16 v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    long long v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        uint64_t v16 = *v6++;
        *(void *)uint64_t v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    uint64_t v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void sub_32D080(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v7 = sub_6789C((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    long long v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_67CEC(i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t v16 = (char *)operator new(0x158uLL);
  v44[0] = v16;
  v44[1] = a1 + 16;
  char v45 = 0;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  uint64_t v17 = v16 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_21E8C(v17, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a3;
    *((void *)v16 + 4) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v16 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  long long v18 = *(_OWORD *)(a3 + 48);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *((_OWORD *)v16 + 4) = v18;
  *((void *)v16 + 10) = *(void *)(a3 + 64);
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  *((void *)v16 + 13) = *(void *)(a3 + 88);
  *(_OWORD *)(v16 + 88) = *(_OWORD *)(a3 + 72);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  long long v19 = *(_OWORD *)(a3 + 96);
  *((void *)v16 + 16) = *(void *)(a3 + 112);
  *((_OWORD *)v16 + 7) = v19;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  long long v20 = *(_OWORD *)(a3 + 120);
  *((void *)v16 + 19) = *(void *)(a3 + 136);
  *(_OWORD *)(v16 + 136) = v20;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *((_DWORD *)v16 + 40) = *(_DWORD *)(a3 + 144);
  *(_OWORD *)(v16 + 168) = *(_OWORD *)(a3 + 152);
  *(void *)(a3 + 152) = 0;
  *(void *)(a3 + 160) = 0;
  uint64_t v21 = *(void *)(a3 + 176);
  *((void *)v16 + 23) = *(void *)(a3 + 168);
  *((void *)v16 + 24) = v21;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(_OWORD *)(v16 + 200) = *(_OWORD *)(a3 + 184);
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = 0;
  uint64_t v22 = *(void *)(a3 + 200);
  uint64_t v23 = *(void *)(a3 + 208);
  *(void *)(a3 + 200) = 0;
  uint64_t v24 = (void *)(a3 + 216);
  uint64_t v25 = *(void *)(a3 + 216);
  *((void *)v16 + 27) = v22;
  *((void *)v16 + 28) = v23;
  uint64_t v26 = *(void *)(a3 + 224);
  *((void *)v16 + 29) = v25;
  *((void *)v16 + 30) = v26;
  BOOL v27 = v16 + 232;
  if (v26)
  {
    *(void *)(v25 + 16) = v27;
    *(void *)(a3 + 208) = v24;
    *uint64_t v24 = 0;
    *(void *)(a3 + 224) = 0;
  }
  else
  {
    *((void *)v16 + 28) = v27;
  }
  *(_OWORD *)(v16 + 248) = *(_OWORD *)(a3 + 232);
  uint64_t v28 = *(void *)(a3 + 248);
  uint64_t v29 = *(void *)(a3 + 256);
  *(void *)(a3 + 240) = 0;
  *(void *)(a3 + 248) = 0;
  *(void *)(a3 + 232) = 0;
  *((void *)v16 + 33) = v28;
  *((void *)v16 + 34) = v29;
  *((_DWORD *)v16 + 70) = *(_DWORD *)(a3 + 264);
  uint64_t v30 = *(void *)(a3 + 272);
  unint64_t v31 = *(void *)(a3 + 280);
  *(void *)(a3 + 272) = 0;
  *(void *)(a3 + 280) = 0;
  *((void *)v16 + 36) = v30;
  *((void *)v16 + 37) = v31;
  uint64_t v33 = *(void *)(a3 + 288);
  uint64_t v32 = *(void *)(a3 + 296);
  *((void *)v16 + 38) = v33;
  *((void *)v16 + 39) = v32;
  *((_DWORD *)v16 + 80) = *(_DWORD *)(a3 + 304);
  if (v32)
  {
    unint64_t v34 = *(void *)(v33 + 8);
    if ((v31 & (v31 - 1)) != 0)
    {
      if (v34 >= v31) {
        v34 %= v31;
      }
    }
    else
    {
      v34 &= v31 - 1;
    }
    *(void *)(v30 + 8 * v34) = v16 + 304;
    *(void *)(a3 + 288) = 0;
    *(void *)(a3 + 296) = 0;
  }
  v16[328] = *(unsigned char *)(a3 + 312);
  *((void *)v16 + 42) = *(void *)(a3 + 320);
  *(void *)(a3 + 320) = 0;
  char v45 = 1;
  float v35 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v36 = *(float *)(a1 + 32);
  if (!v9 || (float)(v36 * (float)v9) < v35)
  {
    BOOL v37 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    unint64_t v38 = v37 | (2 * v9);
    unint64_t v39 = vcvtps_u32_f32(v35 / v36);
    if (v38 <= v39) {
      size_t v40 = v39;
    }
    else {
      size_t v40 = v38;
    }
    sub_6DEC4(a1, v40);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v41 = *(void *)a1;
  CFDictionaryRef v42 = *(void **)(*(void *)a1 + 8 * v3);
  if (v42)
  {
    *(void *)uint64_t v16 = *v42;
LABEL_51:
    void *v42 = v16;
    goto LABEL_52;
  }
  *(void *)uint64_t v16 = *v15;
  void *v15 = v16;
  *(void *)(v41 + 8 * v3) = v15;
  if (*(void *)v16)
  {
    unint64_t v43 = *(void *)(*(void *)v16 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v43 >= v9) {
        v43 %= v9;
      }
    }
    else
    {
      v43 &= v9 - 1;
    }
    CFDictionaryRef v42 = (void *)(*(void *)a1 + 8 * v43);
    goto LABEL_51;
  }
LABEL_52:
  v44[0] = 0;
  ++*(void *)(a1 + 24);
  sub_6E0C0((uint64_t)v44);
}

void sub_32D43C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6E0C0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_32D454(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_32D474(uint64_t a1, void *a2)
{
  *a2 = off_633B20;
}

void *sub_32D494()
{
  AudioDeviceIOProcID result = operator new(0x10uLL);
  void *result = off_633B20;
  return result;
}

void sub_32D4CC()
{
}

BOOL sub_32D4E4(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_32D504(uint64_t a1, void *a2)
{
  *a2 = off_633AD8;
}

void *sub_32D524()
{
  AudioDeviceIOProcID result = operator new(0x10uLL);
  void *result = off_633AD8;
  return result;
}

void sub_32D55C()
{
}

uint64_t sub_32D574(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_32D5E8(uint64_t a1, void *a2)
{
  *a2 = off_633A90;
}

void *sub_32D608()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633A90;
  return result;
}

void sub_32D640()
{
}

uint64_t sub_32D658(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_32D690(uint64_t a1, void *a2)
{
  *a2 = off_633A48;
}

void *sub_32D6B0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633A48;
  return result;
}

void sub_32D6E8()
{
}

uint64_t sub_32D700(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_32D738(uint64_t a1, void *a2)
{
  *a2 = off_633A00;
}

void *sub_32D758()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633A00;
  return result;
}

void sub_32D790()
{
}

BOOL sub_32D7A8(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_32D7D0(uint64_t a1, void *a2)
{
  *a2 = off_6339B8;
}

void *sub_32D7F0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6339B8;
  return result;
}

void sub_32D828()
{
}

uint64_t sub_32D840(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_32D878(uint64_t a1, void *a2)
{
  *a2 = off_633970;
}

void *sub_32D898()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633970;
  return result;
}

void sub_32D8D0()
{
}

uint64_t sub_32D8E8(int a1, unsigned int a2, int *a3)
{
  if (a1 == 1 && a2)
  {
    uint64_t v17 = v8;
    uint64_t v18 = v7;
    uint64_t v19 = v6;
    uint64_t v20 = v5;
    uint64_t v21 = v3;
    uint64_t v22 = v4;
    uint64_t v10 = a2;
    do
    {
      int v12 = *a3;
      a3 += 3;
      int v11 = v12;
      if (v12 == 1886221684)
      {
        *(void *)&inAddress.mSelector = 0x676C6F62706D7574;
        inAddress.mElement = 0;
        UInt32 ioDataSize = 4;
        int outData = 1;
        AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &ioDataSize, &outData);
        byte_648A3D = outData != 0;
      }
      else if (v11 == 1937010031)
      {
        *(void *)&inAddress.mSelector = 0x676C6F6273746D6FLL;
        inAddress.mElement = 0;
        UInt32 ioDataSize = 4;
        int outData = 1;
        AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &ioDataSize, &outData);
      }
      else if (v11 == 1970496882)
      {
        *(void *)&inAddress.mSelector = 0x676C6F6275736572;
        inAddress.mElement = 0;
        UInt32 ioDataSize = 4;
        int outData = 1;
        AudioObjectGetPropertyData(1u, &inAddress, 0, 0, &ioDataSize, &outData);
        byte_648A3C = outData != 0;
      }
      --v10;
    }
    while (v10);
  }
  return 0;
}

CFMutableStringRef sub_32DA5C()
{
  CFMutableStringRef Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  if (!Mutable) {
    return 0;
  }
  unint64_t v1 = Mutable;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)cStr = 0u;
  long long v11 = 0u;
  CFStringRef v8 = (CFStringRef)(&stru_20 + 32);
  sysctlbyname("hw.model", cStr, (size_t *)&v8, 0, 0);
  CFStringAppendCString(v1, cStr, 0);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, v1);
  CFRelease(v1);
  if (MutableCopy)
  {
    CFStringRef v3 = @"AP";
    if (CFStringHasSuffix(MutableCopy, @"AP")
      || (CFStringRef v3 = @"DEV", CFStringHasSuffix(MutableCopy, @"DEV"))
      || (CFStringRef v3 = @"ap", CFStringHasSuffix(MutableCopy, @"ap"))
      || (CFStringRef v3 = @"dev", CFStringHasSuffix(MutableCopy, @"dev")))
    {
      CFStringTrim(MutableCopy, v3);
    }
    *(void *)cStr = 0;
    cStr[8] = 1;
    uint64_t v4 = MGGetProductType();
    if (v4 == 952317141)
    {
      CFStringRef v8 = CFStringCreateWithCString(0, "u", 0x600u);
      char v9 = 1;
      sub_8B9E0((uint64_t)cStr, (uint64_t)&v8);
    }
    else
    {
      if (v4 != 2081274472 && v4 != 2468178735) {
        goto LABEL_16;
      }
      CFStringRef v8 = CFStringCreateWithCString(0, "m", 0x600u);
      char v9 = 1;
      sub_8B9E0((uint64_t)cStr, (uint64_t)&v8);
    }
    sub_72924((uint64_t)&v8);
LABEL_16:
    CFStringRef v5 = *(const __CFString **)cStr;
    if (*(void *)cStr && CFStringHasSuffix(MutableCopy, *(CFStringRef *)cStr))
    {
      CFIndex Length = CFStringGetLength(MutableCopy);
      v14.length = CFStringGetLength(v5);
      v14.location = Length - v14.length;
      CFStringFindAndReplace(MutableCopy, v5, &stru_642048, v14, 1uLL);
    }
    sub_72924((uint64_t)cStr);
  }
  return MutableCopy;
}

void sub_32DCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_32DD14(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = 0;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, unsigned int *))(**(void **)(a1 + 48) + 48))(*(void *)(a1 + 48), a2, &v4);
  if (!result) {
    return (*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v4);
  }
  return result;
}

uint64_t sub_32DD9C(uint64_t a1, unsigned int a2)
{
  sub_26F17C();
  (*(void (**)(uint64_t *__return_ptr))(qword_64E880 + 40))(&v9);
  if (v9)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (!v4)
    {
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v7 = v9;
      CFStringRef v8 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 32))(v5, &v7, a2);
      if (v8) {
        sub_4636C(v8);
      }
    }
  }
  else
  {
    uint64_t v4 = 1063351615;
  }
  if (v10) {
    sub_4636C(v10);
  }
  return v4;
}

void sub_32DEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_4636C(a10);
  }
  if (a12) {
    sub_4636C(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_32DEE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, a3, a4, a5);
}

uint64_t sub_32DF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, a3, a6);
}

uint64_t sub_32DF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, a3, a6, a7, a4, a5);
}

uint64_t sub_32DF88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a3, a6, a7, a4, a5);
}

uint64_t sub_32DFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  char v9 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a3, a6, &v9, a4, a5);
  if (a7) {
    *a7 = v9;
  }
  return result;
}

void sub_32E040(uint64_t a1, void *a2)
{
  a2[1] = *a2;
  sub_26F17C();
  unint64_t v24 = 0;
  (*(void (**)(uint64_t *, unint64_t *))(qword_64E880 + 16))(&qword_64E880, &v24);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v23 = 0;
  if (v24)
  {
    uint64_t v3 = 0;
    for (i = 0; i < v24; uint64_t v3 = ++i)
    {
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t *))(qword_64E880 + 32))(&qword_64E880, v3, &v21))
      {
        int v6 = v21;
        int v5 = HIDWORD(v21);
        int v7 = v22;
        char v9 = (_DWORD *)a2[1];
        unint64_t v8 = a2[2];
        if ((unint64_t)v9 >= v8)
        {
          long long v11 = (_DWORD *)*a2;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a2) >> 2);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0x1555555555555555) {
            sub_60548();
          }
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (void)v11) >> 2);
          if (2 * v14 > v13) {
            unint64_t v13 = 2 * v14;
          }
          if (v14 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v15 = 0x1555555555555555;
          }
          else {
            unint64_t v15 = v13;
          }
          if (v15)
          {
            unint64_t v15 = (unint64_t)sub_564C(v15);
            long long v11 = (_DWORD *)*a2;
            char v9 = (_DWORD *)a2[1];
          }
          else
          {
            uint64_t v16 = 0;
          }
          uint64_t v17 = (_DWORD *)(v15 + 12 * v12);
          *uint64_t v17 = v6;
          v17[1] = v5;
          v17[2] = v7;
          uint64_t v18 = v17;
          if (v9 != v11)
          {
            do
            {
              uint64_t v19 = *(void *)(v9 - 3);
              v9 -= 3;
              int v20 = v9[2];
              *(void *)(v18 - 3) = v19;
              v18 -= 3;
              uint64_t v18[2] = v20;
            }
            while (v9 != v11);
            long long v11 = (_DWORD *)*a2;
          }
          uint64_t v10 = v17 + 3;
          *a2 = v18;
          a2[1] = v17 + 3;
          a2[2] = v15 + 12 * v16;
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *char v9 = v21;
          v9[1] = v5;
          uint64_t v10 = v9 + 3;
          v9[2] = v7;
        }
        a2[1] = v10;
      }
    }
  }
}

void sub_32E214(void *a1)
{
  sub_297F20(a1);

  operator delete();
}

uint64_t sub_32E250(uint64_t result, unsigned int a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 32) - *(void *)(result + 24)) >> 3) > a2)
  {
    uint64_t v2 = result;
    unint64_t v3 = a2;
    uint64_t result = AUPBUnregisterAU();
    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t v4 = *(void *)(v2 + 32);
    if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) > v3)
    {
      uint64_t v6 = v5 + 24 * v3;
      uint64_t v7 = v4 - (v6 + 24);
      if (v4 != v6 + 24) {
        uint64_t result = (uint64_t)memmove((void *)v6, (const void *)(v6 + 24), v4 - (v6 + 24));
      }
      *(void *)(v2 + 32) = v6 + v7;
    }
  }
  return result;
}

void sub_32E2F0()
{
  v0 = &unk_65DB00;
  char v1 = 1;
  sub_F648((uint64_t)&unk_65DB00);
  operator new();
}

void sub_32E79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13)
{
  sub_32E858(1, v13);
  sub_32E7F8(&a10, 0);
  sub_C7D4(&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_32E7F8(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    sub_1B6FA0(v2 + 8);
    operator delete();
  }
  return result;
}

void sub_32E858(char a1, uint64_t *__p)
{
  if (a1) {
    sub_32E7F8(__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

unsigned char *sub_32E8B0(uint64_t a1)
{
  unint64_t v14 = &unk_65DB00;
  char v15 = 1;
  sub_F648((uint64_t)&unk_65DB00);
  uint64_t v2 = sub_3AACC(*(_DWORD *)(a1 + 8));
  if (v2)
  {
    unint64_t v3 = v2;
    unint64_t v4 = *((void *)&xmmword_65DC20 + 1);
    unint64_t v5 = v2[1];
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_65DC20 + 8));
    v6.i16[0] = vaddlv_u8(v6);
    if (v6.u32[0] > 1uLL)
    {
      if (v5 >= *((void *)&xmmword_65DC20 + 1)) {
        v5 %= *((void *)&xmmword_65DC20 + 1);
      }
    }
    else
    {
      v5 &= *((void *)&xmmword_65DC20 + 1) - 1;
    }
    uint64_t v7 = *(uint64_t **)(xmmword_65DC20 + 8 * v5);
    do
    {
      unint64_t v8 = v7;
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7 != v2);
    if (v8 == &qword_65DC30) {
      goto LABEL_19;
    }
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *((void *)&xmmword_65DC20 + 1)) {
        v9 %= *((void *)&xmmword_65DC20 + 1);
      }
    }
    else
    {
      v9 &= *((void *)&xmmword_65DC20 + 1) - 1;
    }
    if (v9 != v5)
    {
LABEL_19:
      if (!*v2) {
        goto LABEL_20;
      }
      unint64_t v10 = *(void *)(*v2 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *((void *)&xmmword_65DC20 + 1)) {
          v10 %= *((void *)&xmmword_65DC20 + 1);
        }
      }
      else
      {
        v10 &= *((void *)&xmmword_65DC20 + 1) - 1;
      }
      if (v10 != v5) {
LABEL_20:
      }
        *(void *)(xmmword_65DC20 + 8 * v5) = 0;
    }
    uint64_t v11 = *v2;
    if (*v2)
    {
      unint64_t v12 = *(void *)(v11 + 8);
      if (v6.u32[0] > 1uLL)
      {
        if (v12 >= v4) {
          v12 %= v4;
        }
      }
      else
      {
        v12 &= v4 - 1;
      }
      if (v12 != v5)
      {
        *(void *)(xmmword_65DC20 + 8 * v12) = v8;
        uint64_t v11 = *v2;
      }
    }
    *unint64_t v8 = v11;
    *uint64_t v2 = 0;
    --qword_65DC38;
    sub_32E7F8(v2 + 3, 0);
    operator delete(v3);
  }
  return sub_C7D4(&v14);
}

unsigned char *sub_32EA50(uint64_t *a1)
{
  unint64_t v5 = &unk_65DB00;
  char v6 = 1;
  sub_F648((uint64_t)&unk_65DB00);
  uint64_t v2 = sub_3AACC(*(_DWORD *)(*a1 + 8));
  if (v2)
  {
    sub_F648(v2[3] + 8);
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return sub_C7D4(&v5);
}

void sub_32EAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

double sub_32EAF8(uint64_t a1, double a2)
{
  if (sub_179F0C())
  {
    uint64_t v4 = *(void *)(a1 + 640);
    return sub_17A0E4(v4);
  }
  else
  {
    return sub_20F514(a1, a2);
  }
}

uint64_t sub_32EB68(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886743662 && a2 != 1885629550)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(17);
    unint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      char v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      unint64_t v14 = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 167;
      __int16 v17 = 2080;
      uint64_t v18 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    unint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        unint64_t v14 = "Device_Baseband_Voice_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 168;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_32ED2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_32ED48(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  uint64_t v21 = 0x707472756D646473;
  int v22 = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v21))
  {
    LODWORD(v13) = 1634742884;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, CFStringRef *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                                  + 48))(a1, &v21, 0, 0, 4, &v13);
  }
  uint64_t v19 = 0x676C6F6263737263;
  int v20 = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v19))
  {
    LODWORD(v13) = 1650602615;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, CFStringRef *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                                  + 48))(a1, &v19, 0, 0, 4, &v13);
  }
  CFStringRef v2 = CFStringCreateWithCString(0, "Baseband Downlink", 0x600u);
  *(void *)buf = v2;
  buf[8] = 1;
  CFStringRef v13 = v2;
  char v14 = 1;
  if (v2) {
    CFRetain(v2);
  }
  CFStringRef v15 = 0;
  char v16 = 1;
  CFStringRef v17 = 0;
  char v18 = 1;
  sub_72924((uint64_t)buf);
  uint64_t v3 = (os_log_t *)sub_32A48(17);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
  {
    CFStringRef v5 = v17;
    CFStringRef v6 = v15;
    CFStringRef v7 = v13;
    (*(void (**)(uint8_t *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128))(v23, a1);
    if (v6) {
      CFStringRef v8 = v6;
    }
    else {
      CFStringRef v8 = v7;
    }
    if (v5) {
      CFStringRef v8 = v5;
    }
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 137;
    *(_WORD *)&unsigned char buf[18] = 2112;
    *(void *)&buf[20] = v8;
    __int16 v27 = 2112;
    uint64_t v28 = *(void *)v23;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a baseband downlink port with name \"%@\" and UID \"%@\"", buf, 0x26u);
    sub_72924((uint64_t)v23);
  }
  memset(buf, 0, 24);
  (*(void (**)(long long *__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 128))(&v11, a1);
  *(void *)int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  sub_32F374(&v9, &qword_659BD0, (uint64_t)a1, (uint64_t)buf, (uint64_t)&v13, (uint64_t)&v11, (uint64_t)v23);
  long long v12 = v9;
  long long v9 = 0uLL;
  sub_436484((uint64_t)a1, (void ***)&v12);
  if (*((void *)&v12 + 1)) {
    sub_4636C(*((std::__shared_weak_count **)&v12 + 1));
  }
  unint64_t v10 = v23;
  sub_74004((void ***)&v10);
  sub_72924((uint64_t)&v11);
  sub_32F4B8();
}

void sub_32F2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_78FF8(v14 - 128);
  sub_78FF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_32F374(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = operator new(0x228uLL);
  v14[1] = 0;
  v14[2] = 0;
  *uint64_t v14 = off_640AB8;
  sub_21C8C(__p, "");
  sub_105158((uint64_t)(v14 + 3), a2, a3, a4, a5, a6, a7, (long long *)__p);
  v14[3] = &off_621AD0;
  *((_WORD *)v14 + 272) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v14 + 3;
  a1[1] = v14;

  sub_56E64((uint64_t)a1, v14 + 13, (uint64_t)(v14 + 3));
}

void sub_32F488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_32F4B8()
{
}

void sub_32F580()
{
}

uint64_t sub_32F5B8(uint64_t **a1, double a2)
{
  if (((double (*)(uint64_t **))(*a1)[13])(a1) == a2)
  {
    uint64_t v4 = sub_32A48(12);
    uint64_t v5 = sub_32A48(39);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)std::string v46 = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&v46[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_13;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    int v20 = *(NSObject **)v4;
    if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string v46 = 136315650;
      *(void *)&v46[4] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v47 = 1024;
      int v48 = 90;
      __int16 v49 = 2048;
      double v50 = a2;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_INFO, "%25s:%-5d Current sample rate %f is same as target rate to set to, nothing to do here!", v46, 0x1Cu);
    }
    return 0;
  }
  uint64_t v11 = sub_42FD90((uint64_t)a1, a2);
  if (!v11)
  {
    uint64_t v21 = a1[80];
    int v22 = (std::mutex *)(v21 + 1);
    std::mutex::lock((std::mutex *)(v21 + 1));
    unint64_t v23 = (unint64_t)*((unsigned __int8 *)v21 + 76) << 32;
    std::mutex::unlock(v22);
    if (v23)
    {
      uint64_t v24 = sub_32A48(17);
      uint64_t v25 = sub_32A48(12);
      char v26 = 0;
      uint64_t v27 = 0;
      *(void *)std::string v46 = 0x100000002;
      uint64_t v28 = *(void *)(v24 + 8);
      while (1)
      {
        uint64_t v29 = *(int *)&v46[4 * v27];
        char v30 = v26;
        if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
          break;
        }
        char v26 = 1;
        uint64_t v27 = 1;
        if (v30) {
          goto LABEL_34;
        }
      }
      if ((v28 & v29) == 0) {
        uint64_t v24 = v25;
      }
LABEL_34:
      uint64_t v38 = sub_32A48(39);
      char v39 = 0;
      uint64_t v40 = 0;
      *(void *)std::string v46 = 0x100000002;
      uint64_t v41 = *(void *)(v24 + 8);
      while (1)
      {
        uint64_t v42 = *(int *)&v46[4 * v40];
        char v43 = v39;
        if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
          break;
        }
        char v39 = 1;
        uint64_t v40 = 1;
        if (v43)
        {
          if ((v41 & 1) == 0) {
            goto LABEL_45;
          }
          goto LABEL_42;
        }
      }
      if ((v41 & v42) == 0) {
        uint64_t v24 = v38;
      }
      if (*(void *)(v24 + 8))
      {
LABEL_42:
        uint64_t v44 = *(NSObject **)v24;
        if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string v46 = 136315650;
          *(void *)&v46[4] = "Device_Baseband_Voice_Aspen.cpp";
          __int16 v47 = 1024;
          int v48 = 102;
          __int16 v49 = 2048;
          double v50 = a2;
          _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully set baseband hardware sample rate to %f", v46, 0x1Cu);
        }
      }
LABEL_45:
      sub_17A1E8(a1[80], a2);
    }
    return 0;
  }
  uint64_t v12 = v11;
  uint64_t v13 = sub_32A48(17);
  uint64_t v14 = sub_32A48(12);
  char v15 = 0;
  uint64_t v16 = 0;
  *(void *)std::string v46 = 0x100000002;
  uint64_t v17 = *(void *)(v13 + 8);
  while (1)
  {
    uint64_t v18 = *(int *)&v46[4 * v16];
    char v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    char v15 = 1;
    uint64_t v16 = 1;
    if (v19) {
      goto LABEL_23;
    }
  }
  if ((v17 & v18) == 0) {
    uint64_t v13 = v14;
  }
LABEL_23:
  uint64_t v31 = sub_32A48(39);
  char v32 = 0;
  uint64_t v33 = 0;
  *(void *)std::string v46 = 0x100000002;
  uint64_t v34 = *(void *)(v13 + 8);
  while (1)
  {
    uint64_t v35 = *(int *)&v46[4 * v33];
    char v36 = v32;
    if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
      break;
    }
    char v32 = 1;
    uint64_t v33 = 1;
    if (v36) {
      goto LABEL_29;
    }
  }
  if ((v34 & v35) == 0) {
    uint64_t v13 = v31;
  }
LABEL_29:
  BOOL v37 = *(NSObject **)v13;
  if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string v46 = 136315650;
    *(void *)&v46[4] = "Device_Baseband_Voice_Aspen.cpp";
    __int16 v47 = 1024;
    int v48 = 97;
    __int16 v49 = 1024;
    LODWORD(v50) = v12;
    _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d Error from SetSampleRateSynchronously: %d", v46, 0x18u);
  }
  return v12;
}

BOOL sub_32F9EC(uint64_t a1, AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (sub_32FC00(a2))
  {
    *(void *)buf = *(void *)&a2->mSelector;
    *(_DWORD *)&buf[8] = a2->mElement;
    BOOL result = sub_1A1BE4((void *)(a1 + 496), (uint64_t)buf);
    if (result)
    {
      uint64_t v20 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      *(void *)buf = *(void *)&a2->mSelector;
      *(_DWORD *)&buf[8] = a2->mElement;
      *(void *)&v24[2] = a3;
      uint64_t v25 = a4;
      sub_1A4260((void *)(a1 + 496), (unsigned int *)&v20, (uint64_t)buf);
      uint64_t v9 = qword_659C30;
      uint64_t v10 = qword_659C38;
      while (v9 != v10)
      {
        if (sub_1A1BE4((void *)(a1 + 496), v9)) {
          return 1;
        }
        v9 += 12;
      }
      uint64_t v11 = *(void *)(a1 + 640);
      uint64_t v12 = sub_32A48(12);
      uint64_t v13 = sub_32A48(39);
      char v14 = 0;
      uint64_t v15 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v16 = *(void *)(v12 + 8);
      while (1)
      {
        uint64_t v17 = *(int *)&buf[4 * v15];
        char v18 = v14;
        if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
          break;
        }
        char v14 = 1;
        uint64_t v15 = 1;
        if (v18)
        {
          if ((v16 & 1) == 0) {
            goto LABEL_19;
          }
          goto LABEL_16;
        }
      }
      if ((v16 & v17) == 0) {
        uint64_t v12 = v13;
      }
      if (*(void *)(v12 + 8))
      {
LABEL_16:
        char v19 = *(NSObject **)v12;
        if (v19)
        {
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
            __int16 v23 = 1024;
            *(_DWORD *)uint64_t v24 = 699;
            _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unregistering Telephony callback", buf, 0x12u);
          }
        }
      }
LABEL_19:
      sub_179E84((void *)(v11 + 96));
      return 1;
    }
  }
  else
  {
    sub_50848((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }
  return result;
}

uint64_t sub_32FC00(_DWORD *a1)
{
  char v1 = (_DWORD *)qword_659C30;
  if (qword_659C30 == qword_659C38) {
    return 0;
  }
  while (a1[1] != v1[1] || *a1 != *v1 || a1[2] != v1[2])
  {
    v1 += 3;
    if (v1 == (_DWORD *)qword_659C38) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_32FC5C(uint64_t a1, AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), uint64_t (***a4)())
{
  if (sub_32FC00(a2))
  {
    uint64_t v8 = qword_659C30;
    uint64_t v9 = qword_659C38;
    if (qword_659C30 == qword_659C38)
    {
      BOOL v10 = 0;
    }
    else
    {
      do
      {
        BOOL v10 = sub_1A1BE4((void *)(a1 + 496), v8);
        if (v10) {
          break;
        }
        v8 += 12;
      }
      while (v8 != v9);
    }
    uint64_t v12 = *(void *)&a2->mSelector;
    char v26 = a4;
    *(void *)buf = v12;
    *(_DWORD *)&buf[8] = a2->mElement;
    __int16 v23 = *(uint64_t (***)())&a2->mSelector;
    LODWORD(v24) = a2->mElement;
    uint64_t v25 = a3;
    sub_1A4AA0((void *)(a1 + 496), (unsigned int *)buf, (uint64_t)&v23);
    if (v10) {
      return 1;
    }
    uint64_t v13 = *(void *)(a1 + 640);
    __int16 v23 = off_633DC0;
    uint64_t v24 = a1;
    char v26 = &v23;
    uint64_t v14 = sub_32A48(12);
    uint64_t v15 = sub_32A48(39);
    char v16 = 0;
    uint64_t v17 = 0;
    char v18 = &v26;
    *(void *)buf = 0x100000002;
    uint64_t v19 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v17];
      char v21 = v16;
      if (((v19 & v20) != 0) != ((*(void *)(v15 + 8) & v20) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1;
      if (v21)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_22;
        }
        goto LABEL_19;
      }
    }
    if ((v19 & v20) == 0) {
      uint64_t v14 = v15;
    }
    if (*(void *)(v14 + 8))
    {
LABEL_19:
      int v22 = *(NSObject **)v14;
      if (v22)
      {
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "CoreTelephonyInterface.cpp";
          __int16 v28 = 1024;
          int v29 = 693;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Registering Telephony callback", buf, 0x12u);
        }
      }
    }
LABEL_22:
    sub_179E84((void *)(v13 + 96));
    if (v26)
    {
      if (v26 == &v23)
      {
        *(void *)(v13 + 120) = v13 + 96;
        ((void (*)(uint64_t (***)(), uint64_t))v23[3])(&v23, v13 + 96);
        goto LABEL_28;
      }
      *(void *)(v13 + 120) = v26;
    }
    else
    {
      char v18 = (uint64_t (****)())(v13 + 120);
    }
    *char v18 = 0;
LABEL_28:
    sub_176B50(&v23);
    return 1;
  }

  return sub_431F5C(a1, a2, a3, a4);
}

void sub_32FF24(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_32FF50(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = (int)*a2;
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = sub_32A48(17);
  uint64_t v6 = sub_32A48(12);
  char v7 = 0;
  uint64_t v8 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = (int)buf[v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1;
    if (v11) {
      goto LABEL_7;
    }
  }
  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_7:
  uint64_t v12 = sub_32A48(39);
  char v13 = 0;
  uint64_t v14 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v15 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v16 = (int)buf[v14];
    char v17 = v13;
    if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
      break;
    }
    char v13 = 1;
    uint64_t v14 = 1;
    if (v17)
    {
      if ((v15 & 1) == 0) {
        goto LABEL_28;
      }
      goto LABEL_15;
    }
  }
  if ((v15 & v16) == 0) {
    uint64_t v5 = v12;
  }
  if (*(void *)(v5 + 8))
  {
LABEL_15:
    char v18 = *(NSObject **)v5;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      if (v2 >= 3)
      {
        uint64_t v20 = (os_log_t *)sub_32A48(13);
        char v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "CoreTelephonyInterface.h";
          __int16 v30 = 1024;
          int v31 = 98;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid TelephonyValueChangeType\"", (uint8_t *)buf, 0x12u);
        }
        uint64_t v19 = "Invalid TelephonyValueChangeType";
      }
      else
      {
        uint64_t v19 = (&off_6414F0)[v2];
      }
      sub_21C8C(__p, v19);
      if (v28 >= 0) {
        int v22 = __p;
      }
      else {
        int v22 = (void **)__p[0];
      }
      buf[0] = 136315650;
      *(void *)&buf[1] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v30 = 1024;
      int v31 = 473;
      __int16 v32 = 2080;
      uint64_t v33 = v22;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Handling Telephony callback for %s", (uint8_t *)buf, 0x1Cu);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
  }
LABEL_28:
  if (v3 >= 3)
  {
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v30 = 1024;
      int v31 = 406;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unsupported telephony value change type\"", (uint8_t *)buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported telephony value change type");
  }
  buf[0] = dword_573154[v3];
  *(void *)&buf[1] = 1735159650;
  BOOL result = (void *)sub_1A1BE4((void *)(v4 + 496), (uint64_t)buf);
  if (result) {
    return sub_1A1D20((void *)(v4 + 496), buf);
  }
  return result;
}

void sub_3302A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_3302C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_633DC0;
  a2[1] = v2;
  return result;
}

void *sub_3302E8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_633DC0;
  result[1] = v3;
  return result;
}

void sub_330330()
{
}

void sub_330348(uint64_t **a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if ((((uint64_t (*)(uint64_t **))(*a1)[2])(a1) & 1) == 0)
  {
    uint64_t v35 = (os_log_t *)sub_32A48(13);
    char v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v51);
      BOOL v37 = v55 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 339;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v37;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v55 < 0) {
        operator delete(__p);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v39 = (os_log_t *)sub_32A48(13);
    uint64_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v51);
      uint64_t v41 = v55 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 340;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v41;
      __int16 v57 = 1024;
      LODWORD(v58[0]) = a3;
      WORD2(v58[0]) = 2048;
      *(void *)((char *)v58 + 6) = a4;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v55 < 0) {
        operator delete(__p);
      }
    }
    uint64_t v42 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v42 = &off_6414D8;
    v42[2] = 561211770;
  }
  if (!a6)
  {
    char v43 = (os_log_t *)sub_32A48(13);
    uint64_t v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v51);
      char v45 = v55 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 341;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "inData";
      __int16 v57 = 2080;
      v58[0] = v45;
      _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v55 < 0) {
        operator delete(__p);
      }
    }
    std::string v46 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string v46 = &off_6414D8;
    v46[2] = 561211770;
  }
  if ((((uint64_t (*)(uint64_t **, const AudioObjectPropertyAddress *))(*a1)[3])(a1, a2) & 1) == 0)
  {
    __int16 v47 = (os_log_t *)sub_32A48(13);
    int v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
    {
      uint64_t v51 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v51);
      __int16 v49 = v55 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 342;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v49;
      _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v55 < 0) {
        operator delete(__p);
      }
    }
    double v50 = __cxa_allocate_exception(0x10uLL);
    *(void *)double v50 = &off_6414D8;
    v50[2] = 1852797029;
  }
  if (a2->mSelector == 1668576114)
  {
    if (a5 != 8)
    {
      char v18 = (os_log_t *)sub_32A48(13);
      uint64_t v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 360;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid data passed with kVirtualAudioPlugInPropertyConfirmVocoderSampleRate property\"", buf, 0x12u);
        }
      }
    }
    double v20 = *(double *)a6;
    uint64_t v21 = sub_32A48(17);
    uint64_t v22 = sub_32A48(12);
    char v23 = 0;
    uint64_t v24 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v25 = *(void *)(v21 + 8);
    while (1)
    {
      uint64_t v26 = *(int *)&buf[4 * v24];
      char v27 = v23;
      if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
        break;
      }
      char v23 = 1;
      uint64_t v24 = 1;
      if (v27) {
        goto LABEL_32;
      }
    }
    if ((v25 & v26) == 0) {
      uint64_t v21 = v22;
    }
LABEL_32:
    uint64_t v28 = sub_32A48(39);
    char v29 = 0;
    uint64_t v30 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v31 = *(void *)(v21 + 8);
    while (1)
    {
      uint64_t v32 = *(int *)&buf[4 * v30];
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1;
      if (v33)
      {
        if ((v31 & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_40;
      }
    }
    if ((v31 & v32) == 0) {
      uint64_t v21 = v28;
    }
    if (*(void *)(v21 + 8))
    {
LABEL_40:
      uint64_t v34 = *(NSObject **)v21;
      if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 363;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(double *)&buf[20] = v20;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d Confirming Telephony Hardware Sample Rate %f", buf, 0x1Cu);
      }
    }
LABEL_43:
    sub_17A1E8(a1[80], v20);
  }
  else if (a2->mSelector == 1953790309)
  {
    if (a5 != 4)
    {
      uint64_t v12 = (os_log_t *)sub_32A48(13);
      char v13 = *v12;
      if (*v12)
      {
        if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 348;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Invalid data passed with kBasebandVoiceAudioDevicePropertyTTYEnabled property\"", buf, 0x12u);
        }
      }
    }
    unsigned int v14 = *a6;
    if (*a6 || sub_17B0D0(*a1[80]))
    {
      uint64_t v15 = (os_log_t *)sub_32A48(17);
      uint64_t v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEBUG))
      {
        char v17 = "disabled";
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        *(_DWORD *)buf = 136315650;
        if (v14) {
          char v17 = "enabled";
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 352;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v17;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting TTY %s on Device_Baseband_Voice_Aspen's Core Telephony Interface", buf, 0x1Cu);
      }
      long long __p = (void *)*a1[80];
      BOOL v54 = v14 != 0;
      LODWORD(v51) = 0;
      *(void *)buf = __p;
      *(void *)&buf[8] = &v51;
      *(void *)&buf[16] = &__p;
      sub_178FE0((uint64_t)buf);
    }
  }
  else
  {
    sub_4321A0((uint64_t)a1, a2, a3, a4, a5, a6);
  }
}

void sub_330C1C(uint64_t *a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v40 = (os_log_t *)sub_32A48(13);
    uint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v92 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v92);
      uint64_t v42 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 285;
      __int16 v99 = 2080;
      long long v100 = (const char *)v42;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v44 = (os_log_t *)sub_32A48(13);
    char v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      uint64_t v92 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v92);
      std::string v46 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 286;
      __int16 v99 = 2080;
      long long v100 = (const char *)v46;
      __int16 v101 = 1024;
      LODWORD(v102[0]) = a3;
      WORD2(v102[0]) = 2048;
      *(void *)((char *)v102 + 6) = a4;
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v47 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v47 = &off_6414D8;
    v47[2] = 561211770;
  }
  if (!a6)
  {
    int v48 = (os_log_t *)sub_32A48(13);
    __int16 v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v92 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v92);
      double v50 = v95 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 287;
      __int16 v99 = 2080;
      long long v100 = "outData";
      __int16 v101 = 2080;
      v102[0] = v50;
      _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v51 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v51 = &off_6414D8;
    v51[2] = 561211770;
  }
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1953790308)
  {
    if (mSelector == 1853059619)
    {
      UInt32 v28 = *a5;
      if (v28 != (*(unsigned int (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))(a1, a2, a3, a4))
      {
        CFDictionaryRef v84 = (os_log_t *)sub_32A48(13);
        long long v85 = *v84;
        if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
        {
          uint64_t v92 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_16C9C4((uint64_t)__p, (unsigned int *)&v92);
          int v86 = v95;
          uint64_t v87 = (void **)__p[0];
          UInt32 v88 = *a5;
          int v89 = (*(uint64_t (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))(a1, a2, a3, a4);
          long long v90 = __p;
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
          if (v86 < 0) {
            long long v90 = v87;
          }
          __int16 v97 = 1024;
          int v98 = 312;
          __int16 v99 = 2080;
          long long v100 = (const char *)v90;
          __int16 v101 = 1024;
          LODWORD(v102[0]) = v88;
          WORD2(v102[0]) = 1024;
          *(_DWORD *)((char *)v102 + 6) = v89;
          _os_log_impl(&def_1E50E8, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v95 < 0) {
            operator delete(__p[0]);
          }
        }
        long long v91 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v91 = &off_6414D8;
        v91[2] = 561211770;
      }
      uint64_t v29 = a1[80];
      uint64_t v30 = (std::mutex *)(v29 + 8);
      std::mutex::lock((std::mutex *)(v29 + 8));
      unint64_t v31 = (unint64_t)*(unsigned __int8 *)(v29 + 76) << 32;
      std::mutex::unlock(v30);
      if (v31)
      {
        double v32 = sub_179FE0(a1[80]);
        *(double *)a6 = v32;
        *(double *)(a6 + 8) = v32;
        return;
      }
      goto LABEL_26;
    }
    if (mSelector != 1953002354)
    {
LABEL_26:
      sub_432AE8((uint64_t)a1, a2, a3, a4, a5, (float *)a6);
      return;
    }
    UInt32 v24 = *a5;
    if (v24 != (*(unsigned int (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))(a1, a2, a3, a4))
    {
      int v76 = (os_log_t *)sub_32A48(13);
      CFDictionaryRef v77 = *v76;
      if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
      {
        uint64_t v92 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v92);
        int v78 = v95;
        CFArrayRef v79 = (void **)__p[0];
        UInt32 v80 = *a5;
        int v81 = (*(uint64_t (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))(a1, a2, a3, a4);
        long long v82 = __p;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        if (v78 < 0) {
          long long v82 = v79;
        }
        __int16 v97 = 1024;
        int v98 = 306;
        __int16 v99 = 2080;
        long long v100 = (const char *)v82;
        __int16 v101 = 1024;
        LODWORD(v102[0]) = v80;
        WORD2(v102[0]) = 1024;
        *(_DWORD *)((char *)v102 + 6) = v81;
        _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v83 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v83 = &off_6414D8;
      v83[2] = 561211770;
    }
    double v25 = sub_17A0E4(a1[80]);
LABEL_22:
    *(double *)a6 = v25;
    return;
  }
  if (mSelector == 1953790309)
  {
    UInt32 v26 = *a5;
    if (v26 != (*(unsigned int (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))(a1, a2, a3, a4))
    {
      CFDictionaryRef v52 = (os_log_t *)sub_32A48(13);
      unsigned int v53 = *v52;
      if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
      {
        uint64_t v92 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v92);
        int v54 = v95;
        char v55 = (void **)__p[0];
        UInt32 v56 = *a5;
        int v57 = (*(uint64_t (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))(a1, a2, a3, a4);
        uint64_t v58 = __p;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        if (v54 < 0) {
          uint64_t v58 = v55;
        }
        __int16 v97 = 1024;
        int v98 = 326;
        __int16 v99 = 2080;
        long long v100 = (const char *)v58;
        __int16 v101 = 1024;
        LODWORD(v102[0]) = v56;
        WORD2(v102[0]) = 1024;
        *(_DWORD *)((char *)v102 + 6) = v57;
        _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v59 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v59 = &off_6414D8;
      void v59[2] = 561211770;
    }
    *(_DWORD *)a6 = sub_17B0D0(*(void *)a1[80]);
    return;
  }
  if (mSelector == 1986225266)
  {
    UInt32 v27 = *a5;
    if (v27 != (*(unsigned int (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))(a1, a2, a3, a4))
    {
      char v60 = (os_log_t *)sub_32A48(13);
      uint64_t v61 = *v60;
      if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
      {
        uint64_t v92 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v92);
        int v62 = v95;
        uint64_t v63 = (void **)__p[0];
        UInt32 v64 = *a5;
        int v65 = (*(uint64_t (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))(a1, a2, a3, a4);
        uint64_t v66 = __p;
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        if (v62 < 0) {
          uint64_t v66 = v63;
        }
        __int16 v97 = 1024;
        int v98 = 301;
        __int16 v99 = 2080;
        long long v100 = (const char *)v66;
        __int16 v101 = 1024;
        LODWORD(v102[0]) = v64;
        WORD2(v102[0]) = 1024;
        *(_DWORD *)((char *)v102 + 6) = v65;
        _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v95 < 0) {
          operator delete(__p[0]);
        }
      }
      int v67 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v67 = &off_6414D8;
      v67[2] = 561211770;
    }
    double v25 = sub_179FE0(a1[80]);
    goto LABEL_22;
  }
  if (mSelector != 1986225268) {
    goto LABEL_26;
  }
  UInt32 v13 = *a5;
  if (v13 != (*(unsigned int (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))(a1, a2, a3, a4))
  {
    char v68 = (os_log_t *)sub_32A48(13);
    uint64_t v69 = *v68;
    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
    {
      uint64_t v92 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v92);
      int v70 = v95;
      CFTypeRef v71 = (void **)__p[0];
      UInt32 v72 = *a5;
      int v73 = (*(uint64_t (**)(uint64_t *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*a1 + 32))(a1, a2, a3, a4);
      CFTypeRef v74 = __p;
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
      if (v70 < 0) {
        CFTypeRef v74 = v71;
      }
      __int16 v97 = 1024;
      int v98 = 293;
      __int16 v99 = 2080;
      long long v100 = (const char *)v74;
      __int16 v101 = 1024;
      LODWORD(v102[0]) = v72;
      WORD2(v102[0]) = 1024;
      *(_DWORD *)((char *)v102 + 6) = v73;
      _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v95 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v75 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v75 = &off_6414D8;
    CFTypeRef v75[2] = 561211770;
  }
  uint64_t v14 = a1[80];
  uint64_t v15 = (std::mutex *)(v14 + 8);
  std::mutex::lock((std::mutex *)(v14 + 8));
  uint64_t v16 = *(void *)(v14 + 72);
  std::mutex::unlock(v15);
  if ((v16 & 0xFF00000000) == 0)
  {
    uint64_t v17 = sub_32A48(1);
    uint64_t v18 = sub_32A48(12);
    char v19 = 0;
    uint64_t v20 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = *(int *)&buf[4 * v20];
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1;
      if (v23) {
        goto LABEL_31;
      }
    }
    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_31:
    uint64_t v33 = sub_32A48(39);
    char v34 = 0;
    uint64_t v35 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v36 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v37 = *(int *)&buf[4 * v35];
      char v38 = v34;
      if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
        break;
      }
      char v34 = 1;
      uint64_t v35 = 1;
      if (v38) {
        goto LABEL_37;
      }
    }
    if ((v36 & v37) == 0) {
      uint64_t v17 = v33;
    }
LABEL_37:
    char v39 = *(NSObject **)v17;
    if (v39)
    {
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Baseband_Voice_Aspen.cpp";
        __int16 v97 = 1024;
        int v98 = 295;
        _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d No Vocoder Format ID", buf, 0x12u);
      }
    }
    LODWORD(v16) = 0;
  }
  *(_DWORD *)a6 = v16;
}

void sub_331A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_331AA4(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    char v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      UInt32 v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      UInt32 v24 = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 249;
      __int16 v27 = 2080;
      UInt32 v28 = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      uint64_t v17 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      UInt32 v24 = "Device_Baseband_Voice_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 250;
      __int16 v27 = 2080;
      UInt32 v28 = v17;
      __int16 v29 = 1024;
      UInt32 v30 = a3;
      __int16 v31 = 2048;
      double v32 = a4;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v18 = &off_6414D8;
    uint64_t v18[2] = 561211770;
  }
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1953790308)
  {
    uint64_t result = 4;
    if (mSelector == 1953790309 || mSelector == 1986225268) {
      return result;
    }
    int v9 = 1986225266;
  }
  else
  {
    if (mSelector == 1668576114) {
      return 8;
    }
    if (mSelector == 1853059619) {
      return 16;
    }
    int v9 = 1953002354;
  }
  if (mSelector == v9) {
    return 8;
  }

  return sub_433254(a1, a2, a3, a4);
}

BOOL sub_331E40(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  BOOL result = 0;
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1953790308)
  {
    if (mSelector == 1986225268 || mSelector == 1986225266) {
      return result;
    }
    if (mSelector != 1953790309) {
      return sub_43356C(a1, a2);
    }
    return 1;
  }
  if (mSelector == 1668576114) {
    return 1;
  }
  if (mSelector != 1853059619 && mSelector != 1953002354) {
    return sub_43356C(a1, a2);
  }
  return result;
}

uint64_t sub_331EC8(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  AudioObjectPropertySelector mSelector = a2->mSelector;
  uint64_t result = 1;
  if ((int)a2->mSelector > 1953790308)
  {
    if (mSelector == 1953790309) {
      return result;
    }
    if (mSelector != 1986225268 && mSelector != 1986225266)
    {
LABEL_5:
      sub_50848((std::mutex *)a1);
      return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
    }
  }
  else if (mSelector != 1668576114)
  {
    if (mSelector == 1853059619) {
      return result;
    }
    if (mSelector != 1953002354) {
      goto LABEL_5;
    }
  }

  return sub_179F0C();
}

void sub_331F9C(void *a1)
{
  *a1 = off_633BD8;
  sub_1A97C8((uint64_t)(a1 + 62));
  sub_43456C((uint64_t)a1);

  operator delete();
}

uint64_t sub_332008(void *a1)
{
  *a1 = off_633BD8;
  sub_1A97C8((uint64_t)(a1 + 62));

  return sub_43456C((uint64_t)a1);
}

BOOL sub_332060(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_332080(uint64_t a1, void *a2)
{
  *a2 = off_633FB8;
}

void *sub_3320A0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633FB8;
  return result;
}

void sub_3320D8()
{
}

BOOL sub_3320F0(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_332110(uint64_t a1, void *a2)
{
  *a2 = off_633F70;
}

void *sub_332130()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633F70;
  return result;
}

void sub_332168()
{
}

uint64_t sub_332180(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_3321F4(uint64_t a1, void *a2)
{
  *a2 = off_633F28;
}

void *sub_332214()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633F28;
  return result;
}

void sub_33224C()
{
}

uint64_t sub_332264(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_33229C(uint64_t a1, void *a2)
{
  *a2 = off_633EE0;
}

void *sub_3322BC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633EE0;
  return result;
}

void sub_3322F4()
{
}

uint64_t sub_33230C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_332344(uint64_t a1, void *a2)
{
  *a2 = off_633E98;
}

void *sub_332364()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633E98;
  return result;
}

void sub_33239C()
{
}

BOOL sub_3323B4(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_3323DC(uint64_t a1, void *a2)
{
  *a2 = off_633E50;
}

void *sub_3323FC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633E50;
  return result;
}

void sub_332434()
{
}

uint64_t sub_33244C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_332484(uint64_t a1, void *a2)
{
  *a2 = off_633E08;
}

void *sub_3324A4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_633E08;
  return result;
}

void sub_3324DC()
{
}

void sub_3324F4(void *a1, unsigned __int8 *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2[128])
  {
    int v3 = a2[73];
    if (a2[73]) {
      int v3 = a2[72];
    }
    if (a2[77])
    {
      int v4 = a2[76];
      if (v3) {
        goto LABEL_6;
      }
    }
    else
    {
      int v4 = 0;
      if (v3)
      {
LABEL_6:
        uint64_t v5 = operator new(4uLL);
        *uint64_t v5 = 15;
        uint64_t v6 = (char *)(v5 + 1);
        *a1 = v5;
        a1[1] = v5 + 1;
        a1[2] = v5 + 1;
        if (!v4) {
          goto LABEL_12;
        }
LABEL_11:
        char v7 = a1 + 1;
        uint64_t v8 = v6;
        goto LABEL_16;
      }
    }
    if (v4)
    {
      uint64_t v6 = 0;
      goto LABEL_11;
    }
  }
LABEL_12:
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BCB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BCB0))
  {
    byte_64BCAA = sub_164F4C();
    __cxa_guard_release(&qword_64BCB0);
  }
  if (byte_64BCAA)
  {
    uint64_t v6 = (char *)a1[1];
    uint64_t v8 = (char *)a1[2];
    char v7 = a1 + 1;
    if (v6 < v8)
    {
      *(_DWORD *)uint64_t v6 = 16;
      int v9 = v6 + 4;
LABEL_29:
      *char v7 = v9;
      goto LABEL_30;
    }
LABEL_16:
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (uint64_t)&v6[-*a1] >> 2;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 62) {
      sub_60548();
    }
    uint64_t v13 = v8 - v10;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v14) {
      unint64_t v15 = v12;
    }
    if (v15)
    {
      unint64_t v15 = (unint64_t)sub_46BF4(v15);
      uint64_t v10 = (char *)*a1;
      uint64_t v6 = (char *)a1[1];
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = (_DWORD *)(v15 + 4 * v11);
    unint64_t v18 = v15 + 4 * v16;
    *uint64_t v17 = 16;
    int v9 = v17 + 1;
    while (v6 != v10)
    {
      int v19 = *((_DWORD *)v6 - 1);
      v6 -= 4;
      *--uint64_t v17 = v19;
    }
    *a1 = v17;
    a1[1] = v9;
    a1[2] = v18;
    if (v10) {
      operator delete(v10);
    }
    goto LABEL_29;
  }
LABEL_30:
  if (MGGetBoolAnswer())
  {
    uint64_t v21 = (char *)a1[1];
    unint64_t v20 = a1[2];
    if ((unint64_t)v21 >= v20)
    {
      char v23 = (char *)*a1;
      uint64_t v24 = (uint64_t)&v21[-*a1] >> 2;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v26 = v20 - (void)v23;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      BOOL v14 = (unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        unint64_t v27 = (unint64_t)sub_46BF4(v27);
        char v23 = (char *)*a1;
        uint64_t v21 = (char *)a1[1];
      }
      else
      {
        uint64_t v28 = 0;
      }
      __int16 v29 = (_DWORD *)(v27 + 4 * v24);
      unint64_t v30 = v27 + 4 * v28;
      *__int16 v29 = 13;
      char v22 = v29 + 1;
      while (v21 != v23)
      {
        int v31 = *((_DWORD *)v21 - 1);
        v21 -= 4;
        *--__int16 v29 = v31;
      }
      *a1 = v29;
      a1[1] = v22;
      a1[2] = v30;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v21 = 13;
      char v22 = v21 + 4;
    }
    a1[1] = v22;
  }
  sub_3CD68C();
  if (HIDWORD(qword_65E380) == 1
    && (MGGetSInt32Answer() == 1
     || MGGetSInt32Answer() == 3
     || MGGetSInt32Answer() == 2))
  {
    uint64_t v33 = (char *)a1[1];
    unint64_t v32 = a1[2];
    if ((unint64_t)v33 >= v32)
    {
      uint64_t v35 = (char *)*a1;
      uint64_t v36 = (uint64_t)&v33[-*a1] >> 2;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v38 = v32 - (void)v35;
      if (v38 >> 1 > v37) {
        unint64_t v37 = v38 >> 1;
      }
      BOOL v14 = (unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        unint64_t v39 = (unint64_t)sub_46BF4(v39);
        uint64_t v35 = (char *)*a1;
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        uint64_t v40 = 0;
      }
      uint64_t v41 = (_DWORD *)(v39 + 4 * v36);
      unint64_t v42 = v39 + 4 * v40;
      _DWORD *v41 = 14;
      char v34 = v41 + 1;
      while (v33 != v35)
      {
        int v43 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *--uint64_t v41 = v43;
      }
      *a1 = v41;
      a1[1] = v34;
      a1[2] = v42;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v33 = 14;
      char v34 = v33 + 4;
    }
    a1[1] = v34;
  }
  if (MGGetSInt32Answer() == 1
    || MGGetSInt32Answer() == 3
    || MGGetSInt32Answer() == 2
    || MGGetSInt32Answer() == 4
    || sub_89FA8() == 2
    || sub_89FA8() == 3
    || sub_89FA8() == 4
    || sub_89FA8() == 5
    || sub_89FA8() == 195)
  {
    char v45 = (char *)a1[1];
    unint64_t v44 = a1[2];
    if ((unint64_t)v45 >= v44)
    {
      __int16 v47 = (char *)*a1;
      uint64_t v48 = (uint64_t)&v45[-*a1] >> 2;
      unint64_t v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v50 = v44 - (void)v47;
      if (v50 >> 1 > v49) {
        unint64_t v49 = v50 >> 1;
      }
      BOOL v14 = (unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v51 = v49;
      }
      if (v51)
      {
        unint64_t v51 = (unint64_t)sub_46BF4(v51);
        __int16 v47 = (char *)*a1;
        char v45 = (char *)a1[1];
      }
      else
      {
        uint64_t v52 = 0;
      }
      unsigned int v53 = (_DWORD *)(v51 + 4 * v48);
      unint64_t v44 = v51 + 4 * v52;
      _DWORD *v53 = 19;
      std::string v46 = (char *)(v53 + 1);
      while (v45 != v47)
      {
        int v54 = *((_DWORD *)v45 - 1);
        v45 -= 4;
        *--unsigned int v53 = v54;
      }
      *a1 = v53;
      a1[1] = v46;
      a1[2] = v44;
      if (v47)
      {
        operator delete(v47);
        unint64_t v44 = a1[2];
      }
    }
    else
    {
      *(_DWORD *)char v45 = 19;
      std::string v46 = v45 + 4;
    }
    a1[1] = v46;
    if ((unint64_t)v46 >= v44)
    {
      UInt32 v56 = (char *)*a1;
      uint64_t v57 = (uint64_t)&v46[-*a1] >> 2;
      unint64_t v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v59 = v44 - (void)v56;
      if (v59 >> 1 > v58) {
        unint64_t v58 = v59 >> 1;
      }
      BOOL v14 = (unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v60 = v58;
      }
      if (v60)
      {
        unint64_t v60 = (unint64_t)sub_46BF4(v60);
        UInt32 v56 = (char *)*a1;
        std::string v46 = (char *)a1[1];
      }
      else
      {
        uint64_t v61 = 0;
      }
      int v62 = (_DWORD *)(v60 + 4 * v57);
      unint64_t v63 = v60 + 4 * v61;
      *int v62 = 20;
      char v55 = v62 + 1;
      while (v46 != v56)
      {
        int v64 = *((_DWORD *)v46 - 1);
        v46 -= 4;
        *--int v62 = v64;
      }
      *a1 = v62;
      a1[1] = v55;
      a1[2] = v63;
      if (v56) {
        operator delete(v56);
      }
    }
    else
    {
      *(_DWORD *)std::string v46 = 20;
      char v55 = v46 + 4;
    }
    a1[1] = v55;
  }
  if (MGGetSInt32Answer() == 1)
  {
    uint64_t v66 = (char *)a1[1];
    unint64_t v65 = a1[2];
    if ((unint64_t)v66 >= v65)
    {
      char v68 = (char *)*a1;
      uint64_t v69 = (uint64_t)&v66[-*a1] >> 2;
      unint64_t v70 = v69 + 1;
      if ((unint64_t)(v69 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v71 = v65 - (void)v68;
      if (v71 >> 1 > v70) {
        unint64_t v70 = v71 >> 1;
      }
      BOOL v14 = (unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v72 = v70;
      }
      if (v72)
      {
        unint64_t v72 = (unint64_t)sub_46BF4(v72);
        char v68 = (char *)*a1;
        uint64_t v66 = (char *)a1[1];
      }
      else
      {
        uint64_t v73 = 0;
      }
      CFTypeRef v74 = (_DWORD *)(v72 + 4 * v69);
      unint64_t v75 = v72 + 4 * v73;
      *CFTypeRef v74 = 3;
      int v67 = v74 + 1;
      while (v66 != v68)
      {
        int v76 = *((_DWORD *)v66 - 1);
        v66 -= 4;
        *--CFTypeRef v74 = v76;
      }
      *a1 = v74;
      a1[1] = v67;
      a1[2] = v75;
      if (v68) {
        operator delete(v68);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v66 = 3;
      int v67 = v66 + 4;
    }
    a1[1] = v67;
  }
  if (MGGetBoolAnswer())
  {
    int v78 = (char *)a1[1];
    unint64_t v77 = a1[2];
    if ((unint64_t)v78 >= v77)
    {
      UInt32 v80 = (char *)*a1;
      uint64_t v81 = (uint64_t)&v78[-*a1] >> 2;
      unint64_t v82 = v81 + 1;
      if ((unint64_t)(v81 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v83 = v77 - (void)v80;
      if (v83 >> 1 > v82) {
        unint64_t v82 = v83 >> 1;
      }
      BOOL v14 = (unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v84 = v82;
      }
      if (v84)
      {
        unint64_t v84 = (unint64_t)sub_46BF4(v84);
        UInt32 v80 = (char *)*a1;
        int v78 = (char *)a1[1];
      }
      else
      {
        uint64_t v85 = 0;
      }
      int v86 = (_DWORD *)(v84 + 4 * v81);
      unint64_t v77 = v84 + 4 * v85;
      *int v86 = 0;
      CFArrayRef v79 = (char *)(v86 + 1);
      while (v78 != v80)
      {
        int v87 = *((_DWORD *)v78 - 1);
        v78 -= 4;
        *--int v86 = v87;
      }
      *a1 = v86;
      a1[1] = v79;
      a1[2] = v77;
      if (v80)
      {
        operator delete(v80);
        unint64_t v77 = a1[2];
      }
    }
    else
    {
      *(_DWORD *)int v78 = 0;
      CFArrayRef v79 = v78 + 4;
    }
    a1[1] = v79;
    if ((unint64_t)v79 >= v77)
    {
      int v89 = (char *)*a1;
      uint64_t v90 = (uint64_t)&v79[-*a1] >> 2;
      unint64_t v91 = v90 + 1;
      if ((unint64_t)(v90 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v92 = v77 - (void)v89;
      if (v92 >> 1 > v91) {
        unint64_t v91 = v92 >> 1;
      }
      BOOL v14 = (unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v93 = v91;
      }
      if (v93)
      {
        unint64_t v93 = (unint64_t)sub_46BF4(v93);
        int v89 = (char *)*a1;
        CFArrayRef v79 = (char *)a1[1];
      }
      else
      {
        uint64_t v94 = 0;
      }
      char v95 = (_DWORD *)(v93 + 4 * v90);
      unint64_t v96 = v93 + 4 * v94;
      _DWORD *v95 = 1;
      UInt32 v88 = v95 + 1;
      while (v79 != v89)
      {
        int v97 = *((_DWORD *)v79 - 1);
        v79 -= 4;
        *--char v95 = v97;
      }
      *a1 = v95;
      a1[1] = v88;
      a1[2] = v96;
      if (v89) {
        operator delete(v89);
      }
    }
    else
    {
      *(_DWORD *)CFArrayRef v79 = 1;
      UInt32 v88 = v79 + 4;
    }
    a1[1] = v88;
  }
  if ((MGGetBoolAnswer() & 1) != 0 || sub_8B774())
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BC38, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64BC38))
    {
      byte_64BC35 = sub_164814();
      __cxa_guard_release(&qword_64BC38);
    }
    if (!byte_64BC35)
    {
      __int16 v99 = (char *)a1[1];
      unint64_t v98 = a1[2];
      if ((unint64_t)v99 >= v98)
      {
        __int16 v101 = (char *)*a1;
        uint64_t v102 = (uint64_t)&v99[-*a1] >> 2;
        unint64_t v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 62) {
          sub_60548();
        }
        uint64_t v104 = v98 - (void)v101;
        if (v104 >> 1 > v103) {
          unint64_t v103 = v104 >> 1;
        }
        BOOL v14 = (unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14) {
          unint64_t v105 = v103;
        }
        if (v105)
        {
          unint64_t v105 = (unint64_t)sub_46BF4(v105);
          __int16 v101 = (char *)*a1;
          __int16 v99 = (char *)a1[1];
        }
        else
        {
          uint64_t v106 = 0;
        }
        char v107 = (_DWORD *)(v105 + 4 * v102);
        unint64_t v98 = v105 + 4 * v106;
        *char v107 = 6;
        long long v100 = (char *)(v107 + 1);
        while (v99 != v101)
        {
          int v108 = *((_DWORD *)v99 - 1);
          v99 -= 4;
          *--char v107 = v108;
        }
        *a1 = v107;
        a1[1] = v100;
        a1[2] = v98;
        if (v101)
        {
          operator delete(v101);
          unint64_t v98 = a1[2];
        }
      }
      else
      {
        *(_DWORD *)__int16 v99 = 6;
        long long v100 = v99 + 4;
      }
      a1[1] = v100;
      if ((unint64_t)v100 >= v98)
      {
        long long v110 = (char *)*a1;
        uint64_t v111 = (uint64_t)&v100[-*a1] >> 2;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 62) {
          sub_60548();
        }
        uint64_t v113 = v98 - (void)v110;
        if (v113 >> 1 > v112) {
          unint64_t v112 = v113 >> 1;
        }
        BOOL v14 = (unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14) {
          unint64_t v114 = v112;
        }
        if (v114)
        {
          unint64_t v114 = (unint64_t)sub_46BF4(v114);
          long long v110 = (char *)*a1;
          long long v100 = (char *)a1[1];
        }
        else
        {
          uint64_t v115 = 0;
        }
        uint64_t v116 = (_DWORD *)(v114 + 4 * v111);
        unint64_t v98 = v114 + 4 * v115;
        _DWORD *v116 = 5;
        long long v109 = (char *)(v116 + 1);
        while (v100 != v110)
        {
          int v117 = *((_DWORD *)v100 - 1);
          v100 -= 4;
          *--uint64_t v116 = v117;
        }
        *a1 = v116;
        a1[1] = v109;
        a1[2] = v98;
        if (v110)
        {
          operator delete(v110);
          unint64_t v98 = a1[2];
        }
      }
      else
      {
        *(_DWORD *)long long v100 = 5;
        long long v109 = v100 + 4;
      }
      a1[1] = v109;
      if ((unint64_t)v109 >= v98)
      {
        uint64_t v119 = (char *)*a1;
        uint64_t v120 = (uint64_t)&v109[-*a1] >> 2;
        unint64_t v121 = v120 + 1;
        if ((unint64_t)(v120 + 1) >> 62) {
          sub_60548();
        }
        uint64_t v122 = v98 - (void)v119;
        if (v122 >> 1 > v121) {
          unint64_t v121 = v122 >> 1;
        }
        BOOL v14 = (unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14) {
          unint64_t v123 = v121;
        }
        if (v123)
        {
          unint64_t v123 = (unint64_t)sub_46BF4(v123);
          uint64_t v119 = (char *)*a1;
          long long v109 = (char *)a1[1];
        }
        else
        {
          uint64_t v124 = 0;
        }
        std::string::size_type v125 = (_DWORD *)(v123 + 4 * v120);
        unint64_t v98 = v123 + 4 * v124;
        *std::string::size_type v125 = 4;
        int v118 = (char *)(v125 + 1);
        while (v109 != v119)
        {
          int v126 = *((_DWORD *)v109 - 1);
          v109 -= 4;
          *--std::string::size_type v125 = v126;
        }
        *a1 = v125;
        a1[1] = v118;
        a1[2] = v98;
        if (v119)
        {
          operator delete(v119);
          unint64_t v98 = a1[2];
        }
      }
      else
      {
        *(_DWORD *)long long v109 = 4;
        int v118 = v109 + 4;
      }
      a1[1] = v118;
      if ((unint64_t)v118 >= v98)
      {
        __int16 v128 = (char *)*a1;
        uint64_t v129 = (uint64_t)&v118[-*a1] >> 2;
        unint64_t v130 = v129 + 1;
        if ((unint64_t)(v129 + 1) >> 62) {
          sub_60548();
        }
        uint64_t v131 = v98 - (void)v128;
        if (v131 >> 1 > v130) {
          unint64_t v130 = v131 >> 1;
        }
        BOOL v14 = (unint64_t)v131 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v132 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14) {
          unint64_t v132 = v130;
        }
        if (v132)
        {
          unint64_t v132 = (unint64_t)sub_46BF4(v132);
          __int16 v128 = (char *)*a1;
          int v118 = (char *)a1[1];
        }
        else
        {
          uint64_t v133 = 0;
        }
        char v134 = (_DWORD *)(v132 + 4 * v129);
        unint64_t v98 = v132 + 4 * v133;
        *char v134 = 17;
        CFMutableArrayRef v127 = (char *)(v134 + 1);
        while (v118 != v128)
        {
          int v135 = *((_DWORD *)v118 - 1);
          v118 -= 4;
          *--char v134 = v135;
        }
        *a1 = v134;
        a1[1] = v127;
        a1[2] = v98;
        if (v128)
        {
          operator delete(v128);
          unint64_t v98 = a1[2];
        }
      }
      else
      {
        *(_DWORD *)int v118 = 17;
        CFMutableArrayRef v127 = v118 + 4;
      }
      a1[1] = v127;
      if ((unint64_t)v127 >= v98)
      {
        uint64_t v137 = (char *)*a1;
        uint64_t v138 = (uint64_t)&v127[-*a1] >> 2;
        unint64_t v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 62) {
          sub_60548();
        }
        uint64_t v140 = v98 - (void)v137;
        if (v140 >> 1 > v139) {
          unint64_t v139 = v140 >> 1;
        }
        BOOL v14 = (unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v141 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14) {
          unint64_t v141 = v139;
        }
        if (v141)
        {
          unint64_t v141 = (unint64_t)sub_46BF4(v141);
          uint64_t v137 = (char *)*a1;
          CFMutableArrayRef v127 = (char *)a1[1];
        }
        else
        {
          uint64_t v142 = 0;
        }
        int v143 = (_DWORD *)(v141 + 4 * v138);
        unint64_t v144 = v141 + 4 * v142;
        *int v143 = 18;
        char v136 = v143 + 1;
        while (v127 != v137)
        {
          int v145 = *((_DWORD *)v127 - 1);
          v127 -= 4;
          *--int v143 = v145;
        }
        *a1 = v143;
        a1[1] = v136;
        a1[2] = v144;
        if (v137) {
          operator delete(v137);
        }
      }
      else
      {
        *(_DWORD *)CFMutableArrayRef v127 = 18;
        char v136 = v127 + 4;
      }
      a1[1] = v136;
      if ((_os_feature_enabled_impl() & 1) != 0 || sub_20A008())
      {
        uint64_t v147 = (char *)a1[1];
        unint64_t v146 = a1[2];
        if ((unint64_t)v147 >= v146)
        {
          uint64_t v149 = (char *)*a1;
          uint64_t v150 = (uint64_t)&v147[-*a1] >> 2;
          unint64_t v151 = v150 + 1;
          if ((unint64_t)(v150 + 1) >> 62) {
            sub_60548();
          }
          uint64_t v152 = v146 - (void)v149;
          if (v152 >> 1 > v151) {
            unint64_t v151 = v152 >> 1;
          }
          BOOL v14 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v14) {
            unint64_t v153 = v151;
          }
          if (v153)
          {
            unint64_t v153 = (unint64_t)sub_46BF4(v153);
            uint64_t v149 = (char *)*a1;
            uint64_t v147 = (char *)a1[1];
          }
          else
          {
            uint64_t v154 = 0;
          }
          uint64_t v155 = (_DWORD *)(v153 + 4 * v150);
          unint64_t v156 = v153 + 4 * v154;
          *uint64_t v155 = 7;
          uint64_t v148 = v155 + 1;
          while (v147 != v149)
          {
            int v157 = *((_DWORD *)v147 - 1);
            v147 -= 4;
            *--uint64_t v155 = v157;
          }
          *a1 = v155;
          a1[1] = v148;
          a1[2] = v156;
          if (v149) {
            operator delete(v149);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v147 = 7;
          uint64_t v148 = v147 + 4;
        }
        a1[1] = v148;
      }
      if (_os_feature_enabled_impl())
      {
        double v159 = (char *)a1[1];
        unint64_t v158 = a1[2];
        if ((unint64_t)v159 >= v158)
        {
          uint64_t v161 = (char *)*a1;
          uint64_t v162 = (uint64_t)&v159[-*a1] >> 2;
          unint64_t v163 = v162 + 1;
          if ((unint64_t)(v162 + 1) >> 62) {
            sub_60548();
          }
          uint64_t v164 = v158 - (void)v161;
          if (v164 >> 1 > v163) {
            unint64_t v163 = v164 >> 1;
          }
          BOOL v14 = (unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v165 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v14) {
            unint64_t v165 = v163;
          }
          if (v165)
          {
            unint64_t v165 = (unint64_t)sub_46BF4(v165);
            uint64_t v161 = (char *)*a1;
            double v159 = (char *)a1[1];
          }
          else
          {
            uint64_t v166 = 0;
          }
          unsigned int v167 = (_DWORD *)(v165 + 4 * v162);
          unint64_t v168 = v165 + 4 * v166;
          _DWORD *v167 = 8;
          int64_t v160 = v167 + 1;
          while (v159 != v161)
          {
            int v169 = *((_DWORD *)v159 - 1);
            v159 -= 4;
            *--unsigned int v167 = v169;
          }
          *a1 = v167;
          a1[1] = v160;
          a1[2] = v168;
          if (v161) {
            operator delete(v161);
          }
        }
        else
        {
          *(_DWORD *)double v159 = 8;
          int64_t v160 = v159 + 4;
        }
        a1[1] = v160;
      }
    }
  }
  if (sub_89FA8() == 2
    || sub_89FA8() == 3
    || sub_89FA8() == 4
    || sub_89FA8() == 5
    || sub_89FA8() == 195)
  {
    std::string v171 = (char *)a1[1];
    unint64_t v170 = a1[2];
    if ((unint64_t)v171 >= v170)
    {
      int v173 = (char *)*a1;
      uint64_t v174 = (uint64_t)&v171[-*a1] >> 2;
      unint64_t v175 = v174 + 1;
      if ((unint64_t)(v174 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v176 = v170 - (void)v173;
      if (v176 >> 1 > v175) {
        unint64_t v175 = v176 >> 1;
      }
      BOOL v14 = (unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v177 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v177 = v175;
      }
      if (v177)
      {
        unint64_t v177 = (unint64_t)sub_46BF4(v177);
        int v173 = (char *)*a1;
        std::string v171 = (char *)a1[1];
      }
      else
      {
        uint64_t v178 = 0;
      }
      double v179 = (_DWORD *)(v177 + 4 * v174);
      unint64_t v170 = v177 + 4 * v178;
      *double v179 = 12;
      char v172 = (char *)(v179 + 1);
      while (v171 != v173)
      {
        int v180 = *((_DWORD *)v171 - 1);
        v171 -= 4;
        *--double v179 = v180;
      }
      *a1 = v179;
      a1[1] = v172;
      a1[2] = v170;
      if (v173)
      {
        operator delete(v173);
        unint64_t v170 = a1[2];
      }
    }
    else
    {
      *(_DWORD *)std::string v171 = 12;
      char v172 = v171 + 4;
    }
    a1[1] = v172;
    if ((unint64_t)v172 >= v170)
    {
      uint64_t v182 = (char *)*a1;
      uint64_t v183 = (uint64_t)&v172[-*a1] >> 2;
      unint64_t v184 = v183 + 1;
      if ((unint64_t)(v183 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v185 = v170 - (void)v182;
      if (v185 >> 1 > v184) {
        unint64_t v184 = v185 >> 1;
      }
      BOOL v14 = (unint64_t)v185 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v186 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v186 = v184;
      }
      if (v186)
      {
        unint64_t v186 = (unint64_t)sub_46BF4(v186);
        uint64_t v182 = (char *)*a1;
        char v172 = (char *)a1[1];
      }
      else
      {
        uint64_t v187 = 0;
      }
      int v188 = (_DWORD *)(v186 + 4 * v183);
      unint64_t v189 = v186 + 4 * v187;
      *int v188 = 21;
      double v181 = v188 + 1;
      while (v172 != v182)
      {
        int v190 = *((_DWORD *)v172 - 1);
        v172 -= 4;
        *--int v188 = v190;
      }
      *a1 = v188;
      a1[1] = v181;
      a1[2] = v189;
      if (v182) {
        operator delete(v182);
      }
    }
    else
    {
      *(_DWORD *)char v172 = 21;
      double v181 = v172 + 4;
    }
    a1[1] = v181;
  }
  if (sub_23AC0())
  {
    int v192 = (char *)a1[1];
    unint64_t v191 = a1[2];
    if ((unint64_t)v192 >= v191)
    {
      std::string v194 = (char *)*a1;
      uint64_t v195 = (uint64_t)&v192[-*a1] >> 2;
      unint64_t v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v197 = v191 - (void)v194;
      if (v197 >> 1 > v196) {
        unint64_t v196 = v197 >> 1;
      }
      BOOL v14 = (unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v198 = v196;
      }
      if (v198)
      {
        unint64_t v198 = (unint64_t)sub_46BF4(v198);
        std::string v194 = (char *)*a1;
        int v192 = (char *)a1[1];
      }
      else
      {
        uint64_t v199 = 0;
      }
      int v200 = (_DWORD *)(v198 + 4 * v195);
      unint64_t v201 = v198 + 4 * v199;
      *int v200 = 23;
      int v193 = v200 + 1;
      while (v192 != v194)
      {
        int v202 = *((_DWORD *)v192 - 1);
        v192 -= 4;
        *--int v200 = v202;
      }
      *a1 = v200;
      a1[1] = v193;
      a1[2] = v201;
      if (v194) {
        operator delete(v194);
      }
    }
    else
    {
      *(_DWORD *)int v192 = 23;
      int v193 = v192 + 4;
    }
    a1[1] = v193;
  }
  if (sub_20AD60())
  {
    v204 = (char *)a1[1];
    unint64_t v203 = a1[2];
    if ((unint64_t)v204 >= v203)
    {
      long long v206 = (char *)*a1;
      uint64_t v207 = (uint64_t)&v204[-*a1] >> 2;
      unint64_t v208 = v207 + 1;
      if ((unint64_t)(v207 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v209 = v203 - (void)v206;
      if (v209 >> 1 > v208) {
        unint64_t v208 = v209 >> 1;
      }
      BOOL v14 = (unint64_t)v209 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v210 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v210 = v208;
      }
      if (v210)
      {
        unint64_t v210 = (unint64_t)sub_46BF4(v210);
        long long v206 = (char *)*a1;
        v204 = (char *)a1[1];
      }
      else
      {
        uint64_t v211 = 0;
      }
      long long v212 = (_DWORD *)(v210 + 4 * v207);
      unint64_t v213 = v210 + 4 * v211;
      *long long v212 = 24;
      v205 = v212 + 1;
      while (v204 != v206)
      {
        int v214 = *((_DWORD *)v204 - 1);
        v204 -= 4;
        *--long long v212 = v214;
      }
      *a1 = v212;
      a1[1] = v205;
      a1[2] = v213;
      if (v206) {
        operator delete(v206);
      }
    }
    else
    {
      *(_DWORD *)v204 = 24;
      v205 = v204 + 4;
    }
    a1[1] = v205;
  }
  if (sub_20A144())
  {
    uint64_t v216 = (char *)a1[1];
    unint64_t v215 = a1[2];
    if ((unint64_t)v216 >= v215)
    {
      unint64_t v218 = (char *)*a1;
      uint64_t v219 = (uint64_t)&v216[-*a1] >> 2;
      unint64_t v220 = v219 + 1;
      if ((unint64_t)(v219 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v221 = v215 - (void)v218;
      if (v221 >> 1 > v220) {
        unint64_t v220 = v221 >> 1;
      }
      BOOL v14 = (unint64_t)v221 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v222 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v222 = v220;
      }
      if (v222)
      {
        unint64_t v222 = (unint64_t)sub_46BF4(v222);
        unint64_t v218 = (char *)*a1;
        uint64_t v216 = (char *)a1[1];
      }
      else
      {
        uint64_t v223 = 0;
      }
      uint64_t v224 = (_DWORD *)(v222 + 4 * v219);
      unint64_t v225 = v222 + 4 * v223;
      *uint64_t v224 = 27;
      unint64_t v217 = v224 + 1;
      while (v216 != v218)
      {
        int v226 = *((_DWORD *)v216 - 1);
        v216 -= 4;
        *--uint64_t v224 = v226;
      }
      *a1 = v224;
      a1[1] = v217;
      a1[2] = v225;
      if (v218) {
        operator delete(v218);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v216 = 27;
      unint64_t v217 = v216 + 4;
    }
    a1[1] = v217;
  }
  if (_os_feature_enabled_impl())
  {
    uint64_t v228 = (char *)a1[1];
    unint64_t v227 = a1[2];
    if ((unint64_t)v228 >= v227)
    {
      long long v230 = (char *)*a1;
      uint64_t v231 = (uint64_t)&v228[-*a1] >> 2;
      unint64_t v232 = v231 + 1;
      if ((unint64_t)(v231 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v233 = v227 - (void)v230;
      if (v233 >> 1 > v232) {
        unint64_t v232 = v233 >> 1;
      }
      BOOL v14 = (unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v234 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v234 = v232;
      }
      if (v234)
      {
        unint64_t v234 = (unint64_t)sub_46BF4(v234);
        long long v230 = (char *)*a1;
        uint64_t v228 = (char *)a1[1];
      }
      else
      {
        uint64_t v235 = 0;
      }
      long long v236 = (_DWORD *)(v234 + 4 * v231);
      unint64_t v237 = v234 + 4 * v235;
      *long long v236 = 9;
      unint64_t v229 = v236 + 1;
      while (v228 != v230)
      {
        int v238 = *((_DWORD *)v228 - 1);
        v228 -= 4;
        *--long long v236 = v238;
      }
      *a1 = v236;
      a1[1] = v229;
      a1[2] = v237;
      if (v230) {
        operator delete(v230);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v228 = 9;
      unint64_t v229 = v228 + 4;
    }
    a1[1] = v229;
  }
  if (_os_feature_enabled_impl())
  {
    unint64_t v240 = (char *)a1[1];
    unint64_t v239 = a1[2];
    if ((unint64_t)v240 >= v239)
    {
      uint64_t v242 = (char *)*a1;
      uint64_t v243 = (uint64_t)&v240[-*a1] >> 2;
      unint64_t v244 = v243 + 1;
      if ((unint64_t)(v243 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v245 = v239 - (void)v242;
      if (v245 >> 1 > v244) {
        unint64_t v244 = v245 >> 1;
      }
      BOOL v14 = (unint64_t)v245 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v246 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v246 = v244;
      }
      if (v246)
      {
        unint64_t v246 = (unint64_t)sub_46BF4(v246);
        uint64_t v242 = (char *)*a1;
        unint64_t v240 = (char *)a1[1];
      }
      else
      {
        uint64_t v247 = 0;
      }
      unint64_t v248 = (_DWORD *)(v246 + 4 * v243);
      unint64_t v249 = v246 + 4 * v247;
      *unint64_t v248 = 10;
      unint64_t v241 = v248 + 1;
      while (v240 != v242)
      {
        int v250 = *((_DWORD *)v240 - 1);
        v240 -= 4;
        *--unint64_t v248 = v250;
      }
      *a1 = v248;
      a1[1] = v241;
      a1[2] = v249;
      if (v242) {
        operator delete(v242);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v240 = 10;
      unint64_t v241 = v240 + 4;
    }
    a1[1] = v241;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D288, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D288))
  {
    byte_64D280 = (unsigned __int16)sub_6CBEC() > 0x100u;
    __cxa_guard_release(&qword_64D288);
  }
  if (byte_64D280)
  {
    long long v252 = (char *)a1[1];
    unint64_t v251 = a1[2];
    if ((unint64_t)v252 >= v251)
    {
      long long v254 = (char *)*a1;
      uint64_t v255 = (uint64_t)&v252[-*a1] >> 2;
      unint64_t v256 = v255 + 1;
      if ((unint64_t)(v255 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v257 = v251 - (void)v254;
      if (v257 >> 1 > v256) {
        unint64_t v256 = v257 >> 1;
      }
      BOOL v14 = (unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v14) {
        unint64_t v258 = v256;
      }
      if (v258)
      {
        unint64_t v258 = (unint64_t)sub_46BF4(v258);
        long long v254 = (char *)*a1;
        long long v252 = (char *)a1[1];
      }
      else
      {
        uint64_t v259 = 0;
      }
      v260 = (_DWORD *)(v258 + 4 * v255);
      unint64_t v261 = v258 + 4 * v259;
      _DWORD *v260 = 30;
      long long v253 = v260 + 1;
      while (v252 != v254)
      {
        int v262 = *((_DWORD *)v252 - 1);
        v252 -= 4;
        *--v260 = v262;
      }
      *a1 = v260;
      a1[1] = v253;
      a1[2] = v261;
      if (v254) {
        operator delete(v254);
      }
    }
    else
    {
      *(_DWORD *)long long v252 = 30;
      long long v253 = v252 + 4;
    }
    a1[1] = v253;
  }
}

void sub_333894(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_64BCB0);
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void *sub_333934(signed int a1)
{
  if (a1 > 1668505973)
  {
    if (a1 <= 1668703083)
    {
      if (a1 != 1668505974)
      {
        if (a1 == 1668509810)
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A388, memory_order_acquire) & 1) != 0
            || !__cxa_guard_acquire(&qword_65A388))
          {
            return qword_65A370;
          }
          *(_OWORD *)buf = xmmword_57323C;
          *(_OWORD *)&buf[16] = unk_57324C;
          long long v12 = xmmword_57325C;
          sub_FC71C(qword_65A370, buf, 0xCuLL);
          uint64_t v2 = qword_65A370;
          int v3 = &qword_65A388;
          goto LABEL_40;
        }
        if (a1 != 1668576377) {
          goto LABEL_41;
        }
        goto LABEL_22;
      }
LABEL_16:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A2E8, memory_order_acquire) & 1) != 0
        || !__cxa_guard_acquire(&qword_65A2E8))
      {
        return qword_65A2D0;
      }
      uint64_t v13 = 0x1400000013;
      *(_OWORD *)buf = xmmword_573160;
      *(_OWORD *)&buf[16] = unk_573170;
      long long v12 = xmmword_573180;
      sub_FC71C(qword_65A2D0, buf, 0xEuLL);
      uint64_t v2 = qword_65A2D0;
      int v3 = &qword_65A2E8;
      goto LABEL_40;
    }
    if (a1 == 1668703084)
    {
LABEL_22:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A348, memory_order_acquire) & 1) != 0
        || !__cxa_guard_acquire(&qword_65A348))
      {
        return qword_65A330;
      }
      *(_OWORD *)buf = xmmword_5731E4;
      *(_OWORD *)&buf[16] = unk_5731F4;
      sub_FC71C(qword_65A330, buf, 8uLL);
      uint64_t v2 = qword_65A330;
      int v3 = &qword_65A348;
      goto LABEL_40;
    }
    if (a1 == 1668705639 || a1 == 1668705568) {
      goto LABEL_16;
    }
LABEL_41:
    int v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a1);
      if (v10 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1240;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unhandled audio category %s\"", buf, 0x1Cu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unhandled audio category %s");
  }
  if (a1 <= 1668117867)
  {
    if (a1 == 1667657057 || a1 == 1667657072)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A308, memory_order_acquire) & 1) != 0
        || !__cxa_guard_acquire(&qword_65A308))
      {
        return qword_65A2F0;
      }
      LODWORD(v12) = 20;
      *(_OWORD *)buf = xmmword_573198;
      *(_OWORD *)&buf[16] = unk_5731A8;
      sub_FC71C(qword_65A2F0, buf, 9uLL);
      uint64_t v2 = qword_65A2F0;
      int v3 = &qword_65A308;
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  if (a1 == 1668117868) {
    goto LABEL_11;
  }
  if (a1 != 1668309362)
  {
    if (a1 != 1668441443) {
      goto LABEL_41;
    }
LABEL_11:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A328, memory_order_acquire) & 1) != 0
      || !__cxa_guard_acquire(&qword_65A328))
    {
      return qword_65A310;
    }
    *(void *)&long long v12 = 0x1400000013;
    *(_OWORD *)buf = xmmword_5731BC;
    *(_OWORD *)&buf[16] = unk_5731CC;
    sub_FC71C(qword_65A310, buf, 0xAuLL);
    uint64_t v2 = qword_65A310;
    int v3 = &qword_65A328;
    goto LABEL_40;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A368, memory_order_acquire) & 1) != 0
    || !__cxa_guard_acquire(&qword_65A368))
  {
    return qword_65A350;
  }
  uint64_t v13 = 0x1400000013;
  *(_OWORD *)buf = xmmword_573204;
  *(_OWORD *)&buf[16] = unk_573214;
  long long v12 = xmmword_573224;
  sub_FC71C(qword_65A350, buf, 0xEuLL);
  uint64_t v2 = qword_65A350;
  int v3 = &qword_65A368;
LABEL_40:
  __cxa_guard_release(v3);
  return v2;
}

void sub_333DF0(_Unwind_Exception *a1)
{
}

void sub_333E70()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A3A8, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_65A3A8))
    {
      v0[0] = xmmword_57326C;
      v0[1] = unk_57327C;
      sub_FC71C(qword_65A390, v0, 8uLL);
      __cxa_guard_release(&qword_65A3A8);
    }
  }
}

void sub_333F14(_Unwind_Exception *a1)
{
}

void sub_333F2C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A3C8, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_65A3C8))
    {
      int v1 = 20;
      v0[0] = xmmword_57328C;
      v0[1] = unk_57329C;
      sub_FC71C(qword_65A3B0, v0, 9uLL);
      __cxa_guard_release(&qword_65A3C8);
    }
  }
}

void sub_333FD8(_Unwind_Exception *a1)
{
}

std::string *sub_333FF0(std::string *a1, unsigned int **a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[", 1uLL);
  int v4 = *a2;
  while (v4 != a2[1])
  {
    unsigned int v6 = *v4++;
    uint64_t v5 = v6;
    char v7 = "????";
    if (v6 <= 0x1E) {
      char v7 = off_634620[v5];
    }
    sub_21C8C(__p, v7);
    if ((v12 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if ((v12 & 0x80u) == 0) {
      std::string::size_type v9 = v12;
    }
    else {
      std::string::size_type v9 = (std::string::size_type)__p[1];
    }
    std::string::append(a1, (const std::string::value_type *)v8, v9);
    if ((char)v12 < 0) {
      operator delete(__p[0]);
    }
    if (v4 == a2[1]) {
      break;
    }
    std::string::append(a1, ", ", 2uLL);
  }
  return std::string::append(a1, "]", 1uLL);
}

void sub_3340FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_334138(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  if (*a2 - 3 >= 0x13 && (v3 > 0x1E || ((1 << v3) & 0x4F800003) == 0)) {
    return 0;
  }
  unsigned int v6 = *(_DWORD **)a1;
  uint64_t v5 = *(_DWORD **)(a1 + 8);
  if (*(_DWORD **)a1 != v5)
  {
    while (*v6 != v3)
    {
      if (++v6 == v5)
      {
        unsigned int v6 = *(_DWORD **)(a1 + 8);
        break;
      }
    }
  }
  if (v6 != v5) {
    return 0;
  }
  uint64_t v8 = sub_32A48(20);
  if (*(unsigned char *)(v8 + 8))
  {
    std::string::size_type v9 = *(NSObject **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *a2;
        if (v10 > 0x1E) {
          uint64_t v11 = "????";
        }
        else {
          uint64_t v11 = off_634620[v10];
        }
        sub_21C8C(__p, v11);
        if (v14 >= 0) {
          unsigned __int8 v12 = __p;
        }
        else {
          unsigned __int8 v12 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315650;
        uint64_t v16 = "AlternateVAD.cpp";
        __int16 v17 = 1024;
        int v18 = 1407;
        __int16 v19 = 2080;
        unint64_t v20 = v12;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Removing %s", buf, 0x1Cu);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return 1;
}

void sub_3342CC(uint64_t *a1, unsigned int **a2, const void *a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v131 = 0;
  long long v130 = 0uLL;
  sub_FC64C(&v130, a3, a4, (a4 - (uint64_t)a3) >> 2);
  uint64_t v6 = sub_32A48(20);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        sub_333FF0((std::string *)__p, (unsigned int **)&v130);
        uint64_t v8 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)buf = 136315650;
        unint64_t v141 = "AlternateVAD.cpp";
        __int16 v142 = 1024;
        int v143 = 1362;
        __int16 v144 = 2080;
        int v145 = v8;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Removing Unsupported Alternate VAD specification types from %s", buf, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }
  uint64_t v9 = sub_32A48(20);
  if (*(unsigned char *)(v9 + 8))
  {
    uint64_t v10 = *(NSObject **)v9;
    if (*(void *)v9)
    {
      if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
      {
        sub_333FF0((std::string *)__p, a2);
        uint64_t v11 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)buf = 136315650;
        unint64_t v141 = "AlternateVAD.cpp";
        __int16 v142 = 1024;
        int v143 = 1363;
        __int16 v144 = 2080;
        int v145 = v11;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Supported Alternate VAD specification types are: %s", buf, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }
  uint64_t v13 = (unsigned int *)*((void *)&v130 + 1);
  unsigned __int8 v12 = (unsigned int *)v130;
  if ((void)v130 != *((void *)&v130 + 1))
  {
    while ((sub_334138((uint64_t)a2, v12) & 1) == 0)
    {
      if (++v12 == v13) {
        goto LABEL_29;
      }
    }
    if (v12 != v13)
    {
      for (unsigned int i = v12 + 1; i != v13; ++i)
      {
        if ((sub_334138((uint64_t)a2, i) & 1) == 0) {
          *v12++ = *i;
        }
      }
    }
  }
  if (v12 != v13) {
    *((void *)&v130 + 1) = v12;
  }
LABEL_29:
  uint64_t v15 = sub_32A48(20);
  if (*(unsigned char *)(v15 + 8))
  {
    uint64_t v16 = *(NSObject **)v15;
    if (*(void *)v15)
    {
      if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
      {
        sub_333FF0((std::string *)__p, (unsigned int **)&v130);
        __int16 v17 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)buf = 136315650;
        unint64_t v141 = "AlternateVAD.cpp";
        __int16 v142 = 1024;
        int v143 = 1418;
        __int16 v144 = 2080;
        int v145 = v17;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Resulting Alternate VAD specification types: %s", buf, 0x1Cu);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }
  long long v129 = v130;
  long long v132 = v130;
  uint64_t v133 = v131;
  uint64_t v131 = 0;
  long long v130 = 0uLL;
  int v18 = (os_log_t *)sub_32A48(20);
  __int16 v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_INFO))
  {
    sub_333FF0((std::string *)__p, (unsigned int **)&v132);
    unint64_t v20 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)buf = 136315650;
    unint64_t v141 = "AlternateVAD.cpp";
    __int16 v142 = 1024;
    int v143 = 1427;
    __int16 v144 = 2080;
    int v145 = v20;
    _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_INFO, "%25s:%-5d Creating alternate vad specification for %s", buf, 0x1Cu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  uint64_t v21 = (_DWORD *)v129;
  if ((void)v129 != *((void *)&v129 + 1))
  {
    char v22 = a1 + 1;
    char v23 = a1 + 2;
    while (1)
    {
      switch(*v21)
      {
        case 0:
          sub_33A774((uint64_t)buf, 0);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v45 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v45 <= v37 + 1) {
            unint64_t v45 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v45;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 1:
          sub_33A774((uint64_t)buf, 1);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v46 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v46 <= v37 + 1) {
            unint64_t v46 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v46;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 2:
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A5C8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65A5C8))
          {
            byte_65A5C0 = MGGetSInt32Answer() == 4;
            __cxa_guard_release(&qword_65A5C8);
          }
          if (byte_65A5C0)
          {
            if (MGGetSInt32Answer() != 4)
            {
              unint64_t v91 = (os_log_t *)sub_32A48(13);
              uint64_t v92 = *v91;
              if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long __p = 136315394;
                *(void *)&__p[4] = "AlternateVAD.cpp";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 788;
                _os_log_impl(&def_1E50E8, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
              }
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Precondition failure.");
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A948, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_65A948))
            {
              LODWORD(v150[0]) = 1885889645;
              sub_1A2E28(&v162, v150, 1uLL);
              *(void *)long long __p = off_634000;
              *(void *)&__p[24] = __p;
              v171[0] = off_634048;
              char v172 = v171;
              v169[0] = off_634090;
              unint64_t v170 = v169;
              uint64_t v166 = 0;
              v167[0] = off_6340D8;
              unint64_t v168 = v167;
              sub_33A4D8((uint64_t)&unk_65A790, 2, (uint64_t)&v162, 1, 1987279212, 1668505974, 1986818931, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
              sub_81A58(v165);
              sub_81ADC(v167);
              sub_81B60(v169);
              sub_81BE4(v171);
              sub_81C68(__p);
              if (v162)
              {
                unint64_t v163 = v162;
                operator delete(v162);
              }
              __cxa_guard_release(&qword_65A948);
            }
            sub_127450((uint64_t)buf, (uint64_t)&unk_65A790);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A788, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_65A788))
            {
              v150[0] = 0x7073706B70687077;
              sub_1A2E28(&v162, v150, 2uLL);
              *(void *)long long __p = off_634000;
              *(void *)&__p[24] = __p;
              v171[0] = off_634048;
              char v172 = v171;
              v169[0] = off_634090;
              unint64_t v170 = v169;
              uint64_t v166 = 0;
              v167[0] = off_634120;
              unint64_t v168 = v167;
              sub_33A4D8((uint64_t)&unk_65A5D0, 2, (uint64_t)&v162, 1, 1987279212, 1668505974, 1986818931, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
              sub_81A58(v165);
              sub_81ADC(v167);
              sub_81B60(v169);
              sub_81BE4(v171);
              sub_81C68(__p);
              if (v162)
              {
                unint64_t v163 = v162;
                operator delete(v162);
              }
              __cxa_guard_release(&qword_65A788);
            }
            sub_127450((uint64_t)buf, (uint64_t)&unk_65A5D0);
          }
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v70 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v70 <= v37 + 1) {
            unint64_t v70 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v70;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 3:
          if (MGGetSInt32Answer() != 1)
          {
            CFArrayRef v79 = (os_log_t *)sub_32A48(13);
            UInt32 v80 = *v79;
            if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 772;
              _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            uint64_t v81 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v81, "Precondition failure.");
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A5B8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65A5B8))
          {
            v150[0] = 0x70646C6E70756C6ELL;
            sub_1A2E28(&v162, v150, 2uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            uint64_t v166 = 0;
            v167[0] = off_6340D8;
            unint64_t v168 = v167;
            sub_33A4D8((uint64_t)&unk_65A400, 3, (uint64_t)&v162, 1, 1986224492, 1667394407, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65A5B8);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65A400);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v58 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v58 <= v37 + 1) {
            unint64_t v58 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v58;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 4:
          if ((MGGetBoolAnswer() & 1) == 0 && (sub_8B774() & 1) == 0)
          {
            long long v109 = (os_log_t *)sub_32A48(13);
            long long v110 = *v109;
            if (*v109 && os_log_type_enabled(*v109, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 514;
              _os_log_impl(&def_1E50E8, v110, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            uint64_t v111 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v111, "Precondition failure.");
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65BDB8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65BDB8))
          {
            qmemcpy(v150, "iwmpibmpisup", 12);
            sub_1A2E28(&v162, v150, 3uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            uint64_t v166 = 0;
            v167[0] = off_6343A8;
            unint64_t v168 = v167;
            sub_33A4D8((uint64_t)&unk_65BC00, 4, (uint64_t)&v162, 0, 1987276900, 1668441443, 1987208039, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65BDB8);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65BC00);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v59 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v59 <= v37 + 1) {
            unint64_t v59 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v59;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 5:
          if ((MGGetBoolAnswer() & 1) == 0 && (sub_8B774() & 1) == 0)
          {
            uint64_t v104 = (os_log_t *)sub_32A48(13);
            unint64_t v105 = *v104;
            if (*v104 && os_log_type_enabled(*v104, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 460;
              _os_log_impl(&def_1E50E8, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
LABEL_649:
            uint64_t v116 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v116, "Precondition failure.");
          }
          if (MGGetSInt32Answer() == 6)
          {
            if ((MGGetBoolAnswer() & 1) == 0 && (sub_8B774() & 1) == 0)
            {
              unint64_t v114 = (os_log_t *)sub_32A48(13);
              uint64_t v115 = *v114;
              if (*v114 && os_log_type_enabled(*v114, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long __p = 136315394;
                *(void *)&__p[4] = "AlternateVAD.cpp";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 439;
                _os_log_impl(&def_1E50E8, v115, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
              }
              goto LABEL_649;
            }
            if (MGGetSInt32Answer() != 6)
            {
              uint64_t v94 = (os_log_t *)sub_32A48(13);
              char v95 = *v94;
              if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long __p = 136315394;
                *(void *)&__p[4] = "AlternateVAD.cpp";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 440;
                _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
              }
              goto LABEL_649;
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B7A8, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_65B7A8))
            {
              *(_OWORD *)long long __p = xmmword_4E7B60;
              sub_1A2E28(qword_65B790, __p, 4uLL);
              __cxa_guard_release(&qword_65B7A8);
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B968, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_65B968))
            {
              *(void *)long long __p = off_634000;
              *(void *)&__p[24] = __p;
              v171[0] = off_634048;
              char v172 = v171;
              v169[0] = off_634090;
              unint64_t v170 = v169;
              v167[0] = off_6340D8;
              unint64_t v168 = v167;
              v165[0] = off_634240;
              uint64_t v166 = v165;
              sub_33A4D8((uint64_t)&unk_65B7B0, 5, (uint64_t)qword_65B790, 1, 1987276900, 1668441443, 1987208039, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
              sub_81A58(v165);
              sub_81ADC(v167);
              sub_81B60(v169);
              sub_81BE4(v171);
              sub_81C68(__p);
              __cxa_guard_release(&qword_65B968);
            }
            sub_127450((uint64_t)buf, (uint64_t)&unk_65B7B0);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B5C8, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_65B5C8))
            {
              *(_OWORD *)long long __p = xmmword_4E7B60;
              sub_1A2E28(qword_65B5B0, __p, 4uLL);
              __cxa_guard_release(&qword_65B5C8);
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B788, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_65B788))
            {
              *(void *)long long __p = off_634000;
              *(void *)&__p[24] = __p;
              v171[0] = off_634048;
              char v172 = v171;
              v169[0] = off_634090;
              unint64_t v170 = v169;
              v167[0] = off_6340D8;
              unint64_t v168 = v167;
              v165[0] = off_634240;
              uint64_t v166 = v165;
              sub_33A4D8((uint64_t)&unk_65B5D0, 5, (uint64_t)qword_65B5B0, 1, 1987276900, 1668441443, 1987208039, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
              sub_81A58(v165);
              sub_81ADC(v167);
              sub_81B60(v169);
              sub_81BE4(v171);
              sub_81C68(__p);
              __cxa_guard_release(&qword_65B788);
            }
            sub_127450((uint64_t)buf, (uint64_t)&unk_65B5D0);
          }
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 >= *v23)
          {
            uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
            if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
              sub_60548();
            }
            unint64_t v65 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
            if (v65 <= v37 + 1) {
              unint64_t v65 = v37 + 1;
            }
            if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
              unint64_t v39 = 0x94F2094F2094F2;
            }
            else {
              unint64_t v39 = v65;
            }
            *(void *)&long long v153 = a1 + 2;
            if (v39) {
LABEL_413:
            }
              unint64_t v39 = (unint64_t)sub_820A0(v39);
            else {
              uint64_t v68 = 0;
            }
LABEL_456:
            *(void *)long long __p = v39;
            *(void *)&__p[8] = v39 + 440 * v37;
            *(void *)&__p[16] = *(void *)&__p[8];
            *(void *)&__p[24] = v39 + 440 * v68;
            sub_127450(*(uint64_t *)&__p[8], (uint64_t)buf);
            *(void *)&__p[16] += 440;
            sub_136E10(a1, __p);
            uint64_t v69 = *v22;
            sub_136EE4((uint64_t)__p);
          }
          else
          {
LABEL_417:
            sub_127450(*v22, (uint64_t)buf);
            uint64_t v69 = v24 + 440;
            uint64_t *v22 = v69;
          }
          uint64_t *v22 = v69;
          sub_819AC((uint64_t)buf);
LABEL_458:
          if (++v21 == *((_DWORD **)&v129 + 1))
          {
            uint64_t v21 = (_DWORD *)v132;
            goto LABEL_553;
          }
          break;
        case 6:
          if ((MGGetBoolAnswer() & 1) == 0 && (sub_8B774() & 1) == 0)
          {
            unint64_t v96 = (os_log_t *)sub_32A48(13);
            int v97 = *v96;
            if (*v96 && os_log_type_enabled(*v96, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 223;
              _os_log_impl(&def_1E50E8, v97, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
LABEL_653:
            uint64_t v119 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v119, "Precondition failure.");
          }
          if (MGGetSInt32Answer() == 6)
          {
            if ((MGGetBoolAnswer() & 1) == 0 && (sub_8B774() & 1) == 0)
            {
              int v117 = (os_log_t *)sub_32A48(13);
              int v118 = *v117;
              if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long __p = 136315394;
                *(void *)&__p[4] = "AlternateVAD.cpp";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 212;
                _os_log_impl(&def_1E50E8, v118, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
              }
              goto LABEL_653;
            }
            if (MGGetSInt32Answer() != 6)
            {
              unint64_t v112 = (os_log_t *)sub_32A48(13);
              uint64_t v113 = *v112;
              if (*v112 && os_log_type_enabled(*v112, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long __p = 136315394;
                *(void *)&__p[4] = "AlternateVAD.cpp";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 213;
                _os_log_impl(&def_1E50E8, v113, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
              }
              goto LABEL_653;
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B048, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_65B048))
            {
              v150[0] = 0x70757369706D6269;
              sub_1A2E28(&v162, v150, 2uLL);
              *(void *)long long __p = off_634000;
              *(void *)&__p[24] = __p;
              v171[0] = off_634048;
              char v172 = v171;
              v169[0] = off_634090;
              unint64_t v170 = v169;
              v167[0] = off_6340D8;
              unint64_t v168 = v167;
              sub_33AAB8(v165);
              sub_33A4D8((uint64_t)&unk_65AE90, 6, (uint64_t)&v162, 1, 1987276900, 1668441443, 1987211117, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
              sub_81A58(v165);
              sub_81ADC(v167);
              sub_81B60(v169);
              sub_81BE4(v171);
              sub_81C68(__p);
              if (v162)
              {
                unint64_t v163 = v162;
                operator delete(v162);
              }
              __cxa_guard_release(&qword_65B048);
            }
            sub_127450((uint64_t)buf, (uint64_t)&unk_65AE90);
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65AE88, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_65AE88))
            {
              LODWORD(v150[0]) = 1886216809;
              sub_1A2E28(&v162, v150, 1uLL);
              *(void *)long long __p = off_634000;
              *(void *)&__p[24] = __p;
              v171[0] = off_634048;
              char v172 = v171;
              v169[0] = off_634090;
              unint64_t v170 = v169;
              v167[0] = off_6340D8;
              unint64_t v168 = v167;
              sub_33AAB8(v165);
              sub_33A4D8((uint64_t)&unk_65ACD0, 6, (uint64_t)&v162, 1, 1987276900, 1668441443, 1987211117, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
              sub_81A58(v165);
              sub_81ADC(v167);
              sub_81B60(v169);
              sub_81BE4(v171);
              sub_81C68(__p);
              if (v162)
              {
                unint64_t v163 = v162;
                operator delete(v162);
              }
              __cxa_guard_release(&qword_65AE88);
            }
            sub_127450((uint64_t)buf, (uint64_t)&unk_65ACD0);
          }
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v66 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v66 <= v37 + 1) {
            unint64_t v66 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v66;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 7:
          if ((MGGetBoolAnswer() & 1) == 0 && (sub_8B774() & 1) == 0)
          {
            __int16 v101 = (os_log_t *)sub_32A48(13);
            uint64_t v102 = *v101;
            if (*v101 && os_log_type_enabled(*v101, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 407;
              _os_log_impl(&def_1E50E8, v102, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            unint64_t v103 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v103, "Precondition failure.");
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65BA08, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65BA08))
          {
            *(void *)long long __p = 0x706D6269706D6274;
            sub_1A2E28(qword_65B9F0, __p, 2uLL);
            __cxa_guard_release(&qword_65BA08);
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65BA18, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65BA18))
          {
            if (sub_20A008()) {
              int v71 = 1987208039;
            }
            else {
              int v71 = 1987212137;
            }
            dword_65BA10 = v71;
            __cxa_guard_release(&qword_65BA18);
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65BBD8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65BBD8))
          {
            int v128 = dword_65BA10;
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            if (sub_20A008()) {
              unint64_t v72 = off_634288;
            }
            else {
              unint64_t v72 = off_6342D0;
            }
            v167[0] = v72;
            unint64_t v168 = v167;
            sub_33AB78(v165);
            sub_33A4D8((uint64_t)&unk_65BA20, 7, (uint64_t)qword_65B9F0, 1, 1987276900, 1668441443, v128, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            __cxa_guard_release(&qword_65BBD8);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65BA20);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v56 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v56 <= v37 + 1) {
            unint64_t v56 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v56;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 8:
          if ((MGGetBoolAnswer() & 1) == 0 && (sub_8B774() & 1) == 0)
          {
            uint64_t v106 = (os_log_t *)sub_32A48(13);
            char v107 = *v106;
            if (*v106 && os_log_type_enabled(*v106, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 348;
              _os_log_impl(&def_1E50E8, v107, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            int v108 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v108, "Precondition failure.");
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B228, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65B228))
          {
            LODWORD(v150[0]) = 1886216809;
            sub_1A2E28(&v162, v150, 1uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            sub_3FCD2C((uint64_t)v167, 1936290409);
            sub_3FD1BC(v165, 1936290409);
            sub_33A4D8((uint64_t)&unk_65B070, 8, (uint64_t)&v162, 1, 1987277668, 1668510307, 1987208039, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0x173697269);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65B228);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65B070);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v60 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v60 <= v37 + 1) {
            unint64_t v60 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v60;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 9:
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B3E8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65B3E8))
          {
            LODWORD(v150[0]) = 1886216809;
            sub_1A2E28(&v162, v150, 1uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            v167[0] = off_6340D8;
            unint64_t v168 = v167;
            sub_3FD1BC(v165, 1836346212);
            sub_33A4D8((uint64_t)&unk_65B230, 9, (uint64_t)&v162, 1, 1987276148, 1668510307, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0x16D746B64);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65B3E8);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65B230);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v47 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v47 <= v37 + 1) {
            unint64_t v47 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v47;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0xA:
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B5A8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65B5A8))
          {
            LODWORD(v150[0]) = 1886216809;
            sub_1A2E28(&v162, v150, 1uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            v167[0] = off_6340D8;
            unint64_t v168 = v167;
            sub_3FD1BC(v165, 1936614497);
            sub_33A4D8((uint64_t)&unk_65B3F0, 10, (uint64_t)&v162, 1, 1987277665, 1668510307, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0x1736E6461);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65B5A8);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65B3F0);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v40 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v40 <= v37 + 1) {
            unint64_t v40 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v40;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0xB:
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65CD98, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65CD98))
          {
            LODWORD(v150[0]) = 1886216809;
            sub_1A2E28(&v162, v150, 1uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            sub_3FCD2C((uint64_t)v167, 1935962992);
            sub_3FD1BC(v165, 1935962992);
            sub_33A4D8((uint64_t)&unk_65CBE0, 11, (uint64_t)&v162, 1, 1987274852, 1668510307, 1987208039, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0x173647370);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65CD98);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65CBE0);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v43 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v43 <= v37 + 1) {
            unint64_t v43 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v43;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0xC:
          if ((MGGetBoolAnswer() & 1) == 0 && (sub_8B774() & 1) == 0)
          {
            unint64_t v98 = (os_log_t *)sub_32A48(13);
            __int16 v99 = *v98;
            if (*v98 && os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 425;
              _os_log_impl(&def_1E50E8, v99, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
LABEL_608:
            long long v100 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v100, "Precondition failure.");
          }
          if (sub_89FA8() != 2
            && sub_89FA8() != 3
            && sub_89FA8() != 4
            && sub_89FA8() != 5
            && sub_89FA8() != 195)
          {
            unint64_t v123 = (os_log_t *)sub_32A48(13);
            uint64_t v124 = *v123;
            if (*v123 && os_log_type_enabled(*v123, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 430;
              _os_log_impl(&def_1E50E8, v124, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            goto LABEL_608;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65BF78, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65BF78))
          {
            v150[0] = 0x70757369706D6269;
            sub_1A2E28(&v162, v150, 2uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            uint64_t v166 = 0;
            v167[0] = off_6340D8;
            unint64_t v168 = v167;
            sub_33A4D8((uint64_t)&unk_65BDC0, 12, (uint64_t)&v162, 1, 1987276900, 1668441443, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65BF78);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65BDC0);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v64 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v64 <= v37 + 1) {
            unint64_t v64 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v64;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0xD:
          if ((MGGetBoolAnswer() & 1) == 0)
          {
            int v76 = (os_log_t *)sub_32A48(13);
            unint64_t v77 = *v76;
            if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 61;
              _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            int v78 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v78, "Precondition failure.");
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65C858, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65C858))
          {
            sub_296B9C();
            if (dword_64FF10)
            {
              v171[0] = 0x706E756C70616374;
              sub_1A2E28(qword_65C840, v171, 2uLL);
            }
            else
            {
              *(_OWORD *)long long __p = xmmword_4E7B50;
              sub_1A2E28(qword_65C840, __p, 4uLL);
            }
            __cxa_guard_release(&qword_65C858);
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65CA18, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65CA18))
          {
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            uint64_t v166 = 0;
            v167[0] = off_6340D8;
            unint64_t v168 = v167;
            sub_33A4D8((uint64_t)&unk_65C860, 13, (uint64_t)qword_65C840, 0, 1987738234, 1667394407, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            __cxa_guard_release(&qword_65CA18);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65C860);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v54 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v54 <= v37 + 1) {
            unint64_t v54 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v54;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0xE:
          if (MGGetSInt32Answer() != 1
            && MGGetSInt32Answer() != 3
            && MGGetSInt32Answer() != 2)
          {
            uint64_t v120 = (os_log_t *)sub_32A48(13);
            unint64_t v121 = *v120;
            if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 40;
              _os_log_impl(&def_1E50E8, v121, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            uint64_t v122 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v122, "Precondition failure.");
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65CBD8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65CBD8))
          {
            LODWORD(v150[0]) = 1886613611;
            sub_1A2E28(&v162, v150, 1uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            uint64_t v166 = 0;
            v167[0] = off_6345E8;
            unint64_t v168 = v167;
            sub_33A4D8((uint64_t)&unk_65CA20, 14, (uint64_t)&v162, 1, 1987276897, 1667657072, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65CBD8);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65CA20);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v57 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v57 <= v37 + 1) {
            unint64_t v57 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v57;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0xF:
          unint64_t v32 = operator new(8uLL);
          *unint64_t v32 = 0x706E6C6970686B69;
          uint64_t v164 = v32 + 1;
          uint64_t v162 = v32;
          unint64_t v163 = v32 + 1;
          *(void *)long long __p = off_634000;
          *(void *)&__p[24] = __p;
          v171[0] = off_634048;
          char v172 = v171;
          v169[0] = off_634090;
          unint64_t v170 = v169;
          uint64_t v166 = 0;
          v167[0] = off_6340D8;
          unint64_t v168 = v167;
          sub_33A4D8((uint64_t)buf, 15, (uint64_t)&v162, 0, 1986552183, 1667785079, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
          sub_81A58(v165);
          sub_81ADC(v167);
          sub_81B60(v169);
          sub_81BE4(v171);
          sub_81C68(__p);
          operator delete(v32);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v51 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v51 <= v37 + 1) {
            unint64_t v51 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v51;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x10:
          uint64_t v33 = operator new(0x10uLL);
          _OWORD *v33 = xmmword_4E7B40;
          uint64_t v164 = v33 + 1;
          uint64_t v162 = v33;
          unint64_t v163 = v33 + 1;
          *(void *)long long __p = off_634000;
          *(void *)&__p[24] = __p;
          v171[0] = off_634048;
          char v172 = v171;
          v169[0] = off_634090;
          unint64_t v170 = v169;
          uint64_t v166 = 0;
          v167[0] = off_6340D8;
          unint64_t v168 = v167;
          sub_33A4D8((uint64_t)buf, 16, (uint64_t)&v162, 0, 1986818404, 1668051300, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
          sub_81A58(v165);
          sub_81ADC(v167);
          sub_81B60(v169);
          sub_81BE4(v171);
          sub_81C68(__p);
          operator delete(v33);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v52 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v52 <= v37 + 1) {
            unint64_t v52 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v52;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x11:
          sub_33AC58((uint64_t)buf, 0);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v48 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v48 <= v37 + 1) {
            unint64_t v48 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v48;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x12:
          sub_33AC58((uint64_t)buf, 1);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v38 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v38 <= v37 + 1) {
            unint64_t v38 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v38;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x13:
          unint64_t v30 = operator new(4uLL);
          _DWORD *v30 = 1885433975;
          uint64_t v164 = v30 + 1;
          uint64_t v162 = v30;
          unint64_t v163 = v30 + 1;
          *(void *)long long __p = off_634000;
          *(void *)&__p[24] = __p;
          v171[0] = off_634048;
          char v172 = v171;
          v169[0] = off_634090;
          unint64_t v170 = v169;
          uint64_t v166 = 0;
          v167[0] = off_6340D8;
          unint64_t v168 = v167;
          sub_33A4D8((uint64_t)buf, 19, (uint64_t)&v162, 1, 1986884979, 1668117875, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
          sub_81A58(v165);
          sub_81ADC(v167);
          sub_81B60(v169);
          sub_81BE4(v171);
          sub_81C68(__p);
          operator delete(v30);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v49 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v49 <= v37 + 1) {
            unint64_t v49 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v49;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x14:
          char v34 = operator new(4uLL);
          *char v34 = 1885433953;
          uint64_t v164 = v34 + 1;
          uint64_t v162 = v34;
          unint64_t v163 = v34 + 1;
          *(void *)long long __p = off_634000;
          *(void *)&__p[24] = __p;
          v171[0] = off_634048;
          char v172 = v171;
          v169[0] = off_634090;
          unint64_t v170 = v169;
          uint64_t v166 = 0;
          v167[0] = off_6340D8;
          unint64_t v168 = v167;
          sub_33A4D8((uint64_t)buf, 20, (uint64_t)&v162, 1, 1986095474, 1667328370, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
          sub_81A58(v165);
          sub_81ADC(v167);
          sub_81B60(v169);
          sub_81BE4(v171);
          sub_81C68(__p);
          operator delete(v34);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v53 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v53 <= v37 + 1) {
            unint64_t v53 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v53;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x15:
          if (sub_89FA8() != 2
            && sub_89FA8() != 3
            && sub_89FA8() != 4
            && sub_89FA8() != 5
            && sub_89FA8() != 195)
          {
            std::string::size_type v125 = (os_log_t *)sub_32A48(13);
            int v126 = *v125;
            if (*v125 && os_log_type_enabled(*v125, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 945;
              _os_log_impl(&def_1E50E8, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            CFMutableArrayRef v127 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v127, "Precondition failure.");
          }
          unint64_t v25 = operator new(4uLL);
          *unint64_t v25 = 1886613611;
          v135[1] = v25 + 1;
          v135[2] = v25 + 1;
          v135[0] = v25;
          uint64_t v151 = 0x6D636466696D6466;
          sub_81364(v134, (uint64_t)&v151, 2);
          v150[0] = off_634000;
          v150[3] = v150;
          v149[0] = off_634048;
          v149[3] = v149;
          v148[0] = off_634090;
          v148[3] = v148;
          v147[0] = off_6340D8;
          v147[3] = v147;
          v146[3] = 0;
          v138[0] = 0;
          v138[1] = 0;
          uint64_t v137 = v138;
          sub_820EC(v136, (uint64_t)v134);
          sub_813F8((uint64_t)v171, (uint64_t)v150);
          sub_81490((uint64_t)v169, (uint64_t)v149);
          sub_81528((uint64_t)v167, (uint64_t)v148);
          sub_815C0((uint64_t)v165, (uint64_t)v147);
          sub_81658((uint64_t)&v162, (uint64_t)v146);
          *(_OWORD *)&v158[8] = 0u;
          long long v155 = 0u;
          uint64_t v156 = 1065353216;
          long long v153 = 0u;
          *(_OWORD *)uint64_t v154 = 0u;
          memset(__p, 0, sizeof(__p));
          *(_OWORD *)int v157 = 0u;
          *(_OWORD *)unint64_t v158 = 0u;
          *(_DWORD *)&v158[16] = 1065353216;
          *(_OWORD *)double v159 = 0u;
          long long v160 = 0u;
          uint64_t v161 = 1065353216;
          sub_816F0((uint64_t)buf, 0, 21, (uint64_t)v135, (uint64_t)&v137, 1, 1986817911, 1668050807, (uint64_t)v136, 0, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, (uint64_t)&v162, (const void ***)__p, 0);
          sub_7E020((char *)v160);
          uint64_t v26 = v159[0];
          v159[0] = 0;
          if (v26) {
            operator delete(v26);
          }
          sub_7E020(*(char **)v158);
          unint64_t v27 = v157[0];
          v157[0] = 0;
          if (v27) {
            operator delete(v27);
          }
          sub_7E020((char *)v155);
          uint64_t v28 = v154[0];
          v154[0] = 0;
          if (v28) {
            operator delete(v28);
          }
          unint64_t v139 = (void **)&__p[24];
          sub_4EDB8(&v139);
          unint64_t v139 = (void **)__p;
          sub_4EDB8(&v139);
          sub_81A58(&v162);
          sub_81ADC(v165);
          sub_81B60(v167);
          sub_81BE4(v169);
          sub_81C68(v171);
          sub_45F50(v136);
          sub_463E0(v138[0]);
          sub_81A58(v146);
          sub_81ADC(v147);
          sub_81B60(v148);
          sub_81BE4(v149);
          sub_81C68(v150);
          sub_45F50(v134);
          operator delete(v25);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v67 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v67 <= v37 + 1) {
            unint64_t v67 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v67;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x16:
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65AB08, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65AB08))
          {
            LODWORD(v150[0]) = 1886613611;
            sub_1A2E28(&v162, v150, 1uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            uint64_t v166 = 0;
            v167[0] = off_634168;
            unint64_t v168 = v167;
            sub_33A4D8((uint64_t)&unk_65A950, 22, (uint64_t)&v162, 1, 1987279212, 1668505974, 1986818931, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65AB08);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65A950);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v42 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v42 <= v37 + 1) {
            unint64_t v42 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v42;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x17:
          if ((sub_23AC0() & 1) == 0)
          {
            unint64_t v82 = (os_log_t *)sub_32A48(13);
            uint64_t v83 = *v82;
            if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 615;
              _os_log_impl(&def_1E50E8, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            unint64_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v84, "Precondition failure.");
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65C678, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65C678))
          {
            LODWORD(v150[0]) = 1886613611;
            sub_1A2E28(&v162, v150, 1uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634510;
            unint64_t v170 = v169;
            uint64_t v166 = 0;
            v167[0] = off_634558;
            unint64_t v168 = v167;
            sub_33A4D8((uint64_t)&unk_65C4C0, 23, (uint64_t)&v162, 1, 1987277417, 1667855215, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65C678);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65C4C0);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v55 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v55 <= v37 + 1) {
            unint64_t v55 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v55;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x18:
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65C838, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65C838))
          {
            LODWORD(v150[0]) = 1886613611;
            sub_1A2E28(&v162, v150, 1uLL);
            *(void *)long long __p = off_634000;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            uint64_t v166 = 0;
            v167[0] = off_6345A0;
            unint64_t v168 = v167;
            sub_33A4D8((uint64_t)&unk_65C680, 24, (uint64_t)&v162, 1, 1987277417, 1667855215, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65C838);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65C680);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v44 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v44 <= v37 + 1) {
            unint64_t v44 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v44;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x19:
          if ((sub_8B774() & 1) == 0)
          {
            uint64_t v85 = (os_log_t *)sub_32A48(13);
            int v86 = *v85;
            if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 951;
              _os_log_impl(&def_1E50E8, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            int v87 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v87, "Precondition failure.");
          }
          __int16 v29 = operator new(0x10uLL);
          *__int16 v29 = xmmword_4E7B30;
          uint64_t v164 = v29 + 1;
          uint64_t v162 = v29;
          unint64_t v163 = v29 + 1;
          *(void *)long long __p = off_634000;
          *(void *)&__p[24] = __p;
          v171[0] = off_634048;
          char v172 = v171;
          v169[0] = off_634090;
          unint64_t v170 = v169;
          uint64_t v166 = 0;
          v167[0] = off_6340D8;
          unint64_t v168 = v167;
          sub_33A4D8((uint64_t)buf, 25, (uint64_t)&v162, 1, 1986293108, 1668309362, 1836281204, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
          sub_81A58(v165);
          sub_81ADC(v167);
          sub_81B60(v169);
          sub_81BE4(v171);
          sub_81C68(__p);
          operator delete(v29);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v61 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v61 <= v37 + 1) {
            unint64_t v61 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v61;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x1A:
          if ((sub_8B774() & 1) == 0)
          {
            uint64_t v73 = (os_log_t *)sub_32A48(13);
            CFTypeRef v74 = *v73;
            if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 968;
              _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            unint64_t v75 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v75, "Precondition failure.");
          }
          uint64_t v36 = operator new(0x10uLL);
          *uint64_t v36 = xmmword_4E7B30;
          uint64_t v164 = v36 + 1;
          uint64_t v162 = v36;
          unint64_t v163 = v36 + 1;
          *(void *)long long __p = off_634000;
          *(void *)&__p[24] = __p;
          v171[0] = off_634048;
          char v172 = v171;
          v169[0] = off_634090;
          unint64_t v170 = v169;
          uint64_t v166 = 0;
          v167[0] = off_6340D8;
          unint64_t v168 = v167;
          sub_33A4D8((uint64_t)buf, 26, (uint64_t)&v162, 1, 1986290544, 1668309362, 1768781426, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
          sub_81A58(v165);
          sub_81ADC(v167);
          sub_81B60(v169);
          sub_81BE4(v171);
          sub_81C68(__p);
          operator delete(v36);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v63 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v63 <= v37 + 1) {
            unint64_t v63 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v63;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x1B:
          if ((sub_20A144() & 1) == 0)
          {
            UInt32 v88 = (os_log_t *)sub_32A48(13);
            int v89 = *v88;
            if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long __p = 136315394;
              *(void *)&__p[4] = "AlternateVAD.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 985;
              _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
            }
            uint64_t v90 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v90, "Precondition failure.");
          }
          uint64_t v35 = operator new(4uLL);
          *uint64_t v35 = 1886216809;
          uint64_t v164 = v35 + 1;
          uint64_t v162 = v35;
          unint64_t v163 = v35 + 1;
          *(void *)long long __p = off_634000;
          *(void *)&__p[24] = __p;
          v171[0] = off_634048;
          char v172 = v171;
          v169[0] = off_634090;
          unint64_t v170 = v169;
          uint64_t v166 = 0;
          v167[0] = off_6340D8;
          unint64_t v168 = v167;
          sub_33A4D8((uint64_t)buf, 27, (uint64_t)&v162, 1, 1987276899, 1668441443, 1936745328, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
          sub_81A58(v165);
          sub_81ADC(v167);
          sub_81B60(v169);
          sub_81BE4(v171);
          sub_81C68(__p);
          operator delete(v35);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v62 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v62 <= v37 + 1) {
            unint64_t v62 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v62;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x1D:
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65ACC8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_65ACC8))
          {
            LODWORD(v150[0]) = 1885892674;
            sub_1A2E28(&v162, v150, 1uLL);
            *(void *)long long __p = off_6341B0;
            *(void *)&__p[24] = __p;
            v171[0] = off_634048;
            char v172 = v171;
            v169[0] = off_634090;
            unint64_t v170 = v169;
            uint64_t v166 = 0;
            v167[0] = off_6340D8;
            unint64_t v168 = v167;
            sub_33A4D8((uint64_t)&unk_65AB10, 29, (uint64_t)&v162, 1, 1987279212, 1668505974, 1986818931, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
            sub_81A58(v165);
            sub_81ADC(v167);
            sub_81B60(v169);
            sub_81BE4(v171);
            sub_81C68(__p);
            if (v162)
            {
              unint64_t v163 = v162;
              operator delete(v162);
            }
            __cxa_guard_release(&qword_65ACC8);
          }
          sub_127450((uint64_t)buf, (uint64_t)&unk_65AB10);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v41 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v41 <= v37 + 1) {
            unint64_t v41 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v41;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        case 0x1E:
          int v31 = operator new(4uLL);
          _DWORD *v31 = 1819306350;
          uint64_t v164 = v31 + 1;
          uint64_t v162 = v31;
          unint64_t v163 = v31 + 1;
          *(void *)long long __p = off_634000;
          *(void *)&__p[24] = __p;
          v171[0] = off_634048;
          char v172 = v171;
          v169[0] = off_634090;
          unint64_t v170 = v169;
          uint64_t v166 = 0;
          v167[0] = off_6340D8;
          unint64_t v168 = v167;
          sub_33A4D8((uint64_t)buf, 30, (uint64_t)&v162, 1, 1986881902, 1667853930, 1768776806, 0, (uint64_t)__p, (uint64_t)v171, (uint64_t)v169, (uint64_t)v167, (uint64_t)v165, 0);
          sub_81A58(v165);
          sub_81ADC(v167);
          sub_81B60(v169);
          sub_81BE4(v171);
          sub_81C68(__p);
          operator delete(v31);
          uint64_t v24 = *v22;
          if ((unint64_t)*v22 < *v23) {
            goto LABEL_417;
          }
          uint64_t v37 = 0x6FB586FB586FB587 * ((v24 - *a1) >> 3);
          if ((unint64_t)(v37 + 1) > 0x94F2094F2094F2) {
            sub_60548();
          }
          unint64_t v50 = 0xDF6B0DF6B0DF6B0ELL * ((*v23 - *a1) >> 3);
          if (v50 <= v37 + 1) {
            unint64_t v50 = v37 + 1;
          }
          if ((unint64_t)(0x6FB586FB586FB587 * ((*v23 - *a1) >> 3)) >= 0x4A7904A7904A79) {
            unint64_t v39 = 0x94F2094F2094F2;
          }
          else {
            unint64_t v39 = v50;
          }
          *(void *)&long long v153 = a1 + 2;
          if (v39) {
            goto LABEL_413;
          }
          uint64_t v68 = 0;
          goto LABEL_456;
        default:
          goto LABEL_458;
      }
    }
  }
LABEL_553:
  if (v21) {
    operator delete(v21);
  }
}

void sub_339984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  sub_81A58((void *)(v43 - 232));
  sub_81ADC((void *)(v43 - 200));
  sub_81B60((void *)(v43 - 168));
  sub_81BE4((void *)(v43 - 136));
  sub_81C68(&STACK[0x370]);
  __cxa_guard_abort(&qword_65B788);
  if (__p) {
    operator delete(__p);
  }
  sub_81CEC((void ***)&a43);
  _Unwind_Resume(a1);
}

void sub_33A444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (!a23) {
    JUMPOUT(0x33A430);
  }
  JUMPOUT(0x33A42CLL);
}

uint64_t sub_33A4D8(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, int a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v38[0] = 0;
  v38[1] = 0;
  uint64_t v37 = v38;
  int v35 = a7;
  sub_81364(v36, (uint64_t)&v35, 1);
  sub_813F8((uint64_t)v44, a9);
  sub_81490((uint64_t)v43, a10);
  sub_81528((uint64_t)v42, a11);
  sub_815C0((uint64_t)v41, a12);
  sub_81658((uint64_t)v40, a13);
  *(_OWORD *)long long __p = 0u;
  long long v33 = 0u;
  long long v27 = 0u;
  *(_OWORD *)uint64_t v26 = 0u;
  memset(v25, 0, sizeof(v25));
  uint64_t v28 = 1065353216;
  *(_OWORD *)__int16 v29 = 0u;
  long long v30 = 0u;
  uint64_t v31 = 1065353216;
  uint64_t v34 = 1065353216;
  sub_816F0(a1, 0, a2, a3, (uint64_t)&v37, a4, a5, a6, (uint64_t)v36, a8, (uint64_t)v44, (uint64_t)v43, (uint64_t)v42, (uint64_t)v41, (uint64_t)v40, (const void ***)v25, a14);
  sub_7E020((char *)v33);
  uint64_t v21 = __p[0];
  __p[0] = 0;
  if (v21) {
    operator delete(v21);
  }
  sub_7E020((char *)v30);
  char v22 = v29[0];
  v29[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  sub_7E020((char *)v27);
  char v23 = v26[0];
  v26[0] = 0;
  if (v23) {
    operator delete(v23);
  }
  unint64_t v39 = (void **)&v25[1] + 1;
  sub_4EDB8(&v39);
  unint64_t v39 = (void **)v25;
  sub_4EDB8(&v39);
  sub_81A58(v40);
  sub_81ADC(v41);
  sub_81B60(v42);
  sub_81BE4(v43);
  sub_81C68(v44);
  sub_45F50(v36);
  sub_463E0(v38[0]);
  return a1;
}

void sub_33A6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45)
{
  sub_7D768(&a19);
  sub_81A58((void *)(v45 - 248));
  sub_81ADC((void *)(v45 - 216));
  sub_81B60((void *)(v45 - 184));
  sub_81BE4((void *)(v45 - 152));
  sub_81C68((void *)(v45 - 120));
  sub_45F50(&a41);
  sub_463E0(a45);
  _Unwind_Resume(a1);
}

void sub_33A764()
{
}

void sub_33A76C()
{
}

void sub_33A774(uint64_t a1, int a2)
{
  if (a2 != 1 && (MGGetBoolAnswer() & 1) == 0)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 780;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = sub_32A48(20);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = " not";
        *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
        *(_DWORD *)buf = 136315650;
        if (!a2) {
          uint64_t v6 = "";
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 781;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v6;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating Remote Alternate VAD Specification that is%s mandatory", buf, 0x1Cu);
      }
    }
  }
  char v7 = operator new(4uLL);
  *char v7 = 1886614625;
  *(void *)&buf[16] = v7 + 1;
  *(void *)&buf[8] = v7 + 1;
  v15[0] = off_634000;
  v15[3] = v15;
  *(void *)buf = v7;
  v14[0] = off_634048;
  v14[3] = v14;
  v13[0] = off_634090;
  v13[3] = v13;
  v11[3] = 0;
  v12[0] = off_6340D8;
  v12[3] = v12;
  sub_33A4D8(a1, a2 != 0, (uint64_t)buf, a2, 1987279218, 1668505974, 1768776806, 0, (uint64_t)v15, (uint64_t)v14, (uint64_t)v13, (uint64_t)v12, (uint64_t)v11, 0);
  sub_81A58(v11);
  sub_81ADC(v12);
  sub_81B60(v13);
  sub_81BE4(v14);
  sub_81C68(v15);
  operator delete(v7);
}

void sub_33AA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  __cxa_free_exception(v27);
  _Unwind_Resume(a1);
}

void *sub_33AAB8(void *result)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B068, memory_order_acquire) & 1) == 0)
  {
    int v1 = result;
    int v2 = __cxa_guard_acquire(&qword_65B068);
    uint64_t result = v1;
    if (v2)
    {
      int v3 = 1886216809;
      sub_1A2E28(qword_65B050, &v3, 1uLL);
      __cxa_guard_release(&qword_65B068);
      uint64_t result = v1;
    }
  }
  void *result = off_6341F8;
  result[3] = result;
  return result;
}

void sub_33AB60(_Unwind_Exception *a1)
{
}

void sub_33AB78(uint64_t (***a1)())
{
  if (sub_20A008())
  {
    int v2 = off_634318;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65BBF8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65BBF8))
    {
      qword_65BBE0 = 0;
      qword_65BBE8 = 0;
      qword_65BBF0 = 0;
      int v3 = operator new(8uLL);
      qword_65BBE0 = (uint64_t)v3;
      void *v3 = 0x706D6269706D6274;
      qword_65BBE8 = (uint64_t)(v3 + 1);
      qword_65BBF0 = (uint64_t)(v3 + 1);
      __cxa_guard_release(&qword_65BBF8);
    }
    int v2 = off_634360;
  }
  *a1 = v2;
  a1[3] = (uint64_t (**)())a1;
}

void sub_33AC40(_Unwind_Exception *a1)
{
}

void *sub_33AC58(uint64_t a1, int a2)
{
  if ((MGGetBoolAnswer() & 1) == 0 && (sub_8B774() & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_32A48(13);
    char v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      __int16 v34 = 1024;
      int v35 = 662;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!a2)
  {
    v27[0] = off_6343F0;
    v27[3] = v27;
    v26[0] = off_634438;
    _DWORD v26[3] = v26;
    v25[0] = off_634480;
    _OWORD v25[3] = v25;
    v24[0] = off_6344C8;
    v24[3] = v24;
    if (sub_89FA8() == 2
      || sub_89FA8() == 3
      || sub_89FA8() == 4
      || sub_89FA8() == 5
      || sub_89FA8() == 195)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65C138, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_65C138))
      {
        v37[0] = 0x7068646D7073706BLL;
        sub_1A2E28(&__p, v37, 2uLL);
        *(void *)buf = off_634000;
        uint64_t v36 = buf;
        v32[0] = off_634048;
        v32[3] = v32;
        v31[0] = off_634090;
        _DWORD v31[3] = v31;
        uint64_t v29 = 0;
        v30[0] = off_6340D8;
        v30[3] = v30;
        sub_33A4D8((uint64_t)&unk_65BF80, 17, (uint64_t)&__p, 0, 1987277417, 1667855215, 1768776806, 0, (uint64_t)buf, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30, (uint64_t)v28, 0);
        sub_81A58(v28);
        sub_81ADC(v30);
        sub_81B60(v31);
        sub_81BE4(v32);
        sub_81C68(buf);
        if (__p)
        {
          __int16 v19 = __p;
          operator delete(__p);
        }
        uint64_t v16 = &unk_65BF80;
        __int16 v17 = &qword_65C138;
LABEL_38:
        __cxa_guard_release(v17);
        uint64_t v8 = v16;
        goto LABEL_18;
      }
      uint64_t v8 = &unk_65BF80;
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65C2F8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_65C2F8))
      {
        qmemcpy(v37, "oaspBphpwphp", 12);
        sub_1A2E28(&__p, v37, 3uLL);
        sub_813F8((uint64_t)buf, (uint64_t)v27);
        sub_81490((uint64_t)v32, (uint64_t)v26);
        sub_81528((uint64_t)v31, (uint64_t)v25);
        sub_815C0((uint64_t)v30, (uint64_t)v24);
        uint64_t v29 = 0;
        sub_33A4D8((uint64_t)&unk_65C140, 17, (uint64_t)&__p, 0, 1987277417, 1667855215, 1768776806, 1, (uint64_t)buf, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30, (uint64_t)v28, 0);
        sub_81A58(v28);
        sub_81ADC(v30);
        sub_81B60(v31);
        sub_81BE4(v32);
        sub_81C68(buf);
        if (__p)
        {
          __int16 v19 = __p;
          operator delete(__p);
        }
        uint64_t v16 = &unk_65C140;
        __int16 v17 = &qword_65C2F8;
        goto LABEL_38;
      }
      uint64_t v8 = &unk_65C140;
    }
LABEL_18:
    sub_127450(a1, (uint64_t)v8);
    uint64_t v4 = v27;
    uint64_t v5 = v26;
    uint64_t v6 = v25;
    char v7 = v24;
    goto LABEL_19;
  }
  v23[0] = off_6343F0;
  v23[3] = v23;
  v22[0] = off_634438;
  v22[3] = v22;
  v21[0] = off_634480;
  v21[3] = v21;
  v20[0] = off_6344C8;
  v20[3] = v20;
  if (sub_89FA8() == 2
    || sub_89FA8() == 3
    || sub_89FA8() == 4
    || sub_89FA8() == 5
    || sub_89FA8() == 195)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      __int16 v34 = 1024;
      int v35 = 565;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    unsigned __int8 v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Precondition failure.");
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65C4B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65C4B8))
  {
    qmemcpy(v37, "oaspBphpwphp", 12);
    sub_1A2E28(&__p, v37, 3uLL);
    sub_813F8((uint64_t)buf, (uint64_t)v23);
    sub_81490((uint64_t)v32, (uint64_t)v22);
    sub_81528((uint64_t)v31, (uint64_t)v21);
    sub_815C0((uint64_t)v30, (uint64_t)v20);
    uint64_t v29 = 0;
    sub_33A4D8((uint64_t)&unk_65C300, 18, (uint64_t)&__p, 1, 1987277417, 1667855215, 1768776806, 1, (uint64_t)buf, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30, (uint64_t)v28, 0);
    sub_81A58(v28);
    sub_81ADC(v30);
    sub_81B60(v31);
    sub_81BE4(v32);
    sub_81C68(buf);
    if (__p)
    {
      __int16 v19 = __p;
      operator delete(__p);
    }
    __cxa_guard_release(&qword_65C4B8);
  }
  sub_127450(a1, (uint64_t)&unk_65C300);
  uint64_t v4 = v23;
  uint64_t v5 = v22;
  uint64_t v6 = v21;
  char v7 = v20;
LABEL_19:
  sub_81ADC(v7);
  sub_81B60(v6);
  sub_81BE4(v5);
  return sub_81C68(v4);
}

void sub_33B3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  sub_81A58((void *)(v43 - 224));
  sub_81ADC((void *)(v43 - 192));
  sub_81B60((void *)(v43 - 160));
  sub_81BE4((void *)(v43 - 128));
  sub_81C68((void *)(v43 - 96));
  if (__p) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_65C2F8);
  sub_81ADC(&a35);
  sub_81B60(&a39);
  sub_81BE4(&a43);
  sub_81C68((void *)(v43 - 256));
  _Unwind_Resume(a1);
}

uint64_t sub_33B574(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if ((sub_23AC0() & 1) != 0 || !sub_241A50(1886613611, *a2, a2[1])) {
    return 1;
  }
  uint64_t result = sub_209D00();
  if (result) {
    return *(unsigned char *)(a3 + 12) && *(_DWORD *)(a3 + 8) == 1836084597;
  }
  return result;
}

void sub_33B5E8(uint64_t a1, void *a2)
{
  *a2 = off_6345E8;
}

void *sub_33B608()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6345E8;
  return result;
}

void sub_33B640()
{
}

BOOL sub_33B658(uint64_t a1, uint64_t **a2, _DWORD *a3)
{
  int v5 = sub_23AC0();
  if (*a3 != 1668509810 && v5 == 0) {
    return 0;
  }
  char v7 = *a2;
  uint64_t v8 = a2[1];
  if (*a2 != v8)
  {
    uint64_t v9 = *a2;
    while (*(_DWORD *)(*v9 + 4) || *(_DWORD *)*v9 != 1987277417)
    {
      if (++v9 == v8) {
        goto LABEL_10;
      }
    }
    return 0;
  }
LABEL_10:

  return sub_241A50(1885565807, v7, v8);
}

void sub_33B704(uint64_t a1, void *a2)
{
  *a2 = off_6345A0;
}

void *sub_33B724()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6345A0;
  return result;
}

void sub_33B75C()
{
}

uint64_t sub_33B774(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t result = 0;
  int v5 = *(_DWORD *)(a3 + 4);
  if (v5 <= 1987077986)
  {
    BOOL v6 = v5 == 1768057203;
    int v7 = 1919776355;
  }
  else
  {
    BOOL v6 = v5 == 1987077987 || v5 == 1987081833;
    int v7 = 1987081839;
  }
  if (!v6 && v5 != v7)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    if (*a2 == v10)
    {
LABEL_18:
      if (v5 == 1987208039 && sub_241A50(1885892674, v9, v10))
      {
        if (sub_241AEC(1701869160, *a2, a2[1]))
        {
          return sub_1663C8() == 2;
        }
        else
        {
          unsigned __int8 v12 = *a2;
          uint64_t v13 = a2[1];
          return sub_241AEC(1701868400, v12, v13);
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      uint64_t v11 = *a2;
      while (*(_DWORD *)(*v11 + 4) || *(_DWORD *)*v11 != 1987277417)
      {
        if (++v11 == v10) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  return result;
}

void sub_33B8B0(uint64_t a1, void *a2)
{
  *a2 = off_634558;
}

void *sub_33B8D0()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_634558;
  return result;
}

void sub_33B908()
{
}

BOOL sub_33B920(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  return v2 == 1987208039 || v2 == 1987211117;
}

void sub_33B948(uint64_t a1, void *a2)
{
  *a2 = off_634510;
}

void *sub_33B968()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_634510;
  return result;
}

void sub_33B9A0()
{
}

uint64_t sub_33B9B8(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  if (*(_DWORD *)(a3 + 4) == 1986098036 || sub_241A50(1885892706, *a2, a2[1])) {
    return 0;
  }
  else {
    return sub_241D1C(*a2, a2[1]) ^ 1;
  }
}

void sub_33BA20(uint64_t a1, void *a2)
{
  *a2 = off_6344C8;
}

void *sub_33BA40()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6344C8;
  return result;
}

void sub_33BA78()
{
}

BOOL sub_33BA90(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 4);
  return v2 == 1987211117 || v2 == 1987208039;
}

void sub_33BAB8(uint64_t a1, void *a2)
{
  *a2 = off_634480;
}

void *sub_33BAD8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_634480;
  return result;
}

void sub_33BB10()
{
}

uint64_t sub_33BB28(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 != 1986357346 && v2 != 1651794544) {
    return 1;
  }
  LODWORD(result) = sub_F09C4(*a2);
  if (v2 == 1684108899) {
    return 1;
  }
  else {
    return result;
  }
}

void sub_33BB8C(uint64_t a1, void *a2)
{
  *a2 = off_634438;
}

void *sub_33BBAC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_634438;
  return result;
}

void sub_33BBE4()
{
}

BOOL sub_33BBFC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  int v4 = a2[36];
  if (v4 == 1885433888) {
    return 1;
  }
  BOOL v9 = sub_242430((uint64_t)a2, *a4, a4[1]);
  if (!(*(unsigned int (**)(_DWORD *))(*(void *)a2 + 416))(a2)
    || v4 == 1885892674 && (sub_2422F8((uint64_t)a2) & 1) == 0 && v9)
  {
    return 0;
  }
  int v11 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == 1651795060 || v11 == 1751414371) {
    goto LABEL_21;
  }
  int v12 = sub_F09C4(*(_DWORD *)a3);
  if (v11 == 1684108899 || v12)
  {
    int v11 = *(_DWORD *)a3;
LABEL_21:
    uint64_t v17 = *(unsigned __int8 *)(a3 + 31);
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a3 + 16);
    }
    if (v17) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v11 == 1986357346;
    }
    if (v18) {
      return a2[36] == 1886609775;
    }
    (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a2 + 440))(__p, a2);
    uint64_t v19 = *(unsigned __int8 *)(a3 + 31);
    if ((v19 & 0x80u) == 0) {
      unint64_t v20 = (void *)*(unsigned __int8 *)(a3 + 31);
    }
    else {
      unint64_t v20 = *(void **)(a3 + 16);
    }
    unint64_t v21 = v38;
    int v22 = (char)v38;
    if ((v38 & 0x80u) != 0) {
      unint64_t v21 = (unint64_t)__p[1];
    }
    if (v20 == (void *)v21)
    {
      char v23 = (const void **)(a3 + 8);
      if ((v38 & 0x80u) == 0) {
        uint64_t v24 = __p;
      }
      else {
        uint64_t v24 = (void **)__p[0];
      }
      if ((v19 & 0x80) != 0)
      {
        BOOL v5 = memcmp(*v23, v24, *(void *)(a3 + 16)) == 0;
      }
      else if (*(unsigned char *)(a3 + 31))
      {
        uint64_t v25 = v19 - 1;
        do
        {
          int v27 = *(unsigned __int8 *)v23;
          char v23 = (const void **)((char *)v23 + 1);
          int v26 = v27;
          int v29 = *(unsigned __int8 *)v24;
          uint64_t v24 = (void **)((char *)v24 + 1);
          int v28 = v29;
          BOOL v31 = v25-- != 0;
          BOOL v5 = v26 == v28;
        }
        while (v26 == v28 && v31);
      }
      else
      {
        BOOL v5 = 1;
      }
    }
    else
    {
      BOOL v5 = 0;
    }
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    return v5;
  }
  if (v9) {
    return 1;
  }
  long long v33 = 0;
  uint64_t v34 = 0;
  unint64_t v32 = &v33;
  uint64_t v13 = *a4;
  uint64_t v14 = a4[1];
  if (*a4 == v14)
  {
LABEL_18:
    uint64_t v16 = 0;
    BOOL v5 = 1;
  }
  else
  {
    while (1)
    {
      uint64_t v15 = *(void *)v13;
      if (!*(_DWORD *)(*(void *)v13 + 4) && *(_DWORD *)v15 == 1986291046) {
        break;
      }
      v13 += 8;
      if (v13 == v14) {
        goto LABEL_18;
      }
    }
    __p[0] = off_628530;
    unint64_t v39 = __p;
    sub_241504((uint64_t)&v35, (void *)(v15 + 16), (uint64_t)__p);
    sub_6AFD4(__p);
    sub_13150C((uint64_t *)&v32, v35, &v36);
    sub_10E118(v36);
    uint64_t v16 = v33;
    BOOL v5 = v34 == 0;
  }
  sub_10E118(v16);
  return v5;
}

void sub_33BF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_33BF5C(uint64_t a1, void *a2)
{
  *a2 = off_6343F0;
}

void *sub_33BF7C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6343F0;
  return result;
}

void sub_33BFB4()
{
}

uint64_t sub_33BFCC(uint64_t a1, uint64_t **a2, uint64_t a3, int *a4)
{
  int v4 = *(_DWORD *)(a3 + 4);
  if (v4 != 1986098036 && v4 != 1987208039)
  {
    int v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        uint64_t v15 = "AlternateVAD.cpp";
        __int16 v16 = 1024;
        int v17 = 520;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (sub_1663C8() != 1 && sub_241A50(1885892674, *a2, a2[1]) && sub_241AEC(1701869160, *a2, a2[1]))
  {
    int v8 = *a4;
    uint64_t result = 1;
    if (*a4 > 1751414370)
    {
      if (v8 != 1986357346)
      {
        int v10 = 1751414371;
LABEL_14:
        if (v8 != v10) {
          return result;
        }
      }
    }
    else if (v8 != 1651794544)
    {
      int v10 = 1651795060;
      goto LABEL_14;
    }
  }
  if (!sub_241A50(1886614639, *a2, a2[1]) || (uint64_t result = 1, *a4 != 1752132965) && *a4 != 1987012963)
  {
    LODWORD(result) = sub_241D1C(*a2, a2[1]);
    if (*a4 == 1651794544) {
      return 0;
    }
    else {
      return result;
    }
  }
  return result;
}

void sub_33C1CC(_Unwind_Exception *exception_object)
{
}

void sub_33C1F0(uint64_t a1, void *a2)
{
  *a2 = off_6343A8;
}

void *sub_33C210()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6343A8;
  return result;
}

void sub_33C248()
{
}

BOOL sub_33C260(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  int v3 = (int *)qword_65BBE0;
  if (qword_65BBE0 == qword_65BBE8) {
    return 0;
  }
  while (1)
  {
    if (*(void *)(a2 + 8) != a2)
    {
      int v4 = *v3;
      uint64_t v5 = *(void *)(a2 + 8);
      do
      {
        BOOL v6 = *(_DWORD *)(v5 + 16) == v4 || *(_DWORD *)(v5 + 20) == v4;
        char v7 = v6;
        if (v6) {
          break;
        }
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 != a2);
      if (v7) {
        break;
      }
    }
    if (++v3 == (int *)qword_65BBE8) {
      return 0;
    }
  }
  return v3 != (int *)qword_65BBE8 && sub_241A50(*v3, *a3, a3[1]);
}

void sub_33C2DC(uint64_t a1, void *a2)
{
  *a2 = off_634360;
}

void *sub_33C2FC()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_634360;
  return result;
}

void sub_33C334()
{
}

BOOL sub_33C34C(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 == a2) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  do
  {
    BOOL v5 = *(_DWORD *)(v4 + 16) == 1886216820 || *(_DWORD *)(v4 + 20) == 1886216820;
    int v6 = v5;
    if (v5) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 8);
  }
  while (v4 != a2);
  if (v6) {
    return sub_241A50(1886216820, *a3, a3[1]);
  }
  if (v3 == a2) {
    return 0;
  }
  do
  {
    BOOL v8 = *(_DWORD *)(v3 + 16) == 1886216809 || *(_DWORD *)(v3 + 20) == 1886216809;
    BOOL result = v8;
    if (v8) {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  while (v3 != a2);
  return result;
}

void sub_33C3D8(uint64_t a1, void *a2)
{
  *a2 = off_634318;
}

void *sub_33C3F8()
{
  BOOL result = operator new(0x10uLL);
  void *result = off_634318;
  return result;
}

void sub_33C430()
{
}

uint64_t sub_33C448(uint64_t a1, uint64_t **a2, _DWORD *a3)
{
  BOOL v4 = *a3 == 1668576377 || *a3 == 1668703084;
  if (v4
    || ((result = 0, int v6 = a3[1], v6 <= 1987077986)
      ? (BOOL v7 = v6 == 1768057203, v8 = 1919776355)
      : (v6 != 1987077987 ? (BOOL v7 = v6 == 1987081839) : (BOOL v7 = 1), v8 = 1987081833),
        !v7 ? (BOOL v9 = v6 == v8) : (BOOL v9 = 1),
        v9))
  {
    if (sub_241A50(1886216820, *a2, a2[1]) && sub_2417DC(*a2, a2[1], 1) && (sub_242254(*a2, a2[1]) & 1) != 0)
    {
      return 1;
    }
    else
    {
      uint64_t result = sub_241A50(1886613611, *a2, a2[1]);
      if (result)
      {
        uint64_t result = sub_241A50(1886216809, *a2, a2[1]);
        if (result)
        {
          return MGGetBoolAnswer();
        }
      }
    }
  }
  return result;
}

void sub_33C570(uint64_t a1, void *a2)
{
  *a2 = off_6342D0;
}

void *sub_33C590()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6342D0;
  return result;
}

void sub_33C5C8()
{
}

uint64_t sub_33C5E0(uint64_t a1, uint64_t **a2, _DWORD *a3)
{
  BOOL v4 = *a3 == 1668576377 || *a3 == 1668703084;
  if (v4
    || ((int v5 = a3[1], result = 1, v5 <= 1987077986)
      ? (BOOL v7 = v5 == 1768057203, v8 = 1919776355)
      : (v5 != 1987077987 ? (BOOL v7 = v5 == 1987081839) : (BOOL v7 = 1), v8 = 1987081833),
        !v7 ? (BOOL v9 = v5 == v8) : (BOOL v9 = 1),
        v9))
  {
    if (sub_241A50(1886216820, *a2, a2[1]))
    {
      uint64_t result = sub_2417DC(*a2, a2[1], 1);
      if (result)
      {
        int v10 = *a2;
        int v11 = a2[1];
        return sub_242254(v10, v11);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

void sub_33C6C8(uint64_t a1, void *a2)
{
  *a2 = off_634288;
}

void *sub_33C6E8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_634288;
  return result;
}

void sub_33C720()
{
}

uint64_t sub_33C738(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, int *a5)
{
  if (*a5 == 1987012963)
  {
LABEL_2:
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B988, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65B988))
    {
      qword_65B970 = 0;
      qword_65B978 = 0;
      qword_65B980 = 0;
      uint64_t v34 = operator new(8uLL);
      qword_65B970 = (uint64_t)v34;
      *uint64_t v34 = 0x70757369706D6269;
      qword_65B978 = (uint64_t)(v34 + 1);
      qword_65B980 = (uint64_t)(v34 + 1);
      __cxa_guard_release(&qword_65B988);
    }
    int v6 = (int *)qword_65B970;
    if (qword_65B970 != qword_65B978)
    {
      do
      {
        if (*(void *)(a2 + 8) == a2)
        {
          uint64_t result = 0;
        }
        else
        {
          int v7 = *v6;
          uint64_t v8 = *(void *)(a2 + 8);
          do
          {
            BOOL v9 = *(_DWORD *)(v8 + 16) == v7 || *(_DWORD *)(v8 + 20) == v7;
            uint64_t result = v9;
            if (v9) {
              break;
            }
            uint64_t v8 = *(void *)(v8 + 8);
          }
          while (v8 != a2);
        }
        if (result) {
          break;
        }
        ++v6;
      }
      while (v6 != (int *)qword_65B978);
      return result;
    }
    return 0;
  }
  uint64_t v14 = sub_10FBF0();
  long long __p = 0;
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  strcpy(v41, "cwdv");
  v41[8] = 0;
  int v42 = 3;
  v44[0] = 0;
  v44[1] = 0;
  uint64_t v43 = v44;
  int v45 = 44739242;
  CFTypeRef cf = 0;
  v48[0] = off_6285C0;
  v48[3] = v48;
  sub_10EA24(v47, v14, &__p, (uint64_t)v48);
  sub_6AFD4(v48);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v44[0]);
  if (__p)
  {
    unint64_t v39 = __p;
    operator delete(__p);
  }
  for (unsigned int i = (uint64_t *)v47[1]; ; unsigned int i = (uint64_t *)i[1])
  {
    if (i == v47)
    {
      sub_8108(v47);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B9E8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_65B9E8))
      {
        qword_65B9D0 = 0;
        qword_65B9D8 = 0;
        qword_65B9E0 = 0;
        int v35 = operator new(8uLL);
        qword_65B9D0 = (uint64_t)v35;
        *int v35 = 0x7068706270687042;
        qword_65B9D8 = (uint64_t)(v35 + 1);
        qword_65B9E0 = (uint64_t)(v35 + 1);
        __cxa_guard_release(&qword_65B9E8);
      }
      int v22 = (int *)qword_65B9D0;
      uint64_t v21 = qword_65B9D8;
      while (v22 != (int *)v21)
      {
        if (sub_241A50(*v22, *a3, a3[1]))
        {
          int v23 = *a5;
          BOOL v25 = *a5 == 1752132965 || v23 == 1969840752 || v23 == 1886352244;
          if (v25 && (sub_241AEC(1701869160, *a3, a3[1]) || !sub_2417DC(*a3, a3[1], 0) && !sub_241414(*a3, a3[1]))) {
            goto LABEL_2;
          }
          goto LABEL_53;
        }
        ++v22;
      }
      goto LABEL_53;
    }
    __int16 v16 = (std::__shared_weak_count *)i[3];
    if (v16)
    {
      int v17 = std::__shared_weak_count::lock(v16);
      if (v17) {
        break;
      }
    }
LABEL_32:
    ;
  }
  BOOL v18 = v17;
  uint64_t v19 = i[2];
  if (!v19 || !(*(unsigned int (**)(uint64_t))(*(void *)v19 + 416))(i[2]))
  {
    sub_4636C(v18);
    goto LABEL_32;
  }
  char v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 432))(v19);
  sub_4636C(v18);
  if ((v20 & 1) == 0) {
    goto LABEL_32;
  }
  sub_8108(v47);
  if (*(_DWORD *)(a4 + 4) != 1986098036 || *a5 == 1751414371 || *a5 == 1651795060) {
    goto LABEL_2;
  }
LABEL_53:
  if (sub_241A50(1885892706, *a3, a3[1]))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B9A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_65B9A8))
    {
      qword_65B990 = 0;
      qword_65B998 = 0;
      qword_65B9A0 = 0;
      uint64_t v36 = operator new(0x10uLL);
      qword_65B990 = (uint64_t)v36;
      *uint64_t v36 = xmmword_4E7B60;
      qword_65B998 = (uint64_t)(v36 + 1);
      qword_65B9A0 = (uint64_t)(v36 + 1);
      __cxa_guard_release(&qword_65B9A8);
    }
    int v26 = (int *)qword_65B990;
    if (qword_65B990 != qword_65B998)
    {
      do
      {
        if (*(void *)(a2 + 8) == a2)
        {
          uint64_t result = 0;
        }
        else
        {
          int v27 = *v26;
          uint64_t v28 = *(void *)(a2 + 8);
          do
          {
            BOOL v29 = *(_DWORD *)(v28 + 16) == v27 || *(_DWORD *)(v28 + 20) == v27;
            uint64_t result = v29;
            if (v29) {
              break;
            }
            uint64_t v28 = *(void *)(v28 + 8);
          }
          while (v28 != a2);
        }
        if (result) {
          break;
        }
        ++v26;
      }
      while (v26 != (int *)qword_65B998);
      return result;
    }
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65B9C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65B9C8))
  {
    qword_65B9B0 = 0;
    qword_65B9B8 = 0;
    qword_65B9C0 = 0;
    uint64_t v37 = operator new(0xCuLL);
    qword_65B9B8 = (uint64_t)v37 + 12;
    qword_65B9C0 = (uint64_t)v37 + 12;
    qmemcpy(v37, "iwmpibmpisup", 12);
    qword_65B9B0 = (uint64_t)v37;
    __cxa_guard_release(&qword_65B9C8);
  }
  long long v30 = (int *)qword_65B9B0;
  if (qword_65B9B0 == qword_65B9B8) {
    return 0;
  }
  do
  {
    if (*(void *)(a2 + 8) == a2)
    {
      uint64_t result = 0;
    }
    else
    {
      int v31 = *v30;
      uint64_t v32 = *(void *)(a2 + 8);
      do
      {
        BOOL v33 = *(_DWORD *)(v32 + 16) == v31 || *(_DWORD *)(v32 + 20) == v31;
        uint64_t result = v33;
        if (v33) {
          break;
        }
        uint64_t v32 = *(void *)(v32 + 8);
      }
      while (v32 != a2);
    }
    if (result) {
      break;
    }
    ++v30;
  }
  while (v30 != (int *)qword_65B9B8);
  return result;
}

void sub_33CCAC(_Unwind_Exception *a1)
{
}

void sub_33CD3C(uint64_t a1, void *a2)
{
  *a2 = off_634240;
}

void *sub_33CD5C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_634240;
  return result;
}

void sub_33CD94()
{
}

uint64_t sub_33CDAC(uint64_t a1, uint64_t a2, uint64_t **a3, _DWORD *a4)
{
  if (_os_feature_enabled_impl()) {
    BOOL v7 = *a4 == 1668443751;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7 && sub_241A50(1885892706, *a3, a3[1]) && sub_2417DC(*a3, a3[1], 1) && sub_242254(*a3, a3[1]))
  {
    uint64_t v8 = *(void *)(a2 + 8);
    if (v8 != a2)
    {
      do
      {
        BOOL v9 = *(_DWORD *)(v8 + 16) == 1886216820 || *(_DWORD *)(v8 + 20) == 1886216820;
        uint64_t result = v9;
        if (v9) {
          break;
        }
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8 != a2);
      return result;
    }
    return 0;
  }
  int v11 = (int *)qword_65B050[0];
  if (qword_65B050[0] == unk_65B058) {
    return 0;
  }
  do
  {
    if (*(void *)(a2 + 8) == a2)
    {
      uint64_t result = 0;
    }
    else
    {
      int v12 = *v11;
      uint64_t v13 = *(void *)(a2 + 8);
      do
      {
        BOOL v14 = *(_DWORD *)(v13 + 16) == v12 || *(_DWORD *)(v13 + 20) == v12;
        uint64_t result = v14;
        if (v14) {
          break;
        }
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 != a2);
    }
    if (result) {
      break;
    }
    ++v11;
  }
  while (v11 != (int *)unk_65B058);
  return result;
}

void sub_33CEE0(uint64_t a1, void *a2)
{
  *a2 = off_6341F8;
}

void *sub_33CF00()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6341F8;
  return result;
}

void sub_33CF38()
{
}

uint64_t sub_33CF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    int v7 = *(_DWORD *)(a2 + 144);
    if (v7 == 1885433888)
    {
      return 1;
    }
    else if (v7 == 1885892674)
    {
      uint64_t result = sub_241A50(1885892674, *a4, a4[1]);
      if (result)
      {
        return sub_2422F8(a2);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_33CFF8(uint64_t a1, void *a2)
{
  *a2 = off_6341B0;
}

void *sub_33D018()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_6341B0;
  return result;
}

void sub_33D050()
{
}

BOOL sub_33D068(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = sub_298DA4();
  int v4 = (**(uint64_t (***)(uint64_t))v3)(v3);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 224))(v3);
  if (v4 != 1 || v5 == 0) {
    return 0;
  }
  uint64_t v8 = *a2;
  BOOL v9 = a2[1];

  return sub_241A50(1886287212, v8, v9);
}

void sub_33D12C(uint64_t a1, void *a2)
{
  *a2 = off_634168;
}

void *sub_33D14C()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_634168;
  return result;
}

void sub_33D184()
{
}

uint64_t sub_33D19C(uint64_t a1, uint64_t **a2, _DWORD *a3)
{
  uint64_t v3 = *a2;
  int v4 = a2[1];
  if (*a2 == v4)
  {
LABEL_5:
    int v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "RouteUtilities.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 990;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No Default VAD found in list of concrete routes\"", buf, 0x12u);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No Default VAD found in list of concrete routes");
  }
  while (1)
  {
    uint64_t v5 = *v3;
    if (!*(_DWORD *)(*v3 + 4) && *(_DWORD *)v5 == 1986291046) {
      break;
    }
    if (++v3 == v4) {
      goto LABEL_5;
    }
  }
  BOOL v9 = (void *)(v5 + 16);
  int v10 = *(void **)(v5 + 24);
  memset(__p, 0, 24);
  long long v11 = 0uLL;
  if (v10 != (void *)(v5 + 16))
  {
    while (1)
    {
      memset(buf, 0, 24);
      int v12 = __p[0];
      uint64_t v13 = __p[1];
      *(void *)&long long v56 = buf;
      BYTE8(v56) = 0;
      int64_t v14 = (char *)__p[1] - (char *)__p[0];
      if (__p[1] != __p[0])
      {
        if (v14 < 0) {
          sub_60548();
        }
        uint64_t v15 = sub_10724(v14 >> 4);
        *(void *)buf = v15;
        *(void *)&buf[16] = &v15[2 * v16];
        do
        {
          void *v15 = *v12;
          uint64_t v17 = v12[1];
          v15[1] = v17;
          if (v17) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
          }
          v15 += 2;
          v12 += 2;
        }
        while (v12 != v13);
        *(void *)&buf[8] = v15;
      }
      BOOL v18 = (long long *)(v10 + 4);
      sub_43F38((uint64_t *)&v56, v10 + 4, "", 996);
      int v19 = *(_DWORD *)(v56 + 144);
      if (*((void *)&v56 + 1)) {
        sub_4636C(*((std::__shared_weak_count **)&v56 + 1));
      }
      char v20 = *(void **)&buf[16];
      if (v19 == 1885433888) {
        goto LABEL_44;
      }
      uint64_t v21 = *(void *)&buf[8];
      if (*(void *)&buf[8] < *(void *)&buf[16])
      {
        **(void **)&buf[8] = v10[4];
        uint64_t v22 = v10[5];
        *(void *)(v21 + 8) = v22;
        if (v22) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
        }
        int v23 = (char *)(v21 + 16);
        goto LABEL_43;
      }
      uint64_t v24 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v26 = *(void *)&buf[16] - *(void *)buf;
      if ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 3 > v25) {
        unint64_t v25 = v26 >> 3;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      uint64_t v28 = (char *)sub_10724(v27);
      long long v30 = &v28[16 * v24];
      long long v31 = *v18;
      *(_OWORD *)long long v30 = *v18;
      if (*((void *)&v31 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 16), 1uLL, memory_order_relaxed);
      }
      int v23 = v30 + 16;
      uint64_t v32 = *(void **)buf;
      BOOL v33 = *(void **)&buf[8];
      if (*(void *)&buf[8] == *(void *)buf)
      {
        *(void *)buf = &v28[16 * v24];
        *(void *)&buf[8] = v30 + 16;
        *(void *)&buf[16] = &v28[16 * v29];
        if (!v33) {
          goto LABEL_43;
        }
      }
      else
      {
        do
        {
          uint64_t v34 = *(v33 - 2);
          v33 -= 2;
          *((void *)v30 - 2) = v34;
          v30 -= 16;
          uint64_t v35 = v33[1];
          *((void *)v30 + 1) = v35;
          if (v35) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 16), 1uLL, memory_order_relaxed);
          }
        }
        while (v33 != v32);
        uint64_t v36 = *(void **)buf;
        BOOL v33 = *(void **)&buf[8];
        *(void *)buf = v30;
        *(void *)&buf[8] = v23;
        *(void *)&buf[16] = &v28[16 * v29];
        if (v33 != v36)
        {
          do
          {
            uint64_t v37 = (std::__shared_weak_count *)*(v33 - 1);
            if (v37) {
              std::__shared_weak_count::__release_weak(v37);
            }
            v33 -= 2;
          }
          while (v33 != v36);
          BOOL v33 = v36;
        }
        if (!v33) {
          goto LABEL_43;
        }
      }
      operator delete(v33);
LABEL_43:
      *(void *)&buf[8] = v23;
      char v20 = *(void **)&buf[16];
LABEL_44:
      long long v56 = *(_OWORD *)buf;
      unint64_t v57 = v20;
      unint64_t v58 = buf;
      memset(buf, 0, 24);
      sub_241C7C((void ***)&v58);
      if (__p[0])
      {
        unsigned __int8 v38 = (char *)__p[1];
        unint64_t v39 = __p[0];
        if (__p[1] != __p[0])
        {
          do
          {
            uint64_t v40 = (std::__shared_weak_count *)*((void *)v38 - 1);
            if (v40) {
              std::__shared_weak_count::__release_weak(v40);
            }
            v38 -= 16;
          }
          while (v38 != __p[0]);
          unint64_t v39 = __p[0];
        }
        __p[1] = __p[0];
        operator delete(v39);
      }
      *(_OWORD *)long long __p = v56;
      __p[2] = v57;
      unint64_t v57 = 0;
      long long v56 = 0uLL;
      *(void *)buf = &v56;
      sub_241C7C((void ***)buf);
      int v10 = (void *)v10[1];
      if (v10 == v9)
      {
        long long v11 = *(_OWORD *)__p;
        unint64_t v41 = __p[2];
        goto LABEL_56;
      }
    }
  }
  unint64_t v41 = 0;
LABEL_56:
  long long v53 = v11;
  unint64_t v54 = v41;
  memset(__p, 0, 24);
  *(void *)buf = __p;
  sub_241C7C((void ***)buf);
  int v42 = (void *)v53;
  if ((void)v53 != *((void *)&v53 + 1))
  {
    while (1)
    {
      *(void *)&long long v56 = *v42;
      uint64_t v43 = (std::__shared_weak_count *)v42[1];
      *((void *)&v56 + 1) = v43;
      if (v43) {
        atomic_fetch_add_explicit(&v43->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_43F38((uint64_t *)buf, (uint64_t *)&v56, "", 808);
      int v44 = *(_DWORD *)(*(void *)buf + 144);
      switch(v44)
      {
        case 1885892674:
          uint64_t v47 = (*(uint64_t (**)(void))(**(void **)buf + 112))(*(void *)buf);
          BOOL v48 = (v47 & 0xFF00000000) != 0 && v47 == 1701868400;
          if (!v48 || sub_209D00())
          {
            BOOL v45 = *a3 == 1667657057;
LABEL_78:
            uint64_t v46 = v45;
            goto LABEL_84;
          }
          break;
        case 1886152047:
          if (sub_209D00())
          {
            uint64_t v46 = 0;
          }
          else
          {
            uint64_t v49 = sub_298DA4();
            uint64_t v46 = (*(unsigned int (**)(uint64_t))(*(void *)v49 + 96))(v49) != 0;
          }
          goto LABEL_84;
        case 1886613611:
          if ((!_os_feature_enabled_impl() || (sub_23AC0() & 1) == 0)
            && sub_89FA8() != 2
            && sub_89FA8() != 3
            && sub_89FA8() != 4
            && sub_89FA8() != 5)
          {
            BOOL v45 = sub_89FA8() == 195;
            goto LABEL_78;
          }
          break;
        default:
          uint64_t v46 = sub_209D00() ^ 1;
          goto LABEL_84;
      }
      uint64_t v46 = 1;
LABEL_84:
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v43) {
        std::__shared_weak_count::__release_weak(v43);
      }
      v42 += 2;
      if (v42 == *((void **)&v53 + 1)) {
        char v50 = 0;
      }
      else {
        char v50 = v46;
      }
      if ((v50 & 1) == 0) {
        goto LABEL_94;
      }
    }
  }
  uint64_t v46 = 1;
LABEL_94:
  *(void *)buf = &v53;
  sub_241C7C((void ***)buf);
  return v46;
}

void sub_33D77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_4636C(a24);
  }
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  a15 = &a11;
  sub_241C7C((void ***)&a15);
  _Unwind_Resume(a1);
}

void sub_33D818(uint64_t a1, void *a2)
{
  *a2 = off_634120;
}

void *sub_33D838()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_634120;
  return result;
}

void sub_33D870()
{
}

uint64_t sub_33D888()
{
  return 1;
}

void sub_33D898(uint64_t a1, void *a2)
{
  *a2 = off_634090;
}

void *sub_33D8B8()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_634090;
  return result;
}

void sub_33D8F0()
{
}

void *sub_33D908(unsigned int **a1, uint64_t *a2)
{
  if (qword_64BCF0 != -1) {
    dispatch_once(&qword_64BCF0, &stru_6236F8);
  }
  uint64_t v4 = *a2;
  if (byte_64BCE8)
  {
    memset(v69, 0, sizeof(v69));
    sub_FC64C(v69, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2);
    unint64_t v5 = a2[4];
    if (v5)
    {
      if (v5 >> 62) {
        sub_60548();
      }
      int v6 = (const void *)a2[3];
      int v7 = (char *)sub_46BF4(a2[4]);
      memmove(v7, v6, 4 * v5);
      uint64_t v8 = &v7[4 * v5];
    }
    else
    {
      uint64_t v8 = 0;
      int v7 = 0;
    }
    sub_33E2C8(v70, (uint64_t)v69, v7, v8);
    unint64_t v13 = a2[2];
    if (v13)
    {
      if (v13 >> 62) {
        sub_60548();
      }
      int64_t v14 = (const void *)a2[1];
      uint64_t v15 = (char *)sub_46BF4(a2[2]);
      memmove(v15, v14, 4 * v13);
      uint64_t v16 = (unsigned int *)&v15[4 * v13];
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    sub_33E50C(__p, (uint64_t)v70, (unsigned int *)v15, v16);
    uint64_t v17 = operator new(4uLL);
    *uint64_t v17 = 2;
    sub_33E2C8(&v72, (uint64_t)__p, v17, v17 + 1);
    operator delete(v17);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v15) {
      operator delete(v15);
    }
    if (v70[0])
    {
      v70[1] = v70[0];
      operator delete(v70[0]);
    }
    if (v7) {
      operator delete(v7);
    }
    BOOL v18 = (void *)v69[0];
    if (v69[0])
    {
      int v19 = (void **)v69;
LABEL_38:
      v19[1] = v18;
      operator delete(v18);
    }
  }
  else
  {
    memset(v67, 0, sizeof(v67));
    sub_FC64C(v67, *(const void **)v4, *(void *)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 2);
    unint64_t v9 = a2[4];
    if (v9)
    {
      if (v9 >> 62) {
        sub_60548();
      }
      int v10 = (const void *)a2[3];
      long long v11 = (char *)sub_46BF4(a2[4]);
      memmove(v11, v10, 4 * v9);
      int v12 = &v11[4 * v9];
    }
    else
    {
      long long v11 = 0;
      int v12 = 0;
    }
    sub_33E2C8(v68, (uint64_t)v67, v11, v12);
    unint64_t v20 = a2[2];
    if (v20)
    {
      if (v20 >> 62) {
        sub_60548();
      }
      uint64_t v21 = (const void *)a2[1];
      uint64_t v22 = (char *)sub_46BF4(a2[2]);
      memmove(v22, v21, 4 * v20);
      int v23 = (unsigned int *)&v22[4 * v20];
    }
    else
    {
      uint64_t v22 = 0;
      int v23 = 0;
    }
    sub_33E50C(&v72, (uint64_t)v68, (unsigned int *)v22, v23);
    if (v22) {
      operator delete(v22);
    }
    if (v68[0])
    {
      v68[1] = v68[0];
      operator delete(v68[0]);
    }
    if (v11) {
      operator delete(v11);
    }
    BOOL v18 = v67[0];
    if (v67[0])
    {
      int v19 = v67;
      goto LABEL_38;
    }
  }
  unint64_t v24 = 126 - 2 * __clz(v73 - v72);
  if (v73 == v72) {
    uint64_t v25 = 0;
  }
  else {
    uint64_t v25 = v24;
  }
  sub_33E7DC(v72, v73, v25, 1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65A3F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65A3F8))
  {
    xmmword_65A3D0 = 0u;
    *(_OWORD *)&qword_65A3E0 = 0u;
    dword_65A3F0 = 1065353216;
    __cxa_guard_release(&qword_65A3F8);
  }
  uint64_t v26 = (os_log_t *)sub_32A48(17);
  unint64_t v27 = *v26;
  if (*v26)
  {
    BOOL v28 = os_log_type_enabled(*v26, OS_LOG_TYPE_DEBUG);
    long long v30 = v72;
    uint64_t v29 = v73;
    if (v28)
    {
      memset(&v66, 0, sizeof(v66));
      std::string::append(&v66, "{ ", 2uLL);
      if (v30 != v29)
      {
        long long v31 = v30;
        while (1)
        {
          std::to_string(&v74, *v31);
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v32 = &v74;
          }
          else {
            uint64_t v32 = (std::string *)v74.__r_.__value_.__r.__words[0];
          }
          if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v74.__r_.__value_.__l.__size_;
          }
          std::string::append(&v66, (const std::string::value_type *)v32, size);
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v74.__r_.__value_.__l.__data_);
          }
          if (++v31 == v29) {
            break;
          }
          std::string::append(&v66, ", ", 2uLL);
        }
      }
      std::string::append(&v66, " }", 2uLL);
      if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v34 = &v66;
      }
      else {
        uint64_t v34 = (std::string *)v66.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1540;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v34;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d AltVAD types: %s", buf, 0x1Cu);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    long long v30 = v72;
    uint64_t v29 = v73;
  }
  unint64_t v35 = v29 - v30;
  if (v29 != v30)
  {
    uint64_t v36 = v30;
    do
    {
      uint64_t v37 = *v36++;
      v35 ^= v37;
    }
    while (v36 != v29);
  }
  if (*((void *)&xmmword_65A3D0 + 1))
  {
    uint8x8_t v38 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_65A3D0 + 8));
    v38.i16[0] = vaddlv_u8(v38);
    if (v38.u32[0] > 1uLL)
    {
      unint64_t v39 = v35;
      if (v35 >= *((void *)&xmmword_65A3D0 + 1)) {
        unint64_t v39 = v35 % *((void *)&xmmword_65A3D0 + 1);
      }
    }
    else
    {
      unint64_t v39 = (*((void *)&xmmword_65A3D0 + 1) - 1) & v35;
    }
    uint64_t v40 = *(void **)(xmmword_65A3D0 + 8 * v39);
    if (v40)
    {
      for (unsigned int i = (void *)*v40; i; unsigned int i = (void *)*i)
      {
        unint64_t v42 = i[1];
        if (v42 == v35)
        {
          uint64_t v44 = i[2];
          uint64_t v43 = i[3];
          if (v43 - v44 == (char *)v29 - (char *)v30)
          {
            if (v44 == v43) {
              goto LABEL_92;
            }
            uint64_t v45 = 0;
            while (*(_DWORD *)(v44 + v45 * 4) == v30[v45])
            {
              if (v44 + ++v45 * 4 == v43) {
                goto LABEL_92;
              }
            }
          }
        }
        else
        {
          if (v38.u32[0] > 1uLL)
          {
            if (v42 >= *((void *)&xmmword_65A3D0 + 1)) {
              v42 %= *((void *)&xmmword_65A3D0 + 1);
            }
          }
          else
          {
            v42 &= *((void *)&xmmword_65A3D0 + 1) - 1;
          }
          if (v42 != v39) {
            break;
          }
        }
      }
    }
  }
  sub_3342CC((uint64_t *)buf, a1, v30, (uint64_t)v29);
  uint64_t v46 = sub_33EE5C(v30, v29, (uint64_t)&v72);
  uint64_t v47 = v46;
  BOOL v48 = (void **)(v46 + 5);
  uint64_t v49 = (void *)v46[5];
  if (v49)
  {
    uint64_t v50 = v46[6];
    unint64_t v51 = v49;
    if ((void *)v50 != v49)
    {
      do
        uint64_t v50 = sub_819AC(v50 - 440);
      while ((void *)v50 != v49);
      unint64_t v51 = *v48;
      long long v30 = v72;
      uint64_t v29 = v73;
    }
    v47[6] = v49;
    operator delete(v51);
    *BOOL v48 = 0;
    v48[1] = 0;
    v48[2] = 0;
  }
  *(_OWORD *)(v47 + 5) = *(_OWORD *)buf;
  v47[7] = *(void *)&buf[16];
  memset(buf, 0, 24);
  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  sub_81CEC((void ***)&v74);
LABEL_92:
  unint64_t v52 = sub_33EE5C(v30, v29, (uint64_t)&v72);
  long long v53 = v72;
  unint64_t v65 = v73;
  sub_3342CC((uint64_t *)&v74, a1, v72, (uint64_t)v73);
  uint64_t v54 = v52[5];
  for (uint64_t j = v52[6]; v54 != j; v54 += 440)
  {
    long long v56 = (os_log_t *)sub_32A48(17);
    unint64_t v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(&v66, *(_DWORD *)(v54 + 60));
      unint64_t v58 = (v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v66
          : (std::string *)v66.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1552;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v58;
      _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d AltVAD: %s", buf, 0x1Cu);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v66.__r_.__value_.__l.__data_);
      }
    }
    std::string::size_type v59 = v74.__r_.__value_.__r.__words[0];
    if (v74.__r_.__value_.__r.__words[0] == v74.__r_.__value_.__l.__size_)
    {
LABEL_108:
      unint64_t v62 = (os_log_t *)sub_32A48(13);
      unint64_t v63 = *v62;
      if (*v62)
      {
        if (os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AlternateVAD.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1553;
          _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    while (*(_DWORD *)(v54 + 60) != *(_DWORD *)(v59 + 60))
    {
      v59 += 440;
      if (v59 == v74.__r_.__value_.__l.__size_) {
        goto LABEL_108;
      }
    }
  }
  unint64_t v60 = sub_33EE5C(v53, v65, (uint64_t)&v72);
  *(void *)buf = &v74;
  sub_81CEC((void ***)buf);
  if (v53) {
    operator delete(v53);
  }
  return v60 + 5;
}

void sub_33E15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (v35) {
    operator delete(v35);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v34) {
    operator delete(v34);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_33E2C8(void *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  if (a3 == a4)
  {
    uint64_t v8 = *(unsigned int **)(a2 + 8);
  }
  else
  {
    int v7 = a3;
    uint64_t v8 = *(unsigned int **)(a2 + 8);
    do
    {
      unint64_t v9 = *(unsigned int **)a2;
      if (*(unsigned int **)a2 != v8)
      {
        while (*v9 != *v7)
        {
          if (++v9 == v8)
          {
            unint64_t v9 = v8;
            break;
          }
        }
      }
      if (v9 != v8)
      {
        uint64_t v10 = sub_32A48(20);
        if (*(unsigned char *)(v10 + 8))
        {
          long long v11 = *(NSObject **)v10;
          if (*(void *)v10)
          {
            if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v12 = *v7;
              unint64_t v13 = "????";
              if (v12 <= 0x1E) {
                unint64_t v13 = off_634620[v12];
              }
              sub_21C8C(v21, v13);
              int v14 = v22;
              uint64_t v15 = (void **)v21[0];
              sub_333FF0(&__p, (unsigned int **)a2);
              uint64_t v16 = v21;
              if (v14 < 0) {
                uint64_t v16 = v15;
              }
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315906;
              unint64_t v24 = "AlternateVAD.cpp";
              __int16 v25 = 1024;
              int v26 = 1007;
              __int16 v27 = 2080;
              BOOL v28 = v16;
              __int16 v29 = 2080;
              long long v30 = p_p;
              _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Removing Alternate VAD Specification Type %s from %s", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (v22 < 0) {
                operator delete(v21[0]);
              }
            }
          }
        }
        BOOL v18 = *(unsigned int **)(a2 + 8);
        int64_t v19 = (char *)v18 - (char *)(v9 + 1);
        if (v18 != v9 + 1) {
          memmove(v9, v9 + 1, (char *)v18 - (char *)(v9 + 1));
        }
        uint64_t v8 = (unsigned int *)((char *)v9 + v19);
        *(void *)(a2 + 8) = (char *)v9 + v19;
      }
      ++v7;
    }
    while (v7 != a4);
  }
  *a1 = *(void *)a2;
  a1[1] = v8;
  a1[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
}

void sub_33E4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_33E50C(void *a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  if (a3 == a4)
  {
    uint64_t v8 = *(unsigned int **)(a2 + 8);
  }
  else
  {
    int v7 = a3;
    uint64_t v8 = *(unsigned int **)(a2 + 8);
    do
    {
      unint64_t v9 = *(unsigned int **)a2;
      if (*(unsigned int **)a2 != v8)
      {
        while (*v9 != *v7)
        {
          if (++v9 == v8)
          {
            unint64_t v9 = v8;
            break;
          }
        }
      }
      if (v9 == v8)
      {
        uint64_t v10 = sub_32A48(20);
        if (*(unsigned char *)(v10 + 8))
        {
          long long v11 = *(NSObject **)v10;
          if (*(void *)v10)
          {
            if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v12 = *v7;
              unint64_t v13 = "????";
              if (v12 <= 0x1E) {
                unint64_t v13 = off_634620[v12];
              }
              sub_21C8C(v29, v13);
              int v14 = v30;
              uint64_t v15 = (void **)v29[0];
              sub_333FF0(&__p, (unsigned int **)a2);
              uint64_t v16 = v29;
              if (v14 < 0) {
                uint64_t v16 = v15;
              }
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315906;
              uint64_t v32 = "AlternateVAD.cpp";
              __int16 v33 = 1024;
              int v34 = 1022;
              __int16 v35 = 2080;
              uint64_t v36 = v16;
              __int16 v37 = 2080;
              uint8x8_t v38 = p_p;
              _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Add Alternate VAD Specification Type %s to %s", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (v30 < 0) {
                operator delete(v29[0]);
              }
            }
          }
        }
        int64_t v19 = *(unsigned int **)(a2 + 8);
        unint64_t v18 = *(void *)(a2 + 16);
        if ((unint64_t)v19 >= v18)
        {
          unint64_t v20 = *(unsigned int **)a2;
          uint64_t v21 = ((uint64_t)v19 - *(void *)a2) >> 2;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62) {
            sub_60548();
          }
          uint64_t v23 = v18 - (void)v20;
          if (v23 >> 1 > v22) {
            unint64_t v22 = v23 >> 1;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            unint64_t v24 = (unint64_t)sub_46BF4(v24);
            unint64_t v20 = *(unsigned int **)a2;
            int64_t v19 = *(unsigned int **)(a2 + 8);
          }
          else
          {
            uint64_t v25 = 0;
          }
          int v26 = (unsigned int *)(v24 + 4 * v21);
          *int v26 = *v7;
          uint64_t v8 = v26 + 1;
          while (v19 != v20)
          {
            unsigned int v27 = *--v19;
            *--int v26 = v27;
          }
          *(void *)a2 = v26;
          *(void *)(a2 + 8) = v8;
          *(void *)(a2 + 16) = v24 + 4 * v25;
          if (v20) {
            operator delete(v20);
          }
        }
        else
        {
          *int64_t v19 = *v7;
          uint64_t v8 = v19 + 1;
        }
        *(void *)(a2 + 8) = v8;
      }
      ++v7;
    }
    while (v7 != a4);
  }
  *a1 = *(void *)a2;
  a1[1] = v8;
  a1[2] = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
}

void sub_33E7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int *sub_33E7DC(int *result, int *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = a2 - 1;
    long long v11 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v11;
          uint64_t v12 = (char *)a2 - (char *)v11;
          unint64_t v13 = a2 - v11;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                int v40 = *v11;
                if (*v10 < *v11)
                {
                  *long long v11 = *v10;
                  *uint64_t v10 = v40;
                }
                break;
              case 3uLL:
                uint64_t result = sub_33F384(v11, v11 + 1, a2 - 1);
                break;
              case 4uLL:
                uint64_t result = sub_33F3F4(v11, v11 + 1, v11 + 2, a2 - 1);
                break;
              case 5uLL:
                uint64_t result = sub_33F474(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v12 <= 95)
          {
            unint64_t v41 = v11 + 1;
            BOOL v43 = v11 == a2 || v41 == a2;
            if (a4)
            {
              if (!v43)
              {
                uint64_t v44 = 4;
                uint64_t v45 = v11;
                do
                {
                  int v47 = *v45;
                  int v46 = v45[1];
                  uint64_t v45 = v41;
                  if (v46 < v47)
                  {
                    uint64_t v48 = v44;
                    do
                    {
                      *(int *)((char *)v11 + v48) = v47;
                      uint64_t v49 = v48 - 4;
                      if (v48 == 4)
                      {
                        uint64_t v50 = v11;
                        goto LABEL_80;
                      }
                      int v47 = *(int *)((char *)v11 + v48 - 8);
                      v48 -= 4;
                    }
                    while (v46 < v47);
                    uint64_t v50 = (int *)((char *)v11 + v49);
LABEL_80:
                    *uint64_t v50 = v46;
                  }
                  unint64_t v41 = v45 + 1;
                  v44 += 4;
                }
                while (v45 + 1 != a2);
              }
            }
            else if (!v43)
            {
              do
              {
                int v76 = *v9;
                int v75 = v9[1];
                unint64_t v9 = v41;
                if (v75 < v76)
                {
                  do
                  {
                    int *v41 = v76;
                    int v76 = *(v41 - 2);
                    --v41;
                  }
                  while (v75 < v76);
                  int *v41 = v75;
                }
                unint64_t v41 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v11 != a2)
            {
              int64_t v51 = (v13 - 2) >> 1;
              int64_t v52 = v51;
              do
              {
                int64_t v53 = v52;
                if (v51 >= v52)
                {
                  uint64_t v54 = (2 * v52) | 1;
                  unint64_t v55 = &v11[v54];
                  if (2 * v53 + 2 < (uint64_t)v13)
                  {
                    int v57 = v55[1];
                    BOOL v56 = *v55 < v57;
                    if (*v55 > v57) {
                      int v57 = *v55;
                    }
                    if (v56)
                    {
                      ++v55;
                      uint64_t v54 = 2 * v53 + 2;
                    }
                  }
                  else
                  {
                    int v57 = *v55;
                  }
                  unint64_t v58 = &v11[v53];
                  int v59 = *v58;
                  if (v57 >= *v58)
                  {
                    do
                    {
                      *unint64_t v58 = v57;
                      unint64_t v58 = v55;
                      if (v51 < v54) {
                        break;
                      }
                      uint64_t v60 = (2 * v54) | 1;
                      unint64_t v55 = &v11[v60];
                      uint64_t v54 = 2 * v54 + 2;
                      if (v54 < (uint64_t)v13)
                      {
                        int v57 = *v55;
                        uint64_t result = v55 + 1;
                        int v61 = v55[1];
                        if (*v55 <= v61) {
                          int v57 = v55[1];
                        }
                        if (*v55 >= v61) {
                          uint64_t v54 = v60;
                        }
                        else {
                          ++v55;
                        }
                      }
                      else
                      {
                        int v57 = *v55;
                        uint64_t v54 = v60;
                      }
                    }
                    while (v57 >= v59);
                    *unint64_t v58 = v59;
                  }
                }
                int64_t v52 = v53 - 1;
              }
              while (v53);
              uint64_t v62 = (unint64_t)v12 >> 2;
              do
              {
                uint64_t v63 = 0;
                int v64 = *v11;
                unint64_t v65 = v11;
                do
                {
                  std::string v66 = &v65[v63 + 1];
                  uint64_t v67 = (2 * v63) | 1;
                  uint64_t v63 = 2 * v63 + 2;
                  if (v63 < v62)
                  {
                    int v69 = *v66;
                    int v68 = v66[1];
                    if (*v66 <= v68) {
                      int v69 = v66[1];
                    }
                    if (*v66 >= v68) {
                      uint64_t v63 = v67;
                    }
                    else {
                      ++v66;
                    }
                  }
                  else
                  {
                    int v69 = *v66;
                    uint64_t v63 = v67;
                  }
                  int *v65 = v69;
                  unint64_t v65 = v66;
                }
                while (v63 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
                if (v66 == --a2)
                {
                  *std::string v66 = v64;
                }
                else
                {
                  *std::string v66 = *a2;
                  *a2 = v64;
                  uint64_t v70 = (char *)v66 - (char *)v11 + 4;
                  if (v70 >= 5)
                  {
                    unint64_t v71 = (((unint64_t)v70 >> 2) - 2) >> 1;
                    unint64_t v72 = &v11[v71];
                    int v73 = *v72;
                    int v74 = *v66;
                    if (*v72 < *v66)
                    {
                      do
                      {
                        *std::string v66 = v73;
                        std::string v66 = v72;
                        if (!v71) {
                          break;
                        }
                        unint64_t v71 = (v71 - 1) >> 1;
                        unint64_t v72 = &v11[v71];
                        int v73 = *v72;
                      }
                      while (*v72 < v74);
                      *std::string v66 = v74;
                    }
                  }
                }
                BOOL v56 = v62-- <= 2;
              }
              while (!v56);
            }
            return result;
          }
          unint64_t v14 = v13 >> 1;
          uint64_t v15 = &v11[v13 >> 1];
          if ((unint64_t)v12 >= 0x201)
          {
            sub_33F384(v9, &v9[v13 >> 1], a2 - 1);
            sub_33F384(v9 + 1, v15 - 1, a2 - 2);
            sub_33F384(v9 + 2, &v9[v14 + 1], a2 - 3);
            uint64_t result = sub_33F384(v15 - 1, v15, &v9[v14 + 1]);
            int v16 = *v9;
            *unint64_t v9 = *v15;
            int *v15 = v16;
          }
          else
          {
            uint64_t result = sub_33F384(&v9[v13 >> 1], v9, a2 - 1);
          }
          --a3;
          int v17 = *v9;
          unint64_t v18 = v9;
          if (a4) {
            break;
          }
          unint64_t v18 = v9;
          if (*(v9 - 1) < v17) {
            break;
          }
          if (v17 >= *v10)
          {
            uint64_t v32 = v9 + 1;
            do
            {
              long long v11 = v32;
              if (v32 >= a2) {
                break;
              }
              ++v32;
            }
            while (v17 >= *v11);
          }
          else
          {
            long long v11 = v9;
            do
            {
              int v31 = v11[1];
              ++v11;
            }
            while (v17 >= v31);
          }
          __int16 v33 = a2;
          if (v11 < a2)
          {
            __int16 v33 = a2;
            do
              int v34 = *--v33;
            while (v17 < v34);
          }
          if (v11 < v33)
          {
            int v35 = *v11;
            int v36 = *v33;
            do
            {
              *long long v11 = v36;
              int *v33 = v35;
              do
              {
                int v37 = v11[1];
                ++v11;
                int v35 = v37;
              }
              while (v17 >= v37);
              do
              {
                int v38 = *--v33;
                int v36 = v38;
              }
              while (v17 < v38);
            }
            while (v11 < v33);
          }
          unint64_t v39 = v11 - 1;
          BOOL v4 = v11 - 1 >= v9;
          BOOL v5 = v11 - 1 == v9;
          if (v11 - 1 != v9) {
            *unint64_t v9 = *v39;
          }
          a4 = 0;
          int *v39 = v17;
        }
        do
        {
          int64_t v19 = v18;
          int v21 = v18[1];
          ++v18;
          int v20 = v21;
        }
        while (v21 < v17);
        unint64_t v22 = a2;
        if (v19 == v9)
        {
          unint64_t v22 = a2;
          do
          {
            if (v18 >= v22) {
              break;
            }
            int v24 = *--v22;
          }
          while (v24 >= v17);
        }
        else
        {
          do
            int v23 = *--v22;
          while (v23 >= v17);
        }
        if (v18 < v22)
        {
          int v25 = *v22;
          int v26 = v18;
          unsigned int v27 = v22;
          do
          {
            *int v26 = v25;
            *unsigned int v27 = v20;
            do
            {
              int64_t v19 = v26;
              int v28 = v26[1];
              ++v26;
              int v20 = v28;
            }
            while (v28 < v17);
            do
            {
              int v29 = *--v27;
              int v25 = v29;
            }
            while (v29 >= v17);
          }
          while (v26 < v27);
        }
        if (v19 != v9) {
          *unint64_t v9 = *v19;
        }
        *int64_t v19 = v17;
        if (v18 >= v22) {
          break;
        }
LABEL_30:
        uint64_t result = (int *)sub_33E7DC(v9, v19, a3, a4 & 1);
        a4 = 0;
        long long v11 = v19 + 1;
      }
      BOOL v30 = sub_33F518(v9, v19);
      long long v11 = v19 + 1;
      uint64_t result = (int *)sub_33F518(v19 + 1, a2);
      if (result) {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v19;
    if (!v30) {
      continue;
    }
    return result;
  }
}

void *sub_33EE5C(int *a1, int *a2, uint64_t a3)
{
  unint64_t v5 = a2 - a1;
  if (a2 != a1)
  {
    int v6 = a1;
    do
    {
      uint64_t v7 = *v6++;
      v5 ^= v7;
    }
    while (v6 != a2);
  }
  unint64_t v8 = *((void *)&xmmword_65A3D0 + 1);
  if (*((void *)&xmmword_65A3D0 + 1))
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_65A3D0 + 8));
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v5;
      if (v5 >= *((void *)&xmmword_65A3D0 + 1)) {
        unint64_t v3 = v5 % *((void *)&xmmword_65A3D0 + 1);
      }
    }
    else
    {
      unint64_t v3 = (*((void *)&xmmword_65A3D0 + 1) - 1) & v5;
    }
    uint64_t v10 = *(void ***)(xmmword_65A3D0 + 8 * v3);
    if (v10)
    {
      for (unsigned int i = *v10; i; unsigned int i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v5)
        {
          unint64_t v14 = (char *)i[2];
          unint64_t v13 = (char *)i[3];
          if (v13 - v14 == (char *)a2 - (char *)a1)
          {
            if (v14 == v13) {
              return i;
            }
            for (uint64_t j = a1; *(_DWORD *)v14 == *j; ++j)
            {
              v14 += 4;
              if (v14 == v13) {
                return i;
              }
            }
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= *((void *)&xmmword_65A3D0 + 1)) {
              v12 %= *((void *)&xmmword_65A3D0 + 1);
            }
          }
          else
          {
            v12 &= *((void *)&xmmword_65A3D0 + 1) - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  int v16 = operator new(0x40uLL);
  v37[0] = (uint64_t)v16;
  v37[1] = (uint64_t)&qword_65A3E0;
  char v38 = 0;
  void *v16 = 0;
  v16[1] = v5;
  v16[3] = 0;
  v16[4] = 0;
  v16[2] = 0;
  sub_FC64C(v16 + 2, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  v16[5] = 0;
  v16[6] = 0;
  v16[7] = 0;
  char v38 = 1;
  float v17 = (float)(unint64_t)(qword_65A3E8 + 1);
  if (!v8 || (float)(*(float *)&dword_65A3F0 * (float)v8) < v17)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v17 / *(float *)&dword_65A3F0);
    if (v19 <= v20) {
      int8x8_t prime = (int8x8_t)v20;
    }
    else {
      int8x8_t prime = (int8x8_t)v19;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v8 = *((void *)&xmmword_65A3D0 + 1);
    if (*(void *)&prime > *((void *)&xmmword_65A3D0 + 1)) {
      goto LABEL_37;
    }
    if (*(void *)&prime < *((void *)&xmmword_65A3D0 + 1))
    {
      unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)qword_65A3E8 / *(float *)&dword_65A3F0);
      if (*((void *)&xmmword_65A3D0 + 1) < 3uLL
        || (uint8x8_t v29 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_65A3D0 + 8)),
            v29.i16[0] = vaddlv_u8(v29),
            v29.u32[0] > 1uLL))
      {
        unint64_t v28 = std::__next_prime(v28);
      }
      else
      {
        uint64_t v30 = 1 << -(char)__clz(v28 - 1);
        if (v28 >= 2) {
          unint64_t v28 = v30;
        }
      }
      if (*(void *)&prime <= v28) {
        int8x8_t prime = (int8x8_t)v28;
      }
      if (*(void *)&prime >= v8)
      {
        unint64_t v8 = *((void *)&xmmword_65A3D0 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_37:
          if (*(void *)&prime >> 61) {
            sub_60560();
          }
          unint64_t v22 = operator new(8 * *(void *)&prime);
          int v23 = (void *)xmmword_65A3D0;
          *(void *)&xmmword_65A3D0 = v22;
          if (v23) {
            operator delete(v23);
          }
          uint64_t v24 = 0;
          *((int8x8_t *)&xmmword_65A3D0 + 1) = prime;
          do
            *(void *)(xmmword_65A3D0 + 8 * v24++) = 0;
          while (*(void *)&prime != v24);
          int v25 = (void **)qword_65A3E0;
          if (qword_65A3E0)
          {
            unint64_t v26 = *(void *)(qword_65A3E0 + 8);
            uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
            v27.i16[0] = vaddlv_u8(v27);
            if (v27.u32[0] > 1uLL)
            {
              if (v26 >= *(void *)&prime) {
                v26 %= *(void *)&prime;
              }
            }
            else
            {
              v26 &= *(void *)&prime - 1;
            }
            *(void *)(xmmword_65A3D0 + 8 * v26) = &qword_65A3E0;
            for (k = *v25; k; unint64_t v26 = v32)
            {
              unint64_t v32 = k[1];
              if (v27.u32[0] > 1uLL)
              {
                if (v32 >= *(void *)&prime) {
                  v32 %= *(void *)&prime;
                }
              }
              else
              {
                v32 &= *(void *)&prime - 1;
              }
              if (v32 != v26)
              {
                if (!*(void *)(xmmword_65A3D0 + 8 * v32))
                {
                  *(void *)(xmmword_65A3D0 + 8 * v32) = v25;
                  goto LABEL_62;
                }
                *int v25 = (void *)*k;
                void *k = **(void **)(xmmword_65A3D0 + 8 * v32);
                **(void **)(xmmword_65A3D0 + 8 * v32) = k;
                k = v25;
              }
              unint64_t v32 = v26;
LABEL_62:
              int v25 = (void **)k;
              k = (void *)*k;
            }
          }
          unint64_t v8 = (unint64_t)prime;
          goto LABEL_66;
        }
        int v36 = (void *)xmmword_65A3D0;
        *(void *)&xmmword_65A3D0 = 0;
        if (v36) {
          operator delete(v36);
        }
        unint64_t v8 = 0;
        *((void *)&xmmword_65A3D0 + 1) = 0;
      }
    }
LABEL_66:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v5 >= v8) {
        unint64_t v3 = v5 % v8;
      }
      else {
        unint64_t v3 = v5;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v5;
    }
  }
  __int16 v33 = *(void **)(xmmword_65A3D0 + 8 * v3);
  unsigned int i = (void *)v37[0];
  if (v33)
  {
    *(void *)v37[0] = *v33;
LABEL_79:
    void *v33 = i;
    goto LABEL_80;
  }
  *(void *)v37[0] = qword_65A3E0;
  qword_65A3E0 = (uint64_t)i;
  *(void *)(xmmword_65A3D0 + 8 * v3) = &qword_65A3E0;
  if (*i)
  {
    unint64_t v34 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v34 >= v8) {
        v34 %= v8;
      }
    }
    else
    {
      v34 &= v8 - 1;
    }
    __int16 v33 = (void *)(xmmword_65A3D0 + 8 * v34);
    goto LABEL_79;
  }
LABEL_80:
  v37[0] = 0;
  ++qword_65A3E8;
  sub_33F308(v37);
  return i;
}

void sub_33F2F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_33F308((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_33F308(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (v1)
  {
    if (*((unsigned char *)a1 + 16))
    {
      unint64_t v3 = (void **)(v1 + 40);
      sub_81CEC(&v3);
      int v2 = *(void **)(v1 + 16);
      if (v2)
      {
        *(void *)(v1 + 24) = v2;
        operator delete(v2);
      }
    }
    operator delete((void *)v1);
  }
}

int *sub_33F384(int *result, int *a2, int *a3)
{
  int v3 = *a2;
  int v4 = *result;
  int v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      int v6 = *result;
      if (*a2 < *result)
      {
        void *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      void *result = v3;
      *a2 = v4;
      if (*a3 >= v4) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      void *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

int *sub_33F3F4(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result = sub_33F384(a1, a2, a3);
  int v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    int v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      int v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

int *sub_33F474(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result = sub_33F3F4(a1, a2, a3, a4);
  int v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    int v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      int v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        int v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

BOOL sub_33F518(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_33F384(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_33F3F4(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_33F474(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      sub_33F384(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        int v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          int v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      int v16 = a1;
LABEL_12:
      int *v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

void sub_33F698(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_33F6A4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_33F6B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 633);
}

void sub_33F6B8(uint64_t a1, _OWORD *a2, UInt32 a3, unsigned int a4)
{
  unint64_t v8 = (os_log_t *)sub_32A48(16);
  int v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    int v13 = "AggregateDevice_Call.cpp";
    __int16 v14 = 1024;
    int v15 = 500;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting baseband audio", (uint8_t *)&v12, 0x12u);
  }
  sub_34BD60(a1, a2, a3, a4);
  int v10 = (os_log_t *)sub_32A48(16);
  uint64_t v11 = *v10;
  if (*v10)
  {
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315394;
      int v13 = "AggregateDevice_Call.cpp";
      __int16 v14 = 1024;
      int v15 = 502;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Started baseband audio", (uint8_t *)&v12, 0x12u);
    }
  }
}

void sub_33F814(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (os_log_t *)sub_32A48(16);
  int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315394;
    int v9 = "AggregateDevice_Call.cpp";
    __int16 v10 = 1024;
    int v11 = 492;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting baseband audio", (uint8_t *)&v8, 0x12u);
  }
  sub_34EAFC(a1, a2);
  int v6 = (os_log_t *)sub_32A48(16);
  int v7 = *v6;
  if (*v6)
  {
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      int v9 = "AggregateDevice_Call.cpp";
      __int16 v10 = 1024;
      int v11 = 494;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Started baseband audio", (uint8_t *)&v8, 0x12u);
    }
  }
}

void sub_33F95C(uint64_t a1)
{
  sub_350AE0(a1);

  operator delete();
}

void sub_33F998()
{
}

void sub_3424C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a2)
  {
    __cxa_free_exception(v29);
    __cxa_begin_catch(a1);
    int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a29 + 120))(a29);
    sub_329688(v31);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_3428C0()
{
}

void sub_3428DC()
{
}

void sub_342918(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x342944);
}

void sub_34294C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_3429C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_72E94((void **)va);
  _Unwind_Resume(a1);
}

void sub_3429D4(void **a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  int v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    uint64_t v7 = (v4 - (unsigned char *)*a1) >> 5;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 59) {
      sub_60548();
    }
    uint64_t v9 = v5 - (unsigned char *)*a1;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10 >> 59) {
      sub_60560();
    }
    int v11 = (char *)operator new(32 * v10);
    int v12 = &v11[32 * v7];
    int v13 = &v11[32 * v10];
    *(_DWORD *)int v12 = *(_DWORD *)a2;
    *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *((void *)v12 + 3) = *(void *)(a2 + 24);
    int v6 = v12 + 32;
    __int16 v14 = (char *)*a1;
    int v15 = (char *)a1[1];
    if (v15 == *a1)
    {
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      uint64_t v16 = 0;
      do
      {
        float v17 = &v12[v16];
        BOOL v18 = &v15[v16];
        *((_DWORD *)v17 - 8) = *(_DWORD *)&v15[v16 - 32];
        *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
        *((void *)v18 - 3) = 0;
        *((void *)v18 - 2) = 0;
        *((void *)v17 - 1) = *(void *)&v15[v16 - 8];
        v16 -= 32;
      }
      while (&v15[v16] != v14);
      int v15 = (char *)*a1;
      unint64_t v19 = (char *)a1[1];
      *a1 = &v12[v16];
      a1[1] = v6;
      a1[2] = v13;
      while (v19 != v15)
      {
        unint64_t v20 = (std::__shared_weak_count *)*((void *)v19 - 2);
        if (v20) {
          sub_4636C(v20);
        }
        v19 -= 32;
      }
    }
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v4 = *(_DWORD *)a2;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *((void *)v4 + 3) = *(void *)(a2 + 24);
    int v6 = v4 + 32;
  }
  a1[1] = v6;
}

uint64_t sub_342B30(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = 0x676C6F6273766364;
  int v6 = 0;
  if (result)
  {
    unsigned int v4 = (unsigned __int16)sub_378EB8(result, a2);
    if (v4 <= 0x100) {
      LOBYTE(v4) = 0;
    }
    if ((_BYTE)v4) {
      return (*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a3 + 16))(a3, &v5) ^ 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_342BC0(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (std::__shared_weak_count *)*((void *)v4 - 2);
        if (v6) {
          sub_4636C(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_342C48(uint64_t a1)
{
  int v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  unsigned int v4 = (void **)(a1 + 72);
  sub_342BC0(&v4);
  unsigned int v4 = (void **)(a1 + 48);
  sub_342BC0(&v4);
  unsigned int v4 = (void **)(a1 + 24);
  sub_638B4(&v4);
  unsigned int v4 = (void **)a1;
  sub_638B4(&v4);
  return a1;
}

void *sub_342CC4(uint64_t a1)
{
  BOOL result = *(void **)(a1 + 24);
  if (result)
  {
    sub_31F498(result);
    operator delete();
  }
  return result;
}

void sub_342D0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_342D48(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184) && *(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(unsigned char *)(a1 + 152) && *(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  sub_463E0(*(void **)(a1 + 112));
  sub_A60C4((uint64_t *)(a1 + 64));
  return a1;
}

void sub_342DAC(uint64_t *a1, uint64_t *a2)
{
  sub_A60C4(a1);
  uint64_t v4 = a2[2];
  if (v4)
  {
    uint64_t v6 = *a2;
    uint64_t v5 = (uint64_t *)a2[1];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(*a2 + 8);
    **(void **)(v6 + 8) = v7;
    uint64_t v8 = *a1;
    *(void *)(v8 + 8) = v5;
    *uint64_t v5 = v8;
    *a1 = v6;
    *(void *)(v6 + 8) = a1;
    a1[2] += v4;
    a2[2] = 0;
  }
}

void sub_342E18(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 1) {
    goto LABEL_12;
  }
  uint64_t v2 = sub_32A48(16);
  uint64_t v3 = sub_32A48(24);
  char v4 = 0;
  uint64_t v5 = 0;
  *(void *)int v13 = 0x100000002;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = (int)v13[v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8) {
      goto LABEL_8;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_8:
  uint64_t v9 = *(NSObject **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v13[0] = 136315394;
    *(void *)&v13[1] = "OrientationIODelegate.cpp";
    LOWORD(v13[3]) = 1024;
    *(_DWORD *)((char *)&v13[3] + 2) = 114;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Unregistered from Device Orientation unexpectedly", (uint8_t *)v13, 0x12u);
  }
  if (*(_DWORD *)(a1 + 80) == 1)
  {
LABEL_12:
    sub_1329C(v13, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
    uint64_t v11 = *(void *)v13;
    unint64_t v10 = *(std::__shared_weak_count **)&v13[2];
    if (*(void *)&v13[2])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v13[2] + 16), 1uLL, memory_order_relaxed);
      sub_4636C(v10);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_54694();
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 48, 8);
    *(_DWORD *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = v11;
    *(void *)(v12 + 32) = v10;
    *(void *)uint64_t v12 = off_634A98;
    *(void *)(v12 + 8) = 0;
    caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v12);
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_343004(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

caulk::concurrent::message **sub_343038(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_343080((uint64_t)a1);
  return sub_3435BC(&v2);
}

void sub_34306C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3435BC((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void sub_343080(uint64_t a1)
{
  sub_13A4C(&v23, (uint64_t *)(a1 + 24), 123);
  uint64_t v1 = v23;
  if (v23)
  {
    uint64_t v2 = sub_32A48(16);
    uint64_t v3 = sub_32A48(24);
    char v4 = 0;
    uint64_t v5 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v6 = *(void *)(v2 + 8);
    while (1)
    {
      uint64_t v7 = *(int *)&buf[4 * v5];
      char v8 = v4;
      if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
        break;
      }
      char v4 = 1;
      uint64_t v5 = 1;
      if (v8)
      {
        if ((v6 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_10;
      }
    }
    if ((v6 & v7) == 0) {
      uint64_t v2 = v3;
    }
    if (*(void *)(v2 + 8))
    {
LABEL_10:
      uint64_t v9 = *(NSObject **)v2;
      if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v10 = (void *)(v1 + 24);
        if (*(char *)(v1 + 47) < 0) {
          unint64_t v10 = (void *)*v10;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 85;
        __int16 v26 = 2080;
        v27[0] = v10;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unregistering %s for Device Orientation Updates", buf, 0x1Cu);
      }
    }
LABEL_15:
    uint64_t v11 = *(uint64_t (**)(void))(v1 + 104);
    uint64_t v12 = (void *)(v1 + 24);
    if (*(char *)(v1 + 47) >= 0) {
      int v13 = (char *)(v1 + 24);
    }
    else {
      int v13 = *(char **)(v1 + 24);
    }
    sub_5834(buf, v13);
    int v14 = v11(*(void *)&buf[8]);
    sub_49A90(buf);
    if (v14)
    {
      uint64_t v15 = sub_32A48(16);
      uint64_t v16 = sub_32A48(24);
      char v17 = 0;
      uint64_t v18 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v19 = *(void *)(v15 + 8);
      while (1)
      {
        uint64_t v20 = *(int *)&buf[4 * v18];
        char v21 = v17;
        if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
          break;
        }
        char v17 = 1;
        uint64_t v18 = 1;
        if (v21) {
          goto LABEL_25;
        }
      }
      if ((v19 & v20) == 0) {
        uint64_t v15 = v16;
      }
LABEL_25:
      unint64_t v22 = *(NSObject **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v1 + 47) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 88;
        __int16 v26 = 1024;
        LODWORD(v27[0]) = v14;
        WORD2(v27[0]) = 2080;
        *(void *)((char *)v27 + 6) = v12;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed [%d] to unregister %s for Device Orientation Updates", buf, 0x22u);
      }
    }
    *(_DWORD *)(v1 + 80) = 0;
  }
  if (v24) {
    sub_4636C(v24);
  }
}

void sub_343320(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (a2)
  {
    sub_49A90(&buf);
    if (a10) {
      sub_4636C(a10);
    }
    if (a2 == 3)
    {
      uint64_t v18 = __cxa_begin_catch(a1);
      uint64_t v19 = (os_log_t *)sub_32A48(13);
      uint64_t v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        int v21 = v18[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a12) = 1024;
        DWORD1(a12) = v21;
        WORD4(a12) = 2080;
        *(void *)((char *)&a12 + 10) = "";
        a14 = 1024;
        a15 = 127;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).", (uint8_t *)&buf, 0x28u);
      }
    }
    else
    {
      unint64_t v22 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        uint64_t v23 = v22;
        uint64_t v24 = (os_log_t *)sub_32A48(13);
        int v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = v26;
          WORD6(a12) = 2080;
          *(void *)((char *)&a12 + 14) = "";
          HIWORD(a15) = 1024;
          a16 = 127;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).", (uint8_t *)&buf, 0x2Cu);
        }
      }
      else
      {
        uint8x8_t v27 = (os_log_t *)sub_32A48(13);
        unint64_t v28 = *v27;
        if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = "";
          WORD6(a12) = 1024;
          *(_DWORD *)((char *)&a12 + 14) = 127;
          _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).", (uint8_t *)&buf, 0x22u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x3432ECLL);
  }
  _Unwind_Resume(a1);
}

caulk::concurrent::message **sub_3435BC(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = off_634AC0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24))(caulk::alloc::realtime_safe_resource, v2, 48, 8);
  return a1;
}

void sub_343654(caulk::concurrent::message *this)
{
  *(void *)this = off_634AC0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_3436C4(caulk::concurrent::message *this)
{
  *(void *)this = off_634AC0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void sub_343720(caulk::concurrent::message *this)
{
  *(void *)this = off_634AC0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_343790(caulk::concurrent::message *this)
{
  *(void *)this = off_634AC0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void sub_3437EC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_3437FC(uint64_t a1)
{
  sub_343834(a1);

  operator delete();
}

uint64_t sub_343834(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 80) == 1)
  {
    uint64_t v2 = sub_32A48(16);
    uint64_t v3 = sub_32A48(24);
    char v4 = 0;
    uint64_t v5 = 0;
    *(void *)uint64_t v24 = 0x100000002;
    uint64_t v6 = *(void *)(v2 + 8);
    while (1)
    {
      uint64_t v7 = *(int *)&v24[4 * v5];
      char v8 = v4;
      if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
        break;
      }
      char v4 = 1;
      uint64_t v5 = 1;
      if (v8) {
        goto LABEL_8;
      }
    }
    if ((v6 & v7) == 0) {
      uint64_t v2 = v3;
    }
LABEL_8:
    uint64_t v9 = *(NSObject **)v2;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v24 = 136315394;
      *(void *)&void v24[4] = "OrientationIODelegate.cpp";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 36;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Unexpectedly deleted while still registered for Device Orientatino Updates, unregistering", v24, 0x12u);
    }
    unint64_t v10 = *(uint64_t (**)(void))(a1 + 104);
    uint64_t v11 = (void *)(a1 + 24);
    if (*(char *)(a1 + 47) >= 0) {
      uint64_t v12 = (char *)(a1 + 24);
    }
    else {
      uint64_t v12 = *(char **)(a1 + 24);
    }
    sub_5834(v24, v12);
    int v13 = v10(*(void *)&v24[8]);
    sub_49A90(v24);
    if (v13)
    {
      uint64_t v14 = sub_32A48(16);
      uint64_t v15 = sub_32A48(24);
      char v16 = 0;
      uint64_t v17 = 0;
      *(void *)uint64_t v24 = 0x100000002;
      uint64_t v18 = *(void *)(v14 + 8);
      while (1)
      {
        uint64_t v19 = *(int *)&v24[4 * v17];
        char v20 = v16;
        if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
          break;
        }
        char v16 = 1;
        uint64_t v17 = 1;
        if (v20) {
          goto LABEL_21;
        }
      }
      if ((v18 & v19) == 0) {
        uint64_t v14 = v15;
      }
LABEL_21:
      int v21 = *(NSObject **)v14;
      if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a1 + 47) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t v24 = 136315906;
        *(void *)&void v24[4] = "OrientationIODelegate.cpp";
        *(_WORD *)&v24[12] = 1024;
        *(_DWORD *)&v24[14] = 38;
        __int16 v25 = 1024;
        int v26 = v13;
        __int16 v27 = 2080;
        unint64_t v28 = v11;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed [%d] to unregister %s for Device Orientation Updates", v24, 0x22u);
      }
    }
  }
  sub_1BA75C((void *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  unint64_t v22 = *(std::__shared_weak_count **)(a1 + 16);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  return a1;
}

void sub_343ABC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_343AD0(uint64_t a1)
{
  return sub_343834(a1 + 24);
}

void sub_343AD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_634A60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_343B2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_634A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_343B4C(int a1)
{
  if (a1 == 5)
  {
    long long v136 = *(_OWORD *)"1imi2imi3imi4imi5imi wargcrvccahgsmvivpvcvmiovpvcomicgpvtcmgcvmrplminkpstmsmmacmpcts";
    LODWORD(v137) = 1768778037;
    sub_72300(&v118, (__int32 *)&v136, 5);
    goto LABEL_5;
  }
  if (a1 == 4)
  {
    long long v136 = xmmword_4E7B70;
    sub_72300(&v118, (__int32 *)&v136, 4);
LABEL_5:
    uint64_t v2 = v118;
    uint64_t v1 = v119;
    goto LABEL_7;
  }
  uint64_t v2 = 0;
  uint64_t v1 = 0;
LABEL_7:
  std::string __p = 0;
  unint64_t v84 = 0;
  uint64_t v85 = 0;
  sub_46B38(&__p, v2, (uint64_t)v1, (v1 - (unsigned char *)v2) >> 2);
  sub_857F4((uint64_t)&qword_65CE30, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v84 = __p;
    operator delete(__p);
  }
  int v108 = 0;
  uint64_t v109 = 0;
  uint64_t v110 = 0;
  sub_46B38(&v108, (const void *)qword_65CE88, qword_65CE90[0], (qword_65CE90[0] - qword_65CE88) >> 2);
  uint64_t v3 = (char *)operator new(0x18uLL);
  v107[1] = v3 + 24;
  v107[2] = v3 + 24;
  qmemcpy(v3, "ivpvovpvcgpvcvmrgcrvgsmv", 24);
  v107[0] = v3;
  char v4 = (char *)operator new(0xCuLL);
  v106[1] = v4 + 12;
  CFTypeRef v106[2] = v4 + 12;
  qmemcpy(v4, " wargcrvgsmv", 12);
  v106[0] = v4;
  uint64_t v5 = operator new(8uLL);
  v105[0] = v5;
  *uint64_t v5 = 0x766D736776726367;
  v105[1] = v5 + 1;
  v105[2] = v5 + 1;
  uint64_t v6 = (char *)operator new(0x40uLL);
  v104[1] = v6 + 64;
  v104[2] = v6 + 64;
  qmemcpy(v6, " wargcrvccahgsmvivpvcvmiovpvcomicgpvtcmgcvmrplminkpstmsmmacmpcts", 64);
  v104[0] = v6;
  sub_72384((uint64_t)&v118, 1953460273, (uint64_t)&v108, 1869442665, -1, (uint64_t)v107);
  sub_72384((uint64_t)&v136, 1650811245, (uint64_t)&v108, 1935827812, 1, (uint64_t)v106);
  sub_72384((uint64_t)&v112, 1650811245, (uint64_t)&v108, 1668441188, 0, (uint64_t)v106);
  sub_72384((uint64_t)&v131, 1937007986, (uint64_t)&v108, 1937007986, 0, (uint64_t)v104);
  sub_72384((uint64_t)&v99, 1937007986, (uint64_t)&v108, 1937007986, 1, (uint64_t)v104);
  sub_72384((uint64_t)&v94, 1634495520, (uint64_t)&qword_65CE88, 1852796517, -1, (uint64_t)v105);
  LODWORD(v123) = v112;
  std::string::size_type v125 = 0;
  uint64_t v126 = 0;
  uint64_t v124 = 0;
  sub_46B38(&v124, v113, (uint64_t)v114, (v114 - (unsigned char *)v113) >> 2);
  uint64_t v127 = v115;
  int v128 = 0;
  uint64_t v130 = 0;
  long long v129 = 0;
  sub_46B38(&v128, v116, (uint64_t)v117, (v117 - (unsigned char *)v116) >> 2);
  unint64_t v91 = 0;
  uint64_t v92 = 0;
  unint64_t v93 = 0;
  UInt32 v88 = (void **)&v91;
  LOBYTE(v89) = 0;
  unint64_t v91 = (char *)operator new(0x40uLL);
  uint64_t v92 = (uint64_t)v91;
  unint64_t v93 = v91 + 64;
  uint64_t v92 = sub_726E8((uint64_t)&v123, (uint64_t)&v131, (uint64_t)v91);
  if (v128)
  {
    long long v129 = v128;
    operator delete(v128);
  }
  if (v124)
  {
    std::string::size_type v125 = v124;
    operator delete(v124);
  }
  LODWORD(v123) = v136;
  std::string::size_type v125 = 0;
  uint64_t v126 = 0;
  uint64_t v124 = 0;
  sub_46B38(&v124, *((const void **)&v136 + 1), v137, (v137 - *((void *)&v136 + 1)) >> 2);
  uint64_t v127 = v138;
  int v128 = 0;
  uint64_t v130 = 0;
  long long v129 = 0;
  sub_46B38(&v128, v139, (uint64_t)v140, (v140 - (unsigned char *)v139) >> 2);
  UInt32 v88 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  int v86 = &v88;
  char v87 = 0;
  UInt32 v88 = (void **)operator new(0x40uLL);
  uint64_t v89 = (uint64_t)v88;
  uint64_t v90 = v88 + 8;
  uint64_t v89 = sub_726E8((uint64_t)&v123, (uint64_t)&v131, (uint64_t)v88);
  if (v128)
  {
    long long v129 = v128;
    operator delete(v128);
  }
  if (v124)
  {
    std::string::size_type v125 = v124;
    operator delete(v124);
  }
  if (MGGetBoolAnswer())
  {
    sub_7277C((uint64_t *)&v91, (uint64_t)&v131);
    sub_7277C((uint64_t *)&v88, (uint64_t)&v99);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65CF28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65CF28))
  {
    sub_7245C((uint64_t)&v123, (uint64_t)&v118);
    sub_724F8(&v86, (uint64_t)&v123, 1uLL);
    sub_7258C((uint64_t)&unk_65CEF0, 1835216945, 1835234416, 0, 1970303090, 1953460256, (uint64_t *)&v86);
    uint64_t v111 = &v86;
    sub_72620((void ***)&v111);
    sub_726A4(&v123);
    __cxa_guard_release(&qword_65CF28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65CF68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65CF68))
  {
    sub_7258C((uint64_t)&unk_65CF30, 1835216946, 1835229803, 0, 1970303090, 1650549611, (uint64_t *)&v88);
    __cxa_guard_release(&qword_65CF68);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65CFA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65CFA8))
  {
    sub_7258C((uint64_t)&unk_65CF70, 1835216947, 1835230834, 0, 1970303090, 1718775412, (uint64_t *)&v91);
    __cxa_guard_release(&qword_65CFA8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65CFE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65CFE8))
  {
    sub_7245C((uint64_t)&v123, (uint64_t)&v94);
    sub_724F8(&v86, (uint64_t)&v123, 1uLL);
    sub_72890((uint64_t)&unk_65CFB0, 1634495520, 1835229548, 1, (uint64_t *)&v86);
    uint64_t v111 = &v86;
    sub_72620((void ***)&v111);
    sub_726A4(&v123);
    __cxa_guard_release(&qword_65CFE8);
  }
  uint64_t v7 = qword_65CE38;
  if (qword_65CE38 >= (unint64_t)qword_65CE40)
  {
    uint64_t v9 = (qword_65CE38 - qword_65CE30) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v10 = (qword_65CE40 - qword_65CE30) >> 2;
    if (v10 <= v9 + 1) {
      unint64_t v10 = v9 + 1;
    }
    if ((unint64_t)(qword_65CE40 - qword_65CE30) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)sub_106EC(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = (void *)(v11 + 8 * v9);
    uint64_t v14 = v11 + 8 * v12;
    *int v13 = &unk_65CEF0;
    char v8 = v13 + 1;
    uint64_t v16 = qword_65CE30;
    uint64_t v15 = (char *)qword_65CE38;
    if (qword_65CE38 != qword_65CE30)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--int v13 = v17;
      }
      while (v15 != (char *)v16);
      uint64_t v15 = (char *)qword_65CE30;
    }
    qword_65CE30 = (uint64_t)v13;
    qword_65CE38 = (uint64_t)v8;
    qword_65CE40 = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *(void *)qword_65CE38 = &unk_65CEF0;
    char v8 = (void *)(v7 + 8);
  }
  qword_65CE38 = (uint64_t)v8;
  if ((unint64_t)v8 >= qword_65CE40)
  {
    uint64_t v19 = ((uint64_t)v8 - qword_65CE30) >> 3;
    if ((unint64_t)(v19 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v20 = (qword_65CE40 - qword_65CE30) >> 2;
    if (v20 <= v19 + 1) {
      unint64_t v20 = v19 + 1;
    }
    if ((unint64_t)(qword_65CE40 - qword_65CE30) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      unint64_t v21 = (unint64_t)sub_106EC(v21);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (void *)(v21 + 8 * v19);
    uint64_t v24 = v21 + 8 * v22;
    *uint64_t v23 = &unk_65CF30;
    uint64_t v18 = v23 + 1;
    uint64_t v26 = qword_65CE30;
    __int16 v25 = (char *)qword_65CE38;
    if (qword_65CE38 != qword_65CE30)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v23 = v27;
      }
      while (v25 != (char *)v26);
      __int16 v25 = (char *)qword_65CE30;
    }
    qword_65CE30 = (uint64_t)v23;
    qword_65CE38 = (uint64_t)v18;
    qword_65CE40 = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *char v8 = &unk_65CF30;
    uint64_t v18 = v8 + 1;
  }
  qword_65CE38 = (uint64_t)v18;
  if ((unint64_t)v18 >= qword_65CE40)
  {
    uint64_t v29 = ((uint64_t)v18 - qword_65CE30) >> 3;
    if ((unint64_t)(v29 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v30 = (qword_65CE40 - qword_65CE30) >> 2;
    if (v30 <= v29 + 1) {
      unint64_t v30 = v29 + 1;
    }
    if ((unint64_t)(qword_65CE40 - qword_65CE30) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v31 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v31 = v30;
    }
    if (v31) {
      unint64_t v31 = (unint64_t)sub_106EC(v31);
    }
    else {
      uint64_t v32 = 0;
    }
    __int16 v33 = (void *)(v31 + 8 * v29);
    uint64_t v34 = v31 + 8 * v32;
    void *v33 = &unk_65CF70;
    unint64_t v28 = v33 + 1;
    uint64_t v36 = qword_65CE30;
    int v35 = (char *)qword_65CE38;
    if (qword_65CE38 != qword_65CE30)
    {
      do
      {
        uint64_t v37 = *((void *)v35 - 1);
        v35 -= 8;
        *--__int16 v33 = v37;
      }
      while (v35 != (char *)v36);
      int v35 = (char *)qword_65CE30;
    }
    qword_65CE30 = (uint64_t)v33;
    qword_65CE38 = (uint64_t)v28;
    qword_65CE40 = v34;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *uint64_t v18 = &unk_65CF70;
    unint64_t v28 = v18 + 1;
  }
  qword_65CE38 = (uint64_t)v28;
  if ((unint64_t)v28 >= qword_65CE40)
  {
    uint64_t v39 = ((uint64_t)v28 - qword_65CE30) >> 3;
    if ((unint64_t)(v39 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v40 = (qword_65CE40 - qword_65CE30) >> 2;
    if (v40 <= v39 + 1) {
      unint64_t v40 = v39 + 1;
    }
    if ((unint64_t)(qword_65CE40 - qword_65CE30) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v40;
    }
    if (v41) {
      unint64_t v41 = (unint64_t)sub_106EC(v41);
    }
    else {
      uint64_t v42 = 0;
    }
    BOOL v43 = (void *)(v41 + 8 * v39);
    uint64_t v44 = v41 + 8 * v42;
    *BOOL v43 = &unk_65CFB0;
    uint64_t v38 = (uint64_t)(v43 + 1);
    uint64_t v46 = qword_65CE30;
    uint64_t v45 = (char *)qword_65CE38;
    if (qword_65CE38 != qword_65CE30)
    {
      do
      {
        uint64_t v47 = *((void *)v45 - 1);
        v45 -= 8;
        *--BOOL v43 = v47;
      }
      while (v45 != (char *)v46);
      uint64_t v45 = (char *)qword_65CE30;
    }
    qword_65CE30 = (uint64_t)v43;
    qword_65CE38 = v38;
    qword_65CE40 = v44;
    if (v45) {
      operator delete(v45);
    }
  }
  else
  {
    *unint64_t v28 = &unk_65CFB0;
    uint64_t v38 = (uint64_t)(v28 + 1);
  }
  qword_65CE38 = v38;
  qword_65CE48 = (uint64_t)&unk_65CEF0;
  uint64_t v48 = (char *)v108;
  uint64_t v49 = v109;
  unint64_t v50 = (v109 - (uint64_t)v108) >> 2;
  sub_6720C((char *)&qword_65CE90[2], (char *)v108, v109, v50);
  sub_6720C((char *)qword_65CEB8, v48, v49, v50);
  sub_6720C((char *)&qword_65CEC0[2], (char *)qword_65CEB8[0], qword_65CEC0[0], (qword_65CEC0[0] - qword_65CEB8[0]) >> 2);
  unint64_t v123 = &v88;
  sub_72620((void ***)&v123);
  unint64_t v123 = (void ***)&v91;
  sub_72620((void ***)&v123);
  if (v97)
  {
    unint64_t v98 = v97;
    operator delete(v97);
  }
  if (v95)
  {
    unint64_t v96 = v95;
    operator delete(v95);
  }
  if (v102)
  {
    unint64_t v103 = v102;
    operator delete(v102);
  }
  if (v100)
  {
    __int16 v101 = v100;
    operator delete(v100);
  }
  if (v134)
  {
    int v135 = v134;
    operator delete(v134);
  }
  if (v132)
  {
    uint64_t v133 = v132;
    operator delete(v132);
  }
  if (v116)
  {
    int v117 = v116;
    operator delete(v116);
  }
  if (v113)
  {
    unint64_t v114 = v113;
    operator delete(v113);
  }
  if (v139)
  {
    uint64_t v140 = v139;
    operator delete(v139);
  }
  if (*((void *)&v136 + 1))
  {
    uint64_t v137 = *((void *)&v136 + 1);
    operator delete(*((void **)&v136 + 1));
  }
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
  if (v119)
  {
    uint64_t v120 = v119;
    operator delete(v119);
  }
  if (v104[0]) {
    operator delete(v104[0]);
  }
  if (v105[0]) {
    operator delete(v105[0]);
  }
  if (v106[0]) {
    operator delete(v106[0]);
  }
  if (v107[0]) {
    operator delete(v107[0]);
  }
  if (v48) {
    operator delete(v48);
  }
  __int16 v99 = 0;
  long long v100 = 0;
  __int16 v101 = 0;
  sub_46B38(&v99, (const void *)qword_65CE88, qword_65CE90[0], (qword_65CE90[0] - qword_65CE88) >> 2);
  int64_t v51 = operator new(8uLL);
  void *v51 = 0x726D76637670766FLL;
  char v95 = v51 + 1;
  unint64_t v96 = v51 + 1;
  uint64_t v94 = v51;
  sub_72384((uint64_t)&v118, 1650811245, (uint64_t)&v99, 1935827812, 1, (uint64_t)&v94);
  sub_72384((uint64_t)&v136, 1650811245, (uint64_t)&v99, 1668441188, 0, (uint64_t)&v94);
  sub_72384((uint64_t)&v112, 1634495520, (uint64_t)&v99, 1852796517, -1, (uint64_t)&v94);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65D028, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65D028))
  {
    sub_7245C((uint64_t)&v131, (uint64_t)&v118);
    sub_724F8(&v123, (uint64_t)&v131, 1uLL);
    sub_7258C((uint64_t)&unk_65CFF0, 1835216946, 1835229803, 0, 1970303090, 1650549611, (uint64_t *)&v123);
    int v108 = (void **)&v123;
    sub_72620(&v108);
    sub_726A4(&v131);
    __cxa_guard_release(&qword_65D028);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65D068, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65D068))
  {
    sub_7245C((uint64_t)&v131, (uint64_t)&v136);
    sub_724F8(&v123, (uint64_t)&v131, 1uLL);
    sub_7258C((uint64_t)&unk_65D030, 1835216947, 1835230834, 0, 1970303090, 1718775412, (uint64_t *)&v123);
    int v108 = (void **)&v123;
    sub_72620(&v108);
    sub_726A4(&v131);
    __cxa_guard_release(&qword_65D068);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65D0A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65D0A8))
  {
    sub_7245C((uint64_t)&v131, (uint64_t)&v112);
    sub_724F8(&v123, (uint64_t)&v131, 1uLL);
    sub_72890((uint64_t)&unk_65D070, 1634495520, 1835229548, 2, (uint64_t *)&v123);
    int v108 = (void **)&v123;
    sub_72620(&v108);
    sub_726A4(&v131);
    __cxa_guard_release(&qword_65D0A8);
  }
  uint64_t v52 = qword_65CE58;
  if (qword_65CE58 >= (unint64_t)qword_65CE60)
  {
    uint64_t v54 = (qword_65CE58 - qword_65CE50) >> 3;
    if ((unint64_t)(v54 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v55 = (qword_65CE60 - qword_65CE50) >> 2;
    if (v55 <= v54 + 1) {
      unint64_t v55 = v54 + 1;
    }
    if ((unint64_t)(qword_65CE60 - qword_65CE50) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v56 = v55;
    }
    if (v56) {
      unint64_t v56 = (unint64_t)sub_106EC(v56);
    }
    else {
      uint64_t v57 = 0;
    }
    unint64_t v58 = (void *)(v56 + 8 * v54);
    *unint64_t v58 = &unk_65CFF0;
    int64_t v53 = v58 + 1;
    uint64_t v59 = v56 + 8 * v57;
    uint64_t v61 = qword_65CE50;
    uint64_t v60 = (char *)qword_65CE58;
    if (qword_65CE58 != qword_65CE50)
    {
      do
      {
        uint64_t v62 = *((void *)v60 - 1);
        v60 -= 8;
        *--unint64_t v58 = v62;
      }
      while (v60 != (char *)v61);
      uint64_t v60 = (char *)qword_65CE50;
    }
    qword_65CE50 = (uint64_t)v58;
    qword_65CE58 = (uint64_t)v53;
    qword_65CE60 = v59;
    if (v60) {
      operator delete(v60);
    }
  }
  else
  {
    *(void *)qword_65CE58 = &unk_65CFF0;
    int64_t v53 = (void *)(v52 + 8);
  }
  qword_65CE58 = (uint64_t)v53;
  if ((unint64_t)v53 >= qword_65CE60)
  {
    uint64_t v64 = ((uint64_t)v53 - qword_65CE50) >> 3;
    if ((unint64_t)(v64 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v65 = (qword_65CE60 - qword_65CE50) >> 2;
    if (v65 <= v64 + 1) {
      unint64_t v65 = v64 + 1;
    }
    if ((unint64_t)(qword_65CE60 - qword_65CE50) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v66 = v65;
    }
    if (v66) {
      unint64_t v66 = (unint64_t)sub_106EC(v66);
    }
    else {
      uint64_t v67 = 0;
    }
    int v68 = (void *)(v66 + 8 * v64);
    *int v68 = &unk_65D030;
    uint64_t v63 = v68 + 1;
    uint64_t v69 = v66 + 8 * v67;
    uint64_t v71 = qword_65CE50;
    uint64_t v70 = (char *)qword_65CE58;
    if (qword_65CE58 != qword_65CE50)
    {
      do
      {
        uint64_t v72 = *((void *)v70 - 1);
        v70 -= 8;
        *--int v68 = v72;
      }
      while (v70 != (char *)v71);
      uint64_t v70 = (char *)qword_65CE50;
    }
    qword_65CE50 = (uint64_t)v68;
    qword_65CE58 = (uint64_t)v63;
    qword_65CE60 = v69;
    if (v70) {
      operator delete(v70);
    }
  }
  else
  {
    void *v53 = &unk_65D030;
    uint64_t v63 = v53 + 1;
  }
  qword_65CE58 = (uint64_t)v63;
  if ((unint64_t)v63 >= qword_65CE60)
  {
    uint64_t v74 = ((uint64_t)v63 - qword_65CE50) >> 3;
    if ((unint64_t)(v74 + 1) >> 61) {
      sub_60548();
    }
    unint64_t v75 = (qword_65CE60 - qword_65CE50) >> 2;
    if (v75 <= v74 + 1) {
      unint64_t v75 = v74 + 1;
    }
    if ((unint64_t)(qword_65CE60 - qword_65CE50) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v76 = v75;
    }
    if (v76) {
      unint64_t v76 = (unint64_t)sub_106EC(v76);
    }
    else {
      uint64_t v77 = 0;
    }
    int v78 = (void *)(v76 + 8 * v74);
    *int v78 = &unk_65D070;
    uint64_t v73 = (uint64_t)(v78 + 1);
    uint64_t v79 = v76 + 8 * v77;
    uint64_t v81 = qword_65CE50;
    UInt32 v80 = (char *)qword_65CE58;
    if (qword_65CE58 != qword_65CE50)
    {
      do
      {
        uint64_t v82 = *((void *)v80 - 1);
        v80 -= 8;
        *--int v78 = v82;
      }
      while (v80 != (char *)v81);
      UInt32 v80 = (char *)qword_65CE50;
    }
    qword_65CE50 = (uint64_t)v78;
    qword_65CE58 = v73;
    qword_65CE60 = v79;
    if (v80) {
      operator delete(v80);
    }
  }
  else
  {
    *uint64_t v63 = &unk_65D070;
    uint64_t v73 = (uint64_t)(v63 + 1);
  }
  qword_65CE58 = v73;
  qword_65CE68 = (uint64_t)&unk_65D030;
  if (v116)
  {
    int v117 = v116;
    operator delete(v116);
  }
  if (v113)
  {
    unint64_t v114 = v113;
    operator delete(v113);
  }
  if (v139)
  {
    uint64_t v140 = v139;
    operator delete(v139);
  }
  if (*((void *)&v136 + 1))
  {
    uint64_t v137 = *((void *)&v136 + 1);
    operator delete(*((void **)&v136 + 1));
  }
  if (v121)
  {
    uint64_t v122 = v121;
    operator delete(v121);
  }
  if (v119)
  {
    uint64_t v120 = v119;
    operator delete(v119);
  }
  if (v94) {
    operator delete(v94);
  }
  if (v99) {
    operator delete(v99);
  }
  if (v2) {
    operator delete(v2);
  }
}

void sub_344B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  sub_72620((void ***)&a49);
  sub_726A4((void *)(v62 - 208));
  __cxa_guard_abort(&qword_65D0A8);
  sub_726A4(&a53);
  sub_726A4((void *)(v62 - 144));
  sub_726A4(&a61);
  if (a21) {
    operator delete(a21);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_72960((uint64_t)&qword_65CE30);
  if (v61) {
    operator delete(v61);
  }
  _Unwind_Resume(a1);
}

void sub_344E94(int a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65CEE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65CEE8))
  {
    sub_343B4C(a1);
    __cxa_guard_release(&qword_65CEE8);
  }
}

void sub_344F08(_Unwind_Exception *a1)
{
}

uint64_t sub_344F20(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 216) * a2);
}

uint64_t sub_344F2C(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 216);
}

uint64_t sub_344F38(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 176) * a2);
}

uint64_t sub_344F44(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 176);
}

uint64_t sub_344F50(uint64_t result, uint64_t a2)
{
  *(void *)(result + 280) = a2;
  return result;
}

uint64_t sub_344F58(uint64_t a1)
{
  return *(void *)(a1 + 280);
}

BOOL sub_344F60(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1819304813;
}

uint64_t sub_344F78(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t sub_344F80@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 24);
  *a2 = *(void *)(result + 16);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

std::string *sub_344F9C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  sub_259A4(&v25, v4);
  uint64_t v5 = std::string::insert(&v25, 0, "virtual fmt: ", 0xDuLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v26, "; ", 2uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v28 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (v28 >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if (v28 >= 0) {
    std::string::size_type v10 = HIBYTE(v28);
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v9, v10);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  sub_259A4(&v25, v11);
  uint64_t v12 = std::string::insert(&v25, 0, "nonvirt fmt: ", 0xDuLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v26, "; ", 2uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v28 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v28 >= 0) {
    uint64_t v16 = __p;
  }
  else {
    uint64_t v16 = (void **)__p[0];
  }
  if (v28 >= 0) {
    std::string::size_type v17 = HIBYTE(v28);
  }
  else {
    std::string::size_type v17 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 136))(__p, a1);
  if (__p[1])
  {
    uint64_t v18 = std::__shared_weak_count::lock((std::__shared_weak_count *)__p[1]);
    if (v18) {
      uint64_t v19 = (os_unfair_lock_s *)__p[0];
    }
    else {
      uint64_t v19 = 0;
    }
    if (__p[1]) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[1]);
    }
    if (v19)
    {
      sub_4F64((uint64_t)&v26, v19 + 2);
      goto LABEL_35;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  sub_21C8C(&v26, "null");
LABEL_35:
  unint64_t v20 = std::string::insert(&v26, 0, "virtual stream: ", 0x10uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  int64_t v28 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (v28 >= 0) {
    uint64_t v22 = __p;
  }
  else {
    uint64_t v22 = (void **)__p[0];
  }
  if (v28 >= 0) {
    std::string::size_type v23 = HIBYTE(v28);
  }
  else {
    std::string::size_type v23 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v18) {
    sub_4636C(v18);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_3452C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v29) {
    sub_4636C(v29);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_345380(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 64) * a2);
}

uint64_t sub_34538C(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 64);
}

uint64_t sub_345398(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 104) * a2);
}

uint64_t sub_3453A4(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 104);
}

uint64_t sub_3453B0(uint64_t a1)
{
  return a1 + 192;
}

uint64_t sub_3453B8(uint64_t a1)
{
  return a1 + 152;
}

uint64_t sub_3453C0(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t sub_3453C8(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t sub_3453D0(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_3453D8(uint64_t a1)
{
  return a1 + 40;
}

BOOL sub_3453E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  return v1
      && (*(unsigned char *)(v1 + 448) || *(void *)(v1 + 584) || *(void *)(v1 + 672))
      && *(_DWORD *)(a1 + 48) == 1819304813;
}

uint64_t sub_345420(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_345428(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 16);
      if (!v5) {
        goto LABEL_48;
      }
      int v6 = sub_51340(*(void *)(a1 + 16), a1 + 80);
      if (v6)
      {
        unint64_t v56 = (os_log_t *)sub_32A48(13);
        uint64_t v57 = *v56;
        if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 177;
          unint64_t v58 = "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Stream::GetCurrentHALIOProcFormat() returned an error.\"";
LABEL_56:
          _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, v58, buf, 0x12u);
        }
      }
      else
      {
        uint64_t v7 = (long long *)(a1 + 40);
        int v6 = sub_513F8(v5, a1 + 40);
        if (!v6)
        {
          if (*(_DWORD *)(a1 + 48) == 1819304813 && *(_DWORD *)(a1 + 88) == 1819304813)
          {
            long long v8 = *(std::__shared_weak_count **)(a1 + 24);
            if (v8)
            {
              long long v8 = std::__shared_weak_count::lock(v8);
              uint64_t v9 = v8;
              if (v8) {
                long long v8 = *(std::__shared_weak_count **)(a1 + 16);
              }
            }
            else
            {
              uint64_t v9 = 0;
            }
            double v10 = (double)sub_31AE40((uint64_t)v8);
            double v11 = *(double *)(a1 + 80);
            if (v9) {
              sub_4636C(v9);
            }
            double v12 = v10 / v11;
            if (*(unsigned char *)(a1 + 272))
            {
              char v13 = sub_31B098(v5);
              uint64_t v14 = (_OWORD *)(a1 + 232);
              uint64_t v15 = *(void *)(a1 + 32);
              if (v13)
              {
                long long v16 = *(_OWORD *)(a1 + 56);
                long long v67 = *v7;
                long long v68 = v16;
                *(void *)uint64_t v69 = *(void *)(a1 + 72);
                if (!*(unsigned char *)(a1 + 272)) {
                  sub_7F218();
                }
                long long v17 = *(_OWORD *)(a1 + 248);
                *(_OWORD *)&v69[8] = *v14;
                *(_OWORD *)&v69[24] = v17;
                *(void *)&v69[40] = *(void *)(a1 + 264);
                uint64_t v18 = operator new(0x50uLL);
                unint64_t v65 = v18 + 5;
                unint64_t v66 = v18 + 5;
                long long v19 = *(_OWORD *)&v69[16];
                uint64_t v18[2] = *(_OWORD *)v69;
                v18[3] = v19;
                v18[4] = *(_OWORD *)&v69[32];
                long long v20 = v68;
                *uint64_t v18 = v67;
                v18[1] = v20;
                std::string __p = v18;
                int v21 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)v15 + 136))(v15, a1 + 40, &__p, a1 + 80, v12);
              }
              else
              {
                long long v27 = *(_OWORD *)(a1 + 56);
                *(_OWORD *)buf = *v7;
                *(_OWORD *)&buf[16] = v27;
                *(void *)uint64_t v71 = *(void *)(a1 + 72);
                if (!*(unsigned char *)(a1 + 272)) {
                  sub_7F218();
                }
                long long v28 = *(_OWORD *)(a1 + 248);
                *(_OWORD *)&v71[8] = *v14;
                *(_OWORD *)&v71[24] = v28;
                *(void *)&v71[40] = *(void *)(a1 + 264);
                uint64_t v29 = operator new(0x50uLL);
                unint64_t v65 = v29 + 5;
                unint64_t v66 = v29 + 5;
                long long v30 = *(_OWORD *)&v71[16];
                _OWORD v29[2] = *(_OWORD *)v71;
                v29[3] = v30;
                v29[4] = *(_OWORD *)&v71[32];
                long long v31 = *(_OWORD *)&buf[16];
                *uint64_t v29 = *(_OWORD *)buf;
                v29[1] = v31;
                std::string __p = v29;
                int v21 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, double))(*(void *)v15 + 136))(v15, a1 + 80, &__p, a1 + 40, v12);
              }
              int v32 = v21;
              if (__p)
              {
                unint64_t v65 = __p;
                operator delete(__p);
              }
              if (!v32) {
                goto LABEL_36;
              }
              __int16 v33 = (os_log_t *)sub_32A48(16);
              uint64_t v34 = *v33;
              if (!*v33 || !os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR)) {
                goto LABEL_36;
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 194;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v32;
            }
            else
            {
              char v22 = sub_31B098(v5);
              uint64_t v23 = *(void *)(a1 + 32);
              if (v22)
              {
                uint64_t v24 = operator new(0x28uLL);
                *(void *)&buf[8] = (char *)v24 + 40;
                *(void *)&buf[16] = (char *)v24 + 40;
                long long v25 = *(_OWORD *)(a1 + 56);
                *uint64_t v24 = *v7;
                v24[1] = v25;
                *((void *)v24 + 4) = *(void *)(a1 + 72);
                *(void *)buf = v24;
                int v26 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, double))(*(void *)v23 + 136))(v23, a1 + 40, buf, a1 + 80, v12);
              }
              else
              {
                int v35 = operator new(0x28uLL);
                *(void *)&buf[8] = (char *)v35 + 40;
                *(void *)&buf[16] = (char *)v35 + 40;
                long long v36 = *(_OWORD *)(a1 + 56);
                *int v35 = *v7;
                v35[1] = v36;
                *((void *)v35 + 4) = *(void *)(a1 + 72);
                *(void *)buf = v35;
                int v26 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, double))(*(void *)v23 + 136))(v23, a1 + 80, buf, a1 + 40, v12);
              }
              int v37 = v26;
              if (*(void *)buf)
              {
                *(void *)&buf[8] = *(void *)buf;
                operator delete(*(void **)buf);
              }
              if (!v37) {
                goto LABEL_36;
              }
              uint64_t v38 = (os_log_t *)sub_32A48(16);
              uint64_t v34 = *v38;
              if (!*v38 || !os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR)) {
                goto LABEL_36;
              }
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 200;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v37;
            }
            _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting the DSP chain format", buf, 0x18u);
LABEL_36:
            uint64_t v39 = *(void *)(a1 + 32);
            if (*(unsigned char *)(v39 + 448) || *(void *)(v39 + 584) || *(void *)(v39 + 672))
            {
              sub_1B8B94(v39);
              sub_6330(*(void *)(a1 + 32));
              uint64_t v40 = *(void *)(a1 + 32);
              unint64_t v41 = *(_DWORD ***)(v40 + 984);
              uint64_t v42 = *(_DWORD ***)(v40 + 976);
              BOOL v43 = (_DWORD **)(v40 + 944);
              if (v41 != v42) {
                BOOL v43 = v42;
              }
              sub_12654((uint64_t)buf, *v43, 0);
              uint64_t v44 = (void *)(a1 + 120);
              sub_10CBC((unsigned int **)(a1 + 120), (uint64_t)buf);
              sub_1216C((unsigned int **)buf);
              uint64_t v45 = *(void *)(a1 + 32);
              uint64_t v46 = *(void *)(v45 + 984);
              uint64_t v47 = *(void *)(v45 + 976);
              uint64_t v48 = (_DWORD **)(v45 + 944);
              if (v46 != v47) {
                uint64_t v48 = (_DWORD **)(v46 - 16);
              }
              sub_12654((uint64_t)buf, *v48, 0);
              uint64_t v49 = (void *)(a1 + 136);
              sub_10CBC((unsigned int **)(a1 + 136), (uint64_t)buf);
              sub_1216C((unsigned int **)buf);
              if (!*v44 || !*(_DWORD *)*v44 || !*v49 || !*(_DWORD *)*v49)
              {
                uint64_t v61 = (os_log_t *)sub_32A48(13);
                uint64_t v62 = *v61;
                if (*v61)
                {
                  if (os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 217;
                    _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"DSP chain ABL should not be invalid if DSP processing is enabled\"", buf, 0x12u);
                  }
                }
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "DSP chain ABL should not be invalid if DSP processing is enabled");
              }
              uint64_t v50 = sub_D304(*(void *)(a1 + 32));
              long long v51 = *(_OWORD *)v50;
              long long v52 = *(_OWORD *)(v50 + 16);
              *(void *)(a1 + 184) = *(void *)(v50 + 32);
              *(_OWORD *)(a1 + 168) = v52;
              *(_OWORD *)(a1 + 152) = v51;
              uint64_t v53 = sub_F20C(*(void *)(a1 + 32));
              long long v54 = *(_OWORD *)v53;
              long long v55 = *(_OWORD *)(v53 + 16);
              *(void *)(a1 + 224) = *(void *)(v53 + 32);
              *(_OWORD *)(a1 + 192) = v54;
              *(_OWORD *)(a1 + 208) = v55;
            }
          }
LABEL_48:
          sub_4636C(v4);
          return;
        }
        uint64_t v59 = (os_log_t *)sub_32A48(13);
        uint64_t v57 = *v59;
        if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 179;
          unint64_t v58 = "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Stream::GetCurrentFormat() returned an error.\"";
          goto LABEL_56;
        }
      }
      uint64_t v60 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v60 = &off_6414D8;
      v60[2] = v6;
    }
  }
}

void sub_345B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4636C(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_345BEC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

void sub_345BF4(uint64_t a1)
{
  sub_345C2C(a1);

  operator delete();
}

uint64_t sub_345C2C(uint64_t a1)
{
  *(void *)a1 = off_634AE8;
  sub_1216C((unsigned int **)(a1 + 136));
  sub_1216C((unsigned int **)(a1 + 120));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_345C88(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_345C90(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    sub_7F218();
  }
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_345CB4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_345CBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_345CC4()
{
  return 0;
}

uint64_t sub_345CCC()
{
  return 0;
}

uint64_t sub_345CD4()
{
  return 1;
}

void sub_345CDC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  std::string::append(a2, "type: Pointer; ", 0xFuLL);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    uint64_t v4 = "yes";
  }
  else {
    uint64_t v4 = "no";
  }
  sub_21C8C(&v42, v4);
  uint64_t v5 = std::string::insert(&v42, 0, "on: ", 4uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v43, "; ", 2uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v44;
  }
  else {
    uint64_t v9 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v9, size);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  sub_259A4(&v42, v11);
  double v12 = std::string::insert(&v42, 0, "virtual fmt: ", 0xDuLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v43, "; ", 2uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v16 = &v44;
  }
  else {
    long long v16 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  sub_259A4(&v42, v18);
  long long v19 = std::string::insert(&v42, 0, "nonvirt fmt: ", 0xDuLL);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  int v21 = std::string::append(&v43, "; ", 2uLL);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = &v44;
  }
  else {
    uint64_t v23 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v23, v24);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  std::to_string(&v42, v25);
  int v26 = std::string::insert(&v42, 0, "client idx: ", 0xCuLL);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  long long v28 = std::string::append(&v43, "; ", 2uLL);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v30 = &v44;
  }
  else {
    long long v30 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v30, v31);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    unsigned int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
    std::to_string(&v44, v32);
  }
  else
  {
    sub_21C8C(&v44, "(none)");
  }
  std::operator+<char>();
  __int16 v33 = std::string::append(&v42, "; ", 2uLL);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v35 = &v43;
  }
  else {
    int v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = v43.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v35, v36);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1))
  {
    int v37 = (os_unfair_lock_s *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
    sub_4F64((uint64_t)&v42, v37 + 2);
  }
  else
  {
    sub_21C8C(&v42, "null");
  }
  uint64_t v38 = std::string::insert(&v42, 0, "physical device: ", 0x11uLL);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v40 = &v43;
  }
  else {
    uint64_t v40 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = v43.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v40, v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, " ]", 2uLL);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_3462D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3463C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 120))();
}

uint64_t sub_3463F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 112))();
}

uint64_t sub_346418(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 104))();
}

uint64_t sub_346440(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 96))();
}

uint64_t sub_346468(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 88))();
}

uint64_t sub_346490(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 80))();
}

uint64_t sub_3464B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 72))();
}

uint64_t sub_3464E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))();
}

uint64_t sub_346508(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 56))();
}

uint64_t sub_346530(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 48))();
}

uint64_t sub_346558(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 40))();
}

uint64_t sub_346580(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

uint64_t sub_3465AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))();
}

void sub_3465D4()
{
}

uint64_t sub_3465EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_3465F4()
{
  return 0;
}

uint64_t sub_3465FC()
{
  return 1;
}

uint64_t sub_346604()
{
  return 0;
}

std::string *sub_34660C@<X0>(void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  std::string::append(a2, "type: Hidden; ", 0xEuLL);
  if (a1[3] && ((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) != 0) {
    uint64_t v4 = "yes";
  }
  else {
    uint64_t v4 = "no";
  }
  sub_21C8C(&v24, v4);
  uint64_t v5 = std::string::insert(&v24, 0, "on: ", 4uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v25, "; ", 2uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v27 = v7->__r_.__value_.__r.__words[2];
  long long v26 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (v27 >= 0) {
    uint64_t v9 = (const std::string::value_type *)&v26;
  }
  else {
    uint64_t v9 = (const std::string::value_type *)v26;
  }
  if (v27 >= 0) {
    std::string::size_type v10 = HIBYTE(v27);
  }
  else {
    std::string::size_type v10 = *((void *)&v26 + 1);
  }
  std::string::append(a2, v9, v10);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  int v11 = (*(uint64_t (**)(void *))(*a1 + 160))(a1);
  std::to_string(&v24, v11);
  double v12 = std::string::insert(&v24, 0, "client idx: ", 0xCuLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v25, "; ", 2uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v27 = v14->__r_.__value_.__r.__words[2];
  long long v26 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v27 >= 0) {
    long long v16 = (const std::string::value_type *)&v26;
  }
  else {
    long long v16 = (const std::string::value_type *)v26;
  }
  if (v27 >= 0) {
    std::string::size_type v17 = HIBYTE(v27);
  }
  else {
    std::string::size_type v17 = *((void *)&v26 + 1);
  }
  std::string::append(a2, v16, v17);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((*(uint64_t (**)(void *))(*a1 + 184))(a1))
  {
    uint64_t v18 = (os_unfair_lock_s *)(*(uint64_t (**)(void *))(*a1 + 184))(a1);
    sub_4F64((uint64_t)&v25, v18 + 2);
  }
  else
  {
    sub_21C8C(&v25, "null");
  }
  long long v19 = std::string::insert(&v25, 0, "physical device: ", 0x11uLL);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  int64_t v27 = v19->__r_.__value_.__r.__words[2];
  long long v26 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (v27 >= 0) {
    uint64_t v21 = (const std::string::value_type *)&v26;
  }
  else {
    uint64_t v21 = (const std::string::value_type *)v26;
  }
  if (v27 >= 0) {
    std::string::size_type v22 = HIBYTE(v27);
  }
  else {
    std::string::size_type v22 = *((void *)&v26 + 1);
  }
  std::string::append(a2, v21, v22);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_346944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3469EC()
{
  return 0;
}

uint64_t sub_3469F4()
{
  return 0;
}

uint64_t sub_3469FC()
{
  return 0;
}

uint64_t sub_346A04()
{
  return 0;
}

uint64_t sub_346A0C()
{
  return 0;
}

uint64_t sub_346A14()
{
  return 0;
}

uint64_t sub_346A1C()
{
  return 0;
}

uint64_t sub_346A24()
{
  return 0;
}

uint64_t sub_346A2C()
{
  return 0;
}

uint64_t sub_346A34()
{
  return 0;
}

uint64_t sub_346A3C()
{
  return 0;
}

uint64_t sub_346A44()
{
  return 0;
}

void sub_346A50()
{
}

uint64_t sub_346A68(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 240) * a2);
}

uint64_t sub_346A74(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 240);
}

uint64_t sub_346A80(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 200) * a2);
}

uint64_t sub_346A8C(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 200);
}

uint64_t sub_346A98(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_346AA0()
{
  return 1;
}

uint64_t sub_346AA8()
{
  return 0;
}

uint64_t sub_346AB0()
{
  return 0;
}

void sub_346AB8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  std::string::append(a2, "type: Full; ", 0xCuLL);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    uint64_t v4 = "no";
  }
  else {
    uint64_t v4 = "yes";
  }
  sub_21C8C(&v42, v4);
  uint64_t v5 = std::string::insert(&v42, 0, "on: ", 4uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v43, "; ", 2uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v44;
  }
  else {
    uint64_t v9 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v9, size);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  sub_259A4(&v42, v11);
  double v12 = std::string::insert(&v42, 0, "virtual fmt: ", 0xDuLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v43, "; ", 2uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v16 = &v44;
  }
  else {
    long long v16 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  sub_259A4(&v42, v18);
  long long v19 = std::string::insert(&v42, 0, "nonvirt fmt: ", 0xDuLL);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  uint64_t v21 = std::string::append(&v43, "; ", 2uLL);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v23 = &v44;
  }
  else {
    uint64_t v23 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v23, v24);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  std::to_string(&v42, v25);
  long long v26 = std::string::insert(&v42, 0, "client idx: ", 0xCuLL);
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  long long v28 = std::string::append(&v43, "; ", 2uLL);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v30 = &v44;
  }
  else {
    long long v30 = (std::string *)v44.__r_.__value_.__r.__words[0];
  }
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = v44.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v30, v31);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 168))(a1))
  {
    unsigned int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
    std::to_string(&v44, v32);
  }
  else
  {
    sub_21C8C(&v44, "(none)");
  }
  std::operator+<char>();
  __int16 v33 = std::string::append(&v42, "; ", 2uLL);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v35 = &v43;
  }
  else {
    int v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v36 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v36 = v43.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v35, v36);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1))
  {
    int v37 = (os_unfair_lock_s *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
    sub_4F64((uint64_t)&v42, v37 + 2);
  }
  else
  {
    sub_21C8C(&v42, "null");
  }
  uint64_t v38 = std::string::insert(&v42, 0, "physical device: ", 0x11uLL);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v40 = &v43;
  }
  else {
    uint64_t v40 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = v43.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v40, v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, " ]", 2uLL);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_3470B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3471A4(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 88) * a2);
}

uint64_t sub_3471B0(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 88);
}

uint64_t sub_3471BC(uint64_t a1, int a2)
{
  return (*(_DWORD *)(a1 + 128) * a2);
}

uint64_t sub_3471C8(uint64_t a1, unsigned int a2)
{
  return a2 / *(_DWORD *)(a1 + 128);
}

uint64_t sub_3471D4(uint64_t a1)
{
  return a1 + 216;
}

uint64_t sub_3471DC(uint64_t a1)
{
  return a1 + 176;
}

uint64_t sub_3471E4(uint64_t a1)
{
  return *(void *)(a1 + 160);
}

uint64_t sub_3471EC(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t sub_3471F4(uint64_t a1)
{
  return a1 + 104;
}

uint64_t sub_3471FC(uint64_t a1)
{
  return a1 + 64;
}

BOOL sub_347204(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  return v1
      && (*(unsigned char *)(v1 + 448) || *(void *)(v1 + 584) || *(void *)(v1 + 672))
      && *(_DWORD *)(a1 + 72) == 1819304813;
}

uint64_t sub_347244(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

void sub_34724C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 40);
      if (!v5)
      {
LABEL_31:
        sub_4636C(v4);
        return;
      }
      int v6 = sub_51340(*(void *)(a1 + 40), a1 + 104);
      if (v6)
      {
        uint64_t v38 = (os_log_t *)sub_32A48(13);
        long long v39 = *v38;
        if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 530;
          uint64_t v40 = "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Stream::GetCurrentHALIOProcFormat() returned an error.\"";
LABEL_39:
          _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, v40, __p, 0x12u);
        }
      }
      else
      {
        uint64_t v7 = (_OWORD *)(a1 + 64);
        int v6 = sub_513F8(v5, a1 + 64);
        if (!v6)
        {
          if (*(_DWORD *)(a1 + 72) == 1819304813 && *(_DWORD *)(a1 + 112) == 1819304813)
          {
            long long v8 = *(std::__shared_weak_count **)(a1 + 48);
            if (v8)
            {
              long long v8 = std::__shared_weak_count::lock(v8);
              uint64_t v9 = v8;
              if (v8) {
                long long v8 = *(std::__shared_weak_count **)(a1 + 40);
              }
            }
            else
            {
              uint64_t v9 = 0;
            }
            unsigned int v10 = sub_31AE40((uint64_t)v8);
            double v11 = *(double *)(a1 + 104);
            if (v9) {
              sub_4636C(v9);
            }
            char v12 = sub_31B098(v5);
            double v13 = (double)v10 / v11;
            uint64_t v14 = *(void *)(a1 + 56);
            if (v12)
            {
              long long v15 = operator new(0x28uLL);
              *(void *)&__p[8] = (char *)v15 + 40;
              *(void *)&__p[16] = (char *)v15 + 40;
              long long v16 = *(_OWORD *)(a1 + 80);
              _OWORD *v15 = *v7;
              v15[1] = v16;
              *((void *)v15 + 4) = *(void *)(a1 + 96);
              *(void *)std::string __p = v15;
              int v17 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, double))(*(void *)v14 + 136))(v14, a1 + 64, __p, a1 + 104, v13);
            }
            else
            {
              uint64_t v18 = operator new(0x28uLL);
              *(void *)&__p[8] = (char *)v18 + 40;
              *(void *)&__p[16] = (char *)v18 + 40;
              long long v19 = *(_OWORD *)(a1 + 80);
              *uint64_t v18 = *v7;
              v18[1] = v19;
              *((void *)v18 + 4) = *(void *)(a1 + 96);
              *(void *)std::string __p = v18;
              int v17 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, double))(*(void *)v14 + 136))(v14, a1 + 104, __p, a1 + 64, v13);
            }
            int v20 = v17;
            if (*(void *)__p)
            {
              *(void *)&__p[8] = *(void *)__p;
              operator delete(*(void **)__p);
            }
            if (v20)
            {
              uint64_t v21 = (os_log_t *)sub_32A48(16);
              uint64_t v22 = *v21;
              if (*v21)
              {
                if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)std::string __p = 136315650;
                  *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
                  *(_WORD *)&unsigned char __p[12] = 1024;
                  *(_DWORD *)&__p[14] = 546;
                  *(_WORD *)&unsigned char __p[18] = 1024;
                  *(_DWORD *)&__p[20] = v20;
                  _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d setting the DSP chain format", __p, 0x18u);
                }
              }
            }
            uint64_t v23 = *(void *)(a1 + 56);
            if (*(unsigned char *)(v23 + 448) || *(void *)(v23 + 584) || *(void *)(v23 + 672))
            {
              sub_1B8B94(v23);
              sub_6330(*(void *)(a1 + 56));
              uint64_t v24 = *(void *)(a1 + 56);
              int v25 = *(_DWORD ***)(v24 + 984);
              long long v26 = *(_DWORD ***)(v24 + 976);
              long long v27 = (_DWORD **)(v24 + 944);
              if (v25 != v26) {
                long long v27 = v26;
              }
              sub_12654((uint64_t)__p, *v27, 0);
              sub_10CBC((unsigned int **)(a1 + 144), (uint64_t)__p);
              sub_1216C((unsigned int **)__p);
              uint64_t v28 = *(void *)(a1 + 56);
              uint64_t v29 = *(void *)(v28 + 984);
              uint64_t v30 = *(void *)(v28 + 976);
              std::string::size_type v31 = (_DWORD **)(v28 + 944);
              if (v29 != v30) {
                std::string::size_type v31 = (_DWORD **)(v29 - 16);
              }
              sub_12654((uint64_t)__p, *v31, 0);
              sub_10CBC((unsigned int **)(a1 + 160), (uint64_t)__p);
              sub_1216C((unsigned int **)__p);
              uint64_t v32 = sub_D304(*(void *)(a1 + 56));
              long long v33 = *(_OWORD *)v32;
              long long v34 = *(_OWORD *)(v32 + 16);
              *(void *)(a1 + 208) = *(void *)(v32 + 32);
              *(_OWORD *)(a1 + 176) = v33;
              *(_OWORD *)(a1 + 192) = v34;
              uint64_t v35 = sub_F20C(*(void *)(a1 + 56));
              long long v36 = *(_OWORD *)v35;
              long long v37 = *(_OWORD *)(v35 + 16);
              *(void *)(a1 + 248) = *(void *)(v35 + 32);
              *(_OWORD *)(a1 + 232) = v37;
              *(_OWORD *)(a1 + 216) = v36;
            }
          }
          goto LABEL_31;
        }
        std::string::size_type v41 = (os_log_t *)sub_32A48(13);
        long long v39 = *v41;
        if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 532;
          uint64_t v40 = "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Stream::GetCurrentFormat() returned an error.\"";
          goto LABEL_39;
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = v6;
    }
  }
}

void sub_3476B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  sub_4636C(v10);
  _Unwind_Resume(a1);
}

void sub_34772C(uint64_t a1)
{
  sub_347764(a1);

  operator delete();
}

uint64_t sub_347764(uint64_t a1)
{
  *(void *)a1 = off_634E38;
  sub_1216C((unsigned int **)(a1 + 160));
  sub_1216C((unsigned int **)(a1 + 144));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_3477C0(uint64_t a1, AudioBuffer *a2, _DWORD *a3, double *a4, unsigned int *a5, double *a6, uint64_t a7)
{
  uint64_t v170 = a7;
  unint64_t v175 = a6;
  uint64_t v176 = a4;
  int v169 = a2;
  uint64_t v9 = a1;
  if (!*(void *)(a1 + 456))
  {
    a1 = sub_32A48(13);
    uint64_t v46 = *(NSObject **)a1;
    if (*(void *)a1)
    {
      a1 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR);
      if (a1)
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Common2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 985;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The client IO proc must exist for IO to run.\"", (uint8_t *)&buf, 0x12u);
      }
    }
  }
  uint64_t v10 = *(void *)(v9 + 664);
  uint64_t v11 = *(void *)(v9 + 672);
  unint64_t v177 = a5;
  uint64_t v178 = a3;
  uint64_t v179 = v9;
  if (v10 != v11 && !*a3)
  {
    a1 = sub_32A48(13);
    uint64_t v47 = *(NSObject **)a1;
    a5 = v177;
    a3 = v178;
    uint64_t v9 = v179;
    if (*(void *)a1)
    {
      a1 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR);
      if (a1)
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Common2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 986;
        _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Input ClientStreamCache exists, but the IO proc claims it has no buffers.\"", (uint8_t *)&buf, 0x12u);
      }
    }
  }
  if (*(void *)(v9 + 688) != *(void *)(v9 + 696) && !*a5)
  {
    a1 = sub_32A48(13);
    uint64_t v48 = *(NSObject **)a1;
    a3 = v178;
    uint64_t v9 = v179;
    if (*(void *)a1)
    {
      a1 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR);
      if (a1)
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Common2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 987;
        _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Output ClientStreamCache exists, but the IO proc claims it has no buffers.\"", (uint8_t *)&buf, 0x12u);
      }
    }
  }
  uint64_t v12 = *(void *)(v9 + 664);
  uint64_t v13 = *(void *)(v9 + 672);
  if (*(unsigned char *)(v9 + 104))
  {
    *(int8x16_t *)(v9 + 88) = vextq_s8(*(int8x16_t *)(v9 + 88), *(int8x16_t *)(v9 + 88), 8uLL);
    *(unsigned char *)(v9 + 104) = 0;
  }
  if (v12 == v13)
  {
    LODWORD(v173) = 0;
    int v174 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = *(_DWORD **)(v9 + 760);
    if (*a3)
    {
      unint64_t v15 = 0;
      int v174 = 0;
      LODWORD(v173) = 0;
      std::string v171 = (AudioBuffer *)(v9 + 144);
      mBuffers = buf.mBuffers;
      while (1)
      {
        long long v16 = &a3[4 * v15];
        uint64_t v18 = *((void *)v16 + 2);
        int v17 = v16 + 4;
        if (!v18)
        {
          if (v15 < *v14)
          {
            int v25 = &v14[4 * v15];
            _OWORD v25[3] = 0;
            *((void *)v25 + 2) = 0;
          }
          goto LABEL_42;
        }
        uint64_t v19 = *(void *)(*(void *)(v9 + 712) + 8 * v15);
        if (v19) {
          break;
        }
LABEL_42:
        if (++v15 >= *a3) {
          goto LABEL_55;
        }
      }
      signed int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 160))(v19);
      UInt32 v21 = v20;
      if (v20 == -2)
      {
        int v22 = sub_23AC0();
        int v23 = (int)v173;
        if (!v22) {
          int v23 = v15;
        }
        LODWORD(v173) = v23;
        int v24 = v174;
        if (!v22) {
          int v24 = 1;
        }
        int v174 = v24;
        a1 = sub_23AC0();
        if (a1)
        {
          a3 = v178;
          uint64_t v9 = v179;
          if (*(unsigned char *)(v179 + 632))
          {
            unint64_t v158 = (os_log_t *)sub_32A48(13);
            double v159 = *v158;
            if (*v158)
            {
              if (os_log_type_enabled(*v158, OS_LOG_TYPE_ERROR))
              {
                buf.uint64_t mNumberBuffers = 136315394;
                *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Common2.cpp";
                LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
                *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 1107;
                _os_log_impl(&def_1E50E8, v159, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Siri ducking for speaker supported. Should not process telemetry in aggregate device\"", (uint8_t *)&buf, 0x12u);
              }
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Siri ducking for speaker supported. Should not process telemetry in aggregate device");
          }
          goto LABEL_42;
        }
      }
      else
      {
        long long v26 = *(unsigned int **)(*(void *)(v179 + 664) + 8 * v20);
        double v181 = 0;
        long long v27 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(*(void *)v26 + 64))(v26);
        int v180 = 0;
        double v181 = v27;
        int v180 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(*(void *)v26 + 72))(v26);
        uint64_t v28 = v26[72];
        uint64_t v29 = &v178[4 * v15];
        unsigned int v31 = v29[3];
        uint64_t v30 = v29 + 3;
        uint64_t v32 = (*(uint64_t (**)(uint64_t, void))(*(void *)v19 + 96))(v19, v31);
        long long v33 = (AudioBuffer *)(v17 - 1);
        if ((*(unsigned int (**)(unsigned int *))(*(void *)v26 + 152))(v26))
        {
          *(void *)&buf.uint64_t mNumberBuffers = 1;
          AudioBuffer *mBuffers = *v33;
          uint64_t v34 = *(void *)(v179 + 88);
          uint64_t v182 = 0;
          LODWORD(p_buf) = 1;
          HIDWORD(p_buf) = v21;
          if (v34) {
            sub_3FACA0(v34, &v182, (long long *)(v17 - 1), v32);
          }
          sub_269720((uint64_t)v171, v26[73], (uint64_t)&buf, v32, (uint64_t)v176);
        }
        if ((*(unsigned int (**)(unsigned int *))(*(void *)v26 + 40))(v26))
        {
          UInt32 v35 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v26 + 184))(v26, v32);
          int v36 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v26 + 120))(v26, v32);
          uint64_t mNumberBuffers = v181->mNumberBuffers;
          if (mNumberBuffers)
          {
            p_mDataByteSize = &v181->mBuffers[0].mDataByteSize;
            do
            {
              UInt32 *p_mDataByteSize = v35;
              p_mDataByteSize += 4;
              --mNumberBuffers;
            }
            while (mNumberBuffers);
          }
          UInt32 v39 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v26 + 200))(v26, v32);
          uint64_t v40 = v180->mNumberBuffers;
          if (v40)
          {
            std::string::size_type v41 = &v180->mBuffers[0].mDataByteSize;
            do
            {
              UInt32 *v41 = v39;
              v41 += 4;
              v14[4 * v28 + 3] = v36;
              LODWORD(v28) = v28 + 1;
              --v40;
            }
            while (v40);
          }
          std::string v42 = (OpaqueAudioConverter **)(*(uint64_t (**)(unsigned int *))(*(void *)v26 + 32))(v26);
          *(void *)&buf.uint64_t mNumberBuffers = 1;
          AudioBuffer *mBuffers = *v33;
          sub_5586C(v42[73], v32, &buf, v181);
          (*((void (**)(OpaqueAudioConverter **, double *, uint64_t, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v42
           + 18))(v42, v176, v32, 1, &v181, 1, &v180);
          std::string v43 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(*(void *)v26 + 160))(v26);
          sub_5586C(v42[84], v32, v180, v43);
          uint64_t v44 = *(void *)(v179 + 88);
          uint64_t v182 = 0;
          LODWORD(p_buf) = 2;
          HIDWORD(p_buf) = v21;
          if (v44) {
            sub_3FAE68(v44, &v182, (uint64_t)v43, v32, (uint64_t)*v176);
          }
          sub_269720((uint64_t)v171, v26[74], (uint64_t)v43, v32, (uint64_t)v176);
        }
        else
        {
          uint64_t v45 = &v14[4 * v28];
          uint64_t v45[3] = *v30;
          *((void *)v45 + 2) = *v17;
          a1 = (*(uint64_t (**)(unsigned int *))(*(void *)v26 + 152))(v26);
          uint64_t v9 = v179;
          if (!a1) {
            goto LABEL_41;
          }
          a1 = *(void *)(v179 + 88);
          *(void *)&buf.uint64_t mNumberBuffers = 0;
          buf.mBuffers[0].mNumberChannels = 2;
          buf.mBuffers[0].mDataByteSize = v21;
          if (!a1) {
            goto LABEL_41;
          }
          sub_3FACA0(a1, &buf, (long long *)&v14[4 * v28 + 2], v32);
        }
      }
      uint64_t v9 = v179;
LABEL_41:
      a3 = v178;
      goto LABEL_42;
    }
    LODWORD(v173) = 0;
    int v174 = 0;
  }
LABEL_55:
  uint64_t v49 = v179;
  uint64_t v50 = *(AudioBuffer **)(v179 + 688);
  std::string v171 = *(AudioBuffer **)(v179 + 696);
  mBuffers = v50;
  if (v50 == v171)
  {
    long long v51 = 0;
  }
  else
  {
    long long v51 = *(unsigned int **)(v179 + 776);
    long long v52 = v177;
    if (*v177)
    {
      for (unint64_t i = 0; i < *v52; ++i)
      {
        long long v54 = &v52[4 * i];
        uint64_t v56 = *((void *)v54 + 2);
        long long v55 = (uint64_t *)(v54 + 4);
        if (v56)
        {
          uint64_t v57 = *(void *)(*(void *)(v49 + 736) + 8 * i);
          if (v57)
          {
            unint64_t v58 = *(unsigned int **)(*(void *)(v179 + 688)
                                   + 8 * (*(int (**)(uint64_t))(*(void *)v57 + 160))(v57));
            uint64_t v59 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v58 + 64))(v58);
            uint64_t v60 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v58 + 72))(v58);
            unint64_t v61 = v58[72];
            a1 = (*(uint64_t (**)(unsigned int *))(*(void *)v58 + 40))(v58);
            uint64_t v62 = v177[4 * i + 3];
            if (a1)
            {
              uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v57 + 96))(v57, v62);
              int v64 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v58 + 184))(v58, v63);
              unsigned int v65 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v58 + 120))(v58, v63);
              uint64_t v66 = *v59;
              if (v66)
              {
                long long v67 = v59 + 3;
                do
                {
                  _DWORD *v67 = v64;
                  v67 += 4;
                  v51[4 * v61 + 3] = v65;
                  LODWORD(v61) = v61 + 1;
                  --v66;
                }
                while (v66);
              }
              a1 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v58 + 200))(v58, v63);
              uint64_t v68 = *v60;
              long long v52 = v177;
              uint64_t v49 = v179;
              if (v68)
              {
                uint64_t v69 = v60 + 3;
                do
                {
                  *uint64_t v69 = a1;
                  v69 += 4;
                  --v68;
                }
                while (v68);
              }
              continue;
            }
            v51[4 * v61 + 3] = v62;
            uint64_t v70 = *v55;
            long long v52 = v177;
            uint64_t v49 = v179;
            goto LABEL_71;
          }
        }
        else if (i < *v51)
        {
          uint64_t v70 = 0;
          v51[4 * i + 3] = 0;
          unint64_t v61 = i;
LABEL_71:
          *(void *)&v51[4 * v61 + 4] = v70;
        }
      }
    }
    if (!v51)
    {
      uint64_t v71 = (os_log_t *)sub_32A48(13);
      uint64_t v72 = *v71;
      if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "AggregateDevice_Common2.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 1190;
        _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"outputActive cannot be true while clientBufferList_Output is nullptr, and inversely.\"", (uint8_t *)&buf, 0x12u);
      }
      uint64_t v73 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v73, "outputActive cannot be true while clientBufferList_Output is nullptr, and inversely.");
    }
  }
  if (mBuffers == v171)
  {
    unint64_t v75 = 0;
    int v78 = 0;
  }
  else
  {
    size_t v74 = *v51;
    __chkstk_darwin(a1);
    unint64_t v75 = (char *)&v164 - ((v74 + 15) & 0x1FFFFFFF0);
    bzero(v75, v74);
    __chkstk_darwin(v76);
    int v78 = (BOOL *)((char *)&v164 - v77);
    bzero((char *)&v164 - v77, v79);
    uint64_t v80 = *v51;
    *int v78 = v80;
    if (v80)
    {
      unint64_t v81 = 0;
      uint64_t v82 = 16 * v80;
      do
      {
        *(_OWORD *)&v78[v81 / 4 + 2] = *(_OWORD *)&v51[v81 / 4 + 2];
        v81 += 16;
      }
      while (v82 != v81);
    }
  }
  uint64_t v83 = v179;
  if (*(unsigned char *)(v179 + 364)) {
    BOOL v84 = v14 == 0;
  }
  else {
    BOOL v84 = 1;
  }
  if (!v84 && *v14)
  {
    unint64_t v85 = 0;
    int v86 = (void **)(v14 + 4);
    do
    {
      bzero(*v86, *((unsigned int *)v86 - 1));
      ++v85;
      v86 += 2;
    }
    while (v85 < *v14);
  }
  BOOL v87 = mBuffers == v171;
  (*(void (**)(uint64_t, AudioBuffer *, _DWORD *, double *, _DWORD *, double *, void))(v83 + 456))(v170, v169, v14, v176, v78, v175, *(void *)(v83 + 464));
  if (v87) {
    goto LABEL_98;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)v179 + 448))(v179) & 1) == 0)
  {
    uint64_t v89 = v177;
    if (*v177)
    {
      unint64_t v90 = 0;
      unint64_t v91 = (void **)(v177 + 4);
      do
      {
        bzero(*v91, *((unsigned int *)v91 - 1));
        ++v90;
        v91 += 2;
      }
      while (v90 < *v89);
    }
LABEL_98:
    int v88 = 0;
    goto LABEL_99;
  }
  int v88 = 1;
LABEL_99:
  uint64_t v92 = v179;
  if (v78)
  {
    uint64_t v93 = *v78;
    if (v93)
    {
      uint64_t v94 = v78 + 3;
      char v95 = (BOOL *)v75;
      do
      {
        if (v88)
        {
          int v96 = *v94;
          BOOL *v95 = *v94 == 0;
          if (!v96) {
            goto LABEL_107;
          }
        }
        else
        {
          BOOL *v95 = 0;
        }
        *(_DWORD *)(v92 + 800) = 0;
LABEL_107:
        ++v95;
        v94 += 4;
        --v93;
      }
      while (v93);
    }
  }
  int v97 = v177;
  uint64_t v98 = v179;
  if (v88)
  {
    uint64_t v99 = *(void *)(v179 + 744);
    uint64_t v100 = *(void *)(v179 + 736);
    uint64_t v101 = v99 - v100;
    if (v99 == v100)
    {
LABEL_113:
      unsigned int v103 = 0;
    }
    else
    {
      uint64_t v102 = 0;
      unsigned int v103 = 0;
      unint64_t v104 = v101 >> 3;
      while (!*(void *)(v100 + 8 * v102))
      {
        uint64_t v102 = ++v103;
        if (v104 <= v103) {
          goto LABEL_113;
        }
      }
    }
    int v105 = (*(uint64_t (**)(void, void))(**(void **)(v100 + 8 * v103) + 96))(*(void *)(v100 + 8 * v103), v177[3]);
    if (!v105)
    {
      uint64_t v161 = (os_log_t *)sub_32A48(13);
      uint64_t v162 = *v161;
      if (*v161 && os_log_type_enabled(*v161, OS_LOG_TYPE_ERROR))
      {
        buf.uint64_t mNumberBuffers = 136315394;
        *(void *)(&buf.mNumberBuffers + 1) = "PolicyMute.cpp";
        LOWORD(buf.mBuffers[0].mDataByteSize) = 1024;
        *(UInt32 *)((char *)&buf.mBuffers[0].mDataByteSize + 2) = 132;
        _os_log_impl(&def_1E50E8, v162, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
      }
      unint64_t v163 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v163, "Precondition failure.");
    }
    uint64_t v98 = v179;
    unsigned int v106 = *(_DWORD *)(v179 + 800);
    int v97 = v177;
    if (v106 >> 6 < 0x177)
    {
      int v107 = 0;
    }
    else
    {
      if (v106 > v105 + 24000)
      {
        int v167 = 0;
        int v168 = 1;
LABEL_121:
        int v108 = *(_DWORD *)(v98 + 792);
        int v109 = *(_DWORD *)(v98 + 796);
        BOOL v110 = v109 == 728788340;
        if (v109 == 728788340) {
          int v111 = 3;
        }
        else {
          int v111 = 2;
        }
        if (v108 == 728788340) {
          BOOL v110 = v111;
        }
        LODWORD(mBuffers) = v110;
        unint64_t v112 = *v97;
        if (v112)
        {
          unint64_t v113 = 0;
          std::string v171 = (AudioBuffer *)(v98 + 792);
          BOOL v165 = v168 == 0;
          BOOL v115 = v108 == 728788340 && v109 == 728788340;
          BOOL v164 = v115;
          uint64_t v170 = v98 + 144;
          int v169 = buf.mBuffers;
          int v173 = (AudioBuffer *)&v178[4 * v173 + 2];
          uint64_t v166 = v75;
          do
          {
            uint64_t v116 = &v97[4 * v113];
            uint64_t v118 = *((void *)v116 + 2);
            int v117 = (void **)(v116 + 4);
            uint64_t v119 = *(void *)(v98 + 736);
            uint64_t v120 = *(void *)(v119 + 8 * v113);
            if (v118) {
              BOOL v121 = v120 == 0;
            }
            else {
              BOOL v121 = 1;
            }
            if (!v121)
            {
              LODWORD(v176) = (*(uint64_t (**)(void))(*(void *)v120 + 160))(*(void *)(v119 + 8 * v113));
              uint64_t v122 = *(unsigned int **)(*(void *)(v179 + 688) + 8 * (int)v176);
              double v181 = 0;
              unint64_t v123 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(*(void *)v122 + 64))(v122);
              int v180 = 0;
              double v181 = v123;
              int v180 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(*(void *)v122 + 72))(v122);
              uint64_t v124 = v122[72];
              std::string::size_type v125 = &v177[4 * v113];
              unsigned int v127 = v125[3];
              uint64_t v126 = v125 + 3;
              LODWORD(v178) = (*(uint64_t (**)(uint64_t, void))(*(void *)v120 + 96))(v120, v127);
              int v128 = (*(uint64_t (**)(unsigned int *))(*(void *)v122 + 40))(v122);
              uint64_t v129 = *(void *)v122;
              if (v128)
              {
                uint64_t v130 = (AudioBufferList *)(*(uint64_t (**)(unsigned int *))(v129 + 160))(v122);
              }
              else
              {
                uint64_t v131 = (*(uint64_t (**)(unsigned int *))(v129 + 48))(v122);
                if ((*(unsigned char *)(v131 + 12) & 0x20) != 0) {
                  unsigned int v132 = *(_DWORD *)(v131 + 28);
                }
                else {
                  unsigned int v132 = 1;
                }
                __chkstk_darwin(v131);
                uint64_t v130 = (AudioBufferList *)((char *)&v164 - v133);
                bzero((char *)&v164 - v133, v134);
                v130->uint64_t mNumberBuffers = v132;
                if (v132)
                {
                  uint64_t v135 = 0;
                  int v136 = v124;
                  do
                    v130->mBuffers[v135++] = *(AudioBuffer *)&v51[4 * v136++ + 2];
                  while (v132 != v135);
                }
              }
              if (v75[v124])
              {
                if (v167)
                {
                  if ((*(uint64_t (**)(unsigned int *))(*(void *)v122 + 32))(v122))
                  {
                    uint64_t v137 = (*(uint64_t (**)(unsigned int *))(*(void *)v122 + 32))(v122);
                    if (((*(uint64_t (**)(uint64_t))(*(void *)v137 + 80))(v137) & 1) == 0)
                    {
                      uint64_t v138 = (*(uint64_t (**)(unsigned int *))(*(void *)v122 + 32))(v122);
                      sub_6330(v138);
                    }
                  }
                }
                int v139 = v128 & v165;
                if ((v128 & v165 & 1) != 0 || (*(unsigned char *)(v179 + 80) & 4) != 0)
                {
                  unint64_t v140 = v130->mNumberBuffers;
                  if (v140)
                  {
                    unint64_t v141 = 0;
                    p_mData = &v130->mBuffers[0].mData;
                    do
                    {
                      if (*p_mData)
                      {
                        bzero(*p_mData, *((unsigned int *)p_mData - 1));
                        unint64_t v140 = v130->mNumberBuffers;
                      }
                      ++v141;
                      p_mData += 2;
                    }
                    while (v141 < v140);
                  }
                }
                int v143 = v128 & v168;
                if (((v139 | v164) & 1) == 0) {
                  bzero(*v117, *v126);
                }
                unint64_t v75 = v166;
              }
              else
              {
                int v143 = 0;
              }
              uint64_t v144 = *(void *)v122;
              if (v128) {
                uint64_t v145 = (*(uint64_t (**)(unsigned int *))(v144 + 88))(v122);
              }
              else {
                uint64_t v145 = (*(uint64_t (**)(unsigned int *))(v144 + 48))(v122);
              }
              uint64_t v146 = v145;
              if (*(_DWORD *)(v145 + 8) == 1819304813)
              {
                uint64_t v147 = *(void *)(v179 + 88);
                *(void *)&buf.uint64_t mNumberBuffers = 1;
                buf.mBuffers[0].mNumberChannels = 1;
                buf.mBuffers[0].mDataByteSize = v176;
                if (v147) {
                  sub_3FAE68(v147, &buf, (uint64_t)v130, v178, (uint64_t)*v175);
                }
                sub_269720(v170, v122[73], (uint64_t)v130, v178, (uint64_t)v175);
              }
              uint64_t v148 = (long long *)(v117 - 1);
              if ((v143 | v128 ^ 1))
              {
                if (v128) {
                  uint64_t v149 = v180;
                }
                else {
                  uint64_t v149 = v130;
                }
                sub_357B30((uint64_t)v171, &v149->mNumberBuffers, v178, (double *)v146, (int)mBuffers);
              }
              else
              {
                BOOL v150 = (_BYTE)v174 == 0;
                uint64_t v151 = (OpaqueAudioConverter **)(*(uint64_t (**)(unsigned int *))(*(void *)v122 + 32))(v122);
                sub_5586C(v151[73], (UInt32)v178, v130, v181);
                if (v150)
                {
                  (*((void (**)(OpaqueAudioConverter **, double *, void, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v151
                   + 18))(v151, v175, v178, 1, &v181, 1, &v180);
                }
                else
                {
                  *(void *)&buf.uint64_t mNumberBuffers = 1;
                  *int v169 = *v173;
                  uint64_t v182 = v181;
                  p_AudioBufferList buf = &buf;
                  (*((void (**)(OpaqueAudioConverter **, double *, void, uint64_t, AudioBufferList **, uint64_t, AudioBufferList **))*v151
                   + 18))(v151, v175, v178, 2, &v182, 1, &v180);
                }
                if (v128) {
                  uint64_t v152 = v180;
                }
                else {
                  uint64_t v152 = v130;
                }
                sub_357B30((uint64_t)v171, &v152->mNumberBuffers, v178, (double *)v146, (int)mBuffers);
                uint64_t v153 = (*(uint64_t (**)(unsigned int *))(*(void *)v122 + 32))(v122);
                *(void *)&buf.uint64_t mNumberBuffers = 1;
                *int v169 = (AudioBuffer)*v148;
                sub_5586C(*(OpaqueAudioConverter **)(v153 + 672), (UInt32)v178, v180, &buf);
                sub_269720(v170, v122[74], (uint64_t)&buf, v178, (uint64_t)v175);
              }
              if (*(_DWORD *)(v146 + 8) == 1819304813)
              {
                uint64_t v154 = *(void *)(v179 + 88);
                *(void *)&buf.uint64_t mNumberBuffers = 1;
                buf.mBuffers[0].mNumberChannels = 2;
                buf.mBuffers[0].mDataByteSize = v176;
                if (v154) {
                  sub_3FACA0(v154, &buf, v148, v178);
                }
              }
              int v97 = v177;
              unint64_t v112 = *v177;
              uint64_t v98 = v179;
            }
            ++v113;
          }
          while (v113 < v112);
        }
        goto LABEL_186;
      }
      v105 *= 2;
      int v107 = 1;
    }
    *(_DWORD *)(v179 + 800) = v106 + v105;
    int v167 = v107;
    int v168 = v107;
    goto LABEL_121;
  }
LABEL_186:
  if (v97 && *(unsigned char *)(v98 + 364) && *v97)
  {
    unint64_t v155 = 0;
    uint64_t v156 = (void **)(v97 + 4);
    do
    {
      bzero(*v156, *((unsigned int *)v156 - 1));
      ++v155;
      v156 += 2;
    }
    while (v155 < *v97);
  }
  return 0;
}

void sub_348CD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_348CFC(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v4 = 688;
  }
  else {
    uint64_t v4 = 664;
  }
  if (a2) {
    uint64_t v5 = a1 + 688;
  }
  else {
    uint64_t v5 = a1 + 664;
  }
  uint64_t v6 = *(void *)(a1 + v4);
  if (*(void *)(v5 + 8) == v6)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    LODWORD(v8) = 0;
    unsigned int v9 = 1;
    do
    {
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v6 + 8 * v7) + 32))(*(void *)(v6 + 8 * v7));
      unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 128))(v10);
      if (v11 <= v8) {
        uint64_t v8 = v8;
      }
      else {
        uint64_t v8 = v11;
      }
      unint64_t v7 = v9;
      uint64_t v6 = *(void *)(a1 + v4);
      ++v9;
    }
    while (v7 < (*(void *)(v5 + 8) - v6) >> 3);
  }
  BOOL v12 = a2 == 0;
  if (a2) {
    uint64_t v13 = 736;
  }
  else {
    uint64_t v13 = 712;
  }
  if (v12) {
    uint64_t v14 = a1 + 712;
  }
  else {
    uint64_t v14 = a1 + 736;
  }
  uint64_t v15 = *(void *)(a1 + v13);
  if (*(void *)(v14 + 8) != v15)
  {
    unint64_t v16 = 0;
    unsigned int v17 = 1;
    do
    {
      uint64_t v18 = *(void *)(v15 + 8 * v16);
      if (v18)
      {
        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 152))(v18);
        uint64_t v15 = *(void *)(a1 + v13);
        if (v19)
        {
          uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(v15 + 8 * v16) + 32))(*(void *)(v15 + 8 * v16));
          unsigned int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 128))(v20);
          if (v21 <= v8) {
            uint64_t v8 = v8;
          }
          else {
            uint64_t v8 = v21;
          }
          uint64_t v15 = *(void *)(a1 + v13);
        }
      }
      unint64_t v16 = v17++;
    }
    while (v16 < (*(void *)(v14 + 8) - v15) >> 3);
  }
  return v8;
}

uint64_t sub_348EBC(uint64_t result)
{
  uint64_t v1 = result;
  char v2 = 0;
  uint64_t v3 = 0;
  __int16 v13 = 256;
  uint64_t v4 = result + 520;
  uint64_t v5 = result + 544;
  do
  {
    char v6 = v2;
    if (*((unsigned char *)&v13 + v3)) {
      uint64_t v7 = 544;
    }
    else {
      uint64_t v7 = 520;
    }
    if (*((unsigned char *)&v13 + v3)) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    uint64_t v9 = *(void *)(v1 + v7);
    uint64_t v10 = *(void *)(v8 + 8);
    while (v9 != v10)
    {
      uint64_t v11 = *(void *)(*(void *)v9 + 136);
      unsigned __int8 v12 = atomic_load((unsigned __int8 *)(*(void *)(v11 + 360) + 16));
      if (v12) {
        BOOL result = sub_A7F4C(*(void *)(v11 + 360));
      }
      v9 += 16;
    }
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v6 & 1) == 0);
  return result;
}

void sub_348F80(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = 0;
  __int16 v12 = 256;
  uint64_t v4 = a1 + 520;
  uint64_t v5 = a1 + 544;
  do
  {
    char v6 = v2;
    if (*((unsigned char *)&v12 + v3)) {
      uint64_t v7 = 544;
    }
    else {
      uint64_t v7 = 520;
    }
    if (*((unsigned char *)&v12 + v3)) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    uint64_t v9 = *(uint64_t **)(a1 + v7);
    uint64_t v10 = *(uint64_t **)(v8 + 8);
    while (v9 != v10)
    {
      uint64_t v11 = *v9;
      v9 += 2;
      sub_2282C(v11);
    }
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v6 & 1) == 0);
}

void sub_349028(uint64_t a1)
{
  unint64_t v14 = sub_2205E8(a1 + 264);
  char v2 = (unint64_t *)(a1 + 80);
  if ((sub_283CF0(&v14, 0, (uint64_t)&v14, 8u, (void *)(a1 + 80)) & 1) == 0)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(16);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = 0;
      char v13 = 8;
      strcpy((char *)__p, "00000000");
      uint64_t v6 = 7;
      do
      {
        if ((v14 >> v5))
        {
          if (v13 >= 0) {
            uint64_t v7 = __p;
          }
          else {
            uint64_t v7 = (void **)__p[0];
          }
          *((unsigned char *)v7 + v6) = 49;
        }
        ++v5;
        --v6;
      }
      while (v5 != 8);
      uint64_t v8 = __p;
      if (v13 < 0) {
        uint64_t v8 = (void **)__p[0];
      }
      *(_DWORD *)AudioBufferList buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      __int16 v16 = 1024;
      int v17 = 2348;
      __int16 v18 = 2080;
      int v19 = v8;
      __int16 v20 = 2080;
      unsigned int v21 = "anc|tel|sec|pri|hal";
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_INFO, "%25s:%-5d stream capture flags have changed to %s (%s)", buf, 0x26u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_349254((uint64_t *)buf, (void *)a1, &v14);
    uint64_t v9 = *(void *)(a1 + 96);
    *(void *)(a1 + 96) = *(void *)buf;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    unint64_t v10 = v14;
    unint64_t v11 = *v2;
    if (((v14 ^ *v2) & 1) != 0
      || ((v14 >> 5) & 1) != ((v11 >> 5) & 1)
      || ((v14 >> 6) & 1) != ((v11 >> 6) & 1)
      || ((v14 >> 7) & 1) != ((v11 >> 7) & 1))
    {
      sub_9468(a1, v14);
      unint64_t v10 = v14;
    }
    *(void *)(a1 + 80) = v10;
    *(unsigned char *)(a1 + 104) = 1;
  }
}

void sub_349254(uint64_t *a1, void *a2, void *a3)
{
  sub_54750(a1, (uint64_t)a2, a3);
  uint64_t v6 = a2[84];
  uint64_t v7 = a2[83];
  uint64_t v8 = sub_32A48(16);
  uint64_t v9 = sub_32A48(40);
  char v10 = 0;
  uint64_t v11 = 0;
  unint64_t v12 = v6 - v7;
  *(void *)AudioBufferList buf = 0x100000002;
  uint64_t v13 = *(void *)(v8 + 8);
  while (1)
  {
    uint64_t v14 = *(int *)&buf[4 * v11];
    char v15 = v10;
    if (((v13 & v14) != 0) != ((*(void *)(v9 + 8) & v14) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1;
    if (v15)
    {
      if ((v13 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_9;
    }
  }
  if ((v13 & v14) == 0) {
    uint64_t v8 = v9;
  }
  if (*(void *)(v8 + 8))
  {
LABEL_9:
    __int16 v16 = *(NSObject **)v8;
    if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1623;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v12 >> 3;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring monitors for %d input client streams", buf, 0x18u);
    }
  }
LABEL_12:
  if ((int)(v12 >> 3) >= 1)
  {
    uint64_t v17 = 0;
    uint64_t v18 = (v12 >> 3);
    do
    {
      uint64_t v19 = *(void *)(a2[83] + 8 * v17);
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v19 + 136))(buf, v19);
      if (*(void *)&buf[8])
      {
        __int16 v20 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
        if (v20) {
          uint64_t v21 = *(void *)buf;
        }
        else {
          uint64_t v21 = 0;
        }
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v21)
        {
          sub_3524((uint64_t *)buf, (void *)(v21 + 112));
          if (*(void *)&buf[16])
          {
            uint64_t v22 = *a1;
            uint64_t v44 = 0;
            int v45 = 1;
            int v46 = v17;
            uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 56))(v19);
            if (v22) {
              (*(void (**)(uint64_t, uint64_t *, uint64_t, unsigned char *))(*(void *)v22 + 16))(v22, &v44, v23, buf);
            }
            if ((*(unsigned char *)a3 & 4) != 0)
            {
              uint64_t v44 = 0;
              int v45 = 2;
              int v46 = v17;
              uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
              if (v22) {
                (*(void (**)(uint64_t, uint64_t *, uint64_t, unsigned char *))(*(void *)v22 + 16))(v22, &v44, v24, buf);
              }
            }
          }
          goto LABEL_29;
        }
      }
      else
      {
        __int16 v20 = 0;
      }
      *(void *)AudioBufferList buf = buf;
      *(_OWORD *)&buf[8] = (unint64_t)buf;
LABEL_29:
      sub_8108((uint64_t *)buf);
      if (v20) {
        sub_4636C(v20);
      }
      ++v17;
    }
    while (v18 != v17);
  }
  uint64_t v25 = a2[87];
  uint64_t v26 = a2[86];
  uint64_t v27 = sub_32A48(16);
  uint64_t v28 = sub_32A48(40);
  char v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = v25 - v26;
  *(void *)AudioBufferList buf = 0x100000002;
  uint64_t v32 = *(void *)(v27 + 8);
  while (1)
  {
    uint64_t v33 = *(int *)&buf[4 * v30];
    char v34 = v29;
    if (((v32 & v33) != 0) != ((*(void *)(v28 + 8) & v33) != 0)) {
      break;
    }
    char v29 = 1;
    uint64_t v30 = 1;
    if (v34)
    {
      if ((v32 & 1) == 0) {
        goto LABEL_43;
      }
      goto LABEL_40;
    }
  }
  if ((v32 & v33) == 0) {
    uint64_t v27 = v28;
  }
  if (*(void *)(v27 + 8))
  {
LABEL_40:
    UInt32 v35 = *(NSObject **)v27;
    if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioBufferList buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1640;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v31 >> 3;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring monitors for %d output client streams", buf, 0x18u);
    }
  }
LABEL_43:
  if ((int)(v31 >> 3) >= 1)
  {
    uint64_t v36 = 0;
    uint64_t v37 = (v31 >> 3);
    do
    {
      uint64_t v38 = *(void *)(a2[86] + 8 * v36);
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v38 + 136))(buf, v38);
      if (*(void *)&buf[8])
      {
        UInt32 v39 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
        if (v39) {
          uint64_t v40 = *(void *)buf;
        }
        else {
          uint64_t v40 = 0;
        }
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v40)
        {
          sub_3524((uint64_t *)buf, (void *)(v40 + 112));
          if (*(void *)&buf[16])
          {
            if ((*(unsigned char *)a3 & 4) != 0)
            {
              uint64_t v41 = *a1;
              uint64_t v44 = 1;
              int v45 = 1;
              int v46 = v36;
              uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 48))(v38);
              if (v41) {
                (*(void (**)(uint64_t, uint64_t *, uint64_t, unsigned char *))(*(void *)v41 + 16))(v41, &v44, v42, buf);
              }
            }
            else
            {
              uint64_t v41 = *a1;
            }
            uint64_t v44 = 1;
            int v45 = 2;
            int v46 = v36;
            uint64_t v43 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 56))(v38);
            if (v41) {
              (*(void (**)(uint64_t, uint64_t *, uint64_t, unsigned char *))(*(void *)v41 + 16))(v41, &v44, v43, buf);
            }
          }
          goto LABEL_61;
        }
      }
      else
      {
        UInt32 v39 = 0;
      }
      *(void *)AudioBufferList buf = buf;
      *(_OWORD *)&buf[8] = (unint64_t)buf;
LABEL_61:
      sub_8108((uint64_t *)buf);
      if (v39) {
        sub_4636C(v39);
      }
      ++v36;
    }
    while (v37 != v36);
  }
}

void sub_3497FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13 = *v11;
  *uint64_t v11 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_34987C(void **a1)
{
  sub_3499D4((uint64_t)a1);
  if ((((uint64_t (*)(void **))(*a1)[42])(a1) & 1) == 0)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "AggregateDevice_Common2.cpp";
      __int16 v8 = 1024;
      int v9 = 2333;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return *a1[80];
}

void sub_3499B8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3499D4(uint64_t result)
{
  if (!*(_DWORD *)(result + 128))
  {
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v36 = 136315394;
      uint64_t v37 = "AggregateDevice_Common2.cpp";
      __int16 v38 = 1024;
      int v39 = 1911;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v36, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }
  uint64_t v1 = (void *)result;
  if (!*(void *)(result + 416))
  {
    uint64_t v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v36 = 136315394;
      uint64_t v37 = "AggregateDevice_Common2.cpp";
      __int16 v38 = 1024;
      int v39 = 1912;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v36, 0x12u);
    }
    uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "Invariant failure.");
  }
  for (unint64_t i = *(void **)(result + 520); i != *(void **)(result + 528); i += 2)
  {
    if (!*i)
    {
      int v9 = (os_log_t *)sub_32A48(13);
      char v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          int v36 = 136315394;
          uint64_t v37 = "AggregateDevice_Common2.cpp";
          __int16 v38 = 1024;
          int v39 = 1918;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v36, 0x12u);
        }
      }
      uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v11, "Invariant failure.");
    }
  }
  for (uint64_t j = *(void **)(result + 544); j != *(void **)(result + 552); j += 2)
  {
    if (!*j)
    {
      unint64_t v12 = (os_log_t *)sub_32A48(13);
      uint64_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        int v36 = 136315394;
        uint64_t v37 = "AggregateDevice_Common2.cpp";
        __int16 v38 = 1024;
        int v39 = 1919;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v36, 0x12u);
      }
      uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "Invariant failure.");
    }
  }
  uint64_t v4 = *(void *)(result + 648) - *(void *)(result + 640);
  if (v4) {
    BOOL v5 = v4 == 8;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      int v36 = 136315394;
      uint64_t v37 = "AggregateDevice_Common2.cpp";
      __int16 v38 = 1024;
      int v39 = 1920;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v36, 0x12u);
    }
    uint64_t v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v26, "Invariant failure.");
  }
  if (*(void *)(result + 664) == *(void *)(result + 672) && *(void *)(result + 688) == *(void *)(result + 696))
  {
    uint64_t v30 = (os_log_t *)sub_32A48(13);
    unint64_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      int v36 = 136315394;
      uint64_t v37 = "AggregateDevice_Common2.cpp";
      __int16 v38 = 1024;
      int v39 = 1921;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v36, 0x12u);
    }
    uint64_t v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "Invariant failure.");
  }
  uint64_t v6 = *(void *)(result + 712);
  if (v6 == *(void *)(result + 720))
  {
    if (*(void *)(result + 736) == *(void *)(result + 744))
    {
      uint64_t v33 = (os_log_t *)sub_32A48(13);
      char v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        int v36 = 136315394;
        uint64_t v37 = "AggregateDevice_Common2.cpp";
        __int16 v38 = 1024;
        int v39 = 1922;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v36, 0x12u);
      }
      UInt32 v35 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v35, "Invariant failure.");
    }
  }
  else
  {
    unint64_t v7 = 0;
    unsigned int v8 = 1;
    do
    {
      BOOL result = *(void *)(v6 + 8 * v7);
      if (result)
      {
        BOOL result = (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
        uint64_t v6 = v1[89];
        if ((result & 1) == 0)
        {
          BOOL result = (*(uint64_t (**)(void))(**(void **)(v6 + 8 * v7) + 144))(*(void *)(v6 + 8 * v7));
          if (!result)
          {
            char v15 = (os_log_t *)sub_32A48(13);
            __int16 v16 = *v15;
            if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
            {
              int v36 = 136315394;
              uint64_t v37 = "AggregateDevice_Common2.cpp";
              __int16 v38 = 1024;
              int v39 = 1930;
              _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v36, 0x12u);
            }
            uint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v17, "Invariant failure.");
          }
          uint64_t v6 = v1[89];
        }
      }
      unint64_t v7 = v8++;
    }
    while (v7 < (v1[90] - v6) >> 3);
  }
  if ((v1[57] != 0) == (v1[58] == 0))
  {
    uint64_t v27 = (os_log_t *)sub_32A48(13);
    uint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      int v36 = 136315394;
      uint64_t v37 = "AggregateDevice_Common2.cpp";
      __int16 v38 = 1024;
      int v39 = 1933;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v36, 0x12u);
    }
    char v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v29, "Invariant failure.");
  }
  return result;
}

void sub_34A160(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_34A19C(uint64_t a1)
{
  return *(void *)(a1 + 640) != *(void *)(a1 + 648);
}

uint64_t sub_34A1D0(uint64_t a1, int a2)
{
  sub_3499D4(a1);
  uint64_t v4 = 664;
  if (a2)
  {
    uint64_t v4 = 688;
    uint64_t v5 = a1 + 688;
  }
  else
  {
    uint64_t v5 = a1 + 664;
  }
  for (uint64_t i = *(void *)(a1 + v4); i != *(void *)(v5 + 8); i += 8)
  {
    if (*(unsigned char *)((*(uint64_t (**)(void))(**(void **)i + 32))() + 449)) {
      return 1;
    }
  }
  uint64_t v7 = 712;
  if (a2)
  {
    uint64_t v7 = 736;
    uint64_t v8 = a1 + 736;
  }
  else
  {
    uint64_t v8 = a1 + 712;
  }
  for (uint64_t j = *(void **)(a1 + v7); j != *(void **)(v8 + 8); ++j)
  {
    if (*j
      && (*(unsigned int (**)(void))(*(void *)*j + 152))(*j)
      && *(unsigned char *)((*(uint64_t (**)(void))(*(void *)*j + 32))() + 449))
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_34A304(uint64_t a1, int a2, uint64_t a3)
{
  sub_3499D4(a1);
  uint64_t v6 = 664;
  if (a2)
  {
    uint64_t v6 = 688;
    uint64_t v7 = a1 + 688;
  }
  else
  {
    uint64_t v7 = a1 + 664;
  }
  for (uint64_t i = *(uint64_t **)(a1 + v6); i != *(uint64_t **)(v7 + 8); ++i)
  {
    uint64_t v9 = *i;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
    sub_1B88A4(v10, a3);
  }
  uint64_t v11 = 712;
  if (a2)
  {
    uint64_t v11 = 736;
    uint64_t v12 = a1 + 736;
  }
  else
  {
    uint64_t v12 = a1 + 712;
  }
  for (uint64_t j = *(void **)(a1 + v11); j != *(void **)(v12 + 8); ++j)
  {
    if (*j)
    {
      if ((*(unsigned int (**)(void))(*(void *)*j + 152))(*j))
      {
        uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*j + 32))();
        sub_1B88A4(v14, a3);
      }
    }
  }
  return 0;
}

void sub_34A438(uint64_t a1, uint64_t a2, void *a3)
{
  if (!*(void *)(a1 + 456))
  {
    uint64_t v22 = (os_log_t *)sub_32A48(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v41 = "AggregateDevice_Common2.cpp";
      __int16 v42 = 1024;
      int v43 = 2244;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v6 = a1 + 664;
  if (a2) {
    uint64_t v7 = 688;
  }
  else {
    uint64_t v7 = 664;
  }
  if (a2) {
    uint64_t v6 = a1 + 688;
  }
  if ((uint64_t)(a3[1] - *a3) >> 2 != (uint64_t)(*(void *)(v6 + 8) - *(void *)(a1 + v7)) >> 3)
  {
    uint64_t v25 = (os_log_t *)sub_32A48(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioBufferList buf = 136315394;
      uint64_t v41 = "AggregateDevice_Common2.cpp";
      __int16 v42 = 1024;
      int v43 = 2246;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Precondition failure.");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2))
  {
    unint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + v7) + 8 * v8);
      (*(void (**)(uint64_t, BOOL))(*(void *)v9 + 144))(v9, *(_DWORD *)(*a3 + 4 * v8++) != 0);
    }
    while (v8 < (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2));
  }
  uint64_t inAddress_8 = 0;
  if (a2) {
    unsigned int v10 = 1869968496;
  }
  else {
    unsigned int v10 = 1768845428;
  }
  inAddress[0] = 1937077093;
  inAddress[1] = v10;
  OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(*(_DWORD *)(a1 + 128), (const AudioObjectPropertyAddress *)inAddress, 0, 0, (UInt32 *)&inAddress_8 + 1);
  if (PropertyDataSize)
  {
    uint64_t v28 = (os_log_t *)sub_32A48(13);
    char v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      sub_16C9C4((uint64_t)__p, inAddress);
      uint64_t v30 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      uint64_t v41 = "AggregateDevice_Common2.cpp";
      __int16 v42 = 1024;
      int v43 = 2258;
      __int16 v44 = 2080;
      int v45 = v30;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Failed to get data size for property %s.\"", buf, 0x1Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v31 = &off_6414D8;
    v31[2] = PropertyDataSize;
  }
  uint64_t v12 = malloc_type_malloc(HIDWORD(inAddress_8), 0xE29E77CBuLL);
  BOOL v13 = a2 == 0;
  if (a2) {
    uint64_t v14 = 736;
  }
  else {
    uint64_t v14 = 712;
  }
  if (v13) {
    uint64_t v15 = a1 + 712;
  }
  else {
    uint64_t v15 = a1 + 736;
  }
  uint64_t v16 = *(void *)(v15 + 8);
  uint64_t v17 = *(void *)(a1 + v14);
  if (v16 != v17)
  {
    unint64_t v18 = 0;
    unsigned int v19 = 1;
    do
    {
      uint64_t v20 = *(void *)(v17 + 8 * v18);
      if (v20)
      {
        LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
        uint64_t v16 = *(void *)(v15 + 8);
        uint64_t v17 = *(void *)(a1 + v14);
      }
      v12[v18 + 3] = v20;
      unint64_t v18 = v19++;
    }
    while (v18 < (v16 - v17) >> 3);
  }
  OSStatus v21 = AudioObjectSetPropertyData(*(_DWORD *)(a1 + 128), (const AudioObjectPropertyAddress *)inAddress, 0, 0, HIDWORD(inAddress_8), v12);
  if (v21)
  {
    uint64_t v32 = (os_log_t *)sub_32A48(13);
    uint64_t v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      sub_16C9C4((uint64_t)__p, inAddress);
      char v34 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioBufferList buf = 136315650;
      uint64_t v41 = "AggregateDevice_Common2.cpp";
      __int16 v42 = 1024;
      int v43 = 2268;
      __int16 v44 = 2080;
      int v45 = v34;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Failed to set property property %s.\"", buf, 0x1Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    UInt32 v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)UInt32 v35 = &off_6414D8;
    v35[2] = v21;
  }
  if (v12) {
    free(v12);
  }
}

void sub_34A9D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    free(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_34AA10(uint64_t a1, unsigned int a2)
{
  if (!*(void *)(a1 + 456))
  {
    unint64_t v81 = (os_log_t *)sub_32A48(13);
    uint64_t v82 = *v81;
    if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 2141;
      _os_log_impl(&def_1E50E8, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_3499D4(a1);
  uint64_t result = sub_7A50((unsigned int *)a1, a2, 0);
  if ((result & 3) != 3)
  {
    char v5 = result;
    if ((result & 3) == 0)
    {
      uint64_t v6 = sub_32A48(16);
      uint64_t result = sub_6974(2, v6, (uint64_t)"", 2153, (uint64_t)"", "Stop is called on an already stopped device");
    }
    if (a2 == 1)
    {
      if ((v5 & 1) == 0) {
        return result;
      }
    }
    else if (a2 || (v5 & 2) == 0)
    {
      return result;
    }
    int v14 = sub_A6520(a1);
    uint64_t v15 = *(uint64_t **)(a1 + 240);
    uint64_t v16 = *(uint64_t **)(a1 + 248);
    while (v15 != v16)
    {
      uint64_t v17 = *v15;
      v15 += 2;
      (*(void (**)(uint64_t))(*(void *)v17 + 32))(v17);
    }
    uint64_t v18 = sub_32A48(16);
    uint64_t v19 = sub_32A48(31);
    char v20 = 0;
    uint64_t v21 = 0;
    *(void *)std::string __p = 0x100000002;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&__p[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1;
      if (v24) {
        goto LABEL_46;
      }
    }
    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_46:
    sub_2417C(__p, a2);
    int v39 = v110[3];
    uint64_t v40 = *(const char **)__p;
    int v41 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    __int16 v42 = __p;
    if (v39 < 0) {
      __int16 v42 = v40;
    }
    sub_6974(3, v18, (uint64_t)"", 2172, (uint64_t)"", "Stopping IO type %s on AggregateDevice %u.", v42, v41);
    if ((v110[3] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    kdebug_trace();
    if (a2 == 1) {
      int v43 = 0;
    }
    else {
      int v43 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    OSStatus v44 = AudioDeviceStop(*(_DWORD *)(a1 + 128), v43);
    kdebug_trace();
    if (v44)
    {
      uint64_t v45 = sub_32A48(16);
      sub_2417C(__p, v44);
      int v46 = v110[3];
      uint64_t v47 = *(const char **)__p;
      sub_4F64((uint64_t)&v120, (os_unfair_lock_t)(a1 + 8));
      uint64_t v48 = __p;
      if (v46 < 0) {
        uint64_t v48 = v47;
      }
      if (v120.__m_.__opaque[15] >= 0) {
        sig = (const char *)&v120;
      }
      else {
        sig = (const char *)v120.__m_.__sig;
      }
      sub_6974(1, v45, (uint64_t)"", 2180, (uint64_t)"", "FAIL with status %s on AggregateDevice %s.", v48, sig);
      if (v120.__m_.__opaque[15] < 0) {
        operator delete((void *)v120.__m_.__sig);
      }
      if ((v110[3] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v50 = *(uint64_t ***)(a1 + 136);
    if (v50) {
      sub_2065D4(v50);
    }
    int v51 = sub_A6634(a1);
    if (sub_2212D0(a1))
    {
      BOOL v52 = 0;
      LODWORD(v53) = 0;
LABEL_129:
      uint64_t result = sub_221318((void *)a1, v52);
      uint64_t v75 = *(void *)(a1 + 112);
      uint64_t v76 = *(void *)(a1 + 88);
      if (v75)
      {
        if (v76)
        {
          *(void *)(a1 + 88) = 0;
          *(_DWORD *)&__p[16] = 0;
          *(void *)std::string __p = off_6351D0;
          *(void *)&__p[8] = 0;
          *(void *)&v110[4] = 0;
          uint64_t v77 = *(void *)(v75 + 24);
          *(void *)(v75 + 24) = v76;
          if (v77)
          {
            (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
            uint64_t v78 = *(void *)&v110[4];
            *(void *)std::string __p = off_6351D0;
            *(void *)&v110[4] = 0;
            if (v78) {
              (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
            }
          }
          else
          {
            *(void *)std::string __p = off_6351D0;
            *(void *)&v110[4] = 0;
          }
          caulk::concurrent::message::~message((caulk::concurrent::message *)__p);
          uint64_t v80 = *(caulk::concurrent::message **)(a1 + 112);
          sub_54694();
          uint64_t result = caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, v80);
          *(void *)(a1 + 112) = 0;
        }
      }
      else if (v76)
      {
        uint64_t v79 = sub_32A48(16);
        uint64_t result = sub_6974(1, v79, (uint64_t)"", 2216, (uint64_t)"", "AudioIOMonitor is valid, but IOMonitorCloseMsg is null. Not closing capture");
      }
      *(unsigned char *)(a1 + 104) = 0;
      if (v14)
      {
        BOOL v84 = (os_log_t *)sub_32A48(13);
        unint64_t v85 = *v84;
        if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 2224;
          _os_log_impl(&def_1E50E8, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (willStopResult): \"Error calling WillStopIO on physical devices.\"", __p, 0x12u);
        }
        int v86 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v86 = &off_6414D8;
        v86[2] = v14;
      }
      if (v44)
      {
        BOOL v87 = (os_log_t *)sub_32A48(13);
        int v88 = *v87;
        if (*v87 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 2228;
          _os_log_impl(&def_1E50E8, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (stopResult): \"Unable to stop IO.\"", __p, 0x12u);
        }
        uint64_t v89 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v89 = &off_6414D8;
        v89[2] = v44;
      }
      if (v53)
      {
        unint64_t v90 = (os_log_t *)sub_32A48(13);
        unint64_t v91 = *v90;
        if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(&v120, v53);
          uint64_t v92 = v120.__m_.__opaque[15] >= 0 ? &v120 : (std::mutex *)v120.__m_.__sig;
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 2232;
          *(_WORD *)&unsigned char __p[18] = 2080;
          *(void *)BOOL v110 = v92;
          _os_log_impl(&def_1E50E8, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (isRunningResult): \"Error waiting to receive kAudioDevicePropertyDeviceIsRunning property notification while stopping I/O proc: %s\"", __p, 0x1Cu);
          if (v120.__m_.__opaque[15] < 0) {
            operator delete((void *)v120.__m_.__sig);
          }
        }
        uint64_t v93 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v93 = &off_6414D8;
        v93[2] = v53;
      }
      if (v51)
      {
        uint64_t v94 = (os_log_t *)sub_32A48(13);
        char v95 = *v94;
        if (*v94)
        {
          if (os_log_type_enabled(*v94, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 2236;
            _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (didStopResult): \"Error calling DidStopIO on physical devices.\"", __p, 0x12u);
          }
        }
        int v96 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v96 = &off_6414D8;
        v96[2] = v51;
      }
      return result;
    }
    AudioObjectID v54 = *(_DWORD *)(a1 + 128);
    *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62676F696ELL;
    inAddress.AudioObjectPropertyElement mElement = 0;
    uint64_t v55 = sub_32A48(13);
    if (*(unsigned char *)(v55 + 8))
    {
      uint64_t v56 = *(NSObject **)v55;
      if (*(void *)v55)
      {
        if (os_log_type_enabled(*(os_log_t *)v55, OS_LOG_TYPE_DEBUG))
        {
          v119.__cv_.__sig = *(void *)&inAddress.mSelector;
          *(_DWORD *)v119.__cv_.__opaque = inAddress.mElement;
          sub_16C9C4((uint64_t)&v120, (unsigned int *)&v119);
          uint64_t v57 = v120.__m_.__opaque[15] >= 0 ? &v120 : (std::mutex *)v120.__m_.__sig;
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 166;
          *(_WORD *)&unsigned char __p[18] = 2080;
          *(void *)BOOL v110 = v57;
          *(_WORD *)&v110[8] = 1024;
          *(_DWORD *)&v110[10] = v54;
          _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", __p, 0x22u);
          if (v120.__m_.__opaque[15] < 0) {
            operator delete((void *)v120.__m_.__sig);
          }
        }
      }
    }
    AudioObjectID v105 = v54;
    AudioObjectPropertyAddress v106 = inAddress;
    int v107 = 0;
    uint64_t v108 = 0;
    if (sub_34BB90((uint64_t)&v105))
    {
      OSStatus v97 = v44;
      int v98 = v14;
      memset(v120.__m_.__opaque, 0, sizeof(v120.__m_.__opaque));
      v120.__m_.__sig = 850045863;
      memset(v119.__cv_.__opaque, 0, sizeof(v119.__cv_.__opaque));
      v119.__cv_.__sig = 1018212795;
      char v104 = 0;
      sub_662FC(inClientData, v54, &inAddress, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v104);
      for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v60.__d_.__rep_) / -1000)
      {
        unint64_t v59 = sub_34BB90((uint64_t)&v105);
        uint64_t v53 = HIDWORD(v59);
        if (HIDWORD(v59)) {
          goto LABEL_127;
        }
        if (!v59) {
          break;
        }
        if (i <= 0)
        {
          uint64_t v72 = (os_log_t *)sub_32A48(13);
          LODWORD(v53) = 2003329396;
          uint64_t v73 = *v72;
          if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            AudioObjectPropertyAddress v100 = inAddress;
            sub_16C9C4((uint64_t)&__lk, &v100.mSelector);
            size_t v74 = v102 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
            *(_DWORD *)std::string __p = 136316930;
            *(void *)&__p[4] = "HALPropertySynchronizer.h";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 248;
            *(_WORD *)&unsigned char __p[18] = 2080;
            *(void *)BOOL v110 = "updated";
            *(_WORD *)&v110[8] = 2080;
            *(void *)&v110[10] = v74;
            __int16 v111 = 2080;
            unint64_t v112 = "updated";
            __int16 v113 = 1024;
            int v114 = 0;
            __int16 v115 = 1024;
            int v116 = 0;
            __int16 v117 = 1024;
            AudioObjectID v118 = v54;
            _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", __p, 0x42u);
            if (v102 < 0) {
              operator delete(__lk.__m_);
            }
          }
          goto LABEL_127;
        }
        v60.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        uint64_t v61 = sub_32A48(13);
        if (*(unsigned char *)(v61 + 8))
        {
          uint64_t v62 = *(NSObject **)v61;
          if (*(void *)v61)
          {
            if (os_log_type_enabled(*(os_log_t *)v61, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)std::string __p = 136315906;
              *(void *)&__p[4] = "HALPropertySynchronizer.h";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 257;
              *(_WORD *)&unsigned char __p[18] = 2080;
              *(void *)BOOL v110 = "with timeout";
              *(_WORD *)&v110[8] = 1024;
              *(_DWORD *)&v110[10] = v54;
              _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", __p, 0x22u);
            }
          }
        }
        sub_3B7EC();
        *(void *)std::string __p = &qword_64CC40;
        __p[8] = 0;
        __p[8] = sub_1D4024();
        __lk.__m_ = &v120;
        __lk.__owns_ = 1;
        std::mutex::lock(&v120);
        v63.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (!v104)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = v63.__d_.__rep_ + 1000000 * i;
          while (1)
          {
            if (v64 <= std::chrono::steady_clock::now().__d_.__rep_) {
              goto LABEL_85;
            }
            v65.__d_.__rep_ = v64 - std::chrono::steady_clock::now().__d_.__rep_;
            if (v65.__d_.__rep_ >= 1) {
              break;
            }
LABEL_103:
            if (std::chrono::steady_clock::now().__d_.__rep_ >= v64 || v104) {
              goto LABEL_85;
            }
          }
          std::chrono::steady_clock::now();
          v66.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          if (!v66.__d_.__rep_)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0;
            goto LABEL_99;
          }
          if (v66.__d_.__rep_ < 1)
          {
            if ((unint64_t)v66.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
              goto LABEL_98;
            }
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0x8000000000000000;
          }
          else
          {
            if ((unint64_t)v66.__d_.__rep_ > 0x20C49BA5E353F7)
            {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0x7FFFFFFFFFFFFFFFLL;
              goto LABEL_99;
            }
LABEL_98:
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 1000 * v66.__d_.__rep_;
LABEL_99:
            if (v67 > (v65.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
            {
              v68.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_102:
              std::condition_variable::__do_timed_wait(&v119, &__lk, v68);
              std::chrono::steady_clock::now();
              goto LABEL_103;
            }
          }
          v68.__d_.__rep_ = v67 + v65.__d_.__rep_;
          goto LABEL_102;
        }
LABEL_85:
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        sub_66410((uint64_t)__p);
      }
      uint64_t v70 = sub_32A48(13);
      if (*(unsigned char *)(v70 + 8))
      {
        uint64_t v53 = *(NSObject **)v70;
        if (!*(void *)v70) {
          goto LABEL_127;
        }
        if (os_log_type_enabled(*(os_log_t *)v70, OS_LOG_TYPE_DEBUG))
        {
          AudioObjectPropertyAddress v100 = inAddress;
          sub_16C9C4((uint64_t)&__lk, &v100.mSelector);
          uint64_t v71 = v102 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          *(_DWORD *)std::string __p = 136315906;
          *(void *)&__p[4] = "HALPropertySynchronizer.h";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 288;
          *(_WORD *)&unsigned char __p[18] = 2080;
          *(void *)BOOL v110 = v71;
          *(_WORD *)&v110[8] = 1024;
          *(_DWORD *)&v110[10] = v54;
          _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", __p, 0x22u);
          if (v102 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
      LODWORD(v53) = 0;
LABEL_127:
      sub_6651C((uint64_t)inClientData);
      std::condition_variable::~condition_variable(&v119);
      std::mutex::~mutex(&v120);
      OSStatus v44 = v97;
      int v14 = v98;
LABEL_128:
      BOOL v52 = v53 == 0;
      goto LABEL_129;
    }
    uint64_t v69 = sub_32A48(13);
    if (*(unsigned char *)(v69 + 8))
    {
      uint64_t v53 = *(NSObject **)v69;
      if (!*(void *)v69) {
        goto LABEL_128;
      }
      if (os_log_type_enabled(*(os_log_t *)v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "HALPropertySynchronizer.h";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 219;
        *(_WORD *)&unsigned char __p[18] = 1024;
        *(_DWORD *)BOOL v110 = v54;
        _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", __p, 0x18u);
      }
    }
    LODWORD(v53) = 0;
    goto LABEL_128;
  }
  uint64_t v7 = sub_32A48(16);
  uint64_t v8 = sub_32A48(31);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)std::string __p = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&__p[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_23;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_23:
  sub_2417C(__p, a2);
  int v25 = v110[3];
  uint64_t v26 = *(const char **)__p;
  int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v28 = __p;
  if (v25 < 0) {
    uint64_t v28 = v26;
  }
  sub_6974(3, v7, (uint64_t)"", 2156, (uint64_t)"", "Stopping IO type %s on AggregateDevice %u.", v28, v27);
  if ((v110[3] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  kdebug_trace();
  if (a2 == 1) {
    char v29 = 0;
  }
  else {
    char v29 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
  }
  OSStatus v30 = AudioDeviceStop(*(_DWORD *)(a1 + 128), v29);
  uint64_t result = kdebug_trace();
  if (v30)
  {
    uint64_t v31 = sub_32A48(16);
    sub_2417C(__p, v30);
    int v32 = v110[3];
    uint64_t v33 = *(const char **)__p;
    sub_4F64((uint64_t)&v120, (os_unfair_lock_t)(a1 + 8));
    char v34 = __p;
    if (v32 < 0) {
      char v34 = v33;
    }
    if (v120.__m_.__opaque[15] >= 0) {
      UInt32 v35 = (const char *)&v120;
    }
    else {
      UInt32 v35 = (const char *)v120.__m_.__sig;
    }
    sub_6974(1, v31, (uint64_t)"", 2161, (uint64_t)"", "FAIL with status %s on AggregateDevice %s.", v34, v35);
    if (v120.__m_.__opaque[15] < 0) {
      operator delete((void *)v120.__m_.__sig);
    }
    if ((v110[3] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    int v36 = (os_log_t *)sub_32A48(13);
    char v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 2164;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (stopResult): \"Unable to stop IO.\"", __p, 0x12u);
    }
    __int16 v38 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v38 = &off_6414D8;
    v38[2] = v30;
  }
  return result;
}

void sub_34BAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  sub_6651C((uint64_t)&a23);
  std::condition_variable::~condition_variable((std::condition_variable *)(v38 - 216));
  std::mutex::~mutex((std::mutex *)(v38 - 168));
  _Unwind_Resume(a1);
}

unint64_t sub_34BB90(uint64_t a1)
{
  char v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_1E0594((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        uint64_t v11 = v20;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        uint64_t v28 = v11;
        __int16 v29 = 2080;
        OSStatus v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_34BD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_34BD60(uint64_t a1, _OWORD *a2, UInt32 a3, unsigned int a4)
{
  if (!*(void *)(a1 + 456))
  {
    char v34 = (os_log_t *)sub_32A48(13);
    UInt32 v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleTime) = 136315394;
      *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common2.cpp";
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 2059;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_3499D4(a1);
  char v8 = sub_7A50((unsigned int *)a1, a4, 1);
  if ((v8 & 3) == 0)
  {
    int v17 = *(caulk::concurrent::messenger **)(a1 + 120);
    if (v17) {
      caulk::concurrent::messenger::drain(v17);
    }
    sub_34C8D8(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 232))(a1);
    sub_34D020((void *)a1);
    sub_34DDC0((void *)a1);
    sub_34E834(a1);
  }
  char v9 = v8;
  uint64_t v10 = sub_32A48(16);
  uint64_t v11 = sub_32A48(31);
  if (a4 == 1 && (v9 & 1) != 0)
  {
    char v12 = 0;
    uint64_t v13 = 0;
    *(void *)&buf.mSampleTime = 0x100000002;
    uint64_t v14 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v15 = *((int *)&buf.mSampleTime + v13);
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1;
      if (v16) {
        goto LABEL_29;
      }
    }
    if ((v14 & v15) == 0) {
      uint64_t v10 = v11;
    }
LABEL_29:
    __int16 v31 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        LODWORD(buf.mSampleTime) = 136315650;
        *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common2.cpp";
        WORD2(buf.mHostTime) = 1024;
        *(_DWORD *)((char *)&buf.mHostTime + 6) = 2121;
        WORD1(buf.mRateScalar) = 1024;
        HIDWORD(buf.mRateScalar) = v32;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Redundant NULL I/O proc start request on AggregateDevice %u. Returning before AudioDeviceStart() call.", (uint8_t *)&buf, 0x18u);
      }
    }
  }
  else
  {
    char v18 = 0;
    uint64_t v19 = 0;
    *(void *)&buf.mSampleTime = 0x100000002;
    uint64_t v20 = *(void *)(v10 + 8);
    while (1)
    {
      uint64_t v21 = *((int *)&buf.mSampleTime + v19);
      char v22 = v18;
      if (((v20 & v21) != 0) != ((*(void *)(v11 + 8) & v21) != 0)) {
        break;
      }
      char v18 = 1;
      uint64_t v19 = 1;
      if (v22) {
        goto LABEL_18;
      }
    }
    if ((v20 & v21) == 0) {
      uint64_t v10 = v11;
    }
LABEL_18:
    __int16 v23 = *(NSObject **)v10;
    if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, a4);
      int v24 = SBYTE3(v54);
      __int16 v25 = *(unsigned char **)__p;
      int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      LODWORD(buf.mSampleTime) = 136315906;
      *(void *)((char *)&buf.mSampleTime + 4) = "AggregateDevice_Common2.cpp";
      __int16 v27 = v24 >= 0 ? __p : v25;
      WORD2(buf.mHostTime) = 1024;
      *(_DWORD *)((char *)&buf.mHostTime + 6) = 2126;
      WORD1(buf.mRateScalar) = 2080;
      *(void *)((char *)&buf.mRateScalar + 4) = v27;
      WORD2(buf.mWordClockTime) = 1024;
      *(_DWORD *)((char *)&buf.mWordClockTime + 6) = v26;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting IO type %s on AggregateDevice %u.", (uint8_t *)&buf, 0x22u);
      if (SBYTE3(v54) < 0) {
        operator delete(*(void **)__p);
      }
    }
    long long v28 = a2[1];
    *(_OWORD *)&buf.mSampleTime = *a2;
    *(_OWORD *)&buf.mRateScalar = v28;
    long long v29 = a2[3];
    *(_OWORD *)&buf.mSMPTETime.mSubframes = a2[2];
    *(_OWORD *)&buf.mSMPTETime.mHours = v29;
    if (a4 == 1) {
      OSStatus v30 = 0;
    }
    else {
      OSStatus v30 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    OSStatus v33 = AudioDeviceStartAtTime(*(_DWORD *)(a1 + 128), v30, &buf, a3);
    if (v33)
    {
      sub_7A50((unsigned int *)a1, a4, 0);
      char v37 = (os_log_t *)sub_32A48(16);
      uint64_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v48, v33);
        int v39 = v49;
        uint64_t v40 = (void **)v48[0];
        sub_4F64((uint64_t)v46, (os_unfair_lock_t)(a1 + 8));
        int v41 = v48;
        if (v39 < 0) {
          int v41 = v40;
        }
        if (v47 >= 0) {
          __int16 v42 = v46;
        }
        else {
          __int16 v42 = (void **)v46[0];
        }
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
        __int16 v51 = 1024;
        int v52 = 2132;
        __int16 v53 = 2080;
        AudioObjectID v54 = v41;
        __int16 v55 = 2080;
        uint64_t v56 = v42;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %s on AggregateDevice %s.", __p, 0x26u);
        if (v47 < 0) {
          operator delete(v46[0]);
        }
        if (v49 < 0) {
          operator delete(v48[0]);
        }
      }
      int v43 = (os_log_t *)sub_32A48(13);
      OSStatus v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "AggregateDevice_Common2.cpp";
        __int16 v51 = 1024;
        int v52 = 2133;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (startResult): \"Unable to start IO.\"", __p, 0x12u);
      }
      uint64_t v45 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v45 = &off_6414D8;
      void v45[2] = v33;
    }
  }
}

void sub_34C888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_34C8D8(uint64_t a1)
{
  char v1 = 0;
  uint64_t v2 = 0;
  uint64_t v76 = 0;
  LOWORD(v61[0]) = 256;
  __int16 v53 = (uint64_t **)(a1 + 688);
  AudioObjectID v54 = (uint64_t **)(a1 + 664);
  uint64_t v3 = a1 + 712;
  uint64_t v4 = a1 + 736;
  do
  {
    char v5 = v1;
    int v6 = *((unsigned __int8 *)v61 + v2);
    *(void *)AudioTimeStamp buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    uint64_t v7 = (char *)&v76;
    if (!v6) {
      uint64_t v7 = (char *)&v76 + 4;
    }
    *(void *)&unsigned char buf[24] = v7;
    char v8 = v54;
    if (v6) {
      char v8 = v53;
    }
    char v9 = *v8;
    uint64_t v10 = v8[1];
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 0x40000000;
    uint64_t v73 = sub_34EA5C;
    size_t v74 = &unk_635178;
    uint64_t v75 = buf;
    while (v9 != v10)
      v73((uint64_t)v72, *v9++);
    uint64_t v11 = 736;
    if (v6)
    {
      uint64_t v12 = v4;
    }
    else
    {
      uint64_t v11 = 712;
      uint64_t v12 = v3;
    }
    uint64_t v13 = *(void **)(a1 + v11);
    uint64_t v14 = *(void **)(v12 + 8);
    while (v13 != v14)
    {
      if (*v13) {
        (*(void (**)(void))(*(void *)*v13 + 24))(*v13);
      }
      ++v13;
    }
    _Block_object_dispose(buf, 8);
    char v1 = 1;
    uint64_t v2 = 1;
  }
  while ((v5 & 1) == 0);
  sub_125EC((uint64_t)buf, SHIDWORD(v76));
  uint64_t v15 = a1;
  sub_10CBC((unsigned int **)(a1 + 760), (uint64_t)buf);
  sub_1216C((unsigned int **)buf);
  sub_125EC((uint64_t)buf, v76);
  sub_10CBC((unsigned int **)(a1 + 776), (uint64_t)buf);
  sub_1216C((unsigned int **)buf);
  char v16 = 0;
  uint64_t v17 = 0;
  __int16 v71 = 256;
  uint64_t v55 = a1 + 144;
  uint64_t v18 = 1;
  do
  {
    char v52 = v16;
    int v59 = *((unsigned __int8 *)&v71 + v17);
    if (*((unsigned char *)&v71 + v17)) {
      uint64_t v19 = (void *)(a1 + 776);
    }
    else {
      uint64_t v19 = (void *)(a1 + 760);
    }
    uint64_t v20 = v53;
    if (!v59) {
      uint64_t v20 = v54;
    }
    uint64_t v57 = v20;
    uint64_t v21 = (char *)v20[1] - (char *)*v20;
    if (v21)
    {
      uint64_t v22 = 0;
      unsigned int v23 = 0;
      unint64_t v24 = v21 >> 3;
      if (v24 <= 1) {
        unint64_t v24 = 1;
      }
      unint64_t v56 = v24;
      while (1)
      {
        __int16 v25 = (_DWORD *)(*v57)[v22];
        uint64_t v26 = (*(uint64_t (**)(_DWORD *))(*(void *)v25 + 48))(v25);
        uint64_t v27 = (*(uint64_t (**)(_DWORD *))(*(void *)v25 + 56))(v25);
        int v28 = (*(uint64_t (**)(_DWORD *))(*(void *)v25 + 40))(v25);
        if ((v28 & 1) == 0)
        {
          uint64_t v29 = sub_32A48(16);
          uint64_t v30 = sub_32A48(24);
          char v31 = 0;
          uint64_t v32 = 0;
          *(void *)AudioTimeStamp buf = 0x100000002;
          uint64_t v33 = *(void *)(v29 + 8);
          while (1)
          {
            uint64_t v34 = *(int *)&buf[4 * v32];
            char v35 = v31;
            if (((v33 & v34) != 0) != ((*(void *)(v30 + 8) & v34) != 0)) {
              break;
            }
            char v31 = 1;
            uint64_t v32 = 1;
            if (v35) {
              goto LABEL_35;
            }
          }
          if ((v33 & v34) == 0) {
            uint64_t v29 = v30;
          }
LABEL_35:
          int v36 = *(NSObject **)v29;
          if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1765;
            _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_INFO, "%25s:%-5d DSP is disabled", buf, 0x12u);
          }
        }
        (*(void (**)(uint64_t *__return_ptr, _DWORD *))(*(void *)v25 + 136))(&v69, v25);
        if (v70 && (char v37 = std::__shared_weak_count::lock(v70)) != 0)
        {
          std::chrono::system_clock::time_point v60 = v37;
          if (v69)
          {
            sub_3524(v68, (void *)(v69 + 112));
            if (sub_548CC(v68))
            {
              sub_9264(&v67, (uint64_t)v68, 0);
              std::operator+<char>();
              if (v59) {
                uint64_t v38 = v26;
              }
              else {
                uint64_t v38 = v27;
              }
              long long v39 = *(_OWORD *)v38;
              long long v40 = *(_OWORD *)(v38 + 16);
              uint64_t v78 = *(void *)(v38 + 32);
              *(_OWORD *)AudioTimeStamp buf = v39;
              *(_OWORD *)&buf[16] = v40;
              v25[73] = v18;
              sub_1229C(v55, v18, (uint64_t *)&v65, (uint64_t)buf, v59 == 0);
              uint64_t v41 = (v18 + 1);
              if (v28)
              {
                std::operator+<char>();
                if (v59) {
                  uint64_t v42 = v27;
                }
                else {
                  uint64_t v42 = v26;
                }
                long long v43 = *(_OWORD *)v42;
                long long v44 = *(_OWORD *)(v42 + 16);
                uint64_t v62 = *(void *)(v42 + 32);
                v61[0] = v43;
                v61[1] = v44;
                v25[74] = v41;
                sub_1229C(v55, (v18 + 1), (uint64_t *)&__p, (uint64_t)v61, v59 == 0);
                if (v64 < 0) {
                  operator delete(__p);
                }
                uint64_t v41 = (v18 + 2);
              }
              sub_50894(v55);
              if (v66 < 0) {
                operator delete(v65);
              }
              if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v67.__r_.__value_.__l.__data_);
              }
              uint64_t v18 = v41;
            }
            sub_8108(v68);
          }
        }
        else
        {
          std::chrono::system_clock::time_point v60 = 0;
        }
        v25[72] = v23;
        uint64_t v45 = *(void *)v25;
        int v46 = (uint64_t (**)(_DWORD *))(v59 ? v45 + 64 : v45 + 72);
        uint64_t v47 = (*v46)(v25);
        if ((*(unsigned char *)(v26 + 12) & 0x20) == 0) {
          break;
        }
        uint64_t v48 = v18;
        uint64_t v49 = *(unsigned int *)(v26 + 28);
        if (v49) {
          goto LABEL_65;
        }
LABEL_73:
        if (v60) {
          sub_4636C(v60);
        }
        uint64_t v15 = a1;
        uint64_t v18 = v48;
        if (v70) {
          std::__shared_weak_count::__release_weak(v70);
        }
        if (++v22 == v56) {
          goto LABEL_78;
        }
      }
      uint64_t v48 = v18;
      uint64_t v49 = 1;
LABEL_65:
      uint64_t v50 = 8;
      do
      {
        if (v28)
        {
          *(_OWORD *)(*v19 + 16 * v23 + 8) = *(_OWORD *)(v47 + v50);
          (*(void (**)(_DWORD *, uint64_t))(*(void *)v25 + 168))(v25, v47);
        }
        else
        {
          if ((*(unsigned char *)(v26 + 12) & 0x20) != 0) {
            int v51 = 1;
          }
          else {
            int v51 = *(_DWORD *)(v26 + 28);
          }
          *(_DWORD *)(*v19 + 16 * v23 + 8) = v51;
        }
        ++v23;
        v50 += 16;
        --v49;
      }
      while (v49);
      goto LABEL_73;
    }
LABEL_78:
    char v16 = 1;
    uint64_t v17 = 1;
  }
  while ((v52 & 1) == 0);
  sub_D26B4(v15);
}

void sub_34CF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  sub_1216C((unsigned int **)(v46 - 160));
  _Unwind_Resume(a1);
}

void sub_34D020(void *a1)
{
  if (*(void *)sub_32A48(16))
  {
    uint64_t v2 = (os_log_t *)sub_32A48(16);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1438;
      __int16 v83 = 2048;
      v84[0] = a1;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d AggregateDevice_Common2 instance %p stream formats", buf, 0x1Cu);
    }
    uint64_t v4 = (os_log_t *)sub_32A48(16);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1440;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client input stream cache data:", buf, 0x12u);
    }
    uint64_t v6 = a1[83];
    if (a1[84] != v6)
    {
      unint64_t v7 = 0;
      unsigned int v8 = 1;
      do
      {
        uint64_t v9 = *(void *)(v6 + 8 * v7);
        uint64_t v10 = (os_log_t *)sub_32A48(16);
        uint64_t v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
          sub_259A4(&__p, v12);
          uint64_t v13 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1444;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v8 - 1;
          WORD2(v84[0]) = 2080;
          *(void *)((char *)v84 + 6) = v13;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > virtual fmt %s", buf, 0x22u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v14 = (os_log_t *)sub_32A48(16);
        uint64_t v15 = *v14;
        if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
          sub_259A4(&__p, v16);
          uint64_t v17 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1445;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v8 - 1;
          WORD2(v84[0]) = 2080;
          *(void *)((char *)v84 + 6) = v17;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > nonvirt fmt %s", buf, 0x22u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        unint64_t v7 = v8;
        uint64_t v6 = a1[83];
        ++v8;
      }
      while (v7 < (a1[84] - v6) >> 3);
    }
    uint64_t v18 = (os_log_t *)sub_32A48(16);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1448;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client output stream cache data:", buf, 0x12u);
    }
    uint64_t v20 = a1[86];
    if (a1[87] != v20)
    {
      unint64_t v21 = 0;
      unsigned int v22 = 1;
      do
      {
        uint64_t v23 = *(void *)(v20 + 8 * v21);
        unint64_t v24 = (os_log_t *)sub_32A48(16);
        __int16 v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 48))(v23);
          sub_259A4(&__p, v26);
          uint64_t v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1452;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v22 - 1;
          WORD2(v84[0]) = 2080;
          *(void *)((char *)v84 + 6) = v27;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > virtual fmt %s", buf, 0x22u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        int v28 = (os_log_t *)sub_32A48(16);
        uint64_t v29 = *v28;
        if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 56))(v23);
          sub_259A4(&__p, v30);
          char v31 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1453;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v22 - 1;
          WORD2(v84[0]) = 2080;
          *(void *)((char *)v84 + 6) = v31;
          _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > nonvirt fmt %s", buf, 0x22u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        unint64_t v21 = v22;
        uint64_t v20 = a1[86];
        ++v22;
      }
      while (v21 < (a1[87] - v20) >> 3);
    }
    uint64_t v32 = (os_log_t *)sub_32A48(16);
    uint64_t v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1456;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d Underlying input stream cache data:", buf, 0x12u);
    }
    uint64_t v34 = a1[89];
    if (a1[90] != v34)
    {
      unint64_t v35 = 0;
      unsigned int v36 = 1;
      while (1)
      {
        uint64_t v37 = *(void *)(v34 + 8 * v35);
        if (!v37) {
          break;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 136))(v37))
        {
          uint64_t v38 = (os_log_t *)sub_32A48(16);
          os_log_t v39 = *v38;
          if (!*v38 || !os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_64;
          }
          int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 160))(v37);
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1466;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v36 - 1;
          WORD2(v84[0]) = 1024;
          *(_DWORD *)((char *)v84 + 6) = v40;
          uint64_t v41 = v39;
          uint64_t v42 = "%25s:%-5d     stream %u > see input client stream %d";
          uint32_t v43 = 30;
          goto LABEL_63;
        }
        int v46 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 144))(v37);
        uint64_t v47 = (os_log_t *)sub_32A48(16);
        uint64_t v48 = *v47;
        if (!v46)
        {
          if (v48 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 48))(v37);
            sub_259A4(&__p, v49);
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            uint64_t v80 = "AggregateDevice_Common2.cpp";
            __int16 v81 = 1024;
            int v82 = 1474;
            __int16 v83 = 1024;
            LODWORD(v84[0]) = v36 - 1;
            WORD2(v84[0]) = 2080;
            *(void *)((char *)v84 + 6) = p_p;
            _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > virtual fmt %s", buf, 0x22u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          int v51 = (os_log_t *)sub_32A48(16);
          char v52 = *v51;
          if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 56))(v37);
            sub_259A4(&__p, v53);
            AudioObjectID v54 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              AudioObjectID v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            uint64_t v80 = "AggregateDevice_Common2.cpp";
            __int16 v81 = 1024;
            int v82 = 1475;
            __int16 v83 = 1024;
            LODWORD(v84[0]) = v36 - 1;
            WORD2(v84[0]) = 2080;
            *(void *)((char *)v84 + 6) = v54;
            _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > nonvirt fmt %s", buf, 0x22u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          goto LABEL_64;
        }
        if (v48 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1470;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = v36 - 1;
          uint64_t v41 = v48;
          uint64_t v42 = "%25s:%-5d     stream %u > hidden";
          goto LABEL_62;
        }
LABEL_64:
        unint64_t v35 = v36;
        uint64_t v34 = a1[89];
        ++v36;
        if (v35 >= (a1[90] - v34) >> 3) {
          goto LABEL_78;
        }
      }
      long long v44 = (os_log_t *)sub_32A48(16);
      os_log_t v45 = *v44;
      if (!*v44 || !os_log_type_enabled(*v44, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_64;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1462;
      __int16 v83 = 1024;
      LODWORD(v84[0]) = v36 - 1;
      uint64_t v41 = v45;
      uint64_t v42 = "%25s:%-5d     stream %u > disabled";
LABEL_62:
      uint32_t v43 = 24;
LABEL_63:
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEBUG, v42, buf, v43);
      goto LABEL_64;
    }
LABEL_78:
    uint64_t v55 = (os_log_t *)sub_32A48(16);
    unint64_t v56 = *v55;
    if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1479;
      _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Underlying output stream cache data:", buf, 0x12u);
    }
    uint64_t v57 = a1[92];
    if (a1[93] != v57)
    {
      unint64_t v58 = 0;
      for (unsigned int i = 1; ; ++i)
      {
        uint64_t v60 = *(void *)(v57 + 8 * v58);
        if (!v60) {
          break;
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v60 + 136))(v60))
        {
          uint64_t v61 = (os_log_t *)sub_32A48(16);
          os_log_t v62 = *v61;
          if (!*v61 || !os_log_type_enabled(*v61, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_97;
          }
          int v63 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 160))(v60);
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1489;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = i - 1;
          WORD2(v84[0]) = 1024;
          *(_DWORD *)((char *)v84 + 6) = v63;
          char v64 = v62;
          std::chrono::steady_clock::time_point v65 = "%25s:%-5d     stream %u > see output client stream %d";
          uint32_t v66 = 30;
          goto LABEL_96;
        }
        int v69 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 144))(v60);
        uint64_t v70 = (os_log_t *)sub_32A48(16);
        __int16 v71 = *v70;
        if (!v69)
        {
          if (v71 && os_log_type_enabled(*v70, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 48))(v60);
            sub_259A4(&__p, v72);
            uint64_t v73 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            uint64_t v80 = "AggregateDevice_Common2.cpp";
            __int16 v81 = 1024;
            int v82 = 1497;
            __int16 v83 = 1024;
            LODWORD(v84[0]) = i - 1;
            WORD2(v84[0]) = 2080;
            *(void *)((char *)v84 + 6) = v73;
            _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > virtual fmt %s", buf, 0x22u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          size_t v74 = (os_log_t *)sub_32A48(16);
          uint64_t v75 = *v74;
          if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v60 + 56))(v60);
            sub_259A4(&__p, v76);
            uint64_t v77 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            uint64_t v80 = "AggregateDevice_Common2.cpp";
            __int16 v81 = 1024;
            int v82 = 1498;
            __int16 v83 = 1024;
            LODWORD(v84[0]) = i - 1;
            WORD2(v84[0]) = 2080;
            *(void *)((char *)v84 + 6) = v77;
            _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_DEBUG, "%25s:%-5d     stream %u > nonvirt fmt %s", buf, 0x22u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          goto LABEL_97;
        }
        if (v71 && os_log_type_enabled(*v70, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          uint64_t v80 = "AggregateDevice_Common2.cpp";
          __int16 v81 = 1024;
          int v82 = 1493;
          __int16 v83 = 1024;
          LODWORD(v84[0]) = i - 1;
          char v64 = v71;
          std::chrono::steady_clock::time_point v65 = "%25s:%-5d     stream %u > hidden";
          goto LABEL_95;
        }
LABEL_97:
        unint64_t v58 = i;
        uint64_t v57 = a1[92];
        if (v58 >= (a1[93] - v57) >> 3) {
          return;
        }
      }
      std::string v67 = (os_log_t *)sub_32A48(16);
      os_log_t v68 = *v67;
      if (!*v67 || !os_log_type_enabled(*v67, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_97;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v80 = "AggregateDevice_Common2.cpp";
      __int16 v81 = 1024;
      int v82 = 1485;
      __int16 v83 = 1024;
      LODWORD(v84[0]) = i - 1;
      char v64 = v68;
      std::chrono::steady_clock::time_point v65 = "%25s:%-5d     stream %u > disabled";
LABEL_95:
      uint32_t v66 = 24;
LABEL_96:
      _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_DEBUG, v65, buf, v66);
      goto LABEL_97;
    }
  }
}

void sub_34DDC0(void *a1)
{
  uint64_t v2 = (void *)sub_32A48(16);
  uint64_t v3 = sub_32A48(24);
  char v4 = 0;
  uint64_t v5 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v6 = v2[1];
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8) {
      goto LABEL_7;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = (void *)v3;
  }
LABEL_7:
  if (*v2)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(16);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      __int16 v62 = 1024;
      int v63 = 1509;
      __int16 v64 = 2048;
      v65[0] = a1;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_INFO, "%25s:%-5d AggregateDevice_Common2 instance %p DSPChain descriptions", buf, 0x1Cu);
    }
    uint64_t v11 = a1[83];
    if (a1[84] != v11)
    {
      unint64_t v12 = 0;
      unsigned int v13 = 1;
      do
      {
        uint64_t v14 = *(void *)(v11 + 8 * v12);
        int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 40))(v14);
        uint64_t v16 = (os_log_t *)sub_32A48(16);
        uint64_t v17 = *v16;
        if (v15)
        {
          if (v17 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 32))(v14);
            sub_247DC(__p, v18);
            uint64_t v19 = __p;
            if (v60 < 0) {
              uint64_t v19 = (void **)__p[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            __int16 v62 = 1024;
            int v63 = 1516;
            __int16 v64 = 1024;
            LODWORD(v65[0]) = v13 - 1;
            WORD2(v65[0]) = 2080;
            *(void *)((char *)v65 + 6) = v19;
            _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client input stream [%u] DSP Chain:\n%s", buf, 0x22u);
            if (v60 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        else if (v17 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v62 = 1024;
          int v63 = 1520;
          __int16 v64 = 1024;
          LODWORD(v65[0]) = v13 - 1;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client input stream [%u] DSP Chain: disabled.", buf, 0x18u);
        }
        unint64_t v12 = v13;
        uint64_t v11 = a1[83];
        ++v13;
      }
      while (v12 < (a1[84] - v11) >> 3);
    }
    uint64_t v20 = a1[86];
    if (a1[87] != v20)
    {
      unint64_t v21 = 0;
      unsigned int v22 = 1;
      do
      {
        uint64_t v23 = *(void *)(v20 + 8 * v21);
        int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
        __int16 v25 = (os_log_t *)sub_32A48(16);
        uint64_t v26 = *v25;
        if (v24)
        {
          if (v26 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 32))(v23);
            sub_247DC(__p, v27);
            int v28 = __p;
            if (v60 < 0) {
              int v28 = (void **)__p[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            __int16 v62 = 1024;
            int v63 = 1528;
            __int16 v64 = 1024;
            LODWORD(v65[0]) = v22 - 1;
            WORD2(v65[0]) = 2080;
            *(void *)((char *)v65 + 6) = v28;
            _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client output stream [%u] DSP Chain:\n%s", buf, 0x22u);
            if (v60 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        else if (v26 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v62 = 1024;
          int v63 = 1532;
          __int16 v64 = 1024;
          LODWORD(v65[0]) = v22 - 1;
          _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client output stream [%u] DSP Chain: disabled.", buf, 0x18u);
        }
        unint64_t v21 = v22;
        uint64_t v20 = a1[86];
        ++v22;
      }
      while (v21 < (a1[87] - v20) >> 3);
    }
    uint64_t v29 = a1[89];
    if (a1[90] != v29)
    {
      unint64_t v30 = 0;
      unsigned int v31 = 1;
      while (1)
      {
        uint64_t v32 = *(void *)(v29 + 8 * v30);
        if (!v32) {
          break;
        }
        if (((*(uint64_t (**)(uint64_t))(*(void *)v32 + 136))(v32) & 1) != 0
          || (*(unsigned int (**)(uint64_t))(*(void *)v32 + 144))(v32))
        {
          uint64_t v33 = (os_log_t *)sub_32A48(16);
          os_log_t v34 = *v33;
          if (!*v33 || !os_log_type_enabled(*v33, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_49;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v62 = 1024;
          int v63 = 1544;
          __int16 v64 = 1024;
          LODWORD(v65[0]) = v31 - 1;
          unint64_t v35 = v34;
          unsigned int v36 = "%25s:%-5d Underlying input stream [%u] maintains no DSP chain (it is a pass through).";
          goto LABEL_48;
        }
        int v39 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 40))(v32);
        int v40 = (os_log_t *)sub_32A48(16);
        uint64_t v41 = *v40;
        if (v39)
        {
          if (v41 && os_log_type_enabled(*v40, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 32))(v32);
            sub_247DC(__p, v42);
            uint32_t v43 = __p;
            if (v60 < 0) {
              uint32_t v43 = (void **)__p[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            __int16 v62 = 1024;
            int v63 = 1548;
            __int16 v64 = 1024;
            LODWORD(v65[0]) = v31 - 1;
            WORD2(v65[0]) = 2080;
            *(void *)((char *)v65 + 6) = v43;
            _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Underlying input stream [%u] DSP Chain:\n%s", buf, 0x22u);
            if (v60 < 0) {
              operator delete(__p[0]);
            }
          }
          goto LABEL_49;
        }
        if (v41 && os_log_type_enabled(*v40, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v62 = 1024;
          int v63 = 1552;
          __int16 v64 = 1024;
          LODWORD(v65[0]) = v31 - 1;
          unint64_t v35 = v41;
          unsigned int v36 = "%25s:%-5d Underlying input stream [%u] DSP Chain: disabled.";
LABEL_48:
          _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, v36, buf, 0x18u);
        }
LABEL_49:
        unint64_t v30 = v31;
        uint64_t v29 = a1[89];
        ++v31;
        if (v30 >= (a1[90] - v29) >> 3) {
          goto LABEL_61;
        }
      }
      uint64_t v37 = (os_log_t *)sub_32A48(16);
      os_log_t v38 = *v37;
      if (!*v37 || !os_log_type_enabled(*v37, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_49;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      __int16 v62 = 1024;
      int v63 = 1540;
      __int16 v64 = 1024;
      LODWORD(v65[0]) = v31 - 1;
      unint64_t v35 = v38;
      unsigned int v36 = "%25s:%-5d Underlying input stream [%u] is not used in this AggregateDevice.";
      goto LABEL_48;
    }
LABEL_61:
    uint64_t v44 = a1[92];
    if (a1[93] != v44)
    {
      unint64_t v45 = 0;
      for (unsigned int i = 1; ; ++i)
      {
        uint64_t v47 = *(void *)(v44 + 8 * v45);
        if (!v47) {
          break;
        }
        if (((*(uint64_t (**)(uint64_t))(*(void *)v47 + 136))(v47) & 1) != 0
          || (*(unsigned int (**)(uint64_t))(*(void *)v47 + 144))(v47))
        {
          uint64_t v48 = (os_log_t *)sub_32A48(16);
          os_log_t v49 = *v48;
          if (!*v48 || !os_log_type_enabled(*v48, OS_LOG_TYPE_DEBUG)) {
            goto LABEL_73;
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v62 = 1024;
          int v63 = 1564;
          __int16 v64 = 1024;
          LODWORD(v65[0]) = i - 1;
          uint64_t v50 = v49;
          int v51 = "%25s:%-5d Underlying output stream [%u] maintains no DSP chain (it is a pass through).";
          goto LABEL_72;
        }
        int v54 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 40))(v47);
        uint64_t v55 = (os_log_t *)sub_32A48(16);
        unint64_t v56 = *v55;
        if (v54)
        {
          if (v56 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v47 + 32))(v47);
            sub_247DC(__p, v57);
            unint64_t v58 = __p;
            if (v60 < 0) {
              unint64_t v58 = (void **)__p[0];
            }
            *(_DWORD *)AudioTimeStamp buf = 136315906;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            __int16 v62 = 1024;
            int v63 = 1568;
            __int16 v64 = 1024;
            LODWORD(v65[0]) = i - 1;
            WORD2(v65[0]) = 2080;
            *(void *)((char *)v65 + 6) = v58;
            _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Underlying output stream [%u] DSP Chain:\n%s", buf, 0x22u);
            if (v60 < 0) {
              operator delete(__p[0]);
            }
          }
          goto LABEL_73;
        }
        if (v56 && os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          __int16 v62 = 1024;
          int v63 = 1572;
          __int16 v64 = 1024;
          LODWORD(v65[0]) = i - 1;
          uint64_t v50 = v56;
          int v51 = "%25s:%-5d Underlying output stream [%u] DSP Chain: disabled.";
LABEL_72:
          _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEBUG, v51, buf, 0x18u);
        }
LABEL_73:
        unint64_t v45 = i;
        uint64_t v44 = a1[92];
        if (v45 >= (a1[93] - v44) >> 3) {
          return;
        }
      }
      char v52 = (os_log_t *)sub_32A48(16);
      os_log_t v53 = *v52;
      if (!*v52 || !os_log_type_enabled(*v52, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_73;
      }
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      __int16 v62 = 1024;
      int v63 = 1560;
      __int16 v64 = 1024;
      LODWORD(v65[0]) = i - 1;
      uint64_t v50 = v53;
      int v51 = "%25s:%-5d Underlying output stream [%u] is not used in this AggregateDevice.";
      goto LABEL_72;
    }
  }
}

void sub_34E834(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(16);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = 0;
    char v9 = 8;
    strcpy((char *)__p, "00000000");
    uint64_t v5 = 7;
    do
    {
      if ((*(void *)(a1 + 80) >> v4))
      {
        if (v9 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        *((unsigned char *)v6 + v5) = 49;
      }
      ++v4;
      --v5;
    }
    while (v4 != 8);
    uint64_t v7 = __p;
    if (v9 < 0) {
      uint64_t v7 = (void **)__p[0];
    }
    buf[0] = 136315906;
    *(void *)&buf[1] = "AggregateDevice_Common2.cpp";
    __int16 v11 = 1024;
    int v12 = 1607;
    __int16 v13 = 2080;
    uint64_t v14 = v7;
    __int16 v15 = 2080;
    uint64_t v16 = "anc|tel|sec|pri|hal";
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_INFO, "%25s:%-5d stream capture flags : %s (%s)", (uint8_t *)buf, 0x26u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

uint64_t sub_34EA5C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  if ((*(unsigned char *)(result + 12) & 0x20) != 0) {
    int v5 = *(_DWORD *)(result + 28);
  }
  else {
    int v5 = 1;
  }
  uint64_t v6 = *(_DWORD **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *v6 += v5;
  return result;
}

void sub_34EAFC(uint64_t a1, unsigned int a2)
{
  if (!*(void *)(a1 + 456))
  {
    int v28 = (os_log_t *)sub_32A48(13);
    uint64_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      __int16 v45 = 1024;
      int v46 = 1973;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_3499D4(a1);
  char v4 = sub_7A50((unsigned int *)a1, a2, 1);
  if ((v4 & 3) == 0)
  {
    __int16 v13 = *(caulk::concurrent::messenger **)(a1 + 120);
    if (v13) {
      caulk::concurrent::messenger::drain(v13);
    }
    sub_34C8D8(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 232))(a1);
    sub_34D020((void *)a1);
    sub_34DDC0((void *)a1);
    sub_34E834(a1);
  }
  char v5 = v4;
  uint64_t v6 = sub_32A48(16);
  uint64_t v7 = sub_32A48(31);
  if (a2 == 1 && (v5 & 1) != 0)
  {
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_29;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_29:
    __int16 v25 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        __int16 v45 = 1024;
        int v46 = 2037;
        __int16 v47 = 1024;
        LODWORD(v48) = v26;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Redundant NULL I/O proc start request on AggregateDevice %u. Returning before AudioDeviceStart() call.", buf, 0x18u);
      }
    }
  }
  else
  {
    char v14 = 0;
    uint64_t v15 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v16 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v17 = *(int *)&buf[4 * v15];
      char v18 = v14;
      if (((v16 & v17) != 0) != ((*(void *)(v7 + 8) & v17) != 0)) {
        break;
      }
      char v14 = 1;
      uint64_t v15 = 1;
      if (v18) {
        goto LABEL_18;
      }
    }
    if ((v16 & v17) == 0) {
      uint64_t v6 = v7;
    }
LABEL_18:
    uint64_t v19 = *(NSObject **)v6;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, a2);
      int v20 = v43;
      unint64_t v21 = (void **)__p[0];
      int v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      uint64_t v23 = v20 >= 0 ? __p : v21;
      __int16 v45 = 1024;
      int v46 = 2042;
      __int16 v47 = 2080;
      uint64_t v48 = v23;
      __int16 v49 = 1024;
      LODWORD(v50) = v22;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting IO type %s on AggregateDevice %u.", buf, 0x22u);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }
    kdebug_trace();
    if (a2 == 1) {
      int v24 = 0;
    }
    else {
      int v24 = *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416);
    }
    OSStatus v27 = AudioDeviceStart(*(_DWORD *)(a1 + 128), v24);
    kdebug_trace();
    if (v27)
    {
      sub_7A50((unsigned int *)a1, a2, 0);
      unsigned int v31 = (os_log_t *)sub_32A48(16);
      uint64_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v27);
        int v33 = v43;
        os_log_t v34 = (void **)__p[0];
        sub_4F64((uint64_t)v40, (os_unfair_lock_t)(a1 + 8));
        unint64_t v35 = __p;
        if (v33 < 0) {
          unint64_t v35 = v34;
        }
        if (v41 >= 0) {
          unsigned int v36 = v40;
        }
        else {
          unsigned int v36 = (void **)v40[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        __int16 v45 = 1024;
        int v46 = 2050;
        __int16 v47 = 2080;
        uint64_t v48 = v35;
        __int16 v49 = 2080;
        uint64_t v50 = v36;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %s on AggregateDevice %s.", buf, 0x26u);
        if (v41 < 0) {
          operator delete(v40[0]);
        }
        if (v43 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v37 = (os_log_t *)sub_32A48(13);
      os_log_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        __int16 v45 = 1024;
        int v46 = 2051;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (startResult): \"Unable to start IO.\"", buf, 0x12u);
      }
      int v39 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v39 = &off_6414D8;
      v39[2] = v27;
    }
  }
}

void sub_34F66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_34F6AC(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = 0;
  __int16 v18 = 256;
  uint64_t v4 = a1 + 664;
  uint64_t v5 = a1 + 688;
  do
  {
    char v6 = v2;
    if (*((unsigned char *)&v18 + v3)) {
      uint64_t v7 = 688;
    }
    else {
      uint64_t v7 = 664;
    }
    if (*((unsigned char *)&v18 + v3)) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    uint64_t v9 = *(void **)(a1 + v7);
    uint64_t v10 = *(void **)(v8 + 8);
    while (v9 != v10)
    {
      uint64_t v11 = *v9;
      int v12 = (*(uint64_t (**)(void))(*(void *)*v9 + 40))(*v9);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v11 + 136))(&v16, v11);
      if (v17)
      {
        __int16 v13 = std::__shared_weak_count::lock(v17);
        if (v13)
        {
          char v14 = v13;
          if (v16) {
            int v15 = v12;
          }
          else {
            int v15 = 0;
          }
          if (v15 == 1) {
            sub_F718(*(unsigned char **)(v16 + 136));
          }
          sub_4636C(v14);
        }
        if (v17) {
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      ++v9;
    }
    char v2 = 1;
    uint64_t v3 = 1;
  }
  while ((v6 & 1) == 0);
}

void sub_34F7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  sub_4636C(v11);
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }
  _Unwind_Resume(a1);
}

BOOL sub_34F810(uint64_t a1)
{
  return *(_DWORD *)(a1 + 792) != 0;
}

uint64_t sub_34F820(uint64_t result, int a2)
{
  if (a2) {
    int v2 = 728788340;
  }
  else {
    int v2 = 762342772;
  }
  *(_DWORD *)(result + 792) = v2;
  return result;
}

uint64_t sub_34F840(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = a1 + 688;
  uint64_t v4 = 664;
  if (a2) {
    uint64_t v4 = 688;
  }
  else {
    uint64_t v3 = a1 + 664;
  }
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(a1 + v4);
  if (a3 >= (unint64_t)((v5 - v6) >> 3))
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v13 = 136315394;
      *(void *)&void v13[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&v13[12] = 1024;
      *(_DWORD *)&v13[14] = 2381;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(v6 + 8 * a3) + 136))(v13);
  if (!*(void *)&v13[8]) {
    return 0;
  }
  uint64_t v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&v13[8]);
  if (v7)
  {
    uint64_t v8 = *(void *)v13;
    sub_4636C(v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (*(void *)&v13[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v13[8]);
  }
  return v8;
}

void sub_34F9D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_34F9EC(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 664;
  uint64_t v3 = 664;
  if (a2)
  {
    uint64_t v3 = 688;
    uint64_t v2 = a1 + 688;
  }
  return (*(void *)(v2 + 8) - *(void *)(a1 + v3)) >> 3;
}

void sub_34FA1C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, double *a6)
{
  sub_3499D4(a1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2) & 1) == 0)
  {
    int v12 = (os_log_t *)sub_32A48(13);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)a2;
      int v29 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v28);
      char v14 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v33 = "AggregateDevice_Common2.cpp";
      __int16 v34 = 1024;
      int v35 = 2521;
      __int16 v36 = 2080;
      uint64_t v37 = (const char *)v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)a2;
      int v29 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v28);
      __int16 v18 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136316162;
      int v33 = "AggregateDevice_Common2.cpp";
      __int16 v34 = 1024;
      int v35 = 2522;
      __int16 v36 = 2080;
      uint64_t v37 = (const char *)v18;
      __int16 v38 = 1024;
      LODWORD(v39[0]) = a3;
      WORD2(v39[0]) = 2048;
      *(void *)((char *)v39 + 6) = a4;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = &off_6414D8;
    v19[2] = 561211770;
  }
  if (!a6)
  {
    int v20 = (os_log_t *)sub_32A48(13);
    unint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)a2;
      int v29 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v28);
      int v22 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      int v33 = "AggregateDevice_Common2.cpp";
      __int16 v34 = 1024;
      int v35 = 2523;
      __int16 v36 = 2080;
      uint64_t v37 = "inData";
      __int16 v38 = 2080;
      v39[0] = v22;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v23 = &off_6414D8;
    v23[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    int v24 = (os_log_t *)sub_32A48(13);
    __int16 v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)a2;
      int v29 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v28);
      int v26 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v33 = "AggregateDevice_Common2.cpp";
      __int16 v34 = 1024;
      int v35 = 2524;
      __int16 v36 = 2080;
      uint64_t v37 = (const char *)v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    OSStatus v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)OSStatus v27 = &off_6414D8;
    _OWORD v27[2] = 1852797029;
  }

  sub_92834(a1, a2, a3, a4, a5, a6);
}

void sub_34FF84(AudioObjectID *a1, uint64_t a2, uint64_t a3, __CFString *a4, int *a5, int *a6)
{
  sub_3499D4((uint64_t)a1);
  if (((*(uint64_t (**)(AudioObjectID *, uint64_t))(*(void *)a1 + 16))(a1, a2) & 1) == 0)
  {
    unint64_t v21 = (os_log_t *)sub_32A48(13);
    int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v41);
      uint64_t v23 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v46 = "AggregateDevice_Common2.cpp";
      __int16 v47 = 1024;
      int v48 = 2476;
      __int16 v49 = 2080;
      uint64_t v50 = (const char *)v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    __int16 v25 = (os_log_t *)sub_32A48(13);
    int v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v41);
      OSStatus v27 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136316162;
      int v46 = "AggregateDevice_Common2.cpp";
      __int16 v47 = 1024;
      int v48 = 2477;
      __int16 v49 = 2080;
      uint64_t v50 = (const char *)v27;
      __int16 v51 = 1024;
      LODWORD(v52[0]) = a3;
      WORD2(v52[0]) = 2048;
      *(void *)((char *)v52 + 6) = a4;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v28 = &off_6414D8;
    v28[2] = 561211770;
  }
  if (!a6)
  {
    int v29 = (os_log_t *)sub_32A48(13);
    unint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(void *)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v41);
      char v31 = v44 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      int v46 = "AggregateDevice_Common2.cpp";
      __int16 v47 = 1024;
      int v48 = 2478;
      __int16 v49 = 2080;
      uint64_t v50 = "outData";
      __int16 v51 = 2080;
      v52[0] = v31;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v44 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v32 = &off_6414D8;
    v32[2] = 561211770;
  }
  if (*(_DWORD *)a2 == 1936482681)
  {
    unsigned int v12 = *a5;
    if (v12 < (*(unsigned int (**)(AudioObjectID *, uint64_t, uint64_t, __CFString *))(*(void *)a1 + 32))(a1, a2, a3, a4))
    {
      int v33 = (os_log_t *)sub_32A48(13);
      __int16 v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        uint64_t v41 = *(void *)a2;
        int v42 = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v41);
        int v35 = v44;
        __int16 v36 = (void **)__p[0];
        int v37 = *a5;
        int v38 = (*(uint64_t (**)(AudioObjectID *, uint64_t, uint64_t, __CFString *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        int v39 = __p;
        *(_DWORD *)AudioTimeStamp buf = 136316162;
        int v46 = "AggregateDevice_Common2.cpp";
        if (v35 < 0) {
          int v39 = v36;
        }
        __int16 v47 = 1024;
        int v48 = 2484;
        __int16 v49 = 2080;
        uint64_t v50 = (const char *)v39;
        __int16 v51 = 1024;
        LODWORD(v52[0]) = v37;
        WORD2(v52[0]) = 1024;
        *(_DWORD *)((char *)v52 + 6) = v38;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
          buf,
          0x28u);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
      }
      int v40 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v40 = &off_6414D8;
      uint64_t v40[2] = 561211770;
    }
    uint64_t v13 = 194;
    if (*(_DWORD *)(a2 + 4) == 1768845428) {
      uint64_t v13 = 190;
    }
    char v14 = *(int **)&a1[v13];
    if (v14)
    {
      int v15 = *v14;
      if (*v14)
      {
        *a6 = v15;
        uint64_t v16 = *v14;
        if (v16)
        {
          uint64_t v17 = a6 + 4;
          __int16 v18 = (unsigned int *)(v14 + 2);
          uint64_t v19 = v16;
          do
          {
            unsigned int v20 = *v18;
            v18 += 4;
            *(v17 - 1) = v20;
            *uint64_t v17 = 0;
            v17 += 2;
            --v19;
          }
          while (v19);
          int v15 = (16 * v16) | 8;
        }
        else
        {
          int v15 = 8;
        }
      }
    }
    else
    {
      int v15 = 0;
    }
    *a5 = v15;
  }
  else
  {
    sub_49C08(a1, a2, a3, a4, a5, a6);
  }
}

void sub_350604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_350628(uint64_t a1, AudioObjectPropertyAddress *a2, uint64_t a3, void *a4)
{
  sub_3499D4(a1);
  if (((*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 16))(a1, a2) & 1) == 0)
  {
    unsigned int v12 = (os_log_t *)sub_32A48(13);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v20);
      char v14 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      __int16 v25 = "AggregateDevice_Common2.cpp";
      __int16 v26 = 1024;
      int v27 = 2447;
      __int16 v28 = 2080;
      int v29 = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v20);
      __int16 v18 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136316162;
      __int16 v25 = "AggregateDevice_Common2.cpp";
      __int16 v26 = 1024;
      int v27 = 2448;
      __int16 v28 = 2080;
      int v29 = v18;
      __int16 v30 = 1024;
      int v31 = a3;
      __int16 v32 = 2048;
      int v33 = a4;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = &off_6414D8;
    v19[2] = 561211770;
  }
  if (a2->mSelector == 1936482681)
  {
    uint64_t v8 = 776;
    if (a2->mScope == 1768845428) {
      uint64_t v8 = 760;
    }
    uint64_t v9 = *(int **)(a1 + v8);
    if (v9 && (int v10 = *v9) != 0) {
      return (16 * v10) | 8u;
    }
    else {
      return 0;
    }
  }
  else
  {
    return sub_A3258(a1, a2, a3, a4);
  }
}

uint64_t sub_3509A0(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  sub_3499D4(a1);
  if (a2->mSelector == 1936482681) {
    return 0;
  }

  return sub_A4DE8(a1, a2);
}

uint64_t sub_350A04(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  sub_3499D4(a1);
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if (a2->mSelector == 1937077093 || mSelector == 1937009955) {
    return 0;
  }
  if (mSelector == 1936482681)
  {
    AudioObjectPropertyScope mScope = a2->mScope;
    return mScope == 1869968496 || mScope == 1768845428;
  }
  else
  {
    return sub_4B484(a1, a2);
  }
}

void sub_350AA8(uint64_t a1)
{
  sub_350AE0(a1);

  operator delete();
}

uint64_t sub_350AE0(uint64_t a1)
{
  *(void *)a1 = off_634F28;
  uint64_t v2 = *(void **)(a1 + 664);
  uint64_t v3 = *(void **)(a1 + 672);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  uint64_t v4 = *(void **)(a1 + 688);
  uint64_t v5 = *(void **)(a1 + 696);
  while (v4 != v5)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  uint64_t v6 = *(void **)(a1 + 712);
  uint64_t v7 = *(void **)(a1 + 720);
  while (v6 != v7)
  {
    if (*v6) {
      (*(void (**)(void))(*(void *)*v6 + 8))(*v6);
    }
    ++v6;
  }
  uint64_t v8 = *(void **)(a1 + 736);
  uint64_t v9 = *(void **)(a1 + 744);
  while (v8 != v9)
  {
    if (*v8) {
      (*(void (**)(void))(*(void *)*v8 + 8))(*v8);
    }
    ++v8;
  }
  sub_1216C((unsigned int **)(a1 + 776));
  sub_1216C((unsigned int **)(a1 + 760));
  int v10 = *(void **)(a1 + 736);
  if (v10)
  {
    *(void *)(a1 + 744) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 712);
  if (v11)
  {
    *(void *)(a1 + 720) = v11;
    operator delete(v11);
  }
  unsigned int v12 = *(void **)(a1 + 688);
  if (v12)
  {
    *(void *)(a1 + 696) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 664);
  if (v13)
  {
    *(void *)(a1 + 672) = v13;
    operator delete(v13);
  }
  char v14 = *(void **)(a1 + 640);
  if (v14)
  {
    *(void *)(a1 + 648) = v14;
    operator delete(v14);
  }

  return sub_A618C(a1);
}

uint64_t sub_350CAC(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = -1;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  if (!a2)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        uint64_t v6 = "AggregateDevice_Common2.cpp";
        __int16 v7 = 1024;
        int v8 = 135;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v5, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return result;
}

void sub_350DC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_4636C(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_350DF4(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)uint64_t result = a3;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  if (!a2)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        __int16 v7 = "AggregateDevice_Common2.cpp";
        __int16 v8 = 1024;
        int v9 = 143;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v6, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return result;
}

void sub_350F0C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_4636C(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_350F38(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_634BC8;
  *(_DWORD *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  if (!a4)
  {
    uint64_t v41 = (os_log_t *)sub_32A48(13);
    int v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v55 = "AggregateDevice_Common2.cpp";
      __int16 v56 = 1024;
      int v57 = 299;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = a1;
  if (a3)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a3 + 136))(&v46, a3);
    if (v47)
    {
      int v5 = std::__shared_weak_count::lock(v47);
      int v6 = v5;
      if (v5)
      {
        uint64_t v7 = v46;
        if (v46)
        {
          __int16 v45 = v5;
          uint64_t v8 = *(void *)(v4 + 32);
          uint64_t v9 = sub_31B098(v46);
          int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 88))(v8, v9);
          uint64_t v44 = v4;
          if (v10)
          {
            uint64_t v11 = 0;
            int v12 = 0;
            if (v9) {
              int v13 = 1869968496;
            }
            else {
              int v13 = 1768845428;
            }
            while (1)
            {
              uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 96))(v8, v9, v11);
              if (!v14) {
                break;
              }
              int v15 = *(std::__shared_weak_count **)(v7 + 88);
              if (v15)
              {
                uint64_t v16 = std::__shared_weak_count::lock(v15);
                if (v16)
                {
                  uint64_t v17 = *(void *)(v7 + 80);
                  sub_4636C(v16);
                  if (v17)
                  {
                    if (v17 == v14)
                    {
                      uint64_t v29 = sub_32A48(16);
                      uint64_t v4 = v44;
                      if (*(unsigned char *)(v29 + 8))
                      {
                        __int16 v30 = *(NSObject **)v29;
                        if (*(void *)v29)
                        {
                          if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
                          {
                            if (v9) {
                              int v31 = "output";
                            }
                            else {
                              int v31 = "input";
                            }
                            p_p = &__p;
                            sub_21C8C(&__p, v31);
                            if (v53 < 0) {
                              p_p = (void **)__p;
                            }
                            int v33 = v49;
                            sub_4F64((uint64_t)v49, (os_unfair_lock_t)(v7 + 8));
                            if (v50 < 0) {
                              int v33 = (void **)v49[0];
                            }
                            int v34 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
                            (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v8 + 128))(v48, v8);
                            *(_DWORD *)AudioTimeStamp buf = 136316674;
                            uint64_t v55 = "AggregateDevice_Common2.cpp";
                            __int16 v56 = 1024;
                            int v57 = 109;
                            __int16 v58 = 2080;
                            int v59 = p_p;
                            *(_WORD *)char v60 = 2080;
                            *(void *)&v60[2] = v33;
                            *(_WORD *)&v60[10] = 1024;
                            *(_DWORD *)&v60[12] = v12;
                            *(_WORD *)&v60[16] = 1024;
                            *(_DWORD *)&v60[18] = v34;
                            __int16 v61 = 2112;
                            uint64_t v62 = v48[0];
                            _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s channels for stream %s begin at index %u within the AudioChannelLayouts of PhysicalDevice ID %u (uid: \"%@\").", buf, 0x3Cu);
                            sub_72924((uint64_t)v48);
                            if (v50 < 0) {
                              operator delete(v49[0]);
                            }
                            if (v53 < 0) {
                              operator delete(__p);
                            }
                          }
                        }
                      }
                      *(_DWORD *)(v44 + 12) = v12;
                      *(unsigned char *)(v44 + 16) = 1;
                      int v6 = v45;
                      goto LABEL_51;
                    }
                  }
                }
              }
              LODWORD(__p) = 1885762592;
              HIDWORD(__p) = v13;
              int v52 = 0;
              LODWORD(v49[0]) = 40;
              (*(void (**)(uint64_t, void **, void, void, void **, uint8_t *))(*(void *)v14 + 40))(v14, &__p, 0, 0, v49, buf);
              v12 += *(_DWORD *)v60;
              uint64_t v11 = (v11 + 1);
              if (v10 == v11) {
                goto LABEL_16;
              }
            }
            __int16 v36 = (os_log_t *)sub_32A48(13);
            int v37 = *v36;
            if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
            {
              if (v9) {
                int v38 = "output";
              }
              else {
                int v38 = "input";
              }
              int v39 = &__p;
              sub_21C8C(&__p, v38);
              if (v53 < 0) {
                int v39 = (void **)__p;
              }
              int v40 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
              (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 128))(v49, v8);
              *(_DWORD *)AudioTimeStamp buf = 136316418;
              uint64_t v55 = "AggregateDevice_Common2.cpp";
              __int16 v56 = 1024;
              int v57 = 103;
              __int16 v58 = 2080;
              int v59 = v39;
              *(_WORD *)char v60 = 1024;
              *(_DWORD *)&v60[2] = v11;
              *(_WORD *)&v60[6] = 1024;
              *(_DWORD *)&v60[8] = v40;
              *(_WORD *)&v60[12] = 2112;
              *(void **)&v60[14] = v49[0];
              _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [curStreamPtr is NULL]: \"Encountered a NULL %s stream at index %u in PhysicalDevice ID %u (uid: \\\"%@\\\").\"", buf, 0x32u);
              sub_72924((uint64_t)v49);
              if (v53 < 0) {
                operator delete(__p);
              }
            }
            int v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v22, "Encountered a NULL %s stream at index %u in PhysicalDevice ID %u (uid: \"%@\").");
          }
          else
          {
LABEL_16:
            __int16 v18 = (os_log_t *)sub_32A48(13);
            uint64_t v19 = *v18;
            if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
            {
              uint64_t v20 = &__p;
              sub_4F64((uint64_t)&__p, (os_unfair_lock_t)(v7 + 8));
              if (v53 < 0) {
                uint64_t v20 = (void **)__p;
              }
              int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
              (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 128))(v49, v8);
              *(_DWORD *)AudioTimeStamp buf = 136316162;
              uint64_t v55 = "AggregateDevice_Common2.cpp";
              __int16 v56 = 1024;
              int v57 = 124;
              __int16 v58 = 2080;
              int v59 = v20;
              *(_WORD *)char v60 = 1024;
              *(_DWORD *)&v60[2] = v21;
              *(_WORD *)&v60[6] = 2112;
              *(void **)&v60[8] = v49[0];
              _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not find stream %s in PhysicalDevice ID %u (uid: \\\"%@\\\").\"", buf, 0x2Cu);
              sub_72924((uint64_t)v49);
              if (v53 < 0) {
                operator delete(__p);
              }
            }
            int v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v22, "Could not find stream %s in PhysicalDevice ID %u (uid: \"%@\").");
          }
        }
      }
    }
    else
    {
      int v6 = 0;
    }
    if (!*(unsigned char *)(v4 + 16))
    {
      char v23 = (os_log_t *)sub_32A48(16);
      int v24 = *v23;
      if (*v23)
      {
        if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
        {
          sub_4F64((uint64_t)&__p, (os_unfair_lock_t)&dword_8);
          int v25 = v53;
          __int16 v26 = (void **)__p;
          sub_4F64((uint64_t)v49, (os_unfair_lock_t)(*(void *)(v4 + 32) + 8));
          int v27 = &__p;
          if (v25 < 0) {
            int v27 = v26;
          }
          if (v50 >= 0) {
            __int16 v28 = v49;
          }
          else {
            __int16 v28 = (void **)v49[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          uint64_t v55 = "AggregateDevice_Common2.cpp";
          __int16 v56 = 1024;
          int v57 = 311;
          __int16 v58 = 2080;
          int v59 = v27;
          *(_WORD *)char v60 = 2080;
          *(void *)&v60[2] = v28;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not find underlying stream channel index for stream %s of device %s", buf, 0x26u);
          if (v50 < 0) {
            operator delete(v49[0]);
          }
          if (v53 < 0) {
            operator delete(__p);
          }
        }
      }
    }
LABEL_51:
    if (v6) {
      sub_4636C(v6);
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return v4;
}

void sub_351754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a10) {
    sub_4636C(a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_351810(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = a1 + 688;
  uint64_t v4 = 664;
  if (a2) {
    uint64_t v4 = 688;
  }
  else {
    uint64_t v3 = a1 + 664;
  }
  uint64_t v5 = *(void *)(a1 + v4);
  if (a3 >= (unint64_t)((*(void *)(v3 + 8) - v5) >> 3))
  {
    uint64_t v14 = v3;
    uint64_t v16 = v4;
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      if (a2) {
        int v10 = "output";
      }
      else {
        int v10 = "input";
      }
      sub_21C8C(__p, v10);
      if (v19 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      uint64_t v12 = (uint64_t)(*(void *)(v14 + 8) - *(void *)(a1 + v16)) >> 3;
      *(_DWORD *)AudioTimeStamp buf = 136316162;
      int v21 = "AggregateDevice_Common2.cpp";
      __int16 v22 = 1024;
      int v23 = 937;
      __int16 v24 = 2080;
      int v25 = v11;
      __int16 v26 = 2048;
      uint64_t v27 = v12;
      __int16 v28 = 1024;
      unsigned int v29 = a3;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"%s cache has %lu items (requested index %u).\"", buf, 0x2Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_82578(exception, "%s cache has %lu items (requested index %u).");
  }
  return *(void *)(v5 + 8 * a3);
}

void sub_3519D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *sub_3519EC(std::string *a1, uint64_t a2)
{
  sub_21C8C(a1, "[ ");
  std::to_string(&v22, *(_DWORD *)a2);
  uint64_t v4 = std::string::insert(&v22, 0, "Client Stream Index: ", 0x15uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = std::string::append(&v23, "; ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v25 = v6->__r_.__value_.__r.__words[2];
  long long v24 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v25 >= 0) {
    uint64_t v8 = (const std::string::value_type *)&v24;
  }
  else {
    uint64_t v8 = (const std::string::value_type *)v24;
  }
  if (v25 >= 0) {
    std::string::size_type v9 = HIBYTE(v25);
  }
  else {
    std::string::size_type v9 = *((void *)&v24 + 1);
  }
  std::string::append(a1, v8, v9);
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  int v10 = *(os_unfair_lock_s **)(a2 + 8);
  if (v10)
  {
    sub_4F64((uint64_t)&v22, v10 + 2);
    uint64_t v11 = std::string::insert(&v22, 0, "Underlying Stream: ", 0x13uLL);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    int v13 = std::string::append(&v23, "; ", 2uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    int64_t v25 = v13->__r_.__value_.__r.__words[2];
    long long v24 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (v25 >= 0) {
      int v15 = (const std::string::value_type *)&v24;
    }
    else {
      int v15 = (const std::string::value_type *)v24;
    }
    if (v25 >= 0) {
      std::string::size_type v16 = HIBYTE(v25);
    }
    else {
      std::string::size_type v16 = *((void *)&v24 + 1);
    }
    std::string::append(a1, v15, v16);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  sub_4F64((uint64_t)&v23, (os_unfair_lock_t)(*(void *)(a2 + 24) + 8));
  uint64_t v17 = std::string::insert(&v23, 0, "Physical Device: ", 0x11uLL);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  int64_t v25 = v17->__r_.__value_.__r.__words[2];
  long long v24 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (v25 >= 0) {
    char v19 = (const std::string::value_type *)&v24;
  }
  else {
    char v19 = (const std::string::value_type *)v24;
  }
  if (v25 >= 0) {
    std::string::size_type v20 = HIBYTE(v25);
  }
  else {
    std::string::size_type v20 = *((void *)&v24 + 1);
  }
  std::string::append(a1, v19, v20);
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_351C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_351CE4(uint64_t a1, long long *a2, void **a3)
{
  *(_DWORD *)AudioTimeStamp buf = *((_DWORD *)a2 + 13);
  *(void *)&void v20[4] = *((void *)a2 + 7);
  sub_A603C((uint64_t *)&v20[12], (uint64_t)(a2 + 4));
  memset(v21, 0, sizeof(v21));
  sub_67D90(v21, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  long long v6 = a2[1];
  long long v22 = *a2;
  long long v23 = v6;
  long long v24 = a2[2];
  uint64_t v7 = *((void *)a2 + 12);
  _OWORD v25[2] = 0;
  _OWORD v25[3] = v7;
  v25[0] = v25;
  v25[1] = v25;
  sub_46A4C(v26, (uint64_t)a2 + 104);
  sub_CAE80(&v27, a2 + 8);
  sub_CAE80(&__p, a2 + 10);
  sub_A5F28(a1, (uint64_t)buf);
  if (v32 && v31 < 0) {
    operator delete(__p);
  }
  if (v29 && v28 < 0) {
    operator delete(v27);
  }
  sub_463E0((void *)v26[1]);
  sub_45F50(v25);
  long long v18 = (void **)v21;
  sub_638B4(&v18);
  sub_A60C4((uint64_t *)&v20[12]);
  *(void *)a1 = off_634F28;
  *(_WORD *)(a1 + 632) = *((_WORD *)a2 + 44);
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  uint64_t v8 = operator new(8uLL);
  *(void *)(a1 + 664) = v8;
  *v8++ = 0;
  *(void *)(a1 + 680) = v8;
  *(void *)(a1 + 672) = v8;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  std::string::size_type v9 = operator new(8uLL);
  *(void *)(a1 + 688) = v9;
  *v9++ = 0;
  *(void *)(a1 + 704) = v9;
  *(void *)(a1 + 696) = v9;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 720) = 0;
  int v10 = operator new(8uLL);
  *(void *)(a1 + 712) = v10;
  *v10++ = 0;
  *(void *)(a1 + 728) = v10;
  *(void *)(a1 + 720) = v10;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 744) = 0;
  uint64_t v11 = operator new(8uLL);
  *(void *)(a1 + 736) = v11;
  *v11++ = 0;
  *(void *)(a1 + 752) = v11;
  *(void *)(a1 + 744) = v11;
  *(void *)(a1 + 760) = 0;
  *(_DWORD *)(a1 + 768) = 0;
  *(void *)(a1 + 776) = 0;
  *(_DWORD *)(a1 + 784) = 0;
  *(int32x2_t *)(a1 + 792) = vdup_n_s32(0x2D706D74u);
  *(_DWORD *)(a1 + 800) = 0;
  if (!*((_DWORD *)a2 + 13))
  {
    int v13 = (os_log_t *)sub_32A48(13);
    long long v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)std::string::size_type v20 = "AggregateDevice_Common2.cpp";
      *(_WORD *)&v20[8] = 1024;
      *(_DWORD *)&v20[10] = 765;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
LABEL_17:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!*((void *)a2 + 7))
  {
    int v15 = (os_log_t *)sub_32A48(13);
    std::string::size_type v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)std::string::size_type v20 = "AggregateDevice_Common2.cpp";
      *(_WORD *)&v20[8] = 1024;
      *(_DWORD *)&v20[10] = 766;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    goto LABEL_17;
  }
  return a1;
}

void sub_352064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  __cxa_free_exception(v39);
  sub_1216C((unsigned int **)(v38 + 776));
  sub_1216C((unsigned int **)(v38 + 760));
  uint64_t v41 = *(void **)(v38 + 736);
  if (v41)
  {
    *(void *)(v38 + 744) = v41;
    operator delete(v41);
  }
  int v42 = *(void **)(v38 + 712);
  if (v42)
  {
    *(void *)(v38 + 720) = v42;
    operator delete(v42);
  }
  char v43 = *(void **)(v38 + 688);
  if (v43)
  {
    *(void *)(v38 + 696) = v43;
    operator delete(v43);
  }
  uint64_t v44 = (void **)(v38 + 640);
  __int16 v45 = *(void **)(v38 + 664);
  if (v45)
  {
    *(void *)(v38 + 672) = v45;
    operator delete(v45);
  }
  uint64_t v46 = *v44;
  if (*v44)
  {
    *(void *)(v38 + 648) = v46;
    operator delete(v46);
  }
  sub_A618C(v38);
  _Unwind_Resume(a1);
}

void *sub_35219C(uint64_t a1, uint64_t a2)
{
  *((void *)&v164 + 1) = 0;
  *(void *)&v165[0] = 0;
  *(void *)&long long v164 = (char *)&v164 + 8;
  sub_35366C(buf, a2, 0);
  sub_35366C(&v167, a2, 1);
  for (uint64_t i = *(void *)&buf[8]; (unsigned char *)i != buf; uint64_t i = *(void *)(i + 8))
    sub_3537D0((uint64_t *)&v164, (uint64_t *)&v164 + 1, *(void *)(i + 16), *(void *)(i + 16));
  for (uint64_t j = v168; j != (uint64_t *)&v167; uint64_t j = (uint64_t *)j[1])
    sub_3537D0((uint64_t *)&v164, (uint64_t *)&v164 + 1, j[2], j[2]);
  sub_35399C(v166, (void *)v164, (void *)&v164 + 1);
  sub_45F50(&v167);
  sub_45F50(buf);
  sub_463E0(*((void **)&v164 + 1));
  sub_220F38((uint64_t *)&v164, (uint64_t)v166);
  sub_8108((uint64_t *)(a1 + 184));
  uint64_t v6 = *(void *)&v165[0];
  if (*(void *)&v165[0])
  {
    long long v7 = v164;
    uint64_t v8 = **((void **)&v164 + 1);
    *(void *)(v8 + 8) = *(void *)(v164 + 8);
    **(void **)(v7 + 8) = v8;
    uint64_t v9 = *(void *)(a1 + 184);
    *(void *)(v9 + 8) = *((void *)&v7 + 1);
    **((void **)&v7 + 1) = v9;
    *(void *)(a1 + 184) = v7;
    *(void *)(v7 + 8) = a1 + 184;
    *(void *)(a1 + 200) += v6;
    *(void *)&v165[0] = 0;
  }
  sub_8108((uint64_t *)&v164);
  sub_35366C(&v164, a2, 0);
  sub_45F50((void *)(a1 + 472));
  uint64_t v10 = *(void *)&v165[0];
  if (*(void *)&v165[0])
  {
    long long v11 = v164;
    uint64_t v12 = **((void **)&v164 + 1);
    *(void *)(v12 + 8) = *(void *)(v164 + 8);
    **(void **)(v11 + 8) = v12;
    uint64_t v13 = *(void *)(a1 + 472);
    *(void *)(v13 + 8) = *((void *)&v11 + 1);
    **((void **)&v11 + 1) = v13;
    *(void *)(a1 + 472) = v11;
    *(void *)(v11 + 8) = a1 + 472;
    *(void *)(a1 + 488) += v10;
    *(void *)&v165[0] = 0;
  }
  sub_45F50(&v164);
  sub_35366C(&v164, a2, 1);
  sub_45F50((void *)(a1 + 496));
  uint64_t v14 = *(void *)&v165[0];
  if (*(void *)&v165[0])
  {
    long long v15 = v164;
    uint64_t v16 = **((void **)&v164 + 1);
    *(void *)(v16 + 8) = *(void *)(v164 + 8);
    **(void **)(v15 + 8) = v16;
    uint64_t v17 = *(void *)(a1 + 496);
    *(void *)(v17 + 8) = *((void *)&v15 + 1);
    **((void **)&v15 + 1) = v17;
    *(void *)(a1 + 496) = v15;
    *(void *)(v15 + 8) = a1 + 496;
    *(void *)(a1 + 512) += v14;
    *(void *)&v165[0] = 0;
  }
  sub_45F50(&v164);
  if (a1 + 640 != a2 + 96) {
    sub_6720C((char *)(a1 + 640), *(char **)(a2 + 96), *(void *)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 2);
  }
  sub_353A64(&v164, (void *)a2, (uint64_t)v166, a1, *(unsigned __int8 *)(a1 + 632));
  long long v18 = (void *)(a1 + 664);
  char v19 = *(void **)(a1 + 664);
  if (v19)
  {
    *(void *)(a1 + 672) = v19;
    operator delete(v19);
    *long long v18 = 0;
    *(void *)(a1 + 672) = 0;
    *(void *)(a1 + 680) = 0;
  }
  *(_OWORD *)long long v18 = v164;
  *(void *)(a1 + 680) = *(void *)&v165[0];
  sub_353A64(&v164, (void *)(a2 + 24), (uint64_t)v166, a1, *(unsigned __int8 *)(a1 + 632));
  std::string::size_type v20 = *(void **)(a1 + 688);
  if (v20)
  {
    *(void *)(a1 + 696) = v20;
    operator delete(v20);
    *(void *)(a1 + 688) = 0;
    *(void *)(a1 + 696) = 0;
    *(void *)(a1 + 704) = 0;
  }
  *(_OWORD *)(a1 + 688) = v164;
  *(void *)(a1 + 704) = *(void *)&v165[0];
  sub_353EF4(&v164, 0, (uint64_t *)(a2 + 48));
  long long v22 = (void *)(a1 + 712);
  uint64_t v21 = *(void **)(a1 + 712);
  if (v21)
  {
    *(void *)(a1 + 720) = v21;
    operator delete(v21);
    void *v22 = 0;
    *(void *)(a1 + 720) = 0;
    *(void *)(a1 + 728) = 0;
  }
  *(_OWORD *)long long v22 = v164;
  *(void *)(a1 + 728) = *(void *)&v165[0];
  sub_353EF4(&v164, 1, (uint64_t *)(a2 + 72));
  long long v23 = *(void **)(a1 + 736);
  if (v23)
  {
    *(void *)(a1 + 744) = v23;
    operator delete(v23);
    *(void *)(a1 + 736) = 0;
    *(void *)(a1 + 744) = 0;
    *(void *)(a1 + 752) = 0;
  }
  *(_OWORD *)(a1 + 736) = v164;
  *(void *)(a1 + 752) = *(void *)&v165[0];
  int v168 = 0;
  int v169 = 0;
  int v167 = &v168;
  uint64_t v24 = *(void *)a2;
  if (*(void *)(a2 + 8) != *(void *)a2)
  {
    unint64_t v25 = 0;
    unsigned int v26 = 1;
    do
    {
      sub_3546C8((uint64_t *)&v167, *(void *)(v24 + 16 * v25), v24 + 16 * v25);
      unint64_t v25 = v26;
      uint64_t v24 = *(void *)a2;
      ++v26;
    }
    while (v25 < (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  }
  uint64_t v27 = *(void *)(a2 + 24);
  if (*(void *)(a2 + 32) != v27)
  {
    unint64_t v28 = 0;
    unsigned int v29 = 1;
    do
    {
      sub_3546C8((uint64_t *)&v167, *(void *)(v27 + 16 * v28), v27 + 16 * v28);
      unint64_t v28 = v29;
      uint64_t v27 = *(void *)(a2 + 24);
      ++v29;
    }
    while (v28 < (*(void *)(a2 + 32) - v27) >> 4);
  }
  uint64_t v30 = *(void *)(a2 + 48);
  if (*(void *)(a2 + 56) != v30)
  {
    unint64_t v31 = 0;
    unsigned int v32 = 1;
    do
    {
      sub_3546C8((uint64_t *)&v167, *(void *)(v30 + 32 * v31 + 8), v30 + 32 * v31 + 8);
      unint64_t v31 = v32;
      uint64_t v30 = *(void *)(a2 + 48);
      ++v32;
    }
    while (v31 < (*(void *)(a2 + 56) - v30) >> 5);
  }
  uint64_t v33 = *(void *)(a2 + 72);
  if (*(void *)(a2 + 80) != v33)
  {
    unint64_t v34 = 0;
    unsigned int v35 = 1;
    do
    {
      sub_3546C8((uint64_t *)&v167, *(void *)(v33 + 32 * v34 + 8), v33 + 32 * v34 + 8);
      unint64_t v34 = v35;
      uint64_t v33 = *(void *)(a2 + 72);
      ++v35;
    }
    while (v34 < (*(void *)(a2 + 80) - v33) >> 5);
  }
  if (v168)
  {
    __int16 v36 = v168;
    do
    {
      int v37 = v36;
      __int16 v36 = (uint64_t *)*v36;
    }
    while (v36);
    if (v37 != (uint64_t *)&v168 && !v37[4])
    {
      uint64_t v38 = (uint64_t *)v37[1];
      if (v38)
      {
        do
        {
          int v39 = (uint64_t **)v38;
          uint64_t v38 = (uint64_t *)*v38;
        }
        while (v38);
      }
      else
      {
        int v40 = v37;
        do
        {
          int v39 = (uint64_t **)v40[2];
          BOOL v41 = *v39 == v40;
          int v40 = (uint64_t *)v39;
        }
        while (!v41);
      }
      if (v167 == (uint64_t **)v37) {
        int v167 = v39;
      }
      --v169;
      sub_89144(v168, v37);
      int v42 = (std::__shared_weak_count *)v37[5];
      if (v42) {
        sub_4636C(v42);
      }
      operator delete(v37);
    }
  }
  uint64_t v156 = (uint64_t *)a1;
  uint64_t v43 = sub_32A48(16);
  uint64_t v153 = (uint64_t **)(a1 + 736);
  uint64_t v154 = (void *)(a1 + 184);
  unint64_t v155 = (void *)(a1 + 712);
  if (*(unsigned char *)(v43 + 8))
  {
    uint64_t v44 = *(NSObject **)v43;
    if (*(void *)v43)
    {
      if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315650;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 740;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v169;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d Added %lu streams to the delete list.", buf, 0x1Cu);
      }
    }
  }
  long long v164 = 0u;
  memset(v165, 0, sizeof(v165));
  __int16 v45 = (uint64_t *)v167;
  if (v167 != &v168)
  {
    do
    {
      int v46 = sub_31B098(v45[4]);
      if (v46) {
        uint64_t v47 = 24;
      }
      else {
        uint64_t v47 = 0;
      }
      if (v46) {
        uint64_t v48 = 32;
      }
      else {
        uint64_t v48 = 8;
      }
      __int16 v49 = *(void **)((char *)&v165[-1] + v48);
      if (v46) {
        char v50 = (_OWORD *)((char *)v165 + 8);
      }
      else {
        char v50 = &v164;
      }
      if (v46) {
        uint64_t v51 = 40;
      }
      else {
        uint64_t v51 = 16;
      }
      if (v46) {
        int v52 = (char *)&v165[1] + 8;
      }
      else {
        int v52 = (char *)v165;
      }
      unint64_t v53 = *(void *)((char *)&v165[-1] + v51);
      if ((unint64_t)v49 >= v53)
      {
        uint64_t v56 = *(void *)((char *)&v165[-1] + v47);
        uint64_t v57 = ((uint64_t)v49 - v56) >> 4;
        unint64_t v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 60) {
          sub_60548();
        }
        uint64_t v59 = v53 - v56;
        if (v59 >> 3 > v58) {
          unint64_t v58 = v59 >> 3;
        }
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v60 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v60 = v58;
        }
        *(void *)&unsigned char buf[32] = v52;
        __int16 v61 = (char *)sub_10724(v60);
        uint64_t v62 = &v61[16 * v57];
        *(void *)AudioTimeStamp buf = v61;
        *(void *)&buf[8] = v62;
        *(void *)&unsigned char buf[24] = &v61[16 * v63];
        long long v64 = *((_OWORD *)v45 + 2);
        *(_OWORD *)uint64_t v62 = v64;
        if (*((void *)&v64 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v64 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)&buf[16] = v62 + 16;
        sub_D2658(v50, buf);
        uint64_t v55 = *(void **)((char *)&v165[-1] + v48);
        sub_98E24((uint64_t)buf);
      }
      else
      {
        *__int16 v49 = v45[4];
        uint64_t v54 = v45[5];
        v49[1] = v54;
        if (v54) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v55 = v49 + 2;
        *(void *)((char *)&v165[-1] + v48) = v49 + 2;
      }
      *(void *)((char *)&v165[-1] + v48) = v55;
      std::chrono::steady_clock::time_point v65 = (uint64_t *)v45[1];
      if (v65)
      {
        do
        {
          uint32_t v66 = (uint64_t **)v65;
          std::chrono::steady_clock::time_point v65 = (uint64_t *)*v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          uint32_t v66 = (uint64_t **)v45[2];
          BOOL v41 = *v66 == v45;
          __int16 v45 = (uint64_t *)v66;
        }
        while (!v41);
      }
      __int16 v45 = (uint64_t *)v66;
    }
    while (v66 != &v168);
  }
  uint64_t v67 = a1;
  sub_144844(v168);
  sub_17CE38((uint64_t *)(a1 + 520));
  *(_OWORD *)(a1 + 520) = v164;
  *(void *)(a1 + 536) = *(void *)&v165[0];
  *(void *)&v165[0] = 0;
  long long v164 = 0uLL;
  sub_17CE38((uint64_t *)(a1 + 544));
  *(_OWORD *)(a1 + 544) = *(_OWORD *)((char *)v165 + 8);
  *(void *)(a1 + 560) = *((void *)&v165[1] + 1);
  memset((char *)v165 + 8, 0, 24);
  sub_16D108((uint64_t)&v167, 0, *(_DWORD *)(v67 + 128), *(void *)(v67 + 416));
  sub_16D108((uint64_t)v162, 1, *(_DWORD *)(v67 + 128), *(void *)(v67 + 416));
  if (*((_DWORD *)v163 + 2) != (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5)
  {
    int v143 = (os_log_t *)sub_32A48(13);
    uint64_t v144 = *v143;
    if (*v143 && os_log_type_enabled(*v143, OS_LOG_TYPE_ERROR))
    {
      int v145 = *((_DWORD *)v163 + 2);
      uint64_t v146 = (uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 5;
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 808;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v145;
      *(_WORD *)&unsigned char buf[24] = 2048;
      *(void *)&buf[26] = v146;
      _os_log_impl(&def_1E50E8, v144, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"The number of output streams in the aggregate device's actual AudioHardwareIOProcStreamUsage structure (count: %u) does not match the number of streams in the UnderlyingStreamInfo vector (count: %lu).\"", buf, 0x22u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "The number of output streams in the aggregate device's actual AudioHardwareIOProcStreamUsage structure (count: %u) does not match the number of streams in the UnderlyingStreamInfo vector (count: %lu).");
  }
  uint64_t v152 = (uint64_t *)(a1 + 268);
  uint64_t v69 = *(void *)(a2 + 48);
  uint64_t v68 = *(void *)(a2 + 56);
  if (v68 == v69)
  {
    uint64_t v70 = 0;
  }
  else
  {
    uint64_t v70 = 0;
    __int16 v71 = 0;
    unint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    unsigned int v75 = 0;
    do
    {
      uint64_t v76 = (int *)(v69 + 32 * v74);
      int v77 = *v76;
      if (*v76 != -1)
      {
        if ((unint64_t)v73 >= v72)
        {
          uint64_t v78 = (v73 - v70) >> 2;
          unint64_t v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 62) {
            sub_60548();
          }
          if ((uint64_t)(v72 - (void)v70) >> 1 > v79) {
            unint64_t v79 = (uint64_t)(v72 - (void)v70) >> 1;
          }
          if (v72 - (unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v80 = v79;
          }
          if (v80)
          {
            unint64_t v80 = (unint64_t)sub_46BF4(v80);
            uint64_t v82 = v81;
            int v77 = *v76;
            uint64_t v73 = v71;
          }
          else
          {
            uint64_t v82 = 0;
          }
          __int16 v83 = (char *)(v80 + 4 * v78);
          *(_DWORD *)__int16 v83 = v77;
          __int16 v71 = v83 + 4;
          while (v73 != v70)
          {
            int v84 = *((_DWORD *)v73 - 1);
            v73 -= 4;
            *((_DWORD *)v83 - 1) = v84;
            v83 -= 4;
          }
          unint64_t v72 = v80 + 4 * v82;
          if (v70) {
            operator delete(v70);
          }
          uint64_t v70 = v83;
        }
        else
        {
          *(_DWORD *)uint64_t v73 = v77;
          __int16 v71 = v73 + 4;
        }
        uint64_t v69 = *(void *)(a2 + 48);
        uint64_t v68 = *(void *)(a2 + 56);
        uint64_t v73 = v71;
      }
      uint64_t v74 = ++v75;
    }
    while (v75 < (unint64_t)((v68 - v69) >> 5));
  }
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v86 = *(void *)(a2 + 72);
  uint64_t v85 = *(void *)(a2 + 80);
  if (v85 == v86)
  {
    BOOL v87 = 0;
    int v88 = 0;
  }
  else
  {
    BOOL v87 = 0;
    int v88 = 0;
    unint64_t v89 = 0;
    unint64_t v90 = 0;
    uint64_t v91 = 0;
    unsigned int v92 = 0;
    do
    {
      uint64_t v93 = (int *)(v86 + 32 * v91);
      int v94 = *v93;
      if (*v93 != -1)
      {
        if ((unint64_t)v90 >= v89)
        {
          uint64_t v95 = (v90 - v87) >> 2;
          unint64_t v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 62) {
            sub_60548();
          }
          if ((uint64_t)(v89 - (void)v87) >> 1 > v96) {
            unint64_t v96 = (uint64_t)(v89 - (void)v87) >> 1;
          }
          if (v89 - (unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v97 = v96;
          }
          if (v97)
          {
            unint64_t v97 = (unint64_t)sub_46BF4(v97);
            uint64_t v99 = v98;
            int v94 = *v93;
            unint64_t v90 = v88;
          }
          else
          {
            uint64_t v99 = 0;
          }
          AudioObjectPropertyAddress v100 = (char *)(v97 + 4 * v95);
          *(_DWORD *)AudioObjectPropertyAddress v100 = v94;
          int v88 = v100 + 4;
          while (v90 != v87)
          {
            int v101 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v100 - 1) = v101;
            v100 -= 4;
          }
          unint64_t v89 = v97 + 4 * v99;
          if (v87) {
            operator delete(v87);
          }
          BOOL v87 = v100;
        }
        else
        {
          *(_DWORD *)unint64_t v90 = v94;
          int v88 = v90 + 4;
        }
        uint64_t v86 = *(void *)(a2 + 72);
        uint64_t v85 = *(void *)(a2 + 80);
        unint64_t v90 = v88;
      }
      uint64_t v91 = ++v92;
    }
    while (v92 < (unint64_t)((v85 - v86) >> 5));
  }
  std::__sort<std::__less<int,int> &,int *>();
  unint64_t v102 = (v88 - v87) >> 2;
  if (v102 != (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4)
  {
    uint64_t v148 = (os_log_t *)sub_32A48(13);
    uint64_t v149 = *v148;
    if (*v148 && os_log_type_enabled(*v148, OS_LOG_TYPE_ERROR))
    {
      uint64_t v150 = (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 4;
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 841;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = (v88 - v87) >> 2;
      *(_WORD *)&unsigned char buf[28] = 2048;
      *(void *)&buf[30] = v150;
      _os_log_impl(&def_1E50E8, v149, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"The number of valid output streams (indexed as not kDisabledStreamIndex) in the UnderlyingStreamInfo vector (count: %lu) does not match the size of the number in the client stream vector (%lu).\"", buf, 0x26u);
    }
    uint64_t v151 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v151, "The number of valid output streams (indexed as not kDisabledStreamIndex) in the UnderlyingStreamInfo vector (count: %lu) does not match the size of the number in the client stream vector (%lu).");
  }
  if (v88 != v87)
  {
    uint64_t v103 = 0;
    unsigned int v104 = 0;
    do
    {
      if ((*(_DWORD *)&v87[4 * v103] & 0x80000000) != 0)
      {
        AudioObjectID v105 = (os_log_t *)sub_32A48(13);
        AudioObjectPropertyAddress v106 = *v105;
        if (*v105)
        {
          if (os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 844;
            _os_log_impl(&def_1E50E8, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Allowed a negative value into usedOutputClientStreamIndexes.\"", buf, 0x12u);
          }
        }
      }
      if (v104 != *(_DWORD *)&v87[4 * v103])
      {
        unint64_t v140 = (os_log_t *)sub_32A48(13);
        unint64_t v141 = *v140;
        if (*v140 && os_log_type_enabled(*v140, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 845;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v104;
          _os_log_impl(&def_1E50E8, v141, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"There is no indexed client stream %u in the output UnderlyingStreamInfo vector.\"", buf, 0x18u);
        }
        __int16 v142 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v142, "There is no indexed client stream %u in the output UnderlyingStreamInfo vector.");
      }
      uint64_t v103 = ++v104;
    }
    while (v102 > v104);
  }
  if (*((_DWORD *)v169 + 2) != (v156[90] - v156[89]) >> 3)
  {
    int v107 = (os_log_t *)sub_32A48(16);
    uint64_t v108 = *v107;
    if (*v107)
    {
      if (os_log_type_enabled(*v107, OS_LOG_TYPE_ERROR))
      {
        int v109 = *((_DWORD *)v169 + 2);
        uint64_t v110 = (v156[90] - v156[89]) >> 3;
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 855;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v109;
        *(_WORD *)&unsigned char buf[24] = 2048;
        *(void *)&buf[26] = v110;
        _os_log_impl(&def_1E50E8, v108, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of Streams in input stream usage (%u) does not match number of streams in stream cache (%zu)", buf, 0x22u);
      }
    }
  }
  __int16 v111 = v169;
  if (*((_DWORD *)v169 + 2))
  {
    unint64_t v112 = 0;
    while (1)
    {
      uint64_t v113 = *(void *)(*v155 + 8 * v112);
      if (!v113) {
        goto LABEL_160;
      }
      if ((sub_209B38() & 1) == 0) {
        break;
      }
      int v114 = (*(uint64_t (**)(void))(**(void **)(*v155 + 8 * v112) + 160))(*(void *)(*v155 + 8 * v112));
      __int16 v111 = v169;
      if (v114 != -2) {
        goto LABEL_160;
      }
      int v115 = 2;
LABEL_161:
      *(_DWORD *)&v111[4 * v112++ + 12] = v115;
      if (v112 >= *((unsigned int *)v111 + 2)) {
        goto LABEL_162;
      }
    }
    __int16 v111 = v169;
LABEL_160:
    int v115 = v113 != 0;
    goto LABEL_161;
  }
LABEL_162:
  sub_16D560((uint64_t)&v167);
  if (*((_DWORD *)v163 + 2) != (v156[93] - v156[92]) >> 3)
  {
    int v116 = (os_log_t *)sub_32A48(16);
    __int16 v117 = *v116;
    if (*v116)
    {
      if (os_log_type_enabled(*v116, OS_LOG_TYPE_ERROR))
      {
        int v118 = *((_DWORD *)v163 + 2);
        uint64_t v119 = (v156[93] - v156[92]) >> 3;
        *(_DWORD *)AudioTimeStamp buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 876;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v118;
        *(_WORD *)&unsigned char buf[24] = 2048;
        *(void *)&buf[26] = v119;
        _os_log_impl(&def_1E50E8, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of Streams in output stream usage (%u) does not match number of streams in stream cache (%zu)", buf, 0x22u);
      }
    }
  }
  uint64_t v120 = *((unsigned int *)v163 + 2);
  if (v120)
  {
    BOOL v121 = *v153;
    uint64_t v122 = (char *)v163 + 12;
    do
    {
      uint64_t v123 = *v121++;
      *v122++ = v123 != 0;
      --v120;
    }
    while (v120);
  }
  sub_16D560((uint64_t)v162);
  uint64_t v124 = (os_log_t *)sub_32A48(16);
  std::string::size_type v125 = *v124;
  if (*v124 && os_log_type_enabled(*v124, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v160 = *v152;
    uint64_t v126 = &v161;
    sub_4D60(&v161, (unsigned int *)&v160);
    if ((v161.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v126 = (std::string *)v161.__r_.__value_.__r.__words[0];
    }
    sub_16D6C0(&v159, (uint64_t)&v167);
    int v127 = SHIBYTE(v159.__r_.__value_.__r.__words[2]);
    std::string::size_type v128 = v159.__r_.__value_.__r.__words[0];
    sub_16D6C0(__p, (uint64_t)v162);
    uint64_t v129 = &v159;
    if (v127 < 0) {
      uint64_t v129 = (std::string *)v128;
    }
    if (v158 >= 0) {
      uint64_t v130 = __p;
    }
    else {
      uint64_t v130 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136316162;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 882;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v126;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v129;
    *(_WORD *)&buf[38] = 2080;
    *(void *)&uint8_t buf[40] = v130;
    _os_log_impl(&def_1E50E8, v125, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VA stream usage for %s. Input: %s, Output: %s", buf, 0x30u);
    if (v158 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v159.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v161.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v161.__r_.__value_.__l.__data_);
    }
  }
  if (sub_23AC0())
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*v156 + 472))(buf, v156);
    sub_A6748(v156, (uint64_t)(v156 + 53), (uint64_t)&v167, (uint64_t)buf);
    sub_463E0(*(void **)&buf[8]);
  }
  uint64_t v131 = v156[65];
  for (uint64_t k = v156[66]; v131 != k; v131 += 16)
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(*(void *)v131 + 136) + 168))(buf);
    sub_287A5C(v156 + 30, v156[31], *(uint64_t **)buf, *(void **)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4);
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    sub_638B4((void ***)&v161);
  }
  uint64_t v133 = v156[68];
  for (uint64_t m = v156[69]; v133 != m; v133 += 16)
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(*(void *)v133 + 136) + 168))(buf);
    sub_287A5C(v156 + 30, v156[31], *(uint64_t **)buf, *(void **)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4);
    v161.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    sub_638B4((void ***)&v161);
  }
  sub_34C8D8((uint64_t)v156);
  sub_B680((uint64_t *)&v161, v154, "", 905);
  uint64_t v135 = (os_log_t *)sub_32A48(16);
  int v136 = *v135;
  if (*v135 && os_log_type_enabled(*v135, OS_LOG_TYPE_DEBUG))
  {
    int v137 = *((_DWORD *)v156 + 32);
    sub_F7814(&v159, (void *)v161.__r_.__value_.__l.__size_, &v161);
    uint64_t v138 = (v159.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v159
         : (std::string *)v159.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioTimeStamp buf = 136316162;
    *(void *)&uint8_t buf[4] = "AggregateDevice_Common2.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 907;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v137;
    *(_WORD *)&unsigned char buf[24] = 2048;
    *(void *)&buf[26] = v156;
    *(_WORD *)&unsigned char buf[34] = 2080;
    *(void *)&buf[36] = v138;
    _os_log_impl(&def_1E50E8, v136, OS_LOG_TYPE_DEBUG, "%25s:%-5d Created aggregate device [ id: %u; addr: %p ] based on physical devices: %s",
      buf,
      0x2Cu);
    if (SHIBYTE(v159.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v159.__r_.__value_.__l.__data_);
    }
  }
  sub_3499D4((uint64_t)v156);
  sub_B8E4((uint64_t *)&v161);
  if (v87) {
    operator delete(v87);
  }
  if (v70) {
    operator delete(v70);
  }
  free(v163);
  free(v169);
  *(void *)AudioTimeStamp buf = (char *)v165 + 8;
  sub_638B4((void ***)buf);
  *(void *)AudioTimeStamp buf = &v164;
  sub_638B4((void ***)buf);
  return sub_45F50(v166);
}

void sub_353484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,void *a37,uint64_t a38)
{
  __cxa_free_exception(v38);
  if (v40) {
    operator delete(v40);
  }
  if (v39) {
    operator delete(v39);
  }
  free(a36);
  free(*(void **)(v41 - 168));
  sub_354788(&a37);
  sub_45F50((void *)(v41 - 208));
  _Unwind_Resume(a1);
}

void sub_35366C(void *a1, uint64_t a2, int a3)
{
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  long long v15 = &v16;
  uint64_t v4 = a2 + 48;
  uint64_t v5 = 48;
  if (a3)
  {
    uint64_t v5 = 72;
    uint64_t v4 = a2 + 72;
  }
  uint64_t v6 = *(void *)(a2 + v5);
  uint64_t v7 = *(void *)(v4 + 8);
  uint64_t v8 = &v16;
  if (v6 != v7)
  {
    do
    {
      if (*(_DWORD *)v6 != -1)
      {
        uint64_t v9 = &v16;
        uint64_t v10 = &v16;
        if (v16)
        {
          unint64_t v11 = *(void *)(v6 + 24);
          uint64_t v12 = v16;
          while (1)
          {
            while (1)
            {
              uint64_t v10 = (uint64_t **)v12;
              unint64_t v13 = v12[4];
              if (v11 >= v13) {
                break;
              }
              uint64_t v12 = *v10;
              uint64_t v9 = v10;
              if (!*v10) {
                goto LABEL_13;
              }
            }
            if (v13 >= v11) {
              break;
            }
            uint64_t v12 = v10[1];
            if (!v12)
            {
              uint64_t v9 = v10 + 1;
              goto LABEL_13;
            }
          }
        }
        else
        {
LABEL_13:
          uint64_t v14 = (uint64_t *)operator new(0x28uLL);
          void v14[4] = *(void *)(v6 + 24);
          *uint64_t v14 = 0;
          v14[1] = 0;
          v14[2] = (uint64_t)v10;
          *uint64_t v9 = v14;
          if (*v15)
          {
            long long v15 = (uint64_t **)*v15;
            uint64_t v14 = *v9;
          }
          sub_46D00(v16, v14);
          ++v17;
        }
      }
      v6 += 32;
    }
    while (v6 != v7);
    uint64_t v8 = v15;
  }
  sub_35399C(a1, v8, &v16);
  sub_463E0(v16);
}

void sub_3537B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t *sub_3537D0(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  if (result + 1 == a2 || (unint64_t v7 = a2[4], v7 > a3))
  {
    uint64_t v8 = *a2;
    if ((uint64_t *)*result == a2)
    {
      uint64_t v10 = (uint64_t **)a2;
LABEL_16:
      if (v8) {
        unint64_t v13 = v10;
      }
      else {
        unint64_t v13 = (uint64_t **)a2;
      }
      if (v8) {
        unint64_t v11 = v10 + 1;
      }
      else {
        unint64_t v11 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t **)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t **)v9[1];
      }
      while (v9);
    }
    else
    {
      long long v15 = a2;
      do
      {
        uint64_t v10 = (uint64_t **)v15[2];
        BOOL v16 = *v10 == v15;
        long long v15 = (uint64_t *)v10;
      }
      while (v16);
    }
    if ((unint64_t)v10[4] < a3) {
      goto LABEL_16;
    }
    uint64_t v17 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v13 = (uint64_t **)v17;
          unint64_t v18 = v17[4];
          if (v18 <= a3) {
            break;
          }
          uint64_t v17 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v18 >= a3) {
          break;
        }
        uint64_t v6 = v13 + 1;
        uint64_t v17 = v13[1];
        if (!v17) {
          goto LABEL_44;
        }
      }
LABEL_47:
      unint64_t v11 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    if (v7 >= a3) {
      return result;
    }
    unint64_t v11 = (uint64_t **)(a2 + 1);
    uint64_t v12 = (uint64_t *)a2[1];
    if (v12)
    {
      do
      {
        unint64_t v11 = (uint64_t **)v12;
        uint64_t v12 = (uint64_t *)*v12;
        unint64_t v13 = v11;
        uint64_t v14 = v11;
      }
      while (v12);
    }
    else
    {
      uint64_t v14 = (uint64_t **)a2;
      do
      {
        char v19 = v14;
        uint64_t v14 = (uint64_t **)v14[2];
      }
      while (*v14 != (uint64_t *)v19);
      unint64_t v13 = (uint64_t **)a2;
    }
    if (v14 == v6 || (unint64_t)v14[4] > a3)
    {
LABEL_22:
      uint64_t v6 = v11;
      if (*v11) {
        return result;
      }
      goto LABEL_44;
    }
    std::string::size_type v20 = *v6;
    if (*v6)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v13 = (uint64_t **)v20;
          unint64_t v21 = v20[4];
          if (v21 <= a3) {
            break;
          }
          std::string::size_type v20 = *v13;
          uint64_t v6 = v13;
          if (!*v13) {
            goto LABEL_44;
          }
        }
        if (v21 >= a3) {
          goto LABEL_47;
        }
        uint64_t v6 = v13 + 1;
        std::string::size_type v20 = v13[1];
        if (!v20) {
          goto LABEL_44;
        }
      }
    }
  }
  unint64_t v13 = (uint64_t **)(result + 1);
LABEL_44:
  long long v22 = (uint64_t *)operator new(0x28uLL);
  void v22[4] = a4;

  return sub_46CA8(v5, (uint64_t)v13, v6, v22);
}

void *sub_35399C(void *a1, void *a2, void *a3)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0;
    unint64_t v7 = a1;
    do
    {
      uint64_t v8 = operator new(0x18uLL);
      uint64_t v9 = v5[4];
      v8[1] = a1;
      void v8[2] = v9;
      *uint64_t v8 = v7;
      v7[1] = v8;
      *a1 = v8;
      a1[2] = ++v6;
      uint64_t v10 = (void *)v5[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (void *)v5[2];
          BOOL v12 = *v11 == (void)v5;
          uint64_t v5 = v11;
        }
        while (!v12);
      }
      unint64_t v7 = v8;
      uint64_t v5 = v11;
    }
    while (v11 != a3);
  }
  return a1;
}

void sub_353A50(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

void sub_353A64(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  for (uint64_t i = *(void *)(a3 + 8); i != a3; uint64_t i = *(void *)(i + 8))
  {
    if (a5)
    {
      if (sub_36B4A4(*(void *)(i + 16)))
      {
        memset(v12, 0, 40);
        uint64_t v11 = (*(uint64_t (**)(void, void, void))(**(void **)(i + 16) + 96))(*(void *)(i + 16), 0, 0);
        if (!(*(unsigned int (**)(uint64_t, _OWORD *))(*(void *)v11 + 112))(v11, v12))
        {
          *(void *)&v12[0] = (*(double (**)(uint64_t))(*(void *)a4 + 104))(a4);
          v12[3] = *(_OWORD *)((char *)v12 + 1);
          *(_OWORD *)unint64_t v13 = *(_OWORD *)((char *)&v12[1] + 1);
          *(void *)&v13[15] = *(void *)&v12[2];
        }
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2[1] != *a2) {
    operator new();
  }
}

void sub_353E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  BOOL v12 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_353EF4(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    do
    {
      int v9 = *(_DWORD *)(v3 + 32 * v7);
      if (v9 == -2) {
        operator new();
      }
      if (v9 != -1)
      {
        if ((v9 & 0x80000000) == 0 && !*(void *)(v3 + 32 * v7 + 8)) {
          operator new();
        }
        operator new();
      }
      unint64_t v10 = a1[2];
      if ((unint64_t)v6 >= v10)
      {
        uint64_t v11 = (void *)*a1;
        uint64_t v12 = ((uint64_t)v6 - *a1) >> 3;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          sub_60548();
        }
        uint64_t v14 = v10 - (void)v11;
        if (v14 >> 2 > v13) {
          unint64_t v13 = v14 >> 2;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)sub_106EC(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        unint64_t v18 = (void *)(v15 + 8 * v12);
        *unint64_t v18 = 0;
        uint64_t v17 = v18 + 1;
        if (v6 != v11)
        {
          do
          {
            uint64_t v19 = *--v6;
            *--unint64_t v18 = v19;
          }
          while (v6 != v11);
          uint64_t v6 = (void *)*a1;
        }
        *a1 = v18;
        a1[1] = v17;
        a1[2] = v15 + 8 * v16;
        if (v6) {
          operator delete(v6);
        }
      }
      else
      {
        *uint64_t v6 = 0;
        uint64_t v17 = v6 + 1;
      }
      a1[1] = v17;
      uint64_t v3 = *a3;
      uint64_t v6 = v17;
      uint64_t v7 = ++v8;
    }
    while (v8 < (unint64_t)((a3[1] - *a3) >> 5));
  }
}

void sub_3545F4()
{
  __cxa_free_exception(v0);
  operator delete();
}

uint64_t *sub_3546C8(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = operator new(0x30uLL);
    v9[2] = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)int v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    *uint64_t v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      uint64_t *v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    uint64_t result = sub_46D00((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void **sub_354788(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_638B4(&v3);
  uint64_t v3 = a1;
  sub_638B4(&v3);
  return a1;
}

uint64_t sub_3547D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a2)
  {
    unint64_t v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        unsigned int v29 = "AggregateDevice_Common2.cpp";
        __int16 v30 = 1024;
        int v31 = 1409;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inNow is NULL.\"", buf, 0x12u);
      }
    }
  }
  if (!a3)
  {
    unint64_t v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        unsigned int v29 = "AggregateDevice_Common2.cpp";
        __int16 v30 = 1024;
        int v31 = 1410;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inInputData is NULL.\"", buf, 0x12u);
      }
    }
  }
  if (!a4)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    unint64_t v18 = *v17;
    if (*v17)
    {
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        unsigned int v29 = "AggregateDevice_Common2.cpp";
        __int16 v30 = 1024;
        int v31 = 1411;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inInputTime is NULL.\"", buf, 0x12u);
      }
    }
  }
  if (!a5)
  {
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    std::string::size_type v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        unsigned int v29 = "AggregateDevice_Common2.cpp";
        __int16 v30 = 1024;
        int v31 = 1412;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"outOutputData is NULL.\"", buf, 0x12u);
      }
    }
  }
  if (!a6)
  {
    unint64_t v21 = (os_log_t *)sub_32A48(13);
    long long v22 = *v21;
    if (*v21)
    {
      if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        unsigned int v29 = "AggregateDevice_Common2.cpp";
        __int16 v30 = 1024;
        int v31 = 1413;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inOutputTime is NULL.\"", buf, 0x12u);
      }
    }
  }
  if (a7)
  {
    uint64_t v27 = a7;
    *(void *)(a7 + 328) = pthread_self();
    *(unsigned char *)(a7 + 320) = 1;
    if (*(void *)(a7 + 456)) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a7 + 576))(a7, a2, a3, a4, a5, a6, a7);
    }
  }
  else
  {
    long long v23 = (os_log_t *)sub_32A48(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      unsigned int v29 = "AggregateDevice_Common2.cpp";
      __int16 v30 = 1024;
      int v31 = 1414;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inClientData is NULL.\"", buf, 0x12u);
    }
    sub_287344(&v27, 0);
  }
  uint64_t v25 = v27;
  if (v27)
  {
    *(unsigned char *)(v27 + 320) = 0;
    *(void *)(v25 + 328) = 0;
  }
  return 0;
}

void sub_354B8C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12)
{
  if (a2)
  {
    if (a2 == 3)
    {
      unint64_t v13 = __cxa_begin_catch(a1);
      uint64_t v14 = (os_log_t *)sub_32A48(16);
      unint64_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        int v16 = v13[2];
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "AggregateDevice_Common2.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 1425;
        WORD1(a12) = 1024;
        DWORD1(a12) = v16;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException thrown during HandleHALIOProc(): %d.", (uint8_t *)&buf, 0x18u);
      }
    }
    else
    {
      uint64_t v17 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        unint64_t v18 = v17;
        uint64_t v19 = (os_log_t *)sub_32A48(16);
        std::string::size_type v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v21 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "AggregateDevice_Common2.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 1426;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = v21;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception thrown HandleHALIOProc(): %s.", (uint8_t *)&buf, 0x1Cu);
        }
      }
      else
      {
        long long v22 = (os_log_t *)sub_32A48(16);
        long long v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "AggregateDevice_Common2.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 1427;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown HandleHALIOProc().", (uint8_t *)&buf, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x354B40);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_354DB8(uint64_t a1)
{
  uint64_t v3 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v28 = a1 + 40;
  char v29 = (*(uint64_t (**)(uint64_t))(v2 + 16))(a1 + 40);
  unsigned int v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = &v26;
  uint64_t v4 = *(void **)(v3 - 24);
  if (v4 != (void *)(v3 - 16))
  {
    do
    {
      uint64_t v5 = &v26;
      if (v25 == &v26) {
        goto LABEL_11;
      }
      uint64_t v6 = v26;
      uint64_t v7 = &v26;
      if (v26)
      {
        do
        {
          uint64_t v5 = (uint64_t **)v6;
          uint64_t v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v5 = (uint64_t **)v7[2];
          BOOL v8 = *v5 == (uint64_t *)v7;
          uint64_t v7 = v5;
        }
        while (v8);
      }
      int v9 = v5[4];
      unint64_t v10 = v4[4];
      unint64_t v11 = v4[5];
      if ((uint64_t *)v10 == v9 ? (unint64_t)v5[5] < v11 : (unint64_t)v9 < v10)
      {
LABEL_11:
        if (v26)
        {
          v24[0] = v5;
          unint64_t v13 = v5 + 1;
        }
        else
        {
          v24[0] = &v26;
          unint64_t v13 = &v26;
        }
      }
      else
      {
        unint64_t v13 = (uint64_t **)sub_20E9A0((uint64_t)&v25, v24, v10, v11);
      }
      if (!*v13)
      {
        uint64_t v14 = operator new(0x30uLL);
        v14[2] = *((_OWORD *)v4 + 2);
        uint64_t v15 = v24[0];
        *(void *)uint64_t v14 = 0;
        *((void *)v14 + 1) = 0;
        *((void *)v14 + 2) = v15;
        *unint64_t v13 = (uint64_t *)v14;
        if (*v25)
        {
          uint64_t v25 = (uint64_t **)*v25;
          uint64_t v14 = *v13;
        }
        sub_46D00(v26, (uint64_t *)v14);
        ++v27;
      }
      int v16 = (void *)v4[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          int v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v4[2];
          BOOL v8 = *v17 == (void)v4;
          uint64_t v4 = v17;
        }
        while (!v8);
      }
      uint64_t v4 = v17;
    }
    while (v17 != (void *)(v3 - 16));
  }
  sub_523D8(v24, v3);
  int v22 = *(_DWORD *)(a1 + 8);
  uint64_t v23 = 1735159650;
  unint64_t v18 = v25;
  if (v25 != &v26)
  {
    do
    {
      ((void (*)(void, uint64_t, int *, uint64_t *))v18[4])(0, 1, &v22, v18[5]);
      uint64_t v19 = v18[1];
      if (v19)
      {
        do
        {
          std::string::size_type v20 = (uint64_t **)v19;
          uint64_t v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          std::string::size_type v20 = (uint64_t **)v18[2];
          BOOL v8 = *v20 == (uint64_t *)v18;
          unint64_t v18 = v20;
        }
        while (!v8);
      }
      unint64_t v18 = v20;
    }
    while (v20 != &v26);
  }
  sub_52380(v24);
  sub_463E0(v26);
  return sub_3BCAC(&v28);
}

void sub_354FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_463E0(a8);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

void sub_355028(uint64_t a1)
{
  uint64_t v1 = (_OWORD *)(a1 + 1160);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1168);
  _OWORD *v1 = 0u;
  if (v2) {
    sub_4636C(v2);
  }
}

uint64_t sub_355044(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_D8B40(a2, a3);
  if (HIDWORD(v12))
  {
    uint64_t v20 = v12;
    if (sub_D8A6C(v12))
    {
      uint64_t v21 = *(void *)(a1 + 1160);
      if (!v21)
      {
        uint64_t v24 = (os_log_t *)sub_32A48(13);
        uint64_t v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_21E8C(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }
          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 712);
            uint64_t v31 = *(void *)(a1 + 728);
          }
          unsigned int v26 = __dst;
          if (v31 < 0) {
            unsigned int v26 = (void **)__dst[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          uint64_t v33 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v34 = 1024;
          int v35 = 239;
          __int16 v36 = 2080;
          int v37 = v26;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"HAL Speaker Protection is not available for DSP chain %s\"", buf, 0x1Cu);
          if (SHIBYTE(v31) < 0) {
            operator delete(__dst[0]);
          }
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }
      uint64_t v22 = *(void *)(v21 + 16);
      char v23 = *(unsigned char *)(v21 + 148);
      return sub_67F10(v22, v23, v20, a5, a4);
    }
    else
    {
      return sub_6918C(a1, 0x64737067u, v20, (uint64_t)a4, a5, a6);
    }
  }
  else
  {
    unint64_t v13 = (os_log_t *)sub_32A48(24);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__dst, a2);
      int v15 = SHIBYTE(v31);
      int v16 = (void **)__dst[0];
      sub_2417C(__p, a3);
      uint64_t v17 = __dst;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v29 >= 0) {
        unint64_t v18 = __p;
      }
      else {
        unint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      uint64_t v33 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v34 = 1024;
      int v35 = 250;
      __int16 v36 = 2080;
      int v37 = v17;
      __int16 v38 = 2080;
      int v39 = v18;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d TranslateToDSPGraphProperty failure for AU subtype %s as graph parameter %s", buf, 0x26u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete(__dst[0]);
      }
    }
    return 4294967246;
  }
}

void sub_355390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_3553C4(uint64_t a1, unsigned int a2, unsigned int a3, void *a4, UInt32 *a5, uint64_t a6)
{
  unint64_t v12 = sub_D8B40(a2, a3);
  if (HIDWORD(v12))
  {
    uint64_t v20 = v12;
    if (sub_D8A6C(v12))
    {
      uint64_t v21 = *(void *)(a1 + 1160);
      if (!v21)
      {
        uint64_t v24 = (os_log_t *)sub_32A48(13);
        uint64_t v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_21E8C(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }
          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 712);
            uint64_t v31 = *(void *)(a1 + 728);
          }
          unsigned int v26 = __dst;
          if (v31 < 0) {
            unsigned int v26 = (void **)__dst[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          uint64_t v33 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v34 = 1024;
          int v35 = 213;
          __int16 v36 = 2080;
          int v37 = v26;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"HAL Speaker Protection is not available for DSP chain %s\"", buf, 0x1Cu);
          if (SHIBYTE(v31) < 0) {
            operator delete(__dst[0]);
          }
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }
      uint64_t v22 = *(void *)(v21 + 16);
      char v23 = *(unsigned char *)(v21 + 148);
      return sub_67FA0(v22, v23, v20, a5, a4);
    }
    else
    {
      return sub_69498(a1, 0x64737067u, v20, (uint64_t)a4, (uint64_t)a5, a6);
    }
  }
  else
  {
    unint64_t v13 = (os_log_t *)sub_32A48(24);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__dst, a2);
      int v15 = SHIBYTE(v31);
      int v16 = (void **)__dst[0];
      sub_2417C(__p, a3);
      uint64_t v17 = __dst;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v29 >= 0) {
        unint64_t v18 = __p;
      }
      else {
        unint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      uint64_t v33 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v34 = 1024;
      int v35 = 224;
      __int16 v36 = 2080;
      int v37 = v17;
      __int16 v38 = 2080;
      int v39 = v18;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d TranslateToDSPGraphProperty failure for AU subtype %s as graph parameter %s", buf, 0x26u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete(__dst[0]);
      }
    }
    return 4294967246;
  }
}

void sub_355718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_35574C(uint64_t a1, unsigned int a2, unsigned int a3, UInt32 *a4, unsigned char *a5, uint64_t a6)
{
  unint64_t v12 = sub_D8B40(a2, a3);
  if (HIDWORD(v12))
  {
    uint64_t v20 = v12;
    if (sub_D8A6C(v12))
    {
      uint64_t v21 = *(void *)(a1 + 1160);
      if (!v21)
      {
        uint64_t v24 = (os_log_t *)sub_32A48(13);
        uint64_t v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_21E8C(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }
          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 712);
            uint64_t v31 = *(void *)(a1 + 728);
          }
          unsigned int v26 = __dst;
          if (v31 < 0) {
            unsigned int v26 = (void **)__dst[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          uint64_t v33 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v34 = 1024;
          int v35 = 186;
          __int16 v36 = 2080;
          int v37 = v26;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"HAL Speaker Protection is not available for DSP chain %s\"", buf, 0x1Cu);
          if (SHIBYTE(v31) < 0) {
            operator delete(__dst[0]);
          }
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }
      uint64_t v22 = *(void *)(v21 + 16);
      char v23 = *(unsigned char *)(v21 + 148);
      return sub_68030(v22, v23, v20, a4, a5);
    }
    else
    {
      return sub_697A4(a1, 0x64737067u, v20, (uint64_t)a4, (uint64_t)a5, a6);
    }
  }
  else
  {
    unint64_t v13 = (os_log_t *)sub_32A48(24);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__dst, a2);
      int v15 = SHIBYTE(v31);
      int v16 = (void **)__dst[0];
      sub_2417C(__p, a3);
      uint64_t v17 = __dst;
      if (v15 < 0) {
        uint64_t v17 = v16;
      }
      if (v29 >= 0) {
        unint64_t v18 = __p;
      }
      else {
        unint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      uint64_t v33 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v34 = 1024;
      int v35 = 197;
      __int16 v36 = 2080;
      int v37 = v17;
      __int16 v38 = 2080;
      int v39 = v18;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d TranslateToDSPGraphProperty failure for AU subtype %s as graph parameter %s", buf, 0x26u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete(__dst[0]);
      }
    }
    return 0;
  }
}

void sub_355A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_355ACC(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8 = sub_D8B40(a2, a3);
  if (HIDWORD(v8))
  {
    uint64_t v16 = v8;
    if (sub_D8A6C(v8))
    {
      uint64_t v17 = *(void *)(a1 + 1160);
      if (!v17)
      {
        unint64_t v18 = (os_log_t *)sub_32A48(13);
        uint64_t v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          if (*(char *)(a1 + 735) < 0)
          {
            sub_21E8C(__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
          }
          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 712);
            uint64_t v25 = *(void *)(a1 + 728);
          }
          uint64_t v20 = __dst;
          if (v25 < 0) {
            uint64_t v20 = (void **)__dst[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136315650;
          uint64_t v27 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
          __int16 v28 = 1024;
          int v29 = 160;
          __int16 v30 = 2080;
          uint64_t v31 = v20;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"HAL Speaker Protection is not available for DSP chain %s\"", buf, 0x1Cu);
          if (SHIBYTE(v25) < 0) {
            operator delete(__dst[0]);
          }
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "HAL Speaker Protection is not available for DSP chain %s");
      }
      return sub_680C8(v17, v16);
    }
    else
    {
      return sub_69AB0(a1, 0x64737067u, v16, a4);
    }
  }
  else
  {
    int v9 = (os_log_t *)sub_32A48(24);
    unint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__dst, a2);
      int v11 = SHIBYTE(v25);
      unint64_t v12 = (void **)__dst[0];
      sub_2417C(__p, a3);
      unint64_t v13 = __dst;
      if (v11 < 0) {
        unint64_t v13 = v12;
      }
      if (v23 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      uint64_t v27 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
      __int16 v28 = 1024;
      int v29 = 171;
      __int16 v30 = 2080;
      uint64_t v31 = v13;
      __int16 v32 = 2080;
      uint64_t v33 = v14;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d TranslateToDSPGraphProperty failure for AU subtype %s as graph property %s", buf, 0x26u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__dst[0]);
      }
    }
    return 0;
  }
}

void sub_355DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_355E1C(uint64_t a1, void *a2)
{
  return 1;
}

void sub_355E38(unint64_t a1)
{
  sub_355E70(a1);

  operator delete();
}

unint64_t sub_355E70(unint64_t a1)
{
  *(void *)a1 = off_635218;
  uint64_t v2 = (os_log_t *)sub_32A48(24);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 735) < 0)
    {
      sub_21E8C(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 712);
      uint64_t v8 = *(void *)(a1 + 728);
    }
    uint64_t v4 = __p;
    if (v8 < 0) {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    unint64_t v10 = "DSPGraphChain_HAL_SpeakerProtection.cpp";
    __int16 v11 = 1024;
    int v12 = 258;
    __int16 v13 = 2080;
    uint64_t v14 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Deleting DSPGraphChain_SpeakerProtectionHAL %s", buf, 0x1Cu);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 1168);
  if (v5) {
    sub_4636C(v5);
  }
  sub_6A648(a1);
  return a1;
}

void sub_355FC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_355FD8(uint64_t a1)
{
  sub_66F88(a1 + 24);
  sub_63878(a1 + 128);
  uint64_t v8 = (void **)(a1 + 104);
  sub_638B4(&v8);
  uint64_t v2 = *(const void **)(a1 + 96);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 88);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 80);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(a1 + 72);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7)
  {
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_35609C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_6369D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_3560F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_6369D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_356110(void *a1)
{
  *a1 = off_6352F0;
  sub_350AE0((uint64_t)a1);

  operator delete();
}

uint64_t sub_356164(uint64_t a1)
{
  *(void *)a1 = off_6352F0;
  return sub_350AE0(a1);
}

void sub_356184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long *a9)
{
  sub_CAE80(&__dst, a9);
  *(void *)&long long v12 = *(void *)(a6 + 4);
  sub_329CBC((uint64_t)&v11, (uint64_t *)&v12);
  operator new();
}

void sub_357810(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  __cxa_free_exception(v28);
  operator delete();
}

void sub_357828(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  if (a59)
  {
    if (a58 < 0) {
      operator delete(__p);
    }
  }
  sub_463E0(a51);
  sub_A60C4(v59);
  operator delete();
}

void sub_357860()
{
}

void sub_357868(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a35)
  {
    if (a34 < 0) {
      operator delete(__p);
    }
  }
  JUMPOUT(0x357B28);
}

void sub_357888()
{
}

void sub_357894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

void sub_3578A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,unsigned int a44,OSStatus (__cdecl *a45)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (a44)
    {
      sub_329A4C(a44, a45);
    }
    else if (!a45)
    {
      int v46 = (os_log_t *)sub_32A48(13);
      uint64_t v47 = *v46;
      if (*v46)
      {
        if (os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)(v45 - 208) = 136315394;
          uint64_t v48 = v45 - 208;
          *(void *)(v48 + 4) = "AggregateDevice_Simple2.cpp";
          *(_WORD *)(v45 - 196) = 1024;
          *(_DWORD *)(v48 + 14) = 272;
          _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Somehow, we have a valid IO proc ID, but not a valid aggregate device ID.\"", (uint8_t *)(v45 - 208), 0x12u);
        }
      }
    }
    sub_329688(a44);
    __cxa_rethrow();
  }
  JUMPOUT(0x357B28);
}

void sub_357948()
{
}

void sub_357958(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x357B28);
}

void sub_357974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_3579C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  __cxa_free_exception(v62);
  sub_342C48((uint64_t)&a37);
  (*(void (**)(uint64_t))(*(void *)a28 + 8))(a28);
  sub_119EBC((uint64_t)&a29);
  _Unwind_Resume(a1);
}

void sub_357B30(uint64_t a1, unsigned int *a2, unsigned int a3, double *a4, int a5)
{
  if (!a3)
  {
    int v77 = (os_log_t *)sub_32A48(13);
    uint64_t v78 = *v77;
    if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      AudioObjectID v105 = "PolicyMute.cpp";
      __int16 v106 = 1024;
      int v107 = 65;
      _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((a5 - 1) >= 2)
  {
    if (a5)
    {
      if (a5 == 3)
      {
        unint64_t v7 = *a2;
        if (v7)
        {
          unint64_t v8 = 0;
          int v9 = (void **)(a2 + 4);
          do
          {
            if (*v9)
            {
              bzero(*v9, *((unsigned int *)v9 - 1));
              unint64_t v7 = *a2;
            }
            ++v8;
            v9 += 2;
          }
          while (v8 < v7);
        }
      }
      else
      {
        uint64_t v25 = (os_log_t *)sub_32A48(13);
        unsigned int v26 = *v25;
        if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          AudioObjectID v105 = "PolicyMute.cpp";
          __int16 v106 = 1024;
          int v107 = 124;
          _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected policy mute action\"", buf, 0x12u);
        }
      }
    }
    return;
  }
  int v103 = 0;
  BOOL v102 = 0;
  if (!sub_5C2E0(a4, &v103, &v102)) {
    goto LABEL_58;
  }
  if (v103 != 1)
  {
    if (v103 == 3)
    {
      int v27 = *((_DWORD *)a4 + 7);
      if (v102 || v27 == 1)
      {
        uint64_t v28 = *((void *)a2 + 2);
        if (!v28)
        {
          __int16 v83 = (os_log_t *)sub_32A48(13);
          int v84 = *v83;
          if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            AudioObjectID v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 164;
            _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          uint64_t v85 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v85, "Precondition failure.");
        }
        if (!v27)
        {
          unsigned int v92 = (os_log_t *)sub_32A48(13);
          uint64_t v93 = *v92;
          if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            AudioObjectID v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 166;
            _os_log_impl(&def_1E50E8, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          int v94 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v94, "Precondition failure.");
        }
        double v29 = *a4;
        if (*a4 <= 0.0)
        {
          uint64_t v95 = (os_log_t *)sub_32A48(13);
          unint64_t v96 = *v95;
          if (*v95 && os_log_type_enabled(*v95, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            AudioObjectID v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 167;
            _os_log_impl(&def_1E50E8, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          unint64_t v97 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v97, "Precondition failure.");
        }
        int v16 = 762342772;
        unsigned int v30 = (v29 * 0.03);
        if (v30 >= a3) {
          unsigned int v31 = a3;
        }
        else {
          unsigned int v31 = (v29 * 0.03);
        }
        signed int v32 = 0x1000000 / v31;
        int v33 = *(_DWORD *)(a1 + 4);
        unsigned int v34 = (v33 == 762342772) << 24;
        if (v33 == 762342772) {
          signed int v32 = -v32;
        }
        if (v27 == 1)
        {
          unint64_t v65 = v32 + (unint64_t)v34;
          unsigned int v66 = v31;
          uint64_t v67 = (int *)*((void *)a2 + 2);
          do
          {
            int *v67 = (v65 * *v67) >> 24;
            ++v67;
            v65 += v32;
            --v66;
          }
          while (v66);
        }
        else if (v27 == 2)
        {
          unint64_t v35 = v32 + (unint64_t)v34;
          unsigned int v36 = v31;
          int v37 = (int *)*((void *)a2 + 2);
          do
          {
            unint64_t v38 = (v35 * v37[1]) >> 24;
            *int v37 = (v35 * *v37) >> 24;
            v37[1] = v38;
            v37 += 2;
            v35 += v32;
            --v36;
          }
          while (v36);
        }
        else
        {
          __int16 v71 = (os_log_t *)sub_32A48(13);
          unint64_t v72 = *v71;
          if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            AudioObjectID v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 227;
            _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected number of channels\"", buf, 0x12u);
          }
        }
        if (v33 != 762342772) {
          goto LABEL_115;
        }
        int v16 = 728788340;
        if (v30 >= a3) {
          goto LABEL_115;
        }
        size_t v73 = 4 * v27 * (a3 - v31);
        uint64_t v74 = (void *)(v28 + 4 * v31 * v27);
        goto LABEL_114;
      }
    }
    else if (v103 == 2)
    {
      int v13 = *((_DWORD *)a4 + 7);
      if (v102 || v13 == 1)
      {
        uint64_t v14 = *((void *)a2 + 2);
        if (!v14)
        {
          unint64_t v80 = (os_log_t *)sub_32A48(13);
          uint64_t v81 = *v80;
          if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            AudioObjectID v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 164;
            _os_log_impl(&def_1E50E8, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          uint64_t v82 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v82, "Precondition failure.");
        }
        if (!v13)
        {
          unint64_t v89 = (os_log_t *)sub_32A48(13);
          unint64_t v90 = *v89;
          if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            AudioObjectID v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 166;
            _os_log_impl(&def_1E50E8, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          uint64_t v91 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v91, "Precondition failure.");
        }
        double v15 = *a4;
        if (*a4 <= 0.0)
        {
          uint64_t v98 = (os_log_t *)sub_32A48(13);
          uint64_t v99 = *v98;
          if (*v98 && os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            AudioObjectID v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 167;
            _os_log_impl(&def_1E50E8, v99, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          AudioObjectPropertyAddress v100 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v100, "Precondition failure.");
        }
        int v16 = 762342772;
        unsigned int v17 = (v15 * 0.03);
        if (v17 >= a3) {
          unsigned int v18 = a3;
        }
        else {
          unsigned int v18 = (v15 * 0.03);
        }
        LODWORD(v19) = 0x8000 / v18;
        int v20 = *(_DWORD *)(a1 + 4);
        uint64_t v21 = (v20 == 762342772) << 15;
        if (v20 == 762342772) {
          uint64_t v19 = -(int)v19;
        }
        else {
          uint64_t v19 = v19;
        }
        if (v13 == 1)
        {
          uint64_t v68 = v21 + v19;
          unsigned int v69 = v18;
          uint64_t v70 = (__int16 *)*((void *)a2 + 2);
          do
          {
            __int16 *v70 = (v68 * *v70) >> 15;
            ++v70;
            v68 += v19;
            --v69;
          }
          while (v69);
        }
        else if (v13 == 2)
        {
          uint64_t v22 = v21 + v19;
          unsigned int v23 = v18;
          uint64_t v24 = (__int16 *)*((void *)a2 + 2);
          do
          {
            *uint64_t v24 = (v22 * *v24) >> 15;
            v24[1] = (v22 * v24[1]) >> 15;
            v22 += v19;
            v24 += 2;
            --v23;
          }
          while (v23);
        }
        else
        {
          unsigned int v75 = (os_log_t *)sub_32A48(13);
          uint64_t v76 = *v75;
          if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            AudioObjectID v105 = "PolicyMute.cpp";
            __int16 v106 = 1024;
            int v107 = 227;
            _os_log_impl(&def_1E50E8, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected number of channels\"", buf, 0x12u);
          }
        }
        if (v20 != 762342772) {
          goto LABEL_115;
        }
        int v16 = 728788340;
        if (v17 >= a3) {
          goto LABEL_115;
        }
        size_t v73 = 2 * v13 * (a3 - v18);
        uint64_t v74 = (void *)(v14 + 2 * v18 * v13);
LABEL_114:
        bzero(v74, v73);
LABEL_115:
        *(_DWORD *)(a1 + 4) = v16;
        return;
      }
    }
    goto LABEL_51;
  }
  if (v102 && *((_DWORD *)a4 + 7) != 1)
  {
LABEL_51:
    int v39 = (os_log_t *)sub_32A48(13);
    int v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_DEFAULT))
    {
      sub_259A4(&__p, (uint64_t)a4);
      uint64_t v41 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      AudioObjectID v105 = "PolicyMute.cpp";
      __int16 v106 = 1024;
      int v107 = 98;
      __int16 v108 = 2080;
      int v109 = v41;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Policy mute ramping unsupported for given stream format: %s", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
LABEL_58:
    if (a5 == 1) {
      int v42 = 762342772;
    }
    else {
      int v42 = 728788340;
    }
    *(_DWORD *)(a1 + 4) = v42;
    if (a5 != 1)
    {
      unint64_t v43 = *a2;
      if (*a2)
      {
        unint64_t v44 = 0;
        uint64_t v45 = (void **)(a2 + 4);
        do
        {
          if (*v45)
          {
            bzero(*v45, *((unsigned int *)v45 - 1));
            unint64_t v43 = *a2;
          }
          ++v44;
          v45 += 2;
        }
        while (v44 < v43);
      }
    }
    return;
  }
  if (*a4 <= 0.0)
  {
    uint64_t v86 = (os_log_t *)sub_32A48(13);
    BOOL v87 = *v86;
    if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      AudioObjectID v105 = "PolicyMute.cpp";
      __int16 v106 = 1024;
      int v107 = 254;
      _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v88 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v88, "Precondition failure.");
  }
  int v46 = 762342772;
  unsigned int v47 = (*a4 * 0.03);
  if (v47 >= a3) {
    uint64_t v48 = a3;
  }
  else {
    uint64_t v48 = v47;
  }
  int v49 = *(_DWORD *)(a1 + 4);
  float v50 = 0.0;
  if (v49 == 762342772)
  {
    float v50 = 1.0;
    float v51 = -(float)(1.0 / (float)v48);
  }
  else
  {
    float v51 = 1.0 / (float)v48;
  }
  uint64_t v52 = *a2;
  if (v52 == 1)
  {
    if (v48)
    {
      uint64_t v56 = (float *)*((void *)a2 + 2);
      uint64_t v57 = v48;
      do
      {
        float v50 = v51 + v50;
        *uint64_t v56 = v50 * *v56;
        ++v56;
        --v57;
      }
      while (v57);
    }
  }
  else if (v52 == 2)
  {
    if (v48)
    {
      unint64_t v53 = (float *)*((void *)a2 + 2);
      uint64_t v54 = (float *)*((void *)a2 + 4);
      uint64_t v55 = v48;
      do
      {
        float v50 = v51 + v50;
        float *v53 = v50 * *v53;
        ++v53;
        *uint64_t v54 = v50 * *v54;
        ++v54;
        --v55;
      }
      while (v55);
    }
  }
  else if (v48)
  {
    for (uint64_t i = 0; i != v48; ++i)
    {
      float v50 = v51 + v50;
      uint64_t v59 = (uint64_t *)(a2 + 4);
      uint64_t v60 = v52;
      if (v52)
      {
        do
        {
          uint64_t v61 = *v59;
          v59 += 2;
          *(float *)(v61 + 4 * i) = v50 * *(float *)(v61 + 4 * i);
          --v60;
        }
        while (v60);
      }
    }
  }
  if (v49 == 762342772)
  {
    int v46 = 728788340;
    if (v47 < a3)
    {
      if (v52)
      {
        unint64_t v62 = 0;
        size_t v63 = 4 * (a3 - v48);
        uint64_t v64 = 4;
        do
        {
          bzero((void *)(*(void *)&a2[v64] + 4 * v48), v63);
          ++v62;
          v64 += 4;
        }
        while (v62 < *a2);
      }
    }
  }
  *(_DWORD *)(a1 + 4) = v46;
}

void sub_358770(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *sub_3587B0@<X0>(const void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  snprintf(__str, 0x13uLL, "%p", a1);
  sub_21C8C(&v11, __str);
  uint64_t v4 = std::string::insert(&v11, 0, "addr: ", 6uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v12, "; ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v14 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  if (v14 >= 0) {
    std::string::size_type v9 = HIBYTE(v14);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_35890C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_35897C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 24);
      if (v5)
      {
        uint64_t v6 = *(id *)sub_32A48(24);
        long long v7 = v6;
        if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(unsigned __int8 *)(v5 + 392);
          std::string::size_type v9 = "Y";
          unsigned int v18 = "DSPChain.mm";
          int v10 = *(unsigned __int8 *)(v5 + 796);
          if (v8) {
            std::string v11 = "Y";
          }
          else {
            std::string v11 = "N";
          }
          *(_DWORD *)AudioTimeStamp buf = 136315906;
          __int16 v19 = 1024;
          if (!v10) {
            std::string::size_type v9 = "N";
          }
          int v20 = 2955;
          __int16 v21 = 2080;
          uint64_t v22 = v11;
          __int16 v23 = 2080;
          uint64_t v24 = v9;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : reconfiguring volume: initialized %s, hasAUSPL %s", buf, 0x26u);
        }

        if (*(unsigned char *)(v5 + 392) && *(unsigned char *)(v5 + 796))
        {
          CFTypeRef cf = 0;
          float v15 = 0.0;
          sub_1B33F8(v5, &cf, &v15);
          if (*(void *)(v5 + 736) != 561211748) {
            sub_1B3710((void *)v5, (const __CFDictionary *)cf, v15);
          }
          if (cf) {
            CFRelease(cf);
          }
          std::string v12 = *(id *)sub_32A48(24);
          int v13 = v12;
          if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int64_t v14 = *(const char **)(v5 + 736);
            *(_DWORD *)AudioTimeStamp buf = 136315650;
            unsigned int v18 = "DSPChain.mm";
            __int16 v19 = 1024;
            int v20 = 2974;
            __int16 v21 = 2048;
            uint64_t v22 = v14;
            _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Volume Reconfigured for ADAM session: %llu", buf, 0x1Cu);
          }
        }
      }
      sub_4636C(v4);
    }
  }
}

void sub_358BC8(_Unwind_Exception *exception_object)
{
}

void sub_358BE4(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 112);
  sub_463E0(*(void **)(a1 + 112));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
}

uint64_t *sub_358C14(uint64_t *result, unsigned int a2, int a3, uint64_t a4, uint64_t a5)
{
  std::string::size_type v9 = result;
  std::string v11 = result + 14;
  uint64_t v10 = result[14];
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        std::string v11 = (uint64_t *)v10;
        unsigned int v12 = *(_DWORD *)(v10 + 32);
        if (v12 <= a2) {
          break;
        }
LABEL_5:
        uint64_t v10 = *v11;
        int v13 = (uint64_t **)v11;
        if (!*v11) {
          goto LABEL_11;
        }
      }
      if (v12 == a2)
      {
        if (!*((_DWORD *)v11 + 9)) {
          return result;
        }
        goto LABEL_5;
      }
      if (v12 >= a2) {
        return result;
      }
      int v13 = (uint64_t **)(v11 + 1);
      uint64_t v10 = v11[1];
      if (!v10) {
        goto LABEL_11;
      }
    }
  }
  int v13 = (uint64_t **)(result + 14);
LABEL_11:
  int64_t v14 = operator new(0x40uLL);
  v14[8] = a2;
  v14[9] = 0;
  *((void *)v14 + 5) = a4;
  *((void *)v14 + 6) = a5;
  v14[14] = a3;
  *(void *)int64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = v11;
  *int v13 = (uint64_t *)v14;
  uint64_t v15 = *(void *)v9[13];
  if (v15)
  {
    v9[13] = v15;
    int v16 = *v13;
  }
  else
  {
    int v16 = (uint64_t *)v14;
  }
  uint64_t result = sub_46D00((uint64_t *)v9[14], v16);
  ++v9[15];
  return result;
}

uint64_t sub_358D00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 144))();
}

void sub_358D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 104);
  uint64_t v3 = (void *)(a1 + 112);
  if ((void *)(a1 + 112) != v2)
  {
    uint64_t v4 = a2;
    if (a2) {
      uint64_t v5 = "Enabling";
    }
    else {
      uint64_t v5 = "Disabling";
    }
    int v52 = a2 ^ 1;
    float v51 = v5;
    unsigned int v50 = a2;
    do
    {
      unsigned int v63 = 0;
      sub_26F17C();
      (*(void (**)(uint64_t *, void, unsigned int *))(qword_64E880 + 48))(&qword_64E880, *((unsigned int *)v2 + 14), &v63);
      if (v63 != 1685287015 || !v2[6])
      {
        uint64_t v13 = sub_32A48(18);
        uint64_t v14 = sub_32A48(38);
        char v15 = 0;
        uint64_t v16 = 0;
        *(void *)AudioTimeStamp buf = 0x100000002;
        uint64_t v17 = *(void *)(v13 + 8);
        while (1)
        {
          uint64_t v18 = *(int *)&buf[4 * v16];
          char v19 = v15;
          if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
            break;
          }
          char v15 = 1;
          uint64_t v16 = 1;
          if (v19) {
            goto LABEL_18;
          }
        }
        if ((v17 & v18) == 0) {
          uint64_t v13 = v14;
        }
LABEL_18:
        int v20 = *(NSObject **)v13;
        if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          int v21 = *((_DWORD *)v2 + 14);
          sub_2417C(&__dst, v63);
          int v22 = SHIBYTE(v62);
          __int16 v23 = (void **)__dst;
          sub_14FDE0((uint64_t)__p, a1);
          p_dst = &__dst;
          if (v22 < 0) {
            p_dst = v23;
          }
          uint64_t v25 = __p;
          if (v59 < 0) {
            uint64_t v25 = (void **)__p[0];
          }
          *(_DWORD *)AudioTimeStamp buf = 136316418;
          *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 218;
          __int16 v65 = 2080;
          unsigned int v66 = v51;
          __int16 v67 = 1024;
          int v68 = v21;
          __int16 v69 = 2080;
          uint64_t v70 = p_dst;
          __int16 v71 = 2080;
          unint64_t v72 = v25;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s software volume processor with ID %u and type %s on chain '%s'.", buf, 0x36u);
          if (v59 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v62) < 0) {
            operator delete(__dst);
          }
        }
        sub_26F17C();
        (*(void (**)(uint64_t *, void, uint64_t))(qword_64E880 + 88))(&qword_64E880, *((unsigned int *)v2 + 14), v4);
        goto LABEL_68;
      }
      uint64_t v6 = sub_32A48(18);
      uint64_t v7 = sub_32A48(38);
      char v8 = 0;
      uint64_t v9 = 0;
      *(void *)AudioTimeStamp buf = 0x100000002;
      uint64_t v10 = *(void *)(v6 + 8);
      while (1)
      {
        uint64_t v11 = *(int *)&buf[4 * v9];
        char v12 = v8;
        if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
          break;
        }
        char v8 = 1;
        uint64_t v9 = 1;
        if (v12) {
          goto LABEL_31;
        }
      }
      if ((v10 & v11) == 0) {
        uint64_t v6 = v7;
      }
LABEL_31:
      unsigned int v26 = *(NSObject **)v6;
      if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = *((_DWORD *)v2 + 14);
        sub_2417C(&__dst, v63);
        int v28 = SHIBYTE(v62);
        double v29 = (void **)__dst;
        unsigned int v30 = (void **)v2[5];
        sub_14FDE0((uint64_t)__p, a1);
        unsigned int v31 = &__dst;
        if (v28 < 0) {
          unsigned int v31 = v29;
        }
        signed int v32 = __p;
        if (v59 < 0) {
          signed int v32 = (void **)__p[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136316674;
        *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 199;
        __int16 v65 = 2080;
        unsigned int v66 = v51;
        __int16 v67 = 1024;
        int v68 = v27;
        __int16 v69 = 2080;
        uint64_t v70 = v31;
        __int16 v71 = 2080;
        unint64_t v72 = v30;
        __int16 v73 = 2080;
        uint64_t v74 = v32;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s software volume processor with ID %u and type %s (box name %s) on chain '%s'.", buf, 0x40u);
        if (v59 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v4 = v50;
        if (SHIBYTE(v62) < 0) {
          operator delete(__dst);
        }
      }
      *(_DWORD *)bytes = v52;
      size_t v33 = v2[6];
      if (v33 >= 0x7FFFFFFFFFFFFFF8) {
        sub_4F8C0();
      }
      unsigned int v34 = (const void *)v2[5];
      if (v33 >= 0x17)
      {
        uint64_t v36 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v33 | 7) != 0x17) {
          uint64_t v36 = v33 | 7;
        }
        uint64_t v37 = v36 + 1;
        unint64_t v35 = operator new(v36 + 1);
        size_t v61 = v33;
        int64_t v62 = v37 | 0x8000000000000000;
        std::string __dst = v35;
        uint64_t v4 = v50;
      }
      else
      {
        HIBYTE(v62) = v2[6];
        unint64_t v35 = &__dst;
        if (!v33) {
          goto LABEL_49;
        }
      }
      memmove(v35, v34, v33);
LABEL_49:
      *((unsigned char *)v35 + v33) = 0;
      sub_22210((CFStringRef *)buf, "AUName");
      if (v62 >= 0) {
        unint64_t v38 = (const UInt8 *)&__dst;
      }
      else {
        unint64_t v38 = (const UInt8 *)__dst;
      }
      if (v62 >= 0) {
        CFIndex v39 = HIBYTE(v62);
      }
      else {
        CFIndex v39 = v61;
      }
      *(void *)&buf[8] = CFStringCreateWithBytes(0, v38, v39, 0x8000100u, 0);
      if (!*(void *)&buf[8])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
      int v55 = 21;
      sub_153414((uint64_t)&buf[16], "ID", &v55);
      CFDataRef v40 = CFDataCreate(0, bytes, 4);
      if (!v40)
      {
        uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v48, "Could not construct");
      }
      sub_1534E8(&cf, v40);
      sub_1535A0((uint64_t)&v68 + 2, "data", &cf);
      __p[0] = buf;
      __p[1] = &def_1E50E8 + 3;
      CFDictionaryRef v41 = sub_4D3D8((uint64_t)__p);
      uint64_t v42 = 0;
      CFDictionaryRef v56 = v41;
      do
      {
        unint64_t v43 = *(void ***)((char *)&(&v70)[v42] + 4);
        if (v43) {
          CFRelease(v43);
        }
        unint64_t v44 = *(const void **)((char *)&v68 + v42 * 8 + 2);
        if (v44) {
          CFRelease(v44);
        }
        v42 -= 2;
      }
      while (v42 != -6);
      if (cf) {
        CFRelease(cf);
      }
      if (SHIBYTE(v62) < 0) {
        operator delete(__dst);
      }
      *(void *)AudioTimeStamp buf = v41;
      sub_26F17C();
      (*(void (**)(uint64_t *, void, uint64_t, unsigned char *, uint64_t))(qword_64E880 + 72))(&qword_64E880, *((unsigned int *)v2 + 14), 1652060274, buf, 8);
      CFRelease(v41);
LABEL_68:
      uint64_t v45 = (void *)v2[1];
      if (v45)
      {
        do
        {
          int v46 = v45;
          uint64_t v45 = (void *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          int v46 = (void *)v2[2];
          BOOL v47 = *v46 == (void)v2;
          uint64_t v2 = v46;
        }
        while (!v47);
      }
      uint64_t v2 = v46;
    }
    while (v3 != v46);
  }
}

void sub_3593D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,CFTypeRef cf)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_359524(uint64_t a1, int a2)
{
  float result = 0.0;
  if (a2 != 1935895666)
  {
    if (a2 != 1684234860)
    {
      uint64_t v4 = (os_log_t *)sub_32A48(13);
      uint64_t v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v7 = 136315650;
          char v8 = "VolumeControl.cpp";
          __int16 v9 = 1024;
          int v10 = 178;
          __int16 v11 = 1024;
          int v12 = a2;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Encountered an invalid volume unit type: %d\"", (uint8_t *)&v7, 0x18u);
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Encountered an invalid volume unit type: %d");
    }
    return -120.0;
  }
  return result;
}

void sub_359654(_Unwind_Exception *exception_object)
{
}

float sub_359670(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  float result = 0.0;
  if (v1 != 1935895666)
  {
    if (v1 != 1684234860)
    {
      uint64_t v4 = (os_log_t *)sub_32A48(13);
      uint64_t v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v6 = *(_DWORD *)(a1 + 96);
          int v8 = 136315650;
          __int16 v9 = "VolumeControl.cpp";
          __int16 v10 = 1024;
          int v11 = 158;
          __int16 v12 = 1024;
          int v13 = v6;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Encountered an invalid volume unit type: %d\"", (uint8_t *)&v8, 0x18u);
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Encountered an invalid volume unit type: %d");
    }
    return -90.0;
  }
  return result;
}

void sub_3597A8(_Unwind_Exception *exception_object)
{
}

double sub_3597CC(uint64_t a1, float a2)
{
  uint64_t v2 = *(void **)(a1 + 128);
  uint64_t v3 = *(void **)(a1 + 136);
  if (v2 == v3) {
    goto LABEL_9;
  }
  while (((*(uint64_t (**)(void))(*(void *)*v2 + 272))(*v2) & 1) == 0)
  {
    if (++v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == *(void **)(a1 + 136))
  {
LABEL_9:
    __int16 v9 = (os_log_t *)sub_32A48(18);
    __int16 v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      __int16 v12 = "VolumeControl.cpp";
      __int16 v13 = 1024;
      int v14 = 716;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d No volume command supports Scalar to dB convertion.", (uint8_t *)&v11, 0x12u);
    }
    return 0.0;
  }
  else
  {
    int v7 = *(void (**)(__n128))(*(void *)*v2 + 288);
    v6.n128_f32[0] = a2;
    v7(v6);
  }
  return result;
}

double sub_359970(uint64_t a1, float a2)
{
  uint64_t v2 = *(void **)(a1 + 128);
  uint64_t v3 = *(void **)(a1 + 136);
  if (v2 == v3) {
    goto LABEL_9;
  }
  while (((*(uint64_t (**)(void))(*(void *)*v2 + 272))(*v2) & 1) == 0)
  {
    if (++v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == *(void **)(a1 + 136))
  {
LABEL_9:
    __int16 v9 = (os_log_t *)sub_32A48(18);
    __int16 v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      __int16 v12 = "VolumeControl.cpp";
      __int16 v13 = 1024;
      int v14 = 703;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d No volume command supports dB to Scalar convertion.", (uint8_t *)&v11, 0x12u);
    }
    return 0.0;
  }
  else
  {
    int v7 = *(void (**)(__n128))(*(void *)*v2 + 280);
    v6.n128_f32[0] = a2;
    v7(v6);
  }
  return result;
}

uint64_t sub_359B14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 272))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t sub_359B8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 264))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t sub_359C04(uint64_t result, uint64_t a2, float a3)
{
  uint64_t v3 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(void *)v7 + 256))(v7, a2, a3))
  {
    uint64_t v7 = *v3++;
  }
  return result;
}

uint64_t sub_359C84(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 248))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t sub_359CEC(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 128);
  uint64_t v2 = *(uint64_t **)(result + 136);
  while (v1 != v2)
  {
    uint64_t v3 = *v1++;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 240))(v3);
  }
  return result;
}

uint64_t sub_359D40(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 232))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t sub_359DA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 224))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t sub_359E18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2) {
    return 0;
  }
  while (1)
  {
    (*(void (**)(void))(**(void **)v1 + 216))();
    if (v4) {
      break;
    }
    v1 += 8;
    if (v1 == v2)
    {
      uint64_t v1 = v2;
      break;
    }
  }
  if (v1 == *(void *)(a1 + 136)) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(**(void **)v1 + 216))();
  }
}

uint64_t sub_359ECC(uint64_t result, float a2, float a3)
{
  uint64_t v3 = *(uint64_t ***)(result + 128);
  for (uint64_t i = *(uint64_t ***)(result + 136); v3 != i; ++v3)
  {
    int v7 = (*(uint64_t (**)(void))(**v3 + 136))();
    uint64_t v9 = **v3;
    if (v7 == 1935895666)
    {
      v8.n128_f32[0] = a3;
      uint64_t result = (*(uint64_t (**)(__n128))(v9 + 16))(v8);
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(void))(v9 + 136))();
      if (result == 1684234860)
      {
        v10.n128_f32[0] = a2;
        uint64_t result = (*(uint64_t (**)(__n128))(**v3 + 16))(v10);
      }
    }
  }
  return result;
}

void sub_359FD8(void *a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(18);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    __n128 v8 = "VolumeControl.cpp";
    __int16 v9 = 1024;
    int v10 = 620;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d unMapping processors", (uint8_t *)&v7, 0x12u);
  }
  a1[19] = 0;
  BOOL v5 = (uint64_t *)a1[16];
  char v4 = (uint64_t *)a1[17];
  while (v5 != v4)
  {
    uint64_t v6 = *v5++;
    (*(void (**)(uint64_t))(*(void *)v6 + 184))(v6);
  }
}

uint64_t sub_35A0D4(uint64_t a1)
{
  if (*(void *)(a1 + 128) == *(void *)(a1 + 136))
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "VolumeControl.cpp";
      __int16 v7 = 1024;
      int v8 = 629;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v5, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return *(unsigned __int8 *)(a1 + 160);
}

void sub_35A1DC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_35A1F8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 160))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t sub_35A260(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 152))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t sub_35A2C8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 144))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t sub_35A330(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1 == *(void *)(a1 + 136))
  {
    char v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "VolumeControl.cpp";
      __int16 v9 = 1024;
      int v10 = 596;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)v1 + 136);

  return v2();
}

void sub_35A468(_Unwind_Exception *exception_object)
{
}

uint64_t sub_35A484(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1 == *(void *)(a1 + 136))
  {
    char v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "VolumeControl.cpp";
      __int16 v12 = 1024;
      int v13 = 589;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(unsigned char *)(a1 + 160))
  {
    int v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "VolumeControl.cpp";
      __int16 v12 = 1024;
      int v13 = 590;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"AggregateVolumeCommand has mixed volume unit types, min volume cannot be queried\"", (uint8_t *)&v10, 0x12u);
    }
    __int16 v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v9, "AggregateVolumeCommand has mixed volume unit types, min volume cannot be queried");
  }
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)v1 + 120);

  return v2();
}

void sub_35A66C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_35A68C(uint64_t a1)
{
  if (*(void *)(a1 + 128) == *(void *)(a1 + 136))
  {
    unsigned int v34 = (os_log_t *)sub_32A48(13);
    unint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 520;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v2 = (os_log_t *)sub_32A48(18);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 522;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d getting mute", buf, 0x12u);
  }
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 136);
  if (v4 == v5) {
    goto LABEL_72;
  }
  uint64_t v6 = 0;
  int v7 = 0;
  int v8 = 0;
  do
  {
    int v9 = (*(uint64_t (**)(void))(**(void **)v4 + 112))();
    int v10 = v9;
    if (v7 >= v8)
    {
      uint64_t v11 = (v7 - v6) >> 2;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62) {
        sub_60548();
      }
      if ((v8 - v6) >> 1 > v12) {
        unint64_t v12 = (v8 - v6) >> 1;
      }
      if ((unint64_t)(v8 - v6) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        if (v13 >> 62) {
          sub_60560();
        }
        int v14 = (char *)operator new(4 * v13);
      }
      else
      {
        int v14 = 0;
      }
      char v15 = &v14[4 * v11];
      *(_DWORD *)char v15 = v10;
      uint64_t v16 = v15 + 4;
      while (v7 != v6)
      {
        int v17 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v17;
        v15 -= 4;
      }
      int v8 = &v14[4 * v13];
      if (v6) {
        operator delete(v6);
      }
      uint64_t v6 = v15;
      int v7 = v16;
    }
    else
    {
      *(_DWORD *)int v7 = v9;
      v7 += 4;
    }
    v4 += 8;
  }
  while (v4 != v5);
  if (v6 == v7)
  {
LABEL_72:
    uint64_t v37 = (os_log_t *)sub_32A48(13);
    unint64_t v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 526;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    CFIndex v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "Precondition failure.");
  }
  uint64_t v18 = *(unsigned int *)v6;
  char v19 = v6;
  while (*(_DWORD *)v19 == v18)
  {
    v19 += 4;
    if (v19 == v7) {
      goto LABEL_65;
    }
  }
  if (v18) {
    int v20 = "Unmute";
  }
  else {
    int v20 = "Mute ";
  }
  sub_21C8C(__p, v20);
  for (uint64_t i = v6 + 4; i != v7; i += 4)
  {
    unint64_t v45 = v41;
    *(_OWORD *)unint64_t v44 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    unint64_t v41 = 0;
    int v22 = *(_DWORD *)i;
    int v23 = SHIBYTE(v45);
    if ((v45 & 0x8000000000000000) == 0) {
      uint64_t v24 = (char *)HIBYTE(v45);
    }
    else {
      uint64_t v24 = (char *)v44[1];
    }
    if (v22) {
      size_t v25 = 6;
    }
    else {
      size_t v25 = 5;
    }
    sub_5E220((uint64_t)buf, (unint64_t)&v24[v25]);
    if (buf[23] >= 0) {
      unsigned int v26 = buf;
    }
    else {
      unsigned int v26 = *(unsigned char **)buf;
    }
    if (v24)
    {
      if (v23 >= 0) {
        int v27 = v44;
      }
      else {
        int v27 = (void **)v44[0];
      }
      memmove(v26, v27, (size_t)v24);
    }
    if (v22) {
      int v28 = "Unmute";
    }
    else {
      int v28 = "Mute ";
    }
    double v29 = &v24[(void)v26];
    memcpy(v29, v28, v25);
    v29[v25] = 0;
    if (SHIBYTE(v41) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    unint64_t v41 = *(void *)&buf[16];
    buf[23] = 0;
    buf[0] = 0;
    if (v23 < 0) {
      operator delete(v44[0]);
    }
  }
  *(_OWORD *)uint64_t v42 = *(_OWORD *)__p;
  uint64_t v43 = v41;
  __p[1] = 0;
  unint64_t v41 = 0;
  __p[0] = 0;
  unsigned int v30 = (os_log_t *)sub_32A48(18);
  unsigned int v31 = *v30;
  if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
  {
    signed int v32 = v42;
    if (v43 < 0) {
      signed int v32 = (void **)v42[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136315650;
    *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 534;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v32;
    _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Mute state is NOT the same on all the volume commands: %s", buf, 0x1Cu);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(v42[0]);
  }
  uint64_t v18 = *(unsigned int *)v6;
LABEL_65:
  operator delete(v6);
  return v18;
}

void sub_35ABC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23)
{
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_35AC50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_t *)sub_32A48(18);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = "Unmute";
    uint64_t v11 = "VolumeControl.cpp";
    int v10 = 136315650;
    if (!a2) {
      uint64_t v6 = "Mute";
    }
    __int16 v12 = 1024;
    int v13 = 513;
    __int16 v14 = 2080;
    char v15 = v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d setting mute: %s", (uint8_t *)&v10, 0x1Cu);
  }
  int v8 = *(uint64_t **)(a1 + 128);
  int v7 = *(uint64_t **)(a1 + 136);
  while (v8 != v7)
  {
    uint64_t v9 = *v8++;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 104))(v9, a2);
  }
}

uint64_t sub_35AD7C(uint64_t result, float a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, float))(*(void *)v5 + 96))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t sub_35ADE4(uint64_t result, float a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, float))(*(void *)v5 + 88))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t sub_35AE4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 80))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

uint64_t sub_35AEBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "VolumeControl.cpp";
      __int16 v11 = 1024;
      int v12 = 551;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 72))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

void sub_35B000(_Unwind_Exception *exception_object)
{
}

uint64_t sub_35B01C(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  BOOL v5 = *(void **)(a1 + 128);
  uint64_t v6 = *(void **)(a1 + 136);
  if (v5 == v6)
  {
    int v12 = (os_log_t *)sub_32A48(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "VolumeControl.cpp";
      __int16 v17 = 1024;
      int v18 = 542;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v15, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*v5 + 72))();
    if (result) {
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, float, float))(*(void *)*v5 + 64))(*v5, a2, a3, a4, a5);
    }
    ++v5;
  }
  while (v5 != v6);
  return result;
}

void sub_35B1B0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_35B1CC(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 136);
  if (v2 == v3)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "VolumeControl.cpp";
      __int16 v13 = 1024;
      int v14 = 500;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 40))();
    if (result) {
      break;
    }
    v2 += 8;
    if (v2 == v3) {
      return result;
    }
  }
  int v7 = *(uint64_t (**)(__n128))(**(void **)v2 + 56);
  v6.n128_f32[0] = a2;

  return v7(v6);
}

void sub_35B37C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_35B398(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = *(void *)(a1 + 136);
  if (v2 == v3)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "VolumeControl.cpp";
      __int16 v13 = 1024;
      int v14 = 487;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 40))();
    if (result) {
      break;
    }
    v2 += 8;
    if (v2 == v3) {
      return result;
    }
  }
  int v7 = *(uint64_t (**)(__n128))(**(void **)v2 + 48);
  v6.n128_f32[0] = a2;

  return v7(v6);
}

void sub_35B548(_Unwind_Exception *exception_object)
{
}

uint64_t sub_35B564(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  uint64_t v2 = *(void *)(a1 + 136);
  if (v1 == v2)
  {
    __n128 v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "VolumeControl.cpp";
      __int16 v11 = 1024;
      int v12 = 477;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v3 = v1 + 8;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v3 - 8) + 40))(*(void *)(v3 - 8));
    if (result) {
      break;
    }
    BOOL v5 = v3 == v2;
    v3 += 8;
  }
  while (!v5);
  return result;
}

void sub_35B6A8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_35B6C4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v2 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2))
  {
    uint64_t v5 = *v2++;
  }
  return result;
}

uint64_t sub_35B72C(uint64_t result, float a2, float a3)
{
  uint64_t v3 = *(uint64_t **)(result + 128);
  for (uint64_t i = *(uint64_t **)(result + 136);
        v3 != i;
        uint64_t result = (*(uint64_t (**)(uint64_t, float, float))(*(void *)v7 + 24))(v7, a2, a3))
  {
    uint64_t v7 = *v3++;
  }
  return result;
}

void sub_35B79C(uint64_t a1, float a2)
{
  uint64_t v4 = (os_log_t *)sub_32A48(18);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3;
    int v10 = 136315906;
    __int16 v11 = "VolumeControl.cpp";
    __int16 v12 = 1024;
    int v13 = 464;
    __int16 v14 = 2048;
    double v15 = a2;
    __int16 v16 = 2048;
    uint64_t v17 = v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d set volume: %.2f, %lu", (uint8_t *)&v10, 0x26u);
  }
  int v8 = *(uint64_t **)(a1 + 128);
  uint64_t v7 = *(uint64_t **)(a1 + 136);
  while (v8 != v7)
  {
    uint64_t v9 = *v8++;
    (*(void (**)(uint64_t, float))(*(void *)v9 + 16))(v9, a2);
  }
}

void sub_35B8C8(uint64_t a1)
{
  *(void *)a1 = off_635768;
  uint64_t v2 = (void **)(a1 + 128);
  sub_35B944(&v2);
  sub_35B9EC(a1);

  operator delete();
}

void sub_35B944(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_35B9EC(uint64_t a1)
{
  *(void *)a1 = off_635630;
  sub_463E0(*(void **)(a1 + 112));
  if (*(unsigned char *)(a1 + 88)) {
    sub_463E0(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_35BA5C(uint64_t a1)
{
  *(void *)a1 = off_635768;
  uint64_t v3 = (void **)(a1 + 128);
  sub_35B944(&v3);

  return sub_35B9EC(a1);
}

uint64_t sub_35BAC4(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = off_635548;
  *(void *)(a1 + 80) = off_6355F8;
  sub_D26B4(a1);
  return a1;
}

void sub_35BB44(_Unwind_Exception *a1)
{
  sub_FE920(v1);
  _Unwind_Resume(a1);
}

void sub_35BB58(uint64_t a1, uint64_t a2)
{
  if (a2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a2 + 16), 1uLL, memory_order_relaxed);
  }
  sub_13910();
  operator new();
}

void sub_35BC0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_35BC24(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *(void **)a1;
      if (*(void *)a1)
      {
        uint64_t v5 = (unsigned int *)(a1 + 16);
        if (sub_1A1BE4(v4, (uint64_t)v5)) {
          sub_1A1D20(v4, v5);
        }
LABEL_11:
        sub_4636C(v3);
        return sub_28C7C4(&v9);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v6 = (os_log_t *)sub_32A48(18);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioTimeStamp buf = 136315394;
    __int16 v11 = "VolumeControl.cpp";
    __int16 v12 = 1024;
    int v13 = 59;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Skipped notifying audio object property listener relay, since it may be destructed.", buf, 0x12u);
  }
  if (v3) {
    goto LABEL_11;
  }
  return sub_28C7C4(&v9);
}

void sub_35BD48(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_4636C(v16);
  if (a2 == 3)
  {
    char v19 = __cxa_begin_catch(a1);
    int v20 = (os_log_t *)sub_32A48(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = v19[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v22;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 98;
      int v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v24 = v21;
      uint32_t v25 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v25);
    }
  }
  else
  {
    unsigned int v26 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v27 = v26;
      int v28 = (os_log_t *)sub_32A48(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v30;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 98;
        int v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v24 = v29;
        uint32_t v25 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      unsigned int v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 98;
        int v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v24 = v32;
        uint32_t v25 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x35BD10);
}

uint64_t sub_35BFC4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v26 = 0;
  uint64_t v27 = 0;
  *(_DWORD *)AudioTimeStamp buf = 1986290211;
  os_log_t v29 = (const char *)__PAIR64__(a3, a2);
  if ((*(unsigned int (**)(uint64_t, uint8_t *))(*(void *)a1 + 16))(a1, buf))
  {
    void v24[2] = a3;
    int v25 = 16;
    v24[0] = 1986290211;
    v24[1] = a2;
    (*(void (**)(uint64_t, _DWORD *, void, void, int *, void ***))(*(void *)a1 + 40))(a1, v24, 0, 0, &v25, &v26);
    uint64_t result = sub_32A48(20);
    uint64_t v7 = *(NSObject **)result;
    if (*(void *)result)
    {
      uint64_t result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_DEFAULT);
      if (result)
      {
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(theString, a1);
        sub_21B7C(v22, theString[0]);
        int v8 = v23;
        uint64_t v9 = (void **)v22[0];
        __int16 v11 = v26;
        uint64_t v10 = v27;
        sub_2417C(__p, a2);
        __int16 v12 = v22;
        if (v8 < 0) {
          __int16 v12 = v9;
        }
        int v13 = (void **)__p[0];
        *(_DWORD *)AudioTimeStamp buf = 136316674;
        if (v20 >= 0) {
          int v13 = __p;
        }
        os_log_t v29 = "VolumeControl.cpp";
        __int16 v30 = 1024;
        int v31 = 96;
        __int16 v32 = 2080;
        size_t v33 = v12;
        __int16 v34 = 2048;
        unint64_t v35 = v11;
        __int16 v36 = 2048;
        uint64_t v37 = v10;
        __int16 v38 = 2080;
        CFIndex v39 = v13;
        __int16 v40 = 1024;
        unsigned int v41 = a3;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %s, hardware volume range: %f %f [%s/%u]", buf, 0x40u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
        return sub_72924((uint64_t)theString);
      }
    }
  }
  else
  {
    uint64_t result = sub_32A48(20);
    __int16 v14 = *(NSObject **)result;
    if (*(void *)result)
    {
      uint64_t result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_DEFAULT);
      if (result)
      {
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(theString, a1);
        sub_21B7C(v22, theString[0]);
        int v15 = v23;
        __int16 v16 = (void **)v22[0];
        sub_2417C(__p, a2);
        uint64_t v17 = v22;
        if (v15 < 0) {
          uint64_t v17 = v16;
        }
        if (v20 >= 0) {
          int v18 = __p;
        }
        else {
          int v18 = (void **)__p[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136316162;
        os_log_t v29 = "VolumeControl.cpp";
        __int16 v30 = 1024;
        int v31 = 101;
        __int16 v32 = 2080;
        size_t v33 = v17;
        __int16 v34 = 2080;
        unint64_t v35 = v18;
        __int16 v36 = 1024;
        LODWORD(v37) = a3;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %s does not support hardware volume range property [%s/%u]", buf, 0x2Cu);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
        return sub_72924((uint64_t)theString);
      }
    }
  }
  return result;
}

void sub_35C334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_35C370(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_635630;
  uint64_t v6 = a3[1];
  *(void *)(a1 + 24) = *a3;
  *(void *)(a1 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  sub_14F0E0(a1 + 40, a4);
  *(_DWORD *)(a1 + 96) = a2;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  return a1;
}

void sub_35C3F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_35C414(uint64_t a1, int a2, uint64_t a3, std::__shared_weak_count *a4)
{
  v10[0] = a3;
  v10[1] = a4;
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v7[0] = 0;
  char v9 = 0;
  sub_35C370(a1, a2, v10, (uint64_t)v7);
  if (v9) {
    sub_463E0(v8);
  }
  if (a4) {
    std::__shared_weak_count::__release_weak(a4);
  }
  return a1;
}

void sub_35C48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a16) {
    sub_463E0(a12);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_35C4B4(uint64_t a1, unsigned int a2, unsigned int a3, float a4)
{
  int v8 = sub_35CD08(a1 + 104, a2, 0);
  if ((uint64_t *)(a1 + 112) == v8)
  {
    uint64_t v64 = (os_log_t *)sub_32A48(13);
    __int16 v65 = *v64;
    if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v75, a2);
      unsigned int v66 = v76 >= 0 ? v75 : (void **)v75[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v78 = 1024;
      int v79 = 255;
      __int16 v80 = 2080;
      uint64_t v81 = v66;
      _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Software volume processor of type '%s' does not exist\"", buf, 0x1Cu);
      if (v76 < 0) {
        operator delete(v75[0]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Software volume processor of type '%s' does not exist");
  }
  char v9 = v8;
  uint64_t v10 = sub_32A48(18);
  uint64_t v11 = sub_32A48(38);
  char v12 = 0;
  uint64_t v13 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v14 = *(void *)(v10 + 8);
  while (1)
  {
    uint64_t v15 = *(int *)&buf[4 * v13];
    char v16 = v12;
    if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
      break;
    }
    char v12 = 1;
    uint64_t v13 = 1;
    if (v16) {
      goto LABEL_8;
    }
  }
  if ((v14 & v15) == 0) {
    uint64_t v10 = v11;
  }
LABEL_8:
  uint64_t v17 = *(NSObject **)v10;
  if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    sub_2417C(v75, a3);
    unsigned int v68 = a3;
    if (v76 >= 0) {
      int v18 = v75;
    }
    else {
      int v18 = (void **)v75[0];
    }
    sub_2417C(v73, a2);
    int v19 = v74;
    char v20 = (void **)v73[0];
    int v21 = *((_DWORD *)v9 + 14);
    sub_14FDE0((uint64_t)__p, a1);
    int v22 = v73;
    if (v19 < 0) {
      int v22 = v20;
    }
    char v23 = (void **)__p[0];
    *(_DWORD *)AudioTimeStamp buf = 136316674;
    if (v72 >= 0) {
      char v23 = __p;
    }
    *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
    __int16 v78 = 1024;
    int v79 = 263;
    __int16 v80 = 2080;
    uint64_t v81 = v18;
    __int16 v82 = 2048;
    double v83 = a4;
    __int16 v84 = 2080;
    uint64_t v85 = v22;
    __int16 v86 = 1024;
    int v87 = v21;
    __int16 v88 = 2080;
    unint64_t v89 = v23;
    _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d VolumeCommand: Setting parameter '%s' to %f on processor type '%s' instance ID %u on chain '%s'.", buf, 0x40u);
    if (v72 < 0) {
      operator delete(__p[0]);
    }
    a3 = v68;
    if (v74 < 0) {
      operator delete(v73[0]);
    }
    if (v76 < 0) {
      operator delete(v75[0]);
    }
  }
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v24)
  {
    int v25 = 0;
    goto LABEL_33;
  }
  int v25 = std::__shared_weak_count::lock(v24);
  if (!v25 || !*(void *)(a1 + 24))
  {
LABEL_33:
    uint64_t v35 = sub_32A48(18);
    uint64_t v36 = sub_32A48(38);
    char v37 = 0;
    uint64_t v38 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v39 = *(void *)(v35 + 8);
    while (1)
    {
      uint64_t v40 = *(int *)&buf[4 * v38];
      char v41 = v37;
      if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
        break;
      }
      char v37 = 1;
      uint64_t v38 = 1;
      if (v41) {
        goto LABEL_39;
      }
    }
    if ((v39 & v40) == 0) {
      uint64_t v35 = v36;
    }
LABEL_39:
    uint64_t v42 = *(NSObject **)v35;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v78 = 1024;
      int v79 = 295;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VolumeCommand: DSPChain unavailable for setting parameter", buf, 0x12u);
    }
    goto LABEL_42;
  }
  sub_26F17C();
  unsigned int v26 = (*(uint64_t (**)(float))(qword_64E880 + 56))(a4);
  unsigned int v27 = v26;
  if (v26)
  {
    if (v26 == 1852204065)
    {
      uint64_t v28 = sub_32A48(18);
      uint64_t v29 = sub_32A48(38);
      char v30 = 0;
      uint64_t v31 = 0;
      *(void *)AudioTimeStamp buf = 0x100000002;
      uint64_t v32 = *(void *)(v28 + 8);
      while (1)
      {
        uint64_t v33 = *(int *)&buf[4 * v31];
        char v34 = v30;
        if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
          break;
        }
        char v30 = 1;
        uint64_t v31 = 1;
        if (v34) {
          goto LABEL_51;
        }
      }
      if ((v32 & v33) == 0) {
        uint64_t v28 = v29;
      }
LABEL_51:
      unsigned int v50 = *(NSObject **)v28;
      if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        sub_2417C(v75, a3);
        if (v76 >= 0) {
          float v51 = v75;
        }
        else {
          float v51 = (void **)v75[0];
        }
        sub_2417C(v73, a3);
        int v52 = v74;
        unint64_t v53 = (void **)v73[0];
        sub_14FDE0((uint64_t)__p, a1);
        uint64_t v54 = v73;
        if (v52 < 0) {
          uint64_t v54 = v53;
        }
        if (v72 >= 0) {
          int v55 = __p;
        }
        else {
          int v55 = (void **)__p[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136316162;
        *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
        __int16 v78 = 1024;
        int v79 = 278;
        __int16 v80 = 2080;
        uint64_t v81 = v51;
        __int16 v82 = 2080;
        double v83 = *(double *)&v54;
        __int16 v84 = 2080;
        uint64_t v85 = v55;
        _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_INFO, "%25s:%-5d VolumeCommand: parameter '%s' on processor type '%s' not found on chain '%s'.", buf, 0x30u);
LABEL_77:
        if (v72 < 0) {
          operator delete(__p[0]);
        }
        if (v74 < 0) {
          operator delete(v73[0]);
        }
        if (v76 < 0) {
          operator delete(v75[0]);
        }
      }
    }
    else
    {
      uint64_t v43 = sub_32A48(18);
      uint64_t v44 = sub_32A48(38);
      char v45 = 0;
      uint64_t v46 = 0;
      *(void *)AudioTimeStamp buf = 0x100000002;
      uint64_t v47 = *(void *)(v43 + 8);
      while (1)
      {
        uint64_t v48 = *(int *)&buf[4 * v46];
        char v49 = v45;
        if (((v47 & v48) != 0) != ((*(void *)(v44 + 8) & v48) != 0)) {
          break;
        }
        char v45 = 1;
        uint64_t v46 = 1;
        if (v49) {
          goto LABEL_64;
        }
      }
      if ((v47 & v48) == 0) {
        uint64_t v43 = v44;
      }
LABEL_64:
      CFDictionaryRef v56 = *(NSObject **)v43;
      if (v56 && os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      {
        uint64_t v57 = v75;
        sub_2417C(v75, a3);
        if (v76 < 0) {
          uint64_t v57 = (void **)v75[0];
        }
        unint64_t v58 = v73;
        sub_2417C(v73, a2);
        if (v74 < 0) {
          unint64_t v58 = (void **)v73[0];
        }
        int v59 = *((_DWORD *)v9 + 14);
        sub_2417C(__p, v27);
        int v60 = v72;
        size_t v61 = (void **)__p[0];
        sub_14FDE0((uint64_t)v69, a1);
        int64_t v62 = __p;
        if (v60 < 0) {
          int64_t v62 = v61;
        }
        if (v70 >= 0) {
          unsigned int v63 = v69;
        }
        else {
          unsigned int v63 = (void **)v69[0];
        }
        *(_DWORD *)AudioTimeStamp buf = 136316930;
        *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
        __int16 v78 = 1024;
        int v79 = 289;
        __int16 v80 = 2080;
        uint64_t v81 = v57;
        __int16 v82 = 2048;
        double v83 = a4;
        __int16 v84 = 2080;
        uint64_t v85 = v58;
        __int16 v86 = 1024;
        int v87 = v59;
        __int16 v88 = 2080;
        unint64_t v89 = v62;
        __int16 v90 = 2080;
        uint64_t v91 = v63;
        _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d VolumeCommand: Failed to set parameter '%s' to %f on processor type '%s' index %u, err: %s on chain '%s'.", buf, 0x4Au);
        if (v70 < 0) {
          operator delete(v69[0]);
        }
        goto LABEL_77;
      }
    }
LABEL_42:
    if (!v25) {
      return;
    }
  }
  sub_4636C(v25);
}

void sub_35CC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (v31) {
    sub_4636C(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_35CD08(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *((_DWORD *)v4 + 8);
    if (v7 >= a2)
    {
      if (v7 == a2)
      {
        if (*((_DWORD *)v4 + 9) < a3) {
          ++v4;
        }
        else {
          uint64_t v6 = v4;
        }
      }
      else
      {
        uint64_t v6 = v4;
      }
    }
    else
    {
      ++v4;
    }
    uint64_t v4 = (uint64_t *)*v4;
  }
  while (v4);
  if (v6 == v3) {
    return v3;
  }
  unsigned int v8 = *((_DWORD *)v6 + 8);
  if (v8 > a2 || v8 == a2 && *((_DWORD *)v6 + 9) > a3) {
    return v3;
  }
  return v6;
}

BOOL sub_35CD88(void *a1)
{
  if (a1 + 14 == sub_35CD08((uint64_t)(a1 + 13), 0x64737067u, 0))
  {
    unsigned int v7 = (os_log_t *)sub_32A48(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, 0x64737067u);
      char v9 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v14 = "VolumeControl.cpp";
      __int16 v15 = 1024;
      int v16 = 304;
      __int16 v17 = 2080;
      int v18 = v9;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"VolumeCommand: Software volume processor of type '%s' does not exist\"", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VolumeCommand: Software volume processor of type '%s' does not exist");
  }
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  if (a1[3])
  {
    *(_DWORD *)AudioTimeStamp buf = 0;
    sub_26F17C();
    BOOL v5 = (*(unsigned int (**)(void))(qword_64E880 + 64))() == 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  sub_4636C(v4);
  return v5;
}

void sub_35CF7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_35CFA8(uint64_t a1, unsigned int a2, unsigned int a3, float *a4)
{
  unsigned int v8 = sub_35CD08(a1 + 104, a2, 0);
  if ((uint64_t *)(a1 + 112) == v8)
  {
    int v52 = (os_log_t *)sub_32A48(13);
    unint64_t v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v63, a2);
      uint64_t v54 = v64 >= 0 ? v63 : (void **)v63[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v66 = 1024;
      int v67 = 322;
      __int16 v68 = 2080;
      __int16 v69 = v54;
      _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"VolumeCommand: Software volume processor of type '%s' does not exist\"", buf, 0x1Cu);
      if (v64 < 0) {
        operator delete(v63[0]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VolumeCommand: Software volume processor of type '%s' does not exist");
  }
  char v9 = v8;
  uint64_t v10 = sub_32A48(18);
  uint64_t v11 = sub_32A48(38);
  char v12 = 0;
  uint64_t v13 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v14 = *(void *)(v10 + 8);
  while (1)
  {
    uint64_t v15 = *(int *)&buf[4 * v13];
    char v16 = v12;
    if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
      break;
    }
    char v12 = 1;
    uint64_t v13 = 1;
    if (v16)
    {
      if ((v14 & 1) == 0) {
        goto LABEL_25;
      }
      goto LABEL_10;
    }
  }
  if ((v14 & v15) == 0) {
    uint64_t v10 = v11;
  }
  if (*(void *)(v10 + 8))
  {
LABEL_10:
    __int16 v17 = *(NSObject **)v10;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v63, a3);
      if (v64 >= 0) {
        int v18 = v63;
      }
      else {
        int v18 = (void **)v63[0];
      }
      CFDictionaryRef v56 = a4;
      float v19 = *a4;
      sub_2417C(v61, a2);
      int v20 = v62;
      int v21 = (void **)v61[0];
      int v22 = *((_DWORD *)v9 + 14);
      sub_14FDE0((uint64_t)__p, a1);
      char v23 = v61;
      if (v20 < 0) {
        char v23 = v21;
      }
      uint64_t v24 = (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136316674;
      if (v60 >= 0) {
        uint64_t v24 = __p;
      }
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v66 = 1024;
      int v67 = 326;
      __int16 v68 = 2080;
      __int16 v69 = v18;
      __int16 v70 = 2048;
      double v71 = v19;
      __int16 v72 = 2080;
      __int16 v73 = v23;
      __int16 v74 = 1024;
      int v75 = v22;
      __int16 v76 = 2080;
      int v77 = v24;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d VolumeCommand: Getting parameter '%s' to %f on processor type '%s' index %u on chain '%s'.", buf, 0x40u);
      if (v60 < 0) {
        operator delete(__p[0]);
      }
      a4 = v56;
      if (v62 < 0) {
        operator delete(v61[0]);
      }
      if (v64 < 0) {
        operator delete(v63[0]);
      }
    }
  }
LABEL_25:
  int v25 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v25)
  {
    unsigned int v26 = 0;
    goto LABEL_34;
  }
  unsigned int v26 = std::__shared_weak_count::lock(v25);
  if (!v26 || !*(void *)(a1 + 24))
  {
LABEL_34:
    uint64_t v35 = sub_32A48(18);
    uint64_t v36 = sub_32A48(38);
    char v37 = 0;
    uint64_t v38 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v39 = *(void *)(v35 + 8);
    while (1)
    {
      uint64_t v40 = *(int *)&buf[4 * v38];
      char v41 = v37;
      if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
        break;
      }
      char v37 = 1;
      uint64_t v38 = 1;
      if (v41) {
        goto LABEL_40;
      }
    }
    if ((v39 & v40) == 0) {
      uint64_t v35 = v36;
    }
LABEL_40:
    uint64_t v42 = *(NSObject **)v35;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v66 = 1024;
      int v67 = 342;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VolumeCommand: DSPChain unavailable for setting parameter", buf, 0x12u);
    }
LABEL_43:
    if (!v26) {
      return;
    }
    goto LABEL_44;
  }
  sub_26F17C();
  unsigned int v27 = (*(uint64_t (**)(void))(qword_64E880 + 64))();
  if (v27)
  {
    uint64_t v28 = sub_32A48(18);
    uint64_t v29 = sub_32A48(38);
    char v30 = 0;
    uint64_t v31 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v32 = *(void *)(v28 + 8);
    while (1)
    {
      uint64_t v33 = *(int *)&buf[4 * v31];
      char v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      char v30 = 1;
      uint64_t v31 = 1;
      if (v34) {
        goto LABEL_48;
      }
    }
    if ((v32 & v33) == 0) {
      uint64_t v28 = v29;
    }
LABEL_48:
    uint64_t v43 = *(NSObject **)v28;
    if (v43 && os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v63, a3);
      if (v64 >= 0) {
        uint64_t v44 = v63;
      }
      else {
        uint64_t v44 = (void **)v63[0];
      }
      float v45 = *a4;
      uint64_t v46 = v61;
      sub_2417C(v61, a2);
      if (v62 < 0) {
        uint64_t v46 = (void **)v61[0];
      }
      int v47 = *((_DWORD *)v9 + 14);
      sub_2417C(__p, v27);
      int v48 = v60;
      char v49 = (void **)__p[0];
      sub_14FDE0((uint64_t)v57, a1);
      unsigned int v50 = __p;
      if (v48 < 0) {
        unsigned int v50 = v49;
      }
      if (v58 >= 0) {
        float v51 = v57;
      }
      else {
        float v51 = (void **)v57[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136316930;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v66 = 1024;
      int v67 = 337;
      __int16 v68 = 2080;
      __int16 v69 = v44;
      __int16 v70 = 2048;
      double v71 = v45;
      __int16 v72 = 2080;
      __int16 v73 = v46;
      __int16 v74 = 1024;
      int v75 = v47;
      __int16 v76 = 2080;
      int v77 = v50;
      __int16 v78 = 2080;
      int v79 = v51;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d VolumeCommand: Failed to get parameter '%s' to %f on processor type '%s' index %u, err: %s on chain '%s'.", buf, 0x4Au);
      if (v58 < 0) {
        operator delete(v57[0]);
      }
      if (v60 < 0) {
        operator delete(__p[0]);
      }
      if (v62 < 0) {
        operator delete(v61[0]);
      }
      if (v64 < 0) {
        operator delete(v63[0]);
      }
    }
    goto LABEL_43;
  }
LABEL_44:
  sub_4636C(v26);
}

void sub_35D5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (v31) {
    sub_4636C(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_35D6A8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = sub_35CD08(a1 + 104, a2, 0);
  if ((uint64_t *)(a1 + 112) == v6)
  {
    int v48 = (os_log_t *)sub_32A48(13);
    char v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v59, a2);
      unsigned int v50 = v60 >= 0 ? v59 : (void **)v59[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v62 = 1024;
      int v63 = 349;
      __int16 v64 = 2080;
      __int16 v65 = v50;
      _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"VolumeCommand: Software volume processor of type '%s' does not exist\"", buf, 0x1Cu);
      if (v60 < 0) {
        operator delete(v59[0]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VolumeCommand: Software volume processor of type '%s' does not exist");
  }
  unsigned int v7 = v6;
  uint64_t v8 = sub_32A48(18);
  uint64_t v9 = sub_32A48(38);
  char v10 = 0;
  uint64_t v11 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v12 = *(void *)(v8 + 8);
  while (1)
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    char v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1;
    if (v14) {
      goto LABEL_8;
    }
  }
  if ((v12 & v13) == 0) {
    uint64_t v8 = v9;
  }
LABEL_8:
  uint64_t v15 = *(NSObject **)v8;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    sub_2417C(v59, a3);
    unsigned int v52 = a3;
    if (v60 >= 0) {
      char v16 = v59;
    }
    else {
      char v16 = (void **)v59[0];
    }
    sub_2417C(v57, a2);
    int v17 = v58;
    int v18 = (void **)v57[0];
    int v19 = *((_DWORD *)v7 + 14);
    sub_14FDE0((uint64_t)__p, a1);
    int v20 = v57;
    if (v17 < 0) {
      int v20 = v18;
    }
    if (v56 >= 0) {
      int v21 = __p;
    }
    else {
      int v21 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136316418;
    *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
    __int16 v62 = 1024;
    int v63 = 352;
    __int16 v64 = 2080;
    __int16 v65 = v16;
    __int16 v66 = 2080;
    int v67 = v20;
    __int16 v68 = 1024;
    int v69 = v19;
    __int16 v70 = 2080;
    double v71 = v21;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d VolumeCommand: Setting property '%s' on processor type '%s' index %u on chain '%s'.", buf, 0x36u);
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    a3 = v52;
    if (v58 < 0) {
      operator delete(v57[0]);
    }
    if (v60 < 0) {
      operator delete(v59[0]);
    }
  }
  int v22 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v22)
  {
    char v23 = 0;
    goto LABEL_33;
  }
  char v23 = std::__shared_weak_count::lock(v22);
  if (!v23 || !*(void *)(a1 + 24))
  {
LABEL_33:
    uint64_t v32 = sub_32A48(18);
    uint64_t v33 = sub_32A48(38);
    char v34 = 0;
    uint64_t v35 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v36 = *(void *)(v32 + 8);
    while (1)
    {
      uint64_t v37 = *(int *)&buf[4 * v35];
      char v38 = v34;
      if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
        break;
      }
      char v34 = 1;
      uint64_t v35 = 1;
      if (v38) {
        goto LABEL_39;
      }
    }
    if ((v36 & v37) == 0) {
      uint64_t v32 = v33;
    }
LABEL_39:
    uint64_t v39 = *(NSObject **)v32;
    if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v62 = 1024;
      int v63 = 367;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VolumeCommand: DSPChain unavailable for setting parameter", buf, 0x12u);
    }
LABEL_42:
    if (!v23) {
      return;
    }
    goto LABEL_43;
  }
  sub_26F17C();
  unsigned int v24 = (*(uint64_t (**)(void))(qword_64E880 + 72))();
  if (v24)
  {
    uint64_t v25 = sub_32A48(18);
    uint64_t v26 = sub_32A48(38);
    char v27 = 0;
    uint64_t v28 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v29 = *(void *)(v25 + 8);
    while (1)
    {
      uint64_t v30 = *(int *)&buf[4 * v28];
      char v31 = v27;
      if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
        break;
      }
      char v27 = 1;
      uint64_t v28 = 1;
      if (v31) {
        goto LABEL_47;
      }
    }
    if ((v29 & v30) == 0) {
      uint64_t v25 = v26;
    }
LABEL_47:
    uint64_t v40 = *(NSObject **)v25;
    if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      char v41 = v59;
      sub_2417C(v59, a3);
      if (v60 < 0) {
        char v41 = (void **)v59[0];
      }
      uint64_t v42 = v57;
      sub_2417C(v57, a2);
      if (v58 < 0) {
        uint64_t v42 = (void **)v57[0];
      }
      int v43 = *((_DWORD *)v7 + 14);
      sub_2417C(__p, v24);
      int v44 = v56;
      float v45 = (void **)__p[0];
      sub_14FDE0((uint64_t)v53, a1);
      uint64_t v46 = __p;
      if (v44 < 0) {
        uint64_t v46 = v45;
      }
      if (v54 >= 0) {
        int v47 = v53;
      }
      else {
        int v47 = (void **)v53[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136316674;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v62 = 1024;
      int v63 = 362;
      __int16 v64 = 2080;
      __int16 v65 = v41;
      __int16 v66 = 2080;
      int v67 = v42;
      __int16 v68 = 1024;
      int v69 = v43;
      __int16 v70 = 2080;
      double v71 = v46;
      __int16 v72 = 2080;
      __int16 v73 = v47;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d VolumeCommand: Failed to set property '%s' on processor type '%s' index %u, err: %s on chain '%s'.", buf, 0x40u);
      if (v54 < 0) {
        operator delete(v53[0]);
      }
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (v58 < 0) {
        operator delete(v57[0]);
      }
      if (v60 < 0) {
        operator delete(v59[0]);
      }
    }
    goto LABEL_42;
  }
LABEL_43:
  sub_4636C(v23);
}

void sub_35DCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (v31) {
    sub_4636C(v31);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_35DD7C(void *a1, unsigned int a2)
{
  if (a1 + 14 == sub_35CD08((uint64_t)(a1 + 13), a2, 0))
  {
    unsigned int v9 = a2;
    char v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, v9);
      uint64_t v12 = v15 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      int v17 = "VolumeControl.cpp";
      __int16 v18 = 1024;
      int v19 = 376;
      __int16 v20 = 2080;
      int v21 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"VolumeCommand: Software volume processor of type '%s' does not exist\"", buf, 0x1Cu);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VolumeCommand: Software volume processor of type '%s' does not exist");
  }
  *(_DWORD *)AudioTimeStamp buf = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (!v4) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  if (a1[3])
  {
    sub_26F17C();
    BOOL v7 = (*(unsigned int (**)(void))(qword_64E880 + 80))() == 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  sub_4636C(v6);
  return v7;
}

void sub_35DF70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_35DF9C(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  int v61 = a4;
  uint64_t v6 = sub_35CD08(a1 + 104, 0x64737067u, 0);
  if ((uint64_t *)(a1 + 112) == v6)
  {
    char v49 = (os_log_t *)sub_32A48(13);
    unsigned int v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v59, 0x64737067u);
      float v51 = v60 >= 0 ? v59 : (void **)v59[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v63 = 1024;
      int v64 = 394;
      __int16 v65 = 2080;
      __int16 v66 = v51;
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"VolumeCommand: Software volume processor of type '%s' does not exist\"", buf, 0x1Cu);
      if (v60 < 0) {
        operator delete(v59[0]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "VolumeCommand: Software volume processor of type '%s' does not exist");
  }
  BOOL v7 = v6;
  uint64_t v8 = sub_32A48(18);
  uint64_t v9 = sub_32A48(38);
  char v10 = 0;
  uint64_t v11 = 0;
  *(void *)AudioTimeStamp buf = 0x100000002;
  uint64_t v12 = *(void *)(v8 + 8);
  while (1)
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    char v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1;
    if (v14) {
      goto LABEL_8;
    }
  }
  if ((v12 & v13) == 0) {
    uint64_t v8 = v9;
  }
LABEL_8:
  char v15 = *(NSObject **)v8;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    sub_2417C(v59, a2);
    unsigned int v16 = a2;
    if (v60 >= 0) {
      int v17 = v59;
    }
    else {
      int v17 = (void **)v59[0];
    }
    sub_2417C(v57, 0x64737067u);
    int v18 = v58;
    int v19 = (void **)v57[0];
    int v20 = *((_DWORD *)v7 + 14);
    sub_14FDE0((uint64_t)__p, a1);
    int v21 = v57;
    if (v18 < 0) {
      int v21 = v19;
    }
    if (v56 >= 0) {
      int v22 = __p;
    }
    else {
      int v22 = (void **)__p[0];
    }
    *(_DWORD *)AudioTimeStamp buf = 136316418;
    *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
    __int16 v63 = 1024;
    int v64 = 398;
    __int16 v65 = 2080;
    __int16 v66 = v17;
    __int16 v67 = 2080;
    __int16 v68 = v21;
    __int16 v69 = 1024;
    int v70 = v20;
    __int16 v71 = 2080;
    __int16 v72 = v22;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d VolumeCommand: Getting property '%s' on processor type '%s' index %u on chain '%s'.", buf, 0x36u);
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    a2 = v16;
    if (v58 < 0) {
      operator delete(v57[0]);
    }
    if (v60 < 0) {
      operator delete(v59[0]);
    }
  }
  char v23 = *(std::__shared_weak_count **)(a1 + 32);
  if (!v23)
  {
    unsigned int v24 = 0;
    goto LABEL_33;
  }
  unsigned int v24 = std::__shared_weak_count::lock(v23);
  if (!v24 || !*(void *)(a1 + 24))
  {
LABEL_33:
    uint64_t v33 = sub_32A48(18);
    uint64_t v34 = sub_32A48(38);
    char v35 = 0;
    uint64_t v36 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v37 = *(void *)(v33 + 8);
    while (1)
    {
      uint64_t v38 = *(int *)&buf[4 * v36];
      char v39 = v35;
      if (((v37 & v38) != 0) != ((*(void *)(v34 + 8) & v38) != 0)) {
        break;
      }
      char v35 = 1;
      uint64_t v36 = 1;
      if (v39) {
        goto LABEL_39;
      }
    }
    if ((v37 & v38) == 0) {
      uint64_t v33 = v34;
    }
LABEL_39:
    uint64_t v40 = *(NSObject **)v33;
    if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v63 = 1024;
      int v64 = 414;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VolumeCommand: DSPChain unavailable for setting parameter", buf, 0x12u);
    }
LABEL_42:
    if (!v24) {
      return;
    }
    goto LABEL_43;
  }
  sub_26F17C();
  unsigned int v25 = (*(uint64_t (**)(void))(qword_64E880 + 80))();
  if (v25)
  {
    uint64_t v26 = sub_32A48(18);
    uint64_t v27 = sub_32A48(38);
    char v28 = 0;
    uint64_t v29 = 0;
    *(void *)AudioTimeStamp buf = 0x100000002;
    uint64_t v30 = *(void *)(v26 + 8);
    while (1)
    {
      uint64_t v31 = *(int *)&buf[4 * v29];
      char v32 = v28;
      if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
        break;
      }
      char v28 = 1;
      uint64_t v29 = 1;
      if (v32) {
        goto LABEL_47;
      }
    }
    if ((v30 & v31) == 0) {
      uint64_t v26 = v27;
    }
LABEL_47:
    char v41 = *(NSObject **)v26;
    if (v41 && os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      uint64_t v42 = v59;
      sub_2417C(v59, a2);
      if (v60 < 0) {
        uint64_t v42 = (void **)v59[0];
      }
      int v43 = v57;
      sub_2417C(v57, 0x64737067u);
      if (v58 < 0) {
        int v43 = (void **)v57[0];
      }
      int v44 = *((_DWORD *)v7 + 14);
      sub_2417C(__p, v25);
      int v45 = v56;
      uint64_t v46 = (void **)__p[0];
      sub_14FDE0((uint64_t)v53, a1);
      int v47 = __p;
      if (v45 < 0) {
        int v47 = v46;
      }
      if (v54 >= 0) {
        int v48 = v53;
      }
      else {
        int v48 = (void **)v53[0];
      }
      *(_DWORD *)AudioTimeStamp buf = 136316674;
      *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
      __int16 v63 = 1024;
      int v64 = 409;
      __int16 v65 = 2080;
      __int16 v66 = v42;
      __int16 v67 = 2080;
      __int16 v68 = v43;
      __int16 v69 = 1024;
      int v70 = v44;
      __int16 v71 = 2080;
      __int16 v72 = v47;
      __int16 v73 = 2080;
      __int16 v74 = v48;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d VolumeCommand: Failed to get property '%s' on processor type '%s' index %u, err: %s on chain '%s'.", buf, 0x40u);
      if (v54 < 0) {
        operator delete(v53[0]);
      }
      if (v56 < 0) {
        operator delete(__p[0]);
      }
      if (v58 < 0) {
        operator delete(v57[0]);
      }
      if (v60 < 0) {
        operator delete(v59[0]);
      }
    }
    goto LABEL_42;
  }
LABEL_43:
  sub_4636C(v24);
}

void sub_35E5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (v30) {
    sub_4636C(v30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_35E688(float a1, float a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65D228, memory_order_acquire) & 1) == 0)
  {
    float v6 = a1;
    int v4 = __cxa_guard_acquire(&qword_65D228);
    a1 = v6;
    if (v4)
    {
      int v12 = 0;
      long long v8 = *(_OWORD *)"";
      long long v9 = unk_573314;
      long long v10 = xmmword_573324;
      long long v11 = unk_573334;
      sub_35E82C(qword_65D210, &v8, 0x11uLL);
      __cxa_guard_release(&qword_65D228);
      a1 = v6;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65D248, memory_order_acquire) & 1) == 0)
  {
    float v7 = a1;
    int v5 = __cxa_guard_acquire(&qword_65D248);
    a1 = v7;
    if (v5)
    {
      int v12 = 1117782016;
      long long v8 = xmmword_573348;
      long long v9 = unk_573358;
      long long v10 = xmmword_573368;
      long long v11 = unk_573378;
      sub_35E82C(qword_65D230, &v8, 0x11uLL);
      __cxa_guard_release(&qword_65D248);
      a1 = v7;
    }
  }
  sub_35E8B0(qword_65D210[0], unk_65D218, a1);
  return sub_35E8B0(qword_65D230[0], unk_65D238, a2);
}

void sub_35E7FC(_Unwind_Exception *a1)
{
}

void *sub_35E82C(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_46BB4(a1, a3);
    float v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_35E894(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_35E8B0(uint64_t a1, uint64_t a2, float a3)
{
  if (a1 == a2)
  {
    float v6 = (os_log_t *)sub_32A48(13);
    float v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      long long v10 = "StandardUtilities.h";
      __int16 v11 = 1024;
      int v12 = 1409;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unint64_t v3 = 0;
  unint64_t v4 = ((a2 - a1) >> 2) - 1;
  do
  {
    if (*(float *)(a1 + 4 * v3) >= a3) {
      break;
    }
    ++v3;
  }
  while (v3 <= v4);
  if (v3 >= v4) {
    return ((a2 - a1) >> 2) - 1;
  }
  else {
    return v3;
  }
}

void sub_35E9E0(_Unwind_Exception *exception_object)
{
}

BOOL sub_35EA00(uint64_t a1)
{
  uint64_t v1 = sub_99A40(*(void *)(a1 + 192));
  *((void *)&v4 + 1) = v2;
  *(void *)&long long v4 = v1;
  uint64_t v3 = v4 >> 32;
  return (v3 & 0xFF00000000) != 0 && v3 != 0;
}

BOOL sub_35EA50(uint64_t a1, void *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  if (!v2) {
    return 0;
  }
  long long v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return 0;
  }
  if (*a2)
  {
    int v5 = *(_DWORD *)(*a2 + 144);
    BOOL v7 = v5 != 1885892706 && v5 != 1886216820;
  }
  else
  {
    BOOL v7 = 0;
  }
  sub_4636C(v4);
  return v7;
}

uint64_t sub_35EAC0()
{
  return 1;
}

void sub_35EAC8(uint64_t a1)
{
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));
  sub_104C04((void *)a1);

  operator delete();
}

uint64_t sub_35EB34(uint64_t a1)
{
  *(void *)a1 = &off_629710;
  sub_277AEC(*(void **)(a1 + 648));

  return sub_104C04((void *)a1);
}

uint64_t sub_35EB8C(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[3];
  if (v2 != 1986817381 && v2 != 1936744814) {
    return 0;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128))(a2) == 1886679669) {
    return 1768845428;
  }
  return 0;
}

uint64_t sub_35EC08(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[3];
  if (v2 <= 1852601963)
  {
    BOOL v3 = v2 == 1668047723 || v2 == 1684370292;
    int v4 = 1685287523;
  }
  else if (v2 > 1937072757)
  {
    BOOL v3 = v2 == 1986817381;
    int v4 = 1937072758;
  }
  else
  {
    BOOL v3 = v2 == 1852601964;
    int v4 = 1936744814;
  }
  if (v3 || v2 == v4) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 128))(a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_35ECB4(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[3];
  if (v2 == 1936744814)
  {
    unsigned int v3 = 1836281891;
  }
  else
  {
    if (v2 != 1986817381) {
      return 0;
    }
    unsigned int v3 = 1836475427;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128))(a2) == 1886679669) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t sub_35ED48(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  if (v2 == 1986817381) {
    int v3 = 1986290211;
  }
  else {
    int v3 = 0;
  }
  if (v2 == 1937072758) {
    int v4 = 1937138723;
  }
  else {
    int v4 = v3;
  }
  if (v2 == 1936744814) {
    int v5 = 1936748067;
  }
  else {
    int v5 = 0;
  }
  if (v2 == 1852601964) {
    int v6 = 1852601891;
  }
  else {
    int v6 = v5;
  }
  if (v2 <= 1937072757) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = v4;
  }
  if (v2 == 1685287523) {
    int v8 = 1936941859;
  }
  else {
    int v8 = 0;
  }
  if (v2 == 1684370292) {
    int v9 = 1835295779;
  }
  else {
    int v9 = v8;
  }
  if (v2 == 1668047723) {
    unsigned int v10 = 1668506403;
  }
  else {
    unsigned int v10 = v9;
  }
  if (v2 <= 1852601963) {
    return v10;
  }
  else {
    return v7;
  }
}

uint64_t sub_35EE18(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 1986817381) {
    return 0;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128))(a2) == 1886679669) {
    return 1768845428;
  }
  return 0;
}

uint64_t sub_35EE88(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 1986817381) {
    return 0;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128))(a2) == 1886679669) {
    return 1768845428;
  }
  return 0;
}

uint64_t sub_35EEF8(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0;
  int v3 = a2[3];
  if (v3 <= 1936744813)
  {
    if (v3 == 1836414053)
    {
LABEL_8:
      if ((*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128))(a2) == 1886679669) {
        return 1768845428;
      }
      else {
        return 0;
      }
    }
    int v4 = 1936682095;
LABEL_7:
    if (v3 != v4) {
      return result;
    }
    goto LABEL_8;
  }
  if (v3 != 1986817381 && v3 != 1937072758)
  {
    int v4 = 1936744814;
    goto LABEL_7;
  }
  int v5 = *(uint64_t (**)(_DWORD *))(*(void *)a2 + 128);

  return v5(a2);
}

uint64_t sub_35EFEC(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[3];
  if (v2 <= 1852601963)
  {
    if (v2 <= 1685287522)
    {
      BOOL v3 = v2 == 1668047723;
      int v4 = 1684370292;
    }
    else
    {
      BOOL v3 = v2 == 1685287523 || v2 == 1784767339;
      int v4 = 1836414053;
    }
  }
  else if (v2 > 1937072748)
  {
    BOOL v3 = v2 == 1937072749 || v2 == 1986817381;
    int v4 = 1937072758;
  }
  else
  {
    BOOL v3 = v2 == 1852601964 || v2 == 1936682095;
    int v4 = 1936744814;
  }
  if (v3 || v2 == v4) {
    return (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 128))(a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_35F0D8(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 1986817381) {
    return 0;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128))(a2) == 1886679669) {
    return 1836475490;
  }
  return 0;
}

uint64_t sub_35F148(uint64_t a1, _DWORD *a2)
{
  if (a2[3] != 1986817381) {
    return 0;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128))(a2) == 1886679669) {
    return 1836479331;
  }
  return 0;
}

uint64_t sub_35F1B8(uint64_t a1, _DWORD *a2)
{
  uint64_t result = 0;
  int v3 = a2[3];
  if (v3 <= 1936744813)
  {
    if (v3 == 1836414053)
    {
      int v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 128))(a2);
      unsigned int v5 = 1953002101;
      BOOL v4 = v6 == 1886679669;
    }
    else
    {
      if (v3 != 1936682095) {
        return result;
      }
      BOOL v4 = (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128))(a2) == 1886679669;
      unsigned int v5 = 1953002099;
    }
  }
  else
  {
    if (v3 == 1986817381) {
      return 1987013732;
    }
    if (v3 == 1937072758) {
      return 1937140836;
    }
    if (v3 != 1936744814) {
      return result;
    }
    BOOL v4 = (*(unsigned int (**)(_DWORD *))(*(void *)a2 + 128))(a2) == 1886679669;
    unsigned int v5 = 1836281966;
  }
  if (v4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_35F310(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 12);
  if (v2 == 1986817381) {
    int v3 = 1987013741;
  }
  else {
    int v3 = 0;
  }
  if (v2 == 1937072758) {
    int v4 = 1937140845;
  }
  else {
    int v4 = v3;
  }
  if (v2 == 1937072749) {
    int v5 = 1936553332;
  }
  else {
    int v5 = v4;
  }
  if (v2 == 1936744814) {
    int v6 = 1936744814;
  }
  else {
    int v6 = 0;
  }
  if (v2 == 1936682095) {
    int v7 = 1936682095;
  }
  else {
    int v7 = v6;
  }
  if (v2 == 1852601964) {
    int v8 = 1852601964;
  }
  else {
    int v8 = v7;
  }
  if (v2 <= 1937072748) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = v5;
  }
  if (v2 == 1836414053) {
    int v10 = 1836414053;
  }
  else {
    int v10 = 0;
  }
  if (v2 == 1784767339) {
    int v11 = 1784767339;
  }
  else {
    int v11 = v10;
  }
  if (v2 == 1685287523) {
    int v12 = 1936945763;
  }
  else {
    int v12 = v11;
  }
  if (v2 == 1684370292) {
    int v13 = 1835295859;
  }
  else {
    int v13 = 0;
  }
  if (v2 == 1668047723) {
    int v14 = 1668510307;
  }
  else {
    int v14 = v13;
  }
  if (v2 <= 1685287522) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v12;
  }
  if (v2 <= 1852601963) {
    return v15;
  }
  else {
    return v9;
  }
}

uint64_t sub_35F428(uint64_t a1, int a2)
{
  if (a2 <= 1852601890)
  {
    if (a2 > 1835295842)
    {
      if (a2 <= 1836462691)
      {
        int v2 = 1836281890;
        if (a2 == 1836414053) {
          int v3 = 1650685548;
        }
        else {
          int v3 = 0;
        }
        if (a2 == 1836281966) {
          int v4 = 1936745334;
        }
        else {
          int v4 = v3;
        }
        if (a2 == 1836281891) {
          unsigned int v5 = 1936745315;
        }
        else {
          unsigned int v5 = v4;
        }
        if (a2 == 1835295859) {
          int v6 = 1935893353;
        }
        else {
          int v6 = 0;
        }
        if (a2 == 1835295843) {
          unsigned int v7 = 1935894894;
        }
        else {
          unsigned int v7 = v6;
        }
        goto LABEL_101;
      }
      int v2 = 1836475426;
      if (a2 == 1836479331) {
        int v22 = 1818456950;
      }
      else {
        int v22 = 0;
      }
      if (a2 == 1836475490) {
        int v23 = 1818453110;
      }
      else {
        int v23 = v22;
      }
      if (a2 == 1836475427) {
        unsigned int v5 = 1818453106;
      }
      else {
        unsigned int v5 = v23;
      }
      int v19 = 1836462692;
      int v20 = 1818456932;
      BOOL v21 = a2 == 1836462707;
      unsigned int v7 = 1818453107;
      goto LABEL_77;
    }
    if (a2 <= 1784767338)
    {
      int v2 = 1668510306;
      if (a2 == 1684157046) {
        int v26 = 1818453107;
      }
      else {
        int v26 = 0;
      }
      if (a2 == 1668510307) {
        unsigned int v5 = 1935893353;
      }
      else {
        unsigned int v5 = v26;
      }
      int v13 = 1668506403;
      int v14 = 1935892841;
      BOOL v15 = a2 == 1668506475;
      int v16 = 1668049771;
    }
    else
    {
      int v2 = 1818456941;
      if (a2 == 1835295779) {
        int v11 = 1935892841;
      }
      else {
        int v11 = 0;
      }
      if (a2 == 1819501422) {
        int v12 = 1935894894;
      }
      else {
        int v12 = v11;
      }
      if (a2 == 1818456942) {
        unsigned int v5 = 1935894894;
      }
      else {
        unsigned int v5 = v12;
      }
      int v13 = 1784767339;
      int v14 = 1650685548;
      BOOL v15 = a2 == 1818455660;
      int v16 = 1935894894;
    }
    goto LABEL_96;
  }
  if (a2 <= 1937125987)
  {
    if (a2 <= 1936682094)
    {
      int v2 = 1935946357;
      if (a2 == 1936553332) {
        int v27 = 1650685548;
      }
      else {
        int v27 = 0;
      }
      if (a2 == 1935946358) {
        unsigned int v5 = 1818453107;
      }
      else {
        unsigned int v5 = v27;
      }
      int v13 = 1852601891;
      int v14 = 1935892841;
      BOOL v15 = a2 == 1852601964;
      int v16 = 1935893353;
LABEL_96:
      if (!v15) {
        int v16 = 0;
      }
      if (a2 == v13) {
        unsigned int v7 = v14;
      }
      else {
        unsigned int v7 = v16;
      }
      goto LABEL_101;
    }
    int v2 = 1936748066;
    if (a2 == 1936945763) {
      int v17 = 1935893353;
    }
    else {
      int v17 = 0;
    }
    if (a2 == 1936941859) {
      int v18 = 1935892841;
    }
    else {
      int v18 = v17;
    }
    if (a2 == 1936748067) {
      unsigned int v5 = 1936745315;
    }
    else {
      unsigned int v5 = v18;
    }
    int v19 = 1936682095;
    int v20 = 1650685548;
    BOOL v21 = a2 == 1936744814;
    unsigned int v7 = 1936745334;
LABEL_77:
    if (!v21) {
      unsigned int v7 = 0;
    }
    if (a2 == v19) {
      unsigned int v7 = v20;
    }
    goto LABEL_101;
  }
  if (a2 > 1953002100)
  {
    int v2 = 1986290210;
    if (a2 == 1987013741) {
      int v24 = 1818456950;
    }
    else {
      int v24 = 0;
    }
    if (a2 == 1987013732) {
      int v25 = 1818453110;
    }
    else {
      int v25 = v24;
    }
    if (a2 == 1986290211) {
      unsigned int v5 = 1818453106;
    }
    else {
      unsigned int v5 = v25;
    }
    int v19 = 1953002101;
    int v20 = 1650685548;
    BOOL v21 = a2 == 1983013986;
    unsigned int v7 = 1818456932;
    goto LABEL_77;
  }
  int v2 = 1937140835;
  if (a2 == 1953002099) {
    int v8 = 1650685548;
  }
  else {
    int v8 = 0;
  }
  if (a2 == 1937140845) {
    int v9 = 1818456950;
  }
  else {
    int v9 = v8;
  }
  if (a2 == 1937140836) {
    unsigned int v5 = 1818453110;
  }
  else {
    unsigned int v5 = v9;
  }
  unsigned int v7 = 1818456932;
  if (a2 == 1937138723) {
    int v10 = 1818453106;
  }
  else {
    int v10 = 0;
  }
  if (a2 != 1937125988) {
    unsigned int v7 = v10;
  }
LABEL_101:
  if (a2 <= v2) {
    return v7;
  }
  else {
    return v5;
  }
}

void sub_35F834(uint64_t a1, int *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  *a4 = a2[1];
  *a5 = a2[2];
  int v5 = *a2;
  if (*a2 > 1852601890)
  {
    if (v5 <= 1937125987)
    {
      if (v5 > 1936682094)
      {
        if (v5 <= 1936748066)
        {
          if (v5 == 1936682095) {
            goto LABEL_73;
          }
          if (v5 != 1936744814) {
            return;
          }
        }
        else if (v5 != 1936748067)
        {
          if (v5 == 1936941859 || v5 == 1936945763) {
            goto LABEL_26;
          }
          return;
        }
        int v5 = 1936744814;
        goto LABEL_73;
      }
      if (v5 <= 1935946357)
      {
        if (v5 == 1852601891)
        {
LABEL_53:
          int v5 = 1852601964;
          goto LABEL_73;
        }
        int v9 = 1852601964;
LABEL_52:
        if (v5 != v9) {
          return;
        }
        goto LABEL_53;
      }
      if (v5 != 1935946358)
      {
        if (v5 != 1936553332) {
          return;
        }
        int v5 = 1937072749;
        goto LABEL_73;
      }
    }
    else
    {
      if (v5 > 1953002100)
      {
        if (v5 <= 1986290210)
        {
          if (v5 == 1953002101)
          {
            *a4 = 1886679669;
            int v5 = 1836414053;
            goto LABEL_73;
          }
          int v8 = 1983013986;
        }
        else
        {
          if (v5 == 1986290211 || v5 == 1987013741)
          {
LABEL_67:
            int v5 = 1986817381;
            goto LABEL_73;
          }
          int v8 = 1987013732;
        }
LABEL_66:
        if (v5 != v8) {
          return;
        }
        goto LABEL_67;
      }
      if (v5 <= 1937140835)
      {
        if (v5 != 1937125988 && v5 != 1937138723) {
          return;
        }
      }
      else if (v5 != 1937140836 && v5 != 1937140845)
      {
        if (v5 != 1953002099) {
          return;
        }
        *a4 = 1886679669;
        int v5 = 1936682095;
        goto LABEL_73;
      }
    }
    int v5 = 1937072758;
    goto LABEL_73;
  }
  if (v5 > 1835295842)
  {
    if (v5 <= 1836462691)
    {
      if (v5 > 1836281890)
      {
        if (v5 != 1836281891 && v5 != 1836281966)
        {
          if (v5 != 1836414053) {
            return;
          }
          goto LABEL_73;
        }
        int v5 = 1936744814;
        goto LABEL_61;
      }
      if (v5 == 1835295843) {
        goto LABEL_45;
      }
      unsigned __int16 v6 = 25715;
LABEL_44:
      if (v5 != (v6 | 0x6D640000)) {
        return;
      }
LABEL_45:
      *a4 = 1886679669;
      int v5 = 1684370292;
      goto LABEL_73;
    }
    if (v5 <= 1836475426)
    {
      if (v5 != 1836462692)
      {
        unsigned __int16 v7 = 12915;
LABEL_59:
        if (v5 != (v7 | 0x6D760000)) {
          return;
        }
      }
    }
    else if (v5 != 1836475427 && v5 != 1836475490)
    {
      unsigned __int16 v7 = 29539;
      goto LABEL_59;
    }
    int v5 = 1986817381;
LABEL_61:
    *a4 = 1886679669;
    goto LABEL_73;
  }
  if (v5 > 1784767338)
  {
    if (v5 > 1818456941)
    {
      if (v5 != 1818456942)
      {
        if (v5 != 1819501422)
        {
          unsigned __int16 v6 = 25635;
          goto LABEL_44;
        }
LABEL_26:
        int v5 = 1685287523;
LABEL_73:
        *a3 = v5;
        return;
      }
LABEL_68:
      int v5 = 1668047723;
      goto LABEL_73;
    }
    if (v5 == 1784767339) {
      goto LABEL_73;
    }
    int v9 = 1818455660;
    goto LABEL_52;
  }
  if (v5 > 1668510306)
  {
    if (v5 == 1668510307) {
      goto LABEL_68;
    }
    int v8 = 1684157046;
    goto LABEL_66;
  }
  if (v5 == 1668506403 || v5 == 1668506475) {
    goto LABEL_68;
  }
}

uint64_t sub_35FC50(void *a1, uint64_t a2)
{
  uint64_t v14 = 0;
  int v13 = 0;
  (*(void (**)(void *, uint64_t, char *, uint64_t *, int *))(*a1 + 688))(a1, a2, (char *)&v14 + 4, &v14, &v13);
  for (uint64_t i = (void *)a1[68]; i != (void *)a1[69]; ++i)
  {
    uint64_t v4 = *i;
    int v5 = *(_DWORD *)(*i + 12);
    int v6 = (*(uint64_t (**)(void))(*(void *)*i + 128))(*i);
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 136))(v4);
    if (HIDWORD(v14) == 1668047723 && v13 == 0)
    {
      if (v5 == 1668047723 && v7 == 0) {
        return v4;
      }
    }
    else if (v5 == HIDWORD(v14) && v6 == v14 && v7 == v13)
    {
      return v4;
    }
  }
  return 0;
}

uint64_t sub_35FD90()
{
  return 0;
}

uint64_t sub_35FD98(uint64_t a1, uint64_t a2)
{
  if ((~*(_DWORD *)(a2 + 56) & 3) != 0)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        int v8 = "HP_Device.cpp";
        __int16 v9 = 1024;
        int v10 = 1897;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"both the sample time and the host time need to be valid for return value\"", (uint8_t *)&v7, 0x12u);
      }
    }
  }
  if (*(double *)a2 == 0.0) {
    (*(void (**)(uint64_t, uint64_t, double))(*(void *)a1 + 600))(a1, a2, *(double *)a2);
  }
  return 1;
}

double sub_35FEBC(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 512))(a1)) {
    return 0.0;
  }
  int v2 = *(void (**)(uint64_t))(*(void *)a1 + 632);

  v2(a1);
  return result;
}

double sub_35FF58(void *a1)
{
  uint64_t v1 = (char *)a1[62];
  int v2 = (char *)a1[63];
  if (((v2 - v1) & 0x7FFFFFFF8) != 0)
  {
    if (v2 == v1) {
      return 0.0;
    }
  }
  else
  {
    int v3 = (char *)a1[66];
    uint64_t v1 = (char *)a1[65];
    double result = 0.0;
    if (((v3 - v1) & 0x7FFFFFFF8) == 0 || v3 == v1) {
      return result;
    }
  }
  uint64_t v6 = *(void *)v1;
  if (!v6) {
    return 0.0;
  }
  return *(double *)(*(void *)(v6 + 104) + 16);
}

uint64_t sub_35FFC0()
{
  return 0;
}

uint64_t sub_35FFC8(double a1)
{
  if (a1 < 32000.0) {
    return 256;
  }
  if (a1 < 64000.0) {
    return 512;
  }
  if (a1 < 128000.0) {
    return 1024;
  }
  if (a1 >= 256000.0) {
    return 4096;
  }
  return 2048;
}

uint64_t sub_360034()
{
  return 1;
}

void sub_36003C()
{
  v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "HP_Device.cpp";
      __int16 v5 = 1024;
      int v6 = 1787;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Not supported by this device\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_6414D8;
  exception[2] = 1852797029;
}

uint64_t sub_360118()
{
  return 0;
}

unint64_t sub_360120(_DWORD *a1, unint64_t *a2, unsigned int *a3, double a4)
{
  if (!dword_65D2F0)
  {
    dword_65D2F0 = 12000;
    dword_65D2F4 = 7200;
    byte_65D2F8 = 1;
  }
  LODWORD(a4) = a1[122];
  unint64_t v6 = (unint64_t)((double)*(unint64_t *)&a4
                        / (*(double (**)(_DWORD *))(*(void *)a1 + 640))(a1)
                        * 24000000.0);
  *a2 = v6;
  unint64_t result = __udivti3();
  if (byte_65D2F8) {
    unsigned int v8 = 2400;
  }
  else {
    unsigned int v8 = 0;
  }
  *a3 = v8;
  if (result >= 0x16E360)
  {
    if (result > 0x43CF5F) {
      goto LABEL_11;
    }
    __int16 v9 = &dword_65D2F4;
  }
  else
  {
    __int16 v9 = &dword_65D2F0;
  }
  unsigned int v8 = *v9;
  *a3 = v8;
LABEL_11:
  if (result < v8) {
    *a3 = v6;
  }
  return result;
}

uint64_t sub_360240(_DWORD *a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 456))(a1);
  if ((result & 1) == 0)
  {
    __int16 v5 = (os_log_t *)sub_32A48(13);
    unint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      __int16 v9 = "HP_Device.cpp";
      __int16 v10 = 1024;
      int v11 = 1664;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"buffer size isn't valid\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (a1[122] != a2) {
    operator new();
  }
  return result;
}

void sub_360434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_360478(_DWORD *a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 456))(a1);
  if ((result & 1) == 0)
  {
    __int16 v5 = (os_log_t *)sub_32A48(13);
    unint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      __int16 v9 = "HP_Device.cpp";
      __int16 v10 = 1024;
      int v11 = 1655;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"buffer size isn't valid\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (a1[122] != a2) {
    operator new();
  }
  return result;
}

void sub_360670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3606B4()
{
  return 0;
}

unsigned int sub_3606BC(_DWORD *a1)
{
  if (sub_360728(a1)) {
    return a1[122];
  }
  else {
    return vcvtpd_u64_f64((*(double (**)(_DWORD *))(*(void *)a1 + 632))(a1) * 0.25);
  }
}

BOOL sub_360728(void *a1)
{
  uint64_t v1 = a1[62];
  unint64_t v2 = a1[63] - v1;
  if ((v2 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    unint64_t v4 = (v2 >> 3);
    do
      int v5 = *(_DWORD *)(*(void *)(*(void *)(v1 + 8 * v3++) + 104) + 24);
    while (v5 == 1819304813 && v3 < v4);
    if (v5 != 1819304813) {
      return 1;
    }
  }
  uint64_t v7 = a1[65];
  unint64_t v8 = a1[66] - v7;
  if ((v8 & 0x7FFFFFFF8) == 0) {
    return 0;
  }
  unint64_t v9 = 0;
  unint64_t v10 = (v8 >> 3);
  do
    int v11 = *(_DWORD *)(*(void *)(*(void *)(v7 + 8 * v9++) + 104) + 24);
  while (v11 == 1819304813 && v9 < v10);
  return v11 != 1819304813;
}

unsigned int sub_3607C0(_DWORD *a1)
{
  if (sub_360728(a1)) {
    return a1[122];
  }
  else {
    return vcvtpd_u64_f64((*(double (**)(_DWORD *))(*(void *)a1 + 632))(a1) * 0.0003);
  }
}

BOOL sub_360830(uint64_t a1, unsigned int a2)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 464))(a1) <= a2
      && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 472))(a1) >= a2;
}

uint64_t sub_3608C8()
{
  return 0;
}

uint64_t sub_3608D0()
{
  return 0;
}

uint64_t *sub_3608D8(uint64_t a1)
{
  sub_36091C((uint64_t *)(a1 + 464), 0);

  return sub_360A8C((uint64_t *)(a1 + 472), 0);
}

uint64_t *sub_36091C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    unint64_t v3 = *(uint64_t **)(v2 + 8);
    if (v3 != *(uint64_t **)(v2 + 16))
    {
      do
      {
        sub_B259C(v2, *v3);
        sub_360D08(v3++, 0);
      }
      while (v3 != *(uint64_t **)(v2 + 16));
      unint64_t v4 = *(uint64_t **)(v2 + 8);
      if (v3 != v4)
      {
        do
          sub_360D08(--v3, 0);
        while (v3 != v4);
        unint64_t v3 = v4;
      }
    }
    *(void *)(v2 + 16) = v3;
    int v5 = *(void **)(v2 + 72);
    if (v5)
    {
      sub_B27F0(*(void *)v2, 1, *(unsigned int *)(v2 + 32), v5, (vm_address_t **)(v2 + 48), *(unsigned __int8 *)(v2 + 36));
      *(void *)(v2 + 72) = 0;
    }
    unint64_t v6 = *(void **)(v2 + 104);
    if (v6)
    {
      sub_B27F0(*(void *)v2, 0, *(unsigned int *)(v2 + 32), v6, (vm_address_t **)(v2 + 80), *(unsigned __int8 *)(v2 + 36));
      *(void *)(v2 + 104) = 0;
    }
    uint64_t v7 = *(void **)(v2 + 80);
    if (v7)
    {
      *(void *)(v2 + 88) = v7;
      operator delete(v7);
    }
    unint64_t v8 = *(void **)(v2 + 48);
    if (v8)
    {
      *(void *)(v2 + 56) = v8;
      operator delete(v8);
    }
    unint64_t v9 = *(uint64_t **)(v2 + 8);
    if (v9)
    {
      unint64_t v10 = *(uint64_t **)(v2 + 16);
      int v11 = *(void **)(v2 + 8);
      if (v10 != v9)
      {
        do
          sub_360D08(--v10, 0);
        while (v10 != v9);
        int v11 = *(void **)(v2 + 8);
      }
      *(void *)(v2 + 16) = v9;
      operator delete(v11);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_360A8C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    unint64_t v3 = *(uint64_t **)(v2 + 8);
    if (v3 != *(uint64_t **)(v2 + 16))
    {
      do
      {
        sub_B30C8(v2, *v3);
        sub_360BF0(v3++);
      }
      while (v3 != *(uint64_t **)(v2 + 16));
      unint64_t v4 = *(uint64_t **)(v2 + 8);
      if (v3 != v4)
      {
        do
          sub_360BF0(--v3);
        while (v3 != v4);
        unint64_t v3 = v4;
      }
    }
    *(void *)(v2 + 16) = v3;
    int v5 = *(void **)(v2 + 72);
    if (v5)
    {
      sub_B27F0(*(void *)v2, 1, *(unsigned int *)(v2 + 32), v5, (vm_address_t **)(v2 + 48), *(unsigned __int8 *)(v2 + 36));
      *(void *)(v2 + 72) = 0;
    }
    unint64_t v6 = *(void **)(v2 + 104);
    if (v6)
    {
      sub_B27F0(*(void *)v2, 0, *(unsigned int *)(v2 + 32), v6, (vm_address_t **)(v2 + 80), *(unsigned __int8 *)(v2 + 36));
      *(void *)(v2 + 104) = 0;
    }
    uint64_t v7 = *(void **)(v2 + 80);
    if (v7)
    {
      *(void *)(v2 + 88) = v7;
      operator delete(v7);
    }
    unint64_t v8 = *(void **)(v2 + 48);
    if (v8)
    {
      *(void *)(v2 + 56) = v8;
      operator delete(v8);
    }
    unint64_t v9 = *(uint64_t **)(v2 + 8);
    if (v9)
    {
      unint64_t v10 = *(uint64_t **)(v2 + 16);
      int v11 = *(void **)(v2 + 8);
      if (v10 != v9)
      {
        do
          sub_360BF0(--v10);
        while (v10 != v9);
        int v11 = *(void **)(v2 + 8);
      }
      *(void *)(v2 + 16) = v9;
      operator delete(v11);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_360BF0(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_360C40(result);
    operator delete();
  }
  return result;
}

uint64_t sub_360C40(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 176);
  sub_B27F0(*(void *)a1, 1, *(unsigned int *)(a1 + 48), *(void **)(a1 + 200), (vm_address_t **)(a1 + 176), *(unsigned __int8 *)(a1 + 53));
  *(void *)(a1 + 200) = 0;
  unint64_t v3 = (void **)(a1 + 208);
  sub_B27F0(*(void *)a1, 0, *(unsigned int *)(a1 + 48), *(void **)(a1 + 232), (vm_address_t **)(a1 + 208), *(unsigned __int8 *)(a1 + 53));
  *(void *)(a1 + 232) = 0;
  unint64_t v4 = *(NSObject **)(a1 + 32);
  if (v4) {
    dispatch_release(v4);
  }
  int v5 = *(const void **)(a1 + 40);
  if (v5) {
    _Block_release(v5);
  }
  unint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(a1 + 216) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(a1 + 184) = v7;
    operator delete(v7);
  }
  unint64_t v8 = *(void **)(a1 + 152);
  if (v8) {
    operator delete(v8);
  }
  unint64_t v9 = *(void **)(a1 + 128);
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_360D08(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_360D58(result);
    operator delete();
  }
  return result;
}

uint64_t sub_360D58(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 176);
  sub_B27F0(*(void *)a1, 1, *(unsigned int *)(a1 + 48), *(void **)(a1 + 200), (vm_address_t **)(a1 + 176), *(unsigned __int8 *)(a1 + 53));
  *(void *)(a1 + 200) = 0;
  unint64_t v3 = (void **)(a1 + 208);
  sub_B27F0(*(void *)a1, 0, *(unsigned int *)(a1 + 48), *(void **)(a1 + 232), (vm_address_t **)(a1 + 208), *(unsigned __int8 *)(a1 + 53));
  *(void *)(a1 + 232) = 0;
  unint64_t v4 = *(NSObject **)(a1 + 32);
  if (v4) {
    dispatch_release(v4);
  }
  int v5 = *(const void **)(a1 + 40);
  if (v5) {
    _Block_release(v5);
  }
  unint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(a1 + 216) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v2;
  if (*v2)
  {
    *(void *)(a1 + 184) = v7;
    operator delete(v7);
  }
  unint64_t v8 = *(void **)(a1 + 152);
  if (v8) {
    operator delete(v8);
  }
  unint64_t v9 = *(void **)(a1 + 128);
  if (v9) {
    operator delete(v9);
  }
  return a1;
}

uint64_t sub_360E20(uint64_t result)
{
  if (!*(void *)(result + 464)) {
    operator new();
  }
  if (!*(void *)(result + 472)) {
    operator new();
  }
  return result;
}

void sub_360F20(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v5 = *(void *)(a1 + 464);
  for (uint64_t i = *(void *)(v5 + 8); i != *(void *)(v5 + 16); i += 8)
  {
    if (*(void *)i == a2)
    {
      if (a2)
      {
LABEL_7:
        sub_CB59C(*(void *)(a1 + 464), a2, a3, a4, a5);
        return;
      }
      break;
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      goto LABEL_7;
    }
  }
  uint64_t v7 = *(void *)(a1 + 472);
  for (uint64_t j = *(void *)(v7 + 8); j != *(void *)(v7 + 16); j += 8)
  {
    if (*(void *)j == a2)
    {
      if (!a2) {
        return;
      }
LABEL_14:
      sub_360F98(v7, a2, a3, a4, a5);
      return;
    }
    if (*(void *)(*(void *)j + 8) == a2) {
      goto LABEL_14;
    }
  }
}

void sub_360F98(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v6 = *(uint64_t **)(a1 + 16);
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v9 = *v5;
      if (*v5 == a2) {
        break;
      }
      if (*(void *)(v9 + 8) == a2) {
        goto LABEL_7;
      }
      if (++v5 == v6) {
        return;
      }
    }
    uint64_t v9 = a2;
    if (!a2) {
      return;
    }
LABEL_7:
    uint64_t v10 = *(void *)v9;
    if (a3) {
      uint64_t v11 = v9 + 128;
    }
    else {
      uint64_t v11 = v9 + 152;
    }
    *(void *)(v11 + 8) = 0;
    uint64_t v12 = 528;
    if (a3) {
      uint64_t v12 = 504;
    }
    uint64_t v13 = 520;
    if (a3) {
      uint64_t v13 = 496;
    }
    uint64_t v14 = (*(void *)(v10 + v12) - *(void *)(v10 + v13)) >> 3;
    if (v14 >= a4) {
      uint64_t v15 = a4;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v15)
    {
      do
      {
        sub_B2EC0(v11, a5++);
        --v15;
      }
      while (v15);
    }
    if (*(unsigned char *)(v9 + 54))
    {
      sub_B3124(a1, v9);
      sub_B31D0((_DWORD **)a1);
    }
  }
}

void sub_3610A8(uint64_t a1, uint64_t a2)
{
  if (sub_361384(a1, a2)) {
    operator new();
  }
  uint64_t v2 = (os_log_t *)sub_32A48(13);
  unint64_t v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      unint64_t v6 = "HP_Device.cpp";
      __int16 v7 = 1024;
      int v8 = 1518;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"IOProc wasn't previously added\"", buf, 0x12u);
    }
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_6414D8;
  exception[2] = 1852797029;
}

void sub_361300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_361384(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 464);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  while (v3 != v4)
  {
    if (*(void *)v3 == a2)
    {
      if (a2) {
        return 1;
      }
      break;
    }
    if (*(void *)(*(void *)v3 + 8) == a2) {
      return 1;
    }
    v3 += 8;
  }
  uint64_t v6 = *(void *)(a1 + 472);
  __int16 v7 = *(uint64_t **)(v6 + 8);
  int v8 = *(uint64_t **)(v6 + 16);
  while (1)
  {
    if (v7 == v8)
    {
      uint64_t v9 = 0;
      return v9 != 0;
    }
    uint64_t v9 = *v7;
    if (*v7 == a2) {
      break;
    }
    if (*(void *)(v9 + 8) == a2) {
      return v9 != 0;
    }
    ++v7;
  }
  uint64_t v9 = a2;
  return v9 != 0;
}

void sub_361408(void *a1)
{
  uint64_t v2 = a1[58];
  int v3 = *(_DWORD *)(v2 + 112);
  int v4 = *(_DWORD *)(v2 + 116);
  if (v3)
  {
    sub_3615B0(v2);
    if (!v4) {
      goto LABEL_7;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_8;
    }
    sub_3615B0(v2);
  }
  (*(void (**)(void *, uint64_t))(*a1 + 576))(a1, 1);
  if (v3) {
LABEL_7:
  }
    (*(void (**)(void *, void))(*a1 + 576))(a1, 0);
LABEL_8:
  uint64_t v5 = a1[59];
  if (*(_DWORD *)(v5 + 112) || *(_DWORD *)(v5 + 116))
  {
    __int16 v7 = *(uint64_t **)(v5 + 8);
    uint64_t v6 = *(uint64_t **)(v5 + 16);
    while (v7 != v6)
    {
      uint64_t v8 = *v7;
      if (*(unsigned char *)(*v7 + 54))
      {
        *(unsigned char *)(v8 + 54) = 0;
        --*(_DWORD *)(v5 + 112);
        sub_B3124(v5, v8);
        uint64_t v6 = *(uint64_t **)(v5 + 16);
      }
      ++v7;
    }
    sub_B31D0((_DWORD **)v5);
    *(_DWORD *)(v5 + 116) = 0;
    if (v4) {
      (*(void (**)(void *, uint64_t))(*a1 + 576))(a1, 1);
    }
    if (v3)
    {
      uint64_t v9 = *(void (**)(void *, void))(*a1 + 576);
      v9(a1, 0);
    }
  }
}

void sub_3615B0(uint64_t a1)
{
  int v3 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v4 = *v3;
    if (*(unsigned char *)(*v3 + 54))
    {
      *(unsigned char *)(v4 + 54) = 0;
      --*(_DWORD *)(a1 + 112);
      sub_B25F8(a1, v4);
      uint64_t v2 = *(uint64_t **)(a1 + 16);
    }
    ++v3;
  }
  sub_B26A4((_DWORD **)a1);
  *(_DWORD *)(a1 + 116) = 0;
}

void sub_361618()
{
}

void sub_3616E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_36171C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[59];
  for (uint64_t i = *(void *)(v4 + 8); i != *(void *)(v4 + 16); i += 8)
  {
    if (*(void *)i == a2)
    {
      if (a2)
      {
LABEL_7:
        sub_B242C(v4, a2);
        uint64_t v6 = a1[59];
        if (!*(_DWORD *)(v6 + 112) && !*(_DWORD *)(v6 + 116))
        {
          BOOL v7 = a2 == 0;
LABEL_30:
          uint64_t v14 = *(void (**)(void *, BOOL))(*a1 + 576);
          v14(a1, v7);
        }
        return;
      }
      break;
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      goto LABEL_7;
    }
  }
  uint64_t v8 = a1[58];
  for (uint64_t j = *(void *)(v8 + 8); ; j += 8)
  {
    if (j == *(void *)(v8 + 16))
    {
      uint64_t v10 = 0;
      goto LABEL_17;
    }
    if (*(void *)j == a2) {
      break;
    }
    if (*(void *)(*(void *)j + 8) == a2)
    {
      BOOL v11 = a2 == 0;
      goto LABEL_21;
    }
  }
  uint64_t v10 = a2;
LABEL_17:
  BOOL v11 = a2 == 0;
  if (a2 && !v10) {
    return;
  }
LABEL_21:
  sub_B254C(v8, a2);
  uint64_t v12 = a1[58];
  if (v11 && !*(_DWORD *)(v12 + 116))
  {
    BOOL v7 = 1;
    goto LABEL_30;
  }
  if (*(_DWORD *)(v12 + 112)) {
    char v13 = 1;
  }
  else {
    char v13 = v11;
  }
  if ((v13 & 1) == 0)
  {
    BOOL v7 = 0;
    goto LABEL_30;
  }
}

void sub_36187C(uint64_t a1, uint64_t a2)
{
  if (!a2 || (sub_361384(a1, a2) & 1) != 0) {
    operator new();
  }
  uint64_t v2 = (os_log_t *)sub_32A48(13);
  int v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      uint64_t v6 = "HP_Device.cpp";
      __int16 v7 = 1024;
      int v8 = 1444;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"IOProc wasn't previously added\"", buf, 0x12u);
    }
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_6414D8;
  exception[2] = 1852797029;
}

void sub_361A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_361AA0(void *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v8 = a1[59];
  for (uint64_t i = *(void *)(v8 + 8); i != *(void *)(v8 + 16); i += 8)
  {
    if (*(void *)i == a2)
    {
      if (a2)
      {
LABEL_7:
        sub_B235C(v8, a2, a3, a4);
        if (*(_DWORD *)(a1[59] + 112) == 1) {
          (*(void (**)(void *, long long *, uint64_t, BOOL))(*a1 + 568))(a1, a3, a4, a2 == 0);
        }
        return;
      }
      break;
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      goto LABEL_7;
    }
  }
  uint64_t v10 = a1[58];
  for (uint64_t j = *(void *)(v10 + 8); ; j += 8)
  {
    if (j == *(void *)(v10 + 16))
    {
      uint64_t v12 = 0;
      goto LABEL_16;
    }
    if (*(void *)j == a2) {
      break;
    }
    if (*(void *)(*(void *)j + 8) == a2)
    {
      BOOL v13 = a2 == 0;
      goto LABEL_20;
    }
  }
  uint64_t v12 = a2;
LABEL_16:
  BOOL v13 = a2 == 0;
  if (a2 && !v12) {
    return;
  }
LABEL_20:
  sub_B247C(v10, a2, a3, a4);
  if (*(_DWORD *)(a1[58] + 112) == 1) {
    (*(void (**)(void *, long long *, uint64_t, BOOL))(*a1 + 568))(a1, a3, a4, v13);
  }
}

void sub_361C5C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    uint64_t v12 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v13 = v12[2];
      __cxa_end_catch();
      if (!v13) {
        JUMPOUT(0x361C28);
      }
    }
    else
    {
      int v13 = 2003329396;
      __cxa_end_catch();
    }
    sub_B242C(*(void *)(v10 + 472), v9);
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "HP_Device.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 1407;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theError) [error theError is an error]: \"error starting the io engine\"", (uint8_t *)&a9, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v13;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_361E40(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (sub_361384(a1, a2))
    {
      uint64_t v6 = 504;
      if ((a4 & 1) == 0) {
        uint64_t v6 = 528;
      }
      uint64_t v7 = 496;
      if ((a4 & 1) == 0) {
        uint64_t v7 = 520;
      }
      if (((*(void *)(a1 + v6) - *(void *)(a1 + v7)) & 0x7FFFFFFF8) != 0) {
        operator new();
      }
      int v13 = (os_log_t *)sub_32A48(13);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          int v17 = "HP_Device.cpp";
          __int16 v18 = 1024;
          int v19 = 1373;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Device doesn't have the given section\"", buf, 0x12u);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 1852797029;
    }
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    BOOL v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      int v17 = "HP_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 1372;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"IOProc wasn't previously added\"", buf, 0x12u);
    }
    uint64_t v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v12 = &off_6414D8;
    _OWORD v12[2] = 1852797029;
  }
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)a1 + 344);

  return v8();
}

void sub_362194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_3621D8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[59];
  for (uint64_t i = *(void *)(v4 + 8); ; i += 8)
  {
    if (i == *(void *)(v4 + 16)) {
      goto LABEL_10;
    }
    if (*(void *)i == a2) {
      break;
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      goto LABEL_7;
    }
  }
  if (!a2)
  {
LABEL_10:
    uint64_t v9 = a1[58];
    for (uint64_t j = *(void *)(v9 + 8); ; j += 8)
    {
      if (j == *(void *)(v9 + 16))
      {
        uint64_t v11 = 0;
        goto LABEL_17;
      }
      if (*(void *)j == a2) {
        break;
      }
      if (*(void *)(*(void *)j + 8) == a2)
      {
        BOOL v12 = a2 == 0;
        goto LABEL_21;
      }
    }
    uint64_t v11 = a2;
LABEL_17:
    BOOL v12 = a2 == 0;
    if (a2 && !v11) {
      return;
    }
LABEL_21:
    sub_55770(v9, a2);
    uint64_t v13 = a1[58];
    int v14 = *(_DWORD *)(v13 + 112);
    if (v14 == 1)
    {
      int v15 = 0;
    }
    else
    {
      if (v14) {
        return;
      }
      int v15 = 1;
    }
    if (*(_DWORD *)(v13 + 116) == v15) {
      (*(void (**)(void *, BOOL))(*a1 + 560))(a1, v12);
    }
    return;
  }
LABEL_7:
  sub_B3830(v4, a2);
  uint64_t v6 = a1[59];
  int v7 = *(_DWORD *)(v6 + 112);
  if (v7 == 1)
  {
    int v8 = 0;
  }
  else
  {
    if (v7) {
      return;
    }
    int v8 = 1;
  }
  if (*(_DWORD *)(v6 + 116) == v8) {
    (*(void (**)(void *, BOOL))(*a1 + 560))(a1, a2 == 0);
  }
}

void sub_36239C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    BOOL v12 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v13 = v12[2];
      __cxa_end_catch();
      if (!v13) {
        JUMPOUT(0x36236CLL);
      }
    }
    else
    {
      int v13 = 2003329396;
      __cxa_end_catch();
    }
    sub_B242C(*(void *)(v10 + 472), v9);
    int v14 = (os_log_t *)sub_32A48(13);
    int v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "HP_Device.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 1331;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theError) [error theError is an error]: \"error starting the io engine\"", (uint8_t *)&a9, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v13;
  }
  _Unwind_Resume(a1);
}

void sub_362580(void *a1, uint64_t a2)
{
  (*(void (**)(void *))(*a1 + 384))(a1);
  uint64_t v4 = a1[58];
  for (uint64_t i = *(uint64_t **)(v4 + 8); i != *(uint64_t **)(v4 + 16); ++i)
  {
    uint64_t v6 = *i;
    if (*i == a2)
    {
      uint64_t v6 = a2;
LABEL_7:
      sub_B259C(v4, v6);
      int v7 = i + 1;
      int v8 = *(uint64_t **)(v4 + 16);
      if (i + 1 != v8)
      {
        do
        {
          uint64_t i = v7;
          uint64_t v9 = v7 - 1;
          uint64_t v10 = *v7;
          *v7++ = 0;
          sub_360D08(v9, v10);
        }
        while (v7 != v8);
        int v7 = *(uint64_t **)(v4 + 16);
      }
      while (v7 != i)
        sub_360D08(--v7, 0);
      *(void *)(v4 + 16) = i;
      return;
    }
    if (*(void *)(v6 + 8) == a2) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_362664(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 472);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  while (v3 != v4)
  {
    if (*(void *)v3 == a2)
    {
      if (a2)
      {
LABEL_15:
        int v8 = (os_log_t *)sub_32A48(13);
        uint64_t v9 = *v8;
        if (*v8)
        {
          if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            BOOL v12 = "HP_Device.cpp";
            __int16 v13 = 1024;
            int v14 = 1281;
            _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"IOProc was present in the clocked IO proc list; Do_RemoveIOProc is not supported for clocked IO procs\"",
              buf,
              0x12u);
          }
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = 1852797029;
      }
      break;
    }
    if (*(void *)(*(void *)v3 + 8) == a2) {
      goto LABEL_15;
    }
    v3 += 8;
  }
  uint64_t v5 = *(void *)(result + 464);
  uint64_t v6 = *(void *)(v5 + 8);
  uint64_t v7 = *(void *)(v5 + 16);
  while (v6 != v7)
  {
    if (*(void *)v6 == a2)
    {
      if (a2) {
LABEL_13:
      }
        operator new();
      return result;
    }
    if (*(void *)(*(void *)v6 + 8) == a2) {
      goto LABEL_13;
    }
    v6 += 8;
  }
  return result;
}

void sub_362884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_3628C8()
{
}

void sub_3628D4()
{
}

void sub_362AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_362AC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_360D08((uint64_t *)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_362B18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 464);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  while (v3 != v4)
  {
    if (*(void *)(*(void *)v3 + 8) == a2)
    {
      uint64_t v5 = (os_log_t *)sub_32A48(13);
      uint64_t v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          uint64_t v9 = "HP_Device.cpp";
          __int16 v10 = 1024;
          int v11 = 1269;
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"IOProc was already added\"", buf, 0x12u);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 1852797029;
    }
    v3 += 8;
  }
  operator new();
}

void sub_362D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_362D48(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_361384(a1, a2);
  if (result) {
    operator new();
  }
  return result;
}

void sub_362E20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_362E5C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[58];
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 16);
  while (v5 != v6)
  {
    if (*(void *)(*(void *)v5 + 40) == a3 && *(void *)(*(void *)v5 + 32) == a2)
    {
      int v8 = (os_log_t *)sub_32A48(13);
      uint64_t v9 = *v8;
      if (*v8)
      {
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "HP_Device.cpp";
          __int16 v16 = 1024;
          int v17 = 1218;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"An IOProc ID has already been created for the given IOBlock\"", (uint8_t *)buf, 0x12u);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 1852797029;
    }
    v5 += 8;
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 256))(a1))
  {
    int v11 = (os_log_t *)sub_32A48(13);
    BOOL v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "HP_Device.cpp";
      __int16 v16 = 1024;
      int v17 = 1251;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Can't create the IOProc ID in the current thread context\"", (uint8_t *)buf, 0x12u);
    }
    __int16 v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v13 = &off_6414D8;
    v13[2] = 1852797029;
  }
  uint64_t v14 = 0;
  if ((*(unsigned int (**)(void *, void, uint64_t *))(*a1 + 264))(a1, 0, &v14)) {
    operator new();
  }
  return 0;
}

void sub_3633D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, std::exception a15, int a16)
{
  if (a2)
  {
    __int16 v18 = (void *)v16[26];
    if (v18)
    {
      v16[27] = v18;
      operator delete(v18);
    }
    int v19 = (void *)v16[22];
    if (v19)
    {
      v16[23] = v19;
      operator delete(v19);
    }
    int v20 = (void *)v16[19];
    if (v20) {
      operator delete(v20);
    }
    if (*v17) {
      operator delete(*v17);
    }
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3634DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[59];
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *(void *)(*(void *)v5 + 8);
    BOOL v8 = v7 == a2;
    if (*(unsigned char *)(*(void *)v5 + 24))
    {
      if (v7 != a2) {
        goto LABEL_7;
      }
      BOOL v8 = *(void *)(*(void *)v5 + 16) == a3;
    }
    if (v8)
    {
      __int16 v10 = (os_log_t *)sub_32A48(13);
      int v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          __int16 v18 = "HP_Device.cpp";
          __int16 v19 = 1024;
          int v20 = 1174;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"An IOProc ID has already been created for the given IOProc\"", buf, 0x12u);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 1852797029;
    }
LABEL_7:
    v5 += 8;
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 256))(a1))
  {
    __int16 v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      __int16 v18 = "HP_Device.cpp";
      __int16 v19 = 1024;
      int v20 = 1207;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Can't create the IOProc ID in the current thread context\"", buf, 0x12u);
    }
    int v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v15 = &off_6414D8;
    v15[2] = 1852797029;
  }
  uint64_t v16 = 0;
  if ((*(unsigned int (**)(void *, void, uint64_t *))(*a1 + 264))(a1, 0, &v16)) {
    operator new();
  }
  return 0;
}

void sub_363A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, std::exception a15, int a16)
{
  if (a2)
  {
    if (a2 == 2)
    {
      exception_ptr = __cxa_get_exception_ptr(exception_object);
      a15.__vftable = (std::exception_vtbl *)&off_6414D8;
      a16 = exception_ptr[2];
      __cxa_begin_catch(exception_object);
      std::exception::~exception(&a15);
    }
    else
    {
      __cxa_begin_catch(exception_object);
    }
    __cxa_end_catch();
    JUMPOUT(0x363764);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_363AF4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[58];
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *(void *)(*(void *)v5 + 8);
    BOOL v8 = v7 == a2;
    if (*(unsigned char *)(*(void *)v5 + 24))
    {
      if (v7 != a2) {
        goto LABEL_7;
      }
      BOOL v8 = *(void *)(*(void *)v5 + 16) == a3;
    }
    if (v8)
    {
      __int16 v10 = (os_log_t *)sub_32A48(13);
      int v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          __int16 v18 = "HP_Device.cpp";
          __int16 v19 = 1024;
          int v20 = 1132;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"An IOProc ID has already been created for the given IOProc\"", buf, 0x12u);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 1852797029;
    }
LABEL_7:
    v5 += 8;
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 256))(a1))
  {
    __int16 v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      __int16 v18 = "HP_Device.cpp";
      __int16 v19 = 1024;
      int v20 = 1165;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Can't create the IOProc ID in the current thread context.\"", buf, 0x12u);
    }
    int v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v15 = &off_6414D8;
    v15[2] = 1852797029;
  }
  uint64_t v16 = 0;
  if ((*(unsigned int (**)(void *, void, uint64_t *))(*a1 + 264))(a1, 0, &v16)) {
    sub_3628D4();
  }
  return 0;
}

void sub_363ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::exception a13, int a14)
{
  if (a2)
  {
    if (a2 == 2)
    {
      exception_ptr = __cxa_get_exception_ptr(exception_object);
      a13.__vftable = (std::exception_vtbl *)&off_6414D8;
      a14 = exception_ptr[2];
      __cxa_begin_catch(exception_object);
      std::exception::~exception(&a13);
    }
    else
    {
      __cxa_begin_catch(exception_object);
    }
    __cxa_end_catch();
    JUMPOUT(0x363BF4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_363F58()
{
  return 1;
}

uint64_t sub_363F60()
{
  return 1;
}

void *sub_363F68(uint64_t a1)
{
  return sub_363F70((void *)(a1 + 440));
}

void *sub_363F70(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void *sub_363FDC(void *result)
{
  uint64_t v1 = (void *)result[56];
  if (v1 != (void *)result[55])
  {
    uint64_t v2 = result;
    do
    {
      uint64_t v5 = 0;
      if ((*(unsigned int (**)(void *, void, uint64_t *))(*v2 + 264))(v2, *(v1 - 1), &v5))
      {
        (*(void (**)(void, void *))(*(void *)*(v1 - 1) + 16))(*(v1 - 1), v2);
        (*(void (**)(void *, uint64_t))(*v2 + 272))(v2, v5);
      }
      uint64_t v3 = v2[56];
      uint64_t v4 = *(void **)(v3 - 8);
      uint64_t v1 = (void *)(v3 - 8);
      uint64_t result = v4;
      void *v1 = 0;
      if (v4) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      v2[56] = v1;
    }
    while (v1 != (void *)v2[55]);
  }
  return result;
}

uint64_t sub_364104(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_364180(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 424) + 72))();
}

uint64_t sub_3641A8(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3 = result + 496;
  uint64_t v4 = 520;
  if (a2) {
    uint64_t v4 = 496;
  }
  else {
    uint64_t v3 = result + 520;
  }
  uint64_t v5 = *(uint64_t **)(result + v4);
  uint64_t v6 = *(uint64_t **)(v3 + 8);
  if (v5 == v6)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    do
    {
      uint64_t v8 = *v5++;
      uint64_t v7 = (*(_DWORD *)(*(void *)(v8 + 104) + 44) + v7);
    }
    while (v5 != v6);
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 8) = v7;
    if (v7)
    {
      uint64_t v9 = (void *)(a3 + 16);
      do
      {
        *((_DWORD *)v9 - 1) = -1;
        *uint64_t v9 = 0;
        v9[1] = 0;
        uint64_t v9 = (void *)((char *)v9 + 20);
        --v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_364228()
{
  return 0;
}

BOOL sub_364230(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 192))(a1) == 1970496032;
}

uint64_t sub_364278()
{
  return 0;
}

uint64_t sub_364280()
{
  return 0;
}

uint64_t sub_364288()
{
  return 0;
}

CFTypeRef sub_364290()
{
  return CFRetain(@"com.apple.audio.AudioMIDISetup");
}

uint64_t sub_36429C()
{
  return 0;
}

uint64_t sub_3642A4()
{
  return 0;
}

uint64_t sub_3642AC()
{
  return 0;
}

uint64_t sub_3642B4()
{
  return 0;
}

uint64_t sub_3642BC()
{
  return 0;
}

uint64_t sub_3642C4()
{
  return 0;
}

uint64_t sub_3642CC()
{
  return 0;
}

uint64_t sub_3642D4()
{
  return 1;
}

uint64_t sub_3642DC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int a5, unsigned int *a6)
{
  int v9 = *a2;
  if (*a2 > 1869180522)
  {
    if (v9 == 1869180523)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      if (result != a5)
      {
        uint64_t v31 = (os_log_t *)sub_32A48(13);
        char v32 = *v31;
        if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          uint64_t v37 = "HP_Device.cpp";
          __int16 v38 = 1024;
          int v39 = 1012;
          _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyHogMode\"", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = 561211770;
      }
    }
    else
    {
      if (v9 != 1937077093)
      {
LABEL_15:
        return sub_3A60D0(a1, a2, a3, a4, a5, (uint64_t)a6);
      }
      int v14 = a2[1];
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) != a5)
      {
        int v25 = (os_log_t *)sub_32A48(13);
        int v26 = *v25;
        if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioTimeStamp buf = 136315394;
          uint64_t v37 = "HP_Device.cpp";
          __int16 v38 = 1024;
          int v39 = 1024;
          _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyIOProcStreamUsage\"", buf, 0x12u);
        }
        int v27 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v27 = &off_6414D8;
        _OWORD v27[2] = 561211770;
      }
      uint64_t v15 = *(void *)a6;
      uint64_t v16 = a6[2];
      int v17 = *(uint64_t (**)(uint64_t, uint64_t, BOOL, uint64_t, unsigned int *))(*(void *)a1 + 408);
      return v17(a1, v15, v14 == 1768845428, v16, a6 + 3);
    }
  }
  else
  {
    if (v9 != 1718839674)
    {
      if (v9 == 1735354734)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) != a5)
        {
          int v22 = (os_log_t *)sub_32A48(13);
          int v23 = *v22;
          if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioTimeStamp buf = 136315394;
            uint64_t v37 = "HP_Device.cpp";
            __int16 v38 = 1024;
            int v39 = 1000;
            _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyDeviceIsRunning\"", buf, 0x12u);
          }
          int v24 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v24 = &off_6414D8;
          void v24[2] = 561211770;
        }
        uint64_t v10 = *(void *)a1;
        if (*a6)
        {
          int v11 = *(uint64_t (**)(uint64_t, void))(v10 + 344);
          uint64_t v12 = a1;
        }
        else
        {
          int v11 = *(uint64_t (**)(uint64_t, void))(v10 + 376);
          uint64_t v12 = a1;
        }
        return v11(v12, 0);
      }
      goto LABEL_15;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 48))(a1) != a5)
    {
      char v28 = (os_log_t *)sub_32A48(13);
      uint64_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        uint64_t v37 = "HP_Device.cpp";
        __int16 v38 = 1024;
        int v39 = 1017;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyBufferFrameSize\"", buf, 0x12u);
      }
      uint64_t v30 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v30 = &off_6414D8;
      v30[2] = 561211770;
    }
    __int16 v18 = (os_log_t *)sub_32A48(5);
    __int16 v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *a6;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96))(__p, a1);
      BOOL v21 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315906;
      uint64_t v37 = "HP_Device.cpp";
      __int16 v38 = 1024;
      int v39 = 1018;
      __int16 v40 = 1024;
      int v41 = v20;
      __int16 v42 = 2080;
      int v43 = v21;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Client request to set buffer frame size to %u on VAD: '%s'.", buf, 0x22u);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 488))(a1, *a6);
  }
  return result;
}

void sub_364A0C(void **a1, void **a2, void *a3, int a4, unsigned int a5, uint64_t a6)
{
  while (a1 != a2)
  {
    uint64_t v6 = *a1;
    if (*a1 == a3)
    {
      uint64_t v6 = a3;
      if (!a3) {
        return;
      }
LABEL_6:
      uint64_t v7 = 19;
      if (a4)
      {
        uint64_t v7 = 16;
        uint64_t v8 = v6 + 16;
      }
      else
      {
        uint64_t v8 = v6 + 19;
      }
      uint64_t v9 = 528;
      if (a4) {
        uint64_t v9 = 504;
      }
      uint64_t v10 = 520;
      if (a4) {
        uint64_t v10 = 496;
      }
      uint64_t v11 = (*(void *)(*v6 + v9) - *(void *)(*v6 + v10)) >> 3;
      if (v11 >= a5) {
        uint64_t v12 = a5;
      }
      else {
        uint64_t v12 = v11;
      }
      if (v12)
      {
        unint64_t v13 = 0;
        unint64_t v14 = v8[1];
        do
        {
          if (v14 <= v13) {
            LOBYTE(v15) = 1;
          }
          else {
            uint64_t v15 = (*(void *)(v6[v7] + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1;
          }
          *(unsigned char *)(a6 + v13++) = v15;
        }
        while (v12 != v13);
      }
      if (v11 < a5) {
        bzero((void *)(a6 + v12), ~v12 + a5 + 1);
      }
      return;
    }
    if ((void *)v6[1] == a3) {
      goto LABEL_6;
    }
    ++a1;
  }
}

uint64_t sub_364AF0(uint64_t a1, int *a2)
{
  uint64_t result = 0;
  int v4 = *a2;
  if (*a2 > 1818455661)
  {
    if (v4 <= 1870030193)
    {
      if (v4 <= 1819173228)
      {
        BOOL v7 = v4 == 1818455662 || v4 == 1818850926;
        int v8 = 1819107691;
        goto LABEL_34;
      }
      if (v4 <= 1836411235)
      {
        if (v4 == 1819173229) {
          return result;
        }
        int v6 = 1819569763;
        goto LABEL_54;
      }
      if (v4 == 1836411236) {
        return result;
      }
      int v5 = 1869180523;
    }
    else
    {
      if (v4 <= 1937009954)
      {
        if (v4 > 1936092275)
        {
          if (v4 == 1936092276) {
            return result;
          }
          int v6 = 1936482681;
        }
        else
        {
          if (v4 == 1870030194) {
            return result;
          }
          int v6 = 1935763060;
        }
        goto LABEL_54;
      }
      if (v4 > 1953653101)
      {
        if (v4 == 1953653102) {
          return result;
        }
        int v6 = 1969841184;
LABEL_54:
        if (v4 == v6) {
          return result;
        }
        return sub_3A6BA8(a1, a2);
      }
      if (v4 == 1937009955) {
        return result;
      }
      int v5 = 1937077093;
    }
LABEL_48:
    if (v4 == v5) {
      return 1;
    }
    return sub_3A6BA8(a1, a2);
  }
  if (v4 <= 1718843938)
  {
    if (v4 > 1668049763)
    {
      if (v4 <= 1684629093)
      {
        if (v4 == 1668049764) {
          return result;
        }
        int v6 = 1684434036;
        goto LABEL_54;
      }
      if (v4 == 1684629094) {
        return result;
      }
      int v5 = 1718839674;
      goto LABEL_48;
    }
    BOOL v7 = v4 == 1634429294 || v4 == 1634955892;
    int v8 = 1667330160;
LABEL_34:
    if (v7 || v4 == v8) {
      return result;
    }
    return sub_3A6BA8(a1, a2);
  }
  if (v4 > 1751737453)
  {
    if (v4 > 1818452845)
    {
      if (v4 == 1818452846) {
        return result;
      }
      int v6 = 1818454126;
    }
    else
    {
      if (v4 == 1751737454) {
        return result;
      }
      int v6 = 1768124270;
    }
    goto LABEL_54;
  }
  if (v4 > 1735356004)
  {
    if (v4 == 1735356005) {
      return result;
    }
    int v6 = 1751412337;
    goto LABEL_54;
  }
  if (v4 != 1718843939)
  {
    int v5 = 1735354734;
    goto LABEL_48;
  }
  return result;
}

uint64_t sub_364D84(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  uint64_t v16 = 0x676C6F626C6E616DLL;
  int v17 = 0;
  CFStringRef theString = 0;
  int v14 = 8;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, CFStringRef *))(*(void *)a1 + 56))(a1, &v16, 0, 0, &v14, &theString);
  buffer[0] = 0;
  if (theString)
  {
    CFIndex usedBufLen = 0;
    v19.length = CFStringGetLength(theString);
    v19.location = 0;
    CFStringGetBytes(theString, v19, 0x8000100u, 0, 0, buffer, 255, &usedBufLen);
    buffer[usedBufLen] = 0;
    CFRelease(theString);
  }
  uint64_t v3 = *(uint64_t **)(a1 + 496);
  int v4 = *(uint64_t **)(a1 + 504);
  if (v3 == v4)
  {
    int v5 = 0;
  }
  else
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = *v3++;
      v5 += *(_DWORD *)(*(void *)(v6 + 104) + 44);
    }
    while (v3 != v4);
  }
  BOOL v7 = *(uint64_t **)(a1 + 520);
  int v8 = *(uint64_t **)(a1 + 528);
  if (v7 == v8)
  {
    int v9 = 0;
  }
  else
  {
    int v9 = 0;
    do
    {
      uint64_t v10 = *v7++;
      v9 += *(_DWORD *)(*(void *)(v10 + 104) + 44);
    }
    while (v7 != v8);
  }
  uint64_t v11 = "Audio Device";
  if (v2 == 1633773415) {
    uint64_t v11 = "Aggregate Device";
  }
  return printf("AudioObjectID:\t\t\t0x%X\n\tClass:\t\t\t\t%s\n\tName:\t\t\t\t%s\n\tInput Channels:\t\t%u\n\tOutput Channels:\t%u\n", *(_DWORD *)(a1 + 8), v11, (const char *)buffer, v5, v9);
}

void sub_364F34(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x364E08);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_364F4C(uint64_t a1)
{
  return a1 + 336;
}

void sub_364F5C(void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    sub_363F70(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_364FB0(uint64_t a1)
{
  *(void *)a1 = off_635B00;
  sub_3A754C(a1, *(void *)(a1 + 432));
  uint64_t v2 = *(void *)(a1 + 432);
  *(void *)(a1 + 432) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_3A754C(a1, *(void *)(a1 + 424));
  uint64_t v3 = *(void *)(a1 + 424);
  *(void *)(a1 + 424) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 432))(a1);
  int v4 = *(void **)(a1 + 544);
  if (v4)
  {
    *(void *)(a1 + 552) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 520);
  if (v5)
  {
    *(void *)(a1 + 528) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 496);
  if (v6)
  {
    *(void *)(a1 + 504) = v6;
    operator delete(v6);
  }
  sub_360A8C((uint64_t *)(a1 + 472), 0);
  sub_36091C((uint64_t *)(a1 + 464), 0);
  uint64_t v10 = (void **)(a1 + 440);
  sub_364F5C(&v10);
  uint64_t v7 = *(void *)(a1 + 432);
  *(void *)(a1 + 432) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 424);
  *(void *)(a1 + 424) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_AEF0C(a1 + 336);

  return sub_3A6F14(a1);
}

uint64_t sub_365170(void *a1, int a2, unsigned int a3)
{
  switch(a2)
  {
    case 1735159650:
      if (a1[66] == a1[65])
      {
        if (a1[63] == a1[62]) {
          return 0;
        }
LABEL_4:
        uint64_t v3 = (uint64_t **)(a1 + 62);
        goto LABEL_7;
      }
      break;
    case 1869968496:
      break;
    case 1768845428:
      goto LABEL_4;
    default:
      return 0;
  }
  uint64_t v3 = (uint64_t **)(a1 + 65);
LABEL_7:
  int v4 = *v3;
  int v5 = v3[1];
  if (v4 == v5) {
    return 0;
  }
  do
  {
    uint64_t v6 = *v4;
    unsigned int v7 = *(_DWORD *)(*v4 + 96) + *(_DWORD *)(*v4 + 92) + *(_DWORD *)(*(void *)(*v4 + 104) + 44);
    v4 += v7 <= a3;
    if (v7 > a3) {
      uint64_t result = v6;
    }
    else {
      uint64_t result = 0;
    }
    if (result) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v4 == v5;
    }
  }
  while (!v9);
  return result;
}

char *sub_365214(char *result, uint64_t a2)
{
  uint64_t v2 = 496;
  if (*(unsigned char *)(a2 + 88))
  {
    uint64_t v3 = result + 496;
  }
  else
  {
    uint64_t v2 = 520;
    uint64_t v3 = result + 520;
  }
  int v4 = *(char **)&result[v2];
  int v5 = (char *)*((void *)v3 + 1);
  if (v4 != v5)
  {
    while (*(void *)v4 != a2)
    {
      v4 += 8;
      if (v4 == v5)
      {
        int v4 = (char *)*((void *)v3 + 1);
        break;
      }
    }
  }
  if (v4 != v5)
  {
    int64_t v6 = v5 - (v4 + 8);
    if (v5 != v4 + 8) {
      uint64_t result = (char *)memmove(v4, v4 + 8, v5 - (v4 + 8));
    }
    *((void *)v3 + 1) = &v4[v6];
  }
  return result;
}

void sub_3652AC()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)int64_t v6 = 0u;
  *(_OWORD *)unsigned int v7 = 0u;
  long long v8 = 0u;
  *(_DWORD *)BOOL v9 = 0;
  v9[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
  v9[5] = 1;
  *(void *)&v9[6] = 0;
  __int16 v10 = 0;
  int v11 = 16777473;
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v12 = v13;
  __int16 v14 = 0;
  char v15 = 0;
  int v16 = -1044381696;
  char v17 = 1;
  int v18 = -1044381696;
  char v19 = 1;
  int v20 = 0;
  char v21 = 1;
  int v22 = -1056964608;
  char v23 = 1;
  int v24 = -1033371648;
  char v25 = 1;
  int v26 = 0;
  char v27 = 1;
  int v28 = -1033371648;
  char v29 = 1;
  int v30 = 0;
  char v31 = 1;
  int v32 = -1044381696;
  char v33 = 1;
  int v34 = 0;
  char v35 = 1;
  int v36 = -1033371648;
  char v37 = 1;
  int v38 = 0;
  char v39 = 1;
  int v40 = -1033371648;
  char v41 = 1;
  int v42 = -1055916032;
  char v43 = 1;
  int v44 = -1033371648;
  char v45 = 1;
  int v46 = 0;
  char v47 = 1;
  int v48 = -1055916032;
  char v49 = 1;
  int v50 = -1033371648;
  char v51 = 1;
  int v52 = -1055916032;
  char v53 = 1;
  int v54 = -1033371648;
  char v55 = 1;
  int v56 = 0;
  char v57 = 1;
  int v58 = -1055916032;
  char v59 = 1;
  int v60 = -1043333120;
  char v61 = 1;
  int v62 = 0x40000000;
  char v63 = 1;
  int v64 = 16777472;
  int v65 = 0;
  char v66 = 1;
  int v67 = 0;
  char v68 = 1;
  int v69 = 1103626240;
  char v70 = 1;
  int v71 = 0;
  char v72 = 1;
  int v73 = 1094713344;
  char v74 = 1;
  int v75 = 1094713344;
  char v76 = 1;
  int v77 = 1094713344;
  char v78 = 1;
  int v79 = -1061158912;
  char v80 = 1;
  int v81 = 1107296256;
  char v82 = 1;
  int v83 = 1107296256;
  char v84 = 1;
  int v85 = 1092616192;
  char v86 = 1;
  int v87 = 0;
  char v88 = 1;
  int v89 = 0;
  char v90 = 1;
  int v91 = 16777472;
  v92[0] = 0;
  v92[72] = 0;
  v92[80] = 0;
  v92[120] = 0;
  v92[128] = 0;
  v92[200] = 0;
  v92[208] = 0;
  v92[248] = 0;
  LOBYTE(v93) = 0;
  char v94 = 0;
  LOBYTE(v95) = 0;
  char v96 = 0;
  LOBYTE(v97) = 0;
  char v98 = 0;
  LOBYTE(v99) = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  LOBYTE(v103) = 0;
  char v104 = 0;
  LOBYTE(v105) = 0;
  char v106 = 0;
  LOBYTE(v107) = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  LOBYTE(v113) = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 1;
  char v128 = 0;
  char v129 = 0;
  LOBYTE(v13sub_360D08(&a9, 0) = 0;
  char v131 = 0;
  LOBYTE(v132) = 0;
  char v133 = 0;
  LOBYTE(v134) = 0;
  char v135 = 0;
  LOBYTE(v136) = 0;
  char v137 = 0;
  __int16 v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  LOBYTE(v141) = 0;
  char v142 = 0;
  LOBYTE(v143) = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  LOBYTE(v149) = 0;
  char v150 = 0;
  LOBYTE(v151) = 0;
  char v152 = 0;
  LOBYTE(v153) = 0;
  char v154 = 0;
  LOBYTE(v155) = 0;
  char v156 = 0;
  char v157 = 0;
  char v158 = 0;
  char v159 = 0;
  char v160 = 0;
  LOBYTE(__p) = 0;
  char v163 = 0;
  v164.__r_.__value_.__s.__data_[0] = 0;
  char v165 = 0;
  v166.__r_.__value_.__s.__data_[0] = 0;
  char v167 = 0;
  v168.__r_.__value_.__s.__data_[0] = 0;
  char v169 = 0;
  int v170 = 256;
  char v171 = 0;
  char v172 = 0;
  char v173 = 0;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  __int16 v177 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 1;
  int v4 = 2;
  LODWORD(__src) = 1;
  sub_8732C((char *)v6, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x200000001;
  sub_8732C((char *)&v7[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  *(void *)BOOL v9 = 0x101010101000100;
  *(_WORD *)&v9[12] = 257;
  int v11 = 16843008;
  int v60 = -1047527424;
  char v61 = 1;
  int v69 = 1103101952;
  char v70 = 1;
  int v75 = 0;
  char v76 = 1;
  int v77 = 0;
  char v78 = 1;
  int v73 = 0;
  char v74 = 1;
  int v89 = 1090519040;
  char v90 = 1;
  int v79 = -1040187392;
  char v80 = 1;
  int v62 = 0;
  char v63 = 1;
  int v91 = 16843009;
  if (!v94) {
    char v94 = 1;
  }
  int v93 = 1836282987;
  if (!v96) {
    char v96 = 1;
  }
  int v95 = 2;
  if (!v98) {
    char v98 = 1;
  }
  int v97 = 2;
  if (!v100) {
    char v100 = 1;
  }
  int v99 = 4;
  if (!v140) {
    char v140 = 1;
  }
  int v139 = 2;
  if (!v144) {
    char v144 = 1;
  }
  int v143 = 2;
  if (!v142) {
    char v142 = 1;
  }
  int v141 = 2;
  int v103 = 36;
  char v104 = 1;
  int v105 = 36;
  char v106 = 1;
  int v107 = 36;
  char v108 = 1;
  int v113 = 36;
  char v114 = 1;
  int v130 = 41;
  char v131 = 1;
  int v132 = 3;
  char v133 = 1;
  int v134 = 25;
  char v135 = 1;
  int v136 = 41;
  char v137 = 1;
  __int16 v138 = 257;
  int v149 = 41;
  char v150 = 1;
  int v151 = 41;
  char v152 = 1;
  int v153 = 23;
  char v154 = 1;
  int v155 = 7;
  char v156 = 1;
  sub_208140(&__src, 83);
  if (v163)
  {
    if (SHIBYTE(v162) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v162 = v179;
  }
  else
  {
    long long __p = __src;
    uint64_t v162 = v179;
    char v163 = 1;
  }
  sub_87428(&v164, "_top_mic_general");
  sub_87428(&v166, "_top_mic_measurement");
  sub_87428(&v168, "_top_mic_hearing_accessibility");
  LOBYTE(v14) = 1;
  sub_402E04(&v0);
  sub_6C690((uint64_t)v92);
  sub_463E0(v13[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_36594C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_365970()
{
  int v0 = (void *)sub_F820C();
  CFStringRef v3 = CFStringCreateWithCString(0, "Speaker", 0x600u);
  char v4 = 1;
  uint64_t v1 = sub_F832C(v0, &v3);
  sub_72924((uint64_t)&v3);
  return v1;
}

void sub_3659D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_3659EC(uint64_t a1, uint64_t a2, int a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  double v6 = (*(double (**)(uint64_t))(*(void *)a2 + 104))(a2);
  std::to_string(&v22, v6);
  sub_21C8C(&__p, "sampleRate");
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unsigned int v7 = sub_365DE0(a1, (unsigned __int8 *)&__p, (long long **)&v21);
  long long v8 = (void **)(v7 + 40);
  if ((char)v7[63] < 0) {
    operator delete(*v8);
  }
  *(std::string *)long long v8 = v22;
  *((unsigned char *)&v22.__r_.__value_.__s + 23) = 0;
  v22.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 96))(a2, 1, 0);
  (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 112))(v9, &v22);
  std::to_string(&__p, v23);
  sub_21C8C(&v21, "numChannelsIn");
  v17[0] = &v21;
  __int16 v10 = sub_365DE0(a1, (unsigned __int8 *)&v21, (long long **)v17);
  int v11 = (void **)(v10 + 40);
  if ((char)v10[63] < 0) {
    operator delete(*v11);
  }
  *(std::string *)int v11 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::to_string(&__p, v23);
  sub_21C8C(&v21, "numChannelsOut");
  v17[0] = &v21;
  uint64_t v12 = sub_365DE0(a1, (unsigned __int8 *)&v21, (long long **)v17);
  unint64_t v13 = (void **)(v12 + 40);
  if ((char)v12[63] < 0) {
    operator delete(*v13);
  }
  *(std::string *)unint64_t v13 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (a3 == 1668049011)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 96))(a2, 0, 0);
    if (v14)
    {
      (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 112))(v14, &__p);
      std::to_string(&v21, __val);
      sub_21C8C(v17, "numChannelsTelemetry");
      int v24 = v17;
      char v15 = sub_365DE0(a1, (unsigned __int8 *)v17, (long long **)&v24);
      int v16 = (void **)(v15 + 40);
      if ((char)v15[63] < 0) {
        operator delete(*v16);
      }
      *(std::string *)int v16 = v21;
      *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
      v21.__r_.__value_.__s.__data_[0] = 0;
      if (v18 < 0)
      {
        operator delete(v17[0]);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_365D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  sub_63878(v29);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_365DE0(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  unint64_t v7 = sub_6789C((uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (sub_67CEC(i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  char v15 = (void *)(a1 + 16);
  int v16 = operator new(0x40uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v8;
  char v17 = *a3;
  long long v18 = **a3;
  v16[4] = *((void *)*a3 + 2);
  *((_OWORD *)v16 + 1) = v18;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)char v17 = 0;
  v16[6] = 0;
  v16[7] = 0;
  v16[5] = 0;
  char v41 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    else {
      int8x8_t prime = (int8x8_t)v22;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (*(void *)&prime <= v31) {
        int8x8_t prime = (int8x8_t)v31;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_60560();
          }
          char v25 = operator new(8 * *(void *)&prime);
          int v26 = *(void **)a1;
          *(void *)a1 = v25;
          if (v26) {
            operator delete(v26);
          }
          uint64_t v27 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v27++) = 0;
          while (*(void *)&prime != v27);
          int v28 = (void *)*v15;
          if (*v15)
          {
            unint64_t v29 = v28[1];
            uint8x8_t v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(void *)&prime) {
                v29 %= *(void *)&prime;
              }
            }
            else
            {
              v29 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v29) = v15;
            int v34 = (void *)*v28;
            if (*v28)
            {
              do
              {
                unint64_t v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(void *)&prime) {
                    v35 %= *(void *)&prime;
                  }
                }
                else
                {
                  v35 &= *(void *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v35))
                  {
                    *(void *)(*(void *)a1 + 8 * v35) = v28;
                    goto LABEL_55;
                  }
                  *int v28 = *v34;
                  *int v34 = **(void **)(*(void *)a1 + 8 * v35);
                  **(void **)(*(void *)a1 + 8 * v35) = v34;
                  int v34 = v28;
                }
                unint64_t v35 = v29;
LABEL_55:
                int v28 = v34;
                int v34 = (void *)*v34;
                unint64_t v29 = v35;
              }
              while (v34);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        char v39 = *(void **)a1;
        *(void *)a1 = 0;
        if (v39) {
          operator delete(v39);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  int v36 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
  uint64_t i = (unsigned __int8 *)v40[0];
  if (v36)
  {
    *(void *)v40[0] = *v36;
LABEL_72:
    *int v36 = i;
    goto LABEL_73;
  }
  *(void *)v40[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v3) = v15;
  if (*(void *)i)
  {
    unint64_t v37 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v37 >= v9) {
        v37 %= v9;
      }
    }
    else
    {
      v37 &= v9 - 1;
    }
    int v36 = (unsigned __int8 **)(*(void *)a1 + 8 * v37);
    goto LABEL_72;
  }
LABEL_73:
  v40[0] = 0;
  ++*(void *)(a1 + 24);
  sub_677AC((uint64_t)v40);
  return i;
}

void sub_366214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_677AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_366228(uint64_t a1, void **a2, int a3)
{
  uint64_t v6 = sub_365970();
  if (a3 == 1668049011)
  {
    unint64_t v7 = operator new(4uLL);
    *unint64_t v7 = 0;
    float v20 = v7 + 1;
    BOOL v21 = v7 + 1;
    float v19 = v7;
  }
  else
  {
    float v19 = 0;
    float v20 = 0;
    BOOL v21 = 0;
  }
  sub_D759C(&v18, *a2, a2[1]);
  unint64_t v8 = sub_D7428(*a2, a2[1]);
  sub_D7DC0(&v17, v8, 1635087216);
  unint64_t v9 = sub_D7428(*a2, a2[1]);
  sub_D7DC0(&v16, v9, 1886548848);
  sub_D7F40((CFArrayRef *)&cf, a2);
  uint64_t v10 = sub_365970();
  sub_3659EC((uint64_t)__p, v10, a3);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 4sub_360D08(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 12sub_360D08(&a9, 0) = 0u;
  *(_DWORD *)(a1 + 136) = 1065353216;
  *(_DWORD *)(a1 + 144) = 0;
  *(_WORD *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 156) = 0;
  CFTypeRef v11 = cf;
  *(void *)(a1 + 72) = cf;
  if (v11) {
    CFRetain(v11);
  }
  sub_63A58(a1, (uint64_t)&v19, &v18, &v17, &v16, (uint64_t)__p);
  sub_63D7C(a1);
  sub_639BC((void *)__p[2]);
  uint64_t v12 = __p[0];
  __p[0] = 0;
  if (v12) {
    operator delete(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v17) {
    CFRelease(v17);
  }
  if (v18) {
    CFRelease(v18);
  }
  if (v19)
  {
    float v20 = v19;
    operator delete(v19);
  }
  *(void *)(a1 + 16sub_360D08(&a9, 0) = a2;
  *(unsigned char *)(a1 + 168) = 1;
  *(void *)(a1 + 176) = 0;
  return a1;
}

void sub_366414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CFTypeRef cf, CFTypeRef a17, CFTypeRef a18, void *__p, uint64_t a20)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a17) {
    CFRelease(a17);
  }
  if (a18) {
    CFRelease(a18);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_366528(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  if (*(unsigned char *)(v1 + 168))
  {
    uint64_t v2 = *(void *)(v1 + 160);
    unint64_t v3 = *(void ****)v2;
    char v4 = *(void ****)(v2 + 8);
    if (*(void ****)v2 != v4)
    {
      char v5 = 0;
      do
      {
        uint64_t v6 = sub_D7374(**v3, 1634625388);
        if (v6) {
          char v5 = sub_384DA8((int *)v6 + 6);
        }
        v3 += 3;
      }
      while (v3 != v4);
      if (v5)
      {
        unint64_t v7 = *(std::__shared_weak_count **)(v1 + 8);
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v8 = *(void *)(v1 + 96);
        unint64_t v9 = *(void **)(v1 + 88);
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = *(void *)(v1 + 80);
          uint64_t v12 = ((uint64_t)v9 - v11) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            sub_60548();
          }
          uint64_t v14 = v8 - v11;
          if (v14 >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          v19[4] = v1 + 96;
          CFTypeRef v16 = (char *)sub_10724(v15);
          CFTypeRef v17 = &v16[16 * v12];
          v19[0] = v16;
          v19[1] = v17;
          v19[3] = &v16[16 * v18];
          *(void *)CFTypeRef v17 = 0;
          *((void *)v17 + 1) = 0;
          v19[2] = v17 + 16;
          sub_FBB48((uint64_t *)(v1 + 80), v19);
          uint64_t v10 = *(void **)(v1 + 88);
          sub_98E24((uint64_t)v19);
        }
        else
        {
          uint64_t v10 = v9 + 2;
          *unint64_t v9 = 0;
          v9[1] = 0;
        }
        *(void *)(v1 + 88) = v10;
        if (v7) {
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_366670(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_366688(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  if (*(_DWORD *)(a2 + 144) != 1886613611)
  {
    CFTypeRef v16 = (os_log_t *)sub_32A48(13);
    CFTypeRef v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioTimeStamp buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_Speaker_Aspen.cpp";
      __int16 v22 = 1024;
      int v23 = 555;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to get trim gains on non-speaker port\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to get trim gains on non-speaker port");
  }
  char v5 = 0;
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *(void *)AudioTimeStamp buf = 0x6F75747061747363;
  for (int i = 1; i != 5; ++i)
  {
    *(_DWORD *)&buf[8] = i;
    if (!(*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)a1 + 16))(a1, buf)) {
      break;
    }
    int v19 = 4;
    int v20 = 0;
    (*(void (**)(uint64_t, unsigned char *, void, void, int *, int *))(*(void *)a1 + 40))(a1, buf, 0, 0, &v19, &v20);
    if (v5 >= v7)
    {
      uint64_t v10 = (v5 - v6) >> 2;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62) {
        sub_60548();
      }
      if ((v7 - v6) >> 1 > v11) {
        unint64_t v11 = (v7 - v6) >> 1;
      }
      uint64_t v12 = (char *)((unint64_t)(v7 - v6) >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v11);
      if (v12) {
        uint64_t v12 = (char *)sub_46BF4((unint64_t)v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v12[4 * v10];
      *(_DWORD *)uint64_t v14 = v20;
      unint64_t v9 = v14 + 4;
      while (v5 != v6)
      {
        int v15 = *((_DWORD *)v5 - 1);
        v5 -= 4;
        *((_DWORD *)v14 - 1) = v15;
        v14 -= 4;
      }
      unint64_t v7 = &v12[4 * v13];
      *a3 = v14;
      a3[1] = v9;
      a3[2] = v7;
      if (v6) {
        operator delete(v6);
      }
      uint64_t v6 = v14;
    }
    else
    {
      *(_DWORD *)char v5 = v20;
      unint64_t v9 = v5 + 4;
    }
    a3[1] = v9;
    char v5 = v9;
  }
}

void sub_366910(_Unwind_Exception *exception_object)
{
}

uint64_t sub_36694C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886613618 && a2 != 1886613611)
  {
    char v4 = (os_log_t *)sub_32A48(17);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioTimeStamp buf = 136315650;
      uint64_t v14 = "Device_Speaker_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 546;
      __int16 v17 = 2080;
      uint64_t v18 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v7 = (os_log_t *)sub_32A48(13);
    unint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioTimeStamp buf = 136315394;
        uint64_t v14 = "Device_Speaker_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 547;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_366B10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_366B2C(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  sub_3CD68C();
  if (dword_65E388
    || ((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 312))(a1) & 0xFF00000000) != 0)
  {
    sub_3CD68C();
    if (!dword_65E388
      || ((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 312))(a1) & 0xFF00000000) == 0)
    {
      AudioObjectID v2 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120))(a1);
      outData[1] = 0.0;
      *(void *)&inAddress.AudioObjectPropertySelector mSelector = *(void *)"#bdvptuo";
      inAddress.AudioObjectPropertyElement mElement = 0;
      outData[0] = 0.0;
      if (AudioObjectHasProperty(v2, &inAddress))
      {
        ioDataSize[0] = 16;
        if (AudioObjectGetPropertyData(v2, &inAddress, 0, 0, ioDataSize, outData))
        {
          unint64_t v7 = (os_log_t *)sub_32A48(13);
          unint64_t v8 = *v7;
          if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
          {
            int buf = 136315394;
            buf_4 = "Device_Speaker_Aspen.cpp";
            __int16 buf_12 = 1024;
            int buf_14 = 465;
            _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not retrieve hardware volume range\"", (uint8_t *)&buf, 0x12u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Could not retrieve hardware volume range");
        }
        double v3 = outData[0];
        if (outData[0] < -58.0) {
          double v3 = -58.0;
        }
        outData[0] = v3;
      }
      uint64_t v13 = 0x676C6F626D757465;
      int v14 = 0;
      if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v13))
      {
        int buf = 1;
        (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, int *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                              + 48))(a1, &v13, 0, 0, 4, &buf);
      }
      operator new();
    }
    char v4 = (os_log_t *)sub_32A48(13);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      buf_4 = "Device_Speaker_Aspen.cpp";
      __int16 buf_12 = 1024;
      int buf_14 = 654;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"TapStream is disabled by policy but found\"", (uint8_t *)&buf, 0x12u);
    }
    uint64_t v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v6, "TapStream is disabled by policy but found");
  }
  uint64_t v10 = (os_log_t *)sub_32A48(13);
  unint64_t v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
  {
    int buf = 136315394;
    buf_4 = "Device_Speaker_Aspen.cpp";
    __int16 buf_12 = 1024;
    int buf_14 = 653;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"TapStream is enabled by policy but not found\"", (uint8_t *)&buf, 0x12u);
  }
  char v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(v12, "TapStream is enabled by policy but not found");
}

void sub_367AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  __cxa_free_exception(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_367CD0(uint64_t a1, unsigned int **a2)
{
  uint64_t v4 = sub_32A48(17);
  if (*(unsigned char *)(v4 + 8))
  {
    char v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        sub_82188(&__p, *a2, a2[1]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315650;
        uint64_t v10 = "Device_Speaker_Aspen.cpp";
        __int16 v11 = 1024;
        int v12 = 679;
        __int16 v13 = 2080;
        int v14 = p_p;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting output data sources: [%s]", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  return sub_367DF8(*(_DWORD *)(a1 + 268), (uint64_t)&qword_65D478, (uint64_t)a2);
}

uint64_t sub_367DF8(AudioObjectID a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(13);
  if (*(unsigned char *)(v6 + 8))
  {
    unint64_t v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        v114.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v114.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v115, (unsigned int *)&v114);
        unint64_t v8 = v115.__m_.__opaque[15] >= 0 ? &v115 : (std::mutex *)v115.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v105 = 1024;
        int v106 = 166;
        __int16 v107 = 2080;
        *(void *)char v108 = v8;
        *(_WORD *)&v108[8] = 1024;
        *(_DWORD *)&v108[10] = a1;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v115.__m_.__opaque[15] < 0) {
          operator delete((void *)v115.__m_.__sig);
        }
      }
    }
  }
  uint64_t v100 = *(void *)a2;
  int v9 = *(_DWORD *)(a2 + 8);
  AudioObjectID v99 = a1;
  int v101 = v9;
  int v102 = 0;
  uint64_t v103 = 0;
  sub_368B10((uint64_t)&v115, (uint64_t)&v99);
  if (*(_DWORD *)&v115.__m_.__opaque[16]) {
    goto LABEL_10;
  }
  char v96 = 0;
  int v97 = 0;
  uint64_t v98 = 0;
  sub_46B38(&v96, (const void *)v115.__m_.__sig, *(uint64_t *)v115.__m_.__opaque, (*(void *)v115.__m_.__opaque - v115.__m_.__sig) >> 2);
  int v93 = 0;
  char v94 = 0;
  uint64_t v95 = 0;
  sub_46B38(&v93, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  BOOL v21 = v96;
  __int16 v22 = v93;
  if (v97 - v96 != v94 - v93)
  {
    BOOL v23 = 0;
    if (!v93) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  BOOL v23 = memcmp(v96, v93, v97 - v96) == 0;
  if (v22)
  {
LABEL_35:
    char v94 = v22;
    operator delete(v22);
  }
LABEL_36:
  if (!v21)
  {
    if (v23) {
      goto LABEL_40;
    }
LABEL_10:
    uint64_t v10 = sub_32A48(13);
    if (*(unsigned char *)(v10 + 8))
    {
      __int16 v11 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          std::string __p = *(void **)a2;
          int v81 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v114, (unsigned int *)&__p);
          int v12 = v114.__cv_.__opaque[15] >= 0 ? &v114 : (std::condition_variable *)v114.__cv_.__sig;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v105 = 1024;
          int v106 = 199;
          __int16 v107 = 2080;
          *(void *)char v108 = v12;
          *(_WORD *)&v108[8] = 1024;
          *(_DWORD *)&v108[10] = a1;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v114.__cv_.__opaque[15] < 0) {
            operator delete((void *)v114.__cv_.__sig);
          }
        }
      }
    }
    AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
    uint64_t v13 = sub_86998(a1, &buf, *(void **)a3, *(void *)(a3 + 8));
    if (!v13)
    {
      LOBYTE(v15) = 1;
      goto LABEL_46;
    }
    int v14 = (os_log_t *)sub_32A48(13);
    __int16 v15 = *v14;
    if (!*v14) {
      goto LABEL_46;
    }
    if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      AudioObjectID v16 = a1;
      sub_2417C(&v114, v13);
      int v17 = v114.__cv_.__opaque[15];
      uint64_t sig = v114.__cv_.__sig;
      char v90 = *(void **)a2;
      LODWORD(v91) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v90);
      int v19 = &v114;
      if (v17 < 0) {
        int v19 = (std::condition_variable *)sig;
      }
      if (v82 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      buf.AudioObjectPropertySelector mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v105 = 1024;
      int v106 = 207;
      __int16 v107 = 1024;
      *(_DWORD *)char v108 = v13;
      *(_WORD *)&v108[4] = 2080;
      *(void *)&v108[6] = v19;
      *(_WORD *)&v108[14] = 2080;
      *(void *)&v108[16] = p_p;
      *(_WORD *)&v108[24] = 1024;
      a1 = v16;
      *(_DWORD *)&v108[26] = v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
      if (v82 < 0) {
        operator delete(__p);
      }
      if (v114.__cv_.__opaque[15] < 0) {
        operator delete((void *)v114.__cv_.__sig);
      }
    }
    goto LABEL_45;
  }
  int v97 = v21;
  operator delete(v21);
  if (!v23) {
    goto LABEL_10;
  }
LABEL_40:
  uint64_t v24 = sub_32A48(13);
  if ((*(unsigned char *)(v24 + 8) & 1) == 0)
  {
LABEL_44:
    LOBYTE(v15) = 0;
    uint64_t v13 = 0;
    goto LABEL_46;
  }
  uint64_t v13 = *(void *)v24;
  if (*(void *)v24)
  {
    if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
    {
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v105 = 1024;
      int v106 = 191;
      __int16 v107 = 1024;
      *(_DWORD *)char v108 = a1;
      _os_log_impl(&def_1E50E8, (os_log_t)v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
    }
    goto LABEL_44;
  }
LABEL_45:
  LOBYTE(v15) = 0;
LABEL_46:
  if (v115.__m_.__sig) {
    operator delete((void *)v115.__m_.__sig);
  }
  if ((v15 & 1) == 0) {
    return v13;
  }
  sub_368B10((uint64_t)&v90, (uint64_t)&v99);
  if (v92) {
    goto LABEL_50;
  }
  int v87 = 0;
  char v88 = 0;
  uint64_t v89 = 0;
  char v51 = v90;
  sub_46B38(&v87, v90, v91, (v91 - (uint64_t)v90) >> 2);
  AudioObjectID v53 = a1;
  char v84 = 0;
  int v85 = 0;
  uint64_t v86 = 0;
  sub_46B38(&v84, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  int v54 = v87;
  char v55 = v84;
  if (v88 - v87 != v85 - v84)
  {
    BOOL v56 = 0;
    if (!v84) {
      goto LABEL_128;
    }
    goto LABEL_127;
  }
  BOOL v56 = memcmp(v87, v84, v88 - v87) == 0;
  if (v55)
  {
LABEL_127:
    int v85 = v55;
    operator delete(v55);
  }
LABEL_128:
  if (v54)
  {
    char v88 = v54;
    operator delete(v54);
    a1 = v53;
    if (v56) {
      goto LABEL_132;
    }
  }
  else
  {
    a1 = v53;
    if (v56)
    {
LABEL_132:
      uint64_t v57 = sub_32A48(13);
      if (*(unsigned char *)(v57 + 8))
      {
        int v58 = *(NSObject **)v57;
        if (*(void *)v57)
        {
          if (os_log_type_enabled(*(os_log_t *)v57, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315650;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v105 = 1024;
            int v106 = 219;
            __int16 v107 = 1024;
            *(_DWORD *)char v108 = a1;
            _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
          }
        }
      }
      uint64_t v13 = 0;
      if (v51) {
        goto LABEL_121;
      }
      return v13;
    }
  }
LABEL_50:
  memset(v115.__m_.__opaque, 0, sizeof(v115.__m_.__opaque));
  v115.__m_.__uint64_t sig = 850045863;
  memset(v114.__cv_.__opaque, 0, sizeof(v114.__cv_.__opaque));
  v114.__cv_.__uint64_t sig = 1018212795;
  char v83 = 0;
  AudioObjectID v59 = a1;
  sub_662FC(&__p, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v83);
  uint64_t v25 = 2000;
  do
  {
    sub_368B10((uint64_t)&v76, (uint64_t)&v99);
    int v26 = v76;
    if (v79)
    {
      int v27 = 1;
      uint64_t v13 = v79;
      if (v76) {
        goto LABEL_73;
      }
      continue;
    }
    int v73 = 0;
    char v74 = 0;
    uint64_t v75 = 0;
    uint64_t v28 = v77;
    unint64_t v29 = (v77 - (uint64_t)v76) >> 2;
    sub_46B38(&v73, v76, v77, v29);
    char v70 = 0;
    int v71 = 0;
    uint64_t v72 = 0;
    sub_46B38(&v70, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    uint8x8_t v30 = v73;
    unint64_t v31 = v70;
    if (v74 - v73 != v71 - v70)
    {
      BOOL v32 = 0;
      if (!v70) {
        goto LABEL_59;
      }
LABEL_58:
      int v71 = v31;
      operator delete(v31);
      goto LABEL_59;
    }
    BOOL v32 = memcmp(v73, v70, v74 - v73) == 0;
    if (v31) {
      goto LABEL_58;
    }
LABEL_59:
    if (v30)
    {
      char v74 = v30;
      operator delete(v30);
    }
    if (v32)
    {
      int v27 = 12;
      if (v26) {
        goto LABEL_73;
      }
      continue;
    }
    if (v25 > 0)
    {
      v33.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v34 = sub_32A48(13);
      if (*(unsigned char *)(v34 + 8))
      {
        unint64_t v35 = *(NSObject **)v34;
        if (*(void *)v34)
        {
          if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v105 = 1024;
            int v106 = 257;
            __int16 v107 = 2080;
            *(void *)char v108 = "with timeout";
            *(_WORD *)&v108[8] = 1024;
            *(_DWORD *)&v108[10] = v59;
            _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v115;
      __lk.__owns_ = 1;
      std::mutex::lock(&v115);
      v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (v83)
      {
LABEL_70:
        if (__lk.__owns_) {
          std::mutex::unlock(__lk.__m_);
        }
        sub_66410((uint64_t)&buf);
        int v27 = 0;
        v25 += (std::chrono::system_clock::now().__d_.__rep_ - v33.__d_.__rep_) / -1000;
        if (v26) {
          goto LABEL_73;
        }
        continue;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = v36.__d_.__rep_ + 1000000 * v25;
      while (1)
      {
        if (v43 <= std::chrono::steady_clock::now().__d_.__rep_) {
          goto LABEL_70;
        }
        v44.__d_.__rep_ = v43 - std::chrono::steady_clock::now().__d_.__rep_;
        if (v44.__d_.__rep_ >= 1) {
          break;
        }
LABEL_98:
        if (std::chrono::steady_clock::now().__d_.__rep_ >= v43 || v83) {
          goto LABEL_70;
        }
      }
      std::chrono::steady_clock::now();
      v45.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v45.__d_.__rep_)
      {
        if (v45.__d_.__rep_ < 1)
        {
          if ((unint64_t)v45.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 0x8000000000000000;
            goto LABEL_96;
          }
        }
        else if ((unint64_t)v45.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_94;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 1000 * v45.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 0;
      }
LABEL_94:
      if (v46 > (v44.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v47.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_97:
        std::condition_variable::__do_timed_wait(&v114, &__lk, v47);
        std::chrono::steady_clock::now();
        goto LABEL_98;
      }
LABEL_96:
      v47.__d_.__rep_ = v46 + v44.__d_.__rep_;
      goto LABEL_97;
    }
    unint64_t v37 = (os_log_t *)sub_32A48(13);
    int v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v66 = *(void *)a2;
      int v67 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v66);
      if (v69 >= 0) {
        p_luint64_t k = &__lk;
      }
      else {
        p_luint64_t k = __lk.__m_;
      }
      int v64 = 0;
      uint64_t v65 = 0;
      char v63 = 0;
      sub_46B38(&v63, v26, v28, v29);
      int v60 = 0;
      char v61 = 0;
      uint64_t v62 = 0;
      sub_46B38(&v60, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      int v40 = v63;
      char v41 = v60;
      BOOL v42 = v64 - v63 == v61 - v60 && memcmp(v63, v60, v64 - v63) == 0;
      buf.AudioObjectPropertySelector mSelector = 136316930;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v105 = 1024;
      int v106 = 248;
      __int16 v107 = 2080;
      *(void *)char v108 = "set";
      *(_WORD *)&v108[8] = 2080;
      *(void *)&v108[10] = p_lk;
      *(_WORD *)&v108[18] = 2080;
      *(void *)&v108[20] = "set";
      *(_WORD *)&v108[28] = 1024;
      BOOL v109 = v42;
      __int16 v110 = 1024;
      int v111 = 0;
      __int16 v112 = 1024;
      AudioObjectID v113 = v59;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
      if (v41)
      {
        char v61 = v41;
        operator delete(v41);
      }
      if (v40)
      {
        int v64 = v40;
        operator delete(v40);
      }
      if (v69 < 0) {
        operator delete(__lk.__m_);
      }
    }
    int v27 = 1;
    uint64_t v13 = 2003329396;
    if (v26) {
LABEL_73:
    }
      operator delete(v26);
  }
  while (!v27);
  if (v27 == 12)
  {
    uint64_t v48 = sub_32A48(13);
    if (*(unsigned char *)(v48 + 8))
    {
      char v49 = *(NSObject **)v48;
      if (*(void *)v48)
      {
        if (os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG))
        {
          std::unique_lock<std::mutex> __lk = *(std::unique_lock<std::mutex> *)a2;
          sub_16C9C4((uint64_t)&v76, (unsigned int *)&__lk);
          if (v78 >= 0) {
            int v50 = &v76;
          }
          else {
            int v50 = v76;
          }
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v105 = 1024;
          int v106 = 288;
          __int16 v107 = 2080;
          *(void *)char v108 = v50;
          *(_WORD *)&v108[8] = 1024;
          *(_DWORD *)&v108[10] = v59;
          _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v78 < 0) {
            operator delete(v76);
          }
        }
      }
    }
    uint64_t v13 = 0;
  }
  sub_6651C((uint64_t)&__p);
  std::condition_variable::~condition_variable(&v114);
  std::mutex::~mutex(&v115);
  char v51 = v90;
  if (v90) {
LABEL_121:
  }
    operator delete(v51);
  return v13;
}

void sub_3689E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p)
{
  sub_6651C((uint64_t)&a35);
  std::condition_variable::~condition_variable((std::condition_variable *)(v47 - 216));
  std::mutex::~mutex((std::mutex *)(v47 - 168));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_368B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_869C8((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v21;
  if (v21)
  {
    unint64_t v7 = (os_log_t *)sub_32A48(13);
    unint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v19, v6);
        int v9 = v20;
        uint64_t v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v15);
        __int16 v11 = v19;
        if (v9 < 0) {
          __int16 v11 = v10;
        }
        int v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          int v12 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        int v27 = v11;
        __int16 v28 = 2080;
        unint64_t v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)buf, 0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }
  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_46B38(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_368D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    if (a22) {
      operator delete(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_368D4C(uint64_t a1)
{
  return sub_103C0C(a1 + 24);
}

void sub_368D54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_636070;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_368DA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_636070;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_368DCC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_368DF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_636038;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_368E44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_636038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_368E64(uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, uint64_t a5, void *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    unsigned int v21 = (os_log_t *)sub_32A48(13);
    __int16 v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&v39, (unsigned int *)&v37);
      uint64_t v23 = v41 >= 0 ? &v39 : (void **)v39;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 414;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&unsigned char __p[20] = v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", __p, 0x1Cu);
      if (SHIBYTE(v41) < 0) {
        operator delete(v39);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v25 = (os_log_t *)sub_32A48(13);
    __int16 v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&v39, (unsigned int *)&v37);
      int v27 = v41 >= 0 ? &v39 : (void **)v39;
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 415;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&unsigned char __p[20] = v27;
      *(_WORD *)&__p[28] = 1024;
      *(_DWORD *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = a3;
      *(_WORD *)&void v43[4] = 2048;
      *(void *)&v43[6] = a4;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        __p,
        0x2Cu);
      if (SHIBYTE(v41) < 0) {
        operator delete(v39);
      }
    }
    __int16 v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v28 = &off_6414D8;
    v28[2] = 561211770;
  }
  if (!a6)
  {
    unint64_t v29 = (os_log_t *)sub_32A48(13);
    __int16 v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&v39, (unsigned int *)&v37);
      AudioObjectID v31 = v41 >= 0 ? &v39 : (void **)v39;
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 416;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&unsigned char __p[20] = "inData";
      *(_WORD *)&__p[28] = 2080;
      *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = v31;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", __p, 0x26u);
      if (SHIBYTE(v41) < 0) {
        operator delete(v39);
      }
    }
    BOOL v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v32 = &off_6414D8;
    v32[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    std::chrono::system_clock::time_point v33 = (os_log_t *)sub_32A48(13);
    uint64_t v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&v39, (unsigned int *)&v37);
      unint64_t v35 = v41 >= 0 ? &v39 : (void **)v39;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 417;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&unsigned char __p[20] = v35;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", __p, 0x1Cu);
      if (SHIBYTE(v41) < 0) {
        operator delete(v39);
      }
    }
    std::chrono::steady_clock::time_point v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::chrono::steady_clock::time_point v36 = &off_6414D8;
    v36[2] = 1852797029;
  }
  if (a2->mSelector == 1986164323)
  {
    int v16 = operator new(4uLL);
    *(void *)std::string __p = v16;
    _DWORD *v16 = 1886613611;
    *(void *)&__p[8] = v16 + 1;
    *(void *)&__p[16] = v16 + 1;
    strcpy(&__p[24], "cwdv");
    v43[2] = 0;
    *(_DWORD *)&v43[10] = 3;
    v45[0] = 0;
    v45[1] = 0;
    std::chrono::steady_clock::time_point v44 = v45;
    int v46 = 44739242;
    CFTypeRef cf = 0;
    sub_43637C((uint64_t *)&v39, a1, (uint64_t)__p);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v45[0]);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if (v41 == 1)
    {
      int v17 = *(std::__shared_weak_count **)(v40 + 24);
      if (v17)
      {
        uint64_t v18 = *(void *)(v40 + 16);
        atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        int v19 = std::__shared_weak_count::lock(v17);
        if (v19)
        {
          char v20 = v19;
          if (v18) {
            (*(void (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, void *))(*(void *)v18 + 48))(v18, a2, a3, a4, a5, a6);
          }
          sub_4636C(v20);
        }
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    sub_8108((uint64_t *)&v39);
  }
  else if (a2->mSelector == 1396926579)
  {
    memset(__p, 0, 24);
    sub_45ED4(__p, a6, (uint64_t)a6 + 4 * (a5 >> 2), a5 >> 2);
    int v12 = sub_367CD0(a1, (unsigned int **)__p);
    if (*(void *)__p) {
      operator delete(*(void **)__p);
    }
    if (v12)
    {
      AudioObjectID v13 = (os_log_t *)sub_32A48(13);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 426;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result): \"Error setting output data sources\"", __p, 0x12u);
        }
      }
      uint64_t v15 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v15 = &off_6414D8;
      v15[2] = v12;
    }
  }
  else
  {
    sub_4321A0(a1, a2, a3, a4, a5, (unsigned int *)a6);
  }
}

void sub_369628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  sub_4636C(v16);
  std::__shared_weak_count::__release_weak(v15);
  sub_8108(&a12);
  _Unwind_Resume(a1);
}

void sub_369688(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v25 = (os_log_t *)sub_32A48(13);
    __int16 v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v61 = *a2;
      int v62 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)&v63, (unsigned int *)&v61);
      int v27 = v64 >= 0 ? &v63 : (long long *)v63;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 352;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&unsigned char __p[20] = v27;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", __p, 0x1Cu);
      if (SHIBYTE(v64) < 0) {
        operator delete((void *)v63);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    unint64_t v29 = (os_log_t *)sub_32A48(13);
    __int16 v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v61 = *a2;
      int v62 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)&v63, (unsigned int *)&v61);
      AudioObjectID v31 = v64 >= 0 ? &v63 : (long long *)v63;
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 353;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&unsigned char __p[20] = v31;
      *(_WORD *)&__p[28] = 1024;
      *(_DWORD *)uint64_t v66 = a3;
      *(_WORD *)&v66[4] = 2048;
      *(void *)&v66[6] = a4;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        __p,
        0x2Cu);
      if (SHIBYTE(v64) < 0) {
        operator delete((void *)v63);
      }
    }
    BOOL v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v32 = &off_6414D8;
    v32[2] = 561211770;
  }
  if (!a6)
  {
    std::chrono::system_clock::time_point v33 = (os_log_t *)sub_32A48(13);
    uint64_t v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v61 = *a2;
      int v62 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)&v63, (unsigned int *)&v61);
      unint64_t v35 = v64 >= 0 ? &v63 : (long long *)v63;
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 354;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&unsigned char __p[20] = "outData";
      *(_WORD *)&__p[28] = 2080;
      *(void *)uint64_t v66 = v35;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", __p, 0x26u);
      if (SHIBYTE(v64) < 0) {
        operator delete((void *)v63);
      }
    }
    std::chrono::steady_clock::time_point v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::chrono::steady_clock::time_point v36 = &off_6414D8;
    v36[2] = 561211770;
  }
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 > 1835103843)
  {
    switch(v12)
    {
      case 1986164323:
        uint64_t v18 = operator new(4uLL);
        *(void *)std::string __p = v18;
        *uint64_t v18 = 1886613611;
        *(void *)&__p[8] = v18 + 1;
        *(void *)&__p[16] = v18 + 1;
        strcpy(&__p[24], "cwdv");
        v66[2] = 0;
        *(_DWORD *)&v66[10] = 3;
        v68[0] = 0;
        v68[1] = 0;
        int v67 = v68;
        int v69 = 44739242;
        CFTypeRef cf = 0;
        sub_43637C((uint64_t *)&v63, a1, (uint64_t)__p);
        if (cf) {
          CFRelease(cf);
        }
        sub_463E0(v68[0]);
        if (*(void *)__p)
        {
          *(void *)&__p[8] = *(void *)__p;
          operator delete(*(void **)__p);
        }
        if (v64 == 1)
        {
          int v19 = *(std::__shared_weak_count **)(*((void *)&v63 + 1) + 24);
          if (v19)
          {
            uint64_t v20 = *(void *)(*((void *)&v63 + 1) + 16);
            atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            unsigned int v21 = std::__shared_weak_count::lock(v19);
            if (v21)
            {
              __int16 v22 = v21;
              if (v20) {
                (*(void (**)(uint64_t, uint64_t *, uint64_t, _DWORD *, UInt32 *, float *))(*(void *)v20 + 40))(v20, a2, a3, a4, a5, a6);
              }
              sub_4636C(v22);
            }
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        sub_8108((uint64_t *)&v63);
        break;
      case 1937208176:
        UInt32 v23 = *a5;
        if (v23 != (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32))(a1, a2, a3, a4))
        {
          AudioObjectID v53 = (os_log_t *)sub_32A48(13);
          int v54 = *v53;
          if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
          {
            uint64_t v61 = *a2;
            int v62 = *((_DWORD *)a2 + 2);
            sub_16C9C4((uint64_t)&v63, (unsigned int *)&v61);
            int v55 = SHIBYTE(v64);
            BOOL v56 = (long long *)v63;
            UInt32 v57 = *a5;
            int v58 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            AudioObjectID v59 = &v63;
            *(_DWORD *)std::string __p = 136316162;
            *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
            if (v55 < 0) {
              AudioObjectID v59 = v56;
            }
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 390;
            *(_WORD *)&unsigned char __p[18] = 2080;
            *(void *)&unsigned char __p[20] = v59;
            *(_WORD *)&__p[28] = 1024;
            *(_DWORD *)uint64_t v66 = v57;
            *(_WORD *)&v66[4] = 1024;
            *(_DWORD *)&v66[6] = v58;
            _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              __p,
              0x28u);
            if (SHIBYTE(v64) < 0) {
              operator delete((void *)v63);
            }
          }
          int v60 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v60 = &off_6414D8;
          v60[2] = 561211770;
        }
        *(_DWORD *)a6 = sub_23AC0();
        break;
      case 1835103844:
        UInt32 v15 = *a5;
        if (v15 != (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32))(a1, a2, a3, a4))
        {
          std::chrono::system_clock::time_point v45 = (os_log_t *)sub_32A48(13);
          int v46 = *v45;
          if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
          {
            uint64_t v61 = *a2;
            int v62 = *((_DWORD *)a2 + 2);
            sub_16C9C4((uint64_t)&v63, (unsigned int *)&v61);
            int v47 = SHIBYTE(v64);
            uint64_t v48 = (long long *)v63;
            UInt32 v49 = *a5;
            int v50 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            char v51 = &v63;
            *(_DWORD *)std::string __p = 136316162;
            *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
            if (v47 < 0) {
              char v51 = v48;
            }
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 361;
            *(_WORD *)&unsigned char __p[18] = 2080;
            *(void *)&unsigned char __p[20] = v51;
            *(_WORD *)&__p[28] = 1024;
            *(_DWORD *)uint64_t v66 = v49;
            *(_WORD *)&v66[4] = 1024;
            *(_DWORD *)&v66[6] = v50;
            _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              __p,
              0x28u);
            if (SHIBYTE(v64) < 0) {
              operator delete((void *)v63);
            }
          }
          int v52 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v52 = &off_6414D8;
          v52[2] = 561211770;
        }
        LODWORD(v63) = 1986290211;
        *(void *)((char *)&v63 + 4) = *(uint64_t *)((char *)a2 + 4);
        LODWORD(v61) = 16;
        sub_432AE8(a1, (const AudioObjectPropertyAddress *)&v63, 0, 0, (UInt32 *)&v61, (float *)__p);
        float v16 = *(double *)__p;
        *a6 = v16;
        break;
      default:
LABEL_32:
        sub_432AE8(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
        return;
    }
  }
  else
  {
    switch(v12)
    {
      case 1064725619:
        UInt32 v17 = *a5;
        if (v17 != (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32))(a1, a2, a3, a4))
        {
          uint64_t v37 = (os_log_t *)sub_32A48(13);
          int v38 = *v37;
          if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
          {
            uint64_t v61 = *a2;
            int v62 = *((_DWORD *)a2 + 2);
            sub_16C9C4((uint64_t)&v63, (unsigned int *)&v61);
            int v39 = SHIBYTE(v64);
            uint64_t v40 = (long long *)v63;
            UInt32 v41 = *a5;
            int v42 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _DWORD *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = &v63;
            *(_DWORD *)std::string __p = 136316162;
            *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
            if (v39 < 0) {
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = v40;
            }
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 386;
            *(_WORD *)&unsigned char __p[18] = 2080;
            *(void *)&unsigned char __p[20] = v43;
            *(_WORD *)&__p[28] = 1024;
            *(_DWORD *)uint64_t v66 = v41;
            *(_WORD *)&v66[4] = 1024;
            *(_DWORD *)&v66[6] = v42;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              __p,
              0x28u);
            if (SHIBYTE(v64) < 0) {
              operator delete((void *)v63);
            }
          }
          std::chrono::steady_clock::time_point v44 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::chrono::steady_clock::time_point v44 = &off_6414D8;
          void v44[2] = 561211770;
        }
        *(_DWORD *)a6 = 1;
        break;
      case 1668049764:
        sub_437550(a1, a5, a6);
        break;
      case 1684435056:
        if (a3 == 8 && *a4 == 1936748595 && a4[1] == 64001)
        {
          sub_36A2B8(__p, a1);
          CFDataRef v13 = *(const __CFData **)&__p[8];
          if (*(void *)&__p[8])
          {
            BytePtr = CFDataGetBytePtr(*(CFDataRef *)&__p[8]);
            CFDataRef v13 = *(const __CFData **)&__p[8];
          }
          else
          {
            BytePtr = 0;
          }
          CFDataRef v24 = sub_36A9B8(v13);
          memcpy(a6, BytePtr, (size_t)v24);
          sub_49A90(__p);
        }
        return;
      default:
        goto LABEL_32;
    }
  }
}

void sub_36A248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_36A2B8(void *a1, uint64_t a2)
{
  *a1 = &off_636018;
  a1[1] = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a2 + 16))(a2, &qword_65D488))
  {
    strcpy((char *)v27, "tDCSptuo");
    BYTE1(v27[1]) = 0;
    WORD1(v27[1]) = 0;
    if (sub_FE748(a2))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 2003329396;
      v35[4] = 0;
      LOBYTE(v36) = 0;
      *(_DWORD *)__int16 v28 = sub_FE7BC(a2);
      if (*(_DWORD *)v28)
      {
        v26[0] = 0;
        *(_DWORD *)AudioObjectPropertyAddress buf = sub_FE830(a2);
        if (!*(_DWORD *)buf)
        {
          std::string __p = &off_636018;
          CFDictionaryRef theDict = 0;
          *(void *)&v35[4] = &off_636018;
          *(void *)&v35[12] = v26[0];
          LOBYTE(v36) = 1;
          sub_49A90(&__p);
        }
      }
      if (!*(_DWORD *)buf && (_BYTE)v36)
      {
        sub_5505C(bytes, *(CFTypeRef *)&v35[12]);
        bytes[0] = (UInt8 *)&off_636018;
        if ((_BYTE)v36) {
          sub_49A90(&v35[4]);
        }
        uint64_t v4 = (UInt8 *)a1[1];
        a1[1] = bytes[1];
        bytes[1] = v4;
        sub_49A90(bytes);
        return;
      }
    }
    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 2003332927;
      v35[4] = 0;
      LOBYTE(v36) = 0;
    }
    exception = __cxa_allocate_exception(0x10uLL);
    int v21 = *(_DWORD *)buf;
    *(void *)exception = &off_6414D8;
    exception[2] = v21;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a2 + 16))(a2, &qword_65D498))
  {
    strcpy((char *)bytes, "eDCSptuo");
    BYTE1(bytes[1]) = 0;
    WORD1(bytes[1]) = 0;
    sub_237C6C((uint64_t)buf, a2);
    if (*(_DWORD *)buf || !(_BYTE)v36)
    {
      __int16 v22 = __cxa_allocate_exception(0x10uLL);
      int v23 = *(_DWORD *)buf;
      *(void *)__int16 v22 = &off_6414D8;
      v22[2] = v23;
    }
    sub_5505C(&__p, *(CFTypeRef *)&v35[12]);
    std::string __p = &off_6412B0;
    if ((_BYTE)v36) {
      sub_49A90(&v35[4]);
    }
    sub_1FE09C((uint64_t)buf, theDict, @"Version");
    CFNumberRef v5 = sub_517B0(*(const __CFNumber **)&v35[4]);
    sub_49A90(buf);
    sub_1FE09C((uint64_t)buf, theDict, @"NumSpkCalibs");
    unsigned int v6 = sub_517B0(*(const __CFNumber **)&v35[4]);
    sub_49A90(buf);
    sub_1FE09C((uint64_t)buf, theDict, @"BytesPerSpkCalib");
    unsigned int v7 = sub_517B0(*(const __CFNumber **)&v35[4]);
    sub_49A90(buf);
    if (v6)
    {
      if (v5 == 2) {
        unsigned int v8 = 12;
      }
      else {
        unsigned int v8 = v7 * v6 + 4;
      }
    }
    else
    {
      unsigned int v8 = 0;
    }
    int v9 = (os_log_t *)sub_32A48(17);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)unint64_t v35 = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)&v35[10] = 135;
      *(_WORD *)&v35[14] = 1024;
      *(_DWORD *)&v35[16] = v5;
      LOWORD(v36) = 1024;
      *(_DWORD *)((char *)&v36 + 2) = v6;
      HIWORD(v36) = 1024;
      unsigned int v37 = v7;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d version: %u, NumSpkCalibs: %u, BytesPerSpkCalib: %u", buf, 0x24u);
    }
    sub_49A90(&__p);
    if (v8)
    {
      strcpy(v28, "aDCSptuo");
      char v29 = 0;
      __int16 v30 = 0;
      if (sub_FE748(a2))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 2003329396;
        v35[4] = 0;
        LOBYTE(v37) = 0;
        unsigned int v11 = sub_FE7BC(a2);
        unsigned int v33 = v11;
        if (!v11)
        {
          CFNumberRef v5 = 0;
          v27[0] = 0;
          v27[1] = 0;
LABEL_38:
          memset(bytes, 0, sizeof(bytes));
          sub_36A9D8(bytes, v27[0], (uint64_t)v5, (char *)v5 - (char *)v27[0]);
          if (v27[0]) {
            operator delete(v27[0]);
          }
          UInt32 v17 = bytes[0];
          CFDataRef v18 = CFDataCreate(0, bytes[0], v8);
          uint64_t v19 = a1[1];
          a1[1] = v18;
          v26[0] = &off_636018;
          v26[1] = v19;
          sub_49A90(v26);
          if (v17) {
            operator delete(v17);
          }
          return;
        }
        sub_D7C0C(&__p, v11);
        int v12 = sub_FE830(a2);
        int v13 = v12;
        *(_DWORD *)AudioObjectPropertyAddress buf = v12;
        if (v12)
        {
          int v14 = 0;
          LOBYTE(v27[0]) = 0;
          int v15 = v12;
        }
        else
        {
          *(void *)&v35[4] = 0;
          *(void *)&v35[12] = 0;
          uint64_t v36 = 0;
          sub_36A9D8(&v35[4], __p, (uint64_t)theDict, theDict - (CFDictionaryRef)__p);
          int v14 = 1;
          LOBYTE(v37) = 1;
          int v15 = *(_DWORD *)buf;
          CFNumberRef v16 = *(const __CFNumber **)&v35[12];
          *(_OWORD *)int v27 = *(_OWORD *)&v35[4];
          *(void *)&v35[12] = 0;
          uint64_t v36 = 0;
          *(void *)&v35[4] = 0;
          CFNumberRef v5 = v16;
        }
        if (__p)
        {
          CFDictionaryRef theDict = (CFDictionaryRef)__p;
          operator delete(__p);
        }
        if (!v13 && *(void *)&v35[4]) {
          operator delete(*(void **)&v35[4]);
        }
        if (!v15)
        {
          if (v14) {
            goto LABEL_38;
          }
          int v15 = 0;
        }
      }
      else
      {
        LOBYTE(v27[0]) = 0;
        int v15 = 2003332927;
      }
      CFDataRef v24 = __cxa_allocate_exception(0x10uLL);
      *(void *)CFDataRef v24 = &off_6414D8;
      void v24[2] = v15;
    }
  }
}

void sub_36A934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

CFDataRef sub_36A9B8(const __CFData *result)
{
  if (result) {
    return (const __CFData *)CFDataGetLength(result);
  }
  return result;
}

void *sub_36A9D8(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unsigned int v6 = result;
    uint64_t result = sub_D7CE8(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_36AA38(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_36AA54(void *a1)
{
  sub_49A90(a1);

  operator delete();
}

uint64_t sub_36AA90(uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, _DWORD *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v15 = (os_log_t *)sub_32A48(13);
    CFNumberRef v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&v25, (unsigned int *)&v23);
      UInt32 v17 = v27 >= 0 ? &v25 : (void **)v25;
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 302;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&unsigned char __p[20] = v17;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", __p, 0x1Cu);
      if (SHIBYTE(v27) < 0) {
        operator delete(v25);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&v25, (unsigned int *)&v23);
      int v21 = v27 >= 0 ? &v25 : (void **)v25;
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 303;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&unsigned char __p[20] = v21;
      *(_WORD *)&__p[28] = 1024;
      int v29 = a3;
      __int16 v30 = 2048;
      AudioObjectID v31 = a4;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        __p,
        0x2Cu);
      if (SHIBYTE(v27) < 0) {
        operator delete(v25);
      }
    }
    __int16 v22 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v22 = &off_6414D8;
    v22[2] = 561211770;
  }
  AudioObjectPropertySelector mSelector = a2->mSelector;
  CFDataRef v9 = (const __CFData *)&dword_4;
  if ((int)a2->mSelector > 1835103843)
  {
    if (mSelector != 1835103844 && mSelector != 1937208176)
    {
      if (mSelector == 1986164323)
      {
        uint64_t v10 = operator new(4uLL);
        *(void *)std::string __p = v10;
        *uint64_t v10 = 1886613611;
        *(void *)&__p[8] = v10 + 1;
        *(void *)&__p[16] = v10 + 1;
        strcpy(&__p[24], "cwdv");
        BYTE2(v29) = 0;
        HIDWORD(v31) = 3;
        v33[0] = 0;
        v33[1] = 0;
        BOOL v32 = v33;
        int v34 = 44739242;
        CFTypeRef cf = 0;
        sub_43637C((uint64_t *)&v25, a1, (uint64_t)__p);
        if (cf) {
          CFRelease(cf);
        }
        sub_463E0(v33[0]);
        if (*(void *)__p)
        {
          *(void *)&__p[8] = *(void *)__p;
          operator delete(*(void **)__p);
        }
        if (v27 == 1 && (unsigned int v11 = *(std::__shared_weak_count **)(v26 + 24)) != 0)
        {
          CFDataRef v9 = *(const __CFData **)(v26 + 16);
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          int v12 = std::__shared_weak_count::lock(v11);
          if (v12)
          {
            int v13 = v12;
            if (v9) {
              CFDataRef v9 = (const __CFData *)(*(uint64_t (**)(const __CFData *, const AudioObjectPropertyAddress *, uint64_t, _DWORD *))(*(void *)v9 + 32))(v9, a2, a3, a4);
            }
            sub_4636C(v13);
          }
          else
          {
            CFDataRef v9 = 0;
          }
          std::__shared_weak_count::__release_weak(v11);
        }
        else
        {
          CFDataRef v9 = 0;
        }
        sub_8108((uint64_t *)&v25);
        return (uint64_t)v9;
      }
      goto LABEL_24;
    }
    return (uint64_t)v9;
  }
  if (mSelector == 1064725619 || mSelector == 1668049764) {
    return (uint64_t)v9;
  }
  if (mSelector == 1684435056)
  {
    if (a3 != 8) {
      return 0;
    }
    CFDataRef v9 = 0;
    if (*a4 == 1936748595 && a4[1] == 64001)
    {
      sub_36A2B8(__p, a1);
      CFDataRef v9 = sub_36A9B8(*(const __CFData **)&__p[8]);
      sub_49A90(__p);
    }
    return (uint64_t)v9;
  }
LABEL_24:

  return sub_433254(a1, a2, a3, a4);
}

void sub_36AFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4636C(v5);
  std::__shared_weak_count::__release_weak(v4);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_36B000(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  uint64_t v4 = 0;
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1835103843)
  {
    if (mSelector != 1064725619 && mSelector != 1668049764 && mSelector != 1684435056) {
      goto LABEL_25;
    }
    return v4;
  }
  if (mSelector == 1835103844 || mSelector == 1937208176) {
    return v4;
  }
  if (mSelector == 1986164323)
  {
    CFDataRef v9 = operator new(4uLL);
    std::string __p = v9;
    *CFDataRef v9 = 1886613611;
    int v15 = v9 + 1;
    CFNumberRef v16 = v9 + 1;
    strcpy(v17, "cwdv");
    v17[8] = 0;
    int v18 = 3;
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v19 = v20;
    int v21 = 44739242;
    CFTypeRef cf = 0;
    sub_43637C(&v23, a1, (uint64_t)&__p);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v20[0]);
    if (__p)
    {
      int v15 = __p;
      operator delete(__p);
    }
    if (v25 == 1 && (uint64_t v10 = *(std::__shared_weak_count **)(v24 + 24)) != 0)
    {
      uint64_t v4 = *(void *)(v24 + 16);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      unsigned int v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        int v12 = v11;
        if (v4) {
          uint64_t v4 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *))(*(void *)v4 + 24))(v4, a2);
        }
        sub_4636C(v12);
      }
      else
      {
        uint64_t v4 = 0;
      }
      std::__shared_weak_count::__release_weak(v10);
    }
    else
    {
      uint64_t v4 = 0;
    }
    sub_8108(&v23);
    return v4;
  }
LABEL_25:

  return sub_43356C(a1, a2);
}

void sub_36B1F4(_Unwind_Exception *a1)
{
  sub_4636C(v2);
  std::__shared_weak_count::__release_weak(v1);
  sub_8108((uint64_t *)(v3 - 56));
  _Unwind_Resume(a1);
}

BOOL sub_36B22C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  AudioObjectPropertySelector mSelector = a2->mSelector;
  uint64_t v5 = 1;
  if ((int)a2->mSelector > 1835103843)
  {
    if (mSelector != 1835103844 && mSelector != 1937208176)
    {
      if (mSelector != 1986164323)
      {
LABEL_24:
        sub_50848((std::mutex *)a1);
        return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
      }
      size_t v8 = operator new(4uLL);
      std::string __p = v8;
      *size_t v8 = 1886613611;
      int v14 = v8 + 1;
      int v15 = v8 + 1;
      strcpy(v16, "cwdv");
      unsigned char v16[8] = 0;
      int v17 = 3;
      v19[0] = 0;
      v19[1] = 0;
      int v18 = v19;
      int v20 = 44739242;
      CFTypeRef cf = 0;
      sub_43637C(&v22, a1, (uint64_t)&__p);
      if (cf) {
        CFRelease(cf);
      }
      sub_463E0(v19[0]);
      if (__p)
      {
        int v14 = __p;
        operator delete(__p);
      }
      if (v24 == 1 && (CFDataRef v9 = *(std::__shared_weak_count **)(v23 + 24)) != 0)
      {
        uint64_t v5 = *(void *)(v23 + 16);
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          unsigned int v11 = v10;
          if (v5) {
            uint64_t v5 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *))(*(void *)v5 + 16))(v5, a2);
          }
          sub_4636C(v11);
        }
        else
        {
          uint64_t v5 = 0;
        }
        std::__shared_weak_count::__release_weak(v9);
      }
      else
      {
        uint64_t v5 = 0;
      }
      sub_8108(&v22);
    }
  }
  else if (mSelector == 1064725619)
  {
    return a2->mScope == 1869968496;
  }
  else if (mSelector != 1668049764 && mSelector != 1684435056)
  {
    goto LABEL_24;
  }
  return v5;
}

void sub_36B430(_Unwind_Exception *a1)
{
  sub_4636C(v2);
  std::__shared_weak_count::__release_weak(v1);
  sub_8108((uint64_t *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_36B468(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

BOOL sub_36B4A4(uint64_t a1)
{
  (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1 + 128))(theString1);
  BOOL v1 = CFEqual(theString1[0], @"Speaker");
  sub_72924((uint64_t)theString1);
  return v1;
}

void sub_36B518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_36B52C(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_65D4B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_65D4B8))
  {
    byte_65D4B4 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &qword_65D478);
    __cxa_guard_release(&qword_65D4B8);
  }
  return byte_65D4B4;
}

void sub_36B5C8(_Unwind_Exception *a1)
{
}

void sub_36B5E0(uint64_t a1, int a2, uint64_t a3)
{
  if ((sub_36B52C(a1) & 1) == 0)
  {
    int v18 = (os_log_t *)sub_32A48(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v25 = 136315394;
      *(void *)&void v25[4] = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&v25[12] = 1024;
      *(_DWORD *)&v25[14] = 188;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v25, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_3CD68C();
  *(void *)&v25[8] = 0;
  *(void *)&v25[16] = 0;
  *(void *)uint64_t v25 = &v25[8];
  uint64_t v6 = qword_65E358;
  if ((uint64_t *)qword_65E358 == &qword_65E360) {
    goto LABEL_15;
  }
  do
  {
    sub_36B9B0((uint64_t ***)v25, (uint64_t **)&v25[8], *(_DWORD *)(v6 + 32), v6 + 32);
    uint64_t v7 = *(uint64_t **)(v6 + 8);
    if (v7)
    {
      do
      {
        size_t v8 = v7;
        uint64_t v7 = (uint64_t *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        size_t v8 = *(uint64_t **)(v6 + 16);
        BOOL v9 = *v8 == v6;
        uint64_t v6 = (uint64_t)v8;
      }
      while (!v9);
    }
    uint64_t v6 = (uint64_t)v8;
  }
  while (v8 != &qword_65E360);
  uint64_t v10 = *(uint64_t **)&v25[8];
  if (!*(void *)&v25[8])
  {
LABEL_15:
    int v12 = (os_log_t *)sub_32A48(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v24 = "Device_Speaker_Aspen.cpp";
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&unsigned char v24[10] = 190;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "Precondition failure.");
  }
  while (1)
  {
    int v11 = *((_DWORD *)v10 + 8);
    if (v11 <= a2) {
      break;
    }
LABEL_14:
    uint64_t v10 = (uint64_t *)*v10;
    if (!v10) {
      goto LABEL_15;
    }
  }
  if (v11 < a2)
  {
    ++v10;
    goto LABEL_14;
  }
  *(_DWORD *)(a1 + 492) = a2;
  int v15 = (os_log_t *)sub_32A48(17);
  CFNumberRef v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)uint64_t v24 = "Device_Speaker_Aspen.cpp";
    *(_WORD *)&v24[8] = 1024;
    *(_DWORD *)&unsigned char v24[10] = 206;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_INFO, "%25s:%-5d Notifying listeners about speaker channel configuration change", buf, 0x12u);
  }
  uint64_t v17 = sub_463468();
  unsigned int v22 = 1886613611;
  sub_6367C((uint64_t)buf, &v22, 1);
  unsigned int v21 = 0;
  sub_463CAC(v17, a3, (uint64_t)buf, &v21);
  sub_463E0(*(void **)&v24[4]);
  sub_36B95C(*(void **)&v25[8]);
}

void sub_36B900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void sub_36B95C(void *a1)
{
  if (a1)
  {
    sub_36B95C(*a1);
    sub_36B95C(a1[1]);
    sub_EEEC0(a1 + 4);
    operator delete(a1);
  }
}

void sub_36B9B0(uint64_t ***a1, uint64_t **a2, int a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t *)(a1 + 1);
  if (a1 + 1 != (uint64_t ***)a2)
  {
    int v7 = *((_DWORD *)a2 + 8);
    if (v7 <= a3)
    {
      if (v7 >= a3) {
        return;
      }
      int v12 = a2 + 1;
      int v11 = a2[1];
      if (v11)
      {
        do
        {
          int v12 = (uint64_t **)v11;
          int v11 = (uint64_t *)*v11;
          int v13 = v12;
          int v14 = (uint64_t *)v12;
        }
        while (v11);
      }
      else
      {
        int v14 = (uint64_t *)a2;
        do
        {
          uint64_t v19 = v14;
          int v14 = (uint64_t *)v14[2];
        }
        while ((uint64_t *)*v14 != v19);
        int v13 = a2;
      }
      if (v14 != v6 && *((_DWORD *)v14 + 8) <= a3)
      {
        int v20 = (uint64_t *)*v6;
        int v12 = (uint64_t **)(a1 + 1);
        int v13 = (uint64_t **)(a1 + 1);
        if (!*v6) {
          goto LABEL_44;
        }
        int v12 = (uint64_t **)(a1 + 1);
        while (1)
        {
          while (1)
          {
            int v13 = (uint64_t **)v20;
            int v21 = *((_DWORD *)v20 + 8);
            if (v21 <= a3) {
              break;
            }
            int v20 = *v13;
            int v12 = v13;
            if (!*v13) {
              goto LABEL_44;
            }
          }
          if (v21 >= a3) {
            break;
          }
          int v12 = v13 + 1;
          int v20 = v13[1];
          if (!v20) {
            goto LABEL_44;
          }
        }
      }
LABEL_22:
      if (*v12) {
        return;
      }
      goto LABEL_44;
    }
  }
  size_t v8 = *a2;
  if (*a1 == a2)
  {
    uint64_t v10 = a2;
LABEL_16:
    if (v8) {
      int v13 = v10;
    }
    else {
      int v13 = a2;
    }
    if (v8) {
      int v12 = v10 + 1;
    }
    else {
      int v12 = a2;
    }
    goto LABEL_22;
  }
  if (v8)
  {
    BOOL v9 = *a2;
    do
    {
      uint64_t v10 = (uint64_t **)v9;
      BOOL v9 = (uint64_t *)v9[1];
    }
    while (v9);
  }
  else
  {
    int v15 = a2;
    do
    {
      uint64_t v10 = (uint64_t **)v15[2];
      BOOL v16 = *v10 == (uint64_t *)v15;
      int v15 = v10;
    }
    while (v16);
  }
  if (*((_DWORD *)v10 + 8) < a3) {
    goto LABEL_16;
  }
  uint64_t v17 = (uint64_t *)*v6;
  int v12 = (uint64_t **)(a1 + 1);
  int v13 = (uint64_t **)(a1 + 1);
  if (*v6)
  {
    int v12 = (uint64_t **)(a1 + 1);
    do
    {
      while (1)
      {
        int v13 = (uint64_t **)v17;
        int v18 = *((_DWORD *)v17 + 8);
        if (v18 <= a3) {
          break;
        }
        uint64_t v17 = *v13;
        int v12 = v13;
        if (!*v13) {
          goto LABEL_44;
        }
      }
      if (v18 >= a3) {
        goto LABEL_22;
      }
      int v12 = v13 + 1;
      uint64_t v17 = v13[1];
    }
    while (v17);
  }
LABEL_44:
  unsigned int v22 = operator new(0x58uLL);
  v24[0] = v22;
  v24[1] = v6;
  char v25 = 0;
  v22[8] = *(_DWORD *)a4;
  *((void *)v22 + 5) = 0;
  *((void *)v22 + 6) = 0;
  *((void *)v22 + 7) = 0;
  sub_46B38((void *)v22 + 5, *(const void **)(a4 + 8), *(void *)(a4 + 16), (uint64_t)(*(void *)(a4 + 16) - *(void *)(a4 + 8)) >> 2);
  *((void *)v22 + 8) = 0;
  *((void *)v22 + 9) = 0;
  *((void *)v22 + 1sub_360D08(&a9, 0) = 0;
  sub_46B38((void *)v22 + 8, *(const void **)(a4 + 32), *(void *)(a4 + 40), (uint64_t)(*(void *)(a4 + 40) - *(void *)(a4 + 32)) >> 2);
  char v25 = 1;
  *(void *)unsigned int v22 = 0;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = v13;
  *int v12 = (uint64_t *)v22;
  uint64_t v23 = **a1;
  if (v23)
  {
    *a1 = (uint64_t **)v23;
    unsigned int v22 = *v12;
  }
  sub_46D00((uint64_t *)a1[1], (uint64_t *)v22);
  a1[2] = (uint64_t **)((char *)a1[2] + 1);
  v24[0] = 0;
  sub_36BC28((uint64_t)v24);
}

void sub_36BBFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 48) = v5;
    operator delete(v5);
  }
  sub_36BC28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_36BC28(uint64_t a1)
{
  BOOL v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_EEEC0(v1 + 4);
    }
    operator delete(v1);
  }
}

BOOL sub_36BC80(uint64_t a1)
{
  return sub_36BC88(a1 - 80);
}

BOOL sub_36BC88(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 184);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 176);
      if (v4)
      {
        BOOL v5 = (*(unsigned int (**)(uint64_t))(*(void *)v4 + 112))(v4) == 0;
LABEL_16:
        sub_4636C(v3);
        return v5;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v6 = sub_32A48(18);
  uint64_t v7 = sub_32A48(38);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)int v15 = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&v15[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12) {
      goto LABEL_12;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_12:
  int v13 = *(NSObject **)v6;
  if (v13)
  {
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v15 = 136315394;
      *(void *)&void v15[4] = "SoftwareOnlyVolumeControl.cpp";
      __int16 v16 = 1024;
      int v17 = 425;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software command expired", v15, 0x12u);
    }
  }
  BOOL v5 = 0;
  BOOL result = 0;
  if (v3) {
    goto LABEL_16;
  }
  return result;
}

void sub_36BE14(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_36BE34(uint64_t a1)
{
}

void sub_36BE3C(uint64_t a1)
{
  uint64_t v2 = sub_32A48(18);
  uint64_t v3 = sub_32A48(38);
  char v4 = 0;
  uint64_t v5 = 0;
  *(void *)int v21 = 0x100000002;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&v21[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8) {
      goto LABEL_7;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_7:
  uint64_t v9 = *(NSObject **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v21 = 136315394;
    *(void *)&void v21[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v22 = 1024;
    int v23 = 405;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disabling software mute", v21, 0x12u);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 184);
  if (v10)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 176);
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 104))(v12, 1);
LABEL_25:
        sub_4636C(v11);
        return;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v13 = sub_32A48(18);
  uint64_t v14 = sub_32A48(38);
  char v15 = 0;
  uint64_t v16 = 0;
  *(void *)int v21 = 0x100000002;
  uint64_t v17 = *(void *)(v13 + 8);
  while (1)
  {
    uint64_t v18 = *(int *)&v21[4 * v16];
    char v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    char v15 = 1;
    uint64_t v16 = 1;
    if (v19) {
      goto LABEL_21;
    }
  }
  if ((v17 & v18) == 0) {
    uint64_t v13 = v14;
  }
LABEL_21:
  int v20 = *(NSObject **)v13;
  if (v20)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v21 = 136315394;
      *(void *)&void v21[4] = "SoftwareOnlyVolumeControl.cpp";
      __int16 v22 = 1024;
      int v23 = 412;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software command expired", v21, 0x12u);
    }
  }
  if (v11) {
    goto LABEL_25;
  }
}

void sub_36C088(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_36C0A8(uint64_t a1)
{
}

void sub_36C0B0(uint64_t a1)
{
  uint64_t v2 = sub_32A48(18);
  uint64_t v3 = sub_32A48(38);
  char v4 = 0;
  uint64_t v5 = 0;
  *(void *)int v21 = 0x100000002;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&v21[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8) {
      goto LABEL_7;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_7:
  uint64_t v9 = *(NSObject **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v21 = 136315394;
    *(void *)&void v21[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v22 = 1024;
    int v23 = 391;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling software mute", v21, 0x12u);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 184);
  if (v10)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 176);
      if (v12)
      {
        (*(void (**)(uint64_t, void))(*(void *)v12 + 104))(v12, 0);
LABEL_25:
        sub_4636C(v11);
        return;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v13 = sub_32A48(18);
  uint64_t v14 = sub_32A48(38);
  char v15 = 0;
  uint64_t v16 = 0;
  *(void *)int v21 = 0x100000002;
  uint64_t v17 = *(void *)(v13 + 8);
  while (1)
  {
    uint64_t v18 = *(int *)&v21[4 * v16];
    char v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
      break;
    }
    char v15 = 1;
    uint64_t v16 = 1;
    if (v19) {
      goto LABEL_21;
    }
  }
  if ((v17 & v18) == 0) {
    uint64_t v13 = v14;
  }
LABEL_21:
  int v20 = *(NSObject **)v13;
  if (v20)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v21 = 136315394;
      *(void *)&void v21[4] = "SoftwareOnlyVolumeControl.cpp";
      __int16 v22 = 1024;
      int v23 = 398;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software command expired", v21, 0x12u);
    }
  }
  if (v11) {
    goto LABEL_25;
  }
}

void sub_36C2FC(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_36C31C(uint64_t a1)
{
  sub_36C358(a1 - 80);

  operator delete();
}

uint64_t sub_36C358(uint64_t a1)
{
  *(void *)a1 = off_6360A8;
  *(void *)(a1 + 8sub_360D08(&a9, 0) = off_636170;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 240);
  if (v2) {
    sub_4636C(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 184);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_463E0(*(void **)(a1 + 136));

  return sub_FE920(a1);
}

uint64_t sub_36C3E8(uint64_t a1)
{
  return sub_36C358(a1 - 80);
}

double sub_36C3F0()
{
  return 0.0;
}

double sub_36C3FC(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

void sub_36C404()
{
  int v0 = (os_log_t *)sub_32A48(13);
  BOOL v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      char v4 = "SoftwareOnlyVolumeControl.cpp";
      __int16 v5 = 1024;
      int v6 = 382;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Not implemented for Software only volume control\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Not implemented for Software only volume control");
}

void sub_36C4D0(_Unwind_Exception *exception_object)
{
}

void sub_36C4EC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0xFF00000000) == 0) {
    LODWORD(a3) = 0;
  }
  sub_36C51C(a1, a2, a3, a4);
  *(unsigned char *)(a1 + 202) = 0;
}

void sub_36C51C(uint64_t a1, double *a2, unsigned int a3, uint64_t a4)
{
  if (a2[1] < *a2)
  {
    int v38 = (os_log_t *)sub_32A48(13);
    int v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      double v41 = *a2;
      uint64_t v40 = *((void *)a2 + 1);
      int v43 = 136315906;
      *(void *)std::chrono::steady_clock::time_point v44 = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&v44[8] = 1024;
      *(_DWORD *)&v44[10] = 437;
      *(_WORD *)&v44[14] = 2048;
      *(void *)&v44[16] = v40;
      *(_WORD *)&v44[24] = 2048;
      *(double *)&v44[26] = v41;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)\"", (uint8_t *)&v43, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)");
  }
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v7 = *(std::__shared_weak_count **)(a4 + 32);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = v8;
  *(void *)(a1 + 184) = v7;
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 184);
  }
  *(unsigned char *)(a1 + 20sub_360D08(&a9, 0) = 0;
  if (v7)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v7);
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 176);
      if (v11)
      {
        (*(void (**)(void, BOOL))(*(void *)v11 + 144))(*(void *)(a1 + 176), *(void *)(a1 + 208) == 0);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 72))(v11)) {
          (*(void (**)(uint64_t, uint64_t, void, float, float))(*(void *)v11 + 64))(v11, 1, 0, 1.0, 0.5);
        }
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (!*(void *)(a1 + 208))
  {
    int v23 = (os_log_t *)sub_32A48(18);
    uint64_t v24 = *v23;
    if (*v23)
    {
      if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
      {
        int v43 = 136315394;
        *(void *)std::chrono::steady_clock::time_point v44 = "SoftwareOnlyVolumeControl.cpp";
        *(_WORD *)&v44[8] = 1024;
        *(_DWORD *)&v44[10] = 445;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Requested software only volume, but given software volume command (and external volume handler proc) are null. This may be expected if waiting for the external volume handler proc for telephony", (uint8_t *)&v43, 0x12u);
      }
    }
  }
LABEL_13:
  if (sub_89FA8() == 2 || sub_89FA8() == 3)
  {
    int v43 = 0;
    memset(&v44[12], 0, 17);
    *(void *)&void v44[4] = &v44[12];
    *(_DWORD *)&v44[32] = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&v44[36] = _D0;
    sub_463E0(0);
    *(void *)&unsigned char v44[12] = 0;
    *(void *)&v44[20] = 0;
    *(void *)&void v44[4] = &v44[12];
    LODWORD(v17) = -1032323072;
    sub_792F0((uint64_t)&v43, 0, 858993458, v17, -21.0);
    LODWORD(v18) = -21.0;
    sub_792F0((uint64_t)&v43, 858993458, 0x7FFFFFFF, v18, 0.0);
    uint64_t v20 = a1 + 136;
    char v19 = *(void **)(a1 + 136);
    *(_DWORD *)(a1 + 12sub_360D08(&a9, 0) = v43;
    sub_463E0(v19);
    int v21 = *(void **)&v44[12];
    *(void *)(a1 + 128) = *(void *)&v44[4];
    *(void *)(a1 + 136) = v21;
    uint64_t v22 = *(void *)&v44[20];
    *(void *)(a1 + 144) = *(void *)&v44[20];
    if (v22)
    {
      v21[2] = v20;
      *(void *)&void v44[4] = &v44[12];
      *(void *)&unsigned char v44[12] = 0;
      *(void *)&v44[20] = 0;
      int v21 = 0;
    }
    else
    {
      *(void *)(a1 + 128) = v20;
    }
    *(_OWORD *)(a1 + 152) = *(_OWORD *)&v44[28];
    sub_463E0(v21);
  }
  else
  {
    double v26 = *a2;
    double v25 = a2[1];
    uint64_t v27 = a1 + 120;
    *(_DWORD *)(a1 + 156) = a3;
    if (a3 > 0xF)
    {
      float v30 = 1.0;
      float v29 = 2.0;
      char v28 = 1;
    }
    else
    {
      char v28 = byte_4E7CF0[a3];
      float v29 = flt_4E7E38[a3];
      float v30 = flt_4E7E78[a3];
    }
    float v31 = v25;
    float v32 = v26;
    *(unsigned char *)(a1 + 152) = v28;
    *(float *)(a1 + 16sub_360D08(&a9, 0) = v29;
    *(float *)(a1 + 164) = v30;
    if (*(void *)(a1 + 144)) {
      signed int v33 = *(_DWORD *)(*(void *)(a1 + 128) + 28);
    }
    else {
      signed int v33 = 0;
    }
    signed int v34 = sub_791CC(a1 + 120);
    uint64_t v36 = *(void **)(a1 + 136);
    unint64_t v35 = (void *)(a1 + 136);
    sub_463E0(v36);
    *(v35 - 1) = v35;
    *unint64_t v35 = 0;
    v35[1] = 0;
    *(float *)&double v37 = v32;
    sub_792F0(v27, v33, v34, v37, v31);
  }
  if (v10) {
    sub_4636C(v10);
  }
}

void sub_36C948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    sub_4636C(v11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_36C998(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    char v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      __int16 v22 = 1024;
      *(_DWORD *)int v23 = 649;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (*a2 == 1987013741) {
    goto LABEL_5;
  }
  if (*a2 == 1986817377)
  {
    uint64_t v8 = (void *)a1[29];
    *(_DWORD *)std::string __p = 1986817377;
    *(void *)&__p[4] = *(void *)((char *)a1 + 92);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&v23[2] = a3;
    *(void *)&v23[10] = a4;
    sub_1A4260(v8, (unsigned int *)__p, (uint64_t)buf);
LABEL_5:
    *(_DWORD *)std::string __p = 1987013732;
    *(void *)&__p[4] = *(void *)((char *)a1 + 92);
    uint64_t v9 = (void *)a1[29];
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&v23[2] = a3;
    *(void *)&v23[10] = a4;
    sub_1A4260(v9, (unsigned int *)__p, (uint64_t)buf);
    return 1;
  }
  uint64_t v11 = (os_log_t *)sub_32A48(17);
  uint64_t v12 = *v11;
  if (*v11)
  {
    BOOL result = os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v17 = *(void *)a2;
    int v18 = a2[2];
    sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
    if (v20 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = *(unsigned char **)__p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v22 = 1024;
    *(_DWORD *)int v23 = 670;
    *(_WORD *)&void v23[4] = 2080;
    *(void *)&v23[6] = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown address: %s", buf, 0x1Cu);
    if (v20 < 0) {
      operator delete(*(void **)__p);
    }
  }
  return 0;
}

BOOL sub_36CC38(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    char v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      __int16 v22 = 1024;
      *(_DWORD *)int v23 = 610;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (*a2 == 1987013741) {
    goto LABEL_5;
  }
  if (*a2 == 1986817377)
  {
    uint64_t v8 = (void *)a1[29];
    *(_DWORD *)std::string __p = 1986817377;
    *(void *)&__p[4] = *(void *)((char *)a1 + 92);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&v23[2] = a3;
    *(void *)&v23[10] = a4;
    sub_1A4AA0(v8, (unsigned int *)__p, (uint64_t)buf);
LABEL_5:
    *(_DWORD *)std::string __p = 1987013732;
    *(void *)&__p[4] = *(void *)((char *)a1 + 92);
    uint64_t v9 = (void *)a1[29];
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&v23[2] = a3;
    *(void *)&v23[10] = a4;
    sub_1A4AA0(v9, (unsigned int *)__p, (uint64_t)buf);
    return 1;
  }
  uint64_t v11 = (os_log_t *)sub_32A48(17);
  uint64_t v12 = *v11;
  if (*v11)
  {
    BOOL result = os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    uint64_t v17 = *(void *)a2;
    int v18 = a2[2];
    sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
    if (v20 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = *(unsigned char **)__p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v22 = 1024;
    *(_DWORD *)int v23 = 636;
    *(_WORD *)&void v23[4] = 2080;
    *(void *)&v23[6] = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported address: %s", buf, 0x1Cu);
    if (v20 < 0) {
      operator delete(*(void **)__p);
    }
  }
  return 0;
}

void sub_36CED8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    signed int v34 = (os_log_t *)sub_32A48(13);
    unint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 284;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) > a5)
  {
    double v37 = (os_log_t *)sub_32A48(13);
    int v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 285;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"Data size insufficient.\"", buf, 0x12u);
    }
    int v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v39 = &off_6414D8;
    v39[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    uint64_t v40 = (os_log_t *)sub_32A48(13);
    double v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 286;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"Property is not settable.\"", buf, 0x12u);
    }
    int v42 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v42 = &off_6414D8;
    v42[2] = 1970171760;
  }
  int v12 = *a2;
  if (*a2 <= 1986817376)
  {
    if (v12 == 1836414053)
    {
      *(unsigned char *)(a1 + 201) = sub_1FDEE0(a5, a6) == 1;
      sub_36D984(a1);
    }
    if (v12 != 1986098020)
    {
LABEL_21:
      int v18 = (os_log_t *)sub_32A48(13);
      char v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 359;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"GetPropertyDataSize() is correct and IsPropertySettable() and HasProperty() returned true, but I do not know about it.\"", buf, 0x12u);
        }
      }
      return;
    }
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 184);
    if (v13)
    {
      uint64_t v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        uint64_t v15 = *(void *)(a1 + 176);
        if (v15 && ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 72))(v15) & 1) != 0) {
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v14 = 0;
    }
    double v25 = (os_log_t *)sub_32A48(13);
    double v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 338;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Ducking is not supported!\"", buf, 0x12u);
    }
LABEL_38:
    if (a5 != 8)
    {
      int v43 = (os_log_t *)sub_32A48(13);
      std::chrono::steady_clock::time_point v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 340;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      std::chrono::system_clock::time_point v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v45, "Precondition failure.");
    }
    *(double *)&CFDictionaryRef v27 = COERCE_DOUBLE(CFRetain(*(CFTypeRef *)a6));
    double v53 = COERCE_DOUBLE(&off_6412B0);
    CFDictionaryRef theDict = v27;
    if (sub_1FE074(v27, @"ducking type"))
    {
      if (sub_1FE074(theDict, @"ducking enable"))
      {
        if (sub_1FE074(theDict, @"ducking gain"))
        {
          if (sub_1FE074(theDict, @"ducking time"))
          {
            sub_1FE09C((uint64_t)buf, theDict, @"ducking type");
            CFNumberRef v28 = sub_517B0(*(const __CFNumber **)&buf[8]);
            sub_49A90(buf);
            sub_1FE09C((uint64_t)buf, theDict, @"ducking enable");
            CFNumberRef v29 = sub_517B0(*(const __CFNumber **)&buf[8]);
            sub_49A90(buf);
            sub_1FE09C((uint64_t)buf, theDict, @"ducking time");
            double v30 = sub_1FE15C(*(const __CFNumber **)&buf[8]);
            float v31 = *(float *)&v30;
            sub_49A90(buf);
            sub_1FE09C((uint64_t)buf, theDict, @"ducking gain");
            double v32 = sub_1FE15C(*(const __CFNumber **)&buf[8]);
            float v33 = *(float *)&v32;
            sub_49A90(buf);
            (*(void (**)(uint64_t, const __CFNumber *, const __CFNumber *, float, float))(*(void *)v15 + 64))(v15, v28, v29, v33, v31);
            sub_49A90(&v53);
            if (v14) {
              sub_4636C(v14);
            }
            return;
          }
          char v51 = (os_log_t *)sub_32A48(13);
          int v47 = *v51;
          if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 347;
            uint64_t v48 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioDevicePropertyDucking - kVir"
                  "tualAudioPlugInDuckingTimeKey is required\"";
            goto LABEL_77;
          }
LABEL_78:
          int v52 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v52 = &off_6414D8;
          v52[2] = 1852797029;
        }
        int v50 = (os_log_t *)sub_32A48(13);
        int v47 = *v50;
        if (!*v50 || !os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR)) {
          goto LABEL_78;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 346;
        uint64_t v48 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioDevicePropertyDucking - kVirtual"
              "AudioPlugInDuckingGainKey is required\"";
      }
      else
      {
        UInt32 v49 = (os_log_t *)sub_32A48(13);
        int v47 = *v49;
        if (!*v49 || !os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR)) {
          goto LABEL_78;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 345;
        uint64_t v48 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioDevicePropertyDucking - kVirtual"
              "AudioPlugInDuckingEnableKey is required\"";
      }
    }
    else
    {
      int v46 = (os_log_t *)sub_32A48(13);
      int v47 = *v46;
      if (!*v46 || !os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR)) {
        goto LABEL_78;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 344;
      uint64_t v48 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioDevicePropertyDucking - kVirtualAu"
            "dioPlugInDuckingTypeKey is required\"";
    }
LABEL_77:
    _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, v48, buf, 0x12u);
    goto LABEL_78;
  }
  if (v12 == 1986817377) {
    goto LABEL_8;
  }
  if (v12 != 2021027692)
  {
    if (v12 == 1987013741)
    {
LABEL_8:
      *(_DWORD *)AudioObjectPropertyAddress buf = sub_1FC1C8(a5, (uint64_t)a6);
      LODWORD(v53) = 0;
      int v55 = 1065353216;
      *(float *)(a1 + 192) = *sub_1F84A8((float *)&v53, (float *)buf, (float *)&v55);
      sub_36D984(a1);
    }
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(a1 + 208);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)a6;
  if (*(void *)(a1 + 144)) {
    double v17 = *(float *)(*(void *)(a1 + 128) + 36);
  }
  else {
    double v17 = 0.0;
  }
  double v53 = v17;
  double v20 = sub_792A4(a1 + 120);
  *(double *)&CFDictionaryRef theDict = *(float *)&v20;
  unsigned int v21 = *(_DWORD *)(a1 + 156);
  int v22 = *(_DWORD *)(a1 + 168);
  uint64_t v24 = *(void *)(a1 + 176);
  int v23 = *(std::__shared_weak_count **)(a1 + 184);
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&buf[8] = 0;
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v23);
  }
  else
  {
    *(void *)AudioObjectPropertyAddress buf = 0;
    *(void *)&buf[8] = 0;
  }
  *(_DWORD *)&buf[16] = v22;
  uint64_t v57 = v24;
  int v58 = v23;
  sub_36C51C(a1, &v53, v21, (uint64_t)buf);
  if (*(unsigned char *)(a1 + 202) && (*(void *)(a1 + 208) || v16 && *(_DWORD *)(a1 + 168))) {
    sub_36D984(a1);
  }
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_36D910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v11);
  if (v10) {
    sub_4636C(v10);
  }
  _Unwind_Resume(a1);
}

void sub_36D984(uint64_t a1)
{
  uint64_t v2 = a1 + 120;
  sub_796B4(a1 + 120, *(float *)(a1 + 192));
  float v4 = v3;
  if (*(void *)(a1 + 144))
  {
    if (vabds_f32(v3, *(float *)(*(void *)(a1 + 128) + 36)) <= 0.001)
    {
      float v5 = *(float *)(*(void *)(a1 + 128) + 36);
      goto LABEL_5;
    }
  }
  else
  {
    float v5 = 0.0;
    if (fabsf(v3) <= 0.001)
    {
LABEL_5:
      double v6 = sub_792A4(v2);
      if (v5 != *(float *)&v6) {
        goto LABEL_7;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 201))
  {
    int v7 = 0;
    goto LABEL_9;
  }
LABEL_7:
  int v7 = 1;
LABEL_9:
  int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 224) + 32))(*(void *)(a1 + 224));
  uint64_t v9 = sub_32A48(18);
  uint64_t v10 = sub_32A48(38);
  char v11 = 0;
  uint64_t v12 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v13 = *(void *)(v9 + 8);
  do
  {
    uint64_t v14 = *(int *)&buf[4 * v12];
    char v15 = v11;
    if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0))
    {
      if ((v13 & v14) == 0) {
        uint64_t v9 = v10;
      }
      if (*(void *)(v9 + 8)) {
        goto LABEL_17;
      }
      goto LABEL_33;
    }
    char v11 = 1;
    uint64_t v12 = 1;
  }
  while ((v15 & 1) == 0);
  if ((v13 & 1) == 0) {
    goto LABEL_33;
  }
LABEL_17:
  uint64_t v16 = *(NSObject **)v9;
  if (!v16 || !os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_33;
  }
  if (v8) {
    double v17 = "muted";
  }
  else {
    double v17 = "unmuted";
  }
  sub_21C8C(v61, v17);
  int v18 = v62;
  char v19 = (void **)v61[0];
  if (v7) {
    double v20 = "muted";
  }
  else {
    double v20 = "unmuted";
  }
  sub_21C8C(__p, v20);
  *(double *)&unsigned int v21 = COERCE_DOUBLE(v61);
  if (v18 < 0) {
    unsigned int v21 = v19;
  }
  if (v60 >= 0) {
    int v22 = __p;
  }
  else {
    int v22 = (void **)__p[0];
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
  *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
  __int16 v64 = 1024;
  int v65 = 576;
  __int16 v66 = 2080;
  double v67 = *(double *)&v21;
  __int16 v68 = 2080;
  int v69 = v22;
  _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d MuteStateModel: currentState = %s, nextState =%s", buf, 0x26u);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  if (v62 < 0)
  {
    operator delete(v61[0]);
    if (v7) {
      goto LABEL_44;
    }
  }
  else
  {
LABEL_33:
    if (v7) {
      goto LABEL_44;
    }
  }
  uint64_t v23 = sub_32A48(18);
  uint64_t v24 = sub_32A48(38);
  char v25 = 0;
  uint64_t v26 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v27 = *(void *)(v23 + 8);
  while (1)
  {
    uint64_t v28 = *(int *)&buf[4 * v26];
    char v29 = v25;
    if (((v27 & v28) != 0) != ((*(void *)(v24 + 8) & v28) != 0)) {
      break;
    }
    char v25 = 1;
    uint64_t v26 = 1;
    if (v29) {
      goto LABEL_40;
    }
  }
  if ((v27 & v28) == 0) {
    uint64_t v23 = v24;
  }
LABEL_40:
  double v30 = *(NSObject **)v23;
  if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    int v31 = *(unsigned __int8 *)(a1 + 201);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v64 = 1024;
    int v65 = 582;
    __int16 v66 = 1024;
    LODWORD(v67) = v31;
    _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Unmuting (explicitly unmuted: %u)", buf, 0x18u);
  }
  (*(void (**)(void))(**(void **)(a1 + 224) + 24))(*(void *)(a1 + 224));
LABEL_44:
  if (*(void *)(a1 + 208))
  {
    uint64_t v32 = sub_32A48(18);
    uint64_t v33 = sub_32A48(38);
    char v34 = 0;
    uint64_t v35 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v36 = *(void *)(v32 + 8);
    while (1)
    {
      uint64_t v37 = *(int *)&buf[4 * v35];
      char v38 = v34;
      if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
        break;
      }
      char v34 = 1;
      uint64_t v35 = 1;
      if (v38) {
        goto LABEL_60;
      }
    }
    if ((v36 & v37) == 0) {
      uint64_t v32 = v33;
    }
LABEL_60:
    int v50 = *(NSObject **)v32;
    if (v50 && os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
      __int16 v64 = 1024;
      int v65 = 511;
      __int16 v66 = 2048;
      double v67 = v4;
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Volume = %f dB, External Volume Handler: Yes", buf, 0x1Cu);
    }
    (*(void (**)(void, float))(a1 + 208))(*(void *)(a1 + 216), *(float *)(a1 + 192));
LABEL_82:
    uint64_t v55 = *(void *)(a1 + 232);
    uint64_t v56 = *(void *)(a1 + 240);
    if (v56)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 16), 1uLL, memory_order_relaxed);
      uint64_t v57 = *(void *)(a1 + 92);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 16), 1uLL, memory_order_relaxed);
      uint64_t v58 = v56;
    }
    else
    {
      uint64_t v58 = 0;
      uint64_t v57 = *(void *)(a1 + 92);
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 1986817377;
    *(void *)&uint8_t buf[4] = v57;
    sub_35BB58(v55, v58);
  }
  int v39 = *(std::__shared_weak_count **)(a1 + 184);
  if (v39)
  {
    uint64_t v40 = std::__shared_weak_count::lock(v39);
    if (v40)
    {
      uint64_t v41 = *(void *)(a1 + 176);
      if (v41)
      {
        int v42 = (*(uint64_t (**)(void))(*(void *)v41 + 136))(*(void *)(a1 + 176));
        if (v42 == 1935895666) {
          float v4 = sub_7953C(v2, v4);
        }
        uint64_t v43 = sub_32A48(18);
        uint64_t v44 = sub_32A48(38);
        char v45 = 0;
        uint64_t v46 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v47 = *(void *)(v43 + 8);
        while (1)
        {
          uint64_t v48 = *(int *)&buf[4 * v46];
          char v49 = v45;
          if (((v47 & v48) != 0) != ((*(void *)(v44 + 8) & v48) != 0)) {
            break;
          }
          char v45 = 1;
          uint64_t v46 = 1;
          if (v49) {
            goto LABEL_72;
          }
        }
        if ((v47 & v48) == 0) {
          uint64_t v43 = v44;
        }
LABEL_72:
        double v53 = *(NSObject **)v43;
        if (v53 && os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          int v54 = "dB";
          *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
          __int16 v64 = 1024;
          int v65 = 522;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          if (v42 == 1935895666) {
            int v54 = "scalar";
          }
          __int16 v66 = 2048;
          double v67 = v4;
          __int16 v68 = 2080;
          int v69 = (void *)v54;
          _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     SW Volume: %f %s", buf, 0x26u);
        }
        if (v4 != *(float *)(a1 + 196) || !*(unsigned char *)(a1 + 200))
        {
          (*(void (**)(uint64_t, float))(*(void *)v41 + 16))(v41, v4);
          *(float *)(a1 + 196) = v4;
          *(unsigned char *)(a1 + 20sub_360D08(&a9, 0) = 1;
        }
        goto LABEL_80;
      }
    }
  }
  else
  {
    uint64_t v40 = 0;
  }
  char v51 = (os_log_t *)sub_32A48(13);
  int v52 = *v51;
  if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "SoftwareOnlyVolumeControl.cpp";
    __int16 v64 = 1024;
    int v65 = 534;
    _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"software volume is required but we have a NULL software volume command\"", buf, 0x12u);
  }
LABEL_80:
  if (v40) {
    sub_4636C(v40);
  }
  goto LABEL_82;
}

void sub_36E1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    sub_4636C(v17);
  }
  _Unwind_Resume(exception_object);
}

double sub_36E220(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v22 = (os_log_t *)sub_32A48(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v41 = "SoftwareOnlyVolumeControl.cpp";
      __int16 v42 = 1024;
      int v43 = 214;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) > *a5)
  {
    char v25 = (os_log_t *)sub_32A48(13);
    uint64_t v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v41 = "SoftwareOnlyVolumeControl.cpp";
      __int16 v42 = 1024;
      int v43 = 215;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"Data size insufficient.\"", buf, 0x12u);
    }
    uint64_t v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v27 = &off_6414D8;
    _OWORD v27[2] = 561211770;
  }
  int v14 = *a2;
  if (*a2 <= 1986098019)
  {
    if (v14 > 1684633186)
    {
      if (v14 == 1684633187) {
        goto LABEL_29;
      }
      if (v14 == 1836414053)
      {
        int v17 = *(unsigned __int8 *)(a1 + 201);
        goto LABEL_34;
      }
      if (v14 != 1983013986) {
        goto LABEL_37;
      }
      sub_796B4(a1 + 120, *(float *)a6);
    }
    else
    {
      if (v14 == 1064725619 || v14 == 1668705648) {
        goto LABEL_16;
      }
      if (v14 != 1684157046)
      {
LABEL_37:
        char v19 = (os_log_t *)sub_32A48(13);
        double v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v41 = "SoftwareOnlyVolumeControl.cpp";
          __int16 v42 = 1024;
          int v43 = 276;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"GetPropertyDataSize() is correct and HasProperty() returned true, but I do not know about it.\"", buf, 0x12u);
        }
        return result;
      }
      float v16 = sub_7953C(a1 + 120, *(float *)a6);
    }
LABEL_25:
    sub_200258(a5, (float *)a6, v16);
    return result;
  }
  if (v14 <= 1986290210)
  {
    if (v14 == 1986098020) {
      goto LABEL_28;
    }
    if (v14 != 1986225518)
    {
      if (v14 == 1986229104)
      {
LABEL_16:
        int v17 = 1;
LABEL_34:
        sub_9EC7C(v17, a5, (_DWORD *)a6);
        return result;
      }
      goto LABEL_37;
    }
LABEL_29:
    int v17 = 0;
    goto LABEL_34;
  }
  if (v14 > 1987013740)
  {
    if (v14 != 2021027692)
    {
      int v15 = 1987013741;
LABEL_23:
      if (v14 == v15)
      {
        float v16 = *(float *)(a1 + 192);
        goto LABEL_25;
      }
      goto LABEL_37;
    }
LABEL_28:
    *a5 = 0;
    return result;
  }
  if (v14 != 1986290211)
  {
    int v15 = 1986817377;
    goto LABEL_23;
  }
  int v13 = *a5;
  if (v13 != (*(unsigned int (**)(uint64_t, int *, void, void))(*(void *)a1 + 32))(a1, a2, 0, 0))
  {
    uint64_t v28 = (os_log_t *)sub_32A48(13);
    char v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = *(void *)a2;
      int v37 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v36);
      int v30 = v39;
      int v31 = (void **)__p[0];
      int v32 = *a5;
      int v33 = (*(uint64_t (**)(uint64_t, int *, void, void))(*(void *)a1 + 32))(a1, a2, 0, 0);
      char v34 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v41 = "SoftwareOnlyVolumeControl.cpp";
      if (v30 < 0) {
        char v34 = v31;
      }
      __int16 v42 = 1024;
      int v43 = 226;
      __int16 v44 = 2080;
      char v45 = v34;
      __int16 v46 = 1024;
      int v47 = v32;
      __int16 v48 = 1024;
      int v49 = v33;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v35 = &off_6414D8;
    v35[2] = 561211770;
  }
  if (*(void *)(a1 + 144)) {
    double v18 = *(float *)(*(void *)(a1 + 128) + 36);
  }
  else {
    double v18 = 0.0;
  }
  *(double *)a6 = v18;
  double v21 = sub_792A4(a1 + 120);
  double result = *(float *)&v21;
  *(double *)(a6 + 8) = result;
  return result;
}

void sub_36E8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_36E8D8(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    char v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "SoftwareOnlyVolumeControl.cpp";
      __int16 v16 = 1024;
      int v17 = 170;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v14, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v3 = *a2;
  uint64_t result = 4;
  if (*a2 <= 1986098019)
  {
    if (v3 > 1684633186)
    {
      BOOL v6 = v3 == 1684633187 || v3 == 1836414053;
      int v7 = 1983013986;
    }
    else
    {
      BOOL v6 = v3 == 1064725619 || v3 == 1668705648;
      int v7 = 1684157046;
    }
    if (v6 || v3 == v7) {
      return result;
    }
    goto LABEL_25;
  }
  if (v3 <= 1986290210)
  {
    if (v3 == 1986098020) {
      return 8;
    }
    if (v3 == 1986225518) {
      return result;
    }
    int v5 = 1986229104;
    goto LABEL_15;
  }
  if (v3 > 1987013740)
  {
    if (v3 == 1987013741) {
      return result;
    }
    if (v3 != 2021027692) {
      goto LABEL_25;
    }
    return 16;
  }
  if (v3 == 1986290211) {
    return 16;
  }
  int v5 = 1986817377;
LABEL_15:
  if (v3 == v5) {
    return result;
  }
LABEL_25:
  uint64_t v9 = (os_log_t *)sub_32A48(13);
  uint64_t v10 = *v9;
  if (!*v9) {
    return 0;
  }
  uint64_t result = os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v14 = 136315394;
    int v15 = "SoftwareOnlyVolumeControl.cpp";
    __int16 v16 = 1024;
    int v17 = 204;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty() returned true, but I do not know about it.\"", (uint8_t *)&v14, 0x12u);
    return 0;
  }
  return result;
}

NSObject *sub_36EB90(void *a1, int *a2)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    __int16 v16 = (os_log_t *)sub_32A48(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      double v20 = "SoftwareOnlyVolumeControl.cpp";
      __int16 v21 = 1024;
      int v22 = 128;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v19, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v4 = *a2;
  int v5 = (&def_1E50E8 + 1);
  if (v4 <= 1986098019)
  {
    if (v4 <= 1684633186)
    {
      if (v4 == 1064725619 || v4 == 1668705648 || v4 == 1684157046) {
        return 0;
      }
      goto LABEL_28;
    }
    if (v4 == 1684633187) {
      return 0;
    }
    if (v4 != 1836414053)
    {
      int v9 = 1983013986;
LABEL_22:
      if (v4 == v9) {
        return 0;
      }
LABEL_28:
      char v11 = (os_log_t *)sub_32A48(13);
      int v5 = *v11;
      if (!*v11) {
        return v5;
      }
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v19 = 136315394;
        double v20 = "SoftwareOnlyVolumeControl.cpp";
        __int16 v21 = 1024;
        int v22 = 160;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty() returned true, but I do not know about it.\"", (uint8_t *)&v19, 0x12u);
      }
      return 0;
    }
  }
  else
  {
    if (v4 > 1986290210)
    {
      if (v4 > 1987013740)
      {
        if (v4 == 1987013741) {
          return v5;
        }
        int v6 = 2021027692;
        goto LABEL_27;
      }
      if (v4 != 1986290211)
      {
        int v6 = 1986817377;
LABEL_27:
        if (v4 == v6) {
          return v5;
        }
        goto LABEL_28;
      }
      return 0;
    }
    if (v4 != 1986098020)
    {
      if (v4 == 1986225518) {
        return 0;
      }
      int v9 = 1986229104;
      goto LABEL_22;
    }
    uint64_t v12 = (std::__shared_weak_count *)a1[23];
    if (!v12) {
      return 0;
    }
    int v13 = std::__shared_weak_count::lock(v12);
    if (!v13) {
      return 0;
    }
    int v14 = v13;
    uint64_t v15 = a1[22];
    if (v15) {
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 72))(v15);
    }
    else {
      int v5 = 0;
    }
    sub_4636C(v14);
  }
  return v5;
}

void sub_36EEB0(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_36EECC(uint64_t a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a2;
  if (*a2 <= 1986098019)
  {
    if (v3 > 1684633186)
    {
      BOOL v4 = v3 == 1684633187 || v3 == 1836414053;
      int v5 = 1983013986;
    }
    else
    {
      BOOL v4 = v3 == 1064725619 || v3 == 1668705648;
      int v5 = 1684157046;
    }
    goto LABEL_17;
  }
  if (v3 > 1986290210)
  {
    if (v3 > 1987013740)
    {
      BOOL v4 = v3 == 2021027692;
      int v5 = 1987013741;
    }
    else
    {
      BOOL v4 = v3 == 1986290211;
      int v5 = 1986817377;
    }
LABEL_17:
    if (v4 || v3 == v5) {
      return 1;
    }
    return v2;
  }
  if (v3 != 1986098020)
  {
    BOOL v4 = v3 == 1986225518;
    int v5 = 1986229104;
    goto LABEL_17;
  }
  int v9 = *(std::__shared_weak_count **)(a1 + 184);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  if (!v10) {
    return 0;
  }
  char v11 = v10;
  uint64_t v12 = *(void *)(a1 + 176);
  if (v12) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 72))(v12);
  }
  else {
    uint64_t v2 = 0;
  }
  sub_4636C(v11);
  return v2;
}

void sub_36F048(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_36F05C(uint64_t a1)
{
  sub_36C358(a1);

  operator delete();
}

uint64_t sub_36F098(uint64_t a1)
{
  uint64_t v2 = sub_35BAC4(a1);
  *(void *)uint64_t v2 = off_6360A8;
  uint64_t v3 = v2 + 80;
  *(void *)(v2 + 8sub_360D08(&a9, 0) = off_636170;
  *(void *)(v2 + 92) = 1869968496;
  *(_OWORD *)(v2 + 104) = xmmword_4E7B80;
  sub_16FEBC(v2 + 120, 0, -55.0, 0.0);
  *(_DWORD *)(a1 + 168) = 2;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 1065353216;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 199) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 24sub_360D08(&a9, 0) = 0;
  *(void *)(a1 + 224) = v3;
  sub_2014A4((uint64_t *)&v6);
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 240);
  *(_OWORD *)(a1 + 232) = v6;
  if (v4) {
    sub_4636C(v4);
  }
  return a1;
}

void sub_36F174(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 240);
  if (v3) {
    sub_4636C(v3);
  }
  BOOL v4 = *(std::__shared_weak_count **)(v1 + 184);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_463E0(*(void **)(v1 + 136));
  sub_FE920(v1);
  _Unwind_Resume(a1);
}

void sub_36F1B0(CFArrayRef *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a1;
  if (a2 == a3)
  {
    *a1 = 0;
  }
  else
  {
    BOOL v4 = a2;
    long long v44 = 0uLL;
    unint64_t v45 = 0;
    unsigned int v43 = *(_DWORD *)a2;
    unint64_t v5 = v43;
    sub_36F718((unsigned __int16 *)&v43);
    unsigned __int16 v6 = 0;
    unint64_t v7 = v5 >> 24;
    int v8 = v4 + 4;
    unint64_t v9 = (v5 >> 24) * (unint64_t)BYTE2(v5);
    unint64_t v10 = -4 - v9;
    do
    {
      __int16 v11 = *v4++;
      v6 += v11;
      ++v10;
    }
    while (v10);
    if (0x10000 - v6 == *(unsigned __int16 *)&v8[v9])
    {
      __int16 v42 = v3;
      if (v7 > (uint64_t)(*((void *)&v44 + 1) - v44) >> 3)
      {
        do
        {
          __int16 v12 = *(_WORD *)v8;
          int v13 = *(_DWORD *)(v8 + 2);
          CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"trim_gain_data_source_id", 24, 0x8000100u, 0);
          if (!v14)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          LODWORD(valuePtr[0]) = v13;
          CFNumberRef v15 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
          CFNumberRef v47 = v15;
          if (!v15)
          {
            uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v41, "Could not construct");
          }
          sub_36F904(buf, v14, (const void **)&v47);
          CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"trim_gain_db", 12, 0x8000100u, 0);
          if (!v16)
          {
            char v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v38, "Could not construct");
          }
          *(float *)int valuePtr = (float)v12 * 0.1;
          CFNumberRef v17 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFNumberRef v46 = v17;
          if (!v17)
          {
            char v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v39, "Could not construct");
          }
          sub_36F904(&buf[16], v16, (const void **)&v46);
          valuePtr[0] = buf;
          valuePtr[1] = 2;
          CFDictionaryRef v18 = sub_4D3D8((uint64_t)valuePtr);
          for (uint64_t i = 0; i != -32; i -= 16)
          {
            double v20 = *(const void **)&buf[i + 24];
            if (v20) {
              CFRelease(v20);
            }
            __int16 v21 = *(const void **)&buf[i + 16];
            if (v21) {
              CFRelease(v21);
            }
          }
          CFRelease(v17);
          CFRelease(v16);
          CFRelease(v15);
          CFRelease(v14);
          int v22 = (void *)*((void *)&v44 + 1);
          if (*((void *)&v44 + 1) >= v45)
          {
            uint64_t v24 = (void *)v44;
            uint64_t v25 = (uint64_t)(*((void *)&v44 + 1) - v44) >> 3;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 61) {
              sub_60548();
            }
            uint64_t v27 = v45 - v44;
            if ((uint64_t)(v45 - v44) >> 2 > v26) {
              unint64_t v26 = v27 >> 2;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            char v51 = &v45;
            if (v28)
            {
              unint64_t v28 = (unint64_t)sub_106EC(v28);
              int v22 = (void *)*((void *)&v44 + 1);
              uint64_t v24 = (void *)v44;
            }
            else
            {
              uint64_t v29 = 0;
            }
            int v30 = (CFDictionaryRef *)(v28 + 8 * v25);
            unint64_t v31 = v28 + 8 * v29;
            unint64_t v50 = v31;
            CFDictionaryRef *v30 = v18;
            *(void *)&buf[16] = v30 + 1;
            if (v22 == v24)
            {
              uint64_t v23 = v30 + 1;
            }
            else
            {
              do
              {
                CFDictionaryRef v32 = (const __CFDictionary *)*--v22;
                *--int v30 = v32;
                void *v22 = 0;
              }
              while (v22 != v24);
              uint64_t v23 = *(void **)&buf[16];
              unint64_t v31 = v50;
            }
            long long v33 = v44;
            *(void *)&long long v44 = v30;
            *((void *)&v44 + 1) = v23;
            *(_OWORD *)&buf[8] = v33;
            unint64_t v34 = v45;
            unint64_t v45 = v31;
            unint64_t v50 = v34;
            *(void *)AudioObjectPropertyAddress buf = v33;
            sub_A78F0((uint64_t)buf);
            *((void *)&v44 + 1) = v23;
          }
          else
          {
            **((void **)&v44 + 1) = v18;
            uint64_t v23 = v22 + 1;
            *((void *)&v44 + 1) = v23;
          }
          v8 += 6;
        }
        while (v7 > (uint64_t)((uint64_t)v23 - v44) >> 3);
      }
      CFArrayRef v35 = sub_36F86C((uint64_t **)&v44);
      uint64_t v3 = v42;
    }
    else
    {
      uint64_t v36 = (os_log_t *)sub_32A48(13);
      int v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 390;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d FDR Checksum failed for data returned from EDT! Returning empty ascf::ArrayRef", buf, 0x12u);
      }
      CFArrayRef v35 = 0;
      CFArrayRef *v3 = 0;
    }
    CFArrayRef *v3 = v35;
    *(void *)AudioObjectPropertyAddress buf = &v44;
    sub_A7940((void ***)buf);
  }
}

void sub_36F684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a15;
  sub_A7940(&a21);
  _Unwind_Resume(a1);
}

void sub_36F718(unsigned __int16 *a1)
{
  if (*a1 - 1 >= 3)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v4 = *a1;
        int v7 = 136315650;
        int v8 = "FDRDataImpl.cpp";
        __int16 v9 = 1024;
        int v10 = 133;
        __int16 v11 = 1024;
        int v12 = v4;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"FDRData accessor returned version: %d\"", (uint8_t *)&v7, 0x18u);
      }
    }
  }
  if (!*((unsigned char *)a1 + 2))
  {
    unint64_t v5 = (os_log_t *)sub_32A48(13);
    unsigned __int16 v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        int v8 = "FDRDataImpl.cpp";
        __int16 v9 = 1024;
        int v10 = 134;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"FDRData accessor for TrimGains has a size of zero!\"", (uint8_t *)&v7, 0x12u);
      }
    }
  }
}

CFArrayRef sub_36F86C(uint64_t **a1)
{
  sub_4ECEC(&__p, a1[1] - *a1);
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    int v4 = __p;
    do
    {
      uint64_t v5 = *v2++;
      *v4++ = v5;
    }
    while (v2 != v3);
  }
  CFArrayRef v6 = sub_55EFC((const void **)__p, (uint64_t)v9);
  if (__p)
  {
    __int16 v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_36F8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_36F904(void *a1, CFTypeRef cf, const void **a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  CFArrayRef v6 = *a3;
  if (v6) {
    CFRetain(v6);
  }
  a1[1] = v6;
  return a1;
}

void sub_36F964(CFArrayRef *a1, const __CFArray **a2, const __CFArray **a3)
{
  CFArrayRef v4 = *a2;
  if (*a2)
  {
    int64x2_t v44 = 0uLL;
    v45[0] = 0;
    CFIndex Count = CFArrayGetCount(v4);
    CFIndex v7 = Count;
    CFArrayRef v8 = *a2;
    if (v8)
    {
      CFIndex v9 = CFArrayGetCount(v8);
      if (!v7) {
        goto LABEL_30;
      }
    }
    else
    {
      CFIndex v9 = 0;
      if (!Count) {
        goto LABEL_30;
      }
    }
    unint64_t v11 = 0;
    do
    {
      if (v4 == v8 && v11 == v9) {
        break;
      }
      sub_36FD1C(&cf, v4, v11);
      if (v44.i64[1] >= v45[0])
      {
        uint64_t v13 = (v44.i64[1] - v44.i64[0]) >> 3;
        if ((unint64_t)(v13 + 1) >> 61) {
          sub_60548();
        }
        unint64_t v14 = (v45[0] - v44.i64[0]) >> 2;
        if (v14 <= v13 + 1) {
          unint64_t v14 = v13 + 1;
        }
        unint64_t v15 = v45[0] - v44.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL ? 0x1FFFFFFFFFFFFFFFLL : v14;
        unint64_t v50 = v45;
        if (v15)
        {
          CFNumberRef v17 = sub_106EC(v15);
        }
        else
        {
          CFNumberRef v17 = 0;
          uint64_t v16 = 0;
        }
        CFDictionaryRef v18 = (char *)&v17[v16];
        int v49 = v18;
        int v19 = sub_36FDE0(&v17[v13], cf);
        int v12 = v19 + 1;
        v48.i64[1] = (uint64_t)(v19 + 1);
        double v20 = (void *)v44.i64[1];
        __int16 v21 = (void *)v44.i64[0];
        if (v44.i64[1] == v44.i64[0])
        {
          int64x2_t v23 = vdupq_n_s64(v44.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v22 = *--v20;
            *--int v19 = v22;
            void *v20 = 0;
          }
          while (v20 != v21);
          int64x2_t v23 = v44;
          int v12 = (void *)v48.i64[1];
          CFDictionaryRef v18 = v49;
        }
        v44.i64[0] = (uint64_t)v19;
        v44.i64[1] = (uint64_t)v12;
        int64x2_t v48 = v23;
        uint64_t v24 = (char *)v45[0];
        v45[0] = v18;
        int v49 = v24;
        CFNumberRef v47 = (int64x2_t *)v23.i64[0];
        sub_A78F0((uint64_t)&v47);
      }
      else
      {
        int v12 = sub_36FDE0((void *)v44.i64[1], cf) + 1;
      }
      v44.i64[1] = (uint64_t)v12;
      if (cf) {
        CFRelease(cf);
      }
      ++v11;
    }
    while (v11 != v7);
LABEL_30:
    CFArrayRef v10 = *a3;
    if (!*a3) {
      goto LABEL_57;
    }
    goto LABEL_31;
  }
  CFArrayRef v10 = *a3;
  if (*a3)
  {
    int64x2_t v44 = 0uLL;
    v45[0] = 0;
LABEL_31:
    CFIndex v25 = CFArrayGetCount(v10);
    CFIndex v26 = v25;
    CFArrayRef v27 = *a3;
    if (v27)
    {
      CFIndex v28 = CFArrayGetCount(v27);
      if (!v26) {
        goto LABEL_57;
      }
LABEL_35:
      unint64_t v29 = 0;
      do
      {
        if (v10 == v27 && v29 == v28) {
          break;
        }
        sub_36FD1C(&cf, v10, v29);
        if (v44.i64[1] >= v45[0])
        {
          uint64_t v31 = (v44.i64[1] - v44.i64[0]) >> 3;
          if ((unint64_t)(v31 + 1) >> 61) {
            sub_60548();
          }
          unint64_t v32 = (v45[0] - v44.i64[0]) >> 2;
          if (v32 <= v31 + 1) {
            unint64_t v32 = v31 + 1;
          }
          unint64_t v33 = v45[0] - v44.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL ? 0x1FFFFFFFFFFFFFFFLL : v32;
          unint64_t v50 = v45;
          if (v33)
          {
            CFArrayRef v35 = sub_106EC(v33);
          }
          else
          {
            CFArrayRef v35 = 0;
            uint64_t v34 = 0;
          }
          uint64_t v36 = (char *)&v35[v34];
          int v49 = v36;
          int v37 = sub_36FDE0(&v35[v31], cf);
          int v30 = v37 + 1;
          v48.i64[1] = (uint64_t)(v37 + 1);
          char v38 = (void *)v44.i64[1];
          char v39 = (void *)v44.i64[0];
          if (v44.i64[1] == v44.i64[0])
          {
            int64x2_t v41 = vdupq_n_s64(v44.u64[1]);
          }
          else
          {
            do
            {
              uint64_t v40 = *--v38;
              *--int v37 = v40;
              void *v38 = 0;
            }
            while (v38 != v39);
            int64x2_t v41 = v44;
            int v30 = (void *)v48.i64[1];
            uint64_t v36 = v49;
          }
          v44.i64[0] = (uint64_t)v37;
          v44.i64[1] = (uint64_t)v30;
          int64x2_t v48 = v41;
          __int16 v42 = (char *)v45[0];
          v45[0] = v36;
          int v49 = v42;
          CFNumberRef v47 = (int64x2_t *)v41.i64[0];
          sub_A78F0((uint64_t)&v47);
        }
        else
        {
          int v30 = sub_36FDE0((void *)v44.i64[1], cf) + 1;
        }
        v44.i64[1] = (uint64_t)v30;
        if (cf) {
          CFRelease(cf);
        }
        ++v29;
      }
      while (v29 != v26);
      goto LABEL_57;
    }
    CFIndex v28 = 0;
    if (v25) {
      goto LABEL_35;
    }
LABEL_57:
    *a1 = sub_36F86C((uint64_t **)&v44);
    CFNumberRef v47 = &v44;
    sub_A7940((void ***)&v47);
    return;
  }
  *a1 = 0;
}

void sub_36FCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a11;
  sub_A7940(&a15);
  _Unwind_Resume(a1);
}

void *sub_36FD1C(void *a1, CFArrayRef theArray, unint64_t a3)
{
  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (CFIndex v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_68BF0(exception);
  }
  CFRetain(ValueAtIndex);

  return sub_22084(a1, v7);
}

void sub_36FDC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_36FDE0(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

void sub_36FE1C(CFArrayRef *a1)
{
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v2)
  {
    CFArrayRef v10 = (os_log_t *)sub_32A48(13);
    unint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&unsigned char buf[20] = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-thiele-small-0", 22, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v3;
  if (!v3)
  {
    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not construct");
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, v3, kCFAllocatorDefault, 0);
  sub_1534E8(&cf, CFProperty);
  if (!cf)
  {
    unint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  sub_16E0A8(v170, cf);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v3);
  IOObjectRelease(v2);
  uint64_t v5 = (void *)v170[0];
  if (v170[0] == v170[1])
  {
    CFTypeRef v164 = 0;
  }
  else
  {
    sub_372444((CFArrayRef *)&v164, (unsigned __int8 *)v170[0], (unsigned __int8 *)v170[1]);
    uint64_t v6 = sub_32A48(17);
    if (*(unsigned char *)(v6 + 8))
    {
      CFIndex v7 = *(NSObject **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          CFStringRef v8 = CFCopyDescription(v164);
          sub_20B40((uint64_t)&cf, v8);
          if (v8) {
            CFRelease(v8);
          }
          p_CFTypeRef cf = &cf;
          if (v167 < 0) {
            p_CFTypeRef cf = (CFTypeRef *)cf;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 285;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&unsigned char buf[20] = "IODeviceTree:/product/audio";
          *(_WORD *)&unsigned char buf[28] = 2080;
          *(void *)&buf[30] = "speaker-thiele-small-0";
          *(_WORD *)&buf[38] = 2080;
          int v188 = p_cf;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
          if (SHIBYTE(v167) < 0) {
            operator delete((void *)cf);
          }
        }
      }
    }
  }
  if (v5) {
    operator delete(v5);
  }
  CFTypeRef v163 = 0;
  io_registry_entry_t v15 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v15)
  {
    char v84 = (os_log_t *)sub_32A48(13);
    int v85 = *v84;
    if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&unsigned char buf[20] = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    uint64_t v86 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v86, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-thiele-small-1", 22, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v16;
  if (!v16)
  {
    int v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v87, "Could not construct");
  }
  CFTypeRef v17 = IORegistryEntryCreateCFProperty(v15, v16, kCFAllocatorDefault, 0);
  sub_1534E8(valuePtr, v17);
  if (!valuePtr[0])
  {
    char v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v88, "Could not construct");
  }
  sub_16E0A8(v170, valuePtr[0]);
  if (valuePtr[0]) {
    CFRelease(valuePtr[0]);
  }
  CFRelease(v16);
  IOObjectRelease(v15);
  CFDictionaryRef v18 = (void *)v170[0];
  std::string v166 = 0;
  uint64_t v167 = 0;
  CFTypeRef cf = 0;
  if (v170[0] != v170[1]) {
    sub_36A9D8(&cf, v170[0], (uint64_t)v170[1], (char *)v170[1] - (char *)v170[0]);
  }
  if (v18) {
    operator delete(v18);
  }
  if (v166 == cf || (unint64_t)(v166 - (unsigned char *)cf) <= 3)
  {
    if (cf) {
      operator delete((void *)cf);
    }
  }
  else
  {
    int v19 = *(unsigned __int16 *)cf;
    operator delete((void *)cf);
    if (v19)
    {
      if (v19 == 2)
      {
        io_registry_entry_t v70 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
        if (!v70)
        {
          char v123 = (os_log_t *)sub_32A48(13);
          char v124 = *v123;
          if (*v123 && os_log_type_enabled(*v123, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 47;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&unsigned char buf[20] = "IODeviceTree:/product/audio";
            _os_log_impl(&def_1E50E8, v124, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
          }
          char v125 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v125, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
        }
        CFStringRef v71 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-thiele-small-1", 22, 0x8000100u, 0);
        *(void *)AudioObjectPropertyAddress buf = v71;
        if (!v71)
        {
          char v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v127, "Could not construct");
        }
        CFTypeRef v72 = IORegistryEntryCreateCFProperty(v70, v71, kCFAllocatorDefault, 0);
        sub_1534E8(&cf, v72);
        if (!cf)
        {
          char v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v129, "Could not construct");
        }
        sub_16E0A8(v170, cf);
        if (cf) {
          CFRelease(cf);
        }
        CFRelease(v71);
        IOObjectRelease(v70);
        int v73 = (void *)v170[0];
        if (v170[0] == v170[1])
        {
          valuePtr[0] = 0;
        }
        else
        {
          sub_372444((CFArrayRef *)valuePtr, (unsigned __int8 *)v170[0], (unsigned __int8 *)v170[1]);
          uint64_t v74 = sub_32A48(17);
          if (*(unsigned char *)(v74 + 8))
          {
            uint64_t v75 = *(NSObject **)v74;
            if (*(void *)v74)
            {
              if (os_log_type_enabled(*(os_log_t *)v74, OS_LOG_TYPE_DEBUG))
              {
                CFStringRef v76 = CFCopyDescription(valuePtr[0]);
                sub_20B40((uint64_t)&cf, v76);
                if (v76) {
                  CFRelease(v76);
                }
                uint64_t v77 = &cf;
                if (v167 < 0) {
                  uint64_t v77 = (CFTypeRef *)cf;
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 285;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&unsigned char buf[20] = "IODeviceTree:/product/audio";
                *(_WORD *)&unsigned char buf[28] = 2080;
                *(void *)&buf[30] = "speaker-thiele-small-1";
                *(_WORD *)&buf[38] = 2080;
                int v188 = v77;
                _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
                if (SHIBYTE(v167) < 0) {
                  operator delete((void *)cf);
                }
              }
            }
          }
        }
        if (v73) {
          operator delete(v73);
        }
        CFTypeRef v130 = v163;
        CFTypeRef v163 = valuePtr[0];
        valuePtr[0] = v130;
      }
      else
      {
        if (v19 != 3)
        {
          char v117 = (os_log_t *)sub_32A48(13);
          char v118 = *v117;
          if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 354;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = v19;
            *(_WORD *)&unsigned char buf[24] = 2080;
            *(void *)&buf[26] = "speaker-thiele-small-1";
            _os_log_impl(&def_1E50E8, v118, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unrecognized FDRVersion: %u using key %s\"", buf, 0x22u);
          }
          char v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v119, "Unrecognized FDRVersion: %u using key %s");
        }
        io_registry_entry_t v20 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
        if (!v20)
        {
          char v120 = (os_log_t *)sub_32A48(13);
          char v121 = *v120;
          if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 47;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&unsigned char buf[20] = "IODeviceTree:/product/audio";
            _os_log_impl(&def_1E50E8, v121, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
          }
          char v122 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v122, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
        }
        CFStringRef v21 = CFStringCreateWithBytes(0, (const UInt8 *)"speaker-thiele-small-1", 22, 0x8000100u, 0);
        *(void *)AudioObjectPropertyAddress buf = v21;
        if (!v21)
        {
          char v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v126, "Could not construct");
        }
        CFTypeRef v22 = IORegistryEntryCreateCFProperty(v20, v21, kCFAllocatorDefault, 0);
        sub_1534E8(v170, v22);
        if (!v170[0])
        {
          char v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v128, "Could not construct");
        }
        sub_16E0A8(&cf, v170[0]);
        if (v170[0]) {
          CFRelease(v170[0]);
        }
        CFRelease(v21);
        IOObjectRelease(v20);
        int64x2_t v23 = (unsigned __int8 *)cf;
        if (cf == v166)
        {
          CFArrayRef v161 = 0;
        }
        else
        {
          v170[0] = 0;
          v170[1] = 0;
          char v171 = 0;
          unsigned int v169 = *(_DWORD *)cf;
          unint64_t v24 = v169;
          sub_36F718((unsigned __int16 *)&v169);
          unsigned __int16 v25 = 0;
          CFIndex v26 = (unsigned __int16 *)(v23 + 4);
          unint64_t v27 = (v24 >> 24) * (unint64_t)BYTE2(v24);
          unint64_t v134 = v24 >> 24;
          unint64_t v28 = -4 - v27;
          do
          {
            __int16 v29 = *v23++;
            v25 += v29;
            ++v28;
          }
          while (v28);
          if (0x10000 - v25 == *(unsigned __int16 *)((char *)v26 + v27))
          {
            if (v134 > ((char *)v170[1] - (char *)v170[0]) >> 3)
            {
              char v133 = a1;
              do
              {
                unsigned int v30 = *v26;
                unsigned int v31 = v26[1];
                unsigned int v32 = v26[2];
                unsigned int v33 = v26[3];
                unsigned int v34 = v26[4];
                unsigned int v35 = v26[5];
                unsigned int v36 = v26[6];
                int v37 = v26;
                unsigned int v38 = v26[7];
                unsigned int v39 = v37[8];
                unsigned int v140 = v37[9];
                unsigned int v137 = v37[11];
                unsigned int v138 = v37[10];
                unsigned int v136 = v37[12];
                char v135 = v37;
                int v40 = *(_DWORD *)(v37 + 13);
                CFStringRef v160 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_data_source_id", 27, 0x8000100u, 0);
                if (!v160)
                {
                  uint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v91, "Could not construct");
                }
                LODWORD(valuePtr[0]) = v40;
                CFNumberRef v150 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                CFNumberRef v185 = v150;
                if (!v150)
                {
                  int v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v92, "Could not construct");
                }
                sub_36F904(buf, v160, (const void **)&v185);
                CFStringRef v159 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_fs", 15, 0x8000100u, 0);
                if (!v159)
                {
                  char v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v90, "Could not construct");
                }
                *(float *)int valuePtr = (float)v30 * 0.1;
                CFNumberRef v149 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v184 = v149;
                if (!v149)
                {
                  int v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v93, "Could not construct");
                }
                sub_36F904(&buf[16], v159, (const void **)&v184);
                CFStringRef v158 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_qts", 16, 0x8000100u, 0);
                if (!v158)
                {
                  uint64_t v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v89, "Could not construct");
                }
                *(float *)int valuePtr = (float)v31 * 0.001;
                CFNumberRef v148 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v183 = v148;
                if (!v148)
                {
                  char v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v94, "Could not construct");
                }
                sub_36F904(&buf[32], v158, (const void **)&v183);
                CFStringRef v157 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_re", 15, 0x8000100u, 0);
                if (!v157)
                {
                  char v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v96, "Could not construct");
                }
                *(float *)int valuePtr = (float)v32 * 0.001;
                CFNumberRef v147 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v182 = v147;
                if (!v147)
                {
                  uint64_t v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v95, "Could not construct");
                }
                sub_36F904(&v189, v157, (const void **)&v182);
                CFStringRef v156 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_t", 14, 0x8000100u, 0);
                if (!v156)
                {
                  AudioObjectID v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v99, "Could not construct");
                }
                *(float *)int valuePtr = (float)v33 * 0.01;
                CFNumberRef v146 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v181 = v146;
                if (!v146)
                {
                  uint64_t v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v103, "Could not construct");
                }
                sub_36F904(&v190, v156, (const void **)&v181);
                CFStringRef v155 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_le", 15, 0x8000100u, 0);
                if (!v155)
                {
                  char v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v108, "Could not construct");
                }
                *(float *)int valuePtr = (float)v34 * 0.01;
                CFNumberRef v145 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v180 = v145;
                if (!v145)
                {
                  uint64_t v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v100, "Could not construct");
                }
                sub_36F904(&v191, v155, (const void **)&v180);
                CFStringRef v154 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_kms", 16, 0x8000100u, 0);
                if (!v154)
                {
                  int v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v97, "Could not construct");
                }
                *(float *)int valuePtr = (float)v35;
                CFNumberRef v144 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v179 = v144;
                if (!v144)
                {
                  int v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v106, "Could not construct");
                }
                sub_36F904(&v192, v154, (const void **)&v179);
                CFStringRef v153 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_mms", 16, 0x8000100u, 0);
                if (!v153)
                {
                  int v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v111, "Could not construct");
                }
                *(float *)int valuePtr = (float)v36 * 0.0001;
                CFNumberRef v143 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v178 = v143;
                if (!v143)
                {
                  char v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v104, "Could not construct");
                }
                sub_36F904(&v193, v153, (const void **)&v178);
                CFStringRef v152 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_bi", 15, 0x8000100u, 0);
                if (!v152)
                {
                  __int16 v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v112, "Could not construct");
                }
                *(float *)int valuePtr = (float)v38 * 0.0001;
                CFNumberRef v41 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v177 = v41;
                if (!v41)
                {
                  __int16 v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v105, "Could not construct");
                }
                sub_36F904(&v194, v152, (const void **)&v177);
                CFStringRef v151 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_rms", 16, 0x8000100u, 0);
                if (!v151)
                {
                  int v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v101, "Could not construct");
                }
                *(float *)int valuePtr = (float)v39 * 0.001;
                CFNumberRef v142 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v176 = v142;
                if (!v142)
                {
                  uint64_t v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v98, "Could not construct");
                }
                sub_36F904(&v195, v151, (const void **)&v176);
                CFStringRef v42 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_crest", 18, 0x8000100u, 0);
                if (!v42)
                {
                  BOOL v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v109, "Could not construct");
                }
                *(float *)int valuePtr = (float)v140 * 0.001;
                CFNumberRef v43 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v175 = v43;
                if (!v43)
                {
                  int v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v102, "Could not construct");
                }
                sub_36F904(&v196, v42, (const void **)&v175);
                CFStringRef v44 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_coffset", 20, 0x8000100u, 0);
                if (!v44)
                {
                  __int16 v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v110, "Could not construct");
                }
                *(float *)int valuePtr = (float)v138 * 0.001;
                CFNumberRef v45 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v174 = v45;
                if (!v45)
                {
                  __int16 v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v107, "Could not construct");
                }
                sub_36F904(&v197, v44, (const void **)&v174);
                CFStringRef v46 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_cmin", 17, 0x8000100u, 0);
                if (!v46)
                {
                  char v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v116, "Could not construct");
                }
                *(float *)int valuePtr = (float)v137 * 0.001;
                CFNumberRef v47 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v173 = v47;
                if (!v47)
                {
                  std::condition_variable v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v114, "Could not construct");
                }
                sub_36F904(&v198, v46, (const void **)&v173);
                CFStringRef v48 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_cmax", 17, 0x8000100u, 0);
                if (!v48)
                {
                  std::mutex v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v115, "Could not construct");
                }
                *(float *)int valuePtr = (float)v136 * 0.001;
                CFNumberRef v49 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
                CFNumberRef v172 = v49;
                if (!v49)
                {
                  AudioObjectID v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v113, "Could not construct");
                }
                sub_36F904(v199, v48, (const void **)&v172);
                valuePtr[0] = buf;
                valuePtr[1] = &dword_C + 2;
                CFDictionaryRef v139 = sub_4D3D8((uint64_t)valuePtr);
                CFNumberRef v141 = v41;
                uint64_t v50 = 0;
                CFDictionaryRef v168 = v139;
                do
                {
                  char v51 = (const void *)v199[v50 + 1];
                  if (v51) {
                    CFRelease(v51);
                  }
                  int v52 = (const void *)v199[v50];
                  if (v52) {
                    CFRelease(v52);
                  }
                  v50 -= 2;
                }
                while (v50 != -28);
                CFRelease(v49);
                a1 = v133;
                CFRelease(v48);
                CFRelease(v47);
                CFRelease(v46);
                CFRelease(v45);
                CFRelease(v44);
                CFRelease(v43);
                CFRelease(v42);
                CFRelease(v142);
                CFRelease(v151);
                CFRelease(v141);
                CFRelease(v152);
                CFRelease(v143);
                CFRelease(v153);
                CFRelease(v144);
                CFRelease(v154);
                CFRelease(v145);
                CFRelease(v155);
                CFRelease(v146);
                CFRelease(v156);
                CFRelease(v147);
                CFRelease(v157);
                CFRelease(v148);
                CFRelease(v158);
                CFRelease(v149);
                CFRelease(v159);
                CFRelease(v150);
                CFRelease(v160);
                double v53 = v170[1];
                if (v170[1] >= v171)
                {
                  uint64_t v55 = v170[0];
                  int64_t v56 = ((char *)v170[1] - (char *)v170[0]) >> 3;
                  unint64_t v57 = v56 + 1;
                  if ((unint64_t)(v56 + 1) >> 61) {
                    sub_60548();
                  }
                  uint64_t v58 = v171 - (char *)v170[0];
                  if ((v171 - (char *)v170[0]) >> 2 > v57) {
                    unint64_t v57 = v58 >> 2;
                  }
                  if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v59 = v57;
                  }
                  *(void *)&unsigned char buf[32] = &v171;
                  if (v59)
                  {
                    unint64_t v59 = (unint64_t)sub_106EC(v59);
                    uint64_t v55 = v170[0];
                    double v53 = v170[1];
                  }
                  else
                  {
                    uint64_t v60 = 0;
                  }
                  uint64_t v61 = (CFDictionaryRef *)(v59 + 8 * v56);
                  char v62 = (unsigned char *)(v59 + 8 * v60);
                  *(void *)&unsigned char buf[24] = v62;
                  CFDictionaryRef *v61 = v139;
                  CFDictionaryRef v168 = 0;
                  *(void *)&buf[16] = v61 + 1;
                  if (v53 == v55)
                  {
                    CFDictionaryRef v64 = 0;
                    CFTypeRef v54 = v61 + 1;
                  }
                  else
                  {
                    do
                    {
                      CFDictionaryRef v63 = (const __CFDictionary *)*--v53;
                      *--uint64_t v61 = v63;
                      void *v53 = 0;
                    }
                    while (v53 != v55);
                    CFTypeRef v54 = *(CFTypeRef *)&buf[16];
                    char v62 = *(unsigned char **)&buf[24];
                    CFDictionaryRef v64 = v168;
                  }
                  long long v65 = *(_OWORD *)v170;
                  v170[0] = v61;
                  v170[1] = v54;
                  *(_OWORD *)&buf[8] = v65;
                  __int16 v66 = v171;
                  char v171 = v62;
                  *(void *)&unsigned char buf[24] = v66;
                  *(void *)AudioObjectPropertyAddress buf = v65;
                  sub_A78F0((uint64_t)buf);
                  v170[1] = v54;
                  if (v64)
                  {
                    CFRelease(v64);
                    CFTypeRef v54 = v170[1];
                  }
                }
                else
                {
                  *(void *)v170[1] = v139;
                  CFTypeRef v54 = v53 + 1;
                  v170[1] = v54;
                }
                CFIndex v26 = v135 + 15;
              }
              while (v134 > (int64_t)((uint64_t)v54 - (unint64_t)v170[0]) >> 3);
            }
            CFArrayRef v67 = sub_36F86C((uint64_t **)v170);
          }
          else
          {
            char v78 = (os_log_t *)sub_32A48(13);
            unsigned int v79 = *v78;
            if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 390;
              _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d FDR Checksum failed for data returned from EDT! Returning empty ascf::ArrayRef", buf, 0x12u);
            }
            CFArrayRef v67 = 0;
          }
          CFArrayRef v161 = v67;
          *(void *)AudioObjectPropertyAddress buf = v170;
          sub_A7940((void ***)buf);
          uint64_t v80 = sub_32A48(17);
          if (*(unsigned char *)(v80 + 8))
          {
            int v81 = *(NSObject **)v80;
            if (*(void *)v80)
            {
              if (os_log_type_enabled(*(os_log_t *)v80, OS_LOG_TYPE_DEBUG))
              {
                CFStringRef v82 = CFCopyDescription(v67);
                sub_20B40((uint64_t)v170, v82);
                if (v82) {
                  CFRelease(v82);
                }
                char v83 = v170;
                if (SHIBYTE(v171) < 0) {
                  char v83 = (CFTypeRef *)v170[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 285;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&unsigned char buf[20] = "IODeviceTree:/product/audio";
                *(_WORD *)&unsigned char buf[28] = 2080;
                *(void *)&buf[30] = "speaker-thiele-small-1";
                *(_WORD *)&buf[38] = 2080;
                int v188 = v83;
                _os_log_impl(&def_1E50E8, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d ascf::make_DictionaryRef description from EDT Path: \"%s\" Key: \"%s\": %s", buf, 0x30u);
                if (SHIBYTE(v171) < 0) {
                  operator delete((void *)v170[0]);
                }
              }
            }
          }
        }
        if (cf) {
          operator delete((void *)cf);
        }
        CFArrayRef v132 = v161;
        CFTypeRef v131 = v163;
        CFTypeRef v162 = v163;
        CFTypeRef v163 = v132;
        if (v162) {
          CFRelease(v131);
        }
      }
      goto LABEL_196;
    }
  }
  __int16 v68 = (os_log_t *)sub_32A48(17);
  int v69 = *v68;
  if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 344;
    _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Speaker_SpPT version is returning kVersionUnknown", buf, 0x12u);
  }
LABEL_196:
  sub_36F964(a1, (const __CFArray **)&v164, (const __CFArray **)&v163);
  if (v163) {
    CFRelease(v163);
  }
  if (v164) {
    CFRelease(v164);
  }
}

void sub_3720D8()
{
}

void sub_372118(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    JUMPOUT(0x37243CLL);
  }
  JUMPOUT(0x372434);
}

void sub_372204()
{
  __cxa_free_exception(v1);
  sub_D7B54((const void **)&STACK[0x210]);
  sub_6393C((const void **)&STACK[0x220]);
  IOObjectRelease(v0);
  JUMPOUT(0x372328);
}

void sub_37221C()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x372320);
}

void sub_372238()
{
  if (v0) {
    JUMPOUT(0x372244);
  }
  JUMPOUT(0x3722DCLL);
}

void sub_3722CC()
{
}

void sub_3722D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,const void *a50,const void *a51)
{
}

void sub_3722F0()
{
}

void sub_372304(void *a1, int a2)
{
  if (a2 == 1)
  {
    io_registry_entry_t v2 = __cxa_begin_catch(a1);
    CFStringRef v3 = (os_log_t *)sub_32A48(17);
    CFArrayRef v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v2 + 16))(v2);
      int v6 = 136316162;
      CFIndex v7 = "EDTUtilsImpl.h";
      __int16 v8 = 1024;
      int v9 = 74;
      __int16 v10 = 2080;
      uint64_t v11 = v5;
      __int16 v12 = 2080;
      __int16 v13 = 2080;
      unint64_t v14 = "speaker-thiele-small-1";
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d EDT Accessor error '%s' for path: %s ; key: %s did not return any data",
        (uint8_t *)&v6,
        0x30u);
    }
    __cxa_end_catch();
    JUMPOUT(0x3703C8);
  }
  JUMPOUT(0x3722DCLL);
}

void sub_372310()
{
}

void sub_372414()
{
}

void sub_37242C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_372444(CFArrayRef *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3)
  {
    *a1 = 0;
  }
  else
  {
    CFStringRef v3 = a2;
    long long v85 = 0uLL;
    unint64_t v86 = 0;
    unsigned int v84 = *(_DWORD *)a2;
    unint64_t v4 = v84;
    sub_36F718((unsigned __int16 *)&v84);
    unsigned __int16 v5 = 0;
    int v6 = (unsigned __int16 *)(v3 + 4);
    unint64_t v7 = (v4 >> 24) * (unint64_t)BYTE2(v4);
    unint64_t v68 = v4 >> 24;
    unint64_t v8 = -4 - v7;
    do
    {
      __int16 v9 = *v3++;
      v5 += v9;
      ++v8;
    }
    while (v8);
    if (0x10000 - v5 == *(unsigned __int16 *)((char *)v6 + v7))
    {
      if (v68 > (uint64_t)(*((void *)&v85 + 1) - v85) >> 3)
      {
        do
        {
          unsigned int v10 = *v6;
          unsigned int v11 = v6[1];
          unsigned int v12 = v6[2];
          unsigned int v13 = v6[3];
          unsigned int v14 = v6[4];
          unsigned int v15 = v6[5];
          unsigned int v16 = v6[6];
          unsigned int v17 = v6[7];
          unsigned int v69 = v6[8];
          int v18 = *(_DWORD *)(v6 + 9);
          CFStringRef v83 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_data_source_id", 27, 0x8000100u, 0);
          if (!v83)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
          LODWORD(valuePtr[0]) = v18;
          CFNumberRef v76 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
          CFNumberRef v96 = v76;
          if (!v76)
          {
            uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v50, "Could not construct");
          }
          sub_36F904(buf, v83, (const void **)&v96);
          CFStringRef v82 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_fs", 15, 0x8000100u, 0);
          if (!v82)
          {
            CFStringRef v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v48, "Could not construct");
          }
          *(float *)int valuePtr = (float)v10 * 0.1;
          CFNumberRef v75 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFNumberRef v95 = v75;
          if (!v75)
          {
            char v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v51, "Could not construct");
          }
          sub_36F904(&buf[16], v82, (const void **)&v95);
          CFStringRef v81 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_qts", 16, 0x8000100u, 0);
          if (!v81)
          {
            CFNumberRef v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v47, "Could not construct");
          }
          *(float *)int valuePtr = (float)v11 * 0.001;
          CFNumberRef v74 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFNumberRef v94 = v74;
          if (!v74)
          {
            double v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v53, "Could not construct");
          }
          sub_36F904(&v100, v81, (const void **)&v94);
          CFStringRef v80 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_re", 15, 0x8000100u, 0);
          if (!v80)
          {
            CFTypeRef v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v54, "Could not construct");
          }
          *(float *)int valuePtr = (float)v12 * 0.001;
          CFNumberRef v73 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFNumberRef v93 = v73;
          if (!v73)
          {
            int v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v52, "Could not construct");
          }
          sub_36F904(&v101, v80, (const void **)&v93);
          CFStringRef v79 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_t", 14, 0x8000100u, 0);
          if (!v79)
          {
            unint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v57, "Could not construct");
          }
          *(float *)int valuePtr = (float)v13 * 0.01;
          CFNumberRef v72 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFNumberRef v92 = v72;
          if (!v72)
          {
            uint64_t v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v60, "Could not construct");
          }
          sub_36F904(&v102, v79, (const void **)&v92);
          CFStringRef v78 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_le", 15, 0x8000100u, 0);
          if (!v78)
          {
            CFDictionaryRef v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v63, "Could not construct");
          }
          *(float *)int valuePtr = (float)v14 * 0.01;
          CFNumberRef v19 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFNumberRef v91 = v19;
          if (!v19)
          {
            uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v58, "Could not construct");
          }
          sub_36F904(&v103, v78, (const void **)&v91);
          CFStringRef v77 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_kms", 16, 0x8000100u, 0);
          if (!v77)
          {
            uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v55, "Could not construct");
          }
          *(float *)int valuePtr = (float)v15;
          CFNumberRef cf = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFNumberRef v90 = cf;
          if (!cf)
          {
            CFDictionaryRef v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v64, "Could not construct");
          }
          sub_36F904(&v104, v77, (const void **)&v90);
          CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_mms", 16, 0x8000100u, 0);
          if (!v20)
          {
            long long v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v65, "Could not construct");
          }
          *(float *)int valuePtr = (float)v16 * 0.0001;
          CFNumberRef v21 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFNumberRef v89 = v21;
          if (!v21)
          {
            uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v61, "Could not construct");
          }
          sub_36F904(&v105, v20, (const void **)&v89);
          CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_bi", 15, 0x8000100u, 0);
          if (!v22)
          {
            __int16 v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v66, "Could not construct");
          }
          *(float *)int valuePtr = (float)v17 * 0.0001;
          CFNumberRef v23 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFNumberRef v88 = v23;
          if (!v23)
          {
            char v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v62, "Could not construct");
          }
          sub_36F904(&v106, v22, (const void **)&v88);
          CFStringRef v24 = CFStringCreateWithBytes(0, (const UInt8 *)"thiele_small_rms", 16, 0x8000100u, 0);
          if (!v24)
          {
            unint64_t v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v59, "Could not construct");
          }
          *(float *)int valuePtr = (float)v69 * 0.001;
          CFNumberRef v25 = CFNumberCreate(0, kCFNumberFloatType, valuePtr);
          CFNumberRef v87 = v25;
          if (!v25)
          {
            int64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v56, "Could not construct");
          }
          sub_36F904(v107, v24, (const void **)&v87);
          valuePtr[0] = buf;
          valuePtr[1] = 10;
          CFNumberRef v26 = v19;
          uint64_t v27 = 0;
          CFDictionaryRef v70 = sub_4D3D8((uint64_t)valuePtr);
          do
          {
            unint64_t v28 = (const void *)v107[v27 + 1];
            if (v28) {
              CFRelease(v28);
            }
            __int16 v29 = (const void *)v107[v27];
            if (v29) {
              CFRelease(v29);
            }
            v27 -= 2;
          }
          while (v27 != -20);
          CFRelease(v25);
          CFRelease(v24);
          CFRelease(v23);
          CFRelease(v22);
          CFRelease(v21);
          CFRelease(v20);
          CFRelease(cf);
          CFRelease(v77);
          CFRelease(v26);
          CFRelease(v78);
          CFRelease(v72);
          CFRelease(v79);
          CFRelease(v73);
          CFRelease(v80);
          CFRelease(v74);
          CFRelease(v81);
          CFRelease(v75);
          CFRelease(v82);
          CFRelease(v76);
          CFRelease(v83);
          unsigned int v30 = (void *)*((void *)&v85 + 1);
          if (*((void *)&v85 + 1) >= v86)
          {
            unsigned int v32 = (void *)v85;
            uint64_t v33 = (uint64_t)(*((void *)&v85 + 1) - v85) >> 3;
            unint64_t v34 = v33 + 1;
            if ((unint64_t)(v33 + 1) >> 61) {
              sub_60548();
            }
            uint64_t v35 = v86 - v85;
            if ((uint64_t)(v86 - v85) >> 2 > v34) {
              unint64_t v34 = v35 >> 2;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v36 = v34;
            }
            uint64_t v100 = &v86;
            if (v36)
            {
              unint64_t v36 = (unint64_t)sub_106EC(v36);
              unsigned int v30 = (void *)*((void *)&v85 + 1);
              unsigned int v32 = (void *)v85;
            }
            else
            {
              uint64_t v37 = 0;
            }
            unsigned int v38 = (CFDictionaryRef *)(v36 + 8 * v33);
            unint64_t v39 = v36 + 8 * v37;
            unint64_t v99 = v39;
            CFDictionaryRef *v38 = v70;
            *(void *)&buf[16] = v38 + 1;
            if (v30 == v32)
            {
              unsigned int v31 = v38 + 1;
            }
            else
            {
              do
              {
                CFDictionaryRef v40 = (const __CFDictionary *)*--v30;
                *--unsigned int v38 = v40;
                void *v30 = 0;
              }
              while (v30 != v32);
              unsigned int v31 = *(void **)&buf[16];
              unint64_t v39 = v99;
            }
            long long v41 = v85;
            *(void *)&long long v85 = v38;
            *((void *)&v85 + 1) = v31;
            *(_OWORD *)&buf[8] = v41;
            unint64_t v42 = v86;
            unint64_t v86 = v39;
            unint64_t v99 = v42;
            *(void *)AudioObjectPropertyAddress buf = v41;
            sub_A78F0((uint64_t)buf);
            *((void *)&v85 + 1) = v31;
          }
          else
          {
            **((void **)&v85 + 1) = v70;
            unsigned int v31 = v30 + 1;
            *((void *)&v85 + 1) = v31;
          }
          v6 += 11;
        }
        while (v68 > (uint64_t)((uint64_t)v31 - v85) >> 3);
      }
      CFArrayRef v43 = sub_36F86C((uint64_t **)&v85);
      CFStringRef v44 = a1;
    }
    else
    {
      CFNumberRef v45 = (os_log_t *)sub_32A48(13);
      CFStringRef v44 = a1;
      CFStringRef v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 390;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d FDR Checksum failed for data returned from EDT! Returning empty ascf::ArrayRef", buf, 0x12u);
      }
      CFArrayRef v43 = 0;
      *a1 = 0;
    }
    CFArrayRef *v44 = v43;
    *(void *)AudioObjectPropertyAddress buf = &v85;
    sub_A7940((void ***)buf);
  }
}

void sub_373130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void **a51)
{
  a51 = (void **)&a37;
  sub_A7940(&a51);
  _Unwind_Resume(a1);
}

void sub_373284(int64x2_t *a1, _DWORD *a2, _DWORD *a3)
{
  if (a2 == a3)
  {
    a1->i64[0] = 0;
    a1->i64[1] = 0;
    a1[1].i64[0] = 0;
  }
  else
  {
    int v6 = (unsigned __int8 *)a2;
    int64x2_t v56 = 0uLL;
    unint64_t v57 = 0;
    *(_DWORD *)uint64_t v58 = *a2;
    *(_DWORD *)&void v58[3] = *(_DWORD *)((char *)a2 + 3);
    sub_36F718((unsigned __int16 *)v58);
    unint64_t v8 = (__int16 *)(v6 + 7);
    __int16 v9 = (unsigned __int16 *)&v6[v58[3] * (unint64_t)v58[2] + 7];
    if (v9 <= (unsigned __int16 *)v6) {
      goto LABEL_58;
    }
    unsigned __int16 v10 = 0;
    unint64_t v11 = v58[3] * (unint64_t)v58[2] + 7;
    do
    {
      __int16 v12 = *v6++;
      v10 += v12;
      --v11;
    }
    while (v11);
    if (0x10000 - v10 == *v9)
    {
      if (v58[3])
      {
        uint64_t v13 = 0;
        uint64_t v14 = v58[4];
        int v15 = v58[5] - 1;
        uint64_t v53 = v58[3];
        do
        {
          uint64_t v54 = v13;
          int v17 = *v8;
          unsigned int v16 = v8 + 1;
          int v55 = v17;
          if (v14)
          {
            int v18 = 0;
            unint64_t v19 = 0;
            CFStringRef v20 = 0;
            for (uint64_t i = 0; i != v14; ++i)
            {
              uint64_t v22 = 0;
              switch(v15)
              {
                case 0:
                  LOBYTE(v7) = *(unsigned char *)v16;
                  float v3 = (float)LODWORD(v7);
                  float v4 = (float)*((char *)v16 + 1) * 0.01;
                  LOBYTE(v7) = *((unsigned char *)v16 + 2);
                  float v7 = (float)LODWORD(v7);
                  float v5 = v7 * 0.01;
                  uint64_t v22 = 3;
                  break;
                case 1:
                  LOWORD(v7) = *v16;
                  float v3 = (float)LODWORD(v7);
                  float v4 = (float)v16[1] * 0.01;
                  LOWORD(v7) = v16[2];
                  float v7 = (float)LODWORD(v7);
                  float v5 = v7 * 0.01;
                  uint64_t v22 = 6;
                  break;
                case 3:
                  float v3 = (float)*(unsigned int *)v16;
                  float v4 = (float)*((int *)v16 + 1) * 0.01;
                  float v7 = (float)*((unsigned int *)v16 + 2);
                  float v5 = v7 * 0.01;
                  uint64_t v22 = 12;
                  break;
                case 7:
                  float v3 = (float)*(unint64_t *)v16;
                  float v4 = (float)*((uint64_t *)v16 + 1) * 0.01;
                  float v7 = (float)*((unint64_t *)v16 + 2);
                  float v5 = v7 * 0.01;
                  uint64_t v22 = 24;
                  break;
                default:
                  break;
              }
              if ((unint64_t)v18 >= v19)
              {
                unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v18 - v20) + 1;
                if (v24 > 0x1555555555555555) {
                  sub_60548();
                }
                if (0x5555555555555556 * ((uint64_t)(v19 - (void)v20) >> 2) > v24) {
                  unint64_t v24 = 0x5555555555555556 * ((uint64_t)(v19 - (void)v20) >> 2);
                }
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - (void)v20) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
                  unint64_t v25 = 0x1555555555555555;
                }
                else {
                  unint64_t v25 = v24;
                }
                if (v25) {
                  unint64_t v25 = (unint64_t)sub_564C(v25);
                }
                else {
                  uint64_t v26 = 0;
                }
                uint64_t v27 = (float *)(v25 + 4 * (v18 - v20));
                *uint64_t v27 = v3;
                v27[1] = v4;
                _OWORD v27[2] = v5;
                if (v18 == v20)
                {
                  CFStringRef v20 = (float *)(v25 + 4 * (v18 - v20));
                }
                else
                {
                  unint64_t v28 = (float *)(v25 + 4 * (v18 - v20));
                  do
                  {
                    uint64_t v29 = *(void *)(v18 - 3);
                    v18 -= 3;
                    int v30 = *((_DWORD *)v18 + 2);
                    *(void *)(v28 - 3) = v29;
                    v28 -= 3;
                    *((_DWORD *)v28 + 2) = v30;
                  }
                  while (v18 != v20);
                  int v18 = v20;
                  CFStringRef v20 = v28;
                }
                unint64_t v19 = v25 + 12 * v26;
                uint64_t v23 = (uint64_t)(v27 + 3);
                if (v18) {
                  operator delete(v18);
                }
              }
              else
              {
                *int v18 = v3;
                v18[1] = v4;
                uint64_t v23 = (uint64_t)(v18 + 3);
                uint64_t v18[2] = v5;
              }
              unsigned int v16 = (__int16 *)((char *)v16 + v22);
              int v18 = (float *)v23;
            }
          }
          else
          {
            uint64_t v23 = 0;
            CFStringRef v20 = 0;
          }
          float v3 = (float)v55 * 0.01;
          int v32 = *(_DWORD *)v16;
          unint64_t v8 = v16 + 2;
          int v31 = v32;
          uint64_t v33 = v56.i64[1];
          if (v56.i64[1] >= (unint64_t)v57)
          {
            uint64_t v37 = (v56.i64[1] - v56.i64[0]) >> 5;
            if ((unint64_t)(v37 + 1) >> 59) {
              sub_60548();
            }
            unint64_t v38 = (uint64_t)&v57[-v56.i64[0]] >> 4;
            if (v38 <= v37 + 1) {
              unint64_t v38 = v37 + 1;
            }
            if ((unint64_t)&v57[-v56.i64[0]] >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v38;
            }
            uint64_t v61 = &v57;
            if (v39)
            {
              if (v39 >> 59) {
                sub_60560();
              }
              CFDictionaryRef v40 = (char *)operator new(32 * v39);
            }
            else
            {
              CFDictionaryRef v40 = 0;
            }
            long long v41 = &v40[32 * v37];
            *(void *)AudioObjectPropertyAddress buf = v40;
            *(void *)&buf[8] = v41;
            *(void *)&buf[16] = v41;
            uint64_t v60 = &v40[32 * v39];
            *(float *)long long v41 = v3;
            *((_DWORD *)v41 + 1) = v31;
            *((void *)v41 + 2) = 0;
            *((void *)v41 + 3) = 0;
            *((void *)v41 + 1) = 0;
            sub_373880((void *)v41 + 1, v20, v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v20) >> 2));
            uint64_t v42 = *(void *)&buf[8];
            uint64_t v34 = *(void *)&buf[16] + 32;
            *(void *)&buf[16] += 32;
            int64x2_t v43 = v56;
            uint64_t v35 = v53;
            uint64_t v36 = v54;
            if (v56.i64[1] == v56.i64[0])
            {
              int64x2_t v47 = vdupq_n_s64(v56.u64[1]);
            }
            else
            {
              uint64_t v44 = 0;
              do
              {
                uint64_t v45 = v42 + v44;
                uint64_t v46 = v43.i64[1] + v44;
                *(void *)(v45 - 32) = *(void *)(v43.i64[1] + v44 - 32);
                *(void *)(v45 - 24) = 0;
                *(void *)(v45 - 16) = 0;
                *(void *)(v45 - 8) = 0;
                *(_OWORD *)(v45 - 24) = *(_OWORD *)(v43.i64[1] + v44 - 24);
                *(void *)(v45 - 8) = *(void *)(v43.i64[1] + v44 - 8);
                *(void *)(v46 - 24) = 0;
                *(void *)(v46 - 16) = 0;
                *(void *)(v46 - 8) = 0;
                v44 -= 32;
              }
              while (v43.i64[1] + v44 != v43.i64[0]);
              v42 += v44;
              int64x2_t v47 = v56;
              uint64_t v34 = *(void *)&buf[16];
            }
            v56.i64[0] = v42;
            v56.i64[1] = v34;
            *(int64x2_t *)&buf[8] = v47;
            CFStringRef v48 = v57;
            unint64_t v57 = v60;
            uint64_t v60 = v48;
            *(void *)AudioObjectPropertyAddress buf = v47.i64[0];
            sub_3739B4((uint64_t)buf);
          }
          else
          {
            *(float *)v56.i64[1] = v3;
            *(_DWORD *)(v33 + 4) = v31;
            *(void *)(v33 + 16) = 0;
            *(void *)(v33 + 24) = 0;
            *(void *)(v33 + 8) = 0;
            sub_373880((void *)(v33 + 8), v20, v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v20) >> 2));
            uint64_t v34 = v33 + 32;
            uint64_t v35 = v53;
            uint64_t v36 = v54;
          }
          v56.i64[1] = v34;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v13 = v36 + 1;
        }
        while (v13 != v35);
      }
      *a1 = v56;
      a1[1].i64[0] = (uint64_t)v57;
      CFNumberRef v49 = &v56;
    }
    else
    {
LABEL_58:
      uint64_t v50 = (os_log_t *)sub_32A48(13);
      char v51 = *v50;
      CFNumberRef v49 = a1;
      if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "FDRDataImpl.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 421;
        _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d FDR Checksum failed for data returned from EDT! Returning empty ascf::ArrayRef", buf, 0x12u);
      }
    }
    v49->i64[0] = 0;
    v49->i64[1] = 0;
    v49[1].i64[0] = 0;
    *(void *)AudioObjectPropertyAddress buf = &v56;
    sub_373928((void ***)buf);
  }
}

void sub_373804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a15;
  sub_373928(&a18);
  _Unwind_Resume(a1);
}

void *sub_373880(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v4 = result;
    if (a4 >= 0x1555555555555556) {
      sub_60548();
    }
    uint64_t result = sub_564C(a4);
    float v7 = result;
    void *v4 = result;
    v4[1] = result;
    v4[2] = (char *)result + 12 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_37390C(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_373928(void ***a1)
{
  uint64_t v1 = *a1;
  io_registry_entry_t v2 = (char *)**a1;
  if (v2)
  {
    float v4 = (char *)v1[1];
    float v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_3739B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 32;
    float v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_373A18(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    do
    {
      CFDictionaryRef v64 = a2;
      float v4 = *(__int32 ***)(a1 + 24);
      float v5 = v4[1];
      int v6 = wmemchr(*v4, a2[1], v5 - *v4);
      if (v6) {
        float v7 = v6;
      }
      else {
        float v7 = v5;
      }
      uint64_t v8 = *(void **)(a1 + 24);
      if (v7 == (__int32 *)v8[1]) {
        uint64_t v9 = 1;
      }
      else {
        uint64_t v9 = (((uint64_t)v7 - *v8) >> 2) + 1;
      }
      **(void **)(a1 + 8) = v9;
      CFDictionaryRef v70 = 0;
      uint64_t v71 = 0;
      unsigned int v69 = &v70;
      if (**(void **)(a1 + 16))
      {
        unint64_t v10 = 1;
        do
        {
          *((unsigned char *)&v74.__r_.__value_.__s + 23) = 2;
          strcpy((char *)&v74, "ch");
          std::to_string(&v72, v10);
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v11 = &v72;
          }
          else {
            unint64_t v11 = (std::string *)v72.__r_.__value_.__r.__words[0];
          }
          if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v72.__r_.__value_.__l.__size_;
          }
          uint64_t v13 = std::string::append(&v74, (const std::string::value_type *)v11, size);
          long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
          uint64_t v68 = v13->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v14;
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v72.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v74.__r_.__value_.__l.__data_);
          }
          uint64_t v15 = **(void **)(a1 + 8);
          sub_22210((CFStringRef *)&v74, "Filter");
          CFBooleanRef v16 = kCFBooleanTrue;
          if (v10 != v15) {
            CFBooleanRef v16 = kCFBooleanFalse;
          }
          v74.__r_.__value_.__l.__size_ = (std::string::size_type)v16;
          sub_22210((CFStringRef *)&v74.__r_.__value_.__r.__words[2], "PhaseCompensate");
          CFBooleanRef v75 = kCFBooleanFalse;
          v65[0] = &v74;
          v65[1] = 2;
          CFDictionaryRef v17 = sub_4D3D8((uint64_t)v65);
          CFDictionaryRef v66 = v17;
          int v18 = (uint64_t **)sub_15DF8((uint64_t)&v69, &v73, __p);
          if (*v18)
          {
            if (v17) {
              CFRelease(v17);
            }
          }
          else
          {
            unint64_t v19 = v18;
            CFStringRef v20 = (uint64_t *)operator new(0x40uLL);
            v72.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
            v72.__r_.__value_.__l.__size_ = (std::string::size_type)&v70;
            v72.__r_.__value_.__s.__data_[16] = 0;
            CFNumberRef v21 = v20 + 4;
            if (SHIBYTE(v68) < 0)
            {
              sub_21E8C(v21, __p[0], (unint64_t)__p[1]);
            }
            else
            {
              *(_OWORD *)CFNumberRef v21 = *(_OWORD *)__p;
              v20[6] = v68;
            }
            v20[7] = (uint64_t)v17;
            CFDictionaryRef v66 = 0;
            v72.__r_.__value_.__s.__data_[16] = 1;
            uint64_t v22 = v73;
            uint64_t *v20 = 0;
            v20[1] = 0;
            v20[2] = v22;
            *unint64_t v19 = v20;
            if (*v69)
            {
              unsigned int v69 = (uint64_t **)*v69;
              CFStringRef v20 = *v19;
            }
            sub_46D00(v70, v20);
            ++v71;
            v72.__r_.__value_.__r.__words[0] = 0;
            sub_37437C((uint64_t)&v72);
          }
          for (uint64_t i = 0; i != -4; i -= 2)
          {
            unint64_t v24 = *(const void **)((char *)&v74 + i * 8 + 24);
            if (v24) {
              CFRelease(v24);
            }
            unint64_t v25 = (const void *)v74.__r_.__value_.__r.__words[i + 2];
            if (v25) {
              CFRelease(v25);
            }
          }
          if (SHIBYTE(v68) < 0) {
            operator delete(__p[0]);
          }
          ++v10;
        }
        while (v10 <= **(void **)(a1 + 16));
      }
      uint64_t v26 = *(std::string::size_type **)a1;
      LODWORD(v72.__r_.__value_.__l.__data_) = 0;
      uint64_t v27 = v64;
      *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = *v64;
      sub_3743D4((CFDictionaryRef *)__p, &v69, "Gain", 4, &v72);
      unint64_t v28 = v26[2];
      uint64_t v29 = (void *)v26[1];
      if ((unint64_t)v29 >= v28)
      {
        int v30 = (void *)*v26;
        uint64_t v31 = (uint64_t)((uint64_t)v29 - *v26) >> 3;
        unint64_t v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 61) {
          sub_60548();
        }
        uint64_t v33 = v28 - (void)v30;
        if (v33 >> 2 > v32) {
          unint64_t v32 = v33 >> 2;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v32;
        }
        CFNumberRef v76 = v26 + 2;
        if (v34)
        {
          unint64_t v34 = (unint64_t)sub_106EC(v34);
          int v30 = (void *)*v26;
          uint64_t v29 = (void *)v26[1];
        }
        else
        {
          uint64_t v35 = 0;
        }
        uint64_t v36 = (void **)(v34 + 8 * v31);
        CFBooleanRef v37 = (const __CFBoolean *)(v34 + 8 * v35);
        CFBooleanRef v75 = v37;
        *uint64_t v36 = __p[0];
        unint64_t v38 = v36 + 1;
        __p[0] = 0;
        v74.__r_.__value_.__r.__words[2] = (std::string::size_type)(v36 + 1);
        if (v29 == v30)
        {
          CFDictionaryRef v40 = 0;
        }
        else
        {
          do
          {
            unint64_t v39 = (void *)*--v29;
            *--uint64_t v36 = v39;
            *uint64_t v29 = 0;
          }
          while (v29 != v30);
          unint64_t v38 = (void **)v74.__r_.__value_.__r.__words[2];
          CFBooleanRef v37 = v75;
          CFDictionaryRef v40 = __p[0];
        }
        std::string::size_type v41 = *v26;
        *uint64_t v26 = (std::string::size_type)v36;
        v74.__r_.__value_.__r.__words[0] = v41;
        v74.__r_.__value_.__l.__size_ = v41;
        std::string::size_type v42 = v26[1];
        v26[1] = (std::string::size_type)v38;
        v74.__r_.__value_.__r.__words[2] = v42;
        CFBooleanRef v43 = (const __CFBoolean *)v26[2];
        void v26[2] = (std::string::size_type)v37;
        CFBooleanRef v75 = v43;
        sub_A78F0((uint64_t)&v74);
        v26[1] = (std::string::size_type)v38;
        uint64_t v27 = v64;
        if (v40) {
          CFRelease(v40);
        }
      }
      else
      {
        *uint64_t v29 = __p[0];
        v26[1] = (std::string::size_type)(v29 + 1);
      }
      uint64_t v45 = (_DWORD *)*((void *)v27 + 1);
      uint64_t v44 = (_DWORD *)*((void *)v27 + 2);
      while (v45 != v44)
      {
        uint64_t v46 = *(std::string::size_type **)a1;
        sub_3743D4((CFDictionaryRef *)&v72, &v69, "Bell", 4, v45);
        unint64_t v47 = v46[2];
        CFStringRef v48 = (void *)v46[1];
        if ((unint64_t)v48 >= v47)
        {
          CFNumberRef v49 = (void *)*v46;
          uint64_t v50 = (uint64_t)((uint64_t)v48 - *v46) >> 3;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 61) {
            sub_60548();
          }
          uint64_t v52 = v47 - (void)v49;
          if (v52 >> 2 > v51) {
            unint64_t v51 = v52 >> 2;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v53 = v51;
          }
          CFNumberRef v76 = v46 + 2;
          if (v53)
          {
            unint64_t v53 = (unint64_t)sub_106EC(v53);
            CFNumberRef v49 = (void *)*v46;
            CFStringRef v48 = (void *)v46[1];
          }
          else
          {
            uint64_t v54 = 0;
          }
          int v55 = (void *)(v53 + 8 * v50);
          CFBooleanRef v56 = (const __CFBoolean *)(v53 + 8 * v54);
          CFBooleanRef v75 = v56;
          void *v55 = v72.__r_.__value_.__r.__words[0];
          unint64_t v57 = v55 + 1;
          v72.__r_.__value_.__r.__words[0] = 0;
          v74.__r_.__value_.__r.__words[2] = (std::string::size_type)(v55 + 1);
          if (v48 == v49)
          {
            unint64_t v59 = 0;
          }
          else
          {
            do
            {
              uint64_t v58 = *--v48;
              *--int v55 = v58;
              *CFStringRef v48 = 0;
            }
            while (v48 != v49);
            unint64_t v57 = (void *)v74.__r_.__value_.__r.__words[2];
            CFBooleanRef v56 = v75;
            unint64_t v59 = (const void *)v72.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v60 = *v46;
          *uint64_t v46 = (std::string::size_type)v55;
          v74.__r_.__value_.__r.__words[0] = v60;
          v74.__r_.__value_.__l.__size_ = v60;
          std::string::size_type v61 = v46[1];
          v46[1] = (std::string::size_type)v57;
          v74.__r_.__value_.__r.__words[2] = v61;
          CFBooleanRef v62 = (const __CFBoolean *)v46[2];
          v46[2] = (std::string::size_type)v56;
          CFBooleanRef v75 = v62;
          sub_A78F0((uint64_t)&v74);
          v46[1] = (std::string::size_type)v57;
          if (v59) {
            CFRelease(v59);
          }
        }
        else
        {
          *CFStringRef v48 = v72.__r_.__value_.__r.__words[0];
          v46[1] = (std::string::size_type)(v48 + 1);
        }
        v45 += 3;
      }
      sub_3740CC(v70);
      a2 = v64 + 8;
    }
    while (v64 + 8 != a3);
  }
}

void sub_373FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_3740CC(void *a1)
{
  if (a1)
  {
    sub_3740CC(*a1);
    sub_3740CC(a1[1]);
    sub_374120((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_374120(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_374178(void *a1, const UInt8 *a2, const void **a3)
{
  int v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = (uint64_t)(v8 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_60548();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    CFStringRef v20 = v6;
    if (v14) {
      unint64_t v14 = (unint64_t)sub_10724(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v14;
    CFDictionaryRef v17 = (CFStringRef *)(v14 + 16 * v11);
    unint64_t v19 = v14 + 16 * v15;
    sub_374298(v17, a2, a3);
    int v18 = v17 + 2;
    sub_163A8(a1, &v16);
    unint64_t v10 = a1[1];
    uint64_t result = sub_16358((uint64_t)&v16);
  }
  else
  {
    uint64_t result = (uint64_t)sub_374298((CFStringRef *)a1[1], a2, a3);
    unint64_t v10 = v8 + 16;
    a1[1] = v8 + 16;
  }
  a1[1] = v10;
  return result;
}

void sub_374278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_16358((uint64_t)va);
  _Unwind_Resume(a1);
}

CFStringRef *sub_374298(CFStringRef *a1, const UInt8 *a2, const void **a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFStringRef v8 = (const __CFString *)*a3;
  if (v8) {
    CFRetain(v8);
  }
  a1[1] = v8;
  return a1;
}

void sub_37434C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_37437C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_374120((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_3743D4(CFDictionaryRef *a1, void *a2, char *a3, uint64_t a4, _DWORD *a5)
{
  sub_22210(&v25, "Frequency");
  LODWORD(valuePtr[0]) = *a5;
  if (!CFNumberCreate(0, kCFNumberFloatType, valuePtr))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_22210(&v27, "Quality");
  LODWORD(valuePtr[0]) = a5[2];
  if (!CFNumberCreate(0, kCFNumberFloatType, valuePtr))
  {
    CFStringRef v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Could not construct");
  }
  sub_22210(&v29, "Gain");
  LODWORD(valuePtr[0]) = a5[1];
  if (!CFNumberCreate(0, kCFNumberFloatType, valuePtr))
  {
    CFNumberRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v21, "Could not construct");
  }
  sub_22210(v31, "Active");
  v31[1] = (CFStringRef)kCFBooleanTrue;
  sub_22210(&v32, "Type");
  sub_22210(&v33, a3);
  sub_22210(&v34, "Channels");
  memset(valuePtr, 0, sizeof(valuePtr));
  sub_162D4(valuePtr, a2[2]);
  uint64_t v11 = (void *)*a2;
  uint64_t v9 = a2 + 1;
  unint64_t v10 = v11;
  if (v11 != v9)
  {
    do
    {
      sub_374178(valuePtr, (const UInt8 *)v10 + 32, (const void **)v10 + 7);
      uint64_t v12 = (void *)v10[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v10[2];
          BOOL v14 = *v13 == (void)v10;
          unint64_t v10 = v13;
        }
        while (!v14);
      }
      unint64_t v10 = v13;
    }
    while (v13 != v9);
  }
  CFDictionaryRef v15 = sub_4D69C(valuePtr);
  unint64_t v24 = valuePtr;
  sub_14F84((void ***)&v24);
  CFDictionaryRef v35 = v15;
  v22[0] = &v25;
  v22[1] = 6;
  uint64_t v16 = 0;
  *a1 = sub_4D3D8((uint64_t)v22);
  do
  {
    CFDictionaryRef v17 = *(CFDictionaryRef *)((char *)&v35 + v16);
    if (v17) {
      CFRelease(v17);
    }
    int v18 = *(CFStringRef *)((char *)&v34 + v16);
    if (v18) {
      CFRelease(v18);
    }
    v16 -= 16;
  }
  while (v16 != -96);
}

void sub_3746C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, CFTypeRef a17, uint64_t a18, CFTypeRef a19, uint64_t a20,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  sub_60594(v21);
  while (v21 != (const void **)&a16)
  {
    v21 -= 2;
    sub_602D0((uint64_t)v21);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3747F4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t *a6, _OWORD *a7, uint64_t a8)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *a3;
  *(void *)(a1 + 16) = *a4;
  *(void *)(a1 + 24) = *a5;
  if (*((unsigned char *)a6 + 8))
  {
    uint64_t v11 = *a6;
    uint64_t v12 = operator new(8uLL);
    *(void *)(a1 + 32) = v12;
    *v12++ = v11;
    *(void *)(a1 + 4sub_360D08(&a9, 0) = v12;
    *(void *)(a1 + 48) = v12;
    *(unsigned char *)(a1 + 56) = 1;
  }
  else
  {
    sub_E4660(a1 + 32, (uint64_t)&unk_573998);
  }
  *(_OWORD *)(a1 + 64) = *a7;
  sub_E475C((unsigned char *)(a1 + 80), a8);
  sub_3748E8(a1);
  return a1;
}

void sub_3748AC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 120)) {
    sub_D7EC0(v3);
  }
  if (*(unsigned char *)(v1 + 56))
  {
    CFIndex v5 = *v2;
    if (*v2)
    {
      *(void *)(v1 + 4sub_360D08(&a9, 0) = v5;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

float sub_3748E8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 12))
  {
    if (!*(unsigned char *)(a1 + 28) || !*(unsigned char *)(a1 + 20)) {
      return result;
    }
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 20))
  {
    float result = *(float *)(a1 + 8);
    if (result > *(float *)(a1 + 16))
    {
      uint64_t v2 = (os_log_t *)sub_32A48(13);
      uint64_t v3 = *v2;
      if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        uint64_t v12 = "RoutingTypes.cpp";
        __int16 v13 = 1024;
        int v14 = 1143;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Invariant failure.");
    }
  }
  if (*(unsigned char *)(a1 + 28))
  {
    float result = *(float *)(a1 + 24);
    if (result < *(float *)(a1 + 8))
    {
      CFIndex v5 = (os_log_t *)sub_32A48(13);
      CFIndex v6 = *v5;
      if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        uint64_t v12 = "RoutingTypes.cpp";
        __int16 v13 = 1024;
        int v14 = 1150;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
      }
      CFStringRef v7 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v7, "Invariant failure.");
    }
    if (*(unsigned char *)(a1 + 20))
    {
LABEL_10:
      float result = *(float *)(a1 + 24);
      if (result > *(float *)(a1 + 16))
      {
        CFStringRef v8 = (os_log_t *)sub_32A48(13);
        uint64_t v9 = *v8;
        if (*v8)
        {
          if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
          {
            int v11 = 136315394;
            uint64_t v12 = "RoutingTypes.cpp";
            __int16 v13 = 1024;
            int v14 = 1154;
            _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
          }
        }
        unint64_t v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v10, "Invariant failure.");
      }
    }
  }
  return result;
}

void sub_374B90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_374BB4(_DWORD *result)
{
  int v1 = result[6];
  if (v1 > 1647718501)
  {
    if (v1 > 1781740086)
    {
      if (v1 <= 1970496067)
      {
        BOOL v3 = v1 == 1781740087;
        int v4 = 1836412020;
      }
      else
      {
        BOOL v3 = v1 == 1970496068 || v1 == 2003068262;
        int v4 = 2004367664;
      }
    }
    else
    {
      if (v1 <= 1751410291)
      {
        if ((v1 - 1647718502) < 2 || v1 == 1667982960) {
          goto LABEL_39;
        }
        goto LABEL_99;
      }
      BOOL v3 = v1 == 1751410292 || v1 == 1752709424;
      int v4 = 1768513904;
    }
LABEL_34:
    if (v3 || v1 == v4) {
      goto LABEL_39;
    }
    goto LABEL_99;
  }
  if (v1 > 1634231919)
  {
    if (v1 <= 1647393079)
    {
      BOOL v3 = v1 == 1634231920;
      int v4 = 1635085420;
    }
    else
    {
      BOOL v3 = v1 == 1647393080 || v1 == 1647521842;
      int v4 = 1647522096;
    }
    goto LABEL_34;
  }
  if (v1 > 1214394676)
  {
    BOOL v3 = v1 == 1214394677 || v1 == 1214539380;
    int v4 = 1633759844;
    goto LABEL_34;
  }
  if (!v1 || v1 == 1214329654) {
    goto LABEL_39;
  }
LABEL_99:
  if (v1 != 1919443299 || *result != 1)
  {
    unint64_t v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v16 = 136315394;
        CFDictionaryRef v17 = "RoutingTypes.cpp";
        __int16 v18 = 1024;
        int v19 = 161;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v16, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }
LABEL_39:
  int v6 = result[1];
  if (v6 <= 1918990111)
  {
    if (v6 > 1768781410)
    {
      if (v6 > 1835361381)
      {
        if (v6 <= 1836084596)
        {
          if (v6 == 1835361382) {
            return result;
          }
          int v7 = 1836021360;
        }
        else
        {
          if (v6 == 1836084597 || v6 == 1836281204) {
            return result;
          }
          int v7 = 1836412020;
        }
        goto LABEL_97;
      }
      if (v6 > 1835229548)
      {
        if (v6 == 1835229549 || v6 == 1835230310) {
          return result;
        }
        int v7 = 1835232630;
        goto LABEL_97;
      }
      if (v6 == 1768781411) {
        return result;
      }
      unsigned __int16 v9 = 30322;
    }
    else
    {
      if (v6 <= 1751212898)
      {
        if (v6 <= 1701013868)
        {
          if (v6 == 1650811758) {
            return result;
          }
          int v7 = 1701013792;
        }
        else
        {
          if (v6 == 1701013869 || v6 == 1701017120) {
            return result;
          }
          int v7 = 1735222132;
        }
        goto LABEL_97;
      }
      if (v6 <= 1768776805)
      {
        if (v6 == 1751212899) {
          return result;
        }
        int v7 = 1768057203;
        goto LABEL_97;
      }
      if (v6 == 1768776806 || v6 == 1768778864) {
        return result;
      }
      unsigned __int16 v9 = 28515;
    }
    int v7 = v9 | 0x696D0000;
    goto LABEL_97;
  }
  if (v6 > 1986818930)
  {
    if (v6 <= 1987081838)
    {
      if (v6 <= 1987077986)
      {
        if (v6 == 1986818931) {
          return result;
        }
        int v7 = 1986884455;
      }
      else
      {
        if (v6 == 1987077987 || v6 == 1987080813) {
          return result;
        }
        int v7 = 1987081833;
      }
    }
    else if (v6 > 1987212136)
    {
      if (v6 == 1987212137 || v6 == 2003133027) {
        return result;
      }
      int v7 = 2003133037;
    }
    else
    {
      if (v6 == 1987081839 || v6 == 1987208039) {
        return result;
      }
      int v7 = 1987211117;
    }
    goto LABEL_97;
  }
  if (v6 > 1936748651)
  {
    if (v6 > 1937007471)
    {
      if (v6 == 1937007472 || v6 == 1986098036) {
        return result;
      }
      int v7 = 1986556788;
      goto LABEL_97;
    }
    if (v6 == 1936748652) {
      return result;
    }
    unsigned __int16 v8 = 29285;
  }
  else
  {
    if (v6 <= 1936683885)
    {
      if (v6 == 1918990112) {
        return result;
      }
      int v7 = 1919776355;
      goto LABEL_97;
    }
    if (v6 == 1936683886 || v6 == 1936745328) {
      return result;
    }
    unsigned __int16 v8 = 27502;
  }
  int v7 = v8 | 0x73700000;
LABEL_97:
  if (v6 != v7)
  {
    __int16 v13 = (os_log_t *)sub_32A48(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      CFDictionaryRef v17 = "RoutingTypes.cpp";
      __int16 v18 = 1024;
      int v19 = 162;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v16, 0x12u);
    }
    CFDictionaryRef v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "Invariant failure.");
  }
  return result;
}

void sub_375224(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *sub_375244(std::string *a1, unsigned int *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  std::string::append(a1, "SWVolumeMode:", 0xDuLL);
  if (*((unsigned char *)a2 + 4))
  {
    uint64_t v4 = *a2;
    if (v4 > 3) {
      CFIndex v5 = "Unknown";
    }
    else {
      CFIndex v5 = off_635890[v4];
    }
  }
  else
  {
    CFIndex v5 = "no value assigned";
  }
  sub_21C8C(&__p, v5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, ", minVolume(dB):", 0x10uLL);
  if (*((unsigned char *)a2 + 12)) {
    std::to_string(&__p, *((float *)a2 + 2));
  }
  else {
    sub_21C8C(&__p, "no value assigned");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned __int16 v8 = &__p;
  }
  else {
    unsigned __int16 v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, ", maxVolume(dB):", 0x10uLL);
  if (*((unsigned char *)a2 + 20)) {
    std::to_string(&__p, *((float *)a2 + 4));
  }
  else {
    sub_21C8C(&__p, "no value assigned");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v10 = &__p;
  }
  else {
    unint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((unsigned char *)a2 + 40))
  {
    std::string::append(a1, ", override(dB): minimum:", 0x18uLL);
    std::to_string(&__p, *((double *)a2 + 3));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &__p;
    }
    else {
      uint64_t v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::append(a1, ", maximum:", 0xAuLL);
    std::to_string(&__p, *((double *)a2 + 4));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v14 = &__p;
    }
    else {
      int v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v14, v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(a1, "} ", 2uLL);
}

void sub_3754BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_375514(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ DSPChainConfig:", 0x11uLL);
  int v4 = *(char *)(a2 + 47);
  if (v4 >= 0) {
    CFIndex v5 = (const std::string::value_type *)(a2 + 24);
  }
  else {
    CFIndex v5 = *(const std::string::value_type **)(a2 + 24);
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 47);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 32);
  }
  std::string::append(a1, v5, v6);
  std::string::append(a1, "; Device Type:", 0xEuLL);
  sub_2417C(&v26, *(_DWORD *)(a2 + 48));
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v7 = &v26;
  }
  else {
    int v7 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v7, size);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; Should Cache:", 0xFuLL);
  if (*(unsigned char *)(a2 + 52)) {
    std::string::size_type v9 = "true";
  }
  else {
    std::string::size_type v9 = "false";
  }
  if (*(unsigned char *)(a2 + 52)) {
    std::string::size_type v10 = 4;
  }
  else {
    std::string::size_type v10 = 5;
  }
  std::string::append(a1, v9, v10);
  std::string::size_type v11 = *(uint64_t ***)a2;
  uint64_t v12 = *(uint64_t ***)(a2 + 8);
  if (*(uint64_t ***)a2 != v12)
  {
    do
    {
      std::string::size_type v13 = *v11;
      int v14 = v11[1];
      while (v13 != v14)
      {
        sub_16A604(v25, *v13);
        uint64_t v15 = v25[1];
        sub_21C8C(&__p, " [ DSPBlockConfig: ");
        while ((uint64_t *)v15 != v25)
        {
          sub_15EE0C((uint64_t)&v26, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)(v15 + 16));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v26;
          uint64_t v15 = *(void *)(v15 + 8);
        }
        std::string v24 = __p;
        memset(&__p, 0, sizeof(__p));
        int v16 = std::string::append(&v24, " ]", 2uLL);
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        int64_t v22 = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)CFNumberRef v21 = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v24.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_16A560(v25);
        if (v22 >= 0) {
          __int16 v18 = v21;
        }
        else {
          __int16 v18 = (void **)v21[0];
        }
        if (v22 >= 0) {
          std::string::size_type v19 = HIBYTE(v22);
        }
        else {
          std::string::size_type v19 = (std::string::size_type)v21[1];
        }
        std::string::append(a1, (const std::string::value_type *)v18, v19);
        if (SHIBYTE(v22) < 0) {
          operator delete(v21[0]);
        }
        ++v13;
      }
      v11 += 3;
    }
    while (v11 != v12);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_375780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  if (*(char *)(v30 + 23) < 0) {
    operator delete(*(void **)v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_375814(void **a1, void *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (*a2 == a2[1])
  {
    if (sub_209B38())
    {
      std::string::size_type v11 = a2 + 27;
      if (a2[27] != a2[28])
      {
        uint64_t v12 = sub_106EC(1uLL);
        int v14 = v12;
        *uint64_t v12 = a2;
        *a1 = v12;
        a1[1] = v12 + 1;
        a1[2] = &v12[v13];
        if (v13 >= 2)
        {
          v12[1] = v11;
          unsigned __int16 v8 = v12 + 2;
          goto LABEL_6;
        }
        uint64_t v15 = 2;
        uint64_t v16 = 8 * v13;
        if ((unint64_t)((8 * v13) >> 2) > 2) {
          uint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17) {
          unint64_t v17 = (unint64_t)sub_106EC(v17);
        }
        else {
          uint64_t v18 = 0;
        }
        uint64_t v19 = 0;
        unint64_t v20 = v17 + 8;
        unint64_t v21 = v17 + 8 * v18;
        *(void *)(v17 + 8) = v11;
        unsigned __int16 v8 = (void *)(v17 + 16);
        do
        {
          *(void *)(v17 + v19 * 8) = v14[v19];
          --v19;
        }
        while (v19 != -1);
        std::string::size_type v10 = *a1;
        *a1 = (void *)(v20 - 8);
        a1[1] = v8;
        a1[2] = (void *)v21;
        if (!v10) {
          goto LABEL_6;
        }
        goto LABEL_5;
      }
    }
  }
  else
  {
    int v4 = operator new(8uLL);
    void *v4 = a2;
    *a1 = v4;
    a1[1] = v4 + 1;
    a1[2] = v4 + 1;
    if (a2[27] != a2[28])
    {
      CFIndex v5 = v4;
      std::string::size_type v6 = sub_106EC(2uLL);
      v6[1] = a2 + 27;
      unsigned __int16 v8 = v6 + 2;
      *std::string::size_type v6 = *v5;
      std::string::size_type v9 = *a1;
      *a1 = v6;
      a1[1] = v6 + 2;
      a1[2] = &v6[v7];
      if (!v9)
      {
LABEL_6:
        a1[1] = v8;
        return;
      }
      std::string::size_type v10 = v9;
LABEL_5:
      operator delete(v10);
      goto LABEL_6;
    }
  }
}

void sub_37599C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_3759B8(unsigned int a1, uint64_t a2)
{
  unsigned int v11 = a1;
  if (!a2)
  {
    CFIndex v5 = (os_log_t *)sub_32A48(13);
    std::string::size_type v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 269;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*((unsigned char *)sub_375BB0(a1, &v11) + 48))
  {
    unsigned __int16 v8 = (os_log_t *)sub_32A48(13);
    std::string::size_type v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 270;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    std::string::size_type v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v10, "Precondition failure.");
  }
  float result = sub_375BB0(a1, &v11);
  result[5] = a2;
  *((unsigned char *)result + 48) = 1;
  return result;
}

void sub_375B90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_375BB0(unsigned int a1, _DWORD *a2)
{
  uint64_t v3 = qword_64C4F8;
  if (qword_64C4F8)
  {
    while (1)
    {
      while (1)
      {
        int v4 = (uint64_t *)v3;
        unsigned int v5 = *(_DWORD *)(v3 + 32);
        if (v5 <= a1) {
          break;
        }
        uint64_t v3 = *v4;
        std::string::size_type v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }
      if (v5 >= a1) {
        break;
      }
      uint64_t v3 = v4[1];
      if (!v3)
      {
        std::string::size_type v6 = v4 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    std::string::size_type v6 = &qword_64C4F8;
    int v4 = &qword_64C4F8;
LABEL_9:
    uint64_t v7 = v4;
    int v4 = (uint64_t *)operator new(0x78uLL);
    *((_DWORD *)v4 + 8) = *a2;
    *(_OWORD *)(v4 + 5) = 0u;
    *(_OWORD *)(v4 + 7) = 0u;
    *(_OWORD *)(v4 + 9) = 0u;
    *(_OWORD *)(v4 + 11) = 0u;
    *(_OWORD *)(v4 + 13) = 0u;
    uint64_t *v4 = 0;
    v4[1] = 0;
    v4[2] = (uint64_t)v7;
    *std::string::size_type v6 = (uint64_t)v4;
    unsigned __int16 v8 = v4;
    if (*(void *)qword_64C4F0)
    {
      qword_64C4F0 = *(void *)qword_64C4F0;
      unsigned __int16 v8 = (uint64_t *)*v6;
    }
    sub_46D00((uint64_t *)qword_64C4F8, v8);
    ++qword_64C500;
  }
  return v4;
}

uint64_t *sub_375C9C(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unsigned int v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 251;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v9 = 1768776806;
  if (*((unsigned char *)sub_375BB0(0x696D6466u, &v9) + 64))
  {
    std::string::size_type v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unsigned int v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 277;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    unsigned __int16 v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v8, "Precondition failure.");
  }
  float result = sub_375BB0(0x696D6466u, &v9);
  result[7] = a1;
  *((unsigned char *)result + 64) = 1;
  return result;
}

void sub_375E84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_375EA4(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unsigned int v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 257;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v9 = 1768776806;
  if (*((unsigned char *)sub_375BB0(0x696D6466u, &v9) + 80))
  {
    std::string::size_type v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unsigned int v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 284;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    unsigned __int16 v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v8, "Precondition failure.");
  }
  float result = sub_375BB0(0x696D6466u, &v9);
  result[9] = a1;
  *((unsigned char *)result + 8sub_360D08(&a9, 0) = 1;
  return result;
}

void sub_37608C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_3760AC(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unsigned int v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 263;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v9 = 1768776806;
  if (*((unsigned char *)sub_375BB0(0x696D6466u, &v9) + 96))
  {
    std::string::size_type v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unsigned int v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 291;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    unsigned __int16 v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v8, "Precondition failure.");
  }
  float result = sub_375BB0(0x696D6466u, &v9);
  result[11] = a1;
  *((unsigned char *)result + 96) = 1;
  return result;
}

void sub_376294(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_3762B4(unsigned int a1, uint64_t a2)
{
  unsigned int v13 = a1;
  if (!a2)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    unsigned __int16 v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v15 = "RoutingTypes.cpp";
      __int16 v16 = 1024;
      int v17 = 297;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*((unsigned char *)sub_375BB0(a1, &v13) + 112))
  {
    std::string::size_type v10 = (os_log_t *)sub_32A48(13);
    unsigned int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v15 = "RoutingTypes.cpp";
      __int16 v16 = 1024;
      int v17 = 298;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    __int16 v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Precondition failure.");
  }
  sub_85F24();
  if (byte_64A0E0)
  {
    int v4 = sub_375BB0(a1, &v13);
    v4[13] = a2;
    *((unsigned char *)v4 + 112) = 1;
  }
  else
  {
    unsigned int v5 = (os_log_t *)sub_32A48(20);
    std::string::size_type v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v15 = "RoutingTypes.cpp";
        __int16 v16 = 1024;
        int v17 = 308;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Codec wind filter usage not allowed on this device. Ignoring request.", buf, 0x12u);
      }
    }
  }
}

void sub_37650C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_37652C(unsigned int a1, int a2, float a3)
{
  std::string::size_type v6 = (float *)qword_64C4D8;
  uint64_t v7 = qword_64C4E0;
  unsigned __int16 v8 = (void *)&unk_64C000;
  if (qword_64C4D8 != qword_64C4E0)
  {
    do
    {
      if (*((_DWORD *)v6 + 1) == a1 && *((_DWORD *)v6 + 2) == a2)
      {
        std::string::size_type v10 = (os_log_t *)sub_32A48(20);
        unsigned int v11 = *v10;
        if (*v10)
        {
          if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
          {
            __int16 v12 = "unknown";
            if (a1 <= 6) {
              __int16 v12 = off_623840[a1];
            }
            sub_21C8C(__p, v12);
            unsigned int v13 = __p;
            if (v25 < 0) {
              unsigned int v13 = (void **)__p[0];
            }
            double v14 = *v6;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            CFStringRef v27 = "RoutingTypes.cpp";
            __int16 v28 = 1024;
            int v29 = 318;
            __int16 v30 = 2080;
            uint64_t v31 = v13;
            __int16 v32 = 2048;
            double v33 = v14;
            _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d SystemSoundVolumeCap entry already exists for this port type %s : %f dB", buf, 0x26u);
            if (v25 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      v6 += 3;
    }
    while (v6 != (float *)v7);
    unsigned __int16 v8 = &unk_64C000;
    std::string::size_type v6 = (float *)qword_64C4E0;
  }
  if ((unint64_t)v6 >= qword_64C4E8)
  {
    uint64_t v16 = qword_64C4D8;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - qword_64C4D8) >> 2);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0x1555555555555555) {
      sub_60548();
    }
    if (0x5555555555555556 * ((qword_64C4E8 - qword_64C4D8) >> 2) > v18) {
      unint64_t v18 = 0x5555555555555556 * ((qword_64C4E8 - qword_64C4D8) >> 2);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((qword_64C4E8 - qword_64C4D8) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v19 = 0x1555555555555555;
    }
    else {
      unint64_t v19 = v18;
    }
    if (v19)
    {
      if (v19 > 0x1555555555555555) {
        sub_60560();
      }
      unint64_t v20 = operator new(12 * v19);
    }
    else
    {
      unint64_t v20 = 0;
    }
    uint64_t v21 = (uint64_t)v20 + 12 * v17;
    *(float *)uint64_t v21 = a3;
    *(_DWORD *)(v21 + 4) = a1;
    *(_DWORD *)(v21 + 8) = a2;
    uint64_t v15 = v21 + 12;
    if (v6 != (float *)v16)
    {
      do
      {
        uint64_t v22 = *(void *)(v6 - 3);
        v6 -= 3;
        int v23 = *((_DWORD *)v6 + 2);
        *(void *)(v21 - 12) = v22;
        v21 -= 12;
        *(_DWORD *)(v21 + 8) = v23;
      }
      while (v6 != (float *)v16);
      std::string::size_type v6 = (float *)qword_64C4D8;
    }
    qword_64C4D8 = v21;
    qword_64C4E0 = v15;
    qword_64C4E8 = (uint64_t)v20 + 12 * v19;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *std::string::size_type v6 = a3;
    uint64_t v15 = (uint64_t)(v6 + 3);
    *((_DWORD *)v6 + 1) = a1;
    *((_DWORD *)v6 + 2) = a2;
  }
  v8[156] = v15;
}

unint64_t sub_3767DC(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unsigned __int16 v8 = (uint64_t *)v4;
      }
      else {
        unsigned __int16 v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 32 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 48))
    {
      uint64_t v9 = *(void *)(v5 + 40);
LABEL_25:
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00;
      return v10 | v9;
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v11 = sub_32A48(20);
    if (*(unsigned char *)(v11 + 8))
    {
      __int16 v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          if (v16 >= 0) {
            unsigned int v13 = __p;
          }
          else {
            unsigned int v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v18 = "RoutingTypes.cpp";
          __int16 v19 = 1024;
          int v20 = 477;
          __int16 v21 = 2080;
          uint64_t v22 = v13;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v9 = sub_3767DC(a1, 1768776806);
    goto LABEL_25;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  return v10 | v9;
}

unint64_t sub_37697C(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unsigned __int16 v8 = (uint64_t *)v4;
      }
      else {
        unsigned __int16 v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 32 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 64))
    {
      uint64_t v9 = *(void *)(v5 + 56);
LABEL_25:
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00;
      return v10 | v9;
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v11 = sub_32A48(20);
    if (*(unsigned char *)(v11 + 8))
    {
      __int16 v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          if (v16 >= 0) {
            unsigned int v13 = __p;
          }
          else {
            unsigned int v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v18 = "RoutingTypes.cpp";
          __int16 v19 = 1024;
          int v20 = 501;
          __int16 v21 = 2080;
          uint64_t v22 = v13;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v9 = sub_37697C(a1, 1768776806);
    goto LABEL_25;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  return v10 | v9;
}

unint64_t sub_376B1C(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unsigned __int16 v8 = (uint64_t *)v4;
      }
      else {
        unsigned __int16 v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 32 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 80))
    {
      uint64_t v9 = *(void *)(v5 + 72);
LABEL_25:
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00;
      return v10 | v9;
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v11 = sub_32A48(20);
    if (*(unsigned char *)(v11 + 8))
    {
      __int16 v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          if (v16 >= 0) {
            unsigned int v13 = __p;
          }
          else {
            unsigned int v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v18 = "RoutingTypes.cpp";
          __int16 v19 = 1024;
          int v20 = 525;
          __int16 v21 = 2080;
          uint64_t v22 = v13;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v9 = sub_376B1C(a1, 1768776806);
    goto LABEL_25;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  return v10 | v9;
}

unint64_t sub_376CBC(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unsigned __int16 v8 = (uint64_t *)v4;
      }
      else {
        unsigned __int16 v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 32 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 96))
    {
      uint64_t v9 = *(void *)(v5 + 88);
LABEL_25:
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00;
      return v10 | v9;
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v11 = sub_32A48(20);
    if (*(unsigned char *)(v11 + 8))
    {
      __int16 v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          if (v16 >= 0) {
            unsigned int v13 = __p;
          }
          else {
            unsigned int v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v18 = "RoutingTypes.cpp";
          __int16 v19 = 1024;
          int v20 = 549;
          __int16 v21 = 2080;
          uint64_t v22 = v13;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v9 = sub_376CBC(a1, 1768776806);
    goto LABEL_25;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  return v10 | v9;
}

uint64_t sub_376E5C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unint64_t v4 = sub_376EE4(a1, a2);
  if (v5)
  {
    unint64_t v8 = *(void *)(v4 + 8);
    unint64_t v6 = v4 + 8;
    unint64_t v7 = v8;
    if (!v8)
    {
      unsigned int v13 = 0;
      return v13 | (v7 << 8);
    }
    unint64_t v9 = v6;
    do
    {
      unsigned int v10 = *(_DWORD *)(v7 + 28);
      BOOL v11 = v10 >= a3;
      if (v10 >= a3) {
        __int16 v12 = (unint64_t *)v7;
      }
      else {
        __int16 v12 = (unint64_t *)(v7 + 8);
      }
      if (v11) {
        unint64_t v9 = v7;
      }
      unint64_t v7 = *v12;
    }
    while (*v12);
    if (v9 != v6 && *(_DWORD *)(v9 + 28) <= a3)
    {
      unsigned int v13 = *(unsigned __int8 *)(v9 + 32);
      LODWORD(v7) = 1;
      return v13 | (v7 << 8);
    }
  }
  unsigned int v13 = 0;
  LODWORD(v7) = 0;
  return v13 | (v7 << 8);
}

unint64_t sub_376EE4(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = a1 + 32;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unint64_t v8 = (uint64_t *)v4;
      }
      else {
        unint64_t v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 32 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 112))
    {
      uint64_t v9 = *(void *)(v5 + 104);
LABEL_25:
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFF00;
      return v10 | v9;
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v11 = sub_32A48(20);
    if (*(unsigned char *)(v11 + 8))
    {
      __int16 v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          if (v16 >= 0) {
            unsigned int v13 = __p;
          }
          else {
            unsigned int v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          unint64_t v18 = "RoutingTypes.cpp";
          __int16 v19 = 1024;
          int v20 = 573;
          __int16 v21 = 2080;
          uint64_t v22 = v13;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v9 = sub_376EE4(a1, 1768776806);
    goto LABEL_25;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  return v10 | v9;
}

void sub_377084()
{
  sub_37652C(0x70687077u, 0, -18.0);
  sub_37652C(0x70687062u, 0, -18.0);
  sub_37652C(0x70687042u, 0, -18.0);
  sub_37652C(0x70687062u, 1634231920, -12.0);

  sub_37652C(0x70687042u, 1633759844, -12.0);
}

uint64_t **sub_37711C(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  unsigned int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  BOOL v7 = a1 + 1;
  unint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        BOOL v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        BOOL v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    unint64_t v10 = (char *)operator new(0xB0uLL);
    v12[1] = v6;
    *((_DWORD *)v10 + 8) = *a3;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 4sub_360D08(&a9, 0) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *((void *)v10 + 21) = 0;
    *(_OWORD *)(v10 + 12sub_360D08(&a9, 0) = 0u;
    *((void *)v10 + 14) = v10 + 120;
    *((void *)v10 + 19) = 0;
    *((void *)v10 + 18) = 0;
    *((void *)v10 + 17) = v10 + 144;
    char v13 = 1;
    sub_46CA8(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    sub_FE0B4((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **sub_377224(uint64_t **a1)
{
  int v6 = 1768776806;
  if (*((unsigned char *)sub_37711C(a1, 0x696D6466u, &v6) + 92))
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v8 = "RoutingTypes.cpp";
      __int16 v9 = 1024;
      int v10 = 651;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  float result = sub_37711C(a1, 0x696D6466u, &v6);
  *((_DWORD *)result + 22) = 1;
  *((unsigned char *)result + 92) = 1;
  return result;
}

void sub_377364(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_377380(uint64_t **a1, void *a2)
{
  sub_375814((void **)&v26, a2);
  int v28 = 1768776806;
  uint64_t v3 = v26;
  uint64_t v4 = (uint64_t)v27;
  if (v26 != v27)
  {
    if (*((unsigned char *)sub_37711C(a1, 0x696D6466u, &v28) + 72))
    {
      int v23 = (os_log_t *)sub_32A48(13);
      std::string v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v30 = "RoutingTypes.cpp";
        __int16 v31 = 1024;
        int v32 = 659;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    uint64_t v5 = sub_37711C(a1, 0x696D6466u, &v28);
    int v6 = v5;
    BOOL v7 = v5 + 6;
    if (!*((unsigned char *)v5 + 72))
    {
      *BOOL v7 = 0;
      v5[7] = 0;
      unsigned char v5[8] = 0;
      sub_E46E0(v5 + 6, v3, v4, (v4 - (uint64_t)v3) >> 3);
      *((unsigned char *)v6 + 72) = 1;
      goto LABEL_26;
    }
    size_t v8 = v4 - (void)v3;
    unint64_t v9 = (v4 - (uint64_t)v3) >> 3;
    uint64_t v10 = (uint64_t)v5[8];
    uint64_t v11 = v5[6];
    if (v9 <= (v10 - (uint64_t)v11) >> 3)
    {
      double v14 = (void **)(v5 + 7);
      unint64_t v18 = v5[7];
      unint64_t v19 = v18 - v11;
      if (v19 < v9)
      {
        int v20 = &v3[8 * v19];
        if (v18 != v11)
        {
          memmove(v11, v3, (char *)v18 - (char *)v11);
          uint64_t v11 = (uint64_t *)*v14;
        }
        size_t v8 = v4 - (void)v20;
        if ((char *)v4 == v20) {
          goto LABEL_25;
        }
        __int16 v21 = v11;
        uint64_t v22 = v20;
LABEL_24:
        memmove(v21, v22, v8);
LABEL_25:
        *double v14 = (char *)v11 + v8;
        goto LABEL_26;
      }
    }
    else
    {
      if (v11)
      {
        v5[7] = v11;
        operator delete(v11);
        uint64_t v10 = 0;
        *BOOL v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
      }
      if ((v8 & 0x8000000000000000) != 0) {
        sub_60548();
      }
      uint64_t v12 = v10 >> 2;
      if (v10 >> 2 <= v9) {
        uint64_t v12 = (v4 - (uint64_t)v3) >> 3;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      sub_66F48(v7, v13);
      uint64_t v15 = v6[7];
      double v14 = (void **)(v6 + 7);
      uint64_t v11 = v15;
    }
    __int16 v21 = v11;
    uint64_t v22 = v3;
    goto LABEL_24;
  }
  char v16 = (os_log_t *)sub_32A48(20);
  unint64_t v17 = *v16;
  if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    __int16 v30 = "RoutingTypes.cpp";
    __int16 v31 = 1024;
    int v32 = 664;
    _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Empty DSPChainConfigVector (expected during bringup)", buf, 0x12u);
  }
LABEL_26:
  if (v3) {
    operator delete(v3);
  }
}

void sub_377668(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_377698(uint64_t **a1, unsigned int a2, int a3)
{
  unsigned int v10 = a2;
  if (*((unsigned char *)sub_37711C(a1, a2, &v10) + 100))
  {
    BOOL v7 = (os_log_t *)sub_32A48(13);
    size_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v12 = "RoutingTypes.cpp";
      __int16 v13 = 1024;
      int v14 = 675;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  float result = sub_37711C(a1, a2, &v10);
  *((_DWORD *)result + 24) = a3;
  *((unsigned char *)result + 10sub_360D08(&a9, 0) = 1;
  return result;
}

void sub_3777D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_3777F0(uint64_t **a1, unsigned int a2, int a3)
{
  unsigned int v10 = a2;
  if (*((unsigned char *)sub_37711C(a1, a2, &v10) + 108))
  {
    BOOL v7 = (os_log_t *)sub_32A48(13);
    size_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v12 = "RoutingTypes.cpp";
      __int16 v13 = 1024;
      int v14 = 681;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  float result = sub_37711C(a1, a2, &v10);
  *((_DWORD *)result + 26) = a3;
  *((unsigned char *)result + 108) = 1;
  return result;
}

void sub_37792C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_377948(uint64_t **a1, unsigned int a2)
{
  int v10 = 1986291046;
  unsigned int v11 = a2;
  uint64_t v4 = sub_37711C(a1, a2, &v11);
  if (*((unsigned char *)sub_377AC4(v4 + 14, 0x76646566u, &v10) + 36))
  {
    BOOL v7 = (os_log_t *)sub_32A48(13);
    size_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 692;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v5 = sub_37711C(a1, a2, &v11);
  float result = sub_377AC4(v5 + 14, 0x76646566u, &v10);
  *((_DWORD *)result + 8) = 1;
  *((unsigned char *)result + 36) = 1;
  return result;
}

void sub_377AA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_377AC4(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    BOOL v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = operator new(0x28uLL);
    v9[7] = *a3;
    *((unsigned char *)v9 + 32) = 0;
    *((unsigned char *)v9 + 36) = 0;
    sub_46CA8(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t **sub_377B74(uint64_t **a1)
{
  qmemcpy(v8, "fedvfdmi", sizeof(v8));
  uint64_t v2 = sub_37711C(a1, 0x696D6466u, &v8[1]);
  if (*((unsigned char *)sub_377AC4(v2 + 17, 0x76646566u, v8) + 36))
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v10 = "RoutingTypes.cpp";
      __int16 v11 = 1024;
      int v12 = 699;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v3 = sub_37711C(a1, 0x696D6466u, &v8[1]);
  float result = sub_377AC4(v3 + 17, 0x76646566u, v8);
  *((_DWORD *)result + 8) = 1;
  *((unsigned char *)result + 36) = 1;
  return result;
}

void sub_377CE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_377D00(uint64_t **a1)
{
  int v6 = 1768776806;
  if (*((unsigned char *)sub_37711C(a1, 0x696D6466u, &v6) + 161))
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unsigned int v8 = "RoutingTypes.cpp";
      __int16 v9 = 1024;
      int v10 = 705;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  float result = sub_37711C(a1, 0x696D6466u, &v6);
  *((_WORD *)result + 8sub_360D08(&a9, 0) = 257;
  return result;
}

void sub_377E3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_377E58(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unsigned int v8 = (uint64_t *)v4;
      }
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 84))
    {
      uint64_t v9 = *(void *)(v5 + 80);
LABEL_25:
      int v12 = v9 & 0xFFFFFF00;
      unint64_t v10 = v9 & 0xFFFFFFFF00000000;
      unint64_t v11 = v9 & 0xFFFFFF0000000000;
      return v10 & 0xFF00000000 | v9 | v11 | v12 & 0xFFFFFF00;
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v13 = sub_32A48(20);
    if (*(unsigned char *)(v13 + 8))
    {
      __int16 v14 = *(NSObject **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          if (v18 >= 0) {
            int v15 = __p;
          }
          else {
            int v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v20 = "RoutingTypes.cpp";
          __int16 v21 = 1024;
          int v22 = 754;
          __int16 v23 = 2080;
          std::string v24 = v15;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v9 = sub_377E58(a1, 1768776806);
    goto LABEL_25;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  int v12 = 0;
  return v10 & 0xFF00000000 | v9 | v11 | v12 & 0xFFFFFF00;
}

uint64_t sub_378010(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unsigned int v8 = (uint64_t *)v4;
      }
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 92))
    {
      uint64_t v9 = *(void *)(v5 + 88);
LABEL_25:
      int v12 = v9 & 0xFFFFFF00;
      unint64_t v10 = v9 & 0xFFFFFFFF00000000;
      unint64_t v11 = v9 & 0xFFFFFF0000000000;
      return v10 & 0xFF00000000 | v9 | v11 | v12 & 0xFFFFFF00;
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v13 = sub_32A48(20);
    if (*(unsigned char *)(v13 + 8))
    {
      __int16 v14 = *(NSObject **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          if (v18 >= 0) {
            int v15 = __p;
          }
          else {
            int v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v20 = "RoutingTypes.cpp";
          __int16 v21 = 1024;
          int v22 = 778;
          __int16 v23 = 2080;
          std::string v24 = v15;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v9 = sub_378010(a1, 1768776806);
    goto LABEL_25;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  int v12 = 0;
  return v10 & 0xFF00000000 | v9 | v11 | v12 & 0xFFFFFF00;
}

unsigned char *sub_3781C8(unsigned char *result, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_16;
  }
  uint64_t v7 = a2 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a3;
    if (v8 >= a3) {
      unint64_t v10 = (uint64_t *)v6;
    }
    else {
      unint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 != a2 + 8 && *(_DWORD *)(v7 + 32) <= a3 && *(unsigned char *)(v7 + 72))
  {
    return (unsigned char *)sub_E4660((uint64_t)result, v7 + 48);
  }
  else
  {
LABEL_16:
    if (a3 == 1768776806)
    {
      uint64_t *result = 0;
      result[24] = 0;
    }
    else
    {
      uint64_t v11 = sub_32A48(20);
      if (*(unsigned char *)(v11 + 8))
      {
        int v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, a3);
            uint64_t v13 = v15 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            unint64_t v17 = "RoutingTypes.cpp";
            __int16 v18 = 1024;
            int v19 = 802;
            __int16 v20 = 2080;
            __int16 v21 = v13;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
            if (v15 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      return (unsigned char *)sub_3781C8(v5, a2, 1768776806);
    }
  }
  return result;
}

uint64_t sub_3783A8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unsigned int v8 = (uint64_t *)v4;
      }
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 100))
    {
      uint64_t v9 = *(void *)(v5 + 96);
LABEL_25:
      int v12 = v9 & 0xFFFFFF00;
      unint64_t v10 = v9 & 0xFFFFFFFF00000000;
      unint64_t v11 = v9 & 0xFFFFFF0000000000;
      return v10 & 0xFF00000000 | v9 | v11 | v12 & 0xFFFFFF00;
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v13 = sub_32A48(20);
    if (*(unsigned char *)(v13 + 8))
    {
      __int16 v14 = *(NSObject **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          if (v18 >= 0) {
            char v15 = __p;
          }
          else {
            char v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v20 = "RoutingTypes.cpp";
          __int16 v21 = 1024;
          int v22 = 826;
          __int16 v23 = 2080;
          std::string v24 = v15;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v9 = sub_3783A8(a1, 1768776806);
    goto LABEL_25;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  int v12 = 0;
  return v10 & 0xFF00000000 | v9 | v11 | v12 & 0xFFFFFF00;
}

uint64_t sub_378560(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unsigned int v8 = (uint64_t *)v4;
      }
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 108))
    {
      uint64_t v9 = *(void *)(v5 + 104);
LABEL_25:
      int v12 = v9 & 0xFFFFFF00;
      unint64_t v10 = v9 & 0xFFFFFFFF00000000;
      unint64_t v11 = v9 & 0xFFFFFF0000000000;
      return v10 & 0xFF00000000 | v9 | v11 | v12 & 0xFFFFFF00;
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v13 = sub_32A48(20);
    if (*(unsigned char *)(v13 + 8))
    {
      __int16 v14 = *(NSObject **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          if (v18 >= 0) {
            char v15 = __p;
          }
          else {
            char v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          __int16 v20 = "RoutingTypes.cpp";
          __int16 v21 = 1024;
          int v22 = 850;
          __int16 v23 = 2080;
          std::string v24 = v15;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v9 = sub_378560(a1, 1768776806);
    goto LABEL_25;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  int v12 = 0;
  return v10 & 0xFF00000000 | v9 | v11 | v12 & 0xFFFFFF00;
}

uint64_t sub_378718(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = a1 + 8;
    do
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        unint64_t v10 = (uint64_t *)v6;
      }
      else {
        unint64_t v10 = (uint64_t *)(v6 + 8);
      }
      if (v9) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v10;
    }
    while (*v10);
    if (v7 != a1 + 8 && *(_DWORD *)(v7 + 32) <= a2)
    {
      uint64_t v13 = *(void *)(v7 + 120);
      uint64_t v11 = v7 + 120;
      uint64_t v12 = v13;
      if (v13)
      {
        uint64_t v14 = v11;
        do
        {
          unsigned int v15 = *(_DWORD *)(v12 + 28);
          BOOL v16 = v15 >= a3;
          if (v15 >= a3) {
            unint64_t v17 = (uint64_t *)v12;
          }
          else {
            unint64_t v17 = (uint64_t *)(v12 + 8);
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          uint64_t v12 = *v17;
        }
        while (*v17);
        if (v14 != v11 && *(_DWORD *)(v14 + 28) <= a3 && *(unsigned char *)(v14 + 36))
        {
          uint64_t v18 = sub_32A48(20);
          if (*(unsigned char *)(v18 + 8))
          {
            int v19 = *(NSObject **)v18;
            if (*(void *)v18)
            {
              if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
              {
                if (!*(unsigned char *)(v14 + 36)) {
                  sub_7F218();
                }
                int v20 = *(_DWORD *)(v14 + 32);
                __int16 v21 = "????";
                if (v20 == 1) {
                  __int16 v21 = "Cull > 16bit";
                }
                if (v20) {
                  int v22 = (char *)v21;
                }
                else {
                  int v22 = "Cull < 24bit";
                }
                __int16 v23 = v43;
                sub_21C8C(v43, v22);
                if (v44 < 0) {
                  __int16 v23 = (void **)v43[0];
                }
                sub_2417C(v41, a2);
                int v24 = v42;
                char v25 = (void **)v41[0];
                sub_2417C(__p, a3);
                std::string v26 = v41;
                if (v24 < 0) {
                  std::string v26 = v25;
                }
                if (v40 >= 0) {
                  CFStringRef v27 = __p;
                }
                else {
                  CFStringRef v27 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                uint64_t v46 = "RoutingTypes.cpp";
                __int16 v47 = 1024;
                int v48 = 871;
                __int16 v49 = 2080;
                uint64_t v50 = v23;
                __int16 v51 = 2080;
                uint64_t v52 = v26;
                __int16 v53 = 2080;
                uint64_t v54 = v27;
                _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found a stream culling policy:%s for mode:%s, device type:%s", buf, 0x30u);
                if (v40 < 0) {
                  operator delete(__p[0]);
                }
                if (v42 < 0) {
                  operator delete(v41[0]);
                }
                if (v44 < 0) {
                  operator delete(v43[0]);
                }
              }
            }
          }
          uint64_t v28 = *(void *)(v14 + 32);
LABEL_62:
          int v31 = v28 & 0xFFFFFF00;
          unint64_t v29 = v28 & 0xFFFFFFFF00000000;
          unint64_t v30 = v28 & 0xFFFFFF0000000000;
          return v29 & 0xFF00000000 | v28 | v30 | v31 & 0xFFFFFF00;
        }
      }
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v32 = sub_32A48(20);
    if (*(unsigned char *)(v32 + 8))
    {
      double v33 = *(NSObject **)v32;
      if (*(void *)v32)
      {
        if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v43, a2);
          int v34 = v44;
          CFDictionaryRef v35 = (void **)v43[0];
          sub_2417C(v41, a3);
          uint64_t v36 = v43;
          if (v34 < 0) {
            uint64_t v36 = v35;
          }
          if (v42 >= 0) {
            CFBooleanRef v37 = v41;
          }
          else {
            CFBooleanRef v37 = (void **)v41[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v46 = "RoutingTypes.cpp";
          __int16 v47 = 1024;
          int v48 = 879;
          __int16 v49 = 2080;
          uint64_t v50 = v36;
          __int16 v51 = 2080;
          uint64_t v52 = v37;
          _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s and device type: %s, looking in default mode instead.", buf, 0x26u);
          if (v42 < 0) {
            operator delete(v41[0]);
          }
          if (v44 < 0) {
            operator delete(v43[0]);
          }
        }
      }
    }
    uint64_t v28 = sub_378718(a1, 1768776806, a3);
    goto LABEL_62;
  }
  LOBYTE(v28) = 0;
  unint64_t v29 = 0;
  unint64_t v30 = 0;
  int v31 = 0;
  return v29 & 0xFF00000000 | v28 | v30 | v31 & 0xFFFFFF00;
}

void sub_378AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_378AEC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v7 = a1 + 8;
    do
    {
      unsigned int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        unint64_t v10 = (uint64_t *)v6;
      }
      else {
        unint64_t v10 = (uint64_t *)(v6 + 8);
      }
      if (v9) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v10;
    }
    while (*v10);
    if (v7 != a1 + 8 && *(_DWORD *)(v7 + 32) <= a2)
    {
      uint64_t v13 = *(void *)(v7 + 144);
      uint64_t v11 = v7 + 144;
      uint64_t v12 = v13;
      if (v13)
      {
        uint64_t v14 = v11;
        do
        {
          unsigned int v15 = *(_DWORD *)(v12 + 28);
          BOOL v16 = v15 >= a3;
          if (v15 >= a3) {
            unint64_t v17 = (uint64_t *)v12;
          }
          else {
            unint64_t v17 = (uint64_t *)(v12 + 8);
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          uint64_t v12 = *v17;
        }
        while (*v17);
        if (v14 != v11 && *(_DWORD *)(v14 + 28) <= a3 && *(unsigned char *)(v14 + 36))
        {
          uint64_t v18 = sub_32A48(20);
          if (*(unsigned char *)(v18 + 8))
          {
            int v19 = *(NSObject **)v18;
            if (*(void *)v18)
            {
              if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
              {
                if (!*(unsigned char *)(v14 + 36)) {
                  sub_7F218();
                }
                uint64_t v20 = *(unsigned int *)(v14 + 32);
                if (v20 > 2) {
                  __int16 v21 = "????";
                }
                else {
                  __int16 v21 = off_6361E8[v20];
                }
                double v33 = v42;
                sub_21C8C(v42, v21);
                if (v43 < 0) {
                  double v33 = (void **)v42[0];
                }
                sub_2417C(__p, a2);
                int v34 = v41;
                CFDictionaryRef v35 = (void **)__p[0];
                sub_2417C(v38, a3);
                uint64_t v36 = __p;
                if (v34 < 0) {
                  uint64_t v36 = v35;
                }
                if (v39 >= 0) {
                  CFBooleanRef v37 = v38;
                }
                else {
                  CFBooleanRef v37 = (void **)v38[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                uint64_t v45 = "RoutingTypes.cpp";
                __int16 v46 = 1024;
                int v47 = 900;
                __int16 v48 = 2080;
                __int16 v49 = v33;
                __int16 v50 = 2080;
                __int16 v51 = v36;
                __int16 v52 = 2080;
                __int16 v53 = v37;
                _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found a sample rate culling policy:%s for mode:%s, device type:%s", buf, 0x30u);
                if (v39 < 0) {
                  operator delete(v38[0]);
                }
                if (v41 < 0) {
                  operator delete(__p[0]);
                }
                if (v43 < 0) {
                  operator delete(v42[0]);
                }
              }
            }
          }
          uint64_t v22 = *(void *)(v14 + 32);
LABEL_45:
          int v25 = v22 & 0xFFFFFF00;
          unint64_t v23 = v22 & 0xFFFFFFFF00000000;
          unint64_t v24 = v22 & 0xFFFFFF0000000000;
          return v23 & 0xFF00000000 | v22 | v24 | v25 & 0xFFFFFF00;
        }
      }
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v26 = sub_32A48(20);
    if (*(unsigned char *)(v26 + 8))
    {
      CFStringRef v27 = *(NSObject **)v26;
      if (*(void *)v26)
      {
        if (os_log_type_enabled(*(os_log_t *)v26, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v42, a2);
          int v28 = v43;
          unint64_t v29 = (void **)v42[0];
          sub_2417C(__p, a3);
          unint64_t v30 = v42;
          if (v28 < 0) {
            unint64_t v30 = v29;
          }
          if (v41 >= 0) {
            int v31 = __p;
          }
          else {
            int v31 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v45 = "RoutingTypes.cpp";
          __int16 v46 = 1024;
          int v47 = 908;
          __int16 v48 = 2080;
          __int16 v49 = v30;
          __int16 v50 = 2080;
          __int16 v51 = v31;
          _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s and device type: %s, looking in default mode instead.", buf, 0x26u);
          if (v41 < 0) {
            operator delete(__p[0]);
          }
          if (v43 < 0) {
            operator delete(v42[0]);
          }
        }
      }
    }
    uint64_t v22 = sub_378AEC(a1, 1768776806, a3);
    goto LABEL_45;
  }
  LOBYTE(v22) = 0;
  unint64_t v23 = 0;
  unint64_t v24 = 0;
  int v25 = 0;
  return v23 & 0xFF00000000 | v22 | v24 | v25 & 0xFFFFFF00;
}

void sub_378E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_378EB8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned int v8 = (uint64_t *)v4;
    }
    else {
      unsigned int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 161))
  {
    unsigned int v9 = *(unsigned __int16 *)(v5 + 160);
    unsigned int v10 = v9 >> 8;
  }
  else
  {
LABEL_14:
    if (a2 == 1768776806)
    {
      LOBYTE(v9) = 0;
      unsigned int v10 = 0;
    }
    else
    {
      uint64_t v11 = sub_32A48(20);
      if (*(unsigned char *)(v11 + 8))
      {
        uint64_t v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, a2);
            if (v16 >= 0) {
              uint64_t v13 = __p;
            }
            else {
              uint64_t v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            uint64_t v18 = "RoutingTypes.cpp";
            __int16 v19 = 1024;
            int v20 = 933;
            __int16 v21 = 2080;
            uint64_t v22 = v13;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      LOWORD(v9) = sub_378EB8(a1, 1768776806);
      unsigned int v10 = BYTE1(v9);
    }
  }
  return v9 | (v10 << 8);
}

uint64_t sub_379058(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v5 = a1 + 8;
    do
    {
      unsigned int v6 = *(_DWORD *)(v4 + 32);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unsigned int v8 = (uint64_t *)v4;
      }
      else {
        unsigned int v8 = (uint64_t *)(v4 + 8);
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      uint64_t v4 = *v8;
    }
    while (*v8);
    if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 168))
    {
      uint64_t v9 = *(void *)(v5 + 164);
LABEL_25:
      int v12 = v9 & 0xFFFFFF00;
      unint64_t v10 = v9 & 0xFFFFFFFF00000000;
      unint64_t v11 = v9 & 0xFFFFFF0000000000;
      return v10 & 0xFF00000000 | v9 | v11 | v12 & 0xFFFFFF00;
    }
  }
  if (a2 != 1768776806)
  {
    uint64_t v13 = sub_32A48(20);
    if (*(unsigned char *)(v13 + 8))
    {
      uint64_t v14 = *(NSObject **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, a2);
          if (v18 >= 0) {
            unsigned int v15 = __p;
          }
          else {
            unsigned int v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          int v20 = "RoutingTypes.cpp";
          __int16 v21 = 1024;
          int v22 = 957;
          __int16 v23 = 2080;
          unint64_t v24 = v15;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
          if (v18 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    uint64_t v9 = sub_379058(a1, 1768776806);
    goto LABEL_25;
  }
  LOBYTE(v9) = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  int v12 = 0;
  return v10 & 0xFF00000000 | v9 | v11 | v12 & 0xFFFFFF00;
}

std::string *sub_379210(std::string *a1, uint64_t **a2)
{
  sub_21C8C(a1, "{ ");
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unsigned int v6 = *a2;
    do
    {
      if (*v6++)
      {
        std::string::append(a1, "[ ", 2uLL);
        sub_375514(&v16, *v5);
        unsigned int v8 = a2[1];
        if (v6 == v8) {
          uint64_t v9 = " ]";
        }
        else {
          uint64_t v9 = " ], ";
        }
        if (v6 == v8) {
          std::string::size_type v10 = 2;
        }
        else {
          std::string::size_type v10 = 4;
        }
        unint64_t v11 = std::string::append(&v16, v9, v10);
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        int64_t v18 = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        if (v18 >= 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        if (v18 >= 0) {
          std::string::size_type v14 = HIBYTE(v18);
        }
        else {
          std::string::size_type v14 = (std::string::size_type)__p[1];
        }
        std::string::append(a1, (const std::string::value_type *)v13, v14);
        if (SHIBYTE(v18) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v16.__r_.__value_.__l.__data_);
        }
        uint64_t v4 = a2[1];
      }
      uint64_t v5 = v6;
    }
    while (v6 != v4);
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_379354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_3793A8(uint64_t *a1, uint64_t a2, void *a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    __int16 v19 = sub_FC7A0(i + 16);
    uint64_t v20 = *a1;
    *__int16 v19 = *a1;
    v19[1] = a1;
    *(void *)(v20 + 8) = v19;
    *a1 = (uint64_t)v19;
    ++a1[2];
  }
  *((unsigned char *)a1 + 24) = (a6 != 0) | (2 * (a7 != 0)) | a1[3] & 0xFC;
  *((_DWORD *)a1 + 8) = a4;
  *((unsigned char *)a1 + 36) = a5 != 0;
  *((unsigned char *)a1 + 37) = a8 != 0;
  *((unsigned char *)a1 + 38) = a9 != 0;
  sub_2D94F0(a1 + 5, a3);
  sub_2D97E4(a1 + 8, a3 + 3);
  *((unsigned char *)a1 + 88) = a10 == 1;
  return a1;
}

void sub_3794C4(_Unwind_Exception *a1)
{
  sub_FCC94(*(void **)(v1 + 48));
  sub_FCCE8((uint64_t *)v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_3794EC(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9)
{
  unint64_t v11 = v12;
  v12[0] = 0;
  v13[0] = 0;
  v13[1] = 0;
  v12[1] = 0;
  void v12[2] = v13;
  sub_3793A8(a1, a2, &v11, a3, a4, a5, a6, a7, a8, a9);
  sub_FCC40(v13[0]);
  sub_FCC94(v12[0]);
  return a1;
}

void sub_379568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
}

uint64_t sub_379584(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, uint64_t a6, _OWORD *a7, uint64_t a8)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = *a3;
  *(void *)(a1 + 16) = *a4;
  *(void *)(a1 + 24) = *a5;
  if (*(unsigned char *)(a6 + 8))
  {
    sub_375814((void **)&v12, *(void **)a6);
    *(_OWORD *)(a1 + 32) = v12;
    *(void *)(a1 + 48) = v13;
    *(unsigned char *)(a1 + 56) = 1;
  }
  else
  {
    sub_E4660(a1 + 32, (uint64_t)&unk_573998);
  }
  *(_OWORD *)(a1 + 64) = *a7;
  sub_E475C((unsigned char *)(a1 + 80), a8);
  sub_3748E8(a1);
  return a1;
}

void sub_379640(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 120)) {
    sub_D7EC0(v3);
  }
  if (*(unsigned char *)(v1 + 56))
  {
    uint64_t v5 = *v2;
    if (*v2)
    {
      *(void *)(v1 + 4sub_360D08(&a9, 0) = v5;
      operator delete(v5);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_37967C(uint64_t result, uint64_t a2)
{
  if (result == a2)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        unsigned int v6 = "RoutingTypes.cpp";
        __int16 v7 = 1024;
        int v8 = 1460;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v5, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }
  return result;
}

void sub_37977C(_Unwind_Exception *exception_object)
{
}

void *sub_379798(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_46B38(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_2D576C(a1 + 3, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  a1[7] = 0;
  a1[8] = 0;
  a1[6] = a1 + 7;
  if (*(void *)a3 == *(void *)(a3 + 8))
  {
    __int16 v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 1167;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v12, 0x12u);
    }
LABEL_11:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(void *)(a2 + 8) - *(void *)a2 != 4)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    std::string::size_type v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 1168;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v12, 0x12u);
    }
    goto LABEL_11;
  }
  sub_37967C(a1[3], a1[4]);
  return a1;
}

void sub_3799A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  sub_463E0(*v4);
  unsigned int v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v6;
    operator delete(v6);
  }
  __int16 v7 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_3799FC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 48) = a1 + 56;
  if (!a2)
  {
    __int16 v19 = (os_log_t *)sub_32A48(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      int v22 = 136315394;
      __int16 v23 = "RoutingTypes.cpp";
      __int16 v24 = 1024;
      int v25 = 1176;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v22, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(unsigned char *)(a2 + 4))
  {
    sub_72D08(a1, (__int32 *)a2);
    int v5 = *(void **)(a1 + 32);
    unint64_t v4 = *(void *)(a1 + 40);
    if ((unint64_t)v5 < v4)
    {
      *int v5 = a2;
      uint64_t v6 = (uint64_t)(v5 + 1);
      goto LABEL_21;
    }
    uint64_t v7 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v7 = 0;
    int v5 = 0;
    unint64_t v4 = 0;
  }
  uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
  if ((unint64_t)(v8 + 1) >> 61) {
    sub_60548();
  }
  uint64_t v9 = v4 - v7;
  uint64_t v10 = v9 >> 2;
  if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
    uint64_t v10 = v8 + 1;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  if (v11) {
    unint64_t v11 = (unint64_t)sub_106EC(v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (void *)(v11 + 8 * v8);
  unint64_t v14 = v11 + 8 * v12;
  *uint64_t v13 = a2;
  uint64_t v6 = (uint64_t)(v13 + 1);
  std::string v16 = *(char **)(a1 + 24);
  int v15 = *(char **)(a1 + 32);
  if (v15 != v16)
  {
    do
    {
      uint64_t v17 = *((void *)v15 - 1);
      v15 -= 8;
      *--uint64_t v13 = v17;
    }
    while (v15 != v16);
    int v15 = *(char **)(a1 + 24);
  }
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 4sub_360D08(&a9, 0) = v14;
  if (v15) {
    operator delete(v15);
  }
LABEL_21:
  *(void *)(a1 + 32) = v6;
  sub_37967C(*(void *)(a1 + 24), v6);
  return a1;
}

void sub_379C00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  sub_463E0(*(void **)(v1 + 56));
  unint64_t v4 = *(void **)(v1 + 24);
  if (v4)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

__n128 sub_379C48(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  sub_37967C(*(void *)(a2 + 24), *(void *)(a2 + 32));
  uint64_t v6 = **(void **)(a2 + 24);
  if (!*(unsigned char *)(v6 + 4))
  {
    uint64_t v35 = sub_32A48(20);
    if (*(unsigned char *)(v35 + 8))
    {
      uint64_t v36 = *(NSObject **)v35;
      if (*(void *)v35)
      {
        if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          char v44 = "RoutingTypes.cpp";
          __int16 v45 = 1024;
          int v46 = 1422;
          _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returned the first SubPortConfiguration entry using the rule that if the first entry has no sub-port ID, it is the default for the SubPortConfigurationGroup.", buf, 0x12u);
        }
      }
    }
    goto LABEL_64;
  }
  uint64_t v7 = *a3;
  if (*a3 == a3[1])
  {
LABEL_64:
    if (*a3 != a3[1])
    {
      uint64_t v37 = sub_32A48(20);
      if (*(unsigned char *)(v37 + 8))
      {
        unint64_t v38 = *(NSObject **)v37;
        if (*(void *)v37)
        {
          if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            char v44 = "RoutingTypes.cpp";
            __int16 v45 = 1024;
            int v46 = 1423;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returned the first SubPortConfiguration entry using the rule that if requested SubPortGroup is empty, use the first entry.", buf, 0x12u);
          }
        }
      }
    }
    char v39 = operator new(8uLL);
    void *v39 = v6;
    result.n128_u64[0] = (unint64_t)v39;
    result.n128_u64[1] = (unint64_t)(v39 + 1);
    *(unsigned char *)a1 = 1;
    *(__n128 *)(a1 + 8) = result;
    *(void *)(a1 + 24) = v39 + 1;
    return result;
  }
  unint64_t v8 = 0;
  __n128 v40 = 0u;
LABEL_4:
  for (uint64_t i = *(void *)(a2 + 24); i != *(void *)(a2 + 32); i += 8)
  {
    uint64_t v10 = *(_DWORD **)i;
    if (*(unsigned char *)(*(void *)i + 4) && *v10 == *v7)
    {
      unint64_t v11 = (char *)v40.n128_u64[1];
      if (v40.n128_u64[1] >= v8)
      {
        uint64_t v14 = (uint64_t)(v40.n128_u64[1] - v40.n128_u64[0]) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          sub_60548();
        }
        if ((uint64_t)(v8 - v40.n128_u64[0]) >> 2 > v15) {
          unint64_t v15 = (uint64_t)(v8 - v40.n128_u64[0]) >> 2;
        }
        if (v8 - v40.n128_u64[0] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16)
        {
          unint64_t v16 = (unint64_t)sub_106EC(v16);
          uint64_t v10 = *(_DWORD **)i;
        }
        else
        {
          uint64_t v17 = 0;
        }
        int64_t v18 = (void *)(v16 + 8 * v14);
        *int64_t v18 = v10;
        uint64_t v13 = (uint64_t)(v18 + 1);
        if (v40.n128_u64[1] != v40.n128_u64[0])
        {
          do
          {
            uint64_t v19 = *((void *)v11 - 1);
            v11 -= 8;
            *--int64_t v18 = v19;
          }
          while (v11 != (char *)v40.n128_u64[0]);
          unint64_t v11 = (char *)v40.n128_u64[0];
        }
        unint64_t v8 = v16 + 8 * v17;
        uint64_t v12 = v18;
        if (v11)
        {
          char v41 = v18;
          operator delete(v11);
          uint64_t v12 = v41;
        }
      }
      else
      {
        *(void *)v40.n128_u64[1] = v10;
        uint64_t v12 = (void *)v40.n128_u64[0];
        uint64_t v13 = v40.n128_u64[1] + 8;
      }
      v20.n128_u64[0] = (unint64_t)v12;
      v20.n128_u64[1] = v13;
      __n128 v40 = v20;
      if (++v7 == a3[1])
      {
        uint64_t v21 = (v13 - (uint64_t)v12) >> 3;
        if (v21 != v7 - *a3)
        {
          int v22 = (os_log_t *)sub_32A48(13);
          __int16 v23 = *v22;
          if (*v22)
          {
            if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              char v44 = "RoutingTypes.cpp";
              __int16 v45 = 1024;
              int v46 = 1453;
              _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Failed to properly build the result value.\"", buf, 0x12u);
            }
          }
        }
        if (v21 == a3[1] - *a3)
        {
          uint64_t v24 = sub_32A48(20);
          if (*(unsigned char *)(v24 + 8))
          {
            int v25 = *(NSObject **)v24;
            if (*(void *)v24)
            {
              if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
              {
                sub_82188(&__p, *a3, a3[1]);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_p = &__p;
                }
                else {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                char v44 = "RoutingTypes.cpp";
                __int16 v45 = 1024;
                int v46 = 1454;
                __int16 v47 = 2080;
                __int16 v48 = p_p;
                _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returned all SubPortConfiguration entries for the SubPortGroup %s.", buf, 0x1Cu);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
          }
        }
        *(unsigned char *)a1 = 1;
        __n128 result = v40;
        *(__n128 *)(a1 + 8) = v40;
        *(void *)(a1 + 24) = v8;
        return result;
      }
      goto LABEL_4;
    }
  }
  int v28 = (os_log_t *)sub_32A48(20);
  unint64_t v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(&__p, *v7);
    unint64_t v30 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    char v44 = "RoutingTypes.cpp";
    __int16 v45 = 1024;
    int v46 = 1444;
    __int16 v47 = 2080;
    __int16 v48 = v30;
    _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unable to locate a SubPortConfiguration for sub-port '%s'. Returning failure. Is this an error in the database?", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  for (uint64_t j = *(unsigned int ***)(a2 + 24); j != *(unsigned int ***)(a2 + 32); ++j)
  {
    if (*((unsigned char *)*j + 4))
    {
      uint64_t v32 = sub_32A48(20);
      if (*(unsigned char *)(v32 + 8))
      {
        double v33 = *(NSObject **)v32;
        if (*(void *)v32)
        {
          if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
          {
            if (!*((unsigned char *)*j + 4)) {
              sub_7F218();
            }
            sub_2417C(&__p, **j);
            int v34 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            char v44 = "RoutingTypes.cpp";
            __int16 v45 = 1024;
            int v46 = 1447;
            __int16 v47 = 2080;
            __int16 v48 = v34;
            _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d SubPortID: %s", buf, 0x1Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
  }
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  __n128 result = v40;
  *(void *)(a1 + 8) = 0;
  if (v40.n128_u64[0]) {
    operator delete((void *)v40.n128_u64[0]);
  }
  return result;
}

void sub_37A24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13)
{
  if ((void)a13) {
    operator delete((void *)a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_37A294(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  uint64_t v7 = a1 + 1;
  unint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        int v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v10 = (char *)operator new(0x70uLL);
    v17[1] = v6;
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 4sub_360D08(&a9, 0) = *(_OWORD *)(a3 + 8);
    *((void *)v10 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *((_OWORD *)v10 + 4) = *(_OWORD *)(a3 + 32);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    uint64_t v11 = *(void *)(a3 + 48);
    uint64_t v12 = *(void *)(a3 + 56);
    *(void *)(a3 + 4sub_360D08(&a9, 0) = 0;
    *(void *)(a3 + 48) = 0;
    uint64_t v13 = (void *)(a3 + 64);
    uint64_t v14 = *(void *)(a3 + 64);
    *((void *)v10 + 1sub_360D08(&a9, 0) = v11;
    *((void *)v10 + 11) = v12;
    *((void *)v10 + 12) = v14;
    unint64_t v15 = v10 + 96;
    uint64_t v16 = *(void *)(a3 + 72);
    *((void *)v10 + 13) = v16;
    if (v16)
    {
      *(void *)(v14 + 16) = v15;
      *(void *)(a3 + 56) = v13;
      *uint64_t v13 = 0;
      *(void *)(a3 + 72) = 0;
    }
    else
    {
      *((void *)v10 + 11) = v15;
    }
    char v18 = 1;
    sub_46CA8(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v17[0] = 0;
    sub_37A3F8((uint64_t)v17);
  }
}

uint64_t sub_37A3AC(uint64_t a1)
{
  sub_463E0(*(void **)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 4sub_360D08(&a9, 0) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_37A3F8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_FE200((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_37A450(uint64_t a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 == a1 + 8 || *(_DWORD *)(v7 + 32) > a2) {
    goto LABEL_12;
  }
  uint64_t v15 = v7 + 40;
  sub_37967C(*(void *)(v7 + 64), *(void *)(v7 + 72));
  sub_379C48((uint64_t)v28, v15, a3);
  if (v28[0])
  {
    uint64_t v16 = v29;
    if (v30 != v29)
    {
      uint64_t v17 = 0;
      unsigned int v18 = 1;
      while (1)
      {
        uint64_t v19 = *(void *)&v29[8 * v17];
        if (*(unsigned char *)(v19 + 20)) {
          break;
        }
        uint64_t v17 = v18;
        if ((v30 - v29) >> 3 <= (unint64_t)v18++) {
          goto LABEL_25;
        }
      }
      uint64_t v25 = *(void *)(v19 + 16);
      unint64_t v23 = v25 & 0xFFFFFF0000000000;
      uint64_t v22 = v25 & 0xFF00000000;
      uint64_t v24 = v25 & 0xFFFFFF00;
      char v21 = v25;
      goto LABEL_27;
    }
    uint64_t v16 = v30;
  }
  else
  {
    uint64_t v16 = v29;
  }
  if (!v16)
  {
LABEL_12:
    unint64_t v11 = 0;
    LODWORD(v12) = 0;
    goto LABEL_13;
  }
LABEL_25:
  char v21 = 0;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
LABEL_27:
  operator delete(v16);
  unint64_t v26 = v24 | v22 | v23;
  unint64_t v12 = v26 >> 8;
  unint64_t v11 = v23 >> 40;
  if (v22)
  {
    LOBYTE(v13) = v26 | v21;
    unint64_t v14 = v26 & 0xFFFFFFFF00000000;
    return (v12 << 8) | v14 & 0xFF00000000 | (v11 << 40) | v13;
  }
LABEL_13:
  if (a2)
  {
    unint64_t v13 = sub_37A450(a1, 0, a3);
    unint64_t v12 = v13 >> 8;
    unint64_t v14 = v13 & 0xFFFFFFFF00000000;
    unint64_t v11 = v13 >> 40;
  }
  else
  {
    LOBYTE(v13) = 0;
    unint64_t v14 = 0;
  }
  return (v12 << 8) | v14 & 0xFF00000000 | (v11 << 40) | v13;
}

uint64_t sub_37A5DC(uint64_t a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 == a1 + 8 || *(_DWORD *)(v7 + 32) > a2) {
    goto LABEL_12;
  }
  uint64_t v15 = v7 + 40;
  sub_37967C(*(void *)(v7 + 64), *(void *)(v7 + 72));
  sub_379C48((uint64_t)v28, v15, a3);
  if (v28[0])
  {
    uint64_t v16 = v29;
    if (v30 != v29)
    {
      uint64_t v17 = 0;
      unsigned int v18 = 1;
      while (1)
      {
        uint64_t v19 = *(void *)&v29[8 * v17];
        if (*(unsigned char *)(v19 + 12)) {
          break;
        }
        uint64_t v17 = v18;
        if ((v30 - v29) >> 3 <= (unint64_t)v18++) {
          goto LABEL_25;
        }
      }
      uint64_t v25 = *(void *)(v19 + 8);
      unint64_t v23 = v25 & 0xFFFFFF0000000000;
      uint64_t v22 = v25 & 0xFF00000000;
      uint64_t v24 = v25 & 0xFFFFFF00;
      char v21 = v25;
      goto LABEL_27;
    }
    uint64_t v16 = v30;
  }
  else
  {
    uint64_t v16 = v29;
  }
  if (!v16)
  {
LABEL_12:
    unint64_t v11 = 0;
    LODWORD(v12) = 0;
    goto LABEL_13;
  }
LABEL_25:
  char v21 = 0;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
LABEL_27:
  operator delete(v16);
  unint64_t v26 = v24 | v22 | v23;
  unint64_t v12 = v26 >> 8;
  unint64_t v11 = v23 >> 40;
  if (v22)
  {
    LOBYTE(v13) = v26 | v21;
    unint64_t v14 = v26 & 0xFFFFFFFF00000000;
    return (v12 << 8) | v14 & 0xFF00000000 | (v11 << 40) | v13;
  }
LABEL_13:
  if (a2)
  {
    unint64_t v13 = sub_37A5DC(a1, 0, a3);
    unint64_t v12 = v13 >> 8;
    unint64_t v14 = v13 & 0xFFFFFFFF00000000;
    unint64_t v11 = v13 >> 40;
  }
  else
  {
    LOBYTE(v13) = 0;
    unint64_t v14 = 0;
  }
  return (v12 << 8) | v14 & 0xFF00000000 | (v11 << 40) | v13;
}

uint64_t sub_37A768(uint64_t a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 == a1 + 8 || *(_DWORD *)(v7 + 32) > a2) {
    goto LABEL_12;
  }
  uint64_t v15 = v7 + 40;
  sub_37967C(*(void *)(v7 + 64), *(void *)(v7 + 72));
  sub_379C48((uint64_t)v28, v15, a3);
  if (v28[0])
  {
    uint64_t v16 = v29;
    if (v30 != v29)
    {
      uint64_t v17 = 0;
      unsigned int v18 = 1;
      while (1)
      {
        uint64_t v19 = *(void *)&v29[8 * v17];
        if (*(unsigned char *)(v19 + 28)) {
          break;
        }
        uint64_t v17 = v18;
        if ((v30 - v29) >> 3 <= (unint64_t)v18++) {
          goto LABEL_25;
        }
      }
      uint64_t v25 = *(void *)(v19 + 24);
      unint64_t v23 = v25 & 0xFFFFFF0000000000;
      uint64_t v22 = v25 & 0xFF00000000;
      uint64_t v24 = v25 & 0xFFFFFF00;
      char v21 = v25;
      goto LABEL_27;
    }
    uint64_t v16 = v30;
  }
  else
  {
    uint64_t v16 = v29;
  }
  if (!v16)
  {
LABEL_12:
    unint64_t v11 = 0;
    LODWORD(v12) = 0;
    goto LABEL_13;
  }
LABEL_25:
  char v21 = 0;
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v24 = 0;
LABEL_27:
  operator delete(v16);
  unint64_t v26 = v24 | v22 | v23;
  unint64_t v12 = v26 >> 8;
  unint64_t v11 = v23 >> 40;
  if (v22)
  {
    LOBYTE(v13) = v26 | v21;
    unint64_t v14 = v26 & 0xFFFFFFFF00000000;
    return (v12 << 8) | v14 & 0xFF00000000 | (v11 << 40) | v13;
  }
LABEL_13:
  if (a2)
  {
    unint64_t v13 = sub_37A768(a1, 0, a3);
    unint64_t v12 = v13 >> 8;
    unint64_t v14 = v13 & 0xFFFFFFFF00000000;
    unint64_t v11 = v13 >> 40;
  }
  else
  {
    LOBYTE(v13) = 0;
    unint64_t v14 = 0;
  }
  return (v12 << 8) | v14 & 0xFF00000000 | (v11 << 40) | v13;
}

unint64_t sub_37A8F4(uint64_t a1, unsigned int a2, unsigned int **a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 == a1 + 8 || *(_DWORD *)(v7 + 32) > a2) {
    goto LABEL_12;
  }
  uint64_t v13 = v7 + 40;
  sub_37967C(*(void *)(v7 + 64), *(void *)(v7 + 72));
  sub_379C48((uint64_t)v23, v13, a3);
  if (v23[0])
  {
    unint64_t v14 = v24;
    if (v25 != v24)
    {
      uint64_t v15 = 0;
      unsigned int v16 = 1;
      while (1)
      {
        uint64_t v17 = *(void *)&v24[8 * v15];
        if (*(unsigned char *)(v17 + 72)) {
          break;
        }
        uint64_t v15 = v16;
        if ((v25 - v24) >> 3 <= (unint64_t)v16++) {
          goto LABEL_25;
        }
      }
      uint64_t v19 = *(void *)(v17 + 72);
      unint64_t v21 = *(void *)(v17 + 64) & 0xFFFFFFFFFFFFFF00;
      char v20 = *(void *)(v17 + 64);
      goto LABEL_27;
    }
    unint64_t v14 = v25;
  }
  else
  {
    unint64_t v14 = v24;
  }
  if (!v14)
  {
LABEL_12:
    unint64_t v11 = 0;
    goto LABEL_13;
  }
LABEL_25:
  LOBYTE(v19) = 0;
  char v20 = 0;
  unint64_t v21 = 0;
LABEL_27:
  operator delete(v14);
  unint64_t v11 = v21 >> 8;
  if ((_BYTE)v19)
  {
    LOBYTE(v12) = v20 | v21;
    return v12 | (v11 << 8);
  }
LABEL_13:
  if (a2)
  {
    unint64_t v12 = sub_37A8F4(a1, 0, a3);
    unint64_t v11 = v12 >> 8;
  }
  else
  {
    LOBYTE(v12) = 0;
  }
  return v12 | (v11 << 8);
}

unint64_t sub_37AA58(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_32;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned int v8 = (uint64_t *)v4;
    }
    else {
      unsigned int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 8) {
    goto LABEL_32;
  }
  if (*(_DWORD *)(v5 + 32) > a2) {
    goto LABEL_32;
  }
  uint64_t v11 = *(void *)(v5 + 96);
  uint64_t v9 = v5 + 96;
  uint64_t v10 = v11;
  if (!v11) {
    goto LABEL_32;
  }
  uint64_t v12 = v9;
  do
  {
    int v13 = *(_DWORD *)(v10 + 32);
    BOOL v14 = v13 < a3;
    if (v13 >= a3) {
      uint64_t v15 = (uint64_t *)v10;
    }
    else {
      uint64_t v15 = (uint64_t *)(v10 + 8);
    }
    if (!v14) {
      uint64_t v12 = v10;
    }
    uint64_t v10 = *v15;
  }
  while (*v15);
  if (v12 != v9 && *(_DWORD *)(v12 + 32) <= a3 && *(unsigned char *)(v12 + 48))
  {
    unsigned int v16 = (os_log_t *)sub_32A48(20);
    uint64_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(unsigned char *)(v12 + 48)) {
        sub_7F218();
      }
      sub_375244(&__p, *(unsigned int **)(v12 + 40));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v24 = "RoutingTypes.cpp";
      __int16 v25 = 1024;
      int v26 = 1686;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 2080;
      unint64_t v30 = p_p;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Extended volume description of type %u present: %s", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v19 = *(void *)(v12 + 40);
  }
  else
  {
LABEL_32:
    if (!a2)
    {
      LOBYTE(v19) = 0;
      unint64_t v20 = 0;
      return v20 | v19;
    }
    uint64_t v19 = sub_37AA58();
  }
  unint64_t v20 = v19 & 0xFFFFFFFFFFFFFF00;
  return v20 | v19;
}

void sub_37AC2C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 != a1 + 8 && *(_DWORD *)(v7 + 32) <= a2)
  {
    int v13 = *(uint64_t **)(v7 + 72);
    unint64_t v12 = *(void *)(v7 + 80);
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = *(void *)(v7 + 64);
      uint64_t v16 = ((uint64_t)v13 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        sub_60548();
      }
      uint64_t v17 = v12 - v15;
      uint64_t v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
        uint64_t v18 = v16 + 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19) {
        unint64_t v19 = (unint64_t)sub_106EC(v19);
      }
      else {
        uint64_t v20 = 0;
      }
      unint64_t v21 = (uint64_t *)(v19 + 8 * v16);
      unint64_t v22 = v19 + 8 * v20;
      uint64_t *v21 = a3;
      uint64_t v14 = (uint64_t)(v21 + 1);
      uint64_t v24 = *(char **)(v7 + 64);
      unint64_t v23 = *(char **)(v7 + 72);
      if (v23 != v24)
      {
        do
        {
          uint64_t v25 = *((void *)v23 - 1);
          v23 -= 8;
          *--unint64_t v21 = v25;
        }
        while (v23 != v24);
        unint64_t v23 = *(char **)(v7 + 64);
      }
      *(void *)(v7 + 64) = v21;
      *(void *)(v7 + 72) = v14;
      *(void *)(v7 + 8sub_360D08(&a9, 0) = v22;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *int v13 = a3;
      uint64_t v14 = (uint64_t)(v13 + 1);
    }
    *(void *)(v7 + 72) = v14;
    uint64_t v26 = *(void *)(v7 + 64);
    sub_37967C(v26, v14);
  }
  else
  {
LABEL_12:
    sub_3799FC((uint64_t)v27, a3);
    unsigned int v34 = a2;
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v27;
    uint64_t v36 = v28;
    v27[0] = 0;
    v27[1] = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v29;
    uint64_t v28 = 0;
    v29[0] = 0;
    uint64_t v11 = v30;
    v29[1] = 0;
    uint64_t v30 = 0;
    uint64_t v38 = v11;
    char v39 = v31;
    v40[0] = v32;
    v40[1] = v33;
    if (v33)
    {
      v32[2] = v40;
      int v31 = &v32;
      uint64_t v32 = 0;
      double v33 = 0;
    }
    else
    {
      char v39 = v40;
    }
    sub_37A294((uint64_t **)a1, a2, (uint64_t)&v34);
    sub_463E0(v40[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v35[0])
    {
      v35[1] = v35[0];
      operator delete(v35[0]);
    }
    sub_463E0(v32);
    if (v29[0])
    {
      v29[1] = v29[0];
      operator delete(v29[0]);
    }
    if (v27[0])
    {
      v27[1] = v27[0];
      operator delete(v27[0]);
    }
  }
}

void sub_37AE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_37AE5C(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  if (!a3)
  {
    unint64_t v21 = (os_log_t *)sub_32A48(13);
    unint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v32 = "RoutingTypes.cpp";
      *(_WORD *)&unsigned char v32[8] = 1024;
      *(_DWORD *)&v32[10] = 1769;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = a1 + 1;
    do
    {
      unsigned int v9 = *((_DWORD *)v6 + 8);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        uint64_t v11 = (uint64_t **)v6;
      }
      else {
        uint64_t v11 = (uint64_t **)(v6 + 1);
      }
      if (v10) {
        unsigned int v8 = (uint64_t **)v6;
      }
      uint64_t v6 = *v11;
    }
    while (*v11);
    if (v8 != v7 && *((_DWORD *)v8 + 8) <= a2)
    {
      uint64_t v24 = (os_log_t *)sub_32A48(13);
      uint64_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&v28, a2);
        uint64_t v26 = v30 >= 0 ? &v28 : (void **)v28;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)uint64_t v32 = "RoutingTypes.cpp";
        *(_WORD *)&unsigned char v32[8] = 1024;
        *(_DWORD *)&v32[10] = 1772;
        *(_WORD *)&v32[14] = 2080;
        *(void *)&v32[16] = v26;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempting to insert a SubPortConfigurationGroup for an existing mode \\\"%s\\\"\"", buf, 0x1Cu);
        if (SHIBYTE(v30) < 0) {
          operator delete(v28);
        }
      }
      __int16 v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v27, "Attempting to insert a SubPortConfigurationGroup for an existing mode \"%s\"");
    }
  }
  __int16 v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = &v29;
  *(_DWORD *)AudioObjectPropertyAddress buf = 0;
  memset(&v32[4], 0, 24);
  sub_46B38(&v32[4], *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  std::string __p = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  sub_2D576C(&__p, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3);
  sub_2D57E8(v36, (void *)(a3 + 48));
  sub_37A294((uint64_t **)&v28, *(unsigned int *)buf, (uint64_t)buf);
  sub_463E0((void *)v36[1]);
  if (__p)
  {
    unsigned int v34 = __p;
    operator delete(__p);
  }
  if (*(void *)&v32[4])
  {
    *(void *)&v32[12] = *(void *)&v32[4];
    operator delete(*(void **)&v32[4]);
  }
  unint64_t v12 = *v7;
  int v13 = v7;
  if (*v7)
  {
    while (1)
    {
      while (1)
      {
        int v13 = (uint64_t **)v12;
        unsigned int v14 = *((_DWORD *)v12 + 8);
        if (v14 <= a2) {
          break;
        }
        unint64_t v12 = *v13;
        uint64_t v7 = v13;
        if (!*v13) {
          goto LABEL_24;
        }
      }
      if (v14 >= a2) {
        break;
      }
      unint64_t v12 = v13[1];
      if (!v12)
      {
        uint64_t v7 = v13 + 1;
        goto LABEL_24;
      }
    }
    uint64_t v15 = v13;
  }
  else
  {
LABEL_24:
    uint64_t v15 = operator new(0x40uLL);
    v15[8] = a2;
    *((void *)v15 + 7) = 0;
    *((void *)v15 + 6) = 0;
    *((void *)v15 + 5) = v15 + 12;
    *(void *)uint64_t v15 = 0;
    *((void *)v15 + 1) = 0;
    *((void *)v15 + 2) = v13;
    *uint64_t v7 = (uint64_t *)v15;
    uint64_t v16 = (uint64_t *)**a1;
    uint64_t v17 = (uint64_t *)v15;
    if (v16)
    {
      *a1 = v16;
      uint64_t v17 = *v7;
    }
    sub_46D00(a1[1], v17);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  uint64_t v18 = (char *)(v15 + 12);
  sub_FE1AC(*((void **)v15 + 6));
  unint64_t v19 = v29;
  *((void *)v15 + 5) = v28;
  *((void *)v15 + 6) = v19;
  uint64_t v20 = v30;
  *((void *)v15 + 7) = v30;
  if (v20)
  {
    v19[2] = v18;
    uint64_t v28 = &v29;
    __int16 v29 = 0;
    uint64_t v30 = 0;
    unint64_t v19 = 0;
  }
  else
  {
    *((void *)v15 + 5) = v18;
  }
  sub_FE1AC(v19);
}

void sub_37B208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

char *sub_37B27C(uint64_t **a1, uint64_t a2)
{
  int v9 = 1768776806;
  if (*((unsigned char *)sub_37B41C(a1, 0x696D6466u, &v9) + 64))
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 1791;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = sub_37B41C(a1, 0x696D6466u, &v9);
  __n128 result = (char *)(v4 + 5);
  if (*((unsigned char *)v4 + 64))
  {
    if (result != (char *)a2) {
      return sub_6720C(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    }
  }
  else
  {
    *(void *)__n128 result = 0;
    v4[6] = 0;
    v4[7] = 0;
    __n128 result = (char *)sub_46B38(result, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *((unsigned char *)v4 + 64) = 1;
  }
  return result;
}

void sub_37B400(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_37B41C(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  unsigned int v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    BOOL v10 = (char *)operator new(0xB8uLL);
    v12[1] = v6;
    *((_DWORD *)v10 + 8) = *a3;
    *(_OWORD *)(v10 + 12sub_360D08(&a9, 0) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 4sub_360D08(&a9, 0) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *((void *)v10 + 15) = v10 + 128;
    *((_WORD *)v10 + 9sub_360D08(&a9, 0) = 0;
    *((_DWORD *)v10 + 44) = 0;
    char v13 = 1;
    sub_46CA8(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    sub_2D9E54((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **sub_37B51C(uint64_t **a1, unsigned int a2, __int16 a3)
{
  unsigned int v10 = a2;
  if (*((unsigned char *)sub_37B41C(a1, a2, &v10) + 73))
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v12 = "RoutingTypes.cpp";
      __int16 v13 = 1024;
      int v14 = 1797;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  __n128 result = sub_37B41C(a1, a2, &v10);
  *((_WORD *)result + 36) = a3 | 0x100;
  return result;
}

void sub_37B654(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_37B670(uint64_t **a1, unsigned int a2, __int16 a3)
{
  unsigned int v10 = a2;
  if (*((unsigned char *)sub_37B41C(a1, a2, &v10) + 75))
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v12 = "RoutingTypes.cpp";
      __int16 v13 = 1024;
      int v14 = 1803;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  __n128 result = sub_37B41C(a1, a2, &v10);
  *((_WORD *)result + 37) = a3 | 0x100;
  return result;
}

void sub_37B7A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_37B7C4(uint64_t **a1, unsigned int a2, __int16 a3)
{
  unsigned int v10 = a2;
  if (*((unsigned char *)sub_37B41C(a1, a2, &v10) + 77))
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v12 = "RoutingTypes.cpp";
      __int16 v13 = 1024;
      int v14 = 1809;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  __n128 result = sub_37B41C(a1, a2, &v10);
  *((_WORD *)result + 38) = a3 | 0x100;
  return result;
}

void sub_37B8FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_37B918(uint64_t **a1, __int16 a2)
{
  int v8 = 1768776806;
  if (*((unsigned char *)sub_37B41C(a1, 0x696D6466u, &v8) + 79))
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unsigned int v10 = "RoutingTypes.cpp";
      __int16 v11 = 1024;
      int v12 = 1815;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  __n128 result = sub_37B41C(a1, 0x696D6466u, &v8);
  *((_WORD *)result + 39) = a2 | 0x100;
  return result;
}

void sub_37BA58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_37BA74(uint64_t *result, uint64_t *a2)
{
  if (result[5])
  {
    int v12 = (os_log_t *)sub_32A48(13);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v15 = 136315394;
      *(void *)&void v15[4] = "RoutingTypes.cpp";
      __int16 v16 = 1024;
      int v17 = 1838;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v15, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v2 = (uint64_t **)(result + 3);
  if (result + 3 != a2)
  {
    uint64_t v3 = a2 + 1;
    uint64_t v4 = (void *)*a2;
    if ((uint64_t *)*a2 != a2 + 1)
    {
      uint64_t v5 = (uint64_t **)(result + 4);
      do
      {
        sub_2D9D80((uint64_t)v15, (uint64_t)v2, (_DWORD *)v4 + 8);
        uint64_t v6 = *v5;
        uint64_t v7 = v5;
        int v8 = v5;
        if (*v5)
        {
          do
          {
            while (1)
            {
              uint64_t v7 = (uint64_t **)v6;
              if (*(_DWORD *)(*(void *)v15 + 32) >= *((_DWORD *)v6 + 8)) {
                break;
              }
              uint64_t v6 = (uint64_t *)*v6;
              int v8 = v7;
              if (!*v7) {
                goto LABEL_11;
              }
            }
            uint64_t v6 = (uint64_t *)v6[1];
          }
          while (v6);
          int v8 = v7 + 1;
        }
LABEL_11:
        __n128 result = sub_46CA8(v2, (uint64_t)v7, v8, *(uint64_t **)v15);
        unsigned int v9 = (void *)v4[1];
        if (v9)
        {
          do
          {
            unsigned int v10 = v9;
            unsigned int v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            unsigned int v10 = (void *)v4[2];
            BOOL v11 = *v10 == (void)v4;
            uint64_t v4 = v10;
          }
          while (!v11);
        }
        uint64_t v4 = v10;
      }
      while (v10 != v3);
    }
  }
  return result;
}

void sub_37BC30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_37BC4C(uint64_t **a1, unsigned int a2, uint64_t a3)
{
  unsigned int v11 = a2;
  if (*((unsigned char *)sub_37B41C(a1, a2, &v11) + 112))
  {
    int v8 = (os_log_t *)sub_32A48(13);
    unsigned int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v13 = "RoutingTypes.cpp";
      __int16 v14 = 1024;
      int v15 = 1844;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v6 = sub_37B41C(a1, a2, &v11);
  __n128 result = v6 + 11;
  if (*((unsigned char *)v6 + 112))
  {
    if (result != (uint64_t **)a3) {
      return sub_C6650(result, *(void **)a3, (void *)(a3 + 8));
    }
  }
  else
  {
    __n128 result = (uint64_t **)sub_46A4C((uint64_t *)result, a3);
    *((unsigned char *)v6 + 112) = 1;
  }
  return result;
}

void sub_37BDB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_37BDD0(uint64_t **a1, uint64_t a2)
{
  int v30 = 1768776806;
  if (*((unsigned char *)sub_37B41C(a1, 0x696D6466u, &v30) + 168))
  {
    uint64_t v4 = sub_37B41C(a1, 0x696D6466u, &v30);
    unsigned int v31 = 1919705967;
    sub_46A4C((uint64_t *)&v32, a2);
    uint64_t v6 = v4 + 19;
    uint64_t v5 = v4[19];
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v7 = (uint64_t **)v5;
          unsigned int v8 = *((_DWORD *)v5 + 8);
          if (v31 >= v8) {
            break;
          }
          uint64_t v5 = *v7;
          uint64_t v6 = v7;
          if (!*v7) {
            goto LABEL_12;
          }
        }
        if (v8 >= v31) {
          break;
        }
        uint64_t v5 = v7[1];
        if (!v5)
        {
          uint64_t v6 = v7 + 1;
          goto LABEL_12;
        }
      }
    }
    else
    {
      uint64_t v7 = v4 + 19;
LABEL_12:
      unsigned int v9 = operator new(0x40uLL);
      unsigned int v10 = v31;
      uint64_t v12 = (uint64_t)v32;
      unsigned int v11 = v33;
      v9[6] = v33;
      __int16 v13 = (char *)(v9 + 6);
      *((_DWORD *)v9 + 8) = v10;
      v9[5] = v12;
      uint64_t v14 = v34;
      v9[7] = v34;
      if (v14)
      {
        v11[2] = v13;
        uint64_t v32 = &v33;
        double v33 = 0;
        uint64_t v34 = 0;
      }
      else
      {
        v9[5] = v13;
      }
      sub_46CA8(v4 + 18, (uint64_t)v7, v6, v9);
    }
    int v15 = v33;
  }
  else
  {
    sub_46A4C((uint64_t *)&v24, a2);
    unsigned int v31 = 1919705967;
    uint64_t v32 = v24;
    double v33 = v25;
    uint64_t v34 = v26;
    if (v26)
    {
      _OWORD v25[2] = &v33;
      uint64_t v24 = &v25;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
    }
    else
    {
      uint64_t v32 = &v33;
    }
    uint64_t v28 = 0;
    __int16 v29 = 0;
    __int16 v27 = (uint64_t *)&v28;
    sub_2D9F8C((uint64_t *)&v27, (uint64_t *)&v28, v31, &v31);
    __int16 v16 = sub_37B41C(a1, 0x696D6466u, &v30);
    int v17 = v16;
    if (*((unsigned char *)v16 + 168))
    {
      uint64_t v18 = (uint64_t *)(v16 + 19);
      sub_FCC40(v16[19]);
      unint64_t v19 = v28;
      v17[18] = v27;
      *uint64_t v18 = (uint64_t)v19;
      uint64_t v20 = v29;
      v17[20] = v29;
      if (v20)
      {
        v19[2] = v18;
        __int16 v27 = (uint64_t *)&v28;
        uint64_t v28 = 0;
        __int16 v29 = 0;
        unint64_t v19 = 0;
      }
      else
      {
        v17[18] = v18;
      }
    }
    else
    {
      uint64_t v21 = (uint64_t)v27;
      unint64_t v19 = v28;
      v17[19] = v28;
      unint64_t v22 = (uint64_t *)(v17 + 19);
      v17[18] = (uint64_t *)v21;
      unint64_t v23 = v29;
      v17[20] = v29;
      if (v23)
      {
        v19[2] = v22;
        __int16 v27 = (uint64_t *)&v28;
        uint64_t v28 = 0;
        __int16 v29 = 0;
        unint64_t v19 = 0;
      }
      else
      {
        v17[18] = v22;
      }
      *((unsigned char *)v17 + 168) = 1;
    }
    sub_FCC40(v19);
    sub_463E0(v33);
    int v15 = v25;
  }
  sub_463E0(v15);
}

void sub_37C058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
}

uint64_t *sub_37C098(uint64_t **a1, uint64_t a2)
{
  int v5 = 2003133037;
  uint64_t v3 = sub_37B41C(a1, 0x7765626Du, &v5);
  return sub_46AA0((uint64_t *)v3 + 15, *(void **)a2, (void *)(a2 + 8));
}

unsigned char *sub_37C0EC(unsigned char *result, uint64_t a2, unsigned int a3)
{
  int v5 = result;
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_16;
  }
  uint64_t v7 = a2 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a3;
    if (v8 >= a3) {
      unsigned int v10 = (uint64_t *)v6;
    }
    else {
      unsigned int v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 != a2 + 8 && *(_DWORD *)(v7 + 32) <= a3 && *(unsigned char *)(v7 + 64))
  {
    return (unsigned char *)sub_2D9EAC((uint64_t)result, v7 + 40);
  }
  else
  {
LABEL_16:
    if (a3 == 1768776806)
    {
      char *result = 0;
      result[24] = 0;
    }
    else
    {
      uint64_t v11 = sub_32A48(20);
      if (*(unsigned char *)(v11 + 8))
      {
        uint64_t v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, a3);
            __int16 v13 = v15 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            int v17 = "RoutingTypes.cpp";
            __int16 v18 = 1024;
            int v19 = 1898;
            __int16 v20 = 2080;
            uint64_t v21 = v13;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
            if (v15 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      return (unsigned char *)sub_37C0EC(v5, a2, 1768776806);
    }
  }
  return result;
}

uint64_t sub_37C2CC(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned int v8 = (uint64_t *)v4;
    }
    else {
      unsigned int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 73))
  {
    unsigned int v9 = *(unsigned __int16 *)(v5 + 72);
    unsigned int v10 = v9 >> 8;
  }
  else
  {
LABEL_14:
    if (a2 == 1768776806)
    {
      LOBYTE(v9) = 0;
      unsigned int v10 = 0;
    }
    else
    {
      uint64_t v11 = sub_32A48(20);
      if (*(unsigned char *)(v11 + 8))
      {
        uint64_t v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, a2);
            if (v16 >= 0) {
              __int16 v13 = __p;
            }
            else {
              __int16 v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v18 = "RoutingTypes.cpp";
            __int16 v19 = 1024;
            int v20 = 1922;
            __int16 v21 = 2080;
            unint64_t v22 = v13;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      LOWORD(v9) = sub_37C2CC(a1, 1768776806);
      unsigned int v10 = BYTE1(v9);
    }
  }
  return v9 | (v10 << 8);
}

uint64_t sub_37C46C(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = _os_feature_enabled_impl();
  if (!v4) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    uint64_t v6 = a1 + 8;
    do
    {
      unsigned int v7 = *(_DWORD *)(v5 + 32);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        unsigned int v9 = (uint64_t *)v5;
      }
      else {
        unsigned int v9 = (uint64_t *)(v5 + 8);
      }
      if (v8) {
        uint64_t v6 = v5;
      }
      uint64_t v5 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 8 && *(_DWORD *)(v6 + 32) <= a2 && *(unsigned char *)(v6 + 75))
    {
      unsigned int v4 = *(unsigned __int16 *)(v6 + 74);
      unsigned int v10 = v4 >> 8;
      return v4 | (v10 << 8);
    }
  }
  if (a2 == 1768776806)
  {
    LOBYTE(v4) = 0;
LABEL_17:
    unsigned int v10 = 0;
    return v4 | (v10 << 8);
  }
  uint64_t v11 = sub_32A48(20);
  if (*(unsigned char *)(v11 + 8))
  {
    uint64_t v12 = *(NSObject **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(__p, a2);
        if (v16 >= 0) {
          __int16 v13 = __p;
        }
        else {
          __int16 v13 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        __int16 v18 = "RoutingTypes.cpp";
        __int16 v19 = 1024;
        int v20 = 1950;
        __int16 v21 = 2080;
        unint64_t v22 = v13;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  LOWORD(v4) = sub_37C46C(a1, 1768776806);
  unsigned int v10 = BYTE1(v4);
  return v4 | (v10 << 8);
}

uint64_t sub_37C624(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = (uint64_t *)v4;
    }
    else {
      BOOL v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 77))
  {
    unsigned int v9 = *(unsigned __int16 *)(v5 + 76);
    unsigned int v10 = v9 >> 8;
  }
  else
  {
LABEL_14:
    if (a2 == 1768776806)
    {
      LOBYTE(v9) = 0;
      unsigned int v10 = 0;
    }
    else
    {
      uint64_t v11 = sub_32A48(20);
      if (*(unsigned char *)(v11 + 8))
      {
        uint64_t v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, a2);
            if (v16 >= 0) {
              __int16 v13 = __p;
            }
            else {
              __int16 v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v18 = "RoutingTypes.cpp";
            __int16 v19 = 1024;
            int v20 = 1972;
            __int16 v21 = 2080;
            unint64_t v22 = v13;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      LOWORD(v9) = sub_37C624(a1, 1768776806);
      unsigned int v10 = BYTE1(v9);
    }
  }
  return v9 | (v10 << 8);
}

uint64_t sub_37C7C4(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_14;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = (uint64_t *)v4;
    }
    else {
      BOOL v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 8 && *(_DWORD *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 79))
  {
    unsigned int v9 = *(unsigned __int16 *)(v5 + 78);
    unsigned int v10 = v9 >> 8;
  }
  else
  {
LABEL_14:
    if (a2 == 1768776806)
    {
      LOBYTE(v9) = 0;
      unsigned int v10 = 0;
    }
    else
    {
      uint64_t v11 = sub_32A48(20);
      if (*(unsigned char *)(v11 + 8))
      {
        uint64_t v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, a2);
            if (v16 >= 0) {
              __int16 v13 = __p;
            }
            else {
              __int16 v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v18 = "RoutingTypes.cpp";
            __int16 v19 = 1024;
            int v20 = 2011;
            __int16 v21 = 2080;
            unint64_t v22 = v13;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      LOWORD(v9) = sub_37C7C4(a1, 1768776806);
      unsigned int v10 = BYTE1(v9);
    }
  }
  return v9 | (v10 << 8);
}

unsigned char *sub_37C964(unsigned char *result, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_16;
  }
  uint64_t v7 = a2 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a3;
    if (v8 >= a3) {
      unsigned int v10 = (uint64_t *)v6;
    }
    else {
      unsigned int v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 != a2 + 8 && *(_DWORD *)(v7 + 32) <= a3 && *(unsigned char *)(v7 + 112))
  {
    return (unsigned char *)sub_2D9F2C((uint64_t)result, v7 + 88);
  }
  else
  {
LABEL_16:
    if (a3 == 1768776806)
    {
      char *result = 0;
      result[24] = 0;
    }
    else
    {
      uint64_t v11 = sub_32A48(20);
      if (*(unsigned char *)(v11 + 8))
      {
        uint64_t v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, a3);
            __int16 v13 = v15 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            int v17 = "RoutingTypes.cpp";
            __int16 v18 = 1024;
            int v19 = 2042;
            __int16 v20 = 2080;
            __int16 v21 = v13;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
            if (v15 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      return (unsigned char *)sub_37C964(v5, a2, 1768776806);
    }
  }
  return result;
}

uint64_t *sub_37CB44(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_24;
  }
  uint64_t v7 = a2 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a3;
    if (v8 >= a3) {
      unsigned int v10 = (uint64_t *)v6;
    }
    else {
      unsigned int v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 == a2 + 8) {
    goto LABEL_24;
  }
  if (*(_DWORD *)(v7 + 32) > a3) {
    goto LABEL_24;
  }
  if (!*(unsigned char *)(v7 + 168)) {
    goto LABEL_24;
  }
  uint64_t v13 = *(void *)(v7 + 152);
  uint64_t v11 = v7 + 152;
  uint64_t v12 = v13;
  if (!v13) {
    goto LABEL_24;
  }
  uint64_t v14 = v11;
  do
  {
    unsigned int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 >= 0x726C636F;
    if (v15 >= 0x726C636F) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (v16) {
      uint64_t v14 = v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 != v11 && *(_DWORD *)(v14 + 32) <= 0x726C636Fu)
  {
    __n128 result = sub_46A4C(result, v14 + 40);
    *((unsigned char *)v5 + 24) = 1;
  }
  else
  {
LABEL_24:
    if (a3 == 1768776806)
    {
      *(unsigned char *)__n128 result = 0;
      *((unsigned char *)result + 24) = 0;
    }
    else
    {
      uint64_t v18 = sub_32A48(20);
      if (*(unsigned char *)(v18 + 8))
      {
        int v19 = *(NSObject **)v18;
        if (*(void *)v18)
        {
          if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(v26, a3);
            int v20 = v27;
            __int16 v21 = (void **)v26[0];
            sub_2417C(__p, 0x726C636Fu);
            unint64_t v22 = v26;
            if (v20 < 0) {
              unint64_t v22 = v21;
            }
            if (v25 >= 0) {
              unint64_t v23 = __p;
            }
            else {
              unint64_t v23 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            __int16 v29 = "RoutingTypes.cpp";
            __int16 v30 = 1024;
            int v31 = 2071;
            __int16 v32 = 2080;
            double v33 = v22;
            __int16 v34 = 2080;
            uint64_t v35 = v23;
            _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: (%s, %s), Looking in default mode instead.", buf, 0x26u);
            if (v25 < 0) {
              operator delete(__p[0]);
            }
            if (v27 < 0) {
              operator delete(v26[0]);
            }
          }
        }
      }
      return (uint64_t *)sub_37CB44(v5, a2, 1768776806);
    }
  }
  return result;
}

void sub_37CD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_37CD94(uint64_t *result, uint64_t a2, unsigned int a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(a2 + 8);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a2 + 8;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= a3;
    if (v8 >= a3) {
      unsigned int v10 = (uint64_t *)v6;
    }
    else {
      unsigned int v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 != a2 + 8 && *(_DWORD *)(v7 + 32) <= a3)
  {
    return sub_46A4C(result, v7 + 120);
  }
  else
  {
LABEL_12:
    if (a3 == 1768776806)
    {
      result[2] = 0;
      result[1] = 0;
      char *result = (uint64_t)(result + 1);
    }
    else
    {
      uint64_t v11 = sub_32A48(20);
      if (*(unsigned char *)(v11 + 8))
      {
        uint64_t v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, a3);
            if (v15 >= 0) {
              uint64_t v13 = __p;
            }
            else {
              uint64_t v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            int v17 = "RoutingTypes.cpp";
            __int16 v18 = 1024;
            int v19 = 2092;
            __int16 v20 = 2080;
            __int16 v21 = v13;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: (%s), Looking in default mode instead.", buf, 0x1Cu);
            if (v15 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      return (uint64_t *)sub_37CD94(v5, a2, 1768776806);
    }
  }
  return result;
}

uint64_t sub_37CF74(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    unsigned int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unsigned int v8 = (uint64_t *)v4;
    }
    else {
      unsigned int v8 = (uint64_t *)(v4 + 8);
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 8 || *(_DWORD *)(v5 + 32) > a2 || (unsigned int v9 = *(unsigned __int16 *)(v5 + 176), (v10 = v9 >> 8) == 0))
  {
LABEL_13:
    if (a2 == 1768776806)
    {
      LOBYTE(v9) = 0;
      unsigned int v10 = 0;
    }
    else
    {
      uint64_t v11 = sub_32A48(20);
      if (*(unsigned char *)(v11 + 8))
      {
        uint64_t v12 = *(NSObject **)v11;
        if (*(void *)v11)
        {
          if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, a2);
            if (v16 >= 0) {
              uint64_t v13 = __p;
            }
            else {
              uint64_t v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v18 = "RoutingTypes.cpp";
            __int16 v19 = 1024;
            int v20 = 2116;
            __int16 v21 = 2080;
            unint64_t v22 = v13;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in default mode instead.", buf, 0x1Cu);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      LOWORD(v9) = sub_37CF74(a1, 1768776806);
      unsigned int v10 = BYTE1(v9);
    }
  }
  return v9 | (v10 << 8);
}

uint64_t sub_37D10C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    unsigned int v8 = (os_log_t *)sub_32A48(13);
    unsigned int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v17 = 136315394;
      *(void *)__int16 v18 = "RoutingTypes.cpp";
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)&v18[10] = 2431;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v17, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(void *)(a2 + 40) - *(void *)(a2 + 32) >= 8uLL)
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      unsigned int v17 = 136315394;
      *(void *)__int16 v18 = "RoutingTypes.cpp";
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)&v18[10] = 2432;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v17, 0x12u);
    }
    uint64_t v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }
  if (sub_37D544(a2))
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    char v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      unsigned int v17 = 136315394;
      *(void *)__int16 v18 = "RoutingTypes.cpp";
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)&v18[10] = 2433;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v17, 0x12u);
    }
    char v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Precondition failure.");
  }
  if (*(_DWORD *)a2)
  {
    unsigned int v17 = *(_DWORD *)(a2 + 4);
    *(_OWORD *)&v18[4] = *(_OWORD *)(a2 + 8);
    unsigned int v6 = sub_37D5B8(a1 + 3, v17, *(unint64_t *)&v18[4], (uint64_t)&v17);
  }
  else
  {
    unsigned int v17 = *(_DWORD *)(a2 + 4);
    *(_OWORD *)&v18[4] = *(_OWORD *)(a2 + 8);
    unsigned int v6 = sub_37D5B8(a1, v17, *(unint64_t *)&v18[4], (uint64_t)&v17);
  }
  sub_37AC2C((uint64_t)(v6 + 96), *(_DWORD *)(a2 + 24), a3);
  return sub_37D420((uint64_t)a1);
}

void sub_37D3FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_37D420(uint64_t result)
{
  if (*(void *)(result + 16) && *(void *)(result + 40))
  {
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "RoutingTypes.cpp";
        __int16 v6 = 1024;
        int v7 = 2944;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v4, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }
  return result;
}

void sub_37D528(_Unwind_Exception *exception_object)
{
}

BOOL sub_37D544(uint64_t a1)
{
  return dword_668D98 == *(_DWORD *)a1
      && dword_668D9C == *(_DWORD *)(a1 + 4)
      && ((xmmword_668DA0 ^ *(_DWORD *)(a1 + 8)) & 7) == 0
      && dword_668DB0 == *(_DWORD *)(a1 + 24)
      && sub_E48A0((void *)qword_668DB8, unk_668DC0, *(void **)(a1 + 32), *(void *)(a1 + 40));
}

char *sub_37D5B8(uint64_t **a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  int v7 = (char *)(a1 + 1);
  __int16 v6 = (char *)a1[1];
  if (v6)
  {
    while (1)
    {
      int v7 = v6;
      unsigned int v8 = *((_DWORD *)v6 + 8);
      if (v8 > a2) {
        goto LABEL_6;
      }
      if (v8 == a2)
      {
        unint64_t v9 = *((void *)v7 + 5);
        BOOL v11 = v9 >= a3;
        if (v9 <= a3) {
          goto LABEL_8;
        }
LABEL_6:
        __int16 v6 = *(char **)v7;
        unsigned int v10 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_12;
        }
      }
      else
      {
        BOOL v11 = v8 >= a2;
LABEL_8:
        if (v11) {
          return v7;
        }
        unsigned int v10 = (uint64_t **)(v7 + 8);
        __int16 v6 = (char *)*((void *)v7 + 1);
        if (!v6) {
          goto LABEL_12;
        }
      }
    }
  }
  unsigned int v10 = a1 + 1;
LABEL_12:
  uint64_t v12 = v7;
  int v7 = (char *)operator new(0x78uLL);
  *((_OWORD *)v7 + 2) = *(_OWORD *)a4;
  *((void *)v7 + 6) = *(void *)(a4 + 16);
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *((void *)v7 + 12) = v7 + 104;
  *(void *)int v7 = 0;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = v12;
  *unsigned int v10 = (uint64_t *)v7;
  uint64_t v13 = (uint64_t *)**a1;
  uint64_t v14 = (uint64_t *)v7;
  if (v13)
  {
    *a1 = v13;
    uint64_t v14 = *v10;
  }
  sub_46D00(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v7;
}

uint64_t sub_37D6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 4sub_360D08(&a9, 0) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  sub_37D10C((uint64_t **)a1, a2, a3);
  sub_37D420(a1);
  return a1;
}

void sub_37D71C(_Unwind_Exception *a1)
{
  sub_463E0(*v3);
  sub_FE148(*v2);
  sub_FE148(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_37D740(uint64_t a1, void *a2)
{
  if (!a2)
  {
    CFArrayRef v67 = (os_log_t *)sub_32A48(13);
    uint64_t v68 = *v67;
    if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingTypes.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2455;
      _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!sub_37D544((uint64_t)&unk_65D550) && !sub_37D544((uint64_t)&dword_668D98))
  {
    CFDictionaryRef v70 = (os_log_t *)sub_32A48(13);
    uint64_t v71 = *v70;
    if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingTypes.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2456;
      _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    std::string v72 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v72, "Precondition failure.");
  }
  int v3 = dword_668D98;
  sub_37D420(a1);
  int v4 = (uint64_t **)(a1 + 24);
  if (!v3) {
    int v4 = (uint64_t **)a1;
  }
  CFNumberRef v76 = v4;
  uint64_t v5 = a2 + 1;
  uint64_t i = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    std::string v74 = a2 + 1;
    do
    {
      unsigned int v81 = *((_DWORD *)i + 8);
      long long v82 = xmmword_668DA0;
      int v7 = sub_37D5B8(v76, v81, xmmword_668DA0, (uint64_t)&v81);
      unsigned int v8 = (uint64_t **)(v7 + 96);
      if (v7 + 96 != (char *)(i + 5))
      {
        unint64_t v9 = (void *)i[5];
        CFStringRef v80 = i + 6;
        if (*((void *)v7 + 14))
        {
          CFBooleanRef v75 = v7;
          uint64_t v11 = *((void *)v7 + 13);
          unsigned int v10 = (uint64_t **)(v7 + 104);
          uint64_t v12 = (uint64_t)*(v10 - 1);
          *(v10 - 1) = (uint64_t *)v10;
          *(void *)(v11 + 16) = 0;
          *unsigned int v10 = 0;
          v10[1] = 0;
          CFStringRef v79 = v10;
          if (*(void *)(v12 + 8)) {
            uint64_t v13 = *(void *)(v12 + 8);
          }
          else {
            uint64_t v13 = v12;
          }
          *(void *)AudioObjectPropertyAddress buf = v8;
          *(void *)&buf[8] = v13;
          *(void *)&buf[16] = v13;
          if (v13)
          {
            *(void *)&buf[8] = sub_6CA9C(v13);
            if (v9 != v80)
            {
              CFStringRef v77 = i;
              CFStringRef v78 = v8;
              while (1)
              {
                *(_DWORD *)(v13 + 32) = *((_DWORD *)v9 + 8);
                if ((void *)v13 != v9) {
                  break;
                }
LABEL_82:
                __int16 v51 = v79;
                __int16 v52 = *v79;
                __int16 v53 = v79;
                if (*v79)
                {
                  do
                  {
                    while (1)
                    {
                      __int16 v53 = (uint64_t **)v52;
                      if (*(_DWORD *)(*(void *)&buf[16] + 32) >= *((_DWORD *)v52 + 8)) {
                        break;
                      }
                      __int16 v52 = (uint64_t *)*v52;
                      __int16 v51 = v53;
                      if (!*v53) {
                        goto LABEL_88;
                      }
                    }
                    __int16 v52 = (uint64_t *)v52[1];
                  }
                  while (v52);
                  __int16 v51 = v53 + 1;
                }
LABEL_88:
                sub_46CA8(v8, (uint64_t)v53, v51, *(uint64_t **)&buf[16]);
                *(void *)&buf[16] = *(void *)&buf[8];
                if (*(void *)&buf[8]) {
                  *(void *)&buf[8] = sub_6CA9C(*(uint64_t *)&buf[8]);
                }
                uint64_t v54 = (void *)v9[1];
                if (v54)
                {
                  do
                  {
                    int v55 = v54;
                    uint64_t v54 = (void *)*v54;
                  }
                  while (v54);
                }
                else
                {
                  do
                  {
                    int v55 = (void *)v9[2];
                    BOOL v56 = *v55 == (void)v9;
                    unint64_t v9 = v55;
                  }
                  while (!v56);
                }
                uint64_t v13 = *(void *)&buf[16];
                if (*(void *)&buf[16]) {
                  BOOL v56 = v55 == v80;
                }
                else {
                  BOOL v56 = 1;
                }
                unint64_t v9 = v55;
                if (v56) {
                  goto LABEL_102;
                }
              }
              sub_6720C((char *)(v13 + 40), (char *)v9[5], v9[6], (uint64_t)(v9[6] - v9[5]) >> 2);
              uint64_t v14 = *(char **)(v13 + 64);
              char v16 = (unsigned char *)v9[8];
              char v15 = (unsigned char *)v9[9];
              size_t v17 = v15 - v16;
              unint64_t v18 = (v15 - v16) >> 3;
              uint64_t v19 = *(void *)(v13 + 80);
              if (v18 <= (v19 - (uint64_t)v14) >> 3)
              {
                unint64_t v22 = *(unsigned char **)(v13 + 72);
                unint64_t v23 = (v22 - v14) >> 3;
                if (v23 >= v18) {
                  goto LABEL_32;
                }
                if (v22 != v14)
                {
                  memmove(*(void **)(v13 + 64), (const void *)v9[8], v22 - v14);
                  uint64_t v14 = *(char **)(v13 + 72);
                }
                uint64_t v24 = &v16[8 * v23];
                size_t v17 = v15 - v24;
                if (v15 != v24)
                {
                  char v25 = v14;
                  goto LABEL_34;
                }
              }
              else
              {
                if (v14)
                {
                  *(void *)(v13 + 72) = v14;
                  operator delete(v14);
                  uint64_t v19 = 0;
                  *(void *)(v13 + 64) = 0;
                  *(void *)(v13 + 72) = 0;
                  *(void *)(v13 + 8sub_360D08(&a9, 0) = 0;
                }
                if ((v17 & 0x8000000000000000) != 0) {
                  sub_60548();
                }
                uint64_t v20 = v19 >> 2;
                if (v19 >> 2 <= v18) {
                  uint64_t v20 = (v15 - v16) >> 3;
                }
                if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v21 = v20;
                }
                sub_66F48((void *)(v13 + 64), v21);
                uint64_t v14 = *(char **)(v13 + 72);
LABEL_32:
                if (v15 != v16)
                {
                  char v25 = v14;
                  uint64_t v24 = v16;
LABEL_34:
                  memmove(v25, v24, v17);
                }
              }
              unsigned int v8 = v78;
              *(void *)(v13 + 72) = &v14[v17];
              uint64_t v26 = (uint64_t **)(v13 + 88);
              char v27 = (void *)v9[11];
              uint64_t v28 = v9 + 12;
              if (*(void *)(v13 + 104))
              {
                __int16 v30 = (uint64_t **)(v13 + 96);
                uint64_t v29 = *(void *)(v13 + 96);
                uint64_t v31 = *(void *)(v13 + 88);
                *(void *)(v13 + 88) = v13 + 96;
                *(void *)(v29 + 16) = 0;
                *(void *)(v13 + 96) = 0;
                *(void *)(v13 + 104) = 0;
                if (*(void *)(v31 + 8)) {
                  uint64_t v32 = *(void *)(v31 + 8);
                }
                else {
                  uint64_t v32 = v31;
                }
                if (v32)
                {
                  double v33 = sub_6CA9C(v32);
                  if (v27 == v28)
                  {
                    uint64_t v35 = (void *)v32;
                  }
                  else
                  {
                    __int16 v34 = v27;
                    do
                    {
                      uint64_t v35 = v33;
                      int v36 = *((_DWORD *)v34 + 8);
                      *(_DWORD *)(v32 + 32) = v36;
                      uint64_t v37 = v34[5];
                      *(unsigned char *)(v32 + 48) = *((unsigned char *)v34 + 48);
                      *(void *)(v32 + 4sub_360D08(&a9, 0) = v37;
                      uint64_t v38 = *v30;
                      char v39 = (uint64_t **)(v13 + 96);
                      __n128 v40 = (uint64_t **)(v13 + 96);
                      if (*v30)
                      {
                        do
                        {
                          while (1)
                          {
                            char v39 = (uint64_t **)v38;
                            if (v36 >= *((_DWORD *)v38 + 8)) {
                              break;
                            }
                            uint64_t v38 = (uint64_t *)*v38;
                            __n128 v40 = v39;
                            if (!*v39) {
                              goto LABEL_48;
                            }
                          }
                          uint64_t v38 = (uint64_t *)v38[1];
                        }
                        while (v38);
                        __n128 v40 = v39 + 1;
                      }
LABEL_48:
                      sub_46CA8((uint64_t **)(v13 + 88), (uint64_t)v39, v40, (uint64_t *)v32);
                      if (v33) {
                        double v33 = sub_6CA9C((uint64_t)v33);
                      }
                      else {
                        double v33 = 0;
                      }
                      char v41 = (void *)v34[1];
                      if (v41)
                      {
                        do
                        {
                          char v27 = v41;
                          char v41 = (void *)*v41;
                        }
                        while (v41);
                      }
                      else
                      {
                        do
                        {
                          char v27 = (void *)v34[2];
                          BOOL v56 = *v27 == (void)v34;
                          __int16 v34 = v27;
                        }
                        while (!v56);
                      }
                      if (!v35) {
                        break;
                      }
                      uint64_t v32 = (uint64_t)v35;
                      __int16 v34 = v27;
                    }
                    while (v27 != v28);
                  }
                  sub_463E0(v35);
                  if (v33)
                  {
                    char v42 = (void *)v33[2];
                    for (i = v77; v42; char v42 = (void *)v42[2])
                      double v33 = v42;
                    sub_463E0(v33);
                  }
                  else
                  {
                    uint64_t i = v77;
                  }
                  unsigned int v8 = v78;
                  goto LABEL_68;
                }
                sub_463E0(0);
              }
              uint64_t i = v77;
LABEL_68:
              if (v27 != v28)
              {
                char v43 = (uint64_t **)(v13 + 96);
                do
                {
                  char v44 = operator new(0x38uLL);
                  long long v45 = *((_OWORD *)v27 + 2);
                  v44[6] = v27[6];
                  *((_OWORD *)v44 + 2) = v45;
                  int v46 = *v43;
                  __int16 v47 = v43;
                  __int16 v48 = v43;
                  if (*v43)
                  {
                    do
                    {
                      while (1)
                      {
                        __int16 v47 = (uint64_t **)v46;
                        if (*((_DWORD *)v44 + 8) >= *((_DWORD *)v46 + 8)) {
                          break;
                        }
                        int v46 = (uint64_t *)*v46;
                        __int16 v48 = v47;
                        if (!*v47) {
                          goto LABEL_76;
                        }
                      }
                      int v46 = (uint64_t *)v46[1];
                    }
                    while (v46);
                    __int16 v48 = v47 + 1;
                  }
LABEL_76:
                  sub_46CA8(v26, (uint64_t)v47, v48, v44);
                  __int16 v49 = (void *)v27[1];
                  if (v49)
                  {
                    do
                    {
                      __int16 v50 = v49;
                      __int16 v49 = (void *)*v49;
                    }
                    while (v49);
                  }
                  else
                  {
                    do
                    {
                      __int16 v50 = (void *)v27[2];
                      BOOL v56 = *v50 == (void)v27;
                      char v27 = v50;
                    }
                    while (!v56);
                  }
                  char v27 = v50;
                }
                while (v50 != v28);
              }
              goto LABEL_82;
            }
          }
          int v55 = v9;
LABEL_102:
          sub_37DFB0((uint64_t)buf);
          unint64_t v9 = v55;
          uint64_t v5 = v74;
          int v7 = v75;
        }
        if (v9 != v80)
        {
          unint64_t v57 = (uint64_t **)(v7 + 104);
          do
          {
            uint64_t v58 = operator new(0x70uLL);
            *(void *)AudioObjectPropertyAddress buf = v58;
            *(void *)&buf[8] = v57;
            buf[16] = 0;
            *((_DWORD *)v58 + 8) = *((_DWORD *)v9 + 8);
            *((void *)v58 + 5) = 0;
            *((void *)v58 + 6) = 0;
            *((void *)v58 + 7) = 0;
            sub_46B38((void *)v58 + 5, (const void *)v9[5], v9[6], (uint64_t)(v9[6] - v9[5]) >> 2);
            *((void *)v58 + 8) = 0;
            *((void *)v58 + 9) = 0;
            *((void *)v58 + 1sub_360D08(&a9, 0) = 0;
            sub_2D576C((void *)v58 + 8, (const void *)v9[8], v9[9], (uint64_t)(v9[9] - v9[8]) >> 3);
            sub_2D57E8((uint64_t *)v58 + 11, v9 + 11);
            buf[16] = 1;
            unint64_t v59 = *v57;
            std::string::size_type v60 = v57;
            std::string::size_type v61 = v57;
            if (*v57)
            {
              do
              {
                while (1)
                {
                  std::string::size_type v60 = (uint64_t **)v59;
                  if (*((_DWORD *)v58 + 8) >= *((_DWORD *)v59 + 8)) {
                    break;
                  }
                  unint64_t v59 = (uint64_t *)*v59;
                  std::string::size_type v61 = v60;
                  if (!*v60) {
                    goto LABEL_111;
                  }
                }
                unint64_t v59 = (uint64_t *)v59[1];
              }
              while (v59);
              std::string::size_type v61 = v60 + 1;
            }
LABEL_111:
            sub_46CA8(v8, (uint64_t)v60, v61, (uint64_t *)v58);
            *(void *)AudioObjectPropertyAddress buf = 0;
            sub_37A3F8((uint64_t)buf);
            CFBooleanRef v62 = (void *)v9[1];
            if (v62)
            {
              do
              {
                CFDictionaryRef v63 = v62;
                CFBooleanRef v62 = (void *)*v62;
              }
              while (v62);
            }
            else
            {
              do
              {
                CFDictionaryRef v63 = (void *)v9[2];
                BOOL v56 = *v63 == (void)v9;
                unint64_t v9 = v63;
              }
              while (!v56);
            }
            unint64_t v9 = v63;
          }
          while (v63 != v80);
        }
      }
      CFDictionaryRef v64 = (void *)i[1];
      if (v64)
      {
        do
        {
          long long v65 = v64;
          CFDictionaryRef v64 = (void *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          long long v65 = (void *)i[2];
          BOOL v56 = *v65 == (void)i;
          uint64_t i = v65;
        }
        while (!v56);
      }
      uint64_t i = v65;
    }
    while (v65 != v5);
  }
  return sub_37D420(a1);
}

void sub_37DF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_37DFB0(uint64_t a1)
{
  sub_FE1AC(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_FE1AC(v2);
  }
  return a1;
}

void *sub_37E000(void *a1, void *a2)
{
  a1[1] = 0;
  *a1 = a1 + 1;
  a1[4] = 0;
  a1[2] = 0;
  a1[3] = a1 + 4;
  a1[7] = 0;
  a1[8] = 0;
  a1[5] = 0;
  a1[6] = a1 + 7;
  sub_37D740((uint64_t)a1, a2);
  sub_37D420((uint64_t)a1);
  return a1;
}

void sub_37E060(_Unwind_Exception *a1)
{
  sub_463E0(*v3);
  sub_FE148(*v2);
  sub_FE148(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_37E084(uint64_t **a1, _DWORD *a2, uint64_t a3)
{
  if (!a3)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 2448;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*a2 != 1)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    unsigned int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "RoutingTypes.cpp";
      __int16 v12 = 1024;
      int v13 = 2449;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v10, 0x12u);
    }
    unint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v9, "Precondition failure.");
  }

  return sub_37D10C(a1, (uint64_t)a2, a3);
}

void sub_37E244(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_37E264(uint64_t a1, int a2)
{
  if (qword_668D60 != 1)
  {
    __int16 v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      *(void *)char v16 = "RoutingTypes.cpp";
      *(_WORD *)&unsigned char v16[8] = 1024;
      *(_DWORD *)&v16[10] = 2490;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v15, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (dword_668D78)
  {
    unint64_t v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      *(void *)char v16 = "RoutingTypes.cpp";
      *(_WORD *)&unsigned char v16[8] = 1024;
      *(_DWORD *)&v16[10] = 2491;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v15, 0x12u);
    }
    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v11, "Precondition failure.");
  }
  if (qword_668D80 != qword_668D88)
  {
    __int16 v12 = (os_log_t *)sub_32A48(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      *(void *)char v16 = "RoutingTypes.cpp";
      *(_WORD *)&unsigned char v16[8] = 1024;
      *(_DWORD *)&v16[10] = 2492;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v15, 0x12u);
    }
    uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "Precondition failure.");
  }
  int v15 = HIDWORD(qword_668D60);
  *(_OWORD *)&v16[4] = xmmword_668D68;
  int v4 = sub_37D5B8((uint64_t **)(a1 + 24), HIDWORD(qword_668D60), xmmword_668D68, (uint64_t)&v15);
  *((_DWORD *)v4 + 2sub_360D08(&a9, 0) = a2;
  v4[84] = 1;
  return sub_37D420(a1);
}

void sub_37E520(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_37E544(uint64_t a1, int *a2, uint64_t a3, int a4)
{
  if (!a3)
  {
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    char v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v38 = "RoutingTypes.cpp";
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)&v38[10] = 2500;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*((void *)a2 + 4) != *((void *)a2 + 5))
  {
    char v27 = (os_log_t *)sub_32A48(13);
    uint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v38 = "RoutingTypes.cpp";
      *(_WORD *)&v38[8] = 1024;
      *(_DWORD *)&v38[10] = 2501;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v29, "Precondition failure.");
  }
  int v8 = *a2;
  sub_37D420(a1);
  if (v8) {
    unint64_t v9 = (uint64_t **)(a1 + 24);
  }
  else {
    unint64_t v9 = (uint64_t **)a1;
  }
  unsigned int v30 = a2[1];
  long long v31 = *(_OWORD *)(a2 + 2);
  int v10 = sub_37D5B8(v9, v30, v31, (uint64_t)&v30);
  __int16 v12 = v10 + 104;
  uint64_t v11 = *((void *)v10 + 13);
  unsigned int v13 = a2[6];
  if (!v11) {
    goto LABEL_17;
  }
  uint64_t v14 = v10 + 104;
  do
  {
    unsigned int v15 = *(_DWORD *)(v11 + 32);
    BOOL v16 = v15 >= v13;
    if (v15 >= v13) {
      size_t v17 = (uint64_t *)v11;
    }
    else {
      size_t v17 = (uint64_t *)(v11 + 8);
    }
    if (v16) {
      uint64_t v14 = (char *)v11;
    }
    uint64_t v11 = *v17;
  }
  while (*v17);
  if (v14 != v12 && *((_DWORD *)v14 + 8) <= v13)
  {
    uint64_t v18 = *((void *)v14 + 12);
    if (v18)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v19 = v18;
          int v20 = *(_DWORD *)(v18 + 32);
          if (v20 <= a4) {
            break;
          }
          uint64_t v18 = *(void *)v19;
          unint64_t v21 = (uint64_t **)v19;
          if (!*(void *)v19) {
            goto LABEL_36;
          }
        }
        if (v20 >= a4) {
          break;
        }
        uint64_t v18 = *(void *)(v19 + 8);
        if (!v18)
        {
          unint64_t v21 = (uint64_t **)(v19 + 8);
          goto LABEL_36;
        }
      }
    }
    else
    {
      unint64_t v21 = (uint64_t **)(v14 + 96);
      uint64_t v19 = (uint64_t)(v14 + 96);
LABEL_36:
      unint64_t v22 = operator new(0x38uLL);
      v22[8] = a4;
      *((unsigned char *)v22 + 4sub_360D08(&a9, 0) = 0;
      *((unsigned char *)v22 + 48) = 0;
      sub_46CA8((uint64_t **)v14 + 11, v19, v21, (uint64_t *)v22);
      uint64_t v19 = (uint64_t)v22;
    }
    *(void *)(v19 + 4sub_360D08(&a9, 0) = a3;
    *(unsigned char *)(v19 + 48) = 1;
    sub_37967C(*((void *)v14 + 8), *((void *)v14 + 9));
  }
  else
  {
LABEL_17:
    memset(v33, 0, sizeof(v33));
    *(_OWORD *)uint64_t v32 = 0u;
    int v44 = 0;
    uint64_t v45 = a3;
    char v46 = 1;
    uint64_t v35 = 0;
    int v36 = 0;
    __int16 v34 = &v35;
    sub_2DA7A4((uint64_t *)&v34, (uint64_t *)&v35, 0, (uint64_t)&v44);
    *(_DWORD *)AudioObjectPropertyAddress buf = v13;
    *(_OWORD *)&v38[4] = *(_OWORD *)v32;
    char v39 = v33[0];
    v32[0] = 0;
    v32[1] = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)&v33[1];
    memset(v33, 0, sizeof(v33));
    char v41 = v33[3];
    char v42 = v34;
    v43[0] = v35;
    v43[1] = v36;
    if (v36)
    {
      v35[2] = v43;
      __int16 v34 = &v35;
      uint64_t v35 = 0;
      int v36 = 0;
    }
    else
    {
      char v42 = v43;
    }
    sub_37A294((uint64_t **)v12 - 1, v13, (uint64_t)buf);
    sub_463E0(v43[0]);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v38[4])
    {
      *(void *)&v38[12] = *(void *)&v38[4];
      operator delete(*(void **)&v38[4]);
    }
    sub_463E0(v35);
    if (v33[1])
    {
      v33[2] = v33[1];
      operator delete(v33[1]);
    }
    if (v32[0])
    {
      v32[1] = v32[0];
      operator delete(v32[0]);
    }
  }
  return sub_37D420(a1);
}

void sub_37E928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_37E990(uint64_t a1, int a2)
{
  if (dword_668D78)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      *(void *)unsigned int v15 = "RoutingTypes.cpp";
      *(_WORD *)&v15[8] = 1024;
      *(_DWORD *)&v15[10] = 2512;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (qword_668D80 != qword_668D88)
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      *(void *)unsigned int v15 = "RoutingTypes.cpp";
      *(_WORD *)&v15[8] = 1024;
      *(_DWORD *)&v15[10] = 2513;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    unsigned int v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }
  int v4 = qword_668D60;
  sub_37D420(a1);
  if (v4) {
    uint64_t v5 = (uint64_t **)(a1 + 24);
  }
  else {
    uint64_t v5 = (uint64_t **)a1;
  }
  int v14 = HIDWORD(qword_668D60);
  *(_OWORD *)&void v15[4] = xmmword_668D68;
  __int16 v6 = sub_37D5B8(v5, HIDWORD(qword_668D60), xmmword_668D68, (uint64_t)&v14);
  *((_DWORD *)v6 + 14) = a2;
  v6[60] = 1;
  return sub_37D420(a1);
}

void sub_37EBAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_37EBCC(uint64_t a1, int *a2, int a3)
{
  if (a2[6])
  {
    unsigned int v15 = (os_log_t *)sub_32A48(13);
    BOOL v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      unsigned int v24 = 136315394;
      *(void *)char v25 = "RoutingTypes.cpp";
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = 2522;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v24, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*((void *)a2 + 4) != *((void *)a2 + 5))
  {
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      unsigned int v24 = 136315394;
      *(void *)char v25 = "RoutingTypes.cpp";
      *(_WORD *)&v25[8] = 1024;
      *(_DWORD *)&v25[10] = 2523;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v24, 0x12u);
    }
    int v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Precondition failure.");
  }
  int v6 = *a2;
  sub_37D420(a1);
  if (v6) {
    int v7 = (uint64_t **)(a1 + 24);
  }
  else {
    int v7 = (uint64_t **)a1;
  }
  unsigned int v9 = a2[1];
  int v8 = a2 + 1;
  unsigned int v24 = v9;
  *(_OWORD *)&void v25[4] = *(_OWORD *)(v8 + 1);
  int v10 = sub_37D5B8(v7, v9, *(unint64_t *)&v25[4], (uint64_t)&v24);
  *((_DWORD *)v10 + 16) = a3;
  v10[68] = 1;
  unsigned int v24 = *v8;
  *(_OWORD *)&void v25[4] = *(_OWORD *)(v8 + 1);
  uint64_t v11 = sub_37EEF8((uint64_t)v7, (int *)&v24);
  if (v7 + 1 != (uint64_t **)v11)
  {
    __int16 v12 = *(unsigned __int16 **)(v11 + 72);
    if (v12)
    {
      int v13 = *v12;
      if (v13 != a3)
      {
        unint64_t v21 = (os_log_t *)sub_32A48(13);
        unint64_t v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          unsigned int v24 = 136315906;
          *(void *)char v25 = "RoutingTypes.cpp";
          *(_WORD *)&v25[8] = 1024;
          *(_DWORD *)&v25[10] = 2535;
          *(_WORD *)&v25[14] = 1024;
          *(_DWORD *)&v25[16] = a3;
          __int16 v26 = 1024;
          int v27 = v13;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempting to InsertForcedNumVirtualChannels %u which doesn't match the ForcedChannelLayout channel count %u\"", (uint8_t *)&v24, 0x1Eu);
        }
        unint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v23, "Attempting to InsertForcedNumVirtualChannels %u which doesn't match the ForcedChannelLayout channel count %u");
      }
    }
  }
  return sub_37D420(a1);
}

void sub_37EED4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_37EEF8(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 8;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    goto LABEL_15;
  }
  unsigned int v6 = *a2;
  unint64_t v7 = *((void *)a2 + 1);
  uint64_t result = a1 + 8;
  do
  {
    unsigned int v9 = *(_DWORD *)(v4 + 32);
    if (v9 >= v6)
    {
      if (v9 == v6)
      {
        if (*(void *)(v4 + 40) < v7) {
          v4 += 8;
        }
        else {
          uint64_t result = v4;
        }
      }
      else
      {
        uint64_t result = v4;
      }
    }
    else
    {
      v4 += 8;
    }
    uint64_t v4 = *(void *)v4;
  }
  while (v4);
  if (result == v5 || (unsigned int v10 = *(_DWORD *)(result + 32), v6 < v10) || v6 == v10 && v7 < *(void *)(result + 40))
  {
LABEL_15:
    if (((a2[2] ^ *(_DWORD *)sub_3AEE60()) & 7) != 0)
    {
      unsigned int v11 = *a2;
      long long v12 = *(_OWORD *)sub_3AEE60();
      return sub_37EEF8(a1, &v11);
    }
    else
    {
      return v5;
    }
  }
  return result;
}

uint64_t sub_37EFEC(uint64_t a1, int *a2)
{
  int inSpecifier = -267386874;
  if (a2[6])
  {
    unint64_t v23 = (os_log_t *)sub_32A48(13);
    unsigned int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v35 = "RoutingTypes.cpp";
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)&v35[10] = 2543;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*((void *)a2 + 4) != *((void *)a2 + 5))
  {
    __int16 v26 = (os_log_t *)sub_32A48(13);
    int v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)uint64_t v35 = "RoutingTypes.cpp";
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)&v35[10] = 2544;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v28, "Precondition failure.");
  }
  int v4 = *a2;
  sub_37D420(a1);
  if (v4) {
    uint64_t v5 = (uint64_t **)(a1 + 24);
  }
  else {
    uint64_t v5 = (uint64_t **)a1;
  }
  ioOSStatus PropertyDataSize = 132;
  unsigned int v6 = sub_3F34AC(6u);
  *(_DWORD *)unsigned int v6 = 0;
  OSStatus Property = AudioFormatGetProperty(0x636D706Cu, 4u, &inSpecifier, &ioPropertyDataSize, v6);
  OSStatus v8 = Property;
  if (Property)
  {
    if (Property != 560360820)
    {
      uint64_t v29 = (os_log_t *)sub_32A48(13);
      unsigned int v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)uint64_t v35 = "RoutingTypes.cpp";
        *(_WORD *)&v35[8] = 1024;
        *(_DWORD *)&v35[10] = 2560;
        *(_WORD *)&v35[14] = 1024;
        *(_DWORD *)&v35[16] = v8;
        _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"AudioFormatGetProperty(kAudioFormatProperty_ChannelLayoutForTag,..,) returned error %d\"", buf, 0x18u);
      }
      long long v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v31, "AudioFormatGetProperty(kAudioFormatProperty_ChannelLayoutForTag,..,) returned error %d");
    }
    uint64_t v9 = sub_32A48(20);
    if (*(unsigned char *)(v9 + 8))
    {
      unsigned int v10 = *(NSObject **)v9;
      if (*(void *)v9)
      {
        if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)uint64_t v35 = "RoutingTypes.cpp";
          *(_WORD *)&v35[8] = 1024;
          *(_DWORD *)&v35[10] = 2556;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d AudioFormatGetProperty(kAudioFormatProperty_ChannelLayoutForTag,..,) returned kAudioFormatUnknownFormatError.", buf, 0x12u);
        }
      }
    }
    *(_DWORD *)unsigned int v6 = inSpecifier;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = a2[1];
  *(_OWORD *)&v35[4] = *(_OWORD *)(a2 + 2);
  unsigned int v11 = sub_37D5B8(v5, *(unsigned int *)buf, *(unint64_t *)&v35[4], (uint64_t)buf);
  long long v12 = a2 + 2;
  int v13 = (void *)*((void *)v11 + 9);
  *((void *)v11 + 9) = v6;
  if (v13) {
    free(v13);
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = a2[1];
  *(_OWORD *)&v35[4] = *v12;
  uint64_t v14 = sub_37EEF8((uint64_t)v5, (int *)buf);
  if (v5 + 1 != (uint64_t **)v14)
  {
    int v15 = (unsigned __int16)inSpecifier;
    if (*(unsigned char *)(v14 + 68) && (int v16 = *(_DWORD *)(v14 + 64)) != 0)
    {
      if (v16 != (unsigned __int16)inSpecifier)
      {
        int v17 = *(_DWORD *)(v14 + 64);
        uint64_t v18 = (os_log_t *)sub_32A48(13);
        uint64_t v19 = *v18;
        if (*v18)
        {
          if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)uint64_t v35 = "RoutingTypes.cpp";
            *(_WORD *)&v35[8] = 1024;
            *(_DWORD *)&v35[10] = 2571;
            *(_WORD *)&v35[14] = 1024;
            *(_DWORD *)&v35[16] = v15;
            __int16 v36 = 1024;
            int v37 = v17;
            _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempting to InsertForcedChannelLayoutForTag with %u channels which doesn't match the ForcedNumVirtualChannels channel count %u\"", buf, 0x1Eu);
          }
        }
        int v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v20, "Attempting to InsertForcedChannelLayoutForTag with %u channels which doesn't match the ForcedNumVirtualChannels channel count %u");
      }
    }
    else
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = a2[1];
      *(_OWORD *)&v35[4] = *v12;
      unint64_t v21 = sub_37D5B8(v5, *(unsigned int *)buf, *(unint64_t *)&v35[4], (uint64_t)buf);
      *((_DWORD *)v21 + 16) = v15;
      v21[68] = 1;
    }
  }
  return sub_37D420(a1);
}

void sub_37F4BC(_Unwind_Exception *exception_object)
{
}

unint64_t sub_37F520(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a2 != 1)
  {
    int v16 = (os_log_t *)sub_32A48(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)unsigned int v24 = "RoutingTypes.cpp";
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&unsigned char v24[10] = 2593;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v3 = a1;
  sub_37D420(a1);
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&void v24[4] = *(_OWORD *)(a2 + 8);
  uint64_t v4 = sub_37EEF8(v3 + 24, (int *)buf);
  if (v3 + 32 == v4 || !*(unsigned char *)(v4 + 84))
  {
    if (*(_DWORD *)(a2 + 4) == 1768776806)
    {
      unint64_t v6 = 0;
      LOBYTE(v3) = 0;
      unint64_t v7 = 0;
      int v5 = 0;
    }
    else
    {
      uint64_t v8 = sub_32A48(20);
      if (*(unsigned char *)(v8 + 8))
      {
        uint64_t v9 = *(NSObject **)v8;
        if (*(void *)v8)
        {
          if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(v21, *(_DWORD *)(a2 + 4));
            int v10 = v22;
            unsigned int v11 = (void **)v21[0];
            sub_2417C(__p, 0x696D6466u);
            long long v12 = v21;
            if (v10 < 0) {
              long long v12 = v11;
            }
            if (v20 >= 0) {
              int v13 = __p;
            }
            else {
              int v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)unsigned int v24 = "RoutingTypes.cpp";
            *(_WORD *)&v24[8] = 1024;
            *(_DWORD *)&unsigned char v24[10] = 2608;
            *(_WORD *)&unsigned char v24[14] = 2080;
            *(void *)&v24[16] = v12;
            __int16 v25 = 2080;
            v26[0] = v13;
            _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find volume curve transfer function in %s mode.  Looking in %s mode instead", buf, 0x26u);
            if (v20 < 0) {
              operator delete(__p[0]);
            }
            if (v22 < 0) {
              operator delete(v21[0]);
            }
          }
        }
      }
      sub_24A5D0((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
      uint64_t v14 = sub_37F520(v3, buf);
      LOBYTE(v3) = v14;
      int v5 = v14 & 0xFFFFFF00;
      unint64_t v6 = v14 & 0xFFFFFFFF00000000;
      unint64_t v7 = v14 & 0xFFFFFF0000000000;
      if (*(void *)((char *)v26 + 2))
      {
        *(void *)((char *)&v26[1] + 2) = *(void *)((char *)v26 + 2);
        operator delete(*(void **)((char *)v26 + 2));
      }
    }
  }
  else
  {
    uint64_t v3 = *(void *)(v4 + 80);
    int v5 = v3 & 0xFFFFFF00;
    unint64_t v6 = v3 & 0xFFFFFFFF00000000;
    unint64_t v7 = v3 & 0xFFFFFF0000000000;
  }
  return v7 | v6 & 0xFF00000000 | v3 | (unint64_t)(v5 & 0xFFFFFF00);
}

void sub_37F7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_37F844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_37D420(a1);
  int v6 = *(_DWORD *)a2;
  sub_37D420(a1);
  if (v6) {
    uint64_t v7 = a1 + 24;
  }
  else {
    uint64_t v7 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&buf[8] = *(_OWORD *)(a2 + 8);
  uint64_t v8 = sub_37EEF8(v7, (int *)buf);
  if (v7 + 8 == v8 || !*(void *)(v8 + 112))
  {
    unint64_t v11 = 0;
  }
  else
  {
    unint64_t v9 = sub_37AA58(v8 + 96, *(_DWORD *)(a2 + 24), a3);
    unsigned __int8 v10 = v9;
    unint64_t v11 = v9 >> 8;
    if (v12) {
      return v10 | (v11 << 8);
    }
  }
  if (*(_DWORD *)(a2 + 4) == 1768776806)
  {
    unsigned __int8 v10 = 0;
  }
  else
  {
    uint64_t v13 = sub_32A48(20);
    uint64_t v14 = sub_32A48(38);
    char v15 = 0;
    uint64_t v16 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = *(int *)&buf[4 * v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1;
      if (v19)
      {
        if ((v17 & 1) == 0) {
          goto LABEL_30;
        }
        goto LABEL_19;
      }
    }
    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
    if (*(void *)(v13 + 8))
    {
LABEL_19:
      char v20 = *(NSObject **)v13;
      if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(v29, *(_DWORD *)(a2 + 4));
        int v21 = v30;
        char v22 = (void **)v29[0];
        sub_2417C(__p, 0x696D6466u);
        unint64_t v23 = v29;
        if (v21 < 0) {
          unint64_t v23 = v22;
        }
        if (v28 >= 0) {
          unsigned int v24 = __p;
        }
        else {
          unsigned int v24 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingTypes.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2640;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&unsigned char buf[20] = v23;
        __int16 v32 = 2080;
        v33[0] = v24;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.", buf, 0x26u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (v30 < 0) {
          operator delete(v29[0]);
        }
      }
    }
LABEL_30:
    sub_24A5D0((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    unint64_t v25 = sub_37F844(a1, buf, a3);
    unsigned __int8 v10 = v25;
    unint64_t v11 = v25 >> 8;
    if (*(void *)((char *)v33 + 2))
    {
      *(void *)((char *)&v33[1] + 2) = *(void *)((char *)v33 + 2);
      operator delete(*(void **)((char *)v33 + 2));
    }
  }
  return v10 | (v11 << 8);
}

void sub_37FB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_37FB48(uint64_t a1, uint64_t a2)
{
  sub_37D420(a1);
  int v4 = *(_DWORD *)a2;
  sub_37D420(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&void v23[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_37EEF8(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    LOBYTE(v8) = 0;
    uint64_t v7 = 0;
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 60);
    unint64_t v8 = *(unsigned int *)(v6 + 56) | (unint64_t)(v7 << 32);
    unint64_t v9 = v8 >> 8;
    if (*(unsigned char *)(v6 + 60)) {
      return (v9 << 8) | (unint64_t)(v7 << 32) | v8;
    }
  }
  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v10 = sub_32A48(20);
    if (*(unsigned char *)(v10 + 8))
    {
      unint64_t v11 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v20, *(_DWORD *)(a2 + 4));
          int v12 = v21;
          uint64_t v13 = (void **)v20[0];
          sub_2417C(__p, 0x696D6466u);
          uint64_t v14 = v20;
          if (v12 < 0) {
            uint64_t v14 = v13;
          }
          if (v19 >= 0) {
            char v15 = __p;
          }
          else {
            char v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)unint64_t v23 = "RoutingTypes.cpp";
          *(_WORD *)&char v23[8] = 1024;
          *(_DWORD *)&v23[10] = 2664;
          *(_WORD *)&v23[14] = 2080;
          *(void *)&v23[16] = v14;
          __int16 v24 = 2080;
          v25[0] = v15;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find preferred number of virtual channels in %s mode.  Looking in %s mode instead", buf, 0x26u);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
          if (v21 < 0) {
            operator delete(v20[0]);
          }
        }
      }
    }
    sub_24A5D0((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    unint64_t v16 = sub_37FB48(a1, buf);
    LOBYTE(v8) = v16;
    unint64_t v9 = v16 >> 8;
    uint64_t v7 = BYTE4(v16);
    if (*(void *)((char *)v25 + 2))
    {
      *(void *)((char *)&v25[1] + 2) = *(void *)((char *)v25 + 2);
      operator delete(*(void **)((char *)v25 + 2));
    }
  }
  return (v9 << 8) | (unint64_t)(v7 << 32) | v8;
}

void sub_37FD70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_37FDA8(uint64_t a1, uint64_t a2)
{
  sub_37D420(a1);
  int v4 = *(_DWORD *)a2;
  sub_37D420(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&void v23[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_37EEF8(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    LOBYTE(v8) = 0;
    uint64_t v7 = 0;
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 68);
    unint64_t v8 = *(unsigned int *)(v6 + 64) | (unint64_t)(v7 << 32);
    unint64_t v9 = v8 >> 8;
    if (*(unsigned char *)(v6 + 68)) {
      return (v9 << 8) | (unint64_t)(v7 << 32) | v8;
    }
  }
  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v10 = sub_32A48(20);
    if (*(unsigned char *)(v10 + 8))
    {
      unint64_t v11 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v20, *(_DWORD *)(a2 + 4));
          int v12 = v21;
          uint64_t v13 = (void **)v20[0];
          sub_2417C(__p, 0x696D6466u);
          uint64_t v14 = v20;
          if (v12 < 0) {
            uint64_t v14 = v13;
          }
          if (v19 >= 0) {
            char v15 = __p;
          }
          else {
            char v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)unint64_t v23 = "RoutingTypes.cpp";
          *(_WORD *)&char v23[8] = 1024;
          *(_DWORD *)&v23[10] = 2686;
          *(_WORD *)&v23[14] = 2080;
          *(void *)&v23[16] = v14;
          __int16 v24 = 2080;
          v25[0] = v15;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find forced number of virtual channels in %s mode.  Looking in %s mode instead", buf, 0x26u);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
          if (v21 < 0) {
            operator delete(v20[0]);
          }
        }
      }
    }
    sub_24A5D0((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    unint64_t v16 = sub_37FDA8(a1, buf);
    LOBYTE(v8) = v16;
    unint64_t v9 = v16 >> 8;
    uint64_t v7 = BYTE4(v16);
    if (*(void *)((char *)v25 + 2))
    {
      *(void *)((char *)&v25[1] + 2) = *(void *)((char *)v25 + 2);
      operator delete(*(void **)((char *)v25 + 2));
    }
  }
  return (v9 << 8) | (unint64_t)(v7 << 32) | v8;
}

void sub_37FFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_380008(uint64_t a1, uint64_t a2)
{
  sub_37D420(a1);
  int v4 = *(_DWORD *)a2;
  sub_37D420(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&void v23[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_37EEF8(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    LOBYTE(v8) = 0;
    uint64_t v7 = 0;
    LODWORD(v9) = 0;
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 *)(v6 + 92);
    unint64_t v8 = *(unsigned int *)(v6 + 88) | (unint64_t)(v7 << 32);
    unint64_t v9 = v8 >> 8;
    if (*(unsigned char *)(v6 + 92)) {
      return (v9 << 8) | (unint64_t)(v7 << 32) | v8;
    }
  }
  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v10 = sub_32A48(20);
    if (*(unsigned char *)(v10 + 8))
    {
      unint64_t v11 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v20, *(_DWORD *)(a2 + 4));
          int v12 = v21;
          uint64_t v13 = (void **)v20[0];
          sub_2417C(__p, 0x696D6466u);
          uint64_t v14 = v20;
          if (v12 < 0) {
            uint64_t v14 = v13;
          }
          if (v19 >= 0) {
            char v15 = __p;
          }
          else {
            char v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)unint64_t v23 = "RoutingTypes.cpp";
          *(_WORD *)&char v23[8] = 1024;
          *(_DWORD *)&v23[10] = 2708;
          *(_WORD *)&v23[14] = 2080;
          *(void *)&v23[16] = v14;
          __int16 v24 = 2080;
          v25[0] = v15;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find fixed block size in %s mode.  Looking in %s mode instead", buf, 0x26u);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
          if (v21 < 0) {
            operator delete(v20[0]);
          }
        }
      }
    }
    sub_24A5D0((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    unint64_t v16 = sub_380008(a1, buf);
    LOBYTE(v8) = v16;
    unint64_t v9 = v16 >> 8;
    uint64_t v7 = BYTE4(v16);
    if (*(void *)((char *)v25 + 2))
    {
      *(void *)((char *)&v25[1] + 2) = *(void *)((char *)v25 + 2);
      operator delete(*(void **)((char *)v25 + 2));
    }
  }
  return (v9 << 8) | (unint64_t)(v7 << 32) | v8;
}

void sub_380230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_380268(uint64_t a1, uint64_t a2)
{
  sub_37D420(a1);
  int v4 = *(_DWORD *)a2;
  sub_37D420(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&void v20[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_37EEF8(v5, (int *)buf);
  if (v5 + 8 == v6 || (uint64_t v7 = *(void *)(v6 + 72)) == 0)
  {
    if (*(_DWORD *)(a2 + 4) == 1768776806)
    {
      return 0;
    }
    else
    {
      uint64_t v8 = sub_32A48(20);
      if (*(unsigned char *)(v8 + 8))
      {
        unint64_t v9 = *(NSObject **)v8;
        if (*(void *)v8)
        {
          if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(v17, *(_DWORD *)(a2 + 4));
            int v10 = v18;
            unint64_t v11 = (void **)v17[0];
            sub_2417C(__p, 0x696D6466u);
            int v12 = v17;
            if (v10 < 0) {
              int v12 = v11;
            }
            if (v16 >= 0) {
              uint64_t v13 = __p;
            }
            else {
              uint64_t v13 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)char v20 = "RoutingTypes.cpp";
            *(_WORD *)&v20[8] = 1024;
            *(_DWORD *)&v20[10] = 2735;
            *(_WORD *)&v20[14] = 2080;
            *(void *)&v20[16] = v12;
            __int16 v21 = 2080;
            v22[0] = v13;
            _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find forced channel layout in %s mode.  Looking in %s mode instead", buf, 0x26u);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
            if (v18 < 0) {
              operator delete(v17[0]);
            }
          }
        }
      }
      sub_24A5D0((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
      uint64_t v7 = sub_380268(a1, buf);
      if (*(void *)((char *)v22 + 2))
      {
        *(void *)((char *)&v22[1] + 2) = *(void *)((char *)v22 + 2);
        operator delete(*(void **)((char *)v22 + 2));
      }
    }
  }
  return v7;
}

void sub_38047C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_3804B4(uint64_t a1, uint64_t a2)
{
  sub_37D420(a1);
  int v4 = *(_DWORD *)a2;
  sub_37D420(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&void v24[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_37EEF8(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    unsigned __int8 v8 = 0;
    uint64_t v10 = 0;
    int v9 = 0;
  }
  else
  {
    uint64_t v7 = sub_37A768(v6 + 96, *(_DWORD *)(a2 + 24), (unsigned int **)(a2 + 32));
    unsigned __int8 v8 = v7;
    int v9 = v7 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v7);
    if (BYTE4(v7)) {
      return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
    }
  }
  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v11 = sub_32A48(20);
    if (*(unsigned char *)(v11 + 8))
    {
      int v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v21, *(_DWORD *)(a2 + 4));
          int v13 = v22;
          uint64_t v14 = (void **)v21[0];
          sub_2417C(__p, 0x696D6466u);
          char v15 = v21;
          if (v13 < 0) {
            char v15 = v14;
          }
          if (v20 >= 0) {
            char v16 = __p;
          }
          else {
            char v16 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)__int16 v24 = "RoutingTypes.cpp";
          *(_WORD *)&v24[8] = 1024;
          *(_DWORD *)&unsigned char v24[10] = 2758;
          *(_WORD *)&unsigned char v24[14] = 2080;
          *(void *)&v24[16] = v15;
          __int16 v25 = 2080;
          v26[0] = v16;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.", buf, 0x26u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }
    sub_24A5D0((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    uint64_t v17 = sub_3804B4(a1, buf);
    unsigned __int8 v8 = v17;
    int v9 = v17 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v17);
    if (*(void *)((char *)v26 + 2))
    {
      *(void *)((char *)&v26[1] + 2) = *(void *)((char *)v26 + 2);
      operator delete(*(void **)((char *)v26 + 2));
    }
  }
  return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
}

void sub_3806E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_380720(uint64_t a1, uint64_t a2)
{
  sub_37D420(a1);
  int v4 = *(_DWORD *)a2;
  sub_37D420(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&void v24[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_37EEF8(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    unsigned __int8 v8 = 0;
    uint64_t v10 = 0;
    int v9 = 0;
  }
  else
  {
    uint64_t v7 = sub_37A5DC(v6 + 96, *(_DWORD *)(a2 + 24), (unsigned int **)(a2 + 32));
    unsigned __int8 v8 = v7;
    int v9 = v7 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v7);
    if (BYTE4(v7)) {
      return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
    }
  }
  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v11 = sub_32A48(20);
    if (*(unsigned char *)(v11 + 8))
    {
      int v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v21, *(_DWORD *)(a2 + 4));
          int v13 = v22;
          uint64_t v14 = (void **)v21[0];
          sub_2417C(__p, 0x696D6466u);
          char v15 = v21;
          if (v13 < 0) {
            char v15 = v14;
          }
          if (v20 >= 0) {
            char v16 = __p;
          }
          else {
            char v16 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)__int16 v24 = "RoutingTypes.cpp";
          *(_WORD *)&v24[8] = 1024;
          *(_DWORD *)&unsigned char v24[10] = 2780;
          *(_WORD *)&unsigned char v24[14] = 2080;
          *(void *)&v24[16] = v15;
          __int16 v25 = 2080;
          v26[0] = v16;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.", buf, 0x26u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }
    sub_24A5D0((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    uint64_t v17 = sub_380720(a1, buf);
    unsigned __int8 v8 = v17;
    int v9 = v17 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v17);
    if (*(void *)((char *)v26 + 2))
    {
      *(void *)((char *)&v26[1] + 2) = *(void *)((char *)v26 + 2);
      operator delete(*(void **)((char *)v26 + 2));
    }
  }
  return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
}

void sub_380954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_38098C(uint64_t a1, uint64_t a2)
{
  sub_37D420(a1);
  int v4 = *(_DWORD *)a2;
  sub_37D420(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&void v24[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_37EEF8(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    unsigned __int8 v8 = 0;
    uint64_t v10 = 0;
    int v9 = 0;
  }
  else
  {
    uint64_t v7 = sub_37A450(v6 + 96, *(_DWORD *)(a2 + 24), (unsigned int **)(a2 + 32));
    unsigned __int8 v8 = v7;
    int v9 = v7 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v7);
    if (BYTE4(v7)) {
      return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
    }
  }
  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v11 = sub_32A48(20);
    if (*(unsigned char *)(v11 + 8))
    {
      int v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v21, *(_DWORD *)(a2 + 4));
          int v13 = v22;
          uint64_t v14 = (void **)v21[0];
          sub_2417C(__p, 0x696D6466u);
          char v15 = v21;
          if (v13 < 0) {
            char v15 = v14;
          }
          if (v20 >= 0) {
            char v16 = __p;
          }
          else {
            char v16 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)__int16 v24 = "RoutingTypes.cpp";
          *(_WORD *)&v24[8] = 1024;
          *(_DWORD *)&unsigned char v24[10] = 2802;
          *(_WORD *)&unsigned char v24[14] = 2080;
          *(void *)&v24[16] = v15;
          __int16 v25 = 2080;
          v26[0] = v16;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.", buf, 0x26u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }
    sub_24A5D0((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    uint64_t v17 = sub_38098C(a1, buf);
    unsigned __int8 v8 = v17;
    int v9 = v17 & 0xFFFFFF00;
    uint64_t v10 = BYTE4(v17);
    if (*(void *)((char *)v26 + 2))
    {
      *(void *)((char *)&v26[1] + 2) = *(void *)((char *)v26 + 2);
      operator delete(*(void **)((char *)v26 + 2));
    }
  }
  return v9 & 0xFFFFFF00 | (unint64_t)(v10 << 32) | v8;
}

void sub_380BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_380BF8(unsigned char *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_32A48(20);
  if (*(unsigned char *)(v6 + 8))
  {
    uint64_t v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        memset(&v40, 0, sizeof(v40));
        std::string::append(&v40, "[ ", 2uLL);
        if (*a3) {
          unsigned __int8 v8 = "dst; ";
        }
        else {
          unsigned __int8 v8 = "src; ";
        }
        std::string::append(&v40, v8, 5uLL);
        sub_2417C(__p, a3[1]);
        if (__p[23] >= 0) {
          int v9 = __p;
        }
        else {
          int v9 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v10 = __p[23];
        }
        else {
          std::string::size_type v10 = *(void *)&__p[8];
        }
        std::string::append(&v40, v9, v10);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::append(&v40, "; ", 2uLL);
        sub_3AEF78((std::string *)__p, (void *)a3 + 1);
        if (__p[23] >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v12 = __p[23];
        }
        else {
          std::string::size_type v12 = *(void *)&__p[8];
        }
        std::string::append(&v40, v11, v12);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::append(&v40, "; ", 2uLL);
        unsigned int v13 = a3[6];
        if (v13) {
          sub_2417C(__p, v13);
        }
        else {
          sub_21C8C(__p, "None");
        }
        if (__p[23] >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v15 = __p[23];
        }
        else {
          std::string::size_type v15 = *(void *)&__p[8];
        }
        std::string::append(&v40, v14, v15);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::append(&v40, "; ", 2uLL);
        sub_82188((std::string *)__p, *((unsigned int **)a3 + 4), *((unsigned int **)a3 + 5));
        if (__p[23] >= 0) {
          char v16 = __p;
        }
        else {
          char v16 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v17 = __p[23];
        }
        else {
          std::string::size_type v17 = *(void *)&__p[8];
        }
        std::string::append(&v40, v16, v17);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::append(&v40, " ]", 2uLL);
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v18 = &v40;
        }
        else {
          char v18 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "RoutingTypes.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 2811;
        *(_WORD *)&unsigned char __p[18] = 2080;
        *(void *)&unsigned char __p[20] = v18;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Looking up DSP list vector for %s", __p, 0x1Cu);
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  sub_37D420(a2);
  *a1 = 0;
  a1[24] = 0;
  int v19 = *a3;
  sub_37D420(a2);
  if (v19) {
    uint64_t v20 = a2 + 24;
  }
  else {
    uint64_t v20 = a2;
  }
  *(_DWORD *)std::string __p = a3[1];
  *(_OWORD *)&__p[8] = *(_OWORD *)(a3 + 2);
  uint64_t v21 = sub_37EEF8(v20, (int *)__p);
  if (v20 + 8 == v21) {
    goto LABEL_79;
  }
  unsigned int v22 = a3[6];
  unint64_t v23 = (void *)(v21 + 104);
  do
  {
    unsigned int v24 = v22;
    uint64_t v25 = *v23;
    if (!*v23) {
      goto LABEL_73;
    }
    __int16 v26 = v23;
    do
    {
      unsigned int v27 = *(_DWORD *)(v25 + 32);
      BOOL v28 = v27 >= v24;
      if (v27 >= v24) {
        uint64_t v29 = (uint64_t *)v25;
      }
      else {
        uint64_t v29 = (uint64_t *)(v25 + 8);
      }
      if (v28) {
        __int16 v26 = (void *)v25;
      }
      uint64_t v25 = *v29;
    }
    while (*v29);
    if (v26 == v23 || *((_DWORD *)v26 + 8) > v24) {
      goto LABEL_73;
    }
    sub_37967C(v26[8], v26[9]);
    sub_379C48((uint64_t)__p, (uint64_t)(v26 + 5), (unsigned int **)a3 + 4);
    if (!__p[0])
    {
      char v30 = *(void **)&__p[8];
      goto LABEL_69;
    }
    char v30 = *(void **)&__p[8];
    if (*(void *)&__p[16] == *(void *)&__p[8])
    {
      char v30 = *(void **)&__p[16];
LABEL_69:
      v40.__r_.__value_.__s.__data_[0] = 0;
      char v41 = 0;
      if (!v30) {
        goto LABEL_73;
      }
      goto LABEL_72;
    }
    if (*(unsigned char *)(**(void **)&__p[8] + 56))
    {
      sub_E4660((uint64_t)&v40, **(void **)&__p[8] + 32);
    }
    else
    {
      long long v31 = operator new(8uLL);
      void *v31 = 0;
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
      v40.__r_.__value_.__l.__size_ = (std::string::size_type)(v31 + 1);
      v40.__r_.__value_.__r.__words[2] = (std::string::size_type)(v31 + 1);
      char v41 = 1;
    }
LABEL_72:
    operator delete(v30);
    if (v41) {
      goto LABEL_75;
    }
LABEL_73:
    unsigned int v22 = 0;
  }
  while (v24);
  v40.__r_.__value_.__s.__data_[0] = 0;
  char v41 = 0;
LABEL_75:
  sub_38123C((uint64_t)a1, (__n128 *)&v40);
  if (v41 && v40.__r_.__value_.__r.__words[0])
  {
    v40.__r_.__value_.__l.__size_ = v40.__r_.__value_.__r.__words[0];
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (!a1[24])
  {
LABEL_79:
    if (a3[1] != 1768776806)
    {
      uint64_t v32 = sub_32A48(20);
      if (*(unsigned char *)(v32 + 8))
      {
        double v33 = *(NSObject **)v32;
        if (*(void *)v32)
        {
          if (os_log_type_enabled(*(os_log_t *)v32, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(&v40, a3[1]);
            int v34 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
            std::string::size_type v35 = v40.__r_.__value_.__r.__words[0];
            sub_2417C(v38, 0x696D6466u);
            __int16 v36 = &v40;
            if (v34 < 0) {
              __int16 v36 = (std::string *)v35;
            }
            if (v39 >= 0) {
              int v37 = v38;
            }
            else {
              int v37 = (void **)v38[0];
            }
            *(_DWORD *)std::string __p = 136315906;
            *(void *)&__p[4] = "RoutingTypes.cpp";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 2826;
            *(_WORD *)&unsigned char __p[18] = 2080;
            *(void *)&unsigned char __p[20] = v36;
            __int16 v43 = 2080;
            v44[0] = v37;
            _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.", __p, 0x26u);
            if (v39 < 0) {
              operator delete(v38[0]);
            }
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      sub_24A5D0((uint64_t)__p, *a3, 1768776806, a3 + 2, a3[6], (uint64_t)(a3 + 8));
      sub_380BF8(&v40, a2, __p);
      sub_38123C((uint64_t)a1, (__n128 *)&v40);
      if (v41 && v40.__r_.__value_.__r.__words[0]) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (*(void *)((char *)v44 + 2))
      {
        *(void *)((char *)&v44[1] + 2) = *(void *)((char *)v44 + 2);
        operator delete(*(void **)((char *)v44 + 2));
      }
    }
  }
}

void sub_381194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_38123C(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      int v4 = *(void **)a1;
      if (*(void *)a1)
      {
        *(void *)(a1 + 8) = v4;
        operator delete(v4);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v6 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v6;
      operator delete(v6);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

unint64_t sub_3812EC(uint64_t a1, uint64_t a2)
{
  sub_37D420(a1);
  int v4 = *(_DWORD *)a2;
  sub_37D420(a1);
  if (v4) {
    uint64_t v5 = a1 + 24;
  }
  else {
    uint64_t v5 = a1;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a2 + 4);
  *(_OWORD *)&void v24[4] = *(_OWORD *)(a2 + 8);
  uint64_t v6 = sub_37EEF8(v5, (int *)buf);
  if (v5 + 8 == v6)
  {
    unsigned __int8 v8 = 0;
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v7 = sub_37A8F4(v6 + 96, *(_DWORD *)(a2 + 24), (unsigned int **)(a2 + 32));
    unsigned __int8 v8 = v7;
    unint64_t v9 = v7 & 0xFFFFFFFFFFFFFF00;
    if (v10) {
      return v9 & 0xFFFFFFFFFFFFFF00 | v8;
    }
  }
  if (*(_DWORD *)(a2 + 4) != 1768776806)
  {
    uint64_t v11 = sub_32A48(20);
    if (*(unsigned char *)(v11 + 8))
    {
      std::string::size_type v12 = *(NSObject **)v11;
      if (*(void *)v11)
      {
        if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v21, *(_DWORD *)(a2 + 4));
          int v13 = v22;
          uint64_t v14 = (void **)v21[0];
          sub_2417C(__p, 0x696D6466u);
          std::string::size_type v15 = v21;
          if (v13 < 0) {
            std::string::size_type v15 = v14;
          }
          if (v20 >= 0) {
            char v16 = __p;
          }
          else {
            char v16 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)unsigned int v24 = "RoutingTypes.cpp";
          *(_WORD *)&v24[8] = 1024;
          *(_DWORD *)&unsigned char v24[10] = 2848;
          *(_WORD *)&unsigned char v24[14] = 2080;
          *(void *)&v24[16] = v15;
          __int16 v25 = 2080;
          v26[0] = v16;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.", buf, 0x26u);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v22 < 0) {
            operator delete(v21[0]);
          }
        }
      }
    }
    sub_24A5D0((uint64_t)buf, *(_DWORD *)a2, 1768776806, (_OWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a2 + 32);
    uint64_t v17 = sub_3812EC(a1, buf);
    unsigned __int8 v8 = v17;
    unint64_t v9 = v17 & 0xFFFFFFFFFFFFFF00;
    if (*(void *)((char *)v26 + 2))
    {
      *(void *)((char *)&v26[1] + 2) = *(void *)((char *)v26 + 2);
      operator delete(*(void **)((char *)v26 + 2));
    }
  }
  return v9 & 0xFFFFFFFFFFFFFF00 | v8;
}

void sub_381520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_381558(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  sub_37D420(a2);
  *a1 = 0;
  a1[40] = 0;
  int v6 = *(_DWORD *)a3;
  sub_37D420(a2);
  if (v6) {
    uint64_t v7 = a2 + 24;
  }
  else {
    uint64_t v7 = a2;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a3 + 4);
  *(_OWORD *)&buf[8] = *(_OWORD *)(a3 + 8);
  uint64_t v8 = sub_37EEF8(v7, (int *)buf);
  if (v7 + 8 == v8) {
    goto LABEL_30;
  }
  uint64_t v11 = *(void *)(v8 + 104);
  uint64_t v9 = v8 + 104;
  uint64_t v10 = v11;
  if (!v11) {
    goto LABEL_26;
  }
  unsigned int v12 = *(_DWORD *)(a3 + 24);
  uint64_t v13 = v9;
  do
  {
    unsigned int v14 = *(_DWORD *)(v10 + 32);
    BOOL v15 = v14 >= v12;
    if (v14 >= v12) {
      char v16 = (uint64_t *)v10;
    }
    else {
      char v16 = (uint64_t *)(v10 + 8);
    }
    if (v15) {
      uint64_t v13 = v10;
    }
    uint64_t v10 = *v16;
  }
  while (*v16);
  if (v13 == v9 || *(_DWORD *)(v13 + 32) > v12) {
    goto LABEL_26;
  }
  sub_37967C(*(void *)(v13 + 64), *(void *)(v13 + 72));
  sub_379C48((uint64_t)&v30, v13 + 40, (unsigned int **)(a3 + 32));
  if ((_BYTE)v30)
  {
    uint64_t v17 = __p;
    if (v32 != __p)
    {
      uint64_t v18 = 0;
      unsigned int v19 = 1;
      while (1)
      {
        uint64_t v20 = *((void *)__p + v18);
        if (*(unsigned char *)(v20 + 120)) {
          break;
        }
        uint64_t v18 = v19;
        if ((v32 - (unsigned char *)__p) >> 3 <= (unint64_t)v19++) {
          goto LABEL_21;
        }
      }
      sub_E475C(buf, v20 + 80);
      goto LABEL_24;
    }
  }
LABEL_21:
  sub_E475C(buf, (uint64_t)&unk_573968);
  uint64_t v17 = __p;
  if (__p) {
LABEL_24:
  }
    operator delete(v17);
  if (!(_BYTE)v39) {
LABEL_26:
  }
    sub_E475C(buf, (uint64_t)&unk_573968);
  sub_381914((uint64_t)a1, (uint64_t)buf);
  if ((_BYTE)v39)
  {
    sub_D7EFC(*(void **)&buf[16]);
    char v22 = *(void **)buf;
    *(void *)AudioObjectPropertyAddress buf = 0;
    if (v22) {
      operator delete(v22);
    }
  }
LABEL_30:
  if (!a1[40] && *(_DWORD *)(a3 + 4) != 1768776806)
  {
    uint64_t v23 = sub_32A48(20);
    if (*(unsigned char *)(v23 + 8))
    {
      unsigned int v24 = *(NSObject **)v23;
      if (*(void *)v23)
      {
        if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(&v30, *(_DWORD *)(a3 + 4));
          int v25 = SHIBYTE(v32);
          __int16 v26 = (void **)v30;
          sub_2417C(v34, 0x696D6466u);
          unsigned int v27 = &v30;
          if (v25 < 0) {
            unsigned int v27 = v26;
          }
          if (v35 >= 0) {
            BOOL v28 = v34;
          }
          else {
            BOOL v28 = (void **)v34[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingTypes.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2870;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&unsigned char buf[20] = v27;
          __int16 v37 = 2080;
          *(void *)uint64_t v38 = v28;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.", buf, 0x26u);
          if (v35 < 0) {
            operator delete(v34[0]);
          }
          if (SHIBYTE(v32) < 0) {
            operator delete(v30);
          }
        }
      }
    }
    sub_24A5D0((uint64_t)buf, *(_DWORD *)a3, 1768776806, (_OWORD *)(a3 + 8), *(_DWORD *)(a3 + 24), a3 + 32);
    sub_381558(&v30, a2, buf);
    sub_381914((uint64_t)a1, (uint64_t)&v30);
    if (v33)
    {
      sub_D7EFC(v32);
      uint64_t v29 = v30;
      char v30 = 0;
      if (v29) {
        operator delete(v29);
      }
    }
    if (*(void *)&v38[2])
    {
      uint64_t v39 = *(void *)&v38[2];
      operator delete(*(void **)&v38[2]);
    }
  }
}

void sub_38189C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  operator delete(v28);
  if (*(unsigned char *)(v27 + 40)) {
    sub_D7EC0(v27);
  }
  _Unwind_Resume(a1);
}

void sub_381914(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == *(unsigned __int8 *)(a2 + 40))
  {
    if (*(unsigned char *)(a1 + 40))
    {
      sub_3819F8(a1);
      uint64_t v4 = *(void *)a2;
      *(void *)a2 = 0;
      uint64_t v5 = *(void **)a1;
      *(void *)a1 = v4;
      if (v5) {
        operator delete(v5);
      }
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = a2 + 16;
      uint64_t v6 = v8;
      uint64_t v9 = *(void *)(v7 - 8);
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 8) = v9;
      *(void *)(v7 - 8) = 0;
      uint64_t v10 = *(void *)(v7 + 8);
      *(void *)(a1 + 24) = v10;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(v7 + 16);
      if (v10)
      {
        unint64_t v11 = *(void *)(v6 + 8);
        unint64_t v12 = *(void *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v11 >= v12) {
            v11 %= v12;
          }
        }
        else
        {
          v11 &= v12 - 1;
        }
        *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 40))
  {
    sub_D7EC0(a1);
    *(unsigned char *)(a1 + 4sub_360D08(&a9, 0) = 0;
  }
  else
  {
    sub_6DBFC(a1, (uint64_t *)a2);
    *(unsigned char *)(a1 + 4sub_360D08(&a9, 0) = 1;
  }
}

void sub_3819F8(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_D7EFC(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_381A50(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 32;
  if (*(void *)(a3 + 32) != *(void *)(a3 + 40))
  {
    __int16 v26 = (os_log_t *)sub_32A48(13);
    uint64_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)int v34 = "RoutingTypes.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 2882;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_37D420(a2);
  int v7 = *(_DWORD *)a3;
  sub_37D420(a2);
  if (v7) {
    uint64_t v8 = a2 + 24;
  }
  else {
    uint64_t v8 = a2;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = *(_DWORD *)(a3 + 4);
  *(_OWORD *)&v34[4] = *(_OWORD *)(a3 + 8);
  uint64_t v9 = sub_37EEF8(v8, (int *)buf);
  if (v8 + 8 == v9 || !*(void *)(v9 + 112))
  {
    if (*(_DWORD *)(a3 + 4) == 1768776806)
    {
LABEL_22:
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    else
    {
      uint64_t v20 = sub_32A48(20);
      if (*(unsigned char *)(v20 + 8))
      {
        uint64_t v21 = *(NSObject **)v20;
        if (*(void *)v20)
        {
          if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(v31, *(_DWORD *)(a3 + 4));
            int v22 = v32;
            uint64_t v23 = (void **)v31[0];
            sub_2417C(__p, 0x696D6466u);
            unsigned int v24 = v31;
            if (v22 < 0) {
              unsigned int v24 = v23;
            }
            if (v30 >= 0) {
              int v25 = __p;
            }
            else {
              int v25 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)int v34 = "RoutingTypes.cpp";
            *(_WORD *)&v34[8] = 1024;
            *(_DWORD *)&v34[10] = 2900;
            *(_WORD *)&v34[14] = 2080;
            *(void *)&v34[16] = v24;
            __int16 v35 = 2080;
            v36[0] = v25;
            _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Did not find entry for current mode: %s, looking in secondary mode: %s instead.", buf, 0x26u);
            if (v30 < 0) {
              operator delete(__p[0]);
            }
            if (v32 < 0) {
              operator delete(v31[0]);
            }
          }
        }
      }
      sub_24A5D0((uint64_t)buf, *(_DWORD *)a3, 1768776806, (_OWORD *)(a3 + 8), *(_DWORD *)(a3 + 24), v3);
      sub_381A50(a1, a2, buf);
      if (*(void *)((char *)v36 + 2))
      {
        *(void *)((char *)&v36[1] + 2) = *(void *)((char *)v36 + 2);
        operator delete(*(void **)((char *)v36 + 2));
      }
    }
  }
  else
  {
    unsigned int v10 = *(_DWORD *)(a3 + 24);
    uint64_t v13 = *(void *)(v9 + 104);
    uint64_t v11 = v9 + 104;
    uint64_t v12 = v13;
    while (1)
    {
      unsigned int v14 = v10;
      if (v12)
      {
        uint64_t v15 = v11;
        uint64_t v16 = v12;
        do
        {
          unsigned int v17 = *(_DWORD *)(v16 + 32);
          BOOL v18 = v17 >= v14;
          if (v17 >= v14) {
            unsigned int v19 = (uint64_t *)v16;
          }
          else {
            unsigned int v19 = (uint64_t *)(v16 + 8);
          }
          if (v18) {
            uint64_t v15 = v16;
          }
          uint64_t v16 = *v19;
        }
        while (*v19);
        if (v15 != v11 && *(_DWORD *)(v15 + 32) <= v14) {
          break;
        }
      }
      unsigned int v10 = 0;
      if (!v14) {
        goto LABEL_22;
      }
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    sub_46B38(a1, *(const void **)(v15 + 40), *(void *)(v15 + 48), (uint64_t)(*(void *)(v15 + 48) - *(void *)(v15 + 40)) >> 2);
  }
}

void sub_381D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_381DD4(void *a1, uint64_t a2)
{
  uint64_t v2 = (int *)a1[1];
  uint64_t v3 = (int *)a1[2];
  if (v2 == v3)
  {
    int v7 = 1;
  }
  else
  {
    do
    {
      if (*(void *)(a2 + 8) == a2)
      {
        int v7 = 0;
      }
      else
      {
        int v4 = *v2;
        uint64_t v5 = *(void *)(a2 + 8);
        do
        {
          BOOL v6 = *(_DWORD *)(v5 + 16) == v4 || *(_DWORD *)(v5 + 20) == v4;
          int v7 = v6;
          if (v6) {
            break;
          }
          uint64_t v5 = *(void *)(v5 + 8);
        }
        while (v5 != a2);
      }
      if (v7) {
        break;
      }
      ++v2;
    }
    while (v2 != v3);
  }
  uint64_t v8 = (void *)a1[4];
  if (v8 == a1 + 5)
  {
LABEL_36:
    int v15 = 1;
  }
  else
  {
    while (1)
    {
      if (*(void *)(a2 + 8) != a2)
      {
        int v9 = *((_DWORD *)v8 + 7);
        uint64_t v10 = *(void *)(a2 + 8);
        do
        {
          BOOL v11 = *(_DWORD *)(v10 + 16) == v9 || *(_DWORD *)(v10 + 20) == v9;
          char v12 = v11;
          if (v11) {
            break;
          }
          uint64_t v10 = *(void *)(v10 + 8);
        }
        while (v10 != a2);
        if (v12) {
          break;
        }
      }
      uint64_t v13 = (void *)v8[1];
      if (v13)
      {
        do
        {
          unsigned int v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unsigned int v14 = (void *)v8[2];
          BOOL v6 = *v14 == (void)v8;
          uint64_t v8 = v14;
        }
        while (!v6);
      }
      uint64_t v8 = v14;
      if (v14 == a1 + 5) {
        goto LABEL_36;
      }
    }
    int v15 = 0;
  }
  return v7 & v15;
}

std::string *sub_381EC8(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  BOOL v6 = (void *)*a2;
  int v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    while (1)
    {
      sub_136B74(__p, (uint64_t)(v5 + 4));
      if ((v14 & 0x80u) == 0) {
        int v7 = __p;
      }
      else {
        int v7 = (void **)__p[0];
      }
      if ((v14 & 0x80u) == 0) {
        std::string::size_type v8 = v14;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v7, v8);
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      int v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          uint64_t v5 = v10;
        }
        while (!v11);
      }
      if (v10 == v4) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      uint64_t v5 = v10;
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_381FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_38200C(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      sub_D98B8(__p, v4 + 16);
      uint64_t v5 = (v9 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      BOOL v6 = (v9 & 0x80u) == 0 ? (void *)v9 : __p[1];
      std::string::append(a1, v5, (std::string::size_type)v6);
      if ((char)v9 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_3820E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_382124(void *a1, uint64_t *a2)
{
  sub_43F38(&v34, a2, "", 3137);
  sub_43F38(&v32, a2 + 2, "", 3138);
  uint64_t v4 = v34;
  uint64_t v5 = v30;
  sub_2417C(v30, *(_DWORD *)(v34 + 144));
  if (v31 < 0) {
    uint64_t v5 = (void **)v30[0];
  }
  (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v4 + 144))(theString, v4);
  BOOL v6 = v28;
  sub_21B7C(v28, theString[0]);
  if (v29 < 0) {
    BOOL v6 = (void **)v28[0];
  }
  CFStringRef v7 = *(const __CFString **)(v4 + 248);
  CFStringRef v23 = v7;
  char v24 = *(unsigned char *)(v4 + 256);
  if (v24 && v7)
  {
    CFRetain(v7);
    CFStringRef v7 = v23;
  }
  sub_21B7C(v25, v7);
  if (v26 >= 0) {
    std::string::size_type v8 = v25;
  }
  else {
    std::string::size_type v8 = (void **)v25[0];
  }
  uint64_t v9 = v32;
  uint64_t v10 = v21;
  sub_2417C(v21, *(_DWORD *)(v32 + 144));
  if (v22 < 0) {
    uint64_t v10 = (void **)v21[0];
  }
  (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v9 + 144))(v18, v9);
  BOOL v11 = v19;
  sub_21B7C(v19, v18[0]);
  if (v20 < 0) {
    BOOL v11 = (void **)v19[0];
  }
  CFStringRef v12 = *(const __CFString **)(v9 + 248);
  CFStringRef v14 = v12;
  char v15 = *(unsigned char *)(v9 + 256);
  if (v15 && v12)
  {
    CFRetain(v12);
    CFStringRef v12 = v14;
  }
  sub_21B7C(__p, v12);
  if (v17 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  snprintf(__str, 0x400uLL, "[ source: '%s'; %s; %s / destination: '%s'; %s; %s ]",
    (const char *)v5,
    (const char *)v6,
    (const char *)v8,
    (const char *)v10,
    (const char *)v11,
    (const char *)v13);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  sub_72924((uint64_t)&v14);
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  sub_72924((uint64_t)v18);
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  sub_72924((uint64_t)&v23);
  if (v29 < 0) {
    operator delete(v28[0]);
  }
  sub_72924((uint64_t)theString);
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  sub_21C8C(a1, __str);
  if (v33) {
    sub_4636C(v33);
  }
  if (v35) {
    sub_4636C(v35);
  }
}

void sub_3823E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,std::__shared_weak_count *a58,uint64_t a59,std::__shared_weak_count *a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a21);
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  sub_72924((uint64_t)&a35);
  if (a50 < 0) {
    operator delete(a45);
  }
  sub_72924((uint64_t)&a43);
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a58) {
    sub_4636C(a58);
  }
  if (a60) {
    sub_4636C(a60);
  }
  _Unwind_Resume(a1);
}

void sub_3824C4()
{
}

void sub_3824CC()
{
}

std::string *sub_3824D4(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4 != a2)
  {
    while (1)
    {
      sub_382124(__p, (uint64_t *)(v4 + 16));
      uint64_t v5 = (v9 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      BOOL v6 = (v9 & 0x80u) == 0 ? (void *)v9 : __p[1];
      std::string::append(a1, v5, (std::string::size_type)v6);
      if ((char)v9 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4 == a2) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_3825B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_3825EC(std::string *a1, unsigned int *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ ", 2uLL);
  std::string::append(a1, "Device Type: ", 0xDuLL);
  sub_2417C(&__p, *a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; ", 2uLL);
  std::string::append(a1, "Context ID: ", 0xCuLL);
  std::to_string(&__p, a2[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v6 = &__p;
  }
  else {
    BOOL v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; ", 2uLL);
  sub_3824D4(&__p, (uint64_t)(a2 + 4));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = &__p;
  }
  else {
    std::string::size_type v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_38275C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_3827A4(std::string *a1, unsigned int ***a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{", 1uLL);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      sub_3825EC(&__p, *v4);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*v4 != *(a2[1] - 1)) {
        std::string::append(a1, ", ", 2uLL);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_382890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_3828CC(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  BOOL v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      sub_2417C(__p, *((_DWORD *)v5 + 7));
      if ((v14 & 0x80u) == 0) {
        std::string::size_type v7 = __p;
      }
      else {
        std::string::size_type v7 = (void **)__p[0];
      }
      if ((v14 & 0x80u) == 0) {
        std::string::size_type v8 = v14;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v7, v8);
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      std::string::append(a1, " ", 1uLL);
      std::string::size_type v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          std::string::size_type v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          uint64_t v5 = v10;
        }
        while (!v11);
      }
      uint64_t v5 = v10;
    }
    while (v10 != v4);
  }
  return std::string::append(a1, "}", 1uLL);
}

void sub_3829D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_382A0C(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  BOOL v6 = (void *)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      (*(void (**)(CFStringRef *__return_ptr))(*(void *)v5[4] + 128))(theString);
      sub_21B7C(__p, theString[0]);
      if (v15 >= 0) {
        std::string::size_type v7 = __p;
      }
      else {
        std::string::size_type v7 = (void **)__p[0];
      }
      size_t v8 = strlen((const char *)v7);
      std::string::append(a1, (const std::string::value_type *)v7, v8);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      sub_72924((uint64_t)theString);
      std::string::append(a1, " ", 1uLL);
      std::string::size_type v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          std::string::size_type v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v5[2];
          BOOL v11 = *v10 == (void)v5;
          uint64_t v5 = v10;
        }
        while (!v11);
      }
      uint64_t v5 = v10;
    }
    while (v10 != v4);
  }
  return std::string::append(a1, "}", 1uLL);
}

void sub_382B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

void *sub_382B98(void *a1, unsigned int *a2)
{
  sub_2417C(v11, *a2);
  int v4 = v12;
  uint64_t v5 = (void **)v11[0];
  sub_2417C(__p, a2[1]);
  BOOL v6 = v11;
  if (v4 < 0) {
    BOOL v6 = v5;
  }
  if (v10 >= 0) {
    std::string::size_type v7 = __p;
  }
  else {
    std::string::size_type v7 = (void **)__p[0];
  }
  snprintf(__str, 0x400uLL, "[ %s / %s ]", (const char *)v6, (const char *)v7);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return sub_21C8C(a1, __str);
}

void sub_382C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_382CA8(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 != a2)
  {
    while (1)
    {
      sub_382B98(__p, (unsigned int *)(v2 + 16));
      uint64_t v5 = (v8 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      BOOL v6 = (v8 & 0x80u) == 0 ? (void *)v8 : __p[1];
      std::string::append(a1, v5, (std::string::size_type)v6);
      if ((char)v8 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v2 = *(void *)(v2 + 8);
      if (v2 == a2) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
}

void sub_382D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_382D98(std::string *a1, uint64_t *a2, int a3)
{
  int v4 = a1;
  int v29 = a3;
  sub_21C8C(a1, "[ ");
  uint64_t v5 = *a2;
  uint64_t v21 = a2[1];
  if (*a2 != v21)
  {
    char v6 = 0;
    char v20 = v4;
    do
    {
      if (v6) {
        std::string::append(v4, ", ", 2uLL);
      }
      std::string::append(v4, "{ ", 2uLL);
      sub_2417C(&v26, *(_DWORD *)v5);
      std::string::size_type v7 = std::string::append(&v26, ", ", 2uLL);
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      int64_t v28 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (v28 >= 0) {
        std::string::size_type v9 = __p;
      }
      else {
        std::string::size_type v9 = (void **)__p[0];
      }
      if (v28 >= 0) {
        std::string::size_type v10 = HIBYTE(v28);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(v4, (const std::string::value_type *)v9, v10);
      if (SHIBYTE(v28) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      __p[0] = __p;
      __p[1] = __p;
      int64_t v28 = 0;
      v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
      *(_OWORD *)&v26.__r_.__value_.__r.__words[1] = (unint64_t)&v26;
      sub_8E4B8((uint64_t *)&v24, (void *)(v5 + 8));
      BOOL v11 = v25;
      if (v25 != (uint64_t *)&v24)
      {
        std::string::size_type v12 = v26.__r_.__value_.__r.__words[0];
        uint64_t v13 = __p[0];
        do
        {
          uint64_t v14 = v11[2];
          if (*(_DWORD *)(v14 + 144) != 1885433888)
          {
            uint64_t v15 = v11[3];
            if (*(_WORD *)(v14 + 184))
            {
              if (v15) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
              }
              BOOL v18 = operator new(0x20uLL);
              CFStringRef v18[2] = v14;
              v18[3] = v15;
              *BOOL v18 = v13;
              v18[1] = __p;
              v13[1] = v18;
              uint64_t v17 = (std::string::size_type *)&v28;
              uint64_t v13 = v18;
              __p[0] = v18;
            }
            else
            {
              if (v15) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
              }
              uint64_t v16 = operator new(0x20uLL);
              v16[2] = v14;
              v16[3] = v15;
              void *v16 = v12;
              v16[1] = &v26;
              *(void *)(v12 + 8) = v16;
              uint64_t v17 = &v26.__r_.__value_.__r.__words[2];
              std::string::size_type v12 = (std::string::size_type)v16;
              v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
            }
            ++*v17;
          }
          BOOL v11 = (uint64_t *)v11[1];
        }
        while (v11 != (uint64_t *)&v24);
      }
      sub_B8E4((uint64_t *)&v24);
      int v4 = v20;
      char v24 = v20;
      int v25 = (uint64_t *)&v29;
      sub_3524(v23, __p);
      sub_383124((uint64_t)&v24, v23);
      sub_8108(v23);
      std::string::append(v20, ", ", 2uLL);
      sub_3524(v22, &v26);
      sub_383124((uint64_t)&v24, v22);
      sub_8108(v22);
      std::string::append(v20, " }", 2uLL);
      sub_8108((uint64_t *)&v26);
      sub_8108((uint64_t *)__p);
      v5 += 32;
      char v6 = 1;
    }
    while (v5 != v21);
  }
  return std::string::append(v4, " ]", 2uLL);
}

void sub_383064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_383124(uint64_t a1, void *a2)
{
  std::string::append(*(std::string **)a1, "[ ", 2uLL);
  sub_8E4B8(&v43, a2);
  int v4 = v44;
  if (v44 != &v43)
  {
    char v5 = 0;
    while (1)
    {
      if (v5) {
        std::string::append(*(std::string **)a1, ", ", 2uLL);
      }
      sub_2417C(__p, *(_DWORD *)(v4[2] + 144));
      if (__p[23] >= 0) {
        char v6 = __p;
      }
      else {
        char v6 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v7 = __p[23];
      }
      else {
        std::string::size_type v7 = *(void *)&__p[8];
      }
      std::string::append(*(std::string **)a1, v6, v7);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::string::append(*(std::string **)a1, "(", 3uLL);
      sub_2417C(__p, *(_DWORD *)(v4[2] + 264));
      if (__p[23] >= 0) {
        long long v8 = __p;
      }
      else {
        long long v8 = *(const std::string::value_type **)__p;
      }
      if (__p[23] >= 0) {
        std::string::size_type v9 = __p[23];
      }
      else {
        std::string::size_type v9 = *(void *)&__p[8];
      }
      std::string::append(*(std::string **)a1, v8, v9);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      std::string::append(*(std::string **)a1, ")", 2uLL);
      uint64_t v10 = v4[2];
      uint64_t v11 = *(void *)(v10 + 192);
      LODWORD(outData.__r_.__value_.__l.__data_) = 0;
      strcpy(__p, "nartbolg");
      __p[9] = 0;
      *(_WORD *)&__p[10] = 0;
      AudioObjectID v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 120))(v11);
      if (!AudioObjectHasProperty(v12, (const AudioObjectPropertyAddress *)__p))
      {
LABEL_26:
        BOOL v15 = 0;
        int v14 = 0;
        goto LABEL_38;
      }
      LODWORD(ioDataSize.__r_.__value_.__l.__data_) = 4;
      AudioObjectID v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 120))(v11);
      AudioObjectGetPropertyData(v13, (const AudioObjectPropertyAddress *)__p, 0, 0, (UInt32 *)&ioDataSize, &outData);
      if (LODWORD(outData.__r_.__value_.__l.__data_) != 1970496032) {
        break;
      }
      uint64_t v16 = *(void *)(v11 + 484);
      if (v16 != 0x110A000005ACLL)
      {
        if (v16 != 0x1710000005ACLL)
        {
          BOOL v15 = v16 == 0x110B000005ACLL;
          if (v16 == 0x110B000005ACLL) {
            int v14 = 5;
          }
          else {
            int v14 = 0;
          }
          goto LABEL_38;
        }
        int v14 = 2;
LABEL_30:
        BOOL v15 = 1;
        goto LABEL_38;
      }
      BOOL v15 = 1;
      int v14 = 1;
LABEL_38:
      uint64_t v17 = (os_log_t *)sub_32A48(23);
      BOOL v18 = *v17;
      if (!*v17 || !os_log_type_enabled(*v17, OS_LOG_TYPE_INFO)) {
        goto LABEL_50;
      }
      sub_2417C(&outData, *(_DWORD *)(v10 + 144));
      int v19 = SHIBYTE(outData.__r_.__value_.__r.__words[2]);
      std::string::size_type v20 = outData.__r_.__value_.__r.__words[0];
      if (v15) {
        int v21 = v14;
      }
      else {
        int v21 = 0;
      }
      sub_250B7C(&ioDataSize, v21);
      p_std::string outData = &outData;
      if (v19 < 0) {
        p_std::string outData = (std::string *)v20;
      }
      p_std::string ioDataSize = &ioDataSize;
      if ((ioDataSize.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string ioDataSize = (std::string *)ioDataSize.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "PortUtilities.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 1275;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&unsigned char __p[20] = p_outData;
      __int16 v48 = 2080;
      __int16 v49 = p_ioDataSize;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_INFO, "%25s:%-5d Headset type for port '%s': %s", __p, 0x26u);
      if (SHIBYTE(ioDataSize.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(ioDataSize.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(outData.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(outData.__r_.__value_.__l.__data_);
        if (v15)
        {
LABEL_51:
          sub_250B7C(&ioDataSize, v14);
          char v24 = std::string::insert(&ioDataSize, 0, "(", 3uLL);
          long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
          outData.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
          *(_OWORD *)&outData.__r_.__value_.__l.__data_ = v25;
          v24->__r_.__value_.__l.__size_ = 0;
          v24->__r_.__value_.__r.__words[2] = 0;
          v24->__r_.__value_.__r.__words[0] = 0;
          std::string v26 = std::string::append(&outData, ")", 2uLL);
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          *(void *)&__p[16] = *((void *)&v26->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __p = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          if (__p[23] >= 0) {
            int64_t v28 = __p;
          }
          else {
            int64_t v28 = *(const std::string::value_type **)__p;
          }
          if (__p[23] >= 0) {
            std::string::size_type v29 = __p[23];
          }
          else {
            std::string::size_type v29 = *(void *)&__p[8];
          }
          std::string::append(*(std::string **)a1, v28, v29);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          if (SHIBYTE(outData.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(outData.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(ioDataSize.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(ioDataSize.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
LABEL_50:
        if (v15) {
          goto LABEL_51;
        }
      }
      if (sub_24C024(v4[2]))
      {
        std::string::append(*(std::string **)a1, "(", 3uLL);
        unsigned int v30 = sub_24C024(v4[2]);
        std::to_string((std::string *)__p, v30);
        if (__p[23] >= 0) {
          char v31 = __p;
        }
        else {
          char v31 = *(const std::string::value_type **)__p;
        }
        if (__p[23] >= 0) {
          std::string::size_type v32 = __p[23];
        }
        else {
          std::string::size_type v32 = *(void *)&__p[8];
        }
        std::string::append(*(std::string **)a1, v31, v32);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        std::string::append(*(std::string **)a1, ")", 2uLL);
      }
      uint64_t v33 = (void *)v4[2];
      if (v33[12] != v33[13])
      {
        uint64_t v34 = (*(uint64_t (**)(void *, void))(*v33 + 184))(v33, **(unsigned int **)(a1 + 8));
        uint64_t v35 = v34;
        if ((v34 & 0xFF00000000) != 0)
        {
          if (v34)
          {
            std::string::append(*(std::string **)a1, "(", 3uLL);
            sub_2417C(__p, v35);
            if (__p[23] >= 0) {
              __int16 v36 = __p;
            }
            else {
              __int16 v36 = *(const std::string::value_type **)__p;
            }
            if (__p[23] >= 0) {
              std::string::size_type v37 = __p[23];
            }
            else {
              std::string::size_type v37 = *(void *)&__p[8];
            }
            std::string::append(*(std::string **)a1, v36, v37);
            if ((__p[23] & 0x80000000) != 0) {
              operator delete(*(void **)__p);
            }
            std::string::append(*(std::string **)a1, ")", 2uLL);
            if (sub_1013AC(v4[2], v35))
            {
              uint64_t v38 = v4[2];
              __p[0] = 0;
              __p[4] = 0;
              unsigned int v39 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v38 + 248))(v38, v35, __p);
              std::string::append(*(std::string **)a1, "(", 3uLL);
              sub_2417C(__p, v39);
              if (__p[23] >= 0) {
                std::string v40 = __p;
              }
              else {
                std::string v40 = *(const std::string::value_type **)__p;
              }
              if (__p[23] >= 0) {
                std::string::size_type v41 = __p[23];
              }
              else {
                std::string::size_type v41 = *(void *)&__p[8];
              }
              std::string::append(*(std::string **)a1, v40, v41);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              std::string::append(*(std::string **)a1, ")", 2uLL);
            }
          }
        }
      }
      int v4 = (uint64_t *)v4[1];
      char v5 = 1;
      if (v4 == &v43) {
        goto LABEL_96;
      }
    }
    if (LODWORD(outData.__r_.__value_.__l.__data_) != 1835169139) {
      goto LABEL_26;
    }
    if (!sub_25086C(*(_DWORD *)(v10 + 144), *(void *)(v10 + 192)))
    {
      BOOL v15 = sub_172718(v11);
      if (v15) {
        int v14 = 4;
      }
      else {
        int v14 = 0;
      }
      goto LABEL_38;
    }
    int v14 = 3;
    goto LABEL_30;
  }
LABEL_96:
  sub_B8E4(&v43);
  return std::string::append(*(std::string **)a1, " ]", 2uLL);
}

void sub_383790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

std::string *sub_383858(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ ", 2uLL);
  std::string::append(a1, "Category: '", 0xBuLL);
  sub_2417C(&__p, *(_DWORD *)a2);
  if ((v13 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v5 = v13;
  }
  else {
    std::string::size_type v5 = v12;
  }
  std::string::append(a1, p_p, v5);
  if ((char)v13 < 0) {
    operator delete(__p);
  }
  std::string::append(a1, "'; Mode: '", 0xAuLL);
  sub_2417C(&__p, *(_DWORD *)(a2 + 4));
  if ((v13 & 0x80u) == 0) {
    char v6 = (const std::string::value_type *)&__p;
  }
  else {
    char v6 = (const std::string::value_type *)__p;
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v7 = v13;
  }
  else {
    std::string::size_type v7 = v12;
  }
  std::string::append(a1, v6, v7);
  if ((char)v13 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(a2 + 12))
  {
    std::string::append(a1, "'; OutputMode: '", 0x10uLL);
    sub_2417C(&__p, *(_DWORD *)(a2 + 8));
    if ((v13 & 0x80u) == 0) {
      long long v8 = (const std::string::value_type *)&__p;
    }
    else {
      long long v8 = (const std::string::value_type *)__p;
    }
    if ((v13 & 0x80u) == 0) {
      std::string::size_type v9 = v13;
    }
    else {
      std::string::size_type v9 = v12;
    }
    std::string::append(a1, v8, v9);
    if ((char)v13 < 0) {
      operator delete(__p);
    }
  }
  return std::string::append(a1, "' ]", 3uLL);
}

void sub_3839BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_383A04(std::string *this, uint64_t a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  if (*(unsigned char *)(a2 + 20)) {
    std::string::append(this, "[ ", 2uLL);
  }
  sub_383858(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(this, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a2 + 20))
  {
    std::string::append(this, "'; IsolatedUseCaseID: '", 0x17uLL);
    if (!*(unsigned char *)(a2 + 20)) {
      sub_7F218();
    }
    sub_2417C(&__p, *(_DWORD *)(a2 + 16));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v6 = &__p;
    }
    else {
      char v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(this, (const std::string::value_type *)v6, v7);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*(unsigned char *)(a2 + 20)) {
      std::string::append(this, "' ]", 3uLL);
    }
  }
}

void sub_383B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_383B64(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ ", 2uLL);
  sub_383858(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(void *)(a2 + 32))
  {
    std::string::append(a1, "; Override Ports: { ", 0x14uLL);
    sub_14460C((uint64_t ***)&__p, (void *)(a2 + 16));
    char v6 = (std::string::__raw *)__p.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
    {
      while (1)
      {
        sub_2417C(v33, *(_DWORD *)(v6[1].__words[1] + 144));
        if ((v34 & 0x80u) == 0) {
          std::string::size_type v7 = v33;
        }
        else {
          std::string::size_type v7 = (void **)v33[0];
        }
        if ((v34 & 0x80u) == 0) {
          std::string::size_type v8 = v34;
        }
        else {
          std::string::size_type v8 = (std::string::size_type)v33[1];
        }
        std::string::append(a1, (const std::string::value_type *)v7, v8);
        if ((char)v34 < 0) {
          operator delete(v33[0]);
        }
        std::string::size_type v9 = (std::string *)v6->__words[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            std::string::size_type v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (std::string *)v6->__words[2];
            BOOL v11 = v10->__r_.__value_.__r.__words[0] == (void)v6;
            char v6 = (std::string::__raw *)v10;
          }
          while (!v11);
        }
        if (v10 == (std::string *)&__p.__r_.__value_.__r.__words[1]) {
          break;
        }
        std::string::append(a1, ", ", 2uLL);
        char v6 = (std::string::__raw *)v10;
      }
    }
    std::string::append(a1, " }", 2uLL);
    sub_144844((void *)__p.__r_.__value_.__l.__size_);
  }
  if (*(void *)(a2 + 56) | *(void *)(a2 + 80))
  {
    std::string::append(a1, "; Disallowed Ports: { ", 0x16uLL);
    sub_134D40(&__p, a2 + 40);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v12 = &__p;
    }
    else {
      std::string::size_type v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::append(a1, " }", 2uLL);
  }
  if (*(void *)(a2 + 104))
  {
    std::string::append(a1, "; Disallowed Port Types: ", 0x19uLL);
    sub_120764(&__p, *(void **)(a2 + 88), (void *)(a2 + 96));
    int v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::size_type v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    std::string::append(a1, (const std::string::value_type *)v14, v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (*(void *)(a2 + 128))
  {
    std::string::append(a1, "; Default Allowed Port Types: ", 0x1EuLL);
    sub_120764(&__p, *(void **)(a2 + 112), (void *)(a2 + 120));
    uint64_t v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::size_type v17 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    std::string::append(a1, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::string::append(a1, "; Screen Dark Policy: ", 0x16uLL);
  if (*(unsigned char *)(a2 + 140)) {
    unsigned int v18 = *(_DWORD *)(a2 + 136);
  }
  else {
    unsigned int v18 = 0;
  }
  int v19 = &__p;
  std::to_string(&__p, v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  size_t v20 = strlen((const char *)v19);
  std::string::append(a1, (const std::string::value_type *)v19, v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; Stream Coupling Policy: ", 0x1AuLL);
  int v21 = *(_DWORD *)(a2 + 144);
  if (v21 == 1668248944) {
    char v22 = "couple";
  }
  else {
    char v22 = "decouple";
  }
  if (v21 == 1668248944) {
    std::string::size_type v23 = 6;
  }
  else {
    std::string::size_type v23 = 8;
  }
  std::string::append(a1, v22, v23);
  if (*(_DWORD *)(a2 + 152) != 1852796517)
  {
    std::string::append(a1, "; Initiation Trigger: ", 0x16uLL);
    sub_2417C(&__p, *(_DWORD *)(a2 + 152));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v24 = &__p;
    }
    else {
      char v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v24, v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v26 = *(unsigned __int8 *)(a2 + 183);
    if ((v26 & 0x80u) != 0) {
      uint64_t v26 = *(void *)(a2 + 168);
    }
    if (v26)
    {
      std::string::append(a1, "; Initiating Device UID: ", 0x19uLL);
      int v27 = *(char *)(a2 + 183);
      if (v27 >= 0) {
        int64_t v28 = (const std::string::value_type *)(a2 + 160);
      }
      else {
        int64_t v28 = *(const std::string::value_type **)(a2 + 160);
      }
      if (v27 >= 0) {
        std::string::size_type v29 = *(unsigned __int8 *)(a2 + 183);
      }
      else {
        std::string::size_type v29 = *(void *)(a2 + 168);
      }
      std::string::append(a1, v28, v29);
    }
  }
  if (*(unsigned char *)(a2 + 400)) {
    std::operator+<char>();
  }
  else {
    sub_21C8C(&__p, "");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v30 = &__p;
  }
  else {
    unsigned int v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v30, v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a2 + 370)) {
    std::string::append(a1, "; Colistening: Active", 0x15uLL);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_384028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_3840C4(uint64_t a1)
{
  switch(*(_DWORD *)a1)
  {
    case 0xC:
    case 0xD:
    case 0xE:
      CFRelease(*(CFTypeRef *)(a1 + 8));
      return a1;
    case 0xF:
      if (!*(void *)(a1 + 8)) {
        return a1;
      }
      sub_D7EC0();
      break;
    case 0x10:
      if (!*(void *)(a1 + 8)) {
        return a1;
      }
      sub_15AD5C(*(uint64_t **)(a1 + 8));
      break;
    case 0x11:
      uint64_t v2 = *(void *)(a1 + 8);
      if (!v2) {
        return a1;
      }
      sub_3840C4(v2 + 16);
      sub_3840C4(v2);
      break;
    case 0x12:
      uint64_t v3 = *(void **)(a1 + 8);
      if (!v3) {
        return a1;
      }
      sub_3841D0(v3);
      break;
    default:
      return a1;
  }
  operator delete();
}

void *sub_3841D0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

CFTypeRef sub_384254(uint64_t a1, CFTypeRef cf)
{
  *(_DWORD *)a1 = 13;
  *(void *)(a1 + 8) = cf;
  return CFRetain(cf);
}

void sub_384288(_Unwind_Exception *a1)
{
  sub_3840C4(v1);
  _Unwind_Resume(a1);
}

CFTypeRef sub_38429C(uint64_t a1, CFTypeRef cf)
{
  *(_DWORD *)a1 = 14;
  *(void *)(a1 + 8) = cf;
  return CFRetain(cf);
}

void sub_3842D0(_Unwind_Exception *a1)
{
  sub_3840C4(v1);
  _Unwind_Resume(a1);
}

CFStringRef sub_3842E4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 14;
  *(void *)(a1 + 8) = 0;
  char v3 = *(unsigned char *)(a2 + 23);
  if (v3 >= 0) {
    int v4 = (const UInt8 *)a2;
  }
  else {
    int v4 = *(const UInt8 **)a2;
  }
  if (v4)
  {
    if (v3 >= 0) {
      CFIndex v5 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      CFIndex v5 = *(void *)(a2 + 8);
    }
    CFStringRef result = CFStringCreateWithBytes(0, v4, v5, 0x8000100u, 0);
    if (!result)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    CFStringRef result = 0;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_3843A0(_Unwind_Exception *a1)
{
  sub_3840C4(v1);
  _Unwind_Resume(a1);
}

void sub_3843C8(uint64_t a1)
{
  *(_DWORD *)a1 = 15;
  *(void *)(a1 + 8) = 0;
  operator new();
}

void sub_384428()
{
}

void sub_38445C(uint64_t a1)
{
  *(_DWORD *)a1 = 16;
  *(void *)(a1 + 8) = 0;
  operator new();
}

void sub_3844BC()
{
}

void sub_3844F0(uint64_t a1)
{
  *(_DWORD *)a1 = 17;
  *(void *)(a1 + 8) = 0;
  operator new();
}

void sub_384550()
{
}

void sub_384584(uint64_t a1)
{
  *(_DWORD *)a1 = 18;
  *(void *)(a1 + 8) = 0;
  operator new();
}

void sub_3845E4()
{
}

uint64_t sub_384618(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_3846B0(int *a1)
{
  if (*a1 != 18)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 488;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    char v6 = std::bad_cast::bad_cast(exception);
  }
  return *((void *)a1 + 1);
}

uint64_t sub_3847B8(uint64_t a1, int *a2)
{
  int v3 = *a2;
  *(_DWORD *)a1 = *a2;
  int v4 = (const void *)*((void *)a2 + 1);
  *(void *)(a1 + 8) = v4;
  switch(v3)
  {
    case 12:
    case 13:
    case 14:
      CFRetain(v4);
      break;
    case 15:
      operator new();
    case 16:
      operator new();
    case 17:
      operator new();
    case 18:
      operator new();
    default:
      return a1;
  }
  return a1;
}

void sub_3848D8()
{
}

CFTypeRef *sub_384964(CFTypeRef *a1, CFTypeRef *a2)
{
  if (a2 != a1)
  {
    switch(*(_DWORD *)a1)
    {
      case 0xC:
      case 0xD:
      case 0xE:
        CFRelease(a1[1]);
        goto LABEL_9;
      case 0xF:
        uint64_t v4 = (uint64_t)a1[1];
        if (!v4) {
          goto LABEL_9;
        }
        sub_D7EC0(v4);
        goto LABEL_8;
      case 0x10:
        if (!a1[1]) {
          goto LABEL_9;
        }
        sub_15AD5C((uint64_t *)a1[1]);
LABEL_8:
        operator delete();
      default:
LABEL_9:
        int v5 = *(_DWORD *)a2;
        if ((*(_DWORD *)a2 - 13) <= 1)
        {
          CFRetain(a2[1]);
          int v5 = *(_DWORD *)a2;
        }
        switch(v5)
        {
          case 18:
            operator new();
          case 16:
            operator new();
          case 15:
            operator new();
        }
        a1[1] = a2[1];
        *(_DWORD *)a1 = *(_DWORD *)a2;
        break;
    }
  }
  return a1;
}

void sub_384AE0()
{
}

uint64_t sub_384B48(uint64_t a1, int *a2)
{
  float v2 = *(float *)a2;
  if (*a2 != *(_DWORD *)a1) {
    return 0;
  }
  switch(LODWORD(v2))
  {
    case 0:
    case 1:
    case 5:
      int v5 = *((unsigned __int8 *)a2 + 8);
      int v6 = *(unsigned __int8 *)(a1 + 8);
      goto LABEL_6;
    case 2:
    case 6:
      int v5 = *((unsigned __int16 *)a2 + 4);
      int v6 = *(unsigned __int16 *)(a1 + 8);
      goto LABEL_6;
    case 3:
    case 7:
      int v5 = a2[2];
      int v6 = *(_DWORD *)(a1 + 8);
LABEL_6:
      if (v5 == v6) {
        goto LABEL_32;
      }
      return 0;
    case 4:
    case 8:
    case 0xB:
      goto LABEL_30;
    case 9:
      if (*((float *)a2 + 2) != *(float *)(a1 + 8)) {
        return 0;
      }
      goto LABEL_32;
    case 0xA:
      if (*((double *)a2 + 1) != *(double *)(a1 + 8)) {
        return 0;
      }
      goto LABEL_32;
    case 0xC:
      if (CFEqual(*((CFTypeRef *)a2 + 1), *(CFTypeRef *)(a1 + 8))) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_14:
      if (LODWORD(v2) != 13) {
        goto LABEL_17;
      }
      if (CFEqual(*((CFTypeRef *)a2 + 1), *(CFTypeRef *)(a1 + 8))) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_17:
      if (LODWORD(v2) != 14) {
        goto LABEL_20;
      }
      if (CFEqual(*((CFTypeRef *)a2 + 1), *(CFTypeRef *)(a1 + 8))) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_20:
      if (LODWORD(v2) != 15) {
        goto LABEL_23;
      }
      if (sub_E43EC(*((void *)a2 + 1), *(void *)(a1 + 8))) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_23:
      if (LODWORD(v2) != 16) {
        goto LABEL_26;
      }
      if (sub_384CF0(*((void *)a2 + 1), *(void *)(a1 + 8))) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_26:
      if (LODWORD(v2) != 17) {
        goto LABEL_29;
      }
      if (sub_384D58(*((void *)a2 + 1), *(void *)(a1 + 8))) {
        goto LABEL_32;
      }
      float v2 = *(float *)a2;
LABEL_29:
      if (LODWORD(v2) != 18) {
        return 0;
      }
LABEL_30:
      if (*((void *)a2 + 1) != *(void *)(a1 + 8)) {
        return 0;
      }
LABEL_32:
      uint64_t result = 1;
      break;
    default:
      goto LABEL_14;
  }
  return result;
}

BOOL sub_384CF0(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v2 = a2;
  uint64_t v4 = a1;
  while (1)
  {
    uint64_t v4 = *(void *)(v4 + 8);
    BOOL result = v4 == a1;
    if (v4 == a1) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if ((sub_384B48(v4 + 16, v2 + 16) & 1) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_384D58(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_384B48(a1, a2);
  if (result)
  {
    return sub_384B48(a1 + 16, a2 + 16);
  }
  return result;
}

uint64_t sub_384DA8(int *a1)
{
  if (*a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 222;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return *((unsigned __int8 *)a1 + 8);
}

uint64_t sub_384EAC(int *a1)
{
  if (*a1 != 3)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 264;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return a1[2];
}

uint64_t sub_384FB4(int *a1)
{
  if (*a1 != 7)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 320;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return a1[2];
}

float sub_3850BC(float *a1)
{
  if (*(_DWORD *)a1 != 9)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      float v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 348;
      __int16 v12 = 1024;
      float v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return a1[2];
}

double sub_3851C4(double *a1)
{
  if (*(_DWORD *)a1 != 10)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *(_DWORD *)a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 362;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return a1[1];
}

uint64_t sub_3852CC(int *a1)
{
  if (*a1 != 11)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 376;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return *((void *)a1 + 1);
}

uint64_t sub_3853D4(int *a1)
{
  if (*a1 != 13)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 404;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return *((void *)a1 + 1);
}

uint64_t sub_3854DC(int *a1)
{
  if (*a1 != 14)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 418;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return *((void *)a1 + 1);
}

uint64_t sub_3855E4(int *a1)
{
  if (*a1 != 15)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 432;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return *((void *)a1 + 1);
}

uint64_t sub_3856EC(int *a1)
{
  if (*a1 != 15)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 446;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return *((void *)a1 + 1);
}

uint64_t sub_3857F4(int *a1)
{
  if (*a1 != 16)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 460;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return *((void *)a1 + 1);
}

uint64_t sub_3858FC(int *a1)
{
  if (*a1 != 17)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    int v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = *a1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      std::string::size_type v9 = "VariType.cpp";
      __int16 v10 = 1024;
      int v11 = 474;
      __int16 v12 = 1024;
      int v13 = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Bad cast (type is %d)", buf, 0x18u);
    }
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v6 = std::bad_cast::bad_cast(exception);
  }
  return *((void *)a1 + 1);
}

void sub_385A04()
{
  sub_19085C((uint64_t)v0);
  sub_208140(&v10, 27);
  if (v9)
  {
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v10;
    uint64_t v8 = v11;
  }
  else
  {
    long long __p = v10;
    uint64_t v8 = v11;
    char v9 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (v3)
  {
    int v4 = v3;
    operator delete(v3);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_385AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_385AE8()
{
  sub_19085C((uint64_t)v0);
  sub_208140(&v10, 28);
  if (v9)
  {
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v10;
    uint64_t v8 = v11;
  }
  else
  {
    long long __p = v10;
    uint64_t v8 = v11;
    char v9 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (v3)
  {
    int v4 = v3;
    operator delete(v3);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_385BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t sub_385BCC(uint64_t a1, char *a2, uint64_t a3)
{
  int v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v4) {
    return 0;
  }
  std::string::size_type v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  if (*(void *)(a1 + 64))
  {
    if ((a2 == 0) != (*(void *)(a1 + 8) == 0))
    {
      int v9 = *(_DWORD *)(a1 + 56);
      int v10 = *(_DWORD *)(a1 + 52) + 1;
      *(_DWORD *)(a1 + 52) = v10;
      if ((float)((float)((float)*(unsigned int *)(a1 + 24) / *(float *)(a1 + 20)) * (float)(v10 - v9)) >= *(float *)(a1 + 28))
      {
        *(_DWORD *)(a1 + 56) = v10;
        int v13 = (const char *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
        {
          unint64_t v11 = *(void *)(a1 + 104);
          if (a2)
          {
            size_t v14 = a3 - 1;
            if (v11 >= a3 - 1) {
              unint64_t v11 = a3 - 1;
            }
            int v13 = *(const char **)v13;
            goto LABEL_19;
          }
        }
        else
        {
          unint64_t v11 = *(unsigned __int8 *)(a1 + 119);
          if (a2)
          {
            size_t v14 = a3 - 1;
            if (a3 - 1 < v11) {
              unint64_t v11 = a3 - 1;
            }
LABEL_19:
            strncpy(a2, v13, v14);
          }
        }
        std::string::size_type v15 = *(std::__shared_weak_count **)(a1 + 72);
        if (v15)
        {
          uint64_t v16 = std::__shared_weak_count::lock(v15);
          if (v16)
          {
            std::string::size_type v17 = v16;
            uint64_t v18 = *(void *)(a1 + 64);
            if (v18)
            {
              int v19 = *(std::__shared_weak_count **)(a1 + 88);
              if (!v19
                || (uint64_t v20 = *(NSObject **)(v18 + 72),
                    uint64_t v21 = *(void *)(a1 + 80),
                    (char v22 = std::__shared_weak_count::lock(v19)) == 0))
              {
                sub_5CABC();
              }
              std::string::size_type v23 = v22;
              p_shared_weak_owners = &v22->__shared_weak_owners_;
              atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              sub_4636C(v22);
              block[0] = _NSConcreteStackBlock;
              block[1] = 1174405120;
              block[2] = sub_385DCC;
              block[3] = &unk_636880;
              block[4] = a1;
              block[5] = v21;
              uint64_t v26 = v23;
              atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
              dispatch_async(v20, block);
              if (v26) {
                std::__shared_weak_count::__release_weak(v26);
              }
              std::__shared_weak_count::__release_weak(v23);
            }
            sub_4636C(v17);
          }
        }
        goto LABEL_7;
      }
    }
  }
  unint64_t v11 = 0;
LABEL_7:
  sub_4636C(v8);
  return v11;
}

void sub_385DB0(_Unwind_Exception *a1)
{
  sub_4636C(v2);
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_385DCC(void *a1)
{
  uint64_t v2 = a1[4];
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    int v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      uint64_t v5 = a1[5];
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    int v4 = 0;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v2 + 72);
  if (v6)
  {
    std::string::size_type v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = v7;
      if (v5)
      {
        int v9 = *(unsigned __int8 **)(v2 + 64);
        if (v9)
        {
          int v10 = 6;
          while ((atomic_exchange((atomic_uchar *volatile)(v2 + 16), 1u) & 1) != 0)
          {
            usleep(0x1388u);
            if (!--v10) {
              goto LABEL_144;
            }
          }
          if (*(char *)(v2 + 119) < 0)
          {
            **(unsigned char **)(v2 + 96) = 0;
            *(void *)(v2 + 104) = 0;
          }
          else
          {
            *(unsigned char *)(v2 + 96) = 0;
            *(unsigned char *)(v2 + 119) = 0;
          }
          unint64_t v11 = (const char *)(v2 + 96);
          if (*(unsigned char *)(v2 + 17)) {
            char v12 = 32;
          }
          else {
            char v12 = 44;
          }
          if (!*(_DWORD *)(v2 + 60))
          {
            *(_DWORD *)(v2 + 6sub_360D08(&a9, 0) = *(_DWORD *)(v2 + 32);
            std::string::append((std::string *)(v2 + 96), "\n", 1uLL);
            memset(&v50, 0, sizeof(v50));
            memset(&v49, 0, sizeof(v49));
            uint64_t v13 = qword_65D638;
            if (qword_65D638 == qword_65D640)
            {
              size_t v21 = 0;
            }
            else
            {
              do
              {
                if (*(unsigned char *)(v2 + 17))
                {
                  sub_21C8C(&v48, *(char **)(v13 + 16));
                  sub_21C8C(&v47, *(char **)(v13 + 24));
                  std::string::resize(&v48, *(unsigned int *)(v13 + 8), 32);
                  std::string::resize(&v47, *(unsigned int *)(v13 + 8), 32);
                  sub_5E2A8((uint64_t)&__p, (const void **)&v48.__r_.__value_.__l.__data_, v12);
                  if ((v46 & 0x80u) == 0) {
                    p_p = (const std::string::value_type *)&__p;
                  }
                  else {
                    p_p = (const std::string::value_type *)__p;
                  }
                  if ((v46 & 0x80u) == 0) {
                    std::string::size_type v15 = v46;
                  }
                  else {
                    std::string::size_type v15 = v45;
                  }
                  std::string::append(&v50, p_p, v15);
                  if ((char)v46 < 0) {
                    operator delete(__p);
                  }
                  sub_5E2A8((uint64_t)&__p, (const void **)&v47.__r_.__value_.__l.__data_, v12);
                  if ((v46 & 0x80u) == 0) {
                    uint64_t v16 = (const std::string::value_type *)&__p;
                  }
                  else {
                    uint64_t v16 = (const std::string::value_type *)__p;
                  }
                  if ((v46 & 0x80u) == 0) {
                    std::string::size_type v17 = v46;
                  }
                  else {
                    std::string::size_type v17 = v45;
                  }
                  std::string::append(&v49, v16, v17);
                  if ((char)v46 < 0) {
                    operator delete(__p);
                  }
                  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v47.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v48.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  if (*(_DWORD *)v13 == -1)
                  {
                    size_t v20 = strlen(*(const char **)(v13 + 16));
                    std::string::append(&v50, *(const std::string::value_type **)(v13 + 16), v20);
                  }
                  else
                  {
                    sub_2A657C(&v48, *(_DWORD *)v13);
                    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v18 = &v48;
                    }
                    else {
                      uint64_t v18 = (std::string *)v48.__r_.__value_.__r.__words[0];
                    }
                    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type size = v48.__r_.__value_.__l.__size_;
                    }
                    std::string::append(&v50, (const std::string::value_type *)v18, size);
                    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v48.__r_.__value_.__l.__data_);
                    }
                  }
                  std::string::push_back(&v50, v12);
                }
                v13 += 32;
              }
              while (v13 != qword_65D640);
              if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v21 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v21 = v50.__r_.__value_.__l.__size_;
              }
            }
            char v22 = &v48;
            sub_5E220((uint64_t)&v48, v21 + 1);
            if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              char v22 = (std::string *)v48.__r_.__value_.__r.__words[0];
            }
            if (v21)
            {
              if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v23 = &v50;
              }
              else {
                std::string::size_type v23 = (std::string *)v50.__r_.__value_.__r.__words[0];
              }
              memmove(v22, v23, v21);
            }
            *(_WORD *)((char *)&v22->__r_.__value_.__l.__data_ + v21) = 10;
            if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v24 = &v48;
            }
            else {
              char v24 = (std::string *)v48.__r_.__value_.__r.__words[0];
            }
            if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v25 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v25 = v48.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)(v2 + 96), (const std::string::value_type *)v24, v25);
            if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v48.__r_.__value_.__l.__data_);
            }
            char v26 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
            if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v27 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v27 = v49.__r_.__value_.__l.__size_;
            }
            if (v27)
            {
              sub_5E220((uint64_t)&v48, v27 + 1);
              if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int64_t v28 = &v48;
              }
              else {
                int64_t v28 = (std::string *)v48.__r_.__value_.__r.__words[0];
              }
              if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v29 = &v49;
              }
              else {
                std::string::size_type v29 = (std::string *)v49.__r_.__value_.__r.__words[0];
              }
              memmove(v28, v29, v27);
              *(_WORD *)((char *)&v28->__r_.__value_.__l.__data_ + v27) = 10;
              if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unsigned int v30 = &v48;
              }
              else {
                unsigned int v30 = (std::string *)v48.__r_.__value_.__r.__words[0];
              }
              if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v31 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v31 = v48.__r_.__value_.__l.__size_;
              }
              std::string::append((std::string *)(v2 + 96), (const std::string::value_type *)v30, v31);
              if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v48.__r_.__value_.__l.__data_);
              }
              char v26 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
            }
            if (v26 < 0) {
              operator delete(v49.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v50.__r_.__value_.__l.__data_);
            }
          }
          if (*(_DWORD *)(v2 + 32)) {
            int v32 = *(_DWORD *)(v2 + 60) - 1;
          }
          else {
            int v32 = 1;
          }
          *(_DWORD *)(v2 + 6sub_360D08(&a9, 0) = v32;
          uint64_t v33 = (unsigned int *)qword_65D638;
          if (qword_65D638 != qword_65D640)
          {
            while (1)
            {
              memset(&v50, 0, sizeof(v50));
              unsigned int v34 = v33[1];
              if (v34 - 1 < 3) {
                break;
              }
              if (v34 == 4)
              {
                std::to_string(&v49, v9[80]);
                goto LABEL_113;
              }
              if (!v34)
              {
                std::to_string(&v49, (float)((float)*(unsigned int *)(v2 + 24) / *(float *)(v2 + 20)) * (float)*(unsigned int *)(v2 + 52));
LABEL_113:
                if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v50.__r_.__value_.__l.__data_);
                }
                std::string v50 = v49;
                goto LABEL_126;
              }
              *((unsigned char *)&v50.__r_.__value_.__s + 23) = 7;
              qmemcpy(&v50, "!FORMAT", 7);
LABEL_126:
              if (*(unsigned char *)(v2 + 17)) {
                std::string::resize(&v50, v33[2], 32);
              }
              sub_5E2A8((uint64_t)&v49, (const void **)&v50.__r_.__value_.__l.__data_, v12);
              if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v41 = &v49;
              }
              else {
                std::string::size_type v41 = (std::string *)v49.__r_.__value_.__r.__words[0];
              }
              if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v42 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v42 = v49.__r_.__value_.__l.__size_;
              }
              std::string::append((std::string *)(v2 + 96), (const std::string::value_type *)v41, v42);
              if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v49.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v50.__r_.__value_.__l.__data_);
              }
              v33 += 8;
              if (v33 == (unsigned int *)qword_65D640) {
                goto LABEL_139;
              }
            }
            memset(&v49, 0, sizeof(v49));
            if (!(*(unsigned int (**)(unsigned __int8 *, void, std::string *))(*(void *)v9 + 176))(v9, *v33, &v49)|| v49.__r_.__value_.__l.__size_ - v49.__r_.__value_.__r.__words[0] != 8)
            {
              if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
              {
                v50.__r_.__value_.__l.__size_ = 6;
                unsigned int v39 = (std::string *)v50.__r_.__value_.__r.__words[0];
              }
              else
              {
                *((unsigned char *)&v50.__r_.__value_.__s + 23) = 6;
                unsigned int v39 = &v50;
              }
              strcpy((char *)v39, "!ERROR");
LABEL_124:
              if (v49.__r_.__value_.__r.__words[0])
              {
                v49.__r_.__value_.__l.__size_ = v49.__r_.__value_.__r.__words[0];
                operator delete(v49.__r_.__value_.__l.__data_);
              }
              goto LABEL_126;
            }
            double v35 = *(double *)v49.__r_.__value_.__l.__data_;
            unsigned int v36 = v33[1];
            if (v36 == 3)
            {
              float v40 = v35;
              float v38 = logf(v40) * 20.0;
            }
            else
            {
              if (v36 != 2)
              {
LABEL_121:
                std::to_string(&v48, v35);
                if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v50.__r_.__value_.__l.__data_);
                }
                std::string v50 = v48;
                goto LABEL_124;
              }
              float v37 = v35;
              float v38 = logf(v37) * 10.0;
            }
            double v35 = v38;
            goto LABEL_121;
          }
LABEL_139:
          std::string::append((std::string *)(v2 + 96), "\n", 1uLL);
          uint64_t v43 = *(FILE **)(v2 + 8);
          if (v43)
          {
            if (*(char *)(v2 + 119) < 0) {
              unint64_t v11 = *(const char **)v11;
            }
            fputs(v11, v43);
          }
          atomic_store(0, (unsigned __int8 *)(v2 + 16));
        }
      }
LABEL_144:
      sub_4636C(v8);
    }
  }
  if (v4) {
    sub_4636C(v4);
  }
}

void sub_3864A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,long long buf,long long a34)
{
  if (a2)
  {
    if (a26 < 0) {
      operator delete(__p);
    }
    if (a32 < 0) {
      operator delete(a27);
    }
    if (SBYTE7(a34) < 0) {
      operator delete((void *)buf);
    }
    if (a2 == 3)
    {
      unsigned int v36 = __cxa_begin_catch(exception_object);
      float v37 = (os_log_t *)sub_32A48(25);
      float v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = (*(uint64_t (**)(void *))(*(void *)v36 + 16))(v36);
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "AncLoggerV2.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 181;
        WORD1(a34) = 2080;
        *(void *)((char *)&a34 + 4) = v39;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&buf, 0x1Cu);
      }
    }
    else
    {
      float v40 = (void **)__cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        std::string::size_type v41 = v40;
        std::string::size_type v42 = (os_log_t *)sub_32A48(25);
        uint64_t v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v41 + 23) < 0) {
            std::string::size_type v41 = (void **)*v41;
          }
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "AncLoggerV2.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 182;
          WORD1(a34) = 2080;
          *(void *)((char *)&a34 + 4) = v41;
          _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown %s.", (uint8_t *)&buf, 0x1Cu);
        }
      }
      else
      {
        int v44 = (os_log_t *)sub_32A48(25);
        std::string::size_type v45 = *v44;
        if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "AncLoggerV2.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 183;
          _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown.", (uint8_t *)&buf, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x386444);
  }
  _Unwind_Resume(exception_object);
}

void sub_3867DC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_3867EC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4sub_360D08(&a9, 0) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_386808(uint64_t a1)
{
  sub_386840(a1);

  operator delete();
}

uint64_t sub_386840(uint64_t a1)
{
  *(void *)a1 = off_636828;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = off_63ACC0;
  int v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

__n128 sub_3868C8(__n128 *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v6 = (char *)operator new(0x90uLL);
  std::string::size_type v7 = (std::__shared_weak_count *)v6;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = off_6368C0;
  unint64_t v8 = (unint64_t)(v6 + 24);
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v6 + 15) = 0;
  *((_WORD *)v6 + 2sub_360D08(&a9, 0) = 256;
  *(void *)(v6 + 44) = 0x400473B8000;
  *(void *)(v6 + 52) = 1065353216;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((void *)v6 + 14) = 0;
  *((void *)v6 + 3) = off_636828;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 16) = 0;
  *((void *)v6 + 17) = 0;
  if (!a3 || (int v9 = std::__shared_weak_count::lock(a3)) == 0 || !a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(exception, "ancManager expired");
  }
  if (*(_DWORD *)(a2 + 12) != 2)
  {
    size_t v14 = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(v14, "ancManager is not V2");
  }
  atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v10 = (std::__shared_weak_count *)v7[4].__vftable;
  v7[3].__shared_weak_owners_ = a2;
  v7[4].__vftable = (std::__shared_weak_count_vtbl *)a3;
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_4636C(v9);
  std::__shared_weak_count::__release_weak(a3);
  shared_weak_owners = (std::__shared_weak_count *)v7[4].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[4].__shared_owners_ = v8;
    v7[4].__shared_weak_owners_ = (uint64_t)v7;
    goto LABEL_13;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[4].__shared_owners_ = v8;
    v7[4].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_13:
    sub_4636C(v7);
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v7;
  *a1 = result;
  return result;
}

void sub_386AEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v5);
  sub_4636C(v4);
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(v1 + 112);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  *(void *)(v1 + 24) = v3;
  int v9 = *(std::__shared_weak_count **)(v1 + 96);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_386B6C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_386B90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_6368C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_386BE4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_6368C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_386C04(const __CFDictionary *a1)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"HW type");
  if (!Value) {
    return 0xFFFFFFFFLL;
  }
  CFStringRef v2 = Value;
  CFTypeID v3 = CFGetTypeID(Value);
  if (v3 != CFStringGetTypeID()) {
    return 0xFFFFFFFFLL;
  }
  if (CFEqual(v2, @"L71")) {
    return 2;
  }
  if (CFEqual(v2, @"L75")) {
    return 3;
  }
  if (CFStringCompare(v2, @"L77", 0)) {
    return 0xFFFFFFFFLL;
  }
  return 4;
}

uint64_t sub_386CB0()
{
  return 1;
}

uint64_t sub_386CB8(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int **a5, unsigned int a6, unsigned int **a7)
{
  uint64_t result = sub_23AC0();
  if (result)
  {
    return sub_EF50(a1, a2, a3, a4, a5, a6, a7);
  }
  else if (*(unsigned char *)(a1 + 448))
  {
    HIWORD(v29) = *(_WORD *)(a1 + 682);
    LOWORD(v29) = HIWORD(v29);
    HIWORD(v27) = HIWORD(v29) == 0;
    LOWORD(v27) = HIWORD(v29);
    int v11 = v29;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 680), (unsigned int *)&v11, v27);
    uint64_t v12 = *(_WORD *)(a1 + 682) ? 400 : 424;
    uint64_t v13 = *(_WORD *)(a1 + 682) ? a1 + 400 : a1 + 424;
    uint64_t v14 = *(void *)(v13 + 8) - *(void *)(a1 + v12);
    if (v14)
    {
      uint64_t v15 = 0;
      unint64_t v16 = v14 / 24;
      unint64_t v17 = v16 - 1;
      if (v16 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v16;
      }
      uint64_t v19 = 8;
      uint64_t v20 = 16;
      do
      {
        size_t v21 = a7;
        if (v17 != v15) {
          size_t v21 = (unsigned int **)(*(void *)(a1 + 976) + v20);
        }
        int64_t v28 = *v21;
        uint64_t v22 = *(void *)(a1 + v12);
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(v22 + v19) + 216))(*(void *)(v22 + v19));
        if (result)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v22 + v19) + 112))(*(void *)(v22 + v19), a2, a3);
        }
        else if (v28)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v22 + v19) + 104))(*(void *)(v22 + v19), a2, a3);
        }
        ++v15;
        v19 += 24;
        v20 += 32;
      }
      while (v18 != v15);
    }
  }
  return result;
}

BOOL sub_386F68(uint64_t a1, int a2)
{
  return a2 == 1936748595 || sub_1AB024(a1, a2);
}

uint64_t sub_386F84(uint64_t a1, int a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_387040(a2, a3);
  if (HIDWORD(v12))
  {
    int v14 = v12;
    uint64_t v15 = *(void *)(a1 + 1136);
    uint64_t v16 = *(void *)(v15 + 16);
    char v17 = *(unsigned char *)(v15 + 148);
    return sub_67F10(v16, v17, v14, a5, a4);
  }
  else
  {
    return sub_1AB0E0(a1, a2, a3, (uint64_t)a4, a5, a6);
  }
}

uint64_t sub_387040(int a1, unsigned int a2)
{
  LODWORD(v4) = sub_23AC0();
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (a1 != 1685287015)
  {
    if (a1 == 1936748595)
    {
      unint64_t v4 = sub_D8B40(0x73707033u, a2);
      if (!HIDWORD(v4))
      {
        int v10 = (os_log_t *)sub_32A48(13);
        int v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          int v14 = "DSPChain_HAL_ClosedLoopSpeakerProtection.cpp";
          __int16 v15 = 1024;
          int v16 = 53;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Postcondition failure.");
      }
      unsigned int v5 = v4 & 0xFFFFFF00;
      uint64_t v6 = 0x100000000;
      return v6 | v5 | v4;
    }
    uint64_t v6 = 0;
    LOBYTE(v4) = 0;
LABEL_14:
    unsigned int v5 = 0;
    return v6 | v5 | v4;
  }
  int v7 = sub_D8A6C(a2);
  unsigned int v5 = a2 & 0xFFFFFF00;
  uint64_t v6 = 0x100000000;
  BOOL v8 = v7 == 0;
  if (v7)
  {
    LOBYTE(v4) = a2;
  }
  else
  {
    uint64_t v6 = 0;
    LOBYTE(v4) = 0;
  }
  if (v8) {
    unsigned int v5 = 0;
  }
  return v6 | v5 | v4;
}

void sub_3871D0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_3871EC(uint64_t a1, int a2, uint64_t a3, void *a4, UInt32 *a5, uint64_t a6)
{
  unint64_t v12 = sub_387040(a2, a3);
  if (HIDWORD(v12))
  {
    int v14 = v12;
    uint64_t v15 = *(void *)(a1 + 1136);
    uint64_t v16 = *(void *)(v15 + 16);
    char v17 = *(unsigned char *)(v15 + 148);
    return sub_67FA0(v16, v17, v14, a5, a4);
  }
  else
  {
    return sub_1AB2A0(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
  }
}

uint64_t sub_3872A8(uint64_t a1, int a2, uint64_t a3, UInt32 *a4, unsigned char *a5, uint64_t a6)
{
  unint64_t v12 = sub_387040(a2, a3);
  if (HIDWORD(v12))
  {
    int v14 = v12;
    uint64_t v15 = *(void *)(a1 + 1136);
    uint64_t v16 = *(void *)(v15 + 16);
    char v17 = *(unsigned char *)(v15 + 148);
    return sub_68030(v16, v17, v14, a4, a5);
  }
  else
  {
    return sub_1AB338(a1, a2, a3, (uint64_t)a4, (uint64_t)a5, a6);
  }
}

uint64_t sub_387364(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_387040(a2, a3);
  if (!HIDWORD(v8)) {
    return sub_1AB178(a1, a2, a3, a4) != 0;
  }
  unsigned int v10 = v8;
  uint64_t v11 = *(void *)(a1 + 1136);

  return sub_680C8(v11, v10);
}

uint64_t sub_3873F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, float a5)
{
  unint64_t v10 = sub_3874A0(a2, a3);
  if (HIDWORD(v10))
  {
    int v12 = v10;
    uint64_t v13 = *(void *)(a1 + 1136);
    uint64_t v14 = *(void *)(v13 + 16);
    char v15 = *(unsigned char *)(v13 + 148);
    return sub_68260(v14, v15, v12, a5);
  }
  else
  {
    return sub_524FC(a1, a2, a3, a4, a5);
  }
}

uint64_t sub_3874A0(int a1, unsigned int a2)
{
  LODWORD(v4) = sub_23AC0();
  if (!v4)
  {
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (a1 != 1685287015)
  {
    if (a1 == 1936748595)
    {
      unint64_t v4 = sub_23BA8(0x73707033u, a2);
      if (!HIDWORD(v4))
      {
        unint64_t v10 = (os_log_t *)sub_32A48(13);
        uint64_t v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          uint64_t v14 = "DSPChain_HAL_ClosedLoopSpeakerProtection.cpp";
          __int16 v15 = 1024;
          int v16 = 79;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Postcondition failure.");
      }
      unsigned int v5 = v4 & 0xFFFFFF00;
      uint64_t v6 = 0x100000000;
      return v6 | v5 | v4;
    }
    uint64_t v6 = 0;
    LOBYTE(v4) = 0;
LABEL_14:
    unsigned int v5 = 0;
    return v6 | v5 | v4;
  }
  int v7 = sub_23B50(a2);
  unsigned int v5 = a2 & 0xFFFFFF00;
  uint64_t v6 = 0x100000000;
  BOOL v8 = v7 == 0;
  if (v7)
  {
    LOBYTE(v4) = a2;
  }
  else
  {
    uint64_t v6 = 0;
    LOBYTE(v4) = 0;
  }
  if (v8) {
    unsigned int v5 = 0;
  }
  return v6 | v5 | v4;
}

void sub_387630(_Unwind_Exception *exception_object)
{
}

uint64_t sub_38764C(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  unint64_t v10 = sub_3874A0(a2, a3);
  if (HIDWORD(v10))
  {
    int v12 = v10;
    uint64_t v13 = *(void *)(a1 + 1136);
    uint64_t v14 = *(void *)(v13 + 16);
    char v15 = *(unsigned char *)(v13 + 148);
    return sub_16410(v14, v15, v12, a4);
  }
  else
  {
    return sub_1AB3E0(a1, a2, a3, (uint64_t)a4, a5);
  }
}

uint64_t sub_3876FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_3874A0(a2, a3);
  if (!HIDWORD(v8)) {
    return sub_13714(a1, a2, a3, a4) != 0;
  }
  unsigned int v10 = v8;
  uint64_t v11 = *(void *)(a1 + 1136);

  return sub_2326C(v11, v10);
}

uint64_t sub_387788(uint64_t a1, void *a2)
{
  return 1;
}

void sub_3877A4(unint64_t a1)
{
  sub_3877DC(a1);

  operator delete();
}

unint64_t sub_3877DC(unint64_t a1)
{
  *(void *)a1 = off_6368F8;
  CFStringRef v2 = (os_log_t *)sub_32A48(24);
  CFTypeID v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 735) < 0)
    {
      sub_21E8C(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(a1 + 712);
      uint64_t v8 = *(void *)(a1 + 728);
    }
    unint64_t v4 = __p;
    if (v8 < 0) {
      unint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    unsigned int v10 = "DSPChain_HAL_ClosedLoopSpeakerProtection.cpp";
    __int16 v11 = 1024;
    int v12 = 214;
    __int16 v13 = 2080;
    uint64_t v14 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Deleting DSPChain_HAL_ClosedLoopSpeakerProtection %s", buf, 0x1Cu);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 1144);
  if (v5) {
    sub_4636C(v5);
  }
  sub_1B6728(a1);
  return a1;
}

void sub_387930(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_387940(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "VPMicIndex");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_3879E0(_Unwind_Exception *a1)
{
  CFTypeID v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

void sub_387A1C()
{
  sub_387B00((uint64_t)v0);
  sub_208140(&v10, 74);
  if (v9)
  {
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v10;
    uint64_t v8 = v11;
  }
  else
  {
    long long __p = v10;
    uint64_t v8 = v11;
    char v9 = 1;
  }
  sub_402E04(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (v3)
  {
    CFNumberRef v4 = v3;
    operator delete(v3);
  }
  if (v1)
  {
    CFStringRef v2 = v1;
    operator delete(v1);
  }
}

void sub_387AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_387B00(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  if (!*(unsigned char *)(sub_6C174(v1) + 4)) {
    *(unsigned char *)(v2 + 4) = 1;
  }
  *(_DWORD *)uint64_t v2 = 1953460273;
  if (!*(unsigned char *)(v2 + 12)) {
    *(unsigned char *)(v2 + 12) = 1;
  }
  *(_DWORD *)(v2 + 8) = 1;
  if (!*(unsigned char *)(v2 + 20)) {
    *(unsigned char *)(v2 + 2sub_360D08(&a9, 0) = 1;
  }
  *(_DWORD *)(v2 + 16) = 2;
  LODWORD(v841[0]) = 1;
  sub_8732C((char *)(v2 + 24), (char *)v841, (uint64_t)v841 + 4, 1uLL);
  v841[0] = (void *)0x200000001;
  sub_8732C((char *)(v2 + 48), (char *)v841, (uint64_t)&v841[1], 2uLL);
  *(_DWORD *)(v2 + 72) = 16777472;
  *(_WORD *)(v2 + 78) = 257;
  *(_WORD *)(v2 + 84) = 257;
  *(_DWORD *)(v2 + 88) = 16843009;
  *(_DWORD *)(v2 + 304) = -1047527424;
  *(unsigned char *)(v2 + 308) = 1;
  *(_DWORD *)(v2 + 34sub_360D08(&a9, 0) = 1103101952;
  *(unsigned char *)(v2 + 344) = 1;
  *(_DWORD *)(v2 + 364) = 0;
  *(unsigned char *)(v2 + 368) = 1;
  *(_DWORD *)(v2 + 372) = 0;
  *(unsigned char *)(v2 + 376) = 1;
  *(_DWORD *)(v2 + 356) = 0;
  *(unsigned char *)(v2 + 36sub_360D08(&a9, 0) = 1;
  *(_DWORD *)(v2 + 42sub_360D08(&a9, 0) = 0;
  *(unsigned char *)(v2 + 424) = 1;
  *(_DWORD *)(v2 + 38sub_360D08(&a9, 0) = -1040187392;
  *(unsigned char *)(v2 + 384) = 1;
  *(_WORD *)(v2 + 43sub_360D08(&a9, 0) = 257;
  *(_DWORD *)(v2 + 312) = 0;
  *(unsigned char *)(v2 + 316) = 1;
  *(_WORD *)(v2 + 428) = 257;
  if (!*(unsigned char *)(v2 + 692)) {
    *(unsigned char *)(v2 + 692) = 1;
  }
  *(_DWORD *)(v2 + 688) = 1836282987;
  if (!*(unsigned char *)(v2 + 700)) {
    *(unsigned char *)(v2 + 70sub_360D08(&a9, 0) = 1;
  }
  *(_DWORD *)(v2 + 696) = 2;
  if (!*(unsigned char *)(v2 + 708)) {
    *(unsigned char *)(v2 + 708) = 1;
  }
  *(_DWORD *)(v2 + 704) = 4;
  if (!*(unsigned char *)(v2 + 716)) {
    *(unsigned char *)(v2 + 716) = 1;
  }
  *(_DWORD *)(v2 + 712) = 0;
  *(_DWORD *)(v2 + 728) = 36;
  *(unsigned char *)(v2 + 732) = 1;
  *(_DWORD *)(v2 + 736) = 36;
  *(unsigned char *)(v2 + 74sub_360D08(&a9, 0) = 1;
  *(_DWORD *)(v2 + 744) = 36;
  *(unsigned char *)(v2 + 748) = 1;
  *(_DWORD *)(v2 + 768) = 12;
  *(unsigned char *)(v2 + 772) = 1;
  *(unsigned char *)(v2 + 824) = 0;
  *(_DWORD *)(v2 + 836) = 41;
  *(unsigned char *)(v2 + 84sub_360D08(&a9, 0) = 1;
  *(_DWORD *)(v2 + 844) = 3;
  *(unsigned char *)(v2 + 848) = 1;
  *(_DWORD *)(v2 + 852) = 25;
  *(unsigned char *)(v2 + 856) = 1;
  *(_DWORD *)(v2 + 86sub_360D08(&a9, 0) = 41;
  *(unsigned char *)(v2 + 864) = 1;
  *(_WORD *)(v2 + 868) = 256;
  *(_DWORD *)(v2 + 912) = 41;
  *(unsigned char *)(v2 + 916) = 1;
  *(_DWORD *)(v2 + 92sub_360D08(&a9, 0) = 41;
  *(unsigned char *)(v2 + 924) = 1;
  *(_DWORD *)(v2 + 928) = 23;
  *(unsigned char *)(v2 + 932) = 1;
  *(_DWORD *)(v2 + 936) = 7;
  *(unsigned char *)(v2 + 94sub_360D08(&a9, 0) = 1;
  *(_DWORD *)(v2 + 944) = 1;
  *(unsigned char *)(v2 + 948) = 1;
  sub_87428((std::string *)(v2 + 992), "_top_mic_general");
  sub_87428((std::string *)(v2 + 1024), "_top_mic_measurement");
  sub_87428((std::string *)(v2 + 1056), "_top_mic_hearing_accessibility");
  *(_WORD *)(v2 + 12sub_360D08(&a9, 0) = 257;
  sub_21C8C(v236, "");
  sub_208ED4(v815);
  sub_21C8C(&v790, off_648B50);
  sub_21C8C(&v765, "AU");
  sub_21C8C(&v740, "VAD");
  sub_6D364((char *)v841, (long long *)v236, (uint64_t)v815, &v790, &v765, &v740);
  sub_6D600(v2 + 432, (long long *)v841);
  if (v846 < 0) {
    operator delete(__p);
  }
  if (v844 < 0) {
    operator delete(v843);
  }
  if (v842 < 0) {
    operator delete(v841[0]);
  }
  if (SHIBYTE(v740.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v740.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v765.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v765.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v790.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v790.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v816) < 0) {
    operator delete(v815[0]);
  }
  if (v237 < 0) {
    operator delete(v236[0]);
  }
  int v263 = 1;
  sub_21C8C(v260, "speaker_general");
  sub_21C8C(v236, "speaker_general");
  uint64_t v239 = 0;
  uint64_t v238 = 0;
  uint64_t v240 = 0;
  sub_21C8C(v241, "speaker_general");
  sub_21C8C(v242, "speaker_general");
  memset(&v242[3], 0, 24);
  int v243 = 1684434036;
  CFTypeRef v235 = 0;
  int v839 = 1936749683;
  CFTypeRef v840 = 0;
  unint64_t v246 = 0;
  unint64_t v244 = 0;
  uint64_t v245 = 0;
  v815[0] = &v244;
  LOBYTE(v815[1]) = 0;
  unint64_t v244 = (char *)operator new(0x10uLL);
  uint64_t v245 = v244;
  CFTypeID v3 = v244 + 16;
  unint64_t v246 = v244 + 16;
  sub_6D16C((uint64_t)v244, 1936749683, 0);
  uint64_t v245 = v3;
  long long v247 = 0u;
  long long v248 = 0u;
  CFNumberRef v4 = (char *)operator new(0xCuLL);
  qmemcpy(v4, "ulovlovllovt", 12);
  *((void *)&v247 + 1) = v4;
  *(void *)&long long v248 = v4 + 12;
  v250[0] = 0;
  v250[1] = 0;
  *((void *)&v248 + 1) = v4 + 12;
  unint64_t v249 = v250;
  long long v253 = 0;
  unint64_t v251 = 0;
  long long v252 = 0;
  unsigned int v5 = operator new(8uLL);
  unint64_t v251 = v5;
  *unsigned int v5 = 0x400000002;
  long long v253 = v5 + 1;
  long long v252 = v5 + 1;
  char v254 = 0;
  char v255 = 0;
  memset(v256, 0, sizeof(v256));
  uint64_t v257 = 0;
  *(_OWORD *)v815 = xmmword_5968C4;
  uint64_t v816 = 2;
  sub_6D1AC((uint64_t)v256, (int *)v815, 3);
  char v258 = 0;
  uint64_t v259 = 0;
  sub_6D224(v841, (long long *)v260, (long long *)v236);
  sub_21C8C(v233, "speaker_latenight_general");
  sub_21C8C(v815, "speaker_general");
  uint64_t v818 = 0;
  uint64_t v817 = 0;
  uint64_t v819 = 0;
  sub_21C8C(v820, "speaker_latenight_general");
  sub_21C8C(v821, "speaker_general");
  memset(&v821[3], 0, 24);
  int v822 = 1684434036;
  CFTypeRef v232 = 0;
  int v813 = 1936749683;
  CFTypeRef v814 = 0;
  v825 = 0;
  v823 = 0;
  v824 = 0;
  v790.__r_.__value_.__r.__words[0] = (std::string::size_type)&v823;
  v790.__r_.__value_.__s.__data_[8] = 0;
  v823 = (char *)operator new(0x10uLL);
  v824 = v823;
  uint64_t v6 = v823 + 16;
  v825 = v823 + 16;
  sub_6D16C((uint64_t)v823, 1936749683, 0);
  v824 = v6;
  long long v826 = 0u;
  long long v827 = 0u;
  int v7 = (char *)operator new(0xCuLL);
  qmemcpy(v7, "ulovlovllovt", 12);
  *((void *)&v826 + 1) = v7;
  *(void *)&long long v827 = v7 + 12;
  v829[0] = 0;
  v829[1] = 0;
  *((void *)&v827 + 1) = v7 + 12;
  v828 = v829;
  v832 = 0;
  v830 = 0;
  v831 = 0;
  uint64_t v8 = operator new(8uLL);
  v830 = v8;
  *uint64_t v8 = 0x400000002;
  v832 = v8 + 1;
  v831 = v8 + 1;
  char v833 = 0;
  char v834 = 0;
  memset(v835, 0, sizeof(v835));
  uint64_t v836 = 0;
  *(_OWORD *)&v790.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v790.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v835, (int *)&v790, 3);
  char v837 = 0;
  uint64_t v838 = 0;
  sub_6D224(v847, (long long *)v233, (long long *)v815);
  sub_21C8C(v230, "speaker_movie");
  sub_21C8C(&v790, "speaker_general");
  uint64_t v792 = 0;
  uint64_t v791 = 0;
  uint64_t v793 = 0;
  sub_21C8C(v794, "speaker_movie");
  sub_21C8C(v795, "speaker_general");
  memset(&v795[3], 0, 24);
  int v796 = 1684434036;
  CFTypeRef v229 = 0;
  int v788 = 1936749683;
  CFTypeRef v789 = 0;
  v799 = 0;
  v797 = 0;
  v798 = 0;
  v765.__r_.__value_.__r.__words[0] = (std::string::size_type)&v797;
  v765.__r_.__value_.__s.__data_[8] = 0;
  v797 = (char *)operator new(0x10uLL);
  v798 = v797;
  char v9 = v797 + 16;
  v799 = v797 + 16;
  sub_6D16C((uint64_t)v797, 1936749683, 0);
  v798 = v9;
  long long v800 = 0u;
  long long v801 = 0u;
  long long v10 = (char *)operator new(0xCuLL);
  qmemcpy(v10, "ulovlovllovt", 12);
  *((void *)&v800 + 1) = v10;
  *(void *)&long long v801 = v10 + 12;
  v803[0] = 0;
  v803[1] = 0;
  *((void *)&v801 + 1) = v10 + 12;
  v802 = v803;
  v806 = 0;
  v804 = 0;
  v805 = 0;
  uint64_t v11 = operator new(8uLL);
  v804 = v11;
  *uint64_t v11 = 0x400000002;
  v806 = v11 + 1;
  v805 = v11 + 1;
  char v807 = 0;
  char v808 = 0;
  memset(v809, 0, sizeof(v809));
  uint64_t v810 = 0;
  *(_OWORD *)&v765.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v765.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v809, (int *)&v765, 3);
  char v811 = 0;
  uint64_t v812 = 0;
  sub_6D224(v848, (long long *)v230, (long long *)&v790);
  sub_21C8C(v227, "speaker_latenight_movie");
  sub_21C8C(&v765, "speaker_general");
  uint64_t v767 = 0;
  uint64_t v766 = 0;
  uint64_t v768 = 0;
  sub_21C8C(v769, "speaker_latenight_movie");
  sub_21C8C(v770, "speaker_general");
  memset(&v770[3], 0, 24);
  int v771 = 1684434036;
  CFTypeRef v226 = 0;
  int v763 = 1936749683;
  CFTypeRef v764 = 0;
  v774 = 0;
  v772 = 0;
  v773 = 0;
  v740.__r_.__value_.__r.__words[0] = (std::string::size_type)&v772;
  v740.__r_.__value_.__s.__data_[8] = 0;
  v772 = (char *)operator new(0x10uLL);
  v773 = v772;
  int v12 = v772 + 16;
  v774 = v772 + 16;
  sub_6D16C((uint64_t)v772, 1936749683, 0);
  v773 = v12;
  long long v775 = 0u;
  long long v776 = 0u;
  __int16 v13 = (char *)operator new(0xCuLL);
  qmemcpy(v13, "ulovlovllovt", 12);
  *((void *)&v775 + 1) = v13;
  *(void *)&long long v776 = v13 + 12;
  v778[0] = 0;
  v778[1] = 0;
  *((void *)&v776 + 1) = v13 + 12;
  v777 = v778;
  v781 = 0;
  v779 = 0;
  v780 = 0;
  uint64_t v14 = operator new(8uLL);
  v779 = v14;
  *uint64_t v14 = 0x400000002;
  v781 = v14 + 1;
  v780 = v14 + 1;
  char v782 = 0;
  char v783 = 0;
  memset(v784, 0, sizeof(v784));
  uint64_t v785 = 0;
  *(_OWORD *)&v740.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v740.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v784, (int *)&v740, 3);
  char v786 = 0;
  uint64_t v787 = 0;
  sub_6D224(v849, (long long *)v227, (long long *)&v765);
  sub_21C8C(v224, "speaker_measurement");
  sub_21C8C(&v740, "speaker_measurement");
  uint64_t v742 = 0;
  uint64_t v741 = 0;
  uint64_t v743 = 0;
  sub_21C8C(v744, "speaker_measurement");
  sub_21C8C(v745, "speaker_measurement");
  memset(&v745[3], 0, 24);
  int v746 = 1684434036;
  CFTypeRef v223 = 0;
  int v738 = 1936749683;
  CFTypeRef v739 = 0;
  v749 = 0;
  v747 = 0;
  v748 = 0;
  *(void *)&long long v714 = &v747;
  BYTE8(v714) = 0;
  v747 = (char *)operator new(0x10uLL);
  v748 = v747;
  char v15 = v747 + 16;
  v749 = v747 + 16;
  sub_6D16C((uint64_t)v747, 1936749683, 0);
  v748 = v15;
  long long v750 = 0u;
  long long v751 = 0u;
  int v16 = operator new(8uLL);
  *((void *)&v750 + 1) = v16;
  void *v16 = 0x74766F6C76756764;
  *((void *)&v751 + 1) = v16 + 1;
  *(void *)&long long v751 = v16 + 1;
  v753[0] = 0;
  v753[1] = 0;
  v752 = v753;
  v756 = 0;
  v754 = 0;
  v755 = 0;
  char v17 = operator new(8uLL);
  v754 = v17;
  *char v17 = 0x400000002;
  v756 = v17 + 1;
  v755 = v17 + 1;
  char v757 = 0;
  char v758 = 0;
  memset(v759, 0, sizeof(v759));
  uint64_t v760 = 0;
  long long v714 = xmmword_5968C4;
  uint64_t v715 = 2;
  sub_6D1AC((uint64_t)v759, (int *)&v714, 3);
  char v761 = 0;
  uint64_t v762 = 0;
  sub_6D224(v850, (long long *)v224, (long long *)&v740);
  sub_21C8C(v221, "speaker_raw");
  sub_21C8C(&v714, "speaker_raw");
  uint64_t v717 = 0;
  uint64_t v716 = 0;
  uint64_t v718 = 0;
  sub_21C8C(v719, "speaker_measurement");
  sub_21C8C(v720, "speaker_raw");
  memset(&v720[3], 0, 24);
  int v721 = 1684434036;
  CFTypeRef v220 = 0;
  int v712 = 1936749683;
  CFTypeRef v713 = 0;
  v724 = 0;
  v722 = 0;
  v723 = 0;
  *(void *)&long long v688 = &v722;
  BYTE8(v688) = 0;
  v722 = (char *)operator new(0x10uLL);
  v723 = v722;
  uint64_t v18 = v722 + 16;
  v724 = v722 + 16;
  sub_6D16C((uint64_t)v722, 1936749683, 0);
  v723 = v18;
  long long v725 = 0u;
  long long v726 = 0u;
  uint64_t v19 = operator new(8uLL);
  *((void *)&v725 + 1) = v19;
  *uint64_t v19 = 0x74766F6C76756764;
  *((void *)&v726 + 1) = v19 + 1;
  *(void *)&long long v726 = v19 + 1;
  v728[0] = 0;
  v728[1] = 0;
  v727 = v728;
  v731 = 0;
  v729 = 0;
  v730 = 0;
  uint64_t v20 = operator new(8uLL);
  v729 = v20;
  void *v20 = 0x400000002;
  v731 = v20 + 1;
  v730 = v20 + 1;
  char v732 = 0;
  char v733 = 0;
  memset(v734, 0, sizeof(v734));
  uint64_t v735 = 0;
  long long v688 = xmmword_5968C4;
  uint64_t v689 = 2;
  sub_6D1AC((uint64_t)v734, (int *)&v688, 3);
  char v736 = 0;
  uint64_t v737 = 0;
  sub_6D224(v851, (long long *)v221, &v714);
  sub_21C8C(v218, "speaker_ringtone");
  sub_21C8C(&v688, "speaker_general");
  uint64_t v691 = 0;
  uint64_t v690 = 0;
  uint64_t v692 = 0;
  sub_21C8C(v693, "speaker_ringtone");
  sub_21C8C(v694, "speaker_general");
  memset(&v694[3], 0, 24);
  int v695 = 1684434036;
  CFTypeRef v217 = 0;
  int v686 = 1936749683;
  CFTypeRef v687 = 0;
  v698 = 0;
  v696 = 0;
  v697 = 0;
  *(void *)&long long v662 = &v696;
  BYTE8(v662) = 0;
  v696 = (char *)operator new(0x10uLL);
  v697 = v696;
  size_t v21 = v696 + 16;
  v698 = v696 + 16;
  sub_6D16C((uint64_t)v696, 1936749683, 0);
  v697 = v21;
  long long v699 = 0u;
  long long v700 = 0u;
  uint64_t v22 = operator new(8uLL);
  *((void *)&v699 + 1) = v22;
  void *v22 = 0x6C766F6C766F6C75;
  *((void *)&v700 + 1) = v22 + 1;
  *(void *)&long long v700 = v22 + 1;
  v702[0] = 0;
  v702[1] = 0;
  v701 = v702;
  v705 = 0;
  v703 = 0;
  v704 = 0;
  std::string::size_type v23 = operator new(8uLL);
  v703 = v23;
  *std::string::size_type v23 = 0x400000002;
  v705 = v23 + 1;
  v704 = v23 + 1;
  char v706 = 0;
  char v707 = 0;
  memset(v708, 0, sizeof(v708));
  uint64_t v709 = 0;
  long long v662 = xmmword_5968C4;
  uint64_t v663 = 2;
  sub_6D1AC((uint64_t)v708, (int *)&v662, 3);
  char v710 = 0;
  uint64_t v711 = 0;
  sub_6D224(v852, (long long *)v218, &v688);
  sub_21C8C(v215, "speaker_vp");
  sub_21C8C(&v662, "speaker_vp");
  long long v669 = 0u;
  long long v668 = 0u;
  long long v667 = 0u;
  long long v666 = 0u;
  long long v665 = 0u;
  long long v664 = 0u;
  int v670 = 1684434036;
  v676[0] = 0;
  v676[1] = 0;
  long long v671 = 0u;
  long long v672 = 0u;
  long long v673 = 0u;
  uint64_t v674 = 0;
  v675 = v676;
  v679 = 0;
  v677 = 0;
  v678 = 0;
  char v24 = operator new(8uLL);
  v677 = v24;
  *char v24 = 0x400000002;
  v679 = v24 + 1;
  v678 = v24 + 1;
  char v680 = 0;
  char v681 = 0;
  memset(v682, 0, sizeof(v682));
  uint64_t v683 = 0;
  long long v636 = xmmword_5968C4;
  uint64_t v637 = 2;
  sub_6D1AC((uint64_t)v682, (int *)&v636, 3);
  char v684 = 0;
  uint64_t v685 = 0;
  sub_6D224(v853, (long long *)v215, &v662);
  sub_21C8C(v213, "omni_mic_general");
  sub_21C8C(&v636, "top_mic_general");
  uint64_t v639 = 0;
  uint64_t v638 = 0;
  uint64_t v640 = 0;
  sub_21C8C(v641, "top_mic_general");
  sub_21C8C(v642, "top_mic_general");
  memset(&v642[3], 0, 24);
  int v643 = 1684434036;
  sub_1CDF04(v630, "aufx-firf-appl");
  int v210 = 1;
  sub_387940((uint64_t)v631, &v210);
  v211[0] = v630;
  v211[1] = 2;
  CFDictionaryRef v25 = sub_4D3D8((uint64_t)v211);
  v632[0] = 1718186601;
  CFDictionaryRef v633 = v25;
  CFTypeRef v212 = 0;
  char v26 = operator new(4uLL);
  *char v26 = 1;
  v207[2] = v26 + 1;
  v207[0] = v26;
  v207[1] = v26 + 1;
  sub_1CE360((uint64_t)&v628, (int **)v207);
  v208[0] = &v628;
  v208[1] = 1;
  CFDictionaryRef v27 = sub_4D3D8((uint64_t)v208);
  int v634 = 1667789676;
  CFDictionaryRef v635 = v27;
  CFTypeRef v209 = 0;
  v645 = 0;
  v646 = 0;
  v644 = 0;
  *(void *)&long long v600 = &v644;
  BYTE8(v60sub_360D08(&a9, 0) = 0;
  int64_t v28 = (char *)operator new(0x20uLL);
  uint64_t v29 = 0;
  v644 = v28;
  v645 = v28;
  v646 = v28 + 32;
  do
  {
    sub_6D16C((uint64_t)&v28[v29 * 4], v632[v29], *(CFTypeRef *)&v632[v29 + 2]);
    v29 += 4;
  }
  while (v29 != 8);
  v645 = v28 + 32;
  int v205 = 1886216809;
  sub_1CDF58((uint64_t)&v626, "PortType", &v205);
  v206[0] = &v626;
  v206[1] = 1;
  CFDictionaryRef v647 = sub_4D3D8((uint64_t)v206);
  v648 = 0;
  v650 = 0;
  v649 = 0;
  unsigned int v30 = operator new(4uLL);
  v648 = v30;
  _DWORD *v30 = 1987013749;
  v650 = v30 + 1;
  v649 = v30 + 1;
  v652[0] = 0;
  v652[1] = 0;
  v651 = v652;
  v655 = 0;
  v653 = 0;
  v654 = 0;
  std::string::size_type v31 = operator new(8uLL);
  v653 = v31;
  void *v31 = 0x100000002;
  v655 = v31 + 1;
  v654 = v31 + 1;
  char v656 = 0;
  char v657 = 0;
  memset(v658, 0, sizeof(v658));
  uint64_t v659 = 0;
  long long v600 = xmmword_5968C4;
  uint64_t v601 = 2;
  sub_6D1AC((uint64_t)v658, (int *)&v600, 3);
  char v660 = 0;
  uint64_t v661 = 0;
  sub_6D224(v854, (long long *)v213, &v636);
  sub_21C8C(v203, "omni_mic_hearing_accessibility");
  sub_21C8C(&v600, "top_mic_hearing_accessibility");
  uint64_t v603 = 0;
  uint64_t v602 = 0;
  uint64_t v604 = 0;
  sub_21C8C(v605, "top_mic_hearing_accessibility");
  sub_21C8C(v606, "top_mic_hearing_accessibility");
  memset(&v606[3], 0, 24);
  int v607 = 1684434036;
  sub_1CDF04(v594, "aufx-firf-appl");
  int v200 = 1;
  sub_387940((uint64_t)v595, &v200);
  v201[0] = v594;
  v201[1] = 2;
  CFDictionaryRef v32 = sub_4D3D8((uint64_t)v201);
  v596[0] = 1718186601;
  CFDictionaryRef v597 = v32;
  CFTypeRef v202 = 0;
  uint64_t v33 = operator new(4uLL);
  _DWORD *v33 = 1;
  v197[2] = v33 + 1;
  v197[0] = v33;
  v197[1] = v33 + 1;
  sub_1CE360((uint64_t)&v592, (int **)v197);
  v198[0] = &v592;
  v198[1] = 1;
  CFDictionaryRef v34 = sub_4D3D8((uint64_t)v198);
  int v598 = 1667789676;
  CFDictionaryRef v599 = v34;
  CFTypeRef v199 = 0;
  v609 = 0;
  v610 = 0;
  v608 = 0;
  *(void *)&long long v564 = &v608;
  BYTE8(v564) = 0;
  double v35 = (char *)operator new(0x20uLL);
  uint64_t v36 = 0;
  v608 = v35;
  v609 = v35;
  v610 = v35 + 32;
  do
  {
    sub_6D16C((uint64_t)&v35[v36 * 4], v596[v36], *(CFTypeRef *)&v596[v36 + 2]);
    v36 += 4;
  }
  while (v36 != 8);
  v609 = v35 + 32;
  int v195 = 1886216809;
  sub_1CDF58((uint64_t)&v590, "PortType", &v195);
  v196[0] = &v590;
  v196[1] = 1;
  CFDictionaryRef v611 = sub_4D3D8((uint64_t)v196);
  v612 = 0;
  v614 = 0;
  v613 = 0;
  float v37 = operator new(4uLL);
  v612 = v37;
  *float v37 = 1987013749;
  v614 = v37 + 1;
  v613 = v37 + 1;
  v616[0] = 0;
  v616[1] = 0;
  v615 = v616;
  v619 = 0;
  v617 = 0;
  v618 = 0;
  float v38 = operator new(8uLL);
  v617 = v38;
  void *v38 = 0x100000002;
  v619 = v38 + 1;
  v618 = v38 + 1;
  char v620 = 0;
  char v621 = 0;
  memset(v622, 0, sizeof(v622));
  uint64_t v623 = 0;
  long long v564 = xmmword_5968C4;
  uint64_t v565 = 2;
  sub_6D1AC((uint64_t)v622, (int *)&v564, 3);
  char v624 = 0;
  uint64_t v625 = 0;
  sub_6D224(v855, (long long *)v203, &v600);
  sub_21C8C(v193, "omni_mic_video_recording");
  sub_21C8C(&v564, "top_mic_general");
  uint64_t v567 = 0;
  uint64_t v566 = 0;
  uint64_t v568 = 0;
  sub_21C8C(v569, "top_mic_general");
  sub_21C8C(v570, "top_mic_general");
  memset(&v570[3], 0, 24);
  int v571 = 1684434036;
  sub_1CDF04(v558, "aufx-firf-appl");
  int v190 = 1;
  sub_387940((uint64_t)v559, &v190);
  v191[0] = v558;
  v191[1] = 2;
  CFDictionaryRef v39 = sub_4D3D8((uint64_t)v191);
  v560[0] = 1718186601;
  CFDictionaryRef v561 = v39;
  CFTypeRef v192 = 0;
  float v40 = operator new(4uLL);
  _DWORD *v40 = 1;
  v187[2] = v40 + 1;
  v187[0] = v40;
  v187[1] = v40 + 1;
  sub_1CE360((uint64_t)&v556, (int **)v187);
  v188[0] = &v556;
  v188[1] = 1;
  CFDictionaryRef v41 = sub_4D3D8((uint64_t)v188);
  int v562 = 1667789676;
  CFDictionaryRef v563 = v41;
  CFTypeRef v189 = 0;
  v573 = 0;
  v574 = 0;
  v572 = 0;
  *(void *)&long long v528 = &v572;
  BYTE8(v528) = 0;
  std::string::size_type v42 = (char *)operator new(0x20uLL);
  uint64_t v43 = 0;
  v572 = v42;
  v573 = v42;
  v574 = v42 + 32;
  do
  {
    sub_6D16C((uint64_t)&v42[v43 * 4], v560[v43], *(CFTypeRef *)&v560[v43 + 2]);
    v43 += 4;
  }
  while (v43 != 8);
  v573 = v42 + 32;
  int v185 = 1886216809;
  sub_1CDF58((uint64_t)&v554, "PortType", &v185);
  v186[0] = &v554;
  v186[1] = 1;
  CFDictionaryRef v575 = sub_4D3D8((uint64_t)v186);
  v576 = 0;
  v578 = 0;
  v577 = 0;
  int v44 = operator new(4uLL);
  v576 = v44;
  _DWORD *v44 = 1987013749;
  v578 = v44 + 1;
  v577 = v44 + 1;
  v580[0] = 0;
  v580[1] = 0;
  v579 = v580;
  v583 = 0;
  v581 = 0;
  v582 = 0;
  std::string::size_type v45 = operator new(8uLL);
  v581 = v45;
  void *v45 = 0x100000002;
  v583 = v45 + 1;
  v582 = v45 + 1;
  char v584 = 0;
  char v585 = 0;
  memset(v586, 0, sizeof(v586));
  uint64_t v587 = 0;
  long long v528 = xmmword_5968C4;
  uint64_t v529 = 2;
  sub_6D1AC((uint64_t)v586, (int *)&v528, 3);
  char v588 = 0;
  uint64_t v589 = 0;
  sub_6D224(v856, (long long *)v193, &v564);
  sub_21C8C(v183, "beamformed_mic_general");
  sub_21C8C(&v528, "beam_mic_general");
  uint64_t v531 = 0;
  uint64_t v530 = 0;
  uint64_t v532 = 0;
  sub_21C8C(v533, "beam_mic_general");
  sub_21C8C(v534, "beam_mic_general");
  memset(&v534[3], 0, 24);
  int v535 = 1684434036;
  int v180 = 1;
  sub_38D800((uint64_t)&v522, &v180);
  v181[0] = &v522;
  v181[1] = 1;
  CFDictionaryRef v46 = sub_4D3D8((uint64_t)v181);
  v524[0] = 1651074168;
  CFDictionaryRef v525 = v46;
  CFTypeRef v182 = 0;
  sub_15B134((uint64_t)&v520, "DataSourceOrder", &v263);
  v178[0] = &v520;
  v178[1] = 1;
  CFDictionaryRef v47 = sub_4D3D8((uint64_t)v178);
  int v526 = 1920365171;
  CFDictionaryRef v527 = v47;
  CFTypeRef v179 = 0;
  v537 = 0;
  v538 = 0;
  v536 = 0;
  *(void *)&long long v492 = &v536;
  BYTE8(v492) = 0;
  std::string v48 = (char *)operator new(0x20uLL);
  uint64_t v49 = 0;
  v536 = v48;
  v537 = v48;
  v538 = v48 + 32;
  do
  {
    sub_6D16C((uint64_t)&v48[v49 * 4], v524[v49], *(CFTypeRef *)&v524[v49 + 2]);
    v49 += 4;
  }
  while (v49 != 8);
  v537 = v48 + 32;
  int v176 = 1886216809;
  sub_1CDF58((uint64_t)&v518, "PortType", &v176);
  v177[0] = &v518;
  v177[1] = 1;
  CFDictionaryRef v539 = sub_4D3D8((uint64_t)v177);
  v540 = 0;
  v542 = 0;
  v541 = 0;
  std::string v50 = operator new(4uLL);
  v540 = v50;
  *std::string v50 = 1987013749;
  v542 = v50 + 1;
  v541 = v50 + 1;
  v544[0] = 0;
  v544[1] = 0;
  v543 = v544;
  v547 = 0;
  v545 = 0;
  v546 = 0;
  __int16 v51 = operator new(8uLL);
  v545 = v51;
  void *v51 = 0x100000002;
  v547 = v51 + 1;
  v546 = v51 + 1;
  char v548 = 0;
  char v549 = 0;
  memset(v550, 0, sizeof(v550));
  uint64_t v551 = 0;
  long long v492 = xmmword_5968C4;
  uint64_t v493 = 2;
  sub_6D1AC((uint64_t)v550, (int *)&v492, 3);
  char v552 = 0;
  uint64_t v553 = 0;
  sub_6D224(v857, (long long *)v183, &v528);
  sub_21C8C(v174, "beamformed_mic_video_recording");
  sub_21C8C(&v492, "beam_mic_general");
  uint64_t v495 = 0;
  uint64_t v494 = 0;
  uint64_t v496 = 0;
  sub_21C8C(v497, "beam_mic_general");
  sub_21C8C(v498, "beam_mic_general");
  memset(&v498[3], 0, 24);
  int v499 = 1684434036;
  int v171 = 1;
  sub_38D800((uint64_t)&v486, &v171);
  v172[0] = &v486;
  v172[1] = 1;
  CFDictionaryRef v52 = sub_4D3D8((uint64_t)v172);
  v488[0] = 1651074168;
  CFDictionaryRef v489 = v52;
  CFTypeRef v173 = 0;
  sub_15B134((uint64_t)&v484, "DataSourceOrder", &v263);
  v169[0] = &v484;
  v169[1] = 1;
  CFDictionaryRef v53 = sub_4D3D8((uint64_t)v169);
  int v490 = 1920365171;
  CFDictionaryRef v491 = v53;
  CFTypeRef v170 = 0;
  v501 = 0;
  v502 = 0;
  v500 = 0;
  *(void *)&long long v456 = &v500;
  BYTE8(v456) = 0;
  uint64_t v54 = (char *)operator new(0x20uLL);
  uint64_t v55 = 0;
  v500 = v54;
  v501 = v54;
  v502 = v54 + 32;
  do
  {
    sub_6D16C((uint64_t)&v54[v55 * 4], v488[v55], *(CFTypeRef *)&v488[v55 + 2]);
    v55 += 4;
  }
  while (v55 != 8);
  v501 = v54 + 32;
  int v167 = 1886216809;
  sub_1CDF58((uint64_t)&v482, "PortType", &v167);
  v168[0] = &v482;
  v168[1] = 1;
  CFDictionaryRef v503 = sub_4D3D8((uint64_t)v168);
  v504 = 0;
  v506 = 0;
  v505 = 0;
  BOOL v56 = operator new(4uLL);
  v504 = v56;
  *BOOL v56 = 1987013749;
  v506 = v56 + 1;
  v505 = v56 + 1;
  v508[0] = 0;
  v508[1] = 0;
  v507 = v508;
  v511 = 0;
  v509 = 0;
  v510 = 0;
  unint64_t v57 = operator new(8uLL);
  v509 = v57;
  void *v57 = 0x100000002;
  v511 = v57 + 1;
  v510 = v57 + 1;
  char v512 = 0;
  char v513 = 0;
  memset(v514, 0, sizeof(v514));
  uint64_t v515 = 0;
  long long v456 = xmmword_5968C4;
  uint64_t v457 = 2;
  sub_6D1AC((uint64_t)v514, (int *)&v456, 3);
  char v516 = 0;
  uint64_t v517 = 0;
  sub_6D224(v858, (long long *)v174, &v492);
  sub_21C8C(v165, "omni_mic_measurement");
  sub_21C8C(&v456, "top_mic_measurement");
  uint64_t v459 = 0;
  uint64_t v458 = 0;
  uint64_t v460 = 0;
  sub_21C8C(v461, "top_mic_measurement");
  sub_21C8C(v462, "top_mic_measurement");
  memset(&v462[3], 0, 24);
  int v463 = 1684434036;
  sub_1CDF04(v450, "aufx-firf-appl");
  int v162 = 1;
  sub_387940((uint64_t)v451, &v162);
  v163[0] = v450;
  v163[1] = 2;
  CFDictionaryRef v58 = sub_4D3D8((uint64_t)v163);
  v452[0] = 1718186601;
  CFDictionaryRef v453 = v58;
  CFTypeRef v164 = 0;
  unint64_t v59 = operator new(4uLL);
  _DWORD *v59 = 1;
  v159[1] = v59 + 1;
  v159[2] = v59 + 1;
  v159[0] = v59;
  sub_1CE360((uint64_t)&v448, (int **)v159);
  v160[0] = &v448;
  v160[1] = 1;
  CFDictionaryRef v60 = sub_4D3D8((uint64_t)v160);
  int v454 = 1667789676;
  CFDictionaryRef v455 = v60;
  CFTypeRef v161 = 0;
  v465 = 0;
  v466 = 0;
  v464 = 0;
  *(void *)&long long v420 = &v464;
  BYTE8(v42sub_360D08(&a9, 0) = 0;
  std::string::size_type v61 = (char *)operator new(0x20uLL);
  uint64_t v62 = 0;
  v464 = v61;
  v465 = v61;
  v466 = v61 + 32;
  do
  {
    sub_6D16C((uint64_t)&v61[v62 * 4], v452[v62], *(CFTypeRef *)&v452[v62 + 2]);
    v62 += 4;
  }
  while (v62 != 8);
  v465 = v61 + 32;
  int v157 = 1886216809;
  sub_1CDF58((uint64_t)&v446, "PortType", &v157);
  v158[0] = &v446;
  v158[1] = 1;
  CFDictionaryRef v467 = sub_4D3D8((uint64_t)v158);
  v468 = 0;
  v470 = 0;
  v469 = 0;
  CFDictionaryRef v63 = operator new(4uLL);
  v468 = v63;
  *CFDictionaryRef v63 = 1987013749;
  v470 = v63 + 1;
  v469 = v63 + 1;
  v472[0] = 0;
  v472[1] = 0;
  v471 = v472;
  v475 = 0;
  v473 = 0;
  v474 = 0;
  CFDictionaryRef v64 = operator new(8uLL);
  v473 = v64;
  *CFDictionaryRef v64 = 0x100000002;
  v475 = v64 + 1;
  v474 = v64 + 1;
  char v476 = 0;
  char v477 = 0;
  memset(v478, 0, sizeof(v478));
  uint64_t v479 = 0;
  long long v420 = xmmword_5968C4;
  uint64_t v421 = 2;
  sub_6D1AC((uint64_t)v478, (int *)&v420, 3);
  char v480 = 0;
  uint64_t v481 = 0;
  sub_6D224(v859, (long long *)v165, &v456);
  sub_21C8C(v155, "beamformed_mic_measurement");
  sub_21C8C(&v420, "beam_mic_measurement");
  uint64_t v423 = 0;
  uint64_t v422 = 0;
  uint64_t v424 = 0;
  sub_21C8C(v425, "beam_mic_measurement");
  sub_21C8C(v426, "beam_mic_measurement");
  memset(&v426[3], 0, 24);
  int v427 = 1684434036;
  int v152 = 1;
  sub_38D800((uint64_t)&v414, &v152);
  v153[0] = &v414;
  v153[1] = 1;
  CFDictionaryRef v65 = sub_4D3D8((uint64_t)v153);
  v416[0] = 1651074168;
  CFDictionaryRef v417 = v65;
  CFTypeRef v154 = 0;
  sub_15B134((uint64_t)&v412, "DataSourceOrder", &v263);
  v150[0] = &v412;
  v150[1] = 1;
  CFDictionaryRef v66 = sub_4D3D8((uint64_t)v150);
  int v418 = 1920365171;
  CFDictionaryRef v419 = v66;
  CFTypeRef v151 = 0;
  v429 = 0;
  v430 = 0;
  v428 = 0;
  *(void *)&long long v384 = &v428;
  BYTE8(v384) = 0;
  CFArrayRef v67 = (char *)operator new(0x20uLL);
  uint64_t v68 = 0;
  v428 = v67;
  v429 = v67;
  v430 = v67 + 32;
  do
  {
    sub_6D16C((uint64_t)&v67[v68 * 4], v416[v68], *(CFTypeRef *)&v416[v68 + 2]);
    v68 += 4;
  }
  while (v68 != 8);
  v429 = v67 + 32;
  int v148 = 1886216809;
  sub_1CDF58((uint64_t)&v410, "PortType", &v148);
  v149[0] = &v410;
  v149[1] = 1;
  CFDictionaryRef v431 = sub_4D3D8((uint64_t)v149);
  v432 = 0;
  v434 = 0;
  v433 = 0;
  unsigned int v69 = operator new(4uLL);
  v432 = v69;
  *unsigned int v69 = 1987013749;
  v434 = v69 + 1;
  v433 = v69 + 1;
  v436[0] = 0;
  v436[1] = 0;
  v435 = v436;
  v439 = 0;
  v437 = 0;
  v438 = 0;
  CFDictionaryRef v70 = operator new(8uLL);
  v437 = v70;
  void *v70 = 0x100000002;
  v439 = v70 + 1;
  v438 = v70 + 1;
  char v440 = 0;
  char v441 = 0;
  memset(v442, 0, sizeof(v442));
  uint64_t v443 = 0;
  long long v384 = xmmword_5968C4;
  uint64_t v385 = 2;
  sub_6D1AC((uint64_t)v442, (int *)&v384, 3);
  char v444 = 0;
  uint64_t v445 = 0;
  sub_6D224(v860, (long long *)v155, &v420);
  sub_21C8C(v146, "beamformed_mic_voice_messages");
  sub_21C8C(&v384, "beam_mic_voice_messages");
  uint64_t v387 = 0;
  uint64_t v386 = 0;
  uint64_t v388 = 0;
  sub_21C8C(v389, "beam_mic_voice_messages");
  sub_21C8C(v390, "beam_mic_voice_messages");
  memset(&v390[3], 0, 24);
  int v391 = 1684434036;
  int v143 = 0;
  sub_38D800((uint64_t)&v378, &v143);
  v144[0] = &v378;
  v144[1] = 1;
  CFDictionaryRef v71 = sub_4D3D8((uint64_t)v144);
  v380[0] = 1651074168;
  CFDictionaryRef v381 = v71;
  CFTypeRef v145 = 0;
  sub_15B134((uint64_t)&v376, "DataSourceOrder", &v263);
  v141[0] = &v376;
  v141[1] = 1;
  CFDictionaryRef v72 = sub_4D3D8((uint64_t)v141);
  int v382 = 1920365171;
  CFDictionaryRef v383 = v72;
  CFTypeRef v142 = 0;
  v393 = 0;
  v394 = 0;
  v392 = 0;
  *(void *)&long long v348 = &v392;
  BYTE8(v348) = 0;
  uint64_t v73 = (char *)operator new(0x20uLL);
  uint64_t v74 = 0;
  v392 = v73;
  v393 = v73;
  v394 = v73 + 32;
  do
  {
    sub_6D16C((uint64_t)&v73[v74 * 4], v380[v74], *(CFTypeRef *)&v380[v74 + 2]);
    v74 += 4;
  }
  while (v74 != 8);
  v393 = v73 + 32;
  int v139 = 1886216809;
  sub_1CDF58((uint64_t)&v374, "PortType", &v139);
  v140[0] = &v374;
  v140[1] = 1;
  CFDictionaryRef v395 = sub_4D3D8((uint64_t)v140);
  v396 = 0;
  v398 = 0;
  v397 = 0;
  CFBooleanRef v75 = operator new(4uLL);
  v396 = v75;
  _DWORD *v75 = 1987013749;
  v398 = v75 + 1;
  v397 = v75 + 1;
  v400[0] = 0;
  v400[1] = 0;
  v399 = v400;
  v403 = 0;
  v401 = 0;
  v402 = 0;
  CFNumberRef v76 = operator new(8uLL);
  v401 = v76;
  *CFNumberRef v76 = 0x100000002;
  v403 = v76 + 1;
  v402 = v76 + 1;
  char v404 = 0;
  char v405 = 0;
  memset(v406, 0, sizeof(v406));
  uint64_t v407 = 0;
  long long v348 = xmmword_5968C4;
  uint64_t v349 = 2;
  sub_6D1AC((uint64_t)v406, (int *)&v348, 3);
  char v408 = 0;
  uint64_t v409 = 0;
  sub_6D224(v861, (long long *)v146, &v384);
  sub_21C8C(v137, "beamformed_mic_voice_recognition");
  sub_21C8C(&v348, "beam_mic_voice_recognition");
  uint64_t v351 = 0;
  uint64_t v350 = 0;
  uint64_t v352 = 0;
  sub_21C8C(v353, "beam_mic_voice_recognition");
  sub_21C8C(v354, "beam_mic_voice_recognition");
  memset(&v354[3], 0, 24);
  int v355 = 1684434036;
  int v134 = 0;
  sub_38D800((uint64_t)&v342, &v134);
  v135[0] = &v342;
  v135[1] = 1;
  CFDictionaryRef v77 = sub_4D3D8((uint64_t)v135);
  v344[0] = 1651074168;
  CFDictionaryRef v345 = v77;
  CFTypeRef v136 = 0;
  sub_15B134((uint64_t)&v340, "DataSourceOrder", &v263);
  v132[0] = &v340;
  v132[1] = 1;
  CFDictionaryRef v78 = sub_4D3D8((uint64_t)v132);
  int v346 = 1920365171;
  CFDictionaryRef v347 = v78;
  CFTypeRef v133 = 0;
  v357 = 0;
  v358 = 0;
  v356 = 0;
  *(void *)&long long v315 = &v356;
  BYTE8(v315) = 0;
  CFStringRef v79 = (char *)operator new(0x20uLL);
  uint64_t v80 = 0;
  v356 = v79;
  v357 = v79;
  v358 = v79 + 32;
  do
  {
    sub_6D16C((uint64_t)&v79[v80 * 4], v344[v80], *(CFTypeRef *)&v344[v80 + 2]);
    v80 += 4;
  }
  while (v80 != 8);
  v357 = v79 + 32;
  int v130 = 1886216809;
  sub_1CDF58((uint64_t)&v338, "PortType", &v130);
  v131[0] = &v338;
  v131[1] = 1;
  CFDictionaryRef v359 = sub_4D3D8((uint64_t)v131);
  v360 = 0;
  v362 = 0;
  v361 = 0;
  unsigned int v81 = operator new(4uLL);
  v360 = v81;
  _DWORD *v81 = 1987013749;
  v362 = v81 + 1;
  v361 = v81 + 1;
  v364[0] = 0;
  v364[1] = 0;
  v363 = v364;
  v367 = 0;
  v365 = 0;
  v366 = 0;
  long long v82 = operator new(8uLL);
  v365 = v82;
  *long long v82 = 0x100000002;
  v367 = v82 + 1;
  v366 = v82 + 1;
  char v368 = 0;
  char v369 = 0;
  memset(v370, 0, sizeof(v370));
  uint64_t v371 = 0;
  long long v315 = xmmword_5968C4;
  uint64_t v316 = 2;
  sub_6D1AC((uint64_t)v370, (int *)&v315, 3);
  char v372 = 0;
  uint64_t v373 = 0;
  sub_6D224(v862, (long long *)v137, &v348);
  sub_21C8C(v128, "siri_barge_in");
  sub_21C8C(&v315, "mic_voice_recognition");
  uint64_t v318 = 0;
  uint64_t v317 = 0;
  uint64_t v319 = 0;
  sub_21C8C(v320, "mic_voice_recognition");
  sub_21C8C(v321, "mic_voice_recognition");
  memset(&v321[3], 0, 24);
  int v322 = 1684434036;
  v328[0] = 0;
  v328[1] = 0;
  long long v323 = 0u;
  long long v324 = 0u;
  long long v325 = 0u;
  uint64_t v326 = 0;
  v327 = v328;
  v331 = 0;
  v329 = 0;
  v330 = 0;
  CFStringRef v83 = operator new(0x10uLL);
  v329 = v83;
  _OWORD *v83 = xmmword_4E78D0;
  v331 = v83 + 1;
  v330 = v83 + 1;
  char v332 = 0;
  char v333 = 0;
  memset(v334, 0, sizeof(v334));
  uint64_t v335 = 0;
  long long v291 = xmmword_5968C4;
  uint64_t v292 = 2;
  sub_6D1AC((uint64_t)v334, (int *)&v291, 3);
  char v336 = 0;
  uint64_t v337 = 0;
  sub_6D224(v863, (long long *)v128, &v315);
  sub_21C8C(v126, "multicam_recording");
  sub_21C8C(&v291, "multicam");
  uint64_t v294 = 0;
  uint64_t v293 = 0;
  uint64_t v295 = 0;
  sub_21C8C(v296, "multicam");
  sub_21C8C(v297, "multicam");
  memset(&v297[3], 0, 24);
  int v298 = 1684434036;
  unsigned int v84 = operator new(0xCuLL);
  v123[1] = v84 + 3;
  v123[2] = v84 + 3;
  *(void *)unsigned int v84 = 0x100000001;
  void v84[2] = 2;
  v123[0] = v84;
  sub_1CE360((uint64_t)&v287, (int **)v123);
  v124[0] = &v287;
  v124[1] = 1;
  CFDictionaryRef v85 = sub_4D3D8((uint64_t)v124);
  int v289 = 1667789676;
  CFTypeRef cf = v85;
  CFTypeRef v125 = 0;
  v300 = 0;
  uint64_t v301 = 0;
  v299 = 0;
  *(void *)&long long v264 = &v299;
  BYTE8(v264) = 0;
  v299 = (char *)operator new(0x10uLL);
  v300 = v299;
  unint64_t v86 = v299 + 16;
  uint64_t v301 = v299 + 16;
  sub_6D16C((uint64_t)v299, 1667789676, v85);
  v305[0] = 0;
  v305[1] = 0;
  long long v302 = 0u;
  long long v303 = 0u;
  v300 = v86;
  char v304 = v305;
  __int16 v308 = 0;
  __int16 v306 = 0;
  int v307 = 0;
  CFNumberRef v87 = operator new(8uLL);
  __int16 v306 = v87;
  void *v87 = 0x300000002;
  __int16 v308 = v87 + 1;
  int v307 = v87 + 1;
  char v309 = 0;
  char v310 = 0;
  memset(v311, 0, sizeof(v311));
  uint64_t v312 = 0;
  long long v264 = xmmword_5968C4;
  uint64_t v265 = 2;
  sub_6D1AC((uint64_t)v311, (int *)&v264, 3);
  char v313 = 0;
  uint64_t v314 = 0;
  sub_6D224(v864, (long long *)v126, &v291);
  sub_21C8C(v121, "mic_peripheral_allmics");
  sub_21C8C(&v264, "mic_peripheral_sender_all_mics");
  uint64_t v267 = 0;
  uint64_t v266 = 0;
  uint64_t v268 = 0;
  sub_21C8C(v269, "mic_peripheral_sender_all_mics");
  sub_21C8C(v270, "mic_peripheral_sender_all_mics");
  memset(&v270[3], 0, 24);
  int v271 = 1684434036;
  v277[0] = 0;
  v277[1] = 0;
  long long v272 = 0u;
  long long v273 = 0u;
  long long v274 = 0u;
  uint64_t v275 = 0;
  v276 = v277;
  v280 = 0;
  v278 = 0;
  v279 = 0;
  CFNumberRef v88 = operator new(8uLL);
  v278 = v88;
  *CFNumberRef v88 = 0x400000002;
  v280 = v88 + 1;
  v279 = v88 + 1;
  char v281 = 0;
  char v282 = 0;
  memset(v283, 0, sizeof(v283));
  uint64_t v284 = 0;
  long long v866 = xmmword_5968C4;
  uint64_t v867 = 2;
  sub_6D1AC((uint64_t)v283, (int *)&v866, 3);
  char v285 = 0;
  uint64_t v286 = 0;
  sub_6D224(v865, (long long *)v121, &v264);
  sub_6D2A0((uint64_t)v262, (unsigned __int8 *)v841, 20);
  sub_6D31C(v2 + 512, (uint64_t *)v262);
  sub_6C7E4((void *)v262[2]);
  CFNumberRef v89 = v262[0];
  v262[0] = 0;
  if (v89) {
    operator delete(v89);
  }
  for (uint64_t i = 0; i != -6560; i -= 328)
  {
    sub_6C878((uint64_t)&v865[i + 24]);
    if ((char)v865[i + 23] < 0) {
      operator delete(*(void **)&v865[i]);
    }
  }
  sub_6C878((uint64_t)&v264);
  if (v122 < 0) {
    operator delete(v121[0]);
  }
  sub_6C878((uint64_t)&v291);
  if (cf) {
    CFRelease(cf);
  }
  if (v125) {
    CFRelease(v125);
  }
  if (v288) {
    CFRelease(v288);
  }
  if (v287) {
    CFRelease(v287);
  }
  if (v123[0]) {
    operator delete(v123[0]);
  }
  if (v127 < 0) {
    operator delete(v126[0]);
  }
  sub_6C878((uint64_t)&v315);
  if (v129 < 0) {
    operator delete(v128[0]);
  }
  sub_6C878((uint64_t)&v348);
  if (v339) {
    CFRelease(v339);
  }
  if (v338) {
    CFRelease(v338);
  }
  for (uint64_t j = 6; j != -2; j -= 4)
  {
    CFNumberRef v92 = *(const void **)&v344[j];
    if (v92) {
      CFRelease(v92);
    }
  }
  if (v133) {
    CFRelease(v133);
  }
  if (v341) {
    CFRelease(v341);
  }
  if (v340) {
    CFRelease(v340);
  }
  if (v136) {
    CFRelease(v136);
  }
  if (v343) {
    CFRelease(v343);
  }
  if (v342) {
    CFRelease(v342);
  }
  if (v138 < 0) {
    operator delete(v137[0]);
  }
  sub_6C878((uint64_t)&v384);
  if (v375) {
    CFRelease(v375);
  }
  if (v374) {
    CFRelease(v374);
  }
  for (uint64_t k = 6; k != -2; k -= 4)
  {
    CFNumberRef v94 = *(const void **)&v380[k];
    if (v94) {
      CFRelease(v94);
    }
  }
  if (v142) {
    CFRelease(v142);
  }
  if (v377) {
    CFRelease(v377);
  }
  if (v376) {
    CFRelease(v376);
  }
  if (v145) {
    CFRelease(v145);
  }
  if (v379) {
    CFRelease(v379);
  }
  if (v378) {
    CFRelease(v378);
  }
  if (v147 < 0) {
    operator delete(v146[0]);
  }
  sub_6C878((uint64_t)&v420);
  if (v411) {
    CFRelease(v411);
  }
  if (v410) {
    CFRelease(v410);
  }
  for (uint64_t m = 6; m != -2; m -= 4)
  {
    CFNumberRef v96 = *(const void **)&v416[m];
    if (v96) {
      CFRelease(v96);
    }
  }
  if (v151) {
    CFRelease(v151);
  }
  if (v413) {
    CFRelease(v413);
  }
  if (v412) {
    CFRelease(v412);
  }
  if (v154) {
    CFRelease(v154);
  }
  if (v415) {
    CFRelease(v415);
  }
  if (v414) {
    CFRelease(v414);
  }
  if (v156 < 0) {
    operator delete(v155[0]);
  }
  sub_6C878((uint64_t)&v456);
  if (v447) {
    CFRelease(v447);
  }
  if (v446) {
    CFRelease(v446);
  }
  for (uint64_t n = 6; n != -2; n -= 4)
  {
    uint64_t v98 = *(const void **)&v452[n];
    if (v98) {
      CFRelease(v98);
    }
  }
  if (v161) {
    CFRelease(v161);
  }
  if (v449) {
    CFRelease(v449);
  }
  if (v448) {
    CFRelease(v448);
  }
  if (v159[0]) {
    operator delete(v159[0]);
  }
  if (v164) {
    CFRelease(v164);
  }
  for (iuint64_t i = 0; ii != -4; ii -= 2)
  {
    uint64_t v100 = *(const void **)&v451[ii * 8 + 8];
    if (v100) {
      CFRelease(v100);
    }
    CFStringRef v101 = v450[ii + 2];
    if (v101) {
      CFRelease(v101);
    }
  }
  if (v166 < 0) {
    operator delete(v165[0]);
  }
  sub_6C878((uint64_t)&v492);
  if (v483) {
    CFRelease(v483);
  }
  if (v482) {
    CFRelease(v482);
  }
  for (juint64_t j = 6; jj != -2; jj -= 4)
  {
    uint64_t v103 = *(const void **)&v488[jj];
    if (v103) {
      CFRelease(v103);
    }
  }
  if (v170) {
    CFRelease(v170);
  }
  if (v485) {
    CFRelease(v485);
  }
  if (v484) {
    CFRelease(v484);
  }
  if (v173) {
    CFRelease(v173);
  }
  if (v487) {
    CFRelease(v487);
  }
  if (v486) {
    CFRelease(v486);
  }
  if (v175 < 0) {
    operator delete(v174[0]);
  }
  sub_6C878((uint64_t)&v528);
  if (v519) {
    CFRelease(v519);
  }
  if (v518) {
    CFRelease(v518);
  }
  for (kuint64_t k = 6; kk != -2; kk -= 4)
  {
    uint64_t v105 = *(const void **)&v524[kk];
    if (v105) {
      CFRelease(v105);
    }
  }
  if (v179) {
    CFRelease(v179);
  }
  if (v521) {
    CFRelease(v521);
  }
  if (v520) {
    CFRelease(v520);
  }
  if (v182) {
    CFRelease(v182);
  }
  if (v523) {
    CFRelease(v523);
  }
  if (v522) {
    CFRelease(v522);
  }
  if (v184 < 0) {
    operator delete(v183[0]);
  }
  sub_6C878((uint64_t)&v564);
  if (v555) {
    CFRelease(v555);
  }
  if (v554) {
    CFRelease(v554);
  }
  for (muint64_t m = 6; mm != -2; mm -= 4)
  {
    __int16 v107 = *(const void **)&v560[mm];
    if (v107) {
      CFRelease(v107);
    }
  }
  if (v189) {
    CFRelease(v189);
  }
  if (v557) {
    CFRelease(v557);
  }
  if (v556) {
    CFRelease(v556);
  }
  if (v187[0]) {
    operator delete(v187[0]);
  }
  if (v192) {
    CFRelease(v192);
  }
  for (nuint64_t n = 0; nn != -4; nn -= 2)
  {
    BOOL v109 = *(const void **)&v559[nn * 8 + 8];
    if (v109) {
      CFRelease(v109);
    }
    CFStringRef v110 = v558[nn + 2];
    if (v110) {
      CFRelease(v110);
    }
  }
  if (v194 < 0) {
    operator delete(v193[0]);
  }
  sub_6C878((uint64_t)&v600);
  if (v591) {
    CFRelease(v591);
  }
  if (v590) {
    CFRelease(v590);
  }
  for (uint64_t i1 = 6; i1 != -2; i1 -= 4)
  {
    __int16 v112 = *(const void **)&v596[i1];
    if (v112) {
      CFRelease(v112);
    }
  }
  if (v199) {
    CFRelease(v199);
  }
  if (v593) {
    CFRelease(v593);
  }
  if (v592) {
    CFRelease(v592);
  }
  if (v197[0]) {
    operator delete(v197[0]);
  }
  if (v202) {
    CFRelease(v202);
  }
  for (uint64_t i2 = 0; i2 != -4; i2 -= 2)
  {
    std::condition_variable v114 = *(const void **)&v595[i2 * 8 + 8];
    if (v114) {
      CFRelease(v114);
    }
    CFStringRef v115 = v594[i2 + 2];
    if (v115) {
      CFRelease(v115);
    }
  }
  if (v204 < 0) {
    operator delete(v203[0]);
  }
  sub_6C878((uint64_t)&v636);
  if (v627) {
    CFRelease(v627);
  }
  if (v626) {
    CFRelease(v626);
  }
  for (uint64_t i3 = 6; i3 != -2; i3 -= 4)
  {
    char v117 = *(const void **)&v632[i3];
    if (v117) {
      CFRelease(v117);
    }
  }
  if (v209) {
    CFRelease(v209);
  }
  if (v629) {
    CFRelease(v629);
  }
  if (v628) {
    CFRelease(v628);
  }
  if (v207[0]) {
    operator delete(v207[0]);
  }
  if (v212) {
    CFRelease(v212);
  }
  for (uint64_t i4 = 0; i4 != -4; i4 -= 2)
  {
    char v119 = *(const void **)&v631[i4 * 8 + 8];
    if (v119) {
      CFRelease(v119);
    }
    CFStringRef v120 = v630[i4 + 2];
    if (v120) {
      CFRelease(v120);
    }
  }
  if (v214 < 0) {
    operator delete(v213[0]);
  }
  sub_6C878((uint64_t)&v662);
  if (v216 < 0) {
    operator delete(v215[0]);
  }
  sub_6C878((uint64_t)&v688);
  if (v687) {
    CFRelease(v687);
  }
  if (v217) {
    CFRelease(v217);
  }
  if (v219 < 0) {
    operator delete(v218[0]);
  }
  sub_6C878((uint64_t)&v714);
  if (v713) {
    CFRelease(v713);
  }
  if (v220) {
    CFRelease(v220);
  }
  if (v222 < 0) {
    operator delete(v221[0]);
  }
  sub_6C878((uint64_t)&v740);
  if (v739) {
    CFRelease(v739);
  }
  if (v223) {
    CFRelease(v223);
  }
  if (v225 < 0) {
    operator delete(v224[0]);
  }
  sub_6C878((uint64_t)&v765);
  if (v764) {
    CFRelease(v764);
  }
  if (v226) {
    CFRelease(v226);
  }
  if (v228 < 0) {
    operator delete(v227[0]);
  }
  sub_6C878((uint64_t)&v790);
  if (v789) {
    CFRelease(v789);
  }
  if (v229) {
    CFRelease(v229);
  }
  if (v231 < 0) {
    operator delete(v230[0]);
  }
  sub_6C878((uint64_t)v815);
  if (v814) {
    CFRelease(v814);
  }
  if (v232) {
    CFRelease(v232);
  }
  if (v234 < 0) {
    operator delete(v233[0]);
  }
  sub_6C878((uint64_t)v236);
  if (v840) {
    CFRelease(v840);
  }
  if (v235) {
    CFRelease(v235);
  }
  if (v261 < 0) {
    operator delete(v260[0]);
  }
}

void sub_38AE70(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_38D800(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "BeamIndex");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_38D8A0(_Unwind_Exception *exception_object)
{
  CFTypeID v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_38D8E4()
{
  sub_387B00((uint64_t)v0);
  sub_208140(&v10, 75);
  if (v9)
  {
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)__p);
    }
    long long __p = v10;
    uint64_t v8 = v11;
  }
  else
  {
    long long __p = v10;
    uint64_t v8 = v11;
    char v9 = 1;
  }
  sub_402E04(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (v3)
  {
    CFNumberRef v4 = v3;
    operator delete(v3);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_38D9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_38D9C8(uint64_t a1)
{
  sub_38DA00(a1);

  operator delete();
}

uint64_t sub_38DA00(uint64_t a1)
{
  *(void *)a1 = off_636A08;
  sub_38DA74(*(unsigned int *)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  sub_7F264(*(void **)(a1 + 72));
  sub_7F264(*(void **)(a1 + 40));
  sub_7F264(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_38DA74(uint64_t result)
{
  if (!result)
  {
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        unsigned int v5 = "SubPortPolicy.cpp";
        __int16 v6 = 1024;
        int v7 = 278;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v4, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }
  return result;
}

void sub_38DB70(_Unwind_Exception *exception_object)
{
}

void sub_38DB90(uint64_t *a1, unsigned int a2, __int32 a3)
{
  __int32 v16 = a3;
  uint64_t v5 = a1[1];
  if (!v5) {
    goto LABEL_12;
  }
  __int16 v6 = a1 + 1;
  do
  {
    unsigned int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      char v9 = (uint64_t *)v5;
    }
    else {
      char v9 = (uint64_t *)(v5 + 8);
    }
    if (v8) {
      __int16 v6 = (uint64_t *)v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 1 && *((_DWORD *)v6 + 8) <= a2)
  {
    sub_72D08((uint64_t)(v6 + 5), &v16);
  }
  else
  {
LABEL_12:
    __int32 v10 = a3;
    sub_72300(v11, &v10, 1);
    unsigned int v13 = a2;
    *(_OWORD *)long long __p = *(_OWORD *)v11;
    uint64_t v15 = v12;
    v11[0] = 0;
    v11[1] = 0;
    uint64_t v12 = 0;
    sub_38DC94(a1, a2, (uint64_t)&v13);
    if (__p[0]) {
      operator delete(__p[0]);
    }
    if (v11[0])
    {
      v11[1] = v11[0];
      operator delete(v11[0]);
    }
  }
}

void sub_38DC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_38DC94(uint64_t *result, unsigned int a2, uint64_t a3)
{
  int v4 = (uint64_t **)result;
  __int16 v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        __int16 v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        __int16 v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = (uint64_t **)(result + 1);
LABEL_9:
    char v9 = (char *)operator new(0x40uLL);
    *((_DWORD *)v9 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v9 + 4sub_360D08(&a9, 0) = *(_OWORD *)(a3 + 8);
    *((void *)v9 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    return sub_46CA8(v4, (uint64_t)v7, v6, (uint64_t *)v9);
  }
  return result;
}

void sub_38DD5C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5 = (uint64_t **)(a1 + 32);
  __int16 v6 = *(uint64_t **)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = a1 + 32;
    uint64_t v8 = *(void *)(a1 + 32);
    do
    {
      unsigned int v9 = *(_DWORD *)(v8 + 32);
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        uint64_t v11 = (uint64_t *)v8;
      }
      else {
        uint64_t v11 = (uint64_t *)(v8 + 8);
      }
      if (v10) {
        uint64_t v7 = v8;
      }
      uint64_t v8 = *v11;
    }
    while (*v11);
    if ((uint64_t **)v7 != v5 && *(_DWORD *)(v7 + 32) <= a2)
    {
      uint64_t v19 = *(char **)(v7 + 48);
      unint64_t v18 = *(void *)(v7 + 56);
      if ((unint64_t)v19 >= v18)
      {
        size_t v21 = *(char **)(v7 + 40);
        uint64_t v22 = (v19 - v21) >> 2;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62) {
          sub_60548();
        }
        uint64_t v24 = v18 - (void)v21;
        if (v24 >> 1 > v23) {
          unint64_t v23 = v24 >> 1;
        }
        BOOL v10 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v10) {
          unint64_t v25 = v23;
        }
        if (v25)
        {
          unint64_t v25 = (unint64_t)sub_46BF4(v25);
          size_t v21 = *(char **)(v7 + 40);
          uint64_t v19 = *(char **)(v7 + 48);
        }
        else
        {
          uint64_t v26 = 0;
        }
        int64_t v28 = (_DWORD *)(v25 + 4 * v22);
        unint64_t v29 = v25 + 4 * v26;
        *int64_t v28 = a3;
        uint64_t v20 = v28 + 1;
        while (v19 != v21)
        {
          int v30 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *--int64_t v28 = v30;
        }
        *(void *)(v7 + 4sub_360D08(&a9, 0) = v28;
        *(void *)(v7 + 48) = v20;
        *(void *)(v7 + 56) = v29;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v19 = a3;
        uint64_t v20 = v19 + 4;
      }
      *(void *)(v7 + 48) = v20;
      return;
    }
    *(void *)&long long v13 = operator new(4uLL);
    *(_DWORD *)long long v13 = a3;
    uint64_t v12 = v13 + 4;
    *((void *)&v13 + 1) = v13 + 4;
    long long v31 = v13;
    do
    {
      while (1)
      {
        uint64_t v14 = (uint64_t **)v6;
        unsigned int v15 = *((_DWORD *)v6 + 8);
        if (v15 <= a2) {
          break;
        }
        __int16 v6 = (uint64_t *)*v6;
        if (!*v14)
        {
          CFDictionaryRef v27 = v14;
          goto LABEL_20;
        }
      }
      if (v15 >= a2) {
        goto LABEL_21;
      }
      __int16 v6 = (uint64_t *)v6[1];
    }
    while (v6);
    CFDictionaryRef v27 = v14 + 1;
  }
  else
  {
    *(void *)&long long v16 = operator new(4uLL);
    *(_DWORD *)long long v16 = a3;
    uint64_t v12 = v16 + 4;
    *((void *)&v16 + 1) = v16 + 4;
    long long v31 = v16;
    CFDictionaryRef v27 = v5;
    uint64_t v14 = v5;
  }
LABEL_20:
  char v17 = (char *)operator new(0x40uLL);
  *((_DWORD *)v17 + 8) = a2;
  *(_OWORD *)(v17 + 4sub_360D08(&a9, 0) = v31;
  *((void *)v17 + 7) = v12;
  sub_46CA8(v5 - 1, (uint64_t)v14, v27, (uint64_t *)v17);
  *(void *)&long long v13 = 0;
LABEL_21:
  if ((void)v13)
  {
    operator delete((void *)v13);
  }
}

void sub_38DF70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_38DF84(uint64_t *a1, AudioObjectID inObjectID, uint64_t a3)
{
  AudioObjectID v4 = inObjectID;
  uint64_t v5 = a1;
  a1[1] = 0;
  __int16 v6 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707473736323;
  inAddress.AudioObjectPropertyElement mElement = 0;
  if (AudioObjectHasProperty(inObjectID, &inAddress))
  {
    UInt32 outDataSize = 0;
    uint64_t PropertyDataSize = AudioObjectGetPropertyDataSize(v4, &inAddress, 0, 0, &outDataSize);
    unsigned int v8 = PropertyDataSize;
    if (PropertyDataSize)
    {
      unsigned int v9 = (os_log_t *)sub_32A48(17);
      BOOL v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(&v76, v8);
        uint64_t v11 = v78 >= 0 ? (void **)&v76 : v76;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)long long v82 = "SubPortPolicy.cpp";
        *(_WORD *)&v82[8] = 1024;
        *(_DWORD *)&v82[10] = 252;
        *(_WORD *)&v82[14] = 2080;
        *(void *)&v82[16] = v11;
        *(_WORD *)&v82[24] = 1024;
        *(_DWORD *)&v82[26] = v4;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioObjectGetPropertyDataSize(kAudioDevicePropertyDataSources) returned error %s for device %u.", buf, 0x22u);
        if (SHIBYTE(v78) < 0) {
          operator delete(v76);
        }
      }
    }
    else if (outDataSize)
    {
      __chkstk_darwin(PropertyDataSize);
      unsigned int v69 = (char *)v65 - ((v12 + 15) & 0x1FFFFFFF0);
      OSStatus PropertyData = AudioObjectGetPropertyData(v4, &inAddress, 0, 0, &outDataSize, v69);
      AudioObjectID v67 = v4;
      v65[1] = v65;
      if (PropertyData)
      {
        unsigned int v15 = (os_log_t *)sub_32A48(17);
        long long v16 = *v15;
        if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(&v76, PropertyData);
          char v17 = v78 >= 0 ? (void **)&v76 : v76;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)long long v82 = "SubPortPolicy.cpp";
          *(_WORD *)&v82[8] = 1024;
          *(_DWORD *)&v82[10] = 242;
          *(_WORD *)&v82[14] = 2080;
          *(void *)&v82[16] = v17;
          *(_WORD *)&v82[24] = 1024;
          *(_DWORD *)&v82[26] = v67;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioObjectGetPropertyData(kAudioDevicePropertyDataSources) returned error %s for device %u.", buf, 0x22u);
          if (SHIBYTE(v78) < 0) {
            operator delete(v76);
          }
        }
      }
      else
      {
        uint64_t v20 = v69;
        if (outDataSize >= 4)
        {
          uint64_t v33 = 0;
          unint64_t v71 = (unint64_t)outDataSize >> 2;
          CFDictionaryRef v70 = (void *)(a3 + 32);
          *(void *)&long long v14 = 136315906;
          long long v68 = v14;
          CFDictionaryRef v66 = v6;
          do
          {
            unsigned int v34 = *(_DWORD *)&v20[4 * v33];
            if (v34)
            {
              uint64_t v35 = sub_32A48(17);
              uint64_t v36 = v70;
              if (*(unsigned char *)(v35 + 8))
              {
                float v37 = *(NSObject **)v35;
                if (*(void *)v35)
                {
                  if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
                  {
                    sub_2417C(&v76, v34);
                    float v38 = &v76;
                    if (v78 < 0) {
                      float v38 = (void ***)v76;
                    }
                    *(_DWORD *)AudioObjectPropertyAddress buf = v68;
                    *(void *)long long v82 = "SubPortPolicy.cpp";
                    *(_WORD *)&v82[8] = 1024;
                    *(_DWORD *)&v82[10] = 222;
                    *(_WORD *)&v82[14] = 2080;
                    *(void *)&v82[16] = v38;
                    *(_WORD *)&v82[24] = 1024;
                    *(_DWORD *)&v82[26] = v67;
                    _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found input data source %s on device with ID %u.", buf, 0x22u);
                    if (SHIBYTE(v78) < 0) {
                      operator delete(v76);
                    }
                  }
                }
              }
              uint64_t v39 = *v36;
              if (!*v36) {
                goto LABEL_64;
              }
              float v40 = v36;
              do
              {
                unsigned int v41 = *(_DWORD *)(v39 + 32);
                BOOL v42 = v41 >= v34;
                if (v41 >= v34) {
                  uint64_t v43 = (uint64_t *)v39;
                }
                else {
                  uint64_t v43 = (uint64_t *)(v39 + 8);
                }
                if (v42) {
                  float v40 = (void *)v39;
                }
                uint64_t v39 = *v43;
              }
              while (*v43);
              if (v40 != v36 && v34 >= *((_DWORD *)v40 + 8))
              {
                for (uint64_t i = (unsigned int *)v40[5]; i != (unsigned int *)v40[6]; ++i)
                {
                  unsigned int v48 = *i;
                  unsigned int v79 = v34;
                  if (!v48)
                  {
                    uint64_t v62 = (os_log_t *)sub_32A48(13);
                    CFDictionaryRef v63 = *v62;
                    if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                      *(void *)long long v82 = "SubPortPolicy.cpp";
                      *(_WORD *)&v82[8] = 1024;
                      *(_DWORD *)&v82[10] = 73;
                      _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
                    }
                    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(exception, "Precondition failure.");
                  }
                  uint64_t v49 = sub_32A48(17);
                  if (*(unsigned char *)(v49 + 8))
                  {
                    std::string v50 = *(NSObject **)v49;
                    if (*(void *)v49)
                    {
                      if (os_log_type_enabled(*(os_log_t *)v49, OS_LOG_TYPE_DEBUG))
                      {
                        sub_2417C(&v76, v34);
                        __int16 v51 = v5;
                        int v52 = SHIBYTE(v78);
                        CFDictionaryRef v53 = v76;
                        sub_2417C(v74, v48);
                        uint64_t v54 = &v76;
                        if (v52 < 0) {
                          uint64_t v54 = (void ***)v53;
                        }
                        uint64_t v55 = v74;
                        if (v75 < 0) {
                          uint64_t v55 = (void **)v74[0];
                        }
                        *(_DWORD *)AudioObjectPropertyAddress buf = v68;
                        *(void *)long long v82 = "SubPortPolicy.cpp";
                        *(_WORD *)&v82[8] = 1024;
                        *(_DWORD *)&v82[10] = 76;
                        *(_WORD *)&v82[14] = 2080;
                        *(void *)&v82[16] = v54;
                        *(_WORD *)&v82[24] = 2080;
                        *(void *)&v82[26] = v55;
                        _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding sub-port ID for data source %s for port type %s", buf, 0x26u);
                        if (v75 < 0) {
                          operator delete(v74[0]);
                        }
                        uint64_t v5 = v51;
                        uint64_t v20 = v69;
                        if (SHIBYTE(v78) < 0) {
                          operator delete(v76);
                        }
                        __int16 v6 = v66;
                      }
                    }
                  }
                  uint64_t v56 = *v6;
                  if (!*v6) {
                    goto LABEL_99;
                  }
                  unint64_t v57 = v6;
                  do
                  {
                    unsigned int v58 = *(_DWORD *)(v56 + 32);
                    BOOL v59 = v58 >= v48;
                    if (v58 >= v48) {
                      CFDictionaryRef v60 = (uint64_t *)v56;
                    }
                    else {
                      CFDictionaryRef v60 = (uint64_t *)(v56 + 8);
                    }
                    if (v59) {
                      unint64_t v57 = (void *)v56;
                    }
                    uint64_t v56 = *v60;
                  }
                  while (*v60);
                  if (v57 != v6 && *((_DWORD *)v57 + 8) <= v48)
                  {
                    sub_72D08((uint64_t)(v57 + 5), (__int32 *)&v79);
                  }
                  else
                  {
LABEL_99:
                    CFNumberRef v76 = 0;
                    uint64_t v77 = 0;
                    uint64_t v78 = 0;
                    sub_72D08((uint64_t)&v76, (__int32 *)&v79);
                    *(_DWORD *)AudioObjectPropertyAddress buf = v48;
                    memset(&v82[4], 0, 24);
                    std::string::size_type v61 = v76;
                    sub_46B38(&v82[4], v76, v77, (v77 - (uint64_t)v76) >> 2);
                    sub_38DC94(v5, *(unsigned int *)buf, (uint64_t)buf);
                    if (*(void *)&v82[4]) {
                      operator delete(*(void **)&v82[4]);
                    }
                    if (v61) {
                      operator delete(v61);
                    }
                  }
                }
              }
              else
              {
LABEL_64:
                uint64_t v44 = sub_32A48(17);
                if (*(unsigned char *)(v44 + 8))
                {
                  std::string::size_type v45 = *(NSObject **)v44;
                  if (*(void *)v44)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v44, OS_LOG_TYPE_DEBUG))
                    {
                      sub_2417C(&v76, v34);
                      CFDictionaryRef v46 = &v76;
                      if (v78 < 0) {
                        CFDictionaryRef v46 = (void ***)v76;
                      }
                      *(_DWORD *)AudioObjectPropertyAddress buf = v68;
                      *(void *)long long v82 = "SubPortPolicy.cpp";
                      *(_WORD *)&v82[8] = 1024;
                      *(_DWORD *)&v82[10] = 235;
                      *(_WORD *)&v82[14] = 2080;
                      *(void *)&v82[16] = v46;
                      *(_WORD *)&v82[24] = 1024;
                      *(_DWORD *)&v82[26] = v67;
                      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unknown input data source %s on device with ID %u.", buf, 0x22u);
                      if (SHIBYTE(v78) < 0) {
                        operator delete(v76);
                      }
                    }
                  }
                }
              }
            }
            ++v33;
          }
          while (v33 != v71);
        }
      }
      AudioObjectID v4 = v67;
    }
    else
    {
      unint64_t v18 = (os_log_t *)sub_32A48(17);
      uint64_t v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)long long v82 = "SubPortPolicy.cpp";
        *(_WORD *)&v82[8] = 1024;
        *(_DWORD *)&v82[10] = 247;
        *(_WORD *)&v82[14] = 1024;
        *(_DWORD *)&v82[16] = v4;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_INFO, "%25s:%-5d AudioObjectGetPropertyData(kAudioDevicePropertyDataSources) return no input data sources for device %u.", buf, 0x18u);
      }
    }
  }
  uint64_t v21 = *v6;
  if (*v6)
  {
    uint64_t v22 = v6;
    do
    {
      unsigned int v23 = *(_DWORD *)(v21 + 32);
      BOOL v24 = v23 >= 0x706D6269;
      if (v23 >= 0x706D6269) {
        unint64_t v25 = (uint64_t *)v21;
      }
      else {
        unint64_t v25 = (uint64_t *)(v21 + 8);
      }
      if (v24) {
        uint64_t v22 = (void *)v21;
      }
      uint64_t v21 = *v25;
    }
    while (*v25);
    if (v22 != v6 && *((_DWORD *)v22 + 8) < 0x706D626Au)
    {
      uint64_t v26 = v22[5];
      CFDictionaryRef v27 = (int *)v22[6];
      uint64_t v28 = sub_3EFF58();
      unint64_t v29 = 126 - 2 * __clz(((uint64_t)v27 - v26) >> 2);
      v80[0] = off_61F5C8;
      v80[1] = v28;
      v80[3] = v80;
      *(void *)&v82[20] = buf;
      if (v27 == (int *)v26) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v29;
      }
      sub_85908((uint64_t)v80, buf);
      sub_38EA28(v26, v27, (uint64_t)buf, v30, 1);
      sub_38E9A4(buf);
      sub_38E9A4(v80);
    }
  }
  if (!v5[2])
  {
    long long v31 = (os_log_t *)sub_32A48(17);
    CFDictionaryRef v32 = *v31;
    if (*v31)
    {
      if (os_log_type_enabled(*v31, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)long long v82 = "SubPortPolicy.cpp";
        *(_WORD *)&v82[8] = 1024;
        *(_DWORD *)&v82[10] = 263;
        *(_WORD *)&v82[14] = 1024;
        *(_DWORD *)&v82[16] = v4;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device %u supports no data sources, and thus has no sub-ports.", buf, 0x18u);
      }
    }
  }
}

void sub_38E8D0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 32sub_360D08(&a9, 0) = v1;
  sub_7F264(**(void ***)(v2 - 320));
  _Unwind_Resume(a1);
}

void *sub_38E9A4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_38EA28(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v11 = (int *)result;
LABEL_2:
  CFNumberRef v87 = a2 - 2;
  CFNumberRef v88 = a2 - 1;
  unint64_t v86 = a2 - 3;
  uint64_t v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = v13 >> 2;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v41 = *(void *)(a3 + 24);
          if (!v41) {
            goto LABEL_149;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v41 + 48))(v41, v88, v11);
          if (result)
          {
            int v42 = *v11;
            *uint64_t v11 = *v88;
            *CFNumberRef v88 = v42;
          }
          break;
        case 3uLL:
          return sub_38F5A0(v11, v11 + 1, v88, a3);
        case 4uLL:
          return sub_38F73C(v11, v11 + 1, v11 + 2, v88, a3);
        case 5uLL:
          return sub_38F860(v11, v11 + 1, v11 + 2, v11 + 3, v88, a3);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 95)
    {
      uint64_t v43 = v11 + 1;
      BOOL v45 = v11 == a2 || v43 == a2;
      if (a5)
      {
        if (v45) {
          return result;
        }
        uint64_t v46 = 0;
        CFDictionaryRef v47 = v11;
        while (1)
        {
          uint64_t v48 = *(void *)(a3 + 24);
          if (!v48) {
            break;
          }
          uint64_t v49 = v43;
          uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v48 + 48))(v48, v43, v47);
          if (result)
          {
            int v91 = *v49;
            uint64_t v50 = v46;
            while (1)
            {
              *(int *)((char *)v11 + v50 + 4) = *(int *)((char *)v11 + v50);
              if (!v50) {
                break;
              }
              uint64_t v51 = *(void *)(a3 + 24);
              if (!v51) {
                goto LABEL_149;
              }
              v50 -= 4;
              uint64_t result = (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v51 + 48))(v51, &v91, (char *)v11 + v50);
              if ((result & 1) == 0)
              {
                int v52 = (int *)((char *)v11 + v50 + 4);
                goto LABEL_94;
              }
            }
            int v52 = v11;
LABEL_94:
            *int v52 = v91;
          }
          uint64_t v43 = v49 + 1;
          v46 += 4;
          CFDictionaryRef v47 = v49;
          if (v49 + 1 == a2) {
            return result;
          }
        }
      }
      else
      {
        if (v45) {
          return result;
        }
        while (1)
        {
          uint64_t v81 = *(void *)(a3 + 24);
          if (!v81) {
            break;
          }
          long long v82 = v43;
          uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v81 + 48))(v81, v43, v11);
          if (result)
          {
            int v91 = *v82;
            CFStringRef v83 = v82;
            do
            {
              int *v83 = *(v83 - 1);
              uint64_t v84 = *(void *)(a3 + 24);
              if (!v84) {
                goto LABEL_149;
              }
              uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v84 + 48))(v84, &v91, v83 - 2);
              --v83;
            }
            while ((result & 1) != 0);
            int *v83 = v91;
          }
          uint64_t v43 = v82 + 1;
          uint64_t v11 = v82;
          if (v82 + 1 == a2) {
            return result;
          }
        }
      }
LABEL_149:
      sub_56964();
    }
    if (!a4) {
      break;
    }
    unsigned int v15 = &v11[v14 >> 1];
    if ((unint64_t)v13 >= 0x201)
    {
      sub_38F5A0(v11, &v11[v14 >> 1], v88, a3);
      sub_38F5A0(v11 + 1, v15 - 1, v87, a3);
      sub_38F5A0(v11 + 2, &v11[(v14 >> 1) + 1], v86, a3);
      sub_38F5A0(v15 - 1, &v11[v14 >> 1], &v11[(v14 >> 1) + 1], a3);
      int v16 = *v11;
      *uint64_t v11 = *v15;
      int *v15 = v16;
    }
    else
    {
      sub_38F5A0(&v11[v14 >> 1], v11, v88, a3);
    }
    --a4;
    if (a5) {
      goto LABEL_13;
    }
    uint64_t v17 = *(void *)(a3 + 24);
    if (!v17) {
      goto LABEL_149;
    }
    if ((*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v17 + 48))(v17, v11 - 1, v11))
    {
LABEL_13:
      int v91 = *v11;
      unint64_t v18 = v11;
      do
      {
        uint64_t v19 = *(void *)(a3 + 24);
        if (!v19) {
          goto LABEL_149;
        }
        uint64_t v20 = v18++;
      }
      while (((*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v19 + 48))(v19, v18, &v91) & 1) != 0);
      uint64_t v21 = a2;
      if (v20 != v11)
      {
        while (1)
        {
          uint64_t v22 = *(void *)(a3 + 24);
          if (!v22) {
            goto LABEL_149;
          }
          if ((*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v22 + 48))(v22, --v21, &v91)) {
            goto LABEL_24;
          }
        }
      }
      uint64_t v21 = a2;
      do
      {
        if (v18 >= v21) {
          break;
        }
        uint64_t v23 = *(void *)(a3 + 24);
        if (!v23) {
          goto LABEL_149;
        }
        --v21;
      }
      while (((*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v23 + 48))(v23, v21, &v91) & 1) == 0);
LABEL_24:
      BOOL v24 = a2;
      if (v18 < v21)
      {
        unint64_t v25 = v18;
        uint64_t v26 = v21;
        do
        {
          int v27 = *v25;
          *unint64_t v25 = *v26;
          *uint64_t v26 = v27;
          do
          {
            uint64_t v28 = *(void *)(a3 + 24);
            if (!v28) {
              goto LABEL_149;
            }
            uint64_t v20 = v25++;
          }
          while (((*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v28 + 48))(v28, v25, &v91) & 1) != 0);
          do
          {
            uint64_t v29 = *(void *)(a3 + 24);
            if (!v29) {
              goto LABEL_149;
            }
            --v26;
          }
          while (!(*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v29 + 48))(v29, v26, &v91));
        }
        while (v25 < v26);
      }
      if (v20 != v11) {
        *uint64_t v11 = *v20;
      }
      int *v20 = v91;
      a2 = v24;
      if (v18 < v21) {
        goto LABEL_37;
      }
      BOOL v30 = sub_38F9D0(v11, v20, a3);
      uint64_t v12 = v20 + 1;
      uint64_t result = sub_38F9D0(v20 + 1, v24, a3);
      if (result)
      {
        a2 = v20;
        if (v30) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v30)
      {
LABEL_37:
        uint64_t result = sub_38EA28(v11, v20, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v20 + 1;
      }
    }
    else
    {
      int v91 = *v11;
      uint64_t v31 = *(void *)(a3 + 24);
      if (!v31) {
        goto LABEL_149;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v31 + 48))(v31, &v91, v88);
      if (result)
      {
        uint64_t v12 = v11;
        while (1)
        {
          uint64_t v32 = *(void *)(a3 + 24);
          if (!v32) {
            goto LABEL_149;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v32 + 48))(v32, &v91, ++v12);
          if (result) {
            goto LABEL_48;
          }
        }
      }
      uint64_t v33 = v11 + 1;
      do
      {
        uint64_t v12 = v33;
        if (v33 >= a2) {
          break;
        }
        uint64_t v34 = *(void *)(a3 + 24);
        if (!v34) {
          goto LABEL_149;
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v34 + 48))(v34, &v91, v33);
        uint64_t v33 = v12 + 1;
      }
      while (!result);
LABEL_48:
      uint64_t v35 = a2;
      if (v12 < a2)
      {
        uint64_t v35 = a2;
        do
        {
          uint64_t v36 = *(void *)(a3 + 24);
          if (!v36) {
            goto LABEL_149;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v36 + 48))(v36, &v91, --v35);
        }
        while ((result & 1) != 0);
      }
LABEL_57:
      if (v12 < v35)
      {
        int v37 = *v12;
        *uint64_t v12 = *v35;
        *uint64_t v35 = v37;
        do
        {
          uint64_t v38 = *(void *)(a3 + 24);
          if (!v38) {
            goto LABEL_149;
          }
          ++v12;
        }
        while (!(*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v38 + 48))(v38, &v91, v12));
        while (1)
        {
          uint64_t v39 = *(void *)(a3 + 24);
          if (!v39) {
            goto LABEL_149;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v39 + 48))(v39, &v91, --v35);
          if ((result & 1) == 0) {
            goto LABEL_57;
          }
        }
      }
      float v40 = v12 - 1;
      BOOL v5 = v12 - 1 >= v11;
      BOOL v6 = v12 - 1 == v11;
      if (v12 - 1 != v11) {
        *uint64_t v11 = *v40;
      }
      a5 = 0;
      int *v40 = v91;
    }
  }
  if (v11 != a2)
  {
    int64_t v53 = (v14 - 2) >> 1;
    int64_t v89 = v53;
    CFDictionaryRef v85 = a2;
    do
    {
      int64_t v54 = v53;
      if (v89 >= v53)
      {
        uint64_t v55 = (2 * v53) | 1;
        uint64_t v56 = &v11[v55];
        if (2 * v53 + 2 < (uint64_t)v14)
        {
          uint64_t v57 = *(void *)(a3 + 24);
          if (!v57) {
            goto LABEL_149;
          }
          if ((*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v57 + 48))(v57, &v11[v55], v56 + 1))
          {
            ++v56;
            uint64_t v55 = 2 * v54 + 2;
          }
        }
        uint64_t v58 = *(void *)(a3 + 24);
        if (!v58) {
          goto LABEL_149;
        }
        BOOL v59 = &v11[v54];
        uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v58 + 48))(v58, v56, v59);
        if ((result & 1) == 0)
        {
          int v91 = *v59;
          do
          {
            CFDictionaryRef v60 = v56;
            int *v59 = *v56;
            if (v89 < v55) {
              break;
            }
            uint64_t v61 = (2 * v55) | 1;
            uint64_t v56 = &v11[v61];
            uint64_t v55 = 2 * v55 + 2;
            if (v55 < (uint64_t)v14)
            {
              uint64_t v62 = *(void *)(a3 + 24);
              if (!v62) {
                goto LABEL_149;
              }
              if ((*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v62 + 48))(v62, &v11[v61], v56 + 1))
              {
                ++v56;
              }
              else
              {
                uint64_t v55 = v61;
              }
            }
            else
            {
              uint64_t v55 = v61;
            }
            uint64_t v63 = *(void *)(a3 + 24);
            if (!v63) {
              goto LABEL_149;
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v63 + 48))(v63, v56, &v91);
            BOOL v59 = v60;
          }
          while (!result);
          *CFDictionaryRef v60 = v91;
          a2 = v85;
        }
      }
      int64_t v53 = v54 - 1;
    }
    while (v54);
    uint64_t v64 = (unint64_t)v13 >> 2;
    do
    {
      CFDictionaryRef v65 = a2;
      uint64_t v66 = 0;
      int v90 = *v11;
      uint64_t v67 = v64 - 2;
      if (v64 < 2) {
        uint64_t v67 = v64 - 1;
      }
      uint64_t v68 = v67 >> 1;
      unsigned int v69 = v11;
      do
      {
        CFDictionaryRef v70 = &v69[v66 + 1];
        uint64_t v71 = (2 * v66) | 1;
        uint64_t v72 = 2 * v66 + 2;
        if (v72 < v64)
        {
          uint64_t v73 = *(void *)(a3 + 24);
          if (!v73) {
            goto LABEL_149;
          }
          uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v73 + 48))(v73, &v69[v66 + 1], &v69[v66 + 2]);
          if (result)
          {
            ++v70;
            uint64_t v71 = v72;
          }
        }
        *unsigned int v69 = *v70;
        unsigned int v69 = v70;
        uint64_t v66 = v71;
      }
      while (v71 <= v68);
      a2 = v65 - 1;
      if (v70 == v65 - 1)
      {
        int *v70 = v90;
      }
      else
      {
        int *v70 = *a2;
        *a2 = v90;
        uint64_t v74 = (char *)v70 - (char *)v11 + 4;
        if (v74 >= 5)
        {
          uint64_t v75 = *(void *)(a3 + 24);
          if (!v75) {
            goto LABEL_149;
          }
          unint64_t v76 = (unint64_t)((v74 >> 2) - 2) >> 1;
          uint64_t v77 = &v11[v76];
          uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v75 + 48))(v75, v77, v70);
          if (result)
          {
            int v91 = *v70;
            do
            {
              uint64_t v78 = v77;
              int *v70 = *v77;
              if (!v76) {
                break;
              }
              uint64_t v79 = *(void *)(a3 + 24);
              if (!v79) {
                goto LABEL_149;
              }
              unint64_t v76 = (v76 - 1) >> 1;
              uint64_t v77 = &v11[v76];
              uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v79 + 48))(v79, v77, &v91);
              CFDictionaryRef v70 = v78;
            }
            while ((result & 1) != 0);
            *uint64_t v78 = v91;
          }
        }
      }
    }
    while (v64-- > 2);
  }
  return result;
}