void sub_19DCD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 656)) {
    sub_19D9A8(a1, 1);
  }
}

uint64_t sub_19DCE4(uint64_t a1)
{
  sub_42E5FC((os_unfair_lock_s *)a1);
  v49[0] = 1;
  *(void *)&v49[1] = 0x6F7574706D757465;
  v49[3] = 1;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v49[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v49[1], 0, 0, 4, v49);
  }
  v49[3] = 2;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v49[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v49[1], 0, 0, 4, v49);
  }
  v49[3] = 3;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v49[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v49[1], 0, 0, 4, v49);
  }
  v49[3] = 4;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v49[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v49[1], 0, 0, 4, v49);
  }
  v49[0] = 0;
  strcpy((char *)&v49[1], "w2bburtp");
  BYTE1(v49[3]) = 0;
  HIWORD(v49[3]) = 0;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v49[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v49[1], 0, 0, 4, v49);
  }
  v49[1] = 1999790690;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v49[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v49[1], 0, 0, 4, v49);
  }
  v49[1] = 1718432370;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v49[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v49[1], 0, 0, 4, v49);
  }
  v49[0] = 0;
  strcpy((char *)&v49[1], "tumdptuo");
  BYTE1(v49[3]) = 0;
  HIWORD(v49[3]) = 0;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v49[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v49[1], 0, 0, 4, v49);
  }
  int v47 = 4;
  float v48 = 0.0;
  strcpy((char *)&v49[1], "dlovptuo");
  BYTE1(v49[3]) = 0;
  HIWORD(v49[3]) = 0;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v49[1]))
  {
    (*(void (**)(uint64_t, _DWORD *, void, void, int *, float *))(*(void *)a1 + 40))(a1, &v49[1], 0, 0, &v47, &v48);
    float v2 = v48;
    if (v48 != 0.0)
    {
      float v48 = 0.0;
      (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, float *, float))(*(void *)a1 + 48))(a1, &v49[1], 0, 0, 4, &v48, v2);
    }
  }
  BYTE1(v49[3]) = 0;
  HIWORD(v49[3]) = 0;
  strcpy((char *)v49, "Ms2icrscbolg");
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v49[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v49[1], 0, 0, 4, v49);
  }
  strcpy(inAddress, "kcajptuo");
  inAddress[9] = 0;
  *(_WORD *)&inAddress[10] = 0;
  AudioObjectID v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v3, (const AudioObjectPropertyAddress *)inAddress))
  {
    AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    sub_1A3BF8(v4, 1u);
    operator new();
  }
  if (sub_19D610(a1))
  {
    AudioObjectID v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    sub_1A3BF8(v5, 2u);
    operator new();
  }
  *(void *)&buf[0].mSelector = 0x6F7574706D757465;
  buf[0].mElement = 4;
  AudioObjectID v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v6, buf))
  {
    if (qword_64BCF0 != -1) {
      dispatch_once(&qword_64BCF0, &stru_6236F8);
    }
    if (byte_64BCE8) {
      operator new();
    }
    AudioObjectID v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    sub_1A3BF8(v7, 4u);
    operator new();
  }
  uint64_t v55 = 0x6F7574706D757465;
  LODWORD(v56) = 3;
  AudioObjectID v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v8, (const AudioObjectPropertyAddress *)&v55))
  {
    AudioObjectID v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    sub_1A3BF8(v9, 3u);
    operator new();
  }
  *(void *)&v53.mSelector = 0x6F7574706D757465;
  v53.mElement = 5;
  *(void *)&v52.mSelector = 0x6F757470766F6C6DLL;
  v52.mElement = 5;
  AudioObjectID v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v10, &v53))
  {
    AudioObjectID v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    if (AudioObjectHasProperty(v11, &v52))
    {
      AudioObjectID v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      sub_1A3BF8(v12, 5u);
      operator new();
    }
    operator new();
  }
  sub_85F24();
  *(void *)&v51.mSelector = 0x696E70746D757465;
  v51.mElement = 0;
  AudioObjectID v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v13, &v51)) {
    operator new();
  }
  *(void *)&v50.mSelector = 0x696E7074766F6C64;
  v50.mElement = 0;
  AudioObjectID v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v14, &v50)) {
    operator new();
  }
  sub_19F404((uint64_t *)a1);
  if ((sub_1A0DC0(a1) & 1) != 0 || sub_1A0E8C(a1) || sub_1A0F74(a1))
  {
    if (!*(void *)(a1 + 496))
    {
      char v15 = sub_1A0DC0(a1);
      buf[0].mSelector = 1885892727;
      *(void *)&buf[0].mElement = 0;
      *(void *)&buf[1].mScope = 0;
      char v68 = v15;
      BOOL v16 = sub_1A0E8C(a1);
      int v69 = 1886222185;
      uint64_t v70 = 0;
      uint64_t v71 = 0;
      BOOL v72 = v16;
      char v17 = sub_1A0F74(a1);
      int v73 = 1886680169;
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      char v76 = v17;
      char v18 = sub_1A0F74(a1);
      uint64_t v19 = 0;
      int v77 = 1886680175;
      uint64_t v78 = 0;
      uint64_t v79 = 0;
      char v80 = v18;
      while (1)
      {
        int v20 = *(AudioObjectPropertySelector *)((char *)&buf[0].mSelector + v19);
        v21 = operator new(4uLL);
        _DWORD *v21 = v20;
        *(void *)inAddress = v21;
        *(void *)&inAddress[8] = v21 + 1;
        *(void *)&inAddress[16] = v21 + 1;
        strcpy(v59, "cwdv");
        v59[8] = 0;
        v64[0] = 0;
        v64[1] = 0;
        v63 = v64;
        int v62 = 3;
        int v65 = 44739242;
        CFTypeRef v66 = 0;
        sub_43637C(&v55, a1, (uint64_t)inAddress);
        if (v66) {
          CFRelease(v66);
        }
        sub_463E0(v64[0]);
        if (*(void *)inAddress)
        {
          *(void *)&inAddress[8] = *(void *)inAddress;
          operator delete(*(void **)inAddress);
        }
        uint64_t v22 = *((unsigned __int8 *)&buf[2].mSelector + v19);
        if (v57 != v22)
        {
          v23 = (os_log_t *)sub_32A48(13);
          v24 = *v23;
          if (*v23)
          {
            if (os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
            {
              int v25 = v57;
              sub_2417C(&v53, *(AudioObjectPropertySelector *)((char *)&buf[0].mSelector + v19));
              v26 = &v53;
              if (v54 < 0) {
                v26 = *(AudioObjectPropertyAddress **)&v53.mSelector;
              }
              *(_DWORD *)inAddress = 136316162;
              *(void *)&inAddress[4] = "Device_Codec_Aspen.cpp";
              *(_WORD *)&inAddress[12] = 1024;
              *(_DWORD *)&inAddress[14] = 1521;
              *(_WORD *)&inAddress[18] = 1024;
              *(_DWORD *)&inAddress[20] = v25;
              *(_WORD *)v59 = 2080;
              *(void *)&v59[2] = v26;
              __int16 v60 = 1024;
              int v61 = v22;
              _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Found %u ports of type '%s' (expected %u)\"", inAddress, 0x28u);
              if (v54 < 0) {
                operator delete(*(void **)&v53.mSelector);
              }
            }
          }
        }
        if (v22 && v57 == 1)
        {
          uint64_t v28 = *(void *)(v56 + 16);
          uint64_t v27 = *(void *)(v56 + 24);
          if (v27) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 16), 1uLL, memory_order_relaxed);
          }
          v29 = (char *)buf + v19;
          v30 = *(std::__shared_weak_count **)((char *)&buf[1].mScope + v19);
          *((void *)v29 + 1) = v28;
          *((void *)v29 + 2) = v27;
          if (v30) {
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        sub_8108(&v55);
        v19 += 32;
        if (v19 == 128) {
          operator new();
        }
      }
    }
    v41 = (os_log_t *)sub_32A48(13);
    v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      buf[0].mSelector = 136315394;
      *(void *)&buf[0].mScope = "Device_Codec_Aspen.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1504;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v31 = sub_298DA4();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *), uint64_t))(*(void *)v31 + 48))(v31, sub_1A2D58, a1);
  sub_1A1030((os_unfair_lock_s *)a1);
  if (sub_19D610(a1))
  {
    v32 = (uint64_t **)sub_23EE78();
    sub_23EF98(v32, (unint64_t)sub_1A2C20, a1);
    sub_1A17A4((os_unfair_lock_s *)a1);
    uint64_t v33 = sub_23EE78();
    sub_23F584(v33, 1819176821, (unint64_t)sub_1A1AE4, a1);
  }
  uint64_t v55 = 0x707472755354656ELL;
  LODWORD(v56) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v55))
  {
    buf[0].mSelector = 0;
    (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 48))(a1, &v55, 0, 0, 4, buf);
  }
  *(void *)&v53.mSelector = 0x6F7574706D757465;
  v53.mElement = 5;
  if ((*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 16))(a1, &v53))
  {
    buf[0].mSelector = 1;
    (*(void (**)(uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 48))(a1, &v53, 0, 0, 4, buf);
  }
  *(void *)&v52.mSelector = 0x676C6F624D434373;
  v52.mElement = 0;
  if ((*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 16))(a1, &v52))
  {
    *(void *)&v51.mSelector = 0;
    int v47 = 8;
    (*(void (**)(uint64_t, AudioObjectPropertyAddress *, void, void, int *, AudioObjectPropertyAddress *))(*(void *)a1 + 40))(a1, &v52, 0, 0, &v47, &v51);
    if (!*(void *)&v51.mSelector)
    {
      v44 = (os_log_t *)sub_32A48(13);
      v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        buf[0].mSelector = 136315394;
        *(void *)&buf[0].mScope = "Device_Codec_Aspen.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 875;
        _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [maxChannelInfo is NULL]: \"Invalid Maximum Channel Info\"", (uint8_t *)buf, 0x12u);
      }
      v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v46, "Invalid Maximum Channel Info");
    }
    *(void *)inAddress = *(void *)&v51.mSelector;
    *(_WORD *)&inAddress[8] = 1;
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)&v51.mSelector, @"MaxInputChannelCount"))
    {
      v34 = (AudioObjectPropertyElement *)(a1 + 684);
      if ((sub_1D4800(*(const __CFDictionary **)inAddress, @"MaxInputChannelCount", v34) & 1) == 0)
      {
        v35 = (os_log_t *)sub_32A48(17);
        v36 = *v35;
        if (*v35)
        {
          if (os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
          {
            buf[0].mSelector = 136315394;
            *(void *)&buf[0].mScope = "Device_Codec_Aspen.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 882;
            _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to convert max num input channels to UInt32", (uint8_t *)buf, 0x12u);
          }
        }
      }
      uint64_t v37 = sub_32A48(17);
      if (*(unsigned char *)(v37 + 8))
      {
        v38 = *(NSObject **)v37;
        if (*(void *)v37)
        {
          if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
          {
            AudioObjectPropertyElement v39 = *v34;
            buf[0].mSelector = 136315650;
            *(void *)&buf[0].mScope = "Device_Codec_Aspen.cpp";
            LOWORD(buf[1].mSelector) = 1024;
            *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 883;
            HIWORD(buf[1].mScope) = 1024;
            buf[1].mElement = v39;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Codec specified a maximum number of input channels: %u", (uint8_t *)buf, 0x18u);
          }
        }
      }
    }
    sub_80594((uint64_t)inAddress);
  }
  return 1;
}

void sub_19F278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  __cxa_free_exception(v43);
  _Unwind_Resume(a1);
}

void sub_19F404(uint64_t *a1)
{
  if (sub_1A0DC0((uint64_t)a1))
  {
    *(void *)buf = 0x6F757470534E5263;
    *(_DWORD *)&buf[8] = 1;
    if ((*(unsigned int (**)(uint64_t *, uint8_t *))(*a1 + 16))(a1, buf))
    {
      LODWORD(v107) = 0;
      LODWORD(v104) = 4;
      (*(void (**)(uint64_t *, uint8_t *, void, void, long long *, long long *))(*a1 + 40))(a1, buf, 0, 0, &v104, &v107);
      BOOL v2 = *(float *)&v107 > 96.0;
    }
    else
    {
      BOOL v2 = 0;
    }
    AudioObjectID v3 = (os_log_t *)sub_32A48(17);
    AudioObjectID v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
    {
      AudioObjectID v5 = "16-bit";
      *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
      *(_DWORD *)buf = 136315650;
      if (v2) {
        AudioObjectID v5 = "24-bit";
      }
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1299;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a %s wired-headphones port", buf, 0x1Cu);
    }
    AudioObjectID v6 = (std::__shared_weak_count *)operator new(0x228uLL);
    v6->__shared_owners_ = 0;
    v6->__shared_weak_owners_ = 0;
    v6->__vftable = (std::__shared_weak_count_vtbl *)off_640B28;
    sub_1730FC((uint64_t)&v6[1], (uint64_t)a1, v2);
    *(void *)&long long v104 = v6 + 1;
    *((void *)&v104 + 1) = v6;
    sub_56E64((uint64_t)&v104, &v6[4].__shared_owners_, (uint64_t)&v6[1]);
    if (((*(uint64_t (**)(uint64_t *))(*a1 + 312))(a1) & 0xFF00000000) != 0)
    {
      AudioObjectID v7 = (os_log_t *)sub_32A48(17);
      AudioObjectID v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1304;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating a wired tapstream port", buf, 0x12u);
      }
      AudioObjectID v9 = operator new(0x228uLL);
      v9[1] = 0;
      v9[2] = 0;
      *AudioObjectID v9 = off_640AF0;
      *(void *)buf = CFStringCreateWithCString(0, "Wired Headphones Reference", 0x600u);
      buf[8] = 1;
      sub_3D3138((uint64_t)(v9 + 3), (uint64_t)a1, (uint64_t)buf);
      sub_72924((uint64_t)buf);
      *(void *)&long long v107 = v9 + 3;
      *((void *)&v107 + 1) = v9;
      sub_56E64((uint64_t)&v107, v9 + 13, (uint64_t)(v9 + 3));
      long long v102 = v107;
      sub_436484((uint64_t)a1, (void ***)&v102);
      if (*((void *)&v102 + 1)) {
        sub_4636C(*((std::__shared_weak_count **)&v102 + 1));
      }
    }
    if (sub_1A0E8C((uint64_t)a1))
    {
      AudioObjectID v10 = (os_log_t *)sub_32A48(17);
      AudioObjectID v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1314;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a wired-microphone port", buf, 0x12u);
      }
      uint64_t v12 = a1[83];
      uint64_t v15 = *(void *)(v12 + 72);
      uint64_t v13 = v12 + 72;
      uint64_t v14 = v15;
      if (!v15) {
        goto LABEL_31;
      }
      uint64_t v16 = v13;
      do
      {
        unsigned int v17 = *(_DWORD *)(v14 + 32);
        BOOL v18 = v17 >= 0x706D7769;
        if (v17 >= 0x706D7769) {
          uint64_t v19 = (uint64_t *)v14;
        }
        else {
          uint64_t v19 = (uint64_t *)(v14 + 8);
        }
        if (v18) {
          uint64_t v16 = v14;
        }
        uint64_t v14 = *v19;
      }
      while (*v19);
      if (v16 == v13 || *(_DWORD *)(v16 + 32) > 0x706D7769u) {
LABEL_31:
      }
        uint64_t v16 = v13;
      v99 = 0;
      v100 = 0;
      uint64_t v101 = 0;
      sub_46B38(&v99, *(const void **)(v16 + 40), *(void *)(v16 + 48), (uint64_t)(*(void *)(v16 + 48) - *(void *)(v16 + 40)) >> 2);
      int v20 = v99;
      sub_456EFC((uint64_t *)buf, v99, v100);
      if (v20)
      {
        v100 = v20;
        operator delete(v20);
      }
      v21 = (std::__shared_weak_count *)operator new(0x228uLL);
      v21->__shared_owners_ = 0;
      v21->__shared_weak_owners_ = 0;
      v21->__vftable = (std::__shared_weak_count_vtbl *)off_640B60;
      sub_17371C((uint64_t)&v21[1], (uint64_t)a1, (uint64_t)buf);
      *(void *)&long long v107 = v21 + 1;
      *((void *)&v107 + 1) = v21;
      sub_56E64((uint64_t)&v107, &v21[4].__shared_owners_, (uint64_t)&v21[1]);
      sub_250C08((uint64_t)&v21[1], (uint64_t)&v6[1]);
      v97 = (void **)&v21[1].__vftable;
      v98 = v21;
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_436484((uint64_t)a1, &v97);
      if (v98) {
        sub_4636C(v98);
      }
      sub_4636C(v21);
      *(void *)&long long v107 = buf;
      sub_74004((void ***)&v107);
    }
    if (sub_1A0F74((uint64_t)a1))
    {
      uint64_t v22 = (os_log_t *)sub_32A48(17);
      v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1325;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating TTY ports", buf, 0x12u);
      }
      uint64_t v24 = a1[83];
      uint64_t v27 = *(void *)(v24 + 72);
      uint64_t v25 = v24 + 72;
      uint64_t v26 = v27;
      if (!v27) {
        goto LABEL_52;
      }
      uint64_t v28 = v25;
      do
      {
        unsigned int v29 = *(_DWORD *)(v26 + 32);
        BOOL v30 = v29 >= 0x70747469;
        if (v29 >= 0x70747469) {
          uint64_t v31 = (uint64_t *)v26;
        }
        else {
          uint64_t v31 = (uint64_t *)(v26 + 8);
        }
        if (v30) {
          uint64_t v28 = v26;
        }
        uint64_t v26 = *v31;
      }
      while (*v31);
      if (v28 == v25 || *(_DWORD *)(v28 + 32) > 0x70747469u) {
LABEL_52:
      }
        uint64_t v28 = v25;
      v94 = 0;
      v95 = 0;
      uint64_t v96 = 0;
      sub_46B38(&v94, *(const void **)(v28 + 40), *(void *)(v28 + 48), (uint64_t)(*(void *)(v28 + 48) - *(void *)(v28 + 40)) >> 2);
      v32 = v94;
      sub_456EFC((uint64_t *)buf, v94, v95);
      if (v32)
      {
        v95 = v32;
        operator delete(v32);
      }
      uint64_t v33 = (char *)operator new(0x228uLL);
      *((void *)v33 + 1) = 0;
      *((void *)v33 + 2) = 0;
      *(void *)uint64_t v33 = off_640B98;
      sub_1A3748((uint64_t)(v33 + 24), (uint64_t)a1, (uint64_t)buf);
      CFMutableStringRef v82 = (CFMutableStringRef)(v33 + 24);
      v83 = v33;
      sub_56E64((uint64_t)&v82, (void *)v33 + 13, (uint64_t)(v33 + 24));
      long long v107 = 0uLL;
      uint64_t v108 = 0;
      v34 = (char *)operator new(0x228uLL);
      *((void *)v34 + 1) = 0;
      *((void *)v34 + 2) = 0;
      *(void *)v34 = off_641040;
      sub_1A346C((uint64_t)(v34 + 24), (uint64_t)a1, (uint64_t)&v107);
      CFStringRef theString = (CFStringRef)(v34 + 24);
      uint64_t v74 = v34;
      sub_56E64((uint64_t)&theString, (void *)v34 + 13, (uint64_t)(v34 + 24));
      *(void *)&long long v103 = &v107;
      sub_74004((void ***)&v103);
      sub_250C08((uint64_t)(v33 + 24), (uint64_t)(v34 + 24));
      v92 = (void **)(v33 + 24);
      v93 = (std::__shared_weak_count *)v33;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v33 + 1, 1uLL, memory_order_relaxed);
      sub_436484((uint64_t)a1, &v92);
      if (v93) {
        sub_4636C(v93);
      }
      v90 = (void **)(v34 + 24);
      v91 = (std::__shared_weak_count *)v34;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v34 + 1, 1uLL, memory_order_relaxed);
      sub_436484((uint64_t)a1, &v90);
      if (v91) {
        sub_4636C(v91);
      }
      sub_4636C((std::__shared_weak_count *)v34);
      sub_4636C((std::__shared_weak_count *)v33);
      *(void *)&long long v107 = buf;
      sub_74004((void ***)&v107);
    }
    v88 = (void **)&v6[1].__vftable;
    v89 = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_436484((uint64_t)a1, &v88);
    if (v89) {
      sub_4636C(v89);
    }
    sub_4636C(v6);
  }
  if (sub_19D610((uint64_t)a1))
  {
    v35 = (os_log_t *)sub_32A48(17);
    v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1341;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a line-out port", buf, 0x12u);
    }
    (*(void (**)(long long *__return_ptr, uint64_t *))(*a1 + 128))(&v107, a1);
    uint64_t v37 = operator new(0x280uLL);
    v37[1] = 0;
    v37[2] = 0;
    *uint64_t v37 = off_640A80;
    sub_1A3334((unsigned char *)v37 + 24, (uint64_t)a1, (CFStringRef *)&v107);
    *(void *)buf = v37 + 3;
    *(void *)&buf[8] = v37;
    sub_56E64((uint64_t)buf, v37 + 13, (uint64_t)(v37 + 3));
    long long v87 = *(_OWORD *)buf;
    sub_436484((uint64_t)a1, (void ***)&v87);
    if (*((void *)&v87 + 1)) {
      sub_4636C(*((std::__shared_weak_count **)&v87 + 1));
    }
    sub_72924((uint64_t)&v107);
  }
  *(void *)&inAddress.mSelector = 0x6F7574706D757465;
  inAddress.mElement = 4;
  AudioObjectID v38 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  if (AudioObjectHasProperty(v38, &inAddress))
  {
    AudioObjectPropertyElement v39 = (os_log_t *)sub_32A48(17);
    v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1351;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a speaker port", buf, 0x12u);
    }
    long long v104 = 0uLL;
    v105 = 0;
    sub_105048((uint64_t)buf, qword_64C908);
    CFMutableStringRef v82 = 0;
    v83 = 0;
    v84 = 0;
    v41 = operator new(0x228uLL);
    v41[1] = 0;
    v41[2] = 0;
    void *v41 = off_640AB8;
    CFStringRef theString = CFStringCreateWithCString(0, "Built-In Speaker", 0x600u);
    LOBYTE(v74) = 1;
    sub_21C8C(&v107, "");
    sub_105158((uint64_t)(v41 + 3), &qword_64C908, (uint64_t)a1, (uint64_t)&v104, (uint64_t)buf, (uint64_t)&theString, (uint64_t)&v82, &v107);
    v41[3] = &off_621AD0;
    *((_WORD *)v41 + 272) = 0;
    if (SHIBYTE(v108) < 0) {
      operator delete((void *)v107);
    }
    sub_72924((uint64_t)&theString);
    *(void *)&long long v103 = v41 + 3;
    *((void *)&v103 + 1) = v41;
    sub_56E64((uint64_t)&v103, v41 + 13, (uint64_t)(v41 + 3));
    long long v85 = v103;
    long long v103 = 0uLL;
    sub_436484((uint64_t)a1, (void ***)&v85);
    if (*((void *)&v85 + 1)) {
      sub_4636C(*((std::__shared_weak_count **)&v85 + 1));
    }
    *(void *)&long long v107 = &v82;
    sub_74004((void ***)&v107);
    sub_72924((uint64_t)&buf[32]);
    sub_72924((uint64_t)&buf[16]);
    sub_72924((uint64_t)buf);
    if (((*(uint64_t (**)(uint64_t *))(*a1 + 312))(a1) & 0xFF00000000) != 0)
    {
      v42 = (os_log_t *)sub_32A48(17);
      v43 = *v42;
      if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1357;
        _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d creating a speaker tap input port", buf, 0x12u);
      }
      v44 = operator new(0x228uLL);
      v44[1] = 0;
      v44[2] = 0;
      void *v44 = off_63F980;
      sub_280A18((uint64_t)(v44 + 3), (uint64_t)a1);
      *(void *)buf = v44 + 3;
      *(void *)&buf[8] = v44;
      sub_56E64((uint64_t)buf, v44 + 13, (uint64_t)(v44 + 3));
      long long v81 = *(_OWORD *)buf;
      sub_436484((uint64_t)a1, (void ***)&v81);
      if (*((void *)&v81 + 1)) {
        sub_4636C(*((std::__shared_weak_count **)&v81 + 1));
      }
    }
  }
  *(void *)&v80.mSelector = 0x6F7574706D757465;
  v80.mElement = 3;
  AudioObjectID v45 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  if (AudioObjectHasProperty(v45, &v80))
  {
    v46 = operator new(0x14uLL);
    *(void *)&long long v104 = v46;
    v105 = (char *)(v46 + 5);
    v46[4] = 1937007472;
    *(_OWORD *)v46 = *(_OWORD *)"rvmiplmimacmpcpspctsivpvovpvcgpvcvmrgcrvgsmvpcps wargcrvccahgsmvivpvcvmiovpvcomicgpvtcmg"
                                "cvmrplminkpstmsmmacmpcpspcts";
    *((void *)&v104 + 1) = v46 + 5;
    int v47 = (os_log_t *)sub_32A48(17);
    float v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1370;
      _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a receiver port", buf, 0x12u);
    }
    sub_105048((uint64_t)buf, qword_64C8D8);
    CFMutableStringRef v82 = 0;
    v83 = 0;
    v84 = 0;
    v49 = operator new(0x228uLL);
    v49[1] = 0;
    v49[2] = 0;
    void *v49 = off_640AB8;
    CFStringRef theString = CFStringCreateWithCString(0, "Built-In Receiver", 0x600u);
    LOBYTE(v74) = 1;
    sub_21C8C(&v107, "");
    sub_105158((uint64_t)(v49 + 3), &qword_64C8D8, (uint64_t)a1, (uint64_t)&v104, (uint64_t)buf, (uint64_t)&theString, (uint64_t)&v82, &v107);
    v49[3] = &off_621AD0;
    *((_WORD *)v49 + 272) = 0;
    if (SHIBYTE(v108) < 0) {
      operator delete((void *)v107);
    }
    sub_72924((uint64_t)&theString);
    *(void *)&long long v103 = v49 + 3;
    *((void *)&v103 + 1) = v49;
    sub_56E64((uint64_t)&v103, v49 + 13, (uint64_t)(v49 + 3));
    long long v79 = v103;
    sub_436484((uint64_t)a1, (void ***)&v79);
    if (*((void *)&v79 + 1)) {
      sub_4636C(*((std::__shared_weak_count **)&v79 + 1));
    }
    *(void *)&long long v107 = &v82;
    sub_74004((void ***)&v107);
    sub_72924((uint64_t)&buf[32]);
    sub_72924((uint64_t)&buf[16]);
    sub_72924((uint64_t)buf);
    operator delete(v46);
  }
  *(void *)&v78.mSelector = 0x6F7574706D757465;
  v78.mElement = 5;
  AudioObjectID v50 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  if (AudioObjectHasProperty(v50, &v78))
  {
    AudioObjectPropertyAddress v51 = (os_log_t *)sub_32A48(17);
    AudioObjectPropertyAddress v52 = *v51;
    if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1381;
      _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a HAC port", buf, 0x12u);
    }
    AudioObjectPropertyAddress v53 = (__CFString *)operator new(0x14uLL);
    CFMutableStringRef v82 = v53;
    v84 = (char *)&v53->data + 4;
    LODWORD(v53->data) = 1937007472;
    *(_OWORD *)&v53->isa = *(_OWORD *)"rvmiplmimacmpcpspctsivpvovpvcgpvcvmrgcrvgsmvpcps wargcrvccahgsmvivpvcvmiovpvcomicg"
                                      "pvtcmgcvmrplminkpstmsmmacmpcpspcts";
    v83 = (char *)&v53->data + 4;
    sub_105048((uint64_t)buf, qword_64C938);
    CFStringRef theString = 0;
    uint64_t v74 = 0;
    uint64_t v75 = 0;
    char v54 = operator new(0x2A0uLL);
    v54[1] = 0;
    v54[2] = 0;
    *char v54 = off_63F9F0;
    *(void *)&long long v103 = CFStringCreateWithCString(0, "Hearing Aid Compliance", 0x600u);
    BYTE8(v103) = 1;
    sub_21C8C(&v104, "");
    *(void *)&long long v107 = off_625F68;
    v109 = &v107;
    sub_10665C((uint64_t)(v54 + 3), &qword_64C938, (uint64_t)a1, (uint64_t)&v82, (uint64_t)buf, (uint64_t)&v103, (uint64_t)&theString, &v104, (uint64_t)&v107);
    sub_FB930(&v107);
    if (SHIBYTE(v105) < 0) {
      operator delete((void *)v104);
    }
    sub_72924((uint64_t)&v103);
    *(void *)&long long v76 = v54 + 3;
    *((void *)&v76 + 1) = v54;
    sub_56E64((uint64_t)&v76, v54 + 13, (uint64_t)(v54 + 3));
    long long v77 = v76;
    sub_436484((uint64_t)a1, (void ***)&v77);
    if (*((void *)&v77 + 1)) {
      sub_4636C(*((std::__shared_weak_count **)&v77 + 1));
    }
    *(void *)&long long v107 = &theString;
    sub_74004((void ***)&v107);
    sub_72924((uint64_t)&buf[32]);
    sub_72924((uint64_t)&buf[16]);
    sub_72924((uint64_t)buf);
    operator delete(v53);
  }
  if (sub_8B774())
  {
    uint64_t v55 = (os_log_t *)sub_32A48(17);
    uint64_t v56 = *v55;
    if (*v55)
    {
      if (os_log_type_enabled(*v55, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1453;
        _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d No input sources are present - no builtin mic on codec", buf, 0x12u);
      }
    }
  }
  else
  {
    LODWORD(v82) = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
    *(void *)&long long v104 = 0x696E707473736323;
    DWORD2(v104) = 0;
    sub_869C8((uint64_t)buf, (AudioObjectID *)&v82, (AudioObjectPropertyAddress *)&v104, 0, 0);
    int v57 = *(_DWORD *)buf;
    if (*(_DWORD *)buf || !buf[32])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = v57;
    }
    long long v107 = 0uLL;
    uint64_t v108 = 0;
    v58 = *(void **)&buf[8];
    sub_46B38(&v107, *(const void **)&buf[8], *(uint64_t *)&buf[16], (uint64_t)(*(void *)&buf[16] - *(void *)&buf[8]) >> 2);
    if (v58) {
      operator delete(v58);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64C9A0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64C9A0))
    {
      qmemcpy(buf, "cimicimscimfcimlcimtcimu1imi2imi3imi4imi", 40);
      sub_1A2E28(&qword_64C988, buf, 0xAuLL);
      __cxa_guard_release(&qword_64C9A0);
    }
    long long v59 = v107;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    long long v104 = 0uLL;
    v105 = 0;
    sub_1A2EAC((unsigned int **)buf, (unsigned int *)v59, *((unsigned int **)&v59 + 1), (unsigned int *)qword_64C988, *(unsigned int **)algn_64C990, (uint64_t)&v104, 0);
    long long v60 = v104;
    if ((void)v104)
    {
      *((void *)&v104 + 1) = v104;
      operator delete((void *)v104);
    }
    if ((void)v59) {
      operator delete((void *)v59);
    }
    if (*((void *)&v60 + 1) != (void)v60 && (sub_392434(a1[83], 0x696D6963u) || sub_392434(a1[83], 0x696D6931u)))
    {
      int v61 = (os_log_t *)sub_32A48(17);
      int v62 = *v61;
      if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1405;
        _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating an internal microphone port", buf, 0x12u);
      }
      CFMutableStringRef v82 = 0;
      LOBYTE(v83) = 1;
      sub_E2930((uint64_t)&theString);
      if ((_BYTE)v74 && theString)
      {
        *(void *)buf = CFStringCreateMutableCopy(0, 0, theString);
        buf[8] = 1;
        sub_E29F8((uint64_t)&v82, (uint64_t)buf);
        sub_E2A54((uint64_t)buf);
        if (v82) {
          CFStringAppend(v82, @" ");
        }
      }
      else
      {
        v63 = (os_log_t *)sub_32A48(17);
        v64 = *v63;
        if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1415;
          _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not retrieve localized device name", buf, 0x12u);
        }
        *(void *)buf = CFStringCreateMutableCopy(0, 0, &stru_642048);
        buf[8] = 1;
        sub_E29F8((uint64_t)&v82, (uint64_t)buf);
        sub_E2A54((uint64_t)buf);
      }
      sub_23B86C((uint64_t)buf, 0x706D6269u);
      if (v82) {
        CFStringAppend(v82, *(CFStringRef *)buf);
      }
      sub_72924((uint64_t)buf);
      uint64_t v65 = sub_32A48(17);
      if (*(unsigned char *)(v65 + 8))
      {
        CFTypeRef v66 = *(NSObject **)v65;
        if (*(void *)v65)
        {
          if (os_log_type_enabled(*(os_log_t *)v65, OS_LOG_TYPE_DEBUG))
          {
            sub_21B7C(&v107, v82);
            v67 = v108 >= 0 ? &v107 : (long long *)v107;
            *(_DWORD *)buf = 136315650;
            *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1420;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v67;
            _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d Localized microphone name: '%s'", buf, 0x1Cu);
            if (SHIBYTE(v108) < 0) {
              operator delete((void *)v107);
            }
          }
        }
      }
      CFTypeRef v68 = CFRetain(v82);
      *(void *)&long long v107 = v68;
      BYTE8(v107) = 1;
      *(void *)buf = v68;
      buf[8] = 1;
      if (v68) {
        CFRetain(v68);
      }
      *(void *)&buf[16] = 0;
      buf[24] = 1;
      *(void *)&buf[32] = 0;
      buf[40] = 1;
      sub_72924((uint64_t)&v107);
      long long v107 = 0uLL;
      uint64_t v108 = 0;
      uint64_t v69 = sub_3EFF58();
      uint64_t v70 = operator new(0x260uLL);
      v70[1] = 0;
      v70[2] = 0;
      *uint64_t v70 = off_627CD0;
      *(void *)&long long v104 = CFStringCreateWithCString(0, "Built-In Microphone", 0x600u);
      BYTE8(v104) = 1;
      sub_45C748((uint64_t)(v70 + 3), (uint64_t)a1, (uint64_t)&v107, (uint64_t)buf, (uint64_t)&v104, v69);
      sub_72924((uint64_t)&v104);
      *(void *)&long long v103 = v70 + 3;
      *((void *)&v103 + 1) = v70;
      sub_56E64((uint64_t)&v103, v70 + 13, (uint64_t)(v70 + 3));
      long long v72 = v103;
      sub_436484((uint64_t)a1, (void ***)&v72);
      if (*((void *)&v72 + 1)) {
        sub_4636C(*((std::__shared_weak_count **)&v72 + 1));
      }
      sub_72924((uint64_t)&buf[32]);
      sub_72924((uint64_t)&buf[16]);
      sub_72924((uint64_t)buf);
      sub_E2A90((uint64_t)&theString);
      sub_E2A54((uint64_t)&v82);
    }
  }
}

void sub_1A09BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_64C9A0);
  if (*(void *)(v1 - 144)) {
    operator delete(*(void **)(v1 - 144));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1A0DC0(uint64_t a1)
{
  *(void *)&inAddress.mSelector = 0x6F7574706A61636BLL;
  inAddress.mElement = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64C970, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64C970))
  {
    AudioObjectID v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    byte_64C968 = AudioObjectHasProperty(v2, &inAddress) != 0;
    __cxa_guard_release(&qword_64C970);
  }
  return byte_64C968;
}

void sub_1A0E74(_Unwind_Exception *a1)
{
}

BOOL sub_1A0E8C(uint64_t a1)
{
  if (sub_8B774()) {
    return 0;
  }
  *(void *)&v6.mSelector = 0x696E70746A61636BLL;
  v6.mElement = 0;
  AudioObjectID v3 = &unk_64C000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64C980, memory_order_acquire) & 1) == 0)
  {
    int v4 = __cxa_guard_acquire(&qword_64C980);
    AudioObjectID v3 = (unsigned char *)&unk_64C000;
    if (v4)
    {
      AudioObjectID v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      byte_64C978 = AudioObjectHasProperty(v5, &v6) == 1;
      __cxa_guard_release(&qword_64C980);
      AudioObjectID v3 = &unk_64C000;
    }
  }
  return v3[2424] != 0;
}

void sub_1A0F5C(_Unwind_Exception *a1)
{
}

uint64_t sub_1A0F74(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64C9B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64C9B0))
  {
    BOOL v2 = sub_1A0DC0(a1) && sub_1A0E8C(a1) && MGGetSInt32Answer() == 1;
    byte_64C9A8 = v2;
    __cxa_guard_release(&qword_64C9B0);
  }
  return byte_64C9A8;
}

void sub_1A1018(_Unwind_Exception *a1)
{
}

void sub_1A1030(os_unfair_lock_s *a1)
{
  BOOL v2 = operator new(4uLL);
  *(void *)__p = v2;
  *BOOL v2 = 1885888867;
  *(void *)&__p[8] = v2 + 1;
  *(void *)&__p[16] = v2 + 1;
  strcpy(&__p[24], "cwdv");
  __p[32] = 0;
  LODWORD(v47) = 3;
  v49 = 0;
  uint64_t v50 = 0;
  float v48 = (uint64_t *)&v49;
  int v51 = 44739242;
  CFTypeRef cf = 0;
  sub_43637C(v44, (uint64_t)a1, (uint64_t)__p);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v49);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if (v45 >= 2)
  {
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      sub_4F64((uint64_t)&v41, a1 + 2);
      v21 = (__val & 0x8000000000000000) == 0 ? &v41 : (void **)v41;
      *(_DWORD *)__p = 136315650;
      *(void *)&__p[4] = "Device_Codec_Aspen.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 1638;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v21;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Encountered more than one Hearing Aid Compliance port in device %s\"", __p, 0x1Cu);
      if (SHIBYTE(__val) < 0) {
        operator delete(v41);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Encountered more than one Hearing Aid Compliance port in device %s");
  }
  if (v45)
  {
    sub_43F38(&v39, (uint64_t *)(v44[1] + 16), "", 1642);
    uint64_t v3 = v39;
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 152))(v39);
    (*(void (**)(uint64_t))(*(void *)v3 + 544))(v3);
    if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)v3 + 152))(v3))
    {
      AudioObjectID v5 = operator new(4uLL);
      *AudioObjectID v5 = 1886545251;
      *(void *)__p = v5;
      *(void *)&__p[8] = v5 + 1;
      *(void *)&__p[16] = v5 + 1;
      strcpy(&__p[24], "cwdv");
      __p[32] = 0;
      LODWORD(v47) = 3;
      v49 = 0;
      uint64_t v50 = 0;
      float v48 = (uint64_t *)&v49;
      int v51 = 44739242;
      CFTypeRef cf = 0;
      sub_43637C((uint64_t *)&v41, (uint64_t)a1, (uint64_t)__p);
      if (cf) {
        CFRelease(cf);
      }
      sub_463E0(v49);
      if (*(void *)__p)
      {
        *(void *)&__p[8] = *(void *)__p;
        operator delete(*(void **)__p);
      }
      if (__val != 1)
      {
        v23 = (os_log_t *)sub_32A48(13);
        uint64_t v24 = *v23;
        if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          std::to_string(&v38, __val);
          int v25 = SHIBYTE(v38.__r_.__value_.__r.__words[2]);
          std::string::size_type v26 = v38.__r_.__value_.__r.__words[0];
          sub_4F64((uint64_t)&v35, a1 + 2);
          uint64_t v27 = &v38;
          if (v25 < 0) {
            uint64_t v27 = (std::string *)v26;
          }
          if (v37 >= 0) {
            uint64_t v28 = &v35;
          }
          else {
            uint64_t v28 = v35;
          }
          *(_DWORD *)__p = 136315906;
          *(void *)&__p[4] = "Device_Codec_Aspen.cpp";
          *(_WORD *)&__p[12] = 1024;
          *(_DWORD *)&__p[14] = 1651;
          *(_WORD *)&__p[18] = 2080;
          *(void *)&__p[20] = v27;
          *(_WORD *)&__p[28] = 2080;
          *(void *)&__p[30] = v28;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Encountered %s receiver ports in device %s (expected 1)\"", __p, 0x26u);
          if (SHIBYTE(v37) < 0) {
            operator delete(v35);
          }
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
        }
        unsigned int v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v29, "Encountered %s receiver ports in device %s (expected 1)");
      }
      sub_43F38((uint64_t *)__p, (uint64_t *)(v42 + 16), "", 1656);
      if (v4) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = 1919443299;
      }
      (*(void (**)(void, uint64_t))(**(void **)__p + 104))(*(void *)__p, v6);
      if (*(void *)&__p[8]) {
        sub_4636C(*(std::__shared_weak_count **)&__p[8]);
      }
      uint64_t v33 = v3;
      v34 = v40;
      if (v40) {
        atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1A2D0C((uint64_t *)&v35, &v33);
      *(_DWORD *)__p = 1852011125;
      *(void *)&__p[8] = &__p[8];
      *(void *)&__p[16] = &__p[8];
      *(void *)&__p[24] = 0;
      uint64_t v7 = v37;
      if (v37)
      {
        AudioObjectID v9 = (void **)v35;
        AudioObjectID v8 = v36;
        uint64_t v10 = *v36;
        *(void *)(v10 + 8) = *((void *)v35 + 1);
        *v9[1] = v10;
        uint64_t v11 = *(void *)&__p[8];
        *(void *)(*(void *)&__p[8] + 8) = v8;
        *AudioObjectID v8 = v11;
        *(void *)&__p[8] = v9;
        v9[1] = &__p[8];
        *(void *)&__p[24] = v7;
        uint64_t v37 = 0;
      }
      sub_1A2D0C(&v30, (uint64_t *)(v42 + 16));
      *(_DWORD *)&__p[32] = 1886418288;
      uint64_t v47 = (uint64_t)&v47;
      float v48 = &v47;
      v49 = 0;
      uint64_t v12 = v32;
      if (v32)
      {
        uint64_t v14 = v30;
        uint64_t v13 = v31;
        uint64_t v15 = *v31;
        *(void *)(v15 + 8) = *(void *)(v30 + 8);
        **(void **)(v14 + 8) = v15;
        uint64_t v16 = v47;
        *(void *)(v47 + 8) = v13;
        *uint64_t v13 = v16;
        uint64_t v47 = v14;
        *(void *)(v14 + 8) = &v47;
        v49 = v12;
        v32 = 0;
      }
      sub_FB3C0((uint64_t)&v38, (unsigned int *)__p, 2);
      for (uint64_t i = 40; i != -24; i -= 32)
        sub_8108((uint64_t *)&__p[i]);
      sub_8108(&v30);
      sub_8108((uint64_t *)&v35);
      if (v34) {
        std::__shared_weak_count::__release_weak(v34);
      }
      BOOL v18 = (_DWORD *)sub_10FBF0();
      sub_110B44(v18, &v38, 0);
      sub_FB43C((void *)v38.__r_.__value_.__l.__size_);
      sub_8108((uint64_t *)&v41);
    }
    if (v40) {
      sub_4636C(v40);
    }
  }
  sub_8108(v44);
}

void sub_1A1630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_8108(&a26);
  if (a25) {
    sub_4636C(a25);
  }
  sub_8108(&a29);
  _Unwind_Resume(a1);
}

void sub_1A17A4(os_unfair_lock_s *a1)
{
  BOOL v2 = operator new(4uLL);
  *(void *)__p = v2;
  *BOOL v2 = 1886154613;
  *(void *)&__p[8] = v2 + 1;
  *(void *)&__p[16] = v2 + 1;
  strcpy(&__p[24], "cwdv");
  BYTE2(v22) = 0;
  LODWORD(v24) = 3;
  v26[0] = 0;
  v26[1] = 0;
  int v25 = v26;
  int v27 = 44739242;
  CFTypeRef cf = 0;
  sub_43637C((uint64_t *)v16, (uint64_t)a1, (uint64_t)__p);
  sub_FB288(&v18, v16);
  sub_8108((uint64_t *)v16);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v26[0]);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if (v20 != 1)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = v20;
        sub_2417C(v16, 0x706C6F75u);
        int v6 = v17;
        uint64_t v7 = (void **)v16[0];
        sub_4F64((uint64_t)v14, a1 + 2);
        AudioObjectID v8 = v16;
        if (v6 < 0) {
          AudioObjectID v8 = v7;
        }
        if (v15 >= 0) {
          AudioObjectID v9 = v14;
        }
        else {
          AudioObjectID v9 = (void **)v14[0];
        }
        *(_DWORD *)__p = 136316418;
        *(void *)&__p[4] = "Device_Codec_Aspen.cpp";
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = 1615;
        *(_WORD *)&__p[18] = 2048;
        *(void *)&__p[20] = v5;
        *(_WORD *)&__p[28] = 2080;
        uint64_t v22 = v8;
        __int16 v23 = 2080;
        uint64_t v24 = v9;
        LOWORD(v25) = 1024;
        *(_DWORD *)((char *)&v25 + 2) = 1;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Found %lu ports of type '%s' in device %s (looking for exactly %d)\"", __p, 0x36u);
        if (v15 < 0) {
          operator delete(v14[0]);
        }
        if (v17 < 0) {
          operator delete(v16[0]);
        }
      }
    }
  }
  for (uint64_t i = v19; i != &v18; uint64_t i = (uint64_t *)i[1])
  {
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)i[2] + 152))(i[2]);
    sub_18EB10(i[2]);
    if (v11 != (*(unsigned int (**)(uint64_t))(*(void *)i[2] + 152))(i[2]))
    {
      uint64_t v12 = (_DWORD *)sub_10FBF0();
      uint64_t v13 = (std::__shared_weak_count *)i[3];
      *(void *)__p = i[2];
      *(void *)&__p[8] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1106D8(v12, (uint64_t *)__p);
      if (v13) {
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  sub_B8E4(&v18);
}

void sub_1A1A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_B8E4(&a19);
  _Unwind_Resume(a1);
}

void *sub_1A1AE4(void *result, uint64_t a2)
{
  if (result == 1819176821)
  {
    if (!a2)
    {
      int v4 = (os_log_t *)sub_32A48(13);
      uint64_t v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v6 = 136315394;
          uint64_t v7 = "Device_Codec_Aspen.cpp";
          __int16 v8 = 1024;
          int v9 = 1587;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"IAPManager passed clientData as NULL.\"", (uint8_t *)&v6, 0x12u);
        }
      }
    }
    uint64_t v3 = (void *)(a2 + 512);
    result = (void *)sub_1A1BE4(v3, (uint64_t)&qword_64C8B8);
    if (result) {
      return sub_1A1D20(v3, (unsigned int *)&qword_64C8B8);
    }
  }
  return result;
}

BOOL sub_1A1BE4(void *a1, uint64_t a2)
{
  uint64_t v12 = a1;
  char v13 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  int v4 = a1 + 12;
  uint64_t v5 = (void *)a1[12];
  if (!v5) {
    goto LABEL_10;
  }
  int v6 = a1 + 12;
  do
  {
    uint64_t v7 = a1[17];
    if (!v7) {
      goto LABEL_12;
    }
    int v8 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v7 + 48))(v7, v5 + 4, a2);
    int v9 = v5 + 1;
    if (!v8)
    {
      int v9 = v5;
      int v6 = v5;
    }
    uint64_t v5 = (void *)*v9;
  }
  while (*v9);
  if (v4 == v6) {
    goto LABEL_10;
  }
  uint64_t v10 = a1[17];
  if (!v10) {
LABEL_12:
  }
    sub_56964();
  if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 48))(v10, a2, v6 + 4)) {
LABEL_10:
  }
    int v6 = a1 + 12;
  sub_3BCAC(&v12);
  return v4 != v6;
}

void sub_1A1D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void *sub_1A1D20(void *a1, unsigned int *a2)
{
  sub_1A26DC(&v70);
  __p = a1;
  char v63 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (&v70 != a1 + 11)
  {
    sub_1A2ADC((uint64_t)buf, (uint64_t)(a1 + 14));
    uint64_t v3 = *(void **)&buf[24];
    if (*(unsigned char **)&buf[24] == buf)
    {
      if (v74 == v73)
      {
        (*(void (**)(unsigned char *, void **))(*(void *)buf + 24))(buf, v75);
        (*(void (**)(void))(**(void **)&buf[24] + 32))(*(void *)&buf[24]);
        *(void *)&buf[24] = 0;
        (*(void (**)(void *, unsigned char *))(*v74 + 24))(v74, buf);
        (*(void (**)(void *))(*v74 + 32))(v74);
        uint64_t v74 = 0;
        *(void *)&buf[24] = buf;
        (*((void (**)(void **, void *))v75[0] + 3))(v75, v73);
        (*((void (**)(void **))v75[0] + 4))(v75);
      }
      else
      {
        (*(void (**)(unsigned char *, void *))(*(void *)buf + 24))(buf, v73);
        (*(void (**)(void))(**(void **)&buf[24] + 32))(*(void *)&buf[24]);
        *(void *)&buf[24] = v74;
      }
      uint64_t v74 = v73;
    }
    else if (v74 == v73)
    {
      (*(void (**)(void *, unsigned char *))(v73[0] + 24))(v73, buf);
      (*(void (**)(void *))(*v74 + 32))(v74);
      uint64_t v74 = *(void **)&buf[24];
      *(void *)&buf[24] = buf;
    }
    else
    {
      *(void *)&buf[24] = v74;
      uint64_t v74 = v3;
    }
    sub_1A2900(buf);
    int v4 = (void *)a1[11];
    uint64_t v5 = a1 + 12;
    if (v72)
    {
      int v6 = v70;
      v71[2] = 0;
      uint64_t v70 = &v71;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      if (v6[1]) {
        uint64_t v7 = (uint64_t)v6[1];
      }
      else {
        uint64_t v7 = (uint64_t)v6;
      }
      *(void *)buf = &v70;
      *(void *)&buf[8] = v7;
      *(void *)&buf[16] = v7;
      if (!v7 || (*(void *)&buf[8] = sub_6CA9C(v7), v4 == v5))
      {
        unsigned int v29 = v4;
      }
      else
      {
        do
        {
          uint64_t v8 = v4[4];
          *(_DWORD *)(v7 + 40) = *((_DWORD *)v4 + 10);
          *(void *)(v7 + 32) = v8;
          if ((void *)v7 != v4)
          {
            int v9 = v4 + 6;
            uint64_t v10 = (void *)(v7 + 48);
            uint64_t v11 = v4[7];
            for (uint64_t i = *(void **)(v7 + 56); ; uint64_t i = (void *)i[1])
            {
              BOOL v13 = (void *)v11 == v9 || i == v10;
              if (v13) {
                break;
              }
              uint64_t v14 = *(void *)(v11 + 16);
              *((_DWORD *)i + 6) = *(_DWORD *)(v11 + 24);
              i[2] = v14;
              *((_OWORD *)i + 2) = *(_OWORD *)(v11 + 32);
              uint64_t v11 = *(void *)(v11 + 8);
            }
            if (i == v10)
            {
              if ((void *)v11 != v9)
              {
                uint64_t v18 = operator new(0x30uLL);
                uint64_t v19 = v18;
                *uint64_t v18 = 0;
                v18[1] = 0;
                uint64_t v20 = *(void *)(v11 + 16);
                *((_DWORD *)v18 + 6) = *(_DWORD *)(v11 + 24);
                v18[2] = v20;
                *((_OWORD *)v18 + 2) = *(_OWORD *)(v11 + 32);
                uint64_t v21 = *(void *)(v11 + 8);
                if ((void *)v21 == v9)
                {
                  uint64_t v22 = 1;
                }
                else
                {
                  uint64_t v22 = 1;
                  __int16 v23 = v18;
                  do
                  {
                    uint64_t v18 = operator new(0x30uLL);
                    *uint64_t v18 = v23;
                    v18[1] = 0;
                    uint64_t v24 = *(void *)(v21 + 16);
                    *((_DWORD *)v18 + 6) = *(_DWORD *)(v21 + 24);
                    v18[2] = v24;
                    *((_OWORD *)v18 + 2) = *(_OWORD *)(v21 + 32);
                    v23[1] = v18;
                    ++v22;
                    uint64_t v21 = *(void *)(v21 + 8);
                    __int16 v23 = v18;
                  }
                  while ((void *)v21 != v9);
                }
                uint64_t v25 = *(void *)(v7 + 48);
                *(void *)(v25 + 8) = v19;
                *uint64_t v19 = v25;
                *(void *)(v7 + 48) = v18;
                v18[1] = v10;
                *(void *)(v7 + 64) += v22;
              }
            }
            else
            {
              uint64_t v15 = *(void *)(v7 + 48);
              uint64_t v16 = *i;
              *(void *)(v16 + 8) = *(void *)(v15 + 8);
              **(void **)(v15 + 8) = v16;
              do
              {
                char v17 = (void *)i[1];
                --*(void *)(v7 + 64);
                operator delete(i);
                uint64_t i = v17;
              }
              while (v17 != v10);
            }
            uint64_t v7 = *(void *)&buf[16];
          }
          std::string::size_type v26 = sub_1A2984((uint64_t)&v70, v75, v7 + 32);
          int v27 = v75[0];
          *(void *)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
          *(void *)(v7 + 16) = v27;
          uint64_t *v26 = v7;
          if (*v70)
          {
            uint64_t v70 = (uint64_t **)*v70;
            uint64_t v7 = *v26;
          }
          sub_46D00(v71, (uint64_t *)v7);
          ++v72;
          *(void *)&buf[16] = *(void *)&buf[8];
          if (*(void *)&buf[8]) {
            *(void *)&buf[8] = sub_6CA9C(*(uint64_t *)&buf[8]);
          }
          uint64_t v28 = (void *)v4[1];
          if (v28)
          {
            do
            {
              unsigned int v29 = v28;
              uint64_t v28 = (void *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              unsigned int v29 = (void *)v4[2];
              BOOL v13 = *v29 == (void)v4;
              int v4 = v29;
            }
            while (!v13);
          }
          uint64_t v7 = *(void *)&buf[16];
          if (*(void *)&buf[16]) {
            BOOL v30 = v29 == v5;
          }
          else {
            BOOL v30 = 1;
          }
          int v4 = v29;
        }
        while (!v30);
      }
      sub_1A2A34((uint64_t)buf);
      int v4 = v29;
    }
    if (v4 != v5)
    {
      do
      {
        uint64_t v31 = (uint64_t *)operator new(0x48uLL);
        v32 = v31;
        *(void *)buf = v31;
        *(void *)&buf[8] = &v71;
        buf[16] = 0;
        int v33 = *((_DWORD *)v4 + 10);
        v31[4] = v4[4];
        uint64_t v34 = (uint64_t)(v31 + 4);
        *((_DWORD *)v31 + 10) = v33;
        v35 = (char *)(v31 + 6);
        v31[6] = (uint64_t)(v31 + 6);
        v31[7] = (uint64_t)(v31 + 6);
        v31[8] = 0;
        uint64_t v36 = v4[7];
        if ((void *)v36 != v4 + 6)
        {
          uint64_t v37 = 1;
          std::string v38 = (char *)(v31 + 6);
          do
          {
            uint64_t v39 = operator new(0x30uLL);
            uint64_t v40 = *(void *)(v36 + 16);
            v39[6] = *(_DWORD *)(v36 + 24);
            *((void *)v39 + 2) = v40;
            *((_OWORD *)v39 + 2) = *(_OWORD *)(v36 + 32);
            *(void *)uint64_t v39 = v38;
            *((void *)v39 + 1) = v35;
            *((void *)v38 + 1) = v39;
            v32[6] = (uint64_t)v39;
            v32[8] = v37;
            uint64_t v36 = *(void *)(v36 + 8);
            ++v37;
            std::string v38 = (char *)v39;
          }
          while ((void *)v36 != v4 + 6);
        }
        buf[16] = 1;
        v41 = (uint64_t **)sub_1A2984((uint64_t)&v70, v75, v34);
        uint64_t v42 = v75[0];
        uint64_t *v32 = 0;
        v32[1] = 0;
        v32[2] = (uint64_t)v42;
        void *v41 = v32;
        if (*v70)
        {
          uint64_t v70 = (uint64_t **)*v70;
          v32 = *v41;
        }
        sub_46D00(v71, v32);
        ++v72;
        *(void *)buf = 0;
        sub_1A2A84((uint64_t)buf);
        v43 = (void *)v4[1];
        if (v43)
        {
          do
          {
            v44 = v43;
            v43 = (void *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            v44 = (void *)v4[2];
            BOOL v13 = *v44 == (void)v4;
            int v4 = v44;
          }
          while (!v13);
        }
        int v4 = v44;
      }
      while (v44 != v5);
    }
  }
  sub_3BCAC(&__p);
  uint64_t v45 = sub_32A48(13);
  if (*(unsigned char *)(v45 + 8))
  {
    v46 = *(NSObject **)v45;
    if (*(void *)v45)
    {
      if (os_log_type_enabled(*(os_log_t *)v45, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(v75, *a2);
        int v47 = v76;
        float v48 = (void **)v75[0];
        sub_2417C(&__p, a2[1]);
        v49 = v75;
        if (v47 < 0) {
          v49 = v48;
        }
        if (v64 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        unsigned int v51 = a2[1];
        unsigned int v52 = a2[2];
        *(_DWORD *)buf = 136316418;
        *(void *)&buf[4] = "StandardUtilities.h";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 912;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v49;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = p_p;
        __int16 v66 = 1024;
        unsigned int v67 = v51;
        __int16 v68 = 1024;
        unsigned int v69 = v52;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to execute trigger (mSelector: '%s'; mScope: '%s' / %u; mElement: %u)",
          buf,
          0x32u);
        if (v64 < 0) {
          operator delete(__p);
        }
        if (v76 < 0) {
          operator delete(v75[0]);
        }
      }
    }
  }
  AudioObjectPropertyAddress v53 = (uint64_t **)sub_1A27D0((uint64_t)&v70, (uint64_t)a2);
  if (&v71 == v53)
  {
    int v57 = (os_log_t *)sub_32A48(13);
    v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v75, *a2);
      if (v76 >= 0) {
        long long v59 = v75;
      }
      else {
        long long v59 = (void **)v75[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = "StandardUtilities.h";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 918;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v59;
      _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"The trigger address %s was never registered with the relay map.\"", buf, 0x1Cu);
      if (v76 < 0) {
        operator delete(v75[0]);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "The trigger address %s was never registered with the relay map.");
  }
  char v54 = (uint64_t *)(v53 + 6);
  for (j = v53[7]; j != v54; j = (uint64_t *)j[1])
    ((void (*)(void, uint64_t, uint64_t *, uint64_t))j[4])(0, 1, j + 2, j[5]);
  sub_1A28AC(v71);
  return sub_1A2900(v73);
}

void sub_1A25E8()
{
  if (*(char *)(v0 - 97) < 0) {
    operator delete(*(void **)(v0 - 120));
  }
  JUMPOUT(0x1A26C0);
}

void sub_1A2604()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x1A26C0);
}

void sub_1A261C()
{
}

void sub_1A264C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      BOOL v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x1A26D4);
}

void sub_1A2678()
{
}

void sub_1A268C(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x1A26D4);
}

void sub_1A269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_1A28AC(a15);
  sub_1A2900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1A26DC(void *a1)
{
  v5[0] = off_6409E8;
  v5[3] = v5;
  v3[3] = v3;
  sub_1A2BB0((uint64_t)v5, v3);
  sub_1A2900(v5);
  sub_1A2ADC((uint64_t)v4, (uint64_t)v3);
  a1[1] = 0;
  a1[2] = 0;
  sub_1A2ADC((uint64_t)(a1 + 3), (uint64_t)v4);
  *a1 = a1 + 1;
  sub_1A2900(v4);
  sub_1A2900(v3);
  return a1;
}

void sub_1A27AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1A2900((uint64_t *)va1);
  sub_1A2900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1A27D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v6 = (void *)(a1 + 8);
  do
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (!v7) {
      goto LABEL_12;
    }
    int v8 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v7 + 48))(v7, v3 + 4, a2);
    int v9 = v3 + 1;
    if (!v8)
    {
      int v9 = v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v9;
  }
  while (*v9);
  if (v2 == v6) {
    return v2;
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (!v10) {
LABEL_12:
  }
    sub_56964();
  if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 48))(v10, a2, v6 + 4)) {
    return v2;
  }
  return v6;
}

void sub_1A28AC(void *a1)
{
  if (a1)
  {
    sub_1A28AC(*a1);
    sub_1A28AC(a1[1]);
    sub_45F50(a1 + 6);
    operator delete(a1);
  }
}

void *sub_1A2900(void *a1)
{
  BOOL v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1A2984(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (!v7) {
LABEL_9:
    }
      sub_56964();
    uint64_t v5 = v4;
    while (1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(*(void *)v7 + 48))(v7, a3, v5 + 4))
      {
        int v9 = (void *)*v5;
        result = v5;
        if (!*v5) {
          goto LABEL_12;
        }
      }
      else
      {
        int v9 = (void *)v5[1];
        if (!v9)
        {
          result = v5 + 1;
          goto LABEL_12;
        }
      }
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v5 = v9;
      if (!v7) {
        goto LABEL_9;
      }
    }
  }
  result = (void *)(a1 + 8);
LABEL_12:
  *a2 = v5;
  return result;
}

uint64_t sub_1A2A34(uint64_t a1)
{
  sub_1A28AC(*(void **)(a1 + 16));
  BOOL v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        BOOL v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1A28AC(v2);
  }
  return a1;
}

void sub_1A2A84(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_45F50(v1 + 6);
    }
    operator delete(v1);
  }
}

uint64_t sub_1A2ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

BOOL sub_1A2B74(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3 = a2[1];
  unsigned int v4 = a3[1];
  BOOL v5 = v3 >= v4;
  if (v3 == v4)
  {
    BOOL v5 = *a2 >= *a3;
    if (*a2 == *a3) {
      BOOL v5 = a2[2] >= a3[2];
    }
  }
  return !v5;
}

void sub_1A2BB0(uint64_t a1, void *a2)
{
  *a2 = off_6409E8;
}

void *sub_1A2BD0()
{
  result = operator new(0x10uLL);
  void *result = off_6409E8;
  return result;
}

void sub_1A2C08()
{
}

void sub_1A2C20(int a1, os_unfair_lock_s *a2)
{
  if (!a2)
  {
    unsigned int v4 = (os_log_t *)sub_32A48(13);
    BOOL v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        uint64_t v7 = "Device_Codec_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 1564;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"IAPManager passed clientData as NULL.\"", (uint8_t *)&v6, 0x12u);
      }
    }
  }
  if (a1 == 1819176821) {
    sub_1A17A4(a2);
  }
}

uint64_t *sub_1A2D0C(uint64_t *a1, uint64_t *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  sub_3590(a1, *a2, a2[1]);
  return a1;
}

void sub_1A2D44(_Unwind_Exception *a1)
{
  sub_8108(v1);
  _Unwind_Resume(a1);
}

void sub_1A2D58(os_unfair_lock_s *a1)
{
  if (!a1)
  {
    BOOL v2 = (os_log_t *)sub_32A48(13);
    unsigned int v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        BOOL v5 = "Device_Codec_Aspen.cpp";
        __int16 v6 = 1024;
        int v7 = 1630;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"SystemSettingsManager passed clientData as NULL.\"", (uint8_t *)&v4, 0x12u);
      }
    }
  }
  sub_1A1030(a1);
}

void *sub_1A2E28(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_46BB4(a1, a3);
    __int16 v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_1A2E90(_Unwind_Exception *exception_object)
{
  unsigned int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A2EAC(unsigned int **a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t a6, char *__src)
{
  if (a2 != a3)
  {
    uint64_t v12 = a4;
    if (a4 != a5)
    {
      BOOL v13 = a2;
      uint64_t v35 = a6 + 16;
      do
      {
        unsigned int v14 = *v13;
        if (*v13 >= *v12)
        {
          if (*v12 >= v14)
          {
            uint64_t v15 = *(char **)(a6 + 8);
            unint64_t v16 = *(void *)(a6 + 16);
            if ((unint64_t)v15 >= v16)
            {
              uint64_t v20 = *(char **)a6;
              unint64_t v21 = ((uint64_t)&v15[-*(void *)a6] >> 2) + 1;
              if (v21 >> 62) {
                sub_60548();
              }
              unint64_t v22 = v16 - (void)v20;
              unint64_t v23 = (uint64_t)(v16 - (void)v20) >> 1;
              if (v23 > v21) {
                unint64_t v21 = v23;
              }
              if (v22 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v24 = v21;
              }
              uint64_t v40 = v35;
              if (v24)
              {
                std::string::size_type v26 = (char *)sub_46BF4(v24);
              }
              else
              {
                std::string::size_type v26 = 0;
                uint64_t v25 = 0;
              }
              uint64_t v28 = __src - v20;
              uint64_t v29 = (__src - v20) >> 2;
              BOOL v30 = &v26[4 * v29];
              __p = v26;
              uint64_t v37 = v30;
              uint64_t v39 = &v26[4 * v25];
              if (v29 == v25)
              {
                if (v28 < 1)
                {
                  if (v20 == __src) {
                    unint64_t v32 = 1;
                  }
                  else {
                    unint64_t v32 = v28 >> 1;
                  }
                  int v33 = (char *)sub_46BF4(v32);
                  BOOL v30 = &v33[v32 & 0xFFFFFFFFFFFFFFFCLL];
                  __p = v33;
                  uint64_t v37 = v30;
                  uint64_t v39 = &v33[4 * v34];
                  if (v26) {
                    operator delete(v26);
                  }
                }
                else
                {
                  if (v29 >= -1) {
                    unint64_t v31 = v29 + 1;
                  }
                  else {
                    unint64_t v31 = v29 + 2;
                  }
                  v30 -= 4 * (v31 >> 1);
                  uint64_t v37 = v30;
                }
              }
              *(_DWORD *)BOOL v30 = *v13;
              std::string v38 = v30 + 4;
              __src = sub_1A310C((void **)a6, (uint64_t)&__p, __src);
              if (__p) {
                operator delete(__p);
              }
            }
            else if (__src == v15)
            {
              *(_DWORD *)__src = v14;
              *(void *)(a6 + 8) = __src + 4;
            }
            else
            {
              char v17 = v15 - 4;
              uint64_t v18 = *(_DWORD **)(a6 + 8);
              while (v17 < v15)
              {
                int v19 = *(_DWORD *)v17;
                v17 += 4;
                *v18++ = v19;
              }
              *(void *)(a6 + 8) = v18;
              if (v15 != __src + 4) {
                memmove(&v15[-4 * ((v15 - (__src + 4)) >> 2)], __src, v15 - (__src + 4));
              }
              int v27 = v13;
              if (__src <= (char *)v13) {
                int v27 = &v13[*(void *)(a6 + 8) > (unint64_t)v13];
              }
              *(_DWORD *)__src = *v27;
            }
            __src += 4;
            ++v13;
          }
          ++v12;
        }
        else
        {
          ++v13;
        }
      }
      while (v13 != a3 && v12 != a5);
    }
  }
  *a1 = a3;
  a1[1] = a5;
  a1[2] = (unsigned int *)a6;
  a1[3] = (unsigned int *)__src;
}

void sub_1A30F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1A310C(void **a1, uint64_t a2, char *__src)
{
  BOOL v5 = *(char **)(a2 + 8);
  __int16 v6 = (char *)*a1;
  int v7 = v5;
  if (*a1 != __src)
  {
    __int16 v8 = __src;
    int v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    int v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  BOOL v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unsigned int v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

BOOL sub_1A31D4()
{
  uint64_t v0 = sub_298DA4();
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 40))(v0) == 543711587;
}

void sub_1A3228(uint64_t a1, void *a2)
{
  *a2 = off_625F68;
}

void *sub_1A3248()
{
  result = operator new(0x10uLL);
  void *result = off_625F68;
  return result;
}

void sub_1A3280()
{
}

uint64_t sub_1A329C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1A32C0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63F980;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1A3314(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63F980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unsigned char *sub_1A3334(unsigned char *a1, uint64_t a2, CFStringRef *a3)
{
  *(void *)int v7 = qword_64C868;
  *(void *)((char *)&v7[1] + 1) = *(uint64_t *)((char *)&qword_64C868 + 5);
  sub_46A4C(v8, (uint64_t)&unk_64C878);
  __int16 v9 = word_64C890;
  sub_18EC78(a1, v7, a2, a3);
  sub_463E0((void *)v8[1]);
  return a1;
}

void sub_1A33BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

uint64_t sub_1A33D4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1A33F8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_640A80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1A344C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_640A80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1A346C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  qmemcpy(v17, "ottpiwcpttpe", sizeof(v17));
  char v18 = 1;
  sub_46A4C(v19, (uint64_t)&unk_64C818);
  __int16 v20 = v20 & 0xF800 | 0x416;
  memset(v16, 0, sizeof(v16));
  qmemcpy(v9, "ottpiwcpttpe", sizeof(v9));
  char v10 = 1;
  sub_46A4C(v11, (uint64_t)&unk_64C818);
  __int16 v12 = v12 & 0xF800 | 0x416;
  sub_105048((uint64_t)v13, *(unsigned int *)v9);
  CFStringRef v7 = CFStringCreateWithCString(0, "TTY Output", 0x600u);
  char v8 = 1;
  sub_17301C((void *)a1, (uint64_t *)v17, a2, (uint64_t)v16, (uint64_t)v13, (uint64_t)&v7, a3);
  sub_72924((uint64_t)&v7);
  sub_72924((uint64_t)&v15);
  sub_72924((uint64_t)&v14);
  sub_72924((uint64_t)v13);
  sub_463E0((void *)v11[1]);
  sub_463E0((void *)v19[1]);
  *(void *)a1 = off_641078;
  *(unsigned char *)(a1 + 520) = 0;
  return a1;
}

void sub_1A35E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  char v10 = va_arg(va1, void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_72924((uint64_t)va);
  sub_78FF8((uint64_t)va1);
  sub_463E0(v10);
  sub_463E0(*(void **)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1A3624(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(a1 + 520) = a2 & a3;
  sub_D26B4(a1);
}

uint64_t sub_1A3630(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

void sub_1A3638(void *a1)
{
  *a1 = off_641078;
  sub_103C0C((uint64_t)a1);

  operator delete();
}

uint64_t sub_1A368C(uint64_t a1)
{
  *(void *)a1 = off_641078;
  return sub_103C0C(a1);
}

uint64_t sub_1A36B0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1A36D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_641040;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1A3728(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_641040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1A3748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  qmemcpy(v17, "ittpiwcpttpe", sizeof(v17));
  char v18 = 1;
  sub_46A4C(v19, (uint64_t)&unk_64C818);
  __int16 v20 = v20 & 0xF800 | 0x417;
  memset(v16, 0, sizeof(v16));
  qmemcpy(v9, "ittpiwcpttpe", sizeof(v9));
  char v10 = 1;
  sub_46A4C(v11, (uint64_t)&unk_64C818);
  __int16 v12 = v12 & 0xF800 | 0x417;
  sub_105048((uint64_t)v13, *(unsigned int *)v9);
  CFStringRef v7 = CFStringCreateWithCString(0, "TTY Input", 0x600u);
  char v8 = 1;
  sub_17301C((void *)a1, (uint64_t *)v17, a2, (uint64_t)v16, (uint64_t)v13, (uint64_t)&v7, a3);
  sub_72924((uint64_t)&v7);
  sub_72924((uint64_t)&v15);
  sub_72924((uint64_t)&v14);
  sub_72924((uint64_t)v13);
  sub_463E0((void *)v11[1]);
  sub_463E0((void *)v19[1]);
  *(void *)a1 = off_640BD0;
  *(unsigned char *)(a1 + 520) = 0;
  return a1;
}

void sub_1A38BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  char v10 = va_arg(va1, void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_72924((uint64_t)va);
  sub_78FF8((uint64_t)va1);
  sub_463E0(v10);
  sub_463E0(*(void **)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1A3900(uint64_t a1, char a2, char a3)
{
  *(unsigned char *)(a1 + 520) = a2 & a3;
  sub_D26B4(a1);
}

uint64_t sub_1A390C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

void sub_1A3914(void *a1)
{
  *a1 = off_640BD0;
  sub_103C0C((uint64_t)a1);

  operator delete();
}

uint64_t sub_1A3968(uint64_t a1)
{
  *(void *)a1 = off_640BD0;
  return sub_103C0C(a1);
}

uint64_t sub_1A398C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1A39B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_640B98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1A3A04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_640B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1A3A28(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1A3A4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_640B60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1A3AA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_640B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1A3AC4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1A3AE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_640AF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1A3B3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_640AF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1A3B60(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1A3B84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_640B28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1A3BD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_640B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

double sub_1A3BF8(AudioObjectID a1, AudioObjectPropertyElement a2)
{
  if (!a1)
  {
    char v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      inAddress.mSelector = 136315394;
      *(void *)&inAddress.mScope = "Device_Codec_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 132;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&inAddress, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  double outData = 0.0;
  double v15 = 0.0;
  *(void *)&inAddress.mSelector = 0x6F75747076646223;
  inAddress.mElement = a2;
  UInt32 ioDataSize = 16;
  if (AudioObjectHasProperty(a1, &inAddress)) {
    AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  }
  switch(a2)
  {
    case 1u:
      double v8 = 2.0;
      double v5 = outData;
      if (v15 <= 2.0) {
        double v8 = v15;
      }
      double v15 = v8;
      double v6 = -76.0;
      goto LABEL_14;
    case 2u:
      double v9 = v15;
      if (v15 > 0.0) {
        double v9 = 0.0;
      }
      double v15 = v9;
      double result = -58.0;
      if (outData >= -58.0) {
        double result = outData;
      }
      break;
    case 3u:
    case 5u:
      double v4 = 2.0;
      double v5 = outData;
      if (v15 <= 2.0) {
        double v4 = v15;
      }
      double v15 = v4;
      double v6 = -58.0;
LABEL_14:
      double result = v6;
      if (v5 >= v6) {
        double result = v5;
      }
      break;
    case 4u:
      double result = outData;
      if (outData < -58.0) {
        double result = -58.0;
      }
      break;
    default:
      double result = outData;
      break;
  }
  return result;
}

void sub_1A3DF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A3E28(uint64_t a1, double a2)
{
  double v19 = a2;
  uint64_t v4 = sub_42FD90(a1, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  uint64_t v17 = 0x676C6F62616F7372;
  int v18 = 0;
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = v5;
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v17))
    {
      uint64_t v8 = sub_32A48(17);
      uint64_t v9 = sub_32A48(36);
      char v10 = 0;
      uint64_t v11 = 0;
      *(void *)buf = 0x100000002;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *(int *)&buf[4 * v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1;
        if (v14) {
          goto LABEL_13;
        }
      }
      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_13:
      double v15 = *(NSObject **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = "Device_Codec_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 915;
        __int16 v23 = 2048;
        double v24 = a2;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Informing AOP of Codec sample rate %f Hz", buf, 0x1Cu);
      }
      (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, double *))(*(void *)v7 + 48))(v7, &v17, 0, 0, 8, &v19);
    }
  }
  return v4;
}

void sub_1A402C(uint64_t a1)
{
  uint64_t v2 = sub_298DA4();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *)))(*(void *)v2 + 56))(v2, sub_1A2D58);
  if (sub_19D610(a1))
  {
    unsigned int v3 = (void *)sub_23EE78();
    sub_23F948(v3, 1819176821, (unint64_t)sub_1A1AE4);
    uint64_t v4 = (uint64_t **)sub_23EE78();
    sub_23F288(v4, (unint64_t)sub_1A2C20);
  }
  uint64_t v5 = *(uint64_t **)(a1 + 496);
  if (v5)
  {
    sub_257BD0(v5);
    uint64_t v6 = *(void *)(a1 + 496);
    *(void *)(a1 + 496) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }

  sub_430D98(a1);
}

BOOL sub_1A4118(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_64C898 && a2->mElement == dword_64C8A0
    || *(void *)&a2->mSelector == qword_64C8A8 && a2->mElement == dword_64C8B0
    || *(void *)&a2->mSelector == qword_64C8B8 && a2->mElement == dword_64C8C0)
  {
    uint64_t v8 = *(void *)&a2->mSelector;
    uint64_t v13 = a4;
    uint64_t v14 = v8;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v10 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v11 = a2->mElement;
    uint64_t v12 = a3;
    sub_1A4260((void *)(a1 + 512), (unsigned int *)&v14, (uint64_t)&v10);
    return 1;
  }
  else
  {
    sub_50848((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }
}

unsigned char *sub_1A4260(void *a1, unsigned int *a2, uint64_t a3)
{
  v46 = a1;
  char v47 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v6 = sub_32A48(13);
  if (*(unsigned char *)(v6 + 8))
  {
    uint64_t v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(v44, *(_DWORD *)a3);
        if (v45 >= 0) {
          uint64_t v8 = v44;
        }
        else {
          uint64_t v8 = (void **)v44[0];
        }
        sub_2417C(v42, *(_DWORD *)(a3 + 4));
        if (v43 >= 0) {
          uint64_t v9 = v42;
        }
        else {
          uint64_t v9 = (void **)v42[0];
        }
        int v10 = *(_DWORD *)(a3 + 4);
        int v35 = *(_DWORD *)(a3 + 8);
        uint64_t v36 = *(void *)(a3 + 16);
        uint64_t v37 = *(void *)(a3 + 24);
        sub_2417C(v40, *a2);
        int v11 = v41;
        uint64_t v12 = (void **)v40[0];
        sub_2417C(__p, a2[1]);
        uint64_t v13 = v40;
        if (v11 < 0) {
          uint64_t v13 = v12;
        }
        if (v39 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        unsigned int v15 = a2[1];
        unsigned int v16 = a2[2];
        *(_DWORD *)buf = 136317954;
        v49 = "StandardUtilities.h";
        __int16 v50 = 1024;
        int v51 = 870;
        __int16 v52 = 2080;
        AudioObjectPropertyAddress v53 = v8;
        __int16 v54 = 2080;
        uint64_t v55 = v9;
        __int16 v56 = 1024;
        int v57 = v10;
        __int16 v58 = 1024;
        int v59 = v35;
        __int16 v60 = 2048;
        uint64_t v61 = v36;
        __int16 v62 = 2048;
        uint64_t v63 = v37;
        __int16 v64 = 2080;
        uint64_t v65 = v13;
        __int16 v66 = 2080;
        unsigned int v67 = v14;
        __int16 v68 = 1024;
        unsigned int v69 = v15;
        __int16 v70 = 1024;
        unsigned int v71 = v16;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to unregister ClientCallbackInfo (mAddress.mSelector: '%s'; mAddress.mScope: '%s' / %u; m"
          "Address.mElement: %u; mProc: %p; mData: %p) for trigger (mSelector: '%s'; mScope: '%s' / %u; mElement: %u)",
          buf,
          0x66u);
        if (v39 < 0) {
          operator delete(__p[0]);
        }
        if (v41 < 0) {
          operator delete(v40[0]);
        }
        if (v43 < 0) {
          operator delete(v42[0]);
        }
        if (v45 < 0) {
          operator delete(v44[0]);
        }
      }
    }
  }
  uint64_t v17 = (uint64_t **)(a1 + 11);
  int v18 = sub_1A27D0((uint64_t)(a1 + 11), (uint64_t)a2);
  double v19 = v18;
  if (a1 + 12 == v18)
  {
    unint64_t v32 = (os_log_t *)sub_32A48(13);
    int v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v49 = "StandardUtilities.h";
      __int16 v50 = 1024;
      int v51 = 873;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to unregister with an unknown trigger address.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to unregister with an unknown trigger address.");
  }
  __int16 v20 = v18 + 6;
  for (uint64_t i = (uint64_t *)v18[7]; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == v20) {
      goto LABEL_40;
    }
    if (sub_1A4778((uint64_t)(i + 2), a3)) {
      break;
    }
  }
  if (i == v20)
  {
LABEL_40:
    uint64_t v29 = (os_log_t *)sub_32A48(13);
    BOOL v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v49 = "StandardUtilities.h";
      __int16 v50 = 1024;
      int v51 = 875;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to unregister with a trigger address for which the ClientCallbackInfo has never been registered.\"", buf, 0x12u);
    }
    unint64_t v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v31, "Attempt to unregister with a trigger address for which the ClientCallbackInfo has never been registered.");
  }
  uint64_t v22 = *i;
  *(void *)(v22 + 8) = i[1];
  *(void *)i[1] = v22;
  --v19[8];
  operator delete(i);
  if (!v19[8])
  {
    __int16 v23 = (uint64_t *)v19[1];
    if (v23)
    {
      do
      {
        double v24 = v23;
        __int16 v23 = (uint64_t *)*v23;
      }
      while (v23);
    }
    else
    {
      uint64_t v25 = v19;
      do
      {
        double v24 = (uint64_t *)v25[2];
        BOOL v26 = *v24 == (void)v25;
        uint64_t v25 = v24;
      }
      while (!v26);
    }
    if (*v17 == v19) {
      *uint64_t v17 = v24;
    }
    int v27 = (uint64_t *)a1[12];
    --a1[13];
    sub_89144(v27, v19);
    sub_45F50(v19 + 6);
    operator delete(v19);
  }
  return sub_3BCAC(&v46);
}

void sub_1A46F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_3BCAC(&a34);
  _Unwind_Resume(a1);
}

BOOL sub_1A4778(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)a1 == *(_DWORD *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(void *)(a1 + 16) == *(void *)(a2 + 16)
      && *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

BOOL sub_1A47D4(void *a1, uint64_t a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void **)a2;
      int v14 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v13);
      int v11 = v17 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      __int16 v19 = 1024;
      *(_DWORD *)__int16 v20 = 740;
      *(_WORD *)&v20[4] = 2080;
      *(void *)&v20[6] = v11;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v17 < 0) {
        operator delete(__p);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (*(void *)a2 == qword_64C898 && *(_DWORD *)(a2 + 8) == dword_64C8A0
    || *(void *)a2 == qword_64C8A8 && *(_DWORD *)(a2 + 8) == dword_64C8B0
    || *(void *)a2 == qword_64C8B8 && *(_DWORD *)(a2 + 8) == dword_64C8C0)
  {
    __p = *(void **)a2;
    int v16 = *(_DWORD *)(a2 + 8);
    *(void *)buf = *(void *)a2;
    *(_DWORD *)&buf[8] = *(_DWORD *)(a2 + 8);
    *(void *)&v20[2] = a3;
    *(void *)&v20[10] = a4;
    sub_1A4AA0(a1 + 64, (unsigned int *)&__p, (uint64_t)buf);
    return 1;
  }
  else
  {
    return sub_431F5C((uint64_t)a1, (const AudioObjectPropertyAddress *)a2, a3, a4);
  }
}

unsigned char *sub_1A4AA0(void *a1, unsigned int *a2, uint64_t a3)
{
  int v57 = a1;
  char v58 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v6 = sub_32A48(13);
  if (*(unsigned char *)(v6 + 8))
  {
    uint64_t v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(v59, *(_DWORD *)a3);
        if (v61 >= 0) {
          uint64_t v8 = v59;
        }
        else {
          uint64_t v8 = (void **)v59[0];
        }
        sub_2417C(&v54, *(_DWORD *)(a3 + 4));
        if (v56 >= 0) {
          uint64_t v9 = &v54;
        }
        else {
          uint64_t v9 = v54;
        }
        int v10 = *(_DWORD *)(a3 + 4);
        int v47 = *(_DWORD *)(a3 + 8);
        uint64_t v48 = *(void *)(a3 + 16);
        uint64_t v49 = *(void *)(a3 + 24);
        sub_2417C(v52, *a2);
        int v11 = v53;
        uint64_t v12 = (void **)v52[0];
        sub_2417C(__p, a2[1]);
        uint64_t v13 = v52;
        if (v11 < 0) {
          uint64_t v13 = v12;
        }
        if (v51 >= 0) {
          int v14 = __p;
        }
        else {
          int v14 = (void **)__p[0];
        }
        unsigned int v15 = a2[1];
        unsigned int v16 = a2[2];
        *(_DWORD *)buf = 136317954;
        *(void *)&uint8_t buf[4] = "StandardUtilities.h";
        __int16 v63 = 1024;
        *(_DWORD *)__int16 v64 = 835;
        *(_WORD *)&v64[4] = 2080;
        *(void *)&v64[6] = v8;
        *(_WORD *)&v64[14] = 2080;
        *(void *)&v64[16] = v9;
        *(_WORD *)&v64[24] = 1024;
        int v65 = v10;
        __int16 v66 = 1024;
        int v67 = v47;
        __int16 v68 = 2048;
        uint64_t v69 = v48;
        __int16 v70 = 2048;
        uint64_t v71 = v49;
        __int16 v72 = 2080;
        int v73 = v13;
        __int16 v74 = 2080;
        uint64_t v75 = v14;
        __int16 v76 = 1024;
        unsigned int v77 = v15;
        __int16 v78 = 1024;
        unsigned int v79 = v16;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to register ClientCallbackInfo (mAddress.mSelector: '%s'; mAddress.mScope: '%s' / %u; mAd"
          "dress.mElement: %u; mProc: %p; mData: %p) for trigger (mSelector: '%s'; mScope: '%s' / %u; mElement: %u)",
          buf,
          0x66u);
        if (v51 < 0) {
          operator delete(__p[0]);
        }
        if (v53 < 0) {
          operator delete(v52[0]);
        }
        if (SHIBYTE(v56) < 0) {
          operator delete(v54);
        }
        if (v61 < 0) {
          operator delete(v59[0]);
        }
      }
    }
  }
  char v17 = (void **)(a1 + 11);
  int v18 = sub_1A27D0((uint64_t)(a1 + 11), (uint64_t)a2);
  __int16 v19 = (uint64_t **)v18;
  if (a1 + 12 != v18)
  {
    __int16 v20 = v18 + 6;
    for (uint64_t i = (void *)v18[7]; i != v20; uint64_t i = (void *)i[1])
    {
      if (sub_1A4778((uint64_t)(i + 2), a3))
      {
        if (i != v20)
        {
          char v41 = (os_log_t *)sub_32A48(13);
          uint64_t v42 = *v41;
          if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = "StandardUtilities.h";
            __int16 v63 = 1024;
            *(_DWORD *)__int16 v64 = 843;
            _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to register with a trigger address for which the ClientCallbackInfo has already been added.\"", buf, 0x12u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Attempt to register with a trigger address for which the ClientCallbackInfo has already been added.");
        }
        break;
      }
    }
    uint64_t v29 = operator new(0x30uLL);
    v29[6] = *(_DWORD *)(a3 + 8);
    uint64_t v30 = *(void *)a3;
    *((_OWORD *)v29 + 2) = *(_OWORD *)(a3 + 16);
    *((void *)v29 + 1) = v20;
    *((void *)v29 + 2) = v30;
    unint64_t v31 = v19[6];
    *(void *)uint64_t v29 = v31;
    v31[1] = (uint64_t)v29;
    v19[6] = (uint64_t *)v29;
    v19[8] = (uint64_t *)((char *)v19[8] + 1);
    return sub_3BCAC(&v57);
  }
  __int16 v54 = &v54;
  uint64_t v55 = &v54;
  uint64_t v56 = 0;
  uint64_t v22 = operator new(0x30uLL);
  uint64_t v23 = *(void *)a3;
  v22[1] = &v54;
  v22[2] = v23;
  *((_DWORD *)v22 + 6) = *(_DWORD *)(a3 + 8);
  *((_OWORD *)v22 + 2) = *(_OWORD *)(a3 + 16);
  *uint64_t v22 = &v54;
  __int16 v54 = v22;
  uint64_t v55 = &v54;
  uint64_t v56 = 1;
  *(void *)buf = *(void *)a2;
  *(_DWORD *)&buf[8] = a2[2];
  __int16 v54 = &v54;
  *(void *)&v64[2] = v22;
  *(void *)&v64[10] = v22;
  *uint64_t v22 = &v64[2];
  v22[1] = &v64[2];
  *(void *)&v64[18] = 1;
  uint64_t v56 = 0;
  double v24 = *v19;
  if (!*v19)
  {
    BOOL v26 = (uint64_t *)v19;
    double v24 = (uint64_t *)v19;
    goto LABEL_43;
  }
  uint64_t v25 = a1[17];
  if (!v25) {
LABEL_38:
  }
    sub_56964();
  BOOL v26 = (uint64_t *)v19;
  while ((*(unsigned int (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v25 + 48))(v25, buf, v24 + 4))
  {
    int v27 = (uint64_t *)*v24;
    BOOL v26 = v24;
    if (!*v24) {
      goto LABEL_43;
    }
LABEL_37:
    uint64_t v25 = a1[17];
    double v24 = v27;
    if (!v25) {
      goto LABEL_38;
    }
  }
  uint64_t v28 = a1[17];
  if (!v28) {
    goto LABEL_38;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v28 + 48))(v28, v24 + 4, buf))
  {
    BOOL v26 = v24 + 1;
    int v27 = (uint64_t *)v24[1];
    if (!v27) {
      goto LABEL_43;
    }
    goto LABEL_37;
  }
  if (*v26)
  {
    sub_45F50(&v64[2]);
    sub_45F50(&v54);
    v44 = (os_log_t *)sub_32A48(13);
    char v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "StandardUtilities.h";
      __int16 v63 = 1024;
      *(_DWORD *)__int16 v64 = 850;
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Failed to register trigger / ClientCallbackInfo\"", buf, 0x12u);
    }
    v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Failed to register trigger / ClientCallbackInfo");
  }
LABEL_43:
  unint64_t v32 = (uint64_t *)operator new(0x48uLL);
  int v33 = v32;
  v59[1] = v19;
  v32[4] = *(void *)buf;
  *((_DWORD *)v32 + 10) = *(_DWORD *)&buf[8];
  v32[6] = (uint64_t)(v32 + 6);
  v32[7] = (uint64_t)(v32 + 6);
  v32[8] = 0;
  uint64_t v34 = *(void *)&v64[18];
  if (*(void *)&v64[18])
  {
    uint64_t v36 = *(void *)&v64[2];
    int v35 = *(uint64_t **)&v64[10];
    uint64_t v37 = **(void **)&v64[10];
    *(void *)(v37 + 8) = *(void *)(*(void *)&v64[2] + 8);
    **(void **)(v36 + 8) = v37;
    uint64_t v38 = v32[6];
    *(void *)(v38 + 8) = v35;
    uint64_t *v35 = v38;
    v32[6] = v36;
    *(void *)(v36 + 8) = v32 + 6;
    v32[8] = v34;
    *(void *)&v64[18] = 0;
  }
  char v60 = 1;
  uint64_t *v32 = 0;
  v32[1] = 0;
  v32[2] = (uint64_t)v24;
  uint64_t *v26 = (uint64_t)v32;
  char v39 = (void *)**v17;
  if (v39)
  {
    *char v17 = v39;
    int v33 = (uint64_t *)*v26;
  }
  sub_46D00(*v19, v33);
  ++a1[13];
  v59[0] = 0;
  sub_1A2A84((uint64_t)v59);
  sub_45F50(&v64[2]);
  sub_45F50(&v54);
  return sub_3BCAC(&v57);
}

void sub_1A50E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

void sub_1A5190(uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, uint64_t a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v49 = (os_log_t *)sub_32A48(13);
    __int16 v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
    {
      uint64_t v127 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
      char v51 = v130 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
      __int16 v133 = 1024;
      int v134 = 604;
      __int16 v135 = 2080;
      v136 = (const char *)v51;
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v130 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v53 = (os_log_t *)sub_32A48(13);
    __int16 v54 = *v53;
    if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
    {
      uint64_t v127 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
      uint64_t v55 = v130 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136316162;
      unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
      __int16 v133 = 1024;
      int v134 = 605;
      __int16 v135 = 2080;
      v136 = (const char *)v55;
      __int16 v137 = 1024;
      LODWORD(v138[0]) = a3;
      WORD2(v138[0]) = 2048;
      *(void *)((char *)v138 + 6) = a4;
      _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v130 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v56 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v56 = &off_6414D8;
    v56[2] = 561211770;
  }
  if (!a6)
  {
    int v57 = (os_log_t *)sub_32A48(13);
    char v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
    {
      uint64_t v127 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
      int v59 = v130 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315906;
      unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
      __int16 v133 = 1024;
      int v134 = 606;
      __int16 v135 = 2080;
      v136 = "inData";
      __int16 v137 = 2080;
      v138[0] = v59;
      _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v130 < 0) {
        operator delete(__p[0]);
      }
    }
    char v60 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v60 = &off_6414D8;
    v60[2] = 561211770;
  }
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1685483629)
  {
    if (mSelector <= 1162701935)
    {
      if (mSelector == 913796710)
      {
        if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
        {
          uint64_t v75 = (os_log_t *)sub_32A48(13);
          __int16 v76 = *v75;
          if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
          {
            uint64_t v127 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
            int v77 = v130;
            __int16 v78 = (void **)__p[0];
            int v79 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            AudioObjectPropertyAddress v80 = __p;
            *(_DWORD *)buf = 136316162;
            unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
            if (v77 < 0) {
              AudioObjectPropertyAddress v80 = v78;
            }
            __int16 v133 = 1024;
            int v134 = 699;
            __int16 v135 = 2080;
            v136 = (const char *)v80;
            __int16 v137 = 1024;
            LODWORD(v138[0]) = a5;
            WORD2(v138[0]) = 1024;
            *(_DWORD *)((char *)v138 + 6) = v79;
            _os_log_impl(&def_1E50E8, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v130 < 0) {
              operator delete(__p[0]);
            }
          }
          long long v81 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v81 = &off_6414D8;
          v81[2] = 561211770;
        }
        BOOL v27 = *a6 != 0;
        sub_1A7668(a1, v27);
        return;
      }
      if (mSelector != 1162046576)
      {
LABEL_74:
        sub_4321A0(a1, a2, a3, a4, a5, a6);
        return;
      }
      unsigned int v24 = *a6;
      uint64_t v25 = (os_log_t *)sub_32A48(17);
      BOOL v26 = *v25;
      if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
        __int16 v133 = 1024;
        int v134 = 640;
        __int16 v135 = 1024;
        LODWORD(v136) = v24;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d set DevicePropertyCodecLowPowerModeEnable = %u.", buf, 0x18u);
      }
    }
    else
    {
      if (mSelector != 1162701936)
      {
        if (mSelector == 1634759542)
        {
          if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
          {
            CFMutableStringRef v82 = (os_log_t *)sub_32A48(13);
            v83 = *v82;
            if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
            {
              uint64_t v127 = *(void *)&a2->mSelector;
              AudioObjectPropertyElement mElement = a2->mElement;
              sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
              int v84 = v130;
              long long v85 = (void **)__p[0];
              int v86 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
              long long v87 = __p;
              *(_DWORD *)buf = 136316162;
              unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
              if (v84 < 0) {
                long long v87 = v85;
              }
              __int16 v133 = 1024;
              int v134 = 612;
              __int16 v135 = 2080;
              v136 = (const char *)v87;
              __int16 v137 = 1024;
              LODWORD(v138[0]) = a5;
              WORD2(v138[0]) = 1024;
              *(_DWORD *)((char *)v138 + 6) = v86;
              _os_log_impl(&def_1E50E8, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                buf,
                0x28u);
              if (v130 < 0) {
                operator delete(__p[0]);
              }
            }
            v88 = __cxa_allocate_exception(0x10uLL);
            *(void *)v88 = &off_6414D8;
            v88[2] = 561211770;
          }
          AudioObjectPropertyScope mScope = a2->mScope;
          *(_DWORD *)buf = 1987013732;
          unint64_t v132 = mScope;
          (*(void (**)(uint64_t, uint8_t *, uint64_t, const void *, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, buf, a3, a4, a5, a6);
          return;
        }
        if (mSelector == 1650602615)
        {
          if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
          {
            char v61 = (os_log_t *)sub_32A48(13);
            __int16 v62 = *v61;
            if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
            {
              uint64_t v127 = *(void *)&a2->mSelector;
              AudioObjectPropertyElement mElement = a2->mElement;
              sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
              int v63 = v130;
              __int16 v64 = (void **)__p[0];
              int v65 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
              __int16 v66 = __p;
              *(_DWORD *)buf = 136316162;
              unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
              if (v63 < 0) {
                __int16 v66 = v64;
              }
              __int16 v133 = 1024;
              int v134 = 622;
              __int16 v135 = 2080;
              v136 = (const char *)v66;
              __int16 v137 = 1024;
              LODWORD(v138[0]) = a5;
              WORD2(v138[0]) = 1024;
              *(_DWORD *)((char *)v138 + 6) = v65;
              _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                buf,
                0x28u);
              if (v130 < 0) {
                operator delete(__p[0]);
              }
            }
            int v67 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v67 = &off_6414D8;
            v67[2] = 561211770;
          }
          int v14 = sub_1A6CFC(*(_DWORD *)(a1 + 268), (uint64_t)a2, a3, a4, a6);
          if (v14)
          {
            int v15 = v14;
            unsigned int v16 = (os_log_t *)sub_32A48(13);
            char v17 = *v16;
            if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315394;
              unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
              __int16 v133 = 1024;
              int v134 = 624;
              _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"error setting kAudioDevicePropertyBasebandToCodecPlayThrough\"", buf, 0x12u);
            }
            int v18 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v18 = &off_6414D8;
            v18[2] = v15;
          }
          return;
        }
        goto LABEL_74;
      }
      unsigned int v37 = *a6;
      uint64_t v38 = (os_log_t *)sub_32A48(17);
      char v39 = *v38;
      if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
        __int16 v133 = 1024;
        int v134 = 649;
        __int16 v135 = 1024;
        LODWORD(v136) = v37;
        _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d set DevicePropertyMicrophoneLowPowerModeEnable = %u.", buf, 0x18u);
      }
    }
    sub_4321A0(a1, a2, a3, a4, a5, a6);
    return;
  }
  if (mSelector > 1836414052)
  {
    switch(mSelector)
    {
      case 1836414053:
        if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
        {
          v110 = (os_log_t *)sub_32A48(13);
          v111 = *v110;
          if (*v110 && os_log_type_enabled(*v110, OS_LOG_TYPE_ERROR))
          {
            uint64_t v127 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
            int v112 = v130;
            v113 = (void **)__p[0];
            int v114 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            v115 = __p;
            *(_DWORD *)buf = 136316162;
            unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
            if (v112 < 0) {
              v115 = v113;
            }
            __int16 v133 = 1024;
            int v134 = 687;
            __int16 v135 = 2080;
            v136 = (const char *)v115;
            __int16 v137 = 1024;
            LODWORD(v138[0]) = a5;
            WORD2(v138[0]) = 1024;
            *(_DWORD *)((char *)v138 + 6) = v114;
            _os_log_impl(&def_1E50E8, v111, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v130 < 0) {
              operator delete(__p[0]);
            }
          }
          v116 = __cxa_allocate_exception(0x10uLL);
          *(void *)v116 = &off_6414D8;
          v116[2] = 561211770;
        }
        if (a2->mElement == 6 && a2->mScope == 1869968496)
        {
          uint64_t v40 = sub_23EE78();
          BOOL v41 = *a6 != 0;
          sub_24063C(v40, v41);
          return;
        }
        break;
      case 1987013732:
        if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
        {
          uint64_t v96 = (os_log_t *)sub_32A48(13);
          v97 = *v96;
          if (*v96 && os_log_type_enabled(*v96, OS_LOG_TYPE_ERROR))
          {
            uint64_t v127 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
            int v98 = v130;
            v99 = (void **)__p[0];
            int v100 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            uint64_t v101 = __p;
            *(_DWORD *)buf = 136316162;
            unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
            if (v98 < 0) {
              uint64_t v101 = v99;
            }
            __int16 v133 = 1024;
            int v134 = 663;
            __int16 v135 = 2080;
            v136 = (const char *)v101;
            __int16 v137 = 1024;
            LODWORD(v138[0]) = a5;
            WORD2(v138[0]) = 1024;
            *(_DWORD *)((char *)v138 + 6) = v100;
            _os_log_impl(&def_1E50E8, v97, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v130 < 0) {
              operator delete(__p[0]);
            }
          }
          long long v102 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v102 = &off_6414D8;
          v102[2] = 561211770;
        }
        if (a2->mElement == 6 && a2->mScope == 1869968496)
        {
          uint64_t v34 = sub_23EE78();
          if (sub_23FC74(v34))
          {
            float v35 = (float)(*(float *)a6 + 100.0) / 100.0;
            uint64_t v36 = sub_23EE78();
            sub_240048(v36, v35);
            if (sub_1A1BE4((void *)(a1 + 512), (uint64_t)&qword_64C898)) {
              sub_1A1D20((void *)(a1 + 512), (unsigned int *)&qword_64C898);
            }
            if (sub_1A1BE4((void *)(a1 + 512), (uint64_t)&qword_64C8A8))
            {
              sub_1A1D20((void *)(a1 + 512), (unsigned int *)&qword_64C8A8);
            }
          }
          return;
        }
        break;
      case 1999790690:
        if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
        {
          __int16 v68 = (os_log_t *)sub_32A48(13);
          uint64_t v69 = *v68;
          if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
          {
            uint64_t v127 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
            int v70 = v130;
            uint64_t v71 = (void **)__p[0];
            int v72 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            int v73 = __p;
            *(_DWORD *)buf = 136316162;
            unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
            if (v70 < 0) {
              int v73 = v71;
            }
            __int16 v133 = 1024;
            int v134 = 630;
            __int16 v135 = 2080;
            v136 = (const char *)v73;
            __int16 v137 = 1024;
            LODWORD(v138[0]) = a5;
            WORD2(v138[0]) = 1024;
            *(_DWORD *)((char *)v138 + 6) = v72;
            _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v130 < 0) {
              operator delete(__p[0]);
            }
          }
          __int16 v74 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v74 = &off_6414D8;
          v74[2] = 561211770;
        }
        int v19 = sub_1A6CFC(*(_DWORD *)(a1 + 268), (uint64_t)a2, a3, a4, a6);
        if (v19)
        {
          int v20 = v19;
          __int16 v21 = (os_log_t *)sub_32A48(13);
          uint64_t v22 = *v21;
          if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
            __int16 v133 = 1024;
            int v134 = 632;
            _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"error setting kAudioDevicePropertyCodecToBasebandPlayThrough\"", buf, 0x12u);
          }
          uint64_t v23 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v23 = &off_6414D8;
          v23[2] = v20;
        }
        return;
    }
    goto LABEL_74;
  }
  if (mSelector == 1685483630)
  {
    if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
    {
      long long v103 = (os_log_t *)sub_32A48(13);
      long long v104 = *v103;
      if (*v103 && os_log_type_enabled(*v103, OS_LOG_TYPE_ERROR))
      {
        uint64_t v127 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
        int v105 = v130;
        v106 = (void **)__p[0];
        int v107 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        uint64_t v108 = __p;
        *(_DWORD *)buf = 136316162;
        unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
        if (v105 < 0) {
          uint64_t v108 = v106;
        }
        __int16 v133 = 1024;
        int v134 = 704;
        __int16 v135 = 2080;
        v136 = (const char *)v108;
        __int16 v137 = 1024;
        LODWORD(v138[0]) = a5;
        WORD2(v138[0]) = 1024;
        *(_DWORD *)((char *)v138 + 6) = v107;
        _os_log_impl(&def_1E50E8, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v130 < 0) {
          operator delete(__p[0]);
        }
      }
      v109 = __cxa_allocate_exception(0x10uLL);
      *(void *)v109 = &off_6414D8;
      v109[2] = 561211770;
    }
    *(unsigned char *)(a1 + 688) = *a6 != 0;
    return;
  }
  if (mSelector == 1718432370)
  {
    if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
    {
      v89 = (os_log_t *)sub_32A48(13);
      v90 = *v89;
      if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
      {
        uint64_t v127 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
        int v91 = v130;
        v92 = (void **)__p[0];
        int v93 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        v94 = __p;
        *(_DWORD *)buf = 136316162;
        unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
        if (v91 < 0) {
          v94 = v92;
        }
        __int16 v133 = 1024;
        int v134 = 656;
        __int16 v135 = 2080;
        v136 = (const char *)v94;
        __int16 v137 = 1024;
        LODWORD(v138[0]) = a5;
        WORD2(v138[0]) = 1024;
        *(_DWORD *)((char *)v138 + 6) = v93;
        _os_log_impl(&def_1E50E8, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v130 < 0) {
          operator delete(__p[0]);
        }
      }
      v95 = __cxa_allocate_exception(0x10uLL);
      *(void *)v95 = &off_6414D8;
      v95[2] = 561211770;
    }
    int v29 = sub_1A6CFC(*(_DWORD *)(a1 + 268), (uint64_t)a2, a3, a4, a6);
    if (v29)
    {
      int v30 = v29;
      unint64_t v31 = (os_log_t *)sub_32A48(13);
      unint64_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
        __int16 v133 = 1024;
        int v134 = 658;
        _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"error setting kAudioDevicePropertyFMTunerPlayThrough\"", buf, 0x12u);
      }
      int v33 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v33 = &off_6414D8;
      v33[2] = v30;
    }
    return;
  }
  if (mSelector != 1768255076) {
    goto LABEL_74;
  }
  if (__PAIR64__(a2->mScope, 1768255076) == qword_64C8C8 && a2->mElement == dword_64C8D0)
  {
    if ((*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
    {
      v117 = (os_log_t *)sub_32A48(13);
      v118 = *v117;
      if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_ERROR))
      {
        uint64_t v127 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v127);
        int v119 = v130;
        v120 = (void **)__p[0];
        int v121 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        v122 = __p;
        *(_DWORD *)buf = 136316162;
        unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
        if (v119 < 0) {
          v122 = v120;
        }
        __int16 v133 = 1024;
        int v134 = 711;
        __int16 v135 = 2080;
        v136 = (const char *)v122;
        __int16 v137 = 1024;
        LODWORD(v138[0]) = a5;
        WORD2(v138[0]) = 1024;
        *(_DWORD *)((char *)v138 + 6) = v121;
        _os_log_impl(&def_1E50E8, v118, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v130 < 0) {
          operator delete(__p[0]);
        }
      }
      v123 = __cxa_allocate_exception(0x10uLL);
      *(void *)v123 = &off_6414D8;
      v123[2] = 561211770;
    }
    unsigned int v13 = *a6;
    if (v13)
    {
      if (atomic_fetch_add((atomic_uint *volatile)(a1 + 692), 1u)) {
        return;
      }
      goto LABEL_82;
    }
    if (!atomic_load((unsigned int *)(a1 + 692)))
    {
      v124 = (os_log_t *)sub_32A48(13);
      v125 = *v124;
      if (*v124 && os_log_type_enabled(*v124, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
        __int16 v133 = 1024;
        int v134 = 713;
        _os_log_impl(&def_1E50E8, v125, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Attempt to power off the built-in mic when mMicPowerOnCount is 0.\"", buf, 0x12u);
      }
      v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v126, "Attempt to power off the built-in mic when mMicPowerOnCount is 0.");
    }
    if (atomic_fetch_add((atomic_uint *volatile)(a1 + 692), 0xFFFFFFFF) == 1)
    {
LABEL_82:
      char v45 = (os_log_t *)sub_32A48(17);
      v46 = *v45;
      if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_INFO))
      {
        int v47 = "dis";
        unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
        *(_DWORD *)buf = 136315650;
        if (v13) {
          int v47 = "en";
        }
        __int16 v133 = 1024;
        int v134 = 716;
        __int16 v135 = 2080;
        v136 = v47;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_INFO, "%25s:%-5d Non-redundant requesting to %sable microphone power. Calling the HAL.", buf, 0x1Cu);
      }
      AudioObjectID v48 = *(_DWORD *)(a1 + 268);
      *(_DWORD *)buf = v13 != 0;
      sub_1A6CFC(v48, (uint64_t)a2, a3, a4, buf);
    }
  }
  else
  {
    uint64_t v42 = (os_log_t *)sub_32A48(17);
    char v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v132 = (unint64_t)"Device_Codec_Aspen.cpp";
      __int16 v133 = 1024;
      int v134 = 722;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown property address using selector kAppleEmbeddedAudio_DevicePropertyInputEnableDevice. Ignoring.", buf, 0x12u);
    }
  }
}

void sub_1A6CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A6CFC(AudioObjectID a1, uint64_t a2, UInt32 a3, const void *a4, _DWORD *a5)
{
  uint64_t v10 = sub_32A48(13);
  if (*(unsigned char *)(v10 + 8))
  {
    int v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v73, (unsigned int *)&__p);
        uint64_t v12 = v73.__m_.__opaque[15] >= 0 ? &v73 : (std::mutex *)v73.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v63 = 1024;
        int v64 = 166;
        __int16 v65 = 2080;
        *(void *)__int16 v66 = v12;
        *(_WORD *)&v66[8] = 1024;
        *(_DWORD *)&v66[10] = a1;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v73.__m_.__opaque[15] < 0) {
          operator delete((void *)v73.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v57 = a1;
  uint64_t v58 = *(void *)a2;
  int v59 = *(_DWORD *)(a2 + 8);
  UInt32 v60 = a3;
  char v61 = a4;
  unint64_t v13 = sub_1A79F8((uint64_t)&v57);
  if (HIDWORD(v13)) {
    BOOL v14 = 0;
  }
  else {
    BOOL v14 = *a5 == v13;
  }
  int v15 = v14;
  uint64_t v16 = sub_32A48(13);
  uint64_t v17 = *(void *)(v16 + 8);
  if (v15)
  {
    if ((v17 & 1) == 0) {
      return 0;
    }
    int v18 = *(NSObject **)v16;
    if (!*(void *)v16 || !os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    buf.int mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v63 = 1024;
    int v64 = 191;
    __int16 v65 = 1024;
    *(_DWORD *)__int16 v66 = a1;
LABEL_20:
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
    return 0;
  }
  if (v17)
  {
    int v19 = *(NSObject **)v16;
    if (*(void *)v16)
    {
      if (os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v73, (unsigned int *)&__p);
        int v20 = v73.__m_.__opaque[15] >= 0 ? &v73 : (std::mutex *)v73.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v63 = 1024;
        int v64 = 199;
        __int16 v65 = 2080;
        *(void *)__int16 v66 = v20;
        *(_WORD *)&v66[8] = 1024;
        *(_DWORD *)&v66[10] = a1;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v73.__m_.__opaque[15] < 0) {
          operator delete((void *)v73.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v21 = AudioObjectSetPropertyData(a1, &buf, a3, a4, 4u, a5);
  if (!v21)
  {
    unint64_t v28 = sub_1A79F8((uint64_t)&v57);
    if (!HIDWORD(v28) && *a5 == v28)
    {
      uint64_t v29 = sub_32A48(13);
      if ((*(unsigned char *)(v29 + 8) & 1) == 0) {
        return 0;
      }
      int v18 = *(NSObject **)v29;
      if (!*(void *)v29 || !os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG)) {
        return 0;
      }
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v63 = 1024;
      int v64 = 219;
      __int16 v65 = 1024;
      *(_DWORD *)__int16 v66 = a1;
      goto LABEL_20;
    }
    memset(v73.__m_.__opaque, 0, sizeof(v73.__m_.__opaque));
    v73.__m_.__uint64_t sig = 850045863;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795;
    char v56 = 0;
    sub_662FC(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v73, (uint64_t)&v56);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v34.__d_.__rep_) / -1000)
    {
      unint64_t v32 = sub_1A79F8((uint64_t)&v57);
      int v33 = v32;
      uint64_t v21 = HIDWORD(v32);
      if (HIDWORD(v32)) {
        goto LABEL_95;
      }
      if (*a5 == v32) {
        break;
      }
      if (i <= 0)
      {
        v46 = (os_log_t *)sub_32A48(13);
        uint64_t v21 = 2003329396;
        int v47 = *v46;
        if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
        {
          uint64_t v50 = *(void *)a2;
          int v51 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v50);
          AudioObjectID v48 = v53 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          BOOL v49 = *a5 == v33;
          buf.int mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v63 = 1024;
          int v64 = 248;
          __int16 v65 = 2080;
          *(void *)__int16 v66 = "set";
          *(_WORD *)&v66[8] = 2080;
          *(void *)&v66[10] = v48;
          *(_WORD *)&v66[18] = 2080;
          *(void *)&v66[20] = "set";
          *(_WORD *)&v66[28] = 1024;
          BOOL v67 = v49;
          __int16 v68 = 1024;
          int v69 = 0;
          __int16 v70 = 1024;
          AudioObjectID v71 = a1;
          _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
          if (v53 < 0) {
            operator delete(__lk.__m_);
          }
        }
LABEL_95:
        sub_6651C((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&__p);
        std::mutex::~mutex(&v73);
        return v21;
      }
      v34.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v35 = sub_32A48(13);
      if (*(unsigned char *)(v35 + 8))
      {
        uint64_t v36 = *(NSObject **)v35;
        if (*(void *)v35)
        {
          if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
          {
            buf.int mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v63 = 1024;
            int v64 = 257;
            __int16 v65 = 2080;
            *(void *)__int16 v66 = "with timeout";
            *(_WORD *)&v66[8] = 1024;
            *(_DWORD *)&v66[10] = a1;
            _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.int mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v73;
      __lk.__owns_ = 1;
      std::mutex::lock(&v73);
      v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v56)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v38 = v37.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v38 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_58;
          }
          v39.__d_.__rep_ = v38 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v39.__d_.__rep_ >= 1) {
            break;
          }
LABEL_76:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v38 || v56) {
            goto LABEL_58;
          }
        }
        std::chrono::steady_clock::now();
        v40.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v40.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = 0;
          goto LABEL_72;
        }
        if (v40.__d_.__rep_ < 1)
        {
          if ((unint64_t)v40.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_71;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v40.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_72;
          }
LABEL_71:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = 1000 * v40.__d_.__rep_;
LABEL_72:
          if (v41 > (v39.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v42.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_75:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v42);
            std::chrono::steady_clock::now();
            goto LABEL_76;
          }
        }
        v42.__d_.__rep_ = v41 + v39.__d_.__rep_;
        goto LABEL_75;
      }
LABEL_58:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v43 = sub_32A48(13);
    if (*(unsigned char *)(v43 + 8))
    {
      v44 = *(NSObject **)v43;
      if (*(void *)v43)
      {
        if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v50 = *(void *)a2;
          int v51 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v50);
          char v45 = v53 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.int mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v63 = 1024;
          int v64 = 288;
          __int16 v65 = 2080;
          *(void *)__int16 v66 = v45;
          *(_WORD *)&v66[8] = 1024;
          *(_DWORD *)&v66[10] = a1;
          _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v53 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }
    uint64_t v21 = 0;
    goto LABEL_95;
  }
  uint64_t v22 = (os_log_t *)sub_32A48(13);
  uint64_t v23 = *v22;
  if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(&v73, v21);
    int v24 = v73.__m_.__opaque[15];
    uint64_t sig = v73.__m_.__sig;
    uint64_t inClientData = *(void *)a2;
    int v55 = *(_DWORD *)(a2 + 8);
    sub_16C9C4((uint64_t)&__p, (unsigned int *)&inClientData);
    BOOL v26 = &v73;
    if (v24 < 0) {
      BOOL v26 = (std::mutex *)sig;
    }
    if (__p.__cv_.__opaque[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::condition_variable *)__p.__cv_.__sig;
    }
    buf.int mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v63 = 1024;
    int v64 = 207;
    __int16 v65 = 1024;
    *(_DWORD *)__int16 v66 = v21;
    *(_WORD *)&v66[4] = 2080;
    *(void *)&v66[6] = v26;
    *(_WORD *)&v66[14] = 2080;
    *(void *)&v66[16] = p_p;
    *(_WORD *)&v66[24] = 1024;
    *(_DWORD *)&v66[26] = a1;
    _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
    if (__p.__cv_.__opaque[15] < 0) {
      operator delete((void *)__p.__cv_.__sig);
    }
    if (v73.__m_.__opaque[15] < 0) {
      operator delete((void *)v73.__m_.__sig);
    }
  }
  return v21;
}

void sub_1A75E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::condition_variable *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_6651C((uint64_t)&a17);
  std::condition_variable::~condition_variable((std::condition_variable *)&a36);
  std::mutex::~mutex((std::mutex *)(v36 - 168));
  _Unwind_Resume(a1);
}

void sub_1A7668(uint64_t a1, int a2)
{
  LODWORD(v2) = a2;
  sub_85F24();
  if (byte_64A0E0)
  {
    if ((byte_64BC02 & 1) == 0)
    {
      unsigned int v17 = 0;
      if (sub_1614F4(@"DisableCodecWindFilter", @"com.apple.audio.virtualaudio", &v17))
      {
        uint64_t v4 = (os_log_t *)sub_32A48(13);
        uint64_t v5 = *v4;
        if (*v4)
        {
          BOOL v6 = os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT);
          unsigned int v7 = v17;
          if (v6)
          {
            buf.int mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "RunTimeDefaults.cpp";
            __int16 v19 = 1024;
            int v20 = 1292;
            __int16 v21 = 2080;
            uint64_t v22 = "DisableCodecWindFilter";
            __int16 v23 = 1024;
            unsigned int v24 = v17;
            _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default %s: %d.", (uint8_t *)&buf, 0x22u);
          }
        }
        else
        {
          unsigned int v7 = v17;
        }
        byte_64BC01 = v7 != 0;
      }
      byte_64BC02 = 1;
    }
    if (byte_64BC01)
    {
      uint64_t v10 = (os_log_t *)sub_32A48(17);
      uint64_t v2 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
        {
          buf.int mSelector = 136315394;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
          __int16 v19 = 1024;
          int v20 = 1827;
          uint64_t v9 = "%25s:%-5d The defaults write to disable the codec wind filter has been specified.";
          goto LABEL_17;
        }
        goto LABEL_18;
      }
    }
  }
  else
  {
    uint64_t v8 = (os_log_t *)sub_32A48(17);
    uint64_t v2 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
        __int16 v19 = 1024;
        int v20 = 1822;
        uint64_t v9 = "%25s:%-5d Use of codec wind filter is not allowed on this device. Disabling it.";
LABEL_17:
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_INFO, v9, (uint8_t *)&buf, 0x12u);
      }
LABEL_18:
      LODWORD(v2) = 0;
    }
  }
  int v11 = (os_log_t *)sub_32A48(17);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v13 = "Disabling";
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
    buf.int mSelector = 136315650;
    if (v2) {
      unint64_t v13 = "Enabling";
    }
    __int16 v19 = 1024;
    int v20 = 1831;
    __int16 v21 = 2080;
    uint64_t v22 = v13;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s wind filter.", (uint8_t *)&buf, 0x1Cu);
  }
  if (*(unsigned __int8 *)(a1 + 680) == v2)
  {
    uint64_t v14 = sub_32A48(17);
    if (*(unsigned char *)(v14 + 8))
    {
      int v15 = *(NSObject **)v14;
      if (*(void *)v14)
      {
        if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v16 = "Disabled";
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Codec_Aspen.cpp";
          buf.int mSelector = 136315650;
          if (v2) {
            uint64_t v16 = "Enabled";
          }
          __int16 v19 = 1024;
          int v20 = 1842;
          __int16 v21 = 2080;
          uint64_t v22 = v16;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d The wind filter was already %s.  Using cached state.", (uint8_t *)&buf, 0x1Cu);
        }
      }
    }
  }
  else
  {
    unsigned int v17 = v2;
    strcpy((char *)&buf, "fnw6tpni");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    sub_4321A0(a1, &buf, 0, 0, 4u, &v17);
    *(unsigned char *)(a1 + 680) = (_BYTE)v2;
  }
}

unint64_t sub_1A79F8(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.int mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_26DAC((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    unsigned int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        int v11 = v20;
        if (v9 < 0) {
          int v11 = v10;
        }
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.int mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        unint64_t v28 = v11;
        __int16 v29 = 2080;
        int v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_1A7BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1A7BC8(unsigned __int8 *a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    std::chrono::steady_clock::time_point v37 = (os_log_t *)sub_32A48(13);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v113 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
      std::chrono::steady_clock::time_point v39 = v116 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      __int16 v118 = 1024;
      int v119 = 491;
      __int16 v120 = 2080;
      *(void *)int v121 = v39;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v116 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = (os_log_t *)sub_32A48(13);
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      uint64_t v113 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
      uint64_t v43 = v116 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      __int16 v118 = 1024;
      int v119 = 492;
      __int16 v120 = 2080;
      *(void *)int v121 = v43;
      *(_WORD *)&v121[8] = 1024;
      LODWORD(v122[0]) = a3;
      WORD2(v122[0]) = 2048;
      *(void *)((char *)v122 + 6) = a4;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v116 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    v44 = __cxa_allocate_exception(0x10uLL);
    *(void *)v44 = &off_6414D8;
    uint64_t v44[2] = 561211770;
  }
  if (!a6)
  {
    char v45 = (os_log_t *)sub_32A48(13);
    v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      uint64_t v113 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
      int v47 = v116 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
      __int16 v118 = 1024;
      int v119 = 493;
      __int16 v120 = 2080;
      *(void *)int v121 = "outData";
      *(_WORD *)&v121[8] = 2080;
      v122[0] = v47;
      _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v116 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    AudioObjectID v48 = __cxa_allocate_exception(0x10uLL);
    *(void *)AudioObjectID v48 = &off_6414D8;
    v48[2] = 561211770;
  }
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1835103843)
  {
    if (mSelector > 1986229103)
    {
      if (mSelector != 1986229104)
      {
        if (mSelector == 1986290211)
        {
          UInt32 v36 = *a5;
          if (v36 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
          {
            int v105 = (os_log_t *)sub_32A48(13);
            v106 = *v105;
            if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
            {
              uint64_t v113 = *(void *)&a2->mSelector;
              AudioObjectPropertyElement mElement = a2->mElement;
              sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
              int v107 = v116;
              uint64_t v108 = *(AudioObjectPropertyAddress **)&__p.mSelector;
              UInt32 v109 = *a5;
              int v110 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
              p_p = &__p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
              if (v107 < 0) {
                p_p = v108;
              }
              __int16 v118 = 1024;
              int v119 = 541;
              __int16 v120 = 2080;
              *(void *)int v121 = p_p;
              *(_WORD *)&v121[8] = 1024;
              LODWORD(v122[0]) = v109;
              WORD2(v122[0]) = 1024;
              *(_DWORD *)((char *)v122 + 6) = v110;
              _os_log_impl(&def_1E50E8, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                buf,
                0x28u);
              if (v116 < 0) {
                operator delete(*(void **)&__p.mSelector);
              }
            }
            int v112 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v112 = &off_6414D8;
            v112[2] = 561211770;
          }
          if (a2->mElement == 6 && a2->mScope == 1869968496)
          {
            *(_OWORD *)a6 = xmmword_4E7920;
            return;
          }
        }
        else if (mSelector == 1987013732)
        {
          UInt32 v13 = *a5;
          if (v13 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
          {
            BOOL v49 = (os_log_t *)sub_32A48(13);
            uint64_t v50 = *v49;
            if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
            {
              uint64_t v113 = *(void *)&a2->mSelector;
              AudioObjectPropertyElement mElement = a2->mElement;
              sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
              int v51 = v116;
              __int16 v52 = *(AudioObjectPropertyAddress **)&__p.mSelector;
              UInt32 v53 = *a5;
              int v54 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
              int v55 = &__p;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
              if (v51 < 0) {
                int v55 = v52;
              }
              __int16 v118 = 1024;
              int v119 = 528;
              __int16 v120 = 2080;
              *(void *)int v121 = v55;
              *(_WORD *)&v121[8] = 1024;
              LODWORD(v122[0]) = v53;
              WORD2(v122[0]) = 1024;
              *(_DWORD *)((char *)v122 + 6) = v54;
              _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                buf,
                0x28u);
              if (v116 < 0) {
                operator delete(*(void **)&__p.mSelector);
              }
            }
            char v56 = __cxa_allocate_exception(0x10uLL);
            *(void *)char v56 = &off_6414D8;
            v56[2] = 561211770;
          }
          if (a2->mElement == 6 && a2->mScope == 1869968496)
          {
            unint64_t v14 = (float *)sub_23EE78();
            float v15 = (float)(sub_23FDA8(v14) * 100.0) + -100.0;
LABEL_59:
            *a6 = v15;
            return;
          }
        }
        goto LABEL_55;
      }
      UInt32 v31 = *a5;
      if (v31 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
      {
        v89 = (os_log_t *)sub_32A48(13);
        v90 = *v89;
        if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
        {
          uint64_t v113 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
          int v91 = v116;
          v92 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v93 = *a5;
          int v94 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          v95 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
          if (v91 < 0) {
            v95 = v92;
          }
          __int16 v118 = 1024;
          int v119 = 566;
          __int16 v120 = 2080;
          *(void *)int v121 = v95;
          *(_WORD *)&v121[8] = 1024;
          LODWORD(v122[0]) = v93;
          WORD2(v122[0]) = 1024;
          *(_DWORD *)((char *)v122 + 6) = v94;
          _os_log_impl(&def_1E50E8, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v116 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }
        uint64_t v96 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v96 = &off_6414D8;
        v96[2] = 561211770;
      }
      if (a2->mElement == 6 && a2->mScope == 1869968496)
      {
        uint64_t v32 = sub_23EE78();
        int v23 = sub_23FC74(v32);
        goto LABEL_45;
      }
      goto LABEL_55;
    }
    if (mSelector != 1835103844)
    {
      if (mSelector == 1836414053)
      {
        UInt32 v21 = *a5;
        if (v21 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
        {
          __int16 v65 = (os_log_t *)sub_32A48(13);
          __int16 v66 = *v65;
          if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
          {
            uint64_t v113 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
            int v67 = v116;
            __int16 v68 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v69 = *a5;
            int v70 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            AudioObjectID v71 = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
            if (v67 < 0) {
              AudioObjectID v71 = v68;
            }
            __int16 v118 = 1024;
            int v119 = 554;
            __int16 v120 = 2080;
            *(void *)int v121 = v71;
            *(_WORD *)&v121[8] = 1024;
            LODWORD(v122[0]) = v69;
            WORD2(v122[0]) = 1024;
            *(_DWORD *)((char *)v122 + 6) = v70;
            _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v116 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }
          int v72 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v72 = &off_6414D8;
          v72[2] = 561211770;
        }
        if (a2->mElement == 6 && a2->mScope == 1869968496)
        {
          uint64_t v22 = (unsigned __int8 *)sub_23EE78();
          int v23 = sub_2404BC(v22);
LABEL_45:
          *(_DWORD *)a6 = v23;
          return;
        }
      }
LABEL_55:
      sub_432AE8((uint64_t)a1, a2, a3, a4, a5, a6);
      return;
    }
    UInt32 v33 = *a5;
    if (v33 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
    {
      v97 = (os_log_t *)sub_32A48(13);
      int v98 = *v97;
      if (*v97 && os_log_type_enabled(*v97, OS_LOG_TYPE_ERROR))
      {
        uint64_t v113 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
        int v99 = v116;
        int v100 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v101 = *a5;
        int v102 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        long long v103 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        if (v99 < 0) {
          long long v103 = v100;
        }
        __int16 v118 = 1024;
        int v119 = 508;
        __int16 v120 = 2080;
        *(void *)int v121 = v103;
        *(_WORD *)&v121[8] = 1024;
        LODWORD(v122[0]) = v101;
        WORD2(v122[0]) = 1024;
        *(_DWORD *)((char *)v122 + 6) = v102;
        _os_log_impl(&def_1E50E8, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v116 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }
      long long v104 = __cxa_allocate_exception(0x10uLL);
      *(void *)long long v104 = &off_6414D8;
      v104[2] = 561211770;
    }
    AudioObjectPropertyScope mScope = a2->mScope;
    AudioObjectPropertyElement v34 = a2->mElement;
    if (v34 != 6 || mScope != 1869968496)
    {
      __p.int mSelector = 1986290211;
      __p.AudioObjectPropertyScope mScope = mScope;
      __p.AudioObjectPropertyElement mElement = v34;
      LODWORD(v113) = 16;
      sub_432AE8((uint64_t)a1, &__p, 0, 0, (UInt32 *)&v113, (float *)buf);
      float v15 = *(double *)buf;
      goto LABEL_59;
    }
    int v17 = -1027131310;
LABEL_50:
    *(_DWORD *)a6 = v17;
    return;
  }
  if (mSelector > 1634759541)
  {
    if (mSelector == 1634759542)
    {
      UInt32 v29 = *a5;
      if (v29 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
      {
        long long v81 = (os_log_t *)sub_32A48(13);
        CFMutableStringRef v82 = *v81;
        if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_ERROR))
        {
          uint64_t v113 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
          int v83 = v116;
          int v84 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v85 = *a5;
          int v86 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          long long v87 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
          if (v83 < 0) {
            long long v87 = v84;
          }
          __int16 v118 = 1024;
          int v119 = 499;
          __int16 v120 = 2080;
          *(void *)int v121 = v87;
          *(_WORD *)&v121[8] = 1024;
          LODWORD(v122[0]) = v85;
          WORD2(v122[0]) = 1024;
          *(_DWORD *)((char *)v122 + 6) = v86;
          _os_log_impl(&def_1E50E8, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v116 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }
        v88 = __cxa_allocate_exception(0x10uLL);
        *(void *)v88 = &off_6414D8;
        v88[2] = 561211770;
      }
      AudioObjectPropertyScope v30 = a2->mScope;
      *(_DWORD *)AudioObjectPropertyAddress buf = 1987013732;
      *(_DWORD *)&uint8_t buf[4] = v30;
      *(_DWORD *)&buf[8] = 0;
      (*(void (**)(unsigned __int8 *, unsigned char *, uint64_t, const void *, UInt32 *, float *))(*(void *)a1 + 40))(a1, buf, a3, a4, a5, a6);
    }
    else
    {
      if (mSelector != 1685483630) {
        goto LABEL_55;
      }
      int v18 = (os_log_t *)sub_32A48(17);
      char v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(&__p, a2->mSelector);
        int v20 = v116 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        __int16 v118 = 1024;
        int v119 = 585;
        __int16 v120 = 2080;
        *(void *)int v121 = v20;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Property '%s' is write-only", buf, 0x1Cu);
        if (v116 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }
      *a5 = 0;
    }
  }
  else
  {
    if (mSelector != 913796710)
    {
      if (mSelector != 1064725619) {
        goto LABEL_55;
      }
      UInt32 v16 = *a5;
      if (v16 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
      {
        AudioObjectID v57 = (os_log_t *)sub_32A48(13);
        uint64_t v58 = *v57;
        if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
        {
          uint64_t v113 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
          int v59 = v116;
          UInt32 v60 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v61 = *a5;
          int v62 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          __int16 v63 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
          if (v59 < 0) {
            __int16 v63 = v60;
          }
          __int16 v118 = 1024;
          int v119 = 590;
          __int16 v120 = 2080;
          *(void *)int v121 = v63;
          *(_WORD *)&v121[8] = 1024;
          LODWORD(v122[0]) = v61;
          WORD2(v122[0]) = 1024;
          *(_DWORD *)((char *)v122 + 6) = v62;
          _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v116 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }
        int v64 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v64 = &off_6414D8;
        v64[2] = 561211770;
      }
      int v17 = 1;
      goto LABEL_50;
    }
    UInt32 v24 = *a5;
    if (v24 != (*(unsigned int (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
    {
      std::mutex v73 = (os_log_t *)sub_32A48(13);
      __int16 v74 = *v73;
      if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
      {
        uint64_t v113 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)&__p, (unsigned int *)&v113);
        int v75 = v116;
        __int16 v76 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v77 = *a5;
        int v78 = (*(uint64_t (**)(unsigned __int8 *, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        int v79 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
        if (v75 < 0) {
          int v79 = v76;
        }
        __int16 v118 = 1024;
        int v119 = 579;
        __int16 v120 = 2080;
        *(void *)int v121 = v79;
        *(_WORD *)&v121[8] = 1024;
        LODWORD(v122[0]) = v77;
        WORD2(v122[0]) = 1024;
        *(_DWORD *)((char *)v122 + 6) = v78;
        _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v116 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }
      AudioObjectPropertyAddress v80 = __cxa_allocate_exception(0x10uLL);
      *(void *)AudioObjectPropertyAddress v80 = &off_6414D8;
      v80[2] = 561211770;
    }
    sub_432AE8((uint64_t)a1, a2, a3, a4, a5, a6);
    if (*(_DWORD *)a6 != a1[680])
    {
      __int16 v25 = (os_log_t *)sub_32A48(13);
      int v26 = *v25;
      if (*v25)
      {
        if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
        {
          int v27 = a1[680];
          float v28 = *a6;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_Codec_Aspen.cpp";
          __int16 v118 = 1024;
          int v119 = 581;
          __int16 v120 = 1024;
          *(_DWORD *)int v121 = v27;
          *(_WORD *)&v121[4] = 1024;
          *(float *)&v121[6] = v28;
          _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Internal state for wind filter property is out of sync.  State:%u, Value:%u\"", buf, 0x1Eu);
        }
      }
    }
  }
}

void sub_1A9060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1A90A0(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      UInt32 v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      UInt32 v24 = "Device_Codec_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 433;
      __int16 v27 = 2080;
      float v28 = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    float v15 = (os_log_t *)sub_32A48(13);
    UInt32 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      int v17 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      UInt32 v24 = "Device_Codec_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 434;
      __int16 v27 = 2080;
      float v28 = v17;
      __int16 v29 = 1024;
      UInt32 v30 = a3;
      __int16 v31 = 2048;
      uint64_t v32 = a4;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    int v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v18 = &off_6414D8;
    v18[2] = 561211770;
  }
  int mSelector = a2->mSelector;
  uint64_t result = 4;
  if ((int)a2->mSelector <= 1836414052)
  {
    if (mSelector > 1685483629)
    {
      if (mSelector == 1685483630) {
        return result;
      }
      int v10 = 1835103844;
    }
    else
    {
      if (mSelector == 1064725619) {
        return result;
      }
      int v10 = 1634759542;
    }
LABEL_16:
    if (mSelector == v10) {
      return result;
    }
    goto LABEL_18;
  }
  if (mSelector > 1986290210)
  {
    if (mSelector == 1986290211) {
      return 16;
    }
    int v10 = 1987013732;
    goto LABEL_16;
  }
  if (mSelector != 1836414053)
  {
    int v10 = 1986229104;
    goto LABEL_16;
  }
  if (a2->mElement == 6)
  {
    int mSelector = a2->mScope;
    int v10 = 1869968496;
    goto LABEL_16;
  }
LABEL_18:

  return sub_433254(a1, a2, a3, a4);
}

uint64_t sub_1A948C(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      if (mSelector == 1986290211)
      {
LABEL_18:
        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          return sub_43356C(a1, a2);
        }
        return 0;
      }
      if (mSelector != 1987013732) {
        return sub_43356C(a1, a2);
      }
    }
    else if (mSelector != 1836414053)
    {
      if (mSelector != 1986229104) {
        return sub_43356C(a1, a2);
      }
      goto LABEL_18;
    }
    if (a2->mElement != 6 || a2->mScope != 1869968496) {
      return sub_43356C(a1, a2);
    }
    return 1;
  }
  uint64_t v3 = 1;
  if (mSelector > 1685483629)
  {
    if (mSelector == 1685483630) {
      return v3;
    }
    if (mSelector != 1835103844) {
      return sub_43356C(a1, a2);
    }
    return 0;
  }
  if (mSelector == 1064725619) {
    return 0;
  }
  if (mSelector != 1634759542) {
    return sub_43356C(a1, a2);
  }
  return v3;
}

BOOL sub_1A95A0(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      BOOL v6 = mSelector == 1987013732;
      int v7 = 1986290211;
    }
    else
    {
      BOOL v6 = mSelector == 1836414053;
      int v7 = 1986229104;
    }
    BOOL v9 = v6 || mSelector == v7;
    if (v9 && a2->mElement == 6 && a2->mScope == 1869968496) {
      return 1;
    }
    goto LABEL_22;
  }
  BOOL result = 1;
  if (mSelector > 1685483629)
  {
    if (mSelector != 1685483630 && mSelector != 1835103844)
    {
LABEL_22:
      sub_50848((std::mutex *)a1);
      return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
    }
  }
  else
  {
    if (mSelector != 1064725619)
    {
      if (mSelector == 1634759542) {
        return result;
      }
      goto LABEL_22;
    }
    return a2->mScope == 1869968496;
  }
  return result;
}

void sub_1A96D0(void *a1)
{
  sub_1A9708(a1);

  operator delete();
}

uint64_t sub_1A9708(void *a1)
{
  *a1 = off_625CF8;
  uint64_t v2 = a1[83];
  a1[83] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1A97C8((uint64_t)(a1 + 64));
  sub_1A980C(a1 + 63);
  uint64_t v3 = a1[62];
  a1[62] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_43456C((uint64_t)a1);
}

uint64_t sub_1A97C8(uint64_t a1)
{
  sub_1A28AC(*(void **)(a1 + 96));
  sub_1A2900((void *)(a1 + 112));

  return sub_AEF0C(a1);
}

uint64_t sub_1A980C(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_172650(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1A9860(uint64_t a1)
{
  uint64_t v2 = sub_AEF58(a1, (uint64_t)"AudioObjectPropertyListenerRelay mutex");
  sub_1A26DC((void *)(v2 + 88));
  return a1;
}

void sub_1A9898(_Unwind_Exception *a1)
{
  sub_AEF0C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1A98AC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &qword_64C8C8);
  if (result)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    unint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315394;
        int v7 = "Device_Codec_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 114;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Requesting that the codec disable microphone power.", (uint8_t *)&v6, 0x12u);
      }
    }
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 0;
    return sub_1A99B8(v5);
  }
  return result;
}

uint64_t sub_1A99B8(uint64_t a1)
{
  uint64_t result = sub_FE8A8(a1);
  if (result)
  {
    int v2 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v2;
  }
  return result;
}

uint64_t sub_1A9A50(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &qword_64C8C8);
  if (result)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    unint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315394;
        int v7 = "Device_Codec_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 105;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Requesting that the codec enable microphone power.", (uint8_t *)&v6, 0x12u);
      }
    }
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 1;
    return sub_1A99B8(v5);
  }
  return result;
}

void sub_1A9B60()
{
}

uint64_t sub_1A9B7C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1A9BA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_625EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1A9BF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_625EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1A9C18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v24 = *(void *)(a1 + 32);
  if (v24 == v3)
  {
    uint64_t v20 = sub_32A48(13);
    UInt32 v21 = sub_7D5E8(1, *(void **)v20, *(void *)(v20 + 8));
    char v22 = v21;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      UInt32 v33 = "DSPChain.mm";
      __int16 v34 = 1024;
      int v35 = 1143;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  do
  {
    uint64_t v5 = *(void *)(v3 + 8);
    unint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v31 = 0;
    int v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v5 + 224))(v5, 1, &v31);
    __int16 v25 = v4;
    if (v6)
    {
      uint64_t v16 = sub_32A48(13);
      int v17 = sub_7D5E8(1, *(void **)v16, *(void *)(v16 + 8));
      int v18 = v17;
      if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        UInt32 v33 = "DSPChain.mm";
        __int16 v34 = 1024;
        int v35 = 1151;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unexpected error from GetBusCount\"", buf, 0x12u);
      }

      uint64_t v19 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v19 = &off_6414D8;
      v19[2] = v6;
    }
    if (!*(void *)(a2 + 40) && v31)
    {
      unint64_t v7 = 1;
      do
      {
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v5 + 128))(v5, 1, v7 - 1);
        long long v9 = *(_OWORD *)(v8 + 16);
        v29[0] = *(_OWORD *)v8;
        v29[1] = v9;
        uint64_t v30 = *(void *)(v8 + 32);
        sub_4EF34((void *)a2, (uint64_t)v29);
        id v10 = *(id *)sub_32A48(24);
        int v11 = v10;
        if (v10)
        {
          uint64_t v12 = v10;
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            sub_259A4(&v28, (uint64_t)v29);
            if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              UInt32 v13 = &v28;
            }
            else {
              UInt32 v13 = (std::string *)v28.__r_.__value_.__r.__words[0];
            }
            unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 152))(v5);
            sub_2417C(__p, v14);
            float v15 = __p;
            if (v27 < 0) {
              float v15 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            UInt32 v33 = "DSPChain.mm";
            __int16 v34 = 1024;
            int v35 = 1162;
            __int16 v36 = 1024;
            int v37 = v7 - 1;
            __int16 v38 = 2080;
            std::chrono::steady_clock::time_point v39 = v13;
            __int16 v40 = 2080;
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = v15;
            _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bus: %d Format: %s AU: %s", buf, 0x2Cu);
            if (v27 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v28.__r_.__value_.__l.__data_);
            }
          }
        }
        if (v7 >= v31) {
          break;
        }
        ++v7;
      }
      while (!*(void *)(a2 + 40));
    }
    if (v25) {
      sub_4636C(v25);
    }
    v3 += 24;
  }
  while (v3 != v24);
}

void sub_1AA044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void *sub_1AA104@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_67D90(a2, *(void **)(a1 + 336), *(void **)(a1 + 344), (uint64_t)(*(void *)(a1 + 344) - *(void *)(a1 + 336)) >> 4);
}

void sub_1AA120(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 796) && *(unsigned char *)(a1 + 797))
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    float v13 = 0.0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *, void))(*(void *)a1 + 64))(a1, 1936747629, 3, (char *)&v15 + 4, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(*(void *)a1 + 64))(a1, 1936747629, 5, &v15, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, char *, void))(*(void *)a1 + 64))(a1, 1936747629, 7, (char *)&v14 + 4, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)a1 + 64))(a1, 1936747629, 8, &v13, 0);
    (*(void (**)(uint64_t, uint64_t, void, uint64_t *, void))(*(void *)a1 + 64))(a1, 1936747629, 0, &v14, 0);
    float v4 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 792)));
    float v5 = *((float *)&v15 + 1) + v4;
    float v6 = COERCE_FLOAT(atomic_load((unsigned int *)(a1 + 792)));
    float v7 = *((float *)&v14 + 1);
    float v8 = *(float *)&v15 + v6;
    *(float *)&uint64_t v15 = *(float *)&v15 + v6;
    *((float *)&v15 + 1) = v5;
    uint64_t v9 = *(void *)(a1 + 736);
    float v10 = v5;
    float v12 = v13;
    float v11 = *(float *)&v14;
    if (qword_64EE90 != -1) {
      dispatch_once(&qword_64EE90, &stru_626078);
    }
    if (off_64EEE8) {
      off_64EEE8(v9, 0, a2, v10, v8, v7, v11, v12);
    }
  }
}

void sub_1AA338(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    float v4 = dlerror();
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
  uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_64EE98 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_64EEA0 = (uint64_t (*)(void))dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_64EEA8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_64EEB0 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_64EEB8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_64EEC0 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_64EEC8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_64EED0 = (uint64_t (*)(void))dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_64EED8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_64EEE0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_64EEE8 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_64EEF0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_64EEF8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_64EF00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_64EF08 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_64EF10 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    off_64EF18 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    off_64EF20 = (uint64_t (*)(void, void, void))dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_64EF28 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_64EF30 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_64EF38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v2 = dlerror();
    int v3 = 136315138;
    float v4 = v2;
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
}

void sub_1AA65C(uint64_t a1, unsigned int **a2)
{
  float v4 = *(unsigned int ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      float v5 = v4 - 4;
      sub_1216C(v4 - 2);
      sub_1216C(v5);
      float v4 = v5;
    }
    while (v5 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_1AA6B8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  sub_10CBC((unsigned int **)a1, a2);
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  sub_10CBC((unsigned int **)(a1 + 16), a2 + 16);
  return a1;
}

void sub_1AA700(_Unwind_Exception *a1)
{
  sub_1216C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1AA714(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    float v4 = (unsigned int **)(i - 32);
    *(void *)(a1 + 16) = i - 32;
    sub_1216C((unsigned int **)(i - 16));
    sub_1216C(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1AA778(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(unsigned int ***)(*(void *)(a1 + 16) + 8);
    float v4 = *(unsigned int ***)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      sub_1216C(v3 + 2);
      sub_1216C(v3);
      v3 += 4;
    }
  }
  return a1;
}

void *sub_1AA7D8(uint64_t a1, size_t size)
{
  if (!a1)
  {
    uint64_t v11 = sub_32A48(13);
    float v12 = sub_7D5E8(1, *(void **)v11, *(void *)(v11 + 8));
    float v13 = v12;
    if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "DSPChain.mm";
      __int16 v21 = 1024;
      int v22 = 122;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inOwner is NULL]: \"specified buffer owner is NULL\"", (uint8_t *)&v19, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "specified buffer owner is NULL");
  }
  int v2 = size;
  if (!size)
  {
    uint64_t v15 = sub_32A48(13);
    uint64_t v16 = sub_7D5E8(1, *(void **)v15, *(void *)(v15 + 8));
    int v17 = v16;
    if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "DSPChain.mm";
      __int16 v21 = 1024;
      int v22 = 123;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"specified buffer size is 0\"", (uint8_t *)&v19, 0x12u);
    }

    int v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(v18, "specified buffer size is 0");
  }
  float v4 = &qword_64CA08;
  while (1)
  {
    uint64_t v5 = *v4;
    if ((uint64_t *)v5 == &qword_64CA00) {
      break;
    }
    if (*(void *)(v5 + 32)) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = *(_DWORD *)(v5 + 24) >= size;
    }
    if (v6)
    {
      float v7 = *(void **)(v5 + 16);
      *(void *)(v5 + 32) = a1;
    }
    else
    {
      float v7 = 0;
    }
    float v4 = (uint64_t *)(v5 + 8);
    if (v7) {
      return v7;
    }
  }
  float v7 = malloc_type_malloc(size, 0xDA07B1C9uLL);
  float v8 = operator new(0x28uLL);
  v8[1] = &qword_64CA00;
  v8[2] = v7;
  *((_DWORD *)v8 + 6) = v2;
  v8[4] = a1;
  uint64_t v9 = qword_64CA00;
  *float v8 = qword_64CA00;
  *(void *)(v9 + 8) = v8;
  qword_64CA00 = (uint64_t)v8;
  ++qword_64CA10;
  return v7;
}

void sub_1AAA4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1AAA6C(uint64_t a1)
{
  if (!sub_4F900(a1))
  {
    uint64_t v11 = sub_32A48(13);
    float v12 = sub_7D5E8(1, *(void **)v11, *(void *)(v11 + 8));
    float v13 = v12;
    if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v22 = "DSPChain.mm";
      __int16 v23 = 1024;
      int v24 = 1512;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v19 = a1 + 48;
  char v20 = 1;
  sub_39ECC(a1 + 48);
  unsigned int v18 = 0;
  for (uint64_t i = *(void *)(a1 + 32); i != *(void *)(a1 + 24); i -= 24)
  {
    char v17 = 0;
    int v3 = (*(uint64_t (**)(void, uint64_t, void, char *))(**(void **)(i - 16) + 248))(*(void *)(i - 16), 2, 0, &v17);
    if (v3)
    {
      uint64_t v6 = sub_32A48(13);
      float v7 = sub_7D5E8(1, *(void **)v6, *(void *)(v6 + 8));
      float v8 = v7;
      if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v22 = "DSPChain.mm";
        __int16 v23 = 1024;
        int v24 = 1525;
        uint64_t v9 = "%25s:%-5d EXCEPTION (stat) [error stat is an error]: \"Unexpected error from HasStaticChannelCountForBus\"";
        goto LABEL_14;
      }
LABEL_15:

      float v10 = __cxa_allocate_exception(0x10uLL);
      *(void *)float v10 = &off_6414D8;
      v10[2] = v3;
    }
    if (v17)
    {
      int v3 = (*(uint64_t (**)(void, uint64_t, void, unsigned int *))(**(void **)(i - 16) + 256))(*(void *)(i - 16), 2, 0, &v18);
      if (!v3)
      {
        uint64_t v4 = v18;
        goto LABEL_10;
      }
      uint64_t v15 = sub_32A48(13);
      uint64_t v16 = sub_7D5E8(1, *(void **)v15, *(void *)(v15 + 8));
      float v8 = v16;
      if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v22 = "DSPChain.mm";
        __int16 v23 = 1024;
        int v24 = 1529;
        uint64_t v9 = "%25s:%-5d EXCEPTION (stat) [error stat is an error]: \"Unexpected error from GetChannelCountForBus\"";
LABEL_14:
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, v9, buf, 0x12u);
      }
      goto LABEL_15;
    }
  }
  uint64_t v4 = 0;
LABEL_10:
  sub_3A3E8((uint64_t)&v19);
  return v4;
}

void sub_1AAD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3A3E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1AADCC(uint64_t a1, int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 != 1718773105 && v3 != 1819304813)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "CAStreamBasicDescription.h";
      __int16 v12 = 1024;
      int v13 = 429;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  ChangeNumberChannels only works for uncompressed formats", (uint8_t *)&v10, 0x12u);
    }
    __break(1u);
    return;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 24);
  if (!v5) {
    goto LABEL_12;
  }
  if ((*(unsigned char *)(a1 + 12) & 0x20) != 0)
  {
    unsigned int v6 = 1;
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(a1 + 28);
    if (!v6) {
      goto LABEL_12;
    }
  }
  if (v6 <= v5)
  {
    unsigned int v7 = v5 / v6;
    goto LABEL_14;
  }
LABEL_12:
  unsigned int v7 = (*(_DWORD *)(a1 + 32) + 7) >> 3;
LABEL_14:
  *(_DWORD *)(a1 + 28) = a2;
  *(_DWORD *)(a1 + 20) = 1;
  if (a3)
  {
    v7 *= a2;
    *(_DWORD *)(a1 + 24) = v7;
    unsigned int v8 = *(_DWORD *)(a1 + 12) & 0xFFFFFFDF;
  }
  else
  {
    *(_DWORD *)(a1 + 24) = v7;
    unsigned int v8 = *(_DWORD *)(a1 + 12) | 0x20;
  }
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v7;
}

uint64_t sub_1AAF0C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 448)) {
    return 0;
  }
  uint64_t v9 = a1 + 48;
  char v10 = 1;
  sub_39ECC(a1 + 48);
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (v3)
  {
    unint64_t v4 = v3 / 24;
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = v4;
    }
    uint64_t v6 = 8;
    do
    {
      uint64_t v7 = *(void *)(a1 + 24);
      if ((*(unsigned int (**)(void))(**(void **)(v7 + v6) + 184))(*(void *)(v7 + v6))) {
        uint64_t v2 = (*(unsigned int (**)(void))(**(void **)(v7 + v6) + 192))(*(void *)(v7 + v6))
      }
           + v2;
      v6 += 24;
      --v5;
    }
    while (v5);
  }
  sub_3A3E8((uint64_t)&v9);
  return v2;
}

void sub_1AB010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1AB024(uint64_t a1, int a2)
{
  uint64_t v11 = a1 + 48;
  char v12 = 1;
  sub_39ECC(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v4 == v5)
  {
    BOOL v8 = 0;
  }
  else
  {
    uint64_t v6 = v4 + 24;
    do
    {
      int v7 = (*(uint64_t (**)(void))(**(void **)(v6 - 16) + 152))(*(void *)(v6 - 16));
      BOOL v8 = v7 == a2;
      BOOL v9 = v7 == a2 || v6 == v5;
      v6 += 24;
    }
    while (!v9);
  }
  sub_3A3E8((uint64_t)&v11);
  return v8;
}

void sub_1AB0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1AB0E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_1AB178(a1, a2, a3, a6);
  if (!v6) {
    return 4294967246;
  }
  int v7 = *(uint64_t (**)(void))(*(void *)v6 + 56);

  return v7();
}

uint64_t sub_1AB178(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a1 + 48;
  char v14 = 1;
  sub_39ECC(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v8 == v9) {
    goto LABEL_9;
  }
  while (1)
  {
    int v16 = 0;
    uint64_t v10 = *(void *)(v8 + 8);
    if (v10)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 152))(v10) == a2)
      {
        char v15 = 0;
        if (!(*(unsigned int (**)(void, uint64_t, int *, char *, uint64_t, void))(**(void **)(v8 + 8)
                                                                                              + 40))(*(void *)(v8 + 8), a3, &v16, &v15, a4, 0))break;
      }
    }
    v8 += 24;
    if (v8 == v9)
    {
      uint64_t v8 = v9;
      break;
    }
  }
  if (v8 == *(void *)(a1 + 32)) {
LABEL_9:
  }
    uint64_t v11 = 0;
  else {
    uint64_t v11 = *(void *)(v8 + 8);
  }
  sub_3A3E8((uint64_t)&v13);
  return v11;
}

void sub_1AB28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_3A3E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1AB2A0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = sub_1AB178(a1, a2, a3, a6);
  if (!v6) {
    return 1685220966;
  }
  int v7 = *(uint64_t (**)(void))(*(void *)v6 + 48);

  return v7();
}

uint64_t sub_1AB338(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_1AB178(a1, a2, a3, a6);
  if (result) {
    return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)result + 40))(result, a3, a4, a5, a6, 0) == 0;
  }
  return result;
}

BOOL sub_1AB3B8(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_1AB178(a1, a2, a3, a4) != 0;
}

uint64_t sub_1AB3D8()
{
  return 0;
}

uint64_t sub_1AB3E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_13714(a1, a2, a3, a5);
  if (!v8) {
    return 4294967246;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v8 + 64))(v8, a3, a4, a5, 0);
  if (result) {
    return 4294967246;
  }
  return result;
}

BOOL sub_1AB458(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_13714(a1, a2, a3, a4) != 0;
}

uint64_t sub_1AB478(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v10 = a1 + 48;
  char v11 = 1;
  sub_39ECC(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 24);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 32) - v6) >> 3) <= a2)
  {
    int v8 = 0;
    uint64_t v7 = 1685220966;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(v6 + 24 * a2);
  }
  *a3 = v8;
  sub_3A3E8((uint64_t)&v10);
  return v7;
}

uint64_t sub_1AB518(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  uint64_t v63 = a1 + 48;
  char v64 = 1;
  sub_F648(a1 + 48);
  *(_WORD *)&AudioObjectPropertyAddress buf[2] = *(_WORD *)(v3 + 680);
  *(_WORD *)AudioObjectPropertyAddress buf = *(_WORD *)(v3 + 680);
  HIWORD(v65) = *(_WORD *)(v3 + 680);
  LOWORD(v65) = *(_WORD *)(v3 + 680) == 0;
  int v4 = *(_DWORD *)buf;
  atomic_compare_exchange_strong((atomic_uint *volatile)(v3 + 680), (unsigned int *)&v4, v65);
  uint64_t v5 = 400;
  if (!*(_WORD *)(v3 + 680)) {
    uint64_t v5 = 424;
  }
  uint64_t v60 = v5;
  if (*(_WORD *)(v3 + 680)) {
    uint64_t v6 = (uint64_t *)(v3 + 400);
  }
  else {
    uint64_t v6 = (uint64_t *)(v3 + 424);
  }
  sub_1ABBD8(v6);
  uint64_t v7 = (uint64_t *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32) - *(void *)(v3 + 24);
  if (!v8)
  {
    char v11 = 0;
    goto LABEL_48;
  }
  int v59 = (atomic_uint *)(v3 + 680);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v62 = 0;
  unint64_t v12 = v8 / 24;
  if (v12 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  unsigned int v14 = -1;
  do
  {
    uint64_t v15 = *v7;
    int v16 = *(_DWORD *)(*v7 + v9);
    if (v16 == a2)
    {
      uint64_t v17 = *(void *)(v15 + v9 + 8);
      unsigned int v18 = *(std::__shared_weak_count **)(v15 + v9 + 16);
      uint64_t v62 = v17;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11) {
        sub_4636C(v11);
      }
      char v11 = v18;
      unsigned int v14 = v10;
    }
    else
    {
      unint64_t v19 = v6[1];
      unint64_t v20 = v6[2];
      if (v19 >= v20)
      {
        UInt32 v61 = v11;
        uint64_t v23 = v3;
        uint64_t v24 = *(void *)(v3 + v60);
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v24) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_60548();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v24) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        *(void *)&buf[32] = v6 + 2;
        __int16 v29 = (char *)sub_21974(v28);
        uint64_t v30 = &v29[24 * v25];
        *(void *)AudioObjectPropertyAddress buf = v29;
        *(void *)&buf[8] = v30;
        *(void *)&buf[24] = &v29[24 * v31];
        *(_DWORD *)uint64_t v30 = *(_DWORD *)(v15 + v9);
        long long v32 = *(_OWORD *)(v15 + v9 + 8);
        *(_OWORD *)(v30 + 8) = v32;
        if (*((void *)&v32 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v32 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)&buf[16] = v30 + 24;
        sub_1AC2AC(v6, buf);
        uint64_t v22 = v6[1];
        sub_1AC310((uint64_t)buf);
        uint64_t v3 = v23;
        char v11 = v61;
      }
      else
      {
        *(_DWORD *)unint64_t v19 = v16;
        *(void *)(v19 + 8) = *(void *)(v15 + v9 + 8);
        uint64_t v21 = *(void *)(v15 + v9 + 16);
        *(void *)(v19 + 16) = v21;
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v22 = v19 + 24;
      }
      v6[1] = v22;
    }
    ++v10;
    v9 += 24;
  }
  while (v13 != v10);
  if (!v62)
  {
LABEL_48:
    v44 = *(id *)sub_32A48(13);
    char v45 = v44;
    if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1807;
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"No instance to delete\"", buf, 0x12u);
    }

    sub_C7D4(&v63);
    uint64_t v46 = 1685220966;
    if (!v11) {
      return v46;
    }
LABEL_52:
    sub_4636C(v11);
    return v46;
  }
  sub_1ABC24(v7, *(void *)(v3 + v60), v6[1], 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *(void *)(v3 + v60)) >> 3));
  if (*(void *)(v3 + 32) == *(void *)(v3 + 24)) {
    *(unsigned char *)(v3 + 448) = 0;
  }
  sub_C7D4(&v63);
  uint64_t v33 = *(void *)(v3 + 872);
  if (v33)
  {
    sub_32E250(v33, v14);
    *(_DWORD *)AudioObjectPropertyAddress buf = 1635087726;
    AUPBPropertiesChanged();
  }
  sub_1ABD94(v59);
  mach_absolute_time();
  unint64_t v34 = __udivti3();
  unint64_t v35 = v34 / 0x3E8;
  __int16 v36 = (void *)(v3 + 696);
  int v37 = *(uint64_t **)(v3 + 696);
  __int16 v38 = (uint64_t **)(v3 + 696);
  std::chrono::steady_clock::time_point v39 = (uint64_t **)(v3 + 696);
  if (v37)
  {
    while (1)
    {
      while (1)
      {
        std::chrono::steady_clock::time_point v39 = (uint64_t **)v37;
        unint64_t v40 = v37[4];
        if (v35 >= v40) {
          break;
        }
        int v37 = *v39;
        __int16 v38 = v39;
        if (!*v39) {
          goto LABEL_44;
        }
      }
      if (v40 >= v35) {
        break;
      }
      int v37 = v39[1];
      if (!v37)
      {
        __int16 v38 = v39 + 1;
        goto LABEL_44;
      }
    }
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = (uint64_t *)v39;
  }
  else
  {
LABEL_44:
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v41 = (uint64_t *)operator new(0x30uLL);
    v41[4] = v35;
    v41[5] = 0;
    uint64_t *v41 = 0;
    v41[1] = 0;
    v41[2] = (uint64_t)v39;
    NSObject *v38 = v41;
    uint64_t v42 = **(void **)(v3 + 688);
    uint64_t v43 = v41;
    if (v42)
    {
      *(void *)(v3 + 688) = v42;
      uint64_t v43 = *v38;
    }
    sub_46D00(*(uint64_t **)(v3 + 696), v43);
    ++*(void *)(v3 + 704);
  }
  v41[5] = v62;
  id v48 = *(id *)sub_32A48(24);
  BOOL v49 = v48;
  if (v48)
  {
    uint64_t v50 = v48;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      int v51 = (*(uint64_t (**)(uint64_t))(*(void *)v62 + 144))(v62);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1846;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v34 / 0x3E8;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v51;
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d At time(us) %lld, marking instanceID %u for deletion", buf, 0x22u);
    }
  }
  if (v34 <= 0x3B9ACDE7)
  {
    __int16 v52 = *(id *)sub_32A48(13);
    UInt32 v53 = v52;
    if (v52 && os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1848;
      _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected current time result\"", buf, 0x12u);
    }
  }
  int v54 = (void *)*v36;
  if (*v36)
  {
    unint64_t v55 = v35 - 1000000;
    do
    {
      unint64_t v56 = v54[4];
      BOOL v57 = v55 >= v56;
      if (v55 >= v56) {
        uint64_t v58 = v54 + 1;
      }
      else {
        uint64_t v58 = v54;
      }
      if (!v57) {
        __int16 v36 = v54;
      }
      int v54 = (void *)*v58;
    }
    while (*v58);
  }
  *(void *)AudioObjectPropertyAddress buf = v36;
  sub_1ABEB0(v3, (uint64_t **)buf);
  uint64_t v46 = 0;
  if (v11) {
    goto LABEL_52;
  }
  return v46;
}

void sub_1ABB70(_Unwind_Exception *a1)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1ABBD8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    int v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_4636C(v4);
    }
  }
  a1[1] = v2;
}

void sub_1ABC24(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = a1 + 2;
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 3) < a4)
  {
    if (v10)
    {
      sub_1ABBD8(a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_20;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    unint64_t v13 = v11 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v12;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
LABEL_20:
    }
      sub_60548();
    unsigned int v14 = sub_21974(v13);
    *a1 = (uint64_t)v14;
    a1[1] = (uint64_t)v14;
    a1[2] = (uint64_t)v14 + 24 * v15;
    uint64_t v16 = (uint64_t)v9;
    uint64_t v17 = a2;
    goto LABEL_14;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v10) >> 3) < a4)
  {
    uint64_t v18 = a2 + 8 * ((a1[1] - v10) >> 3);
    sub_1AC1F4(a2, v18, v10);
    unsigned int v14 = (void *)a1[1];
    uint64_t v16 = (uint64_t)v9;
    uint64_t v17 = v18;
LABEL_14:
    a1[1] = sub_1AC26C(v16, v17, a3, (uint64_t)v14);
    return;
  }
  uint64_t v19 = sub_1AC1F4(a2, a3, v10);
  for (uint64_t i = a1[1]; i != v19; i -= 24)
  {
    uint64_t v21 = *(std::__shared_weak_count **)(i - 8);
    if (v21) {
      sub_4636C(v21);
    }
  }
  a1[1] = v19;
}

void sub_1ABD94(atomic_uint *a1)
{
  HIWORD(v6) = *(_WORD *)a1 == 0;
  LOWORD(v6) = *(_WORD *)a1;
  HIWORD(v5) = HIWORD(v6);
  LOWORD(v5) = HIWORD(v6);
  int v1 = v6;
  int v2 = v6;
  atomic_compare_exchange_strong(a1, (unsigned int *)&v2, v5);
  if (v2 != v1)
  {
    uint64_t v3 = *(id *)sub_32A48(13);
    int v4 = v3;
    if (v3)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v8 = "AtomicUtils.h";
        __int16 v9 = 1024;
        int v10 = 147;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"this shouldn't happen: failed to atomically swap banks.\"", buf, 0x12u);
      }
    }
  }
}

void sub_1ABEB0(uint64_t a1, uint64_t **a2)
{
  int v2 = *(uint64_t **)(a1 + 688);
  if (v2 != *a2)
  {
    do
    {
      uint64_t v5 = v2[5];
      id v6 = *(id *)sub_32A48(24);
      uint64_t v7 = v6;
      if (v6)
      {
        uint64_t v8 = v6;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          mach_absolute_time();
          int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 144))(v5);
          unint64_t v10 = __udivti3();
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v22 = "DSPChain.mm";
          __int16 v23 = 1024;
          int v24 = 1866;
          __int16 v25 = 2048;
          unint64_t v26 = v10 / 0x3E8;
          __int16 v27 = 1024;
          int v28 = v9;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Time(us): %lld: deleting instanceID: %u", buf, 0x22u);
        }
      }
      if (v5)
      {
        sub_26F17C();
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 144))(v5);
        (*(void (**)(uint64_t *, uint64_t))(qword_64E880 + 104))(&qword_64E880, v11);
      }
      else
      {
        uint64_t v12 = *(id *)sub_32A48(13);
        unint64_t v13 = v12;
        if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v22 = "DSPChain.mm";
          __int16 v23 = 1024;
          int v24 = 1875;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"NULL pointer instead of valid IDSPProcessorManagedInstance pointer found\"", buf, 0x12u);
        }
      }
      unsigned int v14 = (uint64_t *)v2[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unsigned int v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (uint64_t *)v2[2];
          BOOL v16 = *v15 == (void)v2;
          int v2 = v15;
        }
        while (!v16);
      }
      int v2 = v15;
    }
    while (v15 != *a2);
    uint64_t v17 = *(uint64_t **)(a1 + 688);
    if (v17 != v15)
    {
      do
      {
        uint64_t v18 = (uint64_t *)v17[1];
        uint64_t v19 = v17;
        if (v18)
        {
          do
          {
            unint64_t v20 = v18;
            uint64_t v18 = (uint64_t *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            unint64_t v20 = (uint64_t *)v19[2];
            BOOL v16 = *v20 == (void)v19;
            uint64_t v19 = v20;
          }
          while (!v16);
        }
        if (*(uint64_t **)(a1 + 688) == v17) {
          *(void *)(a1 + 688) = v20;
        }
        --*(void *)(a1 + 704);
        sub_89144(*(uint64_t **)(a1 + 696), v17);
        operator delete(v17);
        uint64_t v17 = v20;
      }
      while (v20 != v15);
    }
  }
}

void sub_1AC1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1AC1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      uint64_t v7 = *(void *)(v5 + 8);
      uint64_t v6 = *(void *)(v5 + 16);
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(a3 + 16);
      *(void *)(a3 + 8) = v7;
      *(void *)(a3 + 16) = v6;
      if (v8) {
        sub_4636C(v8);
      }
      a3 += 24;
      v5 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_1AC26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t result = a4; a2 != a3; a2 += 24)
  {
    *(_DWORD *)uint64_t result = *(_DWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)(result + 8) = *(void *)(a2 + 8);
    *(void *)(result + 16) = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    result += 24;
  }
  return result;
}

uint64_t *sub_1AC2AC(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 24);
    v2 -= 24;
    *(_DWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1AC310(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 24;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      sub_4636C(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1AC370(uint64_t a1, void *a2, unint64_t a3)
{
  (*(void (**)(void, void))(*(void *)*a2 + 136))(*a2, *(unsigned int *)(a1 + 496));
  if (!*(unsigned char *)(a1 + 449) && (*(unsigned int (**)(void))(*(void *)*a2 + 208))()) {
    (*(void (**)(void, void))(*(void *)*a2 + 176))(*a2, 0);
  }
  int v69 = (*(uint64_t (**)(void))(*(void *)*a2 + 144))();
  id v5 = *(id *)sub_32A48(24);
  uint64_t v6 = v5;
  if (v5)
  {
    uint64_t v7 = v5;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v75 = (*(uint64_t (**)(void))(*(void *)*a2 + 160))();
      char v76 = 1;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1715;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v75;
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = v69;
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = a3;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding DSP processor of type \"%@\" with instance ID %u at chain index %lu", buf, 0x2Cu);
      sub_72924((uint64_t)&v75);
    }
  }
  uint64_t v75 = a1 + 48;
  char v76 = 1;
  sub_F648(a1 + 48);
  __int16 v74 = (uint64_t *)(a1 + 24);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3);
  if (v8 < a3)
  {
    uint64_t v63 = sub_32A48(13);
    char v64 = sub_7D5E8(1, *(void **)v63, *(void *)(v63 + 8));
    unsigned int v65 = v64;
    if (v64 && os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1722;
      _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"Bad index into DSP chain.\"", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Bad index into DSP chain.");
  }
  *(_WORD *)&AudioObjectPropertyAddress buf[2] = *(_WORD *)(a1 + 680);
  *(_WORD *)AudioObjectPropertyAddress buf = *(_WORD *)(a1 + 680);
  HIWORD(v77) = *(_WORD *)(a1 + 680);
  LOWORD(v77) = *(_WORD *)(a1 + 680) == 0;
  int v9 = *(_DWORD *)buf;
  atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 680), (unsigned int *)&v9, v77);
  uint64_t v10 = 400;
  if (!*(_WORD *)(a1 + 680)) {
    uint64_t v10 = 424;
  }
  uint64_t v71 = a1;
  uint64_t v72 = v10;
  if (*(_WORD *)(a1 + 680)) {
    uint64_t v11 = (uint64_t *)(a1 + 400);
  }
  else {
    uint64_t v11 = (uint64_t *)(a1 + 424);
  }
  int v70 = a2;
  if (v8 <= a3)
  {
    sub_1ABC24(v11, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
    long long v43 = *(_OWORD *)a2;
    uint64_t v44 = a2[1];
    if (v44) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v45 = v11[2];
    unint64_t v46 = v11[1];
    if (v46 >= v45)
    {
      long long v68 = v43;
      uint64_t v47 = *(void *)(a1 + v72);
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - v47) >> 3);
      unint64_t v49 = v48 + 1;
      if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_60548();
      }
      unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v45 - v47) >> 3);
      if (2 * v50 > v49) {
        unint64_t v49 = 2 * v50;
      }
      if (v50 >= 0x555555555555555) {
        unint64_t v51 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v51 = v49;
      }
      *(void *)&buf[32] = v11 + 2;
      __int16 v52 = (char *)sub_21974(v51);
      UInt32 v53 = &v52[24 * v48];
      *(void *)AudioObjectPropertyAddress buf = v52;
      *(void *)&buf[8] = v53;
      *(void *)&buf[24] = &v52[24 * v54];
      *(_DWORD *)UInt32 v53 = v69;
      *(_OWORD *)(v53 + 8) = v68;
      *(void *)&buf[16] = v53 + 24;
      sub_1AC2AC(v11, buf);
      uint64_t v33 = v11[1];
      sub_1AC310((uint64_t)buf);
    }
    else
    {
      *(_DWORD *)unint64_t v46 = v69;
      *(_OWORD *)(v46 + 8) = v43;
      uint64_t v33 = v46 + 24;
      v11[1] = v46 + 24;
    }
    v11[1] = v33;
  }
  else
  {
    sub_1ABBD8(v11);
    uint64_t v12 = 0;
    unint64_t v13 = (unint64_t *)(v11 + 2);
    unsigned int v14 = 1;
    unint64_t v15 = a3;
    do
    {
      if (v12 == v15)
      {
        long long v16 = *(_OWORD *)v70;
        uint64_t v17 = v70[1];
        if (v17) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v19 = v11[1];
        unint64_t v18 = v11[2];
        if (v19 >= v18)
        {
          long long v67 = v16;
          uint64_t v21 = *(void *)(a1 + v72);
          unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v21) >> 3);
          unint64_t v23 = v22 + 1;
          if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_60548();
          }
          unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v21) >> 3);
          if (2 * v24 > v23) {
            unint64_t v23 = 2 * v24;
          }
          if (v24 >= 0x555555555555555) {
            unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v25 = v23;
          }
          *(void *)&buf[32] = v11 + 2;
          unint64_t v26 = (char *)sub_21974(v25);
          __int16 v27 = &v26[24 * v22];
          *(void *)AudioObjectPropertyAddress buf = v26;
          *(void *)&buf[8] = v27;
          *(void *)&buf[24] = &v26[24 * v28];
          *(_DWORD *)__int16 v27 = v69;
          *(_OWORD *)(v27 + 8) = v67;
          *(void *)&buf[16] = v27 + 24;
          sub_1AC2AC(v11, buf);
          unint64_t v20 = v11[1];
          sub_1AC310((uint64_t)buf);
          unint64_t v15 = a3;
        }
        else
        {
          *(_DWORD *)unint64_t v19 = v69;
          *(_OWORD *)(v19 + 8) = v16;
          unint64_t v20 = v19 + 24;
          v11[1] = v19 + 24;
        }
        v11[1] = v20;
      }
      else
      {
        unint64_t v20 = v11[1];
      }
      uint64_t v29 = *v74;
      uint64_t v30 = (_DWORD *)(*v74 + 24 * v12);
      if (v20 >= *v13)
      {
        uint64_t v34 = *(void *)(a1 + v72);
        unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v34) >> 3);
        unint64_t v36 = v35 + 1;
        if (v35 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_60548();
        }
        if (0x5555555555555556 * ((uint64_t)(*v13 - v34) >> 3) > v36) {
          unint64_t v36 = 0x5555555555555556 * ((uint64_t)(*v13 - v34) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v13 - v34) >> 3) >= 0x555555555555555) {
          unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v37 = v36;
        }
        *(void *)&buf[32] = v11 + 2;
        __int16 v38 = (char *)sub_21974(v37);
        std::chrono::steady_clock::time_point v39 = &v38[24 * v35];
        *(void *)AudioObjectPropertyAddress buf = v38;
        *(void *)&buf[8] = v39;
        *(void *)&buf[24] = &v38[24 * v40];
        *(_DWORD *)std::chrono::steady_clock::time_point v39 = *v30;
        long long v41 = *(_OWORD *)(v29 + 24 * v12 + 8);
        *(_OWORD *)(v39 + 8) = v41;
        if (*((void *)&v41 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v41 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        *(void *)&buf[16] = v39 + 24;
        sub_1AC2AC(v11, buf);
        uint64_t v33 = v11[1];
        sub_1AC310((uint64_t)buf);
        unint64_t v15 = a3;
      }
      else
      {
        *(_DWORD *)unint64_t v20 = *v30;
        uint64_t v31 = v29 + 24 * v12;
        *(void *)(v20 + 8) = *(void *)(v31 + 8);
        uint64_t v32 = *(void *)(v31 + 16);
        *(void *)(v20 + 16) = v32;
        if (v32) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v33 = v20 + 24;
      }
      v11[1] = v33;
      uint64_t v12 = v14;
    }
    while (v8 > v14++);
  }
  sub_1ABC24(v74, *(void *)(a1 + v72), v33, 0xAAAAAAAAAAAAAAABLL * ((v33 - *(void *)(a1 + v72)) >> 3));
  sub_C7D4(&v75);
  sub_1ABD94((atomic_uint *)(a1 + 680));
  *(unsigned char *)(a1 + 448) = 1;
  unint64_t v55 = *(void **)(a1 + 872);
  if (v55)
  {
    uint64_t v56 = *v70;
    uint64_t v57 = (*(uint64_t (**)(void))(*(void *)*v70 + 168))(*v70);
    *(void *)&buf[8] = 0;
    *(void *)AudioObjectPropertyAddress buf = *(void *)v57;
    *(_DWORD *)&buf[8] = *(_DWORD *)(v57 + 8);
    *(void *)&buf[16] = v56;
    sub_2979B0(v55, a3, (unint64_t)buf);
    if (AUPBRegisterAU())
    {
      uint64_t v59 = v55[3];
      uint64_t v58 = v55[4];
      if (0xAAAAAAAAAAAAAAABLL * ((v58 - v59) >> 3) > a3)
      {
        uint64_t v60 = v59 + 24 * a3;
        uint64_t v61 = v58 - (v60 + 24);
        if (v58 != v60 + 24) {
          memmove((void *)(v59 + 24 * a3), (const void *)(v60 + 24), v58 - (v60 + 24));
        }
        v55[4] = v60 + v61;
      }
    }
  }
  if (*(unsigned char *)(v71 + 392) && *(void *)(v71 + 872))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1635087726;
    AUPBPropertiesChanged();
  }
  return 0;
}

void sub_1ACBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_C7D4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1ACC1C(void *a1, uint64_t *a2)
{
  int v9 = a1 + 6;
  char v10 = 1;
  sub_F648((uint64_t)(a1 + 6));
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  unint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (*(uint64_t (**)(void *, uint64_t *, unint64_t))(*a1 + 32))(a1, &v7, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[4] - a1[3]) >> 3));
  if (v8) {
    sub_4636C(v8);
  }
  sub_C7D4(&v9);
  return v5;
}

void sub_1ACCD4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_4636C(a3);
  }
  sub_C7D4(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1ACCF4(uint64_t a1, void *a2)
{
  void (***v138)(std::string *__return_ptr, void, std::string *);
  id v139;
  NSObject *v140;
  unsigned int v141;
  std::string *v142;
  const char *v143;
  NSObject *v144;
  uint32_t v145;
  std::__shared_weak_count *v146;
  std::string::size_type v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  unsigned int v152;
  std::string *v153;
  int v154;
  int v155;
  const char *v156;
  unint64_t v157;
  long long v158;
  std::__shared_weak_count *v159;
  char *v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  long long v163;
  std::__shared_weak_count *v164;
  uint64_t v165;
  void *v166;
  uint64_t *v167;
  NSObject *v168;
  NSObject *v169;
  std::__shared_weak_count *v170;
  uint64_t v171;
  NSObject *v172;
  NSObject *v173;
  void *v174;
  std::__shared_weak_count *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  std::__shared_weak_count *v178;
  os_log_t *v179;
  NSObject *v180;
  NSObject *v181;
  NSObject *v182;
  void *v183;
  int v184;
  uint64_t v185;
  std::__shared_weak_count *v186;
  std::string *size;
  unsigned int *v188;
  std::string::size_type v189;
  NSObject *v190;
  NSObject *v191;
  std::string::pointer data;
  std::__shared_weak_count *v193;
  _DWORD *v194;
  uint64_t v195;
  int v196;
  id v197;
  void *v198;
  NSObject *v199;
  unsigned char *v200;
  std::string::size_type v201;
  unsigned int v202;
  id v203;
  void *v204;
  NSObject *v205;
  int v206;
  unsigned char *v207;
  unsigned char *v208;
  unsigned char *v209;
  id v210;
  void *v211;
  NSObject *v212;
  unsigned char *v213;
  std::__shared_weak_count *v214;
  std::__shared_weak_count *v215;
  std::__shared_weak_count *v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;
  _DWORD *v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int *v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  char *v232;
  unint64_t v233;
  _DWORD *v234;
  id v235;
  NSObject *v236;
  int v237;
  std::string::size_type v238;
  int v239;
  std::string *v240;
  NSObject *v241;
  const char *v242;
  char *v243;
  uint64_t v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  char *v248;
  char *v249;
  char *v250;
  int v251;
  uint64_t v252;
  char *v253;
  id v254;
  int v255;
  std::string::size_type v256;
  int v257;
  std::string *v258;
  NSObject *v259;
  NSObject *v260;
  NSObject *v261;
  NSObject *v262;
  uint64_t v263;
  const char *v264;
  std::string *v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  uint8x8_t v270;
  void *v271;
  void *i;
  unint64_t v273;
  void *v274;
  float v275;
  BOOL v276;
  unint64_t v277;
  unint64_t v278;
  int8x8_t prime;
  void *v280;
  void *v281;
  uint64_t v282;
  void **v283;
  unint64_t v284;
  uint8x8_t v285;
  unint64_t v286;
  uint8x8_t v287;
  uint64_t v288;
  void *j;
  unint64_t v290;
  uint64_t v291;
  void *v292;
  unint64_t v293;
  float v294;
  NSObject *v295;
  NSObject *v296;
  void *v297;
  NSObject *v298;
  NSObject *v299;
  void *v300;
  char *v301;
  char *v302;
  long long v303;
  std::__shared_weak_count *v304;
  unint64_t v305;
  void *v306;
  void *v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  unint64_t v312;
  char *v313;
  long long v314;
  char *v315;
  uint64_t v316;
  void *k;
  id v318;
  void *v319;
  void *v320;
  unsigned int v321;
  NSObject *v322;
  NSObject *v323;
  uint64_t v324;
  void *v325;
  std::string::size_type v326;
  unsigned int v327;
  NSObject *v328;
  NSObject *v329;
  void *m;
  std::__shared_weak_count *v331;
  std::__shared_weak_count *v332;
  uint64_t v333;
  int v334;
  unsigned int v335;
  NSObject *v336;
  NSObject *v337;
  NSObject *v338;
  unsigned char *v339;
  int v340;
  std::string *v341;
  std::string::size_type v342;
  int32x2_t v343;
  int64x2_t v344;
  int8x16_t v345;
  NSObject *v346;
  NSObject *v347;
  uint64_t *v348;
  NSObject *v349;
  NSObject *v350;
  NSObject *v351;
  NSObject *v352;
  NSObject *v353;
  NSObject *v354;
  NSObject *v355;
  std::__shared_weak_count *v357;
  std::string::size_type v358;
  std::string *v359;
  std::string *v360;
  std::string *v361;
  std::__shared_weak_count *v362;
  unint64_t v363;
  std::string **v364;
  void *v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  unint64_t v370;
  char *v371;
  long long v372;
  char *v373;
  uint64_t v374;
  void *v375;
  uint64_t v376;
  void *v377;
  void *v378;
  NSObject *v379;
  void *v380;
  std::string *p_dst;
  std::logic_error *v382;
  uint64_t v383;
  NSObject *v384;
  NSObject *v385;
  std::runtime_error *exception;
  std::runtime_error *v387;
  uint64_t v388;
  NSObject *v389;
  NSObject *v390;
  uint64_t v391;
  NSObject *v392;
  NSObject *v393;
  std::__shared_weak_count *v394;
  NSObject *v395;
  NSObject *log;
  _DWORD *v398;
  BOOL v399;
  long long v400;
  long long v401;
  uint64_t *v402;
  os_signpost_id_t v403;
  std::string v404;
  CFStringRef v405;
  CFStringRef v406;
  CFStringRef v407;
  uint64_t *v408;
  void *v409;
  unint64_t v410;
  CFTypeRef v411[2];
  int64_t v412;
  CFStringRef v413[2];
  CFTypeRef cf;
  CFTypeRef v415;
  unsigned __int8 v416;
  CFStringRef v417[2];
  std::string v418;
  std::string __p;
  std::string __dst;
  uint64_t v421;
  void *v422;
  void *v423;
  unsigned char buf[56];
  const char *v425;
  int v426;
  unsigned char v427[28];
  unsigned char v428[28];
  unint64_t v429;
  unint64_t v430;

  uint64_t v4 = *(id *)sub_32A48(24);
  uint64_t v5 = v4;
  if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 712);
    if (*(char *)(a1 + 735) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 607;
    *(_WORD *)&buf[18] = 2080;
    *(void *)&buf[20] = v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Initializing DSP chain \"%s\"", buf, 0x1Cu);
  }

  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_DSPInitialization", 0x14uLL) == &qword_659450)
  {
    os_signpost_id_t v7 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v7 = os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    unint64_t v8 = (id)qword_659470;
    int v9 = v8;
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      char v10 = (void *)(a1 + 712);
      if (*(char *)(a1 + 735) < 0) {
        char v10 = (void *)*v10;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "VA_DSPInitialization", "Initializing DSP: %s", buf, 0xCu);
    }
  }
  v403 = v7;
  uint64_t v11 = sub_32A48(42);
  if (*(unsigned char *)(v11 + 8))
  {
    uint64_t v12 = *(id *)v11;
    if (v12)
    {
      unint64_t v13 = v12;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 91;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = "kDSPInitialization";
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }
  if (!*(void *)(a1 + 1128)) {
    goto LABEL_152;
  }
  v409 = 0;
  v410 = 0;
  v408 = (uint64_t *)&v409;
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 184))(v428, a1);
  sub_157574((uint64_t)buf, *(CFDictionaryRef *)(a1 + 1128));
  sub_157574((uint64_t)&__dst, *(CFDictionaryRef *)(a1 + 1128));
  __dst.__r_.__value_.__l.__size_ = (int64_t)(v421 - __dst.__r_.__value_.__r.__words[2]) >> 3;
  while (1)
  {
    if (*(void *)buf && *(void *)&buf[8] != (uint64_t)(*(void *)&buf[24] - *(void *)&buf[16]) >> 3)
    {
      std::string::size_type v14 = __dst.__r_.__value_.__r.__words[0];
      goto LABEL_29;
    }
    std::string::size_type v14 = __dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__r.__words[0]
      || __dst.__r_.__value_.__l.__size_ == (int64_t)(v421 - __dst.__r_.__value_.__r.__words[2]) >> 3)
    {
      break;
    }
LABEL_29:
    if (*(_OWORD *)buf == __PAIR128__(__dst.__r_.__value_.__l.__size_, v14)) {
      break;
    }
    sub_1588C0(&cf, buf);
    sub_1707BC(v427, &v415);
    unint64_t v15 = *(const void **)v427;
    if (!*(void *)v427)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    signed int v16 = sub_7E85C(*(const __CFNumber **)v427);
    CFRelease(v15);
    if (v16 > 1919509352)
    {
      if (v16 == 1919509353)
      {
        sub_E2B68(v411, &cf);
        if (!v411[0])
        {
          v387 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v387, "Could not construct");
        }
        sub_20C54((uint64_t)v427, (const __CFString *)v411[0]);
        if (v430 < 2) {
          unsigned int v23 = 0;
        }
        else {
          unsigned int v23 = *(_DWORD *)(*(void *)(*(void *)&v428[8] + 8 * ((v429 + 1) / 0x66)) + 40 * ((v429 + 1) % 0x66) + 28);
        }
        std::to_string(&v418, v23);
        unint64_t v24 = std::string::append(&v418, "i", 1uLL);
        AudioObjectPropertyAddress __p = *v24;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        sub_1B6630(&v408, (void **)v427, (uint64_t)v427, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v418.__r_.__value_.__l.__data_);
        }
        if ((v427[23] & 0x80000000) != 0) {
          operator delete(*(void **)v427);
        }
        if (v411[0]) {
          CFRelease(v411[0]);
        }
      }
      else
      {
        if (v16 != 1936859168)
        {
LABEL_45:
          id v19 = *(id *)sub_32A48(24);
          unint64_t v20 = v19;
          if (v19)
          {
            uint64_t v21 = v19;
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              sub_2417C(&__p, v16);
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v427 = 136315650;
              *(void *)&v427[4] = "DSPChain.mm";
              *(_WORD *)&v427[12] = 1024;
              *(_DWORD *)&v427[14] = 3219;
              *(_WORD *)&v427[18] = 2080;
              *(void *)&v427[20] = p_p;
              _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not find macro command %s", v427, 0x1Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
          goto LABEL_73;
        }
        if (v430)
        {
          CFStringRef v17 = (const __CFString *)cf;
          if (cf) {
            CFRetain(cf);
          }
          v405 = v17;
          sub_1B6588(&v408, v17, *(double *)(*(void *)(*(void *)&v428[8] + 8 * (v429 / 0x66)) + 40 * (v429 % 0x66)));
          if (v17) {
LABEL_63:
          }
            CFRelease(v17);
        }
      }
    }
    else if (v16 == 1835623267)
    {
      if (v430)
      {
        CFStringRef v17 = (const __CFString *)cf;
        if (cf) {
          CFRetain(cf);
        }
        v406 = v17;
        sub_1B6588(&v408, v17, *(_DWORD *)(*(void *)(*(void *)&v428[8] + 8 * (v429 / 0x66)) + 40 * (v429 % 0x66) + 28));
        if (v17) {
          goto LABEL_63;
        }
      }
    }
    else
    {
      if (v16 != 1919509347) {
        goto LABEL_45;
      }
      CFStringRef v17 = (const __CFString *)cf;
      if (cf) {
        CFRetain(cf);
      }
      v407 = v17;
      if (v430 < 2) {
        unsigned int v18 = 0;
      }
      else {
        unsigned int v18 = *(_DWORD *)(*(void *)(*(void *)&v428[8] + 8 * ((v429 + 1) / 0x66)) + 40 * ((v429 + 1) % 0x66) + 28);
      }
      sub_1B6588(&v408, v17, v18);
      if (v17) {
        goto LABEL_63;
      }
    }
LABEL_73:
    if (v415) {
      CFRelease(v415);
    }
    if (cf) {
      CFRelease(cf);
    }
    ++*(void *)&buf[8];
  }
  if (v422)
  {
    v423 = v422;
    operator delete(v422);
  }
  if (__dst.__r_.__value_.__r.__words[2])
  {
    v421 = __dst.__r_.__value_.__r.__words[2];
    operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
  }
  if (*(void *)&buf[40])
  {
    *(void *)&uint8_t buf[48] = *(void *)&buf[40];
    operator delete(*(void **)&buf[40]);
  }
  if (*(void *)&buf[16])
  {
    *(void *)&buf[24] = *(void *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }
  id v25 = *(id *)sub_32A48(24);
  unint64_t v26 = v25;
  if (v25)
  {
    __int16 v27 = v25;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      log = v27;
      uint64_t v28 = v408;
      memset(&v404, 0, sizeof(v404));
      std::string::append(&v404, "{ ", 2uLL);
      if (v28 != (uint64_t *)&v409)
      {
        while (1)
        {
          if (*((char *)v28 + 55) >= 0) {
            uint64_t v29 = (char *)(v28 + 4);
          }
          else {
            uint64_t v29 = (char *)v28[4];
          }
          sub_5834(v417, v29);
          sub_21B7C(&v418, v417[1]);
          uint64_t v30 = std::string::insert(&v418, 0, "[", 1uLL);
          long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
          v30->__r_.__value_.__l.__size_ = 0;
          v30->__r_.__value_.__r.__words[2] = 0;
          v30->__r_.__value_.__r.__words[0] = 0;
          uint64_t v32 = std::string::append(&__p, ", ", 2uLL);
          long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          *(void *)&v427[16] = *((void *)&v32->__r_.__value_.__l + 2);
          *(_OWORD *)v427 = v33;
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          if (*((char *)v28 + 79) >= 0) {
            uint64_t v34 = (char *)(v28 + 7);
          }
          else {
            uint64_t v34 = (char *)v28[7];
          }
          sub_5834(v413, v34);
          sub_21B7C(&cf, v413[1]);
          if ((v416 & 0x80u) == 0) {
            p_CFTypeRef cf = (const std::string::value_type *)&cf;
          }
          else {
            p_CFTypeRef cf = (const std::string::value_type *)cf;
          }
          if ((v416 & 0x80u) == 0) {
            std::string::size_type v36 = v416;
          }
          else {
            std::string::size_type v36 = (std::string::size_type)v415;
          }
          unint64_t v37 = std::string::append((std::string *)v427, p_cf, v36);
          long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
          __dst.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v38;
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          std::chrono::steady_clock::time_point v39 = std::string::append(&__dst, "]", 1uLL);
          long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
          v412 = v39->__r_.__value_.__r.__words[2];
          *(_OWORD *)v411 = v40;
          v39->__r_.__value_.__l.__size_ = 0;
          v39->__r_.__value_.__r.__words[2] = 0;
          v39->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if ((char)v416 < 0) {
            operator delete((void *)cf);
          }
          sub_49A90(v413);
          if ((v427[23] & 0x80000000) != 0) {
            operator delete(*(void **)v427);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v418.__r_.__value_.__l.__data_);
          }
          sub_49A90(v417);
          if (v412 >= 0) {
            long long v41 = v411;
          }
          else {
            long long v41 = (CFTypeRef *)v411[0];
          }
          if (v412 >= 0) {
            std::string::size_type v42 = HIBYTE(v412);
          }
          else {
            std::string::size_type v42 = (std::string::size_type)v411[1];
          }
          std::string::append(&v404, (const std::string::value_type *)v41, v42);
          if (SHIBYTE(v412) < 0) {
            operator delete((void *)v411[0]);
          }
          long long v43 = (uint64_t *)v28[1];
          if (v43)
          {
            do
            {
              uint64_t v44 = v43;
              long long v43 = (uint64_t *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              uint64_t v44 = (uint64_t *)v28[2];
              v220 = *v44 == (void)v28;
              uint64_t v28 = v44;
            }
            while (!v220);
          }
          if (v44 == (uint64_t *)&v409) {
            break;
          }
          std::string::append(&v404, ", ", 2uLL);
          uint64_t v28 = v44;
        }
      }
      std::string::append(&v404, " }", 2uLL);
      if ((v404.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v45 = &v404;
      }
      else {
        unint64_t v45 = (std::string *)v404.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3224;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v45;
      __int16 v27 = log;
      _os_log_impl(&def_1E50E8, log, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Macros = %s", buf, 0x1Cu);
      if (SHIBYTE(v404.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v404.__r_.__value_.__l.__data_);
      }
    }
  }
  memset(buf, 0, 24);
  sub_162D4(buf, v410);
  unint64_t v46 = v408;
  if (v408 != (uint64_t *)&v409)
  {
    do
    {
      sub_669A8(buf, (const UInt8 *)v46 + 32, (uint64_t)(v46 + 7));
      uint64_t v47 = (uint64_t *)v46[1];
      if (v47)
      {
        do
        {
          unint64_t v48 = v47;
          uint64_t v47 = (uint64_t *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          unint64_t v48 = (uint64_t *)v46[2];
          v220 = *v48 == (void)v46;
          unint64_t v46 = v48;
        }
        while (!v220);
      }
      unint64_t v46 = v48;
    }
    while (v48 != (uint64_t *)&v409);
  }
  CFDictionaryRef v49 = sub_4D69C((void ***)buf);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  sub_14F84((void ***)&__dst);
  *(void *)v427 = v49;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
  unsigned int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, std::string *, uint64_t, void))(*(void *)a1 + 112))(a1, 1685287015, 1835758191, &__p, 8, 0);
  if (v50)
  {
    id v51 = *(id *)sub_32A48(24);
    __int16 v52 = v51;
    if (v51)
    {
      UInt32 v53 = v51;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(&__dst, v50);
        uint64_t v54 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__dst
            : (std::string *)__dst.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3228;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v54;
        _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting custom macros on DSP returns error: %s", buf, 0x1Cu);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (v49) {
    CFRelease(v49);
  }
  sub_4E9C((uint64_t)v428);
  sub_6C9A0(v409);
LABEL_152:
  *(void *)AudioObjectPropertyAddress buf = a1 + 48;
  buf[8] = 1;
  sub_F648(a1 + 48);
  uint64_t v55 = *(void *)(a1 + 24);
  uint64_t v56 = *(void *)(a1 + 32);
  while (v55 != v56)
  {
    unsigned int v57 = (*(uint64_t (**)(void))(**(void **)(v55 + 8) + 16))(*(void *)(v55 + 8));
    if (v57)
    {
      sub_C7D4(buf);
      v376 = sub_32A48(13);
      v377 = sub_7D5E8(1, *(void **)v376, *(void *)(v376 + 8));
      v378 = v377;
      if (v377)
      {
        v379 = v377;
        if (os_log_type_enabled(v379, OS_LOG_TYPE_ERROR))
        {
          v380 = (void *)(a1 + 712);
          if (*(char *)(a1 + 735) < 0) {
            v380 = (void *)*v380;
          }
          sub_2417C(&__dst, v57);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 613;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v380;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = p_dst;
          _os_log_impl(&def_1E50E8, v379, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Failed to initialize DSP chain %s. Error: %s\"", buf, 0x26u);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
        }
      }
      v382 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v382, "Failed to initialize DSP chain %s. Error: %s");
      goto LABEL_751;
    }
    v55 += 24;
  }
  sub_C7D4(buf);
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  int v58 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, 1936747629);
  *(unsigned char *)(a1 + 796) = v58;
  if (a2)
  {
    double v59 = 0.0;
    if (v58
      && (uint64_t v60 = *(void *)(a1 + 776), (v61 = *(std::__shared_weak_count **)(v60 + 24)) != 0)
      && (uint64_t v62 = std::__shared_weak_count::lock(v61)) != 0)
    {
      uint64_t v63 = v62;
      uint64_t v64 = *(void *)(v60 + 16);
      if (v64)
      {
        buf[0] = 0;
        double v65 = sub_24C540(*(unsigned int *)(v64 + 144), *(void *)(v64 + 192), buf);
        double v2 = v66;
        v399 = buf[0] != 0;
        if (buf[0]) {
          double v59 = v65;
        }
        else {
          double v59 = 0.0;
        }
      }
      else
      {
        v399 = 0;
      }
      sub_4636C(v63);
    }
    else
    {
      v399 = 0;
    }
    long long v67 = (int *)a2[21];
    long long v68 = (int *)a2[22];
    if (v67 != v68)
    {
      while (1)
      {
        if (!*(void *)v67)
        {
          v383 = sub_32A48(13);
          v384 = sub_7D5E8(1, *(void **)v383, *(void *)(v383 + 8));
          v385 = v384;
          if (v384 && os_log_type_enabled(v384, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 793;
            _os_log_impl(&def_1E50E8, v385, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Given a null SW volume property!\"", buf, 0x12u);
          }

          v382 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v382, "Given a null SW volume property!");
LABEL_751:
        }
        int v69 = (*(uint64_t (**)(void))(**(void **)v67 + 16))(*(void *)v67);
        uint64_t v70 = sub_1B63A0(a1, v69, v67[4]);
        if (v70) {
          break;
        }
        id v88 = *(id *)sub_32A48(24);
        v89 = v88;
        if (v88)
        {
          v90 = v88;
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v91 = (*(uint64_t (**)(void))(**(void **)v67 + 16))();
            sub_2417C(&__dst, v91);
            v92 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v92 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 824;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v92;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a1;
            _os_log_impl(&def_1E50E8, v90, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ***** VolumeCommand: volume processor type not found '%s' in dspchain: %p", buf, 0x26u);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
          }
        }
LABEL_241:
        v67 += 6;
        if (v67 == v68) {
          goto LABEL_267;
        }
      }
      uint64_t v71 = *(void *)v67;
      if (v399)
      {
        sub_1329C(buf, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
        *(_OWORD *)v428 = *(_OWORD *)buf;
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
        }
        (*(void (**)(std::string *__return_ptr, uint64_t, unsigned char *, double, double))(*(void *)v71 + 8))(&__p, v71, v428, v59, v2);
        uint64_t v72 = *(std::__shared_weak_count **)&v428[8];
        if (*(void *)&v428[8]) {
          goto LABEL_172;
        }
      }
      else
      {
        sub_1329C(buf, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
        *(_OWORD *)v427 = *(_OWORD *)buf;
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
        }
        (**(void (***)(std::string *__return_ptr, uint64_t, unsigned char *))v71)(&__p, v71, v427);
        uint64_t v72 = *(std::__shared_weak_count **)&v427[8];
        if (*(void *)&v427[8]) {
LABEL_172:
        }
          std::__shared_weak_count::__release_weak(v72);
      }
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      if ((*(unsigned int (**)(void))(**(void **)v67 + 16))() == 1685287015)
      {
        unsigned int v73 = (*(uint64_t (**)(void))(**(void **)v67 + 24))();
        unsigned int v74 = v73;
        uint64_t v75 = qword_64C9C0;
        if (!qword_64C9C0) {
          goto LABEL_187;
        }
        char v76 = &qword_64C9C0;
        do
        {
          unsigned int v77 = *(_DWORD *)(v75 + 32);
          BOOL v78 = v77 >= v73;
          if (v77 >= v73) {
            int v79 = (uint64_t *)v75;
          }
          else {
            int v79 = (uint64_t *)(v75 + 8);
          }
          if (v78) {
            char v76 = (uint64_t *)v75;
          }
          uint64_t v75 = *v79;
        }
        while (*v79);
        if (v76 != &qword_64C9C0 && v73 >= *((_DWORD *)v76 + 8))
        {
          AudioObjectPropertyAddress v80 = (const char *)v76[5];
          uint64_t v81 = v76[6];
        }
        else
        {
LABEL_187:
          AudioObjectPropertyAddress v80 = 0;
          uint64_t v81 = 0;
        }
        id v82 = *(id *)sub_32A48(24);
        int v83 = v82;
        if (v82)
        {
          int v84 = v82;
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            std::string::size_type v85 = __p.__r_.__value_.__r.__words[0];
            if (v74 == -1)
            {
              long long v87 = (std::string *)"unused";
            }
            else
            {
              unsigned int v86 = (*(uint64_t (**)(void))(**(void **)v67 + 24))();
              sub_2417C(&v418, v86);
              long long v87 = &v418;
              if ((v418.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v87 = (std::string *)v418.__r_.__value_.__r.__words[0];
              }
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            uint64_t v96 = "Not found";
            if (v81) {
              uint64_t v96 = v80;
            }
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 805;
            *(_WORD *)&buf[18] = 2048;
            *(void *)&buf[20] = v85;
            *(_WORD *)&buf[28] = 2080;
            *(void *)&buf[30] = v87;
            *(_WORD *)&unsigned char buf[38] = 2080;
            *(void *)&unsigned char buf[40] = v96;
            _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ***** VolumeCommand: software volume command %p is graph based, corresponding graph property is '%s' with box name '%s'", buf, 0x30u);
            if (v74 != -1 && SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v418.__r_.__value_.__l.__data_);
            }
          }
        }
        std::string::size_type v97 = __p.__r_.__value_.__r.__words[0];
        uint64_t v98 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 152))(v70);
        uint64_t v99 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 144))(v70);
        (*(void (**)(std::string::size_type, uint64_t, uint64_t, const char *, uint64_t))(*(void *)v97 + 176))(v97, v98, v99, v80, v81);
      }
      else
      {
        std::string::size_type v93 = __p.__r_.__value_.__r.__words[0];
        uint64_t v94 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 152))(v70);
        uint64_t v95 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 144))(v70);
        (*(void (**)(std::string::size_type, uint64_t, uint64_t, void, void))(*(void *)v93 + 176))(v93, v94, v95, 0, 0);
      }
      id v100 = *(id *)sub_32A48(24);
      UInt32 v101 = v100;
      if (v100)
      {
        int v102 = v100;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          std::string::size_type v103 = __p.__r_.__value_.__r.__words[0];
          unsigned int v104 = (*(uint64_t (**)(void))(**(void **)v67 + 16))();
          sub_2417C(&__dst, v104);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v105 = &__dst;
          }
          else {
            int v105 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          int v106 = (*(uint64_t (**)(uint64_t))(*(void *)v70 + 144))(v70);
          int v107 = (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 136))(__p.__r_.__value_.__r.__words[0]);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
          uint64_t v108 = "Decibel";
          if (v107 == 1935895666) {
            uint64_t v108 = "Scalar";
          }
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 813;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v103;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v105;
          *(_WORD *)&unsigned char buf[38] = 2048;
          *(void *)&unsigned char buf[40] = a1;
          *(_WORD *)&uint8_t buf[48] = 1024;
          *(_DWORD *)&buf[50] = v106;
          *(_WORD *)&buf[54] = 2080;
          v425 = v108;
          _os_log_impl(&def_1E50E8, v102, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ***** VolumeCommand: created software volume command %p for processor type '%s' in dspchain: %p instance id: %u volume unit type: %s", buf, 0x40u);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
        }
      }
      uint64_t v109 = *(void *)(a1 + 1040);
      if (!v109) {
        operator new();
      }
      if (*(void *)(v109 + 128) != *(void *)(v109 + 136) && !*(unsigned char *)(v109 + 160))
      {
        int v110 = (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 136))(__p.__r_.__value_.__r.__words[0]);
        if (v110 != (*(unsigned int (**)(void))(**(void **)(*(void *)(v109 + 136) - 8) + 136))(*(void *)(*(void *)(v109 + 136) - 8))) {
          *(unsigned char *)(v109 + 160) = 1;
        }
      }
      int v112 = *(std::string::size_type **)(v109 + 128);
      v111 = *(std::string::size_type **)(v109 + 136);
      if (v112 == v111)
      {
        uint64_t v113 = *(std::string::size_type **)(v109 + 128);
      }
      else
      {
        uint64_t v113 = *(std::string::size_type **)(v109 + 128);
        while (*v113 != __p.__r_.__value_.__r.__words[0])
        {
          if (++v113 == v111)
          {
            uint64_t v113 = *(std::string::size_type **)(v109 + 136);
            break;
          }
        }
      }
      if (v113 == v111)
      {
        unint64_t v115 = *(void *)(v109 + 144);
        if ((unint64_t)v111 >= v115)
        {
          uint64_t v119 = v111 - v112;
          unint64_t v120 = v119 + 1;
          if ((unint64_t)(v119 + 1) >> 61) {
            sub_60548();
          }
          uint64_t v121 = v115 - (void)v112;
          if (v121 >> 2 > v120) {
            unint64_t v120 = v121 >> 2;
          }
          if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v122 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v120;
          }
          if (v122)
          {
            if (v122 >> 61) {
              sub_60560();
            }
            v123 = (char *)operator new(8 * v122);
            int v112 = *(std::string::size_type **)(v109 + 128);
            v111 = *(std::string::size_type **)(v109 + 136);
          }
          else
          {
            v123 = 0;
          }
          v124 = (std::string::size_type *)&v123[8 * v119];
          std::string::size_type v125 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          std::string::size_type *v124 = v125;
          __int16 v118 = v124 + 1;
          while (v111 != v112)
          {
            std::string::size_type v126 = *--v111;
            std::string::size_type *v111 = 0;
            *--v124 = v126;
          }
          uint64_t v127 = *(void **)(v109 + 128);
          v128 = *(void **)(v109 + 136);
          *(void *)(v109 + 128) = v124;
          *(void *)(v109 + 136) = v118;
          *(void *)(v109 + 144) = &v123[8 * v122];
          while (v128 != v127)
          {
            uint64_t v130 = *--v128;
            uint64_t v129 = v130;
            void *v128 = 0;
            if (v130) {
              (*(void (**)(uint64_t))(*(void *)v129 + 8))(v129);
            }
          }
          if (v127) {
            operator delete(v127);
          }
        }
        else
        {
          std::string::size_type v116 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          std::string::size_type *v111 = v116;
          v117 = v111 + 1;
          *(void *)(v109 + 136) = v117;
          __int16 v118 = v117;
        }
        *(void *)(v109 + 136) = v118;
        v131 = (os_log_t *)sub_32A48(18);
        unint64_t v132 = *v131;
        if (*v131 && os_log_type_enabled(*v131, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v133 = *(void *)(*(void *)(v109 + 136) - 8);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "VolumeControl.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 659;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v133;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v109;
          _os_log_impl(&def_1E50E8, v132, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VolumeCommand: added volume command: %p into aggregate command: %p", buf, 0x26u);
        }
      }
      std::string::size_type v114 = __p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v114) {
        (*(void (**)(std::string::size_type))(*(void *)v114 + 8))(v114);
      }
      goto LABEL_241;
    }
LABEL_267:
    __int16 v135 = (int *)a2[24];
    int v134 = (int *)a2[25];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v134 - (char *)v135) >> 3) > 1)
    {
      v388 = sub_32A48(13);
      v389 = sub_7D5E8(1, *(void **)v388, *(void *)(v388 + 8));
      v390 = v389;
      if (v389 && os_log_type_enabled(v389, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 830;
        _os_log_impl(&def_1E50E8, v390, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"!!! can only support single thermal volume command\"", buf, 0x12u);
      }

      v382 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v382, "!!! can only support single thermal volume command");
      goto LABEL_751;
    }
    if (v135 != v134)
    {
      if (!*(void *)v135)
      {
        v391 = sub_32A48(13);
        v392 = sub_7D5E8(1, *(void **)v391, *(void *)(v391 + 8));
        v393 = v392;
        if (v392 && os_log_type_enabled(v392, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 835;
          _os_log_impl(&def_1E50E8, v393, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }

        v382 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v382, "Precondition failure.");
        goto LABEL_751;
      }
      int v136 = (*(uint64_t (**)(void))(**(void **)v135 + 24))(*(void *)v135);
      uint64_t v137 = sub_1B63A0(a1, v136, v135[4]);
      if (v137)
      {
        v138 = *(void (****)(std::string *__return_ptr, void, std::string *))v135;
        sub_1329C(buf, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
        if (*(void *)&buf[8]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
        }
        (**v138)(&__dst, v138, &__p);
        if (__dst.__r_.__value_.__r.__words[0]) {
          operator new();
        }
        __dst.__r_.__value_.__r.__words[0] = 0;
        v146 = *(std::__shared_weak_count **)(a1 + 1064);
        *(_OWORD *)(a1 + 1056) = 0u;
        if (v146)
        {
          sub_4636C(v146);
          v147 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (v147) {
            (*(void (**)(std::string::size_type))(*(void *)v147 + 8))(v147);
          }
        }
        else
        {
          __dst.__r_.__value_.__r.__words[0] = 0;
        }
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        v148 = *(void *)(a1 + 1056);
        v149 = (*(uint64_t (**)(uint64_t))(*(void *)v137 + 152))(v137);
        v150 = (*(uint64_t (**)(uint64_t))(*(void *)v137 + 144))(v137);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, void))(*(void *)v148 + 176))(v148, v149, v150, 0, 0);
        v151 = *(id *)sub_32A48(24);
        if (v151)
        {
          v140 = v151;
          if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
          {
            v152 = (*(uint64_t (**)(void))(**(void **)v135 + 24))();
            v153 = &__dst;
            sub_2417C(&__dst, v152);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v153 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            v154 = (*(uint64_t (**)(uint64_t))(*(void *)v137 + 144))(v137);
            v155 = (*(uint64_t (**)(void))(**(void **)(a1 + 1056) + 136))(*(void *)(a1 + 1056));
            v156 = "Decibel";
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 841;
            *(_WORD *)&buf[18] = 2080;
            if (v155 == 1935895666) {
              v156 = "Scalar";
            }
            *(void *)&buf[20] = v153;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = a1;
            *(_WORD *)&unsigned char buf[38] = 1024;
            *(_DWORD *)&unsigned char buf[40] = v154;
            *(_WORD *)&unsigned char buf[44] = 2080;
            *(void *)&buf[46] = v156;
            v143 = "%25s:%-5d ***** VolumeCommand: created thermal volume command for processor type '%s' in dspchain: %p"
                   " instance id: %u volume unit type: %s";
            v144 = v140;
            v145 = 54;
LABEL_297:
            _os_log_impl(&def_1E50E8, v144, OS_LOG_TYPE_DEFAULT, v143, buf, v145);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
          }
          goto LABEL_299;
        }
LABEL_300:
        v140 = 0;
      }
      else
      {
        v139 = *(id *)sub_32A48(24);
        if (!v139) {
          goto LABEL_300;
        }
        v140 = v139;
        if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
        {
          v141 = (*(uint64_t (**)(void))(**(void **)v135 + 24))();
          sub_2417C(&__dst, v141);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v142 = &__dst;
          }
          else {
            v142 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 845;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v142;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = a1;
          v143 = "%25s:%-5d ***** VolumeCommand: thermal processor type not found '%s' in dspchain: %p";
          v144 = v140;
          v145 = 38;
          goto LABEL_297;
        }
LABEL_299:
      }
    }
  }
  v157 = a1 + 376;
  if (*(unsigned char *)(a1 + 392)) {
    goto LABEL_303;
  }
  if (!*(unsigned char *)(a1 + 796))
  {
    if (!*(void *)(a1 + 784)) {
      goto LABEL_303;
    }
    sub_549A4((uint64_t *)buf, (uint64_t *)(*(void *)(a1 + 776) + 16), "", 1965);
    v184 = *(_DWORD *)(*(void *)buf + 264);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v184 > 1647718501)
    {
      if ((v184 - 1647718502) > 1) {
        goto LABEL_303;
      }
    }
    else if (v184 != 1633759844 && v184 != 1634231920 && v184 != 1635085420)
    {
      goto LABEL_303;
    }
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, 1751474546)
      || !*(unsigned char *)(a1 + 796))
    {
      goto LABEL_303;
    }
  }
  memset(buf, 0, 24);
  if (qword_64EE90 != -1) {
    dispatch_once(&qword_64EE90, &stru_626078);
  }
  if (off_64EE98)
  {
    v165 = off_64EE98(2, buf);
    v166 = *(void **)buf;
    v167 = (uint64_t *)(a1 + 736);
    *(void *)(a1 + 736) = v165;
    if (v166)
    {
      *(void *)&buf[8] = v166;
      operator delete(v166);
      v165 = *v167;
    }
    if (v165 == 561211748)
    {
      v168 = *(id *)sub_32A48(24);
      v169 = v168;
      if (v168 && os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 890;
        _os_log_impl(&def_1E50E8, v169, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry : ADAM Failed to create a session", buf, 0x12u);
      }

      goto LABEL_303;
    }
  }
  else
  {
    v165 = 560033897;
    v167 = (uint64_t *)(a1 + 736);
    *(void *)(a1 + 736) = 560033897;
  }
  sub_21C8C(buf, "VA_AUSPL");
  if (qword_64EE90 != -1) {
    dispatch_once(&qword_64EE90, &stru_626078);
  }
  if (off_64EEC0) {
    off_64EEC0(v165, 0, buf);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  __p.__r_.__value_.__r.__words[0] = 0;
  LODWORD(cf) = 0;
  sub_1B33F8(a1, &__p, (float *)&cf);
  sub_1B3710((void *)a1, (const __CFDictionary *)__p.__r_.__value_.__l.__data_, *(float *)&cf);
  v185 = *v167;
  if (qword_64EE90 != -1) {
    dispatch_once(&qword_64EE90, &stru_626078);
  }
  if (off_64EED0) {
    off_64EED0(v185);
  }
  v186 = *(std::__shared_weak_count **)(a1 + 816);
  *(void *)(a1 + 808) = 0;
  *(void *)(a1 + 816) = 0;
  if (v186) {
    std::__shared_weak_count::__release_weak(v186);
  }
  *(_DWORD *)(a1 + 800) = 1701868910;
  sub_8E4B8((uint64_t *)&__dst, (void *)(a1 + 768));
  size = (std::string *)__dst.__r_.__value_.__l.__size_;
  if ((std::string *)__dst.__r_.__value_.__l.__size_ != &__dst)
  {
    v188 = (unsigned int *)(a1 + 800);
    do
    {
      v189 = size->__r_.__value_.__r.__words[2];
      if ((*(_WORD *)(v189 + 184) & 1) == 0)
      {
        if (*(void *)(a1 + 816))
        {
          v190 = *(id *)sub_32A48(24);
          v191 = v190;
          if (v190 && os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 743;
            _os_log_impl(&def_1E50E8, v191, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: multiple output ports?", buf, 0x12u);
          }

          v189 = size->__r_.__value_.__r.__words[2];
        }
        data = size[1].__r_.__value_.__l.__data_;
        if (data) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)data + 2, 1uLL, memory_order_relaxed);
        }
        *(void *)(a1 + 808) = v189;
        v193 = *(std::__shared_weak_count **)(a1 + 816);
        *(void *)(a1 + 816) = data;
        if (v193) {
          std::__shared_weak_count::__release_weak(v193);
        }
        v194 = (_DWORD *)size->__r_.__value_.__r.__words[2];
        if (v194[37] == 1885566825)
        {
          *v188 = 1701865584;
        }
        else
        {
          v195 = (*(uint64_t (**)(_DWORD *))(*(void *)v194 + 112))(v194);
          if ((v195 & 0xFF00000000) != 0) {
            v196 = v195;
          }
          else {
            v196 = 1701868910;
          }
          *v188 = v196;
          v197 = *(id *)sub_32A48(24);
          v198 = v197;
          if (v197)
          {
            v199 = v197;
            if (os_log_type_enabled(v199, OS_LOG_TYPE_DEFAULT))
            {
              sub_2417C(v428, *v188);
              v200 = v428;
              if (v428[23] < 0) {
                v200 = *(unsigned char **)v428;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "DSPChain.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 759;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v200;
              _os_log_impl(&def_1E50E8, v199, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: device's default endpoint type: %s", buf, 0x1Cu);
              if ((v428[23] & 0x80000000) != 0) {
                operator delete(*(void **)v428);
              }
            }
          }
          if (*v188 == 1701865584)
          {
            v201 = size->__r_.__value_.__r.__words[2];
            if (*(_DWORD *)(v201 + 148) == 1885544823)
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 0;
              if ((sub_24B50C((void *)v201, 0, (float *)buf) & 1) == 0)
              {
                v202 = sub_1B5F7C(*(void *)(size->__r_.__value_.__r.__words[2] + 192), (int *)(a1 + 800));
                if (v202)
                {
                  v203 = *(id *)sub_32A48(24);
                  v204 = v203;
                  if (v203)
                  {
                    v205 = v203;
                    if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
                    {
                      v395 = v205;
                      sub_2417C(v428, v202);
                      v206 = v428[23];
                      v207 = *(unsigned char **)v428;
                      sub_2417C(v427, *v188);
                      v208 = v428;
                      if (v206 < 0) {
                        v208 = v207;
                      }
                      v209 = v427;
                      if (v427[23] < 0) {
                        v209 = *(unsigned char **)v427;
                      }
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                      *(void *)&uint8_t buf[4] = "DSPChain.mm";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 773;
                      *(_WORD *)&buf[18] = 2080;
                      *(void *)&buf[20] = v208;
                      *(_WORD *)&buf[28] = 2080;
                      *(void *)&buf[30] = v209;
                      v205 = v395;
                      _os_log_impl(&def_1E50E8, v395, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry: Failed to fetch 3rd party user selected endpoint type. err: '%s', default endpoint type: %s", buf, 0x26u);
                      if ((v427[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v427);
                      }
                      if ((v428[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v428);
                      }
                    }
                  }
                }
                else
                {
                  v210 = *(id *)sub_32A48(24);
                  v211 = v210;
                  if (v210)
                  {
                    v212 = v210;
                    if (os_log_type_enabled(v212, OS_LOG_TYPE_DEFAULT))
                    {
                      sub_2417C(v428, *v188);
                      v213 = v428;
                      if (v428[23] < 0) {
                        v213 = *(unsigned char **)v428;
                      }
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                      *(void *)&uint8_t buf[4] = "DSPChain.mm";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 767;
                      *(_WORD *)&buf[18] = 2080;
                      *(void *)&buf[20] = v213;
                      _os_log_impl(&def_1E50E8, v212, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: 3rd party user selected endpoint type: %s", buf, 0x1Cu);
                      if ((v428[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v428);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      size = (std::string *)size->__r_.__value_.__l.__size_;
    }
    while (size != &__dst);
  }
  v402 = (uint64_t *)(a1 + 808);
  sub_B8E4((uint64_t *)&__dst);
  v214 = *(std::__shared_weak_count **)(a1 + 816);
  if (!v214) {
    goto LABEL_472;
  }
  v215 = std::__shared_weak_count::lock(v214);
  if (!v215) {
    goto LABEL_472;
  }
  v216 = v215;
  v217 = (void *)*v402;
  if (!*v402) {
    goto LABEL_471;
  }
  v218 = v217[24];
  if (!v218) {
    goto LABEL_471;
  }
  v219 = (*(uint64_t (**)(uint64_t))(*v217 + 112))(*v402);
  v220 = (v219 & 0xFF00000000) != 0 && v219 == 1701865584;
  if (!v220) {
    goto LABEL_471;
  }
  v394 = v216;
  v221 = operator new(0xCuLL);
  v222 = (char *)(v221 + 3);
  *(void *)v221 = 0x6F757470766F6C64;
  v221[2] = 0;
  if (*((_DWORD *)v217 + 37) == 1885544823)
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 0;
    if ((sub_24B50C(v217, 0, (float *)buf) & 1) == 0)
    {
      v223 = (char *)sub_564C(2uLL);
      *(void *)(v223 + 12) = 0x676C6F6275736476;
      *((_DWORD *)v223 + 5) = 0;
      v222 = v223 + 24;
      v224 = *(void *)v221;
      *((_DWORD *)v223 + 2) = v221[2];
      *(void *)v223 = v224;
      operator delete(v221);
      v221 = v223;
    }
  }
  v225 = 0;
  if ((unint64_t)((v222 - (char *)v221) / 12) <= 1) {
    v226 = 1;
  }
  else {
    v226 = (v222 - (char *)v221) / 12;
  }
  v398 = v221;
  while (2)
  {
    v227 = &v221[3 * v225];
    v228 = *(void *)v227;
    *(_DWORD *)&v428[8] = v227[2];
    *(void *)v428 = v228;
    if ((*(unsigned int (**)(uint64_t, unsigned char *, void, uint64_t))(*(void *)v218 + 336))(v218, v428, sub_1B4F24, a1))
    {
      v229 = v226;
      v230 = (*(uint64_t (**)(uint64_t))(*(void *)v218 + 120))(v218);
      v231 = v230;
      *(void *)AudioObjectPropertyAddress buf = *(void *)v227;
      *(_DWORD *)&buf[8] = v227[2];
      v232 = *(char **)(a1 + 832);
      v233 = *(void *)(a1 + 840);
      if ((unint64_t)v232 >= v233)
      {
        v243 = *(char **)(a1 + 824);
        v244 = (v232 - v243) >> 4;
        v245 = v244 + 1;
        if ((unint64_t)(v244 + 1) >> 60) {
          sub_60548();
        }
        v246 = v233 - (void)v243;
        if (v246 >> 3 > v245) {
          v245 = v246 >> 3;
        }
        if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFF0) {
          v247 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          v247 = v245;
        }
        if (v247)
        {
          if (v247 >> 60) {
            sub_60560();
          }
          v248 = (char *)operator new(16 * v247);
        }
        else
        {
          v248 = 0;
        }
        v249 = &v248[16 * v244];
        *(_DWORD *)v249 = v231;
        *(void *)(v249 + 4) = *(void *)buf;
        *((_DWORD *)v249 + 3) = *(_DWORD *)&buf[8];
        v250 = v249;
        if (v232 == v243)
        {
          v221 = v398;
        }
        else
        {
          v221 = v398;
          do
          {
            v251 = *((_DWORD *)v232 - 4);
            v232 -= 16;
            *((_DWORD *)v250 - 4) = v251;
            v250 -= 16;
            v252 = *(void *)(v232 + 4);
            *((_DWORD *)v250 + 3) = *((_DWORD *)v232 + 3);
            *(void *)(v250 + 4) = v252;
          }
          while (v232 != v243);
          v232 = *(char **)(a1 + 824);
        }
        v253 = &v248[16 * v247];
        *(void *)(a1 + 824) = v250;
        v234 = v249 + 16;
        *(void *)(a1 + 832) = v249 + 16;
        *(void *)(a1 + 840) = v253;
        if (v232) {
          operator delete(v232);
        }
      }
      else
      {
        *(_DWORD *)v232 = v230;
        *(void *)(v232 + 4) = *(void *)buf;
        *((_DWORD *)v232 + 3) = *(_DWORD *)&buf[8];
        v234 = v232 + 16;
        v221 = v398;
      }
      *(void *)(a1 + 832) = v234;
      *(_DWORD *)AudioObjectPropertyAddress buf = (*(uint64_t (**)(uint64_t))(*(void *)v218 + 120))(v218);
      sub_46C2C((uint64_t **)(a1 + 848), (uint64_t *)(a1 + 856), *(unsigned int *)buf, buf);
      v226 = v229;
      v157 = a1 + 376;
      v254 = *(id *)sub_32A48(24);
      if (v254)
      {
        v236 = v254;
        if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(&__dst, *v227);
          v255 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          v256 = __dst.__r_.__value_.__r.__words[0];
          v257 = (*(uint64_t (**)(uint64_t))(*(void *)v218 + 120))(v218);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          v258 = &__dst;
          if (v255 < 0) {
            v258 = (std::string *)v256;
          }
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2495;
          *(_WORD *)&buf[18] = 2080;
          *(void *)&buf[20] = v258;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v257;
          *(_WORD *)&buf[34] = 2048;
          *(void *)&buf[36] = a1;
          v241 = v236;
          v242 = "%25s:%-5d PlaybackDosimetry : registered device property(%s) listener with device [%u], %p";
          goto LABEL_464;
        }
        goto LABEL_466;
      }
LABEL_467:
      v236 = 0;
    }
    else
    {
      v235 = *(id *)sub_32A48(24);
      if (!v235) {
        goto LABEL_467;
      }
      v236 = v235;
      if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(&__dst, *v227);
        v237 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        v238 = __dst.__r_.__value_.__r.__words[0];
        v239 = (*(uint64_t (**)(uint64_t))(*(void *)v218 + 120))(v218);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        v240 = &__dst;
        if (v237 < 0) {
          v240 = (std::string *)v238;
        }
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2500;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v240;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v239;
        *(_WORD *)&buf[34] = 2048;
        *(void *)&buf[36] = a1;
        v241 = v236;
        v242 = "%25s:%-5d PlaybackDosimetry : could not register device property(%s) listener with device [%u], %p";
LABEL_464:
        _os_log_impl(&def_1E50E8, v241, OS_LOG_TYPE_DEFAULT, v242, buf, 0x2Cu);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
LABEL_466:
    }
    if (++v225 != v226) {
      continue;
    }
    break;
  }
  v216 = v394;
  if (v221) {
    operator delete(v221);
  }
LABEL_471:
  sub_4636C(v216);
LABEL_472:
  if (*(void *)(a1 + 824) == *(void *)(a1 + 832))
  {
    v259 = *(id *)sub_32A48(24);
    v260 = v259;
    if (v259 && os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2465;
      _os_log_impl(&def_1E50E8, v260, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : no wireless headphone devices found to register properties", buf, 0x12u);
    }
  }
  sub_1B49D8((unsigned char *)a1, v402, *(_DWORD *)(a1 + 800));
  v261 = *(id *)sub_32A48(24);
  v262 = v261;
  if (v261 && os_log_type_enabled(v261, OS_LOG_TYPE_DEFAULT))
  {
    v263 = *(void *)(a1 + 736);
    v264 = "Y";
    v220 = *(unsigned char *)(a1 + 797) == 0;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    if (v220) {
      v264 = "N";
    }
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 882;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v263;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = v264;
    _os_log_impl(&def_1E50E8, v262, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : ADAM Client Initialized: %llu, report SPL: %s", buf, 0x26u);
  }

  if (__p.__r_.__value_.__r.__words[0]) {
    CFRelease(__p.__r_.__value_.__l.__data_);
  }
LABEL_303:
  v158 = *(_OWORD *)(a1 + 8);
  v400 = v158;
  v159 = *(std::__shared_weak_count **)(a1 + 16);
  if (*((void *)&v158 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v158 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  v160 = (char *)operator new(0x98uLL);
  *(_OWORD *)(v160 + 8) = 0u;
  *(void *)v160 = off_626300;
  *(_OWORD *)(v160 + 24) = 0u;
  *((void *)v160 + 5) = v160 + 24;
  v161 = (std::__shared_weak_count *)operator new(0x30uLL);
  v161->__shared_weak_owners_ = 0;
  v161->__shared_owners_ = 0;
  v161->__vftable = (std::__shared_weak_count_vtbl *)off_626338;
  v161[1].__vftable = 0;
  v161[1].__shared_owners_ = 0;
  v161[1].__shared_weak_owners_ = (uint64_t)(v160 + 40);
  *((void *)v160 + 6) = v161 + 1;
  *((void *)v160 + 7) = v161;
  atomic_fetch_add_explicit(&v161->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v161->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  v161[1].__vftable = (std::__shared_weak_count_vtbl *)&v161[1];
  v161[1].__shared_owners_ = (uint64_t)v161;
  sub_4636C(v161);
  v160[64] = 0;
  v160[80] = 0;
  *((_WORD *)v160 + 44) = 0;
  *((_OWORD *)v160 + 6) = v400;
  if (v159) {
    atomic_fetch_add_explicit(&v159->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  mach_absolute_time();
  v162 = __udivti3();
  *((void *)v160 + 14) = v162;
  *((void *)v160 + 15) = v162;
  v160[128] = 0;
  v160[132] = 0;
  v160[136] = 0;
  v160[140] = 0;
  *((_DWORD *)v160 + 36) = 0;
  if (v159) {
    std::__shared_weak_count::__release_weak(v159);
  }
  *(void *)&v163 = v160 + 24;
  *((void *)&v163 + 1) = v160;
  v164 = (std::__shared_weak_count *)*((void *)v160 + 4);
  if (v164)
  {
    if (v164->__shared_owners_ == -1)
    {
      v401 = v163;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v160 + 1, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v160 + 2, 1uLL, memory_order_relaxed);
      *((void *)v160 + 3) = v160 + 24;
      *((void *)v160 + 4) = v160;
      std::__shared_weak_count::__release_weak(v164);
      goto LABEL_324;
    }
  }
  else
  {
    v401 = v163;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v160 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v160 + 2, 1uLL, memory_order_relaxed);
    *((void *)v160 + 3) = v160 + 24;
    *((void *)v160 + 4) = v160;
LABEL_324:
    sub_4636C((std::__shared_weak_count *)v160);
    v163 = v401;
  }
  v170 = *(std::__shared_weak_count **)(a1 + 384);
  *(_OWORD *)v157 = v163;
  if (v170) {
    sub_4636C(v170);
  }
  v171 = *(void *)(a1 + 872);
  *(unsigned char *)(a1 + 392) = 1;
  if (v171)
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1635087726;
    AUPBPropertiesChanged();
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 1685287015, 1668572518, 0))
  {
    v172 = *(id *)sub_32A48(24);
    v173 = v172;
    if (v172 && os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
    {
      v174 = (void *)(a1 + 712);
      if (*(char *)(a1 + 735) < 0) {
        v174 = (void *)*v174;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 635;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v174;
      _os_log_impl(&def_1E50E8, v173, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Registering DSP chain \"%s\" for ControlEffortValueManager updates", buf, 0x1Cu);
    }

    sub_73A68();
    v175 = *(std::__shared_weak_count **)(a1 + 16);
    if (v175)
    {
      v176 = *(void *)(a1 + 8);
      atomic_fetch_add_explicit(&v175->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v177 = std::__shared_weak_count::lock(v175);
      if (v177)
      {
        v178 = v177;
        if (v176)
        {
          v179 = (os_log_t *)sub_32A48(24);
          v180 = *v179;
          if (*v179 && os_log_type_enabled(*v179, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(v176 + 735) < 0) {
              sub_21E8C(&__dst, *(void **)(v176 + 712), *(void *)(v176 + 720));
            }
            else {
              __dst = *(std::string *)(v176 + 712);
            }
            v265 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v265 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "ControlEffortValueManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 68;
            *(_WORD *)&buf[18] = 2080;
            *(void *)&buf[20] = v265;
            _os_log_impl(&def_1E50E8, v180, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding chain %s to the control effort manager map", buf, 0x1Cu);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
          }
          std::recursive_mutex::lock(&stru_649910);
          v266 = 0x9DDFEA08EB382D69 * (((8 * v176) + 8) ^ HIDWORD(v176));
          v267 = 0x9DDFEA08EB382D69 * (HIDWORD(v176) ^ (v266 >> 47) ^ v266);
          v268 = 0x9DDFEA08EB382D69 * (v267 ^ (v267 >> 47));
          v269 = *((void *)&xmmword_649950 + 1);
          if (*((void *)&xmmword_649950 + 1))
          {
            v270 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_649950 + 8));
            v270.i16[0] = vaddlv_u8(v270);
            if (v270.u32[0] > 1uLL)
            {
              v157 = 0x9DDFEA08EB382D69 * (v267 ^ (v267 >> 47));
              if (v268 >= *((void *)&xmmword_649950 + 1)) {
                v157 = v268 % *((void *)&xmmword_649950 + 1);
              }
            }
            else
            {
              v157 = v268 & (*((void *)&xmmword_649950 + 1) - 1);
            }
            v271 = *(void **)(xmmword_649950 + 8 * v157);
            if (v271)
            {
              for (uint64_t i = (void *)*v271; i; uint64_t i = (void *)*i)
              {
                v273 = i[1];
                if (v273 == v268)
                {
                  if (i[2] == v176) {
                    goto LABEL_568;
                  }
                }
                else
                {
                  if (v270.u32[0] > 1uLL)
                  {
                    if (v273 >= *((void *)&xmmword_649950 + 1)) {
                      v273 %= *((void *)&xmmword_649950 + 1);
                    }
                  }
                  else
                  {
                    v273 &= *((void *)&xmmword_649950 + 1) - 1;
                  }
                  if (v273 != v157) {
                    break;
                  }
                }
              }
            }
          }
          v274 = operator new(0x28uLL);
          *v274 = 0;
          v274[1] = v268;
          v274[2] = v176;
          v274[3] = v176;
          v274[4] = v175;
          atomic_fetch_add_explicit(&v175->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v275 = (float)(unint64_t)(qword_649968 + 1);
          if (!v269 || (float)(*(float *)&dword_649970 * (float)v269) < v275)
          {
            v276 = 1;
            if (v269 >= 3) {
              v276 = (v269 & (v269 - 1)) != 0;
            }
            v277 = v276 | (2 * v269);
            v278 = vcvtps_u32_f32(v275 / *(float *)&dword_649970);
            if (v277 <= v278) {
              prime = (int8x8_t)v278;
            }
            else {
              prime = (int8x8_t)v277;
            }
            if (*(void *)&prime == 1)
            {
              prime = (int8x8_t)2;
            }
            else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
            {
              prime = (int8x8_t)std::__next_prime(*(void *)&prime);
            }
            v269 = *((void *)&xmmword_649950 + 1);
            if (*(void *)&prime <= *((void *)&xmmword_649950 + 1))
            {
              if (*(void *)&prime < *((void *)&xmmword_649950 + 1))
              {
                v286 = vcvtps_u32_f32((float)(unint64_t)qword_649968 / *(float *)&dword_649970);
                if (*((void *)&xmmword_649950 + 1) < 3uLL
                  || (v287 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_649950 + 8)),
                      v287.i16[0] = vaddlv_u8(v287),
                      v287.u32[0] > 1uLL))
                {
                  v286 = std::__next_prime(v286);
                }
                else
                {
                  v288 = 1 << -(char)__clz(v286 - 1);
                  if (v286 >= 2) {
                    v286 = v288;
                  }
                }
                if (*(void *)&prime <= v286) {
                  prime = (int8x8_t)v286;
                }
                if (*(void *)&prime >= v269)
                {
                  v269 = *((void *)&xmmword_649950 + 1);
                }
                else
                {
                  if (prime) {
                    goto LABEL_524;
                  }
                  v375 = (void *)xmmword_649950;
                  *(void *)&xmmword_649950 = 0;
                  if (v375) {
                    operator delete(v375);
                  }
                  v269 = 0;
                  *((void *)&xmmword_649950 + 1) = 0;
                }
              }
            }
            else
            {
LABEL_524:
              if (*(void *)&prime >> 61) {
                sub_60560();
              }
              v280 = operator new(8 * *(void *)&prime);
              v281 = (void *)xmmword_649950;
              *(void *)&xmmword_649950 = v280;
              if (v281) {
                operator delete(v281);
              }
              v282 = 0;
              *((int8x8_t *)&xmmword_649950 + 1) = prime;
              do
                *(void *)(xmmword_649950 + 8 * v282++) = 0;
              while (*(void *)&prime != v282);
              v283 = (void **)qword_649960;
              if (qword_649960)
              {
                v284 = *(void *)(qword_649960 + 8);
                v285 = (uint8x8_t)vcnt_s8(prime);
                v285.i16[0] = vaddlv_u8(v285);
                if (v285.u32[0] > 1uLL)
                {
                  if (v284 >= *(void *)&prime) {
                    v284 %= *(void *)&prime;
                  }
                }
                else
                {
                  v284 &= *(void *)&prime - 1;
                }
                *(void *)(xmmword_649950 + 8 * v284) = &qword_649960;
                for (j = *v283; j; v284 = v290)
                {
                  v290 = j[1];
                  if (v285.u32[0] > 1uLL)
                  {
                    if (v290 >= *(void *)&prime) {
                      v290 %= *(void *)&prime;
                    }
                  }
                  else
                  {
                    v290 &= *(void *)&prime - 1;
                  }
                  if (v290 != v284)
                  {
                    if (!*(void *)(xmmword_649950 + 8 * v290))
                    {
                      *(void *)(xmmword_649950 + 8 * v290) = v283;
                      goto LABEL_549;
                    }
                    *v283 = (void *)*j;
                    uint64_t *j = **(void **)(xmmword_649950 + 8 * v290);
                    **(void **)(xmmword_649950 + 8 * v290) = j;
                    j = v283;
                  }
                  v290 = v284;
LABEL_549:
                  v283 = (void **)j;
                  j = (void *)*j;
                }
              }
              v269 = (unint64_t)prime;
            }
            if ((v269 & (v269 - 1)) != 0)
            {
              if (v268 >= v269) {
                v157 = v268 % v269;
              }
              else {
                v157 = v268;
              }
            }
            else
            {
              v157 = (v269 - 1) & v268;
            }
          }
          v291 = xmmword_649950;
          v292 = *(void **)(xmmword_649950 + 8 * v157);
          if (v292)
          {
            *v274 = *v292;
            goto LABEL_566;
          }
          *v274 = qword_649960;
          qword_649960 = (uint64_t)v274;
          *(void *)(v291 + 8 * v157) = &qword_649960;
          if (*v274)
          {
            v293 = *(void *)(*v274 + 8);
            if ((v269 & (v269 - 1)) != 0)
            {
              if (v293 >= v269) {
                v293 %= v269;
              }
            }
            else
            {
              v293 &= v269 - 1;
            }
            v292 = (void *)(xmmword_649950 + 8 * v293);
LABEL_566:
            *v292 = v274;
          }
          ++qword_649968;
LABEL_568:
          std::recursive_mutex::unlock(&stru_649910);
          v294 = COERCE_FLOAT(atomic_load((unsigned int *)&dword_649980));
          (*(void (**)(unint64_t, uint64_t, uint64_t, void, float))(*(void *)v176 + 72))(v176, 1685287015, 1668572518, 0, v294);
        }
        sub_4636C(v178);
      }
      std::__shared_weak_count::__release_weak(v175);
    }
  }
  else
  {
    v181 = *(id *)sub_32A48(24);
    v182 = v181;
    if (v181 && os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
    {
      v183 = (void *)(a1 + 712);
      if (*(char *)(a1 + 735) < 0) {
        v183 = (void *)*v183;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 641;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v183;
      _os_log_impl(&def_1E50E8, v182, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Not registering DSP chain \"%s\" for ControlEffortValueManager updates", buf, 0x1Cu);
    }
  }
  if (_os_feature_enabled_impl()
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 1685287015, 1735222127, 0))
  {
    v295 = *(id *)sub_32A48(24);
    v296 = v295;
    if (v295 && os_log_type_enabled(v295, OS_LOG_TYPE_INFO))
    {
      v297 = (void *)(a1 + 712);
      if (*(char *)(a1 + 735) < 0) {
        v297 = (void *)*v297;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 649;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v297;
      _os_log_impl(&def_1E50E8, v296, OS_LOG_TYPE_INFO, "%25s:%-5d Registering DSP chain \"%s\" for GM Interference mitigation", buf, 0x1Cu);
    }

    if (*(char *)(a1 + 735) < 0) {
      sub_21E8C(&__dst, *(void **)(a1 + 712), *(void *)(a1 + 720));
    }
    else {
      __dst = *(std::string *)(a1 + 712);
    }
    v358 = *(void *)(a1 + 8);
    v357 = *(std::__shared_weak_count **)(a1 + 16);
    if (v357) {
      atomic_fetch_add_explicit(&v357->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v359 = (std::string *)operator new(0xA0uLL);
    v360 = v359;
    v359->__r_.__value_.__l.__size_ = 0;
    v359->__r_.__value_.__r.__words[2] = 0;
    v359->__r_.__value_.__r.__words[0] = (std::string::size_type)off_622288;
    v361 = v359 + 1;
    if (v357) {
      atomic_fetch_add_explicit(&v357->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v359[1].__r_.__value_.__l.__size_ = 0;
    v359[1].__r_.__value_.__r.__words[2] = 0;
    v359[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_6221A0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      sub_21E8C(&v359[2], __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else {
      v359[2] = __dst;
    }
    v360[3].__r_.__value_.__r.__words[0] = v358;
    v360[3].__r_.__value_.__l.__size_ = (std::string::size_type)v357;
    if (v357) {
      atomic_fetch_add_explicit(&v357->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v360[3].__r_.__value_.__r.__words[2] = 0;
    std::recursive_mutex::recursive_mutex((std::recursive_mutex *)&v360[4]);
    if (v357) {
      std::__shared_weak_count::__release_weak(v357);
    }
    v362 = (std::__shared_weak_count *)v360[1].__r_.__value_.__r.__words[2];
    if (v362)
    {
      if (v362->__shared_owners_ == -1)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v360->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)&v360->__r_.__value_.__r.__words[2], 1uLL, memory_order_relaxed);
        v360[1].__r_.__value_.__l.__size_ = (std::string::size_type)v361;
        v360[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v360;
        std::__shared_weak_count::__release_weak(v362);
        goto LABEL_713;
      }
    }
    else
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v360->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)&v360->__r_.__value_.__r.__words[2], 1uLL, memory_order_relaxed);
      v360[1].__r_.__value_.__l.__size_ = (std::string::size_type)v361;
      v360[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v360;
LABEL_713:
      sub_4636C((std::__shared_weak_count *)v360);
    }
    v364 = *(std::string ***)(a1 + 344);
    v363 = *(void *)(a1 + 352);
    if ((unint64_t)v364 >= v363)
    {
      v366 = *(void *)(a1 + 336);
      v367 = ((uint64_t)v364 - v366) >> 4;
      v368 = v367 + 1;
      if ((unint64_t)(v367 + 1) >> 60) {
        sub_60548();
      }
      v369 = v363 - v366;
      if (v369 >> 3 > v368) {
        v368 = v369 >> 3;
      }
      if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFF0) {
        v370 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        v370 = v368;
      }
      *(void *)&buf[32] = a1 + 352;
      v371 = (char *)sub_10724(v370);
      *(void *)&v372 = v361;
      *((void *)&v372 + 1) = v360;
      v373 = &v371[16 * v367];
      *(void *)AudioObjectPropertyAddress buf = v371;
      *(void *)&buf[8] = v373;
      *(void *)&buf[24] = &v371[16 * v374];
      *(_OWORD *)v373 = v372;
      *(void *)&buf[16] = v373 + 16;
      sub_FBB48((uint64_t *)(a1 + 336), buf);
      v365 = *(void **)(a1 + 344);
      sub_98E24((uint64_t)buf);
    }
    else
    {
      *v364 = v361;
      v364[1] = v360;
      v365 = v364 + 2;
    }
    *(void *)(a1 + 344) = v365;
    if (v357) {
      std::__shared_weak_count::__release_weak(v357);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    v298 = *(id *)sub_32A48(24);
    v299 = v298;
    if (v298 && os_log_type_enabled(v298, OS_LOG_TYPE_INFO))
    {
      v300 = (void *)(a1 + 712);
      if (*(char *)(a1 + 735) < 0) {
        v300 = (void *)*v300;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 655;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v300;
      _os_log_impl(&def_1E50E8, v299, OS_LOG_TYPE_INFO, "%25s:%-5d Not registering DSP chain \"%s\" for GM Interference mitigation", buf, 0x1Cu);
    }
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 1685287015, 1832018808, 0))
  {
    sub_1329C(&__dst, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
    v301 = (char *)operator new(0x68uLL);
    *((void *)v301 + 1) = 0;
    *((void *)v301 + 2) = 0;
    *(void *)v301 = off_626370;
    v302 = v301 + 24;
    v303 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    if (__dst.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(__dst.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
    }
    *((void *)v301 + 4) = 0;
    *((void *)v301 + 5) = 0;
    *((void *)v301 + 3) = &off_62A878;
    *((_OWORD *)v301 + 3) = v303;
    if (*((void *)&v303 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v303 + 1) + 16), 1uLL, memory_order_relaxed);
      *((void *)v301 + 12) = 0;
      *((_OWORD *)v301 + 4) = 0u;
      *((_OWORD *)v301 + 5) = 0u;
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v303 + 1));
    }
    else
    {
      *((void *)v301 + 12) = 0;
      *((_OWORD *)v301 + 4) = 0u;
      *((_OWORD *)v301 + 5) = 0u;
    }
    v304 = (std::__shared_weak_count *)*((void *)v301 + 5);
    if (v304)
    {
      if (v304->__shared_owners_ == -1)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v301 + 1, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v301 + 2, 1uLL, memory_order_relaxed);
        *((void *)v301 + 4) = v302;
        *((void *)v301 + 5) = v301;
        std::__shared_weak_count::__release_weak(v304);
        goto LABEL_596;
      }
    }
    else
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v301 + 1, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v301 + 2, 1uLL, memory_order_relaxed);
      *((void *)v301 + 4) = v302;
      *((void *)v301 + 5) = v301;
LABEL_596:
      sub_4636C((std::__shared_weak_count *)v301);
    }
    v306 = *(void **)(a1 + 344);
    v305 = *(void *)(a1 + 352);
    if ((unint64_t)v306 >= v305)
    {
      v308 = *(void *)(a1 + 336);
      v309 = ((uint64_t)v306 - v308) >> 4;
      v310 = v309 + 1;
      if ((unint64_t)(v309 + 1) >> 60) {
        sub_60548();
      }
      v311 = v305 - v308;
      if (v311 >> 3 > v310) {
        v310 = v311 >> 3;
      }
      if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFF0) {
        v312 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        v312 = v310;
      }
      *(void *)&buf[32] = a1 + 352;
      v313 = (char *)sub_10724(v312);
      *(void *)&v314 = v301 + 24;
      *((void *)&v314 + 1) = v301;
      v315 = &v313[16 * v309];
      *(void *)AudioObjectPropertyAddress buf = v313;
      *(void *)&buf[8] = v315;
      *(void *)&buf[24] = &v313[16 * v316];
      *(_OWORD *)v315 = v314;
      *(void *)&buf[16] = v315 + 16;
      sub_FBB48((uint64_t *)(a1 + 336), buf);
      v307 = *(void **)(a1 + 344);
      sub_98E24((uint64_t)buf);
    }
    else
    {
      *v306 = v302;
      v306[1] = v301;
      v307 = v306 + 2;
    }
    *(void *)(a1 + 344) = v307;
    if (__dst.__r_.__value_.__l.__size_) {
      sub_4636C((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
    }
  }
  for (k = *(void **)(a1 + 1080); k != *(void **)(a1 + 1088); k += 17)
  {
    if ((unint64_t)(*k - 5) <= 1)
    {
      v318 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.audio.virtualaudio"];
      v319 = [v318 valueForKey:@"windAndDynamics"];
      v320 = v319;
      if (v319)
      {
        v321 = [v319 unsignedIntValue] & 3;
        *(void *)&buf[8] = v321;
        v426 = 3;
        sub_1B1938(a1, 6uLL, (uint64_t)buf);
        sub_8C710((uint64_t)&buf[8]);
        buf[8] = v321 > 1;
        v426 = 0;
        sub_1B1938(a1, 5uLL, (uint64_t)buf);
        sub_8C710((uint64_t)&buf[8]);
      }

      break;
    }
  }
  if (!*(void *)(a1 + 1072)) {
    goto LABEL_696;
  }
  v322 = *(id *)sub_32A48(24);
  v323 = v322;
  if (v322 && os_log_type_enabled(v322, OS_LOG_TYPE_DEFAULT))
  {
    v324 = *(void *)(a1 + 1072);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "DSPChain.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 2991;
    *(_WORD *)&buf[18] = 2112;
    *(void *)&buf[20] = v324;
    _os_log_impl(&def_1E50E8, v323, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Executing post initialize actions described in dictionary %@", buf, 0x1Cu);
  }

  sub_157574((uint64_t)buf, *(CFDictionaryRef *)(a1 + 1072));
  sub_157574((uint64_t)&__dst, *(CFDictionaryRef *)(a1 + 1072));
  v325 = (void *)(a1 + 768);
  __dst.__r_.__value_.__l.__size_ = (int64_t)(v421 - __dst.__r_.__value_.__r.__words[2]) >> 3;
  while (2)
  {
    if (*(void *)buf && *(void *)&buf[8] != (uint64_t)(*(void *)&buf[24] - *(void *)&buf[16]) >> 3)
    {
      v326 = __dst.__r_.__value_.__r.__words[0];
LABEL_626:
      if (*(_OWORD *)buf == __PAIR128__(__dst.__r_.__value_.__l.__size_, v326)) {
        goto LABEL_688;
      }
      sub_1588C0(&cf, buf);
      v327 = sub_170648(&cf);
      if (v327 == 1936745841)
      {
        v328 = *(id *)sub_32A48(20);
        v329 = v328;
        if (v328 && os_log_type_enabled(v328, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v428 = 136315394;
          *(void *)&v428[4] = "DSPChain.mm";
          *(_WORD *)&v428[12] = 1024;
          *(_DWORD *)&v428[14] = 2999;
          _os_log_impl(&def_1E50E8, v329, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Getting SpEQ data from FDR", v428, 0x12u);
        }

        for (m = *(void **)(a1 + 776); m != v325; m = (void *)m[1])
        {
          v331 = (std::__shared_weak_count *)m[3];
          if (v331)
          {
            v332 = std::__shared_weak_count::lock(v331);
            if (v332)
            {
              v333 = m[2];
              if (v333)
              {
                v334 = *(_DWORD *)(v333 + 144);
                sub_4636C(v332);
                if (v334 == 1886613611)
                {
                  if (m != v325)
                  {
                    sub_549A4((uint64_t *)v411, m + 2, "", 3012);
                    sub_1B24D8((uint64_t)v428, *((void *)v411[0] + 24), COERCE_DOUBLE(1869968496));
                    memset(&__p, 0, sizeof(__p));
                    v340 = v428[24];
                    v341 = (std::string *)v428;
                    if (!v428[24]) {
                      v341 = &__p;
                    }
                    v342 = v341->__r_.__value_.__r.__words[0];
                    v343 = vdup_n_s32(v428[24] == 0);
                    v344.i64[0] = v343.u32[0];
                    v344.i64[1] = v343.u32[1];
                    v345 = vandq_s8(*(int8x16_t *)&v428[8], (int8x16_t)vcgezq_s64(vshlq_n_s64(v344, 0x3FuLL)));
                    *(_OWORD *)&v341->__r_.__value_.__r.__words[1] = 0uLL;
                    v341->__r_.__value_.__r.__words[0] = 0;
                    *(void *)v427 = v342;
                    *(int8x16_t *)&v427[8] = v345;
                    if (__p.__r_.__value_.__r.__words[0]) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    if (v340 && *(void *)v428) {
                      operator delete(*(void **)v428);
                    }
                    if (*(void *)v427 == *(void *)&v427[8])
                    {
                      v346 = *(id *)sub_32A48(24);
                      v347 = v346;
                      if (v346 && os_log_type_enabled(v346, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)v428 = 136315394;
                        *(void *)&v428[4] = "DSPChain.mm";
                        *(_WORD *)&v428[12] = 1024;
                        *(_DWORD *)&v428[14] = 3017;
                        _os_log_impl(&def_1E50E8, v347, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unable to retrieve data source info from speaker", v428, 0x12u);
                      }
                    }
                    sub_44AE4C((uint64_t *)&__p, (uint64_t)v427);
                    v348 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
                    if (__p.__r_.__value_.__r.__words[0])
                    {
                      v349 = *(id *)sub_32A48(20);
                      v350 = v349;
                      if (v349 && os_log_type_enabled(v349, OS_LOG_TYPE_DEBUG))
                      {
                        *(_DWORD *)v428 = 136315650;
                        *(void *)&v428[4] = "DSPChain.mm";
                        *(_WORD *)&v428[12] = 1024;
                        *(_DWORD *)&v428[14] = 3020;
                        *(_WORD *)&v428[18] = 2112;
                        *(void *)&v428[20] = v348;
                        _os_log_impl(&def_1E50E8, v350, OS_LOG_TYPE_DEBUG, "%25s:%-5d FDR Speaker EQ data: %@", v428, 0x1Cu);
                      }

                      v408 = v348;
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t **, uint64_t, void))(*(void *)a1 + 112))(a1, 1685287015, 1936745841, &v408, 8, 0))
                      {
                        v351 = *(id *)sub_32A48(24);
                        v352 = v351;
                        if (v351 && os_log_type_enabled(v351, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)v428 = 136315394;
                          *(void *)&v428[4] = "DSPChain.mm";
                          *(_WORD *)&v428[12] = 1024;
                          *(_DWORD *)&v428[14] = 3022;
                          _os_log_impl(&def_1E50E8, v352, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to set property speq on the DSP!", v428, 0x12u);
                        }
                      }
                      CFRelease(v348);
                    }
                    else
                    {
                      v354 = *(id *)sub_32A48(20);
                      v355 = v354;
                      if (v354 && os_log_type_enabled(v354, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)v428 = 136315394;
                        *(void *)&v428[4] = "DSPChain.mm";
                        *(_WORD *)&v428[12] = 1024;
                        *(_DWORD *)&v428[14] = 3026;
                        _os_log_impl(&def_1E50E8, v355, OS_LOG_TYPE_DEFAULT, "%25s:%-5d FDR doesn't have Speaker EQ data", v428, 0x12u);
                      }
                    }
                    if (*(void *)v427)
                    {
                      *(void *)&v427[8] = *(void *)v427;
                      operator delete(*(void **)v427);
                    }
                    if (v411[1]) {
                      sub_4636C((std::__shared_weak_count *)v411[1]);
                    }
                    goto LABEL_675;
                  }
                  break;
                }
              }
              else
              {
                sub_4636C(v332);
              }
            }
          }
        }
        v353 = *(id *)sub_32A48(24);
        v337 = v353;
        if (v353 && os_log_type_enabled(v353, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v428 = 136315394;
          *(void *)&v428[4] = "DSPChain.mm";
          *(_WORD *)&v428[12] = 1024;
          *(_DWORD *)&v428[14] = 3008;
          _os_log_impl(&def_1E50E8, v337, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not find speaker port for SpEQ data!", v428, 0x12u);
        }
      }
      else
      {
        v335 = v327;
        v336 = *(id *)sub_32A48(24);
        v337 = v336;
        if (v336)
        {
          v338 = v336;
          if (os_log_type_enabled(v338, OS_LOG_TYPE_DEFAULT))
          {
            sub_2417C(v427, v335);
            v339 = v427;
            if (v427[23] < 0) {
              v339 = *(unsigned char **)v427;
            }
            *(_DWORD *)v428 = 136315650;
            *(void *)&v428[4] = "DSPChain.mm";
            *(_WORD *)&v428[12] = 1024;
            *(_DWORD *)&v428[14] = 3032;
            *(_WORD *)&v428[18] = 2080;
            *(void *)&v428[20] = v339;
            _os_log_impl(&def_1E50E8, v338, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unhandled post initialize action %s!", v428, 0x1Cu);
            if ((v427[23] & 0x80000000) != 0) {
              operator delete(*(void **)v427);
            }
          }
        }
      }

LABEL_675:
      if (v415) {
        CFRelease(v415);
      }
      if (cf) {
        CFRelease(cf);
      }
      ++*(void *)&buf[8];
      continue;
    }
    break;
  }
  v326 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0]
    && __dst.__r_.__value_.__l.__size_ != (int64_t)(v421 - __dst.__r_.__value_.__r.__words[2]) >> 3)
  {
    goto LABEL_626;
  }
LABEL_688:
  if (v422)
  {
    v423 = v422;
    operator delete(v422);
  }
  if (__dst.__r_.__value_.__r.__words[2])
  {
    v421 = __dst.__r_.__value_.__r.__words[2];
    operator delete((void *)__dst.__r_.__value_.__r.__words[2]);
  }
  if (*(void *)&buf[40])
  {
    *(void *)&uint8_t buf[48] = *(void *)&buf[40];
    operator delete(*(void **)&buf[40]);
  }
  if (*(void *)&buf[16])
  {
    *(void *)&buf[24] = *(void *)&buf[16];
    operator delete(*(void **)&buf[16]);
  }
LABEL_696:
  sub_1B2324(&v403);
  return 1;
}

void sub_1B10FC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  operator delete(v15);
  sub_4636C(a3);
  sub_1B2324((os_signpost_id_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B1938(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = (uint64_t **)(a1 + 1112);
  uint64_t v6 = *(void **)(a1 + 1112);
  if (v6)
  {
    os_signpost_id_t v7 = (uint64_t **)(a1 + 1112);
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        char v10 = v6;
      }
      else {
        char v10 = v6 + 1;
      }
      if (v9) {
        os_signpost_id_t v7 = (uint64_t **)v6;
      }
      uint64_t v6 = (void *)*v10;
    }
    while (*v10);
    if (v7 != v5 && (unint64_t)v7[4] <= a2 && sub_1B2D44((uint64_t)(v7 + 5), a3))
    {
      uint64_t v11 = *(id *)sub_32A48(24);
      uint64_t v12 = v11;
      if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v13 = (void *)(v4 + 712);
        if (*(char *)(v4 + 735) < 0) {
          unint64_t v13 = (void *)*v13;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3054;
        __int16 v75 = 1024;
        *(_DWORD *)char v76 = a2;
        *(_WORD *)&v76[4] = 2080;
        *(void *)&v76[6] = v13;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Overlay tuning condition matches cache for use case %u in chain %s. Skipping application", buf, 0x22u);
      }

      return;
    }
  }
  int v58 = v5;
  if (a2 == 4)
  {
    sub_1B2704((uint64_t **)(v4 + 1104), 2uLL);
    if (sub_20ADA4()) {
      sub_1B2704((uint64_t **)(v4 + 1104), 7uLL);
    }
  }
  uint64_t v14 = *(void *)(v4 + 1080);
  uint64_t v15 = *(void *)(v4 + 1088);
  if (v14 != v15)
  {
    uint64_t v59 = 0;
    while (1)
    {
      if (*(void *)v14 == a2)
      {
        if (a2 == 4)
        {
          if (*(_DWORD *)(a3 + 88) != 1) {
            goto LABEL_91;
          }
          if (*(_DWORD *)(v14 + 96) != 2)
          {
            uint64_t v55 = (os_log_t *)sub_32A48(13);
            uint64_t v56 = *v55;
            if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "ConditionalOverlayTunings.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 91;
              _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Malformed SoundAutoConfig ConditionalOverlayTuning\"", buf, 0x12u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Malformed SoundAutoConfig ConditionalOverlayTuning");
          }
          *(void *)AudioObjectPropertyAddress buf = *(void *)(a3 + 8);
          sub_CAE80(&buf[8], (long long *)(a3 + 16));
          sub_CAE80(v77, (long long *)(a3 + 48));
          __int16 v80 = *(_WORD *)(a3 + 80);
          if (*(_DWORD *)(v14 + 96) != 2) {
            sub_27EA3C();
          }
          sub_46A4C((uint64_t *)&__p, v14 + 16);
          sub_18452C(&v69, (void *)(v14 + 40));
          sub_18452C(&v71, (void *)(v14 + 64));
          unsigned __int16 v73 = *(_WORD *)(v14 + 88);
          BOOL v16 = v73 < 0x100u || HIBYTE(v80) && v80 == v73;
          if (v68)
          {
            if (!buf[4]) {
              goto LABEL_53;
            }
            CFStringRef v17 = v67;
            if (!v67) {
              goto LABEL_53;
            }
            unsigned int v18 = &v67;
            do
            {
              id v19 = v17;
              unint64_t v20 = v18;
              unsigned int v21 = *((_DWORD *)v17 + 7);
              unint64_t v22 = v17 + 1;
              if (v21 >= *(_DWORD *)buf)
              {
                unint64_t v22 = v19;
                unsigned int v18 = (void **)v19;
              }
              CFStringRef v17 = (void *)*v22;
            }
            while (v17);
            if (v18 == &v67) {
              goto LABEL_53;
            }
            if (v21 < *(_DWORD *)buf) {
              id v19 = v20;
            }
            if (*(_DWORD *)buf < *((_DWORD *)v19 + 7)) {
              goto LABEL_53;
            }
          }
          if (v70[1] && (!v76[12] || v70 == (char **)sub_798F0((uint64_t)&v69, (void **)&buf[8])))
          {
LABEL_53:
            int v24 = 0;
          }
          else
          {
            if (v72[1])
            {
              int v23 = v79;
              if (v79) {
                int v23 = v72 != (char **)sub_798F0((uint64_t)&v71, v77);
              }
            }
            else
            {
              int v23 = 1;
            }
            int v24 = v16 & v23;
          }
          sub_8F90(v72[0]);
          sub_8F90(v70[0]);
          sub_463E0(v67);
          if (v79 && v78 < 0) {
            operator delete(v77[0]);
          }
          if (v76[12] && (v76[11] & 0x80000000) != 0) {
            operator delete(*(void **)&buf[8]);
          }
          if (!v24) {
            goto LABEL_91;
          }
LABEL_63:
          id v25 = (os_log_t *)sub_32A48(24);
          unint64_t v26 = *v25;
          if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v27 = (void *)(v14 + 112);
            if (*(char *)(v14 + 135) < 0) {
              __int16 v27 = (void *)*v27;
            }
            sub_2417C(&__p, *(_DWORD *)(v14 + 104));
            p_p = &__p;
            if (v68 < 0) {
              p_p = __p;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "ConditionalOverlayTunings.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 67;
            __int16 v75 = 2080;
            *(void *)char v76 = v27;
            *(_WORD *)&v76[8] = 2080;
            *(void *)&v76[10] = p_p;
            _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Loading overlay tuning from path %s for prop %s", buf, 0x26u);
            if (SHIBYTE(v68) < 0) {
              operator delete(__p);
            }
          }
          sub_16CD18(buf, v14 + 112);
          uint64_t v29 = *(unsigned int *)(v14 + 104);
          int v64 = *(_DWORD *)(v14 + 104);
          uint64_t v30 = *(const void **)buf;
          uint64_t v65 = *(void *)buf;
          if (*(void *)buf)
          {
            uint64_t v63 = *(void *)buf;
            unsigned int v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, void))(*(void *)v4 + 112))(v4, 1685287015, v29, &v63, 8, 0);
            if (v31)
            {
              id v32 = *(id *)sub_32A48(24);
              long long v33 = v32;
              if (v32)
              {
                uint64_t v34 = v32;
                if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v35 = v4;
                  sub_2417C(&__p, v29);
                  int v36 = SHIBYTE(v68);
                  unint64_t v37 = (void **)__p;
                  sub_2417C(v61, v31);
                  long long v38 = &__p;
                  if (v36 < 0) {
                    long long v38 = v37;
                  }
                  std::chrono::steady_clock::time_point v39 = v61;
                  if (v62 < 0) {
                    std::chrono::steady_clock::time_point v39 = (void **)v61[0];
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                  *(void *)&uint8_t buf[4] = "DSPChain.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3091;
                  __int16 v75 = 2080;
                  *(void *)char v76 = v38;
                  *(_WORD *)&v76[8] = 2080;
                  *(void *)&v76[10] = v39;
                  _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Failure to set property %s on the graph. Error: %s", buf, 0x26u);
                  if (v62 < 0) {
                    operator delete(v61[0]);
                  }
                  uint64_t v4 = v35;
                  if (SHIBYTE(v68) < 0) {
                    operator delete(__p);
                  }
                }
              }
            }
            else
            {
              ++v59;
            }
            CFRelease(v30);
          }
          else
          {
            long long v40 = *(id *)sub_32A48(24);
            long long v41 = v40;
            if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "DSPChain.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3082;
              _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Conditional tuning returned an invalid CFDictionary. Skipping", buf, 0x12u);
            }
          }
          goto LABEL_91;
        }
        if (sub_1B2D44(a3, v14 + 8)) {
          goto LABEL_63;
        }
      }
LABEL_91:
      v14 += 136;
      if (v14 == v15)
      {
        if (v59)
        {
          std::string::size_type v42 = *(id *)sub_32A48(24);
          long long v43 = v42;
          if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
          {
            uint64_t v44 = (void *)(v4 + 712);
            if (*(char *)(v4 + 735) < 0) {
              uint64_t v44 = (void *)*v44;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3102;
            __int16 v75 = 1024;
            *(_DWORD *)char v76 = a2;
            *(_WORD *)&v76[4] = 2080;
            *(void *)&v76[6] = v44;
            _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_INFO, "%25s:%-5d Caching overlay tuning condition for use case %u in chain %s.", buf, 0x22u);
          }

          unint64_t v45 = *(uint64_t **)(v4 + 1112);
          unint64_t v46 = v58;
          uint64_t v47 = v58;
          if (v45)
          {
            while (1)
            {
              while (1)
              {
                uint64_t v47 = (uint64_t **)v45;
                unint64_t v48 = v45[4];
                if (v48 <= a2) {
                  break;
                }
                unint64_t v45 = *v47;
                unint64_t v46 = v47;
                if (!*v47) {
                  goto LABEL_105;
                }
              }
              if (v48 >= a2) {
                break;
              }
              unint64_t v45 = v47[1];
              if (!v45)
              {
                unint64_t v46 = v47 + 1;
                goto LABEL_105;
              }
            }
            unsigned int v50 = v47;
          }
          else
          {
LABEL_105:
            CFDictionaryRef v49 = v46;
            unsigned int v50 = operator new(0x88uLL);
            v50[4] = a2;
            *((unsigned char *)v50 + 48) = 0;
            *((_DWORD *)v50 + 32) = 0;
            *unsigned int v50 = 0;
            v50[1] = 0;
            v50[2] = v47;
            void *v49 = v50;
            uint64_t v51 = **(void **)(v4 + 1104);
            __int16 v52 = v50;
            if (v51)
            {
              *(void *)(v4 + 1104) = v51;
              __int16 v52 = *v49;
            }
            sub_46D00(*(uint64_t **)(v4 + 1112), v52);
            ++*(void *)(v4 + 1120);
          }
          uint64_t v53 = *((unsigned int *)v50 + 32);
          uint64_t v54 = *(unsigned int *)(a3 + 88);
          if (v53 == -1)
          {
            if (v54 != -1) {
              goto LABEL_113;
            }
          }
          else
          {
            if (v54 == -1)
            {
              ((void (*)(unsigned char *, void *))off_626098[v53])(buf, v50 + 6);
              *((_DWORD *)v50 + 32) = -1;
              return;
            }
LABEL_113:
            *(void *)AudioObjectPropertyAddress buf = v50 + 6;
            ((void (*)(unsigned char *))off_6261B0[v54])(buf);
          }
        }
        return;
      }
    }
  }
}

void sub_1B2250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

os_signpost_id_t *sub_1B2324(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(id *)v2;
    if (v3)
    {
      uint64_t v4 = v3;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136315650;
        char v10 = "SignpostUtilities.h";
        __int16 v11 = 1024;
        int v12 = 91;
        __int16 v13 = 2080;
        uint64_t v14 = "kDSPInitialization";
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v9, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    uint64_t v5 = (id)qword_659470;
    uint64_t v6 = v5;
    os_signpost_id_t v7 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      LOWORD(v9) = 0;
      _os_signpost_emit_with_name_impl(&def_1E50E8, v6, OS_SIGNPOST_INTERVAL_END, v7, "VA_DSPInitialization", "", (uint8_t *)&v9, 2u);
    }
  }
  return a1;
}

void sub_1B24CC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

double sub_1B24D8(uint64_t a1, uint64_t a2, double a3)
{
  int v9 = 1936941859;
  double v10 = a3;
  sub_1B2590((uint64_t)v5, a2);
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (v8)
  {
    double result = *(double *)&v6;
    *(_OWORD *)a1 = v6;
    *(void *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t sub_1B254C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  return a1;
}

void sub_1B2590(uint64_t a1, uint64_t a2)
{
  if (sub_FE748(a2))
  {
    int v11 = 2003329396;
    LOBYTE(v12[0]) = 0;
    unsigned __int8 v14 = 0;
    unsigned int v4 = sub_FE7BC(a2);
    unsigned int v10 = v4;
    if (v4)
    {
      sub_73978(__p, v4 >> 2);
      int v5 = sub_FE830(a2);
      int v11 = v5;
      if (v5)
      {
        int v6 = 0;
        *(_DWORD *)a1 = v5;
        *(unsigned char *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 32) = 0;
      }
      else
      {
        uint64_t v7 = (void *)sub_86B44((uint64_t)v12, (uint64_t)__p);
        int v8 = v14;
        *(_DWORD *)a1 = v11;
        *(unsigned char *)(a1 + 8) = 0;
        *(unsigned char *)(a1 + 32) = 0;
        if (v8)
        {
          *(_OWORD *)(a1 + 8) = *(_OWORD *)v12;
          *(void *)(a1 + 24) = v13;
          v7[1] = 0;
          v7[2] = 0;
          *uint64_t v7 = 0;
          int v6 = 1;
          *(unsigned char *)(a1 + 32) = 1;
        }
        else
        {
          int v6 = 0;
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
        int v6 = v14;
      }
      if (v6)
      {
        if (v12[0])
        {
          v12[1] = v12[0];
          operator delete(v12[0]);
        }
      }
    }
    else
    {
      *(_DWORD *)a1 = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
      *(unsigned char *)(a1 + 32) = 1;
    }
  }
  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
}

void sub_1B2704(uint64_t **a1, unint64_t a2)
{
  unsigned int v4 = (uint64_t *)(a1 + 1);
  uint64_t v3 = a1[1];
  if (v3)
  {
    int v5 = v4;
    int v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        int v9 = (uint64_t **)v6;
      }
      else {
        int v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        int v5 = v6;
      }
      int v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      unsigned int v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          int v11 = v10;
          unsigned int v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        int v12 = v5;
        do
        {
          int v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          int v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_89144(v3, v5);
      sub_8C710((uint64_t)(v5 + 6));
      operator delete(v5);
    }
  }
}

uint64_t sub_1B27E4(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_1B2818(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  unsigned int v4 = *(_DWORD **)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 80);
  if (v5 != -1)
  {
    if (v5 == 4)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, _DWORD *))off_626098[v5])(&v6, v4);
  }
  *unsigned int v4 = *a3;
  v4[20] = 4;
  return result;
}

uint64_t sub_1B2890(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 80);
  if (v5 != -1)
  {
    if (v5 == 3)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_626098[v5])(&v6, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 80) = 3;
  return result;
}

void sub_1B2910(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*(_DWORD *)(*a1 + 80) == 2)
  {
    if (a2 != a3)
    {
      sub_C6650((uint64_t **)a2, *(void **)a3, (void *)(a3 + 8));
      sub_183404((uint64_t **)(a2 + 24), *(void **)(a3 + 24), (void *)(a3 + 32));
      sub_183404((uint64_t **)(a2 + 48), *(void **)(a3 + 48), (void *)(a3 + 56));
    }
    *(_WORD *)(a2 + 72) = *(_WORD *)(a3 + 72);
  }
  else
  {
    sub_46A4C((uint64_t *)&v16, a3);
    sub_18452C(&v19, (void *)(a3 + 24));
    sub_18452C(&v22, (void *)(a3 + 48));
    __int16 v25 = *(_WORD *)(a3 + 72);
    uint64_t v6 = *(unsigned int *)(v4 + 80);
    if (v6 != -1) {
      ((void (*)(char *, uint64_t))off_626098[v6])(&v26, v4);
    }
    *(void *)uint64_t v4 = v16;
    unint64_t v7 = v17;
    *(void *)(v4 + 8) = v17;
    uint64_t v8 = v4 + 8;
    *(_DWORD *)(v4 + 80) = -1;
    uint64_t v9 = v18;
    *(void *)(v4 + 16) = v18;
    if (v9)
    {
      v7[2] = v8;
      BOOL v16 = &v17;
      CFStringRef v17 = 0;
      uint64_t v18 = 0;
    }
    else
    {
      *(void *)uint64_t v4 = v8;
    }
    *(void *)(v4 + 24) = v19;
    unsigned int v10 = v20;
    *(void *)(v4 + 32) = v20;
    uint64_t v11 = v4 + 32;
    uint64_t v12 = v21;
    *(void *)(v4 + 40) = v21;
    if (v12)
    {
      *((void *)v10 + 2) = v11;
      id v19 = &v20;
      unint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    else
    {
      *(void *)(v4 + 24) = v11;
    }
    *(void *)(v4 + 48) = v22;
    uint64_t v13 = v23;
    *(void *)(v4 + 56) = v23;
    uint64_t v14 = v4 + 56;
    uint64_t v15 = v24;
    *(void *)(v4 + 64) = v24;
    if (v15)
    {
      *(void *)(v13 + 16) = v14;
      unint64_t v22 = &v23;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v13 = 0;
    }
    else
    {
      *(void *)(v4 + 48) = v14;
    }
    *(_WORD *)(v4 + 72) = v25;
    *(_DWORD *)(v4 + 80) = 2;
    sub_8F90((char *)v13);
    sub_8F90(v20);
    sub_463E0(v17);
  }
}

void sub_1B2AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char *a14)
{
}

uint64_t sub_1B2AF8(uint64_t a1)
{
  return a1;
}

void sub_1B2B34(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v4 = *a1;
  if (*(_DWORD *)(*a1 + 80) == 1)
  {
    int v6 = *a3;
    *(unsigned char *)(a2 + 4) = *((unsigned char *)a3 + 4);
    *(_DWORD *)a2 = v6;
    sub_126184((std::string *)(a2 + 8), (const std::string *)(a3 + 2));
    sub_126184((std::string *)(a2 + 40), (const std::string *)(a3 + 10));
    *(_WORD *)(a2 + 72) = *((_WORD *)a3 + 36);
  }
  else
  {
    uint64_t v11 = *(void *)a3;
    sub_CAE80(&__p, (long long *)(a3 + 2));
    sub_CAE80(&v15, (long long *)(a3 + 10));
    __int16 v18 = *((_WORD *)a3 + 36);
    uint64_t v7 = *(unsigned int *)(v4 + 80);
    if (v7 != -1) {
      ((void (*)(char *, uint64_t))off_626098[v7])(&v19, v4);
    }
    *(_DWORD *)(v4 + 80) = -1;
    *(void *)uint64_t v4 = v11;
    *(unsigned char *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 32) = 0;
    int v8 = v14;
    if (v14)
    {
      long long v9 = __p;
      *(void *)(v4 + 24) = v13;
      *(_OWORD *)(v4 + 8) = v9;
      uint64_t v13 = 0;
      long long __p = 0uLL;
      *(unsigned char *)(v4 + 32) = 1;
    }
    *(unsigned char *)(v4 + 40) = 0;
    *(unsigned char *)(v4 + 64) = 0;
    if (v17)
    {
      long long v10 = v15;
      *(void *)(v4 + 56) = v16;
      *(_OWORD *)(v4 + 40) = v10;
      uint64_t v16 = 0;
      long long v15 = 0uLL;
      *(unsigned char *)(v4 + 64) = 1;
    }
    *(_WORD *)(v4 + 72) = v18;
    *(_DWORD *)(v4 + 80) = 1;
    if (v8)
    {
      if (SHIBYTE(v13) < 0) {
        operator delete((void *)__p);
      }
    }
  }
}

void sub_1B2CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B2CD4(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 80);
  if (v5 != -1)
  {
    if (!v5)
    {
      *a2 = *a3;
      return result;
    }
    double result = ((uint64_t (*)(char *, uint64_t))off_626098[v5])(&v6, v4);
  }
  *(unsigned char *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 80) = 0;
  return result;
}

uint64_t sub_1B2D44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 88);
  int v3 = *(_DWORD *)(a2 + 88);
  BOOL v4 = v3 == v2;
  BOOL v6 = v3 == -1;
  LODWORD(v5) = v3 == -1;
  if (v6) {
    BOOL v4 = 0;
  }
  if (v2 == -1) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v4;
  }
  BOOL v6 = v2 == -1 || !v4;
  if (!v6)
  {
    long long v9 = &v8;
    return ((uint64_t (*)(char **, uint64_t, uint64_t))off_626188[v2])(&v9, a1 + 8, a2 + 8);
  }
  return v5;
}

BOOL sub_1B2DBC(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return *a2 == *a3;
}

BOOL sub_1B2DD0(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return ((*a2 ^ *a3) & 3) == 0;
}

BOOL sub_1B2DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 16) != *(void *)(a3 + 16)) {
    return 0;
  }
  uint64_t v5 = *(void **)a2;
  if (*(void *)a2 != a2 + 8)
  {
    BOOL v6 = *(void **)a3;
    while (*((_DWORD *)v5 + 7) == *((_DWORD *)v6 + 7))
    {
      uint64_t v7 = (void *)v5[1];
      char v8 = v5;
      if (v7)
      {
        do
        {
          uint64_t v5 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v8[2];
          BOOL v25 = *v5 == (void)v8;
          char v8 = v5;
        }
        while (!v25);
      }
      long long v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          long long v10 = v9;
          long long v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v10 = (void *)v6[2];
          BOOL v25 = *v10 == (void)v6;
          BOOL v6 = v10;
        }
        while (!v25);
      }
      BOOL v6 = v10;
      if (v5 == (void *)(a2 + 8)) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  if (*(void *)(a2 + 40) != *(void *)(a3 + 40)) {
    return 0;
  }
  uint64_t v11 = *(unsigned __int8 **)(a2 + 24);
  uint64_t v12 = (unsigned __int8 *)(a2 + 32);
  if (v11 == (unsigned __int8 *)(a2 + 32))
  {
LABEL_31:
    if (*(void *)(a2 + 64) == *(void *)(a3 + 64))
    {
      char v19 = *(unsigned __int8 **)(a2 + 48);
      if (v19 == (unsigned __int8 *)(a2 + 56))
      {
LABEL_46:
        if (*(unsigned char *)(a2 + 73)) {
          BOOL v25 = *(unsigned char *)(a3 + 73) == 0;
        }
        else {
          BOOL v25 = 1;
        }
        if (v25) {
          return (*(unsigned char *)(a2 + 73) != 0) == (*(unsigned char *)(a3 + 73) != 0);
        }
        else {
          return *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)(a3 + 72);
        }
      }
      else
      {
        unint64_t v20 = *(unsigned __int8 **)(a3 + 48);
        while (1)
        {
          BOOL result = sub_67CEC(v19 + 32, v20 + 32);
          if (!result) {
            break;
          }
          uint64_t v21 = (unsigned __int8 *)*((void *)v19 + 1);
          unint64_t v22 = v19;
          if (v21)
          {
            do
            {
              char v19 = v21;
              uint64_t v21 = *(unsigned __int8 **)v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              char v19 = (unsigned __int8 *)*((void *)v22 + 2);
              BOOL v25 = *(void *)v19 == (void)v22;
              unint64_t v22 = v19;
            }
            while (!v25);
          }
          uint64_t v23 = (unsigned __int8 *)*((void *)v20 + 1);
          if (v23)
          {
            do
            {
              uint64_t v24 = v23;
              uint64_t v23 = *(unsigned __int8 **)v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              uint64_t v24 = (unsigned __int8 *)*((void *)v20 + 2);
              BOOL v25 = *(void *)v24 == (void)v20;
              unint64_t v20 = v24;
            }
            while (!v25);
          }
          unint64_t v20 = v24;
          if (v19 == (unsigned __int8 *)(a2 + 56)) {
            goto LABEL_46;
          }
        }
      }
      return result;
    }
    return 0;
  }
  uint64_t v13 = *(unsigned __int8 **)(a3 + 24);
  while (1)
  {
    BOOL result = sub_67CEC(v11 + 32, v13 + 32);
    if (!result) {
      return result;
    }
    long long v15 = (unsigned __int8 *)*((void *)v11 + 1);
    uint64_t v16 = v11;
    if (v15)
    {
      do
      {
        uint64_t v11 = v15;
        long long v15 = *(unsigned __int8 **)v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        uint64_t v11 = (unsigned __int8 *)*((void *)v16 + 2);
        BOOL v25 = *(void *)v11 == (void)v16;
        uint64_t v16 = v11;
      }
      while (!v25);
    }
    char v17 = (unsigned __int8 *)*((void *)v13 + 1);
    if (v17)
    {
      do
      {
        __int16 v18 = v17;
        char v17 = *(unsigned __int8 **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        __int16 v18 = (unsigned __int8 *)*((void *)v13 + 2);
        BOOL v25 = *(void *)v18 == (void)v13;
        uint64_t v13 = v18;
      }
      while (!v25);
    }
    uint64_t v13 = v18;
    if (v11 == v12) {
      goto LABEL_31;
    }
  }
}

uint64_t sub_1B3038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 4);
  if (*(unsigned char *)(a2 + 4)) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    if ((*(unsigned char *)(a2 + 4) != 0) != (v5 != 0)) {
      return 0;
    }
  }
  else if (*(_DWORD *)a2 != *(_DWORD *)a3)
  {
    return 0;
  }
  uint64_t result = sub_12ABFC((unsigned __int8 *)(a2 + 8), (unsigned __int8 *)(a3 + 8));
  if (result)
  {
    uint64_t result = sub_12ABFC((unsigned __int8 *)(a2 + 40), (unsigned __int8 *)(a3 + 40));
    if (result)
    {
      uint64_t result = (*(unsigned char *)(a2 + 73) != 0) == (*(unsigned char *)(a3 + 73) != 0);
      if (*(unsigned char *)(a2 + 73))
      {
        if (*(unsigned char *)(a3 + 73)) {
          return *(unsigned __int8 *)(a2 + 72) == *(unsigned __int8 *)(a3 + 72);
        }
      }
    }
  }
  return result;
}

BOOL sub_1B30F8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

void *sub_1B3110(uint64_t a1)
{
  return sub_2891A4((void *)(a1 + 24));
}

void sub_1B3118(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_626370;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1B316C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_626370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1B318C(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    _os_assert_log();
    uint64_t result = _os_crash();
    __break(1u);
  }
  else
  {
    if (*(unsigned char *)(a1 + 40)) {
      caulk::semaphore::~semaphore((caulk::semaphore *)(a1 + 24));
    }
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (v2) {
      sub_4636C(v2);
    }
    return a1;
  }
  return result;
}

void sub_1B31EC(uint64_t a1)
{
  __dmb(0xBu);
  caulk::semaphore::signal((caulk::semaphore *)(*(void *)(a1 + 40) + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1B3244(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_626338;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1B3298(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_626338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B32BC(void *a1)
{
  if (a1[6])
  {
    sub_1B3350((caulk::semaphore *)(a1 + 8));
    uint64_t v2 = (std::__shared_weak_count *)a1[7];
    a1[6] = 0;
    a1[7] = 0;
    if (v2) {
      sub_4636C(v2);
    }
    caulk::semaphore::timed_wait((caulk::semaphore *)(a1 + 8), -1.0);
    __dmb(9u);
  }
  int v3 = (std::__shared_weak_count *)a1[13];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_1B318C((uint64_t)(a1 + 5));
  BOOL v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t sub_1B3350(caulk::semaphore *a1)
{
  if (*((unsigned char *)a1 + 16))
  {
    caulk::semaphore::~semaphore(a1);
    *((unsigned char *)a1 + 16) = 0;
  }
  uint64_t result = caulk::semaphore::semaphore(a1, 0);
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void sub_1B3384(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_626300;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1B33D8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_626300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B33F8(uint64_t a1, void *a2, float *a3)
{
  if (a2 && a3)
  {
    if (*(void *)(a1 + 784) >= 2uLL)
    {
      BOOL v6 = *(id *)sub_32A48(24);
      uint64_t v7 = v6;
      if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 784);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2862;
        __int16 v18 = 2048;
        uint64_t v19 = v8;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: Associated ports = %lu > 1. Using first port.", buf, 0x1Cu);
      }
    }
    sub_549A4((uint64_t *)buf, (uint64_t *)(*(void *)(a1 + 776) + 16), "", 2863);
    uint64_t v9 = *(void *)buf;
    sub_24CB94(*(uint64_t *)buf);
    float v10 = sub_24C904(v9);
    sub_24CF5C((CFDictionaryRef *)&cf, v9);
    *a3 = v10;
    CFTypeRef v11 = cf;
    CFTypeRef v14 = cf;
    __int16 v15 = 0;
    if (cf)
    {
      CFRetain(cf);
      *a2 = v14;
      sub_80594((uint64_t)&v14);
      CFRelease(v11);
    }
    else
    {
      *a2 = 0;
      sub_80594((uint64_t)&v14);
    }
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  else
  {
    uint64_t v12 = *(id *)sub_32A48(24);
    uint64_t v13 = v12;
    if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2857;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry: invalid volume curve or sensitivity pointers", buf, 0x12u);
    }
  }
}

void sub_1B360C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v13 = sub_32A48(24);
    CFTypeRef v14 = sub_7D5E8(1, *(void **)v13, *(void *)(v13 + 8));
    __int16 v15 = v14;
    if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "DSPChain.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 2875;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry : Failed to set volume curve and sensitivity", (uint8_t *)&buf, 0x12u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1B35D8);
  }
  _Unwind_Resume(a1);
}

void sub_1B3710(void *a1, const __CFDictionary *a2, float a3)
{
  if (a1[98])
  {
    long long v81 = 0u;
    long long v82 = 0u;
    *(_OWORD *)__int16 v80 = 0u;
    sub_549A4(&v78, (uint64_t *)(a1[97] + 16), "", 2702);
    uint64_t v6 = v78;
    CFStringRef v7 = *(const __CFString **)(v78 + 248);
    *(void *)&buf.int mSelector = v7;
    LOBYTE(buf.mElement) = *(unsigned char *)(v78 + 256);
    if (LOBYTE(buf.mElement)) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      CFRetain(v7);
      CFStringRef v7 = *(const __CFString **)&buf.mSelector;
    }
    *((void *)&v81 + 1) = v7;
    sub_72924((uint64_t)&buf);
    buf.int mSelector = 0;
    if (sub_24B50C((void *)v6, 0, (float *)&buf.mSelector))
    {
      uint64_t v9 = 1;
      *(void *)&long long v82 = 1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    if (*(_DWORD *)(v6 + 148) == 1885544823)
    {
      uint64_t v12 = v79;
      uint64_t Mutable = v6;
      unsigned int v91 = v79;
      if (v79) {
        atomic_fetch_add_explicit(&v79->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      double v76 = *(double *)&v9;
      sub_549A4((uint64_t *)&v92, &Mutable, "", 2521);
      CFDictionaryRef v13 = v92;
      uint64_t v14 = *((void *)v92 + 24);
      if (v14)
      {
        LODWORD(cf) = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 120))(v14);
        strcpy((char *)&buf, "diabbolg");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        unint64_t v15 = sub_26DAC((AudioObjectID *)&cf, &buf, 0, 0);
        *((void *)&v18 + 1) = v16;
        *(void *)&long long v18 = v15;
        uint64_t v17 = v18 >> 32;
        if ((v17 & 0xFF00000000) != 0) {
          uint64_t v19 = v17;
        }
        else {
          uint64_t v19 = 0;
        }
        switch((int)v19)
        {
          case 8194:
          case 8207:
          case 8211:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"AirPods");
            goto LABEL_77;
          case 8195:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Powerbeats3");
            goto LABEL_77;
          case 8197:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"BeatsX");
            goto LABEL_77;
          case 8198:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Beats Solo3");
            goto LABEL_77;
          case 8201:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Beats Studio3");
            goto LABEL_77;
          case 8202:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"AirPods Max");
            goto LABEL_77;
          case 8203:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Powerbeats Pro");
            goto LABEL_77;
          case 8204:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Beats Solo Pro");
            goto LABEL_77;
          case 8205:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Powerbeats");
            goto LABEL_77;
          case 8206:
          case 8212:
          case 8228:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"AirPods Pro");
            goto LABEL_77;
          case 8208:
          case 8209:
          case 8210:
          case 8217:
          case 8218:
          case 8219:
          case 8221:
          case 8222:
          case 8223:
          case 8224:
          case 8229:
          case 8230:
            unint64_t v20 = +[CBProductInfo productInfoWithProductID:v19];
            uint64_t v21 = [v20 productName];
            BOOL v22 = v21 == 0;

            if (v22)
            {

LABEL_51:
              (*(void (**)(AudioObjectPropertyAddress *__return_ptr, const __CFDictionary *))(*(void *)v13 + 144))(&buf, v13);
              CFStringRef v24 = *(const __CFString **)&buf.mSelector;
              v80[0] = *(CFTypeRef *)&buf.mSelector;
              sub_72924((uint64_t)&buf);
              if (!v19)
              {
                *(double *)&CFStringRef v30 = 0.0;
                goto LABEL_83;
              }
            }
            else
            {
              uint64_t v23 = [v20 productName];
              *(double *)&CFStringRef v24 = +[NSString stringWithString:v23];
              v80[0] = v24;
            }
LABEL_78:
            snprintf((char *)&cf, 7uLL, "0x%x", v19);
            sub_21C8C(&buf, (char *)&cf);
            if ((SBYTE3(v98) & 0x80u) == 0) {
              p_AudioObjectPropertyAddress buf = (const char *)&buf;
            }
            else {
              p_AudioObjectPropertyAddress buf = *(const char **)&buf.mSelector;
            }
            *(double *)&CFStringRef v30 = COERCE_DOUBLE(CFStringCreateWithCString(kCFAllocatorDefault, p_buf, 0x600u));
            *(void *)&long long v81 = v30;
            if (SBYTE3(v98) < 0) {
              operator delete(*(void **)&buf.mSelector);
            }
LABEL_83:
            if (sub_24B314(v13))
            {
              *(double *)&CFStringRef v28 = COERCE_DOUBLE(@"Apple Inc.");
              v80[1] = @"Apple Inc.";
            }
            else
            {
              int v41 = *((_DWORD *)v13 + 36);
              if (v41 != 1885892674 && v41 != 1886216820 && v41 != 1885892706) {
                goto LABEL_97;
              }
              if (!*((void *)v13 + 24)) {
                goto LABEL_97;
              }
              if (!(*(unsigned int (**)(const __CFDictionary *))(*(void *)v13 + 152))(v13)) {
                goto LABEL_97;
              }
              strcpy((char *)&buf, "dinvbolg");
              BYTE1(buf.mElement) = 0;
              HIWORD(buf.mElement) = 0;
              if (!(*(unsigned int (**)(const __CFDictionary *, AudioObjectPropertyAddress *))(*(void *)v13 + 16))(v13, &buf))goto LABEL_97; {
              LODWORD(cf) = 0;
              }
              LODWORD(v85) = 4;
              strcpy((char *)&buf, "dinvbolg");
              BYTE1(buf.mElement) = 0;
              HIWORD(buf.mElement) = 0;
              (*(void (**)(const __CFDictionary *, AudioObjectPropertyAddress *, void, void, uint64_t *, CFTypeRef *))(*(void *)v13 + 40))(v13, &buf, 0, 0, &v85, &cf);
              if (cf)
              {
                snprintf((char *)&cf, 7uLL, "0x%x", cf);
                sub_21C8C(&buf, (char *)&cf);
                if ((SBYTE3(v98) & 0x80u) == 0) {
                  std::string::size_type v42 = (const char *)&buf;
                }
                else {
                  std::string::size_type v42 = *(const char **)&buf.mSelector;
                }
                *(double *)&CFStringRef v28 = COERCE_DOUBLE(CFStringCreateWithCString(kCFAllocatorDefault, v42, 0x600u));
                v80[1] = v28;
                if (SBYTE3(v98) < 0) {
                  operator delete(*(void **)&buf.mSelector);
                }
              }
              else
              {
LABEL_97:
                *(double *)&CFStringRef v28 = 0.0;
              }
            }
            break;
          case 8214:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Beats Studio Buds +");
            goto LABEL_77;
          case 8215:
            *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Beats Studio Pro");
LABEL_77:
            v80[0] = v24;
            goto LABEL_78;
          default:
            goto LABEL_51;
        }
      }
      else
      {
        *(double *)&CFStringRef v28 = 0.0;
        *(double *)&CFStringRef v30 = 0.0;
        *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Unknown");
        v80[0] = @"Unknown";
      }
      if (v93) {
        sub_4636C(v93);
      }
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      float v29 = 1.0;
LABEL_103:
      v77[0] = v6;
      v77[1] = (uint64_t)v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      CFMutableDictionaryRef v92 = a2;
      LOWORD(v93) = 0;
      uint64_t Mutable = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      LOWORD(v91) = 257;
      *(double *)&CFTypeRef cf = COERCE_DOUBLE(CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks));
      __int16 v89 = 257;
      sub_1D492C(&v92, @"OutputMap", (uint64_t)&cf);
      sub_1D492C(&v92, @"InputMap", (uint64_t)&Mutable);
      float v87 = 0.0;
      int Count = (int)cf;
      if (*(double *)&cf != 0.0) {
        int Count = CFArrayGetCount((CFArrayRef)cf);
      }
      sub_1D1BB4((CFArrayRef *)&cf, Count - 1, &v87);
      float v44 = (float)((float)(a3 + -12.83) - v87) + 13.0;
      unint64_t v45 = *(id *)sub_32A48(24);
      unint64_t v46 = v45;
      if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        buf.int mSelector = 136316162;
        *(void *)&buf.AudioObjectPropertyScope mScope = "DSPChain.mm";
        __int16 v95 = 1024;
        int v96 = 2766;
        __int16 v97 = 2048;
        double v98 = a3;
        __int16 v99 = 2048;
        double v100 = v87;
        __int16 v101 = 2048;
        double v102 = v44;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: senstivity: %.2f, max output volume: %.2f offset: %.2f", (uint8_t *)&buf, 0x30u);
      }

      float v47 = 80.0 - v44;
      float v48 = 74.0 - v44;
      CFDictionaryRef v49 = *(id *)sub_32A48(24);
      unsigned int v50 = v49;
      if (v49 && os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "DSPChain.mm";
        __int16 v95 = 1024;
        int v96 = 2771;
        __int16 v97 = 2048;
        double v98 = v47;
        __int16 v99 = 2048;
        double v100 = v48;
        _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry: mapped 80dB volume: %.2f, mapped 74dB volume: %.2f", (uint8_t *)&buf, 0x26u);
      }

      float v51 = sub_1B6104((CFArrayRef *)&Mutable, (CFArrayRef *)&cf, v48);
      float v52 = sub_1B6104((CFArrayRef *)&Mutable, (CFArrayRef *)&cf, v47);
      uint64_t v53 = *(id *)sub_32A48(24);
      uint64_t v54 = v53;
      if (v53 && os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "DSPChain.mm";
        __int16 v95 = 1024;
        int v96 = 2777;
        __int16 v97 = 2048;
        double v98 = v52;
        __int16 v99 = 2048;
        double v100 = v51;
        _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: target dB volume at 80dB: %.2fdB, at 74dB: %.2fdB", (uint8_t *)&buf, 0x26u);
      }

      sub_549A4(&v85, v77, "", 2779);
      uint64_t v55 = *(void *)(v85 + 192);
      if (v55 && ((*(void (**)(uint64_t *__return_ptr))(*(void *)v55 + 256))(&v83), v84))
      {
        uint64_t v56 = std::__shared_weak_count::lock(v84);
        if (v56)
        {
          unsigned int v57 = v56;
          float v58 = -1.0;
          if (v83)
          {
            uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 128))(v83);
            float v60 = -1.0;
            if (v61)
            {
              uint64_t v62 = v59;
              float v63 = sub_7953C(v59, v51);
              float v64 = sub_7953C(v62, v52);
              sub_796B4(v62, v63);
              float v66 = v65;
              sub_796B4(v62, v64);
              float v68 = v67;
              float v60 = v63 / v29;
              float v58 = v64 / v29;
              uint64_t v69 = *(id *)sub_32A48(24);
              uint64_t v70 = v69;
              if (v69 && os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
              {
                buf.int mSelector = 136316674;
                *(void *)&buf.AudioObjectPropertyScope mScope = "DSPChain.mm";
                __int16 v95 = 1024;
                int v96 = 2798;
                __int16 v97 = 2048;
                double v98 = v58;
                __int16 v99 = 2048;
                double v100 = v60;
                __int16 v101 = 2048;
                double v102 = v66;
                __int16 v103 = 2048;
                double v104 = v68;
                __int16 v105 = 2048;
                double v106 = v29;
                _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: target scalar volume at 80dB: %.2f, at 74dB: %.2f convert back to dB: %.2f, %.2f scalar coefficient: %.4f", (uint8_t *)&buf, 0x44u);
              }
            }
          }
          else
          {
            float v60 = -1.0;
          }
          sub_4636C(v57);
        }
        else
        {
          float v58 = -1.0;
          float v60 = -1.0;
        }
        if (v84) {
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      else
      {
        float v58 = -1.0;
        float v60 = -1.0;
      }
      if (v86) {
        sub_4636C(v86);
      }
      sub_3D61C((uint64_t)&cf);
      sub_3D61C((uint64_t)&Mutable);
      sub_80594((uint64_t)&v92);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      CFMutableDictionaryRef v92 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      LOWORD(v93) = 257;
      sub_1D4B7C((uint64_t)&v92, @"ScalarVolume74", v60);
      sub_1D4B7C((uint64_t)&v92, @"ScalarVolume80", v58);
      *((void *)&v82 + 1) = v92;
      uint64_t v71 = *(id *)sub_32A48(24);
      uint64_t v72 = v71;
      if (v71 && os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        buf.int mSelector = 136317442;
        *(void *)&buf.AudioObjectPropertyScope mScope = "DSPChain.mm";
        __int16 v95 = 1024;
        int v96 = 2730;
        __int16 v97 = 2112;
        double v98 = *(double *)&v24;
        __int16 v99 = 2112;
        double v100 = *(double *)&v30;
        __int16 v101 = 2112;
        double v102 = *(double *)&v28;
        __int16 v103 = 2112;
        double v104 = *(double *)&v7;
        __int16 v105 = 2048;
        double v106 = v76;
        __int16 v107 = 2048;
        double v108 = a3;
        __int16 v109 = 2048;
        double v110 = v60;
        __int16 v111 = 2048;
        double v112 = v58;
        _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Device Info: {Name: '%@' Model: '%@' Manufacture: '%@' UUID: '%@' device flag: '%0llx' sensitivity: %.4f scalar74: %.4f scalar80: %.4f}", (uint8_t *)&buf, 0x62u);
      }

      uint64_t v73 = a1[92];
      if (qword_64EE90 != -1) {
        dispatch_once(&qword_64EE90, &stru_626078);
      }
      if (off_64EF10)
      {
        off_64EF10(v73, v80);
        CFStringRef v30 = *(CFStringRef *)&v81;
      }
      if (*(double *)&v30 != 0.0) {
        CFRelease(v30);
      }
      if (v80[1]) {
        CFRelease(v80[1]);
      }
      sub_80594((uint64_t)&v92);
      if (v79) {
        sub_4636C(v79);
      }
      return;
    }
    uint64_t v12 = v79;
    uint64_t Mutable = v6;
    unsigned int v91 = v79;
    if (v79) {
      atomic_fetch_add_explicit(&v79->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_549A4((uint64_t *)&v92, &Mutable, "", 2627);
    uint64_t v25 = v9 | 2;
    *(void *)&long long v82 = v9 | 2;
    CFMutableDictionaryRef v26 = v92;
    int v27 = *((_DWORD *)v92 + 66);
    if (v27 > 1647718501)
    {
      if ((v27 - 1647718502) < 2)
      {
LABEL_35:
        v80[0] = @"EarPods";
        v80[1] = @"Apple Inc.";
        float v29 = flt_4E6D18[MGGetSInt32Answer() == 2];
        *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"EarPods");
        *(double *)&CFStringRef v28 = COERCE_DOUBLE(@"Apple Inc.");
LABEL_41:
        if (v93) {
          sub_4636C(v93);
        }
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
        *(double *)&CFStringRef v30 = 0.0;
        double v76 = *(double *)&v25;
        goto LABEL_103;
      }
      if (v27 == 1752709424 || v27 == 2004367664)
      {
        *(double *)&CFStringRef v28 = 0.0;
        *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"MFi");
        v80[0] = @"MFi";
LABEL_40:
        float v29 = 1.0;
        goto LABEL_41;
      }
    }
    else
    {
      if (v27 <= 1647521841)
      {
        if (v27 != 1214329654 && v27 != 1214394677) {
          goto LABEL_46;
        }
        goto LABEL_35;
      }
      if (v27 == 1647521842 || v27 == 1647522096)
      {
        *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Beats");
        *(double *)&CFStringRef v28 = COERCE_DOUBLE(@"Apple Inc.");
        v80[0] = @"Beats";
        v80[1] = @"Apple Inc.";
        goto LABEL_40;
      }
    }
LABEL_46:
    uint64_t v31 = *((void *)v92 + 24);
    if (!v31)
    {
      uint64_t v25 = v9 | 6;
      v80[0] = @"Wired";
      *(void *)&long long v82 = v9 | 6;
      int v36 = *(id *)sub_32A48(24);
      unint64_t v37 = v36;
      if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        buf.int mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "DSPChain.mm";
        __int16 v95 = 1024;
        int v96 = 2686;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry : Cannot get device UID, assumed headset jack", (uint8_t *)&buf, 0x12u);
      }

      *(double *)&CFStringRef v28 = 0.0;
      *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Wired");
      goto LABEL_161;
    }
    strcpy((char *)&buf, "nartbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    uint64_t v32 = sub_99A40(v31);
    *((void *)&v35 + 1) = v33;
    *(void *)&long long v35 = v32;
    uint64_t v34 = v35 >> 32;
    if ((v34 & 0xFF00000000) != 0 && v34 == 1970496032)
    {
      (*(void (**)(AudioObjectPropertyAddress *__return_ptr, CFMutableDictionaryRef))(*(void *)v26 + 144))(&buf, v26);
      CFStringRef v24 = *(const __CFString **)&buf.mSelector;
      v80[0] = *(CFTypeRef *)&buf.mSelector;
      sub_72924((uint64_t)&buf);
    }
    else
    {
      uint64_t v25 = v9 | 0x12;
      *(double *)&CFStringRef v24 = COERCE_DOUBLE(@"Wired");
      *(void *)&long long v82 = v9 | 0x12;
      v80[0] = @"Wired";
    }
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t))(*(void *)v31 + 448))(&cf, v31);
    CFStringRef v7 = (const __CFString *)cf;
    *((void *)&v81 + 1) = cf;
    if (*(double *)&cf != 0.0) {
      CFRetain(cf);
    }
    CFRetain(@"Codec");
    CFTypeID v38 = CFGetTypeID(@"Codec");
    if (v38 == CFStringGetTypeID())
    {
      if (*(double *)&v7 == 0.0) {
        CFComparisonResult v39 = kCFCompareLessThan;
      }
      else {
        CFComparisonResult v39 = CFStringCompare(v7, @"Codec", 0);
      }
      CFRelease(@"Codec");
      if (*(double *)&v7 == 0.0)
      {
LABEL_152:
        if (v39)
        {
          unsigned int v74 = *(id *)sub_32A48(24);
          __int16 v75 = v74;
          if (v74 && os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          {
            buf.int mSelector = 136315650;
            *(void *)&buf.AudioObjectPropertyScope mScope = "DSPChain.mm";
            __int16 v95 = 1024;
            int v96 = 2679;
            __int16 v97 = 2112;
            double v98 = *(double *)&cf;
            _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Wired Device UID: %@", (uint8_t *)&buf, 0x1Cu);
          }

          goto LABEL_158;
        }
LABEL_157:
        v25 |= 4uLL;
        *(void *)&long long v82 = v25;
LABEL_158:
        if (*(double *)&cf != 0.0) {
          CFRelease(cf);
        }
        *(double *)&CFStringRef v28 = 0.0;
LABEL_161:
        float v29 = 0.92;
        goto LABEL_41;
      }
    }
    else
    {
      CFRelease(@"Codec");
      if (*(double *)&v7 == 0.0) {
        goto LABEL_157;
      }
      CFComparisonResult v39 = kCFCompareGreaterThan;
    }
    CFRelease(v7);
    goto LABEL_152;
  }
  float v10 = *(id *)sub_32A48(24);
  CFTypeRef v11 = v10;
  if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    buf.int mSelector = 136315394;
    *(void *)&buf.AudioObjectPropertyScope mScope = "DSPChain.mm";
    __int16 v95 = 1024;
    int v96 = 2746;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry : no associated ports in dspchain?", (uint8_t *)&buf, 0x12u);
  }
}

void sub_1B47BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,std::__shared_weak_count *a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a32) {
    sub_4636C(a32);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  if (a14) {
    sub_4636C(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B49D8(unsigned char *a1, uint64_t *a2, unsigned int a3)
{
  if (a1[796])
  {
    int v5 = (std::__shared_weak_count *)a2[1];
    if (v5)
    {
      CFStringRef v7 = std::__shared_weak_count::lock(v5);
      if (v7)
      {
        BOOL v8 = v7;
        uint64_t v9 = *a2;
        if (!v9)
        {
LABEL_40:
          sub_4636C(v8);
          return;
        }
        if (!a1[798])
        {
          int v16 = 1;
          goto LABEL_26;
        }
        if (a3 == 1701865584 || a3 == 1701868910)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 456))(v9))
          {
            int v16 = 0;
LABEL_25:
            if (a1[798])
            {
LABEL_30:
              LODWORD(__p[0]) = v16;
              (*(void (**)(unsigned char *, uint64_t, uint64_t, void **, uint64_t, void))(*(void *)a1 + 112))(a1, 1936747629, 21, __p, 4, 0);
              BOOL v22 = *(id *)sub_32A48(24);
              uint64_t v23 = v22;
              if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                CFStringRef v24 = "*running*";
                uint64_t v33 = "DSPChain.mm";
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                if (v16) {
                  CFStringRef v24 = "*bypassed*";
                }
                __int16 v34 = 1024;
                int v35 = 713;
                __int16 v36 = 2080;
                *(void *)unint64_t v37 = v24;
                _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: AUSPL is %s", buf, 0x1Cu);
              }

              a1[797] = v16 ^ 1;
              if (*(_DWORD *)(v9 + 144) == 1886152047)
              {
                uint64_t v25 = *(id *)sub_32A48(24);
                CFMutableDictionaryRef v26 = v25;
                if (v25)
                {
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                    uint64_t v33 = "DSPChain.mm";
                    __int16 v34 = 1024;
                    int v35 = 726;
                    _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: PortType is BluetoothLEOutput. Will not report SPL data", buf, 0x12u);
                  }
                }

                a1[797] = 0;
              }
              goto LABEL_40;
            }
LABEL_26:
            unint64_t v20 = *(id *)sub_32A48(24);
            uint64_t v21 = v20;
            if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              uint64_t v33 = "DSPChain.mm";
              __int16 v34 = 1024;
              int v35 = 719;
              _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: VAD configured for a mode disallowing dosimetry. Will not report SPL data", buf, 0x12u);
            }

            goto LABEL_30;
          }
          float v10 = (os_log_t *)sub_32A48(24);
          CFTypeRef v11 = *v10;
          if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
          {
            int v12 = (*(uint64_t (**)(void))(**(void **)(v9 + 192) + 120))(*(void *)(v9 + 192));
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v9 + 144))(__p, v9);
            CFDictionaryRef v13 = __p[0];
            (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v9 + 136))(v29, v9);
            uint64_t v14 = v29[0];
            unint64_t v15 = *(const void **)(v9 + 248);
            int v27 = v15;
            char v28 = *(unsigned char *)(v9 + 256);
            if (v28 && v15) {
              CFRetain(v15);
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
            uint64_t v33 = "RouteUtilities.cpp";
            __int16 v34 = 1024;
            int v35 = 793;
            __int16 v36 = 1024;
            *(_DWORD *)unint64_t v37 = v12;
            *(_WORD *)&v37[4] = 2112;
            *(void *)&v37[6] = v13;
            __int16 v38 = 2112;
            uint64_t v39 = v14;
            __int16 v40 = 2112;
            int v41 = v15;
            _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Skipping AUSPL since the device [%u, %@, %@, %@] is a temporary guest device", buf, 0x36u);
            sub_72924((uint64_t)&v27);
            sub_72924((uint64_t)v29);
            sub_72924((uint64_t)__p);
          }
        }
        else
        {
          uint64_t v17 = (os_log_t *)sub_32A48(24);
          long long v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
          {
            sub_2417C(__p, a3);
            uint64_t v19 = v31 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            uint64_t v33 = "RouteUtilities.cpp";
            __int16 v34 = 1024;
            int v35 = 784;
            __int16 v36 = 2080;
            *(void *)unint64_t v37 = v19;
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Skipping AUSPL since endpoint is not headphone: %s", buf, 0x1Cu);
            if (v31 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        int v16 = 1;
        goto LABEL_25;
      }
    }
  }
}

void sub_1B4EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_72924((uint64_t)va);
  sub_72924((uint64_t)va1);
  sub_4636C(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_1B4F24(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (a2 != 1)
  {
    uint64_t v17 = sub_32A48(13);
    long long v18 = sub_7D5E8(1, *(void **)v17, *(void *)(v17 + 8));
    uint64_t v19 = v18;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      int v27 = "DSPChain.mm";
      __int16 v28 = 1024;
      int v29 = 2339;
      __int16 v30 = 1024;
      unsigned int v31 = a2;
      __int16 v32 = 1024;
      *(_DWORD *)uint64_t v33 = a1;
      *(_WORD *)&v33[4] = 2048;
      *(void *)&v33[6] = a4;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"PlaybackDosimetry : DeviceVolumeChangeHandler called with %u property addresses? should be 1. deviceID: %u client: %p\"", buf, 0x28u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PlaybackDosimetry : DeviceVolumeChangeHandler called with %u property addresses? should be 1. deviceID: %u client: %p");
  }
  if (!a3)
  {
    uint64_t v21 = sub_32A48(13);
    BOOL v22 = sub_7D5E8(1, *(void **)v21, *(void *)(v21 + 8));
    uint64_t v23 = v22;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      int v27 = "DSPChain.mm";
      __int16 v28 = 1024;
      int v29 = 2344;
      __int16 v30 = 1024;
      unsigned int v31 = a1;
      __int16 v32 = 2048;
      *(void *)uint64_t v33 = a4;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"PlaybackDosimetry : DeviceVolumeChangeHandler called with NULL property addresses?  deviceID: %u client: %p\"", buf, 0x22u);
    }

    CFStringRef v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "PlaybackDosimetry : DeviceVolumeChangeHandler called with NULL property addresses?  deviceID: %u client: %p");
  }
  uint64_t result = 560232035;
  uint64_t v8 = *(void *)(a4 + 856);
  if (v8)
  {
    uint64_t v9 = a4 + 856;
    do
    {
      unsigned int v10 = *(_DWORD *)(v8 + 28);
      BOOL v11 = v10 >= a1;
      if (v10 >= a1) {
        int v12 = (uint64_t *)v8;
      }
      else {
        int v12 = (uint64_t *)(v8 + 8);
      }
      if (v11) {
        uint64_t v9 = v8;
      }
      uint64_t v8 = *v12;
    }
    while (*v12);
    if (v9 != a4 + 856 && *(_DWORD *)(v9 + 28) <= a1)
    {
      uint64_t v13 = sub_F820C();
      uint64_t v14 = operator new(0x28uLL);
      *uint64_t v14 = off_6264A8;
      v14[1] = a4;
      v14[2] = a3;
      *((_DWORD *)v14 + 6) = a1;
      v14[4] = a4;
      v25[3] = v14;
      int v15 = sub_F8498(v13, a1, (uint64_t)v25);
      sub_87864(v25);
      if (v15) {
        return 0;
      }
      else {
        return 1717660012;
      }
    }
  }
  return result;
}

void sub_1B51F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1B5220(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    int v68 = *(_DWORD *)(a1 + 24);
    BOOL v4 = *(const AudioObjectPropertyAddress **)(a1 + 16);
    uint64_t v64 = *(void *)(a1 + 8);
    int v65 = v68;
    uint64_t v66 = *(void *)(a1 + 32);
    uint64_t v67 = v3;
    AudioObjectPropertySelector mSelector = v4->mSelector;
    if (v4->mSelector == 1836414053)
    {
      if ((sub_1B5998((uint64_t)&v67) & 1) == 0)
      {
        BOOL result = sub_1B5AB8((uint64_t)&v64);
        if (!result) {
          return result;
        }
        outData[0] = 0.0;
        ioDataSize[0] = 4;
        AudioObjectGetPropertyData(*(_DWORD *)(a1 + 24), v4, 0, 0, ioDataSize, outData);
        if (LODWORD(outData[0]) == 1) {
          sub_1B5BBC(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), -3.4028e38);
        }
      }
      return 1;
    }
    if (mSelector != 1970496630)
    {
      if (mSelector == 1987013732)
      {
        if ((sub_1B5998((uint64_t)&v67) & 1) == 0)
        {
          BOOL result = sub_1B5AB8((uint64_t)&v64);
          if (!result) {
            return result;
          }
          outData[0] = 0.0;
          ioDataSize[0] = 4;
          AudioObjectGetPropertyData(*(_DWORD *)(a1 + 24), v4, 0, 0, ioDataSize, outData);
          sub_1B5BBC(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), outData[0]);
        }
      }
      else
      {
        id v19 = *(id *)sub_32A48(24);
        unint64_t v20 = v19;
        if (v19)
        {
          uint64_t v21 = v19;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            sub_2417C(ioDataSize, v4->mSelector);
            if (v62 >= 0) {
              BOOL v22 = ioDataSize;
            }
            else {
              BOOL v22 = *(UInt32 **)ioDataSize;
            }
            int v23 = *(_DWORD *)(a1 + 24);
            outData[0] = 4.8153e-34;
            *(void *)&outData[1] = "DSPChain.mm";
            __int16 v70 = 1024;
            int v71 = 2439;
            __int16 v72 = 2080;
            *(void *)uint64_t v73 = v22;
            *(_WORD *)&v73[8] = 1024;
            *(_DWORD *)&v73[10] = v23;
            _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: unknown selector for property handler %s device: %u", (uint8_t *)outData, 0x22u);
            if (v62 < 0) {
              operator delete(*(void **)ioDataSize);
            }
          }
        }
      }
      return 1;
    }
    BOOL result = sub_1B5AB8((uint64_t)&v64);
    if (!result) {
      return result;
    }
    unsigned int v63 = 1701868910;
    unsigned int v11 = sub_1B5F7C(v3, (int *)&v63);
    if (v11)
    {
      uint64_t v12 = sub_32A48(17);
      uint64_t v13 = sub_32A48(28);
      char v14 = 0;
      uint64_t v15 = 0;
      *(void *)double outData = 0x100000002;
      uint64_t v16 = *(void *)(v12 + 8);
      while (1)
      {
        uint64_t v17 = SLODWORD(outData[v15]);
        char v18 = v14;
        if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
          break;
        }
        char v14 = 1;
        uint64_t v15 = 1;
        if (v18) {
          goto LABEL_38;
        }
      }
      if ((v16 & v17) == 0) {
        uint64_t v12 = v13;
      }
LABEL_38:
      uint64_t v35 = sub_32A48(24);
      char v36 = 0;
      uint64_t v37 = 0;
      *(void *)double outData = 0x100000002;
      uint64_t v38 = *(void *)(v12 + 8);
      while (1)
      {
        uint64_t v39 = SLODWORD(outData[v37]);
        char v40 = v36;
        if (((v38 & v39) != 0) != ((*(void *)(v35 + 8) & v39) != 0)) {
          break;
        }
        char v36 = 1;
        uint64_t v37 = 1;
        if (v40) {
          goto LABEL_44;
        }
      }
      if ((v38 & v39) == 0) {
        uint64_t v12 = v35;
      }
LABEL_44:
      id v41 = *(id *)v12;
      if (v41)
      {
        std::string::size_type v42 = v41;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(ioDataSize, v11);
          if (v62 >= 0) {
            long long v43 = ioDataSize;
          }
          else {
            long long v43 = *(UInt32 **)ioDataSize;
          }
          outData[0] = 4.8152e-34;
          *(void *)&outData[1] = "DSPChain.mm";
          __int16 v70 = 1024;
          int v71 = 2434;
          __int16 v72 = 2080;
          *(void *)uint64_t v73 = v43;
          _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry: failed to fetch user selected endpoint type. err '%s'", (uint8_t *)outData, 0x1Cu);
LABEL_50:
          if (v62 < 0) {
            operator delete(*(void **)ioDataSize);
          }
          goto LABEL_77;
        }
        goto LABEL_77;
      }
    }
    else
    {
      unsigned int v24 = v63;
      uint64_t v25 = *(void *)(a1 + 8);
      if (v63 == *(_DWORD *)(v25 + 800)) {
        return 1;
      }
      sub_1B49D8((unsigned char *)v25, (uint64_t *)(v25 + 808), v63);
      uint64_t v26 = *(void *)(a1 + 8);
      unsigned int v27 = *(_DWORD *)(v26 + 800);
      *(_DWORD *)(v26 + 800) = v24;
      uint64_t v28 = sub_32A48(17);
      uint64_t v29 = sub_32A48(28);
      char v30 = 0;
      uint64_t v31 = 0;
      *(void *)double outData = 0x100000002;
      uint64_t v32 = *(void *)(v28 + 8);
      while (1)
      {
        uint64_t v33 = SLODWORD(outData[v31]);
        char v34 = v30;
        if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
          break;
        }
        char v30 = 1;
        uint64_t v31 = 1;
        if (v34) {
          goto LABEL_54;
        }
      }
      if ((v32 & v33) == 0) {
        uint64_t v28 = v29;
      }
LABEL_54:
      uint64_t v44 = sub_32A48(24);
      char v45 = 0;
      uint64_t v46 = 0;
      *(void *)double outData = 0x100000002;
      uint64_t v47 = *(void *)(v28 + 8);
      while (1)
      {
        uint64_t v48 = SLODWORD(outData[v46]);
        char v49 = v45;
        if (((v47 & v48) != 0) != ((*(void *)(v44 + 8) & v48) != 0)) {
          break;
        }
        char v45 = 1;
        uint64_t v46 = 1;
        if (v49) {
          goto LABEL_60;
        }
      }
      if ((v47 & v48) == 0) {
        uint64_t v28 = v44;
      }
LABEL_60:
      id v50 = *(id *)v28;
      if (v50)
      {
        std::string::size_type v42 = v50;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          sub_2417C(ioDataSize, v27);
          if (v62 >= 0) {
            float v51 = ioDataSize;
          }
          else {
            float v51 = *(UInt32 **)ioDataSize;
          }
          float v52 = v59;
          sub_2417C(v59, *(_DWORD *)(*(void *)(a1 + 8) + 800));
          if (v60 < 0) {
            float v52 = (void **)v59[0];
          }
          (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v3 + 128))(theString, v3);
          sub_21B7C(__p, theString[0]);
          if (v58 >= 0) {
            uint64_t v53 = __p;
          }
          else {
            uint64_t v53 = (void **)__p[0];
          }
          uint64_t v54 = *(void *)(a1 + 8);
          uint64_t v55 = "N";
          if (*(unsigned char *)(v54 + 796) && *(unsigned char *)(v54 + 797)) {
            uint64_t v55 = "Y";
          }
          outData[0] = 4.8155e-34;
          *(void *)&outData[1] = "DSPChain.mm";
          __int16 v70 = 1024;
          int v71 = 2427;
          __int16 v72 = 2080;
          *(void *)uint64_t v73 = v51;
          *(_WORD *)&v73[8] = 2080;
          *(void *)&v73[10] = v52;
          __int16 v74 = 2080;
          __int16 v75 = v53;
          __int16 v76 = 2080;
          unsigned int v77 = v55;
          _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: Device category changed from '%s' to '%s' for bluetooth audio device with UID \"%s\", report SPL: %s", (uint8_t *)outData, 0x3Au);
          if (v58 < 0) {
            operator delete(__p[0]);
          }
          sub_72924((uint64_t)theString);
          if (v60 < 0) {
            operator delete(v59[0]);
          }
          goto LABEL_50;
        }
LABEL_77:

LABEL_79:
        return 1;
      }
    }
    std::string::size_type v42 = 0;
    goto LABEL_79;
  }
  CFStringRef v7 = *(id *)sub_32A48(24);
  uint64_t v8 = v7;
  if (v7 && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)(a1 + 24);
    uint64_t v10 = *(void *)(a1 + 32);
    outData[0] = 4.8153e-34;
    *(void *)&outData[1] = "DSPChain.mm";
    __int16 v70 = 1024;
    int v71 = 2351;
    __int16 v72 = 1024;
    *(_DWORD *)uint64_t v73 = v9;
    *(_WORD *)&v73[4] = 2048;
    *(void *)&v73[6] = v10;
    _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : DeviceVolumeChangeHandler called with NULL device? deviceID: %u client: %p", (uint8_t *)outData, 0x22u);
  }

  return 0;
}

void sub_1B5928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_72924((uint64_t)&a10);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1B5998(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  strcpy((char *)v13, "newsbolg");
  BYTE1(v13[2]) = 0;
  HIWORD(v13[2]) = 0;
  uint64_t v3 = sub_99A40(v2);
  *((void *)&v6 + 1) = v4;
  *(void *)&long long v6 = v3;
  uint64_t v5 = v6 >> 32;
  BOOL v7 = (v5 & 0xFF00000000) == 0 || v5 == 0;
  uint64_t v8 = !v7;
  if (!v7)
  {
    int v9 = *(id *)sub_32A48(24);
    uint64_t v10 = v9;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      int v11 = *(_DWORD *)(a1 + 8);
      v13[0] = 136315650;
      *(void *)&v13[1] = "DSPChain.mm";
      __int16 v14 = 1024;
      int v15 = 2361;
      __int16 v16 = 1024;
      int v17 = v11;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry : NOT setting device initiated volume change on AUSPL, device in Software Volume Mode, device: %u", (uint8_t *)v13, 0x18u);
    }
  }
  return v8;
}

BOOL sub_1B5AB8(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(*(void *)a1 + 796);
  if (!*(unsigned char *)(*(void *)a1 + 796))
  {
    uint64_t v3 = *(id *)sub_32A48(24);
    uint64_t v4 = v3;
    if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(a1 + 8);
      uint64_t v6 = *(void *)(a1 + 16);
      int v8 = 136315906;
      int v9 = "DSPChain.mm";
      __int16 v10 = 1024;
      int v11 = 2371;
      __int16 v12 = 1024;
      int v13 = v5;
      __int16 v14 = 2048;
      uint64_t v15 = v6;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PlaybackDosimetry : DevicePropertyChangeHandler called on dspchain that does not have AUSPL? deviceID: %u client: %p", (uint8_t *)&v8, 0x22u);
    }
  }
  return v1 != 0;
}

uint64_t sub_1B5BBC(void *a1, int a2, float a3)
{
  uint64_t v6 = *(id *)sub_32A48(24);
  BOOL v7 = v6;
  if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    BOOL v22 = "DSPChain.mm";
    __int16 v23 = 1024;
    int v24 = 391;
    __int16 v25 = 2048;
    double v26 = a3;
    __int16 v27 = 1024;
    int v28 = a2;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : setting device initiated volume change on AUSPL: %.2fdB device: %u", buf, 0x22u);
  }

  unsigned int v8 = (*(uint64_t (**)(void *, uint64_t, void, void, float))(*a1 + 72))(a1, 1936747629, 0, 0, a3);
  if (v8)
  {
    id v9 = *(id *)sub_32A48(24);
    __int16 v10 = v9;
    if (v9)
    {
      int v11 = v9;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, v8);
        __int16 v12 = v20 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        BOOL v22 = "DSPChain.mm";
        __int16 v23 = 1024;
        int v24 = 394;
        __int16 v25 = 2080;
        double v26 = *(double *)&v12;
        __int16 v27 = 1024;
        int v28 = a2;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry : Failed to set volume change on AUSPL: %s, device: %u", buf, 0x22u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  uint64_t result = sub_3AEEEC();
  unsigned int v14 = *(_DWORD *)(result + 8);
  if (v14)
  {
    uint64_t result = sub_A5E54(a1 + 125, 0);
    if (result)
    {
      LODWORD(__p[0]) = 0;
      (*(void (**)(void *, uint64_t, uint64_t, void **, void))(*a1 + 64))(a1, 1685287015, 1936749423, __p, 0);
      *(float *)long long __p = *(float *)__p + 13.0;
      float v18 = 0.0;
      (*(void (**)(void *, uint64_t, uint64_t, float *, void))(*a1 + 64))(a1, 1685287015, 1819176045, &v18, 0);
      float v15 = (float)((float)v14 - *(float *)__p) - v18;
      __int16 v16 = *(id *)sub_32A48(20);
      int v17 = v16;
      if (v16)
      {
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          BOOL v22 = "DSPChain.mm";
          __int16 v23 = 1024;
          int v24 = 409;
          __int16 v25 = 2048;
          double v26 = v15;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [VolumeLimit] Setting loudness target to : %f dB", buf, 0x1Cu);
        }
      }

      return (*(uint64_t (**)(void *, uint64_t, uint64_t, void, float))(*a1 + 72))(a1, 1685287015, 1818977907, 0, v15);
    }
  }
  return result;
}

void sub_1B5F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B5F7C(uint64_t a1, int *a2)
{
  if (!a1) {
    return 560227702;
  }
  uint64_t v7 = 0x676C6F6275736476;
  int v8 = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v7)) {
    return 561017456;
  }
  int v6 = 1701868910;
  int v5 = 4;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, int *))(*(void *)a1 + 40))(a1, &v7, 0, 0, &v5, &v6);
  uint64_t result = 0;
  *a2 = v6;
  return result;
}

__n128 sub_1B6068(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_6264A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_1B6098(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_6264A8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void sub_1B60EC()
{
}

float sub_1B6104(CFArrayRef *a1, CFArrayRef *a2, float a3)
{
  int v6 = *(id *)sub_32A48(24);
  uint64_t v7 = v6;
  if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(float *)AudioObjectPropertyAddress buf = 4.8152e-34;
    __int16 v23 = "DSPChain.mm";
    __int16 v24 = 1024;
    int v25 = 2806;
    __int16 v26 = 2048;
    double v27 = a3;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: interpolating output volume %.2f", buf, 0x1Cu);
  }

  float v21 = 0.0;
  if (*a2) {
    unsigned int Count = CFArrayGetCount(*a2);
  }
  else {
    unsigned int Count = 0;
  }
  float v9 = -1.0;
  if (*a1)
  {
    unsigned int v10 = CFArrayGetCount(*a1);
    if (Count >= 2)
    {
      unsigned int v11 = v10;
      if (v10 >= 2)
      {
        unsigned int v12 = 0;
        while (1)
        {
          *(float *)AudioObjectPropertyAddress buf = 0.0;
          sub_1D1BB4(a2, v12, buf);
          if (*(float *)buf > a3) {
            break;
          }
          if (Count == ++v12)
          {
            unsigned int v12 = Count;
            break;
          }
        }
        int v13 = *(id *)sub_32A48(24);
        unsigned int v14 = v13;
        if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(float *)AudioObjectPropertyAddress buf = 4.8152e-34;
          __int16 v23 = "DSPChain.mm";
          __int16 v24 = 1024;
          int v25 = 2827;
          __int16 v26 = 1024;
          LODWORD(v27) = v12;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PlaybackDosimetry: target index: %u", buf, 0x18u);
        }

        if (v12 >= Count)
        {
          unsigned int v15 = v11 - 1;
          __int16 v16 = a1;
        }
        else
        {
          if (v12)
          {
            *(float *)AudioObjectPropertyAddress buf = -1.0;
            float v19 = -1.0;
            float v20 = -1.0;
            float v18 = -1.0;
            sub_1D1BB4(a2, v12, buf);
            sub_1D1BB4(a2, v12 - 1, &v20);
            sub_1D1BB4(a1, v12, &v19);
            sub_1D1BB4(a1, v12 - 1, &v18);
            return v19
                 + (float)((float)(v18 - v19) * (float)((float)(a3 - *(float *)buf) / (float)(v20 - *(float *)buf)));
          }
          __int16 v16 = a1;
          unsigned int v15 = 0;
        }
        sub_1D1BB4(v16, v15, &v21);
        return v21;
      }
    }
  }
  return v9;
}

uint64_t sub_1B63A0(uint64_t a1, int a2, int a3)
{
  uint64_t v12 = a1 + 48;
  char v13 = 1;
  sub_39ECC(a1 + 48);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24))
  {
LABEL_7:
    uint64_t v9 = 0;
  }
  else
  {
    int v6 = -1;
    unsigned int v7 = 1;
    while (1)
    {
      uint64_t v8 = sub_1385C(a1, v7 - 1);
      uint64_t v9 = v8;
      if (v8)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 152))(v8) == a2 && ++v6 == a3) {
          break;
        }
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3) <= v7++) {
        goto LABEL_7;
      }
    }
  }
  sub_3A3E8((uint64_t)&v12);
  return v9;
}

void sub_1B6494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1B64AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1B64DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1B651C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1B654C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1B6588(uint64_t **a1, const __CFString *a2, unsigned int a3)
{
  sub_20C54((uint64_t)v6, a2);
  std::to_string(&__p, a3);
  sub_1B6630(a1, v6, (uint64_t)v6, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_1B65FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B6630(uint64_t **a1, void **a2, uint64_t a3, uint64_t a4)
{
  char v7 = (uint64_t **)sub_15DF8((uint64_t)a1, &v12, a2);
  if (!*v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = operator new(0x50uLL);
    v10[1] = a1 + 1;
    v9[2] = *(_OWORD *)a3;
    *((void *)v9 + 6) = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(_OWORD *)((char *)v9 + 56) = *(_OWORD *)a4;
    *((void *)v9 + 9) = *(void *)(a4 + 16);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = 0;
    char v11 = 1;
    sub_46CA8(a1, v12, v8, (uint64_t *)v9);
    v10[0] = 0;
    sub_6E930((uint64_t)v10);
  }
}

void sub_1B66F0(unint64_t a1)
{
  sub_1B6728(a1);

  operator delete();
}

unint64_t sub_1B6728(unint64_t a1)
{
  *(void *)a1 = &off_625FB0;
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 360) + 16));
  if (v2) {
    sub_A7F4C(*(void *)(a1 + 360));
  }
  if (*(unsigned char *)(a1 + 796))
  {
    uint64_t v3 = *(void *)(a1 + 824);
    uint64_t v4 = *(void *)(a1 + 832);
    while (v3 != v4)
    {
      uint64_t v50 = *(void *)(v3 + 4);
      int v51 = *(_DWORD *)(v3 + 12);
      uint64_t v5 = sub_F820C();
      int v6 = *(_DWORD *)v3;
      char v7 = operator new(0x20uLL);
      uint64_t v8 = v50;
      *char v7 = off_6264F0;
      v7[1] = v8;
      *((_DWORD *)v7 + 4) = v51;
      v7[3] = a1;
      char v49 = v7;
      sub_F8498(v5, v6, (uint64_t)&v47);
      sub_87864(&v47);
      v3 += 16;
    }
    uint64_t v9 = *(void *)(a1 + 736);
    if (qword_64EE90 != -1) {
      dispatch_once(&qword_64EE90, &stru_626078);
    }
    if (off_64EEA0) {
      off_64EEA0(v9);
    }
    sub_463E0(*(void **)(a1 + 856));
    *(void *)(a1 + 848) = a1 + 856;
    *(void *)(a1 + 864) = 0;
    *(void *)(a1 + 856) = 0;
  }
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 56))(a1, 1685287015, 1668572518, 0))
  {
    sub_73A68();
    std::recursive_mutex::lock(&stru_649910);
    unint64_t v10 = *((void *)&xmmword_649950 + 1);
    if (*((void *)&xmmword_649950 + 1))
    {
      unint64_t v11 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
      unint64_t v12 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v11 >> 47) ^ v11);
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_649950 + 8));
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        unint64_t v15 = v13;
        if (v13 >= *((void *)&xmmword_649950 + 1)) {
          unint64_t v15 = v13 % *((void *)&xmmword_649950 + 1);
        }
      }
      else
      {
        unint64_t v15 = v13 & (*((void *)&xmmword_649950 + 1) - 1);
      }
      __int16 v16 = *(uint64_t ***)(xmmword_649950 + 8 * v15);
      if (v16)
      {
        int v17 = *v16;
        if (*v16)
        {
          uint64_t v18 = *((void *)&xmmword_649950 + 1) - 1;
          do
          {
            unint64_t v19 = v17[1];
            if (v19 == v13)
            {
              if (v17[2] == a1)
              {
                if (v14.u32[0] > 1uLL)
                {
                  if (v13 >= *((void *)&xmmword_649950 + 1)) {
                    v13 %= *((void *)&xmmword_649950 + 1);
                  }
                }
                else
                {
                  v13 &= v18;
                }
                float v20 = *(uint64_t **)(xmmword_649950 + 8 * v13);
                do
                {
                  float v21 = v20;
                  float v20 = (uint64_t *)*v20;
                }
                while (v20 != v17);
                if (v21 == &qword_649960) {
                  goto LABEL_48;
                }
                unint64_t v22 = v21[1];
                if (v14.u32[0] > 1uLL)
                {
                  if (v22 >= *((void *)&xmmword_649950 + 1)) {
                    v22 %= *((void *)&xmmword_649950 + 1);
                  }
                }
                else
                {
                  v22 &= v18;
                }
                if (v22 != v13)
                {
LABEL_48:
                  if (!*v17) {
                    goto LABEL_49;
                  }
                  unint64_t v23 = *(void *)(*v17 + 8);
                  if (v14.u32[0] > 1uLL)
                  {
                    if (v23 >= *((void *)&xmmword_649950 + 1)) {
                      v23 %= *((void *)&xmmword_649950 + 1);
                    }
                  }
                  else
                  {
                    v23 &= v18;
                  }
                  if (v23 != v13) {
LABEL_49:
                  }
                    *(void *)(xmmword_649950 + 8 * v13) = 0;
                }
                uint64_t v24 = *v17;
                if (*v17)
                {
                  unint64_t v25 = *(void *)(v24 + 8);
                  if (v14.u32[0] > 1uLL)
                  {
                    if (v25 >= v10) {
                      v25 %= v10;
                    }
                  }
                  else
                  {
                    v25 &= v18;
                  }
                  if (v25 != v13)
                  {
                    *(void *)(xmmword_649950 + 8 * v25) = v21;
                    uint64_t v24 = *v17;
                  }
                }
                uint64_t *v21 = v24;
                *int v17 = 0;
                --qword_649968;
                sub_73B3C(1, v17);
                break;
              }
            }
            else
            {
              if (v14.u32[0] > 1uLL)
              {
                if (v19 >= *((void *)&xmmword_649950 + 1)) {
                  v19 %= *((void *)&xmmword_649950 + 1);
                }
              }
              else
              {
                v19 &= v18;
              }
              if (v19 != v15) {
                break;
              }
            }
            int v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
      }
    }
    std::recursive_mutex::unlock(&stru_649910);
  }
  *(unsigned char *)(a1 + 448) = 0;
  uint64_t v47 = (uint64_t *)(a1 + 48);
  char v48 = 1;
  sub_F648(a1 + 48);
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v28 = *(void *)(a1 + 32);
  __int16 v26 = (uint64_t *)(a1 + 24);
  unint64_t v29 = (v28 - v27) / 24;
  if (v28 != v27)
  {
    if (v29 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = (v28 - v27) / 24;
    }
    uint64_t v31 = 8;
    do
    {
      uint64_t v32 = *v26;
      if (*(void *)(*v26 + v31))
      {
        sub_26F17C();
        uint64_t v33 = (*(uint64_t (**)(void))(**(void **)(v32 + v31) + 144))(*(void *)(v32 + v31));
        (*(void (**)(uint64_t *, uint64_t))(qword_64E880 + 104))(&qword_64E880, v33);
      }
      v31 += 24;
      --v30;
    }
    while (v30);
  }
  sub_1ABBD8((uint64_t *)(a1 + 400));
  sub_1ABBD8((uint64_t *)(a1 + 424));
  sub_1ABBD8((uint64_t *)(a1 + 24));
  sub_C7D4(&v47);
  if (*(void *)(a1 + 872) && v28 != v27)
  {
    LODWORD(v34) = 0;
    do
    {
      sub_32E250(*(void *)(a1 + 872), v34);
      unint64_t v34 = (v34 + 1);
    }
    while (v29 > v34);
  }
  uint64_t v47 = (uint64_t *)(a1 + 696);
  sub_1ABEB0(a1, &v47);
  for (uint64_t i = (uint64_t *)qword_64CA08; i != &qword_64CA00; uint64_t i = (uint64_t *)i[1])
  {
    if (i[4] == a1) {
      i[4] = 0;
    }
  }
  char v36 = *(const void **)(a1 + 1128);
  if (v36) {
    CFRelease(v36);
  }
  sub_1B6E20(*(void **)(a1 + 1112));
  uint64_t v47 = (uint64_t *)(a1 + 1080);
  sub_1B6E74((void ***)&v47);
  uint64_t v37 = *(const void **)(a1 + 1072);
  if (v37) {
    CFRelease(v37);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(a1 + 1064);
  if (v38) {
    sub_4636C(v38);
  }
  uint64_t v39 = *(std::__shared_weak_count **)(a1 + 1048);
  if (v39) {
    sub_4636C(v39);
  }
  sub_6C954(a1 + 1000);
  uint64_t v47 = (uint64_t *)(a1 + 976);
  sub_1B6EF8((void ***)&v47);
  sub_1216C((unsigned int **)(a1 + 960));
  sub_1216C((unsigned int **)(a1 + 944));
  std::mutex::~mutex((std::mutex *)(a1 + 880));
  uint64_t v40 = *(void *)(a1 + 872);
  *(void *)(a1 + 872) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  sub_463E0(*(void **)(a1 + 856));
  id v41 = *(void **)(a1 + 824);
  if (v41)
  {
    *(void *)(a1 + 832) = v41;
    operator delete(v41);
  }
  std::string::size_type v42 = *(std::__shared_weak_count **)(a1 + 816);
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  sub_8108((uint64_t *)(a1 + 768));
  if (*(char *)(a1 + 767) < 0) {
    operator delete(*(void **)(a1 + 744));
  }
  if (*(char *)(a1 + 735) < 0) {
    operator delete(*(void **)(a1 + 712));
  }
  sub_463E0(*(void **)(a1 + 696));
  sub_55834(a1 + 592);
  sub_55834(a1 + 504);
  uint64_t v47 = (uint64_t *)(a1 + 424);
  sub_1B6F4C((void ***)&v47);
  uint64_t v47 = (uint64_t *)(a1 + 400);
  sub_1B6F4C((void ***)&v47);
  long long v43 = *(std::__shared_weak_count **)(a1 + 384);
  if (v43) {
    sub_4636C(v43);
  }
  uint64_t v44 = *(std::__shared_weak_count **)(a1 + 368);
  if (v44) {
    sub_4636C(v44);
  }
  uint64_t v47 = (uint64_t *)(a1 + 336);
  sub_638B4((void ***)&v47);
  sub_1B6FA0(a1 + 48);
  uint64_t v47 = (uint64_t *)(a1 + 24);
  sub_1B6F4C((void ***)&v47);
  char v45 = *(std::__shared_weak_count **)(a1 + 16);
  if (v45) {
    std::__shared_weak_count::__release_weak(v45);
  }
  return a1;
}

void sub_1B6DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_1B6E20(void *a1)
{
  if (a1)
  {
    sub_1B6E20(*a1);
    sub_1B6E20(a1[1]);
    sub_8C710((uint64_t)(a1 + 6));
    operator delete(a1);
  }
}

void sub_1B6E74(void ***a1)
{
  int v1 = *a1;
  unsigned __int8 v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        sub_1B7014(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B6EF8(void ***a1)
{
  unsigned __int8 v2 = (unsigned int ***)*a1;
  if (*v2)
  {
    sub_1AA65C((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1B6F4C(void ***a1)
{
  unsigned __int8 v2 = *a1;
  if (*v2)
  {
    sub_1ABBD8((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1B6FA0(uint64_t a1)
{
  unsigned __int8 v2 = *(void **)(a1 + 264);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unsigned __int8 v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 168));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));

  std::mutex::~mutex((std::mutex *)a1);
}

uint64_t sub_1B7014(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }

  return sub_8C710(a1 + 16);
}

uint64_t sub_1B7058(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v2 + 344))(v2, &v5, v3);
  return 1;
}

uint64_t sub_1B70CC(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_6264F0;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 24) = *(void *)(result + 24);
  return result;
}

void *sub_1B7104(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_6264F0;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  result[3] = *(void *)(a1 + 24);
  return result;
}

void sub_1B715C()
{
}

void sub_1B7178(void *a1, uint64_t a2, signed int a3)
{
  *a1 = 0;
  a1[1] = 0;
  if (a3 > 1684434035)
  {
    if (a3 == 1936749172)
    {
      int v15 = sub_16414C();
      __int16 v16 = *(id *)sub_32A48(24);
      int v17 = v16;
      if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = "speaker protection";
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if (v15) {
          uint64_t v18 = "default";
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 460;
        __int16 v22 = 2080;
        unint64_t v23 = (void *)v18;
        _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating %s DSP chain.", buf, 0x1Cu);
      }

      if (v15) {
        operator new();
      }
      operator new();
    }
    if (a3 == 1684434036)
    {
      uint64_t v9 = *(id *)sub_32A48(24);
      unint64_t v10 = v9;
      if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 453;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating default DSP chain.", buf, 0x12u);
      }

      operator new();
    }
  }
  else
  {
    if (a3 == 1668049011) {
      operator new();
    }
    if (a3 == 1668051824)
    {
      int v4 = sub_16414C();
      uint64_t v5 = *(id *)sub_32A48(24);
      int v6 = v5;
      if (v5 && os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      {
        char v7 = "closed loop speaker protection";
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if (v4) {
          char v7 = "default";
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 474;
        __int16 v22 = 2080;
        unint64_t v23 = (void *)v7;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating %s DSP chain.", buf, 0x1Cu);
      }

      uint64_t v8 = (void *)sub_F820C();
      *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0, "Speaker", 0x600u);
      buf[8] = 1;
      sub_F832C(v8, (CFStringRef *)buf);
      sub_72924((uint64_t)buf);
      if (v4) {
        operator new();
      }
      operator new();
    }
  }
  id v11 = *(id *)sub_32A48(24);
  unint64_t v12 = v11;
  if (v11)
  {
    unint64_t v13 = v11;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, a3);
      uint8x8_t v14 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 493;
      __int16 v22 = 2080;
      unint64_t v23 = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unknown DSP chain type '%s'. Creating default chain.", buf, 0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  operator new();
}

void sub_1B7AC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v16);
  int v17 = *(std::__shared_weak_count **)(v15 + 1144);
  if (v17) {
    sub_4636C(v17);
  }
  sub_1B6728(v15);
  operator delete();
}

void sub_1B7C5C(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &off_625FB0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_89EC8(a1 + 48);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  sub_1B8520((void *)(a1 + 360));
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_WORD *)(a1 + 448) = 256;
  long long v4 = xmmword_658CD8;
  long long v5 = unk_658CE8;
  *(_OWORD *)(a1 + 456) = xmmword_658CD8;
  *(_OWORD *)(a1 + 472) = v5;
  uint64_t v6 = qword_658CF8;
  *(void *)(a1 + 488) = qword_658CF8;
  *(_DWORD *)(a1 + 496) = 4096;
  *(void *)(a1 + 536) = v6;
  *(_OWORD *)(a1 + 504) = v4;
  *(_OWORD *)(a1 + 520) = v5;
  long long v7 = unk_658CE8;
  *(_OWORD *)(a1 + 544) = xmmword_658CD8;
  *(_OWORD *)(a1 + 560) = v7;
  *(void *)(a1 + 576) = qword_658CF8;
  *(void *)(a1 + 584) = 0;
  sub_5E28(a1 + 504, (AudioStreamBasicDescription *)(a1 + 504), (AudioStreamBasicDescription *)(a1 + 544));
  long long v8 = xmmword_658CD8;
  long long v9 = unk_658CE8;
  *(_OWORD *)(a1 + 592) = xmmword_658CD8;
  *(_OWORD *)(a1 + 608) = v9;
  uint64_t v10 = qword_658CF8;
  *(void *)(a1 + 624) = qword_658CF8;
  *(_OWORD *)(a1 + 632) = v8;
  *(_OWORD *)(a1 + 648) = v9;
  *(void *)(a1 + 664) = v10;
  *(void *)(a1 + 672) = 0;
  sub_5E28(a1 + 592, (AudioStreamBasicDescription *)(a1 + 592), (AudioStreamBasicDescription *)(a1 + 632));
  *(_WORD *)(a1 + 682) = 1;
  *(_WORD *)(a1 + 680) = 0;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 688) = a1 + 696;
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 712), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    *(void *)(a1 + 728) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 712) = v11;
  }
  *(void *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(void *)(a1 + 768) = a1 + 768;
  *(void *)(a1 + 776) = a1 + 768;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 790) = 0;
  *(unsigned char *)(a1 + 798) = 1;
  *(_DWORD *)(a1 + 800) = 1701868910;
  *(_OWORD *)(a1 + 856) = 0u;
  *(void *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(void *)(a1 + 848) = a1 + 856;
  operator new();
}

void sub_1B800C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, void **a14)
{
  sub_463E0(*a11);
  sub_55834(v16);
  sub_55834(v15);
  a14 = (void **)(v14 + 424);
  sub_1B6F4C(&a14);
  a14 = (void **)(v14 + 400);
  sub_1B6F4C(&a14);
  uint64_t v18 = *(std::__shared_weak_count **)(v14 + 384);
  if (v18) {
    sub_4636C(v18);
  }
  unint64_t v19 = *(std::__shared_weak_count **)(v14 + 368);
  if (v19) {
    sub_4636C(v19);
  }
  a14 = (void **)(v14 + 336);
  sub_638B4(&a14);
  sub_1B6FA0(a12);
  a14 = a13;
  sub_1B6F4C(&a14);
  char v20 = *(std::__shared_weak_count **)(v14 + 16);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(a1);
}

void sub_1B8208()
{
}

void sub_1B8210()
{
}

void sub_1B8328(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B8364(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1B8394(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1B83D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1B8404(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1B8444(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1B8474(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1B84B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1B84E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1B8520(void *a1)
{
  uint64_t v2 = (char *)operator new(0xC0uLL);
  *(_OWORD *)(v2 + 8) = 0u;
  *(void *)uint64_t v2 = off_6262C8;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)v2 + 6) = 0;
  *(_OWORD *)(v2 + 88) = 0u;
  *((void *)v2 + 10) = v2 + 88;
  v2[40] = 0;
  *(_OWORD *)(v2 + 56) = 0u;
  *((_DWORD *)v2 + 18) = 0;
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)(v2 + 104));
  *((void *)v2 + 21) = 0;
  *((void *)v2 + 22) = 0;
  *((void *)v2 + 23) = 0;
  sub_21C8C(__p, "measuredWattsParameterID");
  uint64_t v6 = __p;
  *((_DWORD *)sub_231DC((uint64_t **)v2 + 10, __p, (_OWORD **)&v6) + 14) = -1;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  sub_21C8C(__p, "modelledWattsParameterID");
  uint64_t v6 = __p;
  *((_DWORD *)sub_231DC((uint64_t **)v2 + 10, __p, (_OWORD **)&v6) + 14) = -1;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v2 + 24;
  a1[1] = v2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3)
  {
    if (v3->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 2, 1uLL, memory_order_relaxed);
    *((void *)v2 + 3) = v2 + 24;
    *((void *)v2 + 4) = v2;
    std::__shared_weak_count::__release_weak(v3);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v2 + 2, 1uLL, memory_order_relaxed);
    *((void *)v2 + 3) = v2 + 24;
    *((void *)v2 + 4) = v2;
  }

  sub_4636C((std::__shared_weak_count *)v2);
}

void sub_1B86DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_A7940((void ***)&__p);
  std::recursive_mutex::~recursive_mutex(v15);
  sub_8F90(*(char **)(v14 + 88));
  uint64_t v18 = *(std::__shared_weak_count **)(v14 + 64);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = *v16;
  *uint64_t v16 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  char v20 = *(std::__shared_weak_count **)(v14 + 32);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v14);
  operator delete(v21);
  _Unwind_Resume(a1);
}

void sub_1B8784(uint64_t a1)
{
  char v5 = (void **)(a1 + 168);
  sub_A7940(&v5);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 104));
  sub_8F90(*(char **)(a1 + 88));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1B8830(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_6262C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1B8884(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_6262C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1B88A4(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a1 + 48;
  char v13 = 1;
  sub_F648(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = 0;
  unint64_t v6 = v4 / 24;
  uint64_t v7 = v6 <= 1 ? 1 : v6;
  uint64_t v8 = 8;
  do
  {
    uint64_t v9 = *(void *)(a1 + 24);
    if ((*(unsigned int (**)(void))(**(void **)(v9 + v8) + 208))(*(void *)(v9 + v8)))
    {
      unsigned int v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v9 + v8) + 176))(*(void *)(v9 + v8), a2);
      if (v10) {
        uint64_t v5 = v10;
      }
      else {
        uint64_t v5 = v5;
      }
    }
    v8 += 24;
    --v7;
  }
  while (v7);
  if (!v5)
  {
LABEL_12:
    uint64_t v5 = 0;
    *(unsigned char *)(a1 + 449) = a2;
  }
  sub_C7D4(&v12);
  return v5;
}

void sub_1B89B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

BOOL sub_1B89C8(uint64_t a1)
{
  uint64_t v12 = a1 + 48;
  char v13 = 1;
  sub_39ECC(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 == v3)
  {
    BOOL v6 = 0;
  }
  else
  {
    uint64_t v4 = v2 + 24;
    do
    {
      char v14 = 0;
      int v5 = (*(uint64_t (**)(void, uint64_t, void, char *))(**(void **)(v4 - 16) + 248))(*(void *)(v4 - 16), 1, 0, &v14);
      if (v5)
      {
        uint64_t v9 = *(id *)sub_32A48(13);
        unsigned int v10 = v9;
        if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v16 = "DSPChain.mm";
          __int16 v17 = 1024;
          int v18 = 1545;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (stat) [error stat is an error]: \"Unexpected error from HasStaticChannelCountForBus\"", buf, 0x12u);
        }

        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &off_6414D8;
        exception[2] = v5;
      }
      BOOL v6 = v14 != 0;
      if (v14) {
        BOOL v7 = 1;
      }
      else {
        BOOL v7 = v4 == v3;
      }
      v4 += 24;
    }
    while (!v7);
  }
  sub_3A3E8((uint64_t)&v12);
  return v6;
}

void sub_1B8B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1B8B94(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 496) == 4096) {
    return;
  }
  *(void *)unsigned int v10 = a1 + 48;
  v10[8] = 1;
  sub_F648(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32) - *(void *)(a1 + 24);
  if (!v2)
  {
    sub_C7D4(v10);
LABEL_15:
    *(_DWORD *)(a1 + 496) = 4096;
    return;
  }
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (v2 >> 3);
  unint64_t v4 = 1;
  uint64_t v5 = 8;
  do
  {
    int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 24) + v5) + 136))(*(void *)(*(void *)(a1 + 24) + v5), 4096);
    if (v6) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v4 >= v3;
    }
    ++v4;
    v5 += 24;
  }
  while (!v7);
  sub_C7D4(v10);
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v8 = *(id *)sub_32A48(13);
  uint64_t v9 = v8;
  if (v8)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int v10 = 136315394;
      *(void *)&v10[4] = "DSPChain.mm";
      __int16 v11 = 1024;
      int v12 = 1581;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d FailIf failed, goto Exit", v10, 0x12u);
    }
  }
}

void sub_1B8D1C(_Unwind_Exception *exception_object)
{
}

void sub_1B8D38(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    uint64_t v16 = sub_32A48(13);
    __int16 v17 = sub_7D5E8(1, *(void **)v16, *(void *)(v16 + 8));
    int v18 = v17;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "DSPChain.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1996;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 64));
  if ((v3 & 1) != 0 && (*(unsigned char *)(a2 + 56) & 2) != 0)
  {
    unint64_t v4 = __udivti3();
    if (*(void *)(a1 + 88) <= v4)
    {
      unint64_t v5 = v4;
      int v6 = *(std::__shared_weak_count **)(a1 + 80);
      if (v6)
      {
        BOOL v7 = std::__shared_weak_count::lock(v6);
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = *(void *)(a1 + 72);
          if (v9)
          {
            uint64_t v21 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, char *, void))(*(void *)v9 + 64))(v9, 1685287015, 1987340658, (char *)&v21 + 4, 0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(*(void *)v9 + 64))(v9, 1685287015, 1987339123, &v21, 0);
            uint64_t v10 = *(void *)(a1 + 16);
            __int16 v11 = *(std::__shared_weak_count **)(a1 + 32);
            if (v11)
            {
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              sub_4636C(v11);
              *(void *)AudioObjectPropertyAddress buf = v10;
              *(void *)&buf[8] = v11;
              atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            else
            {
              *(void *)AudioObjectPropertyAddress buf = *(void *)(a1 + 16);
              *(void *)&buf[8] = 0;
            }
            int v13 = v21;
            int v12 = HIDWORD(v21);
            sub_54694();
            uint64_t v14 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 56, 8);
            *(void *)(v14 + 8) = 0;
            *(_DWORD *)(v14 + 16) = 0;
            *(_OWORD *)(v14 + 24) = *(_OWORD *)buf;
            *(void *)AudioObjectPropertyAddress buf = 0;
            *(void *)&buf[8] = 0;
            *(_DWORD *)(v14 + 40) = v12;
            *(_DWORD *)(v14 + 44) = v13;
            *(void *)uint64_t v14 = off_6260D0;
            caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v14);
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
            }
            unsigned __int8 v15 = atomic_load((unsigned __int8 *)(a1 + 65));
            if ((v15 & 1) != 0 && *(void *)(a1 + 96) <= v5)
            {
              int v20 = 0;
              sub_1B937C(v9, (uint64_t)&v20);
              *(void *)AudioObjectPropertyAddress buf = v10;
              *(void *)&buf[8] = v11;
              if (v11) {
                atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              *(_DWORD *)&buf[16] = v20;
              sub_1B96A8((uint64_t)buf);
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
              }
              *(void *)(a1 + 96) = v5 + 2000000000;
            }
            if (v11) {
              std::__shared_weak_count::__release_weak(v11);
            }
          }
          sub_4636C(v8);
        }
      }
      *(void *)(a1 + 88) = v5 + 50000000;
    }
  }
}

void sub_1B9098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint8_t buf, std::__shared_weak_count *a12, __int16 a13, __int16 a14, uint64_t a15, __int16 a16, uint64_t a17, int a18)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  sub_4636C(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_1B937C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 64))(a1, 1685287015, 1685218159, a2, 0);
}

void sub_1B9410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    unsigned __int8 v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = sub_32A48(13);
    __int16 v17 = sub_7D5E8(1, *(void **)v16, *(void *)(v16 + 8));
    if (v17)
    {
      int v18 = v17;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        int v19 = v15[2];
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 429;
        WORD1(a10) = 1024;
        DWORD1(a10) = v19;
        WORD4(a10) = 2080;
        *(void *)((char *)&a10 + 10) = "";
        a12 = 1024;
        a13 = 280;
        int v20 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v21 = v18;
        uint32_t v22 = 40;
LABEL_13:
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&a9, v22);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    unint64_t v23 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v24 = v23;
      uint64_t v25 = sub_32A48(13);
      __int16 v26 = sub_7D5E8(1, *(void **)v25, *(void *)(v25 + 8));
      if (v26)
      {
        int v18 = v26;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v24 + 16))(v24);
          LODWORD(a9) = 136316162;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 430;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = v27;
          WORD6(a10) = 2080;
          *(void *)((char *)&a10 + 14) = "";
          HIWORD(a13) = 1024;
          a14 = 280;
          int v20 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v21 = v18;
          uint32_t v22 = 44;
          goto LABEL_13;
        }
LABEL_14:

LABEL_16:
        __cxa_end_catch();
        JUMPOUT(0x1B93E0);
      }
    }
    else
    {
      uint64_t v28 = sub_32A48(13);
      unint64_t v29 = sub_7D5E8(1, *(void **)v28, *(void *)(v28 + 8));
      if (v29)
      {
        int v18 = v29;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          LODWORD(a9) = 136315906;
          *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
          WORD6(a9) = 1024;
          *(_DWORD *)((char *)&a9 + 14) = 431;
          WORD1(a10) = 2080;
          *(void *)((char *)&a10 + 4) = "";
          WORD6(a10) = 1024;
          *(_DWORD *)((char *)&a10 + 14) = 280;
          int v20 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          uint64_t v21 = v18;
          uint32_t v22 = 34;
          goto LABEL_13;
        }
        goto LABEL_14;
      }
    }
  }
  int v18 = 0;
  goto LABEL_16;
}

uint64_t sub_1B96A8(uint64_t a1)
{
  sub_54694();
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 56, 8);
  *(void *)(v2 + 8) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(v2 + 40) = *(_DWORD *)(a1 + 16);
  *(void *)uint64_t v2 = off_626120;

  return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v2);
}

caulk::concurrent::message **sub_1B9758(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_1B97A0((uint64_t)a1);
  return sub_1B9D28(&v2);
}

void sub_1B978C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1B9D28((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void sub_1B97A0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    float v3 = *(float *)(a1 + 40);
    unint64_t v4 = std::__shared_weak_count::lock(v1);
    if (v4)
    {
      unint64_t v5 = v4;
      if (v2)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v2 + 65));
        if (v6)
        {
          float v7 = *(float *)(v2 + 120);
          float v8 = fabsf(v3);
          float v9 = fabsf(v7);
          if (v8 < v9) {
            float v8 = v9;
          }
          if (v8 >= 1.0) {
            float v10 = v8 * 0.00000011921;
          }
          else {
            float v10 = 0.00000011921;
          }
          if (vabds_f32(v3, v7) > v10)
          {
            if (v3 >= 11.0)
            {
              __int16 v11 = *(id *)sub_32A48(41);
              int v12 = v11;
              if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                int v18 = "DSPChain.mm";
                __int16 v19 = 1024;
                int v20 = 346;
                __int16 v21 = 2048;
                uint64_t v22 = 0x4026000000000000;
                __int16 v23 = 2048;
                double v24 = v3;
                _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPGraphParameterUpdater::UpdateAULoudnessNormalizerParameters() - auln output gain above threshold %.2fdB. Gain is %.2f.", buf, 0x26u);
              }
            }
            *(float *)&CFDictionaryRef valuePtr = v3;
            CFNumberRef cf = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
            if (!cf)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
            }
            sub_22210((CFStringRef *)&v25, "DRCOutputGain");
            CFRetain(cf);
            CFTypeRef v26 = cf;
            v15[0] = &v25;
            v15[1] = 1;
            CFDictionaryRef valuePtr = sub_4D3D8((uint64_t)v15);
            sub_F2254((uint64_t)valuePtr, 1073741838, 18);
            if (valuePtr) {
              CFRelease(valuePtr);
            }
            if (v26) {
              CFRelease(v26);
            }
            if (v25) {
              CFRelease(v25);
            }
            CFRelease(cf);
            *(float *)(v2 + 120) = v3;
          }
        }
      }
      sub_4636C(v5);
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1B9A00(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v19);
  sub_4636C(v18);
  if (a2 == 3)
  {
    uint64_t v22 = __cxa_begin_catch(a1);
    uint64_t v23 = sub_32A48(13);
    double v24 = sub_7D5E8(1, *(void **)v23, *(void *)(v23 + 8));
    CFTypeRef v25 = v24;
    if (v24)
    {
      CFTypeRef v25 = v24;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        int v26 = v22[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a14) = 1024;
        DWORD1(a14) = v26;
        WORD4(a14) = 2080;
        *(void *)((char *)&a14 + 10) = "";
        a16 = 1024;
        a17 = 288;
        uint64_t v27 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v28 = v25;
        uint32_t v29 = 40;
LABEL_13:
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, v27, (uint8_t *)&buf, v29);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v30 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v31 = v30;
      uint64_t v32 = sub_32A48(13);
      uint64_t v33 = sub_7D5E8(1, *(void **)v32, *(void *)(v32 + 8));
      CFTypeRef v25 = v33;
      if (v33)
      {
        CFTypeRef v25 = v33;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = (*(uint64_t (**)(void *))(*(void *)v31 + 16))(v31);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = v34;
          WORD6(a14) = 2080;
          *(void *)((char *)&a14 + 14) = "";
          HIWORD(a17) = 1024;
          a18 = 288;
          uint64_t v27 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v28 = v25;
          uint32_t v29 = 44;
          goto LABEL_13;
        }
LABEL_14:
      }
    }
    else
    {
      uint64_t v35 = sub_32A48(13);
      char v36 = sub_7D5E8(1, *(void **)v35, *(void *)(v35 + 8));
      CFTypeRef v25 = v36;
      if (v36)
      {
        CFTypeRef v25 = v36;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a14) = 2080;
          *(void *)((char *)&a14 + 4) = "";
          WORD6(a14) = 1024;
          *(_DWORD *)((char *)&a14 + 14) = 288;
          uint64_t v27 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          uint64_t v28 = v25;
          uint32_t v29 = 34;
          goto LABEL_13;
        }
        goto LABEL_14;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1B9984);
}

caulk::concurrent::message **sub_1B9D28(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = off_626148;
  float v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24))(caulk::alloc::realtime_safe_resource, v2, 56, 8);
  return a1;
}

void sub_1B9DC0(caulk::concurrent::message *this)
{
  *(void *)this = off_626148;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_1B9E30(caulk::concurrent::message *this)
{
  *(void *)this = off_626148;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void sub_1B9E8C(caulk::concurrent::message *this)
{
  *(void *)this = off_626148;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_1B9EFC(caulk::concurrent::message *this)
{
  *(void *)this = off_626148;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

caulk::concurrent::message **sub_1B9F58(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_1B9FA0(a1);
  return sub_1BA52C(&v2);
}

void sub_1B9F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1BA52C((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void sub_1B9FA0(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1)
  {
    uint64_t v2 = a1[3];
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v19 = a1[5];
    float v3 = std::__shared_weak_count::lock(v1);
    if (v3)
    {
      unint64_t v4 = v3;
      if (v2)
      {
        unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 64));
        if (v5)
        {
          if (!*(unsigned char *)(v2 + 116) || *(float *)(v2 + 112) != *(float *)&v19 || !*(unsigned char *)(v2 + 108)) {
            goto LABEL_14;
          }
          float v6 = *(float *)(v2 + 104);
          float v7 = fabsf(*((float *)&v19 + 1));
          float v8 = fabsf(v6);
          if (v7 < v8) {
            float v7 = v8;
          }
          float v9 = v7 >= 1.0 ? v7 * 0.00000011921 : 0.00000011921;
          if (vabds_f32(*((float *)&v19 + 1), v6) > v9)
          {
LABEL_14:
            float v10 = *(std::__shared_weak_count **)(v2 + 80);
            if (v10)
            {
              __int16 v11 = std::__shared_weak_count::lock(v10);
              if (v11)
              {
                int v12 = v11;
                uint64_t v13 = *(void *)(v2 + 72);
                if (v13)
                {
                  uint64_t v14 = *(std::__shared_weak_count **)(v13 + 1048);
                  if (v14)
                  {
                    uint64_t v15 = *(void *)(v13 + 1040);
                    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
                    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    sub_4636C(v14);
                    uint64_t v16 = std::__shared_weak_count::lock(v14);
                    std::__shared_weak_count::__release_weak(v14);
                    if (v16)
                    {
                      if (v15 && (*(unsigned int (**)(uint64_t))(*(void *)v15 + 264))(v15))
                      {
                        (*(void (**)(uint64_t, BOOL, float))(*(void *)v15 + 256))(v15, *(float *)&v19 > 0.0, *((float *)&v19 + 1));
                        if (*(float *)&v19 <= 0.0)
                        {
                          __int16 v17 = *(id *)sub_32A48(41);
                          int v18 = v17;
                          if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
                          {
                            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                            __int16 v21 = "DSPChain.mm";
                            __int16 v22 = 1024;
                            int v23 = 325;
                            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d DSPGraphParameterUpdater::Reset() - resetting last slider position and ramp status.", buf, 0x12u);
                          }

                          if (*(unsigned char *)(v2 + 108)) {
                            *(unsigned char *)(v2 + 108) = 0;
                          }
                          if (*(unsigned char *)(v2 + 116)) {
                            *(unsigned char *)(v2 + 116) = 0;
                          }
                        }
                        else
                        {
                          *(_DWORD *)(v2 + 112) = v19;
                          *(unsigned char *)(v2 + 116) = 1;
                          *(_DWORD *)(v2 + 104) = HIDWORD(v19);
                          *(unsigned char *)(v2 + 108) = 1;
                        }
                      }
                      sub_4636C(v16);
                    }
                  }
                }
                sub_4636C(v12);
              }
            }
          }
        }
      }
      sub_4636C(v4);
    }
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1BA254(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_4636C(v18);
  sub_4636C(v17);
  sub_4636C(v16);
  if (a2 == 3)
  {
    __int16 v21 = __cxa_begin_catch(a1);
    uint64_t v22 = sub_32A48(13);
    int v23 = sub_7D5E8(1, *(void **)v22, *(void *)(v22 + 8));
    double v24 = v23;
    if (v23)
    {
      double v24 = v23;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        int v25 = v21[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a12) = 1024;
        DWORD1(a12) = v25;
        WORD4(a12) = 2080;
        *(void *)((char *)&a12 + 10) = "";
        a14 = 1024;
        a15 = 270;
        int v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
        uint64_t v27 = v24;
        uint32_t v28 = 40;
LABEL_13:
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint32_t v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v30 = v29;
      uint64_t v31 = sub_32A48(13);
      uint64_t v32 = sub_7D5E8(1, *(void **)v31, *(void *)(v31 + 8));
      double v24 = v32;
      if (v32)
      {
        double v24 = v32;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = v33;
          WORD6(a12) = 2080;
          *(void *)((char *)&a12 + 14) = "";
          HIWORD(a15) = 1024;
          a16 = 270;
          int v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
          uint64_t v27 = v24;
          uint32_t v28 = 44;
          goto LABEL_13;
        }
LABEL_14:
      }
    }
    else
    {
      uint64_t v34 = sub_32A48(13);
      uint64_t v35 = sub_7D5E8(1, *(void **)v34, *(void *)(v34 + 8));
      double v24 = v35;
      if (v35)
      {
        double v24 = v35;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a12) = 2080;
          *(void *)((char *)&a12 + 4) = "";
          WORD6(a12) = 1024;
          *(_DWORD *)((char *)&a12 + 14) = 270;
          int v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
          uint64_t v27 = v24;
          uint32_t v28 = 34;
          goto LABEL_13;
        }
        goto LABEL_14;
      }
    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1BA210);
}

caulk::concurrent::message **sub_1BA52C(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = off_6260F8;
  float v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24))(caulk::alloc::realtime_safe_resource, v2, 56, 8);
  return a1;
}

void sub_1BA5C4(caulk::concurrent::message *this)
{
  *(void *)this = off_6260F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_1BA634(caulk::concurrent::message *this)
{
  *(void *)this = off_6260F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void sub_1BA690(caulk::concurrent::message *this)
{
  *(void *)this = off_6260F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_1BA700(caulk::concurrent::message *this)
{
  *(void *)this = off_6260F8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void *sub_1BA75C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1BA7E0(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  float v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1BA820(void *a1)
{
  sub_73110(a1 + 1);

  operator delete(a1);
}

void sub_1BA85C(uint64_t a1)
{
}

uint64_t sub_1BA864(uint64_t a1, void *a2)
{
  *a2 = off_626418;
  return sub_1BA890((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1BA890(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_6E5D0((char *)(a1 + 16), *(uint64_t **)(a2 + 16), *(uint64_t **)(a2 + 24), (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 3);
  return a1;
}

void sub_1BA8EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1BA904(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = off_626418;
  sub_1BA890((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BA958(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1BA96C(void *a1)
{
  *a1 = off_626418;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

void *sub_1BA9E8(void *a1)
{
  *a1 = off_626418;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1BAA44(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_1BAA84(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_1BAA94(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_626460;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_1BAACC(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_626460;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1BAB28(void *a1)
{
  *a1 = off_626460;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void *sub_1BAB94(void *a1)
{
  *a1 = off_626460;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_1BABE0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 80) = -1;
  uint64_t v3 = *(unsigned int *)(a2 + 80);
  if (v3 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_626160[v3])(&v5, a1, a2);
    *(_DWORD *)(a1 + 80) = v3;
  }
  return a1;
}

void sub_1BAC44(_Unwind_Exception *a1)
{
  sub_8C710(v1);
  _Unwind_Resume(a1);
}

void sub_1BAC58(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void sub_1BAC64(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *sub_1BAC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_46A4C((uint64_t *)a2, a3);
  sub_18452C((void *)(a2 + 24), (void *)(a3 + 24));
  uint64_t result = sub_18452C((void *)(a2 + 48), (void *)(a3 + 48));
  *(_WORD *)(a2 + 72) = *(_WORD *)(a3 + 72);
  return result;
}

void sub_1BACC0(_Unwind_Exception *a1)
{
  sub_8F90(*(char **)(v1 + 32));
  sub_463E0(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

unsigned char *sub_1BACE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (long long *)(a3 + 40);
  *(void *)a2 = *(void *)a3;
  float v6 = (unsigned char *)(a2 + 40);
  sub_CAE80((unsigned char *)(a2 + 8), (long long *)(a3 + 8));
  uint64_t result = sub_CAE80(v6, v5);
  *(_WORD *)(a2 + 72) = *(_WORD *)(a3 + 72);
  return result;
}

void sub_1BAD4C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAD70(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t sub_1BAD7C(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (result)
  {
    int v12 = a2 ^ 1;
    id v5 = *(id *)sub_32A48(24);
    float v6 = v5;
    if (v5)
    {
      float v7 = v5;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 735) < 0)
        {
          sub_21E8C(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 712);
          uint64_t v11 = *(void *)(a1 + 728);
        }
        float v8 = "Deactivating";
        if (a2) {
          float v8 = "Activating";
        }
        uint64_t v14 = "DSPChain.mm";
        __int16 v15 = 1024;
        int v16 = 3167;
        float v9 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        if (v11 < 0) {
          float v9 = (void **)__p[0];
        }
        __int16 v17 = 2080;
        int v18 = v8;
        __int16 v19 = 2080;
        int v20 = v9;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s processing block for graph %s", buf, 0x26u);
        if (SHIBYTE(v11) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t, void))(*(void *)a1 + 112))(a1, 1685287015, 1852797026, &v12, 4, 0);
  }
  return result;
}

void sub_1BAF50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAF6C()
{
  uint64_t v0 = (os_log_t *)sub_32A48(6);
  uint64_t v1 = *v0;
  if (*v0 && os_log_type_enabled(*v0, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "SingletonFactory_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 42;
    _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEBUG, "%25s:%-5d Beginning instantiation of singletons.", buf, 0x12u);
  }
  uint64_t v2 = sub_32A48(10);
  uint64_t v3 = sub_32A48(6);
  char v4 = 0;
  uint64_t v5 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8) {
      goto LABEL_10;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_10:
  float v9 = *(NSObject **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 1027;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to create SystemSettingsManager.", buf, 0x12u);
  }
  if (!qword_650058) {
    operator new();
  }
  float v10 = (os_log_t *)sub_32A48(13);
  uint64_t v11 = *v10;
  if (*v10)
  {
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SystemSettingsManager_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 1029;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"sSystemSettingsManager is not NULL!\"", buf, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "sSystemSettingsManager is not NULL!");
}

void sub_1BDF50(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    sub_10C78C(&STACK[0x378]);
    sub_45F50(v3);
    sub_43DC28(v2);
    operator delete();
  }
  _Unwind_Resume(a1);
}

void *sub_1BF06C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1BF0F0(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1) {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315138;
    char v4 = dlerror();
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
  uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1);
  if (v1)
  {
LABEL_5:
    off_64EE98 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerCreate");
    off_64EEA0 = (uint64_t (*)(void))dlsym(v1, "AudioDataAnalysisManagerDispose");
    qword_64EEA8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerReset");
    off_64EEB0 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerUpdateReportingSessions");
    qword_64EEB8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodePCM");
    off_64EEC0 = dlsym(v1, "AudioDataAnalysisManagerCreateNodeSPL");
    qword_64EEC8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerRemoveNode");
    off_64EED0 = (uint64_t (*)(void))dlsym(v1, "AudioDataAnalysisManagerInitialize");
    qword_64EED8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerIsSessionInitialized");
    qword_64EEE0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessAudio");
    off_64EEE8 = (uint64_t (*)(void, void, void, float, float, float, float, float))dlsym(v1, "AudioDataAnalysisManagerProcessSPL");
    qword_64EEF0 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSPL");
    qword_64EEF8 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerCreateNodeEnvSoundClass");
    qword_64EF00 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSPL");
    qword_64EF08 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerProcessEnvSoundClass");
    off_64EF10 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerSetDeviceInfo");
    off_64EF18 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerRegisterDeviceInfo");
    off_64EF20 = (uint64_t (*)(void, void, void))dlsym(v1, "AudioDataAnalysisManagerSetDeviceConnectionState");
    off_64EF28 = dlsym(v1, "AudioDataAnalysisManagerStartServices");
    off_64EF30 = (uint64_t (*)(void, void))dlsym(v1, "AudioDataAnalysisManagerConnectedWiredDeviceIsHeadphone");
    qword_64EF38 = (uint64_t)dlsym(v1, "AudioDataAnalysisManagerSetApplicationBundleID");
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = dlerror();
    int v3 = 136315138;
    char v4 = v2;
    _os_log_error_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "dlerror : libAudioIssueDetector ADAM: %s", (uint8_t *)&v3, 0xCu);
  }
}

void sub_1BF410(uint64_t a1)
{
  uint64_t v2 = sub_6C174(a1);
  *(_DWORD *)(v2 + 80) = 16843009;
  *(_DWORD *)(v2 + 72) = 16843009;
  *(_WORD *)(v2 + 76) = 257;
  *(_WORD *)(v2 + 84) = 257;
  if (!*(unsigned char *)(v2 + 20)) {
    *(unsigned char *)(a1 + 20) = 1;
  }
  *(_DWORD *)(a1 + 16) = 4;
  *(_WORD *)(a1 + 90) = 257;
  *(_OWORD *)std::string __p = xmmword_4E78E0;
  sub_6C4EC((uint64_t **)(a1 + 96), (unsigned int *)__p, (unsigned int *)v13);
  *(_DWORD *)(a1 + 404) = 1077936128;
  *(unsigned char *)(a1 + 408) = 1;
  *(_WORD *)(a1 + 322) = 257;
  if (!*(unsigned char *)(a1 + 956)) {
    *(unsigned char *)(a1 + 956) = 1;
  }
  *(_DWORD *)(a1 + 952) = 2;
  if (sub_23AC0()) {
    sub_1BF75C((uint64_t)__p);
  }
  else {
    sub_1C674C((uint64_t)__p);
  }
  sub_6D31C(a1 + 512, (uint64_t *)__p);
  sub_6C7E4(v13[0]);
  int v3 = __p[0];
  __p[0] = 0;
  if (v3) {
    operator delete(v3);
  }
  sub_3C72AC((uint64_t)__p);
  sub_6D31C(a1 + 640, (uint64_t *)__p);
  sub_6D600(a1 + 560, &v14);
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete((void *)v14);
  }
  sub_6C7E4(v13[0]);
  char v4 = __p[0];
  __p[0] = 0;
  if (v4) {
    operator delete(v4);
  }
  if (!*(unsigned char *)(a1 + 1104)) {
    *(unsigned char *)(a1 + 1104) = 1;
  }
  *(_DWORD *)(a1 + 1100) = 2;
  if (!*(unsigned char *)(a1 + 1112)) {
    *(unsigned char *)(a1 + 1112) = 1;
  }
  *(_DWORD *)(a1 + 1108) = 33;
  sub_21C8C(v10, "");
  sub_21C8C(v8, "");
  sub_21C8C(&v7, off_648B50);
  sub_21C8C(&v6, "AU");
  sub_21C8C(&v5, "VAD");
  sub_6D364((char *)__p, (long long *)v10, (uint64_t)v8, &v7, &v6, &v5);
  sub_6D600(a1 + 432, (long long *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(*((void **)&v14 + 1));
  }
  if (SBYTE7(v14) < 0) {
    operator delete(v13[1]);
  }
  if (SHIBYTE(v13[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_1BF6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  sub_6C63C(v39);
  _Unwind_Resume(a1);
}

uint64_t sub_1BF75C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  int v3 = (uint64_t *)sub_3EFF58();
  sub_1CE44C((uint64_t)v317, "speaker_general");
  sub_1CDBCC(v977, "speaker_general", v317);
  sub_1CE44C((uint64_t)v316, "speaker_latenight_general");
  sub_1CDBCC(v978, "speaker_latenight_general", v316);
  sub_1CE44C((uint64_t)v315, "speaker_movie");
  sub_1CDBCC(v979, "speaker_movie", v315);
  sub_1CE44C((uint64_t)v314, "speaker_latenight_movie");
  sub_1CDBCC(v980, "speaker_latenight_movie", v314);
  sub_1CE44C((uint64_t)v313, "speaker_alarm");
  sub_1CDBCC(v981, "speaker_alarm", v313);
  sub_1CE44C((uint64_t)v312, "speaker_ringtone");
  sub_1CDBCC(v982, "speaker_ringtone", v312);
  sub_21C8C(v310, "speaker_measurement");
  sub_21C8C(&v290, "speaker_measurement");
  uint64_t v292 = 0;
  uint64_t v291 = 0;
  uint64_t v293 = 0;
  sub_21C8C(v294, "speaker_measurement");
  sub_21C8C(v295, "speaker_measurement");
  memset(&v295[3], 0, 24);
  int v296 = 1668049011;
  CFTypeRef v289 = 0;
  v973[0] = 1936746861;
  uint64_t v974 = 0;
  char v4 = operator new(0xCuLL);
  v970 = (char *)(v4 + 3);
  *(void *)char v4 = 0x6473706700000001;
  v4[2] = 1869768046;
  v968 = v4;
  v969 = v4 + 3;
  v286 = 0;
  v284 = 0;
  v285 = 0;
  *(void *)&long long v947 = &v284;
  BYTE8(v947) = 0;
  v284 = operator new(0x18uLL);
  v285 = v284;
  v286 = v284 + 3;
  v285 = sub_1CDC20((uint64_t)&v286, (uint64_t)&v968, (uint64_t)&v971, v284);
  sub_1CDCD4((uint64_t)&v971, (uint64_t *)&v284);
  v287[0] = &v971;
  v287[1] = 1;
  CFDictionaryRef v5 = sub_4D3D8((uint64_t)v287);
  int v975 = 1768907891;
  CFDictionaryRef v976 = v5;
  CFTypeRef v288 = 0;
  v298 = 0;
  v299 = 0;
  v297 = 0;
  *(void *)&long long v947 = &v297;
  BYTE8(v947) = 0;
  std::string v6 = (char *)operator new(0x20uLL);
  uint64_t v7 = 0;
  v297 = v6;
  v298 = v6;
  v299 = v6 + 32;
  do
  {
    sub_6D16C((uint64_t)&v6[v7 * 4], v973[v7], *(CFTypeRef *)&v973[v7 + 2]);
    v7 += 4;
  }
  while (v7 != 8);
  v298 = v6 + 32;
  long long v300 = 0u;
  long long v301 = 0u;
  char v8 = operator new(4uLL);
  *((void *)&v300 + 1) = v8;
  *char v8 = 1987405668;
  *((void *)&v301 + 1) = v8 + 1;
  *(void *)&long long v301 = v8 + 1;
  memset(v303, 0, sizeof(v303));
  v302 = v303;
  char v305 = 0;
  memset(v306, 0, sizeof(v306));
  uint64_t v307 = 0;
  char v304 = 0;
  long long v947 = xmmword_5968C4;
  uint64_t v948 = 2;
  sub_6D1AC((uint64_t)v306, (int *)&v947, 3);
  char v308 = 0;
  uint64_t v309 = 0;
  sub_6D224(v983, (long long *)v310, &v290);
  sub_21C8C(v282, "speaker_raw");
  sub_21C8C(&v947, "speaker_raw");
  uint64_t v950 = 0;
  uint64_t v949 = 0;
  uint64_t v951 = 0;
  sub_21C8C(v952, "speaker_measurement");
  sub_21C8C(v953, "speaker_raw");
  memset(&v953[3], 0, 24);
  int v954 = 1668049011;
  CFTypeRef v281 = 0;
  v943[0] = 1936746861;
  uint64_t v944 = 0;
  char v9 = operator new(0xCuLL);
  v940 = (char *)(v9 + 3);
  *(void *)char v9 = 0x6473706700000001;
  v9[2] = 1869768046;
  v938 = v9;
  v939 = v9 + 3;
  v278 = 0;
  v276 = 0;
  v277 = 0;
  *(void *)&long long v917 = &v276;
  BYTE8(v917) = 0;
  v276 = operator new(0x18uLL);
  v277 = v276;
  v278 = v276 + 3;
  v277 = sub_1CDC20((uint64_t)&v278, (uint64_t)&v938, (uint64_t)&v941, v276);
  sub_1CDCD4((uint64_t)&v941, (uint64_t *)&v276);
  v279[0] = &v941;
  v279[1] = 1;
  CFDictionaryRef v10 = sub_4D3D8((uint64_t)v279);
  int v945 = 1768907891;
  CFDictionaryRef v946 = v10;
  CFTypeRef v280 = 0;
  v956 = 0;
  v957 = 0;
  v955 = 0;
  *(void *)&long long v917 = &v955;
  BYTE8(v917) = 0;
  char v11 = (char *)operator new(0x20uLL);
  uint64_t v12 = 0;
  v955 = v11;
  v956 = v11;
  v957 = v11 + 32;
  do
  {
    sub_6D16C((uint64_t)&v11[v12 * 4], v943[v12], *(CFTypeRef *)&v943[v12 + 2]);
    v12 += 4;
  }
  while (v12 != 8);
  v956 = v11 + 32;
  long long v958 = 0u;
  long long v959 = 0u;
  uint64_t v13 = operator new(4uLL);
  *((void *)&v958 + 1) = v13;
  *uint64_t v13 = 1987405668;
  *((void *)&v959 + 1) = v13 + 1;
  *(void *)&long long v959 = v13 + 1;
  memset(v961, 0, sizeof(v961));
  v960 = v961;
  char v963 = 0;
  memset(v964, 0, sizeof(v964));
  uint64_t v965 = 0;
  char v962 = 0;
  long long v917 = xmmword_5968C4;
  uint64_t v918 = 2;
  sub_6D1AC((uint64_t)v964, (int *)&v917, 3);
  char v966 = 0;
  uint64_t v967 = 0;
  sub_6D224(v984, (long long *)v282, &v947);
  sub_21C8C(v274, "front_mic_general");
  sub_21C8C(&v917, "front_mic_general");
  uint64_t v920 = 0;
  uint64_t v919 = 0;
  uint64_t v921 = 0;
  sub_21C8C(v922, "front_mic_general");
  sub_21C8C(v923, "front_mic_general");
  memset(&v923[3], 0, 24);
  int v924 = 1684434036;
  sub_1CDF04(v914, "aufx-firf-appl");
  int v271 = sub_8598C(v3, 0x666E7431u);
  sub_1CDF58((uint64_t)v915, "VPMicIndex", &v271);
  v272[0] = v914;
  v272[1] = 2;
  CFDictionaryRef v14 = sub_4D3D8((uint64_t)v272);
  v915[4] = 1718186601;
  CFTypeRef v916 = v14;
  CFTypeRef v273 = 0;
  v926 = 0;
  v927 = 0;
  v925 = 0;
  *(void *)&long long v893 = &v925;
  BYTE8(v893) = 0;
  v925 = (char *)operator new(0x10uLL);
  v926 = v925;
  char v15 = v925 + 16;
  v927 = v925 + 16;
  sub_6D16C((uint64_t)v925, 1718186601, v14);
  memset(v931, 0, sizeof(v931));
  long long v928 = 0u;
  long long v929 = 0u;
  v926 = v15;
  v930 = v931;
  char v933 = 0;
  memset(v934, 0, sizeof(v934));
  uint64_t v935 = 0;
  char v932 = 0;
  long long v893 = xmmword_5968C4;
  uint64_t v894 = 2;
  sub_6D1AC((uint64_t)v934, (int *)&v893, 3);
  char v936 = 0;
  uint64_t v937 = 0;
  sub_6D224(v985, (long long *)v274, &v917);
  sub_21C8C(v269, "bottom_mic_general");
  sub_21C8C(&v893, "bottom_mic_general");
  uint64_t v896 = 0;
  uint64_t v895 = 0;
  uint64_t v897 = 0;
  sub_21C8C(v898, "bottom_mic_general");
  sub_21C8C(v899, "bottom_mic_general");
  memset(&v899[3], 0, 24);
  int v900 = 1684434036;
  sub_1CDF04(v890, "aufx-firf-appl");
  int v266 = sub_8598C(v3, 0x62746D31u);
  sub_1CDF58((uint64_t)v891, "VPMicIndex", &v266);
  v267[0] = v890;
  v267[1] = 2;
  CFDictionaryRef v16 = sub_4D3D8((uint64_t)v267);
  v891[4] = 1718186601;
  CFTypeRef v892 = v16;
  CFTypeRef v268 = 0;
  v902 = 0;
  v903 = 0;
  v901 = 0;
  *(void *)&long long v869 = &v901;
  BYTE8(v869) = 0;
  v901 = (char *)operator new(0x10uLL);
  v902 = v901;
  char v17 = v901 + 16;
  v903 = v901 + 16;
  sub_6D16C((uint64_t)v901, 1718186601, v16);
  memset(v907, 0, sizeof(v907));
  long long v904 = 0u;
  long long v905 = 0u;
  v902 = v17;
  v906 = v907;
  char v909 = 0;
  memset(v910, 0, sizeof(v910));
  uint64_t v911 = 0;
  char v908 = 0;
  long long v869 = xmmword_5968C4;
  uint64_t v870 = 2;
  sub_6D1AC((uint64_t)v910, (int *)&v869, 3);
  char v912 = 0;
  uint64_t v913 = 0;
  sub_6D224(v986, (long long *)v269, &v893);
  sub_21C8C(v264, "bottom_mic_hearing_accessibility");
  sub_21C8C(&v869, "bottom_mic_hearing_accessibility");
  uint64_t v872 = 0;
  uint64_t v871 = 0;
  uint64_t v873 = 0;
  sub_21C8C(v874, "bottom_mic_hearing_accessibility");
  sub_21C8C(v875, "bottom_mic_hearing_accessibility");
  memset(&v875[3], 0, 24);
  int v876 = 1684434036;
  sub_1CDF04(v866, "aufx-firf-appl");
  int v261 = sub_8598C(v3, 0x62746D31u);
  sub_1CDF58((uint64_t)v867, "VPMicIndex", &v261);
  v262[0] = v866;
  v262[1] = 2;
  CFDictionaryRef v18 = sub_4D3D8((uint64_t)v262);
  v867[4] = 1718186601;
  CFTypeRef v868 = v18;
  CFTypeRef v263 = 0;
  v878 = 0;
  v879 = 0;
  v877 = 0;
  *(void *)&long long v845 = &v877;
  BYTE8(v845) = 0;
  v877 = (char *)operator new(0x10uLL);
  v878 = v877;
  char v19 = v877 + 16;
  v879 = v877 + 16;
  sub_6D16C((uint64_t)v877, 1718186601, v18);
  memset(v883, 0, sizeof(v883));
  long long v880 = 0u;
  long long v881 = 0u;
  v878 = v19;
  v882 = v883;
  char v885 = 0;
  memset(v886, 0, sizeof(v886));
  uint64_t v887 = 0;
  char v884 = 0;
  long long v845 = xmmword_5968C4;
  uint64_t v846 = 2;
  sub_6D1AC((uint64_t)v886, (int *)&v845, 3);
  char v888 = 0;
  uint64_t v889 = 0;
  sub_6D224(v987, (long long *)v264, &v869);
  sub_21C8C(v259, "bottom_mic2_general");
  sub_21C8C(&v845, "bottom_mic_general");
  uint64_t v848 = 0;
  uint64_t v847 = 0;
  uint64_t v849 = 0;
  sub_21C8C(v850, "bottom_mic_general");
  sub_21C8C(v851, "bottom_mic_general");
  memset(&v851[3], 0, 24);
  int v852 = 1684434036;
  sub_1CDF04(v842, "aufx-firf-appl");
  int v256 = sub_8598C(v3, 0x62746D32u);
  sub_1CDF58((uint64_t)v843, "VPMicIndex", &v256);
  v257[0] = v842;
  v257[1] = 2;
  CFDictionaryRef v20 = sub_4D3D8((uint64_t)v257);
  v843[4] = 1718186601;
  CFTypeRef v844 = v20;
  CFTypeRef v258 = 0;
  v854 = 0;
  v855 = 0;
  v853 = 0;
  *(void *)&long long v821 = &v853;
  BYTE8(v821) = 0;
  v853 = (char *)operator new(0x10uLL);
  v854 = v853;
  __int16 v21 = v853 + 16;
  v855 = v853 + 16;
  sub_6D16C((uint64_t)v853, 1718186601, v20);
  memset(v859, 0, sizeof(v859));
  long long v856 = 0u;
  long long v857 = 0u;
  v854 = v21;
  v858 = v859;
  char v861 = 0;
  memset(v862, 0, sizeof(v862));
  uint64_t v863 = 0;
  char v860 = 0;
  long long v821 = xmmword_5968C4;
  uint64_t v822 = 2;
  sub_6D1AC((uint64_t)v862, (int *)&v821, 3);
  char v864 = 0;
  uint64_t v865 = 0;
  sub_6D224(v988, (long long *)v259, &v845);
  sub_21C8C(v254, "back_mic_general");
  sub_21C8C(&v821, "back_mic_general");
  uint64_t v824 = 0;
  uint64_t v823 = 0;
  uint64_t v825 = 0;
  sub_21C8C(v826, "back_mic_general");
  sub_21C8C(v827, "back_mic_general");
  memset(&v827[3], 0, 24);
  int v828 = 1684434036;
  sub_1CDF04(v818, "aufx-firf-appl");
  int v251 = sub_8598C(v3, 0x62616B31u);
  sub_1CDF58((uint64_t)v819, "VPMicIndex", &v251);
  v252[0] = v818;
  v252[1] = 2;
  CFDictionaryRef v22 = sub_4D3D8((uint64_t)v252);
  v819[4] = 1718186601;
  CFTypeRef v820 = v22;
  CFTypeRef v253 = 0;
  v830 = 0;
  v831 = 0;
  v829 = 0;
  *(void *)&long long v794 = &v829;
  BYTE8(v794) = 0;
  v829 = (char *)operator new(0x10uLL);
  v830 = v829;
  int v23 = v829 + 16;
  v831 = v829 + 16;
  sub_6D16C((uint64_t)v829, 1718186601, v22);
  memset(v835, 0, sizeof(v835));
  long long v832 = 0u;
  long long v833 = 0u;
  v830 = v23;
  v834 = v835;
  char v837 = 0;
  memset(v838, 0, sizeof(v838));
  uint64_t v839 = 0;
  char v836 = 0;
  long long v794 = xmmword_5968C4;
  uint64_t v795 = 2;
  sub_6D1AC((uint64_t)v838, (int *)&v794, 3);
  char v840 = 0;
  uint64_t v841 = 0;
  sub_6D224(v989, (long long *)v254, &v821);
  sub_21C8C(v249, "beamformed_mic_general");
  sub_21C8C(&v794, "beam_mic_general");
  uint64_t v797 = 0;
  uint64_t v796 = 0;
  uint64_t v798 = 0;
  sub_21C8C(v799, "beam_mic_general");
  sub_21C8C(v800, "beam_mic_general");
  memset(&v800[3], 0, 24);
  int v801 = 1684434036;
  int v246 = 0;
  sub_1CE02C((uint64_t)&v788, &v246);
  v247[0] = &v788;
  v247[1] = 1;
  CFDictionaryRef v24 = sub_4D3D8((uint64_t)v247);
  v790[0] = 1651074168;
  CFDictionaryRef v791 = v24;
  CFTypeRef v248 = 0;
  int v243 = 0;
  sub_1CE110((uint64_t)&v786, &v243);
  v244[0] = &v786;
  v244[1] = 1;
  CFDictionaryRef v25 = sub_4D3D8((uint64_t)v244);
  int v792 = 1920365171;
  CFDictionaryRef v793 = v25;
  CFTypeRef v245 = 0;
  v803 = 0;
  v804 = 0;
  v802 = 0;
  *(void *)&long long v762 = &v802;
  BYTE8(v762) = 0;
  int v26 = (char *)operator new(0x20uLL);
  uint64_t v27 = 0;
  v802 = v26;
  v803 = v26;
  v804 = v26 + 32;
  do
  {
    sub_6D16C((uint64_t)&v26[v27 * 4], v790[v27], *(CFTypeRef *)&v790[v27 + 2]);
    v27 += 4;
  }
  while (v27 != 8);
  v808[0] = 0;
  v808[1] = 0;
  long long v805 = 0u;
  long long v806 = 0u;
  v803 = v26 + 32;
  v807 = v808;
  v811 = 0;
  v809 = 0;
  v810 = 0;
  uint32_t v28 = operator new(8uLL);
  v809 = v28;
  *uint32_t v28 = 0x100000002;
  v811 = v28 + 1;
  v810 = v28 + 1;
  char v812 = 0;
  char v813 = 0;
  memset(v814, 0, sizeof(v814));
  uint64_t v815 = 0;
  long long v762 = xmmword_5968C4;
  uint64_t v763 = 2;
  sub_6D1AC((uint64_t)v814, (int *)&v762, 3);
  char v816 = 0;
  uint64_t v817 = 0;
  sub_6D224(v990, (long long *)v249, &v794);
  sub_21C8C(v241, "mic_peripheral");
  sub_21C8C(&v762, "mic_peripheral");
  uint64_t v765 = 0;
  uint64_t v764 = 0;
  uint64_t v766 = 0;
  sub_21C8C(v767, "mic_peripheral");
  sub_21C8C(v768, "mic_peripheral");
  memset(&v768[3], 0, 24);
  int v769 = 1684434036;
  int v238 = 1;
  sub_1CE1EC((uint64_t)&v756, &v238);
  v239[0] = &v756;
  v239[1] = 1;
  CFDictionaryRef v29 = sub_4D3D8((uint64_t)v239);
  v758[0] = 1651074168;
  CFDictionaryRef v759 = v29;
  CFTypeRef v240 = 0;
  int v235 = 0;
  sub_1CE110((uint64_t)&v754, &v235);
  v236[0] = &v754;
  v236[1] = 1;
  CFDictionaryRef v30 = sub_4D3D8((uint64_t)v236);
  int v760 = 1920365171;
  CFDictionaryRef v761 = v30;
  CFTypeRef v237 = 0;
  v771 = 0;
  v772 = 0;
  v770 = 0;
  *(void *)&long long v731 = &v770;
  BYTE8(v731) = 0;
  uint64_t v31 = (char *)operator new(0x20uLL);
  uint64_t v32 = 0;
  v770 = v31;
  v771 = v31;
  v772 = v31 + 32;
  do
  {
    sub_6D16C((uint64_t)&v31[v32 * 4], v758[v32], *(CFTypeRef *)&v758[v32 + 2]);
    v32 += 4;
  }
  while (v32 != 8);
  v776[0] = 0;
  v776[1] = 0;
  long long v773 = 0u;
  long long v774 = 0u;
  v771 = v31 + 32;
  v775 = v776;
  v779 = 0;
  v777 = 0;
  v778 = 0;
  uint64_t v33 = operator new(8uLL);
  v777 = v33;
  *uint64_t v33 = 0x100000002;
  v779 = v33 + 1;
  v778 = v33 + 1;
  char v780 = 0;
  char v781 = 0;
  memset(v782, 0, sizeof(v782));
  uint64_t v783 = 0;
  long long v731 = xmmword_5968C4;
  uint64_t v732 = 2;
  sub_6D1AC((uint64_t)v782, (int *)&v731, 3);
  char v784 = 0;
  uint64_t v785 = 0;
  sub_6D224(v991, (long long *)v241, &v762);
  sub_21C8C(v233, "mic_peripheral_allmics");
  sub_21C8C(&v731, "mic_peripheral_sender_all_mics");
  uint64_t v734 = 0;
  uint64_t v733 = 0;
  uint64_t v735 = 0;
  sub_21C8C(v736, "mic_peripheral_sender_all_mics");
  sub_21C8C(v737, "mic_peripheral_sender_all_mics");
  memset(&v737[3], 0, 24);
  int v738 = 1684434036;
  v744[0] = 0;
  v744[1] = 0;
  long long v739 = 0u;
  long long v740 = 0u;
  long long v741 = 0u;
  uint64_t v742 = 0;
  v743 = v744;
  v747 = 0;
  v745 = 0;
  v746 = 0;
  uint64_t v34 = operator new(8uLL);
  v745 = v34;
  void *v34 = 0x400000004;
  v747 = v34 + 1;
  v746 = v34 + 1;
  char v748 = 0;
  char v749 = 0;
  memset(v750, 0, sizeof(v750));
  uint64_t v751 = 0;
  long long v710 = xmmword_5968C4;
  uint64_t v711 = 2;
  sub_6D1AC((uint64_t)v750, (int *)&v710, 3);
  char v752 = 0;
  uint64_t v753 = 0;
  sub_6D224(v992, (long long *)v233, &v731);
  sub_21C8C(v231, "front_mic_measurement");
  sub_21C8C(&v710, "front_mic_measurement");
  uint64_t v713 = 0;
  uint64_t v712 = 0;
  uint64_t v714 = 0;
  sub_21C8C(v715, "front_mic_measurement");
  sub_21C8C(v716, "front_mic_measurement");
  memset(&v716[3], 0, 24);
  int v717 = 1684434036;
  sub_1CDF04(v707, "aufx-firf-appl");
  int v228 = sub_8598C(v3, 0x666E7431u);
  sub_1CDF58((uint64_t)v708, "VPMicIndex", &v228);
  v229[0] = v707;
  v229[1] = 2;
  CFDictionaryRef v35 = sub_4D3D8((uint64_t)v229);
  v708[4] = 1718186601;
  CFTypeRef v709 = v35;
  CFTypeRef v230 = 0;
  v719 = 0;
  v720 = 0;
  v718 = 0;
  *(void *)&long long v686 = &v718;
  BYTE8(v686) = 0;
  v718 = (char *)operator new(0x10uLL);
  v719 = v718;
  char v36 = v718 + 16;
  v720 = v718 + 16;
  sub_6D16C((uint64_t)v718, 1718186601, v35);
  memset(v724, 0, sizeof(v724));
  long long v721 = 0u;
  long long v722 = 0u;
  v719 = v36;
  v723 = v724;
  char v726 = 0;
  memset(v727, 0, sizeof(v727));
  uint64_t v728 = 0;
  char v725 = 0;
  long long v686 = xmmword_5968C4;
  uint64_t v687 = 2;
  sub_6D1AC((uint64_t)v727, (int *)&v686, 3);
  char v729 = 0;
  uint64_t v730 = 0;
  sub_6D224(v993, (long long *)v231, &v710);
  sub_21C8C(v226, "bottom_mic_measurement");
  sub_21C8C(&v686, "bottom_mic_measurement");
  uint64_t v689 = 0;
  uint64_t v688 = 0;
  uint64_t v690 = 0;
  sub_21C8C(v691, "bottom_mic_measurement");
  sub_21C8C(v692, "bottom_mic_measurement");
  memset(&v692[3], 0, 24);
  int v693 = 1684434036;
  sub_1CDF04(v683, "aufx-firf-appl");
  int v223 = sub_8598C(v3, 0x62746D31u);
  sub_1CDF58((uint64_t)v684, "VPMicIndex", &v223);
  v224[0] = v683;
  v224[1] = 2;
  CFDictionaryRef v37 = sub_4D3D8((uint64_t)v224);
  v684[4] = 1718186601;
  CFTypeRef v685 = v37;
  CFTypeRef v225 = 0;
  v695 = 0;
  v696 = 0;
  v694 = 0;
  *(void *)&long long v662 = &v694;
  BYTE8(v662) = 0;
  v694 = (char *)operator new(0x10uLL);
  v695 = v694;
  uint64_t v38 = v694 + 16;
  v696 = v694 + 16;
  sub_6D16C((uint64_t)v694, 1718186601, v37);
  memset(v700, 0, sizeof(v700));
  long long v697 = 0u;
  long long v698 = 0u;
  v695 = v38;
  v699 = v700;
  char v702 = 0;
  memset(v703, 0, sizeof(v703));
  uint64_t v704 = 0;
  char v701 = 0;
  long long v662 = xmmword_5968C4;
  uint64_t v663 = 2;
  sub_6D1AC((uint64_t)v703, (int *)&v662, 3);
  char v705 = 0;
  uint64_t v706 = 0;
  sub_6D224(v994, (long long *)v226, &v686);
  sub_21C8C(v221, "bottom_mic2_measurement");
  sub_21C8C(&v662, "bottom_mic_measurement");
  uint64_t v665 = 0;
  uint64_t v664 = 0;
  uint64_t v666 = 0;
  sub_21C8C(v667, "bottom_mic_measurement");
  sub_21C8C(v668, "bottom_mic_measurement");
  memset(&v668[3], 0, 24);
  int v669 = 1684434036;
  sub_1CDF04(v659, "aufx-firf-appl");
  int v218 = sub_8598C(v3, 0x62746D32u);
  sub_1CDF58((uint64_t)v660, "VPMicIndex", &v218);
  v219[0] = v659;
  v219[1] = 2;
  CFDictionaryRef v39 = sub_4D3D8((uint64_t)v219);
  v660[4] = 1718186601;
  CFTypeRef v661 = v39;
  CFTypeRef v220 = 0;
  v671 = 0;
  v672 = 0;
  v670 = 0;
  *(void *)&long long v638 = &v670;
  BYTE8(v638) = 0;
  v670 = (char *)operator new(0x10uLL);
  v671 = v670;
  uint64_t v40 = v670 + 16;
  v672 = v670 + 16;
  sub_6D16C((uint64_t)v670, 1718186601, v39);
  memset(v676, 0, sizeof(v676));
  long long v673 = 0u;
  long long v674 = 0u;
  v671 = v40;
  v675 = v676;
  char v678 = 0;
  memset(v679, 0, sizeof(v679));
  uint64_t v680 = 0;
  char v677 = 0;
  long long v638 = xmmword_5968C4;
  uint64_t v639 = 2;
  sub_6D1AC((uint64_t)v679, (int *)&v638, 3);
  char v681 = 0;
  uint64_t v682 = 0;
  sub_6D224(v995, (long long *)v221, &v662);
  sub_21C8C(v216, "back_mic_measurement");
  sub_21C8C(&v638, "back_mic_measurement");
  uint64_t v641 = 0;
  uint64_t v640 = 0;
  uint64_t v642 = 0;
  sub_21C8C(v643, "back_mic_measurement");
  sub_21C8C(v644, "back_mic_measurement");
  memset(&v644[3], 0, 24);
  int v645 = 1684434036;
  sub_1CDF04(v635, "aufx-firf-appl");
  int v213 = sub_8598C(v3, 0x62616B31u);
  sub_1CDF58((uint64_t)v636, "VPMicIndex", &v213);
  v214[0] = v635;
  v214[1] = 2;
  CFDictionaryRef v41 = sub_4D3D8((uint64_t)v214);
  v636[4] = 1718186601;
  CFTypeRef v637 = v41;
  CFTypeRef v215 = 0;
  v647 = 0;
  v648 = 0;
  v646 = 0;
  *(void *)&long long v611 = &v646;
  BYTE8(v611) = 0;
  v646 = (char *)operator new(0x10uLL);
  v647 = v646;
  std::string::size_type v42 = v646 + 16;
  v648 = v646 + 16;
  sub_6D16C((uint64_t)v646, 1718186601, v41);
  memset(v652, 0, sizeof(v652));
  long long v649 = 0u;
  long long v650 = 0u;
  v647 = v42;
  v651 = v652;
  char v654 = 0;
  memset(v655, 0, sizeof(v655));
  uint64_t v656 = 0;
  char v653 = 0;
  long long v611 = xmmword_5968C4;
  uint64_t v612 = 2;
  sub_6D1AC((uint64_t)v655, (int *)&v611, 3);
  char v657 = 0;
  uint64_t v658 = 0;
  sub_6D224(v996, (long long *)v216, &v638);
  sub_21C8C(v211, "beamformed_mic_measurement");
  sub_21C8C(&v611, "beam_mic_measurement");
  uint64_t v614 = 0;
  uint64_t v613 = 0;
  uint64_t v615 = 0;
  sub_21C8C(v616, "beam_mic_measurement");
  sub_21C8C(v617, "beam_mic_measurement");
  memset(&v617[3], 0, 24);
  int v618 = 1684434036;
  int v208 = 0;
  sub_1CE02C((uint64_t)&v605, &v208);
  v209[0] = &v605;
  v209[1] = 1;
  CFDictionaryRef v43 = sub_4D3D8((uint64_t)v209);
  v607[0] = 1651074168;
  CFDictionaryRef v608 = v43;
  CFTypeRef v210 = 0;
  int v205 = 0;
  sub_1CE110((uint64_t)&v603, &v205);
  v206[0] = &v603;
  v206[1] = 1;
  CFDictionaryRef v44 = sub_4D3D8((uint64_t)v206);
  int v609 = 1920365171;
  CFDictionaryRef v610 = v44;
  CFTypeRef v207 = 0;
  v620 = 0;
  v621 = 0;
  v619 = 0;
  *(void *)&long long v582 = &v619;
  BYTE8(v582) = 0;
  char v45 = (char *)operator new(0x20uLL);
  uint64_t v46 = 0;
  v619 = v45;
  v620 = v45;
  v621 = v45 + 32;
  do
  {
    sub_6D16C((uint64_t)&v45[v46 * 4], v607[v46], *(CFTypeRef *)&v607[v46 + 2]);
    v46 += 4;
  }
  while (v46 != 8);
  v625[0] = 0;
  v625[1] = 0;
  long long v622 = 0u;
  long long v623 = 0u;
  v620 = v45 + 32;
  v624 = v625;
  v628 = 0;
  v626 = 0;
  v627 = 0;
  uint64_t v47 = operator new(8uLL);
  v626 = v47;
  *uint64_t v47 = 0x100000002;
  v628 = v47 + 1;
  v627 = v47 + 1;
  char v629 = 0;
  char v630 = 0;
  memset(v631, 0, sizeof(v631));
  uint64_t v632 = 0;
  long long v582 = xmmword_5968C4;
  uint64_t v583 = 2;
  sub_6D1AC((uint64_t)v631, (int *)&v582, 3);
  char v633 = 0;
  uint64_t v634 = 0;
  sub_6D224(v997, (long long *)v211, &v611);
  sub_21C8C(v203, "bottom_mic_voice_messages");
  sub_21C8C(&v582, "bottom_mic_voice_messages");
  uint64_t v585 = 0;
  uint64_t v584 = 0;
  uint64_t v586 = 0;
  sub_21C8C(v587, "bottom_mic_voice_messages");
  sub_21C8C(v588, "bottom_mic_voice_messages");
  memset(&v588[3], 0, 24);
  int v589 = 1684434036;
  sub_1CDF04(v579, "aufx-firf-appl");
  int v200 = sub_8598C(v3, 0x62746D31u);
  sub_1CDF58((uint64_t)v580, "VPMicIndex", &v200);
  v201[0] = v579;
  v201[1] = 2;
  CFDictionaryRef v48 = sub_4D3D8((uint64_t)v201);
  v580[4] = 1718186601;
  CFTypeRef v581 = v48;
  CFTypeRef v202 = 0;
  v591 = 0;
  v592 = 0;
  v590 = 0;
  *(void *)&long long v558 = &v590;
  BYTE8(v558) = 0;
  v590 = (char *)operator new(0x10uLL);
  v591 = v590;
  char v49 = v590 + 16;
  v592 = v590 + 16;
  sub_6D16C((uint64_t)v590, 1718186601, v48);
  memset(v596, 0, sizeof(v596));
  long long v593 = 0u;
  long long v594 = 0u;
  v591 = v49;
  v595 = v596;
  char v598 = 0;
  memset(v599, 0, sizeof(v599));
  uint64_t v600 = 0;
  char v597 = 0;
  long long v558 = xmmword_5968C4;
  uint64_t v559 = 2;
  sub_6D1AC((uint64_t)v599, (int *)&v558, 3);
  char v601 = 0;
  uint64_t v602 = 0;
  sub_6D224(v998, (long long *)v203, &v582);
  sub_21C8C(v198, "bottom_mic_voice_recognition");
  sub_21C8C(&v558, "bottom_mic_voice_recognition");
  uint64_t v561 = 0;
  uint64_t v560 = 0;
  uint64_t v562 = 0;
  sub_21C8C(v563, "bottom_mic_voice_recognition");
  sub_21C8C(v564, "bottom_mic_voice_recognition");
  memset(&v564[3], 0, 24);
  int v565 = 1684434036;
  sub_1CDF04(v555, "aufx-firf-appl");
  int v195 = sub_8598C(v3, 0x62746D31u);
  sub_1CDF58((uint64_t)v556, "VPMicIndex", &v195);
  v196[0] = v555;
  v196[1] = 2;
  CFDictionaryRef v50 = sub_4D3D8((uint64_t)v196);
  v556[4] = 1718186601;
  CFTypeRef v557 = v50;
  CFTypeRef v197 = 0;
  v567 = 0;
  v568 = 0;
  v566 = 0;
  *(void *)&long long v531 = &v566;
  BYTE8(v531) = 0;
  v566 = (char *)operator new(0x10uLL);
  v567 = v566;
  int v51 = v566 + 16;
  v568 = v566 + 16;
  sub_6D16C((uint64_t)v566, 1718186601, v50);
  memset(v572, 0, sizeof(v572));
  long long v569 = 0u;
  long long v570 = 0u;
  v567 = v51;
  v571 = v572;
  char v574 = 0;
  memset(v575, 0, sizeof(v575));
  uint64_t v576 = 0;
  char v573 = 0;
  long long v531 = xmmword_5968C4;
  uint64_t v532 = 2;
  sub_6D1AC((uint64_t)v575, (int *)&v531, 3);
  char v577 = 0;
  uint64_t v578 = 0;
  sub_6D224(v999, (long long *)v198, &v558);
  sub_21C8C(v193, "beamformed_mic_voice_messages");
  sub_21C8C(&v531, "beam_mic_voice_messages");
  uint64_t v534 = 0;
  uint64_t v533 = 0;
  uint64_t v535 = 0;
  sub_21C8C(v536, "beam_mic_voice_messages");
  sub_21C8C(v537, "beam_mic_voice_messages");
  memset(&v537[3], 0, 24);
  int v538 = 1684434036;
  int v190 = 0;
  sub_1CE02C((uint64_t)&v525, &v190);
  v191[0] = &v525;
  v191[1] = 1;
  CFDictionaryRef v52 = sub_4D3D8((uint64_t)v191);
  v527[0] = 1651074168;
  CFDictionaryRef v528 = v52;
  CFTypeRef v192 = 0;
  int v187 = 0;
  sub_1CE110((uint64_t)&v523, &v187);
  v188[0] = &v523;
  v188[1] = 1;
  CFDictionaryRef v53 = sub_4D3D8((uint64_t)v188);
  int v529 = 1920365171;
  CFDictionaryRef v530 = v53;
  CFTypeRef v189 = 0;
  v540 = 0;
  v541 = 0;
  v539 = 0;
  *(void *)&long long v499 = &v539;
  BYTE8(v499) = 0;
  uint64_t v54 = (char *)operator new(0x20uLL);
  uint64_t v55 = 0;
  v539 = v54;
  v540 = v54;
  v541 = v54 + 32;
  do
  {
    sub_6D16C((uint64_t)&v54[v55 * 4], v527[v55], *(CFTypeRef *)&v527[v55 + 2]);
    v55 += 4;
  }
  while (v55 != 8);
  v545[0] = 0;
  v545[1] = 0;
  long long v542 = 0u;
  long long v543 = 0u;
  v540 = v54 + 32;
  v544 = v545;
  v548 = 0;
  v546 = 0;
  v547 = 0;
  uint64_t v56 = operator new(8uLL);
  v546 = v56;
  *uint64_t v56 = 0x100000002;
  v548 = v56 + 1;
  v547 = v56 + 1;
  char v549 = 0;
  char v550 = 0;
  memset(v551, 0, sizeof(v551));
  uint64_t v552 = 0;
  long long v499 = xmmword_5968C4;
  uint64_t v500 = 2;
  sub_6D1AC((uint64_t)v551, (int *)&v499, 3);
  char v553 = 0;
  uint64_t v554 = 0;
  sub_6D224(v1000, (long long *)v193, &v531);
  sub_21C8C(v185, "beamformed_mic_voice_recognition");
  sub_21C8C(&v499, "beam_mic_voice_recognition");
  uint64_t v502 = 0;
  uint64_t v501 = 0;
  uint64_t v503 = 0;
  sub_21C8C(v504, "beam_mic_voice_recognition");
  sub_21C8C(v505, "beam_mic_voice_recognition");
  memset(&v505[3], 0, 24);
  int v506 = 1684434036;
  int v182 = 0;
  sub_1CE02C((uint64_t)&v493, &v182);
  v183[0] = &v493;
  v183[1] = 1;
  CFDictionaryRef v57 = sub_4D3D8((uint64_t)v183);
  v495[0] = 1651074168;
  CFDictionaryRef v496 = v57;
  CFTypeRef v184 = 0;
  int v179 = 0;
  sub_1CE110((uint64_t)&v491, &v179);
  v180[0] = &v491;
  v180[1] = 1;
  CFDictionaryRef v58 = sub_4D3D8((uint64_t)v180);
  int v497 = 1920365171;
  CFDictionaryRef v498 = v58;
  CFTypeRef v181 = 0;
  v508 = 0;
  v509 = 0;
  v507 = 0;
  *(void *)&long long v468 = &v507;
  BYTE8(v468) = 0;
  uint64_t v59 = (char *)operator new(0x20uLL);
  uint64_t v60 = 0;
  v507 = v59;
  v508 = v59;
  v509 = v59 + 32;
  do
  {
    sub_6D16C((uint64_t)&v59[v60 * 4], v495[v60], *(CFTypeRef *)&v495[v60 + 2]);
    v60 += 4;
  }
  while (v60 != 8);
  v513[0] = 0;
  v513[1] = 0;
  long long v510 = 0u;
  long long v511 = 0u;
  v508 = v59 + 32;
  v512 = v513;
  v516 = 0;
  v514 = 0;
  v515 = 0;
  char v61 = operator new(8uLL);
  v514 = v61;
  *char v61 = 0x100000002;
  v516 = v61 + 1;
  v515 = v61 + 1;
  char v517 = 0;
  char v518 = 0;
  memset(v519, 0, sizeof(v519));
  uint64_t v520 = 0;
  long long v468 = xmmword_5968C4;
  uint64_t v469 = 2;
  sub_6D1AC((uint64_t)v519, (int *)&v468, 3);
  char v521 = 0;
  uint64_t v522 = 0;
  sub_6D224(v1001, (long long *)v185, &v499);
  sub_21C8C(v177, "siri_barge_in");
  sub_21C8C(&v468, "mic_voice_recognition");
  uint64_t v471 = 0;
  uint64_t v470 = 0;
  uint64_t v472 = 0;
  sub_21C8C(v473, "mic_voice_recognition");
  sub_21C8C(v474, "mic_voice_recognition");
  memset(&v474[3], 0, 24);
  int v475 = 1684434036;
  v481[0] = 0;
  v481[1] = 0;
  long long v476 = 0u;
  long long v477 = 0u;
  long long v478 = 0u;
  uint64_t v479 = 0;
  v480 = v481;
  v484 = 0;
  v482 = 0;
  v483 = 0;
  char v62 = operator new(0x10uLL);
  v482 = v62;
  *char v62 = xmmword_4E7970;
  v484 = v62 + 1;
  v483 = v62 + 1;
  char v485 = 0;
  char v486 = 0;
  memset(v487, 0, sizeof(v487));
  uint64_t v488 = 0;
  long long v444 = xmmword_5968C4;
  uint64_t v445 = 2;
  sub_6D1AC((uint64_t)v487, (int *)&v444, 3);
  char v489 = 0;
  uint64_t v490 = 0;
  sub_6D224(v1002, (long long *)v177, &v468);
  sub_21C8C(v175, "beamformed_mic_video_recording");
  sub_21C8C(&v444, "beam_mic_video_recording");
  uint64_t v447 = 0;
  uint64_t v446 = 0;
  uint64_t v448 = 0;
  sub_21C8C(v449, "beam_mic_video_recording");
  sub_21C8C(v450, "beam_mic_video_recording");
  memset(&v450[3], 0, 24);
  int v451 = 1684434036;
  int v172 = 0;
  sub_1CE02C((uint64_t)&v438, &v172);
  v173[0] = &v438;
  v173[1] = 1;
  CFDictionaryRef v63 = sub_4D3D8((uint64_t)v173);
  v440[0] = 1651074168;
  CFDictionaryRef v441 = v63;
  CFTypeRef v174 = 0;
  int v169 = 0;
  sub_1CE110((uint64_t)&v436, &v169);
  v170[0] = &v436;
  v170[1] = 1;
  CFDictionaryRef v64 = sub_4D3D8((uint64_t)v170);
  int v442 = 1920365171;
  CFDictionaryRef v443 = v64;
  CFTypeRef v171 = 0;
  v453 = 0;
  v454 = 0;
  v452 = 0;
  *(void *)&long long v412 = &v452;
  BYTE8(v412) = 0;
  int v65 = (char *)operator new(0x20uLL);
  uint64_t v66 = 0;
  v452 = v65;
  v453 = v65;
  v454 = v65 + 32;
  do
  {
    sub_6D16C((uint64_t)&v65[v66 * 4], v440[v66], *(CFTypeRef *)&v440[v66 + 2]);
    v66 += 4;
  }
  while (v66 != 8);
  v458[0] = 0;
  v458[1] = 0;
  long long v455 = 0u;
  long long v456 = 0u;
  v453 = v65 + 32;
  v457 = v458;
  v461 = 0;
  v459 = 0;
  v460 = 0;
  uint64_t v67 = operator new(8uLL);
  v459 = v67;
  void *v67 = 0x100000002;
  v461 = v67 + 1;
  v460 = v67 + 1;
  char v462 = 0;
  char v463 = 0;
  memset(v464, 0, sizeof(v464));
  uint64_t v465 = 0;
  long long v412 = xmmword_5968C4;
  uint64_t v413 = 2;
  sub_6D1AC((uint64_t)v464, (int *)&v412, 3);
  char v466 = 0;
  uint64_t v467 = 0;
  sub_6D224(v1003, (long long *)v175, &v444);
  sub_21C8C(v167, "spatial_video_recording");
  sub_21C8C(&v412, "spatial_video_recording");
  uint64_t v415 = 0;
  uint64_t v414 = 0;
  uint64_t v416 = 0;
  sub_21C8C(v417, "mic_spatial");
  sub_21C8C(v418, "mic_spatial");
  memset(&v418[3], 0, 24);
  int v419 = 1684434036;
  int v68 = operator new(8uLL);
  *int v68 = 0x7472696D706D6269;
  v161[1] = v68 + 1;
  v161[2] = v68 + 1;
  v161[0] = v68;
  CFArrayRef v69 = sub_650B4((int **)v161);
  CFTypeRef v405 = v69;
  v163 = 0;
  v164 = 0;
  v162 = 0;
  *(void *)&long long v376 = &v162;
  BYTE8(v376) = 0;
  v162 = (uint64_t *)operator new(8uLL);
  v163 = v162;
  __int16 v70 = v162 + 1;
  v164 = v162 + 1;
  sub_1CE2D0(v162, v69);
  v163 = v70;
  sub_1CE30C((uint64_t)&v406, &v162);
  v165[0] = &v406;
  v165[1] = 1;
  CFDictionaryRef v71 = sub_4D3D8((uint64_t)v165);
  v408[0] = 1684303986;
  CFDictionaryRef v409 = v71;
  CFTypeRef v166 = 0;
  __int16 v72 = operator new(0xCuLL);
  v402 = (char *)(v72 + 3);
  *(void *)__int16 v72 = 0x6473706700000000;
  v72[2] = 1969844082;
  v400 = v72;
  v401 = v72 + 3;
  v157 = 0;
  v158 = 0;
  v156 = 0;
  *(void *)&long long v376 = &v156;
  BYTE8(v376) = 0;
  v156 = operator new(0x18uLL);
  v157 = v156;
  v158 = v156 + 3;
  v157 = sub_1CDC20((uint64_t)&v158, (uint64_t)&v400, (uint64_t)&v403, v156);
  sub_1CDCD4((uint64_t)&v403, (uint64_t *)&v156);
  v159[0] = &v403;
  v159[1] = 1;
  CFDictionaryRef v73 = sub_4D3D8((uint64_t)v159);
  int v410 = 1768907891;
  CFDictionaryRef v411 = v73;
  CFTypeRef v160 = 0;
  v421 = 0;
  v422 = 0;
  v420 = 0;
  *(void *)&long long v376 = &v420;
  BYTE8(v376) = 0;
  __int16 v74 = (char *)operator new(0x20uLL);
  uint64_t v75 = 0;
  v420 = v74;
  v421 = v74;
  v422 = v74 + 32;
  do
  {
    sub_6D16C((uint64_t)&v74[v75 * 4], v408[v75], *(CFTypeRef *)&v408[v75 + 2]);
    v75 += 4;
  }
  while (v75 != 8);
  v426[0] = 0;
  v426[1] = 0;
  long long v423 = 0u;
  long long v424 = 0u;
  v421 = v74 + 32;
  v425 = v426;
  v429 = 0;
  v427 = 0;
  v428 = 0;
  __int16 v76 = operator new(0x10uLL);
  v427 = v76;
  *__int16 v76 = xmmword_4E7970;
  v429 = v76 + 1;
  v428 = v76 + 1;
  char v430 = 0;
  char v431 = 0;
  memset(v432, 0, sizeof(v432));
  uint64_t v433 = 0;
  long long v376 = xmmword_5968C4;
  uint64_t v377 = 2;
  sub_6D1AC((uint64_t)v432, (int *)&v376, 3);
  char v434 = 0;
  uint64_t v435 = 0;
  sub_6D224(v1004, (long long *)v167, &v412);
  sub_21C8C(v154, "multicam_recording");
  sub_21C8C(&v376, "multicam");
  uint64_t v379 = 0;
  uint64_t v378 = 0;
  uint64_t v380 = 0;
  sub_21C8C(v381, "multicam");
  sub_21C8C(v382, "multicam");
  memset(&v382[3], 0, 24);
  int v383 = 1684434036;
  unsigned int v77 = operator new(0xCuLL);
  v151[1] = v77 + 3;
  v151[2] = v77 + 3;
  *(void *)unsigned int v77 = 0x300000002;
  uint64_t v77[2] = 4;
  v151[0] = v77;
  sub_1CE360((uint64_t)&v372, (int **)v151);
  v152[0] = &v372;
  v152[1] = 1;
  CFDictionaryRef v78 = sub_4D3D8((uint64_t)v152);
  int v374 = 1667789676;
  CFTypeRef v375 = v78;
  CFTypeRef v153 = 0;
  v385 = 0;
  v386 = 0;
  v384 = 0;
  *(void *)&long long v348 = &v384;
  BYTE8(v348) = 0;
  v384 = (char *)operator new(0x10uLL);
  v385 = v384;
  unsigned __int8 v79 = v384 + 16;
  v386 = v384 + 16;
  sub_6D16C((uint64_t)v384, 1667789676, v78);
  v390[0] = 0;
  v390[1] = 0;
  long long v387 = 0u;
  long long v388 = 0u;
  v385 = v79;
  v389 = v390;
  v393 = 0;
  v391 = 0;
  v392 = 0;
  __int16 v80 = operator new(8uLL);
  v391 = v80;
  *__int16 v80 = 0x300000004;
  v393 = v80 + 1;
  v392 = v80 + 1;
  char v394 = 0;
  char v395 = 0;
  memset(v396, 0, sizeof(v396));
  uint64_t v397 = 0;
  long long v348 = xmmword_5968C4;
  uint64_t v349 = 2;
  sub_6D1AC((uint64_t)v396, (int *)&v348, 3);
  char v398 = 0;
  uint64_t v399 = 0;
  sub_6D224(v1005, (long long *)v154, &v376);
  sub_21C8C(v149, "stereo_recording");
  sub_21C8C(&v348, "stereo_recording_no_tap");
  uint64_t v351 = 0;
  uint64_t v350 = 0;
  uint64_t v352 = 0;
  sub_21C8C(v353, "mic_spatial");
  sub_21C8C(v354, "mic_spatial");
  memset(&v354[3], 0, 24);
  int v355 = 1684434036;
  long long v81 = operator new(8uLL);
  *long long v81 = 0x7472696D706D6269;
  v143[1] = v81 + 1;
  v143[2] = v81 + 1;
  v143[0] = v81;
  CFArrayRef v82 = sub_650B4((int **)v143);
  CFTypeRef v343 = v82;
  v145 = 0;
  v146 = 0;
  v144 = 0;
  *(void *)&long long v318 = &v144;
  BYTE8(v318) = 0;
  v144 = (uint64_t *)operator new(8uLL);
  v145 = v144;
  uint64_t v83 = v144 + 1;
  v146 = v144 + 1;
  sub_1CE2D0(v144, v82);
  v145 = v83;
  sub_1CE30C((uint64_t)&v344, &v144);
  v147[0] = &v344;
  v147[1] = 1;
  CFDictionaryRef v84 = sub_4D3D8((uint64_t)v147);
  int v346 = 1684303986;
  CFTypeRef cf = v84;
  CFTypeRef v148 = 0;
  v357 = 0;
  v358 = 0;
  v356 = 0;
  *(void *)&long long v318 = &v356;
  BYTE8(v318) = 0;
  v356 = (char *)operator new(0x10uLL);
  v357 = v356;
  uint64_t v85 = v356 + 16;
  v358 = v356 + 16;
  sub_6D16C((uint64_t)v356, 1684303986, v84);
  v362[0] = 0;
  v362[1] = 0;
  long long v359 = 0u;
  long long v360 = 0u;
  v357 = v85;
  v361 = v362;
  v365 = 0;
  v363 = 0;
  v364 = 0;
  unsigned int v86 = operator new(8uLL);
  v363 = v86;
  *unsigned int v86 = 0x200000004;
  v365 = v86 + 1;
  v364 = v86 + 1;
  char v366 = 0;
  char v367 = 0;
  memset(v368, 0, sizeof(v368));
  uint64_t v369 = 0;
  long long v318 = xmmword_5968C4;
  uint64_t v319 = 2;
  sub_6D1AC((uint64_t)v368, (int *)&v318, 3);
  char v370 = 0;
  uint64_t v371 = 0;
  sub_6D224(v1006, (long long *)v149, &v348);
  sub_21C8C(__p, "actuator_general");
  sub_21C8C(&v318, "actuator_general");
  uint64_t v321 = 0;
  uint64_t v320 = 0;
  uint64_t v322 = 0;
  sub_21C8C(v323, "actuator_general");
  long long v326 = 0u;
  long long v325 = 0u;
  long long v324 = 0u;
  int v327 = 1684434036;
  v333[0] = 0;
  v333[1] = 0;
  long long v328 = 0u;
  long long v329 = 0u;
  long long v330 = 0u;
  uint64_t v331 = 0;
  v332 = v333;
  v336 = 0;
  v334 = 0;
  v335 = 0;
  float v87 = operator new(8uLL);
  v334 = v87;
  *float v87 = 0x100000002;
  v336 = v87 + 1;
  v335 = v87 + 1;
  char v337 = 0;
  char v338 = 0;
  memset(v339, 0, sizeof(v339));
  uint64_t v340 = 0;
  long long v1008 = xmmword_5968C4;
  uint64_t v1009 = 2;
  sub_6D1AC((uint64_t)v339, (int *)&v1008, 3);
  char v341 = 0;
  uint64_t v342 = 0;
  sub_6D224(v1007, (long long *)__p, &v318);
  sub_6D2A0(v2, (unsigned __int8 *)v977, 31);
  for (uint64_t i = 0; i != -10168; i -= 328)
  {
    sub_6C878((uint64_t)&v1007[i + 24]);
    if ((char)v1007[i + 23] < 0) {
      operator delete(*(void **)&v1007[i]);
    }
  }
  sub_6C878((uint64_t)&v318);
  if (v142 < 0) {
    operator delete(__p[0]);
  }
  sub_6C878((uint64_t)&v348);
  if (cf) {
    CFRelease(cf);
  }
  if (v148) {
    CFRelease(v148);
  }
  if (v345) {
    CFRelease(v345);
  }
  if (v344) {
    CFRelease(v344);
  }
  *(void *)&long long v318 = &v144;
  sub_15CB74((void ***)&v318);
  if (v343) {
    CFRelease(v343);
  }
  if (v143[0]) {
    operator delete(v143[0]);
  }
  if (v150 < 0) {
    operator delete(v149[0]);
  }
  sub_6C878((uint64_t)&v376);
  if (v375) {
    CFRelease(v375);
  }
  if (v153) {
    CFRelease(v153);
  }
  if (v373) {
    CFRelease(v373);
  }
  if (v372) {
    CFRelease(v372);
  }
  if (v151[0]) {
    operator delete(v151[0]);
  }
  if (v155 < 0) {
    operator delete(v154[0]);
  }
  sub_6C878((uint64_t)&v412);
  for (uint64_t j = 6; j != -2; j -= 4)
  {
    v90 = *(const void **)&v408[j];
    if (v90) {
      CFRelease(v90);
    }
  }
  if (v160) {
    CFRelease(v160);
  }
  if (v404) {
    CFRelease(v404);
  }
  if (v403) {
    CFRelease(v403);
  }
  *(void *)&long long v376 = &v156;
  sub_15B944((void ***)&v376);
  if (v400)
  {
    v401 = v400;
    operator delete(v400);
  }
  if (v166) {
    CFRelease(v166);
  }
  if (v407) {
    CFRelease(v407);
  }
  if (v406) {
    CFRelease(v406);
  }
  *(void *)&long long v376 = &v162;
  sub_15CB74((void ***)&v376);
  if (v405) {
    CFRelease(v405);
  }
  if (v161[0]) {
    operator delete(v161[0]);
  }
  if (v168 < 0) {
    operator delete(v167[0]);
  }
  sub_6C878((uint64_t)&v444);
  for (uint64_t k = 6; k != -2; k -= 4)
  {
    CFMutableDictionaryRef v92 = *(const void **)&v440[k];
    if (v92) {
      CFRelease(v92);
    }
  }
  if (v171) {
    CFRelease(v171);
  }
  if (v437) {
    CFRelease(v437);
  }
  if (v436) {
    CFRelease(v436);
  }
  if (v174) {
    CFRelease(v174);
  }
  if (v439) {
    CFRelease(v439);
  }
  if (v438) {
    CFRelease(v438);
  }
  if (v176 < 0) {
    operator delete(v175[0]);
  }
  sub_6C878((uint64_t)&v468);
  if (v178 < 0) {
    operator delete(v177[0]);
  }
  sub_6C878((uint64_t)&v499);
  for (uint64_t m = 6; m != -2; m -= 4)
  {
    uint64_t v94 = *(const void **)&v495[m];
    if (v94) {
      CFRelease(v94);
    }
  }
  if (v181) {
    CFRelease(v181);
  }
  if (v492) {
    CFRelease(v492);
  }
  if (v491) {
    CFRelease(v491);
  }
  if (v184) {
    CFRelease(v184);
  }
  if (v494) {
    CFRelease(v494);
  }
  if (v493) {
    CFRelease(v493);
  }
  if (v186 < 0) {
    operator delete(v185[0]);
  }
  sub_6C878((uint64_t)&v531);
  for (uint64_t n = 6; n != -2; n -= 4)
  {
    int v96 = *(const void **)&v527[n];
    if (v96) {
      CFRelease(v96);
    }
  }
  if (v189) {
    CFRelease(v189);
  }
  if (v524) {
    CFRelease(v524);
  }
  if (v523) {
    CFRelease(v523);
  }
  if (v192) {
    CFRelease(v192);
  }
  if (v526) {
    CFRelease(v526);
  }
  if (v525) {
    CFRelease(v525);
  }
  if (v194 < 0) {
    operator delete(v193[0]);
  }
  sub_6C878((uint64_t)&v558);
  if (v557) {
    CFRelease(v557);
  }
  if (v197) {
    CFRelease(v197);
  }
  for (iuint64_t i = 0; ii != -32; ii -= 16)
  {
    double v98 = *(const void **)&v556[ii / 4 + 2];
    if (v98) {
      CFRelease(v98);
    }
    CFStringRef v99 = v555[ii / 8 + 2];
    if (v99) {
      CFRelease(v99);
    }
  }
  if (v199 < 0) {
    operator delete(v198[0]);
  }
  sub_6C878((uint64_t)&v582);
  if (v581) {
    CFRelease(v581);
  }
  if (v202) {
    CFRelease(v202);
  }
  for (juint64_t j = 0; jj != -32; jj -= 16)
  {
    __int16 v101 = *(const void **)&v580[jj / 4 + 2];
    if (v101) {
      CFRelease(v101);
    }
    CFStringRef v102 = v579[jj / 8 + 2];
    if (v102) {
      CFRelease(v102);
    }
  }
  if (v204 < 0) {
    operator delete(v203[0]);
  }
  sub_6C878((uint64_t)&v611);
  for (kuint64_t k = 6; kk != -2; kk -= 4)
  {
    double v104 = *(const void **)&v607[kk];
    if (v104) {
      CFRelease(v104);
    }
  }
  if (v207) {
    CFRelease(v207);
  }
  if (v604) {
    CFRelease(v604);
  }
  if (v603) {
    CFRelease(v603);
  }
  if (v210) {
    CFRelease(v210);
  }
  if (v606) {
    CFRelease(v606);
  }
  if (v605) {
    CFRelease(v605);
  }
  if (v212 < 0) {
    operator delete(v211[0]);
  }
  sub_6C878((uint64_t)&v638);
  if (v637) {
    CFRelease(v637);
  }
  if (v215) {
    CFRelease(v215);
  }
  for (muint64_t m = 0; mm != -32; mm -= 16)
  {
    double v106 = *(const void **)&v636[mm / 4 + 2];
    if (v106) {
      CFRelease(v106);
    }
    CFStringRef v107 = v635[mm / 8 + 2];
    if (v107) {
      CFRelease(v107);
    }
  }
  if (v217 < 0) {
    operator delete(v216[0]);
  }
  sub_6C878((uint64_t)&v662);
  if (v661) {
    CFRelease(v661);
  }
  if (v220) {
    CFRelease(v220);
  }
  for (nuint64_t n = 0; nn != -32; nn -= 16)
  {
    __int16 v109 = *(const void **)&v660[nn / 4 + 2];
    if (v109) {
      CFRelease(v109);
    }
    CFStringRef v110 = v659[nn / 8 + 2];
    if (v110) {
      CFRelease(v110);
    }
  }
  if (v222 < 0) {
    operator delete(v221[0]);
  }
  sub_6C878((uint64_t)&v686);
  if (v685) {
    CFRelease(v685);
  }
  if (v225) {
    CFRelease(v225);
  }
  for (unint64_t i1 = 0; i1 != -32; i1 -= 16)
  {
    double v112 = *(const void **)&v684[i1 / 4 + 2];
    if (v112) {
      CFRelease(v112);
    }
    CFStringRef v113 = v683[i1 / 8 + 2];
    if (v113) {
      CFRelease(v113);
    }
  }
  if (v227 < 0) {
    operator delete(v226[0]);
  }
  sub_6C878((uint64_t)&v710);
  if (v709) {
    CFRelease(v709);
  }
  if (v230) {
    CFRelease(v230);
  }
  for (unint64_t i2 = 0; i2 != -32; i2 -= 16)
  {
    unint64_t v115 = *(const void **)&v708[i2 / 4 + 2];
    if (v115) {
      CFRelease(v115);
    }
    CFStringRef v116 = v707[i2 / 8 + 2];
    if (v116) {
      CFRelease(v116);
    }
  }
  if (v232 < 0) {
    operator delete(v231[0]);
  }
  sub_6C878((uint64_t)&v731);
  if (v234 < 0) {
    operator delete(v233[0]);
  }
  sub_6C878((uint64_t)&v762);
  for (uint64_t i3 = 6; i3 != -2; i3 -= 4)
  {
    __int16 v118 = *(const void **)&v758[i3];
    if (v118) {
      CFRelease(v118);
    }
  }
  if (v237) {
    CFRelease(v237);
  }
  if (v755) {
    CFRelease(v755);
  }
  if (v754) {
    CFRelease(v754);
  }
  if (v240) {
    CFRelease(v240);
  }
  if (v757) {
    CFRelease(v757);
  }
  if (v756) {
    CFRelease(v756);
  }
  if (v242 < 0) {
    operator delete(v241[0]);
  }
  sub_6C878((uint64_t)&v794);
  for (uint64_t i4 = 6; i4 != -2; i4 -= 4)
  {
    unint64_t v120 = *(const void **)&v790[i4];
    if (v120) {
      CFRelease(v120);
    }
  }
  if (v245) {
    CFRelease(v245);
  }
  if (v787) {
    CFRelease(v787);
  }
  if (v786) {
    CFRelease(v786);
  }
  if (v248) {
    CFRelease(v248);
  }
  if (v789) {
    CFRelease(v789);
  }
  if (v788) {
    CFRelease(v788);
  }
  if (v250 < 0) {
    operator delete(v249[0]);
  }
  sub_6C878((uint64_t)&v821);
  if (v820) {
    CFRelease(v820);
  }
  if (v253) {
    CFRelease(v253);
  }
  for (unint64_t i5 = 0; i5 != -32; i5 -= 16)
  {
    unint64_t v122 = *(const void **)&v819[i5 / 4 + 2];
    if (v122) {
      CFRelease(v122);
    }
    CFStringRef v123 = v818[i5 / 8 + 2];
    if (v123) {
      CFRelease(v123);
    }
  }
  if (v255 < 0) {
    operator delete(v254[0]);
  }
  sub_6C878((uint64_t)&v845);
  if (v844) {
    CFRelease(v844);
  }
  if (v258) {
    CFRelease(v258);
  }
  for (unint64_t i6 = 0; i6 != -32; i6 -= 16)
  {
    std::string::size_type v125 = *(const void **)&v843[i6 / 4 + 2];
    if (v125) {
      CFRelease(v125);
    }
    CFStringRef v126 = v842[i6 / 8 + 2];
    if (v126) {
      CFRelease(v126);
    }
  }
  if (v260 < 0) {
    operator delete(v259[0]);
  }
  sub_6C878((uint64_t)&v869);
  if (v868) {
    CFRelease(v868);
  }
  if (v263) {
    CFRelease(v263);
  }
  for (unint64_t i7 = 0; i7 != -32; i7 -= 16)
  {
    v128 = *(const void **)&v867[i7 / 4 + 2];
    if (v128) {
      CFRelease(v128);
    }
    CFStringRef v129 = v866[i7 / 8 + 2];
    if (v129) {
      CFRelease(v129);
    }
  }
  if (v265 < 0) {
    operator delete(v264[0]);
  }
  sub_6C878((uint64_t)&v893);
  if (v892) {
    CFRelease(v892);
  }
  if (v268) {
    CFRelease(v268);
  }
  for (unint64_t i8 = 0; i8 != -32; i8 -= 16)
  {
    v131 = *(const void **)&v891[i8 / 4 + 2];
    if (v131) {
      CFRelease(v131);
    }
    CFStringRef v132 = v890[i8 / 8 + 2];
    if (v132) {
      CFRelease(v132);
    }
  }
  if (v270 < 0) {
    operator delete(v269[0]);
  }
  sub_6C878((uint64_t)&v917);
  if (v916) {
    CFRelease(v916);
  }
  if (v273) {
    CFRelease(v273);
  }
  for (unint64_t i9 = 0; i9 != -32; i9 -= 16)
  {
    int v134 = *(const void **)&v915[i9 / 4 + 2];
    if (v134) {
      CFRelease(v134);
    }
    CFStringRef v135 = v914[i9 / 8 + 2];
    if (v135) {
      CFRelease(v135);
    }
  }
  if (v275 < 0) {
    operator delete(v274[0]);
  }
  sub_6C878((uint64_t)&v947);
  for (uint64_t i10 = 6; i10 != -2; i10 -= 4)
  {
    uint64_t v137 = *(const void **)&v943[i10];
    if (v137) {
      CFRelease(v137);
    }
  }
  if (v280) {
    CFRelease(v280);
  }
  if (v942) {
    CFRelease(v942);
  }
  if (v941) {
    CFRelease(v941);
  }
  *(void *)&long long v917 = &v276;
  sub_15B944((void ***)&v917);
  if (v938)
  {
    v939 = v938;
    operator delete(v938);
  }
  if (v281) {
    CFRelease(v281);
  }
  if (v283 < 0) {
    operator delete(v282[0]);
  }
  sub_6C878((uint64_t)&v290);
  for (uint64_t i11 = 6; i11 != -2; i11 -= 4)
  {
    v139 = *(const void **)&v973[i11];
    if (v139) {
      CFRelease(v139);
    }
  }
  if (v288) {
    CFRelease(v288);
  }
  if (v972) {
    CFRelease(v972);
  }
  if (v971) {
    CFRelease(v971);
  }
  *(void *)&long long v947 = &v284;
  sub_15B944((void ***)&v947);
  if (v968)
  {
    v969 = v968;
    operator delete(v968);
  }
  if (v289) {
    CFRelease(v289);
  }
  if (v311 < 0) {
    operator delete(v310[0]);
  }
  sub_6C878((uint64_t)v312);
  sub_6C878((uint64_t)v313);
  sub_6C878((uint64_t)v314);
  sub_6C878((uint64_t)v315);
  sub_6C878((uint64_t)v316);
  return sub_6C878((uint64_t)v317);
}

void sub_1C33BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1C674C(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  v141 = (uint64_t *)sub_3EFF58();
  sub_1CD708((uint64_t)v321, "speaker_general");
  sub_1CDBCC(v986, "speaker_general", v321);
  sub_1CD708((uint64_t)v320, "speaker_latenight_general");
  sub_1CDBCC(v987, "speaker_latenight_general", v320);
  sub_1CD708((uint64_t)v319, "speaker_movie");
  sub_1CDBCC(v988, "speaker_movie", v319);
  sub_1CD708((uint64_t)v318, "speaker_latenight_movie");
  sub_1CDBCC(v989, "speaker_latenight_movie", v318);
  sub_1CD708((uint64_t)v317, "speaker_alarm");
  sub_1CDBCC(v990, "speaker_alarm", v317);
  sub_1CD708((uint64_t)v316, "speaker_ringtone");
  sub_1CDBCC(v991, "speaker_ringtone", v316);
  sub_21C8C(v314, "speaker_measurement");
  sub_21C8C(&v293, "speaker_measurement");
  uint64_t v295 = 0;
  uint64_t v294 = 0;
  uint64_t v296 = 0;
  sub_21C8C(v297, "speaker_measurement");
  sub_21C8C(v298, "speaker_measurement");
  uint64_t v140 = v2;
  memset(&v298[3], 0, 24);
  int v299 = 1668051824;
  CFTypeRef v292 = 0;
  v980[0] = 1936746861;
  uint64_t v981 = 0;
  int v3 = operator new(0xCuLL);
  v977 = (char *)(v3 + 3);
  *(void *)int v3 = 0x6473706700000001;
  v3[2] = 1869768046;
  int v975 = v3;
  CFDictionaryRef v976 = v3 + 3;
  CFTypeRef v289 = 0;
  v287 = 0;
  CFTypeRef v288 = 0;
  *(void *)&long long v953 = &v287;
  BYTE8(v953) = 0;
  v287 = operator new(0x18uLL);
  CFTypeRef v288 = v287;
  CFTypeRef v289 = v287 + 3;
  CFTypeRef v288 = sub_1CDC20((uint64_t)&v289, (uint64_t)&v975, (uint64_t)&v978, v287);
  sub_1CDCD4((uint64_t)&v978, (uint64_t *)&v287);
  v290[0] = &v978;
  v290[1] = 1;
  CFDictionaryRef v4 = sub_4D3D8((uint64_t)v290);
  int v982 = 1768907891;
  CFDictionaryRef v983 = v4;
  CFTypeRef v291 = 0;
  CFTypeRef v286 = 0;
  int v984 = 1936749683;
  uint64_t v985 = 0;
  long long v301 = 0;
  v302 = 0;
  long long v300 = 0;
  *(void *)&long long v953 = &v300;
  BYTE8(v953) = 0;
  CFDictionaryRef v5 = (char *)operator new(0x30uLL);
  uint64_t v6 = 0;
  long long v300 = v5;
  long long v301 = v5;
  v302 = v5 + 48;
  do
  {
    sub_6D16C((uint64_t)&v5[v6 * 4], v980[v6], *(CFTypeRef *)&v980[v6 + 2]);
    v6 += 4;
  }
  while (v6 != 12);
  long long v301 = v5 + 48;
  long long v303 = 0u;
  long long v304 = 0u;
  uint64_t v7 = operator new(4uLL);
  *((void *)&v303 + 1) = v7;
  *uint64_t v7 = 1987405668;
  *((void *)&v304 + 1) = v7 + 1;
  *(void *)&long long v304 = v7 + 1;
  v306[0] = 0;
  v306[1] = 0;
  char v305 = v306;
  memset(v307, 0, sizeof(v307));
  sub_6E5D0((char *)v307, (uint64_t *)qword_64CAA8, (uint64_t *)qword_64CAB0, (qword_64CAB0 - qword_64CAA8) >> 3);
  char v308 = 0;
  char v309 = 0;
  memset(v310, 0, sizeof(v310));
  uint64_t v311 = 0;
  long long v953 = xmmword_5968C4;
  uint64_t v954 = 2;
  sub_6D1AC((uint64_t)v310, (int *)&v953, 3);
  char v312 = 0;
  uint64_t v313 = 0;
  sub_6D224(v992, (long long *)v314, &v293);
  sub_21C8C(v284, "speaker_raw");
  sub_21C8C(&v953, "speaker_raw");
  uint64_t v956 = 0;
  uint64_t v955 = 0;
  uint64_t v957 = 0;
  sub_21C8C(v958, "speaker_measurement");
  sub_21C8C(v959, "speaker_raw");
  memset(&v959[3], 0, 24);
  int v960 = 1668051824;
  CFTypeRef v283 = 0;
  v947[0] = 1936746861;
  uint64_t v948 = 0;
  char v8 = operator new(0xCuLL);
  uint64_t v944 = (char *)(v8 + 3);
  *(void *)char v8 = 0x6473706700000001;
  v8[2] = 1869768046;
  CFTypeRef v942 = v8;
  v943 = v8 + 3;
  CFTypeRef v280 = 0;
  v278 = 0;
  v279 = 0;
  *(void *)&long long v921 = &v278;
  BYTE8(v921) = 0;
  v278 = operator new(0x18uLL);
  v279 = v278;
  CFTypeRef v280 = v278 + 3;
  v279 = sub_1CDC20((uint64_t)&v280, (uint64_t)&v942, (uint64_t)&v945, v278);
  sub_1CDCD4((uint64_t)&v945, (uint64_t *)&v278);
  v281[0] = &v945;
  v281[1] = 1;
  CFDictionaryRef v9 = sub_4D3D8((uint64_t)v281);
  int v949 = 1768907891;
  CFDictionaryRef v950 = v9;
  CFTypeRef v282 = 0;
  CFTypeRef v277 = 0;
  int v951 = 1936749683;
  uint64_t v952 = 0;
  char v962 = 0;
  char v963 = 0;
  v961 = 0;
  *(void *)&long long v921 = &v961;
  BYTE8(v921) = 0;
  CFDictionaryRef v10 = (char *)operator new(0x30uLL);
  uint64_t v11 = 0;
  v961 = v10;
  char v962 = v10;
  char v963 = v10 + 48;
  do
  {
    sub_6D16C((uint64_t)&v10[v11 * 4], v947[v11], *(CFTypeRef *)&v947[v11 + 2]);
    v11 += 4;
  }
  while (v11 != 12);
  char v962 = v10 + 48;
  long long v964 = 0u;
  long long v965 = 0u;
  uint64_t v12 = operator new(4uLL);
  *((void *)&v964 + 1) = v12;
  *uint64_t v12 = 1987405668;
  *((void *)&v965 + 1) = v12 + 1;
  *(void *)&long long v965 = v12 + 1;
  v967[0] = 0;
  v967[1] = 0;
  char v966 = v967;
  memset(v968, 0, sizeof(v968));
  sub_6E5D0((char *)v968, (uint64_t *)qword_64CAA8, (uint64_t *)qword_64CAB0, (qword_64CAB0 - qword_64CAA8) >> 3);
  char v969 = 0;
  char v970 = 0;
  memset(v971, 0, sizeof(v971));
  uint64_t v972 = 0;
  long long v921 = xmmword_5968C4;
  uint64_t v922 = 2;
  sub_6D1AC((uint64_t)v971, (int *)&v921, 3);
  char v973 = 0;
  uint64_t v974 = 0;
  sub_6D224(v993, (long long *)v284, &v953);
  sub_21C8C(v275, "front_mic_general");
  sub_21C8C(&v921, "front_mic_general");
  uint64_t v924 = 0;
  uint64_t v923 = 0;
  uint64_t v925 = 0;
  sub_21C8C(v926, "front_mic_general");
  sub_21C8C(v927, "front_mic_general");
  memset(&v927[3], 0, 24);
  int v928 = 1684434036;
  sub_1CDF04(v918, "aufx-firf-appl");
  int v272 = sub_8598C(v141, 0x666E7431u);
  sub_1CDF58((uint64_t)v919, "VPMicIndex", &v272);
  v273[0] = v918;
  v273[1] = 2;
  CFDictionaryRef v13 = sub_4D3D8((uint64_t)v273);
  v919[4] = 1718186601;
  CFTypeRef v920 = v13;
  CFTypeRef v274 = 0;
  v930 = 0;
  v931 = 0;
  long long v929 = 0;
  *(void *)&long long v897 = &v929;
  BYTE8(v897) = 0;
  long long v929 = (char *)operator new(0x10uLL);
  v930 = v929;
  CFDictionaryRef v14 = v929 + 16;
  v931 = v929 + 16;
  sub_6D16C((uint64_t)v929, 1718186601, v13);
  memset(v935, 0, sizeof(v935));
  long long v932 = 0u;
  long long v933 = 0u;
  v930 = v14;
  v934 = v935;
  char v937 = 0;
  memset(v938, 0, sizeof(v938));
  uint64_t v939 = 0;
  char v936 = 0;
  long long v897 = xmmword_5968C4;
  uint64_t v898 = 2;
  sub_6D1AC((uint64_t)v938, (int *)&v897, 3);
  char v940 = 0;
  uint64_t v941 = 0;
  sub_6D224(v994, (long long *)v275, &v921);
  sub_21C8C(v270, "bottom_mic_general");
  sub_21C8C(&v897, "bottom_mic_general");
  uint64_t v900 = 0;
  uint64_t v899 = 0;
  uint64_t v901 = 0;
  sub_21C8C(v902, "bottom_mic_general");
  sub_21C8C(v903, "bottom_mic_general");
  memset(&v903[3], 0, 24);
  int v904 = 1684434036;
  sub_1CDF04(v894, "aufx-firf-appl");
  int v267 = sub_8598C(v141, 0x62746D31u);
  sub_1CDF58((uint64_t)v895, "VPMicIndex", &v267);
  v268[0] = v894;
  v268[1] = 2;
  CFDictionaryRef v15 = sub_4D3D8((uint64_t)v268);
  v895[4] = 1718186601;
  CFTypeRef v896 = v15;
  CFTypeRef v269 = 0;
  v906 = 0;
  v907 = 0;
  long long v905 = 0;
  *(void *)&long long v873 = &v905;
  BYTE8(v873) = 0;
  long long v905 = (char *)operator new(0x10uLL);
  v906 = v905;
  CFDictionaryRef v16 = v905 + 16;
  v907 = v905 + 16;
  sub_6D16C((uint64_t)v905, 1718186601, v15);
  memset(v911, 0, sizeof(v911));
  long long v908 = 0u;
  long long v909 = 0u;
  v906 = v16;
  v910 = v911;
  char v913 = 0;
  memset(v914, 0, sizeof(v914));
  uint64_t v915 = 0;
  char v912 = 0;
  long long v873 = xmmword_5968C4;
  uint64_t v874 = 2;
  sub_6D1AC((uint64_t)v914, (int *)&v873, 3);
  char v916 = 0;
  uint64_t v917 = 0;
  sub_6D224(v995, (long long *)v270, &v897);
  sub_21C8C(v265, "bottom_mic_hearing_accessibility");
  sub_21C8C(&v873, "bottom_mic_hearing_accessibility");
  uint64_t v876 = 0;
  uint64_t v875 = 0;
  uint64_t v877 = 0;
  sub_21C8C(v878, "bottom_mic_hearing_accessibility");
  sub_21C8C(v879, "bottom_mic_hearing_accessibility");
  memset(&v879[3], 0, 24);
  int v880 = 1684434036;
  sub_1CDF04(v870, "aufx-firf-appl");
  int v262 = sub_8598C(v141, 0x62746D31u);
  sub_1CDF58((uint64_t)v871, "VPMicIndex", &v262);
  v263[0] = v870;
  v263[1] = 2;
  CFDictionaryRef v17 = sub_4D3D8((uint64_t)v263);
  v871[4] = 1718186601;
  CFTypeRef v872 = v17;
  CFTypeRef v264 = 0;
  v882 = 0;
  v883 = 0;
  long long v881 = 0;
  *(void *)&long long v849 = &v881;
  BYTE8(v849) = 0;
  long long v881 = (char *)operator new(0x10uLL);
  v882 = v881;
  CFDictionaryRef v18 = v881 + 16;
  v883 = v881 + 16;
  sub_6D16C((uint64_t)v881, 1718186601, v17);
  memset(v887, 0, sizeof(v887));
  long long v884 = 0u;
  long long v885 = 0u;
  v882 = v18;
  v886 = v887;
  char v889 = 0;
  memset(v890, 0, sizeof(v890));
  uint64_t v891 = 0;
  char v888 = 0;
  long long v849 = xmmword_5968C4;
  uint64_t v850 = 2;
  sub_6D1AC((uint64_t)v890, (int *)&v849, 3);
  char v892 = 0;
  uint64_t v893 = 0;
  sub_6D224(v996, (long long *)v265, &v873);
  sub_21C8C(v260, "bottom_mic2_general");
  sub_21C8C(&v849, "bottom_mic_general");
  uint64_t v852 = 0;
  uint64_t v851 = 0;
  uint64_t v853 = 0;
  sub_21C8C(v854, "bottom_mic_general");
  sub_21C8C(v855, "bottom_mic_general");
  memset(&v855[3], 0, 24);
  int v856 = 1684434036;
  sub_1CDF04(v846, "aufx-firf-appl");
  int v257 = sub_8598C(v141, 0x62746D32u);
  sub_1CDF58((uint64_t)v847, "VPMicIndex", &v257);
  v258[0] = v846;
  v258[1] = 2;
  CFDictionaryRef v19 = sub_4D3D8((uint64_t)v258);
  v847[4] = 1718186601;
  CFTypeRef v848 = v19;
  CFTypeRef v259 = 0;
  v858 = 0;
  v859 = 0;
  long long v857 = 0;
  *(void *)&long long v825 = &v857;
  BYTE8(v825) = 0;
  long long v857 = (char *)operator new(0x10uLL);
  v858 = v857;
  CFDictionaryRef v20 = v857 + 16;
  v859 = v857 + 16;
  sub_6D16C((uint64_t)v857, 1718186601, v19);
  memset(v863, 0, sizeof(v863));
  long long v860 = 0u;
  long long v861 = 0u;
  v858 = v20;
  v862 = v863;
  char v865 = 0;
  memset(v866, 0, sizeof(v866));
  uint64_t v867 = 0;
  char v864 = 0;
  long long v825 = xmmword_5968C4;
  uint64_t v826 = 2;
  sub_6D1AC((uint64_t)v866, (int *)&v825, 3);
  char v868 = 0;
  uint64_t v869 = 0;
  sub_6D224(v997, (long long *)v260, &v849);
  sub_21C8C(v255, "back_mic_general");
  sub_21C8C(&v825, "back_mic_general");
  uint64_t v828 = 0;
  uint64_t v827 = 0;
  uint64_t v829 = 0;
  sub_21C8C(v830, "back_mic_general");
  sub_21C8C(v831, "back_mic_general");
  memset(&v831[3], 0, 24);
  int v832 = 1684434036;
  sub_1CDF04(v822, "aufx-firf-appl");
  int v252 = sub_8598C(v141, 0x62616B31u);
  sub_1CDF58((uint64_t)v823, "VPMicIndex", &v252);
  v253[0] = v822;
  v253[1] = 2;
  CFDictionaryRef v21 = sub_4D3D8((uint64_t)v253);
  v823[4] = 1718186601;
  CFTypeRef v824 = v21;
  CFTypeRef v254 = 0;
  v834 = 0;
  v835 = 0;
  long long v833 = 0;
  *(void *)&long long v798 = &v833;
  BYTE8(v798) = 0;
  long long v833 = (char *)operator new(0x10uLL);
  v834 = v833;
  CFDictionaryRef v22 = v833 + 16;
  v835 = v833 + 16;
  sub_6D16C((uint64_t)v833, 1718186601, v21);
  memset(v839, 0, sizeof(v839));
  long long v836 = 0u;
  long long v837 = 0u;
  v834 = v22;
  v838 = v839;
  char v841 = 0;
  memset(v842, 0, sizeof(v842));
  uint64_t v843 = 0;
  char v840 = 0;
  long long v798 = xmmword_5968C4;
  uint64_t v799 = 2;
  sub_6D1AC((uint64_t)v842, (int *)&v798, 3);
  char v844 = 0;
  uint64_t v845 = 0;
  sub_6D224(v998, (long long *)v255, &v825);
  sub_21C8C(v250, "beamformed_mic_general");
  sub_21C8C(&v798, "beam_mic_general");
  uint64_t v801 = 0;
  uint64_t v800 = 0;
  uint64_t v802 = 0;
  sub_21C8C(v803, "beam_mic_general");
  sub_21C8C(v804, "beam_mic_general");
  memset(&v804[3], 0, 24);
  int v805 = 1684434036;
  int v247 = 0;
  sub_1CE02C((uint64_t)&v792, &v247);
  v248[0] = &v792;
  v248[1] = 1;
  CFDictionaryRef v23 = sub_4D3D8((uint64_t)v248);
  v794[0] = 1651074168;
  CFDictionaryRef v795 = v23;
  CFTypeRef v249 = 0;
  int v244 = 0;
  sub_1CE110((uint64_t)&v790, &v244);
  v245[0] = &v790;
  v245[1] = 1;
  CFDictionaryRef v24 = sub_4D3D8((uint64_t)v245);
  int v796 = 1920365171;
  CFDictionaryRef v797 = v24;
  CFTypeRef v246 = 0;
  v807 = 0;
  v808 = 0;
  long long v806 = 0;
  *(void *)&long long v766 = &v806;
  BYTE8(v766) = 0;
  CFDictionaryRef v25 = (char *)operator new(0x20uLL);
  uint64_t v26 = 0;
  long long v806 = v25;
  v807 = v25;
  v808 = v25 + 32;
  do
  {
    sub_6D16C((uint64_t)&v25[v26 * 4], v794[v26], *(CFTypeRef *)&v794[v26 + 2]);
    v26 += 4;
  }
  while (v26 != 8);
  v812[0] = 0;
  v812[1] = 0;
  long long v809 = 0u;
  long long v810 = 0u;
  v807 = v25 + 32;
  v811 = v812;
  uint64_t v815 = 0;
  char v813 = 0;
  v814 = 0;
  uint64_t v27 = operator new(8uLL);
  char v813 = v27;
  *uint64_t v27 = 0x100000002;
  uint64_t v815 = v27 + 1;
  v814 = v27 + 1;
  char v816 = 0;
  char v817 = 0;
  memset(v818, 0, sizeof(v818));
  uint64_t v819 = 0;
  long long v766 = xmmword_5968C4;
  uint64_t v767 = 2;
  sub_6D1AC((uint64_t)v818, (int *)&v766, 3);
  char v820 = 0;
  uint64_t v821 = 0;
  sub_6D224(v999, (long long *)v250, &v798);
  sub_21C8C(v242, "mic_peripheral");
  sub_21C8C(&v766, "mic_peripheral");
  uint64_t v769 = 0;
  uint64_t v768 = 0;
  uint64_t v770 = 0;
  sub_21C8C(v771, "mic_peripheral");
  sub_21C8C(v772, "mic_peripheral");
  memset(&v772[3], 0, 24);
  int v773 = 1684434036;
  int v239 = 1;
  sub_1CE1EC((uint64_t)&v760, &v239);
  v240[0] = &v760;
  v240[1] = 1;
  CFDictionaryRef v28 = sub_4D3D8((uint64_t)v240);
  v762[0] = 1651074168;
  CFDictionaryRef v763 = v28;
  CFTypeRef v241 = 0;
  int v236 = 0;
  sub_1CE110((uint64_t)&v758, &v236);
  v237[0] = &v758;
  v237[1] = 1;
  CFDictionaryRef v29 = sub_4D3D8((uint64_t)v237);
  int v764 = 1920365171;
  CFDictionaryRef v765 = v29;
  CFTypeRef v238 = 0;
  v775 = 0;
  v776 = 0;
  long long v774 = 0;
  *(void *)&long long v735 = &v774;
  BYTE8(v735) = 0;
  CFDictionaryRef v30 = (char *)operator new(0x20uLL);
  uint64_t v31 = 0;
  long long v774 = v30;
  v775 = v30;
  v776 = v30 + 32;
  do
  {
    sub_6D16C((uint64_t)&v30[v31 * 4], v762[v31], *(CFTypeRef *)&v762[v31 + 2]);
    v31 += 4;
  }
  while (v31 != 8);
  v780[0] = 0;
  v780[1] = 0;
  long long v777 = 0u;
  long long v778 = 0u;
  v775 = v30 + 32;
  v779 = v780;
  uint64_t v783 = 0;
  char v781 = 0;
  v782 = 0;
  uint64_t v32 = operator new(8uLL);
  char v781 = v32;
  void *v32 = 0x100000002;
  uint64_t v783 = v32 + 1;
  v782 = v32 + 1;
  char v784 = 0;
  char v785 = 0;
  memset(v786, 0, sizeof(v786));
  uint64_t v787 = 0;
  long long v735 = xmmword_5968C4;
  uint64_t v736 = 2;
  sub_6D1AC((uint64_t)v786, (int *)&v735, 3);
  char v788 = 0;
  uint64_t v789 = 0;
  sub_6D224(v1000, (long long *)v242, &v766);
  sub_21C8C(v234, "mic_peripheral_allmics");
  sub_21C8C(&v735, "mic_peripheral_sender_all_mics");
  uint64_t v738 = 0;
  uint64_t v737 = 0;
  uint64_t v739 = 0;
  sub_21C8C(v740, "mic_peripheral_sender_all_mics");
  sub_21C8C(v741, "mic_peripheral_sender_all_mics");
  memset(&v741[3], 0, 24);
  int v742 = 1684434036;
  v748[0] = 0;
  v748[1] = 0;
  long long v743 = 0u;
  long long v744 = 0u;
  long long v745 = 0u;
  uint64_t v746 = 0;
  v747 = v748;
  uint64_t v751 = 0;
  char v749 = 0;
  v750 = 0;
  uint64_t v33 = operator new(8uLL);
  char v749 = v33;
  *uint64_t v33 = 0x400000004;
  uint64_t v751 = v33 + 1;
  v750 = v33 + 1;
  char v752 = 0;
  char v753 = 0;
  memset(v754, 0, sizeof(v754));
  uint64_t v755 = 0;
  long long v714 = xmmword_5968C4;
  uint64_t v715 = 2;
  sub_6D1AC((uint64_t)v754, (int *)&v714, 3);
  char v756 = 0;
  uint64_t v757 = 0;
  sub_6D224(v1001, (long long *)v234, &v735);
  sub_21C8C(v232, "front_mic_measurement");
  sub_21C8C(&v714, "front_mic_measurement");
  uint64_t v717 = 0;
  uint64_t v716 = 0;
  uint64_t v718 = 0;
  sub_21C8C(v719, "front_mic_measurement");
  sub_21C8C(v720, "front_mic_measurement");
  memset(&v720[3], 0, 24);
  int v721 = 1684434036;
  sub_1CDF04(v711, "aufx-firf-appl");
  int v229 = sub_8598C(v141, 0x666E7431u);
  sub_1CDF58((uint64_t)v712, "VPMicIndex", &v229);
  v230[0] = v711;
  v230[1] = 2;
  CFDictionaryRef v34 = sub_4D3D8((uint64_t)v230);
  v712[4] = 1718186601;
  CFTypeRef v713 = v34;
  CFTypeRef v231 = 0;
  v723 = 0;
  v724 = 0;
  long long v722 = 0;
  *(void *)&long long v690 = &v722;
  BYTE8(v690) = 0;
  long long v722 = (char *)operator new(0x10uLL);
  v723 = v722;
  CFDictionaryRef v35 = v722 + 16;
  v724 = v722 + 16;
  sub_6D16C((uint64_t)v722, 1718186601, v34);
  memset(v728, 0, sizeof(v728));
  long long v725 = 0u;
  long long v726 = 0u;
  v723 = v35;
  v727 = v728;
  char v730 = 0;
  memset(v731, 0, sizeof(v731));
  uint64_t v732 = 0;
  char v729 = 0;
  long long v690 = xmmword_5968C4;
  uint64_t v691 = 2;
  sub_6D1AC((uint64_t)v731, (int *)&v690, 3);
  char v733 = 0;
  uint64_t v734 = 0;
  sub_6D224(v1002, (long long *)v232, &v714);
  sub_21C8C(v227, "bottom_mic_measurement");
  sub_21C8C(&v690, "bottom_mic_measurement");
  uint64_t v693 = 0;
  uint64_t v692 = 0;
  uint64_t v694 = 0;
  sub_21C8C(v695, "bottom_mic_measurement");
  sub_21C8C(v696, "bottom_mic_measurement");
  memset(&v696[3], 0, 24);
  int v697 = 1684434036;
  sub_1CDF04(v687, "aufx-firf-appl");
  int v224 = sub_8598C(v141, 0x62746D31u);
  sub_1CDF58((uint64_t)v688, "VPMicIndex", &v224);
  v225[0] = v687;
  v225[1] = 2;
  CFDictionaryRef v36 = sub_4D3D8((uint64_t)v225);
  v688[4] = 1718186601;
  CFTypeRef v689 = v36;
  CFTypeRef v226 = 0;
  v699 = 0;
  v700 = 0;
  long long v698 = 0;
  *(void *)&long long v666 = &v698;
  BYTE8(v666) = 0;
  long long v698 = (char *)operator new(0x10uLL);
  v699 = v698;
  CFDictionaryRef v37 = v698 + 16;
  v700 = v698 + 16;
  sub_6D16C((uint64_t)v698, 1718186601, v36);
  memset(v704, 0, sizeof(v704));
  long long v701 = 0u;
  long long v702 = 0u;
  v699 = v37;
  v703 = v704;
  char v706 = 0;
  memset(v707, 0, sizeof(v707));
  uint64_t v708 = 0;
  char v705 = 0;
  long long v666 = xmmword_5968C4;
  uint64_t v667 = 2;
  sub_6D1AC((uint64_t)v707, (int *)&v666, 3);
  char v709 = 0;
  uint64_t v710 = 0;
  sub_6D224(v1003, (long long *)v227, &v690);
  sub_21C8C(v222, "bottom_mic2_measurement");
  sub_21C8C(&v666, "bottom_mic_measurement");
  uint64_t v669 = 0;
  uint64_t v668 = 0;
  uint64_t v670 = 0;
  sub_21C8C(v671, "bottom_mic_measurement");
  sub_21C8C(v672, "bottom_mic_measurement");
  memset(&v672[3], 0, 24);
  int v673 = 1684434036;
  sub_1CDF04(v663, "aufx-firf-appl");
  int v219 = sub_8598C(v141, 0x62746D32u);
  sub_1CDF58((uint64_t)v664, "VPMicIndex", &v219);
  v220[0] = v663;
  v220[1] = 2;
  CFDictionaryRef v38 = sub_4D3D8((uint64_t)v220);
  v664[4] = 1718186601;
  CFTypeRef v665 = v38;
  CFTypeRef v221 = 0;
  v675 = 0;
  v676 = 0;
  long long v674 = 0;
  *(void *)&long long v642 = &v674;
  BYTE8(v642) = 0;
  long long v674 = (char *)operator new(0x10uLL);
  v675 = v674;
  CFDictionaryRef v39 = v674 + 16;
  v676 = v674 + 16;
  sub_6D16C((uint64_t)v674, 1718186601, v38);
  memset(v680, 0, sizeof(v680));
  long long v677 = 0u;
  long long v678 = 0u;
  v675 = v39;
  v679 = v680;
  char v682 = 0;
  memset(v683, 0, sizeof(v683));
  uint64_t v684 = 0;
  char v681 = 0;
  long long v642 = xmmword_5968C4;
  uint64_t v643 = 2;
  sub_6D1AC((uint64_t)v683, (int *)&v642, 3);
  char v685 = 0;
  uint64_t v686 = 0;
  sub_6D224(v1004, (long long *)v222, &v666);
  sub_21C8C(v217, "back_mic_measurement");
  sub_21C8C(&v642, "back_mic_measurement");
  uint64_t v645 = 0;
  uint64_t v644 = 0;
  uint64_t v646 = 0;
  sub_21C8C(v647, "back_mic_measurement");
  sub_21C8C(v648, "back_mic_measurement");
  memset(&v648[3], 0, 24);
  int v649 = 1684434036;
  sub_1CDF04(v639, "aufx-firf-appl");
  int v214 = sub_8598C(v141, 0x62616B31u);
  sub_1CDF58((uint64_t)v640, "VPMicIndex", &v214);
  v215[0] = v639;
  v215[1] = 2;
  CFDictionaryRef v40 = sub_4D3D8((uint64_t)v215);
  v640[4] = 1718186601;
  CFTypeRef v641 = v40;
  CFTypeRef v216 = 0;
  v651 = 0;
  v652 = 0;
  long long v650 = 0;
  *(void *)&long long v615 = &v650;
  BYTE8(v615) = 0;
  long long v650 = (char *)operator new(0x10uLL);
  v651 = v650;
  CFDictionaryRef v41 = v650 + 16;
  v652 = v650 + 16;
  sub_6D16C((uint64_t)v650, 1718186601, v40);
  memset(v656, 0, sizeof(v656));
  long long v653 = 0u;
  long long v654 = 0u;
  v651 = v41;
  v655 = v656;
  char v658 = 0;
  memset(v659, 0, sizeof(v659));
  uint64_t v660 = 0;
  char v657 = 0;
  long long v615 = xmmword_5968C4;
  uint64_t v616 = 2;
  sub_6D1AC((uint64_t)v659, (int *)&v615, 3);
  char v661 = 0;
  uint64_t v662 = 0;
  sub_6D224(v1005, (long long *)v217, &v642);
  sub_21C8C(v212, "beamformed_mic_measurement");
  sub_21C8C(&v615, "beam_mic_measurement");
  uint64_t v618 = 0;
  uint64_t v617 = 0;
  uint64_t v619 = 0;
  sub_21C8C(v620, "beam_mic_measurement");
  sub_21C8C(v621, "beam_mic_measurement");
  memset(&v621[3], 0, 24);
  int v622 = 1684434036;
  int v209 = 0;
  sub_1CE02C((uint64_t)&v609, &v209);
  v210[0] = &v609;
  v210[1] = 1;
  CFDictionaryRef v42 = sub_4D3D8((uint64_t)v210);
  v611[0] = 1651074168;
  CFDictionaryRef v612 = v42;
  CFTypeRef v211 = 0;
  int v206 = 0;
  sub_1CE110((uint64_t)&v607, &v206);
  v207[0] = &v607;
  v207[1] = 1;
  CFDictionaryRef v43 = sub_4D3D8((uint64_t)v207);
  int v613 = 1920365171;
  CFDictionaryRef v614 = v43;
  CFTypeRef v208 = 0;
  v624 = 0;
  v625 = 0;
  long long v623 = 0;
  *(void *)&long long v586 = &v623;
  BYTE8(v586) = 0;
  CFDictionaryRef v44 = (char *)operator new(0x20uLL);
  uint64_t v45 = 0;
  long long v623 = v44;
  v624 = v44;
  v625 = v44 + 32;
  do
  {
    sub_6D16C((uint64_t)&v44[v45 * 4], v611[v45], *(CFTypeRef *)&v611[v45 + 2]);
    v45 += 4;
  }
  while (v45 != 8);
  v629[0] = 0;
  v629[1] = 0;
  long long v626 = 0u;
  long long v627 = 0u;
  v624 = v44 + 32;
  v628 = v629;
  uint64_t v632 = 0;
  char v630 = 0;
  v631 = 0;
  uint64_t v46 = operator new(8uLL);
  char v630 = v46;
  void *v46 = 0x100000002;
  uint64_t v632 = v46 + 1;
  v631 = v46 + 1;
  char v633 = 0;
  char v634 = 0;
  memset(v635, 0, sizeof(v635));
  uint64_t v636 = 0;
  long long v586 = xmmword_5968C4;
  uint64_t v587 = 2;
  sub_6D1AC((uint64_t)v635, (int *)&v586, 3);
  char v637 = 0;
  uint64_t v638 = 0;
  sub_6D224(v1006, (long long *)v212, &v615);
  sub_21C8C(v204, "bottom_mic_voice_messages");
  sub_21C8C(&v586, "bottom_mic_voice_messages");
  uint64_t v589 = 0;
  uint64_t v588 = 0;
  uint64_t v590 = 0;
  sub_21C8C(v591, "bottom_mic_voice_messages");
  sub_21C8C(v592, "bottom_mic_voice_messages");
  memset(&v592[3], 0, 24);
  int v593 = 1684434036;
  sub_1CDF04(v583, "aufx-firf-appl");
  int v201 = sub_8598C(v141, 0x62746D31u);
  sub_1CDF58((uint64_t)v584, "VPMicIndex", &v201);
  v202[0] = v583;
  v202[1] = 2;
  CFDictionaryRef v47 = sub_4D3D8((uint64_t)v202);
  v584[4] = 1718186601;
  CFTypeRef v585 = v47;
  CFTypeRef v203 = 0;
  v595 = 0;
  v596 = 0;
  long long v594 = 0;
  *(void *)&long long v562 = &v594;
  BYTE8(v562) = 0;
  long long v594 = (char *)operator new(0x10uLL);
  v595 = v594;
  CFDictionaryRef v48 = v594 + 16;
  v596 = v594 + 16;
  sub_6D16C((uint64_t)v594, 1718186601, v47);
  memset(v600, 0, sizeof(v600));
  long long v597 = 0u;
  long long v598 = 0u;
  v595 = v48;
  v599 = v600;
  char v602 = 0;
  memset(v603, 0, sizeof(v603));
  uint64_t v604 = 0;
  char v601 = 0;
  long long v562 = xmmword_5968C4;
  uint64_t v563 = 2;
  sub_6D1AC((uint64_t)v603, (int *)&v562, 3);
  char v605 = 0;
  uint64_t v606 = 0;
  sub_6D224(v1007, (long long *)v204, &v586);
  sub_21C8C(v199, "bottom_mic_voice_recognition");
  sub_21C8C(&v562, "bottom_mic_voice_recognition");
  uint64_t v565 = 0;
  uint64_t v564 = 0;
  uint64_t v566 = 0;
  sub_21C8C(v567, "bottom_mic_voice_recognition");
  sub_21C8C(v568, "bottom_mic_voice_recognition");
  memset(&v568[3], 0, 24);
  int v569 = 1684434036;
  sub_1CDF04(v559, "aufx-firf-appl");
  int v196 = sub_8598C(v141, 0x62746D31u);
  sub_1CDF58((uint64_t)v560, "VPMicIndex", &v196);
  v197[0] = v559;
  v197[1] = 2;
  CFDictionaryRef v49 = sub_4D3D8((uint64_t)v197);
  v560[4] = 1718186601;
  CFTypeRef v561 = v49;
  CFTypeRef v198 = 0;
  v571 = 0;
  v572 = 0;
  long long v570 = 0;
  *(void *)&long long v535 = &v570;
  BYTE8(v535) = 0;
  long long v570 = (char *)operator new(0x10uLL);
  v571 = v570;
  CFDictionaryRef v50 = v570 + 16;
  v572 = v570 + 16;
  sub_6D16C((uint64_t)v570, 1718186601, v49);
  memset(v576, 0, sizeof(v576));
  long long v573 = 0u;
  long long v574 = 0u;
  v571 = v50;
  v575 = v576;
  char v578 = 0;
  memset(v579, 0, sizeof(v579));
  uint64_t v580 = 0;
  char v577 = 0;
  long long v535 = xmmword_5968C4;
  uint64_t v536 = 2;
  sub_6D1AC((uint64_t)v579, (int *)&v535, 3);
  char v581 = 0;
  uint64_t v582 = 0;
  sub_6D224(v1008, (long long *)v199, &v562);
  sub_21C8C(v194, "beamformed_mic_voice_messages");
  sub_21C8C(&v535, "beam_mic_voice_messages");
  uint64_t v538 = 0;
  uint64_t v537 = 0;
  uint64_t v539 = 0;
  sub_21C8C(v540, "beam_mic_voice_messages");
  sub_21C8C(v541, "beam_mic_voice_messages");
  memset(&v541[3], 0, 24);
  int v542 = 1684434036;
  int v191 = 0;
  sub_1CE02C((uint64_t)&v529, &v191);
  v192[0] = &v529;
  v192[1] = 1;
  CFDictionaryRef v51 = sub_4D3D8((uint64_t)v192);
  v531[0] = 1651074168;
  CFDictionaryRef v532 = v51;
  CFTypeRef v193 = 0;
  int v188 = 0;
  sub_1CE110((uint64_t)&v527, &v188);
  v189[0] = &v527;
  v189[1] = 1;
  CFDictionaryRef v52 = sub_4D3D8((uint64_t)v189);
  int v533 = 1920365171;
  CFDictionaryRef v534 = v52;
  CFTypeRef v190 = 0;
  v544 = 0;
  v545 = 0;
  long long v543 = 0;
  *(void *)&long long v503 = &v543;
  BYTE8(v503) = 0;
  CFDictionaryRef v53 = (char *)operator new(0x20uLL);
  uint64_t v54 = 0;
  long long v543 = v53;
  v544 = v53;
  v545 = v53 + 32;
  do
  {
    sub_6D16C((uint64_t)&v53[v54 * 4], v531[v54], *(CFTypeRef *)&v531[v54 + 2]);
    v54 += 4;
  }
  while (v54 != 8);
  v549[0] = 0;
  v549[1] = 0;
  long long v546 = 0u;
  long long v547 = 0u;
  v544 = v53 + 32;
  v548 = v549;
  uint64_t v552 = 0;
  char v550 = 0;
  v551 = 0;
  uint64_t v55 = operator new(8uLL);
  char v550 = v55;
  *uint64_t v55 = 0x100000002;
  uint64_t v552 = v55 + 1;
  v551 = v55 + 1;
  char v553 = 0;
  char v554 = 0;
  memset(v555, 0, sizeof(v555));
  uint64_t v556 = 0;
  long long v503 = xmmword_5968C4;
  uint64_t v504 = 2;
  sub_6D1AC((uint64_t)v555, (int *)&v503, 3);
  char v557 = 0;
  uint64_t v558 = 0;
  sub_6D224(v1009, (long long *)v194, &v535);
  sub_21C8C(v186, "beamformed_mic_voice_recognition");
  sub_21C8C(&v503, "beam_mic_voice_recognition");
  uint64_t v506 = 0;
  uint64_t v505 = 0;
  uint64_t v507 = 0;
  sub_21C8C(v508, "beam_mic_voice_recognition");
  sub_21C8C(v509, "beam_mic_voice_recognition");
  memset(&v509[3], 0, 24);
  int v510 = 1684434036;
  int v183 = 0;
  sub_1CE02C((uint64_t)&v497, &v183);
  v184[0] = &v497;
  v184[1] = 1;
  CFDictionaryRef v56 = sub_4D3D8((uint64_t)v184);
  v499[0] = 1651074168;
  CFDictionaryRef v500 = v56;
  CFTypeRef v185 = 0;
  int v180 = 0;
  sub_1CE110((uint64_t)&v495, &v180);
  v181[0] = &v495;
  v181[1] = 1;
  CFDictionaryRef v57 = sub_4D3D8((uint64_t)v181);
  int v501 = 1920365171;
  CFDictionaryRef v502 = v57;
  CFTypeRef v182 = 0;
  v512 = 0;
  v513 = 0;
  long long v511 = 0;
  *(void *)&long long v472 = &v511;
  BYTE8(v472) = 0;
  CFDictionaryRef v58 = (char *)operator new(0x20uLL);
  uint64_t v59 = 0;
  long long v511 = v58;
  v512 = v58;
  v513 = v58 + 32;
  do
  {
    sub_6D16C((uint64_t)&v58[v59 * 4], v499[v59], *(CFTypeRef *)&v499[v59 + 2]);
    v59 += 4;
  }
  while (v59 != 8);
  v517[0] = 0;
  v517[1] = 0;
  long long v514 = 0u;
  long long v515 = 0u;
  v512 = v58 + 32;
  v516 = v517;
  uint64_t v520 = 0;
  char v518 = 0;
  v519 = 0;
  uint64_t v60 = operator new(8uLL);
  char v518 = v60;
  *uint64_t v60 = 0x100000002;
  uint64_t v520 = v60 + 1;
  v519 = v60 + 1;
  char v521 = 0;
  char v522 = 0;
  memset(v523, 0, sizeof(v523));
  uint64_t v524 = 0;
  long long v472 = xmmword_5968C4;
  uint64_t v473 = 2;
  sub_6D1AC((uint64_t)v523, (int *)&v472, 3);
  char v525 = 0;
  uint64_t v526 = 0;
  sub_6D224(v1010, (long long *)v186, &v503);
  sub_21C8C(v178, "siri_barge_in");
  sub_21C8C(&v472, "mic_voice_recognition");
  uint64_t v475 = 0;
  uint64_t v474 = 0;
  uint64_t v476 = 0;
  sub_21C8C(v477, "mic_voice_recognition");
  sub_21C8C(v478, "mic_voice_recognition");
  memset(&v478[3], 0, 24);
  int v479 = 1684434036;
  v485[0] = 0;
  v485[1] = 0;
  long long v480 = 0u;
  long long v481 = 0u;
  long long v482 = 0u;
  uint64_t v483 = 0;
  v484 = v485;
  uint64_t v488 = 0;
  char v486 = 0;
  v487 = 0;
  char v61 = operator new(0x10uLL);
  char v486 = v61;
  *char v61 = xmmword_4E7970;
  uint64_t v488 = v61 + 1;
  v487 = v61 + 1;
  char v489 = 0;
  char v490 = 0;
  memset(v491, 0, sizeof(v491));
  uint64_t v492 = 0;
  long long v448 = xmmword_5968C4;
  uint64_t v449 = 2;
  sub_6D1AC((uint64_t)v491, (int *)&v448, 3);
  char v493 = 0;
  uint64_t v494 = 0;
  sub_6D224(v1011, (long long *)v178, &v472);
  sub_21C8C(v176, "beamformed_mic_video_recording");
  sub_21C8C(&v448, "beam_mic_video_recording");
  uint64_t v451 = 0;
  uint64_t v450 = 0;
  uint64_t v452 = 0;
  sub_21C8C(v453, "beam_mic_video_recording");
  sub_21C8C(v454, "beam_mic_video_recording");
  memset(&v454[3], 0, 24);
  int v455 = 1684434036;
  int v173 = 0;
  sub_1CE02C((uint64_t)&v442, &v173);
  v174[0] = &v442;
  v174[1] = 1;
  CFDictionaryRef v62 = sub_4D3D8((uint64_t)v174);
  v444[0] = 1651074168;
  CFDictionaryRef v445 = v62;
  CFTypeRef v175 = 0;
  int v170 = 0;
  sub_1CE110((uint64_t)&v440, &v170);
  v171[0] = &v440;
  v171[1] = 1;
  CFDictionaryRef v63 = sub_4D3D8((uint64_t)v171);
  int v446 = 1920365171;
  CFDictionaryRef v447 = v63;
  CFTypeRef v172 = 0;
  v457 = 0;
  v458 = 0;
  long long v456 = 0;
  *(void *)&long long v416 = &v456;
  BYTE8(v416) = 0;
  CFDictionaryRef v64 = (char *)operator new(0x20uLL);
  uint64_t v65 = 0;
  long long v456 = v64;
  v457 = v64;
  v458 = v64 + 32;
  do
  {
    sub_6D16C((uint64_t)&v64[v65 * 4], v444[v65], *(CFTypeRef *)&v444[v65 + 2]);
    v65 += 4;
  }
  while (v65 != 8);
  v462[0] = 0;
  v462[1] = 0;
  long long v459 = 0u;
  long long v460 = 0u;
  v457 = v64 + 32;
  v461 = v462;
  uint64_t v465 = 0;
  char v463 = 0;
  v464 = 0;
  uint64_t v66 = operator new(8uLL);
  char v463 = v66;
  *uint64_t v66 = 0x100000002;
  uint64_t v465 = v66 + 1;
  v464 = v66 + 1;
  char v466 = 0;
  char v467 = 0;
  memset(v468, 0, sizeof(v468));
  uint64_t v469 = 0;
  long long v416 = xmmword_5968C4;
  uint64_t v417 = 2;
  sub_6D1AC((uint64_t)v468, (int *)&v416, 3);
  char v470 = 0;
  uint64_t v471 = 0;
  sub_6D224(v1012, (long long *)v176, &v448);
  sub_21C8C(v168, "spatial_video_recording");
  sub_21C8C(&v416, "spatial_video_recording");
  uint64_t v419 = 0;
  uint64_t v418 = 0;
  uint64_t v420 = 0;
  sub_21C8C(v421, "mic_spatial");
  sub_21C8C(v422, "mic_spatial");
  memset(&v422[3], 0, 24);
  int v423 = 1684434036;
  uint64_t v67 = operator new(8uLL);
  void *v67 = 0x7472696D706D6269;
  v162[1] = v67 + 1;
  v162[2] = v67 + 1;
  v162[0] = v67;
  CFArrayRef v68 = sub_650B4((int **)v162);
  CFTypeRef v409 = v68;
  v164 = 0;
  v165 = 0;
  v163 = 0;
  *(void *)&long long v380 = &v163;
  BYTE8(v380) = 0;
  v163 = (uint64_t *)operator new(8uLL);
  v164 = v163;
  CFArrayRef v69 = v163 + 1;
  v165 = v163 + 1;
  sub_1CE2D0(v163, v68);
  v164 = v69;
  sub_1CE30C((uint64_t)&v410, &v163);
  v166[0] = &v410;
  v166[1] = 1;
  CFDictionaryRef v70 = sub_4D3D8((uint64_t)v166);
  v412[0] = 1684303986;
  CFDictionaryRef v413 = v70;
  CFTypeRef v167 = 0;
  CFDictionaryRef v71 = operator new(0xCuLL);
  CFTypeRef v406 = (char *)(v71 + 3);
  *(void *)CFDictionaryRef v71 = 0x6473706700000000;
  v71[2] = 1969844082;
  CFTypeRef v404 = v71;
  CFTypeRef v405 = v71 + 3;
  v158 = 0;
  v159 = 0;
  v157 = 0;
  *(void *)&long long v380 = &v157;
  BYTE8(v380) = 0;
  v157 = operator new(0x18uLL);
  v158 = v157;
  v159 = v157 + 3;
  v158 = sub_1CDC20((uint64_t)&v159, (uint64_t)&v404, (uint64_t)&v407, v157);
  sub_1CDCD4((uint64_t)&v407, (uint64_t *)&v157);
  v160[0] = &v407;
  v160[1] = 1;
  CFDictionaryRef v72 = sub_4D3D8((uint64_t)v160);
  int v414 = 1768907891;
  CFDictionaryRef v415 = v72;
  CFTypeRef v161 = 0;
  v425 = 0;
  v426 = 0;
  long long v424 = 0;
  *(void *)&long long v380 = &v424;
  BYTE8(v380) = 0;
  CFDictionaryRef v73 = (char *)operator new(0x20uLL);
  uint64_t v74 = 0;
  long long v424 = v73;
  v425 = v73;
  v426 = v73 + 32;
  do
  {
    sub_6D16C((uint64_t)&v73[v74 * 4], v412[v74], *(CFTypeRef *)&v412[v74 + 2]);
    v74 += 4;
  }
  while (v74 != 8);
  v430[0] = 0;
  v430[1] = 0;
  long long v427 = 0u;
  long long v428 = 0u;
  v425 = v73 + 32;
  v429 = v430;
  uint64_t v433 = 0;
  char v431 = 0;
  v432 = 0;
  uint64_t v75 = operator new(0x10uLL);
  char v431 = v75;
  *uint64_t v75 = xmmword_4E7970;
  uint64_t v433 = v75 + 1;
  v432 = v75 + 1;
  char v434 = 0;
  char v435 = 0;
  memset(v436, 0, sizeof(v436));
  uint64_t v437 = 0;
  long long v380 = xmmword_5968C4;
  uint64_t v381 = 2;
  sub_6D1AC((uint64_t)v436, (int *)&v380, 3);
  char v438 = 0;
  uint64_t v439 = 0;
  sub_6D224(v1013, (long long *)v168, &v416);
  sub_21C8C(v155, "multicam_recording");
  sub_21C8C(&v380, "multicam");
  uint64_t v383 = 0;
  uint64_t v382 = 0;
  uint64_t v384 = 0;
  sub_21C8C(v385, "multicam");
  sub_21C8C(v386, "multicam");
  memset(&v386[3], 0, 24);
  int v387 = 1684434036;
  __int16 v76 = operator new(0xCuLL);
  v152[1] = v76 + 3;
  void v152[2] = v76 + 3;
  *(void *)__int16 v76 = 0x300000002;
  v76[2] = 4;
  v152[0] = v76;
  sub_1CE360((uint64_t)&v376, (int **)v152);
  v153[0] = &v376;
  v153[1] = 1;
  CFDictionaryRef v77 = sub_4D3D8((uint64_t)v153);
  int v378 = 1667789676;
  CFTypeRef v379 = v77;
  CFTypeRef v154 = 0;
  v389 = 0;
  v390 = 0;
  long long v388 = 0;
  *(void *)&long long v352 = &v388;
  BYTE8(v352) = 0;
  long long v388 = (char *)operator new(0x10uLL);
  v389 = v388;
  CFDictionaryRef v78 = v388 + 16;
  v390 = v388 + 16;
  sub_6D16C((uint64_t)v388, 1667789676, v77);
  v394[0] = 0;
  v394[1] = 0;
  long long v391 = 0u;
  long long v392 = 0u;
  v389 = v78;
  v393 = v394;
  uint64_t v397 = 0;
  char v395 = 0;
  v396 = 0;
  unsigned __int8 v79 = operator new(8uLL);
  char v395 = v79;
  *unsigned __int8 v79 = 0x300000004;
  uint64_t v397 = v79 + 1;
  v396 = v79 + 1;
  char v398 = 0;
  char v399 = 0;
  memset(v400, 0, sizeof(v400));
  uint64_t v401 = 0;
  long long v352 = xmmword_5968C4;
  uint64_t v353 = 2;
  sub_6D1AC((uint64_t)v400, (int *)&v352, 3);
  char v402 = 0;
  uint64_t v403 = 0;
  sub_6D224(v1014, (long long *)v155, &v380);
  sub_21C8C(v150, "stereo_recording");
  sub_21C8C(&v352, "stereo_recording_no_tap");
  uint64_t v355 = 0;
  uint64_t v354 = 0;
  uint64_t v356 = 0;
  sub_21C8C(v357, "mic_spatial");
  sub_21C8C(v358, "mic_spatial");
  memset(&v358[3], 0, 24);
  int v359 = 1684434036;
  __int16 v80 = operator new(8uLL);
  *__int16 v80 = 0x7472696D706D6269;
  v144[1] = v80 + 1;
  v144[2] = v80 + 1;
  v144[0] = v80;
  CFArrayRef v81 = sub_650B4((int **)v144);
  CFTypeRef v347 = v81;
  v146 = 0;
  v147 = 0;
  v145 = 0;
  *(void *)&long long v322 = &v145;
  BYTE8(v322) = 0;
  v145 = (uint64_t *)operator new(8uLL);
  v146 = v145;
  CFArrayRef v82 = v145 + 1;
  v147 = v145 + 1;
  sub_1CE2D0(v145, v81);
  v146 = v82;
  sub_1CE30C((uint64_t)&v348, &v145);
  v148[0] = &v348;
  v148[1] = 1;
  CFDictionaryRef v83 = sub_4D3D8((uint64_t)v148);
  int v350 = 1684303986;
  CFTypeRef cf = v83;
  CFTypeRef v149 = 0;
  v361 = 0;
  v362 = 0;
  long long v360 = 0;
  *(void *)&long long v322 = &v360;
  BYTE8(v322) = 0;
  long long v360 = (char *)operator new(0x10uLL);
  v361 = v360;
  CFDictionaryRef v84 = v360 + 16;
  v362 = v360 + 16;
  sub_6D16C((uint64_t)v360, 1684303986, v83);
  v366[0] = 0;
  v366[1] = 0;
  long long v363 = 0u;
  long long v364 = 0u;
  v361 = v84;
  v365 = v366;
  uint64_t v369 = 0;
  char v367 = 0;
  v368 = 0;
  uint64_t v85 = operator new(8uLL);
  char v367 = v85;
  *uint64_t v85 = 0x200000004;
  uint64_t v369 = v85 + 1;
  v368 = v85 + 1;
  char v370 = 0;
  char v371 = 0;
  memset(v372, 0, sizeof(v372));
  uint64_t v373 = 0;
  long long v322 = xmmword_5968C4;
  uint64_t v323 = 2;
  sub_6D1AC((uint64_t)v372, (int *)&v322, 3);
  char v374 = 0;
  uint64_t v375 = 0;
  sub_6D224(v1015, (long long *)v150, &v352);
  sub_21C8C(__p, "actuator_general");
  sub_21C8C(&v322, "actuator_general");
  uint64_t v325 = 0;
  uint64_t v324 = 0;
  uint64_t v326 = 0;
  sub_21C8C(v327, "actuator_general");
  long long v330 = 0u;
  long long v329 = 0u;
  long long v328 = 0u;
  int v331 = 1684434036;
  v337[0] = 0;
  v337[1] = 0;
  long long v332 = 0u;
  long long v333 = 0u;
  long long v334 = 0u;
  uint64_t v335 = 0;
  v336 = v337;
  uint64_t v340 = 0;
  char v338 = 0;
  v339 = 0;
  unsigned int v86 = operator new(8uLL);
  char v338 = v86;
  *unsigned int v86 = 0x100000002;
  uint64_t v340 = v86 + 1;
  v339 = v86 + 1;
  char v341 = 0;
  char v342 = 0;
  memset(v343, 0, sizeof(v343));
  uint64_t v344 = 0;
  long long v1017 = xmmword_5968C4;
  uint64_t v1018 = 2;
  sub_6D1AC((uint64_t)v343, (int *)&v1017, 3);
  char v345 = 0;
  uint64_t v346 = 0;
  sub_6D224(v1016, (long long *)__p, &v322);
  sub_6D2A0(v140, (unsigned __int8 *)v986, 31);
  for (uint64_t i = 0; i != -10168; i -= 328)
  {
    sub_6C878((uint64_t)&v1016[i + 24]);
    if ((char)v1016[i + 23] < 0) {
      operator delete(*(void **)&v1016[i]);
    }
  }
  sub_6C878((uint64_t)&v322);
  if (v143 < 0) {
    operator delete(__p[0]);
  }
  sub_6C878((uint64_t)&v352);
  if (cf) {
    CFRelease(cf);
  }
  if (v149) {
    CFRelease(v149);
  }
  if (v349) {
    CFRelease(v349);
  }
  if (v348) {
    CFRelease(v348);
  }
  *(void *)&long long v322 = &v145;
  sub_15CB74((void ***)&v322);
  if (v347) {
    CFRelease(v347);
  }
  if (v144[0]) {
    operator delete(v144[0]);
  }
  if (v151 < 0) {
    operator delete(v150[0]);
  }
  sub_6C878((uint64_t)&v380);
  if (v379) {
    CFRelease(v379);
  }
  if (v154) {
    CFRelease(v154);
  }
  if (v377) {
    CFRelease(v377);
  }
  if (v376) {
    CFRelease(v376);
  }
  if (v152[0]) {
    operator delete(v152[0]);
  }
  if (v156 < 0) {
    operator delete(v155[0]);
  }
  sub_6C878((uint64_t)&v416);
  for (uint64_t j = 6; j != -2; j -= 4)
  {
    __int16 v89 = *(const void **)&v412[j];
    if (v89) {
      CFRelease(v89);
    }
  }
  if (v161) {
    CFRelease(v161);
  }
  if (v408) {
    CFRelease(v408);
  }
  if (v407) {
    CFRelease(v407);
  }
  *(void *)&long long v380 = &v157;
  sub_15B944((void ***)&v380);
  if (v404)
  {
    CFTypeRef v405 = v404;
    operator delete(v404);
  }
  if (v167) {
    CFRelease(v167);
  }
  if (v411) {
    CFRelease(v411);
  }
  if (v410) {
    CFRelease(v410);
  }
  *(void *)&long long v380 = &v163;
  sub_15CB74((void ***)&v380);
  if (v409) {
    CFRelease(v409);
  }
  if (v162[0]) {
    operator delete(v162[0]);
  }
  if (v169 < 0) {
    operator delete(v168[0]);
  }
  sub_6C878((uint64_t)&v448);
  for (uint64_t k = 6; k != -2; k -= 4)
  {
    unsigned int v91 = *(const void **)&v444[k];
    if (v91) {
      CFRelease(v91);
    }
  }
  if (v172) {
    CFRelease(v172);
  }
  if (v441) {
    CFRelease(v441);
  }
  if (v440) {
    CFRelease(v440);
  }
  if (v175) {
    CFRelease(v175);
  }
  if (v443) {
    CFRelease(v443);
  }
  if (v442) {
    CFRelease(v442);
  }
  if (v177 < 0) {
    operator delete(v176[0]);
  }
  sub_6C878((uint64_t)&v472);
  if (v179 < 0) {
    operator delete(v178[0]);
  }
  sub_6C878((uint64_t)&v503);
  for (uint64_t m = 6; m != -2; m -= 4)
  {
    std::string::size_type v93 = *(const void **)&v499[m];
    if (v93) {
      CFRelease(v93);
    }
  }
  if (v182) {
    CFRelease(v182);
  }
  if (v496) {
    CFRelease(v496);
  }
  if (v495) {
    CFRelease(v495);
  }
  if (v185) {
    CFRelease(v185);
  }
  if (v498) {
    CFRelease(v498);
  }
  if (v497) {
    CFRelease(v497);
  }
  if (v187 < 0) {
    operator delete(v186[0]);
  }
  sub_6C878((uint64_t)&v535);
  for (uint64_t n = 6; n != -2; n -= 4)
  {
    __int16 v95 = *(const void **)&v531[n];
    if (v95) {
      CFRelease(v95);
    }
  }
  if (v190) {
    CFRelease(v190);
  }
  if (v528) {
    CFRelease(v528);
  }
  if (v527) {
    CFRelease(v527);
  }
  if (v193) {
    CFRelease(v193);
  }
  if (v530) {
    CFRelease(v530);
  }
  if (v529) {
    CFRelease(v529);
  }
  if (v195 < 0) {
    operator delete(v194[0]);
  }
  sub_6C878((uint64_t)&v562);
  if (v561) {
    CFRelease(v561);
  }
  if (v198) {
    CFRelease(v198);
  }
  for (iuint64_t i = 0; ii != -32; ii -= 16)
  {
    __int16 v97 = *(const void **)&v560[ii / 4 + 2];
    if (v97) {
      CFRelease(v97);
    }
    CFStringRef v98 = v559[ii / 8 + 2];
    if (v98) {
      CFRelease(v98);
    }
  }
  if (v200 < 0) {
    operator delete(v199[0]);
  }
  sub_6C878((uint64_t)&v586);
  if (v585) {
    CFRelease(v585);
  }
  if (v203) {
    CFRelease(v203);
  }
  for (juint64_t j = 0; jj != -32; jj -= 16)
  {
    double v100 = *(const void **)&v584[jj / 4 + 2];
    if (v100) {
      CFRelease(v100);
    }
    CFStringRef v101 = v583[jj / 8 + 2];
    if (v101) {
      CFRelease(v101);
    }
  }
  if (v205 < 0) {
    operator delete(v204[0]);
  }
  sub_6C878((uint64_t)&v615);
  for (kuint64_t k = 6; kk != -2; kk -= 4)
  {
    __int16 v103 = *(const void **)&v611[kk];
    if (v103) {
      CFRelease(v103);
    }
  }
  if (v208) {
    CFRelease(v208);
  }
  if (v608) {
    CFRelease(v608);
  }
  if (v607) {
    CFRelease(v607);
  }
  if (v211) {
    CFRelease(v211);
  }
  if (v610) {
    CFRelease(v610);
  }
  if (v609) {
    CFRelease(v609);
  }
  if (v213 < 0) {
    operator delete(v212[0]);
  }
  sub_6C878((uint64_t)&v642);
  if (v641) {
    CFRelease(v641);
  }
  if (v216) {
    CFRelease(v216);
  }
  for (muint64_t m = 0; mm != -32; mm -= 16)
  {
    __int16 v105 = *(const void **)&v640[mm / 4 + 2];
    if (v105) {
      CFRelease(v105);
    }
    CFStringRef v106 = v639[mm / 8 + 2];
    if (v106) {
      CFRelease(v106);
    }
  }
  if (v218 < 0) {
    operator delete(v217[0]);
  }
  sub_6C878((uint64_t)&v666);
  if (v665) {
    CFRelease(v665);
  }
  if (v221) {
    CFRelease(v221);
  }
  for (nuint64_t n = 0; nn != -32; nn -= 16)
  {
    double v108 = *(const void **)&v664[nn / 4 + 2];
    if (v108) {
      CFRelease(v108);
    }
    CFStringRef v109 = v663[nn / 8 + 2];
    if (v109) {
      CFRelease(v109);
    }
  }
  if (v223 < 0) {
    operator delete(v222[0]);
  }
  sub_6C878((uint64_t)&v690);
  if (v689) {
    CFRelease(v689);
  }
  if (v226) {
    CFRelease(v226);
  }
  for (unint64_t i1 = 0; i1 != -32; i1 -= 16)
  {
    __int16 v111 = *(const void **)&v688[i1 / 4 + 2];
    if (v111) {
      CFRelease(v111);
    }
    CFStringRef v112 = v687[i1 / 8 + 2];
    if (v112) {
      CFRelease(v112);
    }
  }
  if (v228 < 0) {
    operator delete(v227[0]);
  }
  sub_6C878((uint64_t)&v714);
  if (v713) {
    CFRelease(v713);
  }
  if (v231) {
    CFRelease(v231);
  }
  for (unint64_t i2 = 0; i2 != -32; i2 -= 16)
  {
    std::string::size_type v114 = *(const void **)&v712[i2 / 4 + 2];
    if (v114) {
      CFRelease(v114);
    }
    CFStringRef v115 = v711[i2 / 8 + 2];
    if (v115) {
      CFRelease(v115);
    }
  }
  if (v233 < 0) {
    operator delete(v232[0]);
  }
  sub_6C878((uint64_t)&v735);
  if (v235 < 0) {
    operator delete(v234[0]);
  }
  sub_6C878((uint64_t)&v766);
  for (uint64_t i3 = 6; i3 != -2; i3 -= 4)
  {
    v117 = *(const void **)&v762[i3];
    if (v117) {
      CFRelease(v117);
    }
  }
  if (v238) {
    CFRelease(v238);
  }
  if (v759) {
    CFRelease(v759);
  }
  if (v758) {
    CFRelease(v758);
  }
  if (v241) {
    CFRelease(v241);
  }
  if (v761) {
    CFRelease(v761);
  }
  if (v760) {
    CFRelease(v760);
  }
  if (v243 < 0) {
    operator delete(v242[0]);
  }
  sub_6C878((uint64_t)&v798);
  for (uint64_t i4 = 6; i4 != -2; i4 -= 4)
  {
    uint64_t v119 = *(const void **)&v794[i4];
    if (v119) {
      CFRelease(v119);
    }
  }
  if (v246) {
    CFRelease(v246);
  }
  if (v791) {
    CFRelease(v791);
  }
  if (v790) {
    CFRelease(v790);
  }
  if (v249) {
    CFRelease(v249);
  }
  if (v793) {
    CFRelease(v793);
  }
  if (v792) {
    CFRelease(v792);
  }
  if (v251 < 0) {
    operator delete(v250[0]);
  }
  sub_6C878((uint64_t)&v825);
  if (v824) {
    CFRelease(v824);
  }
  if (v254) {
    CFRelease(v254);
  }
  for (unint64_t i5 = 0; i5 != -32; i5 -= 16)
  {
    uint64_t v121 = *(const void **)&v823[i5 / 4 + 2];
    if (v121) {
      CFRelease(v121);
    }
    CFStringRef v122 = v822[i5 / 8 + 2];
    if (v122) {
      CFRelease(v122);
    }
  }
  if (v256 < 0) {
    operator delete(v255[0]);
  }
  sub_6C878((uint64_t)&v849);
  if (v848) {
    CFRelease(v848);
  }
  if (v259) {
    CFRelease(v259);
  }
  for (unint64_t i6 = 0; i6 != -32; i6 -= 16)
  {
    v124 = *(const void **)&v847[i6 / 4 + 2];
    if (v124) {
      CFRelease(v124);
    }
    CFStringRef v125 = v846[i6 / 8 + 2];
    if (v125) {
      CFRelease(v125);
    }
  }
  if (v261 < 0) {
    operator delete(v260[0]);
  }
  sub_6C878((uint64_t)&v873);
  if (v872) {
    CFRelease(v872);
  }
  if (v264) {
    CFRelease(v264);
  }
  for (unint64_t i7 = 0; i7 != -32; i7 -= 16)
  {
    uint64_t v127 = *(const void **)&v871[i7 / 4 + 2];
    if (v127) {
      CFRelease(v127);
    }
    CFStringRef v128 = v870[i7 / 8 + 2];
    if (v128) {
      CFRelease(v128);
    }
  }
  if (v266 < 0) {
    operator delete(v265[0]);
  }
  sub_6C878((uint64_t)&v897);
  if (v896) {
    CFRelease(v896);
  }
  if (v269) {
    CFRelease(v269);
  }
  for (unint64_t i8 = 0; i8 != -32; i8 -= 16)
  {
    uint64_t v130 = *(const void **)&v895[i8 / 4 + 2];
    if (v130) {
      CFRelease(v130);
    }
    CFStringRef v131 = v894[i8 / 8 + 2];
    if (v131) {
      CFRelease(v131);
    }
  }
  if (v271 < 0) {
    operator delete(v270[0]);
  }
  sub_6C878((uint64_t)&v921);
  if (v920) {
    CFRelease(v920);
  }
  if (v274) {
    CFRelease(v274);
  }
  for (unint64_t i9 = 0; i9 != -32; i9 -= 16)
  {
    uint64_t v133 = *(const void **)&v919[i9 / 4 + 2];
    if (v133) {
      CFRelease(v133);
    }
    CFStringRef v134 = v918[i9 / 8 + 2];
    if (v134) {
      CFRelease(v134);
    }
  }
  if (v276 < 0) {
    operator delete(v275[0]);
  }
  sub_6C878((uint64_t)&v953);
  for (uint64_t i10 = 10; i10 != -2; i10 -= 4)
  {
    int v136 = *(const void **)&v947[i10];
    if (v136) {
      CFRelease(v136);
    }
  }
  if (v277) {
    CFRelease(v277);
  }
  if (v282) {
    CFRelease(v282);
  }
  if (v946) {
    CFRelease(v946);
  }
  if (v945) {
    CFRelease(v945);
  }
  *(void *)&long long v921 = &v278;
  sub_15B944((void ***)&v921);
  if (v942)
  {
    v943 = v942;
    operator delete(v942);
  }
  if (v283) {
    CFRelease(v283);
  }
  if (v285 < 0) {
    operator delete(v284[0]);
  }
  sub_6C878((uint64_t)&v293);
  for (uint64_t i11 = 10; i11 != -2; i11 -= 4)
  {
    v138 = *(const void **)&v980[i11];
    if (v138) {
      CFRelease(v138);
    }
  }
  if (v286) {
    CFRelease(v286);
  }
  if (v291) {
    CFRelease(v291);
  }
  if (v979) {
    CFRelease(v979);
  }
  if (v978) {
    CFRelease(v978);
  }
  *(void *)&long long v953 = &v287;
  sub_15B944((void ***)&v953);
  if (v975)
  {
    CFDictionaryRef v976 = v975;
    operator delete(v975);
  }
  if (v292) {
    CFRelease(v292);
  }
  if (v315 < 0) {
    operator delete(v314[0]);
  }
  sub_6C878((uint64_t)v316);
  sub_6C878((uint64_t)v317);
  sub_6C878((uint64_t)v318);
  sub_6C878((uint64_t)v319);
  sub_6C878((uint64_t)v320);
  return sub_6C878((uint64_t)v321);
}

void sub_1CA48C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1CD708(uint64_t a1, char *a2)
{
  CFDictionaryRef v4 = sub_21C8C((void *)a1, "speaker_general");
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  sub_21C8C(v4 + 6, a2);
  sub_21C8C((void *)(a1 + 72), "speaker_general");
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1668051824;
  v15[3] = 0;
  v21[0] = 1936746861;
  uint64_t v22 = 0;
  CFDictionaryRef v5 = operator new(0xCuLL);
  CFDictionaryRef v17 = v5 + 3;
  CFDictionaryRef v18 = (char *)(v5 + 3);
  *(void *)CFDictionaryRef v5 = 0x6473706700000001;
  v5[2] = 1869768046;
  std::string __p = v5;
  CFDictionaryRef v13 = 0;
  CFDictionaryRef v14 = 0;
  uint64_t v12 = 0;
  *(void *)&long long v27 = &v12;
  BYTE8(v27) = 0;
  uint64_t v12 = operator new(0x18uLL);
  CFDictionaryRef v13 = v12;
  CFDictionaryRef v14 = v12 + 3;
  CFDictionaryRef v13 = sub_1CDC20((uint64_t)&v14, (uint64_t)&__p, (uint64_t)&v19, v12);
  sub_1CDCD4((uint64_t)&v19, (uint64_t *)&v12);
  v15[0] = &v19;
  v15[1] = 1;
  CFDictionaryRef v6 = sub_4D3D8((uint64_t)v15);
  int v23 = 1768907891;
  CFDictionaryRef v24 = v6;
  void v15[2] = 0;
  int v25 = 1936749683;
  uint64_t v26 = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)&long long v27 = a1 + 128;
  BYTE8(v27) = 0;
  uint64_t v7 = (char *)operator new(0x30uLL);
  uint64_t v8 = 0;
  *(void *)(a1 + 128) = v7;
  *(void *)(a1 + 136) = v7;
  *(void *)(a1 + 144) = v7 + 48;
  do
  {
    sub_6D16C((uint64_t)&v7[v8 * 4], v21[v8], *(CFTypeRef *)&v21[v8 + 2]);
    v8 += 4;
  }
  while (v8 != 12);
  *(void *)(a1 + 136) = v7 + 48;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  CFDictionaryRef v9 = operator new(8uLL);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 160) = v9;
  *v9++ = 0x6C766F6C766F6C75;
  *(void *)(a1 + 168) = v9;
  *(void *)(a1 + 176) = v9;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  sub_6E5D0((char *)(a1 + 208), (uint64_t *)qword_64CAA8, (uint64_t *)qword_64CAB0, (qword_64CAB0 - qword_64CAA8) >> 3);
  *(_OWORD *)(a1 + 248) = 0u;
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = 0;
  long long v27 = xmmword_5968C4;
  uint64_t v28 = 2;
  sub_6D1AC(a1 + 248, (int *)&v27, 3);
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  for (uint64_t i = 10; i != -2; i -= 4)
  {
    uint64_t v11 = *(const void **)&v21[i];
    if (v11) {
      CFRelease(v11);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  *(void *)&long long v27 = &v12;
  sub_15B944((void ***)&v27);
  if (__p)
  {
    CFDictionaryRef v17 = __p;
    operator delete(__p);
  }
}

void sub_1CDA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void *sub_1CDBCC(void *a1, char *a2, long long *a3)
{
  CFDictionaryRef v5 = (char *)sub_21C8C(a1, a2);
  sub_6E190(v5 + 24, a3);
  return a1;
}

void sub_1CDC04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1CDC20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  CFDictionaryRef v4 = a4;
  CFDictionaryRef v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *CFDictionaryRef v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_46B38(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      CFDictionaryRef v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_15BA74((uint64_t)v8);
  return v4;
}

void sub_1CDCC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1CDCD4(uint64_t a1, uint64_t *a2)
{
  sub_22210((CFStringRef *)a1, "IODelegates");
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  int64x2_t v22 = 0uLL;
  unint64_t v23 = 0;
  sub_15CC14(&v22, v4);
  uint64_t v6 = *a2;
  for (uint64_t i = a2[1]; v6 != i; v6 += 24)
  {
    memset(__p, 0, sizeof(__p));
    sub_46B38(__p, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
    uint64_t v7 = (CFArrayRef *)v22.i64[1];
    if (v22.i64[1] >= v23)
    {
      uint64_t v9 = (v22.i64[1] - v22.i64[0]) >> 3;
      if ((unint64_t)(v9 + 1) >> 61) {
        sub_60548();
      }
      unint64_t v10 = (uint64_t)(v23 - v22.i64[0]) >> 2;
      if (v10 <= v9 + 1) {
        unint64_t v10 = v9 + 1;
      }
      if (v23 - v22.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      long long v27 = &v23;
      if (v11) {
        unint64_t v11 = (unint64_t)sub_106EC(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      CFDictionaryRef v24 = (int64x2_t *)v11;
      v25.i64[0] = v11 + 8 * v9;
      v25.i64[1] = v25.i64[0];
      unint64_t v26 = v11 + 8 * v12;
      *(void *)v25.i64[0] = sub_650B4((int **)__p);
      uint64_t v13 = v25.i64[0];
      uint64_t v8 = v25.i64[1] + 8;
      v25.i64[1] += 8;
      CFDictionaryRef v14 = (void *)v22.i64[1];
      CFDictionaryRef v15 = (void *)v22.i64[0];
      if (v22.i64[1] == v22.i64[0])
      {
        int64x2_t v17 = vdupq_n_s64(v22.u64[1]);
      }
      else
      {
        do
        {
          uint64_t v16 = *--v14;
          *(void *)(v13 - 8) = v16;
          v13 -= 8;
          *CFDictionaryRef v14 = 0;
        }
        while (v14 != v15);
        int64x2_t v17 = v22;
        uint64_t v8 = v25.i64[1];
      }
      v22.i64[0] = v13;
      v22.i64[1] = v8;
      int64x2_t v25 = v17;
      unint64_t v18 = v23;
      unint64_t v23 = v26;
      unint64_t v26 = v18;
      CFDictionaryRef v24 = (int64x2_t *)v17.i64[0];
      sub_15CCD4((uint64_t)&v24);
    }
    else
    {
      *uint64_t v7 = sub_650B4((int **)__p);
      uint64_t v8 = (uint64_t)(v7 + 1);
    }
    v22.i64[1] = v8;
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  CFArrayRef v19 = sub_1CE3B4((uint64_t **)&v22);
  CFDictionaryRef v24 = &v22;
  sub_15CB74((void ***)&v24);
  *(void *)(a1 + 8) = v19;
  return a1;
}

void sub_1CDEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  std::string __p = &a13;
  sub_15CB74((void ***)&__p);
  sub_60594(v16);
  _Unwind_Resume(a1);
}

CFStringRef *sub_1CDF04(CFStringRef *a1, char *a2)
{
  unint64_t v4 = sub_22210(a1, "ConfigName");
  sub_22210(v4 + 1, a2);
  return a1;
}

void sub_1CDF44(_Unwind_Exception *a1)
{
  sub_60594(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1CDF58(uint64_t a1, char *a2, int *a3)
{
  sub_22210((CFStringRef *)a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1CDFF0(_Unwind_Exception *a1)
{
  int v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1CE02C(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "BeamIndex");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1CE0CC(_Unwind_Exception *exception_object)
{
  int v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1CE110(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "DataSourceOrder");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1CE1B0(_Unwind_Exception *a1)
{
  int v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1CE1EC(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "BeamIndex");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_1CE28C(_Unwind_Exception *exception_object)
{
  int v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1CE2D0(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

uint64_t sub_1CE30C(uint64_t a1, uint64_t **a2)
{
  *(void *)(a1 + 8) = sub_1CE3B4(a2);
  return a1;
}

void sub_1CE34C(_Unwind_Exception *a1)
{
  sub_60594(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1CE360(uint64_t a1, int **a2)
{
  *(void *)(a1 + 8) = sub_650B4(a2);
  return a1;
}

void sub_1CE3A0(_Unwind_Exception *a1)
{
  sub_60594(v1);
  _Unwind_Resume(a1);
}

CFArrayRef sub_1CE3B4(uint64_t **a1)
{
  sub_4ECEC(&__p, a1[1] - *a1);
  uint64_t v2 = *a1;
  int v3 = a1[1];
  if (*a1 != v3)
  {
    CFNumberRef v4 = __p;
    do
    {
      uint64_t v5 = *v2++;
      *v4++ = v5;
    }
    while (v2 != v3);
  }
  CFArrayRef v6 = sub_55EFC((const void **)__p, (uint64_t)v9);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_1CE430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CE44C(uint64_t a1, char *a2)
{
  CFNumberRef v4 = sub_21C8C((void *)a1, "speaker_general");
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = 0;
  sub_21C8C(v4 + 6, a2);
  sub_21C8C((void *)(a1 + 72), "speaker_general");
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 1668049011;
  CFTypeRef v16 = 0;
  v22[0] = 1936746861;
  uint64_t v23 = 0;
  uint64_t v5 = operator new(0xCuLL);
  unint64_t v18 = v5 + 3;
  CFArrayRef v19 = (char *)(v5 + 3);
  *(void *)uint64_t v5 = 0x6473706700000001;
  v5[2] = 1869768046;
  std::string __p = v5;
  uint64_t v13 = 0;
  CFDictionaryRef v14 = 0;
  uint64_t v12 = 0;
  *(void *)&long long v26 = &v12;
  BYTE8(v26) = 0;
  uint64_t v12 = operator new(0x18uLL);
  uint64_t v13 = v12;
  CFDictionaryRef v14 = v12 + 3;
  uint64_t v13 = sub_1CDC20((uint64_t)&v14, (uint64_t)&__p, (uint64_t)&v20, v12);
  sub_1CDCD4((uint64_t)&v20, (uint64_t *)&v12);
  v15[0] = &v20;
  v15[1] = 1;
  CFDictionaryRef v6 = sub_4D3D8((uint64_t)v15);
  int v24 = 1768907891;
  CFDictionaryRef v25 = v6;
  void v15[2] = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)&long long v26 = a1 + 128;
  BYTE8(v26) = 0;
  uint64_t v7 = (char *)operator new(0x20uLL);
  uint64_t v8 = 0;
  *(void *)(a1 + 128) = v7;
  *(void *)(a1 + 136) = v7;
  *(void *)(a1 + 144) = v7 + 32;
  do
  {
    sub_6D16C((uint64_t)&v7[v8 * 4], v22[v8], *(CFTypeRef *)&v22[v8 + 2]);
    v8 += 4;
  }
  while (v8 != 8);
  *(void *)(a1 + 136) = v7 + 32;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v9 = operator new(8uLL);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 160) = v9;
  *v9++ = 0x6C766F6C766F6C75;
  *(void *)(a1 + 168) = v9;
  *(void *)(a1 + 176) = v9;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = a1 + 192;
  *(unsigned char *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  long long v26 = xmmword_5968C4;
  uint64_t v27 = 2;
  sub_6D1AC(a1 + 248, (int *)&v26, 3);
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  for (uint64_t i = 6; i != -2; i -= 4)
  {
    unint64_t v11 = *(const void **)&v22[i];
    if (v11) {
      CFRelease(v11);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v20) {
    CFRelease(v20);
  }
  *(void *)&long long v26 = &v12;
  sub_15B944((void ***)&v26);
  if (__p)
  {
    unint64_t v18 = __p;
    operator delete(__p);
  }
  if (v16) {
    CFRelease(v16);
  }
}

void sub_1CE72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_564E4(exception_object);
}

void sub_1CE8CC()
{
  sub_1BF410((uint64_t)v0);
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (__p)
  {
    CFNumberRef v4 = __p;
    operator delete(__p);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_1CE934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1CE948()
{
  sub_1BF410((uint64_t)v0);
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (__p)
  {
    CFNumberRef v4 = __p;
    operator delete(__p);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_1CE9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1CE9C4(int a1)
{
  if (a1 == 5) {
    return 0;
  }
  if (a1 != 6)
  {
    uint64_t v3 = sub_32A48(13);
    CFNumberRef v4 = sub_7D5E8(1, *(void **)v3, *(void *)(v3 + 8));
    uint64_t v5 = v4;
    if (v4)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315650;
        uint64_t v8 = "CPMSInterface.mm";
        __int16 v9 = 1024;
        int v10 = 133;
        __int16 v11 = 1024;
        int v12 = a1;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unrecognized CPMS Client Qualifier data sent with kVirtualAudioDevicePropertyThermalBudgetRange: %u\"", (uint8_t *)&v7, 0x18u);
      }
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unrecognized CPMS Client Qualifier data sent with kVirtualAudioDevicePropertyThermalBudgetRange: %u");
  }
  return 1;
}

void sub_1CEAF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CEB14(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t result = sub_15DF8((uint64_t)a1, &v10, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    int v7 = (char *)operator new(0x40uLL);
    uint64_t v8 = v7 + 32;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_21E8C(v8, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
      *((void *)v7 + 6) = *(void *)(a3 + 16);
    }
    *((_DWORD *)v7 + 14) = *(_DWORD *)(a3 + 24);
    uint64_t v9 = v10;
    return sub_46CA8(a1, v9, v6, (uint64_t *)v7);
  }
  return result;
}

void sub_1CEBD0(_Unwind_Exception *a1)
{
  sub_79970(0, v1);
  _Unwind_Resume(a1);
}

void sub_1CEBE8(uint64_t a1, const void **a2, int a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v10 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  if (!*a2)
  {
    uint64_t v20 = sub_32A48(13);
    CFDictionaryRef v21 = sub_7D5E8(1, *(void **)v20, *(void *)(v20 + 8));
    int64x2_t v22 = v21;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "CPMSInterface.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 191;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Initialized dictionary from CPMS is null!\"", (uint8_t *)__p, 0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Initialized dictionary from CPMS is null!");
    goto LABEL_16;
  }
  sub_1CEED0((uint64_t)__p, *a2);
  uint64_t v11 = a4 + 8;
  sub_8F90(*(char **)(a4 + 8));
  int v12 = (char *)__p[1];
  *(void **)a4 = __p[0];
  *(void *)(a4 + 8) = v12;
  uint64_t v13 = __p[2];
  *(void **)(a4 + 16) = __p[2];
  if (v13)
  {
    *((void *)v12 + 2) = v11;
    __p[0] = &__p[1];
    __p[1] = 0;
    __p[2] = 0;
    int v12 = 0;
  }
  else
  {
    *(void *)a4 = v11;
  }
  sub_8F90(v12);
  CFDictionaryRef v14 = *(const __CFString ***)(a1 + 248);
  CFDictionaryRef v15 = *(const __CFString ***)(a1 + 256);
  if (v14 != v15)
  {
    while (*v14)
    {
      sub_20C54((uint64_t)v23, *v14);
      *(_OWORD *)std::string __p = *(_OWORD *)v23;
      __p[2] = v24;
      v23[1] = 0;
      int v24 = 0;
      v23[0] = 0;
      int v27 = 100000;
      CFTypeRef v16 = (uint64_t **)sub_15DF8(a4, &v25, __p);
      if (!*v16)
      {
        int64x2_t v17 = v16;
        unint64_t v18 = (void **)operator new(0x40uLL);
        *((_OWORD *)v18 + 2) = *(_OWORD *)__p;
        v18[6] = __p[2];
        memset(__p, 0, sizeof(__p));
        *((_DWORD *)v18 + 14) = 100000;
        sub_46CA8((uint64_t **)a4, v25, v17, (uint64_t *)v18);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete(v23[0]);
      }
      if (++v14 == v15) {
        goto LABEL_14;
      }
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_16:
  }
LABEL_14:
  *a5 = a3;
  std::mutex::unlock(v10);
}

void sub_1CEE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v22);
  std::mutex::unlock(v21);
  _Unwind_Resume(a1);
}

void sub_1CEED0(uint64_t a1, const void *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(exception);
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)a2);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  sub_4ECEC(keys, Count);
  sub_4ECEC(values, Count);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, (const void **)keys[0], (const void **)values[0]);
  if (Count)
  {
    for (uint64_t i = 0; i != Count; ++i)
    {
      sub_20C54((uint64_t)v13, (const __CFString *)keys[0][i]);
      unsigned int v7 = sub_993D4((const __CFNumber *)values[0][i]);
      *(_OWORD *)std::string __p = *(_OWORD *)v13;
      uint64_t v16 = v14;
      v13[1] = 0;
      uint64_t v14 = 0;
      v13[0] = 0;
      unsigned int v17 = v7;
      uint64_t v8 = (uint64_t **)sub_15DF8(a1, &v20, __p);
      if (!*v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = (char *)operator new(0x40uLL);
        uint64_t v11 = v10 + 32;
        if (SHIBYTE(v16) < 0)
        {
          sub_21E8C(v11, __p[0], (unint64_t)__p[1]);
          unsigned int v7 = v17;
        }
        else
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)__p;
          *((void *)v10 + 6) = v16;
        }
        *((_DWORD *)v10 + 14) = v7;
        sub_46CA8((uint64_t **)a1, v20, v9, (uint64_t *)v10);
      }
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v14) < 0) {
        operator delete(v13[0]);
      }
    }
  }
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }
}

void sub_1CF09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  __cxa_free_exception(v28);
  _Unwind_Resume(a1);
}

const void **sub_1CF138(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1CF16C(uint64_t a1, CFDictionaryRef *a2)
{
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
  }
  CFIndex Count = CFDictionaryGetCount(*a2);
  uint64_t v6 = *(void *)(a1 + 248);
  uint64_t v5 = *(void *)(a1 + 256);
  CFDictionaryRef v7 = *a2;
  if (!*a2)
  {
    *(void *)AudioObjectPropertyAddress buf = 0;
    if (v6 != v5)
    {
      CFDictionaryRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Could not construct");
    }
    goto LABEL_21;
  }
  unint64_t v8 = Count;
  CFRetain(*a2);
  if (v6 == v5)
  {
    BOOL v11 = 0;
  }
  else
  {
    uint64_t v9 = v6 + 8;
    do
    {
      uint64_t v10 = *(const void **)(v9 - 8);
      if (v10)
      {
        BOOL v11 = CFDictionaryContainsKey(v7, v10) != 0;
        if (v11) {
          break;
        }
      }
      else
      {
        BOOL v11 = 0;
      }
      BOOL v12 = v9 == v5;
      v9 += 8;
    }
    while (!v12);
  }
  CFRelease(v7);
  if (v8) {
    BOOL v13 = v11;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 || v8 >= 5)
  {
LABEL_21:
    uint64_t v15 = sub_32A48(13);
    uint64_t v16 = sub_7D5E8(1, *(void **)v15, *(void *)(v15 + 8));
    unsigned int v17 = v16;
    if (v16)
    {
      unint64_t v18 = v16;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        sub_1CF450((uint64_t)__p, *a2);
        if (v23 >= 0) {
          CFArrayRef v19 = __p;
        }
        else {
          CFArrayRef v19 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
        __int16 v25 = 1024;
        int v26 = 212;
        __int16 v27 = 1024;
        int v28 = 0;
        __int16 v29 = 2080;
        CFDictionaryRef v30 = v19;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Given CPMS dictionary was not valid. Returning %u for the dictionary: %s\"", buf, 0x22u);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Given CPMS dictionary was not valid. Returning %u for the dictionary: %s");
  }
}

void sub_1CF3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1CF450(uint64_t a1, CFTypeRef cf)
{
  CFStringRef v3 = CFCopyDescription(cf);
  sub_20B40(a1, v3);
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1CF498(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1CF4B4(uint64_t a1, CFDictionaryRef *a2, int a3, uint64_t **a4, _DWORD *a5)
{
  uint64_t v10 = (std::mutex *)(a1 + 344);
  std::mutex::lock((std::mutex *)(a1 + 344));
  BOOL v11 = *(CFTypeRef **)(a1 + 248);
  for (uint64_t i = *(CFTypeRef **)(a1 + 256); v11 != i; ++v11)
  {
    CFStringRef v13 = (const __CFString *)*v11;
    if (*v11)
    {
      CFRetain(*v11);
      CFStringRef v21 = v13;
      if (!*a2) {
        goto LABEL_13;
      }
      if (CFDictionaryContainsKey(*a2, v13))
      {
        if (!*a2)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
        }
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*a2, v13);
        if (!Value)
        {
          unint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v18, "Could not find item");
        }
        unsigned int v15 = sub_993D4(Value);
        sub_20C54((uint64_t)__p, v13);
        int64x2_t v22 = __p;
        *((_DWORD *)sub_1CF6F0(a4, __p, (long long **)&v22) + 14) = v15;
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      CFRelease(v13);
    }
    else
    {
      CFStringRef v21 = 0;
      if (!*a2)
      {
LABEL_13:
        uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v16, "Could not construct");
      }
    }
  }
  *a5 = a3;
  std::mutex::unlock(v10);
}

void sub_1CF684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16)
{
  sub_6393C(&a16);
  std::mutex::unlock(v16);
  _Unwind_Resume(a1);
}

char *sub_1CF6F0(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v5 = (void **)sub_15DF8((uint64_t)a1, &v12, a2);
  uint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    CFDictionaryRef v7 = (uint64_t **)v5;
    uint64_t v6 = (char *)operator new(0x40uLL);
    unint64_t v8 = v6 + 32;
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      sub_21E8C(v8, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      *((void *)v6 + 6) = *((void *)v9 + 2);
      *(_OWORD *)unint64_t v8 = v10;
    }
    *((_DWORD *)v6 + 14) = 0;
    sub_46CA8(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1CF790(_Unwind_Exception *a1)
{
  sub_79970(0, v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1CF7A8(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v5 = (uint64_t **)sub_15DF8((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    CFDictionaryRef v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    char v13 = 0;
    unint64_t v8 = v6 + 4;
    uint64_t v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      sub_21E8C(v8, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v10 = *v9;
      v6[6] = *((void *)v9 + 2);
      *(_OWORD *)unint64_t v8 = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    char v13 = 1;
    sub_46CA8(a1, v14, v7, v6);
    v12[0] = 0;
    sub_16F0B0((uint64_t)v12);
  }
  return v6;
}

void sub_1CF874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1CF888(uint64_t a1, const __CFString *a2, int a3, float a4)
{
  sub_20C54((uint64_t)&v29, a2);
  sub_14E44(cf, a2);
  if (!*(void *)cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_20C54((uint64_t)&__s1, *(const __CFString **)cf);
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  uint64_t v8 = v28;
  if ((v28 & 0x80u) == 0) {
    size_t v9 = v28;
  }
  else {
    size_t v9 = __n;
  }
  uint64_t v10 = *(unsigned __int8 *)(a1 + 295);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a1 + 280);
  }
  if (v9 != v10) {
    goto LABEL_25;
  }
  if (v11 >= 0) {
    uint64_t v12 = (unsigned __int8 *)(a1 + 272);
  }
  else {
    uint64_t v12 = *(unsigned __int8 **)(a1 + 272);
  }
  if ((v28 & 0x80) != 0)
  {
    if (memcmp(__s1, v12, __n)) {
      goto LABEL_25;
    }
    goto LABEL_20;
  }
  if (!v28)
  {
LABEL_20:
    if (a3)
    {
      *(void *)CFTypeRef cf = a1 + 272;
      int v14 = *((_DWORD *)sub_1CF6F0((uint64_t **)(a1 + 64), (void **)(a1 + 272), (long long **)cf) + 14);
      *(void *)CFTypeRef cf = a1 + 320;
      if (v14 >= *((_DWORD *)sub_1CF6F0((uint64_t **)(a1 + 64), (void **)(a1 + 320), (long long **)cf) + 14)) {
        unsigned int v15 = (const std::string *)(a1 + 320);
      }
      else {
        unsigned int v15 = (const std::string *)(a1 + 272);
      }
      std::string::operator=(&v29, v15);
    }
    goto LABEL_25;
  }
  p_s1 = &__s1;
  while (*(unsigned __int8 *)p_s1 == *v12)
  {
    p_s1 = (void **)((char *)p_s1 + 1);
    ++v12;
    if (!--v8) {
      goto LABEL_20;
    }
  }
LABEL_25:
  *(void *)CFTypeRef cf = &v29;
  float v16 = (float)*((int *)sub_1CF6F0((uint64_t **)(a1 + 64), (void **)&v29.__r_.__value_.__l.__data_, (long long **)cf) + 14);
  id v17 = *(id *)sub_32A48(16);
  unint64_t v18 = v17;
  if (v17)
  {
    CFArrayRef v19 = v17;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (CFStringCompare(a2, (CFStringRef)qword_64CAD0, 0))
      {
        if (CFStringCompare(a2, (CFStringRef)qword_64CAD8, 0))
        {
          if (CFStringCompare(a2, (CFStringRef)qword_64CAE0, 0)) {
            char v20 = CFStringCompare(a2, (CFStringRef)qword_64CAE8, 0) ? "Unknown" : "1min";
          }
          else {
            char v20 = "1ms";
          }
        }
        else
        {
          char v20 = "100ms";
        }
      }
      else
      {
        char v20 = "1000ms";
      }
      sub_21C8C(__p, v20);
      CFStringRef v21 = v25 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)CFTypeRef cf = 136316162;
      *(void *)&cf[4] = "CPMSInterface.mm";
      __int16 v31 = 1024;
      int v32 = 277;
      __int16 v33 = 2080;
      CFDictionaryRef v34 = v21;
      __int16 v35 = 1024;
      unsigned int v36 = v16;
      __int16 v37 = 2048;
      double v38 = a4;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Continuous Haptics -- In Battery Referenced Value[%s]: %u ; Efficiency Factor: %4.3f",
        cf,
        0x2Cu);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if ((char)v28 < 0) {
    operator delete(__s1);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  return (float)(v16 * a4);
}

void sub_1CFBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,const void *a25)
{
  __cxa_free_exception(v25);
  sub_6393C(&a25);
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1CFC7C(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFRetain(*a2);
    sub_22084(&cf, v3);
  }
  else
  {
    CFTypeRef cf = 0;
  }
  uint64_t v4 = sub_32A48(16);
  if (*(unsigned char *)(v4 + 8))
  {
    id v5 = *(id *)v4;
    if (v5)
    {
      uint64_t v6 = v5;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v7 = CFCopyDescription(cf);
        sub_20B40((uint64_t)__p, v7);
        if (v7) {
          CFRelease(v7);
        }
        uint64_t v8 = __p;
        if (v40 < 0) {
          uint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 293;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v8;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS Haptics -- In Reference Dictionary: %s", buf, 0x1Cu);
        if (v40 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  if (sub_2099D4())
  {
    *(void *)AudioObjectPropertyAddress buf = a1 + 296;
    size_t v9 = sub_1CF7A8((uint64_t **)(a1 + 96), (void **)(a1 + 296), (long long **)buf);
    if (cf)
    {
      uint64_t v10 = (int *)v9[7];
      int v11 = *v10;
      signed int v12 = v10[1];
      CFNumberRef v13 = (const __CFNumber *)sub_99744((const __CFDictionary *)cf, (const void *)qword_64CAE0);
      if (v13)
      {
        signed int v14 = sub_993D4(v13);
        signed int v15 = v14;
        int v16 = v14 - v11;
        if (v14 < v11 || v14 > v12)
        {
          uint64_t v33 = sub_32A48(13);
          CFDictionaryRef v34 = sub_7D5E8(1, *(void **)v33, *(void *)(v33 + 8));
          __int16 v35 = v34;
          if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 244;
            _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"SInt32 inRefernceValue is outside of the supported range!\"", buf, 0x12u);
          }

          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          CFDictionaryRef v30 = (void (*)(void *))&std::runtime_error::~runtime_error;
          std::runtime_error::runtime_error(exception, "SInt32 inRefernceValue is outside of the supported range!");
          goto LABEL_43;
        }
        id v17 = *(id *)sub_32A48(16);
        unint64_t v18 = v17;
        if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 245;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v15;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Switch Haptics -- In Battery Referenced Value: %u ", buf, 0x18u);
        }

        if (v12 == v11)
        {
          uint64_t v36 = sub_32A48(13);
          __int16 v37 = sub_7D5E8(1, *(void **)v36, *(void *)(v36 + 8));
          double v38 = v37;
          if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 254;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }

          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          CFDictionaryRef v30 = (void (*)(void *))&std::logic_error::~logic_error;
          std::logic_error::logic_error((std::logic_error *)exception, "Precondition failure.");
LABEL_44:
          __cxa_throw(exception, v31, v30);
        }
        uint64_t v19 = ((*(_DWORD *)(*(void *)(a1 + 120) + 4) - **(_DWORD **)(a1 + 120)) * v16 / (v12 - v11)
                           + **(_DWORD **)(a1 + 120));
        goto LABEL_30;
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      CFDictionaryRef v30 = (void (*)(void *))&std::runtime_error::~runtime_error;
      std::runtime_error::runtime_error(exception, "Could not find item");
    }
    else
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      CFDictionaryRef v30 = (void (*)(void *))&std::runtime_error::~runtime_error;
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
LABEL_43:
    goto LABEL_44;
  }
  if (!sub_20994C()) {
    goto LABEL_37;
  }
  sub_1D0330(a1);
  if (!cf)
  {
    int v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
  }
  sub_1CEED0((uint64_t)buf, cf);
  uint64_t v20 = a1 + 72;
  sub_8F90(*(char **)(a1 + 72));
  uint64_t v21 = *(void *)&buf[8];
  *(void *)(a1 + 64) = *(void *)buf;
  *(void *)(a1 + 72) = v21;
  uint64_t v22 = *(void *)&buf[16];
  *(void *)(a1 + 80) = *(void *)&buf[16];
  if (v22)
  {
    *(void *)(v21 + 16) = v20;
    *(void *)AudioObjectPropertyAddress buf = &buf[8];
    *(_OWORD *)&buf[8] = 0uLL;
    uint64_t v21 = 0;
  }
  else
  {
    *(void *)(a1 + 64) = v20;
  }
  sub_8F90((char *)v21);
  uint64_t v19 = sub_1CF888(a1, (const __CFString *)qword_64CAD8, 0, *(float *)(a1 + 240));
LABEL_30:
  if (!v19)
  {
LABEL_37:
    uint64_t v26 = sub_32A48(13);
    __int16 v27 = sub_7D5E8(1, *(void **)v26, *(void *)(v26 + 8));
    unsigned __int8 v28 = v27;
    if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 306;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"inData did not match AEA values!\"", buf, 0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    CFDictionaryRef v30 = (void (*)(void *))&std::runtime_error::~runtime_error;
    std::runtime_error::runtime_error(exception, "inData did not match AEA values!");
    goto LABEL_43;
  }
  char v23 = *(id *)sub_32A48(16);
  int v24 = v23;
  if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 307;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v19;
    _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Haptics -- Out Nominal Value: %u", buf, 0x18u);
  }

  if (cf) {
    CFRelease(cf);
  }
  return v19;
}

void sub_1D02A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  __cxa_free_exception(v12);
  sub_60394(&a12);
  _Unwind_Resume(a1);
}

void sub_1D0330(uint64_t a1)
{
  *(float *)(a1 + 240) = sub_1D052C(a1, (const __CFString *)qword_64CAD8);
  float v2 = sub_1D052C(a1, (const __CFString *)qword_64CAE0);
  *(float *)(a1 + 244) = v2;
  if (*(float *)(a1 + 240) == 0.0 || v2 == 0.0)
  {
    uint64_t v7 = sub_32A48(13);
    uint64_t v8 = sub_7D5E8(1, *(void **)v7, *(void *)(v7 + 8));
    size_t v9 = v8;
    if (v8 && os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      signed int v12 = "CPMSInterface.mm";
      __int16 v13 = 1024;
      int v14 = 491;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CPMS Continuous Power for Actuator -- An Efficiency Factor is zero!\"", (uint8_t *)&v11, 0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CPMS Continuous Power for Actuator -- An Efficiency Factor is zero!");
  }
  CFTypeRef v3 = *(id *)sub_32A48(16);
  uint64_t v4 = v3;
  if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = *(float *)(a1 + 240);
    double v6 = *(float *)(a1 + 244);
    int v11 = 136315906;
    signed int v12 = "CPMSInterface.mm";
    __int16 v13 = 1024;
    int v14 = 493;
    __int16 v15 = 2048;
    double v16 = v5;
    __int16 v17 = 2048;
    double v18 = v6;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Continuous Power for Actuator -- Efficincy Factors: mHapticsEfficiencyFactor100ms %4.3f ; mHapticsE"
      "fficiencyFactorInstantaneous %4.3f",
      (uint8_t *)&v11,
      0x26u);
  }
}

void sub_1D0510(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float sub_1D052C(uint64_t a1, const __CFString *a2)
{
  sub_20C54((uint64_t)__p, a2);
  *(void *)AudioObjectPropertyAddress buf = __p;
  CFTypeRef v3 = sub_1CF7A8((uint64_t **)(a1 + 96), __p, (long long **)buf);
  double v5 = (unsigned char *)v3[7];
  uint64_t v4 = (unsigned char *)v3[8];
  int64_t v6 = v4 - v5;
  if (v4 == v5) {
    goto LABEL_20;
  }
  if (v6 < 0) {
    sub_60548();
  }
  uint64_t v7 = sub_46BF4(v6 >> 2);
  memmove(v7, v5, v6);
  if (!(4 * (v6 >> 2)))
  {
LABEL_20:
    uint64_t v21 = sub_32A48(13);
    uint64_t v22 = sub_7D5E8(1, *(void **)v21, *(void *)(v21 + 8));
    char v23 = v22;
    if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = __p;
      if (v27 < 0) {
        int v24 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
      __int16 v29 = 1024;
      int v30 = 467;
      __int16 v31 = 2080;
      double v32 = *(double *)&v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CPMS reference budget for timescale '%s' via Embedded Device Tree is Null!\"", buf, 0x1Cu);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CPMS reference budget for timescale '%s' via Embedded Device Tree is Null!");
  }
  int v8 = v7[1];
  uint64_t v9 = *(void *)(a1 + 120);
  if (v9 == *(void *)(a1 + 128))
  {
    int v11 = (uint64_t **)(a1 + 168);
    signed int v12 = (void **)sub_15DF8((uint64_t)v11, buf, __p);
    __int16 v13 = (char *)*v12;
    if (!*v12)
    {
      int v14 = (uint64_t **)v12;
      __int16 v13 = (char *)operator new(0x40uLL);
      __int16 v15 = v13 + 32;
      if (SHIBYTE(v27) < 0)
      {
        sub_21E8C(v15, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)__int16 v15 = *(_OWORD *)__p;
        *((void *)v13 + 6) = v27;
      }
      *((void *)v13 + 7) = 0;
      sub_46CA8(v11, *(uint64_t *)buf, v14, (uint64_t *)v13);
    }
    float v10 = (float)*((unsigned int *)v13 + 15);
  }
  else
  {
    float v10 = (float)*(int *)(v9 + 4);
  }
  float v16 = (float)v8;
  __int16 v17 = *(id *)sub_32A48(13);
  double v18 = v17;
  if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = __p;
    if (v27 < 0) {
      uint64_t v19 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
    __int16 v29 = 1024;
    int v30 = 481;
    __int16 v31 = 2048;
    double v32 = v16;
    __int16 v33 = 2080;
    CFDictionaryRef v34 = v19;
    __int16 v35 = 2048;
    double v36 = v10;
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d maxReferenceVal: %4.3f || maxNominalValue from '%s' == %4.3f", buf, 0x30u);
  }

  operator delete(v7);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  return v10 / v16;
}

void sub_1D0838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_79970(0, v16);
  operator delete(v15);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1D08A8(void *a1, int a2, int a3)
{
  uint64_t v7 = (char *)a1[16];
  unint64_t v6 = a1[17];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (unsigned char *)a1[15];
    uint64_t v10 = (v7 - v9) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      goto LABEL_35;
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v13) {
      unint64_t v14 = v11;
    }
    if (v14)
    {
      unint64_t v14 = (unint64_t)sub_46BF4(v14);
      uint64_t v9 = (unsigned char *)a1[15];
      uint64_t v7 = (char *)a1[16];
    }
    else
    {
      uint64_t v15 = 0;
    }
    float v16 = (_DWORD *)(v14 + 4 * v10);
    unint64_t v6 = v14 + 4 * v15;
    *float v16 = a2;
    int v8 = (char *)(v16 + 1);
    while (v7 != v9)
    {
      int v17 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *--float v16 = v17;
    }
    a1[15] = v16;
    a1[16] = v8;
    a1[17] = v6;
    if (v9)
    {
      operator delete(v9);
      unint64_t v6 = a1[17];
    }
  }
  else
  {
    *(_DWORD *)uint64_t v7 = a2;
    int v8 = v7 + 4;
  }
  a1[16] = v8;
  if ((unint64_t)v8 < v6)
  {
    *(_DWORD *)int v8 = a3;
    double v18 = v8 + 4;
    goto LABEL_31;
  }
  uint64_t v19 = (char *)a1[15];
  uint64_t v20 = (v8 - v19) >> 2;
  unint64_t v21 = v20 + 1;
  if ((unint64_t)(v20 + 1) >> 62) {
LABEL_35:
  }
    sub_60548();
  uint64_t v22 = v6 - (void)v19;
  if (v22 >> 1 > v21) {
    unint64_t v21 = v22 >> 1;
  }
  BOOL v13 = (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL;
  unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
  if (!v13) {
    unint64_t v23 = v21;
  }
  if (v23)
  {
    unint64_t v23 = (unint64_t)sub_46BF4(v23);
    uint64_t v19 = (char *)a1[15];
    int v8 = (char *)a1[16];
  }
  else
  {
    uint64_t v24 = 0;
  }
  char v25 = (_DWORD *)(v23 + 4 * v20);
  unint64_t v26 = v23 + 4 * v24;
  *char v25 = a3;
  double v18 = v25 + 1;
  while (v8 != v19)
  {
    int v27 = *((_DWORD *)v8 - 1);
    v8 -= 4;
    *--char v25 = v27;
  }
  a1[15] = v25;
  a1[16] = v18;
  a1[17] = v26;
  if (v19) {
    operator delete(v19);
  }
LABEL_31:
  a1[16] = v18;
  unsigned __int8 v28 = *(id *)sub_32A48(16);
  __int16 v29 = v28;
  if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    int v30 = (int *)a1[15];
    int v31 = *v30;
    LODWORD(v30) = v30[1];
    int v32 = 136315906;
    __int16 v33 = "CPMSInterface.mm";
    __int16 v34 = 1024;
    int v35 = 317;
    __int16 v36 = 1024;
    int v37 = v31;
    __int16 v38 = 1024;
    int v39 = (int)v30;
    _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS -- Nominal Budget returned from AEA: min '%u' ; max '%u'",
      (uint8_t *)&v32,
      0x1Eu);
  }
}

char *sub_1D0AEC(uint64_t a1, char *a2, const __CFString *a3, float a4)
{
  if (a4 == 0.0)
  {
    uint64_t v12 = sub_32A48(13);
    BOOL v13 = sub_7D5E8(1, *(void **)v12, *(void *)(v12 + 8));
    unint64_t v14 = v13;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)float v16 = 136315394;
      *(void *)&v16[4] = "CPMSInterface.mm";
      __int16 v17 = 1024;
      int v18 = 341;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CPMS Continuous Haptics -- EfficiencyFactor is zero! Sending a zero value to AHS!\"", v16, 0x12u);
    }

    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CPMS Continuous Haptics -- EfficiencyFactor is zero! Sending a zero value to AHS!");
  }
  int v6 = sub_1CF888(a1, a3, 1, a4);
  uint64_t v7 = sub_32A48(16);
  if (*(unsigned char *)(v7 + 8))
  {
    int v8 = *(id *)v7;
    if (v8)
    {
      uint64_t v9 = v8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = a2;
        if (a2[23] < 0) {
          uint64_t v10 = *(char **)a2;
        }
        *(_DWORD *)float v16 = 136315906;
        *(void *)&v16[4] = "CPMSInterface.mm";
        __int16 v17 = 1024;
        int v18 = 343;
        __int16 v19 = 2080;
        uint64_t v20 = v10;
        __int16 v21 = 1024;
        int v22 = v6;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS Continuous Haptics -- Updated %s mwValue %u", v16, 0x22u);
      }
    }
  }
  *(void *)float v16 = a2;
  uint64_t result = sub_23124((uint64_t **)(a1 + 144), (void **)a2, (long long **)v16);
  *((_DWORD *)result + 14) = v6;
  return result;
}

void sub_1D0CD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D0CF4(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2 = *a2;
  if (!*a2)
  {
    CFDictionaryRef theDict = 0;
LABEL_38:
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  CFRetain(*a2);
  sub_22084(&theDict, v2);
  if (!theDict) {
    goto LABEL_38;
  }
  int Count = CFDictionaryGetCount(theDict);
  id v5 = *(id *)sub_32A48(16);
  int v6 = v5;
  if (v5)
  {
    uint64_t v7 = v5;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v8 = CFCopyDescription(theDict);
      sub_20B40((uint64_t)__p, v8);
      if (v8) {
        CFRelease(v8);
      }
      uint64_t v9 = __p;
      if (v28 < 0) {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 366;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v9;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Haptics -- In Reference Dictionary: %s", buf, 0x1Cu);
      if (SHIBYTE(v28) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  sub_1CF16C(a1, &theDict);
  uint64_t v10 = (_DWORD *)(a1 + 88);
  unint64_t v11 = (uint64_t **)(a1 + 64);
  if (*(_DWORD *)(a1 + 88)) {
    sub_1CF4B4(a1, &theDict, Count, v11, v10);
  }
  else {
    sub_1CEBE8(a1, (const void **)&theDict, Count, (uint64_t)v11, v10);
  }
  uint64_t v12 = (_OWORD *)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
  {
    sub_21E8C(buf, *(void **)(a1 + 192), *(void *)(a1 + 200));
  }
  else
  {
    *(_OWORD *)AudioObjectPropertyAddress buf = *v12;
    *(void *)&buf[16] = *(void *)(a1 + 208);
  }
  sub_1D0AEC(a1, buf, (const __CFString *)qword_64CAD8, *(float *)(a1 + 240));
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  BOOL v13 = (_OWORD *)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
  {
    sub_21E8C(__p, *(void **)(a1 + 216), *(void *)(a1 + 224));
  }
  else
  {
    *(_OWORD *)std::string __p = *v13;
    uint64_t v28 = *(void *)(a1 + 232);
  }
  sub_1D0AEC(a1, (char *)__p, (const __CFString *)qword_64CAE0, *(float *)(a1 + 244));
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  *(void *)AudioObjectPropertyAddress buf = a1 + 192;
  unint64_t v14 = sub_23124((uint64_t **)(a1 + 144), (void **)(a1 + 192), (long long **)buf);
  *(void *)AudioObjectPropertyAddress buf = a1 + 216;
  uint64_t v15 = sub_23124((uint64_t **)(a1 + 144), (void **)(a1 + 216), (long long **)buf);
  uint64_t v16 = *((unsigned int *)v14 + 14);
  if (!v16 || (uint64_t v17 = *((unsigned int *)v15 + 14), !v17))
  {
    uint64_t v22 = sub_32A48(13);
    unint64_t v23 = sub_7D5E8(1, *(void **)v22, *(void *)(v22 + 8));
    uint64_t v24 = v23;
    if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 332;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"mCalculatedAPC2Power not initialized; Sending a zero value to AHS!\"",
        buf,
        0x12u);
    }

    char v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "mCalculatedAPC2Power not initialized; Sending a zero value to AHS!");
  }
  int v18 = *(id *)sub_32A48(16);
  __int16 v19 = v18;
  if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 215) < 0) {
      uint64_t v12 = *(_OWORD **)v12;
    }
    if (*(char *)(a1 + 239) < 0) {
      BOOL v13 = *(_OWORD **)v13;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 333;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v12;
    __int16 v30 = 1024;
    int v31 = v16;
    __int16 v32 = 2080;
    __int16 v33 = v13;
    __int16 v34 = 1024;
    int v35 = v17;
    _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Continuous Haptics -- Out APC2 Values { %s : %u }, { %s : %u }", buf, 0x32u);
  }

  if (theDict) {
    CFRelease(theDict);
  }
  return v16 | (v17 << 32);
}

void sub_1D1140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, __int16 a11, char a12, char a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  __cxa_free_exception(v25);
  sub_60394(&a10);
  _Unwind_Resume(a1);
}

void sub_1D11E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (uint64_t **)(a1 + 168);
  if (*(char *)(a1 + 295) < 0)
  {
    sub_21E8C(__p, *(void **)(a1 + 272), *(void *)(a1 + 280));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 272);
    uint64_t v8 = *(void *)(a1 + 288);
  }
  uint64_t v9 = a2;
  sub_1D12EC(v6, __p, (uint64_t)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a1 + 319) < 0)
  {
    sub_21E8C(__p, *(void **)(a1 + 296), *(void *)(a1 + 304));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 296);
    uint64_t v8 = *(void *)(a1 + 312);
  }
  uint64_t v9 = a3;
  sub_1D12EC(v6, __p, (uint64_t)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  sub_1D0330(a1);
}

void sub_1D12CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1D12EC(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t result = sub_15DF8((uint64_t)a1, &v10, a2);
  if (!*result)
  {
    int v6 = (uint64_t **)result;
    uint64_t v7 = (uint64_t *)operator new(0x40uLL);
    uint64_t v8 = v7 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_21E8C(v8, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
      v7[6] = *(void *)(a3 + 16);
    }
    v7[7] = *(void *)(a3 + 24);
    uint64_t v9 = v10;
    return sub_46CA8(a1, v9, v6, v7);
  }
  return result;
}

void sub_1D13A8(_Unwind_Exception *a1)
{
  sub_79970(0, v1);
  _Unwind_Resume(a1);
}

void sub_1D13C0(uint64_t a1, uint64_t a2, int a3)
{
  int v6 = (std::mutex *)(a2 + 344);
  std::mutex::lock((std::mutex *)(a2 + 344));
  CFTypeRef cf = 0;
  if (!a3)
  {
    memset(buf, 0, 24);
    sub_162D4(buf, *(void *)(a2 + 16));
    BOOL v13 = *(void **)a2;
    if (*(void *)a2 != a2 + 8)
    {
      do
      {
        sub_1D1844(buf, (const UInt8 *)v13 + 32, (int *)v13 + 14);
        unint64_t v14 = (void *)v13[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            unint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (void *)v13[2];
            BOOL v10 = *v15 == (void)v13;
            BOOL v13 = v15;
          }
          while (!v10);
        }
        BOOL v13 = v15;
      }
      while (v15 != (void *)(a2 + 8));
    }
    CFDictionaryRef v11 = sub_4D69C((void ***)buf);
    v28[0] = buf;
    sub_14F84((void ***)v28);
    CFTypeRef v12 = cf;
    CFTypeRef cf = v11;
    if (!v12) {
      goto LABEL_32;
    }
LABEL_30:
    CFRelease(v12);
    goto LABEL_32;
  }
  if (a3 == 1)
  {
    memset(buf, 0, 24);
    sub_162D4(buf, *(void *)(a2 + 80));
    uint64_t v16 = *(void **)(a2 + 64);
    if (v16 != (void *)(a2 + 72))
    {
      do
      {
        sub_1D1844(buf, (const UInt8 *)v16 + 32, (int *)v16 + 14);
        uint64_t v17 = (void *)v16[1];
        if (v17)
        {
          do
          {
            int v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            int v18 = (void *)v16[2];
            BOOL v10 = *v18 == (void)v16;
            uint64_t v16 = v18;
          }
          while (!v10);
        }
        uint64_t v16 = v18;
      }
      while (v18 != (void *)(a2 + 72));
    }
    CFDictionaryRef v11 = sub_4D69C((void ***)buf);
    v28[0] = buf;
    sub_14F84((void ***)v28);
    CFTypeRef v12 = cf;
    CFTypeRef cf = v11;
    if (!v12) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  if (a3 != 2)
  {
    CFDictionaryRef v11 = 0;
    goto LABEL_32;
  }
  memset(buf, 0, 24);
  sub_162D4(buf, *(void *)(a2 + 48));
  uint64_t v7 = *(void **)(a2 + 32);
  if (v7 != (void *)(a2 + 40))
  {
    do
    {
      sub_1D1844(buf, (const UInt8 *)v7 + 32, (int *)v7 + 14);
      uint64_t v8 = (void *)v7[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          uint64_t v7 = v9;
        }
        while (!v10);
      }
      uint64_t v7 = v9;
    }
    while (v9 != (void *)(a2 + 40));
  }
  CFDictionaryRef v11 = sub_4D69C((void ***)buf);
  v28[0] = buf;
  sub_14F84((void ***)v28);
  CFTypeRef v12 = cf;
  CFTypeRef cf = v11;
  if (v12) {
    goto LABEL_30;
  }
LABEL_32:
  uint64_t v19 = sub_32A48(13);
  if (*(unsigned char *)(v19 + 8))
  {
    id v20 = *(id *)v19;
    if (v20)
    {
      __int16 v21 = v20;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
        sub_21C8C(v28, off_626568[a3]);
        if (v29 >= 0) {
          uint64_t v22 = v28;
        }
        else {
          uint64_t v22 = (void **)v28[0];
        }
        CFStringRef v23 = CFCopyDescription(v11);
        sub_20B40((uint64_t)__p, v23);
        if (v23) {
          CFRelease(v23);
        }
        uint64_t v24 = __p;
        if (v27 < 0) {
          uint64_t v24 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "CPMSInterface.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 455;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v22;
        __int16 v32 = 2080;
        __int16 v33 = v24;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Fetching cached CPMS speaker dictionary from %s: %s", buf, 0x26u);
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
      }
    }
  }
  if (a3) {
    uint64_t v25 = 56;
  }
  else {
    uint64_t v25 = 24;
  }
  if (v11)
  {
    CFRetain(v11);
    *(void *)a1 = v11;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + v25);
    CFRelease(v11);
  }
  else
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + v25);
  }
  std::mutex::unlock(v6);
}

void sub_1D1790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D1844(void *a1, const UInt8 *a2, int *a3)
{
  int v6 = a1 + 2;
  unint64_t v7 = a1[2];
  unint64_t v8 = a1[1];
  if (v8 >= v7)
  {
    uint64_t v11 = (uint64_t)(v8 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_60548();
    }
    uint64_t v12 = v7 - *a1;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    id v20 = v6;
    if (v14) {
      unint64_t v14 = (unint64_t)sub_10724(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v16 = v14;
    uint64_t v17 = (CFStringRef *)(v14 + 16 * v11);
    unint64_t v19 = v14 + 16 * v15;
    sub_1D1964(v17, a2, a3);
    int v18 = v17 + 2;
    sub_163A8(a1, &v16);
    unint64_t v10 = a1[1];
    uint64_t result = sub_16358((uint64_t)&v16);
  }
  else
  {
    uint64_t result = (uint64_t)sub_1D1964((CFStringRef *)a1[1], a2, a3);
    unint64_t v10 = v8 + 16;
    a1[1] = v8 + 16;
  }
  a1[1] = v10;
  return result;
}

void sub_1D1944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_16358((uint64_t)va);
  _Unwind_Resume(a1);
}

CFStringRef *sub_1D1964(CFStringRef *a1, const UInt8 *a2, int *a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int valuePtr = *a3;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = (CFStringRef)v8;
  if (!v8)
  {
    uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
  }
  return a1;
}

void sub_1D1A68(_Unwind_Exception *a1)
{
  CFTypeRef v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

CFArrayRef sub_1D1ACC(CFArrayRef *a1, unsigned int a2, void *a3)
{
  CFArrayRef result = *a1;
  if (result)
  {
    if (CFArrayGetCount(result) <= a2)
    {
      return 0;
    }
    else
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*a1, a2);
      *a3 = ValueAtIndex;
      return (const __CFArray *)(ValueAtIndex != 0);
    }
  }
  return result;
}

uint64_t sub_1D1B30(CFArrayRef *a1, unsigned int a2, void *a3)
{
  CFTypeRef cf = 0;
  unsigned int v4 = sub_1D1ACC(a1, a2, &cf);
  uint64_t result = 0;
  if (v4)
  {
    CFNumberRef v6 = (const __CFNumber *)cf;
    if (cf)
    {
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v6, kCFNumberSInt32Type, a3);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFTypeID sub_1D1BB4(CFArrayRef *a1, unsigned int a2, void *a3)
{
  CFTypeRef cf = 0;
  CFTypeID result = (CFTypeID)sub_1D1ACC(a1, a2, &cf);
  if (result)
  {
    CFNumberRef v5 = (const __CFNumber *)cf;
    if (cf)
    {
      CFTypeID v6 = CFGetTypeID(cf);
      CFTypeID result = CFNumberGetTypeID();
      if (v6 == result)
      {
        return CFNumberGetValue(v5, kCFNumberFloat32Type, a3);
      }
    }
  }
  return result;
}

uint64_t sub_1D1C44(CFArrayRef *a1, unsigned int a2, void *a3)
{
  CFTypeRef cf = 0;
  unsigned int v4 = sub_1D1ACC(a1, a2, &cf);
  uint64_t result = 0;
  if (v4)
  {
    CFTypeRef v6 = cf;
    if (cf)
    {
      CFTypeID v7 = CFGetTypeID(cf);
      if (v7 == CFDictionaryGetTypeID())
      {
        *a3 = v6;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1D1CBC(uint64_t a1, const void *a2)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    *(void *)a1 = a2;
    *(unsigned char *)(a1 + 9) = 0;
    return a1;
  }
  unsigned int v4 = *(const void **)a1;
  if (!*(void *)a1)
  {
    *(void *)a1 = a2;
    *(unsigned char *)(a1 + 9) = 0;
    if (!a2) {
      return a1;
    }
LABEL_8:
    CFRetain(a2);
    return a1;
  }
  CFRelease(v4);
  int v5 = *(unsigned __int8 *)(a1 + 8);
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 9) = 0;
  if (a2 && v5) {
    goto LABEL_8;
  }
  return a1;
}

NSObject *sub_1D1D30(uint64_t a1, __int32 **a2)
{
  AudioObjectID v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  __p.__r_.__value_.__r.__words[0] = 0x696E707473736323;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  sub_869C8((uint64_t)buf, &v16, (AudioObjectPropertyAddress *)&__p, 0, 0);
  if (!v20) {
    return 0;
  }
  CFTypeRef v3 = *(unsigned int **)&v19[4];
  unsigned int v4 = *(unsigned int **)&v19[12];
  int v5 = (os_log_t *)sub_32A48(26);
  CFTypeRef v6 = *v5;
  if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
  {
    sub_82188(&__p, v3, v4);
    CFTypeID v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)unint64_t v19 = "Device_HapticDebug_Aspen.cpp";
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = 162;
    *(_WORD *)&v19[14] = 2080;
    *(void *)&v19[16] = v7;
    _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_INFO, "%25s:%-5d Valid haptic debug datasources: %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  CFNumberRef v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 == v9)
  {
LABEL_15:
    uint64_t v12 = (&def_1E50E8 + 1);
  }
  else
  {
    while (1)
    {
      unint64_t v10 = wmemchr((__int32 *)v3, *v8, v4 - v3);
      uint64_t v11 = v10 ? (unsigned int *)v10 : v4;
      if (v11 == v4) {
        break;
      }
      if (++v8 == v9) {
        goto LABEL_15;
      }
    }
    uint64_t v13 = (os_log_t *)sub_32A48(17);
    uint64_t v12 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&__p, *v8);
        unint64_t v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)unint64_t v19 = "Device_HapticDebug_Aspen.cpp";
        *(_WORD *)&v19[8] = 1024;
        *(_DWORD *)&v19[10] = 174;
        *(_WORD *)&v19[14] = 2080;
        *(void *)&v19[16] = v14;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Haptic input source %s is not supported", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v12 = 0;
    }
  }
  if (v3) {
    operator delete(v3);
  }
  return v12;
}

void sub_1D1FA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D1FC8(uint64_t a1)
{
  CFTypeRef v2 = (void *)qword_660488;
  if (qword_660488)
  {
    uint64_t v5 = qword_660490;
    if (qword_660490) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_660490 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    sub_3EA704(&v4);
    CFTypeRef v2 = v4;
  }
  sub_3EE0E8(v2, a1);
  CFTypeRef v3 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    sub_4636C(v3);
  }
}

void sub_1D2058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D2070(unsigned int **a1@<X0>, void *a2@<X8>)
{
  unsigned int v4 = (os_log_t *)sub_32A48(26);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    (*((void (**)(void **__return_ptr, unsigned int **))*a1 + 16))(v75, a1);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
    __int16 v82 = 1024;
    int v83 = 127;
    __int16 v84 = 2112;
    uint64_t v85 = (const char *)v75[0];
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device is %@", buf, 0x1Cu);
    sub_72924((uint64_t)v75);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BC90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64BC90))
  {
    *(void *)AudioObjectPropertyAddress buf = 0;
    buf[8] = 0;
    byte_64BC78 = 0;
    qword_64BC80 = 0;
    byte_64BC88 = 0;
    sub_72924((uint64_t)buf);
    __cxa_guard_release(&qword_64BC90);
  }
  if ((byte_64BC70 & 1) == 0)
  {
    sub_161714((uint64_t)&__p, @"TDMDebugInputs", 0);
    if (__p.__r_.__value_.__s.__data_[0])
    {
      if (__p.__r_.__value_.__l.__size_)
      {
        CFRetain((CFTypeRef)__p.__r_.__value_.__l.__size_);
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      else
      {
        std::string::size_type size = 0;
      }
      *(void *)AudioObjectPropertyAddress buf = size;
      buf[8] = 0;
      sub_8B9E0((uint64_t)&qword_64BC80, (uint64_t)buf);
      sub_72924((uint64_t)buf);
      byte_64BC78 = qword_64BC80 != 0;
      if (qword_64BC80) {
        goto LABEL_15;
      }
      CFTypeID v7 = (os_log_t *)sub_32A48(13);
      CFNumberRef v8 = *v7;
      if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
        __int16 v82 = 1024;
        int v83 = 1629;
        __int16 v84 = 2080;
        uint64_t v85 = "TDMDebugInputs";
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"An invalid string was retrieved for defaults key %s\"", buf, 0x1Cu);
      }
      if (byte_64BC78)
      {
LABEL_15:
        uint64_t v9 = (os_log_t *)sub_32A48(13);
        unint64_t v10 = *v9;
        if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          __int16 v82 = 1024;
          int v83 = 1631;
          __int16 v84 = 2080;
          uint64_t v85 = "TDMDebugInputs";
          __int16 v86 = 2112;
          uint64_t v87 = qword_64BC80;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined as \"%@\"", buf, 0x26u);
        }
      }
      byte_64BC70 = 1;
    }
    sub_72924((uint64_t)&__p.__r_.__value_.__l.__size_);
  }
  if (byte_64BC78)
  {
    sub_21B7C(&__str, (CFStringRef)qword_64BC80);
    uint64_t v11 = (os_log_t *)sub_32A48(26);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "HapticDebugCapturesPolicy.cpp";
      __int16 v82 = 1024;
      int v83 = 77;
      __int16 v84 = 2080;
      uint64_t v85 = (const char *)p_str;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_INFO, "%25s:%-5d haptic input string read from defaults is %s", buf, 0x1Cu);
    }
    std::string::size_type v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    std::string::size_type v15 = __str.__r_.__value_.__l.__size_;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v16 = __str.__r_.__value_.__l.__size_;
    }
    if (v16 <= 3)
    {
      CFDictionaryRef v70 = (os_log_t *)sub_32A48(13);
      CFDictionaryRef v71 = *v70;
      if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HapticDebugCapturesPolicy.cpp";
        __int16 v82 = 1024;
        int v83 = 78;
        _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    uint64_t v17 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v18 = &__str;
    }
    else {
      int v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    unint64_t v19 = v18;
    while (1)
    {
      int v20 = v19->__r_.__value_.__s.__data_[0];
      if (v20 != 44 && v20 != 32) {
        break;
      }
      unint64_t v19 = (std::string *)((char *)v19 + 1);
      if (!--v16) {
        goto LABEL_37;
      }
    }
    std::string::size_type v41 = (char *)v19 - (char *)v18;
    if ((char *)v19 - (char *)v18 == -1)
    {
LABEL_37:
      unint64_t v21 = 0;
      long long v74 = 0u;
      goto LABEL_38;
    }
    unint64_t v21 = 0;
    int v42 = 0;
    long long v74 = 0u;
    do
    {
      if (v42 == 8) {
        break;
      }
      std::string::size_type v43 = v41 + 1;
      if ((v14 & 0x80u) != 0) {
        std::string::size_type v14 = v15;
      }
      else {
        uint64_t v17 = &__str;
      }
      if (v14 > v43)
      {
        CFDictionaryRef v44 = (unsigned __int8 *)v17 + v43;
        uint64_t v45 = (unsigned __int8 *)v17 + v14;
LABEL_84:
        uint64_t v46 = 0;
        while (*v44 != asc_5BD4FB[v46])
        {
          if (++v46 == 2)
          {
            if (++v44 != v45) {
              goto LABEL_84;
            }
            goto LABEL_91;
          }
        }
        if (v44 != v45)
        {
          unint64_t v47 = v44 - (unsigned __int8 *)v17;
          unint64_t v48 = v47;
          if (v47 != -1) {
            goto LABEL_92;
          }
        }
      }
LABEL_91:
      unint64_t v47 = -1;
      unint64_t v48 = v14;
LABEL_92:
      std::string::size_type v49 = v48 - v41;
      if (v48 - v41 == 4)
      {
        int v73 = v42;
        unsigned int v50 = bswap32(*(_DWORD *)((char *)&v18->__r_.__value_.__l.__data_ + v41));
        uint64_t v51 = *((void *)&v74 + 1);
        if (*((void *)&v74 + 1) >= v21)
        {
          CFDictionaryRef v56 = (void *)v74;
          uint64_t v57 = (uint64_t)(*((void *)&v74 + 1) - v74) >> 2;
          unint64_t v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62) {
            sub_60548();
          }
          if ((uint64_t)(v21 - v74) >> 1 > v58) {
            unint64_t v58 = (uint64_t)(v21 - v74) >> 1;
          }
          if (v21 - (unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v59 = v58;
          }
          if (v59) {
            unint64_t v59 = (unint64_t)sub_46BF4(v59);
          }
          else {
            uint64_t v60 = 0;
          }
          char v61 = (unsigned int *)(v59 + 4 * v57);
          *char v61 = v50;
          uint64_t v52 = (uint64_t)(v61 + 1);
          while (v51 != (void)v74)
          {
            unsigned int v62 = *(_DWORD *)(v51 - 4);
            v51 -= 4;
            *--char v61 = v62;
          }
          unint64_t v21 = v59 + 4 * v60;
          *(void *)&long long v74 = v61;
          if (v56) {
            operator delete(v56);
          }
        }
        else
        {
          **((_DWORD **)&v74 + 1) = v50;
          uint64_t v52 = *((void *)&v74 + 1) + 4;
        }
        *(void *)&long long v63 = v74;
        *((void *)&v63 + 1) = v52;
        long long v74 = v63;
        int v42 = v73;
      }
      else
      {
        CFDictionaryRef v53 = (os_log_t *)sub_32A48(13);
        uint64_t v54 = *v53;
        if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_INFO))
        {
          std::string::basic_string(&__p, &__str, v41, v49, (std::allocator<char> *)&v80);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          __int16 v82 = 1024;
          int v83 = 779;
          __int16 v84 = 2080;
          uint64_t v85 = (const char *)p_p;
          _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_INFO, "%25s:%-5d Skipping... 4cc code is not of size 4 : %s", buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      std::string::size_type v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      std::string::size_type v15 = __str.__r_.__value_.__l.__size_;
      uint64_t v17 = (std::string *)__str.__r_.__value_.__r.__words[0];
      CFDictionaryRef v64 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        std::string::size_type v65 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else
      {
        std::string::size_type v65 = __str.__r_.__value_.__l.__size_;
        CFDictionaryRef v64 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      BOOL v66 = v65 > v47;
      std::string::size_type v67 = v65 - v47;
      if (!v66) {
        break;
      }
      ++v42;
      CFArrayRef v68 = (std::string *)((char *)v64 + v47);
      while (1)
      {
        int v69 = v68->__r_.__value_.__s.__data_[0];
        if (v69 != 44 && v69 != 32) {
          break;
        }
        CFArrayRef v68 = (std::string *)((char *)v68 + 1);
        if (!--v67) {
          goto LABEL_38;
        }
      }
      std::string::size_type v41 = (char *)v68 - (char *)v64;
    }
    while ((char *)v68 - (char *)v64 != -1);
LABEL_38:
    uint64_t v22 = sub_32A48(13);
    if (*(unsigned char *)(v22 + 8))
    {
      CFStringRef v23 = *(NSObject **)v22;
      if (*(void *)v22)
      {
        if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
        {
          sub_1001A8(&__p, (unsigned int *)v74, *((unsigned int **)&v74 + 1));
          uint64_t v24 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          __int16 v82 = 1024;
          int v83 = 789;
          __int16 v84 = 2080;
          uint64_t v85 = (const char *)v24;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d FCC in Vector: %s", buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    *(_OWORD *)uint64_t v75 = v74;
    unint64_t v76 = v21;
    int v25 = 1;
    unsigned __int8 v77 = 1;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      int v25 = v77;
    }
  }
  else
  {
    int v25 = 0;
    LOBYTE(v75[0]) = 0;
    unsigned __int8 v77 = 0;
  }
  if (v25) {
    unint64_t v26 = (unsigned int **)v75;
  }
  else {
    unint64_t v26 = a1 + 62;
  }
  unsigned int v27 = (*((uint64_t (**)(unsigned int **, void))*a1 + 55))(a1, 0);
  unsigned int v28 = v27;
  if (v25) {
    char v29 = (unsigned int **)&v75[1];
  }
  else {
    char v29 = a1 + 63;
  }
  uint64_t v30 = *v29 - *v26;
  if (v30 == v27)
  {
    char v31 = (*((uint64_t (**)(unsigned int **, unsigned int **))*a1 + 62))(a1, v26);
    uint64_t v32 = (uint64_t)*v29;
    __int16 v33 = *v26;
    if (v31)
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_46B38(a2, v33, v32, (v32 - (uint64_t)v33) >> 2);
      goto LABEL_72;
    }
    uint64_t v30 = (v32 - (uint64_t)v33) >> 2;
  }
  uint64_t v34 = v28;
  if (v30 != v28)
  {
    int v35 = (os_log_t *)sub_32A48(26);
    __int16 v36 = *v35;
    if (*v35)
    {
      if (os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        uint64_t v37 = *v29 - *v26;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
        __int16 v82 = 1024;
        int v83 = 134;
        __int16 v84 = 2048;
        uint64_t v85 = (const char *)v37;
        __int16 v86 = 2048;
        uint64_t v87 = v34;
        _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d # of haptic debug inputs (%lu) does not equal %zu", buf, 0x26u);
      }
    }
  }
  if (((*((uint64_t (**)(unsigned int **, unsigned int **))*a1 + 62))(a1, v26) & 1) == 0)
  {
    __int16 v38 = (os_log_t *)sub_32A48(26);
    int v39 = *v38;
    if (*v38)
    {
      if (os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
      {
        sub_82188(&__p, *v26, *v29);
        char v40 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
        __int16 v82 = 1024;
        int v83 = 135;
        __int16 v84 = 2080;
        uint64_t v85 = (const char *)v40;
        _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported input in list %s", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
LABEL_72:
  if (v77)
  {
    if (v75[0])
    {
      v75[1] = v75[0];
      operator delete(v75[0]);
    }
  }
}

void sub_1D2B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if ((void)a13) {
    operator delete((void *)a13);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D2BF8(uint64_t a1, unsigned int a2)
{
  if (a2 != 1751409257)
  {
    CFTypeRef v3 = (os_log_t *)sub_32A48(17);
    unsigned int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v13 = "Device_HapticDebug_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 193;
      __int16 v16 = 2080;
      uint64_t v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    CFTypeRef v6 = (os_log_t *)sub_32A48(13);
    CFTypeID v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v13 = "Device_HapticDebug_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 194;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_1D2DB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D2DCC(os_unfair_lock_s *a1)
{
}

void sub_1D3040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D3108(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  uint64_t v5 = (void *)sub_433710(a1, a2, a3, a3, 0);
  *uint64_t v5 = off_626590;
  unsigned int v6 = sub_42CEA4((uint64_t)v5, 0);
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  strcpy(inAddress, "crsstpni");
  inAddress[9] = 0;
  *(_WORD *)&inAddress[10] = 0;
  if (AudioObjectHasProperty(a2, (const AudioObjectPropertyAddress *)inAddress))
  {
    uint64_t v7 = v6;
    global_queue = dispatch_get_global_queue(0, 0);
    uint64_t v9 = global_queue;
    if (global_queue) {
      dispatch_retain(global_queue);
    }
    uint64_t v10 = a1 + 496;
    char v11 = dispatch_semaphore_create(0);
    std::to_string(&v61, v6);
    uint64_t v12 = std::string::insert(&v61, 0, "hdds", 4uLL);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    __int16 v14 = std::string::append(&v62, ".dat", 4uLL);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_186AD8(inAddress);
    std::string::size_type size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
    if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v63.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      sub_6D838((std::string *)buf, (std::string *)inAddress);
      sub_6D838(&v65.__pn_, &v63);
      sub_6D8A0(&__p, (uint64_t)buf, &v65);
      if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_21E8C(&__dst, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
        if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__pn_.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::__fs::filesystem::path __dst = __p;
      }
      if (SHIBYTE(v65.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__pn_.__r_.__value_.__l.__data_);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if ((inAddress[23] & 0x80000000) != 0) {
        operator delete(*(void **)inAddress);
      }
    }
    else
    {
      std::__fs::filesystem::path __dst = *(std::__fs::filesystem::path *)inAddress;
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
    }
    dispatch_fd_t v18 = open((const char *)p_dst, 0);
    if ((v18 & 0x80000000) == 0)
    {
      *(void *)AudioObjectPropertyAddress inAddress = 0;
      *(void *)&inAddress[8] = inAddress;
      *(void *)&inAddress[16] = 0x4002000000;
      *(void *)&unsigned char inAddress[24] = sub_1D3C24;
      *(void *)&inAddress[32] = sub_1D3C48;
      CFDictionaryRef v70 = 0;
      CFDictionaryRef v71 = 0;
      uint64_t v72 = 0;
      __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
      __p.__pn_.__r_.__value_.__l.__size_ = 1174405120;
      __p.__pn_.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_1D3C60;
      unint64_t v58 = &unk_6267B8;
      unint64_t v59 = inAddress;
      dispatch_object_t object = v11;
      if (v11) {
        dispatch_retain(v11);
      }
      dispatch_read(v18, 0xFFFFFFFFFFFFFFFFLL, v9, &__p);
      dispatch_time_t v19 = dispatch_time(0, 1000000000);
      dispatch_semaphore_wait(v11, v19);
      uint64_t v55 = v9;
      CFDictionaryRef v56 = (void *)(a1 + 496);
      close(v18);
      unint64_t v21 = *(char **)(*(void *)&inAddress[8] + 40);
      int v20 = *(unsigned char **)(*(void *)&inAddress[8] + 48);
      uint64_t v22 = v20 - v21;
      unint64_t v23 = (v20 - v21) >> 2;
      uint64_t v24 = *(void *)(a1 + 512);
      int v25 = *(char **)(a1 + 496);
      if (v23 <= (v24 - (uint64_t)v25) >> 2)
      {
        unsigned int v28 = (void **)(a1 + 504);
        char v29 = *(unsigned char **)(a1 + 504);
        unint64_t v30 = (v29 - v25) >> 2;
        if (v30 >= v23)
        {
          if (v20 != v21) {
            memmove(*(void **)(a1 + 496), v21, v20 - v21);
          }
          uint64_t v10 = a1 + 496;
        }
        else
        {
          char v31 = &v21[4 * v30];
          if (v29 != v25)
          {
            memmove(*(void **)(a1 + 496), v21, v29 - v25);
            int v25 = (char *)*v28;
          }
          uint64_t v22 = v20 - v31;
          if (v20 != v31) {
            memmove(v25, v31, v20 - v31);
          }
          uint64_t v10 = a1 + 496;
        }
      }
      else
      {
        if (v25)
        {
          *(void *)(a1 + 504) = v25;
          operator delete(v25);
          uint64_t v24 = 0;
          *CFDictionaryRef v56 = 0;
          *(void *)(a1 + 504) = 0;
          *(void *)(a1 + 512) = 0;
        }
        if (v22 < 0) {
          sub_60548();
        }
        uint64_t v26 = v24 >> 1;
        if (v24 >> 1 <= v23) {
          uint64_t v26 = (v20 - v21) >> 2;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        uint64_t v10 = a1 + 496;
        sub_46BB4(v56, v27);
        unsigned int v28 = (void **)(a1 + 504);
        int v25 = *(char **)(a1 + 504);
        if (v20 != v21) {
          memmove(*(void **)(a1 + 504), v21, v20 - v21);
        }
      }
      *unsigned int v28 = &v25[v22];
      uint64_t v32 = (os_log_t *)sub_32A48(26);
      __int16 v33 = *v32;
      uint64_t v9 = v55;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
      {
        sub_1001A8(&v65.__pn_, *(unsigned int **)(a1 + 496), *(unsigned int **)(a1 + 504));
        uint64_t v34 = (v65.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v65
            : (std::__fs::filesystem::path *)v65.__pn_.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 80;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v7;
        __int16 v67 = 2080;
        uint64_t v68 = (uint64_t)v34;
        _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Haptic debug (read) -- channels: %zu, default datasources: %s", buf, 0x26u);
        if (SHIBYTE(v65.__pn_.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__pn_.__r_.__value_.__l.__data_);
        }
      }
      if (object) {
        dispatch_release(object);
      }
      _Block_object_dispose(inAddress, 8);
      if (v70)
      {
        CFDictionaryRef v71 = v70;
        operator delete(v70);
      }
    }
    if (v7 != (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 2)
    {
      LODWORD(v63.__r_.__value_.__l.__data_) = a2;
      v65.__pn_.__r_.__value_.__r.__words[0] = 0x696E707473737263;
      LODWORD(v65.__pn_.__r_.__value_.__r.__words[1]) = 0;
      sub_869C8((uint64_t)inAddress, (AudioObjectID *)&v63, (AudioObjectPropertyAddress *)&v65, 0, 0);
      int v35 = *(_DWORD *)inAddress;
      if (*(_DWORD *)inAddress || !inAddress[32])
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = v35;
      }
      memset(buf, 0, 24);
      __int16 v36 = *(void **)&inAddress[8];
      sub_46B38(buf, *(const void **)&inAddress[8], *(uint64_t *)&inAddress[16], (uint64_t)(*(void *)&inAddress[16] - *(void *)&inAddress[8]) >> 2);
      if (v36) {
        operator delete(v36);
      }
      uint64_t v37 = *(void **)v10;
      if (*(void *)v10)
      {
        *(void *)(a1 + 504) = v37;
        operator delete(v37);
        *(void *)uint64_t v10 = 0;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
      }
      *(_OWORD *)(a1 + 496) = *(_OWORD *)buf;
      *(void *)(a1 + 512) = *(void *)&buf[16];
      __int16 v38 = (os_log_t *)sub_32A48(26);
      int v39 = *v38;
      if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v41 = *(unsigned int **)(a1 + 496);
        char v40 = *(unsigned int **)(a1 + 504);
        sub_1001A8((std::string *)buf, v41, v40);
        int v42 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315906;
        *(void *)&inAddress[4] = "Device_HapticDebug_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 87;
        *(_WORD *)&inAddress[18] = 2048;
        *(void *)&inAddress[20] = v40 - v41;
        *(_WORD *)&inAddress[28] = 2080;
        *(void *)&inAddress[30] = v42;
        _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Haptic debug (write) -- channels: %zu, driver datasources: %s", inAddress, 0x26u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if ((__dst.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v43 = &__dst;
      }
      else {
        std::string::size_type v43 = (std::__fs::filesystem::path *)__dst.__pn_.__r_.__value_.__r.__words[0];
      }
      dispatch_fd_t v44 = open((const char *)v43, 1537, 504);
      if ((v44 & 0x80000000) == 0)
      {
        uint64_t v45 = dispatch_data_create(*(const void **)(a1 + 496), *(void *)(a1 + 504) - *(void *)(a1 + 496), v9, 0);
        *(void *)AudioObjectPropertyAddress inAddress = _NSConcreteStackBlock;
        *(void *)&inAddress[8] = 1174405120;
        *(void *)&inAddress[16] = sub_1D3CF0;
        *(void *)&unsigned char inAddress[24] = &unk_6267E8;
        *(void *)&inAddress[32] = v11;
        if (v11) {
          dispatch_retain(v11);
        }
        dispatch_write(v44, v45, v9, inAddress);
        dispatch_time_t v46 = dispatch_time(0, 1000000000);
        dispatch_semaphore_wait(v11, v46);
        dispatch_release(v45);
        close(v44);
        if (*(void *)&inAddress[32]) {
          dispatch_release(*(dispatch_object_t *)&inAddress[32]);
        }
      }
    }
    if (v7 != (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 2)
    {
      unint64_t v47 = (os_log_t *)sub_32A48(13);
      unint64_t v48 = *v47;
      if (*v47)
      {
        if (os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
        {
          uint64_t v49 = (uint64_t)(*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 2;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 106;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v7;
          __int16 v67 = 2048;
          uint64_t v68 = v49;
          _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Number of data sources %zu does not match number of channels %zu.\"", buf, 0x26u);
        }
      }
    }
    unsigned int v50 = (os_log_t *)sub_32A48(26);
    uint64_t v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_DEFAULT))
    {
      sub_1001A8(&v65.__pn_, *(unsigned int **)(a1 + 496), *(unsigned int **)(a1 + 504));
      uint64_t v52 = (v65.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v65
          : (std::__fs::filesystem::path *)v65.__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_HapticDebug_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 107;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v7;
      __int16 v67 = 2080;
      uint64_t v68 = (uint64_t)v52;
      _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Haptic debug -- channels: %zu, default datasources: %s", buf, 0x26u);
      if (SHIBYTE(v65.__pn_.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__pn_.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__dst.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__pn_.__r_.__value_.__l.__data_);
    }
    if (v11) {
      dispatch_release(v11);
    }
    if (v9) {
      dispatch_release(v9);
    }
  }
  return a1;
}

void sub_1D3A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, dispatch_object_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (v59) {
    dispatch_release(v59);
  }
  if (v60) {
    dispatch_release(v60);
  }
  std::string v63 = *v61;
  if (*v61)
  {
    *(void *)(v58 + 504) = v63;
    operator delete(v63);
  }
  sub_43456C(v58);
  _Unwind_Resume(a1);
}

void sub_1D3C0C(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x1D3C04);
}

void sub_1D3C1C()
{
}

__n128 sub_1D3C24(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_1D3C48(uint64_t a1)
{
  CFTypeRef v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

intptr_t sub_1D3C60(uint64_t a1, dispatch_data_t data, int a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_1D3E20;
  v5[3] = &unk_626790;
  void v5[4] = *(void *)(a1 + 32);
  int v6 = a3;
  dispatch_data_apply(data, v5);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

intptr_t sub_1D3CF0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(26);
    int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315650;
        uint64_t v9 = "Device_HapticDebug_Aspen.cpp";
        __int16 v10 = 1024;
        int v11 = 96;
        __int16 v12 = 1024;
        int v13 = a3;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error (write): %d", (uint8_t *)&v8, 0x18u);
      }
    }
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1D3DD0(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 32);
  if (v1) {
    dispatch_release(v1);
  }
}

void sub_1D3DE0(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3 = *(NSObject **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void sub_1D3DF8(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (v1) {
    dispatch_release(v1);
  }
}

void sub_1D3E08(uint64_t a1, uint64_t a2)
{
  CFTypeRef v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

uint64_t sub_1D3E20(uint64_t a1, int a2, int a3, char *__src, uint64_t a5)
{
  sub_6720C((char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), __src, (uint64_t)&__src[a5 & 0xFFFFFFFFFFFFFFFCLL], a5 >> 2);
  if (*(_DWORD *)(a1 + 40))
  {
    int v6 = (os_log_t *)sub_32A48(26);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(_DWORD *)(a1 + 40);
        int v10 = 136315650;
        int v11 = "Device_HapticDebug_Aspen.cpp";
        __int16 v12 = 1024;
        int v13 = 70;
        __int16 v14 = 1024;
        int v15 = v8;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Error (read): %d", (uint8_t *)&v10, 0x18u);
      }
    }
  }
  return 1;
}

uint64_t sub_1D3F18(uint64_t a1, char *a2)
{
  uint64_t result = sub_AED38(a1, a2);
  if (result)
  {
    if (sub_3BAEC(a1))
    {
      return 1;
    }
    else
    {
      *a2 = 0;
      sub_3A944(a1);
      return 0;
    }
  }
  return result;
}

void sub_1D3F68(void *a1)
{
  *a1 = off_626828;
  sub_45F50(a1 + 18);
  sub_43DC28((uint64_t)a1);

  operator delete();
}

uint64_t sub_1D3FD0(void *a1)
{
  *a1 = off_626828;
  sub_45F50(a1 + 18);

  return sub_43DC28((uint64_t)a1);
}

BOOL sub_1D4024()
{
  uint64_t v0 = pthread_self();
  int v1 = pthread_equal(v0, (pthread_t)atomic_load_explicit(qword_64CC50, memory_order_acquire));
  if (v1)
  {
    ++dword_64CCC8;
    sub_3A944((uint64_t)&qword_64CC40);
  }
  return v1 != 0;
}

void sub_1D407C()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)int v6 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
  v9[5] = 1;
  *(void *)&v9[6] = 0;
  __int16 v10 = 0;
  int v11 = 16777473;
  v13[0] = 0;
  v13[1] = 0;
  __int16 v12 = v13;
  __int16 v14 = 0;
  char v15 = 0;
  int v16 = -1044381696;
  char v17 = 1;
  int v18 = -1044381696;
  char v19 = 1;
  int v20 = 0;
  char v21 = 1;
  int v22 = -1056964608;
  char v23 = 1;
  int v24 = -1033371648;
  char v25 = 1;
  int v26 = 0;
  char v27 = 1;
  int v28 = -1033371648;
  char v29 = 1;
  int v30 = 0;
  char v31 = 1;
  int v32 = -1044381696;
  char v33 = 1;
  int v34 = 0;
  char v35 = 1;
  int v36 = -1033371648;
  char v37 = 1;
  int v38 = 0;
  char v39 = 1;
  int v40 = -1033371648;
  char v41 = 1;
  int v42 = -1055916032;
  char v43 = 1;
  int v44 = -1033371648;
  char v45 = 1;
  int v46 = 0;
  char v47 = 1;
  int v48 = -1055916032;
  char v49 = 1;
  int v50 = -1033371648;
  char v51 = 1;
  int v52 = -1055916032;
  char v53 = 1;
  int v54 = -1033371648;
  char v55 = 1;
  int v56 = 0;
  char v57 = 1;
  int v58 = -1055916032;
  char v59 = 1;
  int v60 = -1043333120;
  char v61 = 1;
  int v62 = 0x40000000;
  char v63 = 1;
  int v64 = 16777472;
  int v65 = 0;
  char v66 = 1;
  int v67 = 0;
  char v68 = 1;
  int v69 = 1103626240;
  char v70 = 1;
  int v71 = 0;
  char v72 = 1;
  int v73 = 1094713344;
  char v74 = 1;
  int v75 = 1094713344;
  char v76 = 1;
  int v77 = 1094713344;
  char v78 = 1;
  int v79 = -1061158912;
  char v80 = 1;
  int v81 = 1107296256;
  char v82 = 1;
  int v83 = 1107296256;
  char v84 = 1;
  int v85 = 1092616192;
  char v86 = 1;
  int v87 = 0;
  char v88 = 1;
  int v89 = 0;
  char v90 = 1;
  int v91 = 16777472;
  v92[0] = 0;
  v92[72] = 0;
  v92[80] = 0;
  v92[120] = 0;
  v92[128] = 0;
  v92[200] = 0;
  v92[208] = 0;
  v92[248] = 0;
  LOBYTE(v93) = 0;
  char v94 = 0;
  LOBYTE(v95) = 0;
  char v96 = 0;
  LOBYTE(v97) = 0;
  char v98 = 0;
  LOBYTE(v99) = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  LOBYTE(v103) = 0;
  char v104 = 0;
  LOBYTE(v105) = 0;
  char v106 = 0;
  LOBYTE(v107) = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  LOBYTE(v113) = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 1;
  char v128 = 0;
  char v129 = 0;
  LOBYTE(v130) = 0;
  char v131 = 0;
  LOBYTE(v132) = 0;
  char v133 = 0;
  LOBYTE(v134) = 0;
  char v135 = 0;
  LOBYTE(v136) = 0;
  char v137 = 0;
  __int16 v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  LOBYTE(v141) = 0;
  char v142 = 0;
  LOBYTE(v143) = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  LOBYTE(v149) = 0;
  char v150 = 0;
  LOBYTE(v151) = 0;
  char v152 = 0;
  LOBYTE(v153) = 0;
  char v154 = 0;
  LOBYTE(v155) = 0;
  char v156 = 0;
  char v157 = 0;
  char v158 = 0;
  char v159 = 0;
  char v160 = 0;
  LOBYTE(__p) = 0;
  char v163 = 0;
  v164.__r_.__value_.__s.__data_[0] = 0;
  char v165 = 0;
  v166.__r_.__value_.__s.__data_[0] = 0;
  char v167 = 0;
  v168.__r_.__value_.__s.__data_[0] = 0;
  char v169 = 0;
  int v170 = 256;
  char v171 = 0;
  char v172 = 0;
  char v173 = 0;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  __int16 v177 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 2;
  int v4 = 5;
  LODWORD(__src) = 3;
  sub_8732C((char *)v6, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x400000003;
  sub_8732C((char *)&v7[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  *(_WORD *)&unsigned char v9[12] = 257;
  *(void *)uint64_t v9 = 0x101010101010101;
  int v11 = 16843008;
  int v60 = -1047527424;
  char v61 = 1;
  int v69 = 1103101952;
  char v70 = 1;
  int v75 = 0;
  char v76 = 1;
  int v77 = 0;
  char v78 = 1;
  int v73 = 0;
  char v74 = 1;
  int v89 = 1090519040;
  char v90 = 1;
  int v79 = -1040187392;
  char v80 = 1;
  int v62 = 0;
  char v63 = 1;
  LOWORD(v64) = 257;
  int v91 = 16843009;
  if (!v94) {
    char v94 = 1;
  }
  int v93 = 1836282987;
  if (!v96) {
    char v96 = 1;
  }
  int v95 = 2;
  if (!v98) {
    char v98 = 1;
  }
  int v97 = 8;
  if (!v100) {
    char v100 = 1;
  }
  int v99 = 16;
  int v103 = 36;
  char v104 = 1;
  int v105 = 36;
  char v106 = 1;
  int v107 = 36;
  char v108 = 1;
  int v113 = 36;
  char v114 = 1;
  int v130 = 42;
  char v131 = 1;
  int v132 = 3;
  char v133 = 1;
  int v134 = 25;
  char v135 = 1;
  int v136 = 42;
  char v137 = 1;
  int v149 = 13;
  char v150 = 1;
  int v151 = 42;
  char v152 = 1;
  int v153 = 23;
  char v154 = 1;
  int v155 = 7;
  char v156 = 1;
  __int16 v138 = 257;
  if (!v140) {
    char v140 = 1;
  }
  int v139 = 5;
  if (!v144) {
    char v144 = 1;
  }
  int v143 = 8;
  if (!v142) {
    char v142 = 1;
  }
  int v141 = 2;
  sub_208140(&__src, 100);
  if (v163)
  {
    if (SHIBYTE(v162) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v162 = v179;
  }
  else
  {
    long long __p = __src;
    uint64_t v162 = v179;
    char v163 = 1;
  }
  sub_87428(&v164, "_top_mic_general");
  sub_87428(&v166, "_top_mic_measurement");
  sub_87428(&v168, "_top_mic_hearing_accessibility");
  LOBYTE(v14) = 1;
  sub_402E04(&v0);
  sub_6C690((uint64_t)v92);
  sub_463E0(v13[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_1D472C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

CFDictionaryRef sub_1D4750(const __CFDictionary *result, const void *a2, char *a3)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFBooleanRef v4 = result;
      CFTypeID v5 = CFGetTypeID(result);
      if (v5 == CFBooleanGetTypeID())
      {
        BOOL v6 = CFBooleanGetValue(v4) == 0;
      }
      else
      {
        CFTypeID v7 = CFGetTypeID(v4);
        if (v7 != CFNumberGetTypeID()) {
          return 0;
        }
        int valuePtr = 0;
        CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
        BOOL v6 = valuePtr == 0;
      }
      char v8 = !v6;
      *a3 = v8;
      return (const __CFDictionary *)(&def_1E50E8 + 1);
    }
  }
  return result;
}

CFDictionaryRef sub_1D4800(const __CFDictionary *result, const void *a2, void *a3)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFNumberRef v4 = result;
      CFTypeID v5 = CFGetTypeID(result);
      if (v5 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v4, kCFNumberSInt32Type, a3);
        return (const __CFDictionary *)(&def_1E50E8 + 1);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFDictionaryRef sub_1D486C(const __CFDictionary *result, const void *a2, const __CFDictionary **a3)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFDictionaryRef v4 = result;
      CFTypeID v5 = CFGetTypeID(result);
      if (v5 == CFStringGetTypeID())
      {
        *a3 = v4;
        return (const __CFDictionary *)(&def_1E50E8 + 1);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFDictionaryRef sub_1D48CC(const __CFDictionary *result, const void *a2, const __CFDictionary **a3)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFDictionaryRef v4 = result;
      CFTypeID v5 = CFGetTypeID(result);
      if (v5 == CFArrayGetTypeID())
      {
        *a3 = v4;
        return (const __CFDictionary *)(&def_1E50E8 + 1);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

CFDictionaryRef sub_1D492C(const __CFDictionary **a1, const void *a2, uint64_t a3)
{
  sub_1D1CBC(a3, 0);
  CFDictionaryRef result = *a1;
  if (*a1)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFDictionaryRef v7 = result;
      CFTypeID v8 = CFGetTypeID(result);
      CFDictionaryRef result = (const __CFDictionary *)CFArrayGetTypeID();
      if ((const __CFDictionary *)v8 == result)
      {
        return (const __CFDictionary *)sub_1D1CBC(a3, v7);
      }
    }
  }
  return result;
}

CFDictionaryRef sub_1D49BC(const __CFDictionary **a1, const void *a2, uint64_t a3)
{
  sub_1D1CBC(a3, 0);
  CFDictionaryRef result = *a1;
  if (*a1)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFDictionaryRef v7 = result;
      CFTypeID v8 = CFGetTypeID(result);
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetTypeID();
      if ((const __CFDictionary *)v8 == result)
      {
        return (const __CFDictionary *)sub_1D1CBC(a3, v7);
      }
    }
  }
  return result;
}

uint64_t sub_1D4A4C(uint64_t a1, void *key, int a3)
{
  CFTypeID v5 = &kCFBooleanTrue;
  if (!a3) {
    CFTypeID v5 = &kCFBooleanFalse;
  }
  CFBooleanRef v6 = *v5;
  CFBooleanRef v10 = v6;
  char v11 = 1;
  if (v6) {
    CFRetain(v6);
  }
  if (*(unsigned char *)(a1 + 9))
  {
    CFDictionaryRef v7 = *(__CFDictionary **)a1;
    if (v6) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      CFDictionarySetValue(v7, key, v6);
    }
  }
  return sub_8B960((uint64_t)&v10);
}

void sub_1D4AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1D4AF4(uint64_t a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v7 = v5;
  char v8 = 1;
  if (*(unsigned char *)(a1 + 9) && v5 && *(void *)a1) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, v5);
  }
  return sub_45260((uint64_t)&v7);
}

void sub_1D4B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_45260((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4B7C(uint64_t a1, const void *a2, float a3)
{
  float valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v7 = v5;
  char v8 = 1;
  if (*(unsigned char *)(a1 + 9) && v5 && *(void *)a1) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, v5);
  }
  return sub_45260((uint64_t)&v7);
}

void sub_1D4BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_45260((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4C04(uint64_t a1, const void *a2, double a3)
{
  double valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloat64Type, &valuePtr);
  CFNumberRef v7 = v5;
  char v8 = 1;
  if (*(unsigned char *)(a1 + 9) && v5 && *(void *)a1) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)a1, a2, v5);
  }
  return sub_45260((uint64_t)&v7);
}

void sub_1D4C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_45260((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1D4C8C(uint64_t result, const void *a2, char *cStr)
{
  if (cStr)
  {
    uint64_t v4 = result;
    CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x600u);
    CFStringRef v6 = v5;
    char v7 = 1;
    if (v5 && *(unsigned char *)(v4 + 9))
    {
      if (*(void *)v4) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)v4, a2, v5);
      }
    }
    return sub_72924((uint64_t)&v6);
  }
  return result;
}

void sub_1D4D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1D4D14(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1D4D1C(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    atomic_load((unint64_t *)(v3 + 8));
  }
  uint64_t v4 = (__CFRunLoopSource *)sub_1D4D70(a1, a2);
  if (!v4) {
    return 1;
  }
  CFRunLoopSourceSignal(v4);
  CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 8));
  return 0;
}

uint64_t sub_1D4D70(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3) {
    atomic_load((unint64_t *)(v3 + 8));
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = a1 + 24;
  uint64_t v9 = a1 + 24;
  char v10 = (*(uint64_t (**)(uint64_t))(v5 + 16))(a1 + 24);
  for (uint64_t i = *(void *)(v4 + 152); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v4 + 144)
    {
      uint64_t v7 = 0;
      goto LABEL_9;
    }
    if (*(_DWORD *)(i + 24) == a2) {
      break;
    }
  }
  uint64_t v7 = *(void *)(i + 16);
LABEL_9:
  sub_10C78C(&v9);
  return v7;
}

BOOL sub_1D4E18(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4) {
    atomic_load((unint64_t *)(v4 + 8));
  }
  uint64_t v5 = sub_1D4D70(a1, a2);
  if (!v5) {
    return 1;
  }
  CFStringRef v6 = (__CFRunLoopSource *)v5;
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)__int16 v14 = a1 + 24;
  v14[8] = (*(uint64_t (**)(uint64_t))(v7 + 16))(a1 + 24);
  char v8 = *(void **)(a1 + 176);
  if (v8 != (void *)(a1 + 168))
  {
    while (1)
    {
      uint64_t v9 = v8[1];
      if (*((_DWORD *)v8 + 6) == a2) {
        break;
      }
      char v8 = (void *)v8[1];
      if (v9 == a1 + 168) {
        goto LABEL_10;
      }
    }
    uint64_t v11 = *v8;
    *(void *)(v11 + 8) = v9;
    *(void *)v8[1] = v11;
    --*(void *)(a1 + 184);
    operator delete(v8);
  }
LABEL_10:
  sub_10C78C(v14);
  CFRunLoopRemoveSource(*(CFRunLoopRef *)(a1 + 8), v6, kCFRunLoopDefaultMode);
  CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 8));
  CFRelease(v6);
  __int16 v12 = (os_log_t *)sub_32A48(13);
  int v13 = *v12;
  if (*v12)
  {
    BOOL result = os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    *(_DWORD *)__int16 v14 = 136315650;
    *(void *)&v14[4] = "RunLoopThread.cpp";
    __int16 v15 = 1024;
    int v16 = 168;
    __int16 v17 = 1024;
    int v18 = a2;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Removed outSourceID %u", v14, 0x18u);
  }
  return 0;
}

uint64_t sub_1D4FD4(void *a1, const void *(__cdecl *a2)(const void *), void (__cdecl *a3)(const void *), uint64_t a4)
{
  uint64_t v8 = a1[2];
  if (v8) {
    atomic_load((unint64_t *)(v8 + 8));
  }
  if (!a2)
  {
    int v18 = (os_log_t *)sub_32A48(13);
    char v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.version) = 136315394;
      *(CFIndex *)((char *)&buf.version + 4) = (CFIndex)"RunLoopThread.cpp";
      WORD2(buf.info) = 1024;
      *(_DWORD *)((char *)&buf.info + 6) = 118;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [callback is NULL]: \"callback is NULL.\"", (uint8_t *)&buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "callback is NULL.");
  }
  if (!a3)
  {
    int v13 = (os_log_t *)sub_32A48(13);
    __int16 v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.version) = 136315394;
        *(CFIndex *)((char *)&buf.version + 4) = (CFIndex)"RunLoopThread.cpp";
        WORD2(buf.info) = 1024;
        *(_DWORD *)((char *)&buf.info + 6) = 119;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d clientData is NULL. This may be dangerous / an error.", (uint8_t *)&buf, 0x12u);
      }
    }
  }
  uint64_t v9 = (os_log_t *)sub_32A48(13);
  char v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.version) = 136315906;
    *(CFIndex *)((char *)&buf.version + 4) = (CFIndex)"RunLoopThread.cpp";
    WORD2(buf.info) = 1024;
    *(_DWORD *)((char *)&buf.info + 6) = 123;
    WORD1(buf.retain) = 2048;
    *(const void *(__cdecl **)(const void *))((char *)&buf.retain + 4) = a2;
    WORD2(buf.release) = 2048;
    *(void (__cdecl **)(const void *))((char *)&buf.release + 6) = a3;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to create source from callback %p / clientData %p.", (uint8_t *)&buf, 0x26u);
  }
  buf.versiouint64_t n = 0;
  buf.info = a3;
  memset(&buf.retain, 0, 56);
  buf.perforuint64_t m = (void (__cdecl *)(void *))a2;
  CFRunLoopSourceRef v11 = CFRunLoopSourceCreate(kCFAllocatorDefault, 0, &buf);
  if (v11)
  {
    uint64_t v12 = (*(uint64_t (**)(void *, CFRunLoopSourceRef, uint64_t))(*a1 + 16))(a1, v11, a4);
    CFRelease(v11);
  }
  else
  {
    __int16 v15 = (os_log_t *)sub_32A48(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      int v22 = "RunLoopThread.cpp";
      __int16 v23 = 1024;
      int v24 = 127;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d CFRunLoopSourceCreate() failed.", (uint8_t *)&v21, 0x12u);
    }
    return 1;
  }
  return v12;
}

void sub_1D52DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D52F8(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    atomic_load((unint64_t *)(v6 + 8));
  }
  if (!a2)
  {
    int v18 = (os_log_t *)sub_32A48(13);
    char v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v21 = 136315394;
      *(void *)&v21[4] = "RunLoopThread.cpp";
      __int16 v22 = 1024;
      int v23 = 94;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [source is NULL]: \"source is NULL.\"", v21, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "source is NULL.");
  }
  uint64_t v8 = a1 + 24;
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)int v21 = a1 + 24;
  v21[8] = (*(uint64_t (**)(uint64_t))(v7 + 16))(a1 + 24);
  int v9 = *(_DWORD *)(a1 + 160);
  if (v9 == -1) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = 1;
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 160), v10, memory_order_relaxed);
  sub_10C78C(v21);
  *a3 = v9;
  CFRetain(a2);
  *(void *)int v21 = a1 + 24;
  v21[8] = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(a1 + 24);
  int v11 = *a3;
  uint64_t v12 = operator new(0x20uLL);
  v12[6] = v11;
  uint64_t v13 = *(void *)(a1 + 168);
  *((void *)v12 + 1) = a1 + 168;
  *((void *)v12 + 2) = a2;
  *(void *)uint64_t v12 = v13;
  *(void *)(v13 + 8) = v12;
  *(void *)(a1 + 168) = v12;
  ++*(void *)(a1 + 184);
  sub_10C78C(v21);
  CFRunLoopAddSource(*(CFRunLoopRef *)(a1 + 8), (CFRunLoopSourceRef)a2, kCFRunLoopDefaultMode);
  CFRunLoopWakeUp(*(CFRunLoopRef *)(a1 + 8));
  __int16 v14 = (os_log_t *)sub_32A48(13);
  __int16 v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
  {
    int v16 = *a3;
    *(_DWORD *)int v21 = 136315906;
    *(void *)&v21[4] = "RunLoopThread.cpp";
    __int16 v22 = 1024;
    int v23 = 108;
    __int16 v24 = 2048;
    char v25 = a2;
    __int16 v26 = 1024;
    int v27 = v16;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Added source %p and set outSourceID to %u", v21, 0x22u);
  }
  return 0;
}

void sub_1D5594(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1D55C0(uint64_t a1)
{
  sub_1D55F8(a1);

  operator delete();
}

uint64_t sub_1D55F8(uint64_t a1)
{
  *(void *)a1 = off_626898;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    atomic_load((unint64_t *)(v2 + 8));
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v9 = a1 + 24;
  char v10 = (*(uint64_t (**)(uint64_t))(v3 + 16))(a1 + 24);
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 176);
    if (v4 == a1 + 168) {
      break;
    }
    (*(void (**)(uint64_t, void))(*(void *)a1 + 32))(a1, *(unsigned int *)(v4 + 24));
  }
  if (atomic_load((unint64_t *)(*(void *)(a1 + 16) + 8)))
  {
    CFRunLoopStop(*(CFRunLoopRef *)(a1 + 8));
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 64))(v9, 500000000))
    {
      uint64_t v6 = (os_log_t *)sub_32A48(13);
      uint64_t v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)CFRunLoopSourceContext buf = 136315650;
          uint64_t v12 = "RunLoopThread.cpp";
          __int16 v13 = 1024;
          int v14 = 79;
          __int16 v15 = 1024;
          int v16 = 500;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Thread stop timeout timed out after %u milliseconds", buf, 0x18u);
        }
      }
    }
  }
  *(void *)(a1 + 16) = 0;
  sub_10C78C(&v9);
  sub_45F50((void *)(a1 + 168));
  sub_43DC28(a1 + 24);
  return a1;
}

void sub_1D57D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1D57EC(uint64_t a1)
{
  kern_return_t v10;
  _opaque_pthread_t *v11;
  thread_act_t v12;
  kern_return_t v13;
  os_log_t *v14;
  NSObject *v15;
  os_log_t *v16;
  NSObject *v17;
  os_log_t *v18;
  NSObject *v19;
  os_log_t *v20;
  NSObject *v21;
  const char *v22;
  kern_return_t v23;
  uint64_t v24;
  char v25;
  integer_t policy_info;
  unsigned char buf[12];
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;

  if (a1)
  {
    uint64_t v3 = a1 + 24;
    uint64_t v2 = *(void *)(a1 + 24);
    __int16 v24 = a1 + 24;
    char v25 = (*(uint64_t (**)(uint64_t))(v2 + 16))(a1 + 24);
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    *(void *)(a1 + 8) = Current;
    if (!Current)
    {
      int v16 = (os_log_t *)sub_32A48(13);
      __int16 v17 = *v16;
      if (*v16)
      {
        if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)CFRunLoopSourceContext buf = 136315394;
          *(void *)&uint8_t buf[4] = "RunLoopThread.cpp";
          int v28 = 1024;
          char v29 = 249;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d CFRunLoopGetCurrent() failed.", buf, 0x12u);
        }
      }
    }
    sub_43D684(a1 + 24);
    if (!*(unsigned char *)(a1 + 196)) {
      goto LABEL_9;
    }
    uint64_t v5 = *(void *)(a1 + 16);
    *(_DWORD *)(v5 + 104) = *(_DWORD *)(a1 + 192);
    *(_WORD *)(v5 + 121) = 0;
    if (!atomic_load((unint64_t *)(v5 + 8))) {
      goto LABEL_9;
    }
    uint64_t v7 = (_opaque_pthread_t *)atomic_load((unint64_t *)(v5 + 8));
    if (!v7) {
      goto LABEL_9;
    }
    int v8 = *(_DWORD *)(v5 + 104);
    if (*(unsigned char *)(v5 + 122)
      && (policy_info = 0, thread_act_t v9 = pthread_mach_thread_np(v7), (v10 = thread_policy_set(v9, 1u, &policy_info, 1u)) != 0))
    {
      int v23 = v10;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFRunLoopSourceContext buf = 136315650;
        *(void *)&uint8_t buf[4] = "CAPThread.cpp";
        int v28 = 1024;
        char v29 = 161;
        int v30 = 1024;
        LODWORD(v31) = v23;
        __int16 v22 = "%25s:%-5d  CAPThread::SetPriority: failed to set the fixed-priority policy, Error: 0x%X";
        goto LABEL_29;
      }
    }
    else
    {
      int v11 = pthread_self();
      policy_info = v8 - sub_3A5E08(v11);
      uint64_t v12 = pthread_mach_thread_np(v7);
      __int16 v13 = thread_policy_set(v12, 3u, &policy_info, 1u);
      if (!v13)
      {
LABEL_9:
        sub_10C78C(&v24);
        if (Current)
        {
          LODWORD(v24) = 0;
          if (!(*(unsigned int (**)(uint64_t, void (*)(), uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, sub_1D5CC0, a1, &v24))
          {
            CFRunLoopRun();
            int v14 = (os_log_t *)sub_32A48(13);
            __int16 v15 = *v14;
            if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)CFRunLoopSourceContext buf = 136315394;
              *(void *)&uint8_t buf[4] = "RunLoopThread.cpp";
              int v28 = 1024;
              char v29 = 217;
              _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d CFRunLoopRun() returned", buf, 0x12u);
            }
            *(void *)CFRunLoopSourceContext buf = a1 + 24;
            buf[8] = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(a1 + 24);
            (*(void (**)(uint64_t))(*(void *)v3 + 80))(a1 + 24);
            sub_10C78C(buf);
          }
        }
        else
        {
          int v18 = (os_log_t *)sub_32A48(13);
          char v19 = *v18;
          if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFRunLoopSourceContext buf = 136315394;
            *(void *)&uint8_t buf[4] = "RunLoopThread.cpp";
            int v28 = 1024;
            char v29 = 226;
            _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PrepareRunLoop() failed.", buf, 0x12u);
          }
        }
        goto LABEL_21;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFRunLoopSourceContext buf = 136315650;
        *(void *)&uint8_t buf[4] = "CAPThread.cpp";
        int v28 = 1024;
        char v29 = 168;
        int v30 = 1024;
        LODWORD(v31) = v13;
        __int16 v22 = "%25s:%-5d  CAPThread::SetPriority: failed to set the precedence policy, Error: 0x%X";
LABEL_29:
        _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, v22, buf, 0x18u);
      }
    }
    __break(1u);
    return;
  }
LABEL_21:
  int v20 = (os_log_t *)sub_32A48(13);
  int v21 = *v20;
  if (*v20)
  {
    if (os_log_type_enabled(*v20, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)CFRunLoopSourceContext buf = 136315906;
      *(void *)&uint8_t buf[4] = "RunLoopThread.cpp";
      int v28 = 1024;
      char v29 = 230;
      int v30 = 2048;
      char v31 = a1;
      int v32 = 2048;
      char v33 = a1 + 16;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Thread with RunLoopThread owner %p (CAPThread %p) exited.", buf, 0x26u);
    }
  }
}

void sub_1D5C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10C78C(va);
  _Unwind_Resume(a1);
}

void sub_1D5CC0()
{
  int v0 = (os_log_t *)sub_32A48(13);
  char v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v2 = 136315394;
      uint64_t v3 = "RunLoopThread.cpp";
      __int16 v4 = 1024;
      int v5 = 29;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Shim callback was executed! It should not be possible to get here.\"", (uint8_t *)&v2, 0x12u);
    }
  }
}

void sub_1D5D7C()
{
}

uint64_t sub_1D5E24()
{
  return 1;
}

uint64_t sub_1D5E2C(uint64_t a1)
{
  return *(void *)(a1 + 516);
}

void sub_1D5E38(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  int v2 = (char *)operator new(0x18uLL);
  v4[1] = (unsigned int *)(v2 + 24);
  v4[2] = (unsigned int *)(v2 + 24);
  *(_OWORD *)int v2 = xmmword_4E7980;
  *((void *)v2 + 2) = 1735159650;
  v4[0] = (unsigned int *)v2;
  sub_20E298((char *)a1, v4);
  for (uint64_t i = 0; i != 17; ++i)
    sub_1D5F78(a1, dword_4E84C8[i]);
  sub_1D6278();
}

void sub_1D5F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_4F750((uint64_t *)va);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1D5F78(void *a1, AudioObjectPropertySelector a2)
{
  inAddress.AudioObjectPropertySelector mSelector = a2;
  *(void *)&inAddress.AudioObjectPropertyScope mScope = 1735159650;
  if ((*(unsigned int (**)(void *, AudioObjectPropertyAddress *))(*(void *)a1 + 16))(a1, &inAddress))
  {
    AudioObjectID v4 = (*(uint64_t (**)(void *))(*(void *)a1 + 120))(a1);
    OSStatus v5 = AudioObjectAddPropertyListener(v4, &inAddress, (AudioObjectPropertyListenerProc)sub_1D7354, a1);
    if (v5)
    {
      uint64_t v6 = sub_32A48(17);
      uint64_t v7 = sub_32A48(28);
      char v8 = 0;
      uint64_t v9 = 0;
      *(void *)CFRunLoopSourceContext buf = 0x100000002;
      uint64_t v10 = *(void *)(v6 + 8);
      while (1)
      {
        uint64_t v11 = *(int *)&buf[4 * v9];
        char v12 = v8;
        if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
          break;
        }
        char v8 = 1;
        uint64_t v9 = 1;
        if (v12) {
          goto LABEL_9;
        }
      }
      if ((v10 & v11) == 0) {
        uint64_t v6 = v7;
      }
LABEL_9:
      __int16 v13 = *(NSObject **)v6;
      if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        int v14 = v22;
        sub_2417C(v22, v5);
        if (v23 < 0) {
          int v14 = (void **)v22[0];
        }
        sub_2417C(v20, a2);
        if (v21 >= 0) {
          __int16 v15 = v20;
        }
        else {
          __int16 v15 = (void **)v20[0];
        }
        (*(void (**)(CFStringRef *__return_ptr, void *))(*(void *)a1 + 128))(theString, a1);
        sub_21B7C(__p, theString[0]);
        if (v19 >= 0) {
          int v16 = __p;
        }
        else {
          int v16 = (void **)__p[0];
        }
        *(_DWORD *)CFRunLoopSourceContext buf = 136316418;
        *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
        __int16 v26 = 1024;
        int v27 = 927;
        __int16 v28 = 1024;
        OSStatus v29 = v5;
        __int16 v30 = 2080;
        char v31 = v14;
        __int16 v32 = 2080;
        char v33 = v15;
        __int16 v34 = 2080;
        char v35 = v16;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d ('%s') adding property %s listener to bluetooth device with UID \"%s\"", buf, 0x36u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)theString);
        if (v21 < 0) {
          operator delete(v20[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
      }
    }
  }
}

void sub_1D622C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

void sub_1D6278()
{
}

uint64_t sub_1D62E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 472))();
}

uint64_t sub_1D6320(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_626B10;
  a2[1] = v2;
  return result;
}

void *sub_1D6344(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_626B10;
  result[1] = v3;
  return result;
}

void sub_1D638C()
{
}

void sub_1D63A4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_HandleInEarStatusEvent", 0x19uLL) == &qword_659450)
  {
    os_signpost_id_t v2 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v2 = os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v3 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        unint64_t v4 = sub_1D6C80(*(_DWORD *)(v1 + 268));
        if (HIDWORD(v4) == 1) {
          int v6 = 1;
        }
        else {
          int v6 = 2;
        }
        if (v4 == 1) {
          int v7 = 1;
        }
        else {
          int v7 = v6;
        }
        if (v4 == -1 || (v5 & 0xFF00000000) == 0) {
          int v9 = -1;
        }
        else {
          int v9 = v7;
        }
        *(_DWORD *)CFRunLoopSourceContext buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v9;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v3, OS_SIGNPOST_INTERVAL_BEGIN, v2, "VA_HandleInEarStatusEvent", "Updating InEarStatus for BT ports because headset status is %d", buf, 8u);
      }
    }
  }
  os_signpost_id_t v45 = v2;
  uint64_t v10 = sub_32A48(42);
  if (*(unsigned char *)(v10 + 8))
  {
    uint64_t v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)CFRunLoopSourceContext buf = 136315650;
        *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 79;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "kInEarStatusEvent";
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }
  unsigned int v12 = *(_DWORD *)(v1 + 500);
  unsigned int v13 = *(_DWORD *)(v1 + 504);
  int v14 = *(_DWORD *)(v1 + 508);
  int v15 = *(unsigned __int8 *)(v1 + 512);
  uint64_t v16 = sub_1D6C80(*(_DWORD *)(v1 + 268));
  uint64_t v18 = v16;
  int v19 = v17;
  BOOL v21 = v12 == v16 && v13 == HIDWORD(v16) && v14 == v17;
  if (!v21 || v15 != BYTE4(v17))
  {
    *(void *)(v1 + 500) = v16;
    *(_DWORD *)(v1 + 508) = v17;
    unint64_t v37 = HIDWORD(v17);
    *(unsigned char *)(v1 + 512) = BYTE4(v17);
    uint64_t v22 = sub_32A48(17);
    uint64_t v23 = sub_32A48(28);
    char v24 = 0;
    uint64_t v25 = 0;
    *(void *)CFRunLoopSourceContext buf = 0x100000002;
    uint64_t v26 = *(void *)(v22 + 8);
    while (1)
    {
      uint64_t v27 = *(int *)&buf[4 * v25];
      char v28 = v24;
      if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
        break;
      }
      char v24 = 1;
      uint64_t v25 = 1;
      if (v28) {
        goto LABEL_40;
      }
    }
    if ((v26 & v27) == 0) {
      uint64_t v22 = v23;
    }
LABEL_40:
    OSStatus v29 = *(NSObject **)v22;
    if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v1 + 128))(theString, v1);
      char v36 = v15;
      sub_21B7C(&v38, theString[0]);
      int v30 = SHIBYTE(v41);
      char v31 = (void **)v38;
      sub_104C68(&__p, v1 + 500);
      __int16 v32 = &v38;
      if (v30 < 0) {
        __int16 v32 = v31;
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)CFRunLoopSourceContext buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 724;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v32;
      *(_WORD *)&unsigned char buf[28] = 2080;
      int v48 = p_p;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth device with UID \"%s\": headset status %s", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      LOBYTE(v15) = v36;
      if (SHIBYTE(v41) < 0) {
        operator delete(v38);
      }
      sub_72924((uint64_t)theString);
    }
    memset(buf, 0, 24);
    strcpy(&buf[24], "cwdv");
    BYTE2(v48) = 0;
    int v49 = 3;
    v51[0] = 0;
    v51[1] = 0;
    int v50 = v51;
    CFTypeRef cf = 0;
    int v52 = 44731050;
    sub_43637C((uint64_t *)&__p, v1, (uint64_t)buf);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v51[0]);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    std::string::size_type size = (std::string *)__p.__r_.__value_.__l.__size_;
    int v38 = (void *)__PAIR64__(v13, v12);
    int v39 = v14;
    char v40 = v15;
    uint64_t v41 = v18;
    int v42 = v19;
    for (char i = v37; size != &__p; size = (std::string *)size->__r_.__value_.__l.__size_)
    {
      sub_43F38((uint64_t *)theString, (uint64_t *)&size->__r_.__value_.__r.__words[2], "", 729);
      char v35 = (std::__shared_weak_count *)theString[1];
      (*((void (**)(CFStringRef, void **, uint64_t *))theString[0]->isa + 68))(theString[0], &v38, &v41);
      if (v35) {
        sub_4636C(v35);
      }
    }
    sub_8108((uint64_t *)&__p);
  }
  sub_1D6EBC(&v45);
  operator delete();
}

void sub_1D6920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,os_signpost_id_t a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t buf,int a29,__int16 a30,int a31,int a32,uint64_t a33,__int16 a34,__int16 a35,int a36,uint64_t a37,int a38,uint64_t a39,uint64_t a40,uint64_t a41,CFTypeRef cf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a24);
  sub_1D6EBC(&a23);
  if (a2 == 3)
  {
    int v44 = __cxa_begin_catch(exception_object);
    os_signpost_id_t v45 = (os_log_t *)sub_32A48(13);
    os_log_t v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      int v47 = v44[2];
      LODWORD(buf) = 136316162;
      *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
      a30 = 1024;
      *(_DWORD *)(&a30 + 1) = 429;
      HIWORD(a31) = 1024;
      a32 = v47;
      LOWORD(a33) = 2080;
      *(uint64_t *)((char *)&a33 + 2) = (uint64_t)"";
      a35 = 1024;
      a36 = 98;
      int v48 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v49 = v46;
      uint32_t v50 = 40;
LABEL_17:
      _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, v48, (uint8_t *)&buf, v50);
    }
  }
  else
  {
    char v51 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v52 = v51;
      char v53 = (os_log_t *)sub_32A48(13);
      os_log_t v54 = *v53;
      if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
      {
        uint64_t v55 = (*(uint64_t (**)(void *))(*(void *)v52 + 16))(v52);
        LODWORD(buf) = 136316162;
        *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
        a30 = 1024;
        *(_DWORD *)(&a30 + 1) = 430;
        HIWORD(a31) = 2080;
        *(void *)(&a31 + 1) = v55;
        WORD2(a33) = 2080;
        *(uint64_t *)((char *)&a33 + 6) = (uint64_t)"";
        HIWORD(a36) = 1024;
        LODWORD(a37) = 98;
        int v48 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v49 = v54;
        uint32_t v50 = 44;
        goto LABEL_17;
      }
    }
    else
    {
      int v56 = (os_log_t *)sub_32A48(13);
      os_log_t v57 = *v56;
      if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
        a30 = 1024;
        *(_DWORD *)(&a30 + 1) = 431;
        HIWORD(a31) = 2080;
        *(void *)(&a31 + 1) = "";
        WORD2(a33) = 1024;
        *(_DWORD *)((char *)&a33 + 6) = 98;
        int v48 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v49 = v57;
        uint32_t v50 = 34;
        goto LABEL_17;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1D685CLL);
}

void sub_1D6C38()
{
}

uint64_t sub_1D6C80(AudioObjectID a1)
{
  *(void *)&v17.AudioObjectPropertySelector mSelector = 0x676C6F6269656465;
  v17.AudioObjectPropertyElement mElement = 0;
  if (AudioObjectHasProperty(a1, &v17))
  {
    v17.AudioObjectPropertyElement mElement = 0;
    AudioObjectID v18 = a1;
    *(void *)&v17.AudioObjectPropertySelector mSelector = 0x676C6F6269657370;
    unint64_t v3 = sub_26DAC(&v18, &v17, 0, 0);
    if (v3 || !v2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v3;
    }
    else
    {
      v17.AudioObjectPropertyElement mElement = 0;
      AudioObjectID v18 = a1;
      *(void *)&v17.AudioObjectPropertySelector mSelector = 0x676C6F6269657373;
      unint64_t v5 = sub_26DAC(&v18, &v17, 0, 0);
      if (v5 || !v4)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = v5;
      }
      else
      {
        v17.AudioObjectPropertyElement mElement = 0;
        AudioObjectID v18 = a1;
        *(void *)&v17.AudioObjectPropertySelector mSelector = 0x676C6F6270726973;
        unint64_t v7 = sub_26DAC(&v18, &v17, 0, 0);
        if (v7 || !v6)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = &off_6414D8;
          exception[2] = v7;
        }
        else
        {
          v17.AudioObjectPropertyElement mElement = 0;
          AudioObjectID v18 = a1;
          *(void *)&v17.AudioObjectPropertySelector mSelector = 0x676C6F6269656465;
          int v9 = sub_26DAC(&v18, &v17, 0, 0);
          if (!v9 && v8)
          {
            unint64_t v10 = HIDWORD(v3);
            unint64_t v11 = HIDWORD(v5);
            unint64_t v12 = HIDWORD(v7);
            unsigned int v13 = sub_1D7058(v10);
            uint64_t v14 = sub_1D7058(v11);
            sub_1D71D4(v12);
            return v13 | (unint64_t)(v14 << 32);
          }
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = &off_6414D8;
          exception[2] = v9;
        }
      }
    }
  }
  return -1;
}

os_signpost_id_t *sub_1D6EBC(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    unint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        char v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 79;
        __int16 v11 = 2080;
        unint64_t v12 = "kInEarStatusEvent";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_HandleInEarStatusEvent", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_1D704C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_1D7058(unsigned int a1)
{
  if (a1 >= 4)
  {
    unint64_t v3 = (os_log_t *)sub_32A48(13);
    os_signpost_id_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, 0x69657370u);
      if (v8 >= 0) {
        unint64_t v5 = __p;
      }
      else {
        unint64_t v5 = (void **)__p[0];
      }
      *(_DWORD *)CFRunLoopSourceContext buf = 136315906;
      int v10 = "Device_Bluetooth_Aspen.cpp";
      __int16 v11 = 1024;
      int v12 = 228;
      __int16 v13 = 1024;
      unsigned int v14 = a1;
      __int16 v15 = 2080;
      uint64_t v16 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unknown value (%u) for Bluetooth property (%s)\"", buf, 0x22u);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unknown value (%u) for Bluetooth property (%s)");
  }
  return dword_4E850C[a1];
}

void sub_1D71B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D71D4(int a1)
{
  if ((a1 - 1) >= 3)
  {
    unint64_t v3 = (os_log_t *)sub_32A48(13);
    os_signpost_id_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, 0x70726973u);
      if (v8 >= 0) {
        unint64_t v5 = __p;
      }
      else {
        unint64_t v5 = (void **)__p[0];
      }
      *(_DWORD *)CFRunLoopSourceContext buf = 136315906;
      int v10 = "Device_Bluetooth_Aspen.cpp";
      __int16 v11 = 1024;
      int v12 = 246;
      __int16 v13 = 1024;
      int v14 = a1;
      __int16 v15 = 2080;
      uint64_t v16 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unknown value (%u) for Bluetooth property (%s)\"", buf, 0x22u);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unknown value (%u) for Bluetooth property (%s)");
  }
  return dword_4E851C[a1 - 1];
}

void sub_1D7338(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D7354(uint64_t a1, unsigned int a2, uint64_t a3, os_unfair_lock_s *a4)
{
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2;
    while (1)
    {
      uint64_t v8 = sub_32A48(17);
      uint64_t v9 = sub_32A48(28);
      char v10 = 0;
      uint64_t v11 = 0;
      *(void *)CFRunLoopSourceContext buf = 0x100000002;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *(int *)&buf[4 * v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1;
        if (v14) {
          goto LABEL_9;
        }
      }
      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_9:
      __int16 v15 = *(NSObject **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(v61, *(_DWORD *)(a3 + 12 * v6));
        if (v62 >= 0) {
          uint64_t v16 = v61;
        }
        else {
          uint64_t v16 = (void **)v61[0];
        }
        (*(void (**)(CFStringRef *__return_ptr, os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque
                                                                              + 128))(theString, a4);
        sub_21B7C(__p, theString[0]);
        AudioObjectPropertyAddress v17 = __p;
        if (v60 < 0) {
          AudioObjectPropertyAddress v17 = (void **)__p[0];
        }
        *(_DWORD *)CFRunLoopSourceContext buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
        __int16 v64 = 1024;
        int v65 = 946;
        __int16 v66 = 2080;
        int v67 = v16;
        __int16 v68 = 2080;
        int v69 = v17;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Received notification (%s) from bluetooth audio device with UID \"%s\"", buf, 0x26u);
        if (v60 < 0) {
          operator delete(__p[0]);
        }
        sub_72924((uint64_t)theString);
        if (v62 < 0) {
          operator delete(v61[0]);
        }
      }
      AudioObjectID v18 = (unsigned int *)(a3 + 12 * v6);
      int v19 = *v18;
      if ((int)*v18 > 1768256367) {
        break;
      }
      if (v19 <= 1685283694)
      {
        if (v19 <= 1668051826)
        {
          if (v19 == 1650549606)
          {
            sub_13910();
            operator new();
          }
          if (v19 == 1651466595)
          {
            sub_13910();
            operator new();
          }
          goto LABEL_75;
        }
        if (v19 == 1668051827) {
          goto LABEL_64;
        }
        if (v19 != 1668506479) {
          goto LABEL_75;
        }
        sub_1D7CEC(a4, 1);
      }
      else
      {
        if (v19 > 1752327776)
        {
          if (v19 == 1752327777 || v19 == 1752462195) {
LABEL_64:
          }
            sub_1D82CC();
          if (v19 == 1768252517)
          {
            sub_13910();
            operator new();
          }
LABEL_75:
          uint64_t v40 = sub_32A48(17);
          uint64_t v41 = sub_32A48(28);
          char v42 = 0;
          uint64_t v43 = 0;
          *(void *)CFRunLoopSourceContext buf = 0x100000002;
          uint64_t v44 = *(void *)(v40 + 8);
          while (1)
          {
            uint64_t v45 = *(int *)&buf[4 * v43];
            char v46 = v42;
            if (((v44 & v45) != 0) != ((*(void *)(v41 + 8) & v45) != 0)) {
              break;
            }
            char v42 = 1;
            uint64_t v43 = 1;
            if (v46) {
              goto LABEL_87;
            }
          }
          if ((v44 & v45) == 0) {
            uint64_t v40 = v41;
          }
LABEL_87:
          int v48 = *(NSObject **)v40;
          if (!v48 || !os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_72;
          }
          sub_2417C(v61, *v18);
          if (v62 >= 0) {
            int v49 = v61;
          }
          else {
            int v49 = (void **)v61[0];
          }
          (*(void (**)(CFStringRef *__return_ptr, os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque
                                                                                + 128))(theString, a4);
          sub_21B7C(__p, theString[0]);
          uint32_t v50 = __p;
          if (v60 < 0) {
            uint32_t v50 = (void **)__p[0];
          }
          *(_DWORD *)CFRunLoopSourceContext buf = 136315906;
          *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
          __int16 v64 = 1024;
          int v65 = 998;
          __int16 v66 = 2080;
          int v67 = v49;
          __int16 v68 = 2080;
          int v69 = v50;
          char v51 = v48;
          int v52 = "%25s:%-5d Unhandled notification (%s) from bluetooth audio device with UID \"%s\"";
          goto LABEL_105;
        }
        if (v19 == 1685283695)
        {
          sub_1D7CEC(a4, 0);
        }
        else
        {
          if (v19 != 1718772584) {
            goto LABEL_75;
          }
          dispatch_time_t v30 = dispatch_time(0, 0);
          char v31 = sub_13910();
          dispatch_after(v30, v31, &stru_626AE0);
        }
      }
LABEL_72:
      if (++v6 == v7) {
        return 0;
      }
    }
    if (v19 <= 1936745317)
    {
      if (v19 <= 1819173228)
      {
        if (v19 == 1768256368 || v19 == 1768256371) {
          goto LABEL_52;
        }
      }
      else
      {
        switch(v19)
        {
          case 1819173229:
            sub_13910();
            operator new();
          case 1819505773:
            sub_13910();
            operator new();
          case 1886546291:
LABEL_52:
            sub_1D6278();
        }
      }
      goto LABEL_75;
    }
    if (v19 <= 1936747875)
    {
      if (v19 == 1936745318 || v19 == 1936746611) {
        goto LABEL_64;
      }
      goto LABEL_75;
    }
    if (v19 == 1936747876) {
      goto LABEL_64;
    }
    if (v19 == 1936747877)
    {
      uint64_t v33 = sub_32A48(17);
      uint64_t v34 = sub_32A48(28);
      char v35 = 0;
      uint64_t v36 = 0;
      *(void *)CFRunLoopSourceContext buf = 0x100000002;
      uint64_t v37 = *(void *)(v33 + 8);
      while (1)
      {
        uint64_t v38 = *(int *)&buf[4 * v36];
        char v39 = v35;
        if (((v37 & v38) != 0) != ((*(void *)(v34 + 8) & v38) != 0)) {
          break;
        }
        char v35 = 1;
        uint64_t v36 = 1;
        if (v39) {
          goto LABEL_81;
        }
      }
      if ((v37 & v38) == 0) {
        uint64_t v33 = v34;
      }
LABEL_81:
      int v47 = *(NSObject **)v33;
      if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)CFRunLoopSourceContext buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
        __int16 v64 = 1024;
        int v65 = 991;
        _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Handling PME update from buds", buf, 0x12u);
      }
      sub_1D82CC();
    }
    if (v19 != 1970496630) {
      goto LABEL_75;
    }
    AudioObjectID v21 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque + 120))(a4);
    atomic_store(sub_1D96E8(v21), &a4[123]._os_unfair_lock_opaque);
    uint64_t v22 = sub_32A48(17);
    uint64_t v23 = sub_32A48(28);
    char v24 = 0;
    uint64_t v25 = 0;
    *(void *)CFRunLoopSourceContext buf = 0x100000002;
    uint64_t v26 = *(void *)(v22 + 8);
    while (1)
    {
      uint64_t v27 = *(int *)&buf[4 * v25];
      char v28 = v24;
      if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
        break;
      }
      char v24 = 1;
      uint64_t v25 = 1;
      if (v28) {
        goto LABEL_97;
      }
    }
    if ((v26 & v27) == 0) {
      uint64_t v22 = v23;
    }
LABEL_97:
    char v53 = *(NSObject **)v22;
    if (!v53 || !os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_72;
    }
    unsigned int v54 = atomic_load(&a4[123]._os_unfair_lock_opaque);
    sub_2417C(v61, v54);
    if (v62 >= 0) {
      uint64_t v55 = v61;
    }
    else {
      uint64_t v55 = (void **)v61[0];
    }
    (*(void (**)(CFStringRef *__return_ptr, os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque
                                                                          + 128))(theString, a4);
    sub_21B7C(__p, theString[0]);
    int v56 = __p;
    if (v60 < 0) {
      int v56 = (void **)__p[0];
    }
    *(_DWORD *)CFRunLoopSourceContext buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    __int16 v64 = 1024;
    int v65 = 816;
    __int16 v66 = 2080;
    int v67 = v55;
    __int16 v68 = 2080;
    int v69 = v56;
    char v51 = v53;
    int v52 = "%25s:%-5d Device category changed to '%s' for bluetooth audio device with UID \"%s\"";
LABEL_105:
    _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_DEFAULT, v52, buf, 0x26u);
    if (v60 < 0) {
      operator delete(__p[0]);
    }
    sub_72924((uint64_t)theString);
    if (v62 < 0) {
      operator delete(v61[0]);
    }
    goto LABEL_72;
  }
  return 0;
}

void sub_1D7C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1D7CEC(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = sub_32A48(17);
  uint64_t v5 = sub_32A48(28);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)CFRunLoopSourceContext buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_7;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  uint64_t v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = a2 ? "take" : "relinquish";
    sub_4F64((uint64_t)&__p, a1 + 2);
    uint64_t v13 = v28 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)CFRunLoopSourceContext buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 685;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v12;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&unsigned char buf[30] = v13;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth initiated %s request on physical device %s.", buf, 0x26u);
    if (SHIBYTE(v28) < 0) {
      operator delete(__p);
    }
  }
  char v14 = operator new(8uLL);
  *char v14 = 0x70687062706D6274;
  uint64_t v37 = v14;
  uint64_t v38 = v14 + 1;
  char v39 = v14 + 1;
  strcpy((char *)&v40, "cwdv");
  char v41 = 0;
  int v42 = 3;
  v44[0] = 0;
  v44[1] = 0;
  uint64_t v43 = v44;
  int v45 = 44739242;
  CFTypeRef cf = 0;
  if (!a2 || !sub_165540()) {
    goto LABEL_31;
  }
  sub_24EE90((uint64_t *)&__p, &v37);
  if (!v28)
  {
    sub_8108((uint64_t *)&__p);
    goto LABEL_31;
  }
  uint64_t v15 = sub_32A48(17);
  uint64_t v16 = sub_32A48(28);
  char v17 = 0;
  uint64_t v18 = 0;
  *(void *)CFRunLoopSourceContext buf = 0x100000002;
  uint64_t v19 = *(void *)(v15 + 8);
  while (1)
  {
    uint64_t v20 = *(int *)&buf[4 * v18];
    char v21 = v17;
    if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
      break;
    }
    char v17 = 1;
    uint64_t v18 = 1;
    if (v21) {
      goto LABEL_27;
    }
  }
  if ((v19 & v20) == 0) {
    uint64_t v15 = v16;
  }
LABEL_27:
  uint64_t v22 = *(NSObject **)v15;
  if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CFRunLoopSourceContext buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 695;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = "take";
    _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Ignoring Bluetooth initiated %s request.", buf, 0x1Cu);
  }
  uint64_t v23 = v28;
  sub_8108((uint64_t *)&__p);
  if (!v23)
  {
LABEL_31:
    std::string __p = a1;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    sub_46B38(&v27, v37, (uint64_t)v38, (v38 - (unsigned char *)v37) >> 2);
    uint64_t v30 = v40;
    char v31 = v41;
    int v32 = v42;
    sub_46A4C(&v33, (uint64_t)&v43);
    int v34 = v45;
    CFTypeRef v24 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v35 = v24;
    char v36 = a2;
    sub_13910();
    *(void *)CFRunLoopSourceContext buf = __p;
    memset(&buf[8], 0, 24);
    sub_46B38(&buf[8], v27, v28, (v28 - (uint64_t)v27) >> 2);
    *(void *)&buf[32] = v30;
    char v48 = v31;
    int v49 = v32;
    sub_46A4C(&v50, (uint64_t)&v33);
    int v51 = v34;
    CFTypeRef v25 = v35;
    if (v35) {
      CFRetain(v35);
    }
    CFTypeRef v52 = v25;
    char v53 = v36;
    operator new();
  }
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v44[0]);
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
}

void sub_1D8218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
}

void sub_1D82CC()
{
}

void sub_1D834C(id a1)
{
  uint64_t v1 = sub_298DA4();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 304))(v1))
  {
    sub_298DA4();
    operator new();
  }
}

void sub_1D8434(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  sub_4362D0((uint64_t *)buf, *(void *)a1);
  sub_FB288(&v16, buf);
  sub_8108((uint64_t *)buf);
  for (char i = v17; i != &v16; char i = (uint64_t *)i[1])
  {
    uint64_t v5 = i[2];
    uint64_t v4 = (std::__shared_weak_count *)i[3];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = sub_32A48(17);
    uint64_t v7 = sub_32A48(28);
    char v8 = 0;
    uint64_t v9 = 0;
    __p[0] = (void *)0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *((int *)__p + v9);
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_10;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_10:
    uint64_t v13 = *(NSObject **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(v19, *(_DWORD *)(a1 + 8));
      if (v20 >= 0) {
        char v14 = v19;
      }
      else {
        char v14 = (void **)v19[0];
      }
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v2 + 128))(theString, v2);
      sub_21B7C(__p, theString[0]);
      if (v22 >= 0) {
        uint64_t v15 = __p;
      }
      else {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)CFRunLoopSourceContext buf = 136315906;
      CFTypeRef v24 = "Device_Bluetooth_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 885;
      __int16 v27 = 2080;
      uint64_t v28 = v14;
      __int16 v29 = 2080;
      uint64_t v30 = v15;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth property %s has changed for BT device UID \"%s\"", buf, 0x26u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      sub_72924((uint64_t)theString);
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }
    LODWORD(v19[0]) = *(_DWORD *)(a1 + 8);
    sub_81364(buf, (uint64_t)v19, 1);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 448))(v5, buf);
    sub_45F50(buf);
    if (v4) {
      sub_4636C(v4);
    }
  }
  sub_B8E4(&v16);
  operator delete();
}

void sub_1D870C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(bufa, a12);
  long long buf = va_arg(va1, _OWORD);
  long long v30 = va_arg(va1, _OWORD);
  uint64_t v31 = va_arg(va1, void);
  uint64_t v32 = va_arg(va1, void);
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_8108((uint64_t *)va1);
  if (a2 == 3)
  {
    char v14 = __cxa_begin_catch(a1);
    uint64_t v15 = (os_log_t *)sub_32A48(13);
    os_log_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v17 = v14[2];
      LODWORD(buf) = 136316162;
      *(void *)(bufa + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)(bufa + 14) = 429;
      WORD1(v30) = 1024;
      DWORD1(v30) = v17;
      WORD4(v30) = 2080;
      *(void *)((char *)&v30 + 10) = "";
      WORD1(v31) = 1024;
      HIDWORD(v31) = 98;
      uint64_t v18 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v19 = v16;
      uint32_t v20 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, v18, (uint8_t *)bufa, v20);
    }
  }
  else
  {
    char v21 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      char v22 = v21;
      uint64_t v23 = (os_log_t *)sub_32A48(13);
      os_log_t v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v22 + 16))(v22);
        LODWORD(buf) = 136316162;
        *(void *)(bufa + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)(bufa + 14) = 430;
        WORD1(v30) = 2080;
        *(void *)((char *)&v30 + 4) = v25;
        WORD6(v30) = 2080;
        *(void *)((char *)&v30 + 14) = "";
        HIWORD(v31) = 1024;
        LODWORD(v32) = 98;
        uint64_t v18 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v19 = v24;
        uint32_t v20 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      int v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)(bufa + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)(bufa + 14) = 431;
        WORD1(v30) = 2080;
        *(void *)((char *)&v30 + 4) = "";
        WORD6(v30) = 1024;
        *(_DWORD *)((char *)&v30 + 14) = 98;
        uint64_t v18 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v19 = v27;
        uint32_t v20 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1D86B4);
}

void sub_1D8A08(uint64_t *a1)
{
  uint64_t v1 = *a1;
  sub_4362D0(v33, *a1);
  sub_FB288(&v24, v33);
  sub_8108(v33);
  for (char i = v25; i != &v24; char i = (uint64_t *)i[1])
  {
    uint64_t v4 = (_DWORD *)i[2];
    unint64_t v3 = (std::__shared_weak_count *)i[3];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v5 = v4[36];
    AudioObjectID v6 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 120))(v1);
    sub_1050A0((uint64_t)v33, v5, v6);
    uint64_t v7 = sub_32A48(17);
    uint64_t v8 = sub_32A48(28);
    char v9 = 0;
    uint64_t v10 = 0;
    *(void *)long long buf = 0x100000002;
    uint64_t v11 = *(void *)(v7 + 8);
    while (1)
    {
      uint64_t v12 = *(int *)&buf[4 * v10];
      char v13 = v9;
      if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
        break;
      }
      char v9 = 1;
      uint64_t v10 = 1;
      if (v13) {
        goto LABEL_10;
      }
    }
    if ((v11 & v12) == 0) {
      uint64_t v7 = v8;
    }
LABEL_10:
    char v14 = *(NSObject **)v7;
    if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v1 + 128))(theString, v1);
      sub_21B7C(v31, theString[0]);
      if (v32 >= 0) {
        uint64_t v15 = v31;
      }
      else {
        uint64_t v15 = (void **)v31[0];
      }
      uint64_t v16 = v4[36];
      int v17 = "unknown";
      if (v16 <= 6) {
        int v17 = off_623840[v16];
      }
      sub_21C8C(v28, v17);
      int v18 = v29;
      uint64_t v19 = (void **)v28[0];
      uint64_t v20 = v34;
      if (!v34) {
        uint64_t v20 = v33[0];
      }
      if (v35) {
        CFStringRef v21 = v35;
      }
      else {
        CFStringRef v21 = (const __CFString *)v20;
      }
      sub_21B7C(__p, v21);
      char v22 = v28;
      if (v18 < 0) {
        char v22 = v19;
      }
      uint64_t v23 = __p;
      if (v27 < 0) {
        uint64_t v23 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      __int16 v37 = 1024;
      int v38 = 850;
      __int16 v39 = 2080;
      uint64_t v40 = v15;
      __int16 v41 = 2080;
      int v42 = v22;
      __int16 v43 = 2080;
      uint64_t v44 = v23;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth audio device with UID \"%s\" and port type %s, changed name to \"%s\"", buf, 0x30u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      sub_72924((uint64_t)theString);
    }
    (*(void (**)(_DWORD *, uint64_t *))(*(void *)v4 + 128))(v4, v33);
    sub_72924((uint64_t)&v35);
    sub_72924((uint64_t)&v34);
    sub_72924((uint64_t)v33);
    if (v3) {
      sub_4636C(v3);
    }
  }
  sub_B8E4(&v24);
  operator delete();
}

void sub_1D8D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_8108(&a35);
  if (a2 == 3)
  {
    int v38 = __cxa_begin_catch(exception_object);
    __int16 v39 = (os_log_t *)sub_32A48(13);
    os_log_t v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      int v41 = v38[2];
      *(_DWORD *)(v35 - 176) = 136316162;
      uint64_t v42 = v35 - 176;
      *(void *)(v42 + 4) = "StandardUtilities.h";
      *(_WORD *)(v35 - 164) = 1024;
      *(_DWORD *)(v42 + 14) = 429;
      *(_WORD *)(v35 - 158) = 1024;
      *(_DWORD *)(v35 - 156) = v41;
      *(_WORD *)(v35 - 152) = 2080;
      *(void *)(v42 + 26) = "";
      *(_WORD *)(v35 - 142) = 1024;
      *(_DWORD *)(v35 - 140) = 98;
      __int16 v43 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v44 = (uint8_t *)(v35 - 176);
      int v45 = v40;
      uint32_t v46 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, v43, v44, v46);
    }
  }
  else
  {
    int v47 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      char v48 = v47;
      int v49 = (os_log_t *)sub_32A48(13);
      os_log_t v50 = *v49;
      if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
      {
        uint64_t v51 = (*(uint64_t (**)(void *))(*(void *)v48 + 16))(v48);
        *(_DWORD *)(v35 - 176) = 136316162;
        uint64_t v52 = v35 - 176;
        *(void *)(v52 + 4) = "StandardUtilities.h";
        *(_WORD *)(v35 - 164) = 1024;
        *(_DWORD *)(v52 + 14) = 430;
        *(_WORD *)(v35 - 158) = 2080;
        *(void *)(v52 + 20) = v51;
        *(_WORD *)(v35 - 148) = 2080;
        *(void *)(v52 + 30) = "";
        *(_WORD *)(v35 - 138) = 1024;
        *(_DWORD *)(v35 - 136) = 98;
        __int16 v43 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v44 = (uint8_t *)(v35 - 176);
        int v45 = v50;
        uint32_t v46 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      char v53 = (os_log_t *)sub_32A48(13);
      os_log_t v54 = *v53;
      if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)(v35 - 176) = 136315906;
        uint64_t v55 = v35 - 176;
        *(void *)(v55 + 4) = "StandardUtilities.h";
        *(_WORD *)(v35 - 164) = 1024;
        *(_DWORD *)(v55 + 14) = 431;
        *(_WORD *)(v35 - 158) = 2080;
        *(void *)(v55 + 20) = "";
        *(_WORD *)(v35 - 148) = 1024;
        *(_DWORD *)(v55 + 30) = 98;
        __int16 v43 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v44 = (uint8_t *)(v35 - 176);
        int v45 = v54;
        uint32_t v46 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1D8D40);
}

void sub_1D90E0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (!v2) {
      JUMPOUT(0x1D8E68);
    }
    JUMPOUT(0x1D8E60);
  }
  JUMPOUT(0x1D90D8);
}

void sub_1D90F4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  strcpy((char *)v23, "mtslbolg");
  BYTE1(v23[1]) = 0;
  WORD1(v23[1]) = 0;
  unint64_t v3 = sub_99A40(v1);
  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0;
  }
  if (v4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v3;
  }
  uint64_t v5 = sub_32A48(17);
  uint64_t v6 = sub_32A48(28);
  char v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = HIDWORD(v3);
  v23[0] = 0x100000002;
  uint64_t v10 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v11 = *((int *)v23 + v8);
    char v12 = v7;
    if (((v10 & v11) != 0) != ((*(void *)(v6 + 8) & v11) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1;
    if (v12) {
      goto LABEL_11;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v5 = v6;
  }
LABEL_11:
  char v13 = *(NSObject **)v5;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v1 + 128))(theString, v1);
    sub_21B7C(&__p, theString[0]);
    if (v22 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v25 = "Device_Bluetooth_Aspen.cpp";
    __int16 v26 = 1024;
    int v27 = 829;
    __int16 v28 = 1024;
    int v29 = v9;
    __int16 v30 = 2080;
    uint64_t v31 = p_p;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Audio listen mode changed to %u for bluetooth audio device with UID \"%s\"", buf, 0x22u);
    if (v22 < 0) {
      operator delete(__p);
    }
    sub_72924((uint64_t)theString);
  }
  sub_4362D0((uint64_t *)buf, v1);
  sub_FB288((uint64_t *)&__p, buf);
  sub_8108((uint64_t *)buf);
  for (uint64_t i = v21; (void **)i != &__p; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v16 = *(void *)(i + 16);
    int v17 = *(std::__shared_weak_count **)(i + 24);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(theString[0]) = 1819505773;
    sub_81364(buf, (uint64_t)theString, 1);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v16 + 448))(v16, buf);
    sub_45F50(buf);
    if (v17) {
      sub_4636C(v17);
    }
  }
  sub_B8E4((uint64_t *)&__p);
  operator delete();
}

void sub_1D9408(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, long long a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_72924((uint64_t)&a10);
  if (a2 == 3)
  {
    char v22 = __cxa_begin_catch(a1);
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = v22[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v25;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      __int16 v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v27 = v24;
      uint32_t v28 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else
  {
    int v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int16 v30 = v29;
      uint64_t v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v33;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        __int16 v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v27 = v32;
        uint32_t v28 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v34 = (os_log_t *)sub_32A48(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        __int16 v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v27 = v35;
        uint32_t v28 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1D9370);
}

uint64_t sub_1D96E8(AudioObjectID a1)
{
  buf.AudioObjectPropertySelector mSelector = 0;
  BOOL v2 = sub_1614F4(@"fakevehicle", @"com.apple.audio.virtualaudio", &buf);
  if (buf.mSelector) {
    BOOL v3 = v2;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t v4 = sub_32A48(17);
    uint64_t v5 = sub_32A48(28);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *((int *)&buf.mSelector + v7);
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_18;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_18:
    uint64_t v23 = sub_32A48(23);
    char v24 = 0;
    uint64_t v25 = 0;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v26 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v27 = *((int *)&buf.mSelector + v25);
      char v28 = v24;
      if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
        break;
      }
      char v24 = 1;
      uint64_t v25 = 1;
      if (v28) {
        goto LABEL_24;
      }
    }
    if ((v26 & v27) == 0) {
      uint64_t v4 = v23;
    }
LABEL_24:
    uint64_t v29 = 1701869160;
    __int16 v30 = *(NSObject **)v4;
    if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v41 = 1024;
      int v42 = 149;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Default \"fakevehicle\" is set. Pretending that this BT device is a car kit.", (uint8_t *)&buf, 0x12u);
    }
  }
  else
  {
    AudioObjectID v39 = a1;
    strcpy((char *)&buf, "tacdbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    unint64_t v11 = sub_26DAC(&v39, &buf, 0, 0);
    *((void *)&v14 + 1) = v12;
    *(void *)&long long v14 = v11;
    uint64_t v13 = v14 >> 32;
    if ((v13 & 0xFF00000000) != 0) {
      unsigned int v15 = v13;
    }
    else {
      unsigned int v15 = 0;
    }
    uint64_t v16 = sub_32A48(17);
    uint64_t v17 = sub_32A48(28);
    char v18 = 0;
    uint64_t v19 = 0;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v20 = *(void *)(v16 + 8);
    while (1)
    {
      uint64_t v21 = *((int *)&buf.mSelector + v19);
      char v22 = v18;
      if (((v20 & v21) != 0) != ((*(void *)(v17 + 8) & v21) != 0)) {
        break;
      }
      char v18 = 1;
      uint64_t v19 = 1;
      if (v22) {
        goto LABEL_29;
      }
    }
    if ((v20 & v21) == 0) {
      uint64_t v16 = v17;
    }
LABEL_29:
    uint64_t v31 = sub_32A48(23);
    char v32 = 0;
    uint64_t v33 = 0;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v34 = *(void *)(v16 + 8);
    while (1)
    {
      uint64_t v35 = *((int *)&buf.mSelector + v33);
      char v36 = v32;
      if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
        break;
      }
      char v32 = 1;
      uint64_t v33 = 1;
      if (v36) {
        goto LABEL_35;
      }
    }
    if ((v34 & v35) == 0) {
      uint64_t v16 = v31;
    }
LABEL_35:
    __int16 v37 = *(NSObject **)v16;
    if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v41 = 1024;
      int v42 = 155;
      __int16 v43 = 1024;
      unsigned int v44 = v15;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BT Category is %u", (uint8_t *)&buf, 0x18u);
    }
    return sub_16696C(v15);
  }
  return v29;
}

void sub_1D9A20(unsigned int **a1)
{
  uint64_t v1 = *a1;
  strcpy(buf, "caobbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v3 = sub_99A40((uint64_t)v1);
  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0;
  }
  if (v4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v3;
  }
  unint64_t v5 = v3 & 0xFFFFFFFF00000000;
  if ((sub_166230() & 1) == 0 && sub_F7F68("VA_HandleOwnershipEvent", 0x17uLL) == &qword_659450)
  {
    os_signpost_id_t v6 = 0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v6 = os_signpost_id_generate((os_log_t)qword_659470);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v7 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v5 == 0x100000000;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6, "VA_HandleOwnershipEvent", "Begin updating port routability, ownership = %d", buf, 8u);
      }
    }
  }
  os_signpost_id_t v32 = v6;
  uint64_t v8 = sub_32A48(42);
  if (*(unsigned char *)(v8 + 8))
  {
    uint64_t v9 = *(NSObject **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 82;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = "kOwnershipChange";
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
      }
    }
  }
  if (v5 == 0x100000000) {
    unsigned int v10 = 1;
  }
  else {
    unsigned int v10 = 2;
  }
  atomic_store(v10, v1 + 132);
  uint64_t v11 = sub_32A48(17);
  uint64_t v12 = sub_32A48(28);
  char v13 = 0;
  uint64_t v14 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v15 = *(void *)(v11 + 8);
  while (1)
  {
    uint64_t v16 = *(int *)&buf[4 * v14];
    char v17 = v13;
    if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
      break;
    }
    char v13 = 1;
    uint64_t v14 = 1;
    if (v17) {
      goto LABEL_26;
    }
  }
  if ((v15 & v16) == 0) {
    uint64_t v11 = v12;
  }
LABEL_26:
  char v18 = *(NSObject **)v11;
  if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    if (v5 == 0x100000000) {
      uint64_t v19 = "true";
    }
    else {
      uint64_t v19 = "false";
    }
    (*(void (**)(CFStringRef *__return_ptr, unsigned int *))(*(void *)v1 + 128))(&theString, v1);
    sub_21B7C(&__p, theString);
    if (v31 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 789;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v19;
    *(_WORD *)&unsigned char buf[28] = 2080;
    char v36 = p_p;
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Audio connection ownership changed to %s for bluetooth audio device with UID \"%s\"", buf, 0x26u);
    if (v31 < 0) {
      operator delete(__p);
    }
    sub_72924((uint64_t)&theString);
  }
  memset(buf, 0, 24);
  strcpy(&buf[24], "cwdv");
  BYTE2(v36) = 0;
  int v37 = 3;
  v39[0] = 0;
  v39[1] = 0;
  int v38 = v39;
  CFTypeRef cf = 0;
  int v40 = 44731050;
  sub_43637C((uint64_t *)&__p, (uint64_t)v1, (uint64_t)buf);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v39[0]);
  if (*(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (v5 == 0x100000000)
  {
    v28[0] = 0;
    v28[1] = 0;
    CFStringRef theString = (CFStringRef)v28;
    *(_DWORD *)AudioObjectPropertyAddress buf = 1886418288;
    sub_FB720((uint64_t *)&buf[8], &__p);
    sub_110A6C((uint64_t **)&theString, *(unsigned int *)buf, (int *)buf);
    sub_8108((uint64_t *)&buf[8]);
    uint64_t v21 = (_DWORD *)sub_10FBF0();
    sub_110B44(v21, &theString, 0);
    sub_FB43C(v28[0]);
  }
  else
  {
    char v22 = (_DWORD *)sub_10FBF0();
    sub_112F90(v22, (uint64_t)&__p, 0, 0);
  }
  for (uint64_t i = v30; (void **)i != &__p; uint64_t i = *(void *)(i + 8))
  {
    char v24 = *(std::__shared_weak_count **)(i + 24);
    v33[0] = *(void *)(i + 16);
    v33[1] = (uint64_t)v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_43F38((uint64_t *)&theString, v33, "", 806);
    CFStringRef v25 = theString;
    int v34 = 1869832547;
    sub_81364(buf, (uint64_t)&v34, 1);
    (*((void (**)(CFStringRef, unsigned char *))v25->isa + 56))(v25, buf);
    sub_45F50(buf);
    if (v28[0]) {
      sub_4636C((std::__shared_weak_count *)v28[0]);
    }
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  kdebug_trace();
  sub_8108((uint64_t *)&__p);
  sub_1DA3FC(&v32);
  operator delete();
}

void sub_1DA060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, os_signpost_id_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t buf, int a20,__int16 a21,int a22,int a23,uint64_t a24,__int16 a25,__int16 a26,int a27,uint64_t a28,int a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_72924((uint64_t)&a9);
  sub_1DA3FC(&a15);
  if (a2 == 3)
  {
    uint64_t v35 = __cxa_begin_catch(exception_object);
    char v36 = (os_log_t *)sub_32A48(13);
    os_log_t v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      int v38 = v35[2];
      LODWORD(buf) = 136316162;
      *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
      a21 = 1024;
      *(_DWORD *)(&a21 + 1) = 429;
      HIWORD(a22) = 1024;
      a23 = v38;
      LOWORD(a24) = 2080;
      *(uint64_t *)((char *)&a24 + 2) = (uint64_t)"";
      a26 = 1024;
      a27 = 98;
      AudioObjectID v39 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v40 = v37;
      uint32_t v41 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, v39, (uint8_t *)&buf, v41);
    }
  }
  else
  {
    int v42 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v43 = v42;
      unsigned int v44 = (os_log_t *)sub_32A48(13);
      os_log_t v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v46 = (*(uint64_t (**)(void *))(*(void *)v43 + 16))(v43);
        LODWORD(buf) = 136316162;
        *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
        a21 = 1024;
        *(_DWORD *)(&a21 + 1) = 430;
        HIWORD(a22) = 2080;
        *(void *)(&a22 + 1) = v46;
        WORD2(a24) = 2080;
        *(uint64_t *)((char *)&a24 + 6) = (uint64_t)"";
        HIWORD(a27) = 1024;
        LODWORD(a28) = 98;
        AudioObjectID v39 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v40 = v45;
        uint32_t v41 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      int v47 = (os_log_t *)sub_32A48(13);
      os_log_t v48 = *v47;
      if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(uint64_t *)((char *)&buf + 4) = (uint64_t)"StandardUtilities.h";
        a21 = 1024;
        *(_DWORD *)(&a21 + 1) = 431;
        HIWORD(a22) = 2080;
        *(void *)(&a22 + 1) = "";
        WORD2(a24) = 1024;
        *(_DWORD *)((char *)&a24 + 6) = 98;
        AudioObjectID v39 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v40 = v48;
        uint32_t v41 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1D9F54);
}

void sub_1DA3B4()
{
}

os_signpost_id_t *sub_1DA3FC(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        uint64_t v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 82;
        __int16 v11 = 2080;
        uint64_t v12 = "kOwnershipChange";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_HandleOwnershipEvent", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_1DA58C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_1DA598(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = sub_32A48(17);
  uint64_t v3 = sub_32A48(28);
  char v4 = 0;
  uint64_t v5 = 0;
  v18[0] = 0x100000002;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *((int *)v18 + v5);
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8) {
      goto LABEL_7;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_7:
  __int16 v9 = *(NSObject **)v2;
  if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v1 + 128))(theString, v1);
    sub_21B7C(&__p, theString[0]);
    if (v17 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v20 = "Device_Bluetooth_Aspen.cpp";
    __int16 v21 = 1024;
    int v22 = 772;
    __int16 v23 = 2080;
    char v24 = p_p;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Audio connection failed for bluetooth audio device with UID \"%s\"", buf, 0x1Cu);
    if (v17 < 0) {
      operator delete(__p);
    }
    sub_72924((uint64_t)theString);
  }
  sub_4362D0((uint64_t *)buf, v1);
  sub_FB288((uint64_t *)&__p, buf);
  sub_8108((uint64_t *)buf);
  for (uint64_t i = v16; (void **)i != &__p; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v12 = *(void *)(i + 16);
    char v13 = *(std::__shared_weak_count **)(i + 24);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LODWORD(theString[0]) = 1935762278;
    sub_81364(buf, (uint64_t)theString, 1);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v12 + 448))(v12, buf);
    sub_45F50(buf);
    if (v13) {
      sub_4636C(v13);
    }
  }
  sub_B8E4((uint64_t *)&__p);
  operator delete();
}

void sub_1DA820(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, long long a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_72924((uint64_t)&a10);
  if (a2 == 3)
  {
    int v22 = __cxa_begin_catch(a1);
    __int16 v23 = (os_log_t *)sub_32A48(13);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = v22[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v25;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      uint64_t v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v27 = v24;
      uint32_t v28 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else
  {
    uint64_t v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v30 = v29;
      char v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v33;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        uint64_t v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v27 = v32;
        uint32_t v28 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      int v34 = (os_log_t *)sub_32A48(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        uint64_t v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v27 = v35;
        uint32_t v28 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1DA7D0);
}

void sub_1DAB00(uint64_t *a1)
{
  uint64_t v1 = *a1;
  strcpy((char *)v19, "edeibolg");
  BYTE1(v19[1]) = 0;
  WORD1(v19[1]) = 0;
  unint64_t v3 = sub_99A40(v1);
  if (v3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0;
  }
  if (v4)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v3;
  }
  uint64_t v5 = sub_32A48(17);
  uint64_t v6 = sub_32A48(28);
  char v7 = 0;
  uint64_t v8 = 0;
  v19[0] = 0x100000002;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *((int *)v19 + v8);
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1;
    if (v11) {
      goto LABEL_11;
    }
  }
  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
LABEL_11:
  uint64_t v12 = *(NSObject **)v5;
  if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v1 + 128))(theString, v1);
    sub_21B7C(__p, theString[0]);
    char v13 = "en";
    if (!HIDWORD(v3)) {
      char v13 = "dis";
    }
    __int16 v21 = "Device_Bluetooth_Aspen.cpp";
    __int16 v22 = 1024;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    int v23 = 759;
    if (v18 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    __int16 v24 = 2080;
    int v25 = v13;
    __int16 v26 = 2080;
    uint64_t v27 = v14;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Headset detection %sabled for Bluetooth device with UID \"%s\"", buf, 0x26u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    sub_72924((uint64_t)theString);
  }
  sub_1D6278();
}

void sub_1DAD74(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, long long a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_72924((uint64_t)&a10);
  if (a2 == 3)
  {
    __int16 v22 = __cxa_begin_catch(a1);
    int v23 = (os_log_t *)sub_32A48(13);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = v22[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v25;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      __int16 v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v27 = v24;
      uint32_t v28 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else
  {
    uint64_t v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v30 = v29;
      char v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v33;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        __int16 v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v27 = v32;
        uint32_t v28 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      int v34 = (os_log_t *)sub_32A48(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        __int16 v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v27 = v35;
        uint32_t v28 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1DACE0);
}

uint64_t *sub_1DAFFC(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    char v2 = *(const void **)(v1 + 88);
    if (v2) {
      CFRelease(v2);
    }
    sub_463E0(*(void **)(v1 + 64));
    unint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_1DB06C(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 88);
  if (v2) {
    CFRelease(v2);
  }
  sub_463E0(*(void **)(a1 + 64));
  unint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_1DB0B8(uint64_t a1)
{
  uint64_t v5 = a1;
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = (_DWORD *)sub_10FBF0();
  sub_43637C(v6, v2, a1 + 8);
  sub_112F90(v3, (uint64_t)v6, *(unsigned __int8 *)(a1 + 96), 0);
  sub_8108(v6);
  return sub_1DAFFC(&v5);
}

void sub_1DB158(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_8108(&a10);
  if (a2 == 3)
  {
    uint64_t v20 = __cxa_begin_catch(a1);
    __int16 v21 = (os_log_t *)sub_32A48(13);
    os_log_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v23 = v20[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v23;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 98;
      os_log_t v24 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v25 = v22;
      uint32_t v26 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&buf, v26);
    }
  }
  else
  {
    uint64_t v27 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint32_t v28 = v27;
      uint64_t v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v31;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 98;
        os_log_t v24 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v25 = v30;
        uint32_t v26 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      os_log_t v32 = (os_log_t *)sub_32A48(13);
      os_log_t v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 98;
        os_log_t v24 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v25 = v33;
        uint32_t v26 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1DB120);
}

void sub_1DB3D0(unsigned int *a1)
{
  for (uint64_t i = 0; i != 17; ++i)
  {
    inAddress.AudioObjectPropertySelector mSelector = dword_4E84C8[i];
    *(void *)&inAddress.AudioObjectPropertyScope mScope = 1735159650;
    AudioObjectID v3 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 120))(a1);
    AudioObjectRemovePropertyListener(v3, &inAddress, (AudioObjectPropertyListenerProc)sub_1D7354, a1);
  }
  sub_20DCF4((uint64_t)a1);
  uint64_t v4 = a1[67];
  uint64_t v5 = +[PersonalAudioListener sharedInstance];
  [v5 removeListener:v4];

  sub_430D98((uint64_t)a1);
}

void sub_1DB4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1DB4C8(uint64_t a1, int *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    char v74 = (os_log_t *)sub_32A48(13);
    int v75 = *v74;
    if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
    {
      CFStringRef theString = *(CFStringRef *)a2;
      int v92 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&theString);
      char v76 = v96 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v100 = 1024;
      int v101 = 640;
      __int16 v102 = 2080;
      int v103 = (const char *)v76;
      _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)&buf, 0x1Cu);
      if (v96 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v78 = (os_log_t *)sub_32A48(13);
    int v79 = *v78;
    if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
    {
      CFStringRef theString = *(CFStringRef *)a2;
      int v92 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&theString);
      char v80 = v96 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v100 = 1024;
      int v101 = 641;
      __int16 v102 = 2080;
      int v103 = (const char *)v80;
      __int16 v104 = 1024;
      *(_DWORD *)int v105 = a3;
      *(_WORD *)&v105[4] = 2048;
      *(void *)&v105[6] = a4;
      _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v96 < 0) {
        operator delete(__p[0]);
      }
    }
    int v81 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v81 = &off_6414D8;
    v81[2] = 561211770;
  }
  if (!a6)
  {
    char v82 = (os_log_t *)sub_32A48(13);
    int v83 = *v82;
    if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
    {
      CFStringRef theString = *(CFStringRef *)a2;
      int v92 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&theString);
      char v84 = v96 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v100 = 1024;
      int v101 = 642;
      __int16 v102 = 2080;
      int v103 = "inData";
      __int16 v104 = 2080;
      *(void *)int v105 = v84;
      _os_log_impl(&def_1E50E8, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", (uint8_t *)&buf, 0x26u);
      if (v96 < 0) {
        operator delete(__p[0]);
      }
    }
    int v85 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v85 = &off_6414D8;
    v85[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    char v86 = (os_log_t *)sub_32A48(13);
    int v87 = *v86;
    if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
    {
      CFStringRef theString = *(CFStringRef *)a2;
      int v92 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&theString);
      char v88 = v96 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v100 = 1024;
      int v101 = 643;
      __int16 v102 = 2080;
      int v103 = (const char *)v88;
      _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", (uint8_t *)&buf, 0x1Cu);
      if (v96 < 0) {
        operator delete(__p[0]);
      }
    }
    int v89 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v89 = &off_6414D8;
    v89[2] = 1852797029;
  }
  int v12 = *a2;
  if (*a2 == 1651797100)
  {
    unsigned int v24 = *a6;
    uint64_t v25 = sub_32A48(17);
    uint64_t v26 = sub_32A48(28);
    char v27 = 0;
    uint64_t v28 = 0;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v29 = *(void *)(v25 + 8);
    while (1)
    {
      uint64_t v30 = *((int *)&buf.mSelector + v28);
      char v31 = v27;
      if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
        break;
      }
      char v27 = 1;
      uint64_t v28 = 1;
      if (v31) {
        goto LABEL_49;
      }
    }
    if ((v29 & v30) == 0) {
      uint64_t v25 = v26;
    }
LABEL_49:
    uint64_t v55 = *(NSObject **)v25;
    if (v55 && os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(&theString, a1);
      sub_21B7C(__p, theString);
      if (v96 >= 0) {
        int v56 = __p;
      }
      else {
        int v56 = (void **)__p[0];
      }
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v100 = 1024;
      int v101 = 661;
      __int16 v102 = 2080;
      int v103 = (const char *)v56;
      __int16 v104 = 1024;
      *(_DWORD *)int v105 = v24;
      _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_DEBUG, "%25s:%-5d Bluetooth audio device with UID \"%s\": setting low latency mode to %u", (uint8_t *)&buf, 0x22u);
      if (v96 < 0) {
        operator delete(__p[0]);
      }
      sub_72924((uint64_t)&theString);
    }
    sub_1DC514((uint64_t)&buf, a2);
    return sub_4321A0(a1, &buf, a3, a4, a5, a6);
  }
  else if (v12 == 1936745838)
  {
    unsigned int v16 = *a6;
    uint64_t v17 = sub_32A48(17);
    uint64_t v18 = sub_32A48(28);
    char v19 = 0;
    uint64_t v20 = 0;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v21 = *(void *)(v17 + 8);
    while (1)
    {
      uint64_t v22 = *((int *)&buf.mSelector + v20);
      char v23 = v19;
      if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
        break;
      }
      char v19 = 1;
      uint64_t v20 = 1;
      if (v23) {
        goto LABEL_29;
      }
    }
    if ((v21 & v22) == 0) {
      uint64_t v17 = v18;
    }
LABEL_29:
    AudioObjectID v39 = *(NSObject **)v17;
    if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(&theString, a1);
      sub_21B7C(__p, theString);
      if (v96 >= 0) {
        int v40 = __p;
      }
      else {
        int v40 = (void **)__p[0];
      }
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v100 = 1024;
      int v101 = 668;
      __int16 v102 = 2080;
      int v103 = (const char *)v40;
      __int16 v104 = 1024;
      *(_DWORD *)int v105 = v16;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d Bluetooth audio device with UID \"%s\": setting spatial A2DP mode to %u", (uint8_t *)&buf, 0x22u);
      if (v96 < 0) {
        operator delete(__p[0]);
      }
      sub_72924((uint64_t)&theString);
    }
    v90[0] = v16;
    int v97 = 0;
    UInt32 v98 = 4;
    strcpy((char *)&buf, "papsbolg");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    if ((*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 16))(a1, &buf))
    {
      strcpy((char *)&buf, "papsbolg");
      BYTE1(buf.mElement) = 0;
      HIWORD(buf.mElement) = 0;
      (*(void (**)(uint64_t, AudioObjectPropertyAddress *, void, void, UInt32 *, int *))(*(void *)a1 + 40))(a1, &buf, 0, 0, &v98, &v97);
      if (v97)
      {
        uint64_t v41 = sub_32A48(17);
        uint64_t v42 = sub_32A48(28);
        char v43 = 0;
        uint64_t v44 = 0;
        *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
        uint64_t v45 = *(void *)(v41 + 8);
        while (1)
        {
          uint64_t v46 = *((int *)&buf.mSelector + v44);
          char v47 = v43;
          if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
            break;
          }
          char v43 = 1;
          uint64_t v44 = 1;
          if (v47) {
            goto LABEL_95;
          }
        }
        if ((v45 & v46) == 0) {
          uint64_t v41 = v42;
        }
LABEL_95:
        int v69 = *(NSObject **)v41;
        if (v69 && os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(v94, a1);
          sub_21B7C(__p, v94[0]);
          int v70 = v96;
          int v71 = (void **)__p[0];
          sub_2417C(&theString, 0x7370656Eu);
          char v72 = __p;
          if (v70 < 0) {
            char v72 = v71;
          }
          if (v93 >= 0) {
            p_CFStringRef theString = &theString;
          }
          else {
            p_CFStringRef theString = (void *)theString;
          }
          buf.AudioObjectPropertySelector mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
          __int16 v100 = 1024;
          int v101 = 901;
          __int16 v102 = 2080;
          int v103 = (const char *)v72;
          __int16 v104 = 2080;
          *(void *)int v105 = p_theString;
          *(_WORD *)&v105[8] = 1024;
          *(_DWORD *)&v105[10] = v16;
          _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d Bluetooth audio device with UID \"%s\": setting %s to %u", (uint8_t *)&buf, 0x2Cu);
          if (v93 < 0) {
            operator delete((void *)theString);
          }
          if (v96 < 0) {
            operator delete(__p[0]);
          }
          sub_72924((uint64_t)v94);
        }
        strcpy((char *)&buf, "nepsbolg");
        BYTE1(buf.mElement) = 0;
        HIWORD(buf.mElement) = 0;
        sub_4321A0(a1, &buf, 0, 0, v98, v90);
        sub_13910();
        operator new();
      }
    }
    uint64_t v48 = sub_32A48(17);
    uint64_t result = sub_32A48(28);
    char v50 = 0;
    uint64_t v51 = 0;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v52 = *(void *)(v48 + 8);
    while (1)
    {
      uint64_t v53 = *((int *)&buf.mSelector + v51);
      char v54 = v50;
      if (((v52 & v53) != 0) != ((*(void *)(result + 8) & v53) != 0)) {
        break;
      }
      char v50 = 1;
      uint64_t v51 = 1;
      if (v54) {
        goto LABEL_75;
      }
    }
    if ((v52 & v53) == 0) {
      uint64_t v48 = result;
    }
LABEL_75:
    char v62 = *(NSObject **)v48;
    if (v62)
    {
      uint64_t result = os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG);
      if (result)
      {
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(v94, a1);
        sub_21B7C(__p, v94[0]);
        int v63 = v96;
        __int16 v64 = (void **)__p[0];
        sub_2417C(&theString, 0x7370656Eu);
        int v65 = __p;
        if (v63 < 0) {
          int v65 = v64;
        }
        if (v93 >= 0) {
          __int16 v66 = &theString;
        }
        else {
          __int16 v66 = (void *)theString;
        }
        buf.AudioObjectPropertySelector mSelector = 136316162;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
        __int16 v100 = 1024;
        int v101 = 908;
        __int16 v102 = 2080;
        int v103 = (const char *)v65;
        __int16 v104 = 2080;
        *(void *)int v105 = v66;
        *(_WORD *)&v105[8] = 1024;
        *(_DWORD *)&v105[10] = v16;
        _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d Bluetooth audio device with UID \"%s\": could not set %s to %u because spatial audio is not supported", (uint8_t *)&buf, 0x2Cu);
        if (v93 < 0) {
          operator delete((void *)theString);
        }
        if (v96 < 0) {
          operator delete(__p[0]);
        }
        return sub_72924((uint64_t)v94);
      }
    }
  }
  else if (v12 == 1869832547)
  {
    AudioObjectPropertyScope v13 = *a6;
    if ((sub_166230() & 1) == 0 && sub_F7F68("VA_SetOwnership", 0xFuLL) == &qword_659450)
    {
      uint64_t v14 = 0;
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_659478))
      {
        qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
        __cxa_guard_release(&qword_659478);
      }
      uint64_t v14 = (char *)os_signpost_id_generate((os_log_t)qword_659470);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_659478))
      {
        qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
        __cxa_guard_release(&qword_659478);
      }
      if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v15 = qword_659470;
        if (os_signpost_enabled((os_log_t)qword_659470))
        {
          buf.AudioObjectPropertySelector mSelector = 67109120;
          buf.AudioObjectPropertyScope mScope = v13;
          _os_signpost_emit_with_name_impl(&def_1E50E8, v15, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v14, "VA_SetOwnership", "Setting kVirtualAudioPortPropertyOwnsSharedAudioConnection to %d", (uint8_t *)&buf, 8u);
        }
      }
    }
    __p[0] = v14;
    uint64_t v67 = sub_32A48(42);
    if (*(unsigned char *)(v67 + 8))
    {
      __int16 v68 = *(NSObject **)v67;
      if (*(void *)v67)
      {
        if (os_log_type_enabled(*(os_log_t *)v67, OS_LOG_TYPE_DEBUG))
        {
          buf.AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "SignpostUtilities.h";
          __int16 v100 = 1024;
          int v101 = 76;
          __int16 v102 = 2080;
          int v103 = "kOwnsSharedConnection";
          _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", (uint8_t *)&buf, 0x1Cu);
        }
      }
    }
    sub_1DC514((uint64_t)&buf, a2);
    sub_4321A0(a1, &buf, a3, a4, a5, a6);
    return (uint64_t)sub_1DC6D4((os_signpost_id_t *)__p);
  }
  else
  {
    sub_1DC514((uint64_t)v90, a2);
    uint64_t v32 = sub_32A48(17);
    uint64_t v33 = sub_32A48(28);
    char v34 = 0;
    uint64_t v35 = 0;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v36 = *(void *)(v32 + 8);
    while (1)
    {
      uint64_t v37 = *((int *)&buf.mSelector + v35);
      char v38 = v34;
      if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
        break;
      }
      char v34 = 1;
      uint64_t v35 = 1;
      if (v38) {
        goto LABEL_60;
      }
    }
    if ((v36 & v37) == 0) {
      uint64_t v32 = v33;
    }
LABEL_60:
    os_log_t v57 = *(NSObject **)v32;
    if (v57 && os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(v94, a1);
      sub_21B7C(__p, v94[0]);
      int v58 = v96;
      char v59 = (void **)__p[0];
      sub_2417C(&theString, v90[0]);
      char v60 = __p;
      if (v58 < 0) {
        char v60 = v59;
      }
      if (v93 >= 0) {
        char v61 = &theString;
      }
      else {
        char v61 = (void *)theString;
      }
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v100 = 1024;
      int v101 = 674;
      __int16 v102 = 2080;
      int v103 = (const char *)v60;
      __int16 v104 = 2080;
      *(void *)int v105 = v61;
      _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth audio device with UID \"%s\": Setting Bluetooth property %s.", (uint8_t *)&buf, 0x26u);
      if (v93 < 0) {
        operator delete((void *)theString);
      }
      if (v96 < 0) {
        operator delete(__p[0]);
      }
      sub_72924((uint64_t)v94);
    }
    sub_1DC514((uint64_t)&buf, a2);
    return sub_4321A0(a1, &buf, a3, a4, a5, a6);
  }
  return result;
}

void sub_1DC4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1DC514(uint64_t result, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1685025636)
  {
    if (v2 > 1651797099)
    {
      switch(v2)
      {
        case 1651797100:
          uint64_t v3 = 0x676C6F626C6F6C61;
          goto LABEL_30;
        case 1651798131:
          uint64_t v3 = 0x676C6F6270726973;
          goto LABEL_30;
        case 1668051827:
          uint64_t v3 = 0x676C6F62636C7373;
          goto LABEL_30;
      }
    }
    else
    {
      if (v2 == 1651796325 || v2 == 1651796336)
      {
        uint64_t v3 = 0x676C6F6269657370;
        goto LABEL_30;
      }
      if (v2 == 1651796339)
      {
        uint64_t v3 = 0x676C6F6269657373;
        goto LABEL_30;
      }
    }
  }
  else if (v2 <= 1869832546)
  {
    switch(v2)
    {
      case 1685025637:
        uint64_t v3 = 0x676C6F62646F7365;
        goto LABEL_30;
      case 1685026403:
        uint64_t v3 = 0x676C6F62646F7663;
        goto LABEL_30;
      case 1718772584:
        uint64_t v3 = 0x676C6F6266726368;
        goto LABEL_30;
    }
  }
  else if (v2 > 1936745837)
  {
    if (v2 == 1936745838)
    {
      uint64_t v3 = 0x676C6F627370656ELL;
      goto LABEL_30;
    }
    if (v2 == 1952609377)
    {
      uint64_t v3 = 0x676C6F6261746274;
      goto LABEL_30;
    }
  }
  else
  {
    if (v2 == 1869832547)
    {
      uint64_t v3 = 0x676C6F62626F6163;
      goto LABEL_30;
    }
    if (v2 == 1935762278)
    {
      uint64_t v3 = 0x676C6F6262616366;
LABEL_30:
      *(void *)uint64_t result = v3;
      *(_DWORD *)(result + 8) = 0;
      return result;
    }
  }
  *(void *)uint64_t result = *(void *)a2;
  *(_DWORD *)(result + 8) = a2[2];
  return result;
}

os_signpost_id_t *sub_1DC6D4(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        uint64_t v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 76;
        __int16 v11 = 2080;
        int v12 = "kOwnsSharedConnection";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_SetOwnership", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_1DC864(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_1DC870(uint64_t *a1)
{
  uint64_t v1 = *a1;
  sub_4362D0((uint64_t *)buf, *a1);
  sub_FB288(&v18, buf);
  sub_8108((uint64_t *)buf);
  for (uint64_t i = v19; i != &v18; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    uint64_t v3 = (std::__shared_weak_count *)i[3];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    strcpy((char *)v23, "nepsbolg");
    BYTE1(v23[1]) = 0;
    WORD1(v23[1]) = 0;
    unint64_t v6 = sub_99A40(v1);
    if (v6 || !v5)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v6;
    }
    uint64_t v7 = sub_32A48(17);
    uint64_t v8 = sub_32A48(28);
    char v9 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = HIDWORD(v6);
    v23[0] = 0x100000002;
    uint64_t v12 = *(void *)(v7 + 8);
    while (1)
    {
      uint64_t v13 = *((int *)v23 + v10);
      char v14 = v9;
      if (((v12 & v13) != 0) != ((*(void *)(v8 + 8) & v13) != 0)) {
        break;
      }
      char v9 = 1;
      uint64_t v10 = 1;
      if (v14) {
        goto LABEL_12;
      }
    }
    if ((v12 & v13) == 0) {
      uint64_t v7 = v8;
    }
LABEL_12:
    uint64_t v15 = *(NSObject **)v7;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v1 + 128))(theString, v1);
      sub_21B7C(__p, theString[0]);
      unsigned int v16 = __p;
      if (v22 < 0) {
        unsigned int v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v25 = "Device_Bluetooth_Aspen.cpp";
      __int16 v26 = 1024;
      int v27 = 868;
      __int16 v28 = 1024;
      int v29 = v11;
      __int16 v30 = 2080;
      char v31 = v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d BluetoothSpatialAudioEnabled changed to %d for BT device UID \"%s\" ", buf, 0x22u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
      sub_72924((uint64_t)theString);
    }
    LODWORD(__p[0]) = 1936745838;
    sub_81364(buf, (uint64_t)__p, 1);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v4 + 448))(v4, buf);
    sub_45F50(buf);
    if (v3) {
      sub_4636C(v3);
    }
  }
  sub_B8E4(&v18);
  operator delete();
}

void sub_1DCB9C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long buf,long long a22,__int16 a23,__int16 a24,int a25,int a26,uint64_t a27)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_8108(&a27);
  if (a2 == 3)
  {
    int v29 = __cxa_begin_catch(a1);
    __int16 v30 = (os_log_t *)sub_32A48(13);
    os_log_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      int v32 = v29[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a22) = 1024;
      DWORD1(a22) = v32;
      WORD4(a22) = 2080;
      *(void *)((char *)&a22 + 10) = "";
      a24 = 1024;
      a25 = 98;
      uint64_t v33 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      char v34 = v31;
      uint32_t v35 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, v33, (uint8_t *)&buf, v35);
    }
  }
  else
  {
    uint64_t v36 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v37 = v36;
      char v38 = (os_log_t *)sub_32A48(13);
      os_log_t v39 = *v38;
      if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v40 = (*(uint64_t (**)(void *))(*(void *)v37 + 16))(v37);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a22) = 2080;
        *(void *)((char *)&a22 + 4) = v40;
        WORD6(a22) = 2080;
        *(void *)((char *)&a22 + 14) = "";
        HIWORD(a25) = 1024;
        a26 = 98;
        uint64_t v33 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        char v34 = v39;
        uint32_t v35 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v41 = (os_log_t *)sub_32A48(13);
      os_log_t v42 = *v41;
      if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a22) = 2080;
        *(void *)((char *)&a22 + 4) = "";
        WORD6(a22) = 1024;
        *(_DWORD *)((char *)&a22 + 14) = 98;
        uint64_t v33 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        char v34 = v42;
        uint32_t v35 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1DCAFCLL);
}

void sub_1DCE88(uint64_t a1, uint64_t a2, UInt32 a3, const void *a4, UInt32 *a5, int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v29 = (os_log_t *)sub_32A48(13);
    __int16 v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)v46, (unsigned int *)&__p);
      os_log_t v31 = v47 >= 0 ? v46 : (void **)v46[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      __int16 v49 = 1024;
      int v50 = 571;
      __int16 v51 = 2080;
      uint64_t v52 = (const char *)v31;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v33 = (os_log_t *)sub_32A48(13);
    char v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)v46, (unsigned int *)&__p);
      uint32_t v35 = v47 >= 0 ? v46 : (void **)v46[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      __int16 v49 = 1024;
      int v50 = 572;
      __int16 v51 = 2080;
      uint64_t v52 = (const char *)v35;
      __int16 v53 = 1024;
      LODWORD(v54[0]) = a3;
      WORD2(v54[0]) = 2048;
      *(void *)((char *)v54 + 6) = a4;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    uint64_t v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v36 = &off_6414D8;
    v36[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v37 = (os_log_t *)sub_32A48(13);
    char v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      int v42 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)v46, (unsigned int *)&__p);
      os_log_t v39 = v47 >= 0 ? v46 : (void **)v46[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      __int16 v49 = 1024;
      int v50 = 573;
      __int16 v51 = 2080;
      uint64_t v52 = "outData";
      __int16 v53 = 2080;
      v54[0] = v39;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
    }
    uint64_t v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v40 = &off_6414D8;
    v40[2] = 561211770;
  }
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1819046767)
  {
    if (v12 <= 1651796338)
    {
      if (v12 == 1650551140)
      {
        int v13 = *(_DWORD *)(a1 + 532);
        goto LABEL_31;
      }
      if (v12 != 1651796336) {
        goto LABEL_32;
      }
    }
    else if (v12 != 1651796339)
    {
      if (v12 != 1651798131)
      {
        if (v12 == 1767989616)
        {
          int v13 = *(unsigned __int8 *)(a1 + 496);
LABEL_31:
          *a6 = v13;
          return;
        }
        goto LABEL_32;
      }
      sub_1DC514((uint64_t)buf, (int *)a2);
      (*(void (**)(uint64_t, unsigned char *, void, void, UInt32 *, int *))(*(void *)a1 + 40))(a1, buf, 0, 0, a5, a6);
      int v14 = sub_1D71D4(*a6);
      goto LABEL_27;
    }
    sub_1DC514((uint64_t)buf, (int *)a2);
    (*(void (**)(uint64_t, unsigned char *, void, void, UInt32 *, int *))(*(void *)a1 + 40))(a1, buf, 0, 0, a5, a6);
    int v14 = sub_1D7058(*a6);
    goto LABEL_27;
  }
  if (v12 > 1937208175)
  {
    if (v12 == 1937208176)
    {
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 376))(a1);
      if ((v16 & 0xFF00000000) != 0) {
        int v13 = v16;
      }
      else {
        int v13 = 0;
      }
      goto LABEL_31;
    }
    if (v12 != 1970496630)
    {
      if (v12 != 2004054901) {
        goto LABEL_32;
      }
LABEL_18:
      sub_432AE8(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, (float *)a6);
      goto LABEL_19;
    }
    sub_432AE8(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, (float *)a6);
    int v14 = sub_16696C(*a6);
LABEL_27:
    *a6 = v14;
    return;
  }
  switch(v12)
  {
    case 1819046768:
      goto LABEL_18;
    case 1869832547:
      unsigned int v15 = atomic_load((unsigned int *)(a1 + 528));
      int v13 = v15 == 1;
      goto LABEL_31;
    case 1935762278:
      sub_1DC514((uint64_t)buf, (int *)a2);
      (*(void (**)(uint64_t, unsigned char *, void, void, UInt32 *, int *))(*(void *)a1 + 40))(a1, buf, 0, 0, a5, a6);
LABEL_19:
      int v13 = *a6 != 0;
      goto LABEL_31;
  }
LABEL_32:
  sub_1DC514((uint64_t)&v45, (int *)a2);
  uint64_t v17 = sub_32A48(17);
  uint64_t v18 = sub_32A48(28);
  char v19 = 0;
  uint64_t v20 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v21 = *(void *)(v17 + 8);
  while (1)
  {
    uint64_t v22 = *(int *)&buf[4 * v20];
    char v23 = v19;
    if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
      break;
    }
    char v19 = 1;
    uint64_t v20 = 1;
    if (v23) {
      goto LABEL_38;
    }
  }
  if ((v21 & v22) == 0) {
    uint64_t v17 = v18;
  }
LABEL_38:
  unsigned int v24 = *(NSObject **)v17;
  if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(theString, a1);
    sub_21B7C(v46, theString[0]);
    int v25 = v47;
    __int16 v26 = (void **)v46[0];
    sub_2417C(&__p, v45.mSelector);
    int v27 = v46;
    if (v25 < 0) {
      int v27 = v26;
    }
    if (v43 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    __int16 v49 = 1024;
    int v50 = 631;
    __int16 v51 = 2080;
    uint64_t v52 = (const char *)v27;
    __int16 v53 = 2080;
    v54[0] = p_p;
    _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Bluetooth audio device with UID \"%s\": Getting Bluetooth property %s.", buf, 0x26u);
    if (v43 < 0) {
      operator delete(__p);
    }
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    sub_72924((uint64_t)theString);
  }
  sub_432AE8(a1, &v45, a3, a4, a5, (float *)a6);
}

void sub_1DD6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1DD6F8(uint64_t a1, int *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    unint64_t v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)a2;
      int v20 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      int v13 = v22 >= 0 ? __p : (void **)__p[0];
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 542;
      __int16 v26 = 2080;
      int v27 = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)&buf, 0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    unsigned int v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)a2;
      int v20 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      if (v22 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      buf.AudioObjectPropertySelector mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 543;
      __int16 v26 = 2080;
      int v27 = v17;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      os_log_t v31 = a4;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v18 = &off_6414D8;
    v18[2] = 561211770;
  }
  int v8 = *a2;
  uint64_t result = 4;
  if (*a2 <= 1869832546)
  {
    if (v8 == 1650551140) {
      return result;
    }
    int v10 = 1767989616;
    goto LABEL_9;
  }
  if (v8 != 1869832547 && v8 != 1937208176)
  {
    int v10 = 1986947428;
LABEL_9:
    if (v8 != v10)
    {
      sub_1DC514((uint64_t)&buf, a2);
      return sub_433254(a1, &buf, a3, a4);
    }
  }
  return result;
}

BOOL sub_1DDA4C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if (*a2 <= 1869832546)
  {
    if (v3 != 1650551140 && v3 != 1767989616) {
      goto LABEL_10;
    }
    return 0;
  }
  if (v3 != 1869832547)
  {
    if (v3 != 1986947428)
    {
LABEL_10:
      sub_1DC514((uint64_t)&v6, a2);
      return sub_43356C(a1, &v6);
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1DDAE8(unsigned int *a1, int *a2)
{
  int v4 = *a2;
  uint64_t result = 1;
  if (*a2 > 1869832546)
  {
    switch(v4)
    {
      case 1986947428:
        return result;
      case 1937208176:
        BOOL v7 = ((*(uint64_t (**)(unsigned int *))(*(void *)a1 + 376))(a1) & 0xFF00000000) == 0;
        return !v7;
      case 1869832547:
        unsigned int v6 = atomic_load(a1 + 132);
        BOOL v7 = v6 == 0;
        return !v7;
    }
LABEL_10:
    sub_1DC514((uint64_t)v26, a2);
    uint64_t v9 = sub_32A48(17);
    uint64_t v10 = sub_32A48(28);
    char v11 = 0;
    uint64_t v12 = 0;
    *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
    uint64_t v13 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = *((int *)&buf.mSelector + v12);
      char v15 = v11;
      if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
        break;
      }
      char v11 = 1;
      uint64_t v12 = 1;
      if (v15)
      {
        if ((v13 & 1) == 0) {
          goto LABEL_31;
        }
        goto LABEL_19;
      }
    }
    if ((v13 & v14) == 0) {
      uint64_t v9 = v10;
    }
    if (*(void *)(v9 + 8))
    {
LABEL_19:
      uint64_t v16 = *(NSObject **)v9;
      if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(CFStringRef *__return_ptr, unsigned int *))(*(void *)a1 + 128))(theString, a1);
        sub_21B7C(v24, theString[0]);
        int v17 = v25;
        uint64_t v18 = (void **)v24[0];
        sub_2417C(__p, v26[0]);
        uint64_t v19 = v24;
        if (v17 < 0) {
          uint64_t v19 = v18;
        }
        if (v22 >= 0) {
          int v20 = __p;
        }
        else {
          int v20 = (void **)__p[0];
        }
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_Bluetooth_Aspen.cpp";
        __int16 v28 = 1024;
        int v29 = 511;
        __int16 v30 = 2080;
        os_log_t v31 = v19;
        __int16 v32 = 2080;
        uint64_t v33 = v20;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Bluetooth audio device with UID \"%s\": Checking if it has Bluetooth property %s.", (uint8_t *)&buf, 0x26u);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        if (v25 < 0) {
          operator delete(v24[0]);
        }
        sub_72924((uint64_t)theString);
      }
    }
LABEL_31:
    sub_1DC514((uint64_t)&buf, a2);
    sub_50848((std::mutex *)a1);
    BOOL v7 = AudioObjectHasProperty(a1[67], &buf) == 0;
    return !v7;
  }
  if (v4 != 1650551140 && v4 != 1767989616) {
    goto LABEL_10;
  }
  return result;
}

void sub_1DDDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1DDDF0(AudioObjectID a1)
{
  UInt32 ioDataSize = 4;
  LODWORD(outData) = 0;
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F6262647470;
  inAddress.AudioObjectPropertyElement mElement = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData(a1, &inAddress, 0, 0, &ioDataSize, &outData);
  if (PropertyData)
  {
    uint64_t v2 = sub_32A48(17);
    uint64_t v3 = sub_32A48(28);
    char v4 = 0;
    uint64_t v5 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v6 = *(void *)(v2 + 8);
    while (1)
    {
      uint64_t v7 = *(int *)&buf[4 * v5];
      char v8 = v4;
      if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
        break;
      }
      char v4 = 1;
      uint64_t v5 = 1;
      if (v8) {
        goto LABEL_8;
      }
    }
    if ((v6 & v7) == 0) {
      uint64_t v2 = v3;
    }
LABEL_8:
    uint64_t v9 = *(NSObject **)v2;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
      __int16 v26 = 1024;
      int v27 = 113;
      __int16 v28 = 1024;
      unsigned int v29 = PropertyData;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d getting bluetooth audio device type", buf, 0x18u);
    }
  }
  unsigned int v10 = outData;
  if (outData == 1953853033) {
    operator new();
  }
  uint64_t v11 = sub_32A48(17);
  uint64_t v12 = sub_32A48(28);
  char v13 = 0;
  uint64_t v14 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v15 = *(void *)(v11 + 8);
  while (1)
  {
    uint64_t v16 = *(int *)&buf[4 * v14];
    char v17 = v13;
    if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
      break;
    }
    char v13 = 1;
    uint64_t v14 = 1;
    if (v17) {
      goto LABEL_19;
    }
  }
  if ((v15 & v16) == 0) {
    uint64_t v11 = v12;
  }
LABEL_19:
  uint64_t v18 = *(NSObject **)v11;
  if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(&inAddress, v10);
    if (v24 >= 0) {
      p_AudioObjectPropertyAddress inAddress = &inAddress;
    }
    else {
      p_AudioObjectPropertyAddress inAddress = *(AudioObjectPropertyAddress **)&inAddress.mSelector;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_Bluetooth_Aspen.cpp";
    __int16 v26 = 1024;
    int v27 = 300;
    __int16 v28 = 1024;
    unsigned int v29 = v10;
    __int16 v30 = 2080;
    os_log_t v31 = p_inAddress;
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown bluetooth audio device type %u ('%s')", buf, 0x22u);
    if (v24 < 0) {
      operator delete(*(void **)&inAddress.mSelector);
    }
  }
  return 0;
}

void sub_1DEDCC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_43456C(v19);
  operator delete();
}

CFStringRef sub_1DEEA4(uint64_t a1, CFStringRef *a2, CFStringRef *a3)
{
  if (*a3)
  {
    if (!*a2 || !CFStringHasSuffix(*a2, *a3))
    {
      uint64_t v9 = (os_log_t *)sub_32A48(13);
      unsigned int v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v21 = "Device_Bluetooth_Aspen.cpp";
        __int16 v22 = 1024;
        int v23 = 317;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"invalid UID\"", buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "invalid UID");
    }
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, *a2, *a3);
    CFArrayRef v18 = ArrayBySeparatingStrings;
    __int16 v19 = 1;
    if (!ArrayBySeparatingStrings)
    {
      uint64_t v12 = (os_log_t *)sub_32A48(13);
      char v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v21 = "Device_Bluetooth_Aspen.cpp";
        __int16 v22 = 1024;
        int v23 = 320;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"couldn't break apart UID\"", buf, 0x12u);
      }
      uint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v14, "couldn't break apart UID");
    }
    CFStringRef v7 = CFStringCreateByCombiningStrings(kCFAllocatorDefault, ArrayBySeparatingStrings, &stru_642048);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = 1;
    if (!v7)
    {
      uint64_t v15 = (os_log_t *)sub_32A48(13);
      uint64_t v16 = *v15;
      if (*v15)
      {
        if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v21 = "Device_Bluetooth_Aspen.cpp";
          __int16 v22 = 1024;
          int v23 = 323;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"couldn't create port partnership UID\"", buf, 0x12u);
        }
      }
      char v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v17, "couldn't create port partnership UID");
    }
    return (CFStringRef)sub_3D61C((uint64_t)&v18);
  }
  else
  {
    CFStringRef result = CFStringCreateWithCString(0, "", 0x600u);
    *(void *)a1 = result;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return result;
}

void sub_1DF194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_72924(v9);
  sub_3D61C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1DF1F8(uint64_t a1)
{
  (*(void (**)(void, void))(**(void **)(a1 + 24) + 256))(*(void *)(a1 + 24), 0);
  uint64_t result = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1DF2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 126;
      __int16 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    __int16 v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v23 = v22;
      char v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 126;
        __int16 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      int v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 126;
        __int16 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1DF258);
}

uint64_t sub_1DF510(uint64_t result, int a2)
{
  if (*(void *)(result + 24))
  {
    uint64_t v2 = result;
    if (a2)
    {
      int v3 = *(_DWORD *)(result + 32);
      char v4 = (os_log_t *)sub_32A48(25);
      uint64_t v5 = *v4;
      if (v3 == 1)
      {
        if (v5 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, 0x70726563u);
          if (v13 >= 0) {
            uint64_t v6 = __p;
          }
          else {
            uint64_t v6 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v15 = "EnableANCMonitorIODelegate.cpp";
          __int16 v16 = 1024;
          int v17 = 107;
          __int16 v18 = 2080;
          __int16 v19 = v6;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d HandleIODidStart for port %s. Stopping ANCMonitor aggregate.", buf, 0x1Cu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
        return (*(uint64_t (**)(void, void))(**(void **)(v2 + 24) + 256))(*(void *)(v2 + 24), 0);
      }
      else
      {
        if (v5 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, 0x7073706Bu);
          uint64_t v11 = v13 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v15 = "EnableANCMonitorIODelegate.cpp";
          __int16 v16 = 1024;
          int v17 = 115;
          __int16 v18 = 2080;
          __int16 v19 = v11;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d HandleIODidStart for port %s. Starting ANCMonitor aggregate.", buf, 0x1Cu);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
        }
        return (*(uint64_t (**)(void, void))(**(void **)(v2 + 24) + 240))(*(void *)(v2 + 24), 0);
      }
    }
    else
    {
      uint64_t v8 = *(void *)(result + 8);
      uint64_t v7 = *(void *)(result + 16);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
      }
      int v9 = *(_DWORD *)(result + 36);
      sub_54694();
      uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 56, 8);
      *(_DWORD *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = v8;
      *(void *)(v10 + 32) = v7;
      *(_DWORD *)(v10 + 40) = v9;
      *(void *)uint64_t v10 = off_626BA8;
      *(void *)(v10 + 8) = 0;
      return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v10);
    }
  }
  return result;
}

void sub_1DF7F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

caulk::concurrent::message **sub_1DF818(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_1DF860((uint64_t)a1);
  return sub_1E0260(&v2);
}

void sub_1DF84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1E0260((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void sub_1DF860(uint64_t a1)
{
  AudioObjectID v2 = *(_DWORD *)(a1 + 40);
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x676C6F62676F696ELL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  uint64_t v3 = sub_32A48(13);
  if (*(unsigned char *)(v3 + 8))
  {
    char v4 = *(NSObject **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        v60.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v60.__cv_.__opaque = inAddress.mElement;
        sub_16C9C4((uint64_t)&v61, (unsigned int *)&v60);
        uint64_t v5 = v61.__m_.__opaque[15] >= 0 ? &v61 : (std::mutex *)v61.__m_.__sig;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
        __int16 v46 = 1024;
        int v47 = 166;
        __int16 v48 = 2080;
        __int16 v49 = (const char *)v5;
        __int16 v50 = 1024;
        LODWORD(v51) = v2;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", buf, 0x22u);
        if (v61.__m_.__opaque[15] < 0) {
          operator delete((void *)v61.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v41 = v2;
  AudioObjectPropertyAddress v42 = inAddress;
  int v43 = 0;
  uint64_t v44 = 0;
  if (sub_1E03C4((uint64_t)&v41))
  {
    memset(v61.__m_.__opaque, 0, sizeof(v61.__m_.__opaque));
    v61.__m_.__uint64_t sig = 850045863;
    memset(v60.__cv_.__opaque, 0, sizeof(v60.__cv_.__opaque));
    v60.__cv_.__uint64_t sig = 1018212795;
    char v40 = 0;
    sub_662FC(inClientData, v2, &inAddress, (uint64_t)&v60, (uint64_t)&v61, (uint64_t)&v40);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v8.__d_.__rep_) / -1000)
    {
      unint64_t v7 = sub_1E03C4((uint64_t)&v41);
      if (HIDWORD(v7)) {
        goto LABEL_60;
      }
      if (!v7)
      {
        uint64_t v23 = sub_32A48(13);
        if (*(unsigned char *)(v23 + 8))
        {
          char v24 = *(NSObject **)v23;
          if (*(void *)v23)
          {
            if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
            {
              AudioObjectPropertyAddress v36 = inAddress;
              sub_16C9C4((uint64_t)&__lk, &v36.mSelector);
              os_log_t v25 = v38 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
              __int16 v46 = 1024;
              int v47 = 288;
              __int16 v48 = 2080;
              __int16 v49 = (const char *)v25;
              __int16 v50 = 1024;
              LODWORD(v51) = v2;
              _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", buf, 0x22u);
              if (v38 < 0) {
                operator delete(__lk.__m_);
              }
            }
          }
        }
        sub_6651C((uint64_t)inClientData);
        std::condition_variable::~condition_variable(&v60);
        std::mutex::~mutex(&v61);
        goto LABEL_64;
      }
      if (i <= 0) {
        break;
      }
      v8.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v9 = sub_32A48(13);
      if (*(unsigned char *)(v9 + 8))
      {
        uint64_t v10 = *(NSObject **)v9;
        if (*(void *)v9)
        {
          if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
            __int16 v46 = 1024;
            int v47 = 257;
            __int16 v48 = 2080;
            __int16 v49 = "with timeout";
            __int16 v50 = 1024;
            LODWORD(v51) = v2;
            _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)AudioObjectPropertyAddress buf = &qword_64CC40;
      buf[8] = 0;
      buf[8] = sub_1D4024();
      __lk.__m_ = &v61;
      __lk.__owns_ = 1;
      std::mutex::lock(&v61);
      v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v40)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = v11.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v12 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_19;
          }
          v13.__d_.__rep_ = v12 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v13.__d_.__rep_ >= 1) {
            break;
          }
LABEL_37:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v12 || v40) {
            goto LABEL_19;
          }
        }
        std::chrono::steady_clock::now();
        v14.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v14.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0;
          goto LABEL_33;
        }
        if (v14.__d_.__rep_ < 1)
        {
          if ((unint64_t)v14.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_32;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v14.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_33;
          }
LABEL_32:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15 = 1000 * v14.__d_.__rep_;
LABEL_33:
          if (v15 > (v13.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v16.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_36:
            std::condition_variable::__do_timed_wait(&v60, &__lk, v16);
            std::chrono::steady_clock::now();
            goto LABEL_37;
          }
        }
        v16.__d_.__rep_ = v15 + v13.__d_.__rep_;
        goto LABEL_36;
      }
LABEL_19:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)buf);
    }
    uint64_t v26 = (os_log_t *)sub_32A48(13);
    int v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      AudioObjectPropertyAddress v36 = inAddress;
      sub_16C9C4((uint64_t)&__lk, &v36.mSelector);
      os_log_t v28 = v38 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316930;
      *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
      __int16 v46 = 1024;
      int v47 = 248;
      __int16 v48 = 2080;
      __int16 v49 = "updated";
      __int16 v50 = 2080;
      __int16 v51 = v28;
      __int16 v52 = 2080;
      __int16 v53 = "updated";
      __int16 v54 = 1024;
      int v55 = 0;
      __int16 v56 = 1024;
      int v57 = 0;
      __int16 v58 = 1024;
      AudioObjectID v59 = v2;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", buf, 0x42u);
      if (v38 < 0) {
        operator delete(__lk.__m_);
      }
    }
LABEL_60:
    sub_6651C((uint64_t)inClientData);
    std::condition_variable::~condition_variable(&v60);
    std::mutex::~mutex(&v61);
    unsigned int v29 = (os_log_t *)sub_32A48(25);
    os_log_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "EnableANCMonitorIODelegate.cpp";
      __int16 v46 = 1024;
      int v47 = 92;
      __int16 v19 = "%25s:%-5d Timed out waiting for kAudioDevicePropertyDeviceIsRunning property on monitored aggregate device.";
      int v20 = v30;
      os_log_type_t v21 = OS_LOG_TYPE_DEFAULT;
      uint32_t v22 = 18;
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v17 = sub_32A48(13);
    if (*(unsigned char *)(v17 + 8))
    {
      os_log_t v18 = *(os_log_t *)v17;
      if (*(void *)v17)
      {
        if (os_log_type_enabled(*(os_log_t *)v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "HALPropertySynchronizer.h";
          __int16 v46 = 1024;
          int v47 = 219;
          __int16 v48 = 1024;
          LODWORD(v49) = v2;
          __int16 v19 = "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitiv"
                "e for a notification on id %u.";
          int v20 = v18;
          os_log_type_t v21 = OS_LOG_TYPE_DEBUG;
          uint32_t v22 = 24;
LABEL_63:
          _os_log_impl(&def_1E50E8, v20, v21, v19, buf, v22);
        }
      }
    }
  }
LABEL_64:
  os_log_t v31 = *(std::__shared_weak_count **)(a1 + 32);
  if (v31)
  {
    __int16 v32 = std::__shared_weak_count::lock(v31);
    if (v32)
    {
      uint64_t v33 = v32;
      uint64_t v34 = *(void *)(a1 + 24);
      if (v34) {
        sub_1DF510(v34, 1);
      }
      sub_4636C(v33);
    }
  }
}

void sub_1DFF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,long long buf,long long a32,__int16 a33,__int16 a34,int a35,int a36)
{
  if (a2)
  {
    sub_6651C((uint64_t)&a21);
    std::condition_variable::~condition_variable((std::condition_variable *)(v36 - 216));
    std::mutex::~mutex((std::mutex *)(v36 - 168));
    if (a2 == 3)
    {
      os_log_t v39 = __cxa_begin_catch(exception_object);
      char v40 = (os_log_t *)sub_32A48(13);
      AudioObjectID v41 = *v40;
      if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        int v42 = v39[2];
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 429;
        WORD1(a32) = 1024;
        DWORD1(a32) = v42;
        WORD4(a32) = 2080;
        *(void *)((char *)&a32 + 10) = "";
        a34 = 1024;
        a35 = 93;
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).", (uint8_t *)&buf, 0x28u);
      }
    }
    else
    {
      int v43 = __cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        uint64_t v44 = v43;
        AudioObjectPropertyAddress v45 = (os_log_t *)sub_32A48(13);
        __int16 v46 = *v45;
        if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
        {
          uint64_t v47 = (*(uint64_t (**)(void *))(*(void *)v44 + 16))(v44);
          LODWORD(buf) = 136316162;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 430;
          WORD1(a32) = 2080;
          *(void *)((char *)&a32 + 4) = v47;
          WORD6(a32) = 2080;
          *(void *)((char *)&a32 + 14) = "";
          HIWORD(a35) = 1024;
          a36 = 93;
          _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).", (uint8_t *)&buf, 0x2Cu);
        }
      }
      else
      {
        __int16 v48 = (os_log_t *)sub_32A48(13);
        __int16 v49 = *v48;
        if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315906;
          *(void *)((char *)&buf + 4) = "StandardUtilities.h";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 431;
          WORD1(a32) = 2080;
          *(void *)((char *)&a32 + 4) = "";
          WORD6(a32) = 1024;
          *(_DWORD *)((char *)&a32 + 14) = 93;
          _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).", (uint8_t *)&buf, 0x22u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1DFEF4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E0224()
{
}

void sub_1E0230()
{
}

void sub_1E023C()
{
}

void sub_1E0248(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0x1DFF78);
}

void sub_1E0258()
{
}

caulk::concurrent::message **sub_1E0260(caulk::concurrent::message **a1)
{
  AudioObjectID v2 = *a1;
  *(void *)AudioObjectID v2 = off_626BD0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24))(caulk::alloc::realtime_safe_resource, v2, 56, 8);
  return a1;
}

void sub_1E02F8(caulk::concurrent::message *this)
{
  *(void *)this = off_626BD0;
  AudioObjectID v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_1E0368(caulk::concurrent::message *this)
{
  *(void *)this = off_626BD0;
  AudioObjectID v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

unint64_t sub_1E03C4(uint64_t a1)
{
  AudioObjectID v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_1E0594((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    unint64_t v7 = (os_log_t *)sub_32A48(13);
    std::chrono::system_clock::time_point v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        std::chrono::steady_clock::time_point v11 = v20;
        if (v9 < 0) {
          std::chrono::steady_clock::time_point v11 = v10;
        }
        if (v19 >= 0) {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = __p;
        }
        else {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        os_log_t v28 = v11;
        __int16 v29 = 2080;
        os_log_t v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_1E0570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1E0594(AudioObjectID *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (AudioObjectHasProperty(*a1, a2))
  {
    ioDataSize[0] = 2003329396;
    *(void *)&ioDataSize[1] = 0;
    unsigned int PropertyData = 2003329396;
    uint64_t v9 = 0;
    ioDataSize[0] = sub_26E94(*a1, a2, a3, a4);
    if (ioDataSize[0])
    {
      outData[0] = 0;
      unsigned int PropertyData = AudioObjectGetPropertyData(*a1, a2, a3, a4, ioDataSize, outData);
      if (PropertyData) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = outData[0];
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    unsigned int PropertyData = 2003332927;
  }
  return PropertyData | (unint64_t)(v9 << 32);
}

void sub_1E067C(caulk::concurrent::message *this)
{
  *(void *)this = off_626BD0;
  AudioObjectID v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_1E06EC(caulk::concurrent::message *this)
{
  *(void *)this = off_626BD0;
  AudioObjectID v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

uint64_t sub_1E0748(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    uint64_t v1 = result;
    int v2 = *(_DWORD *)(result + 32);
    UInt32 v3 = (os_log_t *)sub_32A48(25);
    unint64_t v4 = *v3;
    if (v2)
    {
      if (v4 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(__p, 0x70726563u);
        if (v8 >= 0) {
          char v5 = __p;
        }
        else {
          char v5 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v10 = "EnableANCMonitorIODelegate.cpp";
        __int16 v11 = 1024;
        int v12 = 71;
        __int16 v13 = 2080;
        unint64_t v14 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d HandleIODidStart for port %s. Starting ANCMonitor aggregate.", buf, 0x1Cu);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
      return (*(uint64_t (**)(void, void))(**(void **)(v1 + 24) + 240))(*(void *)(v1 + 24), 0);
    }
    else
    {
      if (v4 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(__p, 0x7073706Bu);
        char v6 = v8 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        uint64_t v10 = "EnableANCMonitorIODelegate.cpp";
        __int16 v11 = 1024;
        int v12 = 63;
        __int16 v13 = 2080;
        unint64_t v14 = v6;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d HandleIODidStart for port %s. Stopping ANCMonitor aggregate.", buf, 0x1Cu);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
      return (*(uint64_t (**)(void, void))(**(void **)(v1 + 24) + 256))(*(void *)(v1 + 24), 0);
    }
  }
  return result;
}

void sub_1E0968(uint64_t a1)
{
  sub_1E09A0(a1);

  operator delete();
}

uint64_t sub_1E09A0(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    int v2 = (os_log_t *)sub_32A48(25);
    UInt32 v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      char v8 = "EnableANCMonitorIODelegate.cpp";
      __int16 v9 = 1024;
      int v10 = 51;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d AggregateDevice_ANCMonitor should have been destroyed in EnableANCMonitorIODelegate::Teardown().This may lead to unexpected ANC behaviour due to asynchronous device destruction.", (uint8_t *)&v7, 0x12u);
    }
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  char v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_1E0AB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_1E0AC0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_626B58;
  operator new();
}

void sub_1E23DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,void *a37,int a38,__int16 a39,char a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49)
{
  __cxa_free_exception(v50);
  sub_463E0(a37);
  uint64_t v52 = *(void *)(v49 + 24);
  *(void *)(v49 + 24) = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  __int16 v53 = *(std::__shared_weak_count **)(v49 + 16);
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  _Unwind_Resume(a1);
}

std::string *sub_1E26F0(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ Processing Info: ", 0x13uLL);
  memset(&v35, 0, sizeof(v35));
  std::string::append(&v35, "[ ", 2uLL);
  sub_383858(&__p, a2 + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(&v35, "; ", 2uLL);
  sub_3AEF78(&__p, (void *)(a2 + 24));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v6 = &__p;
  }
  else {
    char v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a2 + 56)) {
    sub_3AEF78(&__p, (void *)(a2 + 40));
  }
  else {
    sub_21C8C(&__p, "");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v8 = &__p;
  }
  else {
    char v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(&v35, "; Default Output Port: ", 0x17uLL);
  sub_136B74(&__p, a2 + 64);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v10 = &__p;
  }
  else {
    int v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(&v35, "; Diagnostics Context: ", 0x17uLL);
  sub_21C8C(&v36, "{ ");
  int v12 = (_DWORD *)(a2 + 124);
  sub_4D60(&__p, (unsigned int *)(a2 + 124));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v13 = &__p;
  }
  else {
    __int16 v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v36, (const std::string::value_type *)v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(&v36, ", ", 2uLL);
  int v15 = sub_21EF80((_DWORD *)(a2 + 120));
  if (v15)
  {
    std::string::append(&v36, "call-like: 1, ", 0xEuLL);
    std::to_string(&v37, *(unsigned __int8 *)(a2 + 156));
    uint64_t v16 = std::string::insert(&v37, 0, "SharePlay active: ", 0x12uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      os_log_t v18 = &__p;
    }
    else {
      os_log_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&v36, (const std::string::value_type *)v18, v19);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
  int v20 = *(_DWORD *)(a2 + 136);
  if (v20 == 1986556788 || v20 == 1987211117 || v20 == 1987208039)
  {
    if (v15) {
      std::string::append(&v36, ", ", 2uLL);
    }
    std::string::append(&v36, "speech detection: 1", 0x13uLL);
    if (*v12 != 1986224492) {
      goto LABEL_63;
    }
LABEL_61:
    std::string::append(&v36, ", ", 2uLL);
LABEL_62:
    std::string::append(&v36, "continuity: 1", 0xDuLL);
LABEL_63:
    int v15 = 1;
    goto LABEL_64;
  }
  if (*v12 == 1986224492)
  {
    if (!v15) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
LABEL_64:
  if (*(unsigned char *)(a2 + 120))
  {
    if (v15) {
      std::string::append(&v36, ", ", 2uLL);
    }
    std::string::append(&v36, "ANC: 1", 6uLL);
    uint64_t v21 = *(void *)(a2 + 148);
    if ((v21 & 0xFF00000000) == 0) {
      goto LABEL_87;
    }
    goto LABEL_71;
  }
  uint64_t v21 = *(void *)(a2 + 148);
  if ((v21 & 0xFF00000000) != 0)
  {
    if ((v15 & 1) == 0)
    {
LABEL_72:
      sub_2417C(&v37, v21);
      uint32_t v22 = std::string::insert(&v37, 0, "isolatedUseCaseID: ", 0x13uLL);
      long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v24 = &__p;
      }
      else {
        int v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v36, (const std::string::value_type *)v24, v25);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      goto LABEL_87;
    }
LABEL_71:
    std::string::append(&v36, ", ", 2uLL);
    goto LABEL_72;
  }
  if ((v15 & 1) == 0) {
    std::string::append(&v36, "empty", 5uLL);
  }
LABEL_87:
  std::string::append(&v36, " }", 2uLL);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v26 = &v36;
  }
  else {
    int v26 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v27 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v27 = v36.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)v26, v27);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a2 + 200)) {
    std::operator+<char>();
  }
  else {
    sub_21C8C(&__p, "");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    os_log_t v28 = &__p;
  }
  else {
    os_log_t v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v35, (const std::string::value_type *)v28, v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(&v35, " ]", 2uLL);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    os_log_t v30 = &v35;
  }
  else {
    os_log_t v30 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = v35.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v30, v31);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; Route: ", 9uLL);
  sub_3825EC(&__p, *(unsigned int **)a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    AudioObjectID v32 = &__p;
  }
  else {
    AudioObjectID v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v33 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v32, v33);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_1E2CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1E2DE8(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ ", 2uLL);
  std::string::append(a1, "Reconfig Context: ", 0x12uLL);
  if (*(unsigned char *)(a2 + 212))
  {
    uint64_t v4 = *(unsigned int *)(a2 + 208);
    if (v4 > 4) {
      char v5 = "????";
    }
    else {
      char v5 = off_621228[v4];
    }
  }
  else
  {
    char v5 = "Unknown";
  }
  sub_21C8C(&__p, v5);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; Route Info: ", 0xEuLL);
  sub_1E26F0(&__p, a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v8 = &__p;
  }
  else {
    char v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_1E2F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1E2F64(uint64_t a1, int a2, long double a3, double a4, double a5)
{
  double v10 = cos(a3);
  switch(a2)
  {
    case 0:
      double v11 = __exp10(a5 * 0.05);
      uint64_t result = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      *(double *)(a1 + 16) = v11;
      return result;
    case 1:
      double v13 = __exp10(a5 * 0.05);
      double v14 = sin(a3) / (a4 + a4);
      double v15 = 1.0;
      double v16 = (1.0 - v10) * 0.5;
      double v17 = v16 + v16;
      double v18 = v14 + 1.0;
      double v19 = -2.0;
      goto LABEL_5;
    case 2:
      double v13 = __exp10(a5 * 0.05);
      double v14 = sin(a3) / (a4 + a4);
      double v15 = 1.0;
      double v16 = (v10 + 1.0) * 0.5;
      double v19 = -2.0;
      double v17 = v16 * -2.0;
      double v18 = v14 + 1.0;
LABEL_5:
      double v20 = v10 * v19;
      double v21 = v15 - v14;
      double v22 = v16;
      goto LABEL_18;
    case 3:
      double v13 = __exp10(a5 * 0.05);
      double v22 = sin(a3) / (a4 + a4);
      double v16 = -v22;
      double v18 = v22 + 1.0;
      double v20 = v10 * -2.0;
      double v21 = 1.0 - v22;
      double v17 = 0.0;
      goto LABEL_18;
    case 4:
      double v13 = __exp10(a5 * 0.05);
      long double v23 = sin(a3) / (a4 + a4);
      double v17 = v10 * -2.0;
      double v16 = 1.0;
      double v18 = v23 + 1.0;
      double v21 = 1.0 - v23;
      double v22 = 1.0;
      goto LABEL_17;
    case 5:
      double v13 = __exp10(a5 * 0.05);
      long double v24 = sin(a3) / (a4 + a4);
      double v16 = v24 + 1.0;
      double v17 = v10 * -2.0;
      double v22 = 1.0 - v24;
      double v21 = 1.0 - v24;
      double v20 = v10 * -2.0;
      double v18 = v24 + 1.0;
      goto LABEL_18;
    case 6:
      double v25 = __exp10(a5 * 0.5 * 0.05);
      double v26 = sin(a3) / (a4 / v25 + a4 / v25);
      double v27 = v25 * v26;
      goto LABEL_16;
    case 7:
      long double v28 = sin(a3) / (a4 + a4);
      double v29 = __exp10(a5 * 0.5 * 0.05);
      double v30 = sqrt(v29);
      double v13 = 1.0;
      double v31 = v28 * (v30 + v30);
      double v32 = v10 * (v29 + -1.0);
      double v33 = v10 * (v29 + 1.0);
      double v34 = v29 + 1.0 + v32;
      double v18 = v34 + v31;
      double v20 = (v29 + -1.0 + v33) * -2.0;
      double v21 = v34 - v31;
      double v35 = v29 + 1.0 - v32;
      double v22 = v29 * (v35 + v31);
      double v36 = v29 + v29;
      double v37 = v29 + -1.0 - v33;
      goto LABEL_12;
    case 8:
      long double v38 = sin(a3) / (a4 + a4);
      double v29 = __exp10(a5 * 0.5 * 0.05);
      double v39 = sqrt(v29);
      double v13 = 1.0;
      double v31 = v38 * (v39 + v39);
      double v40 = v10 * (v29 + -1.0);
      double v41 = v10 * (v29 + 1.0);
      double v42 = v29 + 1.0 - v40;
      double v18 = v42 + v31;
      double v20 = v29 + -1.0 - v41 + v29 + -1.0 - v41;
      double v21 = v42 - v31;
      double v35 = v29 + 1.0 + v40;
      double v22 = v29 * (v35 + v31);
      double v36 = v29 * -2.0;
      double v37 = v29 + -1.0 + v41;
LABEL_12:
      double v17 = v36 * v37;
      double v16 = v29 * (v35 - v31);
      goto LABEL_18;
    case 9:
      double v43 = a5 * 0.5;
      double v44 = __exp10(a5 * 0.5 * 0.25 * 0.05);
      double v45 = __exp10(v43 * 0.75 * 0.05);
      uint64_t result = 0;
      double v46 = (1.0 - v45 * v10 - sqrt((1.0 - v10 * v10) * -(v45 * v45) + (v45 + v45) * (1.0 - v10))) / (1.0 - v45);
      *(double *)(a1 + 16) = v44 * (v46 * -2.0 + 1.0 + v46 * v46);
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      __asm { FMOV            V1.2D, #-2.0 }
      _Q1.f64[1] = v46;
      *(float64x2_t *)a1 = vmulq_n_f64(_Q1, v46);
      return result;
    case 10:
      double v52 = __exp10(a5 * 0.05);
      long double v53 = tan(a3 / (a4 + a4));
      uint64_t result = 0;
      long double v54 = (1.0 - v53 * (4.0 / (v52 + 1.0))) * 0.5 / (v53 * (4.0 / (v52 + 1.0)) + 1.0);
      long double v55 = (v52 + -1.0 + v52 + -1.0) * ((0.5 - v54) * 0.5);
      long double v56 = v10 * (v54 + 0.5) * -2.0;
      long double v57 = v54 + v54;
      *(long double *)a1 = v56;
      *(long double *)(a1 + 8) = v57;
      *(long double *)(a1 + 16) = v55 + 1.0;
      *(long double *)(a1 + 24) = v56;
      double v58 = v57 - v55;
      goto LABEL_19;
    case 11:
      double v25 = __exp10(a5 * 0.5 * 0.05);
      double v26 = sin(a3) / (a4 + a4);
      double v27 = v26 * v25;
LABEL_16:
      double v59 = v26 / v25;
      double v13 = 1.0;
      double v18 = v59 + 1.0;
      double v17 = v10 * -2.0;
      double v21 = 1.0 - v59;
      double v22 = v27 + 1.0;
      double v16 = 1.0 - v27;
LABEL_17:
      double v20 = v17;
LABEL_18:
      uint64_t result = 0;
      double v60 = 1.0 / v18;
      *(double *)a1 = v20 * v60;
      *(double *)(a1 + 8) = v60 * v21;
      *(double *)(a1 + 16) = v13 * v60 * v22;
      *(double *)(a1 + 24) = v13 * v60 * v17;
      double v58 = v13 * v60 * v16;
LABEL_19:
      *(double *)(a1 + 32) = v58;
      break;
    default:
      uint64_t result = 4294967246;
      break;
  }
  return result;
}

double sub_1E3484(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 <= 5) {
    *(_DWORD *)a3 = *(_DWORD *)&aTrsnRsntmfsamf[4 * a2];
  }
  double result = NAN;
  *(void *)(a3 + 4) = -3587560918;
  return result;
}

uint64_t sub_1E34AC()
{
  return 6;
}

void sub_1E34B4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  int v7 = *a2;
  if (*a2 == 1936092532)
  {
    if (a5 != 40)
    {
      double v17 = (os_log_t *)sub_32A48(13);
      double v15 = *v17;
      if (!*v17 || !os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR)) {
        goto LABEL_31;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 754;
      double v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioStreamPropertyVirtualFormat\"";
      goto LABEL_30;
    }
    long long v9 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a6;
    *(_OWORD *)&buf[16] = v9;
    uint64_t v32 = *(void *)(a6 + 32);
    if (sub_1E3B0C(a1, (uint64_t)buf))
    {
      sub_1E3C0C((uint64_t *)(a1 + 80), (long long *)buf, *(double *)(a1 + 16));
      sub_1E3DAC(a1, (long long *)buf);
      return;
    }
    double v18 = (os_log_t *)sub_32A48(13);
    double v19 = *v18;
    if (!*v18 || !os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    int v27 = 136315394;
    long double v28 = "HP_FormatList.cpp";
    __int16 v29 = 1024;
    int v30 = 760;
    double v20 = "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): \"given format is not supported for kAudioStreamProp"
          "ertyVirtualFormat\"";
LABEL_35:
    double v25 = (uint8_t *)&v27;
LABEL_39:
    _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, v20, v25, 0x12u);
LABEL_40:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    int v23 = 560226676;
LABEL_41:
    exception[2] = v23;
  }
  if (v7 != 1885762592)
  {
    if (v7 != 1853059700) {
      return;
    }
    if (a5 == 8)
    {
      double v8 = *(double *)a6;
      if (*(double *)a6 == 0.0 || sub_1E3934(a1, *(double *)a6))
      {
        sub_1E39DC(a1, v8);
        return;
      }
      double v26 = (os_log_t *)sub_32A48(13);
      double v19 = *v26;
      if (!*v26 || !os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR)) {
        goto LABEL_40;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 746;
      double v20 = "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): \"given sample rate is not supported for kAudioDev"
            "icePropertyNominalSampleRate\"";
      double v25 = buf;
      goto LABEL_39;
    }
    double v14 = (os_log_t *)sub_32A48(13);
    double v15 = *v14;
    if (!*v14 || !os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
LABEL_31:
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      int v23 = 561211770;
      goto LABEL_41;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 740;
    double v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyNominalSampleRate\"";
LABEL_30:
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
    goto LABEL_31;
  }
  if (a5 != 40)
  {
    double v21 = (os_log_t *)sub_32A48(13);
    double v15 = *v21;
    if (!*v21 || !os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 770;
    double v16 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioStreamPropertyPhysicalFormat\"";
    goto LABEL_30;
  }
  long long v10 = *(_OWORD *)(a6 + 16);
  *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)a6;
  *(_OWORD *)&buf[16] = v10;
  uint64_t v32 = *(void *)(a6 + 32);
  if ((sub_1E3B0C(a1, (uint64_t)buf) & 1) == 0)
  {
    long double v24 = (os_log_t *)sub_32A48(13);
    double v19 = *v24;
    if (!*v24 || !os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    int v27 = 136315394;
    long double v28 = "HP_FormatList.cpp";
    __int16 v29 = 1024;
    int v30 = 776;
    double v20 = "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): \"given format is not supported for kAudioStreamProp"
          "ertyPhysicalFormat\"";
    goto LABEL_35;
  }
  double v12 = *(double *)(a1 + 16);
  uint64_t v11 = a1 + 16;
  sub_1E3C0C((uint64_t *)(v11 + 40), (long long *)buf, v12);
  if ((*(unsigned int (**)(void, unsigned char *))(**(void **)(v11 - 8) + 176))(*(void *)(v11 - 8), buf))
  {
    long long v13 = *(_OWORD *)&buf[16];
    *(_OWORD *)uint64_t v11 = *(_OWORD *)buf;
    *(_OWORD *)(v11 + 16) = v13;
    *(void *)(v11 + 32) = v32;
  }
}

BOOL sub_1E3934(uint64_t a1, double a2)
{
  char v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  sub_1E4174(a1, (uint64_t)&v6);
  if (v6 == v7)
  {
    BOOL v4 = 0;
    if (!v6) {
      return v4;
    }
    goto LABEL_9;
  }
  UInt32 v3 = v6;
  do
  {
    BOOL v4 = v3[1] >= a2 && *v3 <= a2;
    if (v4) {
      break;
    }
    v3 += 2 * (v4 ^ 1);
  }
  while (v3 != v7);
  if (v6) {
LABEL_9:
  }
    operator delete(v6);
  return v4;
}

void sub_1E39C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1E39DC(uint64_t a1, double a2)
{
  uint64_t result = sub_1E3934(a1, a2);
  if (result)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    char v6 = (double *)(a1 + 16);
    long long v7 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)long long v13 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)&unsigned char v13[16] = v7;
    *(void *)&v13[32] = *(void *)(a1 + 48);
    *(double *)long long v13 = a2;
    if (!sub_1E3FA0(v5, *(void *)(a1 + 64), (long long *)v13) && *(_DWORD *)&v13[8] == 1819304813)
    {
      long long v9 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)long long v13 = *(_OWORD *)v6;
      *(_OWORD *)&unsigned char v13[16] = v9;
      uint64_t v10 = *(void *)(a1 + 48);
      *(void *)&v13[24] = 0;
      *(void *)&v13[32] = v10;
      *(double *)long long v13 = a2;
      *(_DWORD *)&unsigned char v13[16] = 0;
      sub_1E3C0C((uint64_t *)(a1 + 56), (long long *)v13, *v6);
      v8.n128_u64[0] = *(void *)v13;
      if (*(double *)v13 != a2)
      {
        long long v11 = *(_OWORD *)(a1 + 32);
        *(_OWORD *)long long v13 = *(_OWORD *)v6;
        *(_OWORD *)&unsigned char v13[16] = v11;
        *(_DWORD *)&v13[36] = HIDWORD(*(void *)(a1 + 48));
        *(double *)long long v13 = a2;
        memset(&v13[12], 0, 24);
        sub_1E3C0C((uint64_t *)(a1 + 56), (long long *)v13, *v6);
      }
    }
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, __n128))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), v13, v8);
    if (result)
    {
      long long v12 = *(_OWORD *)&v13[16];
      *(_OWORD *)char v6 = *(_OWORD *)v13;
      *(_OWORD *)(a1 + 32) = v12;
      *(void *)(a1 + 48) = *(void *)&v13[32];
    }
  }
  return result;
}

uint64_t sub_1E3B0C(uint64_t a1, uint64_t a2)
{
  if (*(double *)a2 == 0.0 || (uint64_t result = sub_1E3934(a1, *(double *)a2), result))
  {
    int v5 = *(_DWORD *)(a2 + 8);
    if (!v5
      || (uint64_t v12 = 0,
          long long v10 = 0u,
          long long v11 = 0u,
          DWORD2(v10) = v5,
          uint64_t result = sub_1E3FA0(*(void *)(a1 + 56), *(void *)(a1 + 64), &v10),
          result))
    {
      int v6 = *(_DWORD *)(a2 + 28);
      if (v6)
      {
        uint64_t v12 = 0;
        long long v10 = 0u;
        long long v11 = 0u;
        HIDWORD(v11) = v6;
        uint64_t result = sub_1E3FA0(*(void *)(a1 + 56), *(void *)(a1 + 64), &v10);
        if (!result) {
          return result;
        }
      }
      else
      {
        uint64_t result = 1;
      }
      if (v5 == 1819304813)
      {
        uint64_t v12 = 0;
        long long v10 = 0u;
        long long v11 = 0u;
        long long v7 = *(_OWORD *)(a2 + 16);
        v8[0] = *(_OWORD *)a2;
        v8[1] = v7;
        uint64_t v9 = *(void *)(a2 + 32);
        DWORD2(v10) = DWORD2(v8[0]);
        HIDWORD(v10) = sub_A6D24(v8, 0);
        LODWORD(v12) = v9;
        return sub_1E3FA0(*(void *)(a1 + 56), *(void *)(a1 + 64), &v10);
      }
    }
  }
  return result;
}

void sub_1E3C0C(uint64_t *a1, long long *a2, double a3)
{
  long long v5 = a2[1];
  long long v35 = *a2;
  long long v36 = v5;
  uint64_t v37 = *((void *)a2 + 4);
  *(void *)&long long v35 = 0;
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if (*a1 == v7)
  {
LABEL_29:
    long long v24 = *(_OWORD *)v6;
    long long v25 = *(_OWORD *)(v6 + 16);
    *((void *)a2 + 4) = *(void *)(v6 + 32);
    *a2 = v24;
    a2[1] = v25;
    double v26 = *(double **)(*a1 + 40);
  }
  else
  {
    double v8 = *(double *)a2;
    int v9 = DWORD2(v35);
    int v10 = v36;
    int v11 = DWORD1(v36);
    int v12 = DWORD2(v36);
    int v13 = HIDWORD(v36);
    uint64_t v14 = *a1;
    int v15 = v37;
    while (1)
    {
      if (!v9 || ((int v16 = *(_DWORD *)(v14 + 8)) != 0 ? (v17 = v9 == v16) : (v17 = 1), v17))
      {
        if (!v10 || ((int v18 = *(_DWORD *)(v14 + 16)) != 0 ? (v19 = v10 == v18) : (v19 = 1), v19))
        {
          if ((!v11 || (int v20 = *(_DWORD *)(v14 + 20)) == 0 || v11 == v20)
            && (!v12 || (int v21 = *(_DWORD *)(v14 + 24)) == 0 || v12 == v21)
            && (!v13 || (int v22 = *(_DWORD *)(v14 + 28)) == 0 || v13 == v22)
            && (!v15 || (int v23 = *(_DWORD *)(v14 + 32)) == 0 || v15 == v23))
          {
            if (sub_EBDC((uint64_t)&v35, v14)) {
              break;
            }
          }
        }
      }
      v14 += 64;
      if (v14 == v7) {
        goto LABEL_29;
      }
    }
    if (v8 == 0.0) {
      double v27 = a3;
    }
    else {
      double v27 = v8;
    }
    for (uint64_t i = *(double **)(v14 + 40); i != *(double **)(v14 + 48); i += 2)
    {
      if (*i <= v27 && i[1] >= v27)
      {
        long long v32 = *(_OWORD *)v14;
        long long v33 = *(_OWORD *)(v14 + 16);
        *((void *)a2 + 4) = *(void *)(v14 + 32);
        *a2 = v32;
        a2[1] = v33;
        goto LABEL_31;
      }
    }
    long long v30 = *(_OWORD *)v14;
    long long v31 = *(_OWORD *)(v14 + 16);
    *((void *)a2 + 4) = *(void *)(v14 + 32);
    *a2 = v30;
    a2[1] = v31;
    double v26 = *(double **)(v14 + 40);
  }
  double v27 = sub_E1D68(*v26, v26[1]);
LABEL_31:
  *(double *)a2 = v27;
}

double sub_1E3DAC(uint64_t a1, long long *a2)
{
  long long v3 = a2[1];
  long long v9 = *a2;
  long long v10 = v3;
  uint64_t v11 = *((void *)a2 + 4);
  if (DWORD2(v9) == 1819304813 && (~HIDWORD(v9) & 9) == 0)
  {
    LODWORD(v11) = 32;
    *(_OWORD *)AudioObjectPropertyAddress buf = v9;
    *(_DWORD *)&unsigned char buf[28] = HIDWORD(v10);
    HIDWORD(v13) = HIDWORD(v11);
    *(_OWORD *)&unsigned char buf[12] = xmmword_4E7990;
    LODWORD(v13) = 0;
    sub_1E3C0C((uint64_t *)(a1 + 56), (long long *)buf, *(double *)(a1 + 16));
    if (*(_DWORD *)&buf[8] != 1819304813 || *(double *)buf != *(double *)&v9 || *(_DWORD *)&buf[28] != HIDWORD(v10))
    {
      uint64_t v6 = (os_log_t *)sub_32A48(13);
      uint64_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 242;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"no reasonable format could be found\"", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = 1852797029;
    }
    long long v9 = *(_OWORD *)buf;
    long long v10 = *(_OWORD *)&buf[16];
    uint64_t v11 = v13;
  }
  if ((*(unsigned int (**)(void, long long *))(**(void **)(a1 + 8) + 176))(*(void *)(a1 + 8), &v9))
  {
    double result = *(double *)&v9;
    long long v5 = v10;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = v5;
    *(void *)(a1 + 48) = v11;
  }
  return result;
}

BOOL sub_1E3FA0(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = a3[1];
  long long __s1 = *a3;
  long long v31 = v5;
  uint64_t v32 = *((void *)a3 + 4);
  *(void *)&long long __s1 = 0;
  double v6 = *(double *)a3;
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  if (memcmp(&__s1, v28, 0x24uLL))
  {
    if (a1 == a2) {
      return 0;
    }
    int v7 = DWORD2(__s1);
    int v8 = v31;
    int v9 = DWORD1(v31);
    int v10 = DWORD2(v31);
    int v11 = HIDWORD(v31);
    int v12 = v32;
    while (1)
    {
      if (!v7 || ((int v13 = *(_DWORD *)(a1 + 8)) != 0 ? (v14 = v7 == v13) : (v14 = 1), v14))
      {
        if (!v8 || ((int v15 = *(_DWORD *)(a1 + 16)) != 0 ? (v16 = v8 == v15) : (v16 = 1), v16))
        {
          if ((!v9 || (int v17 = *(_DWORD *)(a1 + 20)) == 0 || v9 == v17)
            && (!v10 || (int v18 = *(_DWORD *)(a1 + 24)) == 0 || v10 == v18)
            && (!v11 || (int v19 = *(_DWORD *)(a1 + 28)) == 0 || v11 == v19)
            && (!v12 || (int v20 = *(_DWORD *)(a1 + 32)) == 0 || v12 == v20))
          {
            if (sub_EBDC((uint64_t)&__s1, a1)) {
              break;
            }
          }
        }
      }
      a1 += 64;
      if (a1 == a2) {
        return 0;
      }
    }
    if (v6 != 0.0)
    {
      long long v25 = *(double **)(a1 + 40);
      double v26 = *(double **)(a1 + 48);
      do
      {
        BOOL result = v25 != v26;
        if (v25 == v26) {
          break;
        }
        BOOL v27 = *v25 > v6;
        if (v25[1] < v6) {
          BOOL v27 = 1;
        }
        v25 += 2 * v27;
        BOOL result = 1;
      }
      while (v27);
      return result;
    }
    return 1;
  }
  if (v6 == 0.0) {
    return 1;
  }
  if (a1 == a2)
  {
    char v22 = 0;
  }
  else
  {
    char v22 = 0;
    do
    {
      int v23 = *(double **)(a1 + 40);
      while (v23 != *(double **)(a1 + 48))
      {
        BOOL v24 = *v23 > v6;
        if (v23[1] < v6) {
          BOOL v24 = 1;
        }
        v23 += 2 * v24;
        if (!v24)
        {
          char v22 = 1;
          break;
        }
      }
      a1 += 64;
    }
    while (a1 != a2);
  }
  return v22 & 1;
}

void sub_1E4174(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)a2;
  int v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  if (v2 != v3)
  {
    int v6 = 0;
    do
    {
      v6 += (*(void *)(v2 + 48) - *(void *)(v2 + 40)) >> 4;
      v2 += 64;
    }
    while (v2 != v3);
    if (v6)
    {
      int v7 = 0;
      for (unsigned int i = 0; i != v6; ++i)
      {
        sub_1E4290(*(long long **)(a1 + 56), *(long long **)(a1 + 64), i, (uint64_t)&v9);
        int v12 = v7;
        sub_1E4324(&v10, (double **)a2, &v11);
        int v7 = (char *)v11;
        sub_1E47D0((void *)a2, (char *)v11, v12, (v12 - (char *)v11) >> 4);
      }
      if (v7)
      {
        operator delete(v7);
      }
    }
  }
}

void sub_1E4278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_1E4290(long long *result, long long *a2, unsigned int a3, uint64_t a4)
{
  if (result != a2)
  {
    unsigned int v4 = 0;
    while (1)
    {
      unsigned int v5 = v4 + ((*((void *)result + 6) - *((void *)result + 5)) >> 4);
      BOOL v6 = a3 >= v4;
      unint64_t v7 = a3 - v4;
      if (v6 && v5 > a3) {
        break;
      }
      result += 4;
      unsigned int v4 = v5;
      if (result == a2) {
        return result;
      }
    }
    long long v8 = *result;
    long long v9 = result[1];
    *(void *)(a4 + 32) = *((void *)result + 4);
    *(_OWORD *)a4 = v8;
    *(_OWORD *)(a4 + 16) = v9;
    uint64_t v10 = *((void *)result + 5);
    if (v7 >= (*((void *)result + 6) - v10) >> 4) {
      sub_131250();
    }
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(v10 + 16 * v7);
    double v11 = *(double *)(a4 + 40);
    if (v11 == *(double *)(a4 + 48)) {
      *(double *)a4 = v11;
    }
  }
  return result;
}

void sub_1E4324(double *a1, double **a2, double **a3)
{
  BOOL v6 = *a2;
  unsigned int v5 = a2[1];
  if (*a2 == v5)
  {
    long long v9 = a3[1];
LABEL_24:
    double v23 = *a1;
    uint64_t v22 = *((void *)a1 + 1);
    unint64_t v24 = (unint64_t)a3[2];
    if ((unint64_t)v9 < v24)
    {
      *long long v9 = v23;
      *((void *)v9 + 1) = v22;
      long long v25 = v9 + 2;
LABEL_72:
      a3[1] = v25;
      return;
    }
    uint64_t v30 = ((char *)v9 - (char *)*a3) >> 4;
    if (!((unint64_t)(v30 + 1) >> 60))
    {
      uint64_t v31 = v24 - (void)*a3;
      uint64_t v32 = v31 >> 3;
      if (v31 >> 3 <= (unint64_t)(v30 + 1)) {
        uint64_t v32 = v30 + 1;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v33 = v32;
      }
      if (v33) {
        unint64_t v33 = (unint64_t)sub_10724(v33);
      }
      else {
        uint64_t v34 = 0;
      }
      double v52 = (void *)(v33 + 16 * v30);
      unint64_t v53 = v33 + 16 * v34;
      *(double *)double v52 = v23;
      v52[1] = v22;
      long long v25 = (double *)(v52 + 2);
      long double v55 = *a3;
      long double v54 = a3[1];
      if (v54 != *a3)
      {
        do
        {
          *((_OWORD *)v52 - 1) = *((_OWORD *)v54 - 1);
          v52 -= 2;
          v54 -= 2;
        }
        while (v54 != v55);
        long double v54 = *a3;
      }
      *a3 = (double *)v52;
      a3[1] = v25;
      a3[2] = (double *)v53;
      if (v54) {
        operator delete(v54);
      }
      goto LABEL_72;
    }
LABEL_105:
    sub_60548();
  }
  double v8 = *a1;
  if (v6[1] < *a1)
  {
    long long v9 = a3[1];
    while (1)
    {
      unint64_t v10 = (unint64_t)a3[2];
      if ((unint64_t)v9 >= v10)
      {
        uint64_t v11 = ((char *)v9 - (char *)*a3) >> 4;
        if ((unint64_t)(v11 + 1) >> 60) {
          goto LABEL_105;
        }
        uint64_t v12 = v10 - (void)*a3;
        uint64_t v13 = v12 >> 3;
        if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
          uint64_t v13 = v11 + 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)sub_10724(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        BOOL v16 = (double *)(v14 + 16 * v11);
        *(_OWORD *)BOOL v16 = *(_OWORD *)v6;
        int v18 = *a3;
        int v17 = a3[1];
        int v19 = v16;
        if (v17 != *a3)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 2;
            v17 -= 2;
          }
          while (v17 != v18);
          int v17 = *a3;
        }
        long long v9 = v16 + 2;
        *a3 = v19;
        a3[1] = v16 + 2;
        a3[2] = (double *)(v14 + 16 * v15);
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_OWORD *)long long v9 = *(_OWORD *)v6;
        v9 += 2;
      }
      a3[1] = v9;
      int v20 = v6 + 2;
      unsigned int v5 = a2[1];
      if (v6 + 2 == v5) {
        goto LABEL_24;
      }
      double v21 = v6[3];
      double v8 = *a1;
      v6 += 2;
      if (v21 >= *a1) {
        goto LABEL_27;
      }
    }
  }
  int v20 = *a2;
LABEL_27:
  double v26 = a1[1];
  if (*v20 <= v26)
  {
    long long v35 = v20 + 2;
    while (1)
    {
      long long v36 = v35;
      if (v35 == v5) {
        break;
      }
      v35 += 2;
      if (*v36 > v26)
      {
        uint64_t v37 = v36 - 2;
        unsigned int v5 = v35 - 2;
        goto LABEL_43;
      }
    }
    uint64_t v37 = v35 - 2;
LABEL_43:
    if (v8 >= *v20) {
      long double v38 = v20;
    }
    else {
      long double v38 = a1;
    }
    uint64_t v39 = *(void *)v38;
    if (v37[1] >= v26) {
      double v26 = v37[1];
    }
    double v41 = a3[1];
    double v40 = a3[2];
    if (v41 >= v40)
    {
      uint64_t v47 = ((char *)v41 - (char *)*a3) >> 4;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 60) {
        goto LABEL_105;
      }
      uint64_t v49 = (char *)v40 - (char *)*a3;
      if (v49 >> 3 > v48) {
        unint64_t v48 = v49 >> 3;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50) {
        unint64_t v50 = (unint64_t)sub_10724(v50);
      }
      else {
        uint64_t v51 = 0;
      }
      unint64_t v60 = v50 + 16 * v47;
      unint64_t v61 = v50 + 16 * v51;
      *(void *)unint64_t v60 = v39;
      *(double *)(v60 + 8) = v26;
      uint64_t v29 = (double *)(v60 + 16);
      int v63 = *a3;
      char v62 = a3[1];
      if (v62 != *a3)
      {
        do
        {
          *(_OWORD *)(v60 - 16) = *((_OWORD *)v62 - 1);
          v60 -= 16;
          v62 -= 2;
        }
        while (v62 != v63);
        char v62 = *a3;
      }
      *a3 = (double *)v60;
      a3[1] = v29;
      a3[2] = (double *)v61;
      if (v62) {
        operator delete(v62);
      }
    }
    else
    {
      *(void *)double v41 = v39;
      v41[1] = v26;
      uint64_t v29 = v41 + 2;
    }
  }
  else
  {
    long double v28 = a3[1];
    unint64_t v27 = (unint64_t)a3[2];
    if ((unint64_t)v28 >= v27)
    {
      uint64_t v42 = ((char *)v28 - (char *)*a3) >> 4;
      unint64_t v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 60) {
        goto LABEL_105;
      }
      uint64_t v44 = v27 - (void)*a3;
      if (v44 >> 3 > v43) {
        unint64_t v43 = v44 >> 3;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v43;
      }
      if (v45) {
        unint64_t v45 = (unint64_t)sub_10724(v45);
      }
      else {
        uint64_t v46 = 0;
      }
      long double v56 = (double *)(v45 + 16 * v42);
      unint64_t v57 = v45 + 16 * v46;
      *long double v56 = v8;
      v56[1] = v26;
      uint64_t v29 = v56 + 2;
      double v59 = *a3;
      double v58 = a3[1];
      if (v58 != *a3)
      {
        do
        {
          *((_OWORD *)v56 - 1) = *((_OWORD *)v58 - 1);
          v56 -= 2;
          v58 -= 2;
        }
        while (v58 != v59);
        double v58 = *a3;
      }
      *a3 = v56;
      a3[1] = v29;
      a3[2] = (double *)v57;
      if (v58) {
        operator delete(v58);
      }
    }
    else
    {
      *long double v28 = v8;
      v28[1] = v26;
      uint64_t v29 = v28 + 2;
    }
    unsigned int v5 = v20;
  }
  for (a3[1] = v29; v5 != a2[1]; v5 += 2)
  {
    unint64_t v64 = (unint64_t)a3[2];
    if ((unint64_t)v29 >= v64)
    {
      uint64_t v65 = ((char *)v29 - (char *)*a3) >> 4;
      if ((unint64_t)(v65 + 1) >> 60) {
        goto LABEL_105;
      }
      uint64_t v66 = v64 - (void)*a3;
      uint64_t v67 = v66 >> 3;
      if (v66 >> 3 <= (unint64_t)(v65 + 1)) {
        uint64_t v67 = v65 + 1;
      }
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v68 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v67;
      }
      if (v68) {
        unint64_t v68 = (unint64_t)sub_10724(v68);
      }
      else {
        uint64_t v69 = 0;
      }
      int v70 = (double *)(v68 + 16 * v65);
      *(_OWORD *)int v70 = *(_OWORD *)v5;
      char v72 = *a3;
      int v71 = a3[1];
      int v73 = v70;
      if (v71 != *a3)
      {
        do
        {
          *((_OWORD *)v73 - 1) = *((_OWORD *)v71 - 1);
          v73 -= 2;
          v71 -= 2;
        }
        while (v71 != v72);
        int v71 = *a3;
      }
      uint64_t v29 = v70 + 2;
      *a3 = v73;
      a3[1] = v70 + 2;
      a3[2] = (double *)(v68 + 16 * v69);
      if (v71) {
        operator delete(v71);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v5;
      v29 += 2;
    }
    a3[1] = v29;
  }
}

void *sub_1E47D0(void *result, char *__src, char *a3, unint64_t a4)
{
  BOOL v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  long long v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60) {
LABEL_23:
    }
      sub_60548();
    BOOL result = sub_10724(v11);
    long long v9 = (char *)result;
    *unint64_t v7 = result;
    v7[1] = result;
    v7[2] = &result[2 * v12];
    size_t v13 = a3 - v6;
    if (v13) {
      BOOL result = memmove(result, v6, v13);
    }
    unint64_t v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unint64_t v14 = (void **)(result + 1);
  uint64_t v15 = (unsigned char *)result[1];
  unint64_t v16 = (v15 - v9) >> 4;
  if (v16 >= a4)
  {
    size_t v13 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    int v18 = (void *)*result;
LABEL_21:
    BOOL result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  int v17 = &__src[16 * v16];
  if (v15 != v9)
  {
    BOOL result = memmove((void *)*result, __src, v15 - v9);
    long long v9 = (char *)*v14;
  }
  size_t v13 = a3 - v17;
  if (v13)
  {
    int v18 = v9;
    long long __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *unint64_t v14 = &v9[v13];
  return result;
}

void sub_1E490C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int *a5, unint64_t a6)
{
  unint64_t v6 = a6;
  int v9 = *a2;
  if (*a2 <= 1885762656)
  {
    if (v9 != 1853059619)
    {
      if (v9 == 1853059700)
      {
        if (*a5 != 8)
        {
          uint64_t v39 = (os_log_t *)sub_32A48(13);
          unint64_t v11 = *v39;
          if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
          {
            int v41 = 136315394;
            uint64_t v42 = "HP_FormatList.cpp";
            __int16 v43 = 1024;
            int v44 = 684;
            uint64_t v12 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyNo"
                  "minalSampleRate\"";
            goto LABEL_60;
          }
          goto LABEL_61;
        }
        *(void *)a6 = *(void *)(a1 + 16);
      }
      else if (v9 == 1885762592)
      {
        if (*a5 != 40)
        {
          uint64_t v10 = (os_log_t *)sub_32A48(13);
          unint64_t v11 = *v10;
          if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
          {
            int v41 = 136315394;
            uint64_t v42 = "HP_FormatList.cpp";
            __int16 v43 = 1024;
            int v44 = 715;
            uint64_t v12 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioStreamPropertyPhysicalFormat\"";
LABEL_60:
            _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v41, 0x12u);
            goto LABEL_61;
          }
          goto LABEL_61;
        }
LABEL_13:
        long long v13 = *(_OWORD *)(a1 + 16);
        long long v14 = *(_OWORD *)(a1 + 32);
        *(void *)(a6 + 32) = *(void *)(a1 + 48);
        *(_OWORD *)a6 = v13;
        *(_OWORD *)(a6 + 16) = v14;
        return;
      }
      return;
    }
    unsigned int v15 = *a5;
    unsigned int v16 = *a5 >> 4;
    unsigned int v17 = sub_1E4D24(a1);
    if (v17 >= v15 >> 4) {
      unint64_t v19 = v16;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      uint64_t v20 = 0;
      double v21 = (_OWORD *)v6;
      do
        sub_1E4D88(a1, v20++, v21++);
      while (v19 != v20);
      unint64_t v22 = v19;
    }
    else
    {
      unint64_t v22 = 0;
    }
    uint64_t v31 = (double *)(v6 + 16 * v22);
    unint64_t v32 = 126 - 2 * __clz(v22);
    if (v19) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    sub_1E4E04(v6, v31, v33, 1, v18);
    unsigned int v34 = 16 * v19;
LABEL_52:
    *a5 = v34;
    return;
  }
  switch(v9)
  {
    case 1885762657:
      unsigned int v23 = *a5 / 0x38;
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = *(void *)(a1 + 64);
      if (v24 == v25)
      {
        unsigned int v26 = 0;
      }
      else
      {
        unsigned int v26 = 0;
        do
        {
          v26 += (*(void *)(v24 + 48) - *(void *)(v24 + 40)) >> 4;
          v24 += 64;
        }
        while (v24 != v25);
      }
      if (v26 >= v23) {
        uint64_t v35 = v23;
      }
      else {
        uint64_t v35 = v26;
      }
      if (v35)
      {
        for (uint64_t i = 0; i != v35; ++i)
        {
          sub_1E4290(*(long long **)(a1 + 56), *(long long **)(a1 + 64), i, v6);
          v6 += 56;
        }
      }
      goto LABEL_51;
    case 1936092513:
      unsigned int v27 = *a5 / 0x38;
      uint64_t v28 = *(void *)(a1 + 80);
      uint64_t v29 = *(void *)(a1 + 88);
      if (v28 == v29)
      {
        unsigned int v30 = 0;
      }
      else
      {
        unsigned int v30 = 0;
        do
        {
          v30 += (*(void *)(v28 + 48) - *(void *)(v28 + 40)) >> 4;
          v28 += 64;
        }
        while (v28 != v29);
      }
      if (v30 >= v27) {
        uint64_t v35 = v27;
      }
      else {
        uint64_t v35 = v30;
      }
      if (v35)
      {
        for (uint64_t j = 0; j != v35; ++j)
        {
          sub_1E4290(*(long long **)(a1 + 80), *(long long **)(a1 + 88), j, v6);
          v6 += 56;
        }
      }
LABEL_51:
      unsigned int v34 = 56 * v35;
      goto LABEL_52;
    case 1936092532:
      if (*a5 != 40)
      {
        long double v38 = (os_log_t *)sub_32A48(13);
        unint64_t v11 = *v38;
        if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
        {
          int v41 = 136315394;
          uint64_t v42 = "HP_FormatList.cpp";
          __int16 v43 = 1024;
          int v44 = 701;
          uint64_t v12 = "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioStreamPropertyVirtualFormat\"";
          goto LABEL_60;
        }
LABEL_61:
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = 561211770;
      }
      goto LABEL_13;
  }
}

unint64_t sub_1E4D24(uint64_t a1)
{
  unsigned int v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_1E4174(a1, (uint64_t)&v4);
  uint64_t v1 = v4;
  uint64_t v2 = v5;
  if (v4) {
    operator delete(v4);
  }
  return (unint64_t)(v2 - (void)v1) >> 4;
}

void sub_1E4D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E4D88(uint64_t a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_1E4174(a1, (uint64_t)&v6);
  uint64_t v5 = v6;
  if (a2 >= (unint64_t)((v7 - (uint64_t)v6) >> 4))
  {
    if (!v6) {
      return;
    }
  }
  else
  {
    *a3 = *((_OWORD *)v6 + a2);
  }
  operator delete(v5);
}

void sub_1E4DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1E4E04(unint64_t a1, double *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    unint64_t v11 = (unint64_t *)(a2 - 2);
    uint64_t v12 = (double *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                a5.n128_u64[0] = *v11;
                if (*(double *)v11 < *v12)
                {
                  long long v77 = *(_OWORD *)v12;
                  *(_OWORD *)uint64_t v12 = *(_OWORD *)v11;
                  a5.n128_u64[0] = v77;
                  *(_OWORD *)unint64_t v11 = v77;
                }
                break;
              case 3uLL:
                sub_1E54E4(v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = sub_1E5588(v12, v12 + 2, v12 + 4, (unint64_t *)a2 - 2).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = sub_1E5628(v12, v12 + 2, v12 + 4, (unint64_t *)v12 + 6, (unint64_t *)a2 - 2).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            uint64_t v37 = v12 + 2;
            BOOL v39 = v12 == a2 || v37 == a2;
            if (a4)
            {
              if (!v39)
              {
                uint64_t v40 = 0;
                int v41 = v12;
                do
                {
                  uint64_t v42 = v37;
                  a5.n128_f64[0] = v41[2];
                  if (a5.n128_f64[0] < *v41)
                  {
                    uint64_t v43 = *((void *)v41 + 3);
                    uint64_t v44 = v40;
                    while (1)
                    {
                      *(_OWORD *)((char *)v12 + v44 + 16) = *(_OWORD *)((char *)v12 + v44);
                      if (!v44) {
                        break;
                      }
                      double v45 = *(double *)((char *)v12 + v44 - 16);
                      v44 -= 16;
                      if (a5.n128_f64[0] >= v45)
                      {
                        uint64_t v46 = (double *)((char *)v12 + v44 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v46 = v12;
LABEL_79:
                    double *v46 = a5.n128_f64[0];
                    *((void *)v46 + 1) = v43;
                  }
                  uint64_t v37 = v42 + 2;
                  v40 += 16;
                  int v41 = v42;
                }
                while (v42 + 2 != a2);
              }
            }
            else if (!v39)
            {
              do
              {
                unint64_t v70 = (unint64_t)v37;
                a5.n128_u64[0] = *(void *)(a1 + 16);
                if (a5.n128_f64[0] < *(double *)a1)
                {
                  uint64_t v71 = *(void *)(a1 + 24);
                  char v72 = v37;
                  do
                  {
                    *(_OWORD *)char v72 = *((_OWORD *)v72 - 1);
                    double v73 = *(v72 - 4);
                    v72 -= 2;
                  }
                  while (a5.n128_f64[0] < v73);
                  *char v72 = a5.n128_f64[0];
                  *((void *)v72 + 1) = v71;
                }
                v37 += 2;
                a1 = v70;
              }
              while ((double *)(v70 + 16) != a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v47 = (v14 - 2) >> 1;
              int64_t v48 = v47;
              do
              {
                int64_t v49 = v48;
                if (v47 >= v48)
                {
                  uint64_t v50 = (2 * v48) | 1;
                  uint64_t v51 = &v12[2 * v50];
                  if (2 * v49 + 2 < (uint64_t)v14 && *v51 < v51[2])
                  {
                    v51 += 2;
                    uint64_t v50 = 2 * v49 + 2;
                  }
                  double v52 = &v12[2 * v49];
                  double v53 = *v52;
                  if (*v51 >= *v52)
                  {
                    uint64_t v54 = *((void *)v52 + 1);
                    do
                    {
                      long double v55 = v52;
                      double v52 = v51;
                      *(_OWORD *)long double v55 = *(_OWORD *)v51;
                      if (v47 < v50) {
                        break;
                      }
                      uint64_t v56 = 2 * v50;
                      uint64_t v50 = (2 * v50) | 1;
                      uint64_t v51 = &v12[2 * v50];
                      uint64_t v57 = v56 + 2;
                      if (v57 < (uint64_t)v14 && *v51 < v51[2])
                      {
                        v51 += 2;
                        uint64_t v50 = v57;
                      }
                    }
                    while (*v51 >= v53);
                    *double v52 = v53;
                    *((void *)v52 + 1) = v54;
                  }
                }
                int64_t v48 = v49 - 1;
              }
              while (v49);
              uint64_t v58 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v59 = 0;
                long long v78 = *(_OWORD *)v12;
                unint64_t v60 = v12;
                do
                {
                  unint64_t v61 = v60;
                  v60 += 2 * v59 + 2;
                  uint64_t v62 = 2 * v59;
                  uint64_t v59 = (2 * v59) | 1;
                  uint64_t v63 = v62 + 2;
                  if (v63 < v58 && *v60 < v60[2])
                  {
                    v60 += 2;
                    uint64_t v59 = v63;
                  }
                  *(_OWORD *)unint64_t v61 = *(_OWORD *)v60;
                }
                while (v59 <= (uint64_t)((unint64_t)(v58 - 2) >> 1));
                a2 -= 2;
                if (v60 == a2)
                {
                  a5.n128_u64[0] = v78;
                  *(_OWORD *)unint64_t v60 = v78;
                }
                else
                {
                  *(_OWORD *)unint64_t v60 = *(_OWORD *)a2;
                  a5.n128_u64[0] = v78;
                  *(_OWORD *)a2 = v78;
                  uint64_t v64 = (char *)v60 - (char *)v12 + 16;
                  if (v64 >= 17)
                  {
                    unint64_t v65 = (((unint64_t)v64 >> 4) - 2) >> 1;
                    uint64_t v66 = &v12[2 * v65];
                    a5.n128_f64[0] = *v60;
                    if (*v66 < *v60)
                    {
                      uint64_t v67 = *((void *)v60 + 1);
                      do
                      {
                        unint64_t v68 = v60;
                        unint64_t v60 = v66;
                        *(_OWORD *)unint64_t v68 = *(_OWORD *)v66;
                        if (!v65) {
                          break;
                        }
                        unint64_t v65 = (v65 - 1) >> 1;
                        uint64_t v66 = &v12[2 * v65];
                      }
                      while (*v66 < a5.n128_f64[0]);
                      *unint64_t v60 = a5.n128_f64[0];
                      *((void *)v60 + 1) = v67;
                    }
                  }
                }
              }
              while (v58-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          unsigned int v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            sub_1E54E4((double *)a1, (double *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            sub_1E54E4((double *)(a1 + 16), v16 - 2, a2 - 4);
            sub_1E54E4((double *)(a1 + 32), (double *)(a1 + 16 + 16 * v15), a2 - 6);
            sub_1E54E4(v16 - 2, v16, (double *)(a1 + 16 + 16 * v15));
            __n128 v75 = *(__n128 *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(__n128 *)unsigned int v16 = v75;
          }
          else
          {
            sub_1E54E4((double *)(a1 + 16 * (v14 >> 1)), (double *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(double *)(a1 - 16) < *(double *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          if (*(double *)a1 >= *(double *)v11)
          {
            unint64_t v31 = a1 + 16;
            do
            {
              uint64_t v12 = (double *)v31;
              if (v31 >= (unint64_t)a2) {
                break;
              }
              v31 += 16;
            }
            while (a5.n128_f64[0] >= *v12);
          }
          else
          {
            uint64_t v12 = (double *)a1;
            do
            {
              double v30 = v12[2];
              v12 += 2;
            }
            while (a5.n128_f64[0] >= v30);
          }
          unint64_t v32 = a2;
          if (v12 < a2)
          {
            unint64_t v32 = a2;
            do
            {
              double v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (a5.n128_f64[0] < v33);
          }
          while (v12 < v32)
          {
            long long v76 = *(_OWORD *)v12;
            *(_OWORD *)uint64_t v12 = *(_OWORD *)v32;
            *(_OWORD *)unint64_t v32 = v76;
            do
            {
              double v34 = v12[2];
              v12 += 2;
            }
            while (a5.n128_f64[0] >= v34);
            do
            {
              double v35 = *(v32 - 2);
              v32 -= 2;
            }
            while (a5.n128_f64[0] < v35);
          }
          long long v36 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (double *)a1;
          if (v12 - 2 != (double *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v36;
          }
          a4 = 0;
          *(__n128 *)long long v36 = a5;
        }
        __n128 v17 = *(__n128 *)a1;
        unint64_t v18 = a1;
        do
        {
          unint64_t v19 = (double *)v18;
          double v20 = *(double *)(v18 + 16);
          v18 += 16;
        }
        while (v20 < v17.n128_f64[0]);
        double v21 = a2;
        if (v19 == (double *)a1)
        {
          double v21 = a2;
          do
          {
            if (v18 >= (unint64_t)v21) {
              break;
            }
            double v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v23 >= v17.n128_f64[0]);
        }
        else
        {
          do
          {
            double v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v22 >= v17.n128_f64[0]);
        }
        if (v18 < (unint64_t)v21)
        {
          unint64_t v24 = v18;
          uint64_t v25 = v21;
          do
          {
            long long v26 = *(_OWORD *)v24;
            *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
            *(_OWORD *)uint64_t v25 = v26;
            do
            {
              unint64_t v19 = (double *)v24;
              double v27 = *(double *)(v24 + 16);
              v24 += 16;
            }
            while (v27 < v17.n128_f64[0]);
            do
            {
              double v28 = *(v25 - 2);
              v25 -= 2;
            }
            while (v28 >= v17.n128_f64[0]);
          }
          while (v24 < (unint64_t)v25);
        }
        if (v19 != (double *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v19;
        }
        *(__n128 *)unint64_t v19 = v17;
        if (v18 >= (unint64_t)v21) {
          break;
        }
LABEL_30:
        sub_1E4E04(a1, v19, a3, a4 & 1);
        a4 = 0;
        uint64_t v12 = v19 + 2;
      }
      BOOL v29 = sub_1E56F4(a1, (uint64_t)v19);
      uint64_t v12 = v19 + 2;
      if (sub_1E56F4((uint64_t)(v19 + 2), (uint64_t)a2)) {
        break;
      }
      if (!v29) {
        goto LABEL_30;
      }
    }
    a2 = v19;
    if (!v29) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

double *sub_1E54E4(double *result, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = *a3;
  if (*a2 >= *result)
  {
    if (v4 < v3)
    {
      long long v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *result)
      {
        long long v7 = *(_OWORD *)result;
        *(_OWORD *)BOOL result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v8 = *(_OWORD *)result;
      *(_OWORD *)BOOL result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      long long v5 = *(_OWORD *)result;
      *(_OWORD *)BOOL result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

__n128 sub_1E5588(double *a1, double *a2, double *a3, unint64_t *a4)
{
  sub_1E54E4(a1, a2, a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_f64[0] = *a3;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_f64[0] = *a2;
      if (*a2 < *a1)
      {
        __n128 result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_1E5628(double *a1, double *a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  sub_1E5588(a1, a2, a3, a4);
  result.n128_u64[0] = *a5;
  if (*(double *)a5 < *(double *)a4)
  {
    __n128 result = *(__n128 *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(__n128 *)a5 = result;
    result.n128_u64[0] = *a4;
    if (*(double *)a4 < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(__n128 *)a4 = result;
      result.n128_f64[0] = *a3;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        result.n128_f64[0] = *a2;
        if (*a2 < *a1)
        {
          __n128 result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

BOOL sub_1E56F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (_OWORD *)(a2 - 16);
      if (*(double *)(a2 - 16) < *(double *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        *long long v6 = v7;
      }
      return result;
    case 3:
      sub_1E54E4((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      sub_1E5588((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a2 - 16));
      return 1;
    case 5:
      sub_1E5628((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (unint64_t *)(a1 + 48), (unint64_t *)(a2 - 16));
      return 1;
    default:
      long long v8 = (double *)(a1 + 32);
      sub_1E54E4((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    double v12 = *(double *)v9;
    if (*(double *)v9 < *v8)
    {
      uint64_t v13 = *(void *)(v9 + 8);
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        double v15 = *(double *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          uint64_t v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(double *)uint64_t v16 = v12;
      *(void *)(v16 + 8) = v13;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    long long v8 = (double *)v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1E5890(void *a1, int *a2)
{
  int v2 = *a2;
  if (*a2 > 1885762656)
  {
    switch(v2)
    {
      case 1885762657:
        uint64_t v5 = a1[7];
        uint64_t v6 = a1[8];
        if (v5 != v6)
        {
          int v7 = 0;
          do
          {
            v7 += (*(void *)(v5 + 48) - *(void *)(v5 + 40)) >> 4;
            v5 += 64;
          }
          while (v5 != v6);
          return (56 * v7);
        }
        break;
      case 1936092513:
        uint64_t v8 = a1[10];
        uint64_t v9 = a1[11];
        if (v8 != v9)
        {
          int v7 = 0;
          do
          {
            v7 += (*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 4;
            v8 += 64;
          }
          while (v8 != v9);
          return (56 * v7);
        }
        break;
      case 1936092532:
        return 40;
      default:
        return 0;
    }
    return 0;
  }
  if (v2 == 1853059619) {
    return 16 * sub_1E4D24((uint64_t)a1);
  }
  if (v2 == 1885762592) {
    unsigned int v3 = 40;
  }
  else {
    unsigned int v3 = 0;
  }
  if (v2 == 1853059700) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_1E59A4(uint64_t a1, _DWORD *a2)
{
  BOOL v2 = *a2 == 1885762592 || *a2 == 1853059700;
  return *a2 == 1936092532 || v2;
}

uint64_t sub_1E59E8()
{
  return 1;
}

void sub_1E59F0(uint64_t a1)
{
  *(void *)a1 = off_626BF8;
  uint64_t v1 = (void **)(a1 + 56);
  BOOL v2 = (void **)(a1 + 80);
  sub_1E5A78(&v2);
  BOOL v2 = v1;
  sub_1E5A78(&v2);

  operator delete();
}

void sub_1E5A78(void ***a1)
{
  BOOL v2 = *a1;
  if (*v2)
  {
    sub_1E5ACC((uint64_t *)v2);
    unsigned int v3 = **a1;
    operator delete(v3);
  }
}

void sub_1E5ACC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_1E5B1C(uint64_t a1)
{
  *(void *)a1 = off_626BF8;
  uint64_t v2 = (void **)(a1 + 56);
  uint64_t v4 = (void **)(a1 + 80);
  sub_1E5A78(&v4);
  uint64_t v4 = v2;
  sub_1E5A78(&v4);
  return a1;
}

double sub_1E5B84(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 <= 5) {
    *(_DWORD *)a3 = *(_DWORD *)&aTrsnRsntmfsamf[4 * a2];
  }
  double result = NAN;
  *(void *)(a3 + 4) = -3587560918;
  return result;
}

uint64_t sub_1E5BAC()
{
  return 6;
}

uint64_t sub_1E5BB4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, int a5, double *a6)
{
  uint64_t v10 = *(void **)(a1 + 8);
  unsigned int v11 = a2[2];
  uint64_t v12 = sub_365170(v10, a2[1], v11);
  if (*a2 != 1853059700)
  {
    if (!v12)
    {
      double v35 = (os_log_t *)sub_32A48(13);
      long long v36 = *v35;
      if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
      {
        int v41 = 136315394;
        uint64_t v42 = "HP_FormatList.cpp";
        __int16 v43 = 1024;
        int v44 = 1630;
        _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: \"no stream for given scope and element\"", (uint8_t *)&v41, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = 2003332927;
    }
    goto LABEL_9;
  }
  if (v11)
  {
    if (!v12)
    {
      uint64_t v13 = (os_log_t *)sub_32A48(13);
      uint64_t v14 = *v13;
      if (*v13)
      {
        if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          int v41 = 136315394;
          uint64_t v42 = "HP_FormatList.cpp";
          __int16 v43 = 1024;
          int v44 = 1622;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: \"no stream for given scope and element\"", (uint8_t *)&v41, 0x12u);
        }
      }
      double v15 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v15 = &off_6414D8;
      void v15[2] = 2003332927;
    }
LABEL_9:
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)v12 + 64);
    return v16();
  }
  if (a5 != 8)
  {
    long double v38 = (os_log_t *)sub_32A48(13);
    BOOL v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
    {
      int v41 = 136315394;
      uint64_t v42 = "HP_FormatList.cpp";
      __int16 v43 = 1024;
      int v44 = 1588;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyNominalSampleRate\"", (uint8_t *)&v41, 0x12u);
    }
    uint64_t v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v40 = &off_6414D8;
    v40[2] = 561211770;
  }
  char v18 = 0;
  double v19 = *a6;
LABEL_14:
  while (2)
  {
    char v20 = v18;
    BOOL v21 = (v18 & 1) == 0;
    if (v18) {
      uint64_t v22 = 63;
    }
    else {
      uint64_t v22 = 66;
    }
    if (v21) {
      uint64_t v23 = 65;
    }
    else {
      uint64_t v23 = 62;
    }
    unint64_t v24 = v10[v22] - v10[v23];
    if ((v24 & 0x7FFFFFFF8) == 0)
    {
      char v18 = 1;
      if ((v20 & 1) == 0) {
        continue;
      }
      goto LABEL_36;
    }
    break;
  }
  unint64_t v25 = 0;
  unint64_t v26 = (v24 >> 3);
  while (1)
  {
    uint64_t v27 = *(void *)(a1 + 8);
    uint64_t v28 = v27 + 496;
    if (v20) {
      uint64_t v29 = 496;
    }
    else {
      uint64_t v29 = 520;
    }
    if ((v20 & 1) == 0) {
      uint64_t v28 = v27 + 520;
    }
    uint64_t v30 = *(void *)(v27 + v29);
    if (v25 < (*(void *)(v28 + 8) - v30) >> 3)
    {
      uint64_t v31 = *(void *)(v30 + 8 * v25);
      if (v31)
      {
        if (sub_1E3934(*(void *)(v31 + 104), v19)) {
          return sub_1E39DC(*(void *)(v31 + 104), v19);
        }
      }
    }
    if (++v25 >= v26)
    {
      if ((v20 & 1) == 0)
      {
        uint64_t v10 = *(void **)(a1 + 8);
        char v18 = 1;
        goto LABEL_14;
      }
LABEL_36:
      unint64_t v32 = (os_log_t *)sub_32A48(13);
      double v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        int v41 = 136315394;
        uint64_t v42 = "HP_FormatList.cpp";
        __int16 v43 = 1024;
        int v44 = 1618;
        _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): \"no stream supports the given sample rate\"", (uint8_t *)&v41, 0x12u);
      }
      double v34 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v34 = &off_6414D8;
      v34[2] = 560226676;
    }
  }
}

void sub_1E60EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _DWORD *a5, double *a6)
{
  uint64_t v39 = *a2;
  uint64_t v13 = (uint64_t)a2 + 4;
  int v12 = *((_DWORD *)a2 + 1);
  unsigned int v40 = *(_DWORD *)(v13 + 4);
  uint64_t v14 = *(void **)(a1 + 8);
  double v15 = (_DWORD *)sub_365170(v14, v12, v40);
  if (*(_DWORD *)a2 == 1853059619)
  {
    if (v40)
    {
      if (!v15)
      {
        long long v36 = (os_log_t *)sub_32A48(13);
        uint64_t v37 = *v36;
        if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1556;
          _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: \"no stream for given scope and element\"", buf, 0x12u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = 2003332927;
      }
      HIDWORD(v39) = 1735159650;
      unsigned int v40 = v40 - v15[23] + 1;
      (*(void (**)(_DWORD *, uint64_t *, uint64_t, uint64_t, _DWORD *, double *))(*(void *)v15 + 56))(v15, &v39, a3, a4, a5, a6);
    }
    else
    {
      memset(buf, 0, sizeof(buf));
      sub_1E65B8(a1, (uint64_t)buf);
      unsigned int v18 = *a5 >> 4;
      double v19 = *(void **)buf;
      uint64_t v20 = (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4;
      if (v18 >= v20) {
        unint64_t v21 = v20;
      }
      else {
        unint64_t v21 = v18;
      }
      if (v21)
      {
        unint64_t v22 = v21;
        uint64_t v23 = a6;
        unint64_t v24 = *(__n128 **)buf;
        do
        {
          if (!v20) {
            sub_131250();
          }
          __n128 v25 = *v24++;
          __n128 v17 = v25;
          *(__n128 *)uint64_t v23 = v25;
          v23 += 2;
          --v20;
          --v22;
        }
        while (v22);
        unint64_t v26 = v21;
      }
      else
      {
        unint64_t v26 = 0;
      }
      uint64_t v27 = &a6[2 * v26];
      unint64_t v28 = 126 - 2 * __clz(v26);
      if (v21) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      sub_1E4E04((unint64_t)a6, v27, v29, 1, v17);
      *a5 = 16 * v21;
      if (v19) {
        operator delete(v19);
      }
    }
  }
  else if (*(_DWORD *)a2 == 1853059700)
  {
    if (*a5 != 8)
    {
      uint64_t v30 = (os_log_t *)sub_32A48(13);
      uint64_t v31 = *v30;
      if (*v30)
      {
        if (os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1529;
          _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for kAudioDevicePropertyNominalSampleRate\"", buf, 0x12u);
        }
      }
      unint64_t v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v32 = &off_6414D8;
      v32[2] = 561211770;
    }
    *a6 = (*(double (**)(void *))(*v14 + 632))(v14);
  }
  else
  {
    if (!v15)
    {
      double v33 = (os_log_t *)sub_32A48(13);
      double v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1564;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: \"no stream for given scope and element\"", buf, 0x12u);
      }
      double v35 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v35 = &off_6414D8;
      v35[2] = 2003332927;
    }
    HIDWORD(v39) = 1735159650;
    unsigned int v16 = v40;
    if (v40) {
      unsigned int v16 = v40 - v15[23] + 1;
    }
    unsigned int v40 = v16;
    (*(void (**)(_DWORD *, uint64_t *, uint64_t, uint64_t, _DWORD *, double *))(*(void *)v15 + 56))(v15, &v39, a3, a4, a5, a6);
  }
}

void sub_1E6598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
}

void sub_1E65B8(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)a2;
  long long v68 = 0uLL;
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  unint64_t v67 = 0;
  unsigned int v3 = *(void **)(a1 + 8);
  unint64_t v4 = v3[63] - v3[62];
  uint64_t v5 = v4 & 0x7FFFFFFF8;
  BOOL v6 = (v4 & 0x7FFFFFFF8) == 0;
  if (*(unsigned char *)(a1 + 16))
  {
    if (v5)
    {
      unint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v62 = (v4 >> 3);
      char v9 = 1;
      do
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 496);
        if (v7 >= (*(void *)(*(void *)(a1 + 8) + 504) - v10) >> 3) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = *(void *)(v10 + 8 * v7);
        }
        uint64_t v66 = v8;
        int v12 = sub_1E4D24(*(void *)(v11 + 104));
        uint64_t v13 = v8;
        if (v12)
        {
          for (unsigned int i = 0; i != v12; ++i)
          {
            sub_1E4D88(*(void *)(v11 + 104), i, &v68);
            if (v9)
            {
              long long v15 = v68;
              unsigned int v16 = v66;
              if ((unint64_t)v66 >= v67)
              {
                unsigned int v18 = v65;
                int64_t v19 = (v66 - v65) >> 4;
                unint64_t v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 60) {
                  sub_60548();
                }
                uint64_t v21 = v67 - (void)v65;
                if ((uint64_t)(v67 - (void)v65) >> 3 > v20) {
                  unint64_t v20 = v21 >> 3;
                }
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v22 = v20;
                }
                if (v22) {
                  unint64_t v22 = (unint64_t)sub_10724(v22);
                }
                else {
                  uint64_t v23 = 0;
                }
                unint64_t v24 = (char *)(v22 + 16 * v19);
                *(_OWORD *)unint64_t v24 = v15;
                __n128 v25 = v24;
                if (v16 != v18)
                {
                  do
                  {
                    *((_OWORD *)v25 - 1) = *((_OWORD *)v16 - 1);
                    v25 -= 16;
                    v16 -= 16;
                  }
                  while (v16 != v18);
                  unsigned int v16 = v18;
                }
                __n128 v17 = v24 + 16;
                unint64_t v65 = v25;
                unint64_t v67 = v22 + 16 * v23;
                if (v16) {
                  operator delete(v16);
                }
              }
              else
              {
                *(void *)uint64_t v66 = v68;
                *((void *)v16 + 1) = *((void *)&v15 + 1);
                __n128 v17 = v16 + 16;
              }
              uint64_t v66 = v17;
            }
            else
            {
              sub_1E6B38((double *)&v68, (double **)a2, (void **)&v65);
            }
          }
          uint64_t v13 = v65;
          uint64_t v8 = v66;
        }
        sub_1E47D0((void *)a2, v13, v8, (v8 - v13) >> 4);
        char v9 = 0;
        ++v7;
        uint64_t v8 = v13;
      }
      while (v7 != v62);
      unsigned int v3 = *(void **)(a1 + 8);
    }
    unint64_t v26 = v3[66] - v3[65];
    if ((v26 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v27 = 0;
      uint64_t v63 = (v26 >> 3);
      do
      {
        uint64_t v28 = *(void *)(a1 + 8);
        uint64_t v29 = *(void *)(v28 + 528);
        uint64_t v30 = *(void *)(v28 + 520);
        if (v27 >= (v29 - v30) >> 3) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = *(void *)(v30 + 8 * v27);
        }
        unint64_t v32 = v65;
        uint64_t v66 = v65;
        int v33 = sub_1E4D24(*(void *)(v31 + 104));
        if (v33)
        {
          for (unsigned int j = 0; j != v33; ++j)
          {
            sub_1E4D88(*(void *)(v31 + 104), j, &v68);
            if (v6)
            {
              long long v35 = v68;
              long long v36 = v66;
              if ((unint64_t)v66 >= v67)
              {
                long double v38 = v65;
                int64_t v39 = (v66 - v65) >> 4;
                unint64_t v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 60) {
                  sub_60548();
                }
                uint64_t v41 = v67 - (void)v65;
                if ((uint64_t)(v67 - (void)v65) >> 3 > v40) {
                  unint64_t v40 = v41 >> 3;
                }
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v42 = v40;
                }
                if (v42) {
                  unint64_t v42 = (unint64_t)sub_10724(v42);
                }
                else {
                  uint64_t v43 = 0;
                }
                int v44 = (char *)(v42 + 16 * v39);
                *(_OWORD *)int v44 = v35;
                double v45 = v44;
                if (v36 != v38)
                {
                  do
                  {
                    *((_OWORD *)v45 - 1) = *((_OWORD *)v36 - 1);
                    v45 -= 16;
                    v36 -= 16;
                  }
                  while (v36 != v38);
                  long long v36 = v38;
                }
                uint64_t v37 = v44 + 16;
                unint64_t v65 = v45;
                unint64_t v67 = v42 + 16 * v43;
                if (v36) {
                  operator delete(v36);
                }
              }
              else
              {
                *(void *)uint64_t v66 = v68;
                *((void *)v36 + 1) = *((void *)&v35 + 1);
                uint64_t v37 = v36 + 16;
              }
              uint64_t v66 = v37;
            }
            else
            {
              sub_1E6B38((double *)&v68, (double **)a2, (void **)&v65);
            }
          }
          uint64_t v46 = v65;
          unint64_t v32 = v66;
        }
        else
        {
          uint64_t v46 = v32;
        }
        sub_1E47D0((void *)a2, v46, v32, (v32 - v46) >> 4);
        BOOL v6 = 0;
        ++v27;
      }
      while (v27 != v63);
    }
    else
    {
      uint64_t v46 = v65;
    }
  }
  else
  {
    if (v5)
    {
      unint64_t v47 = 0;
      uint64_t v46 = 0;
      uint64_t v48 = (v4 >> 3);
      do
      {
        uint64_t v49 = *(void *)(*(void *)(a1 + 8) + 496);
        if (v47 >= (*(void *)(*(void *)(a1 + 8) + 504) - v49) >> 3) {
          uint64_t v50 = 0;
        }
        else {
          uint64_t v50 = *(void *)(v49 + 8 * v47);
        }
        int v51 = sub_1E4D24(*(void *)(v50 + 104));
        if (v51)
        {
          for (unsigned int k = 0; k != v51; ++k)
          {
            uint64_t v66 = v46;
            sub_1E4D88(*(void *)(v50 + 104), k, &v68);
            sub_1E4324((double *)&v68, (double **)a2, (double **)&v65);
            uint64_t v46 = v65;
            sub_1E47D0((void *)a2, v65, v66, (v66 - v65) >> 4);
          }
        }
        ++v47;
      }
      while (v47 != v48);
      unsigned int v3 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v46 = 0;
    }
    unint64_t v53 = v3[66] - v3[65];
    if ((v53 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v54 = 0;
      uint64_t v55 = (v53 >> 3);
      do
      {
        uint64_t v56 = *(void *)(a1 + 8);
        uint64_t v57 = *(void *)(v56 + 528);
        uint64_t v58 = *(void *)(v56 + 520);
        if (v54 >= (v57 - v58) >> 3) {
          uint64_t v59 = 0;
        }
        else {
          uint64_t v59 = *(void *)(v58 + 8 * v54);
        }
        int v60 = sub_1E4D24(*(void *)(v59 + 104));
        if (v60)
        {
          for (unsigned int m = 0; m != v60; ++m)
          {
            uint64_t v66 = v46;
            sub_1E4D88(*(void *)(v59 + 104), m, &v68);
            sub_1E4324((double *)&v68, (double **)a2, (double **)&v65);
            uint64_t v46 = v65;
            sub_1E47D0((void *)a2, v65, v66, (v66 - v65) >> 4);
          }
        }
        ++v54;
      }
      while (v54 != v55);
    }
  }
  if (v46)
  {
    operator delete(v46);
  }
}

void sub_1E6AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E6B38(double *a1, double **a2, void **a3)
{
  unint64_t v4 = *a2;
  unsigned int v3 = a2[1];
  if (*a2 != v3)
  {
    do
    {
      double v8 = a1[1];
      if (v8 >= *v4)
      {
        double v9 = v4[1];
        if (*a1 <= v9)
        {
          if (*a1 >= *v4) {
            double v10 = *a1;
          }
          else {
            double v10 = *v4;
          }
          if (v9 >= v8) {
            uint64_t v11 = *((void *)a1 + 1);
          }
          else {
            uint64_t v11 = *((void *)v4 + 1);
          }
          uint64_t v13 = (double *)a3[1];
          unint64_t v12 = (unint64_t)a3[2];
          if ((unint64_t)v13 >= v12)
          {
            uint64_t v15 = ((char *)v13 - (unsigned char *)*a3) >> 4;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 60) {
              sub_60548();
            }
            uint64_t v17 = v12 - (void)*a3;
            if (v17 >> 3 > v16) {
              unint64_t v16 = v17 >> 3;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18) {
              unint64_t v18 = (unint64_t)sub_10724(v18);
            }
            else {
              uint64_t v19 = 0;
            }
            unint64_t v20 = (double *)(v18 + 16 * v15);
            *unint64_t v20 = v10;
            *((void *)v20 + 1) = v11;
            unint64_t v22 = (char *)*a3;
            uint64_t v21 = (char *)a3[1];
            uint64_t v23 = v20;
            if (v21 != *a3)
            {
              do
              {
                *((_OWORD *)v23 - 1) = *((_OWORD *)v21 - 1);
                v23 -= 2;
                v21 -= 16;
              }
              while (v21 != v22);
              uint64_t v21 = (char *)*a3;
            }
            uint64_t v14 = v20 + 2;
            *a3 = v23;
            a3[1] = v20 + 2;
            a3[2] = (void *)(v18 + 16 * v19);
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *uint64_t v13 = v10;
            *((void *)v13 + 1) = v11;
            uint64_t v14 = v13 + 2;
          }
          a3[1] = v14;
          unsigned int v3 = a2[1];
        }
      }
      v4 += 2;
    }
    while (v4 != v3);
  }
}

uint64_t sub_1E6C88(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = *a2;
  uint64_t v9 = (uint64_t)a2 + 4;
  int v8 = *((_DWORD *)a2 + 1);
  unsigned int v22 = *(_DWORD *)(v9 + 4);
  double v10 = (_DWORD *)sub_365170(*(void **)(a1 + 8), v8, v22);
  if (*(_DWORD *)a2 == 1853059700) {
    return 8;
  }
  if (*(_DWORD *)a2 != 1853059619)
  {
    if (!v10)
    {
      uint64_t v15 = (os_log_t *)sub_32A48(13);
      unint64_t v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1507;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: \"no stream for given scope and element\"", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = 2003332927;
    }
    HIDWORD(v21) = 1735159650;
    unsigned int v11 = v22;
    if (v22) {
      unsigned int v11 = v22 - v10[23] + 1;
    }
    goto LABEL_7;
  }
  if (v22)
  {
    if (!v10)
    {
      unint64_t v18 = (os_log_t *)sub_32A48(13);
      uint64_t v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "HP_FormatList.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1499;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: \"no stream for given scope and element\"", buf, 0x12u);
      }
      unint64_t v20 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v20 = &off_6414D8;
      v20[2] = 2003332927;
    }
    HIDWORD(v21) = 1735159650;
    unsigned int v11 = v22 - v10[23] + 1;
LABEL_7:
    unsigned int v22 = v11;
    return (*(uint64_t (**)(_DWORD *, uint64_t *, uint64_t, uint64_t))(*(void *)v10 + 48))(v10, &v21, a3, a4);
  }
  memset(buf, 0, sizeof(buf));
  sub_1E65B8(a1, (uint64_t)buf);
  int v13 = *(_DWORD *)buf;
  int v14 = *(_DWORD *)&buf[8];
  if (*(void *)buf) {
    operator delete(*(void **)buf);
  }
  return (v14 - v13) & 0xFFFFFFF0;
}

void sub_1E6FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1E6FC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *a2;
  uint64_t v4 = (uint64_t)a2 + 4;
  int v3 = *((_DWORD *)a2 + 1);
  unsigned int v12 = *(_DWORD *)(v4 + 4);
  uint64_t v5 = (_DWORD *)sub_365170(*(void **)(a1 + 8), v3, v12);
  if (*(_DWORD *)a2 == 1853059700) {
    return 1;
  }
  if (*(_DWORD *)a2 == 1853059619) {
    return 0;
  }
  if (!v5)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v14 = "HP_FormatList.cpp";
      __int16 v15 = 1024;
      int v16 = 1468;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError) [theStream is NULL]: \"no stream for given scope and element\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  HIDWORD(v11) = 1735159650;
  unsigned int v7 = v12;
  if (v12) {
    unsigned int v7 = v12 - v5[23] + 1;
  }
  unsigned int v12 = v7;
  return (*(uint64_t (**)(_DWORD *, uint64_t *))(*(void *)v5 + 40))(v5, &v11);
}

uint64_t sub_1E7168(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1853059619 || *a2 == 1853059700) {
    return 1;
  }
  int v4 = a2[1];
  if (v4 == 1869968496)
  {
    uint64_t v8 = *(void *)(a1 + 8);
    BOOL v6 = (void *)(v8 + 520);
    unsigned int v7 = (void *)(v8 + 528);
    return ((*v7 - *v6) & 0x7FFFFFFF8) != 0;
  }
  if (v4 == 1768845428)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    BOOL v6 = (void *)(v5 + 496);
    unsigned int v7 = (void *)(v5 + 504);
    return ((*v7 - *v6) & 0x7FFFFFFF8) != 0;
  }
  return 0;
}

void sub_1E71F0()
{
}

void sub_1E7208(uint64_t *a1, long long *a2)
{
  long long v3 = a2[1];
  long long v125 = *a2;
  long long v126 = v3;
  uint64_t v4 = *((void *)a2 + 4);
  uint64_t v127 = v4;
  *(void *)&long long v125 = 0;
  long long v124 = *(long long *)((char *)a2 + 40);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_52:
    sub_1E7CC4((uint64_t)&v119, (uint64_t)&v125, (uint64_t *)&v124);
    unint64_t v22 = a1[2];
    unint64_t v23 = a1[1];
    if (v23 < v22)
    {
      long long v24 = v120;
      uint64_t v25 = v121;
      *(_OWORD *)unint64_t v23 = v119;
      *(_OWORD *)(v23 + 16) = v24;
      *(void *)(v23 + 32) = v25;
      *(void *)(v23 + 40) = 0;
      *(void *)(v23 + 48) = 0;
      *(void *)(v23 + 56) = 0;
      *(_OWORD *)(v23 + 40) = *(_OWORD *)__p;
      *(void *)(v23 + 56) = v123;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v123 = 0;
      uint64_t v26 = v23 + 64;
      goto LABEL_54;
    }
    uint64_t v27 = (uint64_t)(v23 - *a1) >> 6;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 58) {
      sub_60548();
    }
    uint64_t v29 = v22 - *a1;
    if (v29 >> 5 > v28) {
      unint64_t v28 = v29 >> 5;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v30 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    char v135 = a1 + 2;
    uint64_t v31 = (char *)sub_72AB8(v30);
    uint64_t v32 = (uint64_t)&v31[64 * v27];
    double v34 = &v31[64 * v33];
    long long v35 = v120;
    uint64_t v36 = v121;
    *(_OWORD *)uint64_t v32 = v119;
    *(_OWORD *)(v32 + 16) = v35;
    *(void *)(v32 + 32) = v36;
    *(void *)(v32 + 40) = 0;
    *(void *)(v32 + 48) = 0;
    *(void *)(v32 + 56) = 0;
    *(_OWORD *)(v32 + 40) = *(_OWORD *)__p;
    *(void *)(v32 + 56) = v123;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v123 = 0;
    uint64_t v37 = v32 + 64;
    uint64_t v38 = sub_1E7D84((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, v32, v32);
    int64x2_t v39 = *(int64x2_t *)a1;
    *a1 = v38;
    a1[1] = v37;
    int64x2_t v133 = v39;
    uint64_t v40 = a1[2];
    a1[2] = (uint64_t)v34;
    uint64_t v134 = v40;
    int v132 = (char *)v39.i64[0];
    sub_1E7D20((uint64_t)&v132);
    uint64_t v41 = __p[0];
    a1[1] = v37;
    if (!v41) {
      return;
    }
LABEL_129:
    __p[1] = v41;
    operator delete(v41);
    return;
  }
  int v7 = BYTE12(v125) & 1;
  while (1)
  {
    unsigned int v8 = *(_DWORD *)(v6 + 8);
    BOOL v9 = v8 != 0;
    if (!v8)
    {
      BOOL v12 = 0;
LABEL_16:
      BOOL v10 = v8 == 1819304813;
LABEL_17:
      BOOL v13 = DWORD2(v125) == 1819304813;
      goto LABEL_18;
    }
    BOOL v10 = v8 == 1819304813;
    if (DWORD2(v125) && v8 != DWORD2(v125))
    {
      BOOL v12 = DWORD2(v125) != 1819304813 && v8 < DWORD2(v125);
      if (v8 == 1819304813) {
        BOOL v12 = 1;
      }
      goto LABEL_16;
    }
    if (v8 != 1819304813 || DWORD2(v125) != 1819304813)
    {
      BOOL v12 = 0;
      BOOL v9 = 0;
      goto LABEL_17;
    }
    if ((*(unsigned char *)(v6 + 12) & 0x40) == 0) {
      break;
    }
    BOOL v13 = 1;
    BOOL v10 = 1;
    BOOL v12 = (BYTE12(v125) & 0x40) == 0;
    BOOL v9 = v12;
LABEL_18:
    BOOL v14 = v10 && !v9;
    BOOL v15 = !v14 || !v13;
    if (!v15 && (*(_DWORD *)(v6 + 12) & 1) != v7)
    {
      BOOL v12 = v7 != 0;
      LOBYTE(v9) = 1;
    }
    BOOL v16 = v12;
    if (v9) {
      goto LABEL_48;
    }
    unsigned int v17 = *(_DWORD *)(v6 + 32);
    if (v17)
    {
      BOOL v16 = v17 > v4;
      if (v4)
      {
        if (v17 != v4) {
          goto LABEL_48;
        }
      }
    }
    unsigned int v18 = *(_DWORD *)(v6 + 28);
    if (!v18)
    {
      BOOL v16 = v12;
LABEL_48:
      if (!v16) {
        goto LABEL_64;
      }
      goto LABEL_49;
    }
    BOOL v14 = v18 == HIDWORD(v126);
    BOOL v19 = v18 < HIDWORD(v126);
    if (!v14 && HIDWORD(v126) != 0) {
      BOOL v12 = v19;
    }
    if (!v12) {
      goto LABEL_64;
    }
LABEL_49:
    v6 += 64;
    if (v6 == v5) {
      goto LABEL_52;
    }
  }
  if ((BYTE12(v125) & 0x40) == 0)
  {
    BOOL v12 = 0;
    BOOL v9 = 0;
    BOOL v13 = 1;
    BOOL v10 = 1;
    goto LABEL_18;
  }
  unsigned int v8 = 1819304813;
LABEL_64:
  if (v8 && DWORD2(v125) && v8 != DWORD2(v125)
    || (int v42 = *(_DWORD *)(v6 + 16)) != 0 && v126 && v42 != v126
    || (int v43 = *(_DWORD *)(v6 + 20)) != 0 && DWORD1(v126) && v43 != DWORD1(v126)
    || (int v44 = *(_DWORD *)(v6 + 24)) != 0 && DWORD2(v126) && v44 != DWORD2(v126)
    || (int v45 = *(_DWORD *)(v6 + 28)) != 0 && HIDWORD(v126) && v45 != HIDWORD(v126)
    || (int v46 = *(_DWORD *)(v6 + 32)) != 0 && v4 && v46 != v4
    || !sub_EBDC(v6, (uint64_t)&v125))
  {
    sub_1E7CC4((uint64_t)&v119, (uint64_t)&v125, (uint64_t *)&v124);
    uint64_t v53 = *a1;
    unint64_t v52 = a1[1];
    uint64_t v54 = v6 - *a1;
    uint64_t v55 = v54 >> 6;
    unint64_t v56 = a1[2];
    if (v52 < v56)
    {
      if (v6 != v52)
      {
        uint64_t v57 = v6 + 64;
        unint64_t v58 = v52 - 64;
        uint64_t v59 = a1[1];
        while (v58 < v52)
        {
          long long v60 = *(_OWORD *)(v58 + 16);
          uint64_t v61 = *(void *)(v58 + 32);
          *(_OWORD *)uint64_t v59 = *(_OWORD *)v58;
          *(_OWORD *)(v59 + 16) = v60;
          *(void *)(v59 + 32) = v61;
          *(void *)(v59 + 40) = 0;
          *(void *)(v59 + 48) = 0;
          *(void *)(v59 + 56) = 0;
          *(_OWORD *)(v59 + 40) = *(_OWORD *)(v58 + 40);
          *(void *)(v59 + 56) = *(void *)(v58 + 56);
          *(void *)(v58 + 40) = 0;
          *(void *)(v58 + 48) = 0;
          *(void *)(v58 + 56) = 0;
          v59 += 64;
          v58 += 64;
        }
        a1[1] = v59;
        if (v52 != v57)
        {
          uint64_t v66 = (uint64_t)(v52 - v57) >> 6 << 6;
          unint64_t v67 = v52 - 24;
          do
          {
            uint64_t v68 = v6 + v66;
            long long v69 = *(_OWORD *)(v6 + v66 - 64);
            long long v70 = *(_OWORD *)(v6 + v66 - 48);
            *(void *)(v67 - 8) = *(void *)(v6 + v66 - 32);
            *(_OWORD *)(v67 - 24) = v70;
            *(_OWORD *)(v67 - 40) = v69;
            uint64_t v71 = *(void **)v67;
            if (*(void *)v67)
            {
              *(void *)(v67 + 8) = v71;
              operator delete(v71);
              *(void *)unint64_t v67 = 0;
              *(void *)(v67 + 8) = 0;
              *(void *)(v67 + 16) = 0;
            }
            char v72 = (void *)(v68 - 24);
            *(_OWORD *)unint64_t v67 = *(_OWORD *)(v68 - 24);
            *(void *)(v67 + 16) = *(void *)(v68 - 8);
            *char v72 = 0;
            v72[1] = 0;
            v72[2] = 0;
            v67 -= 64;
            v66 -= 64;
          }
          while (v66);
        }
        long long v73 = v119;
        long long v74 = v120;
        *(void *)(v6 + 32) = v121;
        *(_OWORD *)uint64_t v6 = v73;
        *(_OWORD *)(v6 + 16) = v74;
        __n128 v75 = (void *)(v53 + (v55 << 6));
        long long v77 = v75 + 5;
        long long v76 = (void *)v75[5];
        if (v76)
        {
          v75[6] = v76;
          operator delete(v76);
          *long long v77 = 0;
          v75[6] = 0;
          v75[7] = 0;
        }
        *(_OWORD *)long long v77 = *(_OWORD *)__p;
        v75[7] = v123;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v123 = 0;
        return;
      }
      long long v78 = v119;
      long long v79 = v120;
      *(void *)(v6 + 32) = v121;
      *(_OWORD *)uint64_t v6 = v78;
      *(_OWORD *)(v6 + 16) = v79;
      char v80 = (void *)(v53 + (v55 << 6));
      v80[6] = 0;
      v80[7] = 0;
      v80[5] = 0;
      *(_OWORD *)(v80 + 5) = *(_OWORD *)__p;
      v80[7] = v123;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v123 = 0;
      uint64_t v26 = v6 + 64;
LABEL_54:
      a1[1] = v26;
      return;
    }
    unint64_t v62 = ((uint64_t)(v52 - v53) >> 6) + 1;
    if (v62 >> 58) {
      sub_60548();
    }
    uint64_t v63 = v56 - v53;
    if (v63 >> 5 > v62) {
      unint64_t v62 = v63 >> 5;
    }
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v64 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v64 = v62;
    }
    char v131 = a1 + 2;
    if (v64) {
      unint64_t v64 = (unint64_t)sub_72AB8(v64);
    }
    else {
      uint64_t v65 = 0;
    }
    unint64_t v81 = v64 + (v55 << 6);
    char v128 = (char *)v64;
    *(void *)&long long v129 = v81;
    *((void *)&v129 + 1) = v81;
    int v130 = (char *)(v64 + (v65 << 6));
    if (v55 == v65)
    {
      if (v54 < 1)
      {
        if (v6 == v53) {
          unint64_t v83 = 1;
        }
        else {
          unint64_t v83 = v54 >> 5;
        }
        char v135 = a1 + 2;
        char v84 = (char *)sub_72AB8(v83);
        uint64_t v86 = v129;
        if (*((void *)&v129 + 1) == (void)v129)
        {
          int64x2_t v91 = vdupq_n_s64(v129);
          int v87 = &v84[64 * (v83 >> 2)];
        }
        else
        {
          int v87 = &v84[64 * (v83 >> 2) + *((void *)&v129 + 1) - v129];
          char v88 = &v84[64 * (v83 >> 2)];
          do
          {
            long long v89 = *(_OWORD *)(v86 + 16);
            uint64_t v90 = *(void *)(v86 + 32);
            *(_OWORD *)char v88 = *(_OWORD *)v86;
            *((_OWORD *)v88 + 1) = v89;
            *((void *)v88 + 4) = v90;
            *((void *)v88 + 5) = 0;
            *((void *)v88 + 6) = 0;
            *((void *)v88 + 7) = 0;
            *(_OWORD *)(v88 + 40) = *(_OWORD *)(v86 + 40);
            *((void *)v88 + 7) = *(void *)(v86 + 56);
            *(void *)(v86 + 40) = 0;
            *(void *)(v86 + 48) = 0;
            *(void *)(v86 + 56) = 0;
            v88 += 64;
            v86 += 64;
          }
          while (v88 != v87);
          int64x2_t v91 = (int64x2_t)v129;
        }
        int v92 = v128;
        char v93 = v130;
        char v128 = v84;
        *(void *)&long long v129 = &v84[64 * (v83 >> 2)];
        int64x2_t v133 = v91;
        *((void *)&v129 + 1) = v87;
        int v130 = &v84[64 * v85];
        int v132 = v92;
        uint64_t v134 = (uint64_t)v93;
        sub_1E7D20((uint64_t)&v132);
        unint64_t v81 = *((void *)&v129 + 1);
      }
      else
      {
        unint64_t v82 = v55 + 2;
        if (v55 >= -1) {
          unint64_t v82 = v55 + 1;
        }
        v81 -= v82 >> 1 << 6;
        *(void *)&long long v129 = v81;
        *((void *)&v129 + 1) = v81;
      }
    }
    long long v94 = v120;
    uint64_t v95 = v121;
    *(_OWORD *)unint64_t v81 = v119;
    *(_OWORD *)(v81 + 16) = v94;
    *(void *)(v81 + 32) = v95;
    *(void *)(v81 + 40) = 0;
    *(void *)(v81 + 48) = 0;
    *(void *)(v81 + 56) = 0;
    *(_OWORD *)(v81 + 40) = *(_OWORD *)__p;
    *(void *)(v81 + 56) = v123;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v123 = 0;
    *((void *)&v129 + 1) += 64;
    uint64_t v96 = sub_1E7D84((uint64_t)(a1 + 2), v6, v6, *a1, *a1, v129, v129);
    *(void *)&long long v129 = v96;
    uint64_t v97 = a1[1];
    uint64_t v98 = *((void *)&v129 + 1);
    if (v6 != v97)
    {
      do
      {
        long long v99 = *(_OWORD *)(v6 + 16);
        uint64_t v100 = *(void *)(v6 + 32);
        *(_OWORD *)uint64_t v98 = *(_OWORD *)v6;
        *(_OWORD *)(v98 + 16) = v99;
        *(void *)(v98 + 32) = v100;
        *(void *)(v98 + 40) = 0;
        *(void *)(v98 + 48) = 0;
        *(void *)(v98 + 56) = 0;
        *(_OWORD *)(v98 + 40) = *(_OWORD *)(v6 + 40);
        *(void *)(v98 + 56) = *(void *)(v6 + 56);
        *(void *)(v6 + 40) = 0;
        *(void *)(v6 + 48) = 0;
        *(void *)(v6 + 56) = 0;
        v98 += 64;
        v6 += 64;
      }
      while (v6 != v97);
      uint64_t v96 = v129;
      uint64_t v6 = a1[1];
    }
    uint64_t v101 = *a1;
    *a1 = v96;
    a1[1] = v98;
    uint64_t v102 = a1[2];
    a1[2] = (uint64_t)v130;
    *((void *)&v129 + 1) = v6;
    int v130 = (char *)v102;
    char v128 = (char *)v101;
    *(void *)&long long v129 = v101;
    sub_1E7D20((uint64_t)&v128);
    uint64_t v41 = __p[0];
    if (!__p[0]) {
      return;
    }
    goto LABEL_129;
  }
  unint64_t v47 = *(char **)(v6 + 40);
  uint64_t v48 = *(double **)(v6 + 48);
  uint64_t v49 = *((void *)&v124 + 1);
  if (v47 == (char *)v48)
  {
    uint64_t v48 = *(double **)(v6 + 40);
LABEL_132:
    unint64_t v103 = *(void *)(v6 + 56);
    if ((unint64_t)v48 >= v103)
    {
      uint64_t v105 = ((char *)v48 - v47) >> 4;
      unint64_t v106 = v105 + 1;
      if ((unint64_t)(v105 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v107 = v103 - (void)v47;
      if (v107 >> 3 > v106) {
        unint64_t v106 = v107 >> 3;
      }
      if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v108 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v108 = v106;
      }
      if (v108) {
        unint64_t v108 = (unint64_t)sub_10724(v108);
      }
      else {
        uint64_t v109 = 0;
      }
      char v115 = (void *)(v108 + 16 * v105);
      unint64_t v116 = v108 + 16 * v109;
      *char v115 = v124;
      v115[1] = v49;
      __int16 v104 = v115 + 2;
      char v118 = *(char **)(v6 + 40);
      char v117 = *(char **)(v6 + 48);
      if (v117 != v118)
      {
        do
        {
          *((_OWORD *)v115 - 1) = *((_OWORD *)v117 - 1);
          v115 -= 2;
          v117 -= 16;
        }
        while (v117 != v118);
        char v117 = *(char **)(v6 + 40);
      }
      *(void *)(v6 + 40) = v115;
      *(void *)(v6 + 48) = v104;
      *(void *)(v6 + 56) = v116;
      if (v117) {
        operator delete(v117);
      }
    }
    else
    {
      *(void *)uint64_t v48 = v124;
      *((void *)v48 + 1) = v49;
      __int16 v104 = v48 + 2;
    }
    *(void *)(v6 + 48) = v104;
  }
  else
  {
    uint64_t v50 = *(double **)(v6 + 40);
    while (1)
    {
      double v51 = *v50;
      if (*((double *)&v124 + 1) >= *v50) {
        break;
      }
      v50 += 2;
      if (v50 == v48) {
        goto LABEL_132;
      }
    }
    double v110 = v50[1];
    if (*(double *)&v124 >= v51 || *((double *)&v124 + 1) > v110)
    {
      if (*(double *)&v124 < v51 || *((double *)&v124 + 1) > v110)
      {
        if (*(double *)&v124 < v51 || *(double *)&v124 > v110 || *((double *)&v124 + 1) <= v110)
        {
          long long v119 = v124;
          sub_1E7A98(v6 + 40, (char *)v50, &v119);
        }
        else
        {
          v50[1] = *((double *)&v124 + 1);
        }
      }
    }
    else
    {
      *(void *)uint64_t v50 = v124;
    }
  }
}

void sub_1E7A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1E7A98(uint64_t a1, char *__src, _OWORD *a3)
{
  uint64_t v6 = *(char **)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    BOOL v12 = *(char **)a1;
    unint64_t v13 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v13 >> 60) {
      sub_60548();
    }
    uint64_t v14 = __src - v12;
    uint64_t v15 = (__src - v12) >> 4;
    uint64_t v16 = v7 - (void)v12;
    if (v16 >> 3 > v13) {
      unint64_t v13 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v13;
    }
    if (v17)
    {
      BOOL v19 = (char *)sub_10724(v17);
    }
    else
    {
      BOOL v19 = 0;
      uint64_t v18 = 0;
    }
    unint64_t v20 = &v19[16 * v15];
    uint64_t v21 = &v19[16 * v18];
    if (v15 == v18)
    {
      if (v14 < 1)
      {
        if (v12 == __src) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v14 >> 3;
        }
        long long v24 = (char *)sub_10724(v23);
        unint64_t v20 = &v24[16 * (v23 >> 2)];
        uint64_t v21 = &v24[16 * v25];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v22 = v15 + 2;
        if (v15 >= -1) {
          unint64_t v22 = v15 + 1;
        }
        v20 -= 16 * (v22 >> 1);
      }
    }
    *(_OWORD *)unint64_t v20 = *a3;
    uint64_t v26 = *(char **)a1;
    uint64_t v27 = v20;
    if (*(char **)a1 != __src)
    {
      unint64_t v28 = __src;
      uint64_t v29 = v20;
      do
      {
        uint64_t v27 = v29 - 16;
        *((_OWORD *)v29 - 1) = *((_OWORD *)v28 - 1);
        v28 -= 16;
        v29 -= 16;
      }
      while (v28 != v26);
    }
    unint64_t v30 = *(unsigned char **)(a1 + 8);
    uint64_t v31 = v30 - __src;
    if (v30 != __src) {
      memmove(v20 + 16, __src, v30 - __src);
    }
    uint64_t v32 = *(char **)a1;
    *(void *)a1 = v27;
    *(void *)(a1 + 8) = &v20[v31 + 16];
    *(void *)(a1 + 16) = v21;
    if (v32)
    {
      operator delete(v32);
    }
  }
  else if (__src == v6)
  {
    *(_OWORD *)long long __src = *a3;
    *(void *)(a1 + 8) = __src + 16;
  }
  else
  {
    unsigned int v8 = __src + 16;
    BOOL v9 = v6 - 16;
    BOOL v10 = *(_OWORD **)(a1 + 8);
    while (v9 < v6)
    {
      long long v11 = *(_OWORD *)v9;
      v9 += 16;
      *v10++ = v11;
    }
    *(void *)(a1 + 8) = v10;
    if (v6 != v8) {
      memmove(&v6[-16 * ((v6 - v8) >> 4)], __src, v6 - v8);
    }
    *(_OWORD *)long long __src = *a3;
  }
}

void sub_1E7CAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1E7CC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  unsigned int v8 = operator new(0x10uLL);
  *unsigned int v8 = v6;
  v8[1] = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v8 + 2;
  *(void *)(a1 + 56) = v8 + 2;
  return a1;
}

uint64_t sub_1E7D20(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 64;
    long long v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1E7D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 64)
  {
    long long v8 = *(_OWORD *)(a3 - 48);
    uint64_t v9 = *(void *)(a3 - 32);
    *(_OWORD *)(result - 64) = *(_OWORD *)(a3 - 64);
    *(_OWORD *)(result - 48) = v8;
    *(void *)(result - 32) = v9;
    *(void *)(result - 24) = 0;
    *(void *)(result - 16) = 0;
    *(void *)(result - 8) = 0;
    *(_OWORD *)(result - 24) = *(_OWORD *)(a3 - 24);
    *(void *)(result - 8) = *(void *)(a3 - 8);
    result -= 64;
    *(void *)(a3 - 24) = 0;
    *(void *)(a3 - 16) = 0;
    *(void *)(a3 - 8) = 0;
  }
  return result;
}

uint64_t sub_1E7DD4(_DWORD *a1, int a2)
{
  int v2 = a1[6];
  uint64_t v3 = a1[8];
  if (v2 <= 1836343850)
  {
    if (v2 == 1667326771) {
      return (4 * a2);
    }
    if (v2 != 1819304813) {
      goto LABEL_4;
    }
    return (a1[10] * a2);
  }
  if (v2 == 1836344107 || v2 == 1836343851) {
    return (a1[10] * a2);
  }
LABEL_4:
  if (a1[9] != a2)
  {
    long long v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        uint64_t v9 = "HP_FormatList.cpp";
        __int16 v10 = 1024;
        int v11 = 364;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"illegal buffer size\"", (uint8_t *)&v8, 0x12u);
      }
    }
  }
  return v3;
}

void sub_1E7F08(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(*(void *)a2 + 24);
  sub_43F38(&v22, (uint64_t *)(v3 + 32), "", 59);
  long long v4 = (unsigned int *)v22;
  uint64_t v5 = *(void *)(v22 + 192);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(v22 + 144);
    sub_1EE408(*(os_unfair_lock_s **)(v22 + 192), 1, a2[3], *(void *)(v3 + 72));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 248))(&v20, v5, 1, v6);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 256))(&v19, v5, 1, v6);
    if (v21 && v21->__shared_owners_ != -1)
    {
      int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 240))(v5, v6);
      uint64_t v17 = 0x6F7574706D757465;
      int v18 = v7;
      if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v17))
      {
        int buf = 0;
        (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, int *))(*(void *)v5 + 48))(v5, &v17, 0, 0, 4, &buf);
      }
      operator new();
    }
    int v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      buf_4 = "RoutingHandler_Playback_Unk.cpp";
      __int16 v25 = 1024;
      int v26 = 73;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate mute control.\"", (uint8_t *)&buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to locate mute control.");
  }
  int v11 = (os_log_t *)sub_32A48(13);
  BOOL v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    (*(void (**)(uint64_t *__return_ptr, unsigned int *))(*(void *)v4 + 144))(&v16, v4);
    uint64_t v13 = v16;
    sub_2417C(v31, v4[36]);
    if (v32 >= 0) {
      uint64_t v14 = v31;
    }
    else {
      uint64_t v14 = *(uint8_t **)v31;
    }
    int buf = 136315906;
    buf_4 = "RoutingHandler_Playback_Unk.cpp";
    __int16 v25 = 1024;
    int v26 = 66;
    __int16 v27 = 2112;
    uint64_t v28 = v13;
    __int16 v29 = 2080;
    unint64_t v30 = v14;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [ioDevice is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", (uint8_t *)&buf, 0x26u);
    if (v32 < 0) {
      operator delete(*(void **)v31);
    }
    sub_72924((uint64_t)&v16);
  }
  uint64_t v15 = __cxa_allocate_exception(0x10uLL);
  *(void *)uint64_t v15 = &off_6414D8;
  void v15[2] = 2003329396;
}

void sub_1E8760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,std::__shared_weak_count *a41)
{
  if (a41) {
    sub_4636C(a41);
  }
  _Unwind_Resume(a1);
}

void sub_1E8918()
{
}

void sub_1E8930(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v10 = (int *)(a4 + 16);
  if (!*(unsigned char *)(a4 + 20)) {
    __int16 v10 = (int *)(a4 + 12);
  }
  unsigned int v11 = *v10;
  sub_E5310((uint64_t)v43, 1, *v10, *(_DWORD *)(a2 + 264));
  if ((byte_64BBAC & 1) == 0)
  {
    byte_64BBAC = 1;
    *(void *)int buf = 0;
    unsigned int v12 = sub_1617A8(@"MinOutputVolume", (void **)buf);
    float v13 = *(double *)buf;
    if (!v12) {
      float v13 = 0.0;
    }
    byte_64BBA4 = v12;
    dword_64BBA8 = LODWORD(v13);
    if (!v12) {
      goto LABEL_12;
    }
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
      __int16 v47 = 1024;
      int v48 = 810;
      __int16 v49 = 2080;
      uint64_t v50 = "MinOutputVolume";
      __int16 v51 = 2048;
      double v52 = *(float *)&dword_64BBA8;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f dB", buf, 0x26u);
    }
  }
  if (byte_64BBA4)
  {
    unint64_t v42 = dword_64BBA8 | 0x100000000;
    goto LABEL_13;
  }
LABEL_12:
  unint64_t v42 = sub_380720(a3, (uint64_t)v43);
LABEL_13:
  if ((byte_64BBB8 & 1) == 0)
  {
    byte_64BBB8 = 1;
    *(void *)int buf = 0;
    unsigned int v17 = sub_1617A8(@"MaxOutputVolume", (void **)buf);
    float v18 = *(double *)buf;
    if (!v17) {
      float v18 = 0.0;
    }
    byte_64BBB0 = v17;
    dword_64BBB4 = LODWORD(v18);
    if (!v17) {
      goto LABEL_22;
    }
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
      __int16 v47 = 1024;
      int v48 = 826;
      __int16 v49 = 2080;
      uint64_t v50 = "MaxOutputVolume";
      __int16 v51 = 2048;
      double v52 = *(float *)&dword_64BBB4;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f dB", buf, 0x26u);
    }
  }
  if (!byte_64BBB0)
  {
LABEL_22:
    unint64_t v16 = sub_38098C(a3, (uint64_t)v43);
    goto LABEL_23;
  }
  unint64_t v16 = dword_64BBB4 | 0x100000000;
LABEL_23:
  unint64_t v21 = sub_37F844(a3, (uint64_t)v43, a5);
  unint64_t v23 = v22;
  if ((_BYTE)v22)
  {
    long long v24 = (os_log_t *)sub_32A48(20);
    __int16 v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        __int16 v47 = 1024;
        int v48 = 374;
        __int16 v49 = 1024;
        LODWORD(v50) = a5;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Extended volume description available for volume control scope %u", buf, 0x18u);
      }
    }
  }
  unint64_t v26 = sub_37F520(a3, (uint64_t)v43);
  unint64_t v27 = v26;
  if ((v26 & 0xFF00000000) == 0)
  {
    uint64_t v28 = *(void *)(a4 + 104);
    unsigned int v29 = *(_DWORD *)(a2 + 144);
    unint64_t v30 = sub_3767DC(v28, v11);
    if (v31)
    {
      unint64_t v34 = *(void *)(v30 + 8);
      unint64_t v32 = v30 + 8;
      unint64_t v33 = v34;
      if (!v34)
      {
        uint64_t v39 = 0;
        goto LABEL_42;
      }
      unint64_t v35 = v32;
      do
      {
        unsigned int v36 = *(_DWORD *)(v33 + 28);
        BOOL v37 = v36 >= v29;
        if (v36 >= v29) {
          uint64_t v38 = (unint64_t *)v33;
        }
        else {
          uint64_t v38 = (unint64_t *)(v33 + 8);
        }
        if (v37) {
          unint64_t v35 = v33;
        }
        unint64_t v33 = *v38;
      }
      while (*v38);
      if (v35 != v32 && *(_DWORD *)(v35 + 28) <= v29)
      {
        int v41 = *(_DWORD *)(v35 + 32);
        unsigned int v40 = v41 & 0xFFFFFF00;
        LODWORD(v33) = v41;
        uint64_t v39 = 0x100000000;
        goto LABEL_43;
      }
    }
    uint64_t v39 = 0;
    LODWORD(v33) = 0;
LABEL_42:
    unsigned int v40 = 0;
LABEL_43:
    unint64_t v27 = v39 | v40 | v33;
  }
  *a1 = v42;
  a1[1] = v16;
  a1[2] = 0;
  a1[3] = v21;
  a1[4] = v23;
  a1[5] = v27 & 0xFFFFFFFFFFLL | v26 & 0xFFFFFF0000000000;
  if (__p)
  {
    int v45 = __p;
    operator delete(__p);
  }
}

void sub_1E8D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E8DA4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a2)
  {
    int v92 = (os_log_t *)sub_32A48(13);
    char v93 = *v92;
    if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
    {
      *(float *)unint64_t v108 = 4.8151e-34;
      uint64_t v109 = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v110 = 1024;
      int v111 = 393;
      _os_log_impl(&def_1E50E8, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v108, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_1E8930((unint64_t *)v108, (uint64_t)a3, a4, a5, a6);
  unsigned int v11 = (os_log_t *)sub_32A48(20);
  unsigned int v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(v103, a3[36]);
    int v13 = SBYTE3(v105);
    uint64_t v14 = *(unsigned char **)v103;
    sub_E3E20(&__p, (uint64_t)v108);
    uint64_t v15 = v103;
    if (v13 < 0) {
      uint64_t v15 = v14;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 396;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)uint64_t v107 = v15;
    *(_WORD *)&v107[8] = 2080;
    *(void *)&v107[10] = p_p;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VolumeProperties for Port: %s is %s", buf, 0x26u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SBYTE3(v105) < 0) {
      operator delete(*(void **)v103);
    }
  }
  double v17 = (*(double (**)(uint64_t))(*(void *)a1 + 96))(a1);
  double v19 = v18;
  *(double *)&long long v101 = v17;
  *((double *)&v101 + 1) = v18;
  unsigned int v20 = a3[36];
  if (v20 != 1886745455 && v20 != 1885892727) {
    goto LABEL_26;
  }
  if (sub_207DFC())
  {
    if (!(_BYTE)v109)
    {
LABEL_21:
      int v23 = 1;
      goto LABEL_28;
    }
    double v17 = *(float *)v108;
LABEL_18:
    double v21 = (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
    if (v21 != v22) {
      double v17 = v21 + (v17 + 76.0) / 78.0 * (v22 - v21);
    }
    *(double *)&long long v101 = v17;
    goto LABEL_21;
  }
  if (MGGetBoolAnswer())
  {
    int v23 = MGGetBoolAnswer();
    if ((_BYTE)v109)
    {
      double v17 = *(float *)v108;
      *(double *)&long long v101 = *(float *)v108;
      if (v23) {
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_26:
    int v23 = 0;
    if ((_BYTE)v109)
    {
      double v17 = *(float *)v108;
      *(double *)&long long v101 = *(float *)v108;
    }
  }
LABEL_28:
  if ((_BYTE)v110)
  {
    double v19 = *((float *)&v109 + 1);
    *((double *)&v101 + 1) = *((float *)&v109 + 1);
    if (!v23) {
      goto LABEL_43;
    }
    double v24 = (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
    if (v24 != v25) {
      double v19 = v24 + (v19 + 76.0) / 78.0 * (v25 - v24);
    }
    *((double *)&v101 + 1) = v19;
  }
  else if (!v23)
  {
    goto LABEL_43;
  }
  uint64_t v26 = sub_32A48(20);
  uint64_t v27 = sub_32A48(38);
  char v28 = 0;
  uint64_t v29 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v30 = *(void *)(v26 + 8);
  while (1)
  {
    uint64_t v31 = *(int *)&buf[4 * v29];
    char v32 = v28;
    if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
      break;
    }
    char v28 = 1;
    uint64_t v29 = 1;
    if (v32) {
      goto LABEL_40;
    }
  }
  if ((v30 & v31) == 0) {
    uint64_t v26 = v27;
  }
LABEL_40:
  unint64_t v33 = *(NSObject **)v26;
  if (v33 && os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 439;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(double *)uint64_t v107 = v17;
    *(_WORD *)&v107[8] = 2048;
    *(double *)&v107[10] = v19;
    _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Volume was rescaled to match hardware range. mMinimum: %f mMaximum: %f", buf, 0x26u);
  }
LABEL_43:
  uint64_t v34 = v115;
  uint64_t v35 = v114;
  *(void *)int buf = (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
  *(void *)&buf[8] = v36;
  *(_DWORD *)&buf[16] = 0;
  *(void *)&v107[4] = 0;
  *(void *)&v107[12] = 0;
  if (v113)
  {
    uint64_t v37 = v112;
    if (v112 != qword_6681E0)
    {
      uint64_t v38 = sub_32A48(20);
      uint64_t v39 = sub_32A48(38);
      char v40 = 0;
      uint64_t v41 = 0;
      *(void *)unint64_t v103 = 0x100000002;
      uint64_t v42 = *(void *)(v38 + 8);
      while (1)
      {
        uint64_t v43 = *(int *)&v103[4 * v41];
        char v44 = v40;
        if (((v42 & v43) != 0) != ((*(void *)(v39 + 8) & v43) != 0)) {
          break;
        }
        char v40 = 1;
        uint64_t v41 = 1;
        if (v44)
        {
          if ((v42 & 1) == 0) {
            goto LABEL_60;
          }
          goto LABEL_53;
        }
      }
      if ((v42 & v43) == 0) {
        uint64_t v38 = v39;
      }
      if (*(void *)(v38 + 8))
      {
LABEL_53:
        int v45 = *(NSObject **)v38;
        if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          sub_375244(&__p, (unsigned int *)v37);
          int v46 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)unint64_t v103 = 136315650;
          *(void *)&v103[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&v103[12] = 1024;
          *(_DWORD *)&v103[14] = 454;
          __int16 v104 = 2080;
          uint64_t v105 = v46;
          _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found extended volume description: %s", v103, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
LABEL_60:
      uint64_t v47 = sub_32A48(20);
      uint64_t v48 = sub_32A48(38);
      char v49 = 0;
      uint64_t v50 = 0;
      *(void *)unint64_t v103 = 0x100000002;
      uint64_t v51 = *(void *)(v47 + 8);
      while (1)
      {
        uint64_t v52 = *(int *)&v103[4 * v50];
        char v53 = v49;
        if (((v51 & v52) != 0) != ((*(void *)(v48 + 8) & v52) != 0)) {
          break;
        }
        char v49 = 1;
        uint64_t v50 = 1;
        if (v53) {
          goto LABEL_66;
        }
      }
      if ((v51 & v52) == 0) {
        uint64_t v47 = v48;
      }
LABEL_66:
      uint64_t v54 = *(NSObject **)v47;
      if (v54 && os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        sub_375244(&__p, (unsigned int *)v37);
        uint64_t v55 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)unint64_t v103 = 136315650;
        *(void *)&v103[4] = "RoutingHandlerUtilities_Aspen.cpp";
        *(_WORD *)&v103[12] = 1024;
        *(_DWORD *)&v103[14] = 455;
        __int16 v104 = 2080;
        uint64_t v105 = v55;
        _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Found extended volume description: %s", v103, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (*(unsigned char *)(v37 + 4)) {
        unint64_t v56 = (unsigned int *)v37;
      }
      else {
        unint64_t v56 = (unsigned int *)&buf[16];
      }
      unsigned int v57 = *v56;
      *(_DWORD *)&buf[16] = v57;
      if (v57 >= 4)
      {
        unint64_t v58 = (os_log_t *)sub_32A48(13);
        uint64_t v59 = *v58;
        if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unint64_t v103 = 136315394;
          *(void *)&v103[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&v103[12] = 1024;
          *(_DWORD *)&v103[14] = 458;
          _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Logic error: a proper software volume mode was not specified in the routing database\"", v103, 0x12u);
        }
        unsigned int v57 = *(_DWORD *)&buf[16];
      }
      if (v57)
      {
        if (a3[36] == 1885888867)
        {
          long long v60 = (os_log_t *)sub_32A48(13);
          uint64_t v61 = *v60;
          if (*v60)
          {
            if (os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)unint64_t v103 = 136315394;
              *(void *)&v103[4] = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&v103[12] = 1024;
              *(_DWORD *)&v103[14] = 466;
              _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Logic error: attempting to use software volume for hearing aid compliance\"", v103, 0x12u);
            }
          }
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t, unsigned int *))(*(void *)a2 + 304))(v103, a2, a3);
        uint64_t v63 = *(void *)v103;
        uint64_t v62 = *(void *)&v103[8];
        *(void *)unint64_t v103 = 0;
        *(void *)&v103[8] = 0;
        unint64_t v64 = *(std::__shared_weak_count **)&v107[12];
        *(void *)&v107[4] = v63;
        *(void *)&v107[12] = v62;
        if (v64)
        {
          std::__shared_weak_count::__release_weak(v64);
          if (*(void *)&v103[8]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v103[8]);
          }
          uint64_t v62 = *(void *)&v107[12];
        }
        if (!v62 || *(void *)(v62 + 8) == -1)
        {
          uint64_t v65 = (os_log_t *)sub_32A48(19);
          uint64_t v66 = *v65;
          if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unint64_t v103 = 136315394;
            *(void *)&v103[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&v103[12] = 1024;
            *(_DWORD *)&v103[14] = 472;
            _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing database specified SW volume but no SW volume is associated with the aggregate device...falling back to HW-only volume", v103, 0x12u);
          }
          *(_DWORD *)&buf[16] = 0;
        }
        else if (*(_DWORD *)&buf[16] == 1)
        {
          if (*(unsigned char *)(v37 + 12)) {
            *(double *)int buf = *(float *)(v37 + 8);
          }
          if (*(unsigned char *)(v37 + 20)) {
            *(double *)&buf[8] = *(float *)(v37 + 16);
          }
          if (*(unsigned char *)(v37 + 40)) {
            long long v101 = *(_OWORD *)(v37 + 24);
          }
        }
      }
    }
  }
  uint64_t v67 = (*(uint64_t (**)(unsigned int *))(*(void *)a3 + 288))(a3);
  if (*(unsigned char *)(a7 + 24))
  {
    long long v68 = v101;
    if (*((double *)&v101 + 1) <= *(double *)&v101)
    {
      long long v69 = *(float **)(a7 + 8);
    }
    else
    {
      long long v70 = *(float **)a7;
      long long v69 = *(float **)(a7 + 8);
      if (*(float **)a7 != v69)
      {
        while (1)
        {
          double v71 = *v70;
          if (*(double *)&v101 > v71 || *((double *)&v101 + 1) < v71) {
            break;
          }
          if (++v70 == v69) {
            goto LABEL_128;
          }
        }
      }
      if (v70 != v69)
      {
        for (unsigned int i = v70 + 1; i != v69; ++i)
        {
          double v75 = *i;
          if (*(double *)&v68 <= v75 && *((double *)&v68 + 1) >= v75) {
            *v70++ = *i;
          }
        }
      }
      if (v70 != v69)
      {
        long long v69 = v70;
        *(void *)(a7 + 8) = v70;
      }
    }
LABEL_128:
    unsigned int v95 = v67;
    uint64_t v96 = a1;
    uint64_t v77 = (uint64_t)v69 - *(void *)a7;
    if ((unint64_t)v77 < 5)
    {
      long long v78 = 0;
      uint64_t v85 = 0;
    }
    else
    {
      long long v78 = 0;
      long long v79 = 0;
      unint64_t v80 = 0;
      unint64_t v81 = v77 >> 2;
      if (v81 <= 2) {
        uint64_t v82 = 2;
      }
      else {
        uint64_t v82 = v81;
      }
      for (uint64_t j = 1; j != v82; ++j)
      {
        float64x2_t v84 = vcvtq_f64_f32(*(float32x2_t *)(*(void *)a7 + 4 * j - 4));
        if ((unint64_t)v79 >= v80)
        {
          float64x2_t v97 = v84;
          uint64_t v86 = (v79 - v78) >> 4;
          unint64_t v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 60) {
            sub_60548();
          }
          if ((uint64_t)(v80 - (void)v78) >> 3 > v87) {
            unint64_t v87 = (uint64_t)(v80 - (void)v78) >> 3;
          }
          if (v80 - (unint64_t)v78 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v88 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v88 = v87;
          }
          if (v88) {
            unint64_t v88 = (unint64_t)sub_10724(v88);
          }
          else {
            uint64_t v89 = 0;
          }
          uint64_t v90 = (float64x2_t *)(v88 + 16 * v86);
          float64x2_t *v90 = v97;
          uint64_t v85 = (uint64_t)&v90[1];
          if (v79 == v78)
          {
            int64x2_t v91 = (char *)v90;
          }
          else
          {
            do
            {
              int64x2_t v91 = (char *)&v90[-1];
              v90[-1] = *((float64x2_t *)v79 - 1);
              v79 -= 16;
              --v90;
            }
            while (v79 != v78);
          }
          unint64_t v80 = v88 + 16 * v89;
          if (v78) {
            operator delete(v78);
          }
          long long v78 = v91;
        }
        else
        {
          *(float64x2_t *)long long v79 = v84;
          uint64_t v85 = (uint64_t)(v79 + 16);
        }
        long long v79 = (char *)v85;
      }
    }
    uint64_t v98 = 0;
    long long v99 = 0;
    uint64_t v100 = 0;
    sub_A2B64(&v98, v78, v85, (v85 - (uint64_t)v78) >> 4);
    (*(void (**)(uint64_t, void **, unsigned char *, void))(*(void *)v96 + 88))(v96, &v98, buf, v95);
    if (v98)
    {
      long long v99 = v98;
      operator delete(v98);
    }
    if (v78) {
      operator delete(v78);
    }
  }
  else
  {
    if (v34) {
      uint64_t v73 = v35;
    }
    else {
      uint64_t v73 = 0;
    }
    (*(void (**)(uint64_t, long long *, uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 80))(a1, &v101, v73 | (v34 << 32), buf, v67);
  }
  if (*(void *)&v107[12]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v107[12]);
  }
}

void sub_1E99C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a34) {
    std::__shared_weak_count::__release_weak(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1E9A5C(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v10 = (os_log_t *)sub_32A48(19);
  unsigned int v11 = *v10;
  if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    sub_383858(&__p, a2 + 8);
    unsigned int v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 581;
    __int16 v47 = 2080;
    uint64_t v48 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating PerVAD Software Volume Control for %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v13 = *(void *)(a4 + 192);
  if (!v13)
  {
    uint64_t v31 = (os_log_t *)sub_32A48(13);
    char v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 584;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_1EA27C((uint64_t *)buf, *(void *)(a4 + 192), 0x6F757470u, 0, 0, 74);
  *a1 = *(_OWORD *)buf;
  uint64_t v14 = *(void *)v13;
  strcpy(buf, "cvodbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if (((*(uint64_t (**)(uint64_t, unsigned char *))(v14 + 16))(v13, buf) & 1) == 0) {
    goto LABEL_20;
  }
  sub_1EA32C(&v44, v13, COERCE_DOUBLE(1735159650));
  if (!v45 || !v44)
  {
    sub_206D8((uint64_t)&v44);
LABEL_20:
    int v23 = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    char v37 = 0;
    goto LABEL_21;
  }
  sub_156EDC((uint64_t)&v42, v44);
  uint64_t v15 = v42;
  unint64_t v16 = v43;
  if (v42 == v43)
  {
    uint64_t v26 = (os_log_t *)sub_32A48(20);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v13 + 128))(v40, v13);
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 544;
      __int16 v47 = 2112;
      uint64_t v48 = (std::string *)v40[0];
      unsigned int v20 = "%25s:%-5d Device %@ VolumeCurveProperty returned empty array";
      double v21 = v27;
      os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
LABEL_37:
      _os_log_impl(&def_1E50E8, v21, v22, v20, buf, 0x1Cu);
      sub_72924((uint64_t)v40);
    }
  }
  else
  {
    double v17 = v42;
    do
    {
      if (*v17 != 0.0)
      {
        char v28 = (os_log_t *)sub_32A48(20);
        uint64_t v29 = *v28;
        if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
        {
          sub_21C8C(v38, "VolumeCurve: ");
          sub_1EA468((uint64_t)v40, v15, v16, (uint64_t)v38);
          uint64_t v30 = v40;
          if (v41 < 0) {
            uint64_t v30 = (void **)v40[0];
          }
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 559;
          __int16 v47 = 2080;
          uint64_t v48 = (std::string *)v30;
          _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Volume curve entries: %s", buf, 0x1Cu);
          if (v41 < 0) {
            operator delete(v40[0]);
          }
          if (v39 < 0) {
            operator delete(v38[0]);
          }
        }
        memset(&__p, 0, sizeof(__p));
        sub_15DF18(&__p, v15, (uint64_t)v16, v16 - v15);
        int v23 = 1;
        goto LABEL_48;
      }
      ++v17;
    }
    while (v17 != v43);
    double v18 = (os_log_t *)sub_32A48(20);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v13 + 128))(v40, v13);
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 552;
      __int16 v47 = 2112;
      uint64_t v48 = (std::string *)v40[0];
      unsigned int v20 = "%25s:%-5d Device %@ VolumeCurveProperty returned array of zeroes.";
      double v21 = v19;
      os_log_type_t v22 = OS_LOG_TYPE_ERROR;
      goto LABEL_37;
    }
  }
  int v23 = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
LABEL_48:
  char v37 = v23;
  if (v15) {
    operator delete(v15);
  }
  sub_206D8((uint64_t)&v44);
LABEL_21:
  sub_1EA68C((uint64_t)buf, (uint64_t)&__p);
  uint64_t v24 = *(void *)a1;
  sub_1EA68C((uint64_t)v34, (uint64_t)buf);
  sub_1E8DA4(v24, a3, (unsigned int *)a4, a5, a2, 1, (uint64_t)v34);
  if (v35 && v34[0])
  {
    v34[1] = v34[0];
    operator delete(v34[0]);
  }
  int v25 = *(_DWORD *)(a4 + 264);
  if (v25 == 1635085420 || v25 == 1633759844) {
    operator new();
  }
  if (BYTE4(v48) && *(void *)buf)
  {
    *(void *)&buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (v23)
  {
    if (__p.__r_.__value_.__r.__words[0]) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1EA054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (v33) {
    operator delete(v33);
  }
  sub_206D8((uint64_t)&a30);
  if (a2 == 1)
  {
    char v37 = __cxa_begin_catch(a1);
    uint64_t v38 = (os_log_t *)sub_32A48(20);
    char v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = (*(uint64_t (**)(void *))(*(void *)v37 + 16))(v37);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v32 + 128))(&a27, v32);
      uint64_t v41 = a27;
      *(_DWORD *)(v34 - 144) = 136315906;
      *(void *)(v31 + 4) = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)(v34 - 132) = 1024;
      *(_DWORD *)(v31 + 14) = 567;
      *(_WORD *)(v34 - 126) = 2080;
      *(void *)(v31 + 20) = v40;
      *(_WORD *)(v34 - 116) = 2112;
      *(void *)(v31 + 30) = v41;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Caught exception %s getting volume curve from device %@", (uint8_t *)(v34 - 144), 0x26u);
      sub_72924((uint64_t)&a27);
    }
    __cxa_end_catch();
    JUMPOUT(0x1E9CC4);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v30 + 8);
  if (v42) {
    sub_4636C(v42);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1EA27C(uint64_t *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  unsigned int v12 = operator new(0x1F8uLL);
  v12[1] = 0;
  void v12[2] = 0;
  *unsigned int v12 = off_63E958;
  uint64_t result = sub_201874((uint64_t)(v12 + 3), a2, a3, a4, a5, a6, 0);
  *a1 = result;
  a1[1] = (uint64_t)v12;
  return result;
}

void sub_1EA314(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1EA32C(unsigned char *a1, uint64_t a2, double a3)
{
  int v9 = 1685026403;
  double v10 = a3;
  if ((sub_FE748(a2) & 1) == 0)
  {
    LOBYTE(v14) = 0;
    char v15 = 0;
    LOBYTE(v7) = 0;
    char v8 = 0;
    sub_206D8((uint64_t)&v14);
LABEL_8:
    *a1 = 0;
    a1[8] = 0;
    return sub_206D8((uint64_t)&v7);
  }
  LOBYTE(v14) = 0;
  char v15 = 0;
  LOBYTE(v7) = 0;
  char v8 = 0;
  sub_206D8((uint64_t)&v14);
  if (!sub_FE7BC(a2)) {
    goto LABEL_8;
  }
  uint64_t v14 = 0;
  if (sub_FE830(a2)) {
    goto LABEL_8;
  }
  uint64_t v5 = v14;
  CFTypeRef v12 = v14;
  sub_170998(&v11, &v12);
  char v8 = 1;
  uint64_t v7 = v11;
  if (v5) {
    CFRelease(v5);
  }
  *(void *)a1 = v7;
  uint64_t v7 = 0;
  a1[8] = 1;
  return sub_206D8((uint64_t)&v7);
}

void sub_1EA468(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    uint64_t v7 = (void *)(a4 + 8);
    do
    {
      unint64_t v22 = *(void *)(a4 + 16);
      unint64_t v8 = v22;
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(void *)a4 = 0;
      float v9 = *v6;
      double v10 = (char *)HIBYTE(v8);
      int v11 = (char)v10;
      if ((char)v10 >= 0) {
        CFTypeRef v12 = v10;
      }
      else {
        CFTypeRef v12 = (char *)__p[1];
      }
      sub_5E220((uint64_t)&v24, (unint64_t)(v12 + 2));
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v13 = &v24;
      }
      else {
        uint64_t v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if (v12)
      {
        if (v11 >= 0) {
          uint64_t v14 = __p;
        }
        else {
          uint64_t v14 = (void **)__p[0];
        }
        memmove(v13, v14, (size_t)v12);
      }
      strcpy(&v12[(void)v13], ", ");
      std::to_string(&v23, v9);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v15 = &v23;
      }
      else {
        char v15 = (std::string *)v23.__r_.__value_.__r.__words[0];
      }
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v23.__r_.__value_.__l.__size_;
      }
      double v17 = std::string::append(&v24, (const std::string::value_type *)v15, size);
      std::string::size_type v18 = v17->__r_.__value_.__r.__words[0];
      v25[0] = v17->__r_.__value_.__l.__size_;
      *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
      char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      *(void *)a4 = v18;
      *uint64_t v7 = v25[0];
      *(void *)(a4 + 15) = *(void *)((char *)v25 + 7);
      *(unsigned char *)(a4 + 23) = v19;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      ++v6;
    }
    while (v6 != a3);
  }
  *(_OWORD *)a1 = *(_OWORD *)a4;
  *(void *)(a1 + 16) = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
}

void sub_1EA644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (v25 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1EA68C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_15DF18((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1EA6E8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1EA70C(uint64_t result, uint64_t a2, int a3)
{
  *(void *)uint64_t result = off_626CE0;
  *(void *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = 1937204590;
  *(_DWORD *)(result + 20) = a3;
  *(_DWORD *)(result + 24) = 0;
  *(unsigned char *)(result + 28) = 0;
  *(unsigned char *)(result + 32) = 0;
  if (!a2)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    long long v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        uint64_t v7 = "RoutingHandlerAction_BluetoothSoftwareVolume.h";
        __int16 v8 = 1024;
        int v9 = 28;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v6, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return result;
}

void sub_1EA83C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1EA85C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1EA880(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63E958;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1EA8D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63E958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1EA8F4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v13 = (os_log_t *)sub_32A48(18);
  uint64_t v14 = *v13;
  if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_383858(&__p, a2 + 8);
    char v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 641;
    __int16 v30 = 2080;
    uint64_t v31 = v15;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating Global Volume Control for %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v16 = *(void *)(a4 + 192);
  if (!v16)
  {
    unsigned int v20 = (os_log_t *)sub_32A48(13);
    double v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 644;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  (*(void (**)(unsigned char *__return_ptr, void, uint64_t, void))(*(void *)v16 + 256))(buf, *(void *)(a4 + 192), 1, *(unsigned int *)(a4 + 144));
  if (!*(void *)&buf[8]) {
    goto LABEL_31;
  }
  double v17 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&buf[8]);
  if (v17) {
    uint64_t v18 = *(void *)buf;
  }
  else {
    uint64_t v18 = 0;
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v18)
  {
LABEL_31:
    std::string v23 = (os_log_t *)sub_32A48(13);
    std::string v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 647;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate output volume control\"", buf, 0x12u);
    }
    int v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Unable to locate output volume control");
  }
  LOBYTE(v26[0]) = 0;
  char v27 = 0;
  sub_1E8DA4(v18, a3, (unsigned int *)a4, a5, a2, 0, (uint64_t)v26);
  if (v27 && v26[0])
  {
    v26[1] = v26[0];
    operator delete(v26[0]);
  }
  int v19 = *(_DWORD *)(a4 + 264);
  if ((v19 == 1635085420 || v19 == 1633759844) && ((a7 & 1) != 0 || sub_24FF4C(*(void *)(a4 + 192)))) {
    operator new();
  }
  *a1 = v18;
  a1[1] = (uint64_t)v17;
  if (v17)
  {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_4636C(v17);
  }
}

void sub_1EACD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void sub_1EAD34(unint64_t *a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  if (!*(void *)(a3 + 192))
  {
    uint64_t v85 = (os_log_t *)sub_32A48(13);
    uint64_t v86 = *v85;
    if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 675;
      _os_log_impl(&def_1E50E8, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unsigned int v13 = *(_DWORD *)(a3 + 144);
  if (v13 != 1886216809 && v13 != 1886680169 && v13 != 1886222185) {
    goto LABEL_30;
  }
  if (a2 && (unint64_t v16 = sub_1EB5A8(*(_DWORD *)(a3 + 144), a4), (_BYTE)v16))
  {
    unint64_t v17 = HIDWORD(v16);
    float v18 = *((float *)&v16 + 1);
    uint64_t v19 = sub_32A48(20);
    uint64_t v20 = sub_32A48(38);
    char v21 = 0;
    uint64_t v22 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v23 = *(void *)(v19 + 8);
    while (1)
    {
      uint64_t v24 = *(int *)&buf[4 * v22];
      char v25 = v21;
      if (((v23 & v24) != 0) != ((*(void *)(v20 + 8) & v24) != 0)) {
        break;
      }
      char v21 = 1;
      uint64_t v22 = 1;
      if (v25)
      {
        if ((v23 & 1) == 0) {
          goto LABEL_44;
        }
        goto LABEL_40;
      }
    }
    if ((v23 & v24) == 0) {
      uint64_t v19 = v20;
    }
    if ((*(void *)(v19 + 8) & 1) == 0) {
      goto LABEL_44;
    }
LABEL_40:
    uint64_t v38 = *(NSObject **)v19;
    if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 698;
      __int16 v99 = 2048;
      double v100 = v18;
      char v39 = "%25s:%-5d Caller requested a check for default volume override, and we found %f for call routes.";
      goto LABEL_43;
    }
  }
  else
  {
    if ((byte_64BB60 & 1) == 0)
    {
      byte_64BB60 = 1;
      *(void *)int buf = 0;
      unsigned int v26 = sub_1617A8(@"CodecInputGain", (void **)buf);
      float v27 = *(double *)buf;
      if (!v26) {
        float v27 = 0.0;
      }
      LOBYTE(qword_64BB58) = v26;
      *((float *)&qword_64BB58 + 1) = v27;
      if (v26)
      {
        char v28 = (os_log_t *)sub_32A48(13);
        uint64_t v29 = *v28;
        if (*v28)
        {
          if (os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
            __int16 v97 = 1024;
            int v98 = 720;
            __int16 v99 = 2080;
            double v100 = COERCE_DOUBLE("CodecInputGain");
            __int16 v101 = 2048;
            *(double *)std::string __p = *((float *)&qword_64BB58 + 1);
            _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f dB", buf, 0x26u);
          }
        }
      }
    }
    if (!(_BYTE)qword_64BB58)
    {
LABEL_30:
      uint64_t v88 = sub_1EBB8C(v13, *(_DWORD *)(a3 + 264), a5, a6, a8, a7);
      goto LABEL_45;
    }
    unint64_t v17 = HIDWORD(qword_64BB58);
    float v30 = *((float *)&qword_64BB58 + 1);
    uint64_t v31 = sub_32A48(20);
    uint64_t v32 = sub_32A48(38);
    char v33 = 0;
    uint64_t v34 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v35 = *(void *)(v31 + 8);
    while (1)
    {
      uint64_t v36 = *(int *)&buf[4 * v34];
      char v37 = v33;
      if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
        break;
      }
      char v33 = 1;
      uint64_t v34 = 1;
      if (v37)
      {
        if ((v35 & 1) == 0) {
          goto LABEL_44;
        }
        goto LABEL_34;
      }
    }
    if ((v35 & v36) == 0) {
      uint64_t v31 = v32;
    }
    if ((*(void *)(v31 + 8) & 1) == 0) {
      goto LABEL_44;
    }
LABEL_34:
    uint64_t v38 = *(NSObject **)v31;
    if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 706;
      __int16 v99 = 2048;
      double v100 = v30;
      char v39 = "%25s:%-5d Caller requested a check for default volume override, and we found %f.";
LABEL_43:
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, v39, buf, 0x1Cu);
    }
  }
LABEL_44:
  uint64_t v88 = v17 | 0x100000000;
LABEL_45:
  v90[0] = 0;
  v90[1] = a7;
  long long v91 = *(_OWORD *)sub_3AEE60();
  int v92 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  uint64_t v93 = 0;
  unint64_t v40 = sub_37F844(a6, (uint64_t)v90, 0);
  unint64_t v42 = v41;
  int v43 = *(_DWORD *)(a3 + 264);
  float v44 = 0.0;
  if (sub_1EBDF0(v13, v43))
  {
LABEL_46:
    LOBYTE(v45) = 0;
    goto LABEL_75;
  }
  sub_1EBED0((uint64_t)buf, a7, v43, a5);
  unint64_t v46 = sub_380720(a6, (uint64_t)buf);
  if (*(void *)&__p[2])
  {
    uint64_t v103 = *(void *)&__p[2];
    operator delete(*(void **)&__p[2]);
  }
  if (BYTE4(v46))
  {
    float v44 = *(float *)&v46;
    unint64_t v45 = HIDWORD(v46);
  }
  else
  {
    unint64_t v54 = sub_376B1C(a8, a7);
    if (!v55) {
      goto LABEL_46;
    }
    unint64_t v58 = *(void *)(v54 + 8);
    unint64_t v56 = v54 + 8;
    unint64_t v57 = v58;
    if (!v58) {
      goto LABEL_46;
    }
    unint64_t v59 = v56;
    do
    {
      unsigned int v60 = *(_DWORD *)(v57 + 28);
      BOOL v61 = v60 >= v13;
      if (v60 >= v13) {
        uint64_t v62 = (unint64_t *)v57;
      }
      else {
        uint64_t v62 = (unint64_t *)(v57 + 8);
      }
      if (v61) {
        unint64_t v59 = v57;
      }
      unint64_t v57 = *v62;
    }
    while (*v62);
    if (v59 == v56 || *(_DWORD *)(v59 + 28) > v13) {
      goto LABEL_46;
    }
    float v44 = *(float *)(v59 + 32);
    LOBYTE(v45) = 1;
  }
  uint64_t v47 = sub_32A48(20);
  uint64_t v48 = sub_32A48(38);
  char v49 = 0;
  uint64_t v50 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v51 = *(void *)(v47 + 8);
  while (1)
  {
    uint64_t v52 = *(int *)&buf[4 * v50];
    char v53 = v49;
    if (((v51 & v52) != 0) != ((*(void *)(v48 + 8) & v52) != 0)) {
      break;
    }
    char v49 = 1;
    uint64_t v50 = 1;
    if (v53)
    {
      if ((v51 & 1) == 0) {
        goto LABEL_75;
      }
      goto LABEL_72;
    }
  }
  if ((v51 & v52) == 0) {
    uint64_t v47 = v48;
  }
  if (*(void *)(v47 + 8))
  {
LABEL_72:
    uint64_t v63 = *(NSObject **)v47;
    if (v63 && os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 160;
      __int16 v99 = 2048;
      double v100 = v44;
      _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning minimum volume %f.", buf, 0x1Cu);
    }
  }
LABEL_75:
  int v64 = *(_DWORD *)(a3 + 264);
  float v65 = 0.0;
  if (sub_1EBDF0(v13, v64))
  {
LABEL_76:
    LOBYTE(v66) = 0;
    goto LABEL_105;
  }
  sub_1EBED0((uint64_t)buf, a7, v64, a5);
  unint64_t v67 = sub_38098C(a6, (uint64_t)buf);
  if (*(void *)&__p[2])
  {
    uint64_t v103 = *(void *)&__p[2];
    operator delete(*(void **)&__p[2]);
  }
  if (BYTE4(v67))
  {
    float v65 = *(float *)&v67;
    unint64_t v66 = HIDWORD(v67);
  }
  else
  {
    unint64_t v75 = sub_37697C(a8, a7);
    if (!v76) {
      goto LABEL_76;
    }
    unint64_t v79 = *(void *)(v75 + 8);
    unint64_t v77 = v75 + 8;
    unint64_t v78 = v79;
    if (!v79) {
      goto LABEL_76;
    }
    unint64_t v80 = v77;
    do
    {
      unsigned int v81 = *(_DWORD *)(v78 + 28);
      BOOL v82 = v81 >= v13;
      if (v81 >= v13) {
        unint64_t v83 = (unint64_t *)v78;
      }
      else {
        unint64_t v83 = (unint64_t *)(v78 + 8);
      }
      if (v82) {
        unint64_t v80 = v78;
      }
      unint64_t v78 = *v83;
    }
    while (*v83);
    if (v80 == v77 || *(_DWORD *)(v80 + 28) > v13) {
      goto LABEL_76;
    }
    float v65 = *(float *)(v80 + 32);
    LOBYTE(v66) = 1;
  }
  uint64_t v68 = sub_32A48(20);
  uint64_t v69 = sub_32A48(38);
  char v70 = 0;
  uint64_t v71 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v72 = *(void *)(v68 + 8);
  while (1)
  {
    uint64_t v73 = *(int *)&buf[4 * v71];
    char v74 = v70;
    if (((v72 & v73) != 0) != ((*(void *)(v69 + 8) & v73) != 0)) {
      break;
    }
    char v70 = 1;
    uint64_t v71 = 1;
    if (v74)
    {
      if ((v72 & 1) == 0) {
        goto LABEL_105;
      }
      goto LABEL_102;
    }
  }
  if ((v72 & v73) == 0) {
    uint64_t v68 = v69;
  }
  if (*(void *)(v68 + 8))
  {
LABEL_102:
    float64x2_t v84 = *(NSObject **)v68;
    if (v84 && os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v97 = 1024;
      int v98 = 137;
      __int16 v99 = 2048;
      double v100 = v65;
      _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning maximum volume %f.", buf, 0x1Cu);
    }
  }
LABEL_105:
  *a1 = LODWORD(v44) | ((unint64_t)v45 << 32);
  a1[1] = LODWORD(v65) | ((unint64_t)v66 << 32);
  a1[2] = v88;
  a1[3] = v40;
  a1[4] = v42;
  a1[5] = 0;
}

void sub_1EB56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1EB5A8(unsigned int a1, unsigned int a2)
{
  long long v4 = (os_log_t *)sub_32A48(19);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(v31, a1);
    int v6 = v32;
    uint64_t v7 = (void **)v31[0];
    sub_2417C(__p, a2);
    __int16 v8 = v31;
    if (v6 < 0) {
      __int16 v8 = v7;
    }
    if (v30 >= 0) {
      int v9 = __p;
    }
    else {
      int v9 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
    __int16 v34 = 1024;
    int v35 = 77;
    __int16 v36 = 2080;
    char v37 = (const char *)v8;
    __int16 v38 = 2080;
    double v39 = *(double *)&v9;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CheckCodecInputGainDefaultForCall input port: %s output port: %s", buf, 0x26u);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
  }
  if (a1 == 1886216809 && a2 == 1886545251)
  {
    if ((byte_64BB70 & 1) == 0)
    {
      byte_64BB70 = 1;
      *(void *)int buf = 0;
      unsigned int v10 = sub_1617A8(@"HandsetUplinkGain", (void **)buf);
      float v11 = *(double *)buf;
      if (!v10) {
        float v11 = 0.0;
      }
      LOBYTE(qword_64BB68) = v10;
      *((float *)&qword_64BB68 + 1) = v11;
      if (v10)
      {
        CFTypeRef v12 = (os_log_t *)sub_32A48(13);
        unsigned int v13 = *v12;
        if (*v12)
        {
          if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
            __int16 v34 = 1024;
            int v35 = 746;
            __int16 v36 = 2080;
            char v37 = "HandsetUplinkGain";
            __int16 v38 = 2048;
            double v39 = *((float *)&qword_64BB68 + 1);
            _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f dB", buf, 0x26u);
          }
        }
      }
    }
    uint64_t v14 = qword_64BB68;
LABEL_34:
    unint64_t v19 = v14 & 0xFFFFFFFF00000000;
    return v19 | v14;
  }
  if (a1 == 1886216809 && a2 == 1886613611 || a1 == 1886216809 && a2 == 1885892727)
  {
    if ((byte_64BB80 & 1) == 0)
    {
      byte_64BB80 = 1;
      *(void *)int buf = 0;
      unsigned int v15 = sub_1617A8(@"SpeakerphoneUplinkGain", (void **)buf);
      float v16 = *(double *)buf;
      if (!v15) {
        float v16 = 0.0;
      }
      LOBYTE(qword_64BB78) = v15;
      *((float *)&qword_64BB78 + 1) = v16;
      if (v15)
      {
        unint64_t v17 = (os_log_t *)sub_32A48(13);
        float v18 = *v17;
        if (*v17)
        {
          if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
            __int16 v34 = 1024;
            int v35 = 762;
            __int16 v36 = 2080;
            char v37 = "SpeakerphoneUplinkGain";
            __int16 v38 = 2048;
            double v39 = *((float *)&qword_64BB78 + 1);
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f dB", buf, 0x26u);
          }
        }
      }
    }
    uint64_t v14 = qword_64BB78;
    goto LABEL_34;
  }
  if (a1 == 1886222185 && a2 == 1885892727)
  {
    if ((byte_64BB90 & 1) == 0)
    {
      byte_64BB90 = 1;
      *(void *)int buf = 0;
      unsigned int v21 = sub_1617A8(@"HeadsetUplinkGain", (void **)buf);
      float v22 = *(double *)buf;
      if (!v21) {
        float v22 = 0.0;
      }
      LOBYTE(qword_64BB88) = v21;
      *((float *)&qword_64BB88 + 1) = v22;
      if (v21)
      {
        uint64_t v23 = (os_log_t *)sub_32A48(13);
        uint64_t v24 = *v23;
        if (*v23)
        {
          if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
            __int16 v34 = 1024;
            int v35 = 778;
            __int16 v36 = 2080;
            char v37 = "HeadsetUplinkGain";
            __int16 v38 = 2048;
            double v39 = *((float *)&qword_64BB88 + 1);
            _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f dB", buf, 0x26u);
          }
        }
      }
    }
    uint64_t v14 = qword_64BB88;
    goto LABEL_34;
  }
  LOBYTE(v14) = 0;
  unint64_t v19 = 0x4479C00000000000;
  if (a1 == 1886680169 && a2 == 1886680175)
  {
    if ((byte_64BBA0 & 1) == 0)
    {
      byte_64BBA0 = 1;
      *(void *)int buf = 0;
      unsigned int v25 = sub_1617A8(@"TTYUplinkGain", (void **)buf);
      float v26 = *(double *)buf;
      if (!v25) {
        float v26 = 0.0;
      }
      LOBYTE(qword_64BB98) = v25;
      *((float *)&qword_64BB98 + 1) = v26;
      if (v25)
      {
        float v27 = (os_log_t *)sub_32A48(13);
        char v28 = *v27;
        if (*v27)
        {
          if (os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
            __int16 v34 = 1024;
            int v35 = 794;
            __int16 v36 = 2080;
            char v37 = "TTYUplinkGain";
            __int16 v38 = 2048;
            double v39 = *((float *)&qword_64BB98 + 1);
            _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %f dB", buf, 0x26u);
          }
        }
      }
    }
    uint64_t v14 = qword_64BB98;
    goto LABEL_34;
  }
  return v19 | v14;
}

void sub_1EBB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1EBB8C(unsigned int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  sub_1EBED0((uint64_t)v33, a6, a2, a3);
  unint64_t v10 = sub_3804B4(a4, (uint64_t)v33);
  if (__p)
  {
    double v39 = __p;
    operator delete(__p);
  }
  LODWORD(v11) = v10;
  if (!HIDWORD(v10))
  {
    unint64_t v12 = sub_376CBC(a5, a6);
    if (!v13) {
      goto LABEL_16;
    }
    unint64_t v16 = *(void *)(v12 + 8);
    unint64_t v14 = v12 + 8;
    unint64_t v15 = v16;
    if (!v16) {
      goto LABEL_16;
    }
    unint64_t v17 = v14;
    do
    {
      unsigned int v18 = *(_DWORD *)(v15 + 28);
      BOOL v19 = v18 >= a1;
      if (v18 >= a1) {
        uint64_t v20 = (unint64_t *)v15;
      }
      else {
        uint64_t v20 = (unint64_t *)(v15 + 8);
      }
      if (v19) {
        unint64_t v17 = v15;
      }
      unint64_t v15 = *v20;
    }
    while (*v20);
    if (v17 != v14 && *(_DWORD *)(v17 + 28) <= a1)
    {
      uint64_t v11 = *(unsigned int *)(v17 + 32);
      unint64_t v21 = 0x100000000;
    }
    else
    {
LABEL_16:
      unint64_t v21 = 0;
      uint64_t v11 = 0;
    }
    if (!HIDWORD(v21))
    {
      uint64_t v22 = 0;
      return v22 | v11;
    }
    unint64_t v10 = v11 | v21;
  }
  uint64_t v23 = sub_32A48(20);
  uint64_t v24 = sub_32A48(38);
  char v25 = 0;
  uint64_t v26 = 0;
  float v27 = *(float *)&v11;
  *(void *)char v33 = 0x100000002;
  uint64_t v28 = *(void *)(v23 + 8);
  while (1)
  {
    uint64_t v29 = *(int *)&v33[4 * v26];
    char v30 = v25;
    if (((v28 & v29) != 0) != ((*(void *)(v24 + 8) & v29) != 0)) {
      break;
    }
    char v25 = 1;
    uint64_t v26 = 1;
    if (v30)
    {
      if ((v28 & 1) == 0) {
        goto LABEL_31;
      }
      goto LABEL_28;
    }
  }
  if ((v28 & v29) == 0) {
    uint64_t v23 = v24;
  }
  if (*(void *)(v23 + 8))
  {
LABEL_28:
    uint64_t v31 = *(NSObject **)v23;
    if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)char v33 = 136315650;
      *(void *)&v33[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v34 = 1024;
      int v35 = 183;
      __int16 v36 = 2048;
      double v37 = *(float *)&v11;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning default volume %f.", v33, 0x1Cu);
    }
  }
LABEL_31:
  uint64_t v22 = v10 & 0xFF00000000;
  if (*(float *)&v11 == 1.1755e-38) {
    LODWORD(v11) = 0;
  }
  if (v27 == 1.1755e-38) {
    uint64_t v22 = 0;
  }
  return v22 | v11;
}

void sub_1EBDCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1EBDF0(int a1, int a2)
{
  BOOL v2 = a1 == 1886222185 && a2 == 1970496068;
  uint64_t v3 = v2;
  if (v2)
  {
    long long v4 = (os_log_t *)sub_32A48(19);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315394;
        __int16 v8 = "RoutingHandlerUtilities_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 107;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Wired Generic USB Device detected... Bypassing input volume range.", (uint8_t *)&v7, 0x12u);
      }
    }
  }
  return v3;
}

uint64_t sub_1EBED0(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(_DWORD *)a1 = 0;
  *(_DWORD *)(a1 + 4) = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)sub_3AEE60();
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_46B38((void *)(a1 + 32), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  sub_374BB4((_DWORD *)a1);
  return a1;
}

void sub_1EBF40(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1EBF5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  if (!a2)
  {
    unsigned int v81 = (os_log_t *)sub_32A48(13);
    BOOL v82 = *v81;
    if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_ERROR))
    {
      *(float *)__int16 v99 = 4.8151e-34;
      double v100 = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v101 = 1024;
      *(_DWORD *)uint64_t v102 = 734;
      _os_log_impl(&def_1E50E8, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v99, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_1EAD34((unint64_t *)v99, a3, a4, a5, a6, a7, a8, a9);
  *(void *)&long long v93 = (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
  *((void *)&v93 + 1) = v12;
  uint64_t v91 = 0x696E707476646223;
  int v92 = 0;
  if ((_BYTE)v101
    && (*(unsigned int (**)(void, uint64_t *))(**(void **)(a4 + 192) + 16))(*(void *)(a4 + 192), &v91))
  {
    if (v105)
    {
      if (v104 != qword_6681E0 && !*(unsigned char *)(v104 + 40))
      {
        double v13 = *((float *)&v100 + 1);
        if (*((double *)&v93 + 1) < *((float *)&v100 + 1))
        {
          float64x2_t v84 = (os_log_t *)sub_32A48(13);
          uint64_t v85 = *v84;
          if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 751;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(double *)int v98 = v13;
            *(_WORD *)&v98[8] = 2048;
            *(void *)&v98[10] = *((void *)&v93 + 1);
            _os_log_impl(&def_1E50E8, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Routing database error: Routing database specified a maximum decibel volume (%f) above ioVolumeControl's maximum hardware range (%f).\"", buf, 0x26u);
          }
          uint64_t v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v86, "Routing database error: Routing database specified a maximum decibel volume (%f) above ioVolumeControl's maximum hardware range (%f).");
        }
      }
    }
    *((double *)&v93 + 1) = *((float *)&v100 + 1);
    uint64_t v14 = sub_32A48(19);
    uint64_t v15 = sub_32A48(38);
    char v16 = 0;
    uint64_t v17 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *(int *)&buf[4 * v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1;
      if (v20) {
        goto LABEL_25;
      }
    }
    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
LABEL_25:
    char v32 = *(NSObject **)v14;
    if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 755;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)int v98 = *((void *)&v93 + 1);
      uint64_t v29 = "%25s:%-5d Reconfigured input volume control's maximum decibel volume to %f.";
      char v30 = v32;
      uint32_t v31 = 28;
LABEL_28:
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, v29, buf, v31);
    }
  }
  else
  {
    uint64_t v21 = sub_32A48(19);
    uint64_t v22 = sub_32A48(38);
    char v23 = 0;
    uint64_t v24 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v25 = *(void *)(v21 + 8);
    while (1)
    {
      uint64_t v26 = *(int *)&buf[4 * v24];
      char v27 = v23;
      if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
        break;
      }
      char v23 = 1;
      uint64_t v24 = 1;
      if (v27)
      {
        if ((v25 & 1) == 0) {
          goto LABEL_29;
        }
        goto LABEL_20;
      }
    }
    if ((v25 & v26) == 0) {
      uint64_t v21 = v22;
    }
    if ((*(void *)(v21 + 8) & 1) == 0) {
      goto LABEL_29;
    }
LABEL_20:
    uint64_t v28 = *(NSObject **)v21;
    if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 759;
      uint64_t v29 = "%25s:%-5d Skipped setting device input max volume in decibels: the routing database did not request it or ha"
            "rdware does not support volume control.";
      char v30 = v28;
      uint32_t v31 = 18;
      goto LABEL_28;
    }
  }
LABEL_29:
  if ((_BYTE)v100
    && (*(unsigned int (**)(void, uint64_t *))(**(void **)(a4 + 192) + 16))(*(void *)(a4 + 192), &v91))
  {
    if (v105)
    {
      if (v104 != qword_6681E0 && !*(unsigned char *)(v104 + 40))
      {
        double v33 = *(float *)v99;
        if (*(double *)&v93 > *(float *)v99)
        {
          unint64_t v87 = (os_log_t *)sub_32A48(13);
          uint64_t v88 = *v87;
          if (*v87 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 769;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(double *)int v98 = v33;
            *(_WORD *)&v98[8] = 2048;
            *(void *)&v98[10] = v93;
            _os_log_impl(&def_1E50E8, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Routing database error: Routing database specified a minimum decibel volume (%f) below ioVolumeControl's minimum hardware range (%f).\"", buf, 0x26u);
          }
          uint64_t v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v89, "Routing database error: Routing database specified a minimum decibel volume (%f) below ioVolumeControl's minimum hardware range (%f).");
        }
      }
    }
    *(double *)&long long v93 = *(float *)v99;
    uint64_t v34 = sub_32A48(19);
    uint64_t v35 = sub_32A48(38);
    char v36 = 0;
    uint64_t v37 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v38 = *(void *)(v34 + 8);
    while (1)
    {
      uint64_t v39 = *(int *)&buf[4 * v37];
      char v40 = v36;
      if (((v38 & v39) != 0) != ((*(void *)(v35 + 8) & v39) != 0)) {
        break;
      }
      char v36 = 1;
      uint64_t v37 = 1;
      if (v40) {
        goto LABEL_52;
      }
    }
    if ((v38 & v39) == 0) {
      uint64_t v34 = v35;
    }
LABEL_52:
    uint64_t v52 = *(NSObject **)v34;
    if (v52 && os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 773;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)int v98 = v93;
      char v49 = "%25s:%-5d Reconfigured input volume control's minimum decibel volume to %f.";
      uint64_t v50 = v52;
      uint32_t v51 = 28;
LABEL_55:
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEBUG, v49, buf, v51);
    }
  }
  else
  {
    uint64_t v41 = sub_32A48(19);
    uint64_t v42 = sub_32A48(38);
    char v43 = 0;
    uint64_t v44 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v45 = *(void *)(v41 + 8);
    while (1)
    {
      uint64_t v46 = *(int *)&buf[4 * v44];
      char v47 = v43;
      if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
        break;
      }
      char v43 = 1;
      uint64_t v44 = 1;
      if (v47)
      {
        if ((v45 & 1) == 0) {
          goto LABEL_56;
        }
        goto LABEL_47;
      }
    }
    if ((v45 & v46) == 0) {
      uint64_t v41 = v42;
    }
    if ((*(void *)(v41 + 8) & 1) == 0) {
      goto LABEL_56;
    }
LABEL_47:
    uint64_t v48 = *(NSObject **)v41;
    if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 777;
      char v49 = "%25s:%-5d Skipped setting device input min volume in decibels: the routing database did not request it or ha"
            "rdware does not support volume control.";
      uint64_t v50 = v48;
      uint32_t v51 = 18;
      goto LABEL_55;
    }
  }
LABEL_56:
  *(void *)int buf = (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
  *(void *)&buf[8] = v53;
  *(_DWORD *)&buf[16] = 0;
  *(void *)&v98[4] = 0;
  *(void *)&v98[12] = 0;
  if (v105)
  {
    uint64_t v54 = v104;
    if (v104 != qword_6681E0)
    {
      uint64_t v55 = sub_32A48(20);
      uint64_t v56 = sub_32A48(38);
      char v57 = 0;
      uint64_t v58 = 0;
      *(void *)uint64_t v94 = 0x100000002;
      uint64_t v59 = *(void *)(v55 + 8);
      while (1)
      {
        uint64_t v60 = *(int *)&v94[4 * v58];
        char v61 = v57;
        if (((v59 & v60) != 0) != ((*(void *)(v56 + 8) & v60) != 0)) {
          break;
        }
        char v57 = 1;
        uint64_t v58 = 1;
        if (v61)
        {
          if ((v59 & 1) == 0) {
            goto LABEL_73;
          }
          goto LABEL_66;
        }
      }
      if ((v59 & v60) == 0) {
        uint64_t v55 = v56;
      }
      if (*(void *)(v55 + 8))
      {
LABEL_66:
        uint64_t v62 = *(NSObject **)v55;
        if (v62 && os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
        {
          sub_375244(&__p, (unsigned int *)v54);
          uint64_t v63 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)uint64_t v94 = 136315650;
          *(void *)&v94[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&v94[12] = 1024;
          *(_DWORD *)&v94[14] = 786;
          __int16 v95 = 2080;
          uint64_t v96 = v63;
          _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found extended volume description: %s", v94, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
LABEL_73:
      if (*(unsigned char *)(v54 + 4)) {
        int v64 = (_DWORD *)v54;
      }
      else {
        int v64 = &buf[16];
      }
      *(_DWORD *)&buf[16] = *v64;
      if (*(_DWORD *)&buf[16] == 1) {
        goto LABEL_81;
      }
      float v65 = (os_log_t *)sub_32A48(13);
      unint64_t v66 = *v65;
      if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v94 = 136315394;
        *(void *)&v94[4] = "RoutingHandlerUtilities_Aspen.cpp";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 789;
        _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Logic error: a proper software volume mode was not specified in the routing database\"", v94, 0x12u);
      }
      if (*(_DWORD *)&buf[16])
      {
LABEL_81:
        (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 304))(v94, a2, a4);
        uint64_t v68 = *(void *)v94;
        uint64_t v67 = *(void *)&v94[8];
        *(void *)uint64_t v94 = 0;
        *(void *)&v94[8] = 0;
        uint64_t v69 = *(std::__shared_weak_count **)&v98[12];
        *(void *)&v98[4] = v68;
        *(void *)&v98[12] = v67;
        if (v69)
        {
          std::__shared_weak_count::__release_weak(v69);
          if (*(void *)&v94[8]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v94[8]);
          }
          uint64_t v67 = *(void *)&v98[12];
        }
        if (!v67 || *(void *)(v67 + 8) == -1)
        {
          char v70 = (os_log_t *)sub_32A48(19);
          uint64_t v71 = *v70;
          if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v94 = 136315394;
            *(void *)&v94[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&v94[12] = 1024;
            *(_DWORD *)&v94[14] = 798;
            _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing database specified SW volume but no SW volume is associated with the aggregate device... falling back to HW-only volume", v94, 0x12u);
          }
          *(_DWORD *)&buf[16] = 0;
        }
        else if (*(_DWORD *)&buf[16] == 1)
        {
          if (*(unsigned char *)(v54 + 12)) {
            *(double *)int buf = *(float *)(v54 + 8);
          }
          if (*(unsigned char *)(v54 + 20)) {
            *(double *)&buf[8] = *(float *)(v54 + 16);
          }
          if (*(unsigned char *)(v54 + 40)) {
            long long v93 = *(_OWORD *)(v54 + 24);
          }
        }
      }
    }
  }
  (*(void (**)(uint64_t, long long *, uint64_t, unsigned char *, void))(*(void *)a1 + 80))(a1, &v93, 0x100000000, buf, 0);
  if (v103 && (float v72 = *(float *)&v102[2], (sub_1EBDF0(*(_DWORD *)(a4 + 144), *(_DWORD *)(a4 + 264)) & 1) == 0))
  {
    *(float *)&__p.__r_.__value_.__l.__data_ = v72;
    if ((*(unsigned int (**)(uint64_t, float))(*(void *)a1 + 112))(a1, v72))
    {
      strcpy(v94, "dlovbolg");
      v94[9] = 0;
      *(_WORD *)&v94[10] = 0;
      (*(void (**)(uint64_t, unsigned char *, void, void, uint64_t, std::string *))(*(void *)a1 + 48))(a1, v94, 0, 0, 4, &__p);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 120))(a1);
    uint64_t v73 = sub_32A48(19);
    uint64_t v74 = sub_32A48(38);
    char v75 = 0;
    uint64_t v76 = 0;
    *(void *)uint64_t v94 = 0x100000002;
    uint64_t v77 = *(void *)(v73 + 8);
    while (1)
    {
      uint64_t v78 = *(int *)&v94[4 * v76];
      char v79 = v75;
      if (((v77 & v78) != 0) != ((*(void *)(v74 + 8) & v78) != 0)) {
        break;
      }
      char v75 = 1;
      uint64_t v76 = 1;
      if (v79) {
        goto LABEL_106;
      }
    }
    if ((v77 & v78) == 0) {
      uint64_t v73 = v74;
    }
LABEL_106:
    unint64_t v80 = *(NSObject **)v73;
    if (v80 && os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v94 = 136315394;
      *(void *)&v94[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&v94[12] = 1024;
      *(_DWORD *)&v94[14] = 844;
      _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Skipped setting device input volume in decibels: the routing database did not request it and there was no default to define the value.", v94, 0x12u);
    }
  }
  if (*(void *)&v98[12]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v98[12]);
  }
}

void sub_1ECBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

void sub_1ECC3C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v4 = (unsigned __int16)sub_37C46C(a3 + 8, a2);
  if (v4 <= 0x100) {
    LOBYTE(v4) = 0;
  }
  if ((_BYTE)v4)
  {
    (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(void *)a1 + 144))(&v12, a1);
    uint64_t v5 = v12;
    for (unsigned int i = v13; v5 != i; v5 += 2)
    {
      int v7 = (std::__shared_weak_count *)v5[1];
      if (v7)
      {
        uint64_t v8 = *v5;
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        __int16 v9 = std::__shared_weak_count::lock(v7);
        if (v9)
        {
          int v10 = v9;
          if (v8)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 152))(v8)) {
              operator new();
            }
          }
          sub_4636C(v10);
        }
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    *(void *)&long long v11 = &v12;
    sub_98D9C((void ***)&v11);
  }
}

void sub_1ECEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (v18) {
    sub_4636C(v18);
  }
  sub_4636C(v17);
  std::__shared_weak_count::__release_weak(v16);
  a11 = (void **)&a16;
  sub_98D9C(&a11);
  _Unwind_Resume(a1);
}

BOOL sub_1ECF1C(uint64_t a1, unsigned int a2, __int32 a3, int a4)
{
  BOOL v4 = 1;
  if (a4 != 1633759844 && a4 != 1634231920 && a4 != 1635085420)
  {
    sub_37C0EC(&__p, a1 + 8, a2);
    if (v12)
    {
      int v6 = v11;
      int v7 = wmemchr((__int32 *)__p, a3, ((char *)v11 - (unsigned char *)__p) >> 2);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = v6;
      }
      BOOL v4 = v8 == v11;
      if (v12 && __p)
      {
        long long v11 = (__int32 *)__p;
        operator delete(__p);
      }
    }
  }
  return v4;
}

BOOL sub_1ECFD4(signed int a1, uint64_t a2)
{
  if (!a2)
  {
    long long v11 = (os_log_t *)sub_32A48(13);
    char v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v17 = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v18 = 1024;
      int v19 = 943;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inInputControlDevice is NULL]: \"inPhysicalDevice is NULL.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inPhysicalDevice is NULL.");
  }
  BOOL result = 1;
  if (a1 <= 1918990111)
  {
    if (a1 > 1768778863)
    {
      if (a1 <= 1768781425)
      {
        if (a1 == 1768778864) {
          return result;
        }
        if (a1 == 1768779619) {
          return 0;
        }
        int v7 = 1768781411;
        goto LABEL_47;
      }
      if (a1 > 1836021359)
      {
        if (a1 == 1836021360) {
          return 0;
        }
        int v5 = 1836281204;
      }
      else
      {
        if (a1 == 1768781426) {
          return result;
        }
        int v5 = 1835229549;
      }
    }
    else
    {
      if (a1 <= 1735222131)
      {
        if (a1 == 1701013792 || a1 == 1701013869) {
          return 0;
        }
        int v7 = 1701017120;
        goto LABEL_47;
      }
      if (a1 > 1768057202)
      {
        if (a1 == 1768057203) {
          return 0;
        }
        int v5 = 1768776806;
      }
      else
      {
        if (a1 == 1735222132) {
          return 0;
        }
        int v5 = 1751212899;
      }
    }
LABEL_37:
    if (a1 == v5) {
      return result;
    }
    goto LABEL_50;
  }
  if (a1 <= 1986884454)
  {
    if (a1 <= 1936747373)
    {
      if (a1 == 1918990112) {
        return result;
      }
      if (a1 == 1919776355) {
        return 0;
      }
      int v5 = 1936745328;
    }
    else
    {
      if (a1 > 1986098035)
      {
        if (a1 != 1986098036)
        {
          int v7 = 1986556788;
          goto LABEL_47;
        }
        return 0;
      }
      if (a1 == 1936747374) {
        return 0;
      }
      int v5 = 1937007472;
    }
    goto LABEL_37;
  }
  if (a1 <= 1987081838)
  {
    if (a1 > 1987080812)
    {
      if (a1 != 1987080813)
      {
        unsigned __int16 v4 = 30313;
        goto LABEL_43;
      }
    }
    else if (a1 != 1986884455)
    {
      unsigned __int16 v4 = 26467;
LABEL_43:
      int v7 = v4 | 0x76700000;
      goto LABEL_47;
    }
    return 0;
  }
  if (a1 > 1987211116)
  {
    if (a1 == 1987212137) {
      return 0;
    }
    unsigned __int16 v6 = 28525;
  }
  else
  {
    if (a1 == 1987081839) {
      return 0;
    }
    unsigned __int16 v6 = 25447;
  }
  int v7 = v6 | 0x76720000;
LABEL_47:
  if (a1 == v7) {
    return 0;
  }
LABEL_50:
  uint64_t v8 = (os_log_t *)sub_32A48(13);
  __int16 v9 = *v8;
  if (!*v8) {
    return 0;
  }
  BOOL result = os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_2417C(__p, a1);
    if (v15 >= 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315650;
    uint64_t v17 = "RoutingHandlerUtilities_Aspen.cpp";
    __int16 v18 = 1024;
    int v19 = 985;
    __int16 v20 = 2080;
    uint64_t v21 = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unhandled mode '%s' in switch statement\"", buf, 0x1Cu);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_1ED3F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1ED40C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  sub_1ED500(a1, a2, a3, a4, a5, 1);
  if (*a1 == a1[1])
  {
    unsigned __int16 v6 = (os_log_t *)sub_32A48(20);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315394;
        __int16 v9 = "RoutingHandlerUtilities_Aspen.cpp";
        __int16 v10 = 1024;
        int v11 = 1002;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unable to locate a set of sub-ports.", (uint8_t *)&v8, 0x12u);
      }
    }
  }
}

void sub_1ED4E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ED500(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a2 + 144) != 1886216809 || *(void *)(a2 + 96) == *(void *)(a2 + 104))
  {
    int v31 = 0;
  }
  else
  {
    sub_162C24(buf);
    uint64_t v12 = *(void *)buf;
    uint64_t v13 = *(void *)&buf[8];
    if (*(void *)buf) {
      operator delete(*(void **)buf);
    }
    if (v12 != v13)
    {
      sub_162C24(&v77);
      long long v14 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
      if (v77.__r_.__value_.__r.__words[0] == v77.__r_.__value_.__l.__size_)
      {
        uint64_t v63 = (os_log_t *)sub_32A48(13);
        int v64 = *v63;
        if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 415;
          _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Expected non-empty result from Defaults_GetOverriddenBuiltInMicSubPorts\"", buf, 0x12u);
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Expected non-empty result from Defaults_GetOverriddenBuiltInMicSubPorts");
      }
      char v15 = (os_log_t *)sub_32A48(23);
      char v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_INFO))
      {
        sub_82188(&__p, (unsigned int *)v14, *((unsigned int **)&v14 + 1));
        uint64_t v17 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 416;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&unsigned char buf[20] = v17;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_INFO, "%25s:%-5d Attempting to find an internal ID for data sources specified by preference: %s", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v18 = *(void *)(a2 + 96);
      uint64_t v19 = *(void *)(a2 + 104);
      if (v18 == v19)
      {
LABEL_28:
        char v27 = (os_log_t *)sub_32A48(23);
        unsigned int v24 = 1870033508;
        uint64_t v28 = *v27;
        if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_INFO))
        {
LABEL_93:
          if ((void)v14) {
            operator delete((void *)v14);
          }
          uint64_t v57 = sub_32A48(20);
          if (*(unsigned char *)(v57 + 8))
          {
            uint64_t v58 = *(NSObject **)v57;
            if (*(void *)v57)
            {
              if (os_log_type_enabled(*(os_log_t *)v57, OS_LOG_TYPE_DEBUG))
              {
                sub_2417C(&v77, v24);
                if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v59 = &v77;
                }
                else {
                  uint64_t v59 = (std::string *)v77.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)int buf = 136315650;
                *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 208;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&unsigned char buf[20] = v59;
                _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d Resolved sub-port set inquiry using system defaults override: %s.", buf, 0x1Cu);
                if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v77.__r_.__value_.__l.__data_);
                }
              }
            }
          }
          *(_DWORD *)int buf = v24;
          sub_72300(a1, (__int32 *)buf, 1);
          return;
        }
        sub_2417C(&__p, 0x6F767264u);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 432;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&unsigned char buf[20] = p_p;
        char v30 = "%25s:%-5d Did not find a matching internal ID for data sources specified by preference.  Using %s";
      }
      else
      {
LABEL_15:
        uint64_t v20 = *(void *)(*(void *)v18 + 32);
        uint64_t v21 = *(void *)(*(void *)v18 + 40);
        while (1)
        {
          if (v20 == v21)
          {
            v18 += 16;
            if (v18 != v19) {
              goto LABEL_15;
            }
            goto LABEL_28;
          }
          uint64_t v22 = *(const void **)(v20 + 8);
          uint64_t v23 = *(void *)(v20 + 16) - (void)v22;
          unsigned int v24 = *(_DWORD *)v20;
          BOOL v25 = *(_DWORD *)v20 == 1634495520 || v23 == 4;
          BOOL v26 = v25 && *((void *)&v14 + 1) - (void)v14 == v23;
          if (v26 && !memcmp((const void *)v14, v22, *((size_t *)&v14 + 1))) {
            break;
          }
          v20 += 64;
        }
        uint64_t v55 = (os_log_t *)sub_32A48(23);
        uint64_t v28 = *v55;
        if (!*v55 || !os_log_type_enabled(*v55, OS_LOG_TYPE_INFO)) {
          goto LABEL_93;
        }
        sub_2417C(&__p, v24);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v56 = &__p;
        }
        else {
          uint64_t v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 426;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&unsigned char buf[20] = v56;
        char v30 = "%25s:%-5d Found matching internal ID: %s";
      }
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_INFO, v30, buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_93;
    }
    int v31 = 1;
  }
  sub_1329C(&v77, *(void *)(a2 + 80), *(std::__shared_weak_count **)(a2 + 88));
  uint64_t v32 = a3 + 80;
  std::string::size_type size = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
  *(_OWORD *)int buf = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
  if (v77.__r_.__value_.__l.__size_)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v77.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
    uint64_t v34 = sub_1EDFC0(v32, (unint64_t *)buf);
    std::__shared_weak_count::__release_weak(size);
  }
  else
  {
    uint64_t v34 = sub_1EDFC0(v32, (unint64_t *)buf);
  }
  if (v77.__r_.__value_.__l.__size_) {
    sub_4636C((std::__shared_weak_count *)v77.__r_.__value_.__l.__size_);
  }
  if ((void *)(a3 + 88) != v34 && v34[6] != v34[7])
  {
    uint64_t v35 = sub_32A48(20);
    if (*(unsigned char *)(v35 + 8))
    {
      char v36 = *(NSObject **)v35;
      if (*(void *)v35)
      {
        if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
        {
          sub_82188(&v77, (unsigned int *)v34[6], (unsigned int *)v34[7]);
          uint64_t v37 = (v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v77
              : (std::string *)v77.__r_.__value_.__r.__words[0];
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 223;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&unsigned char buf[20] = v37;
          _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Resolved sub-port set inquiry using client-specified sub-ports: %s.", buf, 0x1Cu);
          if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v77.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    sub_46B38(a1, (const void *)v34[6], v34[7], (uint64_t)(v34[7] - v34[6]) >> 2);
    return;
  }
  if (v31)
  {
    uint64_t v38 = *(void *)(a3 + 112);
    uint64_t v41 = *(void *)(v38 + 16);
    uint64_t v39 = v38 + 16;
    uint64_t v40 = v41;
    if (v41)
    {
      unsigned int v42 = *(_DWORD *)(a3 + 12);
      uint64_t v43 = v39;
      do
      {
        unsigned int v44 = *(_DWORD *)(v40 + 32);
        BOOL v45 = v44 >= v42;
        if (v44 >= v42) {
          uint64_t v46 = (uint64_t *)v40;
        }
        else {
          uint64_t v46 = (uint64_t *)(v40 + 8);
        }
        if (v45) {
          uint64_t v43 = v40;
        }
        uint64_t v40 = *v46;
      }
      while (*v46);
      if (v43 != v39 && *(_DWORD *)(v43 + 32) <= v42 && *(unsigned char *)(v43 + 81))
      {
        unsigned int v47 = *(unsigned __int16 *)(v43 + 80);
        if (v47 >= 0x100 && v47 != 0)
        {
          uint64_t v49 = sub_298DA4();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v49 + 184))(v49) <= 1)
          {
            sub_45B494(buf, 0x6D633032u, *(void *)(a2 + 96), *(void *)(a2 + 104));
            uint64_t v50 = *(void *)buf;
            if (*(void *)buf) {
              LODWORD(a4) = sub_4574BC(*(uint64_t *)buf, a2 + 568);
            }
            if (*(void *)&buf[8]) {
              sub_4636C(*(std::__shared_weak_count **)&buf[8]);
            }
            if (!v50)
            {
              unint64_t v66 = (os_log_t *)sub_32A48(13);
              uint64_t v67 = *v66;
              if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
              {
                uint64_t v68 = &v77;
                sub_2417C(&v77, 0x6D633032u);
                if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v68 = (std::string *)v77.__r_.__value_.__r.__words[0];
                }
                sub_2417C(&__p, *(_DWORD *)(a2 + 144));
                int v69 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
                std::string::size_type v70 = __p.__r_.__value_.__r.__words[0];
                sub_2417C(v74, 0x6D633032u);
                uint64_t v71 = &__p;
                if (v69 < 0) {
                  uint64_t v71 = (std::string *)v70;
                }
                if (v75 >= 0) {
                  float v72 = v74;
                }
                else {
                  float v72 = (void **)v74[0];
                }
                *(_DWORD *)int buf = 136316162;
                *(void *)&uint8_t buf[4] = "Port_MicrophoneBuiltIn_Aspen.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 442;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&unsigned char buf[20] = v68;
                __int16 v79 = 2080;
                *(void *)unint64_t v80 = v71;
                *(_WORD *)&v80[8] = 2080;
                unsigned int v81 = v72;
                _os_log_impl(&def_1E50E8, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to set unknown sub-port (%s) preferred override on port with type %s. Requested sub-port: %s\"", buf, 0x30u);
                if (v75 < 0) {
                  operator delete(v74[0]);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v77.__r_.__value_.__l.__data_);
                }
              }
              uint64_t v73 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v73, "Attempt to set unknown sub-port (%s) preferred override on port with type %s. Requested sub-port: %s");
            }
            uint64_t v60 = (os_log_t *)sub_32A48(20);
            char v61 = *v60;
            if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_DEFAULT))
            {
              sub_2417C(&v77, a4);
              uint64_t v62 = (v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v77
                  : (std::string *)v77.__r_.__value_.__r.__words[0];
              *(_DWORD *)int buf = 136315650;
              *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 245;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&unsigned char buf[20] = v62;
              _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Resolved sub-port set inquiry using internal sub-port override: %s.", buf, 0x1Cu);
              if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v77.__r_.__value_.__l.__data_);
              }
            }
            *(_DWORD *)int buf = a4;
            sub_72300(a1, (__int32 *)buf, 1);
            return;
          }
        }
      }
    }
  }
  *(_DWORD *)int buf = a6 ^ 1;
  *(_DWORD *)&uint8_t buf[4] = a5;
  *(_OWORD *)&buf[8] = *(_OWORD *)sub_3AEE60();
  *(_DWORD *)&uint8_t buf[24] = 0;
  unsigned int v81 = 0;
  uint64_t v82 = 0;
  *(void *)&CFTypeRef v80[2] = 0;
  sub_381A50(&v77, a4, (uint64_t)buf);
  long long v51 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
  if (v77.__r_.__value_.__r.__words[0] == v77.__r_.__value_.__l.__size_)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (!(void)v51) {
      return;
    }
LABEL_83:
    operator delete((void *)v51);
    return;
  }
  uint64_t v52 = sub_32A48(20);
  if (*(unsigned char *)(v52 + 8))
  {
    uint64_t v53 = *(NSObject **)v52;
    if (*(void *)v52)
    {
      if (os_log_type_enabled(*(os_log_t *)v52, OS_LOG_TYPE_DEBUG))
      {
        sub_82188(&__p, (unsigned int *)v51, *((unsigned int **)&v51 + 1));
        uint64_t v54 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 258;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&unsigned char buf[20] = v54;
        _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEBUG, "%25s:%-5d Resolved sub-port set inquiry using the connection's ModeMap: %s.", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_46B38(a1, (const void *)v51, *((uint64_t *)&v51 + 1), (uint64_t)(*((void *)&v51 + 1) - v51) >> 2);
  if ((void)v51) {
    goto LABEL_83;
  }
}

void sub_1EDF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1EDFC0(uint64_t a1, unint64_t *a2)
{
  BOOL v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_73610(v3 + 4, a2);
    int v7 = v3 + 1;
    if (!v6)
    {
      int v7 = v3;
      int v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_73610(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

void sub_1EE03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (!a2)
  {
    char v15 = (os_log_t *)sub_32A48(13);
    char v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1013;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_1ED500((void *)a1, a3, a4, a5, a6, 1);
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t, void))(*(void *)a2 + 280))(buf, a2, *(unsigned int *)(a3 + 144));
    __int16 v9 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v9;
      operator delete(v9);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    uint64_t v10 = *(void *)buf;
    *(void *)a1 = *(void *)buf;
    uint64_t v11 = *(void *)&buf[8];
    *(_OWORD *)(a1 + 8) = *(_OWORD *)&buf[8];
    if (v10 != v11)
    {
      uint64_t v12 = sub_32A48(20);
      if (*(unsigned char *)(v12 + 8))
      {
        uint64_t v13 = *(NSObject **)v12;
        if (*(void *)v12)
        {
          if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
          {
            sub_1001A8(&__p, *(unsigned int **)a1, *(unsigned int **)(a1 + 8));
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1023;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&unsigned char buf[20] = p_p;
            _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Resolved sub-port set inquiry using the device's default sub-port lookup mechanism: %s.", buf, 0x1Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
  }
}

void sub_1EE290(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1EE2CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (!a2)
  {
    BOOL v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      uint64_t v10 = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v11 = 1024;
      int v12 = 1035;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  sub_1ED500(a1, a3, a4, a5, a6, 0);
}

void sub_1EE3EC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1EE408(os_unfair_lock_s *a1, int a2, int a3, uint64_t a4)
{
  *(_DWORD *)int buf = a2;
  *(_DWORD *)char v131 = a3;
  *(_OWORD *)&v131[4] = *(_OWORD *)sub_3AEE60();
  *(_DWORD *)&v131[20] = 0;
  long long v134 = 0uLL;
  *(void *)&v133[2] = 0;
  uint64_t result = sub_3812EC(a4, (uint64_t)buf);
  if (v7)
  {
    if (result)
    {
      uint64_t v8 = *(void *)result;
      uint64_t v9 = *(void *)(result + 8);
      if (*(void *)result != v9)
      {
        locunsigned int k = a1 + 2;
        do
        {
          if (((*(uint64_t (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, v8) & 1) == 0)
          {
            uint64_t v10 = (os_log_t *)sub_32A48(19);
            __int16 v11 = *v10;
            if (*v10)
            {
              if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
              {
                (*(void (**)(void **__return_ptr, os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                + 128))(v126, a1);
                int v12 = v126[0];
                sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                uint64_t v13 = __p;
                if (v129 < 0) {
                  uint64_t v13 = (void **)__p[0];
                }
                *(_DWORD *)int buf = 136315906;
                *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v131[8] = 1024;
                *(_DWORD *)&v131[10] = 1057;
                *(_WORD *)&v131[14] = 2112;
                *(void *)&v131[16] = v12;
                __int16 v132 = 2080;
                *(void *)int64x2_t v133 = v13;
                _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %@ does not have property %s, skipping remote property.", buf, 0x26u);
                if (v129 < 0) {
                  operator delete(__p[0]);
                }
                sub_72924((uint64_t)v126);
              }
            }
          }
          int v14 = *(_DWORD *)(v8 + 16);
          int v15 = *(unsigned __int8 *)(v8 + 32);
          int v16 = *(unsigned __int8 *)(v8 + 33);
          switch(v14)
          {
            case 10:
              *(double *)UInt32 ioDataSize = sub_3851C4((double *)(v8 + 16));
              BOOL v45 = (os_log_t *)sub_32A48(19);
              uint64_t v46 = *v45;
              if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEFAULT))
              {
                sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                int v47 = v129;
                uint64_t v48 = (void **)__p[0];
                sub_4F64((uint64_t)v126, lock);
                uint64_t v49 = __p;
                if (v47 < 0) {
                  uint64_t v49 = v48;
                }
                uint64_t v50 = v126;
                if (v127 < 0) {
                  uint64_t v50 = (void **)v126[0];
                }
                *(_DWORD *)int buf = 136315906;
                *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v131[8] = 1024;
                *(_DWORD *)&v131[10] = 270;
                *(_WORD *)&v131[14] = 2080;
                *(void *)&v131[16] = v49;
                __int16 v132 = 2080;
                *(void *)int64x2_t v133 = v50;
                _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating remote property %s on device %s", buf, 0x26u);
                if (v127 < 0) {
                  operator delete(v126[0]);
                }
                if (v129 < 0) {
                  operator delete(__p[0]);
                }
              }
              double outData = 0.0;
              UInt32 v124 = 8;
              AudioObjectID v51 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120))(a1);
              uint64_t result = AudioObjectGetPropertyData(v51, (const AudioObjectPropertyAddress *)v8, 0, 0, &v124, &outData);
              int v52 = result;
              if (result)
              {
                unint64_t v106 = (os_log_t *)sub_32A48(13);
                uint64_t v107 = *v106;
                if (*v106 && os_log_type_enabled(*v106, OS_LOG_TYPE_ERROR))
                {
                  sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                  int v108 = v129;
                  uint64_t v109 = (void **)__p[0];
                  sub_4F64((uint64_t)v126, lock);
                  __int16 v110 = __p;
                  if (v108 < 0) {
                    __int16 v110 = v109;
                  }
                  if (v127 >= 0) {
                    int v111 = v126;
                  }
                  else {
                    int v111 = (void **)v126[0];
                  }
                  *(_DWORD *)int buf = 136315906;
                  *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v131[8] = 1024;
                  *(_DWORD *)&v131[10] = 276;
                  *(_WORD *)&v131[14] = 2080;
                  *(void *)&v131[16] = v110;
                  __int16 v132 = 2080;
                  *(void *)int64x2_t v133 = v111;
                  _os_log_impl(&def_1E50E8, v107, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Attempt to get property %s for device %s failed.\"", buf, 0x26u);
                  if (v127 < 0) {
                    operator delete(v126[0]);
                  }
                  if (v129 < 0) {
                    operator delete(__p[0]);
                  }
                }
                exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
                *(void *)exceptiouint64_t n = &off_6414D8;
                exception[2] = v52;
              }
              if (v124 != 8)
              {
                uint64_t v78 = (os_log_t *)sub_32A48(13);
                __int16 v79 = *v78;
                if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
                {
                  sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                  int v80 = v129;
                  unsigned int v81 = (void **)__p[0];
                  sub_4F64((uint64_t)v126, lock);
                  uint64_t v82 = __p;
                  if (v80 < 0) {
                    uint64_t v82 = v81;
                  }
                  if (v127 >= 0) {
                    unint64_t v83 = v126;
                  }
                  else {
                    unint64_t v83 = (void **)v126[0];
                  }
                  *(_DWORD *)int buf = 136316418;
                  *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v131[8] = 1024;
                  *(_DWORD *)&v131[10] = 277;
                  *(_WORD *)&v131[14] = 2080;
                  *(void *)&v131[16] = v82;
                  __int16 v132 = 2080;
                  *(void *)int64x2_t v133 = v83;
                  *(_WORD *)&v133[8] = 1024;
                  LODWORD(v134) = v124;
                  WORD2(v134) = 2048;
                  *(void *)((char *)&v134 + 6) = 8;
                  _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Property %s for device %s failed returned size %u (expected %lu).\"", buf, 0x36u);
                  if (v127 < 0) {
                    operator delete(v126[0]);
                  }
                  if (v129 < 0) {
                    operator delete(__p[0]);
                  }
                }
                float64x2_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v84, "Property %s for device %s failed returned size %u (expected %lu).");
              }
              if (outData != *(double *)ioDataSize)
              {
                uint64_t v53 = (os_log_t *)sub_32A48(19);
                uint64_t v54 = *v53;
                if (!*v53 || !os_log_type_enabled(*v53, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_86;
                }
                sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                int v55 = v129;
                uint64_t v56 = (void **)__p[0];
                sub_4F64((uint64_t)v126, lock);
                uint64_t v57 = __p;
                if (v55 < 0) {
                  uint64_t v57 = v56;
                }
                uint64_t v58 = v126;
                if (v127 < 0) {
                  uint64_t v58 = (void **)v126[0];
                }
                *(_DWORD *)int buf = 136315906;
                *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v131[8] = 1024;
                *(_DWORD *)&v131[10] = 281;
                *(_WORD *)&v131[14] = 2080;
                *(void *)&v131[16] = v57;
                __int16 v132 = 2080;
                *(void *)int64x2_t v133 = v58;
                _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting property %s on device %s", buf, 0x26u);
                if (v127 < 0) {
                  operator delete(v126[0]);
                }
                if (v129 < 0)
                {
                  operator delete(__p[0]);
                  if (v15) {
LABEL_87:
                  }
                    operator new();
                }
                else
                {
LABEL_86:
                  if (v15) {
                    goto LABEL_87;
                  }
                }
                uint64_t v62 = *(void *)&a1->_os_unfair_lock_opaque;
                if (v16)
                {
                  AudioObjectID v63 = (*(uint64_t (**)(os_unfair_lock_s *))(v62 + 120))(a1);
                  uint64_t result = sub_1EF9C8(v63, v8, (double *)ioDataSize);
                  int v64 = result;
                  if (result)
                  {
                    unint64_t v116 = (os_log_t *)sub_32A48(13);
                    char v117 = *v116;
                    if (*v116 && os_log_type_enabled(*v116, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)int buf = 136315394;
                      *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                      *(_WORD *)&v131[8] = 1024;
                      *(_DWORD *)&v131[10] = 293;
                      _os_log_impl(&def_1E50E8, v117, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error setting device property synchronously\"", buf, 0x12u);
                    }
                    char v118 = __cxa_allocate_exception(0x10uLL);
                    *(void *)char v118 = &off_6414D8;
                    v118[2] = v64;
                  }
                }
                else
                {
                  uint64_t result = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t, void, void, uint64_t, UInt32 *))(v62 + 48))(a1, v8, 0, 0, 8, ioDataSize);
                }
              }
              goto LABEL_103;
            case 9:
              *(float *)&UInt32 v124 = sub_3850BC((float *)(v8 + 16));
              int v31 = (os_log_t *)sub_32A48(19);
              uint64_t v32 = *v31;
              if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
              {
                sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                int v33 = v129;
                uint64_t v34 = (void **)__p[0];
                sub_4F64((uint64_t)v126, lock);
                uint64_t v35 = __p;
                if (v33 < 0) {
                  uint64_t v35 = v34;
                }
                char v36 = v126;
                if (v127 < 0) {
                  char v36 = (void **)v126[0];
                }
                *(_DWORD *)int buf = 136315906;
                *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v131[8] = 1024;
                *(_DWORD *)&v131[10] = 270;
                *(_WORD *)&v131[14] = 2080;
                *(void *)&v131[16] = v35;
                __int16 v132 = 2080;
                *(void *)int64x2_t v133 = v36;
                _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating remote property %s on device %s", buf, 0x26u);
                if (v127 < 0) {
                  operator delete(v126[0]);
                }
                if (v129 < 0) {
                  operator delete(__p[0]);
                }
              }
              LODWORD(outData) = 0;
              ioDataSize[0] = 4;
              AudioObjectID v37 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120))(a1);
              uint64_t result = AudioObjectGetPropertyData(v37, (const AudioObjectPropertyAddress *)v8, 0, 0, ioDataSize, &outData);
              int v38 = result;
              if (result)
              {
                uint64_t v85 = (os_log_t *)sub_32A48(13);
                uint64_t v86 = *v85;
                if (*v85 && os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR))
                {
                  sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                  int v87 = v129;
                  uint64_t v88 = (void **)__p[0];
                  sub_4F64((uint64_t)v126, lock);
                  uint64_t v89 = __p;
                  if (v87 < 0) {
                    uint64_t v89 = v88;
                  }
                  if (v127 >= 0) {
                    uint64_t v90 = v126;
                  }
                  else {
                    uint64_t v90 = (void **)v126[0];
                  }
                  *(_DWORD *)int buf = 136315906;
                  *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v131[8] = 1024;
                  *(_DWORD *)&v131[10] = 276;
                  *(_WORD *)&v131[14] = 2080;
                  *(void *)&v131[16] = v89;
                  __int16 v132 = 2080;
                  *(void *)int64x2_t v133 = v90;
                  _os_log_impl(&def_1E50E8, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Attempt to get property %s for device %s failed.\"", buf, 0x26u);
                  if (v127 < 0) {
                    operator delete(v126[0]);
                  }
                  if (v129 < 0) {
                    operator delete(__p[0]);
                  }
                }
                uint64_t v91 = __cxa_allocate_exception(0x10uLL);
                *(void *)uint64_t v91 = &off_6414D8;
                v91[2] = v38;
              }
              if (ioDataSize[0] != 4)
              {
                int v92 = (os_log_t *)sub_32A48(13);
                long long v93 = *v92;
                if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
                {
                  sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                  int v94 = v129;
                  __int16 v95 = (void **)__p[0];
                  sub_4F64((uint64_t)v126, lock);
                  uint64_t v96 = __p;
                  if (v94 < 0) {
                    uint64_t v96 = v95;
                  }
                  if (v127 >= 0) {
                    __int16 v97 = v126;
                  }
                  else {
                    __int16 v97 = (void **)v126[0];
                  }
                  *(_DWORD *)int buf = 136316418;
                  *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v131[8] = 1024;
                  *(_DWORD *)&v131[10] = 277;
                  *(_WORD *)&v131[14] = 2080;
                  *(void *)&v131[16] = v96;
                  __int16 v132 = 2080;
                  *(void *)int64x2_t v133 = v97;
                  *(_WORD *)&v133[8] = 1024;
                  LODWORD(v134) = ioDataSize[0];
                  WORD2(v134) = 2048;
                  *(void *)((char *)&v134 + 6) = 4;
                  _os_log_impl(&def_1E50E8, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Property %s for device %s failed returned size %u (expected %lu).\"", buf, 0x36u);
                  if (v127 < 0) {
                    operator delete(v126[0]);
                  }
                  if (v129 < 0) {
                    operator delete(__p[0]);
                  }
                }
                int v98 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v98, "Property %s for device %s failed returned size %u (expected %lu).");
              }
              if (*(float *)&outData == *(float *)&v124) {
                goto LABEL_103;
              }
              uint64_t v39 = (os_log_t *)sub_32A48(19);
              uint64_t v40 = *v39;
              if (!*v39 || !os_log_type_enabled(*v39, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_62;
              }
              sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
              int v41 = v129;
              unsigned int v42 = (void **)__p[0];
              sub_4F64((uint64_t)v126, lock);
              uint64_t v43 = __p;
              if (v41 < 0) {
                uint64_t v43 = v42;
              }
              unsigned int v44 = v126;
              if (v127 < 0) {
                unsigned int v44 = (void **)v126[0];
              }
              *(_DWORD *)int buf = 136315906;
              *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&v131[8] = 1024;
              *(_DWORD *)&v131[10] = 281;
              *(_WORD *)&v131[14] = 2080;
              *(void *)&v131[16] = v43;
              __int16 v132 = 2080;
              *(void *)int64x2_t v133 = v44;
              _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting property %s on device %s", buf, 0x26u);
              if (v127 < 0) {
                operator delete(v126[0]);
              }
              if (v129 < 0)
              {
                operator delete(__p[0]);
                if (v15) {
LABEL_63:
                }
                  operator new();
              }
              else
              {
LABEL_62:
                if (v15) {
                  goto LABEL_63;
                }
              }
              uint64_t v59 = *(void *)&a1->_os_unfair_lock_opaque;
              if (v16)
              {
                AudioObjectID v60 = (*(uint64_t (**)(os_unfair_lock_s *))(v59 + 120))(a1);
                uint64_t result = sub_1F0890(v60, v8, (float *)&v124);
                int v61 = result;
                if (result)
                {
                  char v113 = (os_log_t *)sub_32A48(13);
                  unsigned int v114 = *v113;
                  if (*v113 && os_log_type_enabled(*v113, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 136315394;
                    *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                    *(_WORD *)&v131[8] = 1024;
                    *(_DWORD *)&v131[10] = 293;
                    _os_log_impl(&def_1E50E8, v114, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error setting device property synchronously\"", buf, 0x12u);
                  }
                  unsigned __int8 v115 = __cxa_allocate_exception(0x10uLL);
                  *(void *)unsigned __int8 v115 = &off_6414D8;
                  v115[2] = v61;
                }
                goto LABEL_103;
              }
              break;
            case 7:
              UInt32 v124 = sub_384FB4((int *)(v8 + 16));
              uint64_t v17 = (os_log_t *)sub_32A48(19);
              uint64_t v18 = *v17;
              if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
              {
                sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                int v19 = v129;
                uint64_t v20 = (void **)__p[0];
                sub_4F64((uint64_t)v126, lock);
                uint64_t v21 = __p;
                if (v19 < 0) {
                  uint64_t v21 = v20;
                }
                uint64_t v22 = v126;
                if (v127 < 0) {
                  uint64_t v22 = (void **)v126[0];
                }
                *(_DWORD *)int buf = 136315906;
                *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v131[8] = 1024;
                *(_DWORD *)&v131[10] = 270;
                *(_WORD *)&v131[14] = 2080;
                *(void *)&v131[16] = v21;
                __int16 v132 = 2080;
                *(void *)int64x2_t v133 = v22;
                _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Creating remote property %s on device %s", buf, 0x26u);
                if (v127 < 0) {
                  operator delete(v126[0]);
                }
                if (v129 < 0) {
                  operator delete(__p[0]);
                }
              }
              LODWORD(outData) = 0;
              ioDataSize[0] = 4;
              AudioObjectID v23 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a1->_os_unfair_lock_opaque + 120))(a1);
              uint64_t result = AudioObjectGetPropertyData(v23, (const AudioObjectPropertyAddress *)v8, 0, 0, ioDataSize, &outData);
              int v24 = result;
              if (result)
              {
                __int16 v99 = (os_log_t *)sub_32A48(13);
                double v100 = *v99;
                if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
                {
                  sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                  int v101 = v129;
                  uint64_t v102 = (void **)__p[0];
                  sub_4F64((uint64_t)v126, lock);
                  char v103 = __p;
                  if (v101 < 0) {
                    char v103 = v102;
                  }
                  if (v127 >= 0) {
                    uint64_t v104 = v126;
                  }
                  else {
                    uint64_t v104 = (void **)v126[0];
                  }
                  *(_DWORD *)int buf = 136315906;
                  *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v131[8] = 1024;
                  *(_DWORD *)&v131[10] = 276;
                  *(_WORD *)&v131[14] = 2080;
                  *(void *)&v131[16] = v103;
                  __int16 v132 = 2080;
                  *(void *)int64x2_t v133 = v104;
                  _os_log_impl(&def_1E50E8, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Attempt to get property %s for device %s failed.\"", buf, 0x26u);
                  if (v127 < 0) {
                    operator delete(v126[0]);
                  }
                  if (v129 < 0) {
                    operator delete(__p[0]);
                  }
                }
                char v105 = __cxa_allocate_exception(0x10uLL);
                *(void *)char v105 = &off_6414D8;
                v105[2] = v24;
              }
              if (ioDataSize[0] != 4)
              {
                uint64_t v71 = (os_log_t *)sub_32A48(13);
                float v72 = *v71;
                if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
                {
                  sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
                  int v73 = v129;
                  uint64_t v74 = (void **)__p[0];
                  sub_4F64((uint64_t)v126, lock);
                  char v75 = __p;
                  if (v73 < 0) {
                    char v75 = v74;
                  }
                  if (v127 >= 0) {
                    uint64_t v76 = v126;
                  }
                  else {
                    uint64_t v76 = (void **)v126[0];
                  }
                  *(_DWORD *)int buf = 136316418;
                  *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                  *(_WORD *)&v131[8] = 1024;
                  *(_DWORD *)&v131[10] = 277;
                  *(_WORD *)&v131[14] = 2080;
                  *(void *)&v131[16] = v75;
                  __int16 v132 = 2080;
                  *(void *)int64x2_t v133 = v76;
                  *(_WORD *)&v133[8] = 1024;
                  LODWORD(v134) = ioDataSize[0];
                  WORD2(v134) = 2048;
                  *(void *)((char *)&v134 + 6) = 4;
                  _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Property %s for device %s failed returned size %u (expected %lu).\"", buf, 0x36u);
                  if (v127 < 0) {
                    operator delete(v126[0]);
                  }
                  if (v129 < 0) {
                    operator delete(__p[0]);
                  }
                }
                std::string v77 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v77, "Property %s for device %s failed returned size %u (expected %lu).");
              }
              if (LODWORD(outData) == v124) {
                goto LABEL_103;
              }
              BOOL v25 = (os_log_t *)sub_32A48(19);
              BOOL v26 = *v25;
              if (!*v25 || !os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_38;
              }
              sub_16C9C4((uint64_t)__p, (unsigned int *)v8);
              int v27 = v129;
              uint64_t v28 = (void **)__p[0];
              sub_4F64((uint64_t)v126, lock);
              uint64_t v29 = __p;
              if (v27 < 0) {
                uint64_t v29 = v28;
              }
              char v30 = v126;
              if (v127 < 0) {
                char v30 = (void **)v126[0];
              }
              *(_DWORD *)int buf = 136315906;
              *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&v131[8] = 1024;
              *(_DWORD *)&v131[10] = 281;
              *(_WORD *)&v131[14] = 2080;
              *(void *)&v131[16] = v29;
              __int16 v132 = 2080;
              *(void *)int64x2_t v133 = v30;
              _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting property %s on device %s", buf, 0x26u);
              if (v127 < 0) {
                operator delete(v126[0]);
              }
              if (v129 < 0)
              {
                operator delete(__p[0]);
                if (v15) {
LABEL_39:
                }
                  operator new();
              }
              else
              {
LABEL_38:
                if (v15) {
                  goto LABEL_39;
                }
              }
              uint64_t v59 = *(void *)&a1->_os_unfair_lock_opaque;
              if (v16)
              {
                AudioObjectID v65 = (*(uint64_t (**)(os_unfair_lock_s *))(v59 + 120))(a1);
                uint64_t result = sub_1F1848(v65, v8, &v124);
                int v66 = result;
                if (result)
                {
                  long long v119 = (os_log_t *)sub_32A48(13);
                  long long v120 = *v119;
                  if (*v119)
                  {
                    if (os_log_type_enabled(*v119, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)int buf = 136315394;
                      *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                      *(_WORD *)&v131[8] = 1024;
                      *(_DWORD *)&v131[10] = 293;
                      _os_log_impl(&def_1E50E8, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error setting device property synchronously\"", buf, 0x12u);
                    }
                  }
                  uint64_t v121 = __cxa_allocate_exception(0x10uLL);
                  *(void *)uint64_t v121 = &off_6414D8;
                  v121[2] = v66;
                }
                goto LABEL_103;
              }
              break;
            default:
              uint64_t v67 = (os_log_t *)sub_32A48(13);
              uint64_t v68 = *v67;
              if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
              {
                int v69 = *(_DWORD *)(v8 + 16);
                *(_DWORD *)int buf = 136315650;
                *(void *)char v131 = "RoutingHandlerUtilities_Aspen.cpp";
                *(_WORD *)&v131[8] = 1024;
                *(_DWORD *)&v131[10] = 1077;
                *(_WORD *)&v131[14] = 1024;
                *(_DWORD *)&v131[16] = v69;
                _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal remote property VariType: %d\"", buf, 0x18u);
              }
              std::string::size_type v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v70, "Illegal remote property VariType: %d");
          }
          uint64_t result = (*(uint64_t (**)(os_unfair_lock_s *, uint64_t, void, void, uint64_t, UInt32 *))(v59 + 48))(a1, v8, 0, 0, 4, &v124);
LABEL_103:
          v8 += 40;
        }
        while (v8 != v9);
      }
    }
  }
  return result;
}

void sub_1EF94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1EF9C8(AudioObjectID a1, uint64_t a2, double *a3)
{
  uint64_t v6 = sub_32A48(13);
  if (*(unsigned char *)(v6 + 8))
  {
    char v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v70, (unsigned int *)&__p);
        uint64_t v8 = v70.__m_.__opaque[15] >= 0 ? &v70 : (std::mutex *)v70.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v60 = 1024;
        int v61 = 166;
        __int16 v62 = 2080;
        *(void *)AudioObjectID v63 = v8;
        *(_WORD *)&v63[8] = 1024;
        *(_DWORD *)&v63[10] = a1;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v70.__m_.__opaque[15] < 0) {
          operator delete((void *)v70.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v54 = a1;
  uint64_t v55 = *(void *)a2;
  int v56 = *(_DWORD *)(a2 + 8);
  int v57 = 0;
  uint64_t v58 = 0;
  double v9 = COERCE_DOUBLE(sub_1F0338((uint64_t)&v54));
  if (!v10 && *a3 == v9)
  {
    uint64_t v21 = sub_32A48(13);
    if ((*(unsigned char *)(v21 + 8) & 1) == 0) {
      return 0;
    }
    uint64_t v22 = *(NSObject **)v21;
    if (!*(void *)v21 || !os_log_type_enabled(*(os_log_t *)v21, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v60 = 1024;
    int v61 = 191;
    __int16 v62 = 1024;
    *(_DWORD *)AudioObjectID v63 = a1;
    goto LABEL_71;
  }
  uint64_t v11 = sub_32A48(13);
  if (*(unsigned char *)(v11 + 8))
  {
    int v12 = *(NSObject **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v70, (unsigned int *)&__p);
        uint64_t v13 = v70.__m_.__opaque[15] >= 0 ? &v70 : (std::mutex *)v70.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v60 = 1024;
        int v61 = 199;
        __int16 v62 = 2080;
        *(void *)AudioObjectID v63 = v13;
        *(_WORD *)&v63[8] = 1024;
        *(_DWORD *)&v63[10] = a1;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v70.__m_.__opaque[15] < 0) {
          operator delete((void *)v70.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v14 = AudioObjectSetPropertyData(a1, &buf, 0, 0, 8u, a3);
  if (!v14)
  {
    double v23 = COERCE_DOUBLE(sub_1F0338((uint64_t)&v54));
    if (!v24 && *a3 == v23)
    {
      uint64_t v38 = sub_32A48(13);
      if ((*(unsigned char *)(v38 + 8) & 1) == 0) {
        return 0;
      }
      uint64_t v22 = *(NSObject **)v38;
      if (!*(void *)v38 || !os_log_type_enabled(*(os_log_t *)v38, OS_LOG_TYPE_DEBUG)) {
        return 0;
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v60 = 1024;
      int v61 = 219;
      __int16 v62 = 1024;
      *(_DWORD *)AudioObjectID v63 = a1;
LABEL_71:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
      return 0;
    }
    memset(v70.__m_.__opaque, 0, sizeof(v70.__m_.__opaque));
    v70.__m_.__uint64_t sig = 850045863;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795;
    char v53 = 0;
    sub_662FC(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v70, (uint64_t)&v53);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v29.__d_.__rep_) / -1000)
    {
      double v26 = COERCE_DOUBLE(sub_1F0338((uint64_t)&v54));
      uint64_t v14 = v27;
      if (v27) {
        goto LABEL_89;
      }
      double v28 = v26;
      if (*a3 == v26) {
        break;
      }
      if (i <= 0)
      {
        unsigned int v42 = (os_log_t *)sub_32A48(13);
        uint64_t v14 = 2003329396;
        uint64_t v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
        {
          uint64_t v47 = *(void *)a2;
          int v48 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v47);
          unsigned int v44 = v50 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          BOOL v45 = *a3 == v28;
          buf.AudioObjectPropertySelector mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v60 = 1024;
          int v61 = 248;
          __int16 v62 = 2080;
          *(void *)AudioObjectID v63 = "set";
          *(_WORD *)&v63[8] = 2080;
          *(void *)&v63[10] = v44;
          *(_WORD *)&v63[18] = 2080;
          *(void *)&v63[20] = "set";
          *(_WORD *)&v63[28] = 1024;
          BOOL v64 = v45;
          __int16 v65 = 1024;
          int v66 = 0;
          __int16 v67 = 1024;
          AudioObjectID v68 = a1;
          _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
          if (v50 < 0) {
            operator delete(__lk.__m_);
          }
        }
LABEL_89:
        sub_6651C((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&__p);
        std::mutex::~mutex(&v70);
        return v14;
      }
      v29.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v30 = sub_32A48(13);
      if (*(unsigned char *)(v30 + 8))
      {
        int v31 = *(NSObject **)v30;
        if (*(void *)v30)
        {
          if (os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v60 = 1024;
            int v61 = 257;
            __int16 v62 = 2080;
            *(void *)AudioObjectID v63 = "with timeout";
            *(_WORD *)&v63[8] = 1024;
            *(_DWORD *)&v63[10] = a1;
            _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v70;
      __lk.__owns_ = 1;
      std::mutex::lock(&v70);
      v32.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v53)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v33 = v32.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v33 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_45;
          }
          v34.__d_.__rep_ = v33 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v34.__d_.__rep_ >= 1) {
            break;
          }
LABEL_63:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v33 || v53) {
            goto LABEL_45;
          }
        }
        std::chrono::steady_clock::now();
        v35.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v35.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v36 = 0;
          goto LABEL_59;
        }
        if (v35.__d_.__rep_ < 1)
        {
          if ((unint64_t)v35.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_58;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v36 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v35.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v36 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_59;
          }
LABEL_58:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v36 = 1000 * v35.__d_.__rep_;
LABEL_59:
          if (v36 > (v34.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v37.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_62:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v37);
            std::chrono::steady_clock::now();
            goto LABEL_63;
          }
        }
        v37.__d_.__rep_ = v36 + v34.__d_.__rep_;
        goto LABEL_62;
      }
LABEL_45:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v39 = sub_32A48(13);
    if (*(unsigned char *)(v39 + 8))
    {
      uint64_t v40 = *(NSObject **)v39;
      if (*(void *)v39)
      {
        if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v47 = *(void *)a2;
          int v48 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v47);
          int v41 = v50 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v60 = 1024;
          int v61 = 288;
          __int16 v62 = 2080;
          *(void *)AudioObjectID v63 = v41;
          *(_WORD *)&v63[8] = 1024;
          *(_DWORD *)&v63[10] = a1;
          _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v50 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }
    uint64_t v14 = 0;
    goto LABEL_89;
  }
  int v15 = (os_log_t *)sub_32A48(13);
  int v16 = *v15;
  if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(&v70, v14);
    int v17 = v70.__m_.__opaque[15];
    uint64_t sig = v70.__m_.__sig;
    uint64_t inClientData = *(void *)a2;
    int v52 = *(_DWORD *)(a2 + 8);
    sub_16C9C4((uint64_t)&__p, (unsigned int *)&inClientData);
    int v19 = &v70;
    if (v17 < 0) {
      int v19 = (std::mutex *)sig;
    }
    if (__p.__cv_.__opaque[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::condition_variable *)__p.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v60 = 1024;
    int v61 = 207;
    __int16 v62 = 1024;
    *(_DWORD *)AudioObjectID v63 = v14;
    *(_WORD *)&v63[4] = 2080;
    *(void *)&v63[6] = v19;
    *(_WORD *)&v63[14] = 2080;
    *(void *)&v63[16] = p_p;
    *(_WORD *)&v63[24] = 1024;
    *(_DWORD *)&v63[26] = a1;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
    if (__p.__cv_.__opaque[15] < 0) {
      operator delete((void *)__p.__cv_.__sig);
    }
    if (v70.__m_.__opaque[15] < 0) {
      operator delete((void *)v70.__m_.__sig);
    }
  }
  return v14;
}

void sub_1F02B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::condition_variable *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_6651C((uint64_t)&a17);
  std::condition_variable::~condition_variable((std::condition_variable *)&a36);
  std::mutex::~mutex((std::mutex *)(v36 - 184));
  _Unwind_Resume(a1);
}

uint64_t sub_1F0338(uint64_t a1)
{
  BOOL v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  sub_904E4((uint64_t)&v19, (AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  unsigned int v4 = v19;
  if (v19)
  {
    int v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v17, v4);
        int v7 = v18;
        uint64_t v8 = (void **)v17[0];
        uint64_t v13 = *v2;
        int v14 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v13);
        double v9 = v17;
        if (v7 < 0) {
          double v9 = v8;
        }
        if (v16 >= 0) {
          int v10 = __p;
        }
        else {
          int v10 = (void **)__p[0];
        }
        AudioObjectID v11 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        unsigned int v26 = v4;
        __int16 v27 = 2080;
        double v28 = v9;
        __int16 v29 = 2080;
        uint64_t v30 = v10;
        __int16 v31 = 1024;
        AudioObjectID v32 = v11;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
      }
    }
  }
  if (v21) {
    return v20;
  }
  else {
    return 0;
  }
}

void sub_1F04E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1F0508(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2)
  {
    AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
    uint64_t result = sub_1EF9C8(v4, a1 + 16, (double *)(a1 + 40));
    if (result)
    {
      int v10 = result;
      int v7 = (os_log_t *)sub_32A48(13);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int v12 = "RoutingHandlerAction_SetObjectProperty.h";
          __int16 v13 = 1024;
          int v14 = 165;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error setting device property synchronously\"", buf, 0x12u);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v10;
    }
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return v6();
  }
  return result;
}

uint64_t sub_1F06C0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2)
  {
    AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
    uint64_t result = sub_1EF9C8(v4, a1 + 16, (double *)(a1 + 32));
    if (result)
    {
      int v10 = result;
      int v7 = (os_log_t *)sub_32A48(13);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          int v12 = "RoutingHandlerAction_SetObjectProperty.h";
          __int16 v13 = 1024;
          int v14 = 151;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error setting device property synchronously\"", buf, 0x12u);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v10;
    }
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return v6();
  }
  return result;
}

void sub_1F0878()
{
}

uint64_t sub_1F0890(AudioObjectID a1, uint64_t a2, float *a3)
{
  uint64_t v6 = sub_32A48(13);
  if (*(unsigned char *)(v6 + 8))
  {
    int v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v67, (unsigned int *)&__p);
        uint64_t v8 = v67.__m_.__opaque[15] >= 0 ? &v67 : (std::mutex *)v67.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v57 = 1024;
        int v58 = 166;
        __int16 v59 = 2080;
        *(void *)__int16 v60 = v8;
        *(_WORD *)&v60[8] = 1024;
        *(_DWORD *)&v60[10] = a1;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v67.__m_.__opaque[15] < 0) {
          operator delete((void *)v67.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v51 = a1;
  uint64_t v52 = *(void *)a2;
  int v53 = *(_DWORD *)(a2 + 8);
  int v54 = 0;
  uint64_t v55 = 0;
  unint64_t v9 = sub_1F1208((uint64_t)&v51);
  if (!HIDWORD(v9) && *a3 == *(float *)&v9)
  {
    uint64_t v10 = sub_32A48(13);
    if ((*(unsigned char *)(v10 + 8) & 1) == 0) {
      return 0;
    }
    AudioObjectID v11 = *(NSObject **)v10;
    if (!*(void *)v10 || !os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v57 = 1024;
    int v58 = 191;
    __int16 v59 = 1024;
    *(_DWORD *)__int16 v60 = a1;
LABEL_41:
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
    return 0;
  }
  uint64_t v12 = sub_32A48(13);
  if (*(unsigned char *)(v12 + 8))
  {
    __int16 v13 = *(NSObject **)v12;
    if (*(void *)v12)
    {
      if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v67, (unsigned int *)&__p);
        int v14 = v67.__m_.__opaque[15] >= 0 ? &v67 : (std::mutex *)v67.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v57 = 1024;
        int v58 = 199;
        __int16 v59 = 2080;
        *(void *)__int16 v60 = v14;
        *(_WORD *)&v60[8] = 1024;
        *(_DWORD *)&v60[10] = a1;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v67.__m_.__opaque[15] < 0) {
          operator delete((void *)v67.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v15 = AudioObjectSetPropertyData(a1, &buf, 0, 0, 4u, a3);
  if (!v15)
  {
    unint64_t v22 = sub_1F1208((uint64_t)&v51);
    if (!HIDWORD(v22) && *a3 == *(float *)&v22)
    {
      uint64_t v23 = sub_32A48(13);
      if ((*(unsigned char *)(v23 + 8) & 1) == 0) {
        return 0;
      }
      AudioObjectID v11 = *(NSObject **)v23;
      if (!*(void *)v23 || !os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG)) {
        return 0;
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v57 = 1024;
      int v58 = 219;
      __int16 v59 = 1024;
      *(_DWORD *)__int16 v60 = a1;
      goto LABEL_41;
    }
    memset(v67.__m_.__opaque, 0, sizeof(v67.__m_.__opaque));
    v67.__m_.__uint64_t sig = 850045863;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795;
    char v50 = 0;
    sub_662FC(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v67, (uint64_t)&v50);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v27.__d_.__rep_) / -1000)
    {
      unint64_t v25 = sub_1F1208((uint64_t)&v51);
      uint64_t v15 = HIDWORD(v25);
      if (HIDWORD(v25)) {
        goto LABEL_89;
      }
      float v26 = *(float *)&v25;
      if (*a3 == *(float *)&v25) {
        break;
      }
      if (i <= 0)
      {
        uint64_t v39 = (os_log_t *)sub_32A48(13);
        uint64_t v15 = 2003329396;
        uint64_t v40 = *v39;
        if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
        {
          uint64_t v44 = *(void *)a2;
          int v45 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v44);
          int v41 = v47 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          BOOL v42 = *a3 == v26;
          buf.AudioObjectPropertySelector mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v57 = 1024;
          int v58 = 248;
          __int16 v59 = 2080;
          *(void *)__int16 v60 = "set";
          *(_WORD *)&v60[8] = 2080;
          *(void *)&v60[10] = v41;
          *(_WORD *)&v60[18] = 2080;
          *(void *)&v60[20] = "set";
          *(_WORD *)&v60[28] = 1024;
          BOOL v61 = v42;
          __int16 v62 = 1024;
          int v63 = 0;
          __int16 v64 = 1024;
          AudioObjectID v65 = a1;
          _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
          if (v47 < 0) {
            operator delete(__lk.__m_);
          }
        }
LABEL_89:
        sub_6651C((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&__p);
        std::mutex::~mutex(&v67);
        return v15;
      }
      v27.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v28 = sub_32A48(13);
      if (*(unsigned char *)(v28 + 8))
      {
        __int16 v29 = *(NSObject **)v28;
        if (*(void *)v28)
        {
          if (os_log_type_enabled(*(os_log_t *)v28, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v57 = 1024;
            int v58 = 257;
            __int16 v59 = 2080;
            *(void *)__int16 v60 = "with timeout";
            *(_WORD *)&v60[8] = 1024;
            *(_DWORD *)&v60[10] = a1;
            _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v67;
      __lk.__owns_ = 1;
      std::mutex::lock(&v67);
      v30.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v50)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v31 = v30.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v31 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_52;
          }
          v32.__d_.__rep_ = v31 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v32.__d_.__rep_ >= 1) {
            break;
          }
LABEL_70:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v31 || v50) {
            goto LABEL_52;
          }
        }
        std::chrono::steady_clock::now();
        v33.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v33.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = 0;
          goto LABEL_66;
        }
        if (v33.__d_.__rep_ < 1)
        {
          if ((unint64_t)v33.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_65;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v33.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_66;
          }
LABEL_65:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = 1000 * v33.__d_.__rep_;
LABEL_66:
          if (v34 > (v32.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v35.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_69:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v35);
            std::chrono::steady_clock::now();
            goto LABEL_70;
          }
        }
        v35.__d_.__rep_ = v34 + v32.__d_.__rep_;
        goto LABEL_69;
      }
LABEL_52:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v36 = sub_32A48(13);
    if (*(unsigned char *)(v36 + 8))
    {
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v37 = *(NSObject **)v36;
      if (*(void *)v36)
      {
        if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v44 = *(void *)a2;
          int v45 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v44);
          uint64_t v38 = v47 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v57 = 1024;
          int v58 = 288;
          __int16 v59 = 2080;
          *(void *)__int16 v60 = v38;
          *(_WORD *)&v60[8] = 1024;
          *(_DWORD *)&v60[10] = a1;
          _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v47 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }
    uint64_t v15 = 0;
    goto LABEL_89;
  }
  char v16 = (os_log_t *)sub_32A48(13);
  int v17 = *v16;
  if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(&v67, v15);
    int v18 = v67.__m_.__opaque[15];
    uint64_t sig = v67.__m_.__sig;
    uint64_t inClientData = *(void *)a2;
    int v49 = *(_DWORD *)(a2 + 8);
    sub_16C9C4((uint64_t)&__p, (unsigned int *)&inClientData);
    uint64_t v20 = &v67;
    if (v18 < 0) {
      uint64_t v20 = (std::mutex *)sig;
    }
    if (__p.__cv_.__opaque[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::condition_variable *)__p.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v57 = 1024;
    int v58 = 207;
    __int16 v59 = 1024;
    *(_DWORD *)__int16 v60 = v15;
    *(_WORD *)&v60[4] = 2080;
    *(void *)&v60[6] = v20;
    *(_WORD *)&v60[14] = 2080;
    *(void *)&v60[16] = p_p;
    *(_WORD *)&v60[24] = 1024;
    *(_DWORD *)&v60[26] = a1;
    _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
    if (__p.__cv_.__opaque[15] < 0) {
      operator delete((void *)__p.__cv_.__sig);
    }
    if (v67.__m_.__opaque[15] < 0) {
      operator delete((void *)v67.__m_.__sig);
    }
  }
  return v15;
}

void sub_1F1184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::condition_variable *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_6651C((uint64_t)&a17);
  std::condition_variable::~condition_variable((std::condition_variable *)&a36);
  std::mutex::~mutex((std::mutex *)(v36 - 184));
  _Unwind_Resume(a1);
}

unint64_t sub_1F1208(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_1F13D8((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        AudioObjectID v11 = v20;
        if (v9 < 0) {
          AudioObjectID v11 = v10;
        }
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        uint64_t v28 = v11;
        __int16 v29 = 2080;
        std::chrono::steady_clock::time_point v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_1F13B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1F13D8(AudioObjectID *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (AudioObjectHasProperty(*a1, a2))
  {
    ioDataSize[0] = 2003329396;
    *(void *)&ioDataSize[1] = 0;
    unsigned int PropertyData = 2003329396;
    uint64_t v9 = 0;
    ioDataSize[0] = sub_26E94(*a1, a2, a3, a4);
    if (ioDataSize[0])
    {
      outData[0] = 0;
      unsigned int PropertyData = AudioObjectGetPropertyData(*a1, a2, a3, a4, ioDataSize, outData);
      if (PropertyData) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = outData[0];
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    unsigned int PropertyData = 2003332927;
  }
  return PropertyData | (unint64_t)(v9 << 32);
}

uint64_t sub_1F14C0(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2)
  {
    AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
    uint64_t result = sub_1F0890(v4, a1 + 16, (float *)(a1 + 32));
    if (result)
    {
      int v10 = result;
      int v7 = (os_log_t *)sub_32A48(13);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v12 = "RoutingHandlerAction_SetObjectProperty.h";
          __int16 v13 = 1024;
          int v14 = 165;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error setting device property synchronously\"", buf, 0x12u);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v10;
    }
  }
  else
  {
    char v6 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return v6();
  }
  return result;
}

uint64_t sub_1F1678(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2)
  {
    AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
    uint64_t result = sub_1F0890(v4, a1 + 16, (float *)(a1 + 28));
    if (result)
    {
      int v10 = result;
      int v7 = (os_log_t *)sub_32A48(13);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v12 = "RoutingHandlerAction_SetObjectProperty.h";
          __int16 v13 = 1024;
          int v14 = 151;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error setting device property synchronously\"", buf, 0x12u);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v10;
    }
  }
  else
  {
    char v6 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return v6();
  }
  return result;
}

void sub_1F1830()
{
}

uint64_t sub_1F1848(AudioObjectID a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6 = sub_32A48(13);
  if (*(unsigned char *)(v6 + 8))
  {
    int v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v69, (unsigned int *)&__p);
        uint64_t v8 = v69.__m_.__opaque[15] >= 0 ? &v69 : (std::mutex *)v69.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v59 = 1024;
        int v60 = 166;
        __int16 v61 = 2080;
        *(void *)__int16 v62 = v8;
        *(_WORD *)&v62[8] = 1024;
        *(_DWORD *)&v62[10] = a1;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v69.__m_.__opaque[15] < 0) {
          operator delete((void *)v69.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v53 = a1;
  uint64_t v54 = *(void *)a2;
  int v55 = *(_DWORD *)(a2 + 8);
  int v56 = 0;
  uint64_t v57 = 0;
  unint64_t v9 = sub_1F21AC((uint64_t)&v53);
  if (HIDWORD(v9)) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = *a3 == v9;
  }
  int v11 = v10;
  uint64_t v12 = sub_32A48(13);
  uint64_t v13 = *(void *)(v12 + 8);
  if (v11)
  {
    if ((v13 & 1) == 0) {
      return 0;
    }
    int v14 = *(NSObject **)v12;
    if (!*(void *)v12 || !os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    buf.AudioObjectPropertySelector mSelector = 136315650;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v59 = 1024;
    int v60 = 191;
    __int16 v61 = 1024;
    *(_DWORD *)__int16 v62 = a1;
LABEL_20:
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
    return 0;
  }
  if (v13)
  {
    uint64_t v15 = *(NSObject **)v12;
    if (*(void *)v12)
    {
      if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
      {
        __p.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)__p.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v69, (unsigned int *)&__p);
        uint64_t v16 = v69.__m_.__opaque[15] >= 0 ? &v69 : (std::mutex *)v69.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v59 = 1024;
        int v60 = 199;
        __int16 v61 = 2080;
        *(void *)__int16 v62 = v16;
        *(_WORD *)&v62[8] = 1024;
        *(_DWORD *)&v62[10] = a1;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v69.__m_.__opaque[15] < 0) {
          operator delete((void *)v69.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  uint64_t v17 = AudioObjectSetPropertyData(a1, &buf, 0, 0, 4u, a3);
  if (!v17)
  {
    unint64_t v24 = sub_1F21AC((uint64_t)&v53);
    if (!HIDWORD(v24) && *a3 == v24)
    {
      uint64_t v25 = sub_32A48(13);
      if ((*(unsigned char *)(v25 + 8) & 1) == 0) {
        return 0;
      }
      int v14 = *(NSObject **)v25;
      if (!*(void *)v25 || !os_log_type_enabled(*(os_log_t *)v25, OS_LOG_TYPE_DEBUG)) {
        return 0;
      }
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v59 = 1024;
      int v60 = 219;
      __int16 v61 = 1024;
      *(_DWORD *)__int16 v62 = a1;
      goto LABEL_20;
    }
    memset(v69.__m_.__opaque, 0, sizeof(v69.__m_.__opaque));
    v69.__m_.__uint64_t sig = 850045863;
    memset(__p.__cv_.__opaque, 0, sizeof(__p.__cv_.__opaque));
    __p.__cv_.__uint64_t sig = 1018212795;
    char v52 = 0;
    sub_662FC(&inClientData, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&__p, (uint64_t)&v69, (uint64_t)&v52);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v30.__d_.__rep_) / -1000)
    {
      unint64_t v28 = sub_1F21AC((uint64_t)&v53);
      int v29 = v28;
      uint64_t v17 = HIDWORD(v28);
      if (HIDWORD(v28)) {
        goto LABEL_95;
      }
      if (*a3 == v28) {
        break;
      }
      if (i <= 0)
      {
        BOOL v42 = (os_log_t *)sub_32A48(13);
        uint64_t v17 = 2003329396;
        uint64_t v43 = *v42;
        if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
        {
          uint64_t v46 = *(void *)a2;
          int v47 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v46);
          uint64_t v44 = v49 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          BOOL v45 = *a3 == v29;
          buf.AudioObjectPropertySelector mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v59 = 1024;
          int v60 = 248;
          __int16 v61 = 2080;
          *(void *)__int16 v62 = "set";
          *(_WORD *)&v62[8] = 2080;
          *(void *)&v62[10] = v44;
          *(_WORD *)&v62[18] = 2080;
          *(void *)&v62[20] = "set";
          *(_WORD *)&v62[28] = 1024;
          BOOL v63 = v45;
          __int16 v64 = 1024;
          int v65 = 0;
          __int16 v66 = 1024;
          AudioObjectID v67 = a1;
          _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
          if (v49 < 0) {
            operator delete(__lk.__m_);
          }
        }
LABEL_95:
        sub_6651C((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&__p);
        std::mutex::~mutex(&v69);
        return v17;
      }
      v30.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v31 = sub_32A48(13);
      if (*(unsigned char *)(v31 + 8))
      {
        AudioObjectID v32 = *(NSObject **)v31;
        if (*(void *)v31)
        {
          if (os_log_type_enabled(*(os_log_t *)v31, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v59 = 1024;
            int v60 = 257;
            __int16 v61 = 2080;
            *(void *)__int16 v62 = "with timeout";
            *(_WORD *)&v62[8] = 1024;
            *(_DWORD *)&v62[10] = a1;
            _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v69;
      __lk.__owns_ = 1;
      std::mutex::lock(&v69);
      v33.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v52)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = v33.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v34 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_58;
          }
          v35.__d_.__rep_ = v34 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v35.__d_.__rep_ >= 1) {
            break;
          }
LABEL_76:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v34 || v52) {
            goto LABEL_58;
          }
        }
        std::chrono::steady_clock::now();
        v36.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v36.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v37 = 0;
          goto LABEL_72;
        }
        if (v36.__d_.__rep_ < 1)
        {
          if ((unint64_t)v36.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_71;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v37 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v36.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v37 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_72;
          }
LABEL_71:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v37 = 1000 * v36.__d_.__rep_;
LABEL_72:
          if (v37 > (v35.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v38.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_75:
            std::condition_variable::__do_timed_wait(&__p, &__lk, v38);
            std::chrono::steady_clock::now();
            goto LABEL_76;
          }
        }
        v38.__d_.__rep_ = v37 + v35.__d_.__rep_;
        goto LABEL_75;
      }
LABEL_58:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v39 = sub_32A48(13);
    if (*(unsigned char *)(v39 + 8))
    {
      uint64_t v40 = *(NSObject **)v39;
      if (*(void *)v39)
      {
        if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v46 = *(void *)a2;
          int v47 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v46);
          int v41 = v49 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v59 = 1024;
          int v60 = 288;
          __int16 v61 = 2080;
          *(void *)__int16 v62 = v41;
          *(_WORD *)&v62[8] = 1024;
          *(_DWORD *)&v62[10] = a1;
          _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v49 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }
    uint64_t v17 = 0;
    goto LABEL_95;
  }
  int v18 = (os_log_t *)sub_32A48(13);
  char v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(&v69, v17);
    int v20 = v69.__m_.__opaque[15];
    uint64_t sig = v69.__m_.__sig;
    uint64_t inClientData = *(void *)a2;
    int v51 = *(_DWORD *)(a2 + 8);
    sub_16C9C4((uint64_t)&__p, (unsigned int *)&inClientData);
    unint64_t v22 = &v69;
    if (v20 < 0) {
      unint64_t v22 = (std::mutex *)sig;
    }
    if (__p.__cv_.__opaque[15] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::condition_variable *)__p.__cv_.__sig;
    }
    buf.AudioObjectPropertySelector mSelector = 136316418;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
    __int16 v59 = 1024;
    int v60 = 207;
    __int16 v61 = 1024;
    *(_DWORD *)__int16 v62 = v17;
    *(_WORD *)&v62[4] = 2080;
    *(void *)&v62[6] = v22;
    *(_WORD *)&v62[14] = 2080;
    *(void *)&v62[16] = p_p;
    *(_WORD *)&v62[24] = 1024;
    *(_DWORD *)&v62[26] = a1;
    _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
    if (__p.__cv_.__opaque[15] < 0) {
      operator delete((void *)__p.__cv_.__sig);
    }
    if (v69.__m_.__opaque[15] < 0) {
      operator delete((void *)v69.__m_.__sig);
    }
  }
  return v17;
}

void sub_1F2128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::condition_variable *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_6651C((uint64_t)&a17);
  std::condition_variable::~condition_variable((std::condition_variable *)&a36);
  std::mutex::~mutex((std::mutex *)(v36 - 168));
  _Unwind_Resume(a1);
}

unint64_t sub_1F21AC(uint64_t a1)
{
  int v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_26DAC((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        BOOL v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        int v11 = v20;
        if (v9 < 0) {
          int v11 = v10;
        }
        if (v19 >= 0) {
          uint64_t v12 = __p;
        }
        else {
          uint64_t v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        unint64_t v28 = v11;
        __int16 v29 = 2080;
        std::chrono::system_clock::time_point v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_1F2358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1F237C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2)
  {
    AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
    uint64_t result = sub_1F1848(v4, a1 + 16, (_DWORD *)(a1 + 32));
    if (result)
    {
      int v10 = result;
      int v7 = (os_log_t *)sub_32A48(13);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v12 = "RoutingHandlerAction_SetObjectProperty.h";
          __int16 v13 = 1024;
          int v14 = 165;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error setting device property synchronously\"", buf, 0x12u);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v10;
    }
  }
  else
  {
    char v6 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return v6();
  }
  return result;
}

uint64_t sub_1F2534(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2)
  {
    AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3);
    uint64_t result = sub_1F1848(v4, a1 + 16, (_DWORD *)(a1 + 28));
    if (result)
    {
      int v10 = result;
      int v7 = (os_log_t *)sub_32A48(13);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v12 = "RoutingHandlerAction_SetObjectProperty.h";
          __int16 v13 = 1024;
          int v14 = 151;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error setting device property synchronously\"", buf, 0x12u);
        }
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v10;
    }
  }
  else
  {
    char v6 = *(uint64_t (**)(void))(*(void *)v3 + 48);
    return v6();
  }
  return result;
}

void sub_1F26EC()
{
}

uint64_t sub_1F2704(int a1)
{
  uint64_t result = 1920364387;
  if (a1 <= 1986556787)
  {
    if (a1 <= 1768779618)
    {
      if (a1 == 1735222132) {
        return 1919117428;
      }
      if (a1 == 1751212899) {
        return 1919708275;
      }
      int v4 = 1768057203;
    }
    else
    {
      if (a1 > 1919776354)
      {
        if (a1 != 1919776355)
        {
          int v3 = 1986098036;
          goto LABEL_26;
        }
        return 1919117428;
      }
      if (a1 == 1768779619) {
        return 1919117428;
      }
      int v4 = 1768781411;
    }
LABEL_18:
    if (a1 != v4) {
      return 1918989668;
    }
    return 1919117428;
  }
  if (a1 > 1987081838)
  {
    if (a1 > 1987211116)
    {
      if (a1 == 1987211117) {
        return result;
      }
      unsigned __int16 v5 = 29545;
    }
    else
    {
      if (a1 == 1987081839) {
        return 1919117428;
      }
      unsigned __int16 v5 = 25447;
    }
    int v3 = v5 | 0x76720000;
    goto LABEL_26;
  }
  if (a1 > 1987077986)
  {
    if (a1 == 1987077987) {
      return 1919117428;
    }
    int v4 = 1987081833;
    goto LABEL_18;
  }
  if (a1 == 1986556788) {
    return result;
  }
  int v3 = 1986884455;
LABEL_26:
  if (a1 != v3) {
    return 1918989668;
  }
  return result;
}

uint64_t sub_1F2870(int a1, uint64_t a2)
{
  int v3 = 2;
  if (a1 <= 1986884454)
  {
    if (a1 == 1836281204)
    {
      int v3 = 5;
      return sub_474A74(a2, v3);
    }
    int v4 = 1986556788;
  }
  else
  {
    if (a1 == 1986884455 || a1 == 1987208039) {
      return sub_474A74(a2, v3);
    }
    int v4 = 1987211117;
  }
  if (a1 != v4) {
    int v3 = 0;
  }
  return sub_474A74(a2, v3);
}

uint64_t sub_1F28E8(int a1, uint64_t a2)
{
  if (!a2)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    unsigned __int16 v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v9 = 1024;
      int v10 = 1130;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v7 = a1 ^ 1;
  strcpy(buf, "fnw6tpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a2 + 16))(a2, buf);
  if (result) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, void, void, uint64_t, int *))(*(void *)a2 + 48))(a2, buf, 0, 0, 4, &v7);
  }
  return result;
}

void sub_1F2A6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1F2A88(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 == a1)
  {
LABEL_4:
    BOOL v3 = 0;
  }
  else
  {
    while (!sub_213B20(*(void *)(v1 + 16)))
    {
      uint64_t v1 = *(void *)(v1 + 8);
      if (v1 == a1) {
        goto LABEL_4;
      }
    }
    sub_3CD68C();
    if (HIDWORD(qword_65E370) == 2)
    {
      BOOL v3 = 1;
    }
    else
    {
      sub_3CD68C();
      BOOL v3 = HIDWORD(qword_65E370) == 3;
    }
  }
  int v4 = sub_23AC0();
  uint64_t v5 = 0x100000000;
  if (!v4) {
    uint64_t v5 = 0;
  }
  return v5 | v3;
}

uint64_t sub_1F2B14(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = sub_1F2A88(a1);
  int v6 = sub_209B38();
  uint64_t v7 = v5 & 0xFFFFFFFD;
  if (v6 && v7 == 1) {
    return v7 | v5 & 0x100000000;
  }
  if (a3)
  {
    if (v7 == 1)
    {
      if (a2 <= 1987077986)
      {
        if (a2 == 1768057203) {
          return v7 | v5 & 0x100000000;
        }
        int v8 = 1919776355;
      }
      else
      {
        if (a2 == 1987077987 || a2 == 1987081833) {
          return v7 | v5 & 0x100000000;
        }
        int v8 = 1987081839;
      }
      if (a2 != v8) {
        goto LABEL_17;
      }
      return v7 | v5 & 0x100000000;
    }
LABEL_17:
    uint64_t v7 = 0;
    return v7 | v5 & 0x100000000;
  }
  if (v7 != 1) {
    goto LABEL_17;
  }
  uint64_t v7 = 0;
  if (a2 <= 1987077986)
  {
    if (a2 == 1768057203) {
      return v7 | v5 & 0x100000000;
    }
    int v9 = 1919776355;
  }
  else
  {
    if (a2 == 1987077987 || a2 == 1987081833) {
      return v7 | v5 & 0x100000000;
    }
    int v9 = 1987081839;
  }
  if (a2 != v9) {
    uint64_t v7 = 1;
  }
  return v7 | v5 & 0x100000000;
}

unint64_t sub_1F2C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_115244(a2, 1);
  if (v6)
  {
    unint64_t v7 = sub_1F2D6C(a1, v5, a3);
    unint64_t v8 = v7 & 0xFFFFFF0000000000;
    uint64_t v9 = v7 & 0xFF00000000;
    uint64_t v10 = v7 & 0xFFFFFF00;
    uint64_t v11 = v7;
  }
  else
  {
    uint64_t v12 = (os_log_t *)sub_32A48(19);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 136315650;
      uint64_t v16 = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v17 = 1024;
      int v18 = 1194;
      __int16 v19 = 1024;
      int v20 = 1;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Missing ActivationParams for connection %u", (uint8_t *)&v15, 0x18u);
    }
    uint64_t v9 = 0;
    uint64_t v11 = 0;
    unint64_t v8 = 0;
    uint64_t v10 = 0;
  }
  return v11 | v10 | v9 | v8;
}

unint64_t sub_1F2D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = (int *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 20)) {
    char v6 = (int *)(a1 + 12);
  }
  int v7 = *v6;
  sub_43F38((uint64_t *)buf, (uint64_t *)(a2 + 16), "", 1205);
  sub_E5310((uint64_t)v24, 1, v7, *(_DWORD *)(*(void *)buf + 264));
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  unint64_t v8 = sub_37F844(*(void *)(a2 + 56), (uint64_t)v24, a3);
  uint64_t v9 = a1 + 8;
  if (v10)
  {
    uint64_t v11 = (uint64_t *)v8;
    uint64_t v12 = (os_log_t *)sub_32A48(20);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_383858(&__p, v9);
      int v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1211;
      __int16 v28 = 1024;
      int v29 = a3;
      __int16 v30 = 2080;
      __int16 v31 = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PerVAD Volume description of scope %d present for route %s", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v15 = *v11;
    unint64_t v16 = *v11 & 0xFFFFFF0000000000;
    uint64_t v17 = v15 & 0xFF00000000;
    uint64_t v18 = v15 & 0xFFFFFF00;
    uint64_t v19 = v15;
  }
  else
  {
    int v20 = (os_log_t *)sub_32A48(20);
    unint64_t v16 = (unint64_t)*v20;
    if (*v20)
    {
      if (os_log_type_enabled(*v20, OS_LOG_TYPE_INFO))
      {
        sub_383858(&__p, v9);
        char v21 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1217;
        __int16 v28 = 1024;
        int v29 = a3;
        __int16 v30 = 2080;
        __int16 v31 = v21;
        _os_log_impl(&def_1E50E8, (os_log_t)v16, OS_LOG_TYPE_INFO, "%25s:%-5d Extended Volume description of scope %d absent for route %s", buf, 0x22u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v17 = 0;
      uint64_t v19 = 0;
      unint64_t v16 = 0;
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v18 = 0;
  }
  if (v25)
  {
    int v26 = v25;
    operator delete(v25);
  }
  return v19 | v17 | v16 | v18;
}

void sub_1F2FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1F3044(unsigned int **a1, uint64_t *a2, os_unfair_lock_s *a3)
{
  if (!a3)
  {
    std::chrono::steady_clock::time_point v33 = (os_log_t *)sub_32A48(13);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1224;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*a1 != a1[1])
  {
    uint64_t v5 = "";
    sub_43F38(&v41, a2, "", 1228);
    uint64_t v6 = sub_32A48(20);
    if (*(unsigned char *)(v6 + 8))
    {
      int v7 = *(NSObject **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v8 = (os_unfair_lock_s *)v41;
          if ((*(_WORD *)(v41 + 184) & 1) == 0) {
            uint64_t v5 = "not ";
          }
          sub_82188(&v40, *a1, a1[1]);
          int v9 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
          std::string::size_type v10 = v40.__r_.__value_.__r.__words[0];
          sub_4F64((uint64_t)__p, v8 + 2);
          uint64_t v11 = &v40;
          if (v9 < 0) {
            uint64_t v11 = (std::string *)v10;
          }
          if (v39 >= 0) {
            uint64_t v12 = __p;
          }
          else {
            uint64_t v12 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1232;
          __int16 v44 = 2080;
          BOOL v45 = (std::string *)v5;
          __int16 v46 = 2080;
          int v47 = v11;
          __int16 v48 = 2080;
          char v49 = v12;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Will %smark sub-ports %s active on port %s.", buf, 0x30u);
          if (v39 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    uint64_t v13 = sub_32A48(20);
    if (*(unsigned char *)(v13 + 8))
    {
      int v14 = *(NSObject **)v13;
      if (*(void *)v13)
      {
        if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v15 = &v40;
          sub_82188(&v40, *a1, a1[1]);
          if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v15 = (std::string *)v40.__r_.__value_.__r.__words[0];
          }
          sub_4F64((uint64_t)__p, (os_unfair_lock_t)(v41 + 8));
          int v16 = v39;
          uint64_t v17 = (void **)__p[0];
          sub_4F64((uint64_t)v36, a3 + 2);
          uint64_t v18 = __p;
          if (v16 < 0) {
            uint64_t v18 = v17;
          }
          if (v37 >= 0) {
            uint64_t v19 = v36;
          }
          else {
            uint64_t v19 = (void **)v36[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1234;
          __int16 v44 = 2080;
          BOOL v45 = v15;
          __int16 v46 = 2080;
          int v47 = (std::string *)v18;
          __int16 v48 = 2080;
          char v49 = v19;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Will activate sub-ports %s for port %s on device %s.", buf, 0x30u);
          if (v37 < 0) {
            operator delete(v36[0]);
          }
          if (v39 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    unint64_t v20 = (char *)a1[1] - (char *)*a1;
    if (v20 < 5)
    {
      if (v20 != 4) {
        goto LABEL_58;
      }
      __int16 v28 = (_WORD *)v41;
      (*(void (**)(unsigned char *__return_ptr, uint64_t, void))(*(void *)v41 + 464))(buf, v41, **a1);
      (*(void (**)(os_unfair_lock_s *, unsigned char *, void))(*(void *)&a3->_os_unfair_lock_opaque + 400))(a3, buf, v28[92] & 1);
      (*(void (**)(_WORD *, void))(*(void *)v28 + 512))(v28, **a1);
      int v29 = *(void **)buf;
      if (!*(void *)buf) {
        goto LABEL_58;
      }
      *(void *)&buf[8] = *(void *)buf;
    }
    else
    {
      char v21 = (os_unfair_lock_s *)v41;
      (*(void (**)(os_unfair_lock_s *, unsigned int **, void))(*(void *)&a3->_os_unfair_lock_opaque
                                                                          + 400))(a3, a1, *(_WORD *)(v41 + 184) & 1);
      if (v21[36]._os_unfair_lock_opaque == 1886216809)
      {
        unint64_t v22 = (os_log_t *)sub_32A48(20);
        __int16 v23 = *v22;
        if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_INFO))
        {
          sub_4F64((uint64_t)&v40, v21 + 2);
          int v24 = SHIBYTE(v40.__r_.__value_.__r.__words[2]);
          std::string::size_type v25 = v40.__r_.__value_.__r.__words[0];
          sub_2417C(__p, 0x616C6C20u);
          int v26 = &v40;
          if (v24 < 0) {
            int v26 = (std::string *)v25;
          }
          if (v39 >= 0) {
            __int16 v27 = __p;
          }
          else {
            __int16 v27 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1245;
          __int16 v44 = 2080;
          BOOL v45 = v26;
          __int16 v46 = 2080;
          int v47 = (std::string *)v27;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_INFO, "%25s:%-5d Setting multiple sub-ports active on Port: %s.  Converting to a single sub-port with ID: %s", buf, 0x26u);
          if (v39 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
        }
        (*(void (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v21->_os_unfair_lock_opaque + 512))(v21, 1634495520);
        goto LABEL_58;
      }
      uint64_t v30 = sub_32A48(20);
      if ((*(unsigned char *)(v30 + 8) & 1) == 0) {
        goto LABEL_58;
      }
      __int16 v31 = *(NSObject **)v30;
      if (!*(void *)v30 || !os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_58;
      }
      sub_4F64((uint64_t)&v40, v21 + 2);
      AudioObjectID v32 = (v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v40
          : (std::string *)v40.__r_.__value_.__r.__words[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1251;
      __int16 v44 = 2080;
      BOOL v45 = v32;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to set multiple sub-ports active on Port: %s.  Ignoring.", buf, 0x1Cu);
      if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_58:
        if (v42) {
          sub_4636C(v42);
        }
        return;
      }
      int v29 = (void *)v40.__r_.__value_.__r.__words[0];
    }
    operator delete(v29);
    goto LABEL_58;
  }
}

void sub_1F36BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28)
{
  if (a26) {
    sub_4636C(a26);
  }
  _Unwind_Resume(exception_object);
}

void sub_1F3760(void *a1, os_unfair_lock_s *a2, unsigned int a3)
{
  if (!a2)
  {
    int v51 = (os_log_t *)sub_32A48(13);
    char v52 = *v51;
    if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1266;
      _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  BOOL v3 = a1;
  int v65 = 0;
  __int16 v66 = 0;
  uint64_t v67 = 0;
  int v4 = a1 + 1;
  uint64_t v5 = (void *)*a1;
  if ((void *)*a1 != a1 + 1)
  {
    locunsigned int k = a2 + 2;
    do
    {
      sub_43F38((uint64_t *)&v63, v5 + 4, "", 1271);
      uint64_t v6 = sub_32A48(20);
      if (*(unsigned char *)(v6 + 8))
      {
        int v7 = *(NSObject **)v6;
        if (*(void *)v6)
        {
          if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
          {
            unint64_t v8 = v63;
            if (v63[46]._os_unfair_lock_opaque) {
              int v9 = "";
            }
            else {
              int v9 = "not ";
            }
            sub_82188(&v62, (unsigned int *)v5[6], (unsigned int *)v5[7]);
            if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v10 = &v62;
            }
            else {
              std::string::size_type v10 = (std::string *)v62.__r_.__value_.__r.__words[0];
            }
            sub_4F64((uint64_t)v60, v8 + 2);
            int v11 = v61;
            uint64_t v12 = (void **)v60[0];
            sub_4F64((uint64_t)__p, lock);
            uint64_t v13 = v60;
            if (v11 < 0) {
              uint64_t v13 = v12;
            }
            int v14 = __p;
            if (v59 < 0) {
              int v14 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1276;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&unsigned char buf[20] = v9;
            __int16 v69 = 2080;
            std::mutex v70 = v10;
            __int16 v71 = 2080;
            float v72 = v13;
            __int16 v73 = 2080;
            uint64_t v74 = v14;
            _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Will %sadd sub-ports %s for port %s to activation sub-port group for device %s.", buf, 0x3Au);
            if (v59 < 0) {
              operator delete(__p[0]);
            }
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      memset(buf, 0, 24);
      sub_46B38(buf, (const void *)v5[6], v5[7], (uint64_t)(v5[7] - v5[6]) >> 2);
      int v16 = *(void **)buf;
      uint64_t v15 = *(__int32 **)&buf[8];
      if (*(void *)&buf[8] - *(void *)buf < 5uLL)
      {
        if (*(void *)&buf[8] - *(void *)buf == 4)
        {
          (*(void (**)(std::string *__return_ptr))(*(void *)&v63->_os_unfair_lock_opaque + 464))(&v62);
          std::string::size_type size = v62.__r_.__value_.__l.__size_;
          uint64_t v19 = (__int32 *)v62.__r_.__value_.__r.__words[0];
          if (v62.__r_.__value_.__r.__words[0] != v62.__r_.__value_.__l.__size_)
          {
            do
              sub_72D08((uint64_t)&v65, v19++);
            while (v19 != (__int32 *)size);
            uint64_t v19 = (__int32 *)v62.__r_.__value_.__r.__words[0];
          }
          if (v19)
          {
            v62.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
            operator delete(v19);
          }
        }
      }
      else if (*(void *)buf != *(void *)&buf[8])
      {
        uint64_t v17 = *(__int32 **)buf;
        do
          sub_72D08((uint64_t)&v65, v17++);
        while (v17 != v15);
      }
      if (v16) {
        operator delete(v16);
      }
      if (v64) {
        sub_4636C(v64);
      }
      unint64_t v20 = (void *)v5[1];
      if (v20)
      {
        do
        {
          char v21 = v20;
          unint64_t v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          char v21 = (void *)v5[2];
          BOOL v22 = *v21 == (void)v5;
          uint64_t v5 = v21;
        }
        while (!v22);
      }
      uint64_t v5 = v21;
    }
    while (v21 != v4);
    BOOL v3 = a1;
    if (v65 != v66)
    {
      uint64_t v23 = sub_32A48(20);
      if (*(unsigned char *)(v23 + 8))
      {
        int v24 = *(NSObject **)v23;
        if (*(void *)v23)
        {
          if (os_log_type_enabled(*(os_log_t *)v23, OS_LOG_TYPE_DEBUG))
          {
            sub_1001A8(&v62, (unsigned int *)v65, v66);
            int v25 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
            std::string::size_type v26 = v62.__r_.__value_.__r.__words[0];
            sub_4F64((uint64_t)v60, lock);
            __int16 v27 = &v62;
            if (v25 < 0) {
              __int16 v27 = (std::string *)v26;
            }
            if (v61 >= 0) {
              __int16 v28 = v60;
            }
            else {
              __int16 v28 = (void **)v60[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1293;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&unsigned char buf[20] = v27;
            __int16 v69 = 2080;
            std::mutex v70 = (std::string *)v28;
            _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Will activate sub-ports %s on device %s.", buf, 0x26u);
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      (*(void (**)(os_unfair_lock_s *, void **, void))(*(void *)&a2->_os_unfair_lock_opaque + 400))(a2, &v65, a3);
    }
  }
  int v29 = (void *)*v3;
  if ((void *)*v3 != v4)
  {
    do
    {
      sub_43F38((uint64_t *)&v63, v29 + 4, "", 1299);
      uint64_t v30 = sub_32A48(20);
      if (*(unsigned char *)(v30 + 8))
      {
        __int16 v31 = *(NSObject **)v30;
        if (*(void *)v30)
        {
          if (os_log_type_enabled(*(os_log_t *)v30, OS_LOG_TYPE_DEBUG))
          {
            AudioObjectID v32 = v63;
            if (v63[46]._os_unfair_lock_opaque) {
              std::chrono::steady_clock::time_point v33 = "";
            }
            else {
              std::chrono::steady_clock::time_point v33 = "not ";
            }
            sub_82188(&v62, (unsigned int *)v29[6], (unsigned int *)v29[7]);
            int v34 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
            std::string::size_type v35 = v62.__r_.__value_.__r.__words[0];
            sub_4F64((uint64_t)v60, v32 + 2);
            uint64_t v36 = &v62;
            if (v34 < 0) {
              uint64_t v36 = (std::string *)v35;
            }
            char v37 = v60;
            if (v61 < 0) {
              char v37 = (void **)v60[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 1303;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&unsigned char buf[20] = v33;
            __int16 v69 = 2080;
            std::mutex v70 = v36;
            __int16 v71 = 2080;
            float v72 = v37;
            _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Will %smark sub-ports %s active on port %s.", buf, 0x30u);
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v62.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v38 = v63;
      if ((v63[46]._os_unfair_lock_opaque & 1) == 0) {
        goto LABEL_98;
      }
      memset(&v62, 0, sizeof(v62));
      sub_46B38(&v62, (const void *)v29[6], v29[7], (uint64_t)(v29[7] - v29[6]) >> 2);
      char v39 = (void *)v62.__r_.__value_.__r.__words[0];
      if (v62.__r_.__value_.__l.__size_ - v62.__r_.__value_.__r.__words[0] < 5)
      {
        if (v62.__r_.__value_.__l.__size_ - v62.__r_.__value_.__r.__words[0] == 4)
        {
          (*(void (**)(os_unfair_lock_s *, void))(*(void *)&v38->_os_unfair_lock_opaque + 512))(v38, *(unsigned int *)v62.__r_.__value_.__l.__data_);
LABEL_97:
          operator delete(v39);
          goto LABEL_98;
        }
      }
      else if (v38[36]._os_unfair_lock_opaque == 1886216809)
      {
        uint64_t v40 = sub_32A48(20);
        if (*(unsigned char *)(v40 + 8))
        {
          uint64_t v41 = *(NSObject **)v40;
          if (*(void *)v40)
          {
            if (os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEBUG))
            {
              sub_4F64((uint64_t)v60, v38 + 2);
              BOOL v42 = v60;
              if (v61 < 0) {
                BOOL v42 = (void **)v60[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1322;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&unsigned char buf[20] = v42;
              _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to set multiple sub-ports active on Port: %s.  Ignoring.", buf, 0x1Cu);
              if (v61 < 0) {
                operator delete(v60[0]);
              }
            }
          }
        }
      }
      else
      {
        uint64_t v43 = (os_log_t *)sub_32A48(20);
        __int16 v44 = *v43;
        if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_INFO))
        {
          sub_4F64((uint64_t)v60, v38 + 2);
          int v45 = v61;
          __int16 v46 = (void **)v60[0];
          sub_2417C(__p, 0x616C6C20u);
          int v47 = v60;
          if (v45 < 0) {
            int v47 = v46;
          }
          __int16 v48 = __p;
          if (v59 < 0) {
            __int16 v48 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1316;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&unsigned char buf[20] = v47;
          __int16 v69 = 2080;
          std::mutex v70 = (std::string *)v48;
          _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_INFO, "%25s:%-5d Setting multiple sub-ports active on Port: %s.  Converting to a single sub-port with ID: %s", buf, 0x26u);
          if (v59 < 0) {
            operator delete(__p[0]);
          }
          if (v61 < 0) {
            operator delete(v60[0]);
          }
        }
        (*(void (**)(os_unfair_lock_s *, uint64_t))(*(void *)&v38->_os_unfair_lock_opaque + 512))(v38, 1634495520);
      }
      if (v39) {
        goto LABEL_97;
      }
LABEL_98:
      if (v64) {
        sub_4636C(v64);
      }
      char v49 = (void *)v29[1];
      if (v49)
      {
        do
        {
          char v50 = v49;
          char v49 = (void *)*v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          char v50 = (void *)v29[2];
          BOOL v22 = *v50 == (void)v29;
          int v29 = v50;
        }
        while (!v22);
      }
      int v29 = v50;
    }
    while (v50 != v4);
  }
  if (v65)
  {
    __int16 v66 = (unsigned int *)v65;
    operator delete(v65);
  }
}

void sub_1F4064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1F4188(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(char **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v8 = v6 - (void)v5;
  if ((unint64_t)(v6 - (void)v5) < 5)
  {
    if (v8 == 4)
    {
      sub_549A4(v11, a3, "", 1344);
      (*(void (**)(long long *__return_ptr))(*(void *)v11[0] + 464))(&v12);
      int v9 = (std::__shared_weak_count *)v11[1];
      uint64_t v10 = v13;
      *(_OWORD *)a1 = v12;
      *(void *)(a1 + 16) = v10;
      uint64_t v13 = 0;
      long long v12 = 0uLL;
      if (v9) {
        sub_4636C(v9);
      }
    }
  }
  else if (a1 != a2)
  {
    sub_6720C((char *)a1, v5, v6, v8 >> 2);
  }
}

void sub_1F426C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1F42A8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1F42CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_626DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1F4320(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_626DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_1F4340(uint64_t a1)
{
  int v2 = (void *)sub_F820C();
  *(void *)AudioObjectPropertyAddress buf = CFStringCreateWithCString(0, "Baseband Voice", 0x600u);
  buf[8] = 1;
  uint64_t v3 = sub_F832C(v2, (CFStringRef *)buf);
  sub_72924((uint64_t)buf);
  if (!v3)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v11 = 1024;
      int v12 = 306;
      __int16 v13 = 2080;
      int v14 = "Baseband Voice";
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [device is NULL]: \"Invalid device %s\"", buf, 0x1Cu);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003329396;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, a1))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 0;
    LODWORD(v9[0]) = 4;
    (*(void (**)(uint64_t, uint64_t, void, void, void *, unsigned char *))(*(void *)v3 + 40))(v3, a1, 0, 0, v9, buf);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, a1);
    if (result) {
      operator new();
    }
  }
  else
  {
    uint64_t result = sub_32A48(20);
    uint64_t v5 = *(NSObject **)result;
    if (*(void *)result)
    {
      uint64_t result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_INFO);
      if (result)
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v3 + 128))(v9, v3);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        __int16 v11 = 1024;
        int v12 = 311;
        __int16 v13 = 2112;
        int v14 = (const char *)v9[0];
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Device %@ is unable to set destination", buf, 0x1Cu);
        return sub_72924((uint64_t)v9);
      }
    }
  }
  return result;
}

void sub_1F4670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1F468C(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a1 + 16, 0, 0, 4, a1 + 32);
}

uint64_t sub_1F46CC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a1 + 16, 0, 0, 4, a1 + 28);
}

void sub_1F470C()
{
}

void sub_1F4724(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)a1 + 24);
  if (v1 != (void *)(*(void *)a1 + 16))
  {
    int v2 = 0;
    uint64_t v3 = 0;
    int v4 = 0;
    int v5 = 0;
    int v6 = 0;
    do
    {
      sub_43F38(&v30, v1 + 4, "", 1397);
      int v7 = (unsigned int *)v30;
      uint64_t v8 = *(void *)(v30 + 192);
      if (*(_DWORD *)(v30 + 144) != 1885433888 && v8 == 0)
      {
        char v21 = (os_log_t *)sub_32A48(13);
        BOOL v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(void *__return_ptr, unsigned int *))(*(void *)v7 + 144))(v29, v7);
          uint64_t v23 = v29[0];
          sub_2417C(__p, v7[36]);
          if (v28 >= 0) {
            int v24 = __p;
          }
          else {
            int v24 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1402;
          __int16 v33 = 2112;
          uint64_t v34 = v23;
          __int16 v35 = 2080;
          uint64_t v36 = v24;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"could not get device for port \\\"%@\\\" (type: '%s').\"", buf, 0x26u);
          if (v28 < 0) {
            operator delete(__p[0]);
          }
          sub_72924((uint64_t)v29);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = 2003329396;
      }
      sub_43F38((uint64_t *)buf, v1 + 2, "", 1404);
      int v10 = *(_DWORD *)(*(void *)buf + 144);
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      v6 |= v10 != 1885433888;
      if (v7[36] != 1885892674 || v8 == 0)
      {
        v6 |= v7[36] != 1885892674;
        v5 |= v7[36] == 1885892674;
      }
      else if (v3 >= v4)
      {
        uint64_t v12 = v3 - v2;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61) {
          sub_60548();
        }
        if (((char *)v4 - (char *)v2) >> 2 > v13) {
          unint64_t v13 = ((char *)v4 - (char *)v2) >> 2;
        }
        if ((unint64_t)((char *)v4 - (char *)v2) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14)
        {
          if (v14 >> 61) {
            sub_60560();
          }
          uint64_t v15 = (char *)operator new(8 * v14);
        }
        else
        {
          uint64_t v15 = 0;
        }
        int v16 = (uint64_t *)&v15[8 * v12];
        *int v16 = v8;
        uint64_t v17 = v16 + 1;
        while (v3 != v2)
        {
          uint64_t v18 = *--v3;
          *--int v16 = v18;
        }
        int v4 = (uint64_t *)&v15[8 * v14];
        if (v2) {
          operator delete(v2);
        }
        int v5 = 1;
        int v2 = v16;
        uint64_t v3 = v17;
      }
      else
      {
        *v3++ = v8;
        int v5 = 1;
      }
      if (v31) {
        sub_4636C(v31);
      }
      uint64_t v1 = (void *)v1[1];
    }
    while (v1 != (void *)(*(void *)a1 + 16));
    if ((v6 & v5 & 1) != 0 && v2 != v3)
    {
      uint64_t v19 = v2;
      do
      {
        uint64_t v20 = *v19;
        strcpy(buf, "aodabolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        sub_1F4B28(v20, (uint64_t)buf);
        ++v19;
      }
      while (v19 != v3);
    }
    if (v2) {
      operator delete(v2);
    }
  }
}

void sub_1F4AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  sub_72924((uint64_t)&a15);
  if (a18) {
    sub_4636C(a18);
  }
  if (v18) {
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1F4B28(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
    if (result) {
      operator new();
    }
  }
  return result;
}

void sub_1F4C24(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (sub_1151A0(*(uint64_t **)(a3 + 8), 8))
  {
    uint64_t v6 = sub_115244(a3, 8);
    sub_43F38(&v11, (uint64_t *)(v6 + 16), "", 1437);
    if (*(_DWORD *)(v11 + 144) == 1886613611 && sub_209270())
    {
      if (a4 != 1650811758) {
        goto LABEL_9;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D228, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_64D228))
      {
        sub_209DC8((char *)&v13);
        BOOL v10 = sub_16D890(v15, "mandrake-supported");
        sub_209F10((uint64_t)&v13);
        byte_64D220 = v10;
        __cxa_guard_release(&qword_64D228);
      }
      if (byte_64D220)
      {
        uint64_t v7 = sub_91A00();
        sub_1D13C0((uint64_t)&v13, v7, 2);
        if (v14) {
          operator new();
        }
        int v9 = v13;
        if (!v13) {
          goto LABEL_15;
        }
      }
      else
      {
LABEL_9:
        uint64_t v8 = sub_91A00();
        sub_1D13C0((uint64_t)&v13, v8, 0);
        if (v14) {
          operator new();
        }
        int v9 = v13;
        if (!v13) {
          goto LABEL_15;
        }
      }
      CFRelease(v9);
    }
LABEL_15:
    if (v12) {
      sub_4636C(v12);
    }
  }
}

void sub_1F4E30(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  sub_209F10((uint64_t)va);
  __cxa_guard_abort(&qword_64D228);
  if (a3) {
    sub_4636C(a3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1F4E88(uint64_t a1)
{
  strcpy((char *)v6, "gloabolg");
  HIBYTE(v6[4]) = 0;
  v6[5] = 0;
  if ((*(unsigned int (**)(uint64_t, _WORD *))(*(void *)a1 + 16))(a1, v6))
  {
    strcpy((char *)v6, "gloabolg");
    HIBYTE(v6[4]) = 0;
    v6[5] = 0;
    if ((*(unsigned int (**)(uint64_t, _WORD *))(*(void *)a1 + 16))(a1, v6))
    {
      strcpy(v3, "gloabolg");
      char v4 = 0;
      __int16 v5 = 0;
      if ((*(unsigned int (**)(uint64_t, char *))(*(void *)a1 + 24))(a1, v3)) {
        operator new();
      }
    }
    if (sub_20A6D0() && sub_20A6D0()) {
      operator new();
    }
  }
  else
  {
    strcpy((char *)v6, "lepdbolg");
    HIBYTE(v6[4]) = 0;
    v6[5] = 0;
    if ((*(unsigned int (**)(uint64_t, _WORD *))(*(void *)a1 + 16))(a1, v6))
    {
      strcpy(v3, "lepdbolg");
      char v4 = 0;
      __int16 v5 = 0;
      if ((*(unsigned int (**)(uint64_t, char *))(*(void *)a1 + 24))(a1, v3)) {
        operator new();
      }
    }
  }
  strcpy((char *)v6, "cgrbtpni");
  HIBYTE(v6[4]) = 0;
  v6[5] = 0;
  return sub_1F4B28(a1, (uint64_t)v6);
}

void sub_1F5134(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (v2) {
    sub_4636C(v2);
  }
}

void sub_1F514C(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(a1 + 16);
    int v5 = *(_DWORD *)(a1 + 24);
    int v4 = *(_DWORD *)(a1 + 28);
    int v10 = 1685087596;
    uint64_t v11 = v3;
    uint64_t v6 = operator new(0x20uLL);
    *uint64_t v6 = off_626F48;
    v6[1] = v2;
    v6[2] = v3;
    *((_DWORD *)v6 + 6) = v5;
    _DWORD v13[3] = v6;
    uint64_t v7 = operator new(0x20uLL);
    *uint64_t v7 = off_626F90;
    v7[1] = v2;
    v7[2] = v3;
    *((_DWORD *)v7 + 6) = v4;
    v12[3] = v7;
    sub_FF0AC(&v9, v2, &v10, (uint64_t)v13, (uint64_t)v12);
    sub_4F750(v12);
    sub_4F750(v13);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v9;
    if (v8) {
      sub_4636C(v8);
    }
  }
}

void sub_1F5274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_4F750((uint64_t *)va);
  sub_4F750((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1F5298(uint64_t a1)
{
  return sub_FE8A8(*(void *)(a1 + 8));
}

__n128 sub_1F52F0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_626F90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_1F5320(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_626F90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_1F5374()
{
}

void sub_1F538C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(_DWORD *)AudioObjectPropertyAddress buf = 1685087596;
  uint64_t v10 = *(const char **)(a1 + 16);
  int v2 = sub_FE8A8(v1);
  if (v2)
  {
    int v3 = v2;
    int v4 = (os_log_t *)sub_32A48(14);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, 0x6470656Cu);
        if (v8 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v10 = "Object.h";
        __int16 v11 = 1024;
        int v12 = 216;
        __int16 v13 = 2048;
        uint64_t v14 = v3;
        __int16 v15 = 2080;
        int v16 = v6;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d SetPropertyStat(inDoValue) error = %lu for property = %s", buf, 0x26u);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

__n128 sub_1F54E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_626F48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_1F5518(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = off_626F48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_1F556C()
{
}

void sub_1F5584(void *a1)
{
  *a1 = off_626F10;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    sub_4636C(v1);
  }

  operator delete();
}

void *sub_1F55F0(void *a1)
{
  *a1 = off_626F10;
  int v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_4636C(v2);
  }
  return a1;
}

void sub_1F563C(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (v2) {
    sub_4636C(v2);
  }
}

void sub_1F5654(uint64_t a1)
{
  if (!*(void *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(a1 + 16);
    int v5 = *(_DWORD *)(a1 + 24);
    int v4 = *(_DWORD *)(a1 + 28);
    int v10 = 1634692199;
    uint64_t v11 = v3;
    uint64_t v6 = operator new(0x20uLL);
    *uint64_t v6 = off_626E80;
    v6[1] = v2;
    v6[2] = v3;
    *((_DWORD *)v6 + 6) = v5;
    _DWORD v13[3] = v6;
    uint64_t v7 = operator new(0x20uLL);
    *uint64_t v7 = off_626EC8;
    v7[1] = v2;
    v7[2] = v3;
    *((_DWORD *)v7 + 6) = v4;
    v12[3] = v7;
    sub_FF0AC(&v9, v2, &v10, (uint64_t)v13, (uint64_t)v12);
    sub_4F750(v12);
    sub_4F750(v13);
    char v8 = *(std::__shared_weak_count **)(a1 + 40);
    *(_OWORD *)(a1 + 32) = v9;
    if (v8) {
      sub_4636C(v8);
    }
  }
}

void sub_1F577C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_4F750((uint64_t *)va);
  sub_4F750((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1F57A0(uint64_t a1)
{
  return sub_FE8A8(*(void *)(a1 + 8));
}

__n128 sub_1F57F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_626EC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_1F5828(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_626EC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_1F587C()
{
}

void sub_1F5894(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(_DWORD *)AudioObjectPropertyAddress buf = 1634692199;
  uint64_t v10 = *(const char **)(a1 + 16);
  int v2 = sub_FE8A8(v1);
  if (v2)
  {
    int v3 = v2;
    int v4 = (os_log_t *)sub_32A48(14);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, 0x616F6C67u);
        if (v8 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v10 = "Object.h";
        __int16 v11 = 1024;
        int v12 = 216;
        __int16 v13 = 2048;
        uint64_t v14 = v3;
        __int16 v15 = 2080;
        int v16 = v6;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d SetPropertyStat(inDoValue) error = %lu for property = %s", buf, 0x26u);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

__n128 sub_1F59F0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_626E80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_1F5A20(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = off_626E80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_1F5A74()
{
}

void sub_1F5A8C(void *a1)
{
  *a1 = off_626E48;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    sub_4636C(v1);
  }

  operator delete();
}

void *sub_1F5AF8(void *a1)
{
  *a1 = off_626E48;
  int v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_4636C(v2);
  }
  return a1;
}

void sub_1F5B44(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_869C8((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v21;
  if (v21)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    char v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v19, v6);
        int v9 = v20;
        uint64_t v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v15);
        __int16 v11 = v19;
        if (v9 < 0) {
          __int16 v11 = v10;
        }
        int v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          int v12 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        __int16 v27 = v11;
        __int16 v28 = 2080;
        int v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)buf, 0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }
  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_46B38(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_1F5D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    if (a22) {
      operator delete(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1F5D7C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 268) == 1986291046)
  {
    if (atomic_load_explicit((atomic_ullong *volatile)&qword_64BBD8, memory_order_acquire) != -1)
    {
      *(void *)AudioObjectPropertyAddress buf = &v8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      std::__call_once(&qword_64BBD8, &__p, (void (__cdecl *)(void *))sub_162AE0);
    }
    float v2 = *(float *)&qword_64BBD0;
    uint64_t v8 = qword_64BBD0;
    if ((qword_64BBD0 & 0xFF00000000) != 0)
    {
      int v3 = (os_log_t *)sub_32A48(19);
      int v4 = *v3;
      if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 268);
        sub_4D60(&__p, (unsigned int *)&v6);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
        __int16 v10 = 1024;
        int v11 = 1550;
        __int16 v12 = 2048;
        double v13 = v2;
        __int16 v14 = 2080;
        uint64_t v15 = p_p;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Setting IOCycleUsage of %f on VAD %s", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      strcpy(buf, "cycnbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      sub_4581B0(a1, (uint64_t)buf, 4, (uint64_t)&v8);
    }
  }
}

uint64_t sub_1F5F34(void *a1, uint64_t *a2)
{
  if (!sub_23AC0()) {
    return 1;
  }
  uint64_t v6 = (void *)*a1;
  UInt32 v5 = a1 + 1;
  int v4 = v6;
  if (v6 == v5) {
    return 1;
  }
  while (*((_DWORD *)v4 + 7) != 1886613611)
  {
    uint64_t v7 = (void *)v4[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        uint64_t v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v4[2];
        BOOL v14 = *v8 == (void)v4;
        int v4 = v8;
      }
      while (!v14);
    }
    int v4 = v8;
    if (v8 == v5) {
      return 1;
    }
  }
  uint64_t result = *a2;
  if (*a2)
  {
    uint64_t v10 = sub_99A40(result);
    *((void *)&v13 + 1) = v11;
    *(void *)&long long v13 = v10;
    uint64_t v12 = v13 >> 32;
    BOOL v14 = (v12 & 0xFF00000000) == 0 || v12 == 0;
    return !v14;
  }
  return result;
}

BOOL sub_1F6000(os_unfair_lock_s *a1, uint64_t *a2)
{
  if ((sub_209D00() & 1) == 0)
  {
    AudioObjectID v32 = (os_log_t *)sub_32A48(13);
    __int16 v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 1570;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint32_t os_unfair_lock_opaque = a1[36]._os_unfair_lock_opaque;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, os_unfair_lock_s *))(*(void *)*a2 + 312))(*a2, a1);
  if (!v6)
  {
    __int16 v35 = (os_log_t *)sub_32A48(13);
    uint64_t v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      sub_4F64((uint64_t)__p, a1 + 2);
      char v37 = v42 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
      __int16 v44 = 1024;
      int v45 = 1575;
      __int16 v46 = 2080;
      *(void *)int v47 = v37;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Valid VirtualStream not present for port %s\"", buf, 0x1Cu);
      if (SHIBYTE(v42) < 0) {
        operator delete(__p[0]);
      }
    }
    std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Valid VirtualStream not present for port %s");
  }
  uint64_t v7 = *(void *)(v5 + 136);
  if (*(char *)(v7 + 735) < 0)
  {
    sub_21E8C(__p, *(void **)(v7 + 712), *(void *)(v7 + 720));
  }
  else
  {
    uint64_t v8 = v7 + 712;
    *(_OWORD *)std::string __p = *(_OWORD *)v8;
    uint64_t v42 = *(void *)(v8 + 16);
  }
  if (os_unfair_lock_opaque != 1886613611) {
    goto LABEL_37;
  }
  uint64_t v9 = *a2;
  if (*a2
    && (*(void *)AudioObjectPropertyAddress buf = 0x273706163,
        *(_DWORD *)&buf[8] = 0,
        uint64_t v10 = sub_99A40(v9),
        *((void *)&v13 + 1) = v11,
        *(void *)&long long v13 = v10,
        uint64_t v12 = v13 >> 32,
        (v12 & 0xFF00000000) != 0)
    && v12)
  {
    BOOL v14 = 1;
  }
  else
  {
    uint64_t v15 = HIBYTE(v42);
    if (v42 >= 0)
    {
      int v16 = __p;
    }
    else
    {
      uint64_t v15 = (uint64_t)__p[1];
      int v16 = (void **)__p[0];
    }
    if (v15 >= 7)
    {
      uint64_t v17 = (char *)v16 + v15;
      char v18 = v16;
      do
      {
        uint64_t v19 = (char *)memchr(v18, 115, v15 - 6);
        if (!v19) {
          break;
        }
        if (*(_DWORD *)v19 == 1634037875 && *(_DWORD *)(v19 + 3) == 1919249249) {
          goto LABEL_24;
        }
        char v18 = (void **)(v19 + 1);
        uint64_t v15 = v17 - (char *)v18;
      }
      while (v17 - (char *)v18 > 6);
      uint64_t v19 = v17;
LABEL_24:
      BOOL v14 = v19 != v17 && v19 - (char *)v16 != -1;
    }
    else
    {
      BOOL v14 = 0;
    }
  }
  BOOL v22 = (os_log_t *)sub_32A48(20);
  uint64_t v23 = *v22;
  if (!*v22 || !os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_36;
  }
  sub_4F64((uint64_t)v39, a1 + 2);
  char v24 = v40 >= 0 ? v39 : (void **)v39[0];
  *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
  *(void *)&uint8_t buf[4] = "RoutingHandlerUtilities_Aspen.cpp";
  __int16 v44 = 1024;
  int v45 = 1590;
  __int16 v46 = 1024;
  *(_DWORD *)int v47 = 1;
  *(_WORD *)&v47[4] = 1024;
  *(_DWORD *)&v47[6] = v14;
  __int16 v48 = 2080;
  char v49 = v24;
  _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d IsSpeakerRoute: %d, hasSpeakerProtection: %d, Port: %s", buf, 0x28u);
  if (v40 < 0)
  {
    operator delete(v39[0]);
    if (v14) {
      goto LABEL_37;
    }
  }
  else
  {
LABEL_36:
    if (v14)
    {
LABEL_37:
      BOOL v25 = 1;
      goto LABEL_38;
    }
  }
  if (*(void *)(*a2 + 268) != 1986291046) {
    goto LABEL_54;
  }
  __int16 v27 = (char *)HIBYTE(v42);
  if (v42 < 0) {
    __int16 v27 = (char *)__p[1];
  }
  if (v27 == (unsigned char *)&dword_8 + 2)
  {
    __int16 v28 = __p;
    if (v42 < 0) {
      __int16 v28 = (void **)__p[0];
    }
    int v29 = *v28;
    int v30 = *((unsigned __int16 *)v28 + 4);
    BOOL v25 = v29 == (void *)0x61675F6465786966 && v30 == 28265;
  }
  else
  {
LABEL_54:
    BOOL v25 = 0;
  }
LABEL_38:
  if (SHIBYTE(v42) < 0) {
    operator delete(__p[0]);
  }
  return v25;
}

void sub_1F64A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1F64E4(int a1, uint64_t a2)
{
  int v3 = a1;
  int v4 = &unk_64C000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64CEF8, memory_order_acquire) & 1) == 0)
  {
    int v6 = __cxa_guard_acquire(&qword_64CEF8);
    int v4 = (unsigned char *)&unk_64C000;
    int v3 = a1;
    if (v6)
    {
      int v15 = 20;
      int v16 = 19;
      int v14 = 40;
      int v12 = 42;
      int v13 = 41;
      int v10 = 29;
      int v11 = 43;
      int v8 = 45;
      int v9 = 30;
      byte_64CEF4 = sub_1F6610(&v16, &v15, &v14, &v13, &v12, &v11, &v10, &v9, &v8);
      __cxa_guard_release(&qword_64CEF8);
      int v4 = &unk_64C000;
      int v3 = a1;
    }
  }
  uint64_t result = 0;
  if (v3 == 1886613611 && v4[3828])
  {
    uint64_t result = sub_21EF80((_DWORD *)a2);
    if (result) {
      return *(unsigned char *)(a2 + 36) == 0;
    }
  }
  return result;
}

void sub_1F65F8(_Unwind_Exception *a1)
{
}

BOOL sub_1F6610(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8, _DWORD *a9)
{
  int v17 = sub_207A20();
  return v17 == *a1
      || v17 == *a2
      || v17 == *a3
      || v17 == *a4
      || v17 == *a5
      || v17 == *a6
      || v17 == *a7
      || v17 == *a8
      || v17 == *a9;
}

BOOL sub_1F66C4(uint64_t a1)
{
  return sub_1F66CC(a1 - 80);
}

BOOL sub_1F66CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 310))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1836414053;
    *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
    LODWORD(__p[0]) = 0;
    int v18 = 4;
    (*(void (**)(void, unsigned char *, void, void, int *, void **))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), buf, 0, 0, &v18, __p);
    return LODWORD(__p[0]) == 1;
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 288);
  if (v3)
  {
    int v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 280);
      if (v5)
      {
        if (*(void *)(a1 + 320)) {
          BOOL v6 = 0;
        }
        else {
          BOOL v6 = (*(unsigned int (**)(uint64_t))(*(void *)v5 + 112))(v5) == 0;
        }
LABEL_23:
        sub_4636C(v4);
        return v6;
      }
    }
  }
  else
  {
    int v4 = 0;
  }
  uint64_t v7 = sub_32A48(18);
  uint64_t v8 = sub_32A48(38);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_15;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_15:
  int v14 = *(NSObject **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
    if (v17 >= 0) {
      int v15 = __p;
    }
    else {
      int v15 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v20 = 1024;
    int v21 = 846;
    __int16 v22 = 2080;
    uint64_t v23 = v15;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Is muted: software volume command expired on VAD '%s'.", buf, 0x1Cu);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL v6 = 0;
  BOOL result = 0;
  if (v4) {
    goto LABEL_23;
  }
  return result;
}

void sub_1F6924(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_1F6950(uint64_t a1)
{
}

void sub_1F6958(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 310))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1836414053;
    *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
    LODWORD(__p[0]) = 0;
    (*(void (**)(void, unsigned char *, void, void, uint64_t, void **))(**(void **)(a1 + 96) + 48))(*(void *)(a1 + 96), buf, 0, 0, 4, __p);
    return;
  }
  float v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (!v2)
  {
    int v3 = 0;
    goto LABEL_12;
  }
  int v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 280)) == 0)
  {
LABEL_12:
    uint64_t v12 = sub_32A48(18);
    uint64_t v13 = sub_32A48(38);
    char v14 = 0;
    uint64_t v15 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v16 = *(void *)(v12 + 8);
    while (1)
    {
      uint64_t v17 = *(int *)&buf[4 * v15];
      char v18 = v14;
      if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
        break;
      }
      char v14 = 1;
      uint64_t v15 = 1;
      if (v18) {
        goto LABEL_18;
      }
    }
    if ((v16 & v17) == 0) {
      uint64_t v12 = v13;
    }
LABEL_18:
    uint64_t v19 = *(NSObject **)v12;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
      __int16 v20 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v26 = 1024;
      int v27 = 820;
      __int16 v28 = 2080;
      int v29 = v20;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disabling software mute, but software volume command expired on VAD '%s'.", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
LABEL_35:
    if (!v3) {
      return;
    }
    goto LABEL_36;
  }
  if (!*(void *)(a1 + 320))
  {
    uint64_t v5 = sub_32A48(18);
    uint64_t v6 = sub_32A48(38);
    char v7 = 0;
    uint64_t v8 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1;
      if (v11) {
        goto LABEL_27;
      }
    }
    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_27:
    int v21 = *(NSObject **)v5;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
      if (v24 >= 0) {
        __int16 v22 = __p;
      }
      else {
        __int16 v22 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v26 = 1024;
      int v27 = 813;
      __int16 v28 = 2080;
      int v29 = v22;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disabling software mute on VAD '%s'.", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 104))(v4, 1);
    goto LABEL_35;
  }
LABEL_36:
  sub_4636C(v3);
}

void sub_1F6C98(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1F6CCC(uint64_t a1)
{
}

void sub_1F6CD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 310))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 1836414053;
    *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
    LODWORD(__p[0]) = 1;
    (*(void (**)(void, unsigned char *, void, void, uint64_t, void **))(**(void **)(a1 + 96) + 48))(*(void *)(a1 + 96), buf, 0, 0, 4, __p);
    return;
  }
  float v2 = *(std::__shared_weak_count **)(a1 + 288);
  if (!v2)
  {
    int v3 = 0;
    goto LABEL_12;
  }
  int v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 280)) == 0)
  {
LABEL_12:
    uint64_t v12 = sub_32A48(18);
    uint64_t v13 = sub_32A48(38);
    char v14 = 0;
    uint64_t v15 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v16 = *(void *)(v12 + 8);
    while (1)
    {
      uint64_t v17 = *(int *)&buf[4 * v15];
      char v18 = v14;
      if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
        break;
      }
      char v14 = 1;
      uint64_t v15 = 1;
      if (v18) {
        goto LABEL_18;
      }
    }
    if ((v16 & v17) == 0) {
      uint64_t v12 = v13;
    }
LABEL_18:
    uint64_t v19 = *(NSObject **)v12;
    if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
      __int16 v20 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v26 = 1024;
      int v27 = 796;
      __int16 v28 = 2080;
      int v29 = v20;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling software mute, but software volume command expired on VAD '%s'.", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
LABEL_35:
    if (!v3) {
      return;
    }
    goto LABEL_36;
  }
  if (!*(void *)(a1 + 320))
  {
    uint64_t v5 = sub_32A48(18);
    uint64_t v6 = sub_32A48(38);
    char v7 = 0;
    uint64_t v8 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&buf[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1;
      if (v11) {
        goto LABEL_27;
      }
    }
    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
LABEL_27:
    int v21 = *(NSObject **)v5;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
      if (v24 >= 0) {
        __int16 v22 = __p;
      }
      else {
        __int16 v22 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v26 = 1024;
      int v27 = 789;
      __int16 v28 = 2080;
      int v29 = v22;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Enabling software mute on VAD '%s'", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    (*(void (**)(uint64_t, void))(*(void *)v4 + 104))(v4, 0);
    goto LABEL_35;
  }
LABEL_36:
  sub_4636C(v3);
}

void sub_1F7018(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1F704C(uint64_t a1)
{
  sub_1F7088(a1 - 80);

  operator delete();
}

uint64_t sub_1F7088(uint64_t a1)
{
  *(void *)a1 = off_626FD8;
  *(void *)(a1 + 80) = off_6270A8;
  uint64_t v2 = *(void *)(a1 + 352);
  if (v2)
  {
    if (*(uint64_t *)(v2 + 8) >= 1)
    {
      int v3 = (os_log_t *)sub_32A48(18);
      uint64_t v4 = *v3;
      if (*v3)
      {
        if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = *(void *)(a1 + 352);
          if (v5) {
            uint64_t v5 = *(void *)(v5 + 8) + 1;
          }
          v17[0] = 136315650;
          *(void *)&v17[1] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v18 = 1024;
          int v19 = 235;
          __int16 v20 = 2048;
          uint64_t v21 = v5;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AudioObjectPropertyListenerRelay ref count is currently greater than one (%lu).", (uint8_t *)v17, 0x1Cu);
        }
      }
    }
  }
  uint64_t v6 = *(void *)(a1 + 96);
  if (v6)
  {
    if (!*(unsigned char *)(a1 + 468)) {
      goto LABEL_31;
    }
    char v7 = *(std::__shared_weak_count **)(a1 + 288);
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = *(void *)(a1 + 280);
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 240))(v10);
        }
        sub_4636C(v9);
      }
    }
    sub_1F72D0(a1, 1);
    uint64_t v6 = *(void *)(a1 + 96);
    if (v6)
    {
LABEL_31:
      if (*(unsigned char *)(a1 + 313))
      {
        strcpy((char *)v17, "empsbolg");
        BYTE1(v17[2]) = 0;
        HIWORD(v17[2]) = 0;
        sub_FEEF8(v6, v17, (uint64_t)sub_1F76D0, a1);
      }
    }
  }
  char v11 = *(const void **)(a1 + 472);
  if (v11) {
    CFRelease(v11);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 400));
  uint64_t v12 = *(NSObject **)(a1 + 392);
  if (v12) {
    dispatch_release(v12);
  }
  uint64_t v13 = *(void **)(a1 + 360);
  if (v13)
  {
    *(void *)(a1 + 368) = v13;
    operator delete(v13);
  }
  char v14 = *(std::__shared_weak_count **)(a1 + 352);
  if (v14) {
    sub_4636C(v14);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 288);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  sub_463E0(*(void **)(a1 + 232));
  sub_463E0(*(void **)(a1 + 184));
  sub_45F50((void *)(a1 + 104));
  sub_FE920(a1);
  return a1;
}

void sub_1F72C0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1F72D0(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 469))
  {
    char v7 = (os_log_t *)sub_32A48(41);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        __int16 v29 = 1024;
        int v30 = 1760;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d OutputVolumeControl_HAL_Common::EndSoftwareVolumeRamp() - ramping not supported.", buf, 0x12u);
      }
    }
  }
  if (!*(void *)(a1 + 96))
  {
    uint64_t v9 = (os_log_t *)sub_32A48(41);
    uint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        __int16 v29 = 1024;
        int v30 = 1763;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d OutputVolumeControl_HAL_Common::EndSoftwareVolumeRamp() - no physical device.", buf, 0x12u);
      }
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 288);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 280);
      if (v6)
      {
        *(void *)&v32[4] = 0;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 248))(v6, buf);
        sub_152084(buf);
LABEL_18:
        sub_4636C(v5);
        goto LABEL_19;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  char v11 = (os_log_t *)sub_32A48(41);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v29 = 1024;
    int v30 = 1772;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d OutputVolumeControl_HAL_Common::EndSoftwareVolumeRamp() - unable to lock software volume command.", buf, 0x12u);
  }
  if (v5) {
    goto LABEL_18;
  }
LABEL_19:
  *(unsigned char *)(a1 + 468) = 0;
  if (*(unsigned char *)(a1 + 469) && *(void *)(a1 + 96))
  {
    if (*(void *)(a1 + 472)) {
      CFStringRef v13 = *(const __CFString **)(a1 + 472);
    }
    else {
      CFStringRef v13 = @"unknown";
    }
    CFStringRef v26 = v13;
    uint64_t v27 = 0;
    float v14 = *(float *)(a1 + 296);
    uint64_t v25 = LODWORD(v14);
    LOWORD(v27) = a2;
    uint64_t v15 = (os_log_t *)sub_32A48(41);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v29 = 1024;
      int v30 = 1787;
      __int16 v31 = 2112;
      *(void *)AudioObjectID v32 = v13;
      *(_WORD *)&v32[8] = 1024;
      *(_DWORD *)&v32[10] = a2;
      __int16 v33 = 2048;
      double v34 = v14;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::EndSoftwareVolumeRamp() - notifying physical device that ramp ended for category %@ with reason %u. Final volume %.2f.", buf, 0x2Cu);
    }
    uint64_t v17 = *(void *)(a1 + 96);
    strcpy(buf, "revabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unsigned int v18 = sub_FE8A8(v17);
    if (v18)
    {
      unsigned int v19 = v18;
      __int16 v20 = (os_log_t *)sub_32A48(41);
      uint64_t v21 = *v20;
      if (*v20)
      {
        if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, v19);
          if (v24 >= 0) {
            __int16 v22 = __p;
          }
          else {
            __int16 v22 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v29 = 1024;
          int v30 = 1795;
          __int16 v31 = 2080;
          *(void *)AudioObjectID v32 = v22;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d OutputVolumeControl_HAL_Common::EndSoftwareVolumeRamp() - failed to set ramp end info on device error %s.", buf, 0x1Cu);
          if (v24 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
}

void sub_1F76A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_152084((uint64_t *)va);
  sub_4636C(v7);
  _Unwind_Resume(a1);
}

void sub_1F76D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    __int16 v99 = (os_log_t *)sub_32A48(13);
    double v100 = *v99;
    if (*v99 && os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v118 = 1024;
      int v119 = 1594;
      _os_log_impl(&def_1E50E8, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inNumberAddresses is 0.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inNumberAddresses is 0.");
  }
  if (!a4)
  {
    uint64_t v102 = (os_log_t *)sub_32A48(13);
    char v103 = *v102;
    if (*v102 && os_log_type_enabled(*v102, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v118 = 1024;
      int v119 = 1595;
      _os_log_impl(&def_1E50E8, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inClientData is NULL]: \"inClientData is NULL.\"", buf, 0x12u);
    }
    uint64_t v104 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v104, "inClientData is NULL.");
  }
  if (!a3)
  {
    char v105 = (os_log_t *)sub_32A48(13);
    unint64_t v106 = *v105;
    if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v118 = 1024;
      int v119 = 1596;
      _os_log_impl(&def_1E50E8, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inAddresses is NULL]: \"inAddresses is NULL.\"", buf, 0x12u);
    }
    uint64_t v107 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v107, "inAddresses is NULL.");
  }
  if (*(_DWORD *)(a3 + 8) != *(_DWORD *)(a4 + 132))
  {
    int v108 = (os_log_t *)sub_32A48(13);
    uint64_t v109 = *v108;
    if (*v108 && os_log_type_enabled(*v108, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v118 = 1024;
      int v119 = 1600;
      _os_log_impl(&def_1E50E8, v109, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inAddresses[0].mElement != This->mElement.\"", buf, 0x12u);
    }
    __int16 v110 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v110, "inAddresses[0].mElement != This->mElement.");
  }
  uint64_t v111 = a4 + 168;
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 184))(a4);
  uint64_t v8 = 0;
  do
  {
    uint64_t v9 = (int *)(a3 + 12 * v8);
    int v10 = *(_DWORD *)(a4 + 128);
    int v11 = *v9;
    if (v9[1] != v10) {
      goto LABEL_95;
    }
    int v12 = *(_DWORD *)(a4 + 132);
    if (v11 == 1684633187)
    {
      if (*(_DWORD *)(a3 + 12 * v8 + 8) == v12) {
        char v13 = v7;
      }
      else {
        char v13 = 0;
      }
      if (v13) {
        goto LABEL_16;
      }
      int v11 = 1684633187;
    }
    else
    {
      if (v11 != 1987013732) {
        goto LABEL_95;
      }
      int v11 = 1987013732;
      if (*(_DWORD *)(a3 + 12 * v8 + 8) == v12)
      {
        if (!v7) {
          goto LABEL_103;
        }
LABEL_16:
        int v115 = 4;
        float v116 = 0.0;
        uint64_t v14 = *(void *)(a4 + 96);
        *(_DWORD *)AudioObjectPropertyAddress buf = 1987013732;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_DWORD *)&buf[8] = v12;
        (*(void (**)(uint64_t, unsigned char *, void, void, int *, float *))(*(void *)v14 + 40))(v14, buf, 0, 0, &v115, &v116);
        uint64_t v15 = sub_32A48(18);
        uint64_t v16 = sub_32A48(38);
        char v17 = 0;
        uint64_t v18 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v19 = *(void *)(v15 + 8);
        while (1)
        {
          uint64_t v20 = *(int *)&buf[4 * v18];
          char v21 = v17;
          if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
            break;
          }
          char v17 = 1;
          uint64_t v18 = 1;
          if (v21) {
            goto LABEL_23;
          }
        }
        if ((v19 & v20) == 0) {
          uint64_t v15 = v16;
        }
LABEL_23:
        __int16 v22 = *(NSObject **)v15;
        if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          float v23 = *(float *)(a4 + 300);
          float v24 = v116;
          sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a4 + 96) + 8));
          uint64_t v25 = __p;
          if (v114 < 0) {
            uint64_t v25 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v118 = 1024;
          int v119 = 1626;
          __int16 v120 = 2048;
          *(double *)uint64_t v121 = v23;
          *(_WORD *)&v121[8] = 2048;
          *(double *)&unsigned char v121[10] = v24;
          __int16 v122 = 2080;
          uint64_t v123 = v25;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CommittedHardwareVolumeDecibels %f dB vs hardwareVolumeDecibels %f dB on VAD '%s'.", buf, 0x30u);
          if (v114 < 0) {
            operator delete(__p[0]);
          }
        }
        if (*(float *)(a4 + 300) == v116) {
          goto LABEL_94;
        }
        if (*(_DWORD *)(a4 + 264) == 1 || *(void *)(a4 + 320)) {
          goto LABEL_42;
        }
        CFStringRef v26 = *(std::__shared_weak_count **)(a4 + 288);
        if (v26)
        {
          uint64_t v27 = std::__shared_weak_count::lock(v26);
          if (v27)
          {
            __int16 v28 = v27;
            uint64_t v29 = *(void *)(a4 + 280);
            if (v29 && (*(unsigned int (**)(uint64_t))(*(void *)v29 + 80))(v29))
            {
              float v30 = *(float *)(a4 + 300);
              float v31 = v116;
              uint64_t v32 = sub_32A48(18);
              uint64_t v33 = sub_32A48(38);
              char v34 = 0;
              uint64_t v35 = 0;
              float v36 = v30 - v31;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002;
              uint64_t v37 = *(void *)(v32 + 8);
              while (1)
              {
                uint64_t v38 = *(int *)&buf[4 * v35];
                char v39 = v34;
                if (((v37 & v38) != 0) != ((*(void *)(v33 + 8) & v38) != 0)) {
                  break;
                }
                char v34 = 1;
                uint64_t v35 = 1;
                if (v39) {
                  goto LABEL_116;
                }
              }
              if ((v37 & v38) == 0) {
                uint64_t v32 = v33;
              }
LABEL_116:
              int v98 = *(NSObject **)v32;
              if (v98 && os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int16 v118 = 1024;
                int v119 = 1639;
                __int16 v120 = 2048;
                *(double *)uint64_t v121 = v36;
                _os_log_impl(&def_1E50E8, v98, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PME ApplyHeadroom is active,  Not performing volume scalar adjustment, delta (Commited - Hardware) %f dB", buf, 0x1Cu);
              }
              sub_4636C(v28);
LABEL_42:
              uint64_t v40 = sub_32A48(18);
              uint64_t v41 = sub_32A48(38);
              char v42 = 0;
              uint64_t v43 = 0;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002;
              uint64_t v44 = *(void *)(v40 + 8);
              while (1)
              {
                uint64_t v45 = *(int *)&buf[4 * v43];
                char v46 = v42;
                if (((v44 & v45) != 0) != ((*(void *)(v41 + 8) & v45) != 0)) {
                  break;
                }
                char v42 = 1;
                uint64_t v43 = 1;
                if (v46) {
                  goto LABEL_48;
                }
              }
              if ((v44 & v45) == 0) {
                uint64_t v40 = v41;
              }
LABEL_48:
              int v47 = *(NSObject **)v40;
              if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
              {
                double v48 = *(float *)(a4 + 300);
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int16 v118 = 1024;
                int v119 = 1650;
                __int16 v120 = 2048;
                *(double *)uint64_t v121 = v48;
                _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device initiated volume change - Previous Hardware Volume: %f dB", buf, 0x1Cu);
              }
              float v49 = v116;
              *(float *)(a4 + 300) = v116;
              uint64_t v50 = sub_1F85E0(a4, v49);
              sub_1F89DC(a4, SBYTE1(v50));
              uint64_t v51 = sub_32A48(18);
              uint64_t v52 = sub_32A48(38);
              char v53 = 0;
              uint64_t v54 = 0;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002;
              uint64_t v55 = *(void *)(v51 + 8);
              while (1)
              {
                uint64_t v56 = *(int *)&buf[4 * v54];
                char v57 = v53;
                if (((v55 & v56) != 0) != ((*(void *)(v52 + 8) & v56) != 0)) {
                  break;
                }
                char v53 = 1;
                uint64_t v54 = 1;
                if (v57) {
                  goto LABEL_57;
                }
              }
              if ((v55 & v56) == 0) {
                uint64_t v51 = v52;
              }
LABEL_57:
              int v58 = *(NSObject **)v51;
              if (v58 && os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
              {
                double v59 = *(float *)(a4 + 300);
                double v60 = *(float *)(a4 + 296);
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int16 v118 = 1024;
                int v119 = 1655;
                __int16 v120 = 2048;
                *(double *)uint64_t v121 = v59;
                *(_WORD *)&v121[8] = 2048;
                *(double *)&unsigned char v121[10] = v60;
                _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device initiated volume change - Committed Hardware Volume: %f dB, Volume Scalar: %f", buf, 0x26u);
              }
              uint64_t v61 = sub_32A48(18);
              uint64_t v62 = sub_32A48(38);
              char v63 = 0;
              uint64_t v64 = 0;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002;
              uint64_t v65 = *(void *)(v61 + 8);
              while (1)
              {
                uint64_t v66 = *(int *)&buf[4 * v64];
                char v67 = v63;
                if (((v65 & v66) != 0) != ((*(void *)(v62 + 8) & v66) != 0)) {
                  break;
                }
                char v63 = 1;
                uint64_t v64 = 1;
                if (v67) {
                  goto LABEL_66;
                }
              }
              if ((v65 & v66) == 0) {
                uint64_t v61 = v62;
              }
LABEL_66:
              AudioObjectID v68 = *(NSObject **)v61;
              if (v68 && os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
              {
                (*(void (**)(void **__return_ptr))(**(void **)(a4 + 96) + 128))(__p);
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int16 v118 = 1024;
                int v119 = 1657;
                __int16 v120 = 2112;
                *(void **)uint64_t v121 = __p[0];
                _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     PhysicalDevice UID = \"%@\"", buf, 0x1Cu);
                sub_72924((uint64_t)__p);
              }
              uint64_t v69 = sub_32A48(18);
              uint64_t v70 = sub_32A48(38);
              char v71 = 0;
              uint64_t v72 = 0;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002;
              uint64_t v73 = *(void *)(v69 + 8);
              while (1)
              {
                uint64_t v74 = *(int *)&buf[4 * v72];
                char v75 = v71;
                if (((v73 & v74) != 0) != ((*(void *)(v70 + 8) & v74) != 0)) {
                  break;
                }
                char v71 = 1;
                uint64_t v72 = 1;
                if (v75) {
                  goto LABEL_75;
                }
              }
              if ((v73 & v74) == 0) {
                uint64_t v69 = v70;
              }
LABEL_75:
              uint64_t v76 = *(NSObject **)v69;
              if (v76 && os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v77 = *(_DWORD *)(a4 + 128);
                sub_2417C(__p, v77);
                uint64_t v78 = __p;
                if (v114 < 0) {
                  uint64_t v78 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int16 v118 = 1024;
                int v119 = 1658;
                __int16 v120 = 1024;
                *(_DWORD *)uint64_t v121 = v77;
                *(_WORD *)&v121[4] = 2080;
                *(void *)&v121[6] = v78;
                _os_log_impl(&def_1E50E8, v76, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Scope = %u (\"%s\")", buf, 0x22u);
                if (v114 < 0) {
                  operator delete(__p[0]);
                }
              }
              uint64_t v79 = sub_32A48(18);
              uint64_t v80 = sub_32A48(38);
              char v81 = 0;
              uint64_t v82 = 0;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002;
              uint64_t v83 = *(void *)(v79 + 8);
              while (1)
              {
                uint64_t v84 = *(int *)&buf[4 * v82];
                char v85 = v81;
                if (((v83 & v84) != 0) != ((*(void *)(v80 + 8) & v84) != 0)) {
                  break;
                }
                char v81 = 1;
                uint64_t v82 = 1;
                if (v85) {
                  goto LABEL_87;
                }
              }
              if ((v83 & v84) == 0) {
                uint64_t v79 = v80;
              }
LABEL_87:
              uint64_t v86 = *(NSObject **)v79;
              if (v86 && os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v87 = *(_DWORD *)(a4 + 132);
                sub_2417C(__p, v87);
                uint64_t v88 = __p;
                if (v114 < 0) {
                  uint64_t v88 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                __int16 v118 = 1024;
                int v119 = 1659;
                __int16 v120 = 1024;
                *(_DWORD *)uint64_t v121 = v87;
                *(_WORD *)&v121[4] = 2080;
                *(void *)&v121[6] = v88;
                _os_log_impl(&def_1E50E8, v86, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Element = %u (\"%s\")", buf, 0x22u);
                if (v114 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (!*(_DWORD *)(a4 + 264))
              {
                uint64_t v90 = sub_32A48(18);
                uint64_t v91 = sub_32A48(38);
                char v92 = 0;
                uint64_t v93 = 0;
                *(void *)AudioObjectPropertyAddress buf = 0x100000002;
                uint64_t v94 = *(void *)(v90 + 8);
                while (1)
                {
                  uint64_t v95 = *(int *)&buf[4 * v93];
                  char v96 = v92;
                  if (((v94 & v95) != 0) != ((*(void *)(v91 + 8) & v95) != 0)) {
                    break;
                  }
                  char v92 = 1;
                  uint64_t v93 = 1;
                  if (v96) {
                    goto LABEL_111;
                  }
                }
                if ((v94 & v95) == 0) {
                  uint64_t v90 = v91;
                }
LABEL_111:
                __int16 v97 = *(NSObject **)v90;
                if (v97 && os_log_type_enabled(v97, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
                  __int16 v118 = 1024;
                  int v119 = 1660;
                  _os_log_impl(&def_1E50E8, v97, OS_LOG_TYPE_DEBUG, "%25s:%-5d     SW Volume: disabled", buf, 0x12u);
                }
              }
LABEL_94:
              int v11 = *v9;
LABEL_95:
              if (v11 == 1936747877)
              {
                sub_1F8B88((void *)a4);
                goto LABEL_103;
              }
              goto LABEL_97;
            }
            sub_4636C(v28);
          }
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 0;
        LODWORD(__p[0]) = sub_7953C(v111, v116);
        int v112 = 1065353216;
        *(float *)(a4 + 296) = *sub_1F84A8((float *)buf, (float *)__p, (float *)&v112);
        goto LABEL_42;
      }
    }
LABEL_97:
    if ((v7 & 1) != 0
      || v9[1] != *(_DWORD *)(a4 + 128)
      || v11 != 1684633187 && v11 != 1987013732
      || *(_DWORD *)(a3 + 12 * v8 + 8) != *(_DWORD *)(a4 + 132))
    {
      uint64_t v89 = *(void **)(a4 + 344);
      *(void *)AudioObjectPropertyAddress buf = *(void *)v9;
      *(_DWORD *)&buf[8] = v9[2];
      sub_1A1D20(v89, (unsigned int *)buf);
    }
LABEL_103:
    ++v8;
  }
  while (v8 != a2);
}

void sub_1F846C(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

float *sub_1F84A8(float *result, float *a2, float *a3)
{
  if (*a3 < *result)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "StandardUtilities.h";
      __int16 v9 = 1024;
      int v10 = 258;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"clamp() requires that maxVal >= minVal.\"", (uint8_t *)&v7, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "clamp() requires that maxVal >= minVal.");
  }
  if (*a2 < *a3) {
    int v3 = a2;
  }
  else {
    int v3 = a3;
  }
  if (*a2 > *result) {
    return v3;
  }
  return result;
}

void sub_1F85C4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1F85E0(uint64_t a1, float a2)
{
  if (*(void *)(a1 + 192))
  {
    if (vabds_f32(a2, *(float *)(*(void *)(a1 + 176) + 36)) <= 0.001)
    {
      float v3 = *(float *)(*(void *)(a1 + 176) + 36);
      goto LABEL_5;
    }
  }
  else
  {
    float v3 = 0.0;
    if (fabsf(a2) <= 0.001)
    {
LABEL_5:
      double v4 = sub_792A4(a1 + 168);
      if (v3 != *(float *)&v4) {
        goto LABEL_7;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 309))
  {
    int v5 = 0;
    goto LABEL_9;
  }
LABEL_7:
  int v5 = 1;
LABEL_9:
  unsigned int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 336) + 32))(*(void *)(a1 + 336));
  uint64_t v7 = sub_32A48(18);
  uint64_t v8 = sub_32A48(38);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  do
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0))
    {
      if ((v11 & v12) == 0) {
        uint64_t v7 = v8;
      }
      if (*(void *)(v7 + 8)) {
        goto LABEL_17;
      }
      goto LABEL_37;
    }
    char v9 = 1;
    uint64_t v10 = 1;
  }
  while ((v13 & 1) == 0);
  if ((v11 & 1) == 0) {
    goto LABEL_37;
  }
LABEL_17:
  uint64_t v14 = *(NSObject **)v7;
  if (!v14 || !os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)) {
    goto LABEL_37;
  }
  if (v6) {
    uint64_t v15 = "muted";
  }
  else {
    uint64_t v15 = "unmuted";
  }
  uint64_t v16 = v37;
  sub_21C8C(v37, v15);
  if (v38 < 0) {
    uint64_t v16 = (void **)v37[0];
  }
  if (v5) {
    char v17 = "muted";
  }
  else {
    char v17 = "unmuted";
  }
  sub_21C8C(v35, v17);
  int v18 = v36;
  uint64_t v19 = (void **)v35[0];
  sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
  uint64_t v20 = v35;
  if (v18 < 0) {
    uint64_t v20 = v19;
  }
  if (v34 >= 0) {
    char v21 = __p;
  }
  else {
    char v21 = (void **)__p[0];
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
  *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
  __int16 v40 = 1024;
  int v41 = 1417;
  __int16 v42 = 2080;
  uint64_t v43 = v16;
  __int16 v44 = 2080;
  uint64_t v45 = v20;
  __int16 v46 = 2080;
  int v47 = v21;
  _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d MuteStateModel: currentState = %s, nextState = %s on VAD '%s'.", buf, 0x30u);
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (v38 < 0)
  {
    operator delete(v37[0]);
    if (v5) {
      goto LABEL_38;
    }
  }
  else
  {
LABEL_37:
    if (v5)
    {
LABEL_38:
      int v22 = 256;
      return v22 | v6;
    }
  }
  uint64_t v23 = sub_32A48(18);
  uint64_t v24 = sub_32A48(38);
  char v25 = 0;
  uint64_t v26 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v27 = *(void *)(v23 + 8);
  while (1)
  {
    uint64_t v28 = *(int *)&buf[4 * v26];
    char v29 = v25;
    if (((v27 & v28) != 0) != ((*(void *)(v24 + 8) & v28) != 0)) {
      break;
    }
    char v25 = 1;
    uint64_t v26 = 1;
    if (v29) {
      goto LABEL_46;
    }
  }
  if ((v27 & v28) == 0) {
    uint64_t v23 = v24;
  }
LABEL_46:
  float v30 = *(NSObject **)v23;
  if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    int v31 = *(unsigned __int8 *)(a1 + 309);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v40 = 1024;
    int v41 = 1423;
    __int16 v42 = 1024;
    LODWORD(v43) = v31;
    _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Unmuting (explicitly unmuted: %u)", buf, 0x18u);
  }
  (*(void (**)(void))(**(void **)(a1 + 336) + 24))(*(void *)(a1 + 336));
  int v22 = 0;
  return v22 | v6;
}

void sub_1F89A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1F89DC(uint64_t result, char a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_32A48(18);
    uint64_t v4 = sub_32A48(38);
    char v5 = 0;
    uint64_t v6 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&buf[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1;
      if (v9) {
        goto LABEL_8;
      }
    }
    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_8:
    uint64_t v10 = *(NSObject **)v3;
    if (v10 && os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(unsigned __int8 *)(v2 + 309);
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(v2 + 96) + 8));
      if (v14 >= 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v16 = 1024;
      int v17 = 1436;
      __int16 v18 = 1024;
      int v19 = v11;
      __int16 v20 = 2080;
      char v21 = v12;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Muting (explicitly muted: %u) on VAD '%s'.", buf, 0x22u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    return (*(uint64_t (**)(void))(**(void **)(v2 + 336) + 16))(*(void *)(v2 + 336));
  }
  return result;
}

void sub_1F8B88(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[36];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[35];
      if (v5)
      {
        uint64_t v6 = a1[12];
        CFTypeRef cf = (CFTypeRef)0x676C6F6273706D65;
        int v19 = 0;
        uint64_t v7 = sub_99A40(v6);
        uint64_t v9 = v8;
        uint64_t v10 = 0;
        *((void *)&v11 + 1) = v9;
        *(void *)&long long v11 = v7;
        if (((v11 >> 32) & 0xFF00000000) != 0 && (v7 & 0x300000000) != 0)
        {
          (*(void (**)(CFTypeRef *__return_ptr))(*(void *)a1[12] + 128))(&cf);
          CFTypeRef v13 = cf;
          if (cf) {
            CFRetain(cf);
          }
          sub_14E44(&v20, v13);
          char v14 = +[PASettings sharedInstance];
          uint64_t v15 = [v14 personalMediaConfigurationForRouteUID:v20];
          [v15 mediaPureToneAverage];
          unsigned int v17 = v16;

          if (v20) {
            CFRelease(v20);
          }
          sub_72924((uint64_t)&cf);
          uint64_t v10 = v17 | 0x100000000;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, v10);
      }
      sub_4636C(v4);
    }
  }
}

void sub_1F8CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);

  sub_6393C((const void **)va1);
  sub_72924((uint64_t)va);
  sub_4636C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1F8D40(uint64_t a1)
{
  return sub_1F7088(a1 - 80);
}

BOOL sub_1F8D48(uint64_t a1)
{
  uint64_t v2 = sub_99A40(*(void *)(a1 + 96));
  *((void *)&v4 + 1) = v3;
  *(void *)&long long v4 = v2;
  return ((v4 >> 32) & 0xFF00000000) == 0 || HIDWORD(v2) == 0 || *(_DWORD *)(a1 + 264) != 1;
}

uint64_t sub_1F8DC0(uint64_t a1)
{
  return a1 + 168;
}

double sub_1F8DCC(uint64_t a1)
{
  return *(double *)(a1 + 144);
}

double sub_1F8DD4(uint64_t a1)
{
  return *(float *)(a1 + 160);
}

void sub_1F8DE4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(_DWORD *)(a1 + 136) = a4;
  memset(__p, 0, sizeof(__p));
  sub_A2B64(__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  sub_1F8E70(a1, (double **)__p, 0, a3);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a1 + 312) = 0;
}

void sub_1F8E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1F8E70(uint64_t a1, double **a2, uint64_t a3, uint64_t a4)
{
  long long v4 = a2[1];
  if (*a2 == v4)
  {
    char v117 = (os_log_t *)sub_32A48(13);
    __int16 v118 = *v117;
    if (*v117 && os_log_type_enabled(*v117, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&v134[8] = 1024;
      *(_DWORD *)&v134[10] = 866;
      _os_log_impl(&def_1E50E8, v118, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Empty vector of curve ranges\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "Empty vector of curve ranges");
  }
  if (*(v4 - 1) < **a2)
  {
    __int16 v120 = (os_log_t *)sub_32A48(13);
    uint64_t v121 = *v120;
    if (*v120 && os_log_type_enabled(*v120, OS_LOG_TYPE_ERROR))
    {
      uint64_t v122 = *((void *)a2[1] - 1);
      uint64_t v123 = *(void *)*a2;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&v134[8] = 1024;
      *(_DWORD *)&v134[10] = 867;
      *(_WORD *)&v134[14] = 2048;
      *(void *)&v134[16] = v122;
      *(_WORD *)&v134[24] = 2048;
      *(void *)&v134[26] = v123;
      _os_log_impl(&def_1E50E8, v121, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)\"", buf, 0x26u);
    }
    UInt32 v124 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(v124, "Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)");
  }
  unsigned int v7 = a3;
  uint64_t v9 = (void *)(a1 + 280);
  if (a4) {
    int v10 = *(_DWORD *)(a4 + 16);
  }
  else {
    int v10 = 0;
  }
  int v11 = BYTE4(a3);
  *(_DWORD *)(a1 + 264) = v10;
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 288);
  *uint64_t v9 = 0;
  v9[1] = 0;
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    int v10 = *(_DWORD *)(a1 + 264);
  }
  if (v10)
  {
    uint64_t v14 = *(void *)(a4 + 24);
    CFTypeRef v13 = *(std::__shared_weak_count **)(a4 + 32);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 288);
    *(void *)(a1 + 280) = v14;
    *(void *)(a1 + 288) = v13;
    if (v15)
    {
      std::__shared_weak_count::__release_weak(v15);
      CFTypeRef v13 = *(std::__shared_weak_count **)(a1 + 288);
    }
    *(unsigned char *)(a1 + 308) = 0;
    if (v13)
    {
      unsigned int v16 = std::__shared_weak_count::lock(v13);
      if (v16)
      {
        unsigned int v17 = (uint64_t *)*v9;
        if (*v9)
        {
          uint64_t v18 = *v17;
          if (*(void *)(a1 + 320))
          {
            (*(void (**)(uint64_t *, void))(v18 + 144))(v17, 0);
LABEL_23:
            sub_4636C(v16);
            goto LABEL_24;
          }
          uint64_t v97 = (*(uint64_t (**)(uint64_t *))(v18 + 216))(v17);
          if (v11)
          {
            if (v98)
            {
              int v99 = *(_DWORD *)(v97 + 36);
              if (v99 != v7) {
                sub_165F20();
              }
              double v100 = (os_log_t *)sub_32A48(18);
              int v101 = *v100;
              if (*v100 && os_log_type_enabled(*v100, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
                *(_WORD *)&v134[8] = 1024;
                *(_DWORD *)&v134[10] = 899;
                *(_WORD *)&v134[14] = 1024;
                *(_DWORD *)&v134[16] = v7;
                *(_WORD *)&v134[20] = 1024;
                *(_DWORD *)&v134[22] = v99;
                _os_log_impl(&def_1E50E8, v101, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Volume control has transfer functions both from routing database (%ul) and software volume (%ul)! Undefined behavior!", buf, 0x1Eu);
              }
            }
          }
          else if (v98)
          {
            unsigned int v7 = *(_DWORD *)(v97 + 36);
            int v11 = 1;
          }
          else
          {
            int v11 = 0;
          }
          (*(void (**)(uint64_t *, uint64_t))(*v17 + 152))(v17, 1);
          if (sub_45833C(*(void *)(a1 + 96))) {
            sub_1F8B88((void *)a1);
          }
          int v104 = *(_DWORD *)(a1 + 264);
          (*(void (**)(uint64_t *, BOOL))(*v17 + 160))(v17, v104 != 3);
          int v105 = (*(uint64_t (**)(uint64_t *))(*v17 + 224))(v17);
          if (v104 == 3) {
            int v106 = 0;
          }
          else {
            int v106 = v105;
          }
          if (v106 == 1)
          {
            *(unsigned char *)(a1 + 469) = 1;
            uint64_t v107 = (os_log_t *)sub_32A48(41);
            int v108 = *v107;
            if (!*v107 || !os_log_type_enabled(*v107, OS_LOG_TYPE_DEBUG))
            {
LABEL_183:
              if (!*(unsigned char *)(a1 + 469))
              {
                int v115 = (os_log_t *)sub_32A48(41);
                float v116 = *v115;
                if (*v115)
                {
                  if (os_log_type_enabled(*v115, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                    *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
                    *(_WORD *)&v134[8] = 1024;
                    *(_DWORD *)&v134[10] = 936;
                    _os_log_impl(&def_1E50E8, v116, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::ReconfigureInternal() - volume ramping is not supported.", buf, 0x12u);
                  }
                }
              }
              goto LABEL_23;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
            *(_WORD *)&v134[8] = 1024;
            *(_DWORD *)&v134[10] = 926;
            uint64_t v109 = "%25s:%-5d OutputVolumeControl_HAL_Common::ReconfigureInternal() - volume command supports ramping, setting enabled.";
          }
          else
          {
            buf[0] = 0;
            AppBooleanCFNumberRef Value = CFPreferencesGetAppBooleanValue(@"FakeRamp", @"com.apple.audio.virtualaudio", buf);
            if (!buf[0]) {
              goto LABEL_183;
            }
            int v111 = AppBooleanValue;
            int v112 = (os_log_t *)sub_32A48(13);
            char v113 = *v112;
            if (*v112 && os_log_type_enabled(*v112, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)long long v134 = "RunTimeDefaults.cpp";
              *(_WORD *)&v134[8] = 1024;
              *(_DWORD *)&v134[10] = 2098;
              *(_WORD *)&v134[14] = 2080;
              *(void *)&v134[16] = "FakeRamp";
              *(_WORD *)&v134[24] = 1024;
              *(_DWORD *)&v134[26] = v111 != 0;
              _os_log_impl(&def_1E50E8, v113, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", buf, 0x22u);
            }
            if (!v111) {
              goto LABEL_183;
            }
            if (v104 == 3) {
              goto LABEL_183;
            }
            *(unsigned char *)(a1 + 469) = 1;
            char v114 = (os_log_t *)sub_32A48(41);
            int v108 = *v114;
            if (!*v114 || !os_log_type_enabled(*v114, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_183;
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
            *(_WORD *)&v134[8] = 1024;
            *(_DWORD *)&v134[10] = 932;
            uint64_t v109 = "%25s:%-5d OutputVolumeControl_HAL_Common::ReconfigureInternal() - faking volume ramping.";
          }
          _os_log_impl(&def_1E50E8, v108, OS_LOG_TYPE_DEBUG, v109, buf, 0x12u);
          goto LABEL_183;
        }
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
    int v19 = (os_log_t *)sub_32A48(13);
    CFTypeRef v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&v134[8] = 1024;
      *(_DWORD *)&v134[10] = 941;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Logic error: requested software volume, but given software volume command is NULL\"", buf, 0x12u);
    }
    *(_DWORD *)(a1 + 264) = 0;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_24:
  char v21 = a2[1];
  int v22 = v21 - 1;
  double v23 = *(v21 - 1);
  double v24 = *(double *)(a1 + 144);
  if (v23 >= v24 && (double v25 = **a2, v26 = *(double *)(a1 + 152), v25 <= v26))
  {
    if (v26 < v23) {
      int v22 = (double *)(a1 + 152);
    }
    if (v25 < v24) {
      double v25 = *(double *)(a1 + 144);
    }
  }
  else
  {
    int v22 = (double *)(a1 + 152);
    double v25 = *(double *)(a1 + 144);
  }
  int v27 = *(_DWORD *)(a1 + 264);
  if (v27 == 2)
  {
    float v28 = v23;
    float v29 = **a2;
  }
  else if (v27 == 1)
  {
    float v28 = v23;
    float v29 = **a2;
    if (*(unsigned char *)(a1 + 311))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 1835103844;
      *(void *)long long v134 = *(void *)(a1 + 128);
      float v30 = v24;
      *(float *)std::string __p = v30;
      if ((*(unsigned int (**)(void, uint8_t *))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96), buf))
      {
        LODWORD(theString[0]) = 4;
        (*(void (**)(void, uint8_t *, void, void, CFStringRef *, void **))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), buf, 0, 0, theString, __p);
      }
      float v31 = *(double *)a4;
      if (*(float *)__p > v31) {
        float v31 = *(float *)__p;
      }
      *(float *)(a1 + 268) = v31;
      double v32 = *(double *)(a1 + 152);
      if (v32 >= *(double *)(a4 + 8)) {
        double v32 = *(double *)(a4 + 8);
      }
      float v33 = v32;
      *(float *)(a1 + 272) = v33;
      char v21 = a2[1];
    }
    else if (*(double *)a4 != 0.0 || *(double *)(a4 + 8) != 0.0)
    {
      long long v125 = (os_log_t *)sub_32A48(13);
      long long v126 = *v125;
      if (*v125 && os_log_type_enabled(*v125, OS_LOG_TYPE_ERROR))
      {
        double v127 = *(double *)a4;
        uint64_t v128 = *(void *)(a4 + 8);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&v134[8] = 1024;
        *(_DWORD *)&v134[10] = 992;
        *(_WORD *)&v134[14] = 2048;
        *(double *)&v134[16] = v127;
        *(_WORD *)&v134[24] = 2048;
        *(void *)&v134[26] = v128;
        _os_log_impl(&def_1E50E8, v126, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Non-zero HW volume {%f, %f} configured but physical device does not support HW volume\"", buf, 0x26u);
      }
      char v129 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1106A4(v129, "Non-zero HW volume {%f, %f} configured but physical device does not support HW volume");
    }
  }
  else
  {
    float v28 = *v22;
    float v29 = v25;
    *(float *)(a1 + 268) = v29;
    *(float *)(a1 + 272) = v28;
  }
  if ((char *)v21 - (char *)*a2 == 16)
  {
    if (v11) {
      unsigned int v34 = v7;
    }
    else {
      unsigned int v34 = 0;
    }
    if (*(void *)(a1 + 192)) {
      signed int v35 = *(_DWORD *)(*(void *)(a1 + 176) + 28);
    }
    else {
      signed int v35 = 0;
    }
    signed int v40 = sub_791CC(a1 + 168);
    *(_DWORD *)(a1 + 204) = v34;
    if (v34 > 0xF)
    {
      float v43 = 1.0;
      float v42 = 2.0;
      char v41 = 1;
    }
    else
    {
      char v41 = byte_4E7CF0[v34];
      float v42 = flt_4E7E38[v34];
      float v43 = flt_4E7E78[v34];
    }
    __int16 v44 = *(void **)(a1 + 184);
    *(unsigned char *)(a1 + 200) = v41;
    *(float *)(a1 + 208) = v42;
    *(float *)(a1 + 212) = v43;
    sub_463E0(v44);
    *(void *)(a1 + 176) = a1 + 184;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(float *)&double v45 = v29;
    sub_792F0(a1 + 168, v35, v40, v45, v28);
    __int16 v46 = (os_log_t *)sub_32A48(18);
    int v47 = *v46;
    if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&v134[8] = 1024;
      *(_DWORD *)&v134[10] = 1020;
      *(_WORD *)&v134[14] = 2048;
      *(double *)&v134[16] = v29;
      *(_WORD *)&v134[24] = 2048;
      *(double *)&v134[26] = v28;
      *(_WORD *)&v134[34] = 1024;
      *(_DWORD *)&v134[36] = v34;
      _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reconfiguring volume curve with dB range {%f, %f} and transfer function %u", buf, 0x2Cu);
    }
  }
  else
  {
    sub_16FF70((uint64_t)buf, a2);
    uint64_t v37 = a1 + 184;
    char v36 = *(void **)(a1 + 184);
    *(_DWORD *)(a1 + 168) = *(_DWORD *)buf;
    sub_463E0(v36);
    char v38 = *(void **)&v134[12];
    *(void *)(a1 + 176) = *(void *)&v134[4];
    *(void *)(a1 + 184) = v38;
    uint64_t v39 = *(void *)&v134[20];
    *(void *)(a1 + 192) = *(void *)&v134[20];
    if (v39)
    {
      v38[2] = v37;
      *(void *)&v134[4] = &v134[12];
      *(void *)&v134[12] = 0;
      *(void *)&v134[20] = 0;
      char v38 = 0;
    }
    else
    {
      *(void *)(a1 + 176) = v37;
    }
    *(_OWORD *)(a1 + 200) = *(_OWORD *)&v134[28];
    sub_463E0(v38);
  }
  float v49 = v9 + 10;
  double v48 = (void *)v9[10];
  if (v48)
  {
    *(void *)(a1 + 368) = v48;
    operator delete(v48);
    void *v49 = 0;
    v9[11] = 0;
    unsigned char v9[12] = 0;
  }
  *(_OWORD *)float v49 = *(_OWORD *)a2;
  *(void *)(a1 + 376) = a2[2];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v50 = *(std::__shared_weak_count **)(a1 + 288);
  if (v50)
  {
    uint64_t v51 = std::__shared_weak_count::lock(v50);
    if (v51)
    {
      uint64_t v52 = v51;
      if (*v9) {
        (*(void (**)(void))(*(void *)*v9 + 208))(*v9);
      }
      sub_4636C(v52);
    }
  }
  uint64_t v53 = *(void *)(a1 + 96);
  *(_DWORD *)AudioObjectPropertyAddress buf = 1986225518;
  *(void *)long long v134 = *(void *)(a1 + 128);
  uint64_t v54 = sub_99A40(v53);
  *((void *)&v57 + 1) = v55;
  *(void *)&long long v57 = v54;
  uint64_t v56 = v57 >> 32;
  if ((v56 & 0xFF00000000) == 0)
  {
    int v58 = *(_DWORD *)(a1 + 264);
    LODWORD(v56) = v58 != 2
                && (v58 != 1 || *(unsigned char *)(a1 + 311) || *(float *)(a1 + 268) != 0.0 || *(float *)(a1 + 272) != 0.0);
  }
  *(_DWORD *)(a1 + 384) = v56;
  double v59 = (os_log_t *)sub_32A48(18);
  double v60 = *v59;
  if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_DEFAULT))
  {
    int v61 = *(_DWORD *)(a1 + 384);
    (*(void (**)(CFStringRef *__return_ptr))(**(void **)(a1 + 96) + 128))(theString);
    sub_21B7C(__p, theString[0]);
    if (v132 >= 0) {
      uint64_t v62 = __p;
    }
    else {
      uint64_t v62 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
    *(_WORD *)&v134[8] = 1024;
    *(_DWORD *)&v134[10] = 1054;
    *(_WORD *)&v134[14] = 1024;
    *(_DWORD *)&v134[16] = v61;
    *(_WORD *)&v134[20] = 2080;
    *(void *)&v134[22] = v62;
    _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VolumeConfirmations : %u for physical device %s", buf, 0x22u);
    if (v132 < 0) {
      operator delete(__p[0]);
    }
    sub_72924((uint64_t)theString);
  }
  if (*(void *)(a1 + 320) && !*(unsigned char *)(a1 + 311))
  {
    int v78 = *(_DWORD *)(a1 + 88);
    double v79 = -24.0;
    if (v78 > 1886152046)
    {
      if (v78 != 1886152047)
      {
        if (v78 == 1886545251) {
          goto LABEL_145;
        }
        if (v78 == 1886613611)
        {
          double v79 = -30.0;
          goto LABEL_145;
        }
        goto LABEL_143;
      }
    }
    else
    {
      if (v78 == 1885888867) {
        goto LABEL_145;
      }
      if (v78 != 1885892706)
      {
LABEL_143:
        unint64_t v90 = 0xC043000000000000;
        goto LABEL_144;
      }
    }
    unint64_t v90 = 0xC040000000000000;
LABEL_144:
    double v79 = *(double *)&v90;
LABEL_145:
    sub_16FEBC((uint64_t)buf, 0, v79, 0.0);
    *(_DWORD *)(a1 + 216) = *(_DWORD *)buf;
    uint64_t v91 = a1 + 232;
    sub_463E0(*(void **)(a1 + 232));
    char v92 = *(void **)&v134[12];
    *(void *)(a1 + 224) = *(void *)&v134[4];
    *(void *)(a1 + 232) = v92;
    uint64_t v93 = *(void *)&v134[20];
    *(void *)(a1 + 240) = *(void *)&v134[20];
    if (v93)
    {
      v92[2] = v91;
      *(void *)&v134[4] = &v134[12];
      *(void *)&v134[12] = 0;
      *(void *)&v134[20] = 0;
      char v92 = 0;
    }
    else
    {
      *(void *)(a1 + 224) = v91;
    }
    *(_OWORD *)(a1 + 248) = *(_OWORD *)&v134[28];
    sub_463E0(v92);
    uint64_t v94 = (os_log_t *)sub_32A48(18);
    uint64_t v95 = *v94;
    if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_DEFAULT))
    {
      if (*(void *)(a1 + 240)) {
        double v96 = *(float *)(*(void *)(a1 + 224) + 36);
      }
      else {
        double v96 = 0.0;
      }
      double v102 = sub_792A4(a1 + 216);
      int v103 = *(_DWORD *)(a1 + 252);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)long long v134 = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&v134[8] = 1024;
      *(_DWORD *)&v134[10] = 1070;
      *(_WORD *)&v134[14] = 2048;
      *(double *)&v134[16] = v96;
      *(_WORD *)&v134[24] = 2048;
      *(double *)&v134[26] = *(float *)&v102;
      *(_WORD *)&v134[34] = 1024;
      *(_DWORD *)&v134[36] = v103;
      _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d External volume handler set but device does not support volume curve property. Using fallback curve with dB range {%f, %f} and transfer function %u.", buf, 0x2Cu);
    }
    return;
  }
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 168);
  char v63 = *(void **)(a1 + 176);
  uint64_t v64 = (void *)(a1 + 184);
  if (*(void *)(a1 + 240))
  {
    uint64_t v66 = (uint64_t **)(a1 + 232);
    uint64_t v65 = *(void *)(a1 + 232);
    char v67 = *(uint64_t **)(a1 + 224);
    *(void *)(a1 + 224) = a1 + 232;
    *(void *)(v65 + 16) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    if (v67[1]) {
      AudioObjectID v68 = (uint64_t *)v67[1];
    }
    else {
      AudioObjectID v68 = v67;
    }
    if (v68)
    {
      uint64_t v69 = sub_6CA9C((uint64_t)v68);
      if (v63 == v64)
      {
        char v63 = (void *)(a1 + 184);
      }
      else
      {
        uint64_t v70 = v68;
        char v71 = v63;
        do
        {
          AudioObjectID v68 = v69;
          uint64_t v72 = *(void *)((char *)v71 + 28);
          *(uint64_t *)((char *)v70 + 28) = v72;
          *(uint64_t *)((char *)v70 + 36) = *(void *)((char *)v71 + 36);
          uint64_t v73 = *v66;
          uint64_t v74 = (uint64_t **)(a1 + 232);
          char v75 = (uint64_t **)(a1 + 232);
          if (*v66)
          {
            do
            {
              while (1)
              {
                uint64_t v74 = (uint64_t **)v73;
                if ((int)v72 >= *((_DWORD *)v73 + 7)) {
                  break;
                }
                uint64_t v73 = (uint64_t *)*v73;
                char v75 = v74;
                if (!*v74) {
                  goto LABEL_100;
                }
              }
              uint64_t v73 = (uint64_t *)v73[1];
            }
            while (v73);
            char v75 = v74 + 1;
          }
LABEL_100:
          sub_46CA8((uint64_t **)(a1 + 224), (uint64_t)v74, v75, v70);
          if (v69) {
            uint64_t v69 = sub_6CA9C((uint64_t)v69);
          }
          else {
            uint64_t v69 = 0;
          }
          uint64_t v76 = (void *)v71[1];
          if (v76)
          {
            do
            {
              char v63 = v76;
              uint64_t v76 = (void *)*v76;
            }
            while (v76);
          }
          else
          {
            do
            {
              char v63 = (void *)v71[2];
              BOOL v77 = *v63 == (void)v71;
              char v71 = v63;
            }
            while (!v77);
          }
          if (!v68) {
            break;
          }
          uint64_t v70 = v68;
          char v71 = v63;
        }
        while (v63 != v64);
      }
      sub_463E0(v68);
      if (!v69) {
        goto LABEL_126;
      }
      for (uint64_t i = (uint64_t *)v69[2]; i; uint64_t i = (uint64_t *)i[2])
        uint64_t v69 = i;
      uint64_t v80 = v69;
    }
    else
    {
      uint64_t v80 = 0;
    }
    sub_463E0(v80);
  }
LABEL_126:
  if (v63 != v64)
  {
    uint64_t v82 = (uint64_t **)(a1 + 232);
    do
    {
      uint64_t v83 = (uint64_t *)operator new(0x30uLL);
      uint64_t v84 = *(void *)((char *)v63 + 28);
      *(uint64_t *)((char *)v83 + 28) = v84;
      *(uint64_t *)((char *)v83 + 36) = *(void *)((char *)v63 + 36);
      char v85 = *v82;
      uint64_t v86 = (uint64_t **)(a1 + 232);
      unsigned int v87 = (uint64_t **)(a1 + 232);
      if (*v82)
      {
        do
        {
          while (1)
          {
            uint64_t v86 = (uint64_t **)v85;
            if ((int)v84 >= *((_DWORD *)v85 + 7)) {
              break;
            }
            char v85 = (uint64_t *)*v85;
            unsigned int v87 = v86;
            if (!*v86) {
              goto LABEL_134;
            }
          }
          char v85 = (uint64_t *)v85[1];
        }
        while (v85);
        unsigned int v87 = v86 + 1;
      }
LABEL_134:
      sub_46CA8((uint64_t **)(a1 + 224), (uint64_t)v86, v87, v83);
      uint64_t v88 = (void *)v63[1];
      if (v88)
      {
        do
        {
          uint64_t v89 = v88;
          uint64_t v88 = (void *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          uint64_t v89 = (void *)v63[2];
          BOOL v77 = *v89 == (void)v63;
          char v63 = v89;
        }
        while (!v77);
      }
      char v63 = v89;
    }
    while (v89 != v64);
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 200);
}

void sub_1F9ED8(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_1F9F50(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_DWORD *)(a1 + 136) = a5;
  if (a2[1] < *a2)
  {
    int v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      double v13 = *a2;
      uint64_t v12 = *((void *)a2 + 1);
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&__p[12] = 1024;
      *(_DWORD *)&__p[14] = 858;
      *(_WORD *)&__p[18] = 2048;
      *(void *)&__p[20] = v12;
      __int16 v16 = 2048;
      double v17 = v13;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)\"", __p, 0x26u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "Argument desiredVolumeCurveRangeDB's mMaximum (%f) < mMinimum (%f)");
  }
  uint64_t v9 = operator new(0x10uLL);
  *(void *)&__p[8] = v9 + 1;
  *(void *)&__p[16] = v9 + 1;
  *uint64_t v9 = *(_OWORD *)a2;
  *(void *)std::string __p = v9;
  sub_1F8E70(a1, (double **)__p, a3, a4);
  if (*(void *)__p) {
    operator delete(*(void **)__p);
  }
  *(unsigned char *)(a1 + 312) = 0;
}

void sub_1FA0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
}

uint64_t sub_1FA0F8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    double v24 = (os_log_t *)sub_32A48(13);
    double v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v32 = 1024;
      *(_DWORD *)float v33 = 1528;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v8 = *a2;
  if (*a2 <= 1919774834)
  {
    if (v8 == 1064725619) {
      return 1;
    }
    if (v8 != 1684633187 && v8 != 1836414053) {
      goto LABEL_17;
    }
    goto LABEL_13;
  }
  if (v8 <= 1986817376)
  {
    if (v8 == 1919774835)
    {
      uint64_t v14 = *(void **)(a1 + 344);
      *(_DWORD *)std::string __p = 1919774835;
      *(void *)&__p[4] = *(void *)(a1 + 128);
      *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
      *(_DWORD *)&buf[8] = a2[2];
      *(void *)&uint64_t v33[2] = a3;
      *(void *)&v33[10] = a4;
      sub_1A4260(v14, (unsigned int *)__p, (uint64_t)buf);
      return 1;
    }
    if (v8 != 1986229104)
    {
LABEL_17:
      int v11 = (os_log_t *)sub_32A48(13);
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v32 = 1024;
          *(_DWORD *)float v33 = 1575;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
        }
      }
      double v13 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v13 = &off_6414D8;
      v13[2] = 2003332927;
    }
LABEL_13:
    *(_DWORD *)std::string __p = *a2;
    *(void *)&__p[4] = *(void *)(a1 + 128);
    int v10 = *(void **)(a1 + 344);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&uint64_t v33[2] = a3;
    *(void *)&v33[10] = a4;
    sub_1A4260(v10, (unsigned int *)__p, (uint64_t)buf);
    if ((*(unsigned int (**)(void, unsigned char *))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96), __p)) {
      sub_FEEF8(*(void *)(a1 + 96), __p, (uint64_t)sub_1F76D0, a1);
    }
    return 1;
  }
  if (v8 == 1986817377)
  {
    uint64_t v15 = *(void **)(a1 + 344);
    *(_DWORD *)std::string __p = 1986817377;
    *(void *)&__p[4] = *(void *)(a1 + 128);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&uint64_t v33[2] = a3;
    *(void *)&v33[10] = a4;
    sub_1A4260(v15, (unsigned int *)__p, (uint64_t)buf);
  }
  else if (v8 != 1987013741)
  {
    goto LABEL_17;
  }
  unsigned int v29 = 1987013732;
  uint64_t v30 = *(void *)(a1 + 128);
  __int16 v16 = *(void **)(a1 + 344);
  *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
  *(_DWORD *)&buf[8] = a2[2];
  *(void *)&uint64_t v33[2] = a3;
  *(void *)&v33[10] = a4;
  sub_1A4260(v16, &v29, (uint64_t)buf);
  if (*(unsigned char *)(a1 + 311))
  {
    sub_FEEF8(*(void *)(a1 + 96), &v29, (uint64_t)sub_1F76D0, a1);
    double v17 = (os_log_t *)sub_32A48(18);
    uint64_t v18 = *v17;
    if (*v17)
    {
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v19 = *(void *)(a1 + 96);
        sub_2417C(__p, 0x766F6C64u);
        CFTypeRef v20 = v28 >= 0 ? __p : *(unsigned char **)__p;
        int v21 = *(_DWORD *)(a1 + 128);
        int v22 = *(_DWORD *)(a1 + 132);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        __int16 v32 = 1024;
        *(_DWORD *)float v33 = 1549;
        *(_WORD *)&v33[4] = 2048;
        *(void *)&v33[6] = v19;
        *(_WORD *)&unsigned char v33[14] = 2080;
        *(void *)&v33[16] = v20;
        __int16 v34 = 1024;
        int v35 = v21;
        __int16 v36 = 1024;
        int v37 = v22;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d RemovePropertyListener() succeeded. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
          buf,
          0x32u);
        if (v28 < 0) {
          operator delete(*(void **)__p);
        }
      }
    }
  }
  return 1;
}

BOOL sub_1FA5B4(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    double v45 = (os_log_t *)sub_32A48(13);
    __int16 v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v55 = 1024;
      *(_DWORD *)uint64_t v56 = 1451;
      _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v8 = *a2;
  if ((int)*a2 <= 1919774834)
  {
    if (v8 == 1064725619) {
      return 1;
    }
    if (v8 != 1684633187 && v8 != 1836414053) {
      goto LABEL_29;
    }
LABEL_13:
    unsigned int v52 = *a2;
    uint64_t v53 = *(void *)(a1 + 128);
    int v10 = *(void **)(a1 + 344);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&v56[2] = a3;
    *(void *)&v56[10] = a4;
    sub_1A4AA0(v10, &v52, (uint64_t)buf);
    if ((*(unsigned int (**)(void, unsigned int *))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96), &v52))
    {
      unsigned int v11 = sub_FEAC0(*(void *)(a1 + 96), &v52, (uint64_t)sub_1F76D0, a1);
      if (v11)
      {
        uint64_t v12 = (os_log_t *)sub_32A48(18);
        double v13 = *v12;
        if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v50, v11);
          int v14 = v51;
          uint64_t v15 = *(unsigned char **)v50;
          uint64_t v16 = *(void *)(a1 + 96);
          sub_2417C(__p, *a2);
          double v17 = v50;
          if (v14 < 0) {
            double v17 = v15;
          }
          if (v49 >= 0) {
            uint64_t v18 = __p;
          }
          else {
            uint64_t v18 = (void **)__p[0];
          }
          int v19 = *(_DWORD *)(a1 + 128);
          int v20 = *(_DWORD *)(a1 + 132);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v55 = 1024;
          *(_DWORD *)uint64_t v56 = 1500;
          *(_WORD *)&v56[4] = 2080;
          *(void *)&v56[6] = v17;
          *(_WORD *)&v56[14] = 2048;
          *(void *)&v56[16] = v16;
          __int16 v57 = 2080;
          *(void *)int v58 = v18;
          *(_WORD *)&v58[8] = 1024;
          int v59 = v19;
          __int16 v60 = 1024;
          int v61 = v20;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d AddPropertyListener() failed with status '%s'. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
            buf,
            0x3Cu);
          if (v49 < 0) {
            operator delete(__p[0]);
          }
          if (v51 < 0) {
            operator delete(*(void **)v50);
          }
        }
        return 0;
      }
    }
    return 1;
  }
  if (v8 <= 1986817376)
  {
    if (v8 == 1919774835)
    {
      double v25 = *(void **)(a1 + 344);
      *(_DWORD *)uint64_t v50 = 1919774835;
      *(void *)&v50[4] = *(void *)(a1 + 128);
      *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
      *(_DWORD *)&buf[8] = a2[2];
      *(void *)&v56[2] = a3;
      *(void *)&v56[10] = a4;
      sub_1A4AA0(v25, (unsigned int *)v50, (uint64_t)buf);
      return *(unsigned char *)(a1 + 469) != 0;
    }
    if (v8 != 1986229104)
    {
LABEL_29:
      int v22 = (os_log_t *)sub_32A48(13);
      double v23 = *v22;
      if (*v22)
      {
        if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v55 = 1024;
          *(_DWORD *)uint64_t v56 = 1518;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
        }
      }
      double v24 = __cxa_allocate_exception(0x10uLL);
      *(void *)double v24 = &off_6414D8;
      v24[2] = 2003332927;
    }
    goto LABEL_13;
  }
  if (v8 == 1986817377)
  {
    double v26 = *(void **)(a1 + 344);
    *(_DWORD *)uint64_t v50 = 1986817377;
    *(void *)&v50[4] = *(void *)(a1 + 128);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&buf[8] = a2[2];
    *(void *)&v56[2] = a3;
    *(void *)&v56[10] = a4;
    sub_1A4AA0(v26, (unsigned int *)v50, (uint64_t)buf);
  }
  else if (v8 != 1987013741)
  {
    goto LABEL_29;
  }
  unsigned int v52 = 1987013732;
  uint64_t v53 = *(void *)(a1 + 128);
  int v27 = *(void **)(a1 + 344);
  *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
  *(_DWORD *)&buf[8] = a2[2];
  *(void *)&v56[2] = a3;
  *(void *)&v56[10] = a4;
  sub_1A4AA0(v27, &v52, (uint64_t)buf);
  if (!*(unsigned char *)(a1 + 311)) {
    return 1;
  }
  unsigned int v28 = sub_FEAC0(*(void *)(a1 + 96), &v52, (uint64_t)sub_1F76D0, a1);
  BOOL v21 = v28 == 0;
  if (v28)
  {
    unsigned int v29 = (os_log_t *)sub_32A48(18);
    uint64_t v30 = *v29;
    if (*v29)
    {
      if (os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v50, v28);
        int v31 = v51;
        __int16 v32 = *(unsigned char **)v50;
        uint64_t v33 = *(void *)(a1 + 96);
        sub_2417C(__p, 0x766F6C64u);
        __int16 v34 = v50;
        if (v31 < 0) {
          __int16 v34 = v32;
        }
        if (v49 >= 0) {
          int v35 = __p;
        }
        else {
          int v35 = (void **)__p[0];
        }
        int v36 = *(_DWORD *)(a1 + 128);
        int v37 = *(_DWORD *)(a1 + 132);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        __int16 v55 = 1024;
        *(_DWORD *)uint64_t v56 = 1477;
        *(_WORD *)&v56[4] = 2080;
        *(void *)&v56[6] = v34;
        *(_WORD *)&v56[14] = 2048;
        *(void *)&v56[16] = v33;
        __int16 v57 = 2080;
        *(void *)int v58 = v35;
        *(_WORD *)&v58[8] = 1024;
        int v59 = v36;
        __int16 v60 = 1024;
        int v61 = v37;
        _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d AddPropertyListener() failed with status '%s'. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
          buf,
          0x3Cu);
        if (v49 < 0) {
          operator delete(__p[0]);
        }
        if (v51 < 0) {
          operator delete(*(void **)v50);
        }
      }
    }
  }
  char v38 = (os_log_t *)sub_32A48(18);
  uint64_t v39 = *v38;
  if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v40 = *(void *)(a1 + 96);
    sub_2417C(v50, 0x766F6C64u);
    char v41 = v51 >= 0 ? v50 : *(unsigned char **)v50;
    int v42 = *(_DWORD *)(a1 + 128);
    int v43 = *(_DWORD *)(a1 + 132);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v55 = 1024;
    *(_DWORD *)uint64_t v56 = 1478;
    *(_WORD *)&v56[4] = 2048;
    *(void *)&v56[6] = v40;
    *(_WORD *)&v56[14] = 2080;
    *(void *)&v56[16] = v41;
    __int16 v57 = 1024;
    *(_DWORD *)int v58 = v42;
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = v43;
    _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d AddPropertyListener() succeeded. mPhysicalDevice: %p; selector: '%s'; scope: %u; element: %u.",
      buf,
      0x32u);
    if (v51 < 0) {
      operator delete(*(void **)v50);
    }
  }
  return v21;
}

void sub_1FACC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1FACE8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned __int16 *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v64 = (os_log_t *)sub_32A48(13);
    uint64_t v65 = *v64;
    if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 624;
      _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) > a5)
  {
    char v67 = (os_log_t *)sub_32A48(13);
    AudioObjectID v68 = *v67;
    if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 625;
      _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"Data size insufficient.\"", buf, 0x12u);
    }
    uint64_t v69 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v69 = &off_6414D8;
    v69[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    uint64_t v70 = (os_log_t *)sub_32A48(13);
    char v71 = *v70;
    if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 626;
      _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"Property is not settable.\"", buf, 0x12u);
    }
    uint64_t v72 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v72 = &off_6414D8;
    v72[2] = 1970171760;
  }
  int v12 = *a2;
  if (*a2 <= 1986098019)
  {
    if (v12 == 1668443504)
    {
      if (!*(unsigned char *)(a1 + 469))
      {
        uint64_t v73 = (os_log_t *)sub_32A48(13);
        uint64_t v74 = *v73;
        if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 718;
          _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        char v75 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v75, "Precondition failure.");
      }
      uint64_t v30 = (os_log_t *)sub_32A48(41);
      int v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(&__p, 0x63726D70u);
        __int16 v32 = v101 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 721;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)int v103 = v32;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::SetPropertyData() - %s.", buf, 0x1Cu);
        if (v101 < 0) {
          operator delete(__p);
        }
      }
      uint64_t v33 = (std::recursive_mutex *)(a1 + 400);
      std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 400));
      if (*(unsigned char *)(a1 + 468))
      {
        __int16 v34 = *(std::__shared_weak_count **)(a1 + 288);
        if (v34)
        {
          int v35 = std::__shared_weak_count::lock(v34);
          if (v35)
          {
            int v36 = v35;
            uint64_t v37 = *(void *)(a1 + 280);
            if (v37) {
              (*(void (**)(uint64_t))(*(void *)v37 + 240))(v37);
            }
            sub_4636C(v36);
          }
        }
        if (a6)
        {
          if (a5 != 2)
          {
            char v38 = (os_log_t *)sub_32A48(13);
            uint64_t v39 = *v38;
            if (*v38)
            {
              if (os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                *(void *)&uint8_t buf[4] = "StandardUtilities.h";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 149;
                _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"sizeof(T) == inDataSize\"", buf, 0x12u);
              }
            }
          }
          sub_1F72D0(a1, *a6);
          sub_1FE19C(a1);
        }
        char v92 = (os_log_t *)sub_32A48(13);
        uint64_t v93 = *v92;
        if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "StandardUtilities.h";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 148;
          _os_log_impl(&def_1E50E8, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        uint64_t v94 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v94, "Precondition failure.");
      }
      uint64_t v50 = (os_log_t *)sub_32A48(41);
      char v51 = *v50;
      if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(&__p, 0x63726D70u);
        unsigned int v52 = v101 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 737;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)int v103 = v52;
        _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::SetPropertyData() - %s no ramp in progress to cancel.", buf, 0x1Cu);
        if (v101 < 0) {
          operator delete(__p);
        }
      }
      std::recursive_mutex::unlock(v33);
      return;
    }
    if (v12 == 1836414053)
    {
      *(unsigned char *)(a1 + 309) = sub_1FDEE0(a5, (unsigned int *)a6) == 1;
      sub_1FC35C(a1, 2);
    }
    if (v12 != 1918987632) {
      goto LABEL_64;
    }
    if (!*(unsigned char *)(a1 + 469))
    {
      uint64_t v76 = (os_log_t *)sub_32A48(13);
      BOOL v77 = *v76;
      if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 705;
        _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      int v78 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v78, "Precondition failure.");
    }
    int v14 = (os_log_t *)sub_32A48(41);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(&__p, 0x72616D70u);
      uint64_t v16 = v101 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 708;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)int v103 = v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::SetPropertyData() - %s.", buf, 0x1Cu);
      if (v101 < 0) {
        operator delete(__p);
      }
    }
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 400));
    if (!a6)
    {
      uint64_t v82 = (os_log_t *)sub_32A48(13);
      uint64_t v83 = *v82;
      if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "StandardUtilities.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 148;
        _os_log_impl(&def_1E50E8, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      uint64_t v84 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v84, "Precondition failure.");
    }
    if (a5 != 24)
    {
      double v17 = (os_log_t *)sub_32A48(13);
      uint64_t v18 = *v17;
      if (*v17)
      {
        if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "StandardUtilities.h";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 149;
          _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"sizeof(T) == inDataSize\"", buf, 0x12u);
        }
      }
    }
    long long v96 = *(_OWORD *)a6;
    CFTypeRef cf = (CFTypeRef)*((void *)a6 + 2);
    int v19 = *(std::__shared_weak_count **)(a1 + 288);
    if (v19)
    {
      int v20 = std::__shared_weak_count::lock(v19);
      if (v20)
      {
        uint64_t v21 = *(void *)(a1 + 280);
        if (v21)
        {
          *(unsigned char *)(a1 + 468) = 1;
          CFTypeRef v22 = cf;
          if (cf)
          {
            CFRetain(cf);
            CFTypeID v23 = CFGetTypeID(cf);
            if (v23 != CFStringGetTypeID())
            {
              CFRelease(cf);
              CFTypeRef v22 = 0;
            }
          }
          double v24 = *(const void **)(a1 + 472);
          *(void *)(a1 + 472) = v22;
          if (v24) {
            CFRelease(v24);
          }
          float v25 = *(float *)&v96;
          *(_DWORD *)(a1 + 464) = v96;
          double v26 = (os_log_t *)sub_32A48(41);
          int v27 = *v26;
          if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEBUG))
          {
            CFStringRef v28 = *(const __CFString **)(a1 + 472);
            if (v28)
            {
              sub_20C54((uint64_t)&__p, v28);
              if (v101 >= 0) {
                p_p = (const char *)&__p;
              }
              else {
                p_p = (const char *)__p;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
              *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1719;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(double *)int v103 = v25;
              *(_WORD *)&v103[8] = 2048;
              *(double *)&v103[10] = *((float *)&v96 + 1);
              *(_WORD *)&unsigned char v103[18] = 2048;
              double v104 = *((float *)&v96 + 2);
              __int16 v105 = 2080;
              int v106 = p_p;
              _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::BeginSoftwareVolumeRamp() - target volume %.2f, upward ramp duration %.2fms, downward ramp duration %.2fms, category %s.", buf, 0x3Au);
              if (v101 < 0) {
                operator delete(__p);
              }
            }
            else
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
              *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1719;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(double *)int v103 = v25;
              *(_WORD *)&v103[8] = 2048;
              *(double *)&v103[10] = *((float *)&v96 + 1);
              *(_WORD *)&unsigned char v103[18] = 2048;
              double v104 = *((float *)&v96 + 2);
              __int16 v105 = 2080;
              int v106 = "unknown";
              _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::BeginSoftwareVolumeRamp() - target volume %.2f, upward ramp duration %.2fms, downward ramp duration %.2fms, category %s.", buf, 0x3Au);
            }
          }
          (*(void (**)(uint64_t, long long *))(*(void *)v21 + 232))(v21, &v96);
          *(void *)AudioObjectPropertyAddress buf = off_627188;
          *(void *)&buf[8] = a1;
          *(void *)&v103[4] = buf;
          (*(void (**)(uint64_t, unsigned char *))(*(void *)v21 + 248))(v21, buf);
          sub_152084(buf);
          goto LABEL_116;
        }
      }
    }
    else
    {
      int v20 = 0;
    }
    uint64_t v53 = (os_log_t *)sub_32A48(41);
    uint64_t v54 = *v53;
    if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1753;
      _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d OutputVolumeControl_HAL_Common::BeginSoftwareVolumeRamp() - unable to lock software volume command.", buf, 0x12u);
    }
    if (!v20) {
LABEL_117:
    }
      sub_1FE19C(a1);
LABEL_116:
    sub_4636C(v20);
    goto LABEL_117;
  }
  if (v12 <= 1987013740)
  {
    if (v12 != 1986098020)
    {
      int v13 = 1986817377;
      goto LABEL_42;
    }
    int v42 = *(std::__shared_weak_count **)(a1 + 288);
    if (v42)
    {
      int v43 = std::__shared_weak_count::lock(v42);
      if (v43)
      {
        uint64_t v44 = *(void *)(a1 + 280);
        if (v44 && ((*(uint64_t (**)(uint64_t))(*(void *)v44 + 72))(v44) & 1) != 0) {
          goto LABEL_96;
        }
      }
      else
      {
        uint64_t v44 = 0;
      }
    }
    else
    {
      uint64_t v44 = 0;
      int v43 = 0;
    }
    __int16 v55 = (os_log_t *)sub_32A48(13);
    uint64_t v56 = *v55;
    if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 682;
      _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Ducking is not supported!\"", buf, 0x12u);
    }
LABEL_96:
    if (a5 != 8)
    {
      double v79 = (os_log_t *)sub_32A48(13);
      uint64_t v80 = *v79;
      if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 684;
        _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      char v81 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v81, "Precondition failure.");
    }
    CFDictionaryRef v57 = (const __CFDictionary *)CFRetain(*(CFTypeRef *)a6);
    std::string __p = &off_6412B0;
    CFDictionaryRef theDict = v57;
    if (sub_1FE074(v57, @"ducking type"))
    {
      if (sub_1FE074(theDict, @"ducking enable"))
      {
        if (sub_1FE074(theDict, @"ducking gain"))
        {
          if (sub_1FE074(theDict, @"ducking time"))
          {
            sub_1FE09C((uint64_t)buf, theDict, @"ducking type");
            CFNumberRef v58 = sub_517B0(*(const __CFNumber **)&buf[8]);
            sub_49A90(buf);
            sub_1FE09C((uint64_t)buf, theDict, @"ducking enable");
            CFNumberRef v59 = sub_517B0(*(const __CFNumber **)&buf[8]);
            sub_49A90(buf);
            sub_1FE09C((uint64_t)buf, theDict, @"ducking time");
            double v60 = sub_1FE15C(*(const __CFNumber **)&buf[8]);
            float v61 = *(float *)&v60;
            sub_49A90(buf);
            sub_1FE09C((uint64_t)buf, theDict, @"ducking gain");
            double v62 = sub_1FE15C(*(const __CFNumber **)&buf[8]);
            float v63 = *(float *)&v62;
            sub_49A90(buf);
            (*(void (**)(uint64_t, const __CFNumber *, const __CFNumber *, float, float))(*(void *)v44 + 64))(v44, v58, v59, v63, v61);
            sub_49A90(&__p);
            if (v43) {
              sub_4636C(v43);
            }
            return;
          }
          unint64_t v90 = (os_log_t *)sub_32A48(13);
          uint64_t v86 = *v90;
          if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 691;
            unsigned int v87 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioDevicePropertyDucking - kVir"
                  "tualAudioPlugInDuckingTimeKey is required\"";
            goto LABEL_160;
          }
LABEL_161:
          uint64_t v91 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v91 = &off_6414D8;
          v91[2] = 1852797029;
        }
        uint64_t v89 = (os_log_t *)sub_32A48(13);
        uint64_t v86 = *v89;
        if (!*v89 || !os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR)) {
          goto LABEL_161;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 690;
        unsigned int v87 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioDevicePropertyDucking - kVirtual"
              "AudioPlugInDuckingGainKey is required\"";
      }
      else
      {
        uint64_t v88 = (os_log_t *)sub_32A48(13);
        uint64_t v86 = *v88;
        if (!*v88 || !os_log_type_enabled(*v88, OS_LOG_TYPE_ERROR)) {
          goto LABEL_161;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 689;
        unsigned int v87 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioDevicePropertyDucking - kVirtual"
              "AudioPlugInDuckingEnableKey is required\"";
      }
    }
    else
    {
      char v85 = (os_log_t *)sub_32A48(13);
      uint64_t v86 = *v85;
      if (!*v85 || !os_log_type_enabled(*v85, OS_LOG_TYPE_ERROR)) {
        goto LABEL_161;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 688;
      unsigned int v87 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"kVirtualAudioDevicePropertyDucking - kVirtualAu"
            "dioPlugInDuckingTypeKey is required\"";
    }
LABEL_160:
    _os_log_impl(&def_1E50E8, v86, OS_LOG_TYPE_ERROR, v87, buf, 0x12u);
    goto LABEL_161;
  }
  if (v12 != 2021027692)
  {
    int v13 = 1987013741;
LABEL_42:
    if (v12 == v13)
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = sub_1FC1C8(a5, (uint64_t)a6);
      LODWORD(__p) = 0;
      LODWORD(v96) = 1065353216;
      *(float *)(a1 + 296) = *sub_1F84A8((float *)&__p, (float *)buf, (float *)&v96);
      sub_1FC35C(a1, 2);
    }
LABEL_64:
    uint64_t v40 = (os_log_t *)sub_32A48(13);
    char v41 = *v40;
    if (*v40)
    {
      if (os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 745;
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"GetPropertyDataSize() is correct and IsPropertySettable() and HasProperty() returned true, but I do not know about it.\"", buf, 0x12u);
      }
    }
    return;
  }
  uint64_t v45 = *(void *)(a1 + 320);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)a6;
  if (v45 | *(void *)(a1 + 320))
  {
    float64x2_t v46 = vcvtq_f64_f32(*(float32x2_t *)(a1 + 268));
    int v47 = *(_DWORD *)(a1 + 264);
    unint64_t v49 = *(void *)(a1 + 280);
    double v48 = *(std::__shared_weak_count **)(a1 + 288);
    if (v48)
    {
      atomic_fetch_add_explicit(&v48->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(_DWORD *)&buf[16] = v47;
      *(void *)&v103[4] = v49;
      *(void *)&v103[12] = v48;
      atomic_fetch_add_explicit(&v48->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      float64x2_t v95 = v46;
      std::__shared_weak_count::__release_weak(v48);
      float64x2_t v46 = v95;
    }
    else
    {
      *(_DWORD *)&buf[16] = *(_DWORD *)(a1 + 264);
      *(_OWORD *)&v103[4] = v49;
    }
    *(float64x2_t *)AudioObjectPropertyAddress buf = v46;
    memset(v98, 0, sizeof(v98));
    sub_A2B64(v98, *(const void **)(a1 + 360), *(void *)(a1 + 368), (uint64_t)(*(void *)(a1 + 368) - *(void *)(a1 + 360)) >> 4);
    sub_1F8E70(a1, (double **)v98, *(unsigned int *)(a1 + 204) | 0x100000000, (uint64_t)buf);
    if (v98[0]) {
      operator delete(v98[0]);
    }
    if (*(void *)&v103[12]) {
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v103[12]);
    }
  }
  if (*(unsigned char *)(a1 + 312) && (*(void *)(a1 + 320) || v45 && *(_DWORD *)(a1 + 264))) {
    sub_1FC35C(a1, 2);
  }
}

void sub_1FC098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  sub_4636C(v26);
  std::recursive_mutex::unlock(v25);
  _Unwind_Resume(a1);
}

float sub_1FC1C8(int a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    unsigned int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "StandardUtilities.h";
      __int16 v11 = 1024;
      int v12 = 148;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a1 != 4)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    long long v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        int v10 = "StandardUtilities.h";
        __int16 v11 = 1024;
        int v12 = 149;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"sizeof(T) == inDataSize\"", (uint8_t *)&v9, 0x12u);
      }
    }
  }
  return *(float *)a2;
}

void sub_1FC340(_Unwind_Exception *exception_object)
{
}

void sub_1FC35C(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 264);
  uint64_t v5 = *(void *)(a1 + 320);
  if (v4) {
    BOOL v6 = 0;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (v6)
  {
    if (!*(unsigned char *)(a1 + 311))
    {
      char v233 = (os_log_t *)sub_32A48(13);
      char v234 = *v233;
      if (*v233 && os_log_type_enabled(*v233, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1333;
        _os_log_impl(&def_1E50E8, v234, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Volume Mode is HardwareOnly but physical device does not support HW volume\"", (uint8_t *)buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1106A4(exception, "Volume Mode is HardwareOnly but physical device does not support HW volume");
    }
    uint64_t v5 = 0;
  }
  sub_796B4(a1 + 168, *(float *)(a1 + 296));
  float v8 = v7;
  if (v5) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = (v4 - 1) > 1;
  }
  if (v9)
  {
    if (v5)
    {
      float v10 = *(float *)(a1 + 272);
      float v11 = 0.0;
      goto LABEL_67;
    }
    float v11 = 0.0;
    if (v4 == 2)
    {
      float v10 = 0.0;
      goto LABEL_33;
    }
    if (v4 != 1)
    {
      double v13 = v7;
      double v14 = *(double *)(a1 + 152);
      if (v14 <= v8)
      {
        float v10 = v14;
      }
      else
      {
        double v15 = *(double *)(a1 + 144);
        if (v15 >= v13) {
          float v10 = v15;
        }
        else {
          float v10 = v8;
        }
      }
      goto LABEL_33;
    }
  }
  else
  {
    float v10 = 0.0;
    float v11 = v7;
    if (v4 == 2) {
      goto LABEL_33;
    }
    float v12 = *(float *)(a1 + 268);
    if (v12 <= v8)
    {
      float v16 = *(float *)(a1 + 272);
      BOOL v17 = v16 < v8;
      float v18 = v8 - v16;
      if (v17) {
        float v11 = v18;
      }
      else {
        float v11 = 0.0;
      }
    }
    else
    {
      float v11 = v8 - v12;
    }
  }
  float v10 = *(float *)(a1 + 268);
  if (v10 <= v8)
  {
    if (*(float *)(a1 + 272) >= v8) {
      float v10 = v8;
    }
    else {
      float v10 = *(float *)(a1 + 272);
    }
  }
LABEL_33:
  int v19 = *(std::__shared_weak_count **)(a1 + 288);
  if (v19)
  {
    int v20 = std::__shared_weak_count::lock(v19);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = *(void *)(a1 + 280);
      if (v22)
      {
        float v23 = (*(float (**)(void, float))(*(void *)v22 + 48))(*(void *)(a1 + 280), *(float *)(a1 + 296));
        if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 80))(v22))
        {
          uint64_t v24 = sub_32A48(18);
          uint64_t v25 = sub_32A48(38);
          char v26 = 0;
          uint64_t v27 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v28 = *(void *)(v24 + 8);
          while (1)
          {
            uint64_t v29 = (int)buf[v27];
            char v30 = v26;
            if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
              break;
            }
            char v26 = 1;
            uint64_t v27 = 1;
            if (v30) {
              goto LABEL_47;
            }
          }
          if ((v28 & v29) == 0) {
            uint64_t v24 = v25;
          }
LABEL_47:
          char v38 = *(NSObject **)v24;
          if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            double v39 = *(double *)(a1 + 152);
            double v40 = sub_792A4(a1 + 168);
            float v41 = *(float *)&v40;
            sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
            float v42 = v39;
            double v43 = v42;
            uint64_t v44 = v239 >= 0 ? __p : (void **)__p[0];
            buf[0] = 136316418;
            *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1155;
            HIWORD(buf[4]) = 2048;
            *(double *)&buf[5] = v10;
            LOWORD(buf[7]) = 2048;
            *(double *)((char *)&buf[7] + 2) = v43;
            HIWORD(buf[9]) = 2048;
            double v241 = v41;
            *(_WORD *)char v242 = 2080;
            *(void *)&v242[2] = v44;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ApplyHeadroom is Active CommitedHardwareVolume %f dB MaxHardwareVolume[Device] %f dB MaxHardwareVolume[VolumeCurve] %f dB on VAD '%s'.", (uint8_t *)buf, 0x3Au);
            if (v239 < 0) {
              operator delete(__p[0]);
            }
          }
          double v45 = sub_792A4(a1 + 168);
          (*(void (**)(uint64_t, float))(*(void *)v22 + 88))(v22, v23 + (float)(v10 - *(float *)&v45));
          double v46 = sub_792A4(a1 + 168);
          float v10 = *(float *)&v46;
        }
        else
        {
          uint64_t v31 = sub_32A48(18);
          uint64_t v32 = sub_32A48(38);
          char v33 = 0;
          uint64_t v34 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v35 = *(void *)(v31 + 8);
          while (1)
          {
            uint64_t v36 = (int)buf[v34];
            char v37 = v33;
            if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
              break;
            }
            char v33 = 1;
            uint64_t v34 = 1;
            if (v37) {
              goto LABEL_57;
            }
          }
          if ((v35 & v36) == 0) {
            uint64_t v31 = v32;
          }
LABEL_57:
          int v47 = *(NSObject **)v31;
          if (v47 && os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
            double v48 = v239 >= 0 ? __p : (void **)__p[0];
            buf[0] = 136315906;
            *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1163;
            HIWORD(buf[4]) = 2048;
            *(double *)&buf[5] = v23;
            LOWORD(buf[7]) = 2080;
            *(void *)((char *)&buf[7] + 2) = v48;
            _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Applying %f dB to remapGain on VAD '%s'.", (uint8_t *)buf, 0x26u);
            if (v239 < 0) {
              operator delete(__p[0]);
            }
          }
          (*(void (**)(uint64_t, float))(*(void *)v22 + 96))(v22, v23);
        }
        (*(void (**)(uint64_t, float, float))(*(void *)v22 + 24))(v22, v10, *(float *)(a1 + 296));
      }
      sub_4636C(v21);
    }
  }
LABEL_67:
  unint64_t v49 = (void *)sub_B776C();
  if (*v49)
  {
    uint64_t v50 = v49;
    uint64_t v51 = sub_32A48(0);
    uint64_t v52 = sub_32A48(38);
    char v53 = 0;
    uint64_t v54 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v55 = *(void *)(v51 + 8);
    while (1)
    {
      uint64_t v56 = (int)buf[v54];
      char v57 = v53;
      if (((v55 & v56) != 0) != ((*(void *)(v52 + 8) & v56) != 0)) {
        break;
      }
      char v53 = 1;
      uint64_t v54 = 1;
      if (v57) {
        goto LABEL_74;
      }
    }
    if ((v55 & v56) == 0) {
      uint64_t v51 = v52;
    }
LABEL_74:
    CFNumberRef v58 = *(NSObject **)v51;
    if (v58 && os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
    {
      CFNumberRef v59 = (void (*)(void, void, float))*v50;
      buf[0] = 136315906;
      *(void *)&buf[1] = "HWVolumeNotificationService.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 35;
      HIWORD(buf[4]) = 2048;
      *(void *)&buf[5] = v59;
      LOWORD(buf[7]) = 2048;
      *(double *)((char *)&buf[7] + 2) = v10;
      _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling external hardware volume handler %p with volume %f", (uint8_t *)buf, 0x26u);
    }
    ((void (*)(void, void, float))*v50)(0, v50[1], v10);
  }
  uint64_t v60 = sub_32A48(18);
  uint64_t v61 = sub_32A48(38);
  char v62 = 0;
  uint64_t v63 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v64 = *(void *)(v60 + 8);
  while (1)
  {
    uint64_t v65 = (int)buf[v63];
    char v66 = v62;
    if (((v64 & v65) != 0) != ((*(void *)(v61 + 8) & v65) != 0)) {
      break;
    }
    char v62 = 1;
    uint64_t v63 = 1;
    if (v66) {
      goto LABEL_84;
    }
  }
  if ((v64 & v65) == 0) {
    uint64_t v60 = v61;
  }
LABEL_84:
  char v67 = *(NSObject **)v60;
  if (v67 && os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(a1 + 320)) {
      AudioObjectID v68 = "Yes";
    }
    else {
      AudioObjectID v68 = "No";
    }
    sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
    uint64_t v69 = (void **)__p[0];
    buf[0] = 136316674;
    if (v239 >= 0) {
      uint64_t v69 = __p;
    }
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1345;
    HIWORD(buf[4]) = 2048;
    *(double *)&buf[5] = v8;
    LOWORD(buf[7]) = 2048;
    *(double *)((char *)&buf[7] + 2) = v10;
    HIWORD(buf[9]) = 2048;
    double v241 = v11;
    *(_WORD *)char v242 = 2080;
    *(void *)&v242[2] = v68;
    *(_WORD *)&v242[10] = 2080;
    char v243 = v69;
    _os_log_impl(&def_1E50E8, v67, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Volume = %f dB, Final HW Volume = %f dB, Final SW Volume = %f dB, External Volume Handler: %s on VAD '%s'.", (uint8_t *)buf, 0x44u);
    if (v239 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v70 = sub_32A48(18);
  uint64_t v71 = sub_32A48(38);
  char v72 = 0;
  uint64_t v73 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v74 = *(void *)(v70 + 8);
  while (1)
  {
    uint64_t v75 = (int)buf[v73];
    char v76 = v72;
    if (((v74 & v75) != 0) != ((*(void *)(v71 + 8) & v75) != 0)) {
      break;
    }
    char v72 = 1;
    uint64_t v73 = 1;
    if (v76) {
      goto LABEL_99;
    }
  }
  if ((v74 & v75) == 0) {
    uint64_t v70 = v71;
  }
LABEL_99:
  BOOL v77 = *(NSObject **)v70;
  if (v77 && os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 96) + 128))(__p);
    buf[0] = 136315650;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1348;
    HIWORD(buf[4]) = 2112;
    *(void **)&buf[5] = __p[0];
    _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     PhysicalDevice UID = \"%@\"", (uint8_t *)buf, 0x1Cu);
    sub_72924((uint64_t)__p);
  }
  uint64_t v78 = sub_32A48(18);
  uint64_t v79 = sub_32A48(38);
  char v80 = 0;
  uint64_t v81 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v82 = *(void *)(v78 + 8);
  while (1)
  {
    uint64_t v83 = (int)buf[v81];
    char v84 = v80;
    if (((v82 & v83) != 0) != ((*(void *)(v79 + 8) & v83) != 0)) {
      break;
    }
    char v80 = 1;
    uint64_t v81 = 1;
    if (v84) {
      goto LABEL_108;
    }
  }
  if ((v82 & v83) == 0) {
    uint64_t v78 = v79;
  }
LABEL_108:
  char v85 = *(NSObject **)v78;
  if (v85 && os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v86 = *(_DWORD *)(a1 + 128);
    sub_2417C(__p, v86);
    unsigned int v87 = v239 >= 0 ? __p : (void **)__p[0];
    buf[0] = 136315906;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1350;
    HIWORD(buf[4]) = 1024;
    buf[5] = v86;
    LOWORD(buf[6]) = 2080;
    *(void *)((char *)&buf[6] + 2) = v87;
    _os_log_impl(&def_1E50E8, v85, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Scope = %u (\"%s\")", (uint8_t *)buf, 0x22u);
    if (v239 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v88 = sub_32A48(18);
  uint64_t v89 = sub_32A48(38);
  char v90 = 0;
  uint64_t v91 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v92 = *(void *)(v88 + 8);
  while (1)
  {
    uint64_t v93 = (int)buf[v91];
    char v94 = v90;
    if (((v92 & v93) != 0) != ((*(void *)(v89 + 8) & v93) != 0)) {
      break;
    }
    char v90 = 1;
    uint64_t v91 = 1;
    if (v94) {
      goto LABEL_121;
    }
  }
  if ((v92 & v93) == 0) {
    uint64_t v88 = v89;
  }
LABEL_121:
  float64x2_t v95 = *(NSObject **)v88;
  if (v95 && os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v96 = *(_DWORD *)(a1 + 132);
    sub_2417C(__p, v96);
    uint64_t v97 = v239 >= 0 ? __p : (void **)__p[0];
    buf[0] = 136315906;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1352;
    HIWORD(buf[4]) = 1024;
    buf[5] = v96;
    LOWORD(buf[6]) = 2080;
    *(void *)((char *)&buf[6] + 2) = v97;
    _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     Element = %u (\"%s\")", (uint8_t *)buf, 0x22u);
    if (v239 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v98 = sub_32A48(18);
  uint64_t v99 = sub_32A48(38);
  char v100 = 0;
  uint64_t v101 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v102 = *(void *)(v98 + 8);
  while (1)
  {
    uint64_t v103 = (int)buf[v101];
    char v104 = v100;
    if (((v102 & v103) != 0) != ((*(void *)(v99 + 8) & v103) != 0)) {
      break;
    }
    char v100 = 1;
    uint64_t v101 = 1;
    if (v104) {
      goto LABEL_134;
    }
  }
  if ((v102 & v103) == 0) {
    uint64_t v98 = v99;
  }
LABEL_134:
  __int16 v105 = *(NSObject **)v98;
  if (v105 && os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
  {
    int v106 = *(_DWORD *)(a1 + 264);
    buf[0] = 136315650;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1354;
    HIWORD(buf[4]) = 1024;
    buf[5] = v106;
    _os_log_impl(&def_1E50E8, v105, OS_LOG_TYPE_DEFAULT, "%25s:%-5d     VolumeMode = %u", (uint8_t *)buf, 0x18u);
  }
  if (!*(_DWORD *)(a1 + 264))
  {
    uint64_t v120 = sub_32A48(18);
    uint64_t v121 = sub_32A48(38);
    char v122 = 0;
    uint64_t v123 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v124 = *(void *)(v120 + 8);
    while (1)
    {
      uint64_t v125 = (int)buf[v123];
      char v126 = v122;
      if (((v124 & v125) != 0) != ((*(void *)(v121 + 8) & v125) != 0)) {
        break;
      }
      char v122 = 1;
      uint64_t v123 = 1;
      if (v126) {
        goto LABEL_186;
      }
    }
    if ((v124 & v125) == 0) {
      uint64_t v120 = v121;
    }
LABEL_186:
    char v150 = *(NSObject **)v120;
    if (v150 && os_log_type_enabled(v150, OS_LOG_TYPE_DEBUG))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1356;
      _os_log_impl(&def_1E50E8, v150, OS_LOG_TYPE_DEBUG, "%25s:%-5d     SW Volume: disabled", (uint8_t *)buf, 0x12u);
    }
  }
  unsigned __int16 v107 = sub_1F85E0(a1, v8);
  float v236 = v10;
  if (!*(unsigned char *)(a1 + 311)) {
    goto LABEL_239;
  }
  uint64_t v108 = *(void *)(a1 + 96);
  strcpy((char *)buf, "newsbolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  uint64_t v109 = sub_99A40(v108);
  *((void *)&v111 + 1) = v110;
  *(void *)&long long v111 = v109;
  BOOL v112 = ((v111 >> 32) & 0xFF00000000) == 0 || HIDWORD(v109) == 0;
  if (v112 || *(_DWORD *)(a1 + 264) != 1 || (sub_165200() & 1) != 0)
  {
    uint64_t v113 = sub_32A48(18);
    uint64_t v114 = sub_32A48(38);
    char v115 = 0;
    uint64_t v116 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v117 = *(void *)(v113 + 8);
    while (1)
    {
      uint64_t v118 = (int)buf[v116];
      char v119 = v115;
      if (((v117 & v118) != 0) != ((*(void *)(v114 + 8) & v118) != 0)) {
        break;
      }
      char v115 = 1;
      uint64_t v116 = 1;
      if (v119) {
        goto LABEL_155;
      }
    }
    if ((v117 & v118) == 0) {
      uint64_t v113 = v114;
    }
LABEL_155:
    double v127 = *(NSObject **)v113;
    if (v127 && os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
    {
      double v128 = *(float *)(a1 + 300);
      buf[0] = 136315650;
      *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1216;
      HIWORD(buf[4]) = 2048;
      *(double *)&buf[5] = v128;
      _os_log_impl(&def_1E50E8, v127, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Hardware volume is %f dB", (uint8_t *)buf, 0x1Cu);
    }
    *(float *)(a1 + 300) = v10;
    float v129 = sub_1FE630(*(void *)(a1 + 96));
    if (!*(unsigned char *)(a1 + 312) || v129 != *(float *)(a1 + 300))
    {
      uint64_t v130 = sub_32A48(18);
      uint64_t v131 = sub_32A48(38);
      char v132 = 0;
      uint64_t v133 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v134 = *(void *)(v130 + 8);
      while (1)
      {
        uint64_t v135 = (int)buf[v133];
        char v136 = v132;
        if (((v134 & v135) != 0) != ((*(void *)(v131 + 8) & v135) != 0)) {
          break;
        }
        char v132 = 1;
        uint64_t v133 = 1;
        if (v136) {
          goto LABEL_166;
        }
      }
      if ((v134 & v135) == 0) {
        uint64_t v130 = v131;
      }
LABEL_166:
      char v137 = *(NSObject **)v130;
      if (v137 && os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
      {
        double v138 = *(float *)(a1 + 300);
        buf[0] = 136315650;
        *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 1224;
        HIWORD(buf[4]) = 2048;
        *(double *)&buf[5] = v138;
        _os_log_impl(&def_1E50E8, v137, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting hardware volume to %f dB", (uint8_t *)buf, 0x1Cu);
      }
      if (v129 <= v10)
      {
        int v139 = *(std::__shared_weak_count **)(a1 + 288);
        if (v139)
        {
          char v140 = std::__shared_weak_count::lock(v139);
          if (v140)
          {
            int v141 = v140;
            uint64_t v142 = *(void *)(a1 + 280);
            if (v142) {
              (*(void (**)(uint64_t, float, float))(*(void *)v142 + 24))(v142, v10, *(float *)(a1 + 296));
            }
            sub_4636C(v141);
          }
        }
      }
      uint64_t v143 = *(void *)(a1 + 96);
      buf[0] = 1987013732;
      *(void *)&buf[1] = *(void *)(a1 + 128);
      (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, float *))(*(void *)v143 + 48))(v143, buf, 0, 0, 4, &v236);
      double v145 = *(double *)(a1 + 280);
      char v144 = *(std::__shared_weak_count **)(a1 + 288);
      if (v144) {
        atomic_fetch_add_explicit(&v144->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int v146 = *(_DWORD *)(a1 + 296);
      dispatch_time_t v147 = dispatch_time(0, 0);
      char v148 = sub_13910();
      *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
      *(void *)&AudioObjectPropertyAddress buf[2] = 1174405120;
      *(void *)&uint8_t buf[4] = sub_1FE6D0;
      *(void *)&buf[6] = &unk_6270D0;
      *(void *)&buf[8] = a1;
      double v241 = v145;
      *(void *)char v242 = v144;
      if (v144) {
        atomic_fetch_add_explicit(&v144->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      *(float *)&v242[8] = v236;
      LODWORD(v243) = v146;
      dispatch_after(v147, v148, buf);
      if (*(void *)v242) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v242);
      }
      if (v144) {
        std::__shared_weak_count::__release_weak(v144);
      }
      int v149 = 1;
LABEL_240:
      if ((a2 & 0xFFFFFFFD) != 0)
      {
LABEL_241:
        int v196 = 1;
        goto LABEL_245;
      }
      CFTypeRef v197 = *(void (**)(void, float))(a1 + 320);
      if (v197)
      {
        v197(*(void *)(a1 + 328), *(float *)(a1 + 296));
LABEL_244:
        int v196 = 0;
LABEL_245:
        uint64_t v199 = *(void *)(a1 + 344);
        uint64_t v198 = *(void *)(a1 + 352);
        if (v198)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v198 + 16), 1uLL, memory_order_relaxed);
          if (!*(_DWORD *)(a1 + 384)) {
            int v196 = 1;
          }
          if ((v196 | v149) == 1)
          {
            uint64_t v200 = *(void *)(a1 + 128);
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v198 + 16), 1uLL, memory_order_relaxed);
            uint64_t v202 = v198;
            goto LABEL_257;
          }
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v198 + 16), 1uLL, memory_order_relaxed);
          uint64_t v201 = v198;
        }
        else
        {
          if (!*(_DWORD *)(a1 + 384)) {
            int v196 = 1;
          }
          if ((v196 | v149) == 1)
          {
            uint64_t v202 = 0;
            uint64_t v200 = *(void *)(a1 + 128);
LABEL_257:
            buf[0] = 1986817377;
            *(void *)&buf[1] = v200;
            sub_35BB58(v199, v202);
          }
          uint64_t v201 = 0;
        }
        buf[0] = 1987013732;
        *(void *)&buf[1] = *(void *)(a1 + 128);
        sub_35BB58(v199, v201);
      }
      if (!*(_DWORD *)(a1 + 264)) {
        goto LABEL_241;
      }
      CFTypeRef v203 = *(std::__shared_weak_count **)(a1 + 288);
      if (!v203) {
        goto LABEL_241;
      }
      char v204 = std::__shared_weak_count::lock(v203);
      if (!v204) {
        goto LABEL_241;
      }
      char v205 = v204;
      uint64_t v206 = *(void *)(a1 + 280);
      if (!v206)
      {
LABEL_278:
        sub_4636C(v205);
        goto LABEL_241;
      }
      int v207 = (*(uint64_t (**)(void))(*(void *)v206 + 136))(*(void *)(a1 + 280));
      int v208 = v207;
      if (v107 < 0x100u)
      {
        float v211 = v11;
        if (v207 != 1935895666)
        {
LABEL_267:
          if (v211 != *(float *)(a1 + 304) || !*(unsigned char *)(a1 + 308))
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v206 + 168))(v206))
            {
              uint64_t v212 = sub_32A48(18);
              uint64_t v213 = sub_32A48(38);
              char v214 = 0;
              uint64_t v215 = 0;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002;
              uint64_t v216 = *(void *)(v212 + 8);
              while (1)
              {
                uint64_t v217 = (int)buf[v215];
                char v218 = v214;
                if (((v216 & v217) != 0) != ((*(void *)(v213 + 8) & v217) != 0)) {
                  break;
                }
                char v214 = 1;
                uint64_t v215 = 1;
                if (v218) {
                  goto LABEL_281;
                }
              }
              if ((v216 & v217) == 0) {
                uint64_t v212 = v213;
              }
LABEL_281:
              CFTypeRef v226 = *(NSObject **)v212;
              if (v226 && os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
              {
                sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
                char v227 = "dB";
                *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
                LOWORD(buf[3]) = 1024;
                buf[0] = 136316418;
                if (v208 == 1935895666) {
                  char v227 = "scalar";
                }
                *(_DWORD *)((char *)&buf[3] + 2) = 1304;
                HIWORD(buf[4]) = 2048;
                if (v239 >= 0) {
                  char v228 = __p;
                }
                else {
                  char v228 = (void **)__p[0];
                }
                *(double *)&buf[5] = v211;
                LOWORD(buf[7]) = 2080;
                *(void *)((char *)&buf[7] + 2) = v227;
                HIWORD(buf[9]) = 2048;
                double v241 = v11;
                *(_WORD *)char v242 = 2080;
                *(void *)&v242[2] = v228;
                _os_log_impl(&def_1E50E8, v226, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Aggregate software volume commands present:    SW Volume: %f %s\t; DB Volume %f dB on VAD '%s'.",
                  (uint8_t *)buf,
                  0x3Au);
                if (v239 < 0) {
                  operator delete(__p[0]);
                }
              }
              float v229 = sub_7953C(a1 + 168, v11);
              (*(void (**)(uint64_t, float, float))(*(void *)v206 + 192))(v206, v11, v229);
            }
            else
            {
              uint64_t v219 = sub_32A48(18);
              uint64_t v220 = sub_32A48(38);
              char v221 = 0;
              uint64_t v222 = 0;
              *(void *)AudioObjectPropertyAddress buf = 0x100000002;
              uint64_t v223 = *(void *)(v219 + 8);
              while (1)
              {
                uint64_t v224 = (int)buf[v222];
                char v225 = v221;
                if (((v223 & v224) != 0) != ((*(void *)(v220 + 8) & v224) != 0)) {
                  break;
                }
                char v221 = 1;
                uint64_t v222 = 1;
                if (v225) {
                  goto LABEL_293;
                }
              }
              if ((v223 & v224) == 0) {
                uint64_t v219 = v220;
              }
LABEL_293:
              CFTypeRef v230 = *(NSObject **)v219;
              if (v230 && os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT))
              {
                sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
                CFTypeRef v231 = "dB";
                *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
                buf[0] = 136316162;
                if (v208 == 1935895666) {
                  CFTypeRef v231 = "scalar";
                }
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 1313;
                HIWORD(buf[4]) = 2048;
                if (v239 >= 0) {
                  *(double *)&char v232 = COERCE_DOUBLE(__p);
                }
                else {
                  char v232 = (void **)__p[0];
                }
                *(double *)&buf[5] = v211;
                LOWORD(buf[7]) = 2080;
                *(void *)((char *)&buf[7] + 2) = v231;
                HIWORD(buf[9]) = 2080;
                double v241 = *(double *)&v232;
                _os_log_impl(&def_1E50E8, v230, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software volume command present:    SW Volume: %f %s on VAD '%s'.", (uint8_t *)buf, 0x30u);
                if (v239 < 0) {
                  operator delete(__p[0]);
                }
              }
              (*(void (**)(uint64_t, float))(*(void *)v206 + 16))(v206, v211);
            }
            *(float *)(a1 + 304) = v211;
            *(unsigned char *)(a1 + 308) = 1;
            sub_4636C(v205);
            goto LABEL_244;
          }
          goto LABEL_278;
        }
        float v210 = sub_7953C(a1 + 168, v11);
      }
      else
      {
        uint64_t v209 = (*(uint64_t (**)(uint64_t))(*(void *)v206 + 136))(v206);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v206 + 128))(v206, v209);
      }
      float v211 = v210;
      goto LABEL_267;
    }
LABEL_239:
    int v149 = 0;
    goto LABEL_240;
  }
  uint64_t v151 = sub_32A48(18);
  uint64_t v152 = sub_32A48(38);
  char v153 = 0;
  uint64_t v154 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v155 = *(void *)(v151 + 8);
  while (1)
  {
    uint64_t v156 = (int)buf[v154];
    char v157 = v153;
    if (((v155 & v156) != 0) != ((*(void *)(v152 + 8) & v156) != 0)) {
      break;
    }
    char v153 = 1;
    uint64_t v154 = 1;
    if (v157) {
      goto LABEL_195;
    }
  }
  if ((v155 & v156) == 0) {
    uint64_t v151 = v152;
  }
LABEL_195:
  char v158 = *(NSObject **)v151;
  if (v158 && os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1090;
    _os_log_impl(&def_1E50E8, v158, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software Volume Mode Enabled!", (uint8_t *)buf, 0x12u);
  }
  char v159 = *(std::__shared_weak_count **)(a1 + 288);
  if (v159)
  {
    char v160 = std::__shared_weak_count::lock(v159);
    if (v160)
    {
      CFTypeRef v161 = v160;
      uint64_t v162 = *(void *)(a1 + 280);
      if (v162)
      {
        float v163 = (*(float (**)(uint64_t, float))(*(void *)v162 + 56))(v162, v11);
        sub_4636C(v161);
LABEL_212:
        uint64_t v172 = *(void *)(a1 + 96);
        *(float *)std::string __p = v163 + v11;
        buf[0] = 1987013732;
        *(void *)&buf[1] = *(void *)(a1 + 128);
        if (sub_FE8A8(v172))
        {
          uint64_t v173 = sub_32A48(18);
          uint64_t v174 = sub_32A48(38);
          char v175 = 0;
          uint64_t v176 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v177 = *(void *)(v173 + 8);
          while (1)
          {
            uint64_t v178 = (int)buf[v176];
            char v179 = v175;
            if (((v177 & v178) != 0) != ((*(void *)(v174 + 8) & v178) != 0)) {
              break;
            }
            char v175 = 1;
            uint64_t v176 = 1;
            if (v179) {
              goto LABEL_219;
            }
          }
          if ((v177 & v178) == 0) {
            uint64_t v173 = v174;
          }
LABEL_219:
          int v180 = *(NSObject **)v173;
          if (v180 && os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
          {
            sub_2417C(__p, 0x766F6C64u);
            int v181 = v239;
            CFTypeRef v182 = (void **)__p[0];
            (*(void (**)(void *__return_ptr))(**(void **)(a1 + 96) + 128))(v237);
            int v183 = __p;
            if (v181 < 0) {
              int v183 = v182;
            }
            buf[0] = 136316162;
            *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1105;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v183;
            LOWORD(buf[7]) = 2048;
            *(double *)((char *)&buf[7] + 2) = v10;
            HIWORD(buf[9]) = 2112;
            double v241 = *(double *)v237;
            _os_log_impl(&def_1E50E8, v180, OS_LOG_TYPE_ERROR, "%25s:%-5d Setting volume %s, %f failed for %@", (uint8_t *)buf, 0x30u);
            sub_72924((uint64_t)v237);
            if (v239 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        uint64_t v184 = sub_32A48(18);
        uint64_t v185 = sub_32A48(38);
        char v186 = 0;
        uint64_t v187 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v188 = *(void *)(v184 + 8);
        while (1)
        {
          uint64_t v189 = (int)buf[v187];
          char v190 = v186;
          if (((v188 & v189) != 0) != ((*(void *)(v185 + 8) & v189) != 0)) {
            break;
          }
          char v186 = 1;
          uint64_t v187 = 1;
          if (v190) {
            goto LABEL_231;
          }
        }
        if ((v188 & v189) == 0) {
          uint64_t v184 = v185;
        }
LABEL_231:
        int v191 = *(NSObject **)v184;
        if (v191 && os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
        {
          buf[0] = 136315906;
          *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1109;
          HIWORD(buf[4]) = 2048;
          *(double *)&buf[5] = v11;
          LOWORD(buf[7]) = 2048;
          *(double *)((char *)&buf[7] + 2) = v163;
          _os_log_impl(&def_1E50E8, v191, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Hardware device is in software volume mode. sending volume level %f dB and VolumeLimitAttenuation %f dB", (uint8_t *)buf, 0x26u);
        }
        CFTypeRef v192 = *(std::__shared_weak_count **)(a1 + 288);
        if (v192)
        {
          CFTypeRef v193 = std::__shared_weak_count::lock(v192);
          if (v193)
          {
            char v194 = v193;
            uint64_t v195 = *(void *)(a1 + 280);
            if (v195) {
              (*(void (**)(uint64_t, double, float))(*(void *)v195 + 24))(v195, 0.0, *(float *)(a1 + 296));
            }
            sub_4636C(v194);
          }
        }
        goto LABEL_239;
      }
      sub_4636C(v161);
    }
  }
  uint64_t v164 = sub_32A48(18);
  uint64_t v165 = sub_32A48(38);
  char v166 = 0;
  uint64_t v167 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v168 = *(void *)(v164 + 8);
  while (1)
  {
    uint64_t v169 = (int)buf[v167];
    char v170 = v166;
    if (((v168 & v169) != 0) != ((*(void *)(v165 + 8) & v169) != 0)) {
      break;
    }
    char v166 = 1;
    uint64_t v167 = 1;
    if (v170) {
      goto LABEL_209;
    }
  }
  if ((v168 & v169) == 0) {
    uint64_t v164 = v165;
  }
LABEL_209:
  char v171 = *(NSObject **)v164;
  float v163 = 0.0;
  if (v171 && os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "OutputVolumeControl_HAL_Common.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1096;
    _os_log_impl(&def_1E50E8, v171, OS_LOG_TYPE_ERROR, "%25s:%-5d SoftwareVolumeCommand pointer expired!", (uint8_t *)buf, 0x12u);
  }
  goto LABEL_212;
}

void sub_1FDE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_4636C(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_1FDEE0(int a1, unsigned int *a2)
{
  if (!a2)
  {
    BOOL v6 = (os_log_t *)sub_32A48(13);
    float v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      float v10 = "StandardUtilities.h";
      __int16 v11 = 1024;
      int v12 = 148;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a1 != 4)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        float v10 = "StandardUtilities.h";
        __int16 v11 = 1024;
        int v12 = 149;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"sizeof(T) == inDataSize\"", (uint8_t *)&v9, 0x12u);
      }
    }
  }
  return *a2;
}

void sub_1FE058(_Unwind_Exception *exception_object)
{
}

CFDictionaryRef sub_1FE074(const __CFDictionary *result, const void *a2)
{
  if (result) {
    return (const __CFDictionary *)(CFDictionaryContainsKey(result, a2) != 0);
  }
  return result;
}

uint64_t sub_1FE09C(uint64_t result, CFDictionaryRef theDict, void *key)
{
  *(void *)BOOL result = &off_637B18;
  *(void *)(result + 8) = 0;
  if (theDict)
  {
    uint64_t v3 = result;
    value = 0;
    BOOL result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if (result)
    {
      CFTypeID v4 = value ? CFGetTypeID(value) : 0;
      BOOL result = CFNumberGetTypeID();
      if (v4 == result)
      {
        uint64_t v5 = value;
        if (value)
        {
          CFRetain(value);
          uint64_t v6 = v3;
          uint64_t v7 = (uint64_t)v5;
        }
        else
        {
          uint64_t v6 = v3;
          uint64_t v7 = 0;
        }
        return sub_89E18(v6, v7);
      }
    }
  }
  return result;
}

double sub_1FE15C(const __CFNumber *a1)
{
  int valuePtr = 0;
  if (!a1) {
    return 0.0;
  }
  CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
  LODWORD(result) = valuePtr;
  return result;
}

void sub_1FE19C(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(41);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    sub_2417C(__p, 0x726D7073u);
    CFTypeID v4 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    float v10 = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v11 = 1024;
    int v12 = 1803;
    __int16 v13 = 2080;
    double v14 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::NotifyVolumeRampStateListeners() - notifying listeners that %s has changed.", buf, 0x1Cu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = *(void *)(a1 + 344);
  uint64_t v5 = *(void *)(a1 + 352);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64CF60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64CF60))
  {
    qword_64CF50 = 0x6F757470726D7073;
    dword_64CF58 = 0;
    __cxa_guard_release(&qword_64CF60);
  }
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  sub_35BB58(v6, v5);
}

void sub_1FE338(_Unwind_Exception *exception_object)
{
}

void sub_1FE360(uint64_t a1, unsigned __int8 *a2, float *a3)
{
  int v3 = *a2;
  float v4 = *a3;
  uint64_t v5 = *(void *)(a1 + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)(v5 + 400));
  uint64_t v6 = (os_log_t *)sub_32A48(41);
  uint64_t v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    char v8 = "not ramping";
    int v9 = 136315906;
    float v10 = "OutputVolumeControl_HAL_Common.cpp";
    if (v3) {
      char v8 = "ramping";
    }
    __int16 v11 = 1024;
    int v12 = 1728;
    __int16 v13 = 2080;
    double v14 = v8;
    __int16 v15 = 2048;
    double v16 = v4;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::BeginSoftwareVolumeRamp() - listener called with state %s position %.2f.", (uint8_t *)&v9, 0x26u);
  }
  *(float *)(v5 + 296) = v4;
  sub_1FC35C(v5, 1);
}

void sub_1FE584(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1FE5AC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_627188;
  a2[1] = v2;
  return result;
}

void *sub_1FE5D0(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_627188;
  result[1] = v3;
  return result;
}

void sub_1FE618()
{
}

float sub_1FE630(uint64_t a1)
{
  uint64_t v1 = sub_99A40(a1);
  if (v1 || !v2)
  {
    int v4 = v1;
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v4;
  }
  return *((float *)&v1 + 1);
}

uint64_t sub_1FE6D0(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = sub_298DA4();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 304))(v3);
  if (result)
  {
    sub_4F64((uint64_t)v6, (os_unfair_lock_t)(*(void *)(v2 + 96) + 8));
    uint64_t v5 = (std::__shared_weak_count *)a1[6];
    uint64_t v7 = a1[5];
    char v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = a1[7];
    operator new();
  }
  return result;
}

void sub_1FE924(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_4F750(v26);
  sub_4F750((void *)(v27 - 72));
  sub_A9F48((uint64_t)&a15);
  if (a26 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1FE9C8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_1FE9D8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1FE9F4()
{
  return std::operator+<char>();
}

BOOL sub_1FEA04@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2) {
    sub_56964();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);

  return sub_12053C(a2, 1920099684);
}

void sub_1FEA70(uint64_t a1)
{
  *(void *)a1 = off_627158;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_4F750((void *)(a1 + 16));

  operator delete();
}

uint64_t sub_1FEAE8(uint64_t a1)
{
  *(void *)a1 = off_627158;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  sub_4F750((void *)(a1 + 16));
  return a1;
}

void sub_1FEB40(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        uint64_t v6 = (os_log_t *)sub_32A48(38);
        uint64_t v7 = *v6;
        if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v8 = a1 + 8;
          double v9 = *(float *)(a1 + 48);
          if (*(char *)(a1 + 31) < 0) {
            uint64_t v8 = *(void *)(a1 + 8);
          }
          int v10 = 136316162;
          __int16 v11 = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v12 = 1024;
          int v13 = 1258;
          __int16 v14 = 2048;
          double v15 = v9;
          __int16 v16 = 2048;
          uint64_t v17 = v5;
          __int16 v18 = 2080;
          uint64_t v19 = v8;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d PlaybackDosimetry: setting hardware read only volume %.2fdB, %p on VAD '%s'.", (uint8_t *)&v10, 0x30u);
        }
        (*(void (**)(uint64_t, float, float))(*(void *)v5 + 24))(v5, *(float *)(a1 + 48), *(float *)(a1 + 52));
      }
      sub_4636C(v4);
    }
  }
}

void sub_1FEC94(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_1FECAC(void *a1)
{
  sub_A99F8((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1FECE8(uint64_t a1)
{
}

void *sub_1FECF0(uint64_t a1, void *a2)
{
  *a2 = off_627110;
  return sub_1FED1C(a2 + 1, (long long *)(a1 + 8));
}

void *sub_1FED1C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_21E8C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::__fs::filesystem::path __dst = v4;
  }
  uint64_t v5 = *((void *)a2 + 4);
  __dst[3] = *((void *)a2 + 3);
  __dst[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  __dst[5] = *((void *)a2 + 5);
  return __dst;
}

void *sub_1FED8C(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = off_627110;
  sub_1FED1C(v2 + 1, v1);
  return v2;
}

void sub_1FEDE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1FEDF4(uint64_t a1)
{
  *(void *)a1 = off_627110;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

uint64_t sub_1FEE70(uint64_t a1)
{
  *(void *)a1 = off_627110;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1FEECC(uint64_t a1, int *a2, uint64_t a3, double *a4, int *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    unsigned int v87 = (os_log_t *)sub_32A48(13);
    uint64_t v88 = *v87;
    if (*v87 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v111 = 1024;
      int v112 = 417;
      _os_log_impl(&def_1E50E8, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, double *))(*(void *)a1 + 32))(a1, a2, a3, a4) > *a5)
  {
    char v90 = (os_log_t *)sub_32A48(13);
    uint64_t v91 = *v90;
    if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v111 = 1024;
      int v112 = 418;
      _os_log_impl(&def_1E50E8, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"Data size insufficient.\"", buf, 0x12u);
    }
    uint64_t v92 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v92 = &off_6414D8;
    v92[2] = 561211770;
  }
  int v13 = *a2;
  if (*a2 > 1936878959)
  {
    if (v13 <= 1986229103)
    {
      if (v13 > 1986098019)
      {
        if (v13 == 1986098020) {
          goto LABEL_51;
        }
        if (v13 == 1986225518)
        {
          *a6 = *(float *)(a1 + 384);
          *a5 = 4;
          return;
        }
        goto LABEL_95;
      }
      if (v13 == 1936878960)
      {
        double v46 = (os_log_t *)sub_32A48(41);
        int v47 = *v46;
        if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, 0x73726D70u);
          if (v109 >= 0) {
            *(double *)&double v48 = COERCE_DOUBLE(__p);
          }
          else {
            double v48 = (void **)__p[0];
          }
          unint64_t v49 = *(unsigned char *)(a1 + 469) ? "" : "un";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
          __int16 v111 = 1024;
          int v112 = 579;
          __int16 v113 = 2080;
          double v114 = *(double *)&v48;
          __int16 v115 = 2080;
          *(void *)uint64_t v116 = v49;
          _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::GetPropertyData() - %s volume ramping is %ssupported.", buf, 0x26u);
          if (v109 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_9EC7C(*(unsigned __int8 *)(a1 + 469), a5, a6);
        return;
      }
      if (v13 != 1983013986) {
        goto LABEL_95;
      }
      uint64_t v19 = *(std::__shared_weak_count **)(a1 + 288);
      if (v19)
      {
        int v20 = std::__shared_weak_count::lock(v19);
        if (v20)
        {
          uint64_t v21 = v20;
          uint64_t v22 = *(void *)(a1 + 280);
          if (v22 && (*(unsigned int (**)(void))(*(void *)v22 + 272))(*(void *)(a1 + 280)))
          {
            float v23 = (os_log_t *)sub_32A48(18);
            uint64_t v24 = *v23;
            if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_INFO))
            {
              double v25 = *a6;
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
              __int16 v111 = 1024;
              int v112 = 441;
              __int16 v113 = 2048;
              double v114 = v25;
              _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_INFO, "%25s:%-5d Request to convert %f scalar to dB.", buf, 0x1Cu);
            }
            float v26 = (*(float (**)(uint64_t, float))(*(void *)v22 + 288))(v22, *a6);
            sub_200258(a5, a6, v26);
            goto LABEL_146;
          }
          sub_4636C(v21);
        }
      }
      sub_796B4(a1 + 216, *a6);
    }
    else
    {
      if (v13 <= 1986817376)
      {
        if (v13 == 1986229104)
        {
          if (*(_DWORD *)(a1 + 264) || *(void *)(a1 + 320))
          {
            int v51 = 1;
            goto LABEL_92;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 1986229104;
          uint64_t v81 = *(void *)(a1 + 96);
          *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
          int v82 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v81 + 16))(v81, buf);
          uint64_t v45 = *(void *)(a1 + 96);
          if (v82) {
            goto LABEL_72;
          }
          goto LABEL_102;
        }
        if (v13 == 1986290211)
        {
          int v12 = *a5;
          if (v12 != (*(unsigned int (**)(uint64_t, int *, void, void))(*(void *)a1 + 32))(a1, a2, 0, 0))
          {
            uint64_t v93 = (os_log_t *)sub_32A48(13);
            char v94 = *v93;
            if (*v93 && os_log_type_enabled(*v93, OS_LOG_TYPE_ERROR))
            {
              __int16 v105 = *(void **)a2;
              int v106 = a2[2];
              sub_16C9C4((uint64_t)__p, (unsigned int *)&v105);
              int v95 = v109;
              unsigned int v96 = (void **)__p[0];
              int v97 = *a5;
              int v98 = (*(uint64_t (**)(uint64_t, int *, void, void))(*(void *)a1 + 32))(a1, a2, 0, 0);
              *(double *)&uint64_t v99 = COERCE_DOUBLE(__p);
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
              if (v95 < 0) {
                uint64_t v99 = v96;
              }
              __int16 v111 = 1024;
              int v112 = 429;
              __int16 v113 = 2080;
              double v114 = *(double *)&v99;
              __int16 v115 = 1024;
              *(_DWORD *)uint64_t v116 = v97;
              *(_WORD *)&v116[4] = 1024;
              *(_DWORD *)&v116[6] = v98;
              _os_log_impl(&def_1E50E8, v94, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                buf,
                0x28u);
              if (v109 < 0) {
                operator delete(__p[0]);
              }
            }
            char v100 = __cxa_allocate_exception(0x10uLL);
            *(void *)char v100 = &off_6414D8;
            v100[2] = 561211770;
          }
          if (*(void *)(a1 + 192)) {
            double v42 = *(float *)(*(void *)(a1 + 176) + 36);
          }
          else {
            double v42 = 0.0;
          }
          *(double *)a6 = v42;
          double v65 = sub_792A4(a1 + 168);
          *((double *)a6 + 1) = *(float *)&v65;
          return;
        }
        goto LABEL_95;
      }
      if (v13 != 1986817377)
      {
        if (v13 == 2021027692) {
          goto LABEL_51;
        }
        if (v13 != 1987013741) {
          goto LABEL_95;
        }
      }
      float v18 = *(float *)(a1 + 296);
    }
LABEL_149:
    sub_200258(a5, a6, v18);
    return;
  }
  if (v13 <= 1684633186)
  {
    if (v13 <= 1668705647)
    {
      if (v13 != 1064725619)
      {
        if (v13 == 1668443504) {
          goto LABEL_51;
        }
        goto LABEL_95;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 1064725619;
      uint64_t v43 = *(void *)(a1 + 96);
      *(void *)&uint8_t buf[4] = *(void *)(a1 + 128);
      int v44 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v43 + 16))(v43, buf);
      uint64_t v45 = *(void *)(a1 + 96);
      if (v44)
      {
LABEL_72:
        (*(void (**)(uint64_t, unsigned char *, uint64_t, double *, int *, float *))(*(void *)v45 + 40))(v45, buf, a3, a4, a5, a6);
        return;
      }
LABEL_102:
      LODWORD(__p[0]) = 1987013732;
      *(void **)((char *)__p + 4) = *(void **)(a1 + 128);
      int v60 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v45 + 16))(v45, __p);
      sub_9EC7C(v60, a5, a6);
      return;
    }
    if (v13 == 1668705648)
    {
      sub_1EA32C(buf, *(void *)(a1 + 96), COERCE_DOUBLE(1735159650));
      if (buf[8])
      {
        if (!*(void *)buf)
        {
          uint64_t v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v101, "Could not construct");
        }
        BOOL v50 = CFArrayGetCount(*(CFArrayRef *)buf) != 0;
      }
      else
      {
        uint64_t v61 = *(void *)(a1 + 96);
        strcpy((char *)__p, "nartbolg");
        BYTE1(__p[1]) = 0;
        WORD1(__p[1]) = 0;
        uint64_t v62 = sub_99A40(v61);
        *((void *)&v64 + 1) = v63;
        *(void *)&long long v64 = v62;
        BOOL v50 = ((v64 >> 32) & 0xFF00000000) != 0 && HIDWORD(v62) == 1651274862;
      }
      sub_206D8((uint64_t)buf);
      sub_9EC7C(v50, a5, a6);
      return;
    }
    if (v13 == 1684157046)
    {
      uint64_t v27 = *(std::__shared_weak_count **)(a1 + 288);
      if (!v27) {
        goto LABEL_148;
      }
      uint64_t v28 = std::__shared_weak_count::lock(v27);
      if (!v28) {
        goto LABEL_148;
      }
      uint64_t v21 = v28;
      uint64_t v29 = *(uint64_t **)(a1 + 280);
      if (!v29)
      {
LABEL_147:
        sub_4636C(v21);
LABEL_148:
        float v18 = sub_7953C(a1 + 216, *a6);
        goto LABEL_149;
      }
      int v30 = (*(uint64_t (**)(void))(*v29 + 224))(*(void *)(a1 + 280));
      uint64_t v31 = *v29;
      if (v30)
      {
        (*(void (**)(uint64_t *))(v31 + 240))(v29);
        goto LABEL_147;
      }
      if (!(*(unsigned int (**)(uint64_t *))(v31 + 272))(v29)) {
        goto LABEL_147;
      }
      uint64_t v83 = (os_log_t *)sub_32A48(18);
      char v84 = *v83;
      if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_INFO))
      {
        double v85 = *a6;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        __int16 v111 = 1024;
        int v112 = 458;
        __int16 v113 = 2048;
        double v114 = v85;
        _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_INFO, "%25s:%-5d Request to convert %f dB to scalar.", buf, 0x1Cu);
      }
      float v86 = (*(float (**)(uint64_t *, float))(*v29 + 280))(v29, *a6);
      sub_200258(a5, a6, v86);
LABEL_146:
      sub_4636C(v21);
      return;
    }
LABEL_95:
    uint64_t v52 = (os_log_t *)sub_32A48(13);
    char v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v111 = 1024;
      int v112 = 616;
      _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"GetPropertyDataSize() is correct and HasProperty() returned true, but I do not know about it.\"", buf, 0x12u);
    }
    return;
  }
  if (v13 > 1836414052)
  {
    if (v13 != 1836414053)
    {
      if (v13 != 1918987632)
      {
        if (v13 == 1919774835)
        {
          std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 400));
          __int16 v14 = (os_log_t *)sub_32A48(41);
          double v15 = *v14;
          if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, 0x726D7073u);
            if (v109 >= 0) {
              *(double *)&__int16 v16 = COERCE_DOUBLE(__p);
            }
            else {
              __int16 v16 = (void **)__p[0];
            }
            if (*(unsigned char *)(a1 + 468)) {
              uint64_t v17 = "";
            }
            else {
              uint64_t v17 = "in";
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
            __int16 v111 = 1024;
            int v112 = 591;
            __int16 v113 = 2080;
            double v114 = *(double *)&v16;
            __int16 v115 = 2080;
            *(void *)uint64_t v116 = v17;
            _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d OutputVolumeControl_HAL_Common::GetPropertyData() - %s volume ramp is %sactive.", buf, 0x26u);
            if (v109 < 0) {
              operator delete(__p[0]);
            }
          }
          sub_9EC7C(*(unsigned __int8 *)(a1 + 468), a5, a6);
          std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 400));
          return;
        }
        goto LABEL_95;
      }
LABEL_51:
      *a5 = 0;
      return;
    }
    int v51 = *(unsigned __int8 *)(a1 + 309);
    goto LABEL_92;
  }
  if (v13 == 1684633187)
  {
    int v51 = 0;
LABEL_92:
    sub_9EC7C(v51, a5, a6);
    return;
  }
  if (v13 != 1685484390) {
    goto LABEL_95;
  }
  unsigned int v32 = *(_DWORD *)(a1 + 264) - 1;
  char v33 = (os_log_t *)sub_32A48(18);
  uint64_t v34 = (uint64_t)v33;
  if (v32 > 1)
  {
    uint64_t v54 = sub_32A48(38);
    char v55 = 0;
    uint64_t v56 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v57 = *(void *)(v34 + 8);
    while (1)
    {
      uint64_t v58 = *(int *)&buf[4 * v56];
      char v59 = v55;
      if (((v57 & v58) != 0) != ((*(void *)(v54 + 8) & v58) != 0)) {
        break;
      }
      char v55 = 1;
      uint64_t v56 = 1;
      if (v59) {
        goto LABEL_113;
      }
    }
    if ((v57 & v58) == 0) {
      uint64_t v34 = v54;
    }
LABEL_113:
    char v66 = *(NSObject **)v34;
    if (v66 && os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
    {
      sub_2417C(__p, *a2);
      int v67 = v109;
      AudioObjectID v68 = (void **)__p[0];
      sub_4F64((uint64_t)&v105, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
      *(double *)&uint64_t v69 = COERCE_DOUBLE(__p);
      if (v67 < 0) {
        uint64_t v69 = v68;
      }
      if (v107 >= 0) {
        uint64_t v70 = &v105;
      }
      else {
        uint64_t v70 = v105;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v111 = 1024;
      int v112 = 564;
      __int16 v113 = 2080;
      double v114 = *(double *)&v69;
      __int16 v115 = 2080;
      *(void *)uint64_t v116 = v70;
      _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_INFO, "%25s:%-5d Hardware volume mode: Forwarding property (%s) request to device on VAD '%s'.", buf, 0x26u);
      if (v107 < 0) {
        operator delete(v105);
      }
      if (v109 < 0) {
        operator delete(__p[0]);
      }
    }
    (*(void (**)(void, int *, uint64_t, double *, int *, float *))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96), a2, a3, a4, a5, a6);
  }
  else
  {
    uint64_t v35 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(__p, *a2);
      if (v109 >= 0) {
        *(double *)&uint64_t v36 = COERCE_DOUBLE(__p);
      }
      else {
        uint64_t v36 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v111 = 1024;
      int v112 = 537;
      __int16 v113 = 2080;
      double v114 = *(double *)&v36;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Software volume mode: calculating %s in-house", buf, 0x1Cu);
      if (v109 < 0) {
        operator delete(__p[0]);
      }
    }
    if (a3 != 8)
    {
      uint64_t v102 = (os_log_t *)sub_32A48(13);
      uint64_t v103 = *v102;
      if (*v102 && os_log_type_enabled(*v102, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
        __int16 v111 = 1024;
        int v112 = 538;
        _os_log_impl(&def_1E50E8, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      char v104 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v104, "Precondition failure.");
    }
    double v37 = *a4;
    float v38 = *a4;
    double v39 = sub_7953C(a1 + 168, v38);
    float v40 = *(float *)(a1 + 296);
    if (v40 <= 0.0)
    {
      double v41 = 0.0;
    }
    else
    {
      *(double *)AudioObjectPropertyAddress buf = v39 / v40;
      __p[0] = 0;
      __int16 v105 = (void *)0x3FF0000000000000;
      *(double *)a6 = *sub_200410((double *)__p, (double *)buf, (double *)&v105);
      *a5 = 8;
      double v41 = *(double *)buf;
    }
    uint64_t v71 = sub_32A48(18);
    uint64_t v72 = sub_32A48(38);
    char v73 = 0;
    uint64_t v74 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v75 = *(void *)(v71 + 8);
    while (1)
    {
      uint64_t v76 = *(int *)&buf[4 * v74];
      char v77 = v73;
      if (((v75 & v76) != 0) != ((*(void *)(v72 + 8) & v76) != 0)) {
        break;
      }
      char v73 = 1;
      uint64_t v74 = 1;
      if (v77) {
        goto LABEL_132;
      }
    }
    if ((v75 & v76) == 0) {
      uint64_t v71 = v72;
    }
LABEL_132:
    uint64_t v78 = *(NSObject **)v71;
    if (v78 && os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      float v79 = *(float *)(a1 + 296);
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(a1 + 96) + 8));
      char v80 = v109 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
      *(void *)&uint8_t buf[4] = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v111 = 1024;
      int v112 = 558;
      __int16 v113 = 2048;
      double v114 = v41;
      __int16 v115 = 2048;
      *(double *)uint64_t v116 = v37;
      *(_WORD *)&v116[8] = 2048;
      double v117 = v79;
      __int16 v118 = 2048;
      double v119 = v39;
      __int16 v120 = 2080;
      uint64_t v121 = v80;
      _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Calculated scalar factor of %f for requested DB %f and current scalar volume %f requested scalar volume %f on VAD '%s'.", buf, 0x44u);
      if (v109 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_2001BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_4636C(v18);
  _Unwind_Resume(a1);
}

void sub_200258(_DWORD *a1, float *a2, float a3)
{
  if (!a2)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    double v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "StandardUtilities.h";
      __int16 v13 = 1024;
      int v14 = 157;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*a1 <= 3u)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        int v12 = "StandardUtilities.h";
        __int16 v13 = 1024;
        int v14 = 158;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"sizeof(T) <= ioDataSize\"", (uint8_t *)&v11, 0x12u);
      }
    }
  }
  *a1 = 4;
  *a2 = a3;
}

void sub_2003F4(_Unwind_Exception *exception_object)
{
}

double *sub_200410(double *result, double *a2, double *a3)
{
  if (*a3 < *result)
  {
    long long v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "StandardUtilities.h";
      __int16 v9 = 1024;
      int v10 = 258;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"clamp() requires that maxVal >= minVal.\"", (uint8_t *)&v7, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "clamp() requires that maxVal >= minVal.");
  }
  if (*a2 < *a3) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = a3;
  }
  if (*a2 > *result) {
    return v3;
  }
  return result;
}

void sub_20052C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_200548(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      double v15 = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v16 = 1024;
      int v17 = 358;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v14, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v3 = *a2;
  uint64_t result = 4;
  if (*a2 > 1936878959)
  {
    if (v3 > 1986229103)
    {
      if (v3 <= 1986817376)
      {
        if (v3 == 1986229104) {
          return result;
        }
        int v6 = 1986290211;
      }
      else
      {
        if (v3 == 1986817377 || v3 == 1987013741) {
          return result;
        }
        int v6 = 2021027692;
      }
      if (v3 == v6) {
        return 16;
      }
      goto LABEL_34;
    }
    if (v3 > 1986098019)
    {
      if (v3 == 1986098020) {
        return 8;
      }
      int v5 = 1986225518;
    }
    else
    {
      if (v3 == 1936878960) {
        return result;
      }
      int v5 = 1983013986;
    }
LABEL_33:
    if (v3 == v5) {
      return result;
    }
    goto LABEL_34;
  }
  if (v3 <= 1684633186)
  {
    if (v3 <= 1668705647)
    {
      if (v3 == 1064725619) {
        return result;
      }
      if (v3 == 1668443504) {
        return 2;
      }
      goto LABEL_34;
    }
    if (v3 == 1668705648) {
      return result;
    }
    int v5 = 1684157046;
    goto LABEL_33;
  }
  if (v3 > 1836414052)
  {
    if (v3 == 1836414053) {
      return result;
    }
    if (v3 == 1918987632) {
      return 24;
    }
    int v5 = 1919774835;
    goto LABEL_33;
  }
  if (v3 == 1684633187) {
    return result;
  }
  if (v3 == 1685484390)
  {
    int v7 = (os_log_t *)sub_32A48(18);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = 136315394;
        double v15 = "OutputVolumeControl_HAL_Common.cpp";
        __int16 v16 = 1024;
        int v17 = 398;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Getting scalar factor property size", (uint8_t *)&v14, 0x12u);
      }
    }
    return 8;
  }
LABEL_34:
  __int16 v9 = (os_log_t *)sub_32A48(13);
  int v10 = *v9;
  if (!*v9) {
    return 0;
  }
  uint64_t result = os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v14 = 136315394;
    double v15 = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v16 = 1024;
    int v17 = 407;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty() returned true, but I do not know about it.\"", (uint8_t *)&v14, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_200904(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      double v15 = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v16 = 1024;
      int v17 = 305;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported selector, scope, or element\"", (uint8_t *)&v14, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v4 = *a2;
  uint64_t result = 1;
  if (*a2 > 1936878959)
  {
    if (v4 <= 1986229103)
    {
      if (v4 > 1986098019)
      {
        if (v4 == 1986098020) {
          return result;
        }
        int v6 = 1986225518;
      }
      else
      {
        if (v4 == 1936878960) {
          return 0;
        }
        int v6 = 1983013986;
      }
    }
    else
    {
      if (v4 > 1986817376)
      {
        if (v4 == 1986817377 || v4 == 1987013741) {
          return result;
        }
        int v7 = 2021027692;
LABEL_16:
        if (v4 == v7) {
          return result;
        }
        goto LABEL_36;
      }
      if (v4 == 1986229104) {
        return 0;
      }
      int v6 = 1986290211;
    }
LABEL_33:
    if (v4 == v6) {
      return 0;
    }
    goto LABEL_36;
  }
  if (v4 <= 1684633186)
  {
    if (v4 <= 1668705647)
    {
      if (v4 == 1064725619) {
        return 0;
      }
      int v7 = 1668443504;
      goto LABEL_16;
    }
    if (v4 == 1668705648) {
      return 0;
    }
    int v6 = 1684157046;
    goto LABEL_33;
  }
  if (v4 > 1836414052)
  {
    if (v4 == 1836414053 || v4 == 1918987632) {
      return result;
    }
    int v6 = 1919774835;
    goto LABEL_33;
  }
  if (v4 == 1684633187) {
    return 0;
  }
  if (v4 == 1685484390)
  {
    if ((*(_DWORD *)(a1 + 264) - 1) >= 2)
    {
      uint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 96) + 24);
      return v8();
    }
    return 0;
  }
LABEL_36:
  __int16 v9 = (os_log_t *)sub_32A48(13);
  int v10 = *v9;
  if (!*v9) {
    return 0;
  }
  uint64_t result = os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v14 = 136315394;
    double v15 = "OutputVolumeControl_HAL_Common.cpp";
    __int16 v16 = 1024;
    int v17 = 348;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty() returned true, but I do not know about it.\"", (uint8_t *)&v14, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_200CA8(uint64_t a1, int *a2)
{
  int v4 = *a2;
  uint64_t v5 = 1;
  if (*a2 > 1919774834)
  {
    if (v4 > 1986098019)
    {
      if (v4 != 1986225518)
      {
        if (v4 == 1986098020)
        {
          int v7 = *(std::__shared_weak_count **)(a1 + 288);
          if (v7 && (uint64_t v8 = std::__shared_weak_count::lock(v7)) != 0)
          {
            __int16 v9 = v8;
            uint64_t v10 = *(void *)(a1 + 280);
            uint64_t v5 = 0;
            if (sub_15FFA8(a1 + 104, a2) && v10) {
              uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 72))(v10);
            }
            sub_4636C(v9);
          }
          else
          {
            sub_15FFA8(a1 + 104, a2);
            return 0;
          }
          return v5;
        }
LABEL_23:
        int v12 = *(_DWORD *)(a1 + 136);
        uint64_t v11 = a1 + 104;
        if (v12 == 1)
        {
          int v13 = a2[1];
          v16[0] = *a2;
          v16[1] = v13;
          v16[2] = 0;
          return sub_15FFA8(v11, v16);
        }
        goto LABEL_25;
      }
      return v5;
    }
    if (v4 != 1919774835)
    {
      int v6 = 1936878960;
LABEL_8:
      if (v4 != v6) {
        goto LABEL_23;
      }
      return v5;
    }
    return *(unsigned char *)(a1 + 469) != 0;
  }
  if (v4 <= 1685484389)
  {
    if (v4 != 1668443504)
    {
      int v6 = 1668705648;
      goto LABEL_8;
    }
    return *(unsigned char *)(a1 + 469) != 0;
  }
  if (v4 != 1685484390)
  {
    if (v4 != 1918987632) {
      goto LABEL_23;
    }
    return *(unsigned char *)(a1 + 469) != 0;
  }
  if ((*(_DWORD *)(a1 + 264) - 1) <= 1)
  {
    uint64_t v11 = a1 + 104;
LABEL_25:
    return sub_15FFA8(v11, a2);
  }
  double v15 = *(uint64_t (**)(void))(**(void **)(a1 + 96) + 16);

  return v15();
}

void sub_200EE8(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_200EFC(uint64_t a1)
{
  sub_1F7088(a1);

  operator delete();
}

double sub_200F38(void *a1, int a2)
{
  if (!a2)
  {
    float v23 = (os_log_t *)sub_32A48(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      int v30 = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v31 = 1024;
      int v32 = 53;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"propertyFlags has no flags.\"", (uint8_t *)&v29, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1106A4(exception, "propertyFlags has no flags.");
  }
  char v2 = a2;
  if (a2)
  {
    float v26 = (os_log_t *)sub_32A48(13);
    uint64_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      int v29 = 136315394;
      int v30 = "OutputVolumeControl_HAL_Common.cpp";
      __int16 v31 = 1024;
      int v32 = 54;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Output VolumeControls do not support decibel volume.\"", (uint8_t *)&v29, 0x12u);
    }
    uint64_t v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v28, "Output VolumeControls do not support decibel volume.");
  }
  uint64_t v4 = 0;
  *a1 = a1;
  a1[1] = a1;
  uint64_t v5 = a1;
  a1[2] = 0;
  if ((a2 & 2) != 0)
  {
    int v6 = operator new(0x20uLL);
    v6[2] = 0x676C6F62766F6C6DLL;
    *((_DWORD *)v6 + 6) = 0;
    *int v6 = a1;
    v6[1] = a1;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = 1;
    int v7 = operator new(0x20uLL);
    v7[2] = 0x676C6F62766C6D61;
    *((_DWORD *)v7 + 6) = 0;
    *int v7 = v6;
    v7[1] = a1;
    v6[1] = v7;
    *a1 = v7;
    a1[2] = 2;
    uint64_t v8 = operator new(0x20uLL);
    _OWORD v8[2] = 0x676C6F6276646223;
    *((_DWORD *)v8 + 6) = 0;
    *uint64_t v8 = v7;
    v8[1] = a1;
    v7[1] = v8;
    *a1 = v8;
    a1[2] = 3;
    __int16 v9 = operator new(0x20uLL);
    void v9[2] = 0x676C6F6276326462;
    *((_DWORD *)v9 + 6) = 0;
    *__int16 v9 = v8;
    v9[1] = a1;
    v8[1] = v9;
    *a1 = v9;
    a1[2] = 4;
    uint64_t v10 = operator new(0x20uLL);
    void v10[2] = 0x676C6F6264623276;
    *((_DWORD *)v10 + 6) = 0;
    *uint64_t v10 = v9;
    v10[1] = a1;
    v9[1] = v10;
    *a1 = v10;
    a1[2] = 5;
    uint64_t v11 = operator new(0x20uLL);
    uint64_t v11[2] = 0x676C6F6264697663;
    *((_DWORD *)v11 + 6) = 0;
    *uint64_t v11 = v10;
    v11[1] = a1;
    v10[1] = v11;
    *a1 = v11;
    a1[2] = 6;
    int v12 = operator new(0x20uLL);
    void v12[2] = 0x676C6F6276637370;
    *((_DWORD *)v12 + 6) = 0;
    *int v12 = v11;
    v12[1] = a1;
    v11[1] = v12;
    *a1 = v12;
    a1[2] = 7;
    int v13 = operator new(0x20uLL);
    v13[2] = 0x676C6F6278766F6CLL;
    *((_DWORD *)v13 + 6) = 0;
    *int v13 = v12;
    v13[1] = a1;
    v12[1] = v13;
    *a1 = v13;
    a1[2] = 8;
    int v14 = operator new(0x20uLL);
    v14[2] = 0x676C6F623F766C73;
    *((_DWORD *)v14 + 6) = 0;
    *int v14 = v13;
    v14[1] = a1;
    v13[1] = v14;
    *a1 = v14;
    a1[2] = 9;
    double v15 = operator new(0x20uLL);
    void v15[2] = 0x676C6F6264767366;
    *((_DWORD *)v15 + 6) = 0;
    *double v15 = v14;
    v15[1] = a1;
    v14[1] = v15;
    *a1 = v15;
    a1[2] = 10;
    __int16 v16 = operator new(0x20uLL);
    v16[2] = 0x676C6F6273726D70;
    *((_DWORD *)v16 + 6) = 0;
    *__int16 v16 = v15;
    v16[1] = a1;
    v15[1] = v16;
    *a1 = v16;
    a1[2] = 11;
    int v17 = operator new(0x20uLL);
    v17[2] = 0x676C6F62726D7073;
    *((_DWORD *)v17 + 6) = 0;
    *int v17 = v16;
    v17[1] = a1;
    v16[1] = v17;
    *a1 = v17;
    a1[2] = 12;
    float v18 = operator new(0x20uLL);
    v18[2] = 0x676C6F6272616D70;
    *((_DWORD *)v18 + 6) = 0;
    *float v18 = v17;
    v18[1] = a1;
    v17[1] = v18;
    *a1 = v18;
    a1[2] = 13;
    uint64_t v19 = operator new(0x20uLL);
    v19[2] = 0x676C6F6263726D70;
    *((_DWORD *)v19 + 6) = 0;
    *uint64_t v19 = v18;
    v19[1] = a1;
    v18[1] = v19;
    *a1 = v19;
    a1[2] = 14;
    uint64_t v5 = operator new(0x20uLL);
    double result = 1.58366007e190;
    v5[2] = 0x676C6F6263766D70;
    *((_DWORD *)v5 + 6) = 0;
    *uint64_t v5 = v19;
    v5[1] = a1;
    v19[1] = v5;
    *a1 = v5;
    uint64_t v4 = 15;
    a1[2] = 15;
  }
  if ((v2 & 8) != 0)
  {
    uint64_t v21 = operator new(0x20uLL);
    double result = 1.5836601e190;
    _DWORD v21[2] = 0x676C6F626D757465;
    *((_DWORD *)v21 + 6) = 0;
    void *v21 = v5;
    v21[1] = a1;
    v5[1] = v21;
    *a1 = v21;
    a1[2] = ++v4;
    uint64_t v5 = v21;
  }
  if ((v2 & 0x40) != 0)
  {
    uint64_t v22 = operator new(0x20uLL);
    double result = 1.58366013e190;
    _DWORD v22[2] = 0x676C6F6276617364;
    *((_DWORD *)v22 + 6) = 0;
    *uint64_t v22 = v5;
    v22[1] = a1;
    v5[1] = v22;
    *a1 = v22;
    a1[2] = v4 + 1;
  }
  return result;
}

void sub_201434(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

void sub_201488()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x201480);
}

void sub_20149C()
{
}

uint64_t sub_2014A4(uint64_t *a1)
{
  char v2 = operator new(0xA8uLL);
  v2[1] = 0;
  v2[2] = 0;
  *char v2 = off_6361C0;
  uint64_t result = sub_1A9860((uint64_t)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_2014F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_201514(uint64_t a1)
{
  return sub_1A97C8(a1 + 24);
}

void sub_20151C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_6361C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_201570(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_6361C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_201590(uint64_t a1, uint64_t a2, unsigned int a3, int a4, double a5, double a6)
{
  int v12 = (void *)sub_35BAC4(a1);
  *int v12 = off_626FD8;
  int v13 = v12 + 10;
  v12[10] = off_6270A8;
  v12[12] = a2;
  sub_200F38(v20, a4);
  sub_15FF04((void *)(a1 + 104), (uint64_t)v20);
  sub_45F50(v20);
  *(_DWORD *)(a1 + 128) = 1869968496;
  *(_DWORD *)(a1 + 132) = a3;
  *(_DWORD *)(a1 + 136) = 0;
  sub_35BFC4(a2, 0x6F757470u, a3);
  *(double *)(a1 + 144) = v14;
  *(double *)(a1 + 152) = v15;
  if (v14 <= a5) {
    double v14 = a5;
  }
  float v16 = v14;
  if (v15 >= a6) {
    double v15 = a6;
  }
  float v17 = v15;
  *(float *)(a1 + 160) = v16;
  *(float *)(a1 + 164) = v17;
  sub_16FEBC(a1 + 168, 0, v16, v17);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 168);
  sub_15050C(a1 + 224, (void *)(a1 + 176));
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 200);
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 1057689552;
  *(_WORD *)(a1 + 308) = 0;
  *(void *)(a1 + 300) = 0;
  *(void *)&v20[0] = 0x6F7574706D757465;
  DWORD2(v20[0]) = a3;
  *(unsigned char *)(a1 + 310) = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a2 + 16))(a2, v20);
  *(void *)&v20[0] = 0x6F75747076646223;
  DWORD2(v20[0]) = a3;
  *(unsigned char *)(a1 + 311) = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a2 + 16))(a2, v20);
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = v13;
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 384) = 1;
  *(void *)(a1 + 392) = 0;
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)(a1 + 400));
  *(_DWORD *)(a1 + 464) = 0;
  *(_WORD *)(a1 + 468) = 0;
  *(void *)(a1 + 472) = 0;
  sub_2014A4((uint64_t *)v20);
  float v18 = *(std::__shared_weak_count **)(a1 + 352);
  *(_OWORD *)(a1 + 344) = v20[0];
  if (v18) {
    sub_4636C(v18);
  }
  return a1;
}

void sub_2017C4(_Unwind_Exception *a1)
{
  uint64_t v5 = *(const void **)(v1 + 472);
  if (v5) {
    CFRelease(v5);
  }
  std::recursive_mutex::~recursive_mutex(v3);
  int v6 = *(NSObject **)(v1 + 392);
  if (v6) {
    dispatch_release(v6);
  }
  int v7 = *(void **)(v1 + 360);
  if (v7)
  {
    *(void *)(v1 + 368) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 352);
  if (v8) {
    sub_4636C(v8);
  }
  __int16 v9 = *(std::__shared_weak_count **)(v1 + 288);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  sub_463E0(*(void **)(v1 + 232));
  sub_463E0(*(void **)(v1 + 184));
  sub_45F50(v2);
  sub_FE920(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_201874(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6, uint64_t a7)
{
  double v14 = (void *)sub_35BAC4(a1);
  *double v14 = off_626FD8;
  double v15 = v14 + 10;
  v14[10] = off_6270A8;
  unsigned char v14[12] = a2;
  sub_200F38(v21, a6);
  sub_15FF04((void *)(a1 + 104), (uint64_t)v21);
  sub_45F50(v21);
  *(_DWORD *)(a1 + 128) = a3;
  *(_DWORD *)(a1 + 132) = a4;
  *(_DWORD *)(a1 + 136) = 0;
  sub_35BFC4(a2, a3, a4);
  *(double *)(a1 + 144) = v16;
  *(double *)(a1 + 152) = v17;
  *(float *)&double v16 = v16;
  *(float *)&double v17 = v17;
  *(_DWORD *)(a1 + 160) = LODWORD(v16);
  *(_DWORD *)(a1 + 164) = LODWORD(v17);
  sub_16FEBC(a1 + 168, a5, *(float *)&v16, *(float *)&v17);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a1 + 168);
  sub_15050C(a1 + 224, (void *)(a1 + 176));
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a1 + 200);
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 268) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 1057689552;
  *(_WORD *)(a1 + 308) = 0;
  LODWORD(v21[0]) = 1836414053;
  *(void *)((char *)v21 + 4) = __PAIR64__(a4, a3);
  *(unsigned char *)(a1 + 310) = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a2 + 16))(a2, v21);
  LODWORD(v21[0]) = 1986290211;
  *(void *)((char *)v21 + 4) = __PAIR64__(a4, a3);
  *(unsigned char *)(a1 + 311) = (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)a2 + 16))(a2, v21);
  *(_WORD *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = v15;
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_DWORD *)(a1 + 384) = 1;
  *(void *)(a1 + 392) = 0;
  std::recursive_mutex::recursive_mutex((std::recursive_mutex *)(a1 + 400));
  *(_DWORD *)(a1 + 464) = 0;
  *(_WORD *)(a1 + 468) = 0;
  *(void *)(a1 + 472) = 0;
  sub_2014A4((uint64_t *)v21);
  float v18 = *(std::__shared_weak_count **)(a1 + 352);
  *(_OWORD *)(a1 + 344) = v21[0];
  if (v18) {
    sub_4636C(v18);
  }
  if (a7) {
    *(void *)(a1 + 336) = a7;
  }
  if (sub_45833C(*(void *)(a1 + 96)))
  {
    *(unsigned char *)(a1 + 313) = 1;
    uint64_t v19 = *(void *)(a1 + 96);
    *(void *)&v21[0] = 0x676C6F6273706D65;
    DWORD2(v21[0]) = 0;
    sub_FEAC0(v19, v21, (uint64_t)sub_1F76D0, a1);
  }
  return a1;
}

void sub_201ADC(_Unwind_Exception *a1)
{
  sub_6393C((const void **)(v1 + 472));
  std::recursive_mutex::~recursive_mutex(v3);
  uint64_t v5 = *(NSObject **)(v1 + 392);
  if (v5) {
    dispatch_release(v5);
  }
  int v6 = *(void **)(v1 + 360);
  if (v6)
  {
    *(void *)(v1 + 368) = v6;
    operator delete(v6);
  }
  int v7 = *(std::__shared_weak_count **)(v1 + 352);
  if (v7) {
    sub_4636C(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 288);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  sub_463E0(*(void **)(v1 + 232));
  sub_463E0(*(void **)(v1 + 184));
  sub_45F50(v2);
  sub_FE920(v1);
  _Unwind_Resume(a1);
}

void sub_201B90(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 40))
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 82));
    if (v3)
    {
      sub_1329C(&v12, *(void *)(a1 + 88), *(std::__shared_weak_count **)(a1 + 96));
      uint64_t v6 = v12;
      uint64_t v5 = v13;
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v5);
      }
      if (a2) {
        int64_t v7 = 2000000000;
      }
      else {
        int64_t v7 = 200000000;
      }
      dispatch_time_t v8 = dispatch_time(0, v7);
      __int16 v9 = *(NSObject **)(a1 + 72);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 1174405120;
      void v10[2] = sub_201C9C;
      v10[3] = &unk_627368;
      v10[4] = v6;
      uint64_t v11 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      dispatch_after(v8, v9, v10);
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v5) {
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_201C9C(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    unsigned __int8 v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 81));
        if (v6)
        {
          unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v5 + 82));
          if (v7)
          {
            uint64_t state64 = 0;
            notify_get_state(*(_DWORD *)(v5 + 40), &state64);
            *(unsigned char *)(v5 + 44) = state64 == 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 232))(v5, 2884);
          }
        }
        (*(void (**)(uint64_t, void))(*(void *)v5 + 280))(v5, 0);
      }
      sub_4636C(v4);
    }
  }
}

void sub_201D80(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_201D98(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_201DA8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_201DC4(uint64_t a1, int a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 82));
  if (v2)
  {
    sub_1329C(&v12, *(void *)(a1 + 88), *(std::__shared_weak_count **)(a1 + 96));
    uint64_t v6 = v12;
    uint64_t v5 = v13;
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v5);
    }
    if (a2) {
      int64_t v7 = 2000000000;
    }
    else {
      int64_t v7 = 1000000000;
    }
    dispatch_time_t v8 = dispatch_time(0, v7);
    __int16 v9 = *(NSObject **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = sub_201ECC;
    block[3] = &unk_627338;
    block[4] = a1;
    block[5] = v6;
    uint64_t v11 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_after(v8, v9, block);
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_201ECC(void *a1)
{
  unsigned __int8 v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (unsigned __int8 *)a1[5];
      if (v6)
      {
        unsigned __int8 v7 = atomic_load(v6 + 82);
        if (v7)
        {
          unsigned __int8 v8 = atomic_load(v6 + 81);
          if (v8)
          {
            unsigned int v16 = 0;
            if (((*(uint64_t (**)(uint64_t, uint64_t, unsigned int *))(*(void *)v3 + 200))(v3, 2842, &v16) & 1) == 0)
            {
              __int16 v9 = (os_log_t *)sub_32A48(25);
              uint64_t v10 = *v9;
              if (*v9)
              {
                if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  float v18 = "AncManagerV2.cpp";
                  __int16 v19 = 1024;
                  int v20 = 276;
                  _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not read cust_block_exec_count", buf, 0x12u);
                }
              }
            }
            unsigned int v11 = v16;
            if (v16 <= *(_DWORD *)(v3 + 48))
            {
              uint64_t v12 = (os_log_t *)sub_32A48(25);
              int v13 = *v12;
              if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
              {
                int v14 = *(_DWORD *)(v3 + 52);
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                float v18 = "AncManagerV2.cpp";
                __int16 v19 = 1024;
                int v20 = 286;
                __int16 v21 = 1024;
                int v22 = v14;
                _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP detected to be not running. Hangint Count = %u", buf, 0x18u);
              }
              unsigned int v15 = *(_DWORD *)(v3 + 52) + 1;
              *(_DWORD *)(v3 + 52) = v15;
              if (v15 >= 5) {
                *(unsigned char *)(v3 + 80) = 0;
              }
            }
            else
            {
              *(unsigned char *)(v3 + 80) = 1;
              *(_DWORD *)(v3 + 48) = v11;
              *(_DWORD *)(v3 + 52) = 0;
            }
          }
        }
        (*(void (**)(unsigned __int8 *, void))(*(void *)v6 + 264))(v6, 0);
      }
      sub_4636C(v5);
    }
  }
}

void sub_2020F0(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_202110(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_202120(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_20213C(uint64_t a1, uint64_t *a2, __n128 *a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  unsigned __int8 v8 = (std::__shared_weak_count *)a2[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_3868C8(&v24, v7, v8);
  __int16 v9 = (std::__shared_weak_count *)a3->n128_u64[1];
  *a3 = v24;
  if (v9) {
    sub_4636C(v9);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v11 = *a2;
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (char *)operator new(0xB0uLL);
  int v13 = (std::__shared_weak_count *)v12;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = off_6335F0;
  int v14 = v12 + 24;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v12 + 120) = 0u;
  v12[32] = 0;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *((void *)v12 + 3) = off_6334F0;
  *(void *)(v12 + 108) = 0;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  v12[104] = 0;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *((void *)v12 + 21) = 0;
  if (!v10 || (unsigned int v15 = std::__shared_weak_count::lock(v10)) == 0 || !v11)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(exception, "ancManager expired");
  }
  if (*(_DWORD *)(v11 + 12) != 2)
  {
    int v22 = __cxa_allocate_exception(0x18uLL);
    sub_21C8C(v22, "ancManager is not V2");
  }
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unsigned int v16 = (std::__shared_weak_count *)v13[2].__vftable;
  v13[1].__shared_weak_owners_ = v11;
  v13[2].__vftable = (std::__shared_weak_count_vtbl *)v10;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  sub_4636C(v15);
  std::__shared_weak_count::__release_weak(v10);
  *(void *)&long long v17 = v14;
  *((void *)&v17 + 1) = v13;
  shared_weak_owners = (std::__shared_weak_count *)v13[2].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_22;
    }
    long long v23 = v17;
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__shared_owners_ = (uint64_t)v14;
    v13[2].__shared_weak_owners_ = (uint64_t)v13;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    long long v23 = v17;
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[2].__shared_owners_ = (uint64_t)v14;
    v13[2].__shared_weak_owners_ = (uint64_t)v13;
  }
  sub_4636C(v13);
  long long v17 = v23;
LABEL_22:
  __int16 v19 = *(std::__shared_weak_count **)(a4 + 8);
  *(_OWORD *)a4 = v17;
  if (v19) {
    sub_4636C(v19);
  }
  std::__shared_weak_count::__release_weak(v10);
  return 1;
}

void sub_2023DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9)
{
  __cxa_free_exception(v13);
  sub_4636C(v12);
  unsigned int v15 = v10[6].__vftable;
  if (v15)
  {
    v10[6].__shared_owners_ = (uint64_t)v15;
    operator delete(v15);
  }
  unsigned int v16 = *a9;
  if (*a9)
  {
    v10[5].__shared_owners_ = (uint64_t)v16;
    operator delete(v16);
  }
  shared_weak_owners = (std::__shared_weak_count *)v10[2].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  v10[1].__vftable = v11;
  float v18 = (std::__shared_weak_count *)v10[2].__vftable;
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  std::__shared_weak_count::~__shared_weak_count(v10);
  operator delete(v19);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_202490()
{
  return 0;
}

BOOL sub_202498(uint64_t a1, CFMutableStringRef theString, int a3)
{
  if (theString)
  {
    if (a3)
    {
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Voice mic trim:", *(float *)(a1 + 56));
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Ref mic trim:", *(float *)(a1 + 60));
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Error mic trim:", *(float *)(a1 + 64));
      CFStringAppendFormat(theString, 0, @"%-20s %-.6f\n", "Receiver trim:", *(float *)(a1 + 68));
      CFStringAppendFormat(theString, 0, @"%-20s ", "Tuning device type:");
    }
    else
    {
      CFStringAppendFormat(theString, 0, @"Voice mic trim, %-.6f\n", *(float *)(a1 + 56));
      CFStringAppendFormat(theString, 0, @"Ref mic trim, %-.6f\n", *(float *)(a1 + 60));
      CFStringAppendFormat(theString, 0, @"Error mic trim, %-.6f\n", *(float *)(a1 + 64));
      CFStringAppendFormat(theString, 0, @"Receiver trim, %-.6f\n", *(float *)(a1 + 68));
      CFStringAppend(theString, @"Tuning device type, ");
    }
    CFDictionaryRef v6 = *(const __CFDictionary **)(a1 + 120);
    CFStringRef v7 = @"No Tuning loaded\n";
    if (v6)
    {
      int v8 = sub_386C04(v6);
      CFStringRef v9 = @"*** Invalid ***\n";
      if (v8 == 2) {
        CFStringRef v9 = @"L71\n";
      }
      if (v8 != -1) {
        CFStringRef v7 = v9;
      }
    }
    CFStringAppend(theString, v7);
    if (a3) {
      CFStringAppendFormat(theString, 0, @"%-20s ", "ANC tuning ID:");
    }
    else {
      CFStringAppend(theString, @"ANC tuning ID, ");
    }
    CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 120);
    if (v10)
    {
      value = 0;
      if (CFDictionaryGetValueIfPresent(v10, @"Tuning ID", (const void **)&value))
      {
        CFStringAppend(theString, (CFStringRef)value);
        CFStringRef v11 = @"\n";
      }
      else
      {
        CFStringRef v11 = @"*** Missing ***\n";
      }
    }
    else
    {
      CFStringRef v11 = @"Unknown\n";
    }
    CFStringAppend(theString, v11);
  }
  return theString != 0;
}

BOOL sub_202700(uint64_t a1, __CFString *a2, int a3)
{
  if (a2)
  {
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 120);
    if (!v4)
    {
      CFStringAppendFormat(a2, 0, @"Tuning not loaded\n");
      return a2 != 0;
    }
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, @"Parameters");
    unsigned int Count = CFDictionaryGetCount(Value);
    LODWORD(v8) = Count;
    if (Count >= 0x15)
    {
      CFStringAppendFormat(a2, 0, @"Too many categories\n");
      return a2 != 0;
    }
    CFStringRef v9 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryRef v61 = Value;
    CFDictionaryGetKeysAndValues(Value, v9, 0);
    AudioObjectID v68 = 0;
    uint64_t v69 = 0;
    unint64_t v70 = 0;
    if (v8)
    {
      uint64_t v8 = v8;
      CFDictionaryRef v10 = (CFStringRef *)v9;
      do
      {
        sub_296A50(__p, *v10);
        CFStringRef v11 = v69;
        if ((unint64_t)v69 >= v70)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (v69 - v68);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_60548();
          }
          if (0x5555555555555556 * ((uint64_t)(v70 - (void)v68) >> 3) > v14) {
            unint64_t v14 = 0x5555555555555556 * ((uint64_t)(v70 - (void)v68) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - (void)v68) >> 3) >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v14;
          }
          uint64_t v75 = &v70;
          if (v15) {
            unint64_t v15 = (unint64_t)sub_21974(v15);
          }
          else {
            uint64_t v16 = 0;
          }
          unint64_t v17 = v15 + 24 * v13;
          int valuePtr = (void **)v15;
          unint64_t v72 = v17;
          unint64_t v74 = v15 + 24 * v16;
          long long v18 = *(_OWORD *)__p;
          *(void *)(v17 + 16) = v67;
          *(_OWORD *)unint64_t v17 = v18;
          __p[1] = 0;
          int v67 = 0;
          __p[0] = 0;
          unint64_t v73 = v17 + 24;
          sub_20D9C((uint64_t *)&v68, &valuePtr);
          __int16 v19 = v69;
          sub_20E50((uint64_t)&valuePtr);
          uint64_t v69 = v19;
          if (SHIBYTE(v67) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v12 = *(_OWORD *)__p;
          v69[2] = v67;
          *(_OWORD *)CFStringRef v11 = v12;
          uint64_t v69 = v11 + 3;
        }
        ++v10;
        --v8;
      }
      while (v8);
    }
    free(v9);
    unint64_t v20 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v69 - v68));
    if (v69 == v68) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = v20;
    }
    sub_202F40((unint64_t)v68, v69, v21, 1);
    int v22 = v68;
    uint64_t v62 = v69;
    CFDictionaryRef v23 = Value;
    if (v68 == v69) {
      goto LABEL_89;
    }
LABEL_26:
    __n128 v24 = v22;
    if (*((char *)v22 + 23) < 0) {
      __n128 v24 = *v22;
    }
    CFStringAppendFormat(a2, 0, @"%s\n", v24);
    if (*((char *)v22 + 23) >= 0) {
      double v25 = (const char *)v22;
    }
    else {
      double v25 = (const char *)*v22;
    }
    CFStringRef v26 = CFStringCreateWithCString(kCFAllocatorDefault, v25, 0x8000100u);
    uint64_t v27 = CFDictionaryGetValue(v23, v26);
    CFRelease(v26);
    CFTypeID v28 = CFGetTypeID(v27);
    if (v28 != CFDictionaryGetTypeID())
    {
      CFStringAppendFormat(a2, 0, @"*** INVALID DICTIONARY ***\n\n");
      goto LABEL_88;
    }
    unsigned int v29 = CFDictionaryGetCount((CFDictionaryRef)v27);
    unsigned int v30 = v29;
    if (v29 >= 0x7D1)
    {
      CFStringAppendFormat(a2, 0, @"Too many params\n");
      goto LABEL_88;
    }
    __int16 v31 = (const void **)malloc_type_malloc(8 * v29, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)v27, v31, 0);
    __p[0] = 0;
    __p[1] = 0;
    int v67 = 0;
    if (v30)
    {
      uint64_t v32 = v30;
      char v33 = (CFStringRef *)v31;
      do
      {
        sub_296A50(v64, *v33);
        uint64_t v34 = __p[1];
        if (__p[1] >= v67)
        {
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
          unint64_t v37 = v36 + 1;
          if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_60548();
          }
          if (0x5555555555555556 * ((int64_t)((uint64_t)v67 - (unint64_t)__p[0]) >> 3) > v37) {
            unint64_t v37 = 0x5555555555555556 * ((int64_t)((uint64_t)v67 - (unint64_t)__p[0]) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((int64_t)((uint64_t)v67 - (unint64_t)__p[0]) >> 3) >= 0x555555555555555) {
            unint64_t v38 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v38 = v37;
          }
          uint64_t v75 = (unint64_t *)&v67;
          if (v38) {
            unint64_t v38 = (unint64_t)sub_21974(v38);
          }
          else {
            uint64_t v39 = 0;
          }
          unint64_t v40 = v38 + 24 * v36;
          int valuePtr = (void **)v38;
          unint64_t v72 = v40;
          unint64_t v74 = v38 + 24 * v39;
          long long v41 = *(_OWORD *)v64;
          *(void *)(v40 + 16) = v65;
          *(_OWORD *)unint64_t v40 = v41;
          v64[1] = 0;
          uint64_t v65 = 0;
          v64[0] = 0;
          unint64_t v73 = v40 + 24;
          sub_20D9C((uint64_t *)__p, &valuePtr);
          double v42 = __p[1];
          sub_20E50((uint64_t)&valuePtr);
          __p[1] = v42;
          if (SHIBYTE(v65) < 0) {
            operator delete(v64[0]);
          }
        }
        else
        {
          long long v35 = *(_OWORD *)v64;
          *((void *)__p[1] + 2) = v65;
          _OWORD *v34 = v35;
          __p[1] = (char *)v34 + 24;
        }
        ++v33;
        --v32;
      }
      while (v32);
    }
    free(v31);
    unint64_t v43 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
    if (__p[1] == __p[0]) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v44 = v43;
    }
    sub_202F40((unint64_t)__p[0], (void **)__p[1], v44, 1);
    double v46 = (const char *)__p[0];
    uint64_t v45 = (const char *)__p[1];
    for (i = (const char *)__p[1]; ; uint64_t v45 = i)
    {
      if (v46 == v45)
      {
        CFStringAppendFormat(a2, 0, @"\n");
        int valuePtr = __p;
        sub_217F8(&valuePtr);
        CFDictionaryRef v23 = v61;
LABEL_88:
        v22 += 3;
        if (v22 == v62)
        {
LABEL_89:
          int valuePtr = (void **)&v68;
          sub_217F8(&valuePtr);
          return a2 != 0;
        }
        goto LABEL_26;
      }
      if (v46[23] >= 0) {
        int v47 = v46;
      }
      else {
        int v47 = *(const char **)v46;
      }
      CFStringRef v48 = CFStringCreateWithCString(kCFAllocatorDefault, v47, 0x8000100u);
      unint64_t v49 = CFDictionaryGetValue((CFDictionaryRef)v27, v48);
      CFRelease(v48);
      CFTypeID v50 = CFGetTypeID(v49);
      CFTypeID TypeID = CFArrayGetTypeID();
      CFTypeID v52 = CFGetTypeID(v49);
      CFTypeID v53 = CFNumberGetTypeID();
      int v54 = v46[23];
      char v55 = v46;
      if (a3)
      {
        if (v50 != TypeID)
        {
          if (v54 < 0) {
            char v55 = *(const char **)v46;
          }
          CFStringAppendFormat(a2, 0, @"    %-40s = ", v55);
LABEL_80:
          if (v52 == v53)
          {
            if (CFNumberIsFloatType((CFNumberRef)v49))
            {
              int valuePtr = (void **)0xBFF0000000000000;
              CFNumberGetValue((CFNumberRef)v49, kCFNumberDoubleType, &valuePtr);
              CFStringAppendFormat(a2, 0, @"%.40g ", valuePtr);
            }
            else
            {
              int valuePtr = 0;
              CFNumberGetValue((CFNumberRef)v49, kCFNumberLongType, &valuePtr);
              CFStringAppendFormat(a2, 0, @"%lld ", valuePtr);
            }
          }
          else
          {
            CFStringAppendFormat(a2, 0, @"*** INVALID DATA ***");
          }
          goto LABEL_86;
        }
        if (v54 < 0) {
          char v55 = *(const char **)v46;
        }
        CFStringAppendFormat(a2, 0, @"    %s = ", v55);
      }
      else
      {
        if (v54 < 0) {
          char v55 = *(const char **)v46;
        }
        CFStringAppendFormat(a2, 0, @", %s,", v55);
        if (v50 != TypeID) {
          goto LABEL_80;
        }
      }
      CFIndex v56 = CFArrayGetCount((CFArrayRef)v49);
      if (v56 >= 1)
      {
        CFIndex v57 = 0;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v49, v57);
          CFTypeID v59 = CFGetTypeID(ValueAtIndex);
          if (v59 != CFNumberGetTypeID()) {
            break;
          }
          if (a3) {
            CFStringAppend(a2, @"\n        ");
          }
          if (CFNumberIsFloatType((CFNumberRef)ValueAtIndex))
          {
            int valuePtr = (void **)0xBFF0000000000000;
            CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberDoubleType, &valuePtr);
            CFStringAppendFormat(a2, 0, @"%.40g ", valuePtr);
          }
          else
          {
            int valuePtr = 0;
            CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberLongType, &valuePtr);
            CFStringAppendFormat(a2, 0, @"%lld ", valuePtr);
          }
          if (v56 == ++v57) {
            goto LABEL_86;
          }
        }
        CFStringAppendFormat(a2, 0, @"*** INVALID NUMBER ARRAY ***");
      }
LABEL_86:
      CFStringAppendFormat(a2, 0, @"\n");
      v46 += 24;
    }
  }
  return a2 != 0;
}

void sub_202EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char **p_p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  p_p = &__p;
  sub_217F8((void ***)&p_p);
  std::string __p = &a28;
  sub_217F8((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_202F40(unint64_t a1, void **a2, uint64_t a3, char a4)
{
  while (2)
  {
    CFDictionaryRef v10 = a2 - 3;
    unsigned int v96 = a2 - 6;
    int v98 = a2;
    CFStringRef v11 = a2 - 9;
    unint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v12;
          uint64_t v13 = (uint64_t)a2 - v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((sub_15E8C(v10, (void **)a1) & 0x80) != 0)
                {
                  long long v41 = *(_OWORD *)a1;
                  char v100 = *(void **)(a1 + 16);
                  long long v99 = v41;
                  long long v42 = *(_OWORD *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(_OWORD *)a1 = v42;
                  long long v43 = v99;
                  void v10[2] = v100;
                  *(_OWORD *)CFDictionaryRef v10 = v43;
                }
                break;
              case 3uLL:
                sub_2039A4((void **)a1, (void **)(a1 + 24), v10);
                break;
              case 4uLL:
                sub_203AC8(a1, (void **)(a1 + 24), (void **)(a1 + 48), v10);
                break;
              case 5uLL:
                sub_203B98(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            uint64_t v44 = (void **)(a1 + 24);
            BOOL v46 = (void **)a1 == a2 || v44 == a2;
            if (a4)
            {
              if (!v46)
              {
                uint64_t v47 = 0;
                CFStringRef v48 = (void **)a1;
                do
                {
                  unint64_t v49 = v48;
                  CFStringRef v48 = v44;
                  if ((sub_15E8C(v44, v49) & 0x80) != 0)
                  {
                    long long v50 = *(_OWORD *)v48;
                    char v100 = v48[2];
                    long long v99 = v50;
                    v48[1] = 0;
                    v48[2] = 0;
                    *CFStringRef v48 = 0;
                    uint64_t v51 = v47;
                    while (1)
                    {
                      uint64_t v52 = a1 + v51;
                      *(_OWORD *)(v52 + 24) = *(_OWORD *)(a1 + v51);
                      *(void *)(v52 + 40) = *(void *)(a1 + v51 + 16);
                      *(unsigned char *)(v52 + 23) = 0;
                      *(unsigned char *)uint64_t v52 = 0;
                      if (!v51) {
                        break;
                      }
                      v51 -= 24;
                      if ((sub_15E8C(&v99, (void **)(v51 + a1)) & 0x80) == 0)
                      {
                        uint64_t v53 = a1 + v51 + 24;
                        goto LABEL_86;
                      }
                    }
                    uint64_t v53 = a1;
LABEL_86:
                    long long v54 = v99;
                    *(void *)(v53 + 16) = v100;
                    *(_OWORD *)uint64_t v53 = v54;
                  }
                  uint64_t v44 = v48 + 3;
                  v47 += 24;
                }
                while (v48 + 3 != a2);
              }
            }
            else if (!v46)
            {
              do
              {
                uint64_t v89 = (void **)a1;
                a1 = (unint64_t)v44;
                if ((sub_15E8C(v44, v89) & 0x80) != 0)
                {
                  long long v90 = *(_OWORD *)a1;
                  char v100 = *(void **)(a1 + 16);
                  long long v99 = v90;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v91 = a1;
                  do
                  {
                    unint64_t v92 = v91 - 24;
                    *(_OWORD *)unint64_t v91 = *(_OWORD *)(v91 - 24);
                    *(void *)(v91 + 16) = *(void *)(v91 - 8);
                    *(unsigned char *)(v91 - 1) = 0;
                    *(unsigned char *)(v91 - 24) = 0;
                    char v93 = sub_15E8C(&v99, (void **)(v91 - 48));
                    unint64_t v91 = v92;
                  }
                  while (v93 < 0);
                  long long v94 = v99;
                  *(void *)(v92 + 16) = v100;
                  *(_OWORD *)unint64_t v92 = v94;
                }
                uint64_t v44 = (void **)(a1 + 24);
              }
              while ((void **)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((void **)a1 != a2)
            {
              int64_t v55 = (v14 - 2) >> 1;
              int64_t v56 = v55;
              do
              {
                int64_t v57 = v56;
                if (v55 >= v56)
                {
                  uint64_t v58 = (2 * v56) | 1;
                  unint64_t v59 = a1 + 24 * v58;
                  if (2 * v56 + 2 < (uint64_t)v14
                    && (sub_15E8C((void *)(a1 + 24 * v58), (void **)(v59 + 24)) & 0x80u) != 0)
                  {
                    v59 += 24;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                  unint64_t v60 = a1 + 24 * v57;
                  a2 = v98;
                  if ((sub_15E8C((void *)v59, (void **)v60) & 0x80) == 0)
                  {
                    long long v61 = *(_OWORD *)v60;
                    char v100 = *(void **)(v60 + 16);
                    long long v99 = v61;
                    *(void *)(v60 + 8) = 0;
                    *(void *)(v60 + 16) = 0;
                    *(void *)unint64_t v60 = 0;
                    do
                    {
                      unint64_t v62 = v59;
                      long long v63 = *(_OWORD *)v59;
                      *(void *)(v60 + 16) = *(void *)(v59 + 16);
                      *(_OWORD *)unint64_t v60 = v63;
                      *(unsigned char *)(v59 + 23) = 0;
                      *(unsigned char *)unint64_t v59 = 0;
                      if (v55 < v58) {
                        break;
                      }
                      uint64_t v64 = (2 * v58) | 1;
                      unint64_t v59 = a1 + 24 * v64;
                      uint64_t v65 = 2 * v58 + 2;
                      if (v65 < (uint64_t)v14
                        && (sub_15E8C((void *)(a1 + 24 * v64), (void **)(v59 + 24)) & 0x80u) != 0)
                      {
                        v59 += 24;
                        uint64_t v64 = v65;
                      }
                      unint64_t v60 = v62;
                      uint64_t v58 = v64;
                    }
                    while ((sub_15E8C((void *)v59, (void **)&v99) & 0x80) == 0);
                    long long v66 = v99;
                    *(void *)(v62 + 16) = v100;
                    *(_OWORD *)unint64_t v62 = v66;
                    a2 = v98;
                  }
                }
                int64_t v56 = v57 - 1;
              }
              while (v57);
              int64_t v67 = v13 / 0x18uLL;
              do
              {
                AudioObjectID v68 = a2;
                uint64_t v69 = 0;
                int v95 = *(void **)a1;
                *(void *)&long long v101 = *(void *)(a1 + 8);
                *(void *)((char *)&v101 + 7) = *(void *)(a1 + 15);
                char v97 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v70 = v67 - 2;
                if (v67 < 2) {
                  uint64_t v70 = v67 - 1;
                }
                uint64_t v71 = v70 >> 1;
                unint64_t v72 = a1;
                do
                {
                  uint64_t v73 = v72 + 24 * v69 + 24;
                  uint64_t v74 = 2 * v69;
                  uint64_t v69 = (2 * v69) | 1;
                  uint64_t v75 = v74 + 2;
                  if (v74 + 2 < v67 && (sub_15E8C((void *)v73, (void **)(v73 + 24)) & 0x80u) != 0)
                  {
                    v73 += 24;
                    uint64_t v69 = v75;
                  }
                  if (*(char *)(v72 + 23) < 0) {
                    operator delete(*(void **)v72);
                  }
                  long long v76 = *(_OWORD *)v73;
                  *(void *)(v72 + 16) = *(void *)(v73 + 16);
                  *(_OWORD *)unint64_t v72 = v76;
                  *(unsigned char *)(v73 + 23) = 0;
                  *(unsigned char *)uint64_t v73 = 0;
                  unint64_t v72 = v73;
                }
                while (v69 <= v71);
                a2 = v68 - 3;
                if ((void **)v73 == v68 - 3)
                {
                  *(void *)uint64_t v73 = v95;
                  uint64_t v87 = *(void *)((char *)&v101 + 7);
                  *(void *)(v73 + 8) = v101;
                  *(void *)(v73 + 15) = v87;
                  *(unsigned char *)(v73 + 23) = v97;
                  int64_t v80 = v67 - 1;
                }
                else
                {
                  long long v77 = *(_OWORD *)a2;
                  *(void *)(v73 + 16) = *(v68 - 1);
                  *(_OWORD *)uint64_t v73 = v77;
                  *(v68 - 3) = v95;
                  uint64_t v78 = (void *)v101;
                  *(void **)((char *)v68 - 9) = *(void **)((char *)&v101 + 7);
                  *(v68 - 2) = v78;
                  *((unsigned char *)v68 - 1) = v97;
                  uint64_t v79 = v73 - a1 + 24;
                  int64_t v80 = v67 - 1;
                  if (v79 >= 25)
                  {
                    unint64_t v81 = (unint64_t)(-2 - 0x5555555555555555 * (v79 >> 3)) >> 1;
                    unint64_t v82 = a1 + 24 * v81;
                    if ((sub_15E8C((void *)v82, (void **)v73) & 0x80) != 0)
                    {
                      long long v83 = *(_OWORD *)v73;
                      char v100 = *(void **)(v73 + 16);
                      long long v99 = v83;
                      *(void *)(v73 + 8) = 0;
                      *(void *)(v73 + 16) = 0;
                      *(void *)uint64_t v73 = 0;
                      do
                      {
                        uint64_t v84 = v82;
                        long long v85 = *(_OWORD *)v82;
                        *(void *)(v73 + 16) = *(void *)(v82 + 16);
                        *(_OWORD *)uint64_t v73 = v85;
                        *(unsigned char *)(v82 + 23) = 0;
                        *(unsigned char *)unint64_t v82 = 0;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        unint64_t v82 = a1 + 24 * v81;
                        uint64_t v73 = v84;
                      }
                      while ((sub_15E8C((void *)v82, (void **)&v99) & 0x80) != 0);
                      long long v86 = v99;
                      *(void *)(v84 + 16) = v100;
                      *(_OWORD *)uint64_t v84 = v86;
                      a2 = v68 - 3;
                    }
                  }
                }
                BOOL v88 = v67 <= 2;
                int64_t v67 = v80;
              }
              while (!v88);
            }
            return;
          }
          unint64_t v15 = a1 + 24 * (v14 >> 1);
          if ((unint64_t)v13 >= 0xC01)
          {
            sub_2039A4((void **)a1, (void **)(a1 + 24 * (v14 >> 1)), v10);
            sub_2039A4((void **)(a1 + 24), (void **)(a1 + 24 * (v14 >> 1) - 24), v96);
            sub_2039A4((void **)(a1 + 48), (void **)(a1 + 24 + 24 * (v14 >> 1)), v11);
            sub_2039A4((void **)(a1 + 24 * (v14 >> 1) - 24), (void **)v15, (void *)(a1 + 24 + 24 * (v14 >> 1)));
            long long v16 = *(_OWORD *)a1;
            char v100 = *(void **)(a1 + 16);
            long long v99 = v16;
            uint64_t v17 = *(void *)(v15 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            long long v18 = v99;
            *(void *)(v15 + 16) = v100;
            *(_OWORD *)unint64_t v15 = v18;
          }
          else
          {
            sub_2039A4((void **)(a1 + 24 * (v14 >> 1)), (void **)a1, v10);
          }
          --a3;
          a2 = v98;
          if ((a4 & 1) != 0 || (sub_15E8C((void *)(a1 - 24), (void **)a1) & 0x80) != 0) {
            break;
          }
          long long v31 = *(_OWORD *)a1;
          uint64_t v102 = *(void *)(a1 + 16);
          long long v101 = v31;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if ((sub_15E8C(&v101, v10) & 0x80) != 0)
          {
            unint64_t v12 = a1;
            do
              v12 += 24;
            while ((sub_15E8C(&v101, (void **)v12) & 0x80) == 0);
          }
          else
          {
            uint64_t v32 = (void **)(a1 + 24);
            do
            {
              unint64_t v12 = (unint64_t)v32;
              if (v32 >= v98) {
                break;
              }
              char v33 = sub_15E8C(&v101, v32);
              uint64_t v32 = (void **)(v12 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          uint64_t v34 = v98;
          if (v12 < (unint64_t)v98)
          {
            uint64_t v34 = v98;
            do
              v34 -= 3;
            while ((sub_15E8C(&v101, v34) & 0x80) != 0);
          }
          while (v12 < (unint64_t)v34)
          {
            long long v35 = *(_OWORD *)v12;
            char v100 = *(void **)(v12 + 16);
            long long v99 = v35;
            long long v36 = *(_OWORD *)v34;
            *(void *)(v12 + 16) = v34[2];
            *(_OWORD *)unint64_t v12 = v36;
            long long v37 = v99;
            v34[2] = v100;
            *(_OWORD *)uint64_t v34 = v37;
            do
              v12 += 24;
            while ((sub_15E8C(&v101, (void **)v12) & 0x80) == 0);
            do
              v34 -= 3;
            while ((sub_15E8C(&v101, v34) & 0x80) != 0);
          }
          unint64_t v38 = (long long *)(v12 - 24);
          BOOL v4 = v12 - 24 >= a1;
          BOOL v5 = v12 - 24 == a1;
          if (v12 - 24 == a1)
          {
            if (*(char *)(v12 - 1) < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v39 = *v38;
            *(void *)(a1 + 16) = *(void *)(v12 - 8);
            *(_OWORD *)a1 = v39;
            *(unsigned char *)(v12 - 1) = 0;
            *(unsigned char *)(v12 - 24) = 0;
          }
          a4 = 0;
          long long v40 = v101;
          *(void *)(v12 - 8) = v102;
          long long *v38 = v40;
        }
        long long v19 = *(_OWORD *)a1;
        uint64_t v102 = *(void *)(a1 + 16);
        long long v101 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        unint64_t v20 = (void **)a1;
        do
        {
          uint64_t v21 = v20;
          v20 += 3;
        }
        while ((sub_15E8C(v20, (void **)&v101) & 0x80) != 0);
        int v22 = v98;
        if (v21 == (void **)a1)
        {
          int v22 = v98;
          do
          {
            if (v20 >= v22) {
              break;
            }
            v22 -= 3;
          }
          while ((sub_15E8C(v22, (void **)&v101) & 0x80) == 0);
        }
        else
        {
          do
            v22 -= 3;
          while ((sub_15E8C(v22, (void **)&v101) & 0x80) == 0);
        }
        unint64_t v12 = (unint64_t)v20;
        if (v20 < v22)
        {
          CFDictionaryRef v23 = v22;
          do
          {
            long long v99 = *(_OWORD *)v12;
            long long v24 = v99;
            char v100 = *(void **)(v12 + 16);
            double v25 = v100;
            CFStringRef v26 = v23[2];
            *(_OWORD *)unint64_t v12 = *(_OWORD *)v23;
            *(void *)(v12 + 16) = v26;
            v23[2] = v25;
            *(_OWORD *)CFDictionaryRef v23 = v24;
            do
              v12 += 24;
            while ((sub_15E8C((void *)v12, (void **)&v101) & 0x80) != 0);
            do
              v23 -= 3;
            while ((sub_15E8C(v23, (void **)&v101) & 0x80) == 0);
          }
          while (v12 < (unint64_t)v23);
        }
        uint64_t v27 = (long long *)(v12 - 24);
        if (v12 - 24 == a1)
        {
          if (*(char *)(v12 - 1) < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v28 = *v27;
          *(void *)(a1 + 16) = *(void *)(v12 - 8);
          *(_OWORD *)a1 = v28;
          *(unsigned char *)(v12 - 1) = 0;
          *(unsigned char *)(v12 - 24) = 0;
        }
        long long v29 = v101;
        *(void *)(v12 - 8) = v102;
        *uint64_t v27 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_34:
        sub_202F40(a1, v12 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = sub_203CA4(a1, (void **)(v12 - 24));
      if (sub_203CA4(v12, v98)) {
        break;
      }
      if (!v30) {
        goto LABEL_34;
      }
    }
    a2 = (void **)(v12 - 24);
    if (!v30) {
      continue;
    }
    break;
  }
}

uint64_t sub_2039A4(void **a1, void **a2, void *a3)
{
  char v6 = sub_15E8C(a2, a1);
  uint64_t result = sub_15E8C(a3, a2);
  if (v6 < 0)
  {
    if ((char)result < 0)
    {
      uint64_t v17 = a1[2];
      long long v18 = *(_OWORD *)a1;
      unint64_t v20 = (void *)a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v20;
    }
    else
    {
      unint64_t v14 = a1[2];
      long long v15 = *(_OWORD *)a1;
      long long v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
      uint64_t result = sub_15E8C(a3, a2);
      if ((result & 0x80) == 0) {
        return result;
      }
      uint64_t v17 = a2[2];
      long long v18 = *(_OWORD *)a2;
      long long v19 = (void *)a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v19;
    }
    *(_OWORD *)a3 = v18;
    a3[2] = v17;
  }
  else if ((char)result < 0)
  {
    uint64_t v8 = a2[2];
    long long v9 = *(_OWORD *)a2;
    CFDictionaryRef v10 = (void *)a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v10;
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
    uint64_t result = sub_15E8C(a2, a1);
    if ((result & 0x80) != 0)
    {
      CFStringRef v11 = a1[2];
      long long v12 = *(_OWORD *)a1;
      uint64_t v13 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v13;
      *(_OWORD *)a2 = v12;
      a2[2] = v11;
    }
  }
  return result;
}

__n128 sub_203AC8(uint64_t a1, void **a2, void **a3, void *a4)
{
  sub_2039A4((void **)a1, a2, a3);
  if ((sub_15E8C(a4, a3) & 0x80) != 0)
  {
    long long v9 = a3[2];
    long long v10 = *(_OWORD *)a3;
    CFStringRef v11 = (void *)a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if ((sub_15E8C(a3, a2) & 0x80) != 0)
    {
      long long v12 = a2[2];
      long long v13 = *(_OWORD *)a2;
      unint64_t v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if ((sub_15E8C(a2, (void **)a1) & 0x80) != 0)
      {
        long long v15 = *(void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        long long v16 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 sub_203B98(uint64_t a1, void **a2, void **a3, void **a4, void *a5)
{
  sub_203AC8(a1, a2, a3, a4);
  if ((sub_15E8C(a5, a4) & 0x80) != 0)
  {
    CFStringRef v11 = a4[2];
    long long v12 = *(_OWORD *)a4;
    long long v13 = (void *)a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if ((sub_15E8C(a4, a3) & 0x80) != 0)
    {
      unint64_t v14 = a3[2];
      long long v15 = *(_OWORD *)a3;
      long long v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if ((sub_15E8C(a3, a2) & 0x80) != 0)
      {
        uint64_t v17 = a2[2];
        long long v18 = *(_OWORD *)a2;
        long long v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if ((sub_15E8C(a2, (void **)a1) & 0x80) != 0)
        {
          unint64_t v20 = *(void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v21 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

BOOL sub_203CA4(uint64_t a1, void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = a2 - 3;
      if ((sub_15E8C(a2 - 3, (void **)a1) & 0x80) != 0)
      {
        CFStringRef v7 = *(void **)(a1 + 16);
        long long v8 = *(_OWORD *)a1;
        long long v9 = v6[2];
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(void *)(a1 + 16) = v9;
        *(_OWORD *)char v6 = v8;
        v6[2] = v7;
      }
      return 1;
    case 3uLL:
      sub_2039A4((void **)a1, (void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      sub_203AC8(a1, (void **)(a1 + 24), (void **)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      sub_203B98(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), a2 - 3);
      return 1;
    default:
      long long v10 = (void **)(a1 + 48);
      sub_2039A4((void **)a1, (void **)(a1 + 24), (void *)(a1 + 48));
      CFStringRef v11 = (void **)(a1 + 72);
      if ((void **)(a1 + 72) == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((sub_15E8C(v11, v10) & 0x80) != 0)
    {
      long long v17 = *(_OWORD *)v11;
      long long v18 = v11[2];
      v11[1] = 0;
      uint64_t v11[2] = 0;
      *CFStringRef v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(void *)(v15 + 88) = *(void *)(a1 + v14 + 64);
        *(unsigned char *)(v15 + 71) = 0;
        *(unsigned char *)(v15 + 48) = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if ((sub_15E8C(&v17, (void **)(v15 + 24)) & 0x80) == 0)
        {
          uint64_t v16 = a1 + v14 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 3 == a2;
      }
    }
    long long v10 = v11;
    v12 += 24;
    v11 += 3;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t sub_203E9C(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 120);
  return 1;
}

__CFString *sub_203EAC(uint64_t a1, CFDictionaryRef theDict, __CFString *a3)
{
  memset(&__p, 0, sizeof(__p));
  if (theDict)
  {
    if (CFDictionaryContainsKey(theDict, @"HW type")
      && CFDictionaryContainsKey(theDict, @"Tuning ID")
      && CFDictionaryContainsKey(theDict, @"Parameters")
      && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"Parameters"),
          CFDictionaryContainsKey(Value, @"Registers"))
      && CFDictionaryContainsKey(Value, @"Oversight")
      && CFDictionaryContainsKey(Value, @"Filters")
      && CFDictionaryContainsKey(Value, @"FIR filters"))
    {
      if (sub_386C04(theDict) != -1)
      {
        CFStringRef v7 = *(const void **)(a1 + 120);
        *(void *)(a1 + 120) = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
        if (v7) {
          CFRelease(v7);
        }
        a3 = (__CFString *)(&def_1E50E8 + 1);
        goto LABEL_29;
      }
      sub_635BC(&__p, "Invalid HW type in tuning data\n", 0x1FuLL);
      uint64_t v15 = (os_log_t *)sub_32A48(25);
      uint64_t v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unint64_t v20 = "AncManagerV2.cpp";
        __int16 v21 = 1024;
        int v22 = 376;
        __int16 v23 = 2080;
        long long v24 = p_p;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
      }
      if (a3)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFStringRef v11 = &__p;
        }
        else {
          CFStringRef v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
LABEL_22:
        CFStringAppendCString(a3, (const char *)v11, 0x8000100u);
LABEL_28:
        a3 = 0;
      }
    }
    else
    {
      sub_635BC(&__p, "Invalid ANC tuning data\n", 0x18uLL);
      long long v8 = (os_log_t *)sub_32A48(25);
      long long v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        long long v10 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        unint64_t v20 = "AncManagerV2.cpp";
        __int16 v21 = 1024;
        int v22 = 368;
        __int16 v23 = 2080;
        long long v24 = v10;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
      }
      if (a3)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFStringRef v11 = &__p;
        }
        else {
          CFStringRef v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        goto LABEL_22;
      }
    }
  }
  else
  {
    uint64_t v12 = (os_log_t *)sub_32A48(25);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      unint64_t v20 = "AncManagerV2.cpp";
      __int16 v21 = 1024;
      int v22 = 362;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d tuningData!=nullptr failed", buf, 0x12u);
    }
    if (a3)
    {
      CFStringAppendFormat(a3, 0, @"tuningData!=nullptr failed\n");
      goto LABEL_28;
    }
  }
LABEL_29:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a3;
}

void sub_204230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_204260(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 82));
  return (v1 & 1) == 0 || *(unsigned char *)(a1 + 440) != 0;
}

uint64_t sub_204284()
{
  return 1;
}

uint64_t sub_20428C()
{
  return 1;
}

uint64_t sub_204294()
{
  return 1;
}

uint64_t sub_20429C(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 81));
  return v1 & 1;
}

uint64_t sub_2042AC(uint64_t a1, int a2, __CFString *a3)
{
  if ((atomic_exchange((atomic_uchar *volatile)(a1 + 81), a2) & 1) == a2) {
    return 1;
  }
  (*(void (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  if (!a2)
  {
    long long v10 = *(NSObject **)(a1 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_2043E0;
    block[3] = &unk_627318;
    block[4] = a1;
    dispatch_sync(v10, block);
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = 1;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, 1, v7);
  if (v9)
  {
    if (a3) {
      CFStringAppendFormat(a3, 0, @"%s failed, status = 0x%x\n", "PowerOnANCBlock", v9);
    }
    return 0;
  }
  return v8;
}

uint64_t sub_2043E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_20445C;
  v3[3] = &unk_6272F8;
  void v3[4] = v1;
  return sub_61CCC((uint64_t)v3);
}

uint64_t sub_20445C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(v1 + 16) + 128))(*(void *)(v1 + 16), 0, *(void *)(v1 + 24));
  if (!result) {
    atomic_store(0, (unsigned __int8 *)(v1 + 82));
  }
  return result;
}

uint64_t sub_2044B8()
{
  return 1024;
}

float sub_2044C0()
{
  return 48000.0;
}

uint64_t sub_2044CC()
{
  return 0;
}

void sub_2044D4(uint64_t a1)
{
  sub_20450C(a1);

  operator delete();
}

void *sub_20450C(uint64_t a1)
{
  *(void *)a1 = off_6271D0;
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2) {
    notify_cancel(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 104);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 112);
  if (v4) {
    CFRelease(v4);
  }
  BOOL v5 = *(const void **)(a1 + 120);
  if (v5) {
    CFRelease(v5);
  }
  dispatch_release(*(dispatch_object_t *)(a1 + 72));
  uint64_t v6 = 312;
  do
  {
    uint64_t v7 = *(void **)(a1 + v6 + 104);
    if (v7)
    {
      *(void *)(a1 + v6 + 112) = v7;
      operator delete(v7);
    }
    v6 -= 24;
  }
  while (v6);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 96);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }

  return sub_78C00((void *)a1);
}

uint64_t **sub_2045C8(uint64_t **a1, long long *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    BOOL v5 = a2;
    uint64_t v6 = &a2[2 * a3];
    while (1)
    {
      uint64_t v7 = a1[1];
      uint64_t v8 = v4;
      if (*a1 != v4)
      {
        uint64_t v9 = a1[1];
        long long v10 = v4;
        if (v7)
        {
          do
          {
            uint64_t v8 = v9;
            uint64_t v9 = (uint64_t *)v9[1];
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t *)v10[2];
            BOOL v11 = *v8 == (void)v10;
            long long v10 = v8;
          }
          while (v11);
        }
        if ((sub_15E8C(v8 + 4, (void **)v5) & 0x80) == 0) {
          break;
        }
      }
      uint64_t v12 = (char **)v4;
      int v13 = (char **)v4;
      if (!v7) {
        goto LABEL_20;
      }
      int v13 = (char **)(v8 + 1);
      if (!v8[1])
      {
        uint64_t v12 = (char **)v8;
LABEL_20:
        uint64_t v16 = (char *)operator new(0x40uLL);
        long long v17 = v16 + 32;
        if (*((char *)v5 + 23) < 0)
        {
          sub_21E8C(v17, *(void **)v5, *((void *)v5 + 1));
        }
        else
        {
          long long v18 = *v5;
          *((void *)v16 + 6) = *((void *)v5 + 2);
          *(_OWORD *)long long v17 = v18;
        }
        *((_DWORD *)v16 + 14) = *((_DWORD *)v5 + 6);
        *(void *)uint64_t v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v12;
        *int v13 = v16;
        long long v19 = (uint64_t *)**a1;
        if (v19)
        {
          *a1 = v19;
          uint64_t v16 = *v13;
        }
        sub_46D00(a1[1], (uint64_t *)v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
LABEL_26:
      v5 += 2;
      if (v5 == v6) {
        return a1;
      }
    }
    uint64_t v12 = (char **)v4;
    int v13 = (char **)v4;
    if (v7)
    {
      uint64_t v14 = (char *)v7;
      do
      {
        while (1)
        {
          uint64_t v12 = (char **)v14;
          uint64_t v15 = v14 + 32;
          if ((sub_15E8C(v5, (void **)v14 + 4) & 0x80) == 0) {
            break;
          }
          uint64_t v14 = *v12;
          int v13 = v12;
          if (!*v12) {
            goto LABEL_20;
          }
        }
        if ((sub_15E8C(v15, (void **)v5) & 0x80) == 0) {
          goto LABEL_26;
        }
        int v13 = v12 + 1;
        uint64_t v14 = v12[1];
      }
      while (v14);
    }
    goto LABEL_20;
  }
  return a1;
}

void sub_204764(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_8F90(*v2);
  _Unwind_Resume(a1);
}

void *sub_20478C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v5 = result;
    if (a4 >> 62) {
      sub_60548();
    }
    uint64_t result = operator new(4 * a4);
    uint64_t v8 = result;
    *BOOL v5 = result;
    v5[1] = result;
    v5[2] = (char *)result + 4 * a4;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_204814(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_204830(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0;
    uint64_t v7 = a2 + 32 * a3;
    uint64_t v8 = (uint64_t *)(a1 + 1);
    while (1)
    {
      size_t v9 = v4;
      if (v8 == v4) {
        goto LABEL_9;
      }
      long long v10 = v6;
      BOOL v11 = v4;
      if (v6)
      {
        do
        {
          size_t v9 = v10;
          long long v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          size_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          BOOL v11 = v9;
        }
        while (v12);
      }
      unint64_t v13 = *(void *)v5;
      if ((unint64_t)v9[4] < *(void *)v5)
      {
LABEL_9:
        uint64_t v14 = (uint64_t **)(v6 ? v9 : v4);
        uint64_t v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }
      else
      {
        uint64_t v14 = (uint64_t **)v4;
        uint64_t v15 = (uint64_t **)v4;
        if (v6)
        {
          uint64_t v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              uint64_t v14 = (uint64_t **)v6;
              unint64_t v19 = v6[4];
              if (v13 >= v19) {
                break;
              }
              uint64_t v6 = *v14;
              uint64_t v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v19 >= v13) {
              break;
            }
            uint64_t v15 = v14 + 1;
            uint64_t v6 = v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = (uint64_t *)operator new(0x40uLL);
        uint64_t v17 = *(void *)v5;
        v16[5] = 0;
        v16[4] = v17;
        v16[6] = 0;
        v16[7] = 0;
        sub_20478C(v16 + 5, *(const void **)(v5 + 8), *(void *)(v5 + 16), (uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 2);
        *uint64_t v16 = 0;
        v16[1] = 0;
        v16[2] = (uint64_t)v14;
        *uint64_t v15 = v16;
        long long v18 = (uint64_t *)**a1;
        if (v18)
        {
          *a1 = v18;
          uint64_t v16 = *v15;
        }
        sub_46D00(a1[1], v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 32;
      if (v5 == v7) {
        break;
      }
      uint64_t v8 = *a1;
      uint64_t v6 = a1[1];
    }
  }
  return a1;
}

void sub_2049B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_7F264(*v2);
  _Unwind_Resume(a1);
}

void sub_2049D8()
{
}

void sub_204A48()
{
  if (v0) {
    std::__shared_weak_count::__release_weak(v0);
  }
  operator delete();
}

void sub_204A78(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = -1;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 32) = 256;
  *(_DWORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = off_6271D0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(unsigned char *)(a1 + 440) = 1;
  operator new();
}

void sub_204D3C(_Unwind_Exception *a1)
{
  uint64_t v3 = 39;
  while (1)
  {
    uint64_t v4 = (void *)v1[v3 + 13];
    if (v4)
    {
      v1[v3 + 14] = v4;
      operator delete(v4);
    }
    v3 -= 3;
    if (!(v3 * 8))
    {
      uint64_t v5 = (std::__shared_weak_count *)v1[12];
      if (v5) {
        std::__shared_weak_count::__release_weak(v5);
      }
      sub_78C00(v1);
      _Unwind_Resume(a1);
    }
  }
}

void *sub_204DC8(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a3;
  sub_D854C((uint64_t)(a1 + 2), a2);
  *(_OWORD *)(a1 + 7) = 0u;
  uint64_t v4 = (char **)(a1 + 7);
  a1[12] = 0;
  *(_OWORD *)(a1 + 9) = 0u;
  *((_DWORD *)a1 + 22) = 0;
  sub_297FFC((uint64_t)(a1 + 14), @"Sidetone");
  a1[14] = off_61FA88;
  a1[20] = a1;
  strcpy(buf, "xfuaedislppa");
  buf[13] = 0;
  *(_WORD *)uint64_t v47 = 0;
  *(void *)&v47[2] = a1;
  sub_2979B0(a1 + 14, 0, (unint64_t)buf);
  if (AUPBRegisterAU())
  {
    uint64_t v6 = a1[17];
    uint64_t v5 = a1[18];
    if (v5 != v6)
    {
      uint64_t v7 = v5 - (v6 + 24);
      if (v5 != v6 + 24) {
        memmove((void *)a1[17], (const void *)(v6 + 24), v5 - (v6 + 24));
      }
      a1[18] = v6 + v7;
    }
  }
  uint64_t v8 = (os_log_t *)sub_32A48(17);
  size_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(CFStringRef *__return_ptr))(*(void *)*a1 + 128))(&theString);
    sub_21B7C(__p, theString);
    if (v45 >= 0) {
      long long v10 = __p;
    }
    else {
      long long v10 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)uint64_t v47 = 84;
    *(_WORD *)&v47[4] = 2080;
    *(void *)&v47[6] = v10;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sidetone device is %s", buf, 0x1Cu);
    if (v45 < 0) {
      operator delete(__p[0]);
    }
    sub_72924((uint64_t)&theString);
  }
  CFStringRef theString = (CFStringRef)0x7074727573716465;
  int v43 = 0;
  if ((*(unsigned int (**)(void, CFStringRef *))(*(void *)*a1 + 16))(*a1, &theString))
  {
    __p[0] = 0;
    int v41 = 8;
    (*(void (**)(void, CFStringRef *, void, void, int *, void **))(*(void *)*a1 + 40))(*a1, &theString, 0, 0, &v41, __p);
    *(void **)AudioObjectPropertyAddress buf = __p[0];
    *(_WORD *)&buf[8] = 1;
    sub_1D4800((const __CFDictionary *)__p[0], @"MaxNumberFilters", a1 + 10);
    if (*(void *)buf)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)buf, @"SampleRate");
      CFNumberRef v12 = Value;
      if (Value)
      {
        CFTypeID v13 = CFGetTypeID(Value);
        if (v13 == CFNumberGetTypeID()) {
          CFNumberGetValue(v12, kCFNumberFloat64Type, a1 + 1);
        }
      }
    }
    unint64_t v14 = *((unsigned int *)a1 + 20);
    uint64_t v16 = (unsigned char *)a1[7];
    uint64_t v15 = (char *)a1[8];
    unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - v16) >> 2);
    unint64_t v18 = v14 - v17;
    if (v14 <= v17)
    {
      if (v14 >= v17)
      {
LABEL_39:
        int v32 = *((_DWORD *)a1 + 20);
        if (v32)
        {
          uint64_t v33 = (uint64_t)(*v4 + 8);
          uint64_t v34 = *((unsigned int *)a1 + 20);
          do
          {
            *(_DWORD *)(v33 + 8) = 1056964608;
            *(void *)(v33 - 8) = 1;
            *(void *)uint64_t v33 = 1148846080;
            v33 += 20;
            --v34;
          }
          while (v34);
        }
        uint64_t v35 = (48 * v32) | 8u;
        *((_DWORD *)a1 + 26) = v35;
        long long v36 = (void *)a1[12];
        if (v36)
        {
          free(v36);
          a1[12] = 0;
        }
        long long v37 = malloc_type_malloc(56 * v35, 0x7C51E058uLL);
        if (!v37)
        {
          exceptiouint64_t n = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
          long long v40 = std::bad_alloc::bad_alloc(exception);
        }
        a1[12] = v37;
        sub_80594((uint64_t)buf);
        goto LABEL_46;
      }
      long long v31 = &v16[20 * v14];
    }
    else
    {
      uint64_t v19 = a1[9];
      if (0xCCCCCCCCCCCCCCCDLL * ((v19 - (uint64_t)v15) >> 2) < v18)
      {
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (uint64_t)v16) >> 2);
        unint64_t v21 = 0x999999999999999ALL * ((v19 - (uint64_t)v16) >> 2);
        if (v21 > v14) {
          unint64_t v14 = v21;
        }
        if (v20 >= 0x666666666666666) {
          unint64_t v22 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v22 = v14;
        }
        if (v22 > 0xCCCCCCCCCCCCCCCLL) {
          sub_60560();
        }
        __int16 v23 = (char *)operator new(20 * v22);
        long long v24 = &v23[4 * ((v15 - v16) >> 2)];
        double v25 = &v23[20 * v22];
        size_t v26 = 20 * ((20 * v18 - 20) / 0x14) + 20;
        bzero(v24, v26);
        uint64_t v27 = &v24[v26];
        if (v15 != v16)
        {
          do
          {
            long long v28 = *(_OWORD *)(v15 - 20);
            *((_DWORD *)v24 - 1) = *((_DWORD *)v15 - 1);
            *(_OWORD *)(v24 - 20) = v28;
            v24 -= 20;
            v15 -= 20;
          }
          while (v15 != v16);
          uint64_t v15 = *v4;
        }
        a1[7] = v24;
        a1[8] = v27;
        a1[9] = v25;
        if (v15) {
          operator delete(v15);
        }
        goto LABEL_39;
      }
      bzero((void *)a1[8], 20 * ((20 * v18 - 20) / 0x14) + 20);
      long long v31 = &v15[20 * ((20 * v18 - 20) / 0x14) + 20];
    }
    a1[8] = v31;
    goto LABEL_39;
  }
  long long v29 = (os_log_t *)sub_32A48(24);
  BOOL v30 = *v29;
  if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 128))(__p);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)uint64_t v47 = 111;
    *(_WORD *)&v47[4] = 2112;
    *(void **)&v47[6] = __p[0];
    _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Sidetone device (uid: \"%@\") does not support kAudioDevicePropertySidetoneEQDescriptor", buf, 0x1Cu);
    sub_72924((uint64_t)__p);
  }
LABEL_46:
  *((_DWORD *)a1 + 42) = -1;
  a1[22] = @"Untitled";
  CFRetain(@"Untitled");
  return a1;
}

void sub_2053A0(_Unwind_Exception *a1)
{
  sub_A8D98(v3);
  uint64_t v6 = *(void **)(v1 + 96);
  if (v6)
  {
    free(v6);
    *(void *)(v1 + 96) = 0;
  }
  uint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 64) = v7;
    operator delete(v7);
  }
  sub_D7EC0(v2);
  _Unwind_Resume(a1);
}

void sub_205428(double *a1, double a2)
{
  if (*((void *)a1 + 5) && *((_DWORD *)a1 + 20))
  {
    int v4 = a2;
    if (!sub_D7374((void *)a1 + 2, a2))
    {
      uint64_t v5 = (uint64_t *)*((void *)a1 + 4);
      double v6 = 0.0;
      if (v5)
      {
        while (1)
        {
          int v7 = *((_DWORD *)v5 + 4);
          if ((double)v7 > a2) {
            break;
          }
          double v6 = (double)v7;
          uint64_t v5 = (uint64_t *)*v5;
          if (!v5) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        int v7 = 0;
      }
      if (v6 == 0.0) {
        int v4 = v7;
      }
      else {
        int v4 = v6;
      }
    }
    uint64_t v8 = sub_D7374((void *)a1 + 2, v4);
    size_t v9 = (const void *)sub_3853D4((int *)v8 + 6);
    if (sub_205658((uint64_t)a1, v9))
    {
      long long v10 = (os_log_t *)sub_32A48(24);
      BOOL v11 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
          __int16 v17 = 1024;
          int v18 = 158;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Restore State Failed", buf, 0x12u);
        }
      }
    }
  }
  else
  {
    int v14 = 4;
    int v15 = 0;
    strcpy(buf, "neTSurtp");
    buf[9] = 0;
    *(_WORD *)&_DWORD buf[10] = 0;
    uint64_t v12 = 0x7074727561736573;
    int v13 = 0;
    if ((*(unsigned int (**)(void))(**(void **)a1 + 16))()
      && ((*(void (**)(void, unsigned char *, void, void, int *, int *))(**(void **)a1 + 40))(*(void *)a1, buf, 0, 0, &v14, &v15), v15)|| (*(unsigned int (**)(void, uint64_t *))(**(void **)a1 + 16))(*(void *)a1, &v12))
    {
      sub_205920(a1);
    }
  }
}

uint64_t sub_205658(uint64_t a1, CFTypeRef cf)
{
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 != CFDictionaryGetTypeID()) {
    return 4294956445;
  }
  CFDictionaryRef v21 = (const __CFDictionary *)cf;
  __int16 v22 = 0;
  if (cf
    && (Value = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)cf, @"data"), (CFDataRef v6 = Value) != 0)
    && (CFTypeID v7 = CFGetTypeID(Value), v7 == CFDataGetTypeID()))
  {
    BytePtr = CFDataGetBytePtr(v6);
    unsigned int v9 = *((_DWORD *)BytePtr + 2);
    if (v9)
    {
      unsigned int v10 = bswap32(v9);
      BOOL v11 = (unsigned int *)(BytePtr + 12);
      uint64_t v12 = 4294956418;
      do
      {
        float v13 = COERCE_FLOAT(bswap32(v11[1]));
        if (*v11)
        {
          unsigned int v14 = bswap32(*v11);
          if (v14 >= 0x3E8)
          {
            unsigned int v15 = v14 % 0x3E8;
            if (v14 % 0x3E8 >= *(_DWORD *)(a1 + 80))
            {
              uint64_t v12 = 4294956418;
              goto LABEL_36;
            }
            unsigned int v14 = 1000 * (v14 / 0x3E8);
          }
          else
          {
            unsigned int v15 = 0;
          }
          if ((int)v14 <= 2999)
          {
            if (v14 == 1000)
            {
              *(_DWORD *)(*(void *)(a1 + 56) + 20 * v15) = v13;
            }
            else
            {
              if (v14 != 2000) {
                goto LABEL_36;
              }
              *(_DWORD *)(*(void *)(a1 + 56) + 20 * v15 + 4) = v13;
            }
          }
          else
          {
            switch(v14)
            {
              case 0xBB8u:
                *(float *)(*(void *)(a1 + 56) + 20 * v15 + 8) = v13;
                break;
              case 0xFA0u:
                *(float *)(*(void *)(a1 + 56) + 20 * v15 + 12) = v13;
                break;
              case 0x1388u:
                *(float *)(*(void *)(a1 + 56) + 20 * v15 + 16) = v13;
                break;
              default:
                goto LABEL_36;
            }
          }
        }
        else
        {
          *(float *)(a1 + 84) = v13;
        }
        v11 += 2;
        --v10;
      }
      while (v10);
    }
    sub_205920((double *)a1);
    uint64_t v16 = *(const void **)(a1 + 176);
    if (v16) {
      CFRelease(v16);
    }
    *(void *)AudioObjectPropertyAddress buf = 0;
    if (sub_1D486C(v21, @"name", (const __CFDictionary **)buf)) {
      CFStringRef v17 = *(const __CFString **)buf;
    }
    else {
      CFStringRef v17 = @"Untitled";
    }
    *(void *)(a1 + 176) = v17;
    *(_DWORD *)(a1 + 168) = -1;
    CFRetain(v17);
    uint64_t v12 = 0;
  }
  else
  {
    int v18 = (os_log_t *)sub_32A48(24);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
      __int16 v24 = 1024;
      int v25 = 1013;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d No Data read in Restore State call", buf, 0x12u);
    }
    uint64_t v12 = 4294956425;
  }
LABEL_36:
  sub_80594((uint64_t)&v21);
  return v12;
}

void sub_2058FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_205920(double *a1)
{
  uint64_t v78 = 0x7074727573716464;
  int v79 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)a1 + 16))(*(void *)a1, &v78))
  {
    uint64_t v4 = *((unsigned int *)a1 + 20);
    if (v4)
    {
      uint64_t v5 = (float64x2_t *)operator new(40 * v4);
      CFDataRef v6 = v5;
      CFTypeID v7 = (char *)v5;
      do
      {
        *(void *)CFTypeID v7 = 0;
        *((void *)v7 + 1) = 0;
        *((void *)v7 + 3) = 0;
        *((void *)v7 + 4) = 0;
        *((void *)v7 + 2) = 0x3FF0000000000000;
        v7 += 40;
      }
      while (v7 != (char *)v5 + 40 * v4);
      unint64_t v8 = 0;
      v2.n128_f64[0] = a1[1];
      v3.n128_u64[0] = 0x3FDF5C28F5C28F5CLL;
      double v9 = v2.n128_f64[0] * 0.49;
      uint64_t v10 = 8;
      f64 = (void *)v5->f64;
      do
      {
        uint64_t v12 = *((void *)a1 + 7);
        uint64_t v13 = v12 + v10;
        if (*(_DWORD *)(v12 + v10 - 8) || (v2.n128_f64[0] = *(float *)(v12 + v10), v9 < v2.n128_f64[0]))
        {
LABEL_26:
          void *f64 = 0;
          f64[1] = 0;
          f64[3] = 0;
          f64[4] = 0;
          f64[2] = 0x3FF0000000000000;
        }
        else
        {
          int v14 = *(_DWORD *)(v13 - 4);
          float v15 = *(float *)(v13 + 4);
          v3.n128_u32[0] = *(_DWORD *)(v13 + 8);
          double v16 = 0.0;
          int v17 = 1;
          v2.n128_f64[0] = v2.n128_f64[0] * 6.28318531 / a1[1];
          switch(v14)
          {
            case 0:
              double v16 = v15;
              int v17 = 11;
              goto LABEL_19;
            case 1:
            case 2:
            case 7:
            case 8:
              if (v2.n128_f64[0] <= 0.0) {
                goto LABEL_26;
              }
              double v18 = v15;
              if (v2.n128_f64[0] > 3.11017673) {
                v2.n128_f64[0] = 3.11017673;
              }
              uint64_t v19 = (uint64_t)f64;
              double v20 = 0.707106781;
              goto LABEL_25;
            case 3:
              goto LABEL_19;
            case 4:
              int v17 = 2;
              goto LABEL_19;
            case 5:
              int v17 = 3;
              goto LABEL_19;
            case 6:
              int v17 = 4;
              goto LABEL_19;
            case 9:
              double v16 = v15;
              int v17 = 7;
              goto LABEL_19;
            case 10:
              double v16 = v15;
              int v17 = 8;
LABEL_19:
              if (v2.n128_f64[0] <= 0.0 || v3.n128_f32[0] <= 0.0) {
                goto LABEL_26;
              }
              double v21 = v3.n128_f32[0] * 0.34657359;
              if (v2.n128_f64[0] <= 3.11017673) {
                double v22 = v2.n128_f64[0];
              }
              else {
                double v22 = 3.11017673;
              }
              double v23 = v21 * v22;
              long double v24 = sin(v22);
              v2.n128_f64[0] = sinh(v23 / v24);
              double v20 = 1.0 / (v2.n128_f64[0] + v2.n128_f64[0]);
              uint64_t v19 = (uint64_t)f64;
              int v14 = v17;
              v2.n128_f64[0] = v22;
              double v18 = v16;
LABEL_25:
              sub_1E2F64(v19, v14, v2.n128_f64[0], v20, v18);
              break;
            default:
              goto LABEL_26;
          }
        }
        ++v8;
        unint64_t v25 = *((unsigned int *)a1 + 20);
        f64 += 5;
        v10 += 20;
      }
      while (v8 < v25);
      if (v25)
      {
        uint64_t v26 = 0;
        uint64_t v27 = (_DWORD *)*((void *)a1 + 12);
        long long v28 = v6 + 2;
        v2.n128_u64[0] = -1.0;
        v3.n128_u64[0] = 0x3CD203AF9EE75616;
        do
        {
          long long v29 = &v27[v26];
          float64x2_t v30 = v28[-2];
          *(float64x2_t *)(v29 + 10) = v30;
          float64x2_t v31 = v28[-1];
          *((float64x2_t *)v29 + 1) = v31;
          double v32 = v28->f64[0];
          long long v28 = (float64x2_t *)((char *)v28 + 40);
          *((double *)v29 + 4) = v32;
          void v29[2] = fabs(v31.f64[0] + -1.0) + vaddvq_f64(vabsq_f64(v30)) + fabs(v31.f64[1]) + fabs(v32) < 1.0e-15;
          v26 += 12;
        }
        while (12 * v25 != v26);
LABEL_37:
        *uint64_t v27 = 0;
        v27[1] = v25;
        (*(void (**)(void, uint64_t *, void, void, void, __n128, __n128))(**(void **)a1 + 48))(*(void *)a1, &v78, 0, 0, *((unsigned int *)a1 + 26), v2, v3);
        if (v6) {
          operator delete(v6);
        }
        goto LABEL_39;
      }
    }
    else
    {
      CFDataRef v6 = 0;
    }
    LODWORD(v25) = 0;
    uint64_t v27 = (_DWORD *)*((void *)a1 + 12);
    goto LABEL_37;
  }
  uint64_t v33 = (os_log_t *)sub_32A48(24);
  uint64_t v34 = *v33;
  if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
    __int16 v81 = 1024;
    int v82 = 309;
    _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d sidetone device does not support kAudioDevicePropertySidetoneEQData, could not update the sidetone device", buf, 0x12u);
  }
LABEL_39:
  uint64_t v76 = 0x7074727573716764;
  int v77 = 0;
  uint64_t v74 = 0x7074727561736573;
  int v75 = 0;
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)a1 + 16))(*(void *)a1, &v76))
  {
    uint64_t v35 = (os_log_t *)sub_32A48(24);
    long long v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
    {
      double v37 = *((float *)a1 + 21);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
      __int16 v81 = 1024;
      int v82 = 318;
      __int16 v83 = 2048;
      double v84 = v37;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SidetoneEQGain being set to %f", buf, 0x1Cu);
    }
    (*(void (**)(void, uint64_t *, void, void, uint64_t, uint64_t))(**(void **)a1 + 48))(*(void *)a1, &v76, 0, 0, 4, (uint64_t)a1 + 84);
  }
  else if ((*(unsigned int (**)(void, uint64_t *))(**(void **)a1 + 16))(*(void *)a1, &v74))
  {
    uint64_t v72 = 0x7074727561737673;
    int v73 = 0;
    CFArrayRef v71 = 0;
    int v70 = 8;
    (*(void (**)(void, uint64_t *, void, void, int *, const __CFArray **))(**(void **)a1 + 40))(*(void *)a1, &v72, 0, 0, &v70, &v71);
    CFArrayRef v38 = v71;
    if (v71)
    {
      unsigned int v39 = 0;
      CFArrayRef theArray = v71;
      __int16 v69 = 1;
LABEL_58:
      LODWORD(v38) = CFArrayGetCount(v38);
      while (v39 < v38)
      {
        int v67 = 0;
        if ((sub_1D1B30(&theArray, v39, &v67) & 1) == 0)
        {
          int64_t v55 = (os_log_t *)sub_32A48(13);
          int64_t v56 = *v55;
          if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
            __int16 v81 = 1024;
            int v82 = 335;
            _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Channels CFArray contained a non-UInt32 value.\"", buf, 0x12u);
          }
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = &off_6414D8;
          exception[2] = 2003329396;
        }
        double v40 = *a1;
        *(void *)AudioObjectPropertyAddress buf = 0x707472756D766423;
        *(_DWORD *)&buf[8] = v67;
        if ((*(unsigned int (**)(double, unsigned char *))(**(void **)&v40 + 16))(COERCE_DOUBLE(*(void *)&v40), buf))
        {
          double v65 = 0.0;
          double v66 = 0.0;
          uint64_t v62 = 0x7074727576646223;
          int v63 = v67;
          int v64 = 16;
          (*(void (**)(void, uint64_t *, void, void, int *, double *))(**(void **)a1 + 40))(*(void *)a1, &v62, 0, 0, &v64, &v65);
          float v41 = fmax(fmin(v66, -28.0), v65);
          float v61 = v41;
          long long v42 = (os_log_t *)sub_32A48(24);
          int v43 = *v42;
          if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
            __int16 v81 = 1024;
            int v82 = 350;
            __int16 v83 = 2048;
            double v84 = v61;
            _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d kAudioDevicePropertyPlayThruVolumeDecibels being set to %f", buf, 0x1Cu);
          }
          double v44 = *a1;
          *(void *)AudioObjectPropertyAddress buf = 0x707472756D766462;
          *(_DWORD *)&buf[8] = v67;
          (*(void (**)(double, unsigned char *, void, void, uint64_t, float *))(**(void **)&v44 + 48))(COERCE_DOUBLE(*(void *)&v44), buf, 0, 0, 4, &v61);
        }
        else
        {
          LODWORD(v65) = -1042284544;
          char v45 = (os_log_t *)sub_32A48(24);
          BOOL v46 = *v45;
          if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
            __int16 v81 = 1024;
            int v82 = 358;
            __int16 v83 = 2048;
            double v84 = *(float *)&v65;
            _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d kAudioDevicePropertyPlayThruVolumeDecibels being set to %f", buf, 0x1Cu);
          }
          double v47 = *a1;
          *(void *)AudioObjectPropertyAddress buf = 0x707472756D766462;
          *(_DWORD *)&buf[8] = v67;
          (*(void (**)(double, unsigned char *, void, void, uint64_t, double *))(**(void **)&v47 + 48))(COERCE_DOUBLE(*(void *)&v47), buf, 0, 0, 4, &v65);
        }
        ++v39;
        CFArrayRef v38 = theArray;
        if (theArray) {
          goto LABEL_58;
        }
      }
      sub_3D61C((uint64_t)&theArray);
    }
  }
  else
  {
    CFStringRef v48 = (os_log_t *)sub_32A48(24);
    unint64_t v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
      __int16 v81 = 1024;
      int v82 = 366;
      _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d Sidetone device does not support kAudioDevicePropertySidetoneEQGainDecibelValue", buf, 0x12u);
    }
  }
  LODWORD(v62) = 1;
  double v65 = 5.07911951e233;
  LODWORD(v66) = 0;
  if ((*(unsigned int (**)(void, double *))(**(void **)a1 + 16))(*(void *)a1, &v65))
  {
    if (!*((_DWORD *)a1 + 22)) {
      (*(void (**)(void, double *, void, void, uint64_t, uint64_t *))(**(void **)a1 + 48))(*(void *)a1, &v65, 0, 0, 4, &v62);
    }
  }
  else if ((*(unsigned int (**)(void, uint64_t *))(**(void **)a1 + 16))(*(void *)a1, &v74))
  {
    if (!*((_DWORD *)a1 + 22))
    {
      uint64_t v72 = 0;
      int v70 = 0;
      LODWORD(v71) = 8;
      (*(void (**)(void, uint64_t *, void, void, const __CFArray **, uint64_t *))(**(void **)a1 + 40))(*(void *)a1, &v74, 0, 0, &v71, &v72);
      CFArrayRef v50 = (const __CFArray *)v72;
      if (v72)
      {
        unsigned int v51 = 0;
        CFArrayRef theArray = (CFArrayRef)v72;
        __int16 v69 = 1;
LABEL_73:
        LODWORD(v50) = CFArrayGetCount(v50);
        while (v51 < v50)
        {
          int v67 = 0;
          if ((sub_1D1B30(&theArray, v51, &v67) & 1) == 0)
          {
            uint64_t v58 = (os_log_t *)sub_32A48(13);
            unint64_t v59 = *v58;
            if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
              __int16 v81 = 1024;
              int v82 = 398;
              _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Channels CFArray contained a non-UInt32 value.\"", buf, 0x12u);
            }
            unint64_t v60 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v60 = &off_6414D8;
            v60[2] = 2003329396;
          }
          double v52 = *a1;
          *(void *)AudioObjectPropertyAddress buf = 0x707472756D757465;
          *(_DWORD *)&buf[8] = v67;
          (*(void (**)(double, unsigned char *, void, void, uint64_t, int *))(**(void **)&v52 + 48))(COERCE_DOUBLE(*(void *)&v52), buf, 0, 0, 4, &v70);
          ++v51;
          CFArrayRef v50 = theArray;
          if (theArray) {
            goto LABEL_73;
          }
        }
        sub_3D61C((uint64_t)&theArray);
      }
    }
  }
  else
  {
    uint64_t v53 = (os_log_t *)sub_32A48(24);
    long long v54 = *v53;
    if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
      __int16 v81 = 1024;
      int v82 = 406;
      _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to enable sidetone device", buf, 0x12u);
    }
  }
}

void sub_206540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17) {
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef sub_2065D4(uint64_t **a1)
{
  int v20 = 0;
  uint64_t v18 = 0x707472755354656ELL;
  int v19 = 0;
  uint64_t v16 = 0x7074727561736573;
  int v17 = 0;
  int v2 = (*(uint64_t (**)(uint64_t *, uint64_t *))(**a1 + 16))(*a1, &v18);
  uint64_t v3 = **a1;
  if (v2) {
    return (const __CFArray *)(*(uint64_t (**)(void))(v3 + 48))();
  }
  CFArrayRef result = (const __CFArray *)(*(uint64_t (**)(void))(v3 + 16))();
  if (result)
  {
    CFArrayRef theArray = 0;
    int v13 = 1;
    int v14 = 8;
    (*(void (**)(uint64_t *, uint64_t *, void, void, int *, CFArrayRef *))(**a1 + 40))(*a1, &v16, 0, 0, &v14, &theArray);
    CFArrayRef result = theArray;
    if (theArray)
    {
      unsigned int v5 = 0;
      CFArrayRef v11 = theArray;
      __int16 v12 = 1;
LABEL_6:
      LODWORD(result) = CFArrayGetCount(result);
      while (v5 < result)
      {
        int v10 = 0;
        if ((sub_1D1B30(&v11, v5, &v10) & 1) == 0)
        {
          CFTypeID v7 = (os_log_t *)sub_32A48(13);
          unint64_t v8 = *v7;
          if (*v7)
          {
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "SidetoneManager.cpp";
              __int16 v22 = 1024;
              int v23 = 211;
              _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Channels CFArray contained a non-UInt32 value.\"", buf, 0x12u);
            }
          }
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          *(void *)exceptiouint64_t n = &off_6414D8;
          exception[2] = 2003329396;
        }
        CFDataRef v6 = *a1;
        *(void *)AudioObjectPropertyAddress buf = 0x707472756D757465;
        *(_DWORD *)&buf[8] = v10;
        (*(void (**)(uint64_t *, unsigned char *, void, void, uint64_t, int *))(*v6 + 48))(v6, buf, 0, 0, 4, &v13);
        ++v5;
        CFArrayRef result = v11;
        if (v11) {
          goto LABEL_6;
        }
      }
      return (const __CFArray *)sub_3D61C((uint64_t)&v11);
    }
  }
  return result;
}

void sub_2068A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __int16 v12 = (os_log_t *)sub_32A48(24);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v11 - 64) = 136315394;
      *(void *)(v11 - 60) = "SidetoneManager.cpp";
      *(_WORD *)(v11 - 52) = 1024;
      *(_DWORD *)(v11 - 50) = 219;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to disable the sidetone device", (uint8_t *)(v11 - 64), 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x2067B8);
  }
  _Unwind_Resume(exception_object);
}

void sub_20697C()
{
  sub_20A0D0();
  char v8 = 1;
  *(_OWORD *)double v9 = 0u;
  *(_OWORD *)int v10 = 0u;
  long long v11 = 0u;
  *(_DWORD *)__int16 v12 = 0;
  void v12[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
  v12[5] = 1;
  *(void *)&v12[6] = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  float v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  v96[0] = 0;
  v96[40] = 0;
  v96[48] = 0;
  v96[120] = 0;
  v96[128] = 0;
  v96[168] = 0;
  LOBYTE(v97) = 0;
  char v98 = 0;
  LOBYTE(v99) = 0;
  char v100 = 0;
  LOBYTE(v101) = 0;
  char v102 = 0;
  LOBYTE(v103) = 0;
  char v104 = 0;
  char v105 = 0;
  char v106 = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 0;
  char v131 = 1;
  char v132 = 0;
  char v133 = 0;
  LOBYTE(v134) = 0;
  char v135 = 0;
  LOBYTE(v136) = 0;
  char v137 = 0;
  LOBYTE(v138) = 0;
  char v139 = 0;
  LOBYTE(v140) = 0;
  char v141 = 0;
  __int16 v142 = 0;
  LOBYTE(v143) = 0;
  char v144 = 0;
  LOBYTE(v145) = 0;
  char v146 = 0;
  LOBYTE(v147) = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  char v152 = 0;
  LOBYTE(v153) = 0;
  char v154 = 0;
  LOBYTE(v155) = 0;
  char v156 = 0;
  LOBYTE(v157) = 0;
  char v158 = 0;
  LOBYTE(v159) = 0;
  char v160 = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  char v164 = 0;
  LOBYTE(__p) = 0;
  char v167 = 0;
  char v168 = 0;
  char v169 = 0;
  char v170 = 0;
  char v171 = 0;
  char v172 = 0;
  char v173 = 0;
  int v174 = 256;
  char v175 = 0;
  char v176 = 0;
  char v177 = 0;
  char v178 = 0;
  char v179 = 0;
  char v180 = 0;
  __int16 v181 = 0;
  char v4 = 1;
  int v3 = 1953460273;
  char v6 = 1;
  int v5 = 1;
  int v7 = 2;
  LODWORD(__src) = 1;
  sub_8732C((char *)v9, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x200000001;
  sub_8732C((char *)&v10[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  *(void *)__int16 v12 = 0x101010101000100;
  *(_WORD *)&v12[12] = 257;
  int v14 = 16843008;
  int v63 = -1047527424;
  char v64 = 1;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v92 = 1090519040;
  char v93 = 1;
  int v82 = -1040187392;
  char v83 = 1;
  int v65 = 0;
  char v66 = 1;
  int v94 = 16843009;
  if (!v98) {
    char v98 = 1;
  }
  int v97 = 1836282987;
  if (!v100) {
    char v100 = 1;
  }
  int v99 = 2;
  if (!v102) {
    char v102 = 1;
  }
  int v101 = 2;
  if (!v104) {
    char v104 = 1;
  }
  int v103 = 4;
  if (!v144) {
    char v144 = 1;
  }
  int v143 = 2;
  if (!v148) {
    char v148 = 1;
  }
  int v147 = 2;
  if (!v146) {
    char v146 = 1;
  }
  int v145 = 2;
  int v134 = 41;
  char v135 = 1;
  int v136 = 3;
  char v137 = 1;
  int v138 = 25;
  char v139 = 1;
  int v140 = 41;
  char v141 = 1;
  __int16 v142 = 257;
  int v153 = 41;
  char v154 = 1;
  int v155 = 41;
  char v156 = 1;
  int v157 = 23;
  char v158 = 1;
  int v159 = 7;
  char v160 = 1;
  sub_208140(&__src, 93);
  if (v167)
  {
    if (SHIBYTE(v166) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    char v166 = v190;
  }
  else
  {
    long long __p = __src;
    char v166 = v190;
    char v167 = 1;
  }
  __int16 v17 = 257;
  sub_21C8C(&v187, "");
  sub_208ED4(__dst);
  sub_21C8C(&v184, off_648B50);
  sub_21C8C(&v183, "AU");
  sub_21C8C(&v182, "VAD");
  sub_6D364((char *)&__src, &v187, (uint64_t)__dst, &v184, &v183, &v182);
  sub_6D600((uint64_t)v95, &__src);
  if (v194 < 0) {
    operator delete(v193);
  }
  if (v192 < 0) {
    operator delete(v191);
  }
  if (SHIBYTE(v190) < 0) {
    operator delete((void *)__src);
  }
  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v182.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v183.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v184.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v186) < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v188) < 0) {
    operator delete((void *)v187);
  }
  int v0 = operator new(4uLL);
  *int v0 = 1;
  *((void *)&v187 + 1) = v0 + 1;
  uint64_t v188 = v0 + 1;
  *(void *)&long long v187 = v0;
  uint64_t v1 = operator new(8uLL);
  *uint64_t v1 = 0x200000001;
  __dst[1] = v1 + 1;
  char v186 = v1 + 1;
  __dst[0] = v1;
  sub_424954((uint64_t)&__src);
  sub_6D31C((uint64_t)v96, (uint64_t *)&__src);
  sub_6C7E4(v190);
  int v2 = (void *)__src;
  *(void *)&long long __src = 0;
  if (v2) {
    operator delete(v2);
  }
  operator delete(v1);
  operator delete(v0);
  sub_402E04(&v3);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v10[1])
  {
    *(void **)&long long v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_207140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2071FC()
{
  sub_20A0D0();
  char v8 = 1;
  *(_OWORD *)double v9 = 0u;
  *(_OWORD *)int v10 = 0u;
  long long v11 = 0u;
  *(_DWORD *)__int16 v12 = 0;
  void v12[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
  v12[5] = 1;
  *(void *)&v12[6] = 0;
  __int16 v13 = 0;
  int v14 = 16777473;
  v16[0] = 0;
  v16[1] = 0;
  float v15 = v16;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = -1044381696;
  char v20 = 1;
  int v21 = -1044381696;
  char v22 = 1;
  int v23 = 0;
  char v24 = 1;
  int v25 = -1056964608;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1033371648;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1044381696;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = -1055916032;
  char v46 = 1;
  int v47 = -1033371648;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = -1055916032;
  char v56 = 1;
  int v57 = -1033371648;
  char v58 = 1;
  int v59 = 0;
  char v60 = 1;
  int v61 = -1055916032;
  char v62 = 1;
  int v63 = -1043333120;
  char v64 = 1;
  int v65 = 0x40000000;
  char v66 = 1;
  int v67 = 16777472;
  int v68 = 0;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1103626240;
  char v73 = 1;
  int v74 = 0;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = 1094713344;
  char v79 = 1;
  int v80 = 1094713344;
  char v81 = 1;
  int v82 = -1061158912;
  char v83 = 1;
  int v84 = 1107296256;
  char v85 = 1;
  int v86 = 1107296256;
  char v87 = 1;
  int v88 = 1092616192;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  int v94 = 16777472;
  v95[0] = 0;
  v95[72] = 0;
  v96[0] = 0;
  v96[40] = 0;
  v96[48] = 0;
  v96[120] = 0;
  v96[128] = 0;
  v96[168] = 0;
  unsigned char v96[176] = 0;
  v96[180] = 0;
  v96[184] = 0;
  v96[188] = 0;
  LOBYTE(v97) = 0;
  char v98 = 0;
  char v99 = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  char v103 = 0;
  char v104 = 0;
  char v105 = 0;
  char v106 = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 1;
  char v128 = 0;
  char v129 = 0;
  char v130 = 0;
  char v131 = 0;
  char v132 = 0;
  char v133 = 0;
  char v134 = 0;
  char v135 = 0;
  char v136 = 0;
  char v137 = 0;
  __int16 v138 = 0;
  char v139 = 0;
  char v140 = 0;
  char v141 = 0;
  char v142 = 0;
  char v143 = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  char v152 = 0;
  char v153 = 0;
  char v154 = 0;
  char v155 = 0;
  char v156 = 0;
  char v157 = 0;
  char v158 = 0;
  char v159 = 0;
  char v160 = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  char v164 = 0;
  char v165 = 0;
  char v166 = 0;
  char v167 = 0;
  char v168 = 0;
  int v169 = 256;
  char v170 = 0;
  char v171 = 0;
  char v172 = 0;
  char v173 = 0;
  char v174 = 0;
  char v175 = 0;
  __int16 v176 = 0;
  char v4 = 1;
  int v3 = 1953460273;
  char v6 = 1;
  int v5 = 1;
  int v7 = 2;
  LODWORD(__src) = 1;
  sub_8732C((char *)v9, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x200000001;
  sub_8732C((char *)&v10[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  *(void *)__int16 v12 = 0x101010101000101;
  *(_WORD *)&v12[12] = 257;
  int v14 = 16843008;
  int v63 = -1047527424;
  char v64 = 1;
  int v72 = 1103101952;
  char v73 = 1;
  int v78 = 0;
  char v79 = 1;
  int v80 = 0;
  char v81 = 1;
  int v76 = 0;
  char v77 = 1;
  int v92 = 0;
  char v93 = 1;
  int v82 = -1040187392;
  char v83 = 1;
  int v65 = 0;
  char v66 = 1;
  int v94 = 16843009;
  if (!v98) {
    char v98 = 1;
  }
  int v97 = 2;
  int v0 = operator new(4uLL);
  *int v0 = 1;
  uint64_t v188 = v0 + 1;
  uint64_t v189 = v0 + 1;
  long long v187 = v0;
  uint64_t v1 = operator new(8uLL);
  *uint64_t v1 = 0x200000001;
  uint64_t v185 = v1 + 1;
  char v186 = v1 + 1;
  std::string v184 = v1;
  sub_424954((uint64_t)&__src);
  sub_6D31C((uint64_t)v96, (uint64_t *)&__src);
  sub_6C7E4(v191);
  int v2 = (void *)__src;
  *(void *)&long long __src = 0;
  if (v2) {
    operator delete(v2);
  }
  operator delete(v1);
  operator delete(v0);
  sub_21C8C(&v182, "");
  sub_21C8C(v180, "");
  sub_21C8C(&v179, off_648B50);
  sub_21C8C(&v178, "AU");
  sub_21C8C(&__p, "VAD");
  sub_6D364((char *)&__src, &v182, (uint64_t)v180, &v179, &v178, &__p);
  sub_6D600((uint64_t)v95, &__src);
  if (v195 < 0) {
    operator delete(v194);
  }
  if (v193 < 0) {
    operator delete(v192);
  }
  if (SHIBYTE(v191) < 0) {
    operator delete((void *)__src);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v178.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v179.__r_.__value_.__l.__data_);
  }
  if (v181 < 0) {
    operator delete(v180[0]);
  }
  if (v183 < 0) {
    operator delete((void *)v182);
  }
  sub_402E04(&v3);
  sub_6C690((uint64_t)v95);
  sub_463E0(v16[0]);
  if (v10[1])
  {
    *(void **)&long long v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
}

void sub_207874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_207930()
{
  qword_64D0D0 = 0;
  unk_64D0D8 = 0;
  qword_64D0C8 = 0;
  *(_DWORD *)uint64_t v1 = 1885433443;
  dword_64D0E0 = 3;
  sub_6367C((uint64_t)&algn_64D0E4[4], (unsigned int *)v1, 1);
  qmemcpy(v1, "kpsptcapibmpnldpnlupwphppocprsmpittpottp", sizeof(v1));
  dword_64D100 = 2;
  return sub_6367C((uint64_t)&algn_64D104[4], (unsigned int *)v1, 10);
}

void sub_2079E8(_Unwind_Exception *a1)
{
  if (qword_64D0C8)
  {
    qword_64D0D0 = qword_64D0C8;
    operator delete((void *)qword_64D0C8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_207A20()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D178, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D178))
  {
    dword_64D170 = sub_207A94();
    __cxa_guard_release(&qword_64D178);
  }
  return dword_64D170;
}

void sub_207A7C(_Unwind_Exception *a1)
{
}

uint64_t sub_207A94()
{
  unsigned int v13 = 0;
  if (sub_1614F4(@"ProductIDOverride", @"com.apple.audio.virtualaudio", &v13))
  {
    uint64_t v0 = v13;
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    int v2 = *v1;
    if (*v1 && os_log_type_enabled(*v1, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = 136315906;
      int v14 = "RunTimeDefaults.cpp";
      __int16 v15 = 1024;
      int v16 = 2122;
      __int16 v17 = 2080;
      char v18 = "ProductIDOverride";
      __int16 v19 = 1024;
      int v20 = v0;
      _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", (uint8_t *)&v13, 0x22u);
    }
  }
  else if (sub_207DFC() && sub_207E70() >> 1 == 6001)
  {
    return 194;
  }
  else
  {
    uint64_t v0 = sub_89FA8();
    int v3 = *(id *)sub_32A48(13);
    char v4 = v3;
    if (v3 && os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = 136315650;
      int v14 = "PlatformUtilities_Aspen.mm";
      __int16 v15 = 1024;
      int v16 = 142;
      __int16 v17 = 1024;
      LODWORD(v18) = v0;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d ProductID to int is: %d", (uint8_t *)&v13, 0x18u);
    }

    if (!v0)
    {
      uint64_t v5 = sub_207E70();
      uint64_t v0 = v5;
      if ((v5 - 2025) >= 5 && (v5 - 12002) >= 2 && (v5 - 4014) > 1)
      {
        double v9 = *(id *)sub_32A48(13);
        int v10 = v9;
        if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          unsigned int v13 = 136315650;
          int v14 = "PlatformUtilities_Aspen.mm";
          __int16 v15 = 1024;
          int v16 = 197;
          __int16 v17 = 1024;
          LODWORD(v18) = v0;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Product with Acoustic ID '%d' is not handled", (uint8_t *)&v13, 0x18u);
        }

        long long v11 = *(id *)sub_32A48(13);
        __int16 v12 = v11;
        if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          unsigned int v13 = 136315650;
          int v14 = "PlatformUtilities_Aspen.mm";
          __int16 v15 = 1024;
          int v16 = 158;
          __int16 v17 = 1024;
          LODWORD(v18) = v0;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d ProductID is not defined in PlatformUtilities_iOS::GetProductType(), and AcouticID '%d' is not handled in IsAcousticIDHandled() - Returning ProductID::Unknown", (uint8_t *)&v13, 0x18u);
        }

        return 0;
      }
      else
      {
        char v6 = *(id *)sub_32A48(13);
        int v7 = v6;
        if (v6 && os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v13 = 136315650;
          int v14 = "PlatformUtilities_Aspen.mm";
          __int16 v15 = 1024;
          int v16 = 190;
          __int16 v17 = 1024;
          LODWORD(v18) = v0;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Product with AcousticID '%d' is handled", (uint8_t *)&v13, 0x18u);
        }
      }
    }
  }
  return v0;
}

uint64_t sub_207DFC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D2C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D2C8))
  {
    byte_64D2C0 = sub_207F84();
    __cxa_guard_release(&qword_64D2C8);
  }
  return byte_64D2C0;
}

void sub_207E58(_Unwind_Exception *a1)
{
}

uint64_t sub_207E70()
{
  uint64_t v0 = (unsigned int *)&unk_64D000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D2A8, memory_order_acquire) & 1) == 0)
  {
    int v2 = __cxa_guard_acquire(&qword_64D2A8);
    uint64_t v0 = (_DWORD *)&unk_64D000;
    if (v2)
    {
      unint64_t v3 = sub_207EE4();
      if (v3 <= 0x100000000) {
        int v4 = 0;
      }
      else {
        int v4 = v3;
      }
      dword_64D2A0 = v4;
      __cxa_guard_release(&qword_64D2A8);
      uint64_t v0 = (_DWORD *)&unk_64D000;
    }
  }
  return v0[168];
}

uint64_t sub_207EE4()
{
  CFNumberRef v0 = (const __CFNumber *)MGCopyAnswerWithError();
  CFNumberRef v1 = v0;
  if (v0)
  {
    CFNumberRef v2 = sub_22314(v0);
    unsigned __int8 v3 = v2;
    unsigned int v4 = v2 & 0xFFFFFF00;
    uint64_t v5 = (unint64_t)v2 & 0x100000000;
    CFRelease(v1);
  }
  else
  {
    unsigned int v4 = 0;
    unsigned __int8 v3 = 0;
    uint64_t v5 = 0;
  }
  return v5 & 0x100000000 | v4 & 0xFFFFFF00 | v3;
}

BOOL sub_207F84()
{
  CFNumberRef v0 = (const void *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  sub_208054(&cf, v0);
  if (!cf)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  BOOL v1 = sub_157378((const __CFNumber *)cf);
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

void sub_20802C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  sub_20810C(&a10);
  _Unwind_Resume(a1);
}

void *sub_208054(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFBooleanGetTypeID())
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  return a1;
}

void sub_2080DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

const void **sub_20810C(const void **a1)
{
  CFNumberRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_208140(void *a1, int a2)
{
  __str[0] = 0;
  switch(a2)
  {
    case 1:
      uint64_t v30 = 0;
      int v3 = 184;
      goto LABEL_8;
    case 2:
      uint64_t v30 = 0;
      goto LABEL_5;
    case 3:
      uint64_t v30 = 97;
LABEL_5:
      int v3 = 238;
      goto LABEL_8;
    case 4:
      uint64_t v30 = 0;
      int v3 = 520;
      goto LABEL_8;
    case 5:
      uint64_t v30 = 0;
      int v3 = 620;
LABEL_8:
      uint64_t v4 = 98;
      goto LABEL_233;
    case 6:
      uint64_t v30 = 0;
      int v3 = 10;
      goto LABEL_50;
    case 7:
      uint64_t v30 = 0;
      int v3 = 11;
      goto LABEL_50;
    case 8:
      uint64_t v30 = 0;
      int v3 = 12;
      goto LABEL_50;
    case 9:
      uint64_t v30 = 0;
      int v3 = 16;
      goto LABEL_50;
    case 10:
      uint64_t v30 = 0;
      int v3 = 17;
      goto LABEL_50;
    case 11:
      uint64_t v30 = 0;
      int v3 = 101;
      goto LABEL_50;
    case 12:
      uint64_t v30 = 0;
      int v3 = 111;
      goto LABEL_50;
    case 13:
      uint64_t v30 = 0;
      int v3 = 121;
      goto LABEL_50;
    case 14:
      uint64_t v30 = 0;
      int v3 = 20;
      goto LABEL_50;
    case 15:
      uint64_t v30 = 0;
      int v3 = 21;
      goto LABEL_50;
    case 16:
      uint64_t v30 = 0;
      int v3 = 22;
      goto LABEL_50;
    case 17:
      uint64_t v30 = 0;
      goto LABEL_49;
    case 18:
      uint64_t v30 = 0;
      int v3 = 28;
      goto LABEL_50;
    case 19:
      uint64_t v30 = 0;
      int v3 = 37;
      goto LABEL_50;
    case 20:
      uint64_t v30 = 0;
      int v3 = 38;
      goto LABEL_50;
    case 21:
      uint64_t v30 = 0;
      int v3 = 201;
      goto LABEL_50;
    case 22:
      uint64_t v30 = 0;
      int v3 = 211;
      goto LABEL_50;
    case 23:
      uint64_t v30 = 0;
      int v3 = 221;
      goto LABEL_50;
    case 24:
      uint64_t v30 = 0;
      int v3 = 32;
      goto LABEL_50;
    case 25:
      uint64_t v30 = 0;
      int v3 = 33;
      goto LABEL_50;
    case 26:
      uint64_t v30 = 0;
      int v3 = 79;
      goto LABEL_50;
    case 27:
      uint64_t v30 = 0;
      int v3 = 42;
      goto LABEL_50;
    case 28:
      uint64_t v30 = 0;
      int v3 = 43;
      goto LABEL_50;
    case 29:
      uint64_t v30 = 0;
      int v3 = 47;
      goto LABEL_50;
    case 30:
      uint64_t v30 = 0;
      int v3 = 48;
      goto LABEL_50;
    case 31:
      uint64_t v30 = 0;
      int v3 = 49;
      goto LABEL_50;
    case 32:
      uint64_t v30 = 103;
      int v3 = 52;
      goto LABEL_50;
    case 33:
      uint64_t v5 = 103;
      goto LABEL_38;
    case 34:
      uint64_t v5 = 112;
LABEL_38:
      uint64_t v30 = v5;
      int v3 = 53;
      goto LABEL_50;
    case 35:
      uint64_t v30 = 112;
      int v3 = 54;
      goto LABEL_50;
    case 36:
      uint64_t v30 = 0;
      int v3 = 63;
      goto LABEL_50;
    case 37:
      uint64_t v30 = 0;
      int v3 = 64;
      goto LABEL_50;
    case 38:
      uint64_t v30 = 0;
      int v3 = 73;
      goto LABEL_50;
    case 39:
      uint64_t v30 = 0;
      int v3 = 74;
      goto LABEL_50;
    case 40:
      uint64_t v30 = 0;
      int v3 = 83;
      goto LABEL_50;
    case 41:
      uint64_t v30 = 0;
      int v3 = 84;
      goto LABEL_50;
    case 42:
      uint64_t v30 = 0;
      int v3 = 93;
      goto LABEL_50;
    case 43:
      uint64_t v30 = 0;
      int v3 = 94;
      goto LABEL_50;
    case 44:
      uint64_t v30 = 117;
LABEL_49:
      int v3 = 27;
LABEL_50:
      uint64_t v4 = 100;
      goto LABEL_233;
    case 45:
      uint64_t v30 = 0;
      int v3 = 59;
      goto LABEL_243;
    case 46:
      uint64_t v30 = 0;
      int v3 = 104;
      goto LABEL_232;
    case 47:
      uint64_t v30 = 0;
      goto LABEL_55;
    case 48:
      uint64_t v30 = 100;
LABEL_55:
      int v3 = 42;
      goto LABEL_123;
    case 49:
      uint64_t v30 = 0;
      goto LABEL_60;
    case 50:
      uint64_t v6 = 98;
      goto LABEL_59;
    case 51:
      uint64_t v6 = 115;
LABEL_59:
      uint64_t v30 = v6;
LABEL_60:
      int v3 = 71;
      goto LABEL_123;
    case 52:
      uint64_t v30 = 0;
      int v3 = 72;
      goto LABEL_123;
    case 53:
      uint64_t v30 = 0;
      int v3 = 73;
      goto LABEL_123;
    case 54:
      uint64_t v30 = 0;
      int v3 = 81;
      goto LABEL_123;
    case 55:
      uint64_t v30 = 0;
      int v3 = 82;
      goto LABEL_123;
    case 56:
      uint64_t v30 = 0;
      goto LABEL_67;
    case 57:
      uint64_t v30 = 109;
LABEL_67:
      int v3 = 85;
      goto LABEL_123;
    case 58:
      uint64_t v30 = 0;
      goto LABEL_70;
    case 59:
      uint64_t v30 = 109;
LABEL_70:
      int v3 = 86;
      goto LABEL_123;
    case 60:
      uint64_t v30 = 0;
      goto LABEL_73;
    case 61:
      uint64_t v30 = 109;
LABEL_73:
      int v3 = 87;
      goto LABEL_123;
    case 62:
      uint64_t v30 = 0;
      int v3 = 96;
      goto LABEL_123;
    case 63:
      uint64_t v30 = 0;
      int v3 = 97;
      goto LABEL_123;
    case 64:
      uint64_t v30 = 0;
      goto LABEL_78;
    case 65:
      uint64_t v30 = 97;
LABEL_78:
      int v3 = 98;
      goto LABEL_123;
    case 66:
      uint64_t v30 = 0;
      goto LABEL_81;
    case 67:
      uint64_t v30 = 97;
LABEL_81:
      int v3 = 99;
      goto LABEL_123;
    case 68:
      uint64_t v30 = 97;
      int v3 = 105;
      goto LABEL_123;
    case 69:
      uint64_t v30 = 0;
      int v3 = 120;
      goto LABEL_123;
    case 70:
      uint64_t v30 = 0;
      int v3 = 127;
      goto LABEL_123;
    case 71:
      uint64_t v30 = 0;
      int v3 = 128;
      goto LABEL_123;
    case 72:
      uint64_t v30 = 0;
      goto LABEL_88;
    case 73:
      uint64_t v30 = 97;
LABEL_88:
      int v3 = 171;
      goto LABEL_123;
    case 74:
      uint64_t v30 = 0;
      int v3 = 181;
      goto LABEL_123;
    case 75:
      uint64_t v30 = 0;
      int v3 = 182;
      goto LABEL_123;
    case 76:
      uint64_t v30 = 0;
      int v3 = 207;
      goto LABEL_123;
    case 77:
      uint64_t v30 = 0;
      int v3 = 210;
      goto LABEL_123;
    case 78:
      uint64_t v30 = 0;
      int v3 = 217;
      goto LABEL_123;
    case 79:
      uint64_t v30 = 0;
      int v3 = 255;
      goto LABEL_123;
    case 80:
      uint64_t v30 = 0;
      int v3 = 271;
      goto LABEL_123;
    case 81:
      uint64_t v30 = 0;
      int v3 = 272;
      goto LABEL_123;
    case 82:
      uint64_t v30 = 0;
      int v3 = 305;
      goto LABEL_123;
    case 83:
      uint64_t v30 = 0;
      int v3 = 307;
      goto LABEL_123;
    case 84:
      uint64_t v30 = 0;
      int v3 = 308;
      goto LABEL_123;
    case 85:
      uint64_t v30 = 0;
      int v3 = 310;
      goto LABEL_123;
    case 86:
      uint64_t v30 = 0;
      int v3 = 311;
      goto LABEL_123;
    case 87:
      uint64_t v30 = 0;
      int v3 = 317;
      goto LABEL_123;
    case 88:
      uint64_t v30 = 0;
      int v3 = 320;
      goto LABEL_123;
    case 89:
      uint64_t v30 = 0;
      int v3 = 348;
      goto LABEL_123;
    case 90:
      uint64_t v30 = 0;
      int v3 = 381;
      goto LABEL_123;
    case 91:
      uint64_t v30 = 0;
      int v3 = 382;
      goto LABEL_123;
    case 92:
      uint64_t v30 = 0;
      int v3 = 407;
      goto LABEL_123;
    case 93:
      uint64_t v30 = 0;
      int v3 = 408;
      goto LABEL_123;
    case 94:
      uint64_t v30 = 0;
      int v3 = 410;
      goto LABEL_123;
    case 95:
      uint64_t v30 = 0;
      int v3 = 411;
      goto LABEL_123;
    case 96:
      uint64_t v30 = 0;
      int v3 = 417;
      goto LABEL_123;
    case 97:
      uint64_t v30 = 0;
      int v3 = 420;
      goto LABEL_123;
    case 98:
      uint64_t v30 = 0;
      int v3 = 507;
      goto LABEL_123;
    case 99:
      uint64_t v30 = 0;
      int v3 = 508;
      goto LABEL_123;
    case 100:
      uint64_t v30 = 0;
      int v3 = 517;
      goto LABEL_123;
    case 101:
      uint64_t v30 = 0;
      int v3 = 522;
      goto LABEL_123;
    case 102:
      uint64_t v30 = 0;
      int v3 = 537;
      goto LABEL_123;
    case 103:
      uint64_t v30 = 0;
      int v3 = 538;
      goto LABEL_123;
    case 104:
      uint64_t v30 = 0;
      int v3 = 617;
      goto LABEL_123;
    case 105:
      uint64_t v30 = 0;
      int v3 = 620;
      goto LABEL_123;
    case 106:
      uint64_t v30 = 0;
      int v3 = 717;
      goto LABEL_123;
    case 107:
      uint64_t v30 = 0;
      int v3 = 720;
LABEL_123:
      uint64_t v4 = 106;
      goto LABEL_233;
    case 108:
      uint64_t v30 = 97;
      int v3 = 27;
      goto LABEL_232;
    case 109:
      uint64_t v30 = 97;
      int v3 = 28;
      goto LABEL_232;
    case 110:
      uint64_t v30 = 0;
      int v3 = 41;
      goto LABEL_232;
    case 111:
      uint64_t v30 = 0;
      int v3 = 42;
      goto LABEL_232;
    case 112:
      uint64_t v30 = 0;
      int v3 = 48;
      goto LABEL_232;
    case 113:
      uint64_t v30 = 0;
      int v3 = 49;
      goto LABEL_232;
    case 114:
      uint64_t v30 = 0;
      int v3 = 51;
      goto LABEL_232;
    case 115:
      uint64_t v30 = 0;
      int v3 = 53;
      goto LABEL_232;
    case 116:
      uint64_t v30 = 0;
      int v3 = 56;
      goto LABEL_232;
    case 117:
      uint64_t v30 = 0;
      int v3 = 61;
      goto LABEL_232;
    case 118:
      uint64_t v30 = 0;
      int v3 = 64;
      goto LABEL_232;
    case 119:
      uint64_t v30 = 0;
      int v3 = 65;
      goto LABEL_232;
    case 120:
      uint64_t v30 = 0;
      int v3 = 66;
      goto LABEL_232;
    case 121:
      uint64_t v30 = 0;
      int v3 = 69;
      goto LABEL_232;
    case 122:
      uint64_t v30 = 0;
      int v3 = 71;
      goto LABEL_232;
    case 123:
      uint64_t v30 = 0;
      int v3 = 74;
      goto LABEL_232;
    case 124:
      uint64_t v30 = 0;
      int v3 = 75;
      goto LABEL_232;
    case 125:
      uint64_t v30 = 0;
      int v3 = 841;
      goto LABEL_232;
    case 126:
      uint64_t v30 = 0;
      int v3 = 102;
      goto LABEL_232;
    case 127:
      uint64_t v30 = 0;
      int v3 = 112;
      goto LABEL_232;
    case 128:
      uint64_t v7 = 115;
      goto LABEL_146;
    case 129:
      uint64_t v7 = 98;
LABEL_146:
      uint64_t v30 = v7;
      int v3 = 111;
      goto LABEL_232;
    case 130:
      uint64_t v8 = 115;
      goto LABEL_149;
    case 131:
      uint64_t v8 = 98;
LABEL_149:
      uint64_t v30 = v8;
      int v3 = 121;
      goto LABEL_232;
    case 132:
      uint64_t v9 = 115;
      goto LABEL_152;
    case 133:
      uint64_t v9 = 98;
LABEL_152:
      uint64_t v30 = v9;
      int v3 = 131;
      goto LABEL_232;
    case 134:
      uint64_t v10 = 115;
      goto LABEL_155;
    case 135:
      uint64_t v10 = 98;
LABEL_155:
      uint64_t v30 = v10;
      int v3 = 140;
      goto LABEL_232;
    case 136:
      uint64_t v11 = 115;
      goto LABEL_158;
    case 137:
      uint64_t v11 = 98;
LABEL_158:
      uint64_t v30 = v11;
      int v3 = 141;
      goto LABEL_232;
    case 138:
      uint64_t v12 = 115;
      goto LABEL_161;
    case 139:
      uint64_t v12 = 98;
LABEL_161:
      uint64_t v30 = v12;
      int v3 = 142;
      goto LABEL_232;
    case 140:
      uint64_t v13 = 98;
      goto LABEL_164;
    case 141:
      uint64_t v13 = 115;
LABEL_164:
      uint64_t v30 = v13;
      int v3 = 143;
      goto LABEL_232;
    case 142:
      uint64_t v14 = 115;
      goto LABEL_167;
    case 143:
      uint64_t v14 = 98;
LABEL_167:
      uint64_t v30 = v14;
      int v3 = 144;
      goto LABEL_232;
    case 144:
      uint64_t v15 = 115;
      goto LABEL_170;
    case 145:
      uint64_t v15 = 98;
LABEL_170:
      uint64_t v30 = v15;
      int v3 = 146;
      goto LABEL_232;
    case 146:
      uint64_t v16 = 98;
      goto LABEL_173;
    case 147:
      uint64_t v16 = 115;
LABEL_173:
      uint64_t v30 = v16;
      int v3 = 149;
      goto LABEL_232;
    case 148:
      uint64_t v17 = 115;
      goto LABEL_176;
    case 149:
      uint64_t v17 = 98;
LABEL_176:
      uint64_t v30 = v17;
      int v3 = 157;
      goto LABEL_232;
    case 150:
      uint64_t v18 = 115;
      goto LABEL_179;
    case 151:
      uint64_t v18 = 98;
LABEL_179:
      uint64_t v30 = v18;
      int v3 = 158;
      goto LABEL_232;
    case 152:
      uint64_t v19 = 115;
      goto LABEL_182;
    case 153:
      uint64_t v19 = 98;
LABEL_182:
      uint64_t v30 = v19;
      int v3 = 187;
      goto LABEL_232;
    case 154:
      uint64_t v20 = 115;
      goto LABEL_185;
    case 155:
      uint64_t v20 = 98;
LABEL_185:
      uint64_t v30 = v20;
      int v3 = 188;
      goto LABEL_232;
    case 156:
      uint64_t v21 = 115;
      goto LABEL_188;
    case 157:
      uint64_t v21 = 98;
LABEL_188:
      uint64_t v30 = v21;
      int v3 = 197;
      goto LABEL_232;
    case 158:
      uint64_t v22 = 115;
      goto LABEL_191;
    case 159:
      uint64_t v22 = 98;
LABEL_191:
      uint64_t v30 = v22;
      int v3 = 198;
      goto LABEL_232;
    case 160:
      uint64_t v30 = 0;
      int v3 = 199;
      goto LABEL_232;
    case 161:
      uint64_t v23 = 115;
      goto LABEL_195;
    case 162:
      uint64_t v23 = 98;
LABEL_195:
      uint64_t v30 = v23;
      int v3 = 207;
      goto LABEL_232;
    case 163:
      uint64_t v24 = 115;
      goto LABEL_198;
    case 164:
      uint64_t v24 = 98;
LABEL_198:
      uint64_t v30 = v24;
      int v3 = 208;
      goto LABEL_232;
    case 165:
      uint64_t v25 = 115;
      goto LABEL_201;
    case 166:
      uint64_t v25 = 98;
LABEL_201:
      uint64_t v30 = v25;
      int v3 = 217;
      goto LABEL_232;
    case 167:
      uint64_t v26 = 115;
      goto LABEL_204;
    case 168:
      uint64_t v26 = 98;
LABEL_204:
      uint64_t v30 = v26;
      int v3 = 218;
      goto LABEL_232;
    case 169:
      uint64_t v30 = 0;
      int v3 = 210;
      goto LABEL_232;
    case 170:
      uint64_t v30 = 0;
      int v3 = 101;
      goto LABEL_209;
    case 171:
      uint64_t v30 = 0;
      int v3 = 102;
      goto LABEL_209;
    case 172:
      uint64_t v30 = 0;
      int v3 = 103;
LABEL_209:
      uint64_t v4 = 112;
      goto LABEL_233;
    case 173:
      uint64_t v27 = 110;
      goto LABEL_212;
    case 174:
      uint64_t v27 = 112;
LABEL_212:
      uint64_t v30 = v27;
      int v3 = 398;
      goto LABEL_229;
    case 175:
      uint64_t v30 = 0;
      int v3 = 456;
      goto LABEL_229;
    case 176:
      uint64_t v30 = 112;
      int v3 = 698;
      goto LABEL_229;
    case 177:
      uint64_t v30 = 0;
      int v3 = 720;
      goto LABEL_229;
    case 178:
      uint64_t v30 = 0;
      int v3 = 721;
      goto LABEL_229;
    case 179:
      uint64_t v30 = 0;
      int v3 = 734;
      goto LABEL_229;
    case 180:
      uint64_t v30 = 0;
      int v3 = 742;
      goto LABEL_229;
    case 181:
      uint64_t v30 = 0;
      int v3 = 1125;
      goto LABEL_229;
    case 182:
      uint64_t v30 = 0;
      int v3 = 1153;
      goto LABEL_229;
    case 183:
      uint64_t v30 = 0;
      int v3 = 1232;
      goto LABEL_229;
    case 184:
      uint64_t v30 = 0;
      int v3 = 1250;
      goto LABEL_229;
    case 185:
      uint64_t v30 = 0;
      int v3 = 1251;
      goto LABEL_229;
    case 186:
      uint64_t v30 = 0;
      int v3 = 1252;
      goto LABEL_229;
    case 187:
      uint64_t v30 = 0;
      int v3 = 1253;
      goto LABEL_229;
    case 188:
      snprintf(__str, 0x18uLL, "%c%d%c", 116, 698, 116);
      goto LABEL_234;
    case 189:
      uint64_t v30 = 0;
      int v3 = 6502;
      goto LABEL_229;
    case 190:
      uint64_t v30 = 0;
      int v3 = 6809;
LABEL_229:
      uint64_t v4 = 116;
      goto LABEL_233;
    case 191:
      uint64_t v30 = 0;
      int v3 = 100;
      uint64_t v4 = 113;
      goto LABEL_233;
    case 192:
      uint64_t v30 = 0;
      int v3 = 301;
LABEL_232:
      uint64_t v4 = 110;
      goto LABEL_233;
    case 193:
      uint64_t v30 = 0;
      int v3 = 101;
      goto LABEL_243;
    case 194:
      uint64_t v30 = 0;
      int v3 = 201;
      goto LABEL_243;
    case 195:
      uint64_t v30 = 0;
      int v3 = 301;
      goto LABEL_243;
    case 196:
      uint64_t v30 = 0;
      int v3 = 401;
      goto LABEL_243;
    case 197:
      uint64_t v30 = 0;
      int v3 = 501;
LABEL_243:
      uint64_t v4 = 118;
LABEL_233:
      snprintf(__str, 0x18uLL, "%c%d%c", v4, v3, v30);
LABEL_234:
      if (!__str[0]) {
        goto LABEL_236;
      }
      CFStringRef v28 = CFStringCreateWithCString(0, __str, 0x600u);
      break;
    default:
LABEL_236:
      CFStringRef v28 = 0;
      break;
  }
  v31[0] = off_63E5A8;
  v31[1] = v28;
  sub_21B7C(a1, v28);
  return sub_49A90(v31);
}

void sub_208BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_208ED4(void *__dst)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D168, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D168))
  {
    sub_165894(&xmmword_64D148);
    __cxa_guard_release(&qword_64D168);
  }
  if (byte_64D160)
  {
    if (byte_64D15F < 0)
    {
      long long v2 = xmmword_64D148;
      sub_21E8C(__dst, (void *)v2, *((unint64_t *)&v2 + 1));
    }
    else
    {
      *(_OWORD *)std::__fs::filesystem::path __dst = xmmword_64D148;
      __dst[2] = unk_64D158;
    }
  }
  else
  {
    int v3 = off_63E5A8;
    CFStringRef v4 = sub_8BA50();
    sub_21B7C(__dst, v4);
    sub_49A90(&v3);
  }
}

void sub_208FD4(_Unwind_Exception *a1)
{
}

void sub_208FFC(int a1)
{
  if (qword_64A238 != -1) {
    dispatch_once(&qword_64A238, &stru_61F710);
  }
  if (byte_64A228 || byte_64A229)
  {
    CFPreferencesAppSynchronize(@"com.apple.coreaudio");
    if (sub_3E97E8(@"EnableTelephonyMonitor", @"com.apple.coreaudio", 0))
    {
      switch(a1)
      {
        case 3:
          CFStringRef v2 = @"com.apple.audio.virtualaudio";
          CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
          CFStringRef v3 = @"EnableEANCTelephonyMonitor";
          goto LABEL_12;
        case 2:
          CFStringRef v2 = @"com.apple.coreaudio";
          CFPreferencesAppSynchronize(@"com.apple.coreaudio");
          CFStringRef v3 = @"EnableHALTelephonyMonitor";
          goto LABEL_12;
        case 1:
          CFStringRef v2 = @"com.apple.audio.virtualaudio";
          CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
          CFStringRef v3 = @"EnableVADTelephonyMonitor";
LABEL_12:
          sub_3E97E8(v3, v2, 0);
          return;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "PlatformUtilities_iOS.cpp";
        __int16 v6 = 1024;
        int v7 = 253;
        _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  Unhandled case in switch", (uint8_t *)&v4, 0x12u);
      }
      __break(1u);
    }
  }
}

void sub_2091A4(uint64_t a1)
{
  int v7 = 0;
  CFStringRef v2 = (const void *)MGCopyAnswerWithError();
  CFStringRef v3 = v2;
  CFTypeRef v6 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFDataGetTypeID())
    {
      sub_16DC14(&v5, &v6);
      *(void *)a1 = v5;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
    }
    CFRelease(v3);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
}

uint64_t sub_209270()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D188, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D188))
  {
    byte_64D180 = sub_2092E4();
    __cxa_guard_release(&qword_64D188);
  }
  return byte_64D180;
}

void sub_2092CC(_Unwind_Exception *a1)
{
}

id sub_2092E4()
{
  if (MGGetBoolAnswer())
  {
    if ((unsigned __int16)sub_6CBEC() >= 0x101u) {
      id v0 = +[CPMSAgent isCPMSSupportedForClient:6];
    }
    else {
      id v0 = 0;
    }
    BOOL v1 = *(id *)sub_32A48(16);
    CFStringRef v2 = v1;
    if (v1 && os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v3 = "unsupported";
      int v39 = "CPMSInterface.mm";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if (v0) {
        CFStringRef v3 = "supported";
      }
      __int16 v40 = 1024;
      int v41 = 91;
      __int16 v42 = 2080;
      int v43 = (char *)v3;
      CFTypeID v4 = "%25s:%-5d CPMS for Haptics is %s";
LABEL_19:
      _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEFAULT, v4, buf, 0x1Cu);
      goto LABEL_20;
    }
    goto LABEL_20;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D208, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D208))
  {
    sub_209DC8(v35);
    sub_16E564(&v36);
    uint64_t v8 = v36;
    uint64_t v9 = v37;
    if (v36 == v37)
    {
      uint64_t v15 = sub_32A48(13);
      if (*(unsigned char *)(v15 + 8))
      {
        os_log_t v16 = *(os_log_t *)v15;
        if (*(void *)v15)
        {
          if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            int v39 = "StandardUtilities.cpp";
            __int16 v40 = 1024;
            int v41 = 1303;
            __int16 v42 = 2080;
            int v43 = "IODeviceTree:/product/audio";
            __int16 v44 = 2080;
            int v45 = "speaker-cpms-bgd_inst";
            uint64_t v12 = "%25s:%-5d EDT entry is empty for EDT path '%s'; key '%s'";
            uint64_t v13 = v16;
            uint32_t v14 = 38;
            goto LABEL_31;
          }
        }
      }
    }
    else
    {
      uint64_t v10 = sub_32A48(13);
      if (*(unsigned char *)(v10 + 8))
      {
        os_log_t v11 = *(os_log_t *)v10;
        if (*(void *)v10)
        {
          if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            int v39 = "StandardUtilities.cpp";
            __int16 v40 = 1024;
            int v41 = 1300;
            __int16 v42 = 2080;
            int v43 = "speaker-cpms-bgd_inst";
            uint64_t v12 = "%25s:%-5d EDT entry T::key %s returned valid";
            uint64_t v13 = v11;
            uint32_t v14 = 28;
LABEL_31:
            _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, v12, buf, v14);
          }
        }
      }
    }
    if (v8) {
      operator delete(v8);
    }
    if (v8 != v9) {
      goto LABEL_48;
    }
    sub_16E194(&v36);
    uint64_t v17 = v36;
    uint64_t v18 = v37;
    if (v36 == v37)
    {
      uint64_t v24 = sub_32A48(13);
      if (*(unsigned char *)(v24 + 8))
      {
        os_log_t v25 = *(os_log_t *)v24;
        if (*(void *)v24)
        {
          if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            int v39 = "StandardUtilities.cpp";
            __int16 v40 = 1024;
            int v41 = 1303;
            __int16 v42 = 2080;
            int v43 = "IODeviceTree:/product/audio";
            __int16 v44 = 2080;
            int v45 = "speaker-cpms-bgd_100ms";
            uint64_t v21 = "%25s:%-5d EDT entry is empty for EDT path '%s'; key '%s'";
            uint64_t v22 = v25;
            uint32_t v23 = 38;
            goto LABEL_44;
          }
        }
      }
    }
    else
    {
      uint64_t v19 = sub_32A48(13);
      if (*(unsigned char *)(v19 + 8))
      {
        os_log_t v20 = *(os_log_t *)v19;
        if (*(void *)v19)
        {
          if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            int v39 = "StandardUtilities.cpp";
            __int16 v40 = 1024;
            int v41 = 1300;
            __int16 v42 = 2080;
            int v43 = "speaker-cpms-bgd_100ms";
            uint64_t v21 = "%25s:%-5d EDT entry T::key %s returned valid";
            uint64_t v22 = v20;
            uint32_t v23 = 28;
LABEL_44:
            _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, v21, buf, v23);
          }
        }
      }
    }
    if (v17) {
      operator delete(v17);
    }
    if (v17 != v18)
    {
LABEL_48:
      BOOL v26 = 1;
LABEL_49:
      sub_209F10((uint64_t)v35);
      byte_64D200 = v26;
      __cxa_guard_release(&qword_64D208);
      goto LABEL_5;
    }
    sub_16DCD8(&v36);
    uint64_t v27 = v36;
    BOOL v26 = v36 != v37;
    if (v36 == v37)
    {
      uint64_t v33 = sub_32A48(13);
      if (*(unsigned char *)(v33 + 8))
      {
        os_log_t v34 = *(os_log_t *)v33;
        if (*(void *)v33)
        {
          if (os_log_type_enabled(*(os_log_t *)v33, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            int v39 = "StandardUtilities.cpp";
            __int16 v40 = 1024;
            int v41 = 1303;
            __int16 v42 = 2080;
            int v43 = "IODeviceTree:/product/audio";
            __int16 v44 = 2080;
            int v45 = "speaker-cpms-bgd_1s";
            uint64_t v30 = "%25s:%-5d EDT entry is empty for EDT path '%s'; key '%s'";
            int v31 = v34;
            uint32_t v32 = 38;
            goto LABEL_59;
          }
        }
      }
    }
    else
    {
      uint64_t v28 = sub_32A48(13);
      if (*(unsigned char *)(v28 + 8))
      {
        os_log_t v29 = *(os_log_t *)v28;
        if (*(void *)v28)
        {
          if (os_log_type_enabled(*(os_log_t *)v28, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            int v39 = "StandardUtilities.cpp";
            __int16 v40 = 1024;
            int v41 = 1300;
            __int16 v42 = 2080;
            int v43 = "speaker-cpms-bgd_1s";
            uint64_t v30 = "%25s:%-5d EDT entry T::key %s returned valid";
            int v31 = v29;
            uint32_t v32 = 28;
LABEL_59:
            _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, v30, buf, v32);
          }
        }
      }
    }
    if (v27) {
      operator delete(v27);
    }
    goto LABEL_49;
  }
LABEL_5:
  if (byte_64D200) {
    id v0 = +[CPMSAgent isCPMSSupportedForClient:5];
  }
  else {
    id v0 = 0;
  }
  uint64_t v5 = *(id *)sub_32A48(16);
  CFStringRef v2 = v5;
  if (v5 && os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v6 = "unsupported";
    int v39 = "CPMSInterface.mm";
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    if (v0) {
      CFTypeRef v6 = "supported";
    }
    __int16 v40 = 1024;
    int v41 = 78;
    __int16 v42 = 2080;
    int v43 = (char *)v6;
    CFTypeID v4 = "%25s:%-5d CPMS for Speaker is %s";
    goto LABEL_19;
  }
LABEL_20:

  return v0;
}

void sub_2098F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    operator delete(v10);
  }
  sub_209F10((uint64_t)&a10);
  __cxa_guard_abort(&qword_64D208);
  _Unwind_Resume(a1);
}

uint64_t sub_20994C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D198, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D198))
  {
    byte_64D190 = MGGetSInt32Answer() == 1;
    __cxa_guard_release(&qword_64D198);
  }
  return byte_64D190;
}

void sub_2099BC(_Unwind_Exception *a1)
{
}

uint64_t sub_2099D4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D1A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D1A8))
  {
    byte_64D1A0 = MGGetSInt32Answer() == 6;
    __cxa_guard_release(&qword_64D1A8);
  }
  return byte_64D1A0;
}

void sub_209A44(_Unwind_Exception *a1)
{
}

uint64_t sub_209A5C(__int16 a1)
{
  if (sub_20994C())
  {
    return MGGetBoolAnswer();
  }
  else
  {
    return (_BYTE)a1 && (a1 & 0xFF00) != 0;
  }
}

uint64_t sub_209AB8(int a1)
{
  uint64_t result = 0;
  if (a1 <= 79)
  {
    if (a1 > 0x2D || ((1 << a1) & 0x2FC0601E0000) == 0) {
      return result;
    }
    return 1;
  }
  if ((a1 - 80) <= 0x1B && ((1 << (a1 - 80)) & 0xFCCCC03) != 0
    || (a1 - 2025) < 5
    || (a1 - 12002) <= 1)
  {
    return 1;
  }
  return result;
}

uint64_t sub_209B38()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D1D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D1D8))
  {
    if (!sub_209C54() || (unsigned int v1 = sub_207A20() - 80, v1 >= 0x1A) || ((0x3000003u >> v1) & 1) == 0)
    {
      if (MGGetSInt32Answer() != 1 && MGGetSInt32Answer() != 3)
      {
        BOOL v6 = 0;
        goto LABEL_19;
      }
      uint64_t v2 = qword_64D138;
      if (qword_64D130 != qword_64D138)
      {
        uint64_t v3 = qword_64D130 + 4;
        do
        {
          int v4 = *(_DWORD *)(v3 - 4);
          int v5 = sub_207A20();
          BOOL v6 = v5 != v4;
          BOOL v7 = v5 == v4 || v3 == v2;
          v3 += 4;
        }
        while (!v7);
        goto LABEL_19;
      }
    }
    BOOL v6 = 1;
LABEL_19:
    byte_64D1D0 = v6;
    __cxa_guard_release(&qword_64D1D8);
  }
  return byte_64D1D0;
}

void sub_209C34(_Unwind_Exception *a1)
{
}

uint64_t sub_209C54()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D298, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D298))
  {
    if (MGGetSInt32Answer() == 3)
    {
      int v1 = sub_23AC0();
      if (v1) {
        LOBYTE(v1) = _os_feature_enabled_impl();
      }
    }
    else
    {
      LOBYTE(v1) = 0;
    }
    byte_64D290 = v1;
    __cxa_guard_release(&qword_64D298);
  }
  return byte_64D290;
}

void sub_209CE8(_Unwind_Exception *a1)
{
}

uint64_t sub_209D00()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D1E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D1E8))
  {
    BOOL v1 = (unsigned __int16)sub_6CBEC() >= 0x101u
      && (sub_207A20() == 72
       || sub_207A20() == 73
       || sub_207A20() == 74
       || sub_207A20() == 75);
    byte_64D1E0 = v1;
    __cxa_guard_release(&qword_64D1E8);
  }
  return byte_64D1E0;
}

void sub_209DB0(_Unwind_Exception *a1)
{
}

char *sub_209DC8(char *a1)
{
  sub_21C8C(a1, "IODeviceTree:/product/audio");
  uint64_t v2 = a1;
  if (a1[23] < 0) {
    uint64_t v2 = *(const char **)a1;
  }
  io_registry_entry_t v3 = IORegistryEntryFromPath(kIOMainPortDefault, v2);
  *((_DWORD *)a1 + 6) = v3;
  if (!v3)
  {
    int v4 = *(id *)sub_32A48(13);
    int v5 = v4;
    if (v4 && os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v6 = a1;
      if (a1[23] < 0) {
        BOOL v6 = *(char **)a1;
      }
      int v8 = 136315650;
      uint64_t v9 = "StandardUtilities.h";
      __int16 v10 = 1024;
      int v11 = 1125;
      __int16 v12 = 2080;
      uint64_t v13 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).", (uint8_t *)&v8, 0x1Cu);
    }
  }
  return a1;
}

void sub_209EE8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_209F10(uint64_t a1)
{
  io_object_t v2 = *(_DWORD *)(a1 + 24);
  if (v2) {
    IOObjectRelease(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_209F54()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D218, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D218))
  {
    sub_209DC8(v2);
    BOOL v1 = sub_16D890(v3, "supports-secure-microphone");
    sub_209F10((uint64_t)v2);
    byte_64D210 = v1;
    __cxa_guard_release(&qword_64D218);
  }
  return byte_64D210;
}

void sub_209FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20A008()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D238, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D238))
  {
    sub_209DC8(v2);
    BOOL v1 = sub_16D890(v3, "supports-concurrent-hp-lp-mics");
    sub_209F10((uint64_t)v2);
    byte_64D230 = v1;
    __cxa_guard_release(&qword_64D238);
  }
  LODWORD(result) = MGGetBoolAnswer();
  if (byte_64D230) {
    return result;
  }
  else {
    return 0;
  }
}

void sub_20A0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20A0D0()
{
  id v0 = (unsigned int *)&unk_64D000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D248, memory_order_acquire) & 1) == 0)
  {
    int v2 = __cxa_guard_acquire(&qword_64D248);
    id v0 = (_DWORD *)&unk_64D000;
    if (v2)
    {
      unint64_t v3 = sub_207EE4();
      if (v3 <= 0x100000000) {
        int v4 = 0;
      }
      else {
        int v4 = v3;
      }
      dword_64D240 = v4;
      __cxa_guard_release(&qword_64D248);
      id v0 = (_DWORD *)&unk_64D000;
    }
  }
  return v0[144];
}

uint64_t sub_20A144()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D258, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D258))
  {
    if (sub_20994C()) {
      BOOL v1 = sub_207E70() >> 4 > 0x1F4;
    }
    else {
      BOOL v1 = 0;
    }
    byte_64D250 = v1;
    __cxa_guard_release(&qword_64D258);
  }
  return byte_64D250;
}

void sub_20A1BC(_Unwind_Exception *a1)
{
}

BOOL sub_20A1D4()
{
  unint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v38 = 0u;
  float v39 = 1.0;
  do
  {
    unint64_t v4 = dword_4E86D4[v3];
    if (v1)
    {
      uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v1);
      v5.i16[0] = vaddlv_u8(v5);
      if (v5.u32[0] > 1uLL)
      {
        unint64_t v0 = dword_4E86D4[v3];
        if (v1 <= v4) {
          unint64_t v0 = v4 % v1;
        }
      }
      else
      {
        unint64_t v0 = (v1 - 1) & v4;
      }
      BOOL v6 = (uint64_t **)*((void *)__p[0] + v0);
      if (v6)
      {
        for (uint64_t i = *v6; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v8 = i[1];
          if (v8 == v4)
          {
            if (*((_DWORD *)i + 4) == v4) {
              goto LABEL_74;
            }
          }
          else
          {
            if (v5.u32[0] > 1uLL)
            {
              if (v8 >= v1) {
                v8 %= v1;
              }
            }
            else
            {
              v8 &= v1 - 1;
            }
            if (v8 != v0) {
              break;
            }
          }
        }
      }
    }
    uint64_t v9 = operator new(0x18uLL);
    *uint64_t v9 = 0;
    v9[1] = v4;
    *((_DWORD *)v9 + 4) = v4;
    float v10 = (float)(unint64_t)(v2 + 1);
    if (!v1 || (float)(v39 * (float)v1) < v10)
    {
      BOOL v11 = (v1 & (v1 - 1)) != 0;
      if (v1 < 3) {
        BOOL v11 = 1;
      }
      unint64_t v12 = v11 | (2 * v1);
      unint64_t v13 = vcvtps_u32_f32(v10 / v39);
      if (v12 <= v13) {
        int8x8_t prime = (int8x8_t)v13;
      }
      else {
        int8x8_t prime = (int8x8_t)v12;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v1 = (unint64_t)__p[1];
      }
      if (*(void *)&prime > v1) {
        goto LABEL_30;
      }
      if (*(void *)&prime < v1)
      {
        unint64_t v21 = vcvtps_u32_f32((float)*((unint64_t *)&v38 + 1) / v39);
        if (v1 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v1), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
        {
          unint64_t v21 = std::__next_prime(v21);
        }
        else
        {
          uint64_t v23 = 1 << -(char)__clz(v21 - 1);
          if (v21 >= 2) {
            unint64_t v21 = v23;
          }
        }
        if (*(void *)&prime <= v21) {
          int8x8_t prime = (int8x8_t)v21;
        }
        if (*(void *)&prime >= v1)
        {
          unint64_t v1 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_30:
            if (*(void *)&prime >> 61) {
              sub_60560();
            }
            uint64_t v15 = operator new(8 * *(void *)&prime);
            os_log_t v16 = __p[0];
            __p[0] = v15;
            if (v16) {
              operator delete(v16);
            }
            uint64_t v17 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v17++) = 0;
            while (*(void *)&prime != v17);
            uint64_t v18 = (void **)v38;
            if ((void)v38)
            {
              unint64_t v19 = *(void *)(v38 + 8);
              uint8x8_t v20 = (uint8x8_t)vcnt_s8(prime);
              v20.i16[0] = vaddlv_u8(v20);
              if (v20.u32[0] > 1uLL)
              {
                if (v19 >= *(void *)&prime) {
                  v19 %= *(void *)&prime;
                }
              }
              else
              {
                v19 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v19) = &v38;
              for (j = *v18; j; unint64_t v19 = v25)
              {
                unint64_t v25 = j[1];
                if (v20.u32[0] > 1uLL)
                {
                  if (v25 >= *(void *)&prime) {
                    v25 %= *(void *)&prime;
                  }
                }
                else
                {
                  v25 &= *(void *)&prime - 1;
                }
                if (v25 != v19)
                {
                  if (!*((void *)__p[0] + v25))
                  {
                    *((void *)__p[0] + v25) = v18;
                    goto LABEL_55;
                  }
                  *uint64_t v18 = (void *)*j;
                  void *j = **((void **)__p[0] + v25);
                  **((void **)__p[0] + v25) = j;
                  uint64_t j = v18;
                }
                unint64_t v25 = v19;
LABEL_55:
                uint64_t v18 = (void **)j;
                uint64_t j = (void *)*j;
              }
            }
            unint64_t v1 = (unint64_t)prime;
            goto LABEL_59;
          }
          os_log_t v29 = __p[0];
          __p[0] = 0;
          if (v29) {
            operator delete(v29);
          }
          unint64_t v1 = 0;
          __p[1] = 0;
        }
      }
LABEL_59:
      if ((v1 & (v1 - 1)) != 0)
      {
        if (v1 <= v4) {
          unint64_t v0 = v4 % v1;
        }
        else {
          unint64_t v0 = v4;
        }
      }
      else
      {
        unint64_t v0 = (v1 - 1) & v4;
      }
    }
    BOOL v26 = __p[0];
    uint64_t v27 = (void *)*((void *)__p[0] + v0);
    if (v27)
    {
      *uint64_t v9 = *v27;
LABEL_72:
      *uint64_t v27 = v9;
      goto LABEL_73;
    }
    *uint64_t v9 = v38;
    *(void *)&long long v38 = v9;
    v26[v0] = &v38;
    if (*v9)
    {
      unint64_t v28 = *(void *)(*v9 + 8);
      if ((v1 & (v1 - 1)) != 0)
      {
        if (v28 >= v1) {
          v28 %= v1;
        }
      }
      else
      {
        v28 &= v1 - 1;
      }
      uint64_t v27 = (char *)__p[0] + 8 * v28;
      goto LABEL_72;
    }
LABEL_73:
    uint64_t v2 = ++*((void *)&v38 + 1);
LABEL_74:
    ++v3;
  }
  while (v3 != 47);
  unsigned int v30 = sub_89FA8();
  if (__p[1])
  {
    uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      unint64_t v32 = v30;
      if (__p[1] <= (void *)v30) {
        unint64_t v32 = v30 % (unint64_t)__p[1];
      }
    }
    else
    {
      unint64_t v32 = (LODWORD(__p[1]) - 1) & v30;
    }
    unsigned int k = (uint64_t *)*((void *)__p[0] + v32);
    if (k)
    {
      for (unsigned int k = (uint64_t *)*k; k; unsigned int k = (uint64_t *)*k)
      {
        unint64_t v34 = k[1];
        if (v34 == v30)
        {
          if (*((_DWORD *)k + 4) == v30) {
            break;
          }
        }
        else
        {
          if (v31.u32[0] > 1uLL)
          {
            if ((void *)v34 >= __p[1]) {
              v34 %= (unint64_t)__p[1];
            }
          }
          else
          {
            v34 &= (unint64_t)__p[1] - 1;
          }
          if (v34 != v32) {
            goto LABEL_102;
          }
        }
      }
    }
  }
  else
  {
LABEL_102:
    unsigned int k = 0;
  }
  BOOL v35 = k == 0;
  sub_6C954((uint64_t)__p);
  return v35;
}

void sub_20A6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_20A6D0()
{
  unint64_t v0 = (unsigned __int8 *)&unk_64D000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D278, memory_order_acquire) & 1) == 0)
  {
    int v2 = __cxa_guard_acquire(&qword_64D278);
    unint64_t v0 = (unsigned char *)&unk_64D000;
    if (v2)
    {
      byte_64D270 = (unsigned __int16)sub_6CBEC() > 0x100u;
      __cxa_guard_release(&qword_64D278);
      unint64_t v0 = (unsigned char *)&unk_64D000;
    }
  }
  return v0[624];
}

uint64_t sub_20A744()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D2B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D2B8))
  {
    if (MGGetSInt32Answer() == 3)
    {
      if (sub_207DFC()) {
        char v1 = 1;
      }
      else {
        char v1 = sub_8B99C();
      }
    }
    else
    {
      char v1 = 0;
    }
    byte_64D2B0 = v1;
    __cxa_guard_release(&qword_64D2B8);
  }
  return byte_64D2B0;
}

void sub_20A7D0(_Unwind_Exception *a1)
{
}

uint64_t sub_20A7E8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D2D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D2D8))
  {
    byte_64D2D0 = sub_20A85C();
    __cxa_guard_release(&qword_64D2D8);
  }
  return byte_64D2D0;
}

void sub_20A844(_Unwind_Exception *a1)
{
}

BOOL sub_20A85C()
{
  *(void *)AudioObjectPropertyAddress buf = "/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib";
  *(void *)&buf[8] = "GetAudioDSPManager";
  *(void *)&buf[16] = 0;
  v10[0] = 0;
  BOOL v6 = buf;
  if (atomic_load_explicit(v10, memory_order_acquire) != -1)
  {
    unint64_t v8 = &v6;
    BOOL v7 = &v8;
    std::__call_once((std::once_flag::_State_type *)v10, &v7, (void (__cdecl *)(void *))sub_20AA34);
  }
  if (!*(void *)&buf[16]) {
    return 0;
  }
  uint64_t v0 = (*(uint64_t (**)(void))&buf[16])();
  if (!v0) {
    return 0;
  }
  id v1 = *(id *)sub_32A48(20);
  int v2 = v1;
  if (v1)
  {
    uint64_t v3 = v1;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 40))(v0);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "PlatformUtilities_Aspen.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 636;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Voice processor version is %u", buf, 0x18u);
    }
  }
  return (*(unsigned int (**)(uint64_t))(*(void *)v0 + 40))(v0) > 9;
}

void sub_20AA08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_20AA34(const char *****a1)
{
  id v1 = **a1;
  int v2 = *v1;
  uint64_t result = dlopen(**v1, 1);
  if (result)
  {
    uint64_t result = dlsym(result, v2[1]);
    v2[2] = (const char *)result;
  }
  return result;
}

uint64_t sub_20AA78()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D2E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D2E8))
  {
    byte_64D2E0 = sub_20AAEC();
    __cxa_guard_release(&qword_64D2E8);
  }
  return byte_64D2E0;
}

void sub_20AAD4(_Unwind_Exception *a1)
{
}

uint64_t sub_20AAEC()
{
  LOBYTE(v8) = 0;
  AppBooleanCFDataRef Value = CFPreferencesGetAppBooleanValue(@"ForceAdditiveRouting", @"com.apple.audio.virtualaudio", (Boolean *)&v8);
  if ((_BYTE)v8)
  {
    int v1 = AppBooleanValue;
    int v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315906;
      uint64_t v9 = "RunTimeDefaults.cpp";
      __int16 v10 = 1024;
      int v11 = 2133;
      __int16 v12 = 2080;
      unint64_t v13 = "ForceAdditiveRouting";
      __int16 v14 = 1024;
      BOOL v15 = v1 != 0;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", (uint8_t *)&v8, 0x22u);
      if (!v1) {
        goto LABEL_5;
      }
      return 1;
    }
    if (v1) {
      return 1;
    }
  }
LABEL_5:
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    int v5 = 0;
    if (MGGetSInt32Answer() == 1)
    {
      if (sub_207DFC())
      {
        int v5 = 1;
      }
      else if (MGGetBoolAnswer())
      {
        int v5 = MGGetBoolAnswer();
      }
      else
      {
        int v5 = 0;
      }
    }
    unsigned int v6 = 0;
    if (MGGetSInt32Answer() == 3) {
      unsigned int v6 = sub_23AC0();
    }
    int v7 = sub_207DFC();
    return v7 ^ (v7 | v5 | v6);
  }
  return result;
}

uint64_t sub_20ACA4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D2F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D2F8))
  {
    int v1 = _os_feature_enabled_impl();
    if (v1)
    {
      if (MGGetSInt32Answer() == 3)
      {
        if (sub_207DFC()) {
          LOBYTE(v1) = 1;
        }
        else {
          LOBYTE(v1) = sub_8B99C();
        }
      }
      else
      {
        LOBYTE(v1) = 0;
      }
    }
    byte_64D2F0 = v1;
    __cxa_guard_release(&qword_64D2F8);
  }
  return byte_64D2F0;
}

void sub_20AD48(_Unwind_Exception *a1)
{
}

uint64_t sub_20AD60()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return MGGetSInt32Answer() == 1;
  }
  return result;
}

uint64_t sub_20ADA4()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return sub_89FA8() == 5;
  }
  return result;
}

uint64_t sub_20ADDC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D318, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D318))
  {
    byte_64D310 = sub_20AE50();
    __cxa_guard_release(&qword_64D318);
  }
  return byte_64D310;
}

void sub_20AE38(_Unwind_Exception *a1)
{
}

uint64_t sub_20AE50()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return (sub_207A20() & 0xFFFFFFFE) == 42;
  }
  return result;
}

void *sub_20AE8C@<X0>(void *a1@<X8>)
{
  return sub_21C8C(a1, "Silent mode update");
}

void sub_20AE9C(uint64_t a1@<X8>)
{
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v2 = sub_298DA4();
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v2 + 312))(buf);
  uint64_t v3 = *(unsigned int **)buf;
  if (*(void *)buf)
  {
    sub_3B7EC();
    char v36 = &qword_64CC40;
    char v37 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    sub_3B7EC();
    if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
    {
      os_log_t v29 = (os_log_t *)sub_32A48(13);
      unsigned int v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v39 = 1024;
        int v40 = 3667;
        _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }
    uint64_t v4 = sub_32A48(8);
    uint64_t v5 = sub_32A48(34);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_13;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    uint64_t v18 = *(NSObject **)v4;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v39 = 1024;
      int v40 = 3669;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_INFO, "%25s:%-5d Silent mode update.", buf, 0x12u);
    }
    uint64_t v19 = *(void *)(*(void *)v3 + 8);
    if (!v19) {
      goto LABEL_37;
    }
    unsigned int v20 = v3[8];
    uint64_t v21 = *(void *)v3 + 8;
    do
    {
      unsigned int v22 = *(_DWORD *)(v19 + 32);
      BOOL v23 = v22 >= v20;
      if (v22 >= v20) {
        uint64_t v24 = (uint64_t *)v19;
      }
      else {
        uint64_t v24 = (uint64_t *)(v19 + 8);
      }
      if (v23) {
        uint64_t v21 = v19;
      }
      uint64_t v19 = *v24;
    }
    while (*v24);
    if (v21 == *(void *)v3 + 8 || v20 < *(_DWORD *)(v21 + 32))
    {
LABEL_37:
      BOOL v26 = (os_log_t *)sub_32A48(13);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v39 = 1024;
        int v40 = 3672;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Corruption in the routing database. Calling find(mCurrentCategory) returned an invalid iterator.\"", buf, 0x12u);
      }
      unint64_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v28, "Corruption in the routing database. Calling find(mCurrentCategory) returned an invalid iterator.");
    }
    if (*(unsigned char *)(v21 + 76))
    {
      sub_143E38(v35, (void *)v3 + 9);
      sub_13A7AC((uint64_t)buf, (uint64_t)v3, (_OWORD *)v3 + 2, (uint64_t)(v3 + 12), (uint64_t)v35, (uint64_t)(v3 + 30), v3[36], (void *)v3 + 19, (uint64_t)(v3 + 44), (const void ***)v3 + 27, *((unsigned char *)v3 + 384), (uint64_t *)v3 + 49, 1919050611, (long long *)v3 + 26, (void *)v3 + 56);
      sub_141FB0((uint64_t)v32, v3, (uint64_t)buf, 0);
      sub_13A044((uint64_t)buf);
      sub_12B050(v35[4]);
      sub_10E118(v35[1]);
    }
    else
    {
      v32[0] = off_6228D0;
      v32[1] = 1;
      v32[2] = 0;
      char v33 = 0;
      char v34 = 0;
    }
    sub_10C78C(&v36);
    sub_120690(a1, (uint64_t)v32);
    sub_11A520(v32);
  }
  else
  {
    uint64_t v11 = sub_32A48(9);
    uint64_t v12 = sub_32A48(15);
    char v13 = 0;
    uint64_t v14 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v15 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v16 = *(int *)&buf[4 * v14];
      char v17 = v13;
      if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
        break;
      }
      char v13 = 1;
      uint64_t v14 = 1;
      if (v17) {
        goto LABEL_34;
      }
    }
    if ((v15 & v16) == 0) {
      uint64_t v11 = v12;
    }
LABEL_34:
    unint64_t v25 = *(NSObject **)v11;
    if (*(void *)v11 && os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "SystemSettingsCommands_Aspen.cpp";
      __int16 v39 = 1024;
      int v40 = 21;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing manager does not exist -- cannot execute command", buf, 0x12u);
    }
  }
}

void sub_20B400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  __cxa_free_exception(v30);
  sub_10C78C(&a27);
  sub_11A520(v29);
  _Unwind_Resume(a1);
}

void sub_20B48C()
{
}

void *sub_20B4A4@<X0>(void *a1@<X8>)
{
  return sub_21C8C(a1, "System audio effects settings update");
}

void sub_20B4B4(uint64_t a1@<X8>)
{
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v2 = sub_298DA4();
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v2 + 312))(buf);
  uint64_t v3 = *(void *)buf;
  if (*(void *)buf)
  {
    sub_3B7EC();
    unsigned int v30 = &qword_64CC40;
    char v31 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    sub_3B7EC();
    if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
    {
      BOOL v26 = (os_log_t *)sub_32A48(13);
      uint64_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v35 = 1024;
        int v36 = 3691;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }
    uint64_t v4 = sub_32A48(8);
    uint64_t v5 = sub_32A48(34);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_13;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    uint64_t v18 = *(NSObject **)v4;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v35 = 1024;
      int v36 = 3693;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_INFO, "%25s:%-5d System Audio Effects Settings update.", buf, 0x12u);
    }
    sub_12053C((uint64_t)v29, 1920099684);
    int v19 = sub_12AE40(*(void *)v3, (unsigned int *)(v3 + 32));
    *(void *)AudioObjectPropertyAddress buf = off_622BA8;
    char v37 = buf;
    sub_E845C(&v32, v3 + 456);
    unsigned int v20 = v32;
    uint64_t v21 = v33;
    unsigned int v22 = sub_E85C4(1986291046, v32, v33);
    if (v21 == v22)
    {
      int v23 = 0;
      if (!v20) {
        goto LABEL_20;
      }
    }
    else
    {
      if (!v37) {
        sub_56964();
      }
      int v23 = (*(uint64_t (**)(unsigned char *, void))(*(void *)v37 + 48))(v37, *v22);
      if (!v20) {
        goto LABEL_20;
      }
    }
    operator delete(v20);
LABEL_20:
    sub_14C15C(buf);
    if ((~v19 & 0x101) != 0) {
      int v24 = 1;
    }
    else {
      int v24 = v23;
    }
    if (v24 == 1)
    {
      sub_14C070((uint64_t)buf, v3, 1919185776);
      sub_120690((uint64_t)v29, (uint64_t)buf);
      sub_11A520(buf);
    }
    sub_10C78C(&v30);
    sub_120690(a1, (uint64_t)v29);
    sub_11A520(v29);
    return;
  }
  uint64_t v11 = sub_32A48(9);
  uint64_t v12 = sub_32A48(15);
  char v13 = 0;
  uint64_t v14 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v15 = *(void *)(v11 + 8);
  while (1)
  {
    uint64_t v16 = *(int *)&buf[4 * v14];
    char v17 = v13;
    if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
      break;
    }
    char v13 = 1;
    uint64_t v14 = 1;
    if (v17) {
      goto LABEL_31;
    }
  }
  if ((v15 & v16) == 0) {
    uint64_t v11 = v12;
  }
LABEL_31:
  unint64_t v25 = *(NSObject **)v11;
  if (*(void *)v11 && os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "SystemSettingsCommands_Aspen.cpp";
    __int16 v35 = 1024;
    int v36 = 40;
    _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing manager does not exist -- cannot execute command", buf, 0x12u);
  }
}

void sub_20B968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v20);
  sub_10C78C(&a14);
  sub_11A520(v19);
  _Unwind_Resume(a1);
}

void sub_20BA08()
{
}

void *sub_20BA20@<X0>(void *a1@<X8>)
{
  return sub_21C8C(a1, "Hearing Aids Call Audio system settings update");
}

void sub_20BA30(uint64_t a1@<X8>)
{
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v2 = sub_298DA4();
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v2 + 312))(v32);
  uint64_t v3 = *(void *)v32;
  if (*(void *)v32)
  {
    sub_3B7EC();
    unsigned int v30 = &qword_64CC40;
    char v31 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    sub_3B7EC();
    if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
    {
      uint64_t v27 = (os_log_t *)sub_32A48(13);
      unint64_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v36 = 1024;
        int v37 = 3925;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }
    uint64_t v4 = sub_32A48(8);
    uint64_t v5 = sub_32A48(34);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_13;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    uint64_t v18 = *(NSObject **)v4;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v36 = 1024;
      int v37 = 3927;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_INFO, "%25s:%-5d Hearing Aids Call Audio System Settings update.", buf, 0x12u);
    }
    uint64_t v19 = sub_298DA4();
    int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 104))(v19);
    int v21 = *(_DWORD *)(v3 + 32);
    if (v21 > 1668313714)
    {
      if (v21 == 1668703084 || v21 == 1668576377) {
        goto LABEL_42;
      }
      unsigned __int16 v22 = 29299;
    }
    else
    {
      if (v21 == 1668301427 || v21 == 1668309362) {
        goto LABEL_24;
      }
      unsigned __int16 v22 = 29250;
    }
    if (v21 != (v22 | 0x63700000)) {
      goto LABEL_43;
    }
LABEL_24:
    int v23 = *(_DWORD *)(v3 + 36);
    if (v23 > 1919776354)
    {
      if (v23 > 1987081832)
      {
        if (v23 == 1987081839) {
          goto LABEL_42;
        }
        unsigned __int16 v26 = 30313;
      }
      else
      {
        if (v23 == 1919776355) {
          goto LABEL_42;
        }
        unsigned __int16 v26 = 26467;
      }
      int v24 = v26 | 0x76700000;
    }
    else
    {
      if (v23 <= 1768779618)
      {
        if (v23 != 1735222132)
        {
          int v24 = 1768057203;
          goto LABEL_41;
        }
LABEL_42:
        sub_14594C((uint64_t *)v3, v20);
        goto LABEL_43;
      }
      if (v23 == 1768779619) {
        goto LABEL_42;
      }
      int v24 = 1768781411;
    }
LABEL_41:
    if (v23 == v24) {
      goto LABEL_42;
    }
LABEL_43:
    sub_12053C((uint64_t)v32, 1920099684);
    sub_10C78C(&v30);
    sub_120690(a1, (uint64_t)v32);
    sub_11A520(v32);
    return;
  }
  uint64_t v11 = sub_32A48(9);
  uint64_t v12 = sub_32A48(15);
  char v13 = 0;
  uint64_t v14 = 0;
  *(void *)unint64_t v32 = 0x100000002;
  uint64_t v15 = *(void *)(v11 + 8);
  while (1)
  {
    uint64_t v16 = *(int *)&v32[4 * v14];
    char v17 = v13;
    if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
      break;
    }
    char v13 = 1;
    uint64_t v14 = 1;
    if (v17) {
      goto LABEL_30;
    }
  }
  if ((v15 & v16) == 0) {
    uint64_t v11 = v12;
  }
LABEL_30:
  unint64_t v25 = *(NSObject **)v11;
  if (*(void *)v11 && os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)unint64_t v32 = 136315394;
    *(void *)&v32[4] = "SystemSettingsCommands_Aspen.cpp";
    __int16 v33 = 1024;
    int v34 = 58;
    _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing manager does not exist -- cannot execute command", v32, 0x12u);
  }
}

void sub_20BF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v12);
  sub_10C78C(&a9);
  sub_11A520(v11);
  _Unwind_Resume(a1);
}

void sub_20BF80()
{
}

void *sub_20BF98@<X0>(void *a1@<X8>)
{
  return sub_21C8C(a1, "Hearing Aids Media Audio system settings update");
}

void sub_20BFA8(uint64_t a1@<X8>)
{
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v2 = sub_298DA4();
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v2 + 312))(v28);
  uint64_t v3 = *(void *)v28;
  if (*(void *)v28)
  {
    sub_3B7EC();
    unsigned __int16 v26 = &qword_64CC40;
    char v27 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    sub_3B7EC();
    if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
    {
      int v23 = (os_log_t *)sub_32A48(13);
      int v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v32 = 1024;
        int v33 = 3944;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }
    uint64_t v4 = sub_32A48(8);
    uint64_t v5 = sub_32A48(34);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_13;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    uint64_t v18 = *(NSObject **)v4;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v32 = 1024;
      int v33 = 3946;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_INFO, "%25s:%-5d Hearing Aids Media Audio System Settings update.", buf, 0x12u);
    }
    uint64_t v19 = sub_298DA4();
    int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 112))(v19);
    int v21 = *(_DWORD *)(v3 + 32);
    if (v21 == 1668505974 || v21 == 1668182896) {
      sub_14594C((uint64_t *)v3, v20);
    }
    sub_12053C((uint64_t)v28, 1920099684);
    sub_10C78C(&v26);
    sub_120690(a1, (uint64_t)v28);
    sub_11A520(v28);
  }
  else
  {
    uint64_t v11 = sub_32A48(9);
    uint64_t v12 = sub_32A48(15);
    char v13 = 0;
    uint64_t v14 = 0;
    *(void *)unint64_t v28 = 0x100000002;
    uint64_t v15 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v16 = *(int *)&v28[4 * v14];
      char v17 = v13;
      if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
        break;
      }
      char v13 = 1;
      uint64_t v14 = 1;
      if (v17) {
        goto LABEL_23;
      }
    }
    if ((v15 & v16) == 0) {
      uint64_t v11 = v12;
    }
LABEL_23:
    unsigned __int16 v22 = *(NSObject **)v11;
    if (*(void *)v11 && os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v28 = 136315394;
      *(void *)&v28[4] = "SystemSettingsCommands_Aspen.cpp";
      __int16 v29 = 1024;
      int v30 = 76;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing manager does not exist -- cannot execute command", v28, 0x12u);
    }
  }
}

void sub_20C3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v12);
  sub_10C78C(&a9);
  sub_11A520(v11);
  _Unwind_Resume(a1);
}

void sub_20C40C()
{
}

void *sub_20C424@<X0>(void *a1@<X8>)
{
  return sub_21C8C(a1, "Hearing Aids System Sounds system settings update");
}

void sub_20C434(uint64_t a1@<X8>)
{
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v2 = sub_298DA4();
  (*(void (**)(_DWORD *__return_ptr))(*(void *)v2 + 312))(buf);
  uint64_t v3 = *(void *)buf;
  if (*(void *)buf)
  {
    sub_3B7EC();
    char v27 = &qword_64CC40;
    char v28 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    sub_3B7EC();
    if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
    {
      unsigned __int16 v22 = (os_log_t *)sub_32A48(13);
      int v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "RoutingManager.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3963;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", (uint8_t *)buf, 0x12u);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }
    uint64_t v4 = sub_32A48(8);
    uint64_t v5 = sub_32A48(34);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = (int)buf[v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_13;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    uint64_t v18 = *(NSObject **)v4;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "RoutingManager.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 3965;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_INFO, "%25s:%-5d Hearing Aids System Sounds System Settings update.", (uint8_t *)buf, 0x12u);
    }
    memset(buf, 0, sizeof(buf));
    strcpy(v31, "cwdv");
    v31[8] = 0;
    int v32 = 3;
    v34[0] = 0;
    v34[1] = 0;
    int v33 = v34;
    int v35 = 44739242;
    CFTypeRef cf = 0;
    uint64_t v19 = operator new(4uLL);
    *uint64_t v19 = 1886152047;
    *(void *)AudioObjectPropertyAddress buf = v19;
    *(void *)&AudioObjectPropertyAddress buf[2] = v19 + 1;
    *(void *)&uint8_t buf[4] = v19 + 1;
    int v35 = 44739232;
    uint64_t v20 = sub_10FBF0();
    v29[0] = off_622A88;
    v29[3] = v29;
    sub_10E1E8(v26, v20, buf, (uint64_t)v29);
    sub_6AFD4(v29);
    if (v26[2]) {
      sub_14C070((uint64_t)v25, v3, 1919185776);
    }
    else {
      sub_12053C((uint64_t)v25, 1920099684);
    }
    sub_8108(v26);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v34[0]);
    if (*(void *)buf)
    {
      *(void *)&AudioObjectPropertyAddress buf[2] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    sub_10C78C(&v27);
    sub_120690(a1, (uint64_t)v25);
    sub_11A520(v25);
  }
  else
  {
    uint64_t v11 = sub_32A48(9);
    uint64_t v12 = sub_32A48(15);
    char v13 = 0;
    uint64_t v14 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v15 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v16 = (int)buf[v14];
      char v17 = v13;
      if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
        break;
      }
      char v13 = 1;
      uint64_t v14 = 1;
      if (v17) {
        goto LABEL_27;
      }
    }
    if ((v15 & v16) == 0) {
      uint64_t v11 = v12;
    }
LABEL_27:
    int v21 = *(NSObject **)v11;
    if (*(void *)v11 && os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315394;
      *(void *)&buf[1] = "SystemSettingsCommands_Aspen.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 94;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing manager does not exist -- cannot execute command", (uint8_t *)buf, 0x12u);
    }
  }
}

void sub_20C8E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  __cxa_free_exception(v24);
  sub_10C78C(&a17);
  sub_11A520(v23);
  _Unwind_Resume(a1);
}

void sub_20C97C()
{
}

void *sub_20C994@<X0>(void *a1@<X8>)
{
  return sub_21C8C(a1, "Bluetooth requires a route configuration change");
}

void sub_20C9A4(uint64_t a1@<X8>)
{
  *(void *)a1 = off_6228D0;
  *(void *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v2 = sub_298DA4();
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v2 + 312))(v25);
  uint64_t v3 = *(void *)v25;
  if (*(void *)v25)
  {
    sub_3B7EC();
    int v23 = &qword_64CC40;
    char v24 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    sub_3B7EC();
    if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
    {
      uint64_t v20 = (os_log_t *)sub_32A48(13);
      int v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v29 = 1024;
        int v30 = 3734;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to acquire routing mutex.\"", buf, 0x12u);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to acquire routing mutex.");
    }
    uint64_t v4 = sub_32A48(8);
    uint64_t v5 = sub_32A48(34);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_13;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_13:
    uint64_t v18 = *(NSObject **)v4;
    if (v18)
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
        __int16 v29 = 1024;
        int v30 = 3736;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Bluetooth required a route configuration change.", buf, 0x12u);
      }
    }
    sub_14C070((uint64_t)v25, v3, 1651799408);
    sub_10C78C(&v23);
    sub_120690(a1, (uint64_t)v25);
    sub_11A520(v25);
  }
  else
  {
    uint64_t v11 = sub_32A48(9);
    uint64_t v12 = sub_32A48(15);
    char v13 = 0;
    uint64_t v14 = 0;
    *(void *)unint64_t v25 = 0x100000002;
    uint64_t v15 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v16 = *(int *)&v25[4 * v14];
      char v17 = v13;
      if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
        break;
      }
      char v13 = 1;
      uint64_t v14 = 1;
      if (v17) {
        goto LABEL_20;
      }
    }
    if ((v15 & v16) == 0) {
      uint64_t v11 = v12;
    }
LABEL_20:
    uint64_t v19 = *(NSObject **)v11;
    if (*(void *)v11 && os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v25 = 136315394;
      *(void *)&void v25[4] = "SystemSettingsCommands_Aspen.cpp";
      __int16 v26 = 1024;
      int v27 = 133;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing manager does not exist -- cannot execute command", v25, 0x12u);
    }
  }
}

void sub_20CD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v12);
  sub_10C78C(&a9);
  sub_11A520(v11);
  _Unwind_Resume(a1);
}

void sub_20CDAC()
{
}

uint64_t sub_20CDC8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_20CDEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63D2B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_20CE40(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63D2B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20CE60(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 12);
  AudioObjectID v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 120))(a1);
  std::mutex::lock(v4);
  char v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = (uint64_t **)(a1 + 21);
    while (1)
    {
      uint64_t v9 = *v6;
      inAddress.AudioObjectPropertyElement mElement = *((_DWORD *)v6 + 2);
      *(void *)&inAddress.AudioObjectPropertySelector mSelector = v9;
      char v10 = *v8;
      if (!*v8) {
        goto LABEL_14;
      }
      uint64_t v11 = a1 + 21;
      do
      {
        AudioObjectPropertySelector v12 = *((_DWORD *)v10 + 8);
        BOOL v13 = v12 >= inAddress.mSelector;
        if (v12 >= inAddress.mSelector) {
          uint64_t v14 = (uint64_t **)v10;
        }
        else {
          uint64_t v14 = (uint64_t **)(v10 + 1);
        }
        if (v13) {
          uint64_t v11 = v10;
        }
        char v10 = *v14;
      }
      while (*v14);
      if (v11 == (uint64_t *)v8 || inAddress.mSelector < *((_DWORD *)v11 + 8)) {
        goto LABEL_14;
      }
      OSStatus v15 = AudioObjectRemovePropertyListener(v5, &inAddress, (AudioObjectPropertyListenerProc)sub_20D1E8, a1);
      if (!v15) {
        break;
      }
      uint64_t v16 = (os_log_t *)sub_32A48(17);
      os_log_t v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_INFO))
      {
        sub_2417C(__p, inAddress.mSelector);
        uint64_t v18 = __p;
        if (v36 < 0) {
          uint64_t v18 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        __int16 v39 = "PhysicalDevice.cpp";
        __int16 v40 = 1024;
        int v41 = 667;
        __int16 v42 = 1024;
        AudioObjectID v43 = v5;
        __int16 v44 = 2080;
        int v45 = v18;
        __int16 v46 = 2048;
        uint64_t v47 = v15;
        uint64_t v19 = v17;
        uint64_t v20 = "%25s:%-5d Device [%u] FAILED to remove device property [%s] listener with error code: %llx";
        uint32_t v21 = 44;
LABEL_46:
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_INFO, v20, buf, v21);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
      }
LABEL_14:
      char v6 = (uint64_t *)((char *)v6 + 12);
      if (v6 == v7) {
        goto LABEL_48;
      }
    }
    unsigned __int16 v22 = *v8;
    if (*v8)
    {
      int v23 = a1 + 21;
      char v24 = *v8;
      do
      {
        AudioObjectPropertySelector v25 = *((_DWORD *)v24 + 8);
        BOOL v26 = v25 >= inAddress.mSelector;
        if (v25 >= inAddress.mSelector) {
          int v27 = (uint64_t **)v24;
        }
        else {
          int v27 = (uint64_t **)(v24 + 1);
        }
        if (v26) {
          int v23 = v24;
        }
        char v24 = *v27;
      }
      while (*v27);
      if (v23 != (uint64_t *)v8 && inAddress.mSelector >= *((_DWORD *)v23 + 8))
      {
        char v28 = (uint64_t *)v23[1];
        __int16 v29 = v23;
        if (v28)
        {
          do
          {
            int v30 = v28;
            char v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            int v30 = (uint64_t *)v29[2];
            BOOL v31 = *v30 == (void)v29;
            __int16 v29 = v30;
          }
          while (!v31);
        }
        if ((uint64_t *)a1[20] == v23) {
          a1[20] = (uint64_t)v30;
        }
        --a1[22];
        sub_89144(v22, v23);
        sub_463E0((void *)v23[6]);
        operator delete(v23);
      }
    }
    int v32 = (os_log_t *)sub_32A48(17);
    os_log_t v33 = *v32;
    if (!*v32 || !os_log_type_enabled(*v32, OS_LOG_TYPE_INFO)) {
      goto LABEL_14;
    }
    sub_2417C(__p, inAddress.mSelector);
    int v34 = __p;
    if (v36 < 0) {
      int v34 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    __int16 v39 = "PhysicalDevice.cpp";
    __int16 v40 = 1024;
    int v41 = 672;
    __int16 v42 = 1024;
    AudioObjectID v43 = v5;
    __int16 v44 = 2080;
    int v45 = v34;
    uint64_t v19 = v33;
    uint64_t v20 = "%25s:%-5d Device [%u] removed device property [%s] listener";
    uint32_t v21 = 34;
    goto LABEL_46;
  }
LABEL_48:
  std::mutex::unlock(v4);
}

void sub_20D1C4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20D1E8(int a1, int a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v8 = (os_log_t *)sub_32A48(17);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
    __int16 v21 = 1024;
    int v22 = 683;
    __int16 v23 = 1024;
    LODWORD(v24) = a1;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CommonPropertyChangeListener called on device : %u", buf, 0x18u);
  }
  if (a2)
  {
    char v10 = (os_log_t *)sub_32A48(17);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      sub_2417C(v18, *a3);
      if (v19 >= 0) {
        AudioObjectPropertySelector v12 = v18;
      }
      else {
        AudioObjectPropertySelector v12 = (void **)v18[0];
      }
      (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a4 + 128))(theString, a4);
      sub_21B7C(__p, theString[0]);
      BOOL v13 = __p;
      if (v17 < 0) {
        BOOL v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      __int16 v21 = 1024;
      int v22 = 687;
      __int16 v23 = 2080;
      char v24 = v12;
      __int16 v25 = 1024;
      int v26 = a1;
      __int16 v27 = 2080;
      char v28 = v13;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Received notification (%s) from audio device %u with UID \"%s\"", buf, 0x2Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      sub_72924((uint64_t)theString);
      if (v19 < 0) {
        operator delete(v18[0]);
      }
    }
    *(void *)AudioObjectPropertyAddress buf = *(void *)a3;
    *(_DWORD *)&buf[8] = a3[2];
    (*(void (**)(uint64_t))(*(void *)a4 + 120))(a4);
    sub_13910();
    operator new();
  }
  return 0;
}

void sub_20D4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_20D4F0(uint64_t a1)
{
  uint64_t v2 = sub_F820C();
  int v3 = *(_DWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 28);
  char v6 = operator new(0x20uLL);
  *char v6 = off_6276C0;
  v6[1] = v4;
  v6[2] = *(void *)(a1 + 16);
  *((_DWORD *)v6 + 6) = *(_DWORD *)(a1 + 24);
  *((_DWORD *)v6 + 7) = v5;
  v7[3] = v6;
  sub_F8498(v2, v3, (uint64_t)v7);
  sub_87864(v7);
  operator delete();
}

void sub_20D5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14, uint64_t a15, uint64_t a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_87864(&a16);
  if (a2 == 3)
  {
    char v19 = __cxa_begin_catch(exception_object);
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    os_log_t v21 = *v20;
    if (!*v20 || !os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    int v22 = v19[2];
    LODWORD(a9) = 136316162;
    *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
    WORD6(a9) = 1024;
    *(_DWORD *)((char *)&a9 + 14) = 429;
    WORD1(a10) = 1024;
    DWORD1(a10) = v22;
    WORD4(a10) = 2080;
    *(void *)((char *)&a10 + 10) = "";
    a12 = 1024;
    a13 = 98;
    __int16 v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
    char v24 = v21;
    uint32_t v25 = 40;
  }
  else
  {
    int v26 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      __int16 v27 = v26;
      char v28 = (os_log_t *)sub_32A48(13);
      os_log_t v29 = *v28;
      if (!*v28 || !os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR)) {
        goto LABEL_14;
      }
      uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 430;
      WORD1(a10) = 2080;
      *(void *)((char *)&a10 + 4) = v30;
      WORD6(a10) = 2080;
      *(void *)((char *)&a10 + 14) = "";
      HIWORD(a13) = 1024;
      a14 = 98;
      __int16 v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
      char v24 = v29;
      uint32_t v25 = 44;
    }
    else
    {
      BOOL v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (!*v31 || !os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR)) {
        goto LABEL_14;
      }
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 431;
      WORD1(a10) = 2080;
      *(void *)((char *)&a10 + 4) = "";
      WORD6(a10) = 1024;
      *(_DWORD *)((char *)&a10 + 14) = 98;
      __int16 v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
      char v24 = v32;
      uint32_t v25 = 34;
    }
  }
  _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&a9, v25);
LABEL_14:
  __cxa_end_catch();
  if (!v16) {
    JUMPOUT(0x20D59CLL);
  }
  JUMPOUT(0x20D584);
}

uint64_t sub_20D860(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (std::mutex *)(v2 + 96);
  std::mutex::lock((std::mutex *)(v2 + 96));
  uint64_t v6 = *(void *)(v2 + 168);
  uint64_t v5 = v2 + 168;
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_28;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = v5;
  do
  {
    unsigned int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      uint64_t v11 = (uint64_t *)v4;
    }
    else {
      uint64_t v11 = (uint64_t *)(v4 + 8);
    }
    if (v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 != v5 && v7 >= *(_DWORD *)(v8 + 32) && *(void *)(v8 + 56))
  {
    AudioObjectPropertySelector v12 = (os_log_t *)sub_32A48(17);
    BOOL v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
    {
      sub_2417C(__p, *(_DWORD *)(a1 + 16));
      uint64_t v14 = v26 >= 0 ? __p : (void **)__p[0];
      int v15 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      char v28 = "PhysicalDevice.cpp";
      __int16 v29 = 1024;
      int v30 = 711;
      __int16 v31 = 2080;
      os_log_t v32 = v14;
      __int16 v33 = 1024;
      int v34 = v15;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Handle property (%s) change from device: %u", buf, 0x22u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v16 = *(void **)(v8 + 40);
    if (v16 != (void *)(v8 + 48))
    {
      do
      {
        ((void (*)(void, uint64_t, uint64_t, void))v16[4])(*(unsigned int *)(a1 + 28), 1, a1 + 16, v16[5]);
        char v17 = (void *)v16[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            char v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v16[2];
            BOOL v19 = *v18 == (void)v16;
            uint64_t v16 = v18;
          }
          while (!v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != (void *)(v8 + 48));
    }
    uint64_t v23 = 1;
  }
  else
  {
LABEL_28:
    uint64_t v20 = (os_log_t *)sub_32A48(17);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_INFO))
    {
      int v22 = *(_DWORD *)(a1 + 28);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v28 = "PhysicalDevice.cpp";
      __int16 v29 = 1024;
      int v30 = 704;
      __int16 v31 = 1024;
      LODWORD(v32) = v22;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_INFO, "%25s:%-5d No property change handler registered on device: %u", buf, 0x18u);
    }
    uint64_t v23 = 0;
  }
  std::mutex::unlock(v3);
  return v23;
}

void sub_20DB94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  _Unwind_Resume(v11);
}

uint64_t *sub_20DBD0(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      int v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      int v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_89144(v6, a2);
  return v3;
}

uint64_t sub_20DC4C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)a2 = off_6276C0;
  *(void *)(a2 + 8) = v2;
  uint64_t v3 = *(void *)(result + 16);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  *(void *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
  return result;
}

void *sub_20DC88(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  void *result = off_6276C0;
  result[1] = v3;
  result[2] = v4;
  LODWORD(v4) = *(_DWORD *)(a1 + 28);
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  *((_DWORD *)result + 7) = v4;
  return result;
}

void sub_20DCDC()
{
}

void sub_20DCF4(uint64_t a1)
{
  AudioObjectID v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  std::mutex::lock((std::mutex *)(a1 + 96));
  uint64_t v3 = *(void **)(a1 + 160);
  uint64_t v4 = (void *)(a1 + 168);
  if (v3 != (void *)(a1 + 168))
  {
    do
    {
      inAddress.AudioObjectPropertySelector mSelector = *((_DWORD *)v3 + 8);
      *(void *)&inAddress.AudioObjectPropertyScope mScope = 1735159650;
      if (v3[7])
      {
        sub_2440C((uint64_t)v45);
        BOOL v5 = (void *)v3[5];
        if (v5 != v3 + 6)
        {
          do
          {
            uint64_t v6 = (void *)std::ostream::operator<<();
            sub_256E4(v6, (uint64_t)" ", 1);
            unsigned int v7 = (void *)v5[1];
            if (v7)
            {
              do
              {
                uint64_t v8 = v7;
                unsigned int v7 = (void *)*v7;
              }
              while (v7);
            }
            else
            {
              do
              {
                uint64_t v8 = (void *)v5[2];
                BOOL v9 = *v8 == (void)v5;
                BOOL v5 = v8;
              }
              while (!v9);
            }
            BOOL v5 = v8;
          }
          while (v8 != v3 + 6);
        }
        BOOL v10 = (os_log_t *)sub_32A48(17);
        uint64_t v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_INFO))
        {
          sub_2417C(v33, inAddress.mSelector);
          int v12 = v34;
          BOOL v13 = (void **)v33[0];
          sub_246E4(__p, (uint64_t)v48);
          uint64_t v14 = v33;
          if (v12 < 0) {
            uint64_t v14 = v13;
          }
          int v15 = __p;
          if (v32 < 0) {
            int v15 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
          __int16 v37 = 1024;
          int v38 = 626;
          __int16 v39 = 1024;
          signed int v40 = v2;
          __int16 v41 = 2080;
          __int16 v42 = v14;
          __int16 v43 = 2080;
          __int16 v44 = v15;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_INFO, "%25s:%-5d Device [%u] contains property [%s] listeners that have not been un-registered by clients: %s", buf, 0x2Cu);
          if (v32 < 0) {
            operator delete(__p[0]);
          }
          if (v34 < 0) {
            operator delete(v33[0]);
          }
        }
        *(void *)int v45 = v30;
        *(void *)&v45[*(void *)(v30 - 24)] = v29;
        *(void *)&v47[2] = v28;
        if (v52 < 0) {
          operator delete(v51);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
      }
      OSStatus v16 = AudioObjectRemovePropertyListener(v2, &inAddress, (AudioObjectPropertyListenerProc)sub_20D1E8, (void *)a1);
      if (v16)
      {
        char v17 = (os_log_t *)sub_32A48(17);
        os_log_t v18 = *v17;
        if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_INFO))
        {
          sub_2417C(buf, inAddress.mSelector);
          BOOL v19 = buf;
          if (v40 < 0) {
            BOOL v19 = *(unsigned char **)buf;
          }
          *(_DWORD *)int v45 = 136316162;
          *(void *)&v45[4] = "PhysicalDevice.cpp";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = 635;
          *(_WORD *)&v47[4] = 1024;
          *(_DWORD *)&v47[6] = v2;
          *(_WORD *)char v48 = 2080;
          *(void *)&v48[2] = v19;
          __int16 v49 = 2048;
          uint64_t v50 = v16;
          uint64_t v20 = v18;
          os_log_t v21 = "%25s:%-5d Device [%u] FAILED to remove device property [%s] listener with error code: %llx";
          uint32_t v22 = 44;
LABEL_35:
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_INFO, v21, v45, v22);
          if (SHIBYTE(v40) < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      else
      {
        uint64_t v23 = (os_log_t *)sub_32A48(17);
        os_log_t v24 = *v23;
        if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_INFO))
        {
          sub_2417C(buf, inAddress.mSelector);
          uint32_t v25 = buf;
          if (v40 < 0) {
            uint32_t v25 = *(unsigned char **)buf;
          }
          *(_DWORD *)int v45 = 136315906;
          *(void *)&v45[4] = "PhysicalDevice.cpp";
          __int16 v46 = 1024;
          *(_DWORD *)uint64_t v47 = 639;
          *(_WORD *)&v47[4] = 1024;
          *(_DWORD *)&v47[6] = v2;
          *(_WORD *)char v48 = 2080;
          *(void *)&v48[2] = v25;
          uint64_t v20 = v24;
          os_log_t v21 = "%25s:%-5d Device [%u] removed device property [%s] listener";
          uint32_t v22 = 34;
          goto LABEL_35;
        }
      }
      char v26 = (void *)v3[1];
      if (v26)
      {
        do
        {
          __int16 v27 = v26;
          char v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          __int16 v27 = (void *)v3[2];
          BOOL v9 = *v27 == (void)v3;
          uint64_t v3 = v27;
        }
        while (!v9);
      }
      uint64_t v3 = v27;
    }
    while (v27 != v4);
  }
  sub_FCC40(*(void **)(a1 + 168));
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = v4;
  std::mutex::unlock((std::mutex *)(a1 + 96));
}

void sub_20E240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void sub_20E298(char *a1, unsigned int **a2)
{
  AudioObjectID v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    int v55 = (uint64_t **)(a1 + 160);
    BOOL v5 = a1 + 168;
    do
    {
      if ((*(unsigned int (**)(char *, unsigned int *))(*(void *)a1 + 16))(a1, v2))
      {
        uint64_t v6 = *(void *)v2;
        inAddress.AudioObjectPropertyElement mElement = v2[2];
        *(void *)&inAddress.AudioObjectPropertySelector mSelector = v6;
        uint64_t v7 = *v5;
        if (!*v5) {
          goto LABEL_15;
        }
        uint64_t v8 = v5;
        do
        {
          AudioObjectPropertySelector v9 = *(_DWORD *)(v7 + 32);
          BOOL v10 = v9 >= inAddress.mSelector;
          if (v9 >= inAddress.mSelector) {
            uint64_t v11 = (uint64_t *)v7;
          }
          else {
            uint64_t v11 = (uint64_t *)(v7 + 8);
          }
          if (v10) {
            uint64_t v8 = (void *)v7;
          }
          uint64_t v7 = *v11;
        }
        while (*v11);
        if (v8 != v5 && inAddress.mSelector >= *((_DWORD *)v8 + 8))
        {
          uint64_t v47 = (os_log_t *)sub_32A48(17);
          os_log_t v48 = *v47;
          if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_INFO))
          {
            int v49 = (*(uint64_t (**)(char *))(*(void *)a1 + 120))(a1);
            sub_2417C(v59, inAddress.mSelector);
            int v50 = v60;
            int v51 = (void **)v59[0];
            sub_2417C(__p, inAddress.mScope);
            if (v50 >= 0) {
              char v52 = v59;
            }
            else {
              char v52 = v51;
            }
            int v53 = __p;
            if (v58 < 0) {
              int v53 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            char v62 = "PhysicalDevice.cpp";
            __int16 v63 = 1024;
            int v64 = 579;
            __int16 v65 = 1024;
            int v66 = v49;
            __int16 v67 = 2080;
            int v68 = v52;
            __int16 v69 = 2080;
            int v70 = v53;
            os_log_t v21 = v48;
            os_log_type_t v22 = OS_LOG_TYPE_INFO;
            uint64_t v23 = "%25s:%-5d Device %d already added listener for property '%s' '%s'";
            goto LABEL_61;
          }
        }
        else
        {
LABEL_15:
          AudioObjectID v12 = (*(uint64_t (**)(char *))(*(void *)a1 + 120))(a1);
          OSStatus v13 = AudioObjectAddPropertyListener(v12, &inAddress, (AudioObjectPropertyListenerProc)sub_20D1E8, a1);
          if (!v13)
          {
            char v32 = sub_20E8C4(v55, inAddress.mSelector, &inAddress);
            if (v32[7])
            {
              char v34 = v32[6];
              __int16 v33 = v32 + 6;
              int v35 = (void *)*(v33 - 1);
              *(v33 - 1) = v33;
              v34[2] = 0;
              *__int16 v33 = 0;
              v33[1] = 0;
              if (v35[1]) {
                char v36 = (void *)v35[1];
              }
              else {
                char v36 = v35;
              }
              if (v36)
              {
                __int16 v37 = (void *)v36[2];
                if (v37)
                {
                  int v38 = (void *)*v37;
                  if ((void *)*v37 == v36)
                  {
                    *__int16 v37 = 0;
                    while (1)
                    {
                      char v54 = (void *)v37[1];
                      if (!v54) {
                        break;
                      }
                      do
                      {
                        __int16 v37 = v54;
                        char v54 = (void *)*v54;
                      }
                      while (v54);
                    }
                  }
                  else
                  {
                    for (v37[1] = 0; v38; int v38 = (void *)v37[1])
                    {
                      do
                      {
                        __int16 v37 = v38;
                        int v38 = (void *)*v38;
                      }
                      while (v38);
                    }
                  }
                  sub_463E0(v36);
                  for (uint64_t i = (void *)v37[2]; i; uint64_t i = (void *)i[2])
                    __int16 v37 = i;
                  char v36 = v37;
                }
              }
              sub_463E0(v36);
            }
            signed int v40 = (os_log_t *)sub_32A48(17);
            os_log_t v41 = *v40;
            if (!*v40 || !os_log_type_enabled(*v40, OS_LOG_TYPE_INFO)) {
              goto LABEL_66;
            }
            int v42 = (*(uint64_t (**)(char *))(*(void *)a1 + 120))(a1);
            sub_2417C(v59, inAddress.mSelector);
            int v43 = v60;
            __int16 v44 = (void **)v59[0];
            sub_2417C(__p, inAddress.mScope);
            int v45 = v59;
            if (v43 < 0) {
              int v45 = v44;
            }
            __int16 v46 = __p;
            if (v58 < 0) {
              __int16 v46 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            char v62 = "PhysicalDevice.cpp";
            __int16 v63 = 1024;
            int v64 = 573;
            __int16 v65 = 1024;
            int v66 = v42;
            __int16 v67 = 2080;
            int v68 = v45;
            __int16 v69 = 2080;
            int v70 = v46;
            os_log_t v21 = v41;
            os_log_type_t v22 = OS_LOG_TYPE_INFO;
            uint64_t v23 = "%25s:%-5d Device %d added property listener for '%s' '%s'";
LABEL_61:
            uint32_t v24 = 44;
LABEL_62:
            _os_log_impl(&def_1E50E8, v21, v22, v23, buf, v24);
            if (v58 < 0) {
              operator delete(__p[0]);
            }
            if (v60 < 0) {
              operator delete(v59[0]);
            }
            goto LABEL_66;
          }
          uint64_t v14 = (os_log_t *)sub_32A48(17);
          os_log_t v15 = *v14;
          if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
          {
            int v16 = (*(uint64_t (**)(char *))(*(void *)a1 + 120))(a1);
            sub_2417C(v59, *v2);
            int v17 = v60;
            os_log_t v18 = (void **)v59[0];
            sub_2417C(__p, v2[1]);
            if (v17 >= 0) {
              BOOL v19 = v59;
            }
            else {
              BOOL v19 = v18;
            }
            uint64_t v20 = __p;
            if (v58 < 0) {
              uint64_t v20 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
            char v62 = "PhysicalDevice.cpp";
            __int16 v63 = 1024;
            int v64 = 595;
            __int16 v65 = 1024;
            int v66 = v16;
            __int16 v67 = 2080;
            int v68 = v19;
            __int16 v69 = 2080;
            int v70 = v20;
            __int16 v71 = 1024;
            OSStatus v72 = v13;
            os_log_t v21 = v15;
            os_log_type_t v22 = OS_LOG_TYPE_ERROR;
            uint64_t v23 = "%25s:%-5d Device %d failed to add property '%s' '%s', reason: %u";
            uint32_t v24 = 50;
            goto LABEL_62;
          }
        }
      }
      else
      {
        uint32_t v25 = (os_log_t *)sub_32A48(17);
        os_log_t v26 = *v25;
        if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = (*(uint64_t (**)(char *))(*(void *)a1 + 120))(a1);
          sub_2417C(v59, *v2);
          int v28 = v60;
          uint64_t v29 = (void **)v59[0];
          sub_2417C(__p, v2[1]);
          if (v28 >= 0) {
            uint64_t v30 = v59;
          }
          else {
            uint64_t v30 = v29;
          }
          __int16 v31 = __p;
          if (v58 < 0) {
            __int16 v31 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          char v62 = "PhysicalDevice.cpp";
          __int16 v63 = 1024;
          int v64 = 601;
          __int16 v65 = 1024;
          int v66 = v27;
          __int16 v67 = 2080;
          int v68 = v30;
          __int16 v69 = 2080;
          int v70 = v31;
          os_log_t v21 = v26;
          os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
          uint64_t v23 = "%25s:%-5d Device %d does not have property '%s' '%s', cannot register listener";
          goto LABEL_61;
        }
      }
LABEL_66:
      v2 += 3;
    }
    while (v2 != v3);
  }
}

void sub_20E894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_20E8C4(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        BOOL v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      BOOL v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    AudioObjectPropertySelector v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[5] = (uint64_t *)(v7 + 6);
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    BOOL v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_46D00(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void *sub_20E9A0(uint64_t a1, void *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t result = (void *)(a1 + 8);
  BOOL v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v5;
        unint64_t v8 = v5[4];
        unint64_t v9 = v7[5];
        BOOL v10 = v9 > a4;
        if (v8 != a3) {
          BOOL v10 = v8 > a3;
        }
        if (!v10) {
          break;
        }
        BOOL v5 = (void *)*v7;
        uint64_t result = v7;
        if (!*v7) {
          goto LABEL_13;
        }
      }
      BOOL v11 = v9 < a4;
      BOOL v12 = v8 == a3;
      BOOL v13 = v8 < a3;
      if (v12) {
        BOOL v13 = v11;
      }
      if (!v13) {
        break;
      }
      uint64_t result = v7 + 1;
      BOOL v5 = (void *)v7[1];
    }
    while (v5);
  }
  else
  {
    uint64_t v7 = result;
  }
LABEL_13:
  *a2 = v7;
  return result;
}

void sub_20EA18(uint64_t a1, void *a2)
{
  if (*a2 != a2[1])
  {
    AudioObjectID v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        uint64_t v6 = "PhysicalDevice.cpp";
        __int16 v7 = 1024;
        int v8 = 470;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v5, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
}

void sub_20EB1C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_20EB38(uint64_t a1)
{
  uint64_t v1 = sub_99A40(a1);
  *((void *)&v4 + 1) = v2;
  *(void *)&long long v4 = v1;
  return v4 >> 32;
}

void sub_20EB78(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  uint64_t v7 = *(void *)(a1 + 168);
  if (!v7) {
    goto LABEL_12;
  }
  unsigned int v8 = *a2;
  uint64_t v9 = a1 + 168;
  do
  {
    unsigned int v10 = *(_DWORD *)(v7 + 32);
    BOOL v11 = v10 >= v8;
    if (v10 >= v8) {
      BOOL v12 = (uint64_t *)v7;
    }
    else {
      BOOL v12 = (uint64_t *)(v7 + 8);
    }
    if (v11) {
      uint64_t v9 = v7;
    }
    uint64_t v7 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 168 || v8 < *(_DWORD *)(v9 + 32))
  {
LABEL_12:
    BOOL v13 = (os_log_t *)sub_32A48(17);
    os_log_t v14 = *v13;
    if (!*v13 || !os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_41;
    }
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    sub_2417C(v38, *a2);
    int v16 = v39;
    int v17 = (void **)v38[0];
    sub_2417C(__p, a2[1]);
    os_log_t v18 = v38;
    if (v16 < 0) {
      os_log_t v18 = v17;
    }
    if (v37 >= 0) {
      BOOL v19 = __p;
    }
    else {
      BOOL v19 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    os_log_t v41 = "PhysicalDevice.cpp";
    __int16 v42 = 1024;
    int v43 = 555;
    __int16 v44 = 1024;
    int v45 = v15;
    __int16 v46 = 2048;
    uint64_t v47 = a3;
    __int16 v48 = 2080;
    int v49 = v18;
    __int16 v50 = 2080;
    int v51 = v19;
    uint64_t v20 = "%25s:%-5d Device %d has NOT added listener for client: '%p' '%s' '%s'";
    os_log_t v21 = v14;
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    goto LABEL_20;
  }
  uint32_t v25 = *(uint64_t **)(v9 + 40);
  uint64_t v23 = (uint64_t **)(v9 + 40);
  uint32_t v24 = v25;
  if (v25 != (uint64_t *)(v23 + 1))
  {
    while (v24[5] != a3)
    {
      os_log_t v26 = (uint64_t *)v24[1];
      if (v26)
      {
        do
        {
          int v27 = (uint64_t **)v26;
          os_log_t v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          int v27 = (uint64_t **)v24[2];
          BOOL v28 = *v27 == v24;
          uint32_t v24 = (uint64_t *)v27;
        }
        while (!v28);
      }
      uint32_t v24 = (uint64_t *)v27;
      if (v27 == v23 + 1) {
        goto LABEL_41;
      }
    }
    sub_20DBD0(v23, v24);
    operator delete(v24);
    uint64_t v29 = (os_log_t *)sub_32A48(17);
    os_log_t v30 = *v29;
    if (*v29)
    {
      if (os_log_type_enabled(*v29, OS_LOG_TYPE_INFO))
      {
        int v31 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        sub_2417C(v38, *a2);
        int v32 = v39;
        __int16 v33 = (void **)v38[0];
        sub_2417C(__p, a2[1]);
        char v34 = v38;
        if (v32 < 0) {
          char v34 = v33;
        }
        if (v37 >= 0) {
          int v35 = __p;
        }
        else {
          int v35 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        os_log_t v41 = "PhysicalDevice.cpp";
        __int16 v42 = 1024;
        int v43 = 543;
        __int16 v44 = 1024;
        int v45 = v31;
        __int16 v46 = 2048;
        uint64_t v47 = a3;
        __int16 v48 = 2080;
        int v49 = v34;
        __int16 v50 = 2080;
        int v51 = v35;
        uint64_t v20 = "%25s:%-5d Device %d removed listener for client: '%p' '%s' '%s'";
        os_log_t v21 = v30;
        os_log_type_t v22 = OS_LOG_TYPE_INFO;
LABEL_20:
        _os_log_impl(&def_1E50E8, v21, v22, v20, buf, 0x36u);
        if (v37 < 0) {
          operator delete(__p[0]);
        }
        if (v39 < 0) {
          operator delete(v38[0]);
        }
      }
    }
  }
LABEL_41:
  std::mutex::unlock(v6);
}

void sub_20EECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_20EF10(uint64_t a1, unsigned int *a2, unint64_t a3, unint64_t a4)
{
  unsigned int v8 = (std::mutex *)(a1 + 96);
  std::mutex::lock((std::mutex *)(a1 + 96));
  uint64_t v9 = *(void *)(a1 + 168);
  if (v9)
  {
    unsigned int v10 = *a2;
    uint64_t v11 = a1 + 168;
    do
    {
      unsigned int v12 = *(_DWORD *)(v9 + 32);
      BOOL v13 = v12 >= v10;
      if (v12 >= v10) {
        os_log_t v14 = (uint64_t *)v9;
      }
      else {
        os_log_t v14 = (uint64_t *)(v9 + 8);
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      uint64_t v9 = *v14;
    }
    while (*v14);
    if (v11 != a1 + 168 && v10 >= *(_DWORD *)(v11 + 32))
    {
      uint32_t v24 = sub_20E8C4((uint64_t **)(a1 + 160), v10, a2) + 5;
      uint32_t v25 = (uint64_t **)sub_20E9A0((uint64_t)v24, buf, a3, a4);
      if (!*v25)
      {
        os_log_t v26 = v25;
        int v27 = (uint64_t *)operator new(0x30uLL);
        v27[4] = a3;
        v27[5] = a4;
        sub_46CA8(v24, *(uint64_t *)buf, v26, v27);
      }
      BOOL v28 = (os_log_t *)sub_32A48(17);
      uint64_t v29 = *v28;
      if (*v28)
      {
        uint64_t v17 = 1;
        if (!os_log_type_enabled(*v28, OS_LOG_TYPE_INFO)) {
          goto LABEL_24;
        }
        int v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        sub_2417C(v37, *a2);
        int v31 = v38;
        int v32 = (void **)v37[0];
        sub_2417C(__p, a2[1]);
        __int16 v33 = v37;
        if (v31 < 0) {
          __int16 v33 = v32;
        }
        if (v36 >= 0) {
          char v34 = __p;
        }
        else {
          char v34 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
        __int16 v40 = 1024;
        int v41 = 516;
        __int16 v42 = 1024;
        int v43 = v30;
        __int16 v44 = 2048;
        unint64_t v45 = a4;
        __int16 v46 = 2080;
        uint64_t v47 = v33;
        __int16 v48 = 2080;
        int v49 = v34;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_INFO, "%25s:%-5d PlaybackDosimetry: Device %d registered listener for client: '%p' '%s' '%s'", buf, 0x36u);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        if (v38 < 0) {
          operator delete(v37[0]);
        }
      }
      uint64_t v17 = 1;
      goto LABEL_24;
    }
  }
  int v15 = (os_log_t *)sub_32A48(17);
  int v16 = *v15;
  if (!*v15) {
    goto LABEL_23;
  }
  uint64_t v17 = 0;
  if (os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    sub_2417C(v37, *a2);
    int v19 = v38;
    uint64_t v20 = (void **)v37[0];
    sub_2417C(__p, a2[1]);
    os_log_t v21 = v37;
    if (v19 < 0) {
      os_log_t v21 = v20;
    }
    if (v36 >= 0) {
      os_log_type_t v22 = __p;
    }
    else {
      os_log_type_t v22 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
    __int16 v40 = 1024;
    int v41 = 522;
    __int16 v42 = 1024;
    int v43 = v18;
    __int16 v44 = 2048;
    unint64_t v45 = a4;
    __int16 v46 = 2080;
    uint64_t v47 = v21;
    __int16 v48 = 2080;
    int v49 = v22;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %d has NOT added listener for client: '%p' '%s' '%s'", buf, 0x36u);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
    if (v38 < 0) {
      operator delete(v37[0]);
    }
LABEL_23:
    uint64_t v17 = 0;
  }
LABEL_24:
  std::mutex::unlock(v8);
  return v17;
}

void sub_20F288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_20F2D4(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1);
  if (!v2)
  {
LABEL_14:
    uint64_t v11 = 0;
    LODWORD(v4) = 0;
    return v11 | v4;
  }
  int v3 = v2;
  uint64_t v4 = 0;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v13, a1, 1, v4);
    if (v14) {
      break;
    }
LABEL_13:
    uint64_t v4 = (v4 + 1);
    if (v3 == v4) {
      goto LABEL_14;
    }
  }
  int v5 = std::__shared_weak_count::lock(v14);
  if (!v5)
  {
LABEL_11:
    if (v14) {
      std::__shared_weak_count::__release_weak(v14);
    }
    goto LABEL_13;
  }
  uint64_t v6 = v5;
  if (!v13
    || ((uint64_t v15 = 0x676C6F627465726DLL,
         int v16 = 0,
         uint64_t v7 = sub_99A40(v13),
         *((void *)&v9 + 1) = v8,
         *(void *)&long long v9 = v7,
         ((v9 >> 32) & 0xFF00000000) != 0)
      ? (BOOL v10 = HIDWORD(v7) == 1768843885)
      : (BOOL v10 = 0),
        !v10))
  {
    sub_4636C(v6);
    goto LABEL_11;
  }
  sub_4636C(v6);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  uint64_t v11 = 0x100000000;
  return v11 | v4;
}

uint64_t sub_20F42C(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88))(a1, 0);
  if (v2
    && (uint64_t v3 = (v2 - 1),
        (uint64_t v4 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 96))(a1, 0, v3)) != 0)
    && ((uint64_t v5 = sub_99A40(v4), *((void *)&v7 + 1) = v6, *(void *)&v7 = v5, ((v7 >> 32) & 0xFF00000000) != 0)
      ? (BOOL v8 = HIDWORD(v5) == 0)
      : (BOOL v8 = 1),
        !v8))
  {
    int v9 = v3 & 0xFFFFFF00;
    unsigned int v10 = v3;
    uint64_t v11 = 0x100000000;
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    int v9 = 0;
  }
  return v11 | v9 | v10;
}

double sub_20F514(uint64_t a1, double a2)
{
  __int16 v71 = 0;
  uint64_t v72 = 0;
  int v70 = &v71;
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1);
  if (v3)
  {
    char v4 = 0;
    char v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 1, v6);
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v7 + 112))(v7, buf);
      if (*(int *)&buf[8] <= 1667509042)
      {
        BOOL v8 = *(_DWORD *)&buf[8] == 1633889587 || *(_DWORD *)&buf[8] == 1667326771;
        if (v8)
        {
          char v5 = 1;
          goto LABEL_19;
        }
        int v9 = 1667443507;
      }
      else
      {
        if (*(int *)&buf[8] <= 1836343850)
        {
          if (*(_DWORD *)&buf[8] != 1667509043)
          {
            if (*(_DWORD *)&buf[8] == 1667588915) {
              char v5 = 1;
            }
            goto LABEL_19;
          }
LABEL_18:
          char v4 = 1;
          goto LABEL_19;
        }
        if (*(_DWORD *)&buf[8] == 1836343851) {
          goto LABEL_18;
        }
        int v9 = 1836344107;
      }
      if (*(_DWORD *)&buf[8] == v9) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v6 = (v6 + 1);
      if (v3 == v6) {
        goto LABEL_22;
      }
    }
  }
  char v5 = 0;
  char v4 = 0;
LABEL_22:
  char v10 = 0;
  uint64_t v11 = 0;
  __int16 v69 = 256;
  do
  {
    char v65 = v10;
    int v66 = *((unsigned __int8 *)&v69 + v11);
    int v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
    if (!v12) {
      goto LABEL_57;
    }
    uint64_t v13 = 0;
    do
    {
      memset(buf, 0, 24);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)a1 + 96))(a1, v66 != 0, v13);
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v14 + 96))(v14, buf);
      uint64_t v16 = *(void *)buf;
      uint64_t v15 = *(void *)&buf[8];
      if (*(void *)buf == *(void *)&buf[8]) {
        goto LABEL_54;
      }
      do
      {
        int v17 = *(_DWORD *)(v16 + 8);
        if (v17 != 1819304813)
        {
          if ((v5 & 1) == 0
            || (v17 != 1633889587 ? (BOOL v18 = v17 == 1667326771) : (BOOL v18 = 1),
                !v18 ? (BOOL v19 = v17 == 1667588915) : (BOOL v19 = 1),
                !v19))
          {
            if ((v4 & 1) == 0) {
              goto LABEL_52;
            }
            if (v17 > 1836343850)
            {
              if (v17 != 1836344107)
              {
                int v20 = 1836343851;
LABEL_41:
                if (v17 != v20) {
                  goto LABEL_52;
                }
              }
            }
            else if (v17 != 1667443507)
            {
              int v20 = 1667509043;
              goto LABEL_41;
            }
          }
        }
        long long v68 = *(_OWORD *)(v16 + 40);
        os_log_t v21 = v71;
        os_log_type_t v22 = &v71;
        uint64_t v23 = &v71;
        if (v71)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v23 = (uint64_t **)v21;
              double v24 = *((double *)v21 + 4);
              if (*(double *)&v68 >= v24) {
                break;
              }
              os_log_t v21 = (uint64_t *)*v21;
              os_log_type_t v22 = v23;
              if (!*v23) {
                goto LABEL_49;
              }
            }
            if (v24 >= *(double *)&v68) {
              break;
            }
            os_log_t v21 = (uint64_t *)v21[1];
            if (!v21)
            {
              os_log_type_t v22 = v23 + 1;
              goto LABEL_49;
            }
          }
        }
        else
        {
LABEL_49:
          uint32_t v25 = operator new(0x30uLL);
          void v25[2] = v68;
          *(void *)uint32_t v25 = 0;
          *((void *)v25 + 1) = 0;
          *((void *)v25 + 2) = v23;
          *os_log_type_t v22 = (uint64_t *)v25;
          if (*v70)
          {
            int v70 = (uint64_t **)*v70;
            uint32_t v25 = *v22;
          }
          sub_46D00(v71, (uint64_t *)v25);
          ++v72;
        }
LABEL_52:
        v16 += 56;
      }
      while (v16 != v15);
      uint64_t v16 = *(void *)buf;
LABEL_54:
      if (v16)
      {
        *(void *)&buf[8] = v16;
        operator delete((void *)v16);
      }
      uint64_t v13 = (v13 + 1);
    }
    while (v13 != v12);
LABEL_57:
    char v10 = 1;
    uint64_t v11 = 1;
  }
  while ((v65 & 1) == 0);
  os_log_t v26 = v70;
  if (v70 != &v71)
  {
    int v27 = v70;
    while (*((double *)v27 + 4) > a2 || *((double *)v27 + 5) < a2)
    {
      uint64_t v29 = v27[1];
      if (v29)
      {
        do
        {
          int v30 = (uint64_t **)v29;
          uint64_t v29 = (uint64_t *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          int v30 = (uint64_t **)v27[2];
          BOOL v8 = *v30 == (uint64_t *)v27;
          int v27 = v30;
        }
        while (!v8);
      }
      int v27 = v30;
      if (v30 == &v71) {
        goto LABEL_74;
      }
    }
    if (v27 != &v71)
    {
      double v31 = a2;
      goto LABEL_162;
    }
  }
LABEL_74:
  char v32 = 0;
  double v33 = 2.0;
  do
  {
    while (1)
    {
      char v34 = v32;
      if (v70 != &v71) {
        break;
      }
      double v33 = 3.0;
      char v32 = 1;
      if (v34) {
        goto LABEL_121;
      }
    }
    double v31 = v33 * a2;
    int v35 = v70;
    while (*((double *)v35 + 4) > v31 || *((double *)v35 + 5) < v31)
    {
      char v37 = v35[1];
      if (v37)
      {
        do
        {
          char v38 = (uint64_t **)v37;
          char v37 = (uint64_t *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          char v38 = (uint64_t **)v35[2];
          BOOL v8 = *v38 == (uint64_t *)v35;
          int v35 = v38;
        }
        while (!v8);
      }
      int v35 = v38;
      if (v38 == &v71) {
        goto LABEL_92;
      }
    }
    if (v35 != &v71) {
      goto LABEL_162;
    }
LABEL_92:
    double v33 = 3.0;
    char v32 = 1;
  }
  while ((v34 & 1) == 0);
  if (v70 == &v71)
  {
LABEL_121:
    char v39 = 0;
    __int16 v40 = 0;
    goto LABEL_122;
  }
  char v39 = 0;
  __int16 v40 = 0;
  unint64_t v41 = 0;
  do
  {
    __int16 v42 = v26 + 4;
    if ((unint64_t)v40 >= v41)
    {
      uint64_t v43 = ((char *)v40 - (char *)v39) >> 4;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60) {
        sub_60548();
      }
      if ((uint64_t)(v41 - (void)v39) >> 3 > v44) {
        unint64_t v44 = (uint64_t)(v41 - (void)v39) >> 3;
      }
      if (v41 - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v44;
      }
      if (v45) {
        unint64_t v45 = (unint64_t)sub_10724(v45);
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v47 = (_OWORD *)(v45 + 16 * v43);
      *uint64_t v47 = *v42;
      if (v40 == v39)
      {
        int v49 = (double *)(v45 + 16 * v43);
      }
      else
      {
        unint64_t v48 = v45 + 16 * v43;
        do
        {
          int v49 = (double *)(v48 - 16);
          *(_OWORD *)(v48 - 16) = *((_OWORD *)v40 - 1);
          v40 -= 2;
          v48 -= 16;
        }
        while (v40 != v39);
      }
      unint64_t v41 = v45 + 16 * v46;
      __int16 v40 = (double *)(v47 + 1);
      if (v39) {
        operator delete(v39);
      }
      char v39 = v49;
    }
    else
    {
      *(_OWORD *)__int16 v40 = *v42;
      v40 += 2;
    }
    __int16 v50 = v26[1];
    if (v50)
    {
      do
      {
        int v51 = (uint64_t **)v50;
        __int16 v50 = (uint64_t *)*v50;
      }
      while (v50);
    }
    else
    {
      do
      {
        int v51 = (uint64_t **)v26[2];
        BOOL v8 = *v51 == (uint64_t *)v26;
        os_log_t v26 = v51;
      }
      while (!v8);
    }
    os_log_t v26 = v51;
  }
  while (v51 != &v71);
LABEL_122:
  unint64_t v52 = 126 - 2 * __clz(((char *)v40 - (char *)v39) >> 4);
  if (v40 == v39) {
    uint64_t v53 = 0;
  }
  else {
    uint64_t v53 = v52;
  }
  sub_458938((unint64_t)v39, v40, v53, 1);
  char v54 = v39;
  if (v40 != v39)
  {
    char v54 = v39;
    while (*v54 == 44100.0 || *v54 <= a2)
    {
      v54 += 2;
      if (v54 == v40) {
        goto LABEL_135;
      }
    }
  }
  if (v54 == v40)
  {
LABEL_135:
    char v56 = v70;
    double v31 = 44100.0;
    if (a2 >= 44100.0 || v70 == &v71) {
      goto LABEL_149;
    }
    while (*((double *)v56 + 4) > 44100.0 || *((double *)v56 + 5) < 44100.0)
    {
      char v58 = v56[1];
      if (v58)
      {
        do
        {
          int v59 = (uint64_t **)v58;
          char v58 = (uint64_t *)*v58;
        }
        while (v58);
      }
      else
      {
        do
        {
          int v59 = (uint64_t **)v56[2];
          BOOL v8 = *v59 == (uint64_t *)v56;
          char v56 = v59;
        }
        while (!v8);
      }
      char v56 = v59;
      if (v59 == &v71) {
        goto LABEL_149;
      }
    }
    if (v56 == &v71)
    {
LABEL_149:
      sub_459068(v39, v40, v53, 1);
      char v60 = v39;
      if (v40 != v39)
      {
        char v60 = v39;
        while (v60[1] >= a2)
        {
          v60 += 2;
          if (v60 == v40) {
            goto LABEL_153;
          }
        }
      }
      if (v60 == v40)
      {
LABEL_153:
        int v61 = (os_log_t *)sub_32A48(13);
        char v62 = *v61;
        if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "PhysicalDeviceUtilities.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = 262;
          _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Did not find a valid matching sample rate\"", buf, 0x12u);
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Did not find a valid matching sample rate");
      }
      char v54 = v60 + 1;
      goto LABEL_159;
    }
  }
  else
  {
LABEL_159:
    double v31 = *v54;
  }
  if (v39) {
    operator delete(v39);
  }
LABEL_162:
  sub_463E0(v71);
  return v31;
}

void sub_20FD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void sub_20FD7C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_20FD88(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_20FD98(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 216);
  if (!v8) {
    goto LABEL_37;
  }
  uint64_t v9 = a1 + 216;
  do
  {
    unsigned int v10 = *(unsigned __int8 *)(v8 + 32);
    BOOL v11 = v10 == a2;
    if (v10 >= a2) {
      char v12 = 1;
    }
    else {
      char v12 = -1;
    }
    if (v11)
    {
      unsigned int v13 = *(_DWORD *)(v8 + 36);
      BOOL v14 = v13 == a3;
      char v12 = v13 >= a3 ? 1 : -1;
      if (v14) {
        char v12 = 0;
      }
    }
    BOOL v15 = (v12 & 0x80) == 0;
    if (v12 < 0) {
      uint64_t v16 = (uint64_t *)(v8 + 8);
    }
    else {
      uint64_t v16 = (uint64_t *)v8;
    }
    if (v15) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = *v16;
  }
  while (*v16);
  if (a1 + 216 == v9) {
    goto LABEL_37;
  }
  unsigned int v17 = *(unsigned __int8 *)(v9 + 32);
  BOOL v18 = v17 == a2;
  if (v17 <= a2) {
    char v19 = 1;
  }
  else {
    char v19 = -1;
  }
  if (v18)
  {
    unsigned int v20 = *(_DWORD *)(v9 + 36);
    BOOL v21 = v20 == a3;
    BOOL v22 = v20 > a3;
    char v19 = -1;
    if (!v22) {
      char v19 = 1;
    }
    if (v21) {
      char v19 = 0;
    }
  }
  if (v19 < 0)
  {
LABEL_37:
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    if ((a2 & 1) == 0)
    {
      char v32 = (os_log_t *)sub_32A48(17);
      double v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(theString, a1);
        sub_21B7C(v59, theString[0]);
        int v34 = v60;
        int v35 = (void **)v59[0];
        sub_2417C(__p, a3);
        char v36 = v59;
        if (v34 < 0) {
          char v36 = v35;
        }
        if (v58 >= 0) {
          char v37 = __p;
        }
        else {
          char v37 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
        __int16 v64 = 1024;
        int v65 = 342;
        __int16 v66 = 2080;
        __int16 v67 = v36;
        __int16 v68 = 2080;
        __int16 v69 = v37;
        _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No control present for (%s %s). returning null volumecontrol", buf, 0x26u);
        if (v58 < 0) {
          operator delete(__p[0]);
        }
        if (v60 < 0) {
          operator delete(v59[0]);
        }
        sub_72924((uint64_t)theString);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64DE40, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_64DE40))
      {
        sub_D126C(&qword_64DE30);
        __cxa_guard_release(&qword_64DE40);
      }
      uint64_t v39 = qword_64DE30;
      char v38 = *(std::__shared_weak_count **)algn_64DE38;
      if (*(void *)algn_64DE38)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)algn_64DE38 + 8), 1uLL, memory_order_relaxed);
        *a4 = v39;
        a4[1] = (uint64_t)v38;
        atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v38);
      }
      else
      {
        *a4 = qword_64DE30;
        a4[1] = 0;
      }
      return;
    }
LABEL_80:
    int v49 = (os_log_t *)sub_32A48(13);
    __int16 v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      __int16 v64 = 1024;
      int v65 = 346;
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }
  uint64_t v24 = *(void *)(v9 + 40);
  uint64_t v23 = *(void *)(v9 + 48);
  uint64_t v61 = v24;
  uint64_t v62 = v23;
  if (!v23) {
    goto LABEL_80;
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
  if (*(void *)(v23 + 8) == -1) {
    goto LABEL_80;
  }
  uint64_t v25 = sub_32A48(17);
  uint64_t v26 = sub_32A48(38);
  char v27 = 0;
  uint64_t v28 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v29 = *(void *)(v25 + 8);
  while (1)
  {
    uint64_t v30 = *(int *)&buf[4 * v28];
    char v31 = v27;
    if (((v29 & v30) != 0) != ((*(void *)(v26 + 8) & v30) != 0)) {
      break;
    }
    char v27 = 1;
    uint64_t v28 = 1;
    if (v31)
    {
      if ((v29 & 1) == 0) {
        goto LABEL_78;
      }
      goto LABEL_57;
    }
  }
  if ((v29 & v30) == 0) {
    uint64_t v25 = v26;
  }
  if (*(void *)(v25 + 8))
  {
LABEL_57:
    __int16 v40 = *(NSObject **)v25;
    if (v40 && os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      sub_D180C(&v55, &v61, "", 350);
      uint64_t v41 = v55;
      if (a2) {
        __int16 v42 = "output";
      }
      else {
        __int16 v42 = "input";
      }
      sub_21C8C(v59, v42);
      uint64_t v43 = v41;
      if (v60 >= 0) {
        unint64_t v44 = v59;
      }
      else {
        unint64_t v44 = (void **)v59[0];
      }
      unint64_t v52 = v44;
      sub_2417C(__p, a3);
      int v45 = v58;
      uint64_t v46 = (void **)__p[0];
      sub_4F64((uint64_t)theString, (os_unfair_lock_t)(a1 + 8));
      uint64_t v47 = __p;
      if (v45 < 0) {
        uint64_t v47 = v46;
      }
      if (v54 >= 0) {
        unint64_t v48 = theString;
      }
      else {
        unint64_t v48 = (CFStringRef *)theString[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      __int16 v64 = 1024;
      int v65 = 350;
      __int16 v66 = 2048;
      __int16 v67 = (void **)v43;
      __int16 v68 = 2080;
      __int16 v69 = v52;
      __int16 v70 = 2080;
      __int16 v71 = v47;
      __int16 v72 = 2080;
      char v73 = v48;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning control %p for %s VirtualAudioPortType '%s' on VAD: '%s'.", buf, 0x3Au);
      if (v54 < 0) {
        operator delete((void *)theString[0]);
      }
      if (v58 < 0) {
        operator delete(__p[0]);
      }
      if (v60 < 0) {
        operator delete(v59[0]);
      }
      if (v56) {
        sub_4636C(v56);
      }
    }
  }
LABEL_78:
  *a4 = v24;
  a4[1] = v23;
}

void sub_2102D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void sub_210398(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 192);
  if (!v8) {
    goto LABEL_32;
  }
  uint64_t v9 = a1 + 192;
  do
  {
    unsigned int v10 = *(unsigned __int8 *)(v8 + 32);
    BOOL v11 = v10 == a2;
    if (v10 >= a2) {
      char v12 = 1;
    }
    else {
      char v12 = -1;
    }
    if (v11)
    {
      unsigned int v13 = *(_DWORD *)(v8 + 36);
      BOOL v14 = v13 == a3;
      char v12 = v13 >= a3 ? 1 : -1;
      if (v14) {
        char v12 = 0;
      }
    }
    BOOL v15 = (v12 & 0x80) == 0;
    if (v12 < 0) {
      uint64_t v16 = (uint64_t *)(v8 + 8);
    }
    else {
      uint64_t v16 = (uint64_t *)v8;
    }
    if (v15) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = *v16;
  }
  while (*v16);
  if (a1 + 192 == v9) {
    goto LABEL_32;
  }
  unsigned int v17 = *(unsigned __int8 *)(v9 + 32);
  BOOL v18 = v17 == a2;
  if (v17 <= a2) {
    char v19 = 1;
  }
  else {
    char v19 = -1;
  }
  if (v18)
  {
    unsigned int v20 = *(_DWORD *)(v9 + 36);
    BOOL v21 = v20 == a3;
    BOOL v22 = v20 > a3;
    char v19 = -1;
    if (!v22) {
      char v19 = 1;
    }
    if (v21) {
      char v19 = 0;
    }
  }
  if (v19 < 0)
  {
LABEL_32:
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    uint64_t v23 = *(void *)(v9 + 48);
    *a4 = *(void *)(v9 + 40);
    a4[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 16), 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v24 = sub_32A48(17);
  uint64_t v25 = sub_32A48(38);
  char v26 = 0;
  uint64_t v27 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v28 = *(void *)(v24 + 8);
  while (1)
  {
    uint64_t v29 = *(int *)&buf[4 * v27];
    char v30 = v26;
    if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
      break;
    }
    char v26 = 1;
    uint64_t v27 = 1;
    if (v30)
    {
      if ((v28 & 1) == 0) {
        return;
      }
      goto LABEL_41;
    }
  }
  if ((v28 & v29) == 0) {
    uint64_t v24 = v25;
  }
  if (*(void *)(v24 + 8))
  {
LABEL_41:
    char v31 = *(NSObject **)v24;
    if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      sub_166F08(&v45, a4, "", 330);
      uint64_t v32 = v45;
      if (a2) {
        double v33 = "output";
      }
      else {
        double v33 = "input";
      }
      int v34 = v43;
      sub_21C8C(v43, v33);
      if (v44 < 0) {
        int v34 = (void **)v43[0];
      }
      sub_2417C(v41, a3);
      int v35 = v42;
      char v36 = (void **)v41[0];
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
      char v37 = v41;
      if (v35 < 0) {
        char v37 = v36;
      }
      if (v40 >= 0) {
        char v38 = __p;
      }
      else {
        char v38 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      __int16 v48 = 1024;
      int v49 = 330;
      __int16 v50 = 2048;
      uint64_t v51 = v32;
      __int16 v52 = 2080;
      uint64_t v53 = v34;
      __int16 v54 = 2080;
      uint64_t v55 = v37;
      __int16 v56 = 2080;
      int v57 = v38;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning control %p for %s VirtualAudioPortType '%s' on VAD: '%s'.", buf, 0x3Au);
      if (v40 < 0) {
        operator delete(__p[0]);
      }
      if (v42 < 0) {
        operator delete(v41[0]);
      }
      if (v44 < 0) {
        operator delete(v43[0]);
      }
      if (v46) {
        sub_4636C(v46);
      }
    }
  }
}

void sub_210684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a26) {
    sub_4636C(a26);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2106EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D448, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D448))
  {
    sub_2108B8();
    __cxa_guard_release(&qword_64D448);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64DE18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64DE18))
  {
    std::random_device::result_type v10 = std::random_device::operator()(&stru_64D444);
    dword_64D450[0] = v10;
    for (uint64_t i = 1; i != 624; ++i)
    {
      std::random_device::result_type v10 = i + 1812433253 * (v10 ^ (v10 >> 30));
      dword_64D450[i] = v10;
    }
    qword_64DE10 = 0;
    __cxa_guard_release(&qword_64DE18);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64DE28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64DE28))
  {
    qword_64DE20 = 0xFFFFFFFE00000001;
    __cxa_guard_release(&qword_64DE28);
  }
  int v1 = qword_64DE20;
  uint64_t result = HIDWORD(qword_64DE20);
  int v2 = HIDWORD(qword_64DE20) - qword_64DE20;
  if (HIDWORD(qword_64DE20) != qword_64DE20)
  {
    unsigned int v3 = v2 + 1;
    if (v2 == -1)
    {
      return sub_210928();
    }
    else
    {
      uint64_t v4 = __clz(v3);
      uint64_t v5 = 31;
      if (((v3 << v4) & 0x7FFFFFFF) != 0) {
        uint64_t v5 = 32;
      }
      unint64_t v6 = v5 - v4;
      unint64_t v7 = v6 >> 5;
      if ((v6 & 0x1F) != 0) {
        ++v7;
      }
      if (v7 <= v6) {
        unsigned int v8 = 0xFFFFFFFF >> -(v6 / v7);
      }
      else {
        unsigned int v8 = 0;
      }
      do
        unsigned int v9 = sub_210928() & v8;
      while (v9 >= v3);
      return v1 + v9;
    }
  }
  return result;
}

void sub_210890(_Unwind_Exception *a1)
{
}

void sub_2108B8()
{
  sub_21C8C(&__token, "/dev/urandom");
  std::random_device::random_device(&stru_64D444, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
}

void sub_21090C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_210928()
{
  unint64_t v0 = (qword_64DE10 + 1) % 0x270uLL;
  unsigned int v1 = dword_64D450[(qword_64DE10 + 397) % 0x270uLL] ^ ((dword_64D450[v0] & 0x7FFFFFFE | dword_64D450[qword_64DE10] & 0x80000000) >> 1) ^ (dword_64D450[v0] << 31 >> 31) & 0x9908B0DF;
  dword_64D450[qword_64DE10] = v1;
  qword_64DE10 = v0;
  unsigned int v2 = ((v1 ^ (v1 >> 11)) << 7) & 0x9D2C5680 ^ v1 ^ (v1 >> 11);
  return (v2 << 15) & 0xEFC60000 ^ v2 ^ (((v2 << 15) & 0xEFC60000 ^ v2) >> 18);
}

double sub_2109D0(void *a1, uint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a3 + 184))
  {
    unsigned int v8 = (os_log_t *)sub_32A48(13);
    unsigned int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      BOOL v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 61;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, 1) != 1)
  {
    BOOL v11 = (os_log_t *)sub_32A48(13);
    char v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      BOOL v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 62;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    unsigned int v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }
  unint64_t v6 = sub_210C08(a1, a2);
  return sub_210CF0(v6, a3, 0);
}

void sub_210BD8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_210C08(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = a1 + 1;
  unsigned int v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
  sub_2110A0(v4, v5);
  unsigned int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, 1);
  sub_2110A0(a1 + 4, v6);
  a1[8] = 0;
  a1[7] = a1 + 8;
  a1[12] = 0;
  a1[11] = 0;
  a1[9] = 0;
  a1[10] = a1 + 11;
  return a1;
}

void sub_210CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_7308C((void ***)va);
  _Unwind_Resume(a1);
}

double sub_210CF0(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = a1 + 1;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - a1[1]) >> 3);
  if (v7 != (*(unsigned int (**)(uint64_t, void))(*(void *)*a1 + 88))(*a1, 0))
  {
    BOOL v15 = (os_log_t *)sub_32A48(13);
    __int16 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v24 = 136315394;
      *(void *)&v24[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 227;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", v24, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[5] - a1[4]) >> 3);
  if (v8 != (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)*a1 + 88))(*a1, 1))
  {
    BOOL v18 = (os_log_t *)sub_32A48(13);
    char v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v24 = 136315394;
      *(void *)&v24[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 228;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", v24, 0x12u);
    }
    unsigned int v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Invariant failure.");
  }
  if (*(_WORD *)(a2 + 184)) {
    unsigned int v9 = v6;
  }
  else {
    unsigned int v9 = a1 + 4;
  }
  uint64_t v10 = *v9;
  if (0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 3) <= a3)
  {
    BOOL v21 = (os_log_t *)sub_32A48(13);
    BOOL v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v24 = 136315394;
      *(void *)&v24[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v24[12] = 1024;
      *(_DWORD *)&v24[14] = 231;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v24, 0x12u);
    }
    uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "Precondition failure.");
  }
  sub_E18E0(v24, (uint64_t *)(a2 + 80));
  BOOL v11 = operator new(0x20uLL);
  char v12 = (uint64_t *)(v10 + 24 * a3);
  double result = *(double *)v24;
  v11[1] = *(_OWORD *)v24;
  *((void *)v11 + 1) = v12;
  uint64_t v14 = *v12;
  *(void *)BOOL v11 = *v12;
  *(void *)(v14 + 8) = v11;
  *char v12 = (uint64_t)v11;
  ++v12[2];
  return result;
}

void sub_211068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void *sub_2110A0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_7373C(a1, a2);
    uint64_t v4 = (void *)a1[1];
    unsigned int v5 = &v4[3 * a2];
    do
    {
      *uint64_t v4 = v4;
      v4[1] = v4;
      v4[2] = 0;
      v4 += 3;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_211110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_211124(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a3 + 184))
  {
    unint64_t v8 = (os_log_t *)sub_32A48(13);
    unsigned int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      BOOL v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 72;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, 1))
  {
    BOOL v11 = (os_log_t *)sub_32A48(13);
    char v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      BOOL v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 73;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    unsigned int v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }
  sub_210C08(a1, a2);
  for (unsigned __int16 i = 0; ; ++i)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, 1);
    if (result <= i) {
      break;
    }
    sub_210CF0(a1, a3, i);
  }
  return result;
}

void sub_211370(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2113A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(_WORD *)(a3 + 184) & 1) == 0)
  {
    unsigned int v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      __int16 v16 = "PhysicalDevice.cpp";
      __int16 v17 = 1024;
      int v18 = 86;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v15, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0) != 1)
  {
    char v12 = (os_log_t *)sub_32A48(13);
    unsigned int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      __int16 v16 = "PhysicalDevice.cpp";
      __int16 v17 = 1024;
      int v18 = 87;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v15, 0x12u);
    }
    int v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "Precondition failure.");
  }
  unint64_t v8 = (uint64_t **)sub_210C08(a1, a2);
  sub_2115E0(v8, a3, a4, 0);
}

void sub_2115B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2115E0(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  sub_1329C(&v54, *(void *)(a2 + 80), *(std::__shared_weak_count **)(a2 + 88));
  unint64_t v8 = a1 + 7;
  unsigned int v9 = v55;
  *(void *)AudioObjectPropertyAddress buf = v54;
  *(void *)&buf[8] = v55;
  if (v55)
  {
    atomic_fetch_add_explicit(&v55->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = (uint64_t **)sub_1EDFC0((uint64_t)(a1 + 7), (unint64_t *)buf);
    std::__shared_weak_count::__release_weak(v9);
    if (a1 + 8 == v10) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v25 = (os_log_t *)sub_32A48(13);
    char v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 240;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    goto LABEL_18;
  }
  if (a1 + 8 != sub_1EDFC0((uint64_t)(a1 + 7), (unint64_t *)buf)) {
    goto LABEL_15;
  }
LABEL_3:
  BOOL v11 = a1 + 10;
  char v12 = v55;
  *(void *)AudioObjectPropertyAddress buf = v54;
  *(void *)&buf[8] = v55;
  if (v55)
  {
    atomic_fetch_add_explicit(&v55->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unsigned int v13 = (uint64_t **)sub_1EDFC0((uint64_t)(a1 + 10), (unint64_t *)buf);
    std::__shared_weak_count::__release_weak(v12);
    if (a1 + 11 == v13) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
  if (a1 + 11 != sub_1EDFC0((uint64_t)(a1 + 10), (unint64_t *)buf))
  {
LABEL_20:
    uint64_t v28 = (os_log_t *)sub_32A48(13);
    uint64_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 242;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
LABEL_18:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
    goto LABEL_57;
  }
LABEL_5:
  int v14 = a1[1];
  int v15 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * (v15 - v14) != (*(unsigned int (**)(uint64_t *, void))(**a1 + 88))(*a1, 0))
  {
    char v40 = (os_log_t *)sub_32A48(13);
    uint64_t v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 243;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
    }
    goto LABEL_56;
  }
  __int16 v16 = a1[4];
  __int16 v17 = a1[5];
  if (0xAAAAAAAAAAAAAAABLL * (v17 - v16) != (*(unsigned int (**)(uint64_t *, uint64_t))(**a1 + 88))(*a1, 1))
  {
    char v42 = (os_log_t *)sub_32A48(13);
    uint64_t v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 244;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
    }
LABEL_56:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
LABEL_57:
  }
  __int16 v18 = *(_WORD *)(v54 + 184);
  if (v18) {
    char v19 = (uint64_t *)(a1 + 1);
  }
  else {
    char v19 = (uint64_t *)(a1 + 4);
  }
  uint64_t v20 = *v19;
  if (0xAAAAAAAAAAAAAAABLL * ((v19[1] - *v19) >> 3) <= a4)
  {
    char v44 = (os_log_t *)sub_32A48(13);
    uint64_t v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 248;
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v46, "Precondition failure.");
  }
  BOOL v21 = *(std::__shared_weak_count **)(a2 + 88);
  if (v21)
  {
    uint64_t v22 = *(void *)(a2 + 80);
    atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v23 = std::__shared_weak_count::lock(v21);
    uint64_t v24 = v23;
    if (v23)
    {
      atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_weak(v21);
      sub_4636C(v24);
      goto LABEL_27;
    }
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    uint64_t v24 = 0;
  }
  uint64_t v22 = 0;
LABEL_27:
  char v30 = operator new(0x20uLL);
  char v31 = (uint64_t *)(v20 + 24 * a4);
  v30[2] = v22;
  v30[3] = v24;
  v30[1] = v31;
  uint64_t v32 = *v31;
  void *v30 = *v31;
  *(void *)(v32 + 8) = v30;
  *char v31 = (uint64_t)v30;
  ++v31[2];
  if (v18)
  {
    sub_11A0CC(buf, v54, (uint64_t)v55, a3);
    char v39 = sub_211E94(v8, (uint64_t)buf);
    if (*(void *)&buf[16])
    {
      *(void *)&unsigned char buf[24] = *(void *)&buf[16];
      operator delete(*(void **)&buf[16]);
    }
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (!v39)
    {
      uint64_t v47 = (os_log_t *)sub_32A48(13);
      __int16 v48 = *v47;
      if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = v54;
        sub_2417C(v52, *(_DWORD *)(v54 + 144));
        __int16 v50 = v53 >= 0 ? v52 : (void **)v52[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = 256;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&unsigned char buf[20] = v49;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&unsigned char buf[30] = v50;
        _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to insert an entry for Port %p (%s) into mAssociatedInputSubPorts.\"", buf, 0x26u);
        if (v53 < 0) {
          operator delete(v52[0]);
        }
      }
      uint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v51, "Unable to insert an entry for Port %p (%s) into mAssociatedInputSubPorts.");
    }
  }
  else
  {
    sub_11A0CC(buf, v54, (uint64_t)v55, a3);
    char v33 = sub_211E94(v11, (uint64_t)buf);
    if (*(void *)&buf[16])
    {
      *(void *)&unsigned char buf[24] = *(void *)&buf[16];
      operator delete(*(void **)&buf[16]);
    }
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (!v33)
    {
      int v34 = (os_log_t *)sub_32A48(13);
      int v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = v54;
        sub_2417C(v52, *(_DWORD *)(v54 + 144));
        if (v53 >= 0) {
          char v37 = v52;
        }
        else {
          char v37 = (void **)v52[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "PhysicalDevice.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = 263;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&unsigned char buf[20] = v36;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&unsigned char buf[30] = v37;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to insert an entry for Port %p (%s) into mAssociatedOutputSubPorts.\"", buf, 0x26u);
        if (v53 < 0) {
          operator delete(v52[0]);
        }
      }
      char v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v38, "Unable to insert an entry for Port %p (%s) into mAssociatedOutputSubPorts.");
    }
  }
  if (v55) {
    sub_4636C(v55);
  }
}

void sub_211DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15)
{
  if (a14) {
    sub_4636C(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_211E94(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  unsigned int v5 = operator new(0x48uLL);
  unsigned int v6 = (uint64_t *)v5;
  v12[0] = v5;
  v12[1] = v4;
  uint64_t v7 = *(void *)(a2 + 8);
  *((void *)v5 + 4) = *(void *)a2;
  *((void *)v5 + 5) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)v5 + 3) = *(_OWORD *)(a2 + 16);
  *((void *)v5 + 8) = *(void *)(a2 + 32);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  char v13 = 1;
  unint64_t v8 = (uint64_t **)sub_112EFC((uint64_t)a1, &v11, (unint64_t *)v5 + 4);
  uint64_t v9 = 0;
  if (!*v8)
  {
    sub_46CA8(a1, v11, v8, v6);
    v12[0] = 0;
    uint64_t v9 = 1;
  }
  sub_735B8((uint64_t)v12);
  return v9;
}

void sub_211F5C(void *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if ((*(_WORD *)(a3 + 184) & 1) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    char v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      __int16 v18 = "PhysicalDevice.cpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v17, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0) <= a4)
  {
    int v14 = (os_log_t *)sub_32A48(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      int v17 = 136315394;
      __int16 v18 = "PhysicalDevice.cpp";
      __int16 v19 = 1024;
      int v20 = 101;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v17, 0x12u);
    }
    __int16 v16 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v16, "Precondition failure.");
  }
  uint64_t v10 = (uint64_t **)sub_210C08(a1, a2);
  sub_2115E0(v10, a3, a5, a4);
}

void sub_212178(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2121A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if ((*(_WORD *)(a3 + 184) & 1) == 0)
  {
    unint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 111;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!(*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0))
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    char v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "PhysicalDevice.cpp";
      __int16 v16 = 1024;
      int v17 = 112;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    char v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }
  sub_210C08(a1, a2);
  for (unsigned __int16 i = 0; ; ++i)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
    if (result <= i) {
      break;
    }
    sub_210CF0(a1, a3, i);
  }
  return result;
}

void sub_2123F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_212424(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 312))(a2);
  unsigned int v9 = 0;
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  while (1)
  {
    unsigned int v18 = v9;
    if (v9 >= (*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0)) {
      break;
    }
    if ((v8 & 0xFF00000000) == 0 || (int v10 = v8, v9 != v8))
    {
      long long v11 = *(_OWORD *)(a3 + 80);
      uint64_t v12 = *(void *)(a3 + 88);
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)int v15 = v11;
      __p[1] = 0;
      uint64_t v17 = 0;
      __p[0] = 0;
      sub_46B38(__p, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
      char v13 = sub_212964((uint64_t)v19, v9, &v18);
      sub_212BB0((uint64_t)(v13 + 24), (long long *)v15);
      if (__p[0]) {
        operator delete(__p[0]);
      }
      if (v15[1]) {
        std::__shared_weak_count::__release_weak(v15[1]);
      }
      int v10 = v9;
    }
    unsigned int v9 = v10 + 1;
  }
  *(_OWORD *)int v15 = 0u;
  *(_OWORD *)std::string __p = 0u;
  LODWORD(v17) = 1065353216;
  sub_212608(a1, a2, (uint64_t)v19, (uint64_t)v15);
  sub_11A138((uint64_t)v15);
  return sub_11A21C((uint64_t)v19);
}

void sub_2125C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_212608(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(a3 + 16);
  if (v8)
  {
    while (1)
    {
      unsigned int v9 = (std::__shared_weak_count *)v8[4];
      if (!v9) {
        goto LABEL_26;
      }
      int v10 = std::__shared_weak_count::lock(v9);
      if (!v10) {
        goto LABEL_26;
      }
      uint64_t v11 = v8[3];
      if (!v11) {
        break;
      }
      __int16 v12 = *(_WORD *)(v11 + 184);
      sub_4636C(v10);
      if ((v12 & 1) == 0) {
        goto LABEL_26;
      }
      uint64_t v8 = (void *)*v8;
      if (!v8) {
        goto LABEL_7;
      }
    }
    sub_4636C(v10);
LABEL_26:
    BOOL v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v27 = 136315394;
      *(void *)&v27[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v27[12] = 1024;
      *(_DWORD *)&v27[14] = 188;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v27, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
LABEL_7:
  char v13 = *(void **)(a4 + 16);
  if (v13)
  {
    while (1)
    {
      int v14 = (std::__shared_weak_count *)v13[4];
      if (!v14) {
        goto LABEL_31;
      }
      int v15 = std::__shared_weak_count::lock(v14);
      if (!v15) {
        goto LABEL_31;
      }
      uint64_t v16 = v13[3];
      if (!v16) {
        break;
      }
      __int16 v17 = *(_WORD *)(v16 + 184);
      sub_4636C(v15);
      if (v17) {
        goto LABEL_31;
      }
      char v13 = (void *)*v13;
      if (!v13) {
        goto LABEL_13;
      }
    }
    sub_4636C(v15);
LABEL_31:
    uint64_t v24 = (os_log_t *)sub_32A48(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v27 = 136315394;
      *(void *)&v27[4] = "PhysicalDevice.cpp";
      *(_WORD *)&v27[12] = 1024;
      *(_DWORD *)&v27[14] = 194;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v27, 0x12u);
    }
    char v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v26, "Precondition failure.");
  }
LABEL_13:
  sub_210C08(a1, a2);
  for (unsigned __int16 i = *(uint64_t **)(a3 + 16); i; unsigned __int16 i = (uint64_t *)*i)
  {
    __int16 v19 = i + 3;
    if (i[5] == i[6])
    {
      sub_43F38((uint64_t *)v27, v19, "", 201);
      sub_210CF0(a1, *(uint64_t *)v27, *((_DWORD *)i + 4));
    }
    else
    {
      sub_43F38((uint64_t *)v27, v19, "", 205);
      sub_2115E0((uint64_t **)a1, *(uint64_t *)v27, (uint64_t)(i + 5), *((_DWORD *)i + 4));
    }
    if (*(void *)&v27[8]) {
      sub_4636C(*(std::__shared_weak_count **)&v27[8]);
    }
  }
  for (uint64_t j = *(uint64_t **)(a4 + 16); j; uint64_t j = (uint64_t *)*j)
  {
    sub_549A4((uint64_t *)v27, j + 3, "", 210);
    sub_210CF0(a1, *(uint64_t *)v27, *((_DWORD *)j + 4));
    if (*(void *)&v27[8]) {
      sub_4636C(*(std::__shared_weak_count **)&v27[8]);
    }
  }
}

void sub_212910(_Unwind_Exception *a1)
{
  sub_1199BC(v1);
  _Unwind_Resume(a1);
}

char *sub_212964(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      int v10 = (char *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = *((void *)v10 + 1);
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          int v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  __int16 v12 = (void *)(a1 + 16);
  int v10 = (char *)operator new(0x40uLL);
  v23[0] = v10;
  v23[1] = a1 + 16;
  *(void *)int v10 = 0;
  *((void *)v10 + 1) = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *((void *)v10 + 7) = 0;
  char v24 = 1;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_6DEC4(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)int v10 = *v20;
LABEL_38:
    *int v20 = v10;
    goto LABEL_39;
  }
  *(void *)int v10 = *v12;
  *__int16 v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*(void *)v10)
  {
    unint64_t v21 = *(void *)(*(void *)v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_11A490((uint64_t)v23);
  return v10;
}

void sub_212B9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_11A490((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_212BB0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  unint64_t v6 = *(void **)(a1 + 16);
  if (v6)
  {
    *(void *)(a1 + 24) = v6;
    operator delete(v6);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  *(_OWORD *)(a1 + 16) = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  return a1;
}

double sub_212C2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((*(_WORD *)(a3 + 184) & 1) == 0)
  {
    __int16 v12 = (os_log_t *)sub_32A48(13);
    float v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      uint64_t v25 = "PhysicalDevice.cpp";
      __int16 v26 = 1024;
      int v27 = 145;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v24, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(_WORD *)(a4 + 184))
  {
    BOOL v15 = (os_log_t *)sub_32A48(13);
    unint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      uint64_t v25 = "PhysicalDevice.cpp";
      __int16 v26 = 1024;
      int v27 = 146;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v24, 0x12u);
    }
    unint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v17, "Precondition failure.");
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0) != 1)
  {
    size_t v18 = (os_log_t *)sub_32A48(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      uint64_t v25 = "PhysicalDevice.cpp";
      __int16 v26 = 1024;
      int v27 = 147;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v24, 0x12u);
    }
    int v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Precondition failure.");
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, 1) != 1)
  {
    unint64_t v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      uint64_t v25 = "PhysicalDevice.cpp";
      __int16 v26 = 1024;
      int v27 = 148;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v24, 0x12u);
    }
    uint64_t v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "Precondition failure.");
  }
  int v10 = (uint64_t **)sub_210C08(a1, a2);
  sub_2115E0(v10, a3, a5, 0);
  return sub_210CF0(a1, a4, 0);
}

void sub_212FE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_21301C(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  if ((*(_WORD *)(a3 + 184) & 1) == 0)
  {
    float v14 = (os_log_t *)sub_32A48(13);
    BOOL v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      int v27 = "PhysicalDevice.cpp";
      __int16 v28 = 1024;
      int v29 = 164;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v26, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(_WORD *)(a5 + 184))
  {
    unint64_t v17 = (os_log_t *)sub_32A48(13);
    size_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      int v27 = "PhysicalDevice.cpp";
      __int16 v28 = 1024;
      int v29 = 165;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v26, 0x12u);
    }
    uint64_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "Precondition failure.");
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0) <= a4)
  {
    int v20 = (os_log_t *)sub_32A48(13);
    unint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      int v27 = "PhysicalDevice.cpp";
      __int16 v28 = 1024;
      int v29 = 166;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v26, 0x12u);
    }
    uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "Precondition failure.");
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, 1))
  {
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    int v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      int v27 = "PhysicalDevice.cpp";
      __int16 v28 = 1024;
      int v29 = 167;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v26, 0x12u);
    }
    uint64_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v25, "Precondition failure.");
  }
  __int16 v12 = (uint64_t **)sub_210C08(a1, a2);
  sub_2115E0(v12, a3, a6, a4);
  return sub_210CF0(a1, a5, 0);
}

void sub_2133D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::string *sub_21340C(std::string *a1, uint64_t a2)
{
  sub_21C8C(a1, "{ ");
  sub_4F64((uint64_t)&v44, (os_unfair_lock_t)(*(void *)a2 + 8));
  long long v4 = std::string::insert(&v44, 0, "Physical Device: ", 0x11uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v46 = v4->__r_.__value_.__r.__words[2];
  long long v45 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v46 >= 0) {
    unint64_t v6 = (const std::string::value_type *)&v45;
  }
  else {
    unint64_t v6 = (const std::string::value_type *)v45;
  }
  if (v46 >= 0) {
    std::string::size_type v7 = HIBYTE(v46);
  }
  else {
    std::string::size_type v7 = *((void *)&v45 + 1);
  }
  std::string::append(a1, v6, v7);
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  std::to_string(&v42, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  uint8x8_t v8 = std::string::insert(&v42, 0, ", Associated Input Ports (", 0x1AuLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v43, "): ", 3uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  sub_213A04(&__p, *(void *)(a2 + 8), *(void *)(a2 + 16));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  float v14 = std::string::append(&v44, (const std::string::value_type *)p_p, size);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  int64_t v46 = v14->__r_.__value_.__r.__words[2];
  long long v45 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v46 >= 0) {
    unint64_t v16 = (const std::string::value_type *)&v45;
  }
  else {
    unint64_t v16 = (const std::string::value_type *)v45;
  }
  if (v46 >= 0) {
    std::string::size_type v17 = HIBYTE(v46);
  }
  else {
    std::string::size_type v17 = *((void *)&v45 + 1);
  }
  std::string::append(a1, v16, v17);
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  std::to_string(&v42, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  size_t v18 = std::string::insert(&v42, 0, ", Associated Output Ports(", 0x1AuLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  int v20 = std::string::append(&v43, "): ", 3uLL);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  sub_213A04(&__p, *(void *)(a2 + 32), *(void *)(a2 + 40));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v22 = &__p;
  }
  else {
    uint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  int v24 = std::string::append(&v44, (const std::string::value_type *)v22, v23);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  int64_t v46 = v24->__r_.__value_.__r.__words[2];
  long long v45 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v46 >= 0) {
    int v26 = (const std::string::value_type *)&v45;
  }
  else {
    int v26 = (const std::string::value_type *)v45;
  }
  if (v46 >= 0) {
    std::string::size_type v27 = HIBYTE(v46);
  }
  else {
    std::string::size_type v27 = *((void *)&v45 + 1);
  }
  std::string::append(a1, v26, v27);
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  std::to_string(&v43, *(void *)(a2 + 72));
  __int16 v28 = std::string::insert(&v43, 0, ", Associated Input SubPorts (", 0x1DuLL);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  char v30 = std::string::append(&v44, ")", 1uLL);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  int64_t v46 = v30->__r_.__value_.__r.__words[2];
  long long v45 = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  if (v46 >= 0) {
    uint64_t v32 = (const std::string::value_type *)&v45;
  }
  else {
    uint64_t v32 = (const std::string::value_type *)v45;
  }
  if (v46 >= 0) {
    std::string::size_type v33 = HIBYTE(v46);
  }
  else {
    std::string::size_type v33 = *((void *)&v45 + 1);
  }
  std::string::append(a1, v32, v33);
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::to_string(&v43, *(void *)(a2 + 96));
  int v34 = std::string::insert(&v43, 0, ", Associated Output SubPorts (", 0x1EuLL);
  long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v35;
  v34->__r_.__value_.__l.__size_ = 0;
  v34->__r_.__value_.__r.__words[2] = 0;
  v34->__r_.__value_.__r.__words[0] = 0;
  uint64_t v36 = std::string::append(&v44, ")", 1uLL);
  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  int64_t v46 = v36->__r_.__value_.__r.__words[2];
  long long v45 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (v46 >= 0) {
    char v38 = (const std::string::value_type *)&v45;
  }
  else {
    char v38 = (const std::string::value_type *)v45;
  }
  if (v46 >= 0) {
    std::string::size_type v39 = HIBYTE(v46);
  }
  else {
    std::string::size_type v39 = *((void *)&v45 + 1);
  }
  std::string::append(a1, v38, v39);
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_2138CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_213A04(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_9264(&__p, a2, 1);
      unint64_t v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
      std::string::append(a1, (const std::string::value_type *)v6, v7);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      a2 += 24;
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_213AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_213B20(uint64_t a1)
{
  if (!a1)
  {
    unsigned int v2 = (os_log_t *)sub_32A48(13);
    unint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      unint64_t v6 = "PhysicalDevice.cpp";
      __int16 v7 = 1024;
      int v8 = 287;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v5, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return sub_36B4A4(a1);
}

void sub_213C2C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_213C48(uint64_t a1)
{
  *(void *)a1 = off_6274C8;
  if ((sub_46FF9C((unint64_t *)qword_669B38) & 1) == 0)
  {
    unsigned int v2 = (os_log_t *)sub_32A48(13);
    unint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315650;
        __int16 v7 = "PhysicalDevice.cpp";
        __int16 v8 = 1024;
        int v9 = 319;
        __int16 v10 = 2048;
        uint64_t v11 = a1;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"The PhysicalDevice at %p is being destroyed by something other than the Object Destruction Handler\"", (uint8_t *)&v6, 0x1Cu);
      }
    }
  }
  sub_B8E4((uint64_t *)(a1 + 232));
  sub_108900(*(void **)(a1 + 216));
  sub_108900(*(void **)(a1 + 192));
  sub_FCC40(*(void **)(a1 + 168));
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  sub_FE920(a1);
  long long v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_213D80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t *sub_213D8C(uint64_t *result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  long long v4 = result + 29;
  int v5 = (uint64_t *)result[30];
  if (v5 == result + 29) {
    goto LABEL_5;
  }
  __int16 v7 = result;
  while (v5[2] != a4)
  {
    int v5 = (uint64_t *)v5[1];
    if (v5 == v4) {
      goto LABEL_5;
    }
  }
  if (v5 == v4)
  {
LABEL_5:
    __int16 v8 = (os_log_t *)sub_32A48(13);
    int v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v24 = 136315394;
        long long v25 = "PhysicalDevice.cpp";
        __int16 v26 = 1024;
        int v27 = 452;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"muteControl does not exist in mControlDeleteList.\"", (uint8_t *)&v24, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "muteControl does not exist in mControlDeleteList.");
  }
  __int16 v12 = result + 24;
  uint64_t v11 = result[24];
  if (v11)
  {
    while (1)
    {
      while (1)
      {
        __int16 v12 = (uint64_t *)v11;
        unsigned int v13 = *(unsigned __int8 *)(v11 + 32);
        if (v13 == a2) {
          break;
        }
        if (v13 <= a2)
        {
          if (v13 >= a2) {
            char v18 = 1;
          }
          else {
            char v18 = -1;
          }
          if ((v18 & 0x80) == 0) {
            return result;
          }
          goto LABEL_27;
        }
LABEL_21:
        uint64_t v11 = *v12;
        std::string::size_type v17 = (uint64_t **)v12;
        if (!*v12) {
          goto LABEL_30;
        }
      }
      unsigned int v14 = *((_DWORD *)v12 + 9);
      BOOL v15 = v14 == a3;
      if (v14 > a3) {
        goto LABEL_21;
      }
      if (v14 >= a3) {
        char v16 = 1;
      }
      else {
        char v16 = -1;
      }
      if (v15) {
        char v16 = 0;
      }
      if ((v16 & 0x80) == 0) {
        return result;
      }
LABEL_27:
      std::string::size_type v17 = (uint64_t **)(v12 + 1);
      uint64_t v11 = v12[1];
      if (!v11) {
        goto LABEL_30;
      }
    }
  }
  std::string::size_type v17 = (uint64_t **)(result + 24);
LABEL_30:
  uint64_t v19 = a3 << 32;
  int v20 = (uint64_t *)operator new(0x38uLL);
  long long v21 = v20;
  v20[4] = v19 | a2;
  v20[5] = v5[2];
  uint64_t v22 = v5[3];
  v20[6] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  *int v20 = 0;
  v20[1] = 0;
  _OWORD v20[2] = (uint64_t)v12;
  *std::string::size_type v17 = v20;
  uint64_t v23 = *(void *)v7[23];
  if (v23)
  {
    v7[23] = v23;
    long long v21 = *v17;
  }
  uint64_t result = sub_46D00((uint64_t *)v7[24], v21);
  ++v7[25];
  return result;
}

void sub_213FAC(_Unwind_Exception *exception_object)
{
}

void sub_213FC8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  long long v4 = (void *)(a1 + 232);
  int v5 = *(void **)(a1 + 240);
  if (v5 == (void *)(a1 + 232)) {
    goto LABEL_4;
  }
  while (v5[2] != a4)
  {
    int v5 = (void *)v5[1];
    if (v5 == v4) {
      goto LABEL_4;
    }
  }
  if (v5 == v4)
  {
LABEL_4:
    __int16 v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v25 = 136315394;
        __int16 v26 = "PhysicalDevice.cpp";
        __int16 v27 = 1024;
        int v28 = 460;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"volumeControl does not exist in mControlDeleteList.\"", (uint8_t *)&v25, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "volumeControl does not exist in mControlDeleteList.");
  }
  unsigned int v13 = (std::__shared_weak_count *)v5[3];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = a1 + 216;
  unsigned int v14 = *(uint64_t **)(a1 + 216);
  if (v14)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v15 = (uint64_t)v14;
        unsigned int v16 = *((unsigned __int8 *)v14 + 32);
        if (v16 == a2) {
          break;
        }
        if (v16 <= a2)
        {
          if (v16 >= a2) {
            char v21 = 1;
          }
          else {
            char v21 = -1;
          }
          if ((v21 & 0x80) == 0) {
            goto LABEL_36;
          }
          goto LABEL_28;
        }
LABEL_22:
        unsigned int v14 = *(uint64_t **)v15;
        int v20 = (uint64_t **)v15;
        if (!*(void *)v15) {
          goto LABEL_31;
        }
      }
      unsigned int v17 = *(_DWORD *)(v15 + 36);
      BOOL v18 = v17 == a3;
      if (v17 > a3) {
        goto LABEL_22;
      }
      if (v17 >= a3) {
        char v19 = 1;
      }
      else {
        char v19 = -1;
      }
      if (v18) {
        char v19 = 0;
      }
      if ((v19 & 0x80) == 0) {
        goto LABEL_36;
      }
LABEL_28:
      int v20 = (uint64_t **)(v15 + 8);
      unsigned int v14 = *(uint64_t **)(v15 + 8);
      if (!v14) {
        goto LABEL_31;
      }
    }
  }
  int v20 = (uint64_t **)(a1 + 216);
LABEL_31:
  uint64_t v22 = (uint64_t *)operator new(0x38uLL);
  uint64_t v23 = v22;
  v22[4] = (a3 << 32) | a2;
  v22[5] = a4;
  v22[6] = (uint64_t)v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *uint64_t v22 = 0;
  v22[1] = 0;
  _DWORD v22[2] = v15;
  *int v20 = v22;
  uint64_t v24 = **(void **)(a1 + 208);
  if (v24)
  {
    *(void *)(a1 + 208) = v24;
    uint64_t v23 = *v20;
  }
  sub_46D00(*(uint64_t **)(a1 + 216), v23);
  ++*(void *)(a1 + 224);
LABEL_36:
  if (v13)
  {
    sub_4636C(v13);
  }
}

void sub_21424C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_4636C(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21427C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result + 232;
  for (uint64_t i = *(void *)(result + 240); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v3) {
      goto LABEL_6;
    }
    if (*(void *)(i + 16) == a2) {
      break;
    }
  }
  if (i == v3)
  {
LABEL_6:
    int v5 = (os_log_t *)sub_32A48(17);
    int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 136315650;
        __int16 v8 = "PhysicalDevice.cpp";
        __int16 v9 = 1024;
        int v10 = 494;
        __int16 v11 = 2048;
        uint64_t v12 = a2;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding control %p to delete list", (uint8_t *)&v7, 0x1Cu);
      }
    }
    operator new();
  }
  return result;
}

void sub_2143EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    sub_4636C(v10);
    __cxa_begin_catch(exception_object);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v12 = (os_log_t *)sub_32A48(17);
    unsigned int v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "PhysicalDevice.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 501;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception thrown adding control to the delete list. Deleting control.", (uint8_t *)&a9, 0x12u);
      }
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_214528(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_214558(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_214594()
{
  sub_214610((uint64_t)v0);
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (__p)
  {
    long long v4 = __p;
    operator delete(__p);
  }
  if (v1)
  {
    unsigned int v2 = v1;
    operator delete(v1);
  }
}

void sub_2145FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_214610(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v3 = sub_6C174(v1);
  *(_DWORD *)(v3 + 80) = 16843009;
  *(_WORD *)(v3 + 72) = 257;
  *(_WORD *)(v3 + 76) = 257;
  *(_WORD *)(v3 + 84) = 257;
  if (!*(unsigned char *)(v3 + 20)) {
    *(unsigned char *)(v2 + 20) = 1;
  }
  *(_DWORD *)(v2 + 16) = 4;
  v1310[0] = (void *)0x300000002;
  sub_8732C((char *)(v2 + 48), (char *)v1310, (uint64_t)&v1310[1], 2uLL);
  LODWORD(v1310[0]) = 4;
  sub_8732C((char *)(v2 + 24), (char *)v1310, (uint64_t)v1310 + 4, 1uLL);
  *(_WORD *)(v2 + 90) = 257;
  *(_OWORD *)v1310 = xmmword_4E78E0;
  sub_6C4EC((uint64_t **)(v2 + 96), (unsigned int *)v1310, &v1311);
  *(_DWORD *)(v2 + 404) = 1077936128;
  *(unsigned char *)(v2 + 408) = 1;
  *(_WORD *)(v2 + 322) = 257;
  *(_DWORD *)(v2 + 920) = 37;
  *(unsigned char *)(v2 + 924) = 1;
  *(_DWORD *)(v2 + 836) = 37;
  *(unsigned char *)(v2 + 840) = 1;
  *(_DWORD *)(v2 + 912) = 14;
  *(unsigned char *)(v2 + 916) = 1;
  *(_DWORD *)(v2 + 728) = 36;
  *(unsigned char *)(v2 + 732) = 1;
  *(_DWORD *)(v2 + 736) = 36;
  *(unsigned char *)(v2 + 740) = 1;
  *(_DWORD *)(v2 + 744) = 36;
  *(unsigned char *)(v2 + 748) = 1;
  *(_DWORD *)(v2 + 752) = 36;
  *(unsigned char *)(v2 + 756) = 1;
  *(_DWORD *)(v2 + 760) = 36;
  *(unsigned char *)(v2 + 764) = 1;
  *(_DWORD *)(v2 + 776) = 36;
  *(unsigned char *)(v2 + 780) = 1;
  if (!*(unsigned char *)(v2 + 956)) {
    *(unsigned char *)(v2 + 956) = 1;
  }
  *(_DWORD *)(v2 + 952) = 2;
  if (!*(unsigned char *)(v2 + 700)) {
    *(unsigned char *)(v2 + 700) = 1;
  }
  *(_DWORD *)(v2 + 696) = 2;
  if (!*(unsigned char *)(v2 + 708)) {
    *(unsigned char *)(v2 + 708) = 1;
  }
  *(_DWORD *)(v2 + 704) = 2;
  if (!*(unsigned char *)(v2 + 716)) {
    *(unsigned char *)(v2 + 716) = 1;
  }
  *(_DWORD *)(v2 + 712) = 4;
  if (!*(unsigned char *)(v2 + 876)) {
    *(unsigned char *)(v2 + 876) = 1;
  }
  *(_DWORD *)(v2 + 872) = 4;
  if (!*(unsigned char *)(v2 + 892)) {
    *(unsigned char *)(v2 + 892) = 1;
  }
  *(_DWORD *)(v2 + 888) = 2;
  if (!*(unsigned char *)(v2 + 884)) {
    *(unsigned char *)(v2 + 884) = 1;
  }
  *(_DWORD *)(v2 + 880) = 2;
  long long v4 = (uint64_t *)sub_3EFF58();
  sub_3CD68C();
  int v5 = (uint64_t *)sub_15ADD0(1);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  sub_21C8C(v434, "speaker_general");
  sub_21C8C(v410, "speaker_general");
  uint64_t v413 = 0;
  uint64_t v412 = 0;
  uint64_t v414 = 0;
  sub_21C8C(v415, "speaker_general");
  sub_21C8C(v416, "speaker_general");
  memset(&v416[3], 0, 24);
  int v417 = 1668051824;
  sub_22210((CFStringRef *)&v1304, "SetTelemetryDataSources");
  CFTypeRef v1305 = kCFBooleanTrue;
  v408[0] = &v1304;
  v408[1] = 1;
  CFDictionaryRef v8 = sub_4D3D8((uint64_t)v408);
  v1306[0] = 1936749683;
  CFDictionaryRef v1307 = v8;
  CFTypeRef v409 = 0;
  uint64_t v9 = operator new(0xCuLL);
  v1301 = (char *)(v9 + 3);
  *(void *)uint64_t v9 = 0x6473706700000001;
  void v9[2] = 1869768046;
  v1299 = v9;
  v1300 = v9 + 3;
  CFTypeRef v405 = 0;
  uint64_t v403 = 0;
  CFTypeRef v404 = 0;
  v1275[0] = &v403;
  LOBYTE(v1275[1]) = 0;
  uint64_t v403 = operator new(0x18uLL);
  CFTypeRef v404 = v403;
  CFTypeRef v405 = v403 + 3;
  CFTypeRef v404 = sub_1CDC20((uint64_t)&v405, (uint64_t)&v1299, (uint64_t)&v1302, v403);
  sub_1CDCD4((uint64_t)&v1302, (uint64_t *)&v403);
  v406[0] = &v1302;
  v406[1] = 1;
  CFDictionaryRef v10 = sub_4D3D8((uint64_t)v406);
  int v1308 = 1768907891;
  CFDictionaryRef v1309 = v10;
  CFTypeRef v407 = 0;
  uint64_t v419 = 0;
  uint64_t v420 = 0;
  uint64_t v418 = 0;
  v1275[0] = &v418;
  LOBYTE(v1275[1]) = 0;
  __int16 v11 = (char *)operator new(0x20uLL);
  uint64_t v12 = 0;
  uint64_t v420 = v11 + 32;
  unint64_t v13 = v6 - v7;
  uint64_t v418 = v11;
  uint64_t v419 = v11;
  do
  {
    sub_6D16C((uint64_t)&v11[v12 * 4], v1306[v12], *(CFTypeRef *)&v1306[v12 + 2]);
    v12 += 4;
  }
  while (v12 != 8);
  uint64_t v419 = v11 + 32;
  long long v421 = 0u;
  long long v422 = 0u;
  unsigned int v14 = operator new(8uLL);
  *((void *)&v421 + 1) = v14;
  *unsigned int v14 = 0x6C766F6C766F6C75;
  *((void *)&v422 + 1) = v14 + 1;
  *(void *)&long long v422 = v14 + 1;
  v424[0] = 0;
  v424[1] = 0;
  int v423 = v424;
  long long v427 = 0;
  v425 = 0;
  v426 = 0;
  uint64_t v15 = operator new(0x10uLL);
  unint64_t v16 = v13 >> 2;
  long long v427 = v15 + 2;
  *uint64_t v15 = 0x200000002;
  v15[1] = (v13 >> 2);
  v425 = v15;
  v426 = v15 + 2;
  char v428 = 0;
  char v429 = 0;
  memset(v430, 0, sizeof(v430));
  uint64_t v431 = 0;
  *(_OWORD *)v1275 = xmmword_5968C4;
  uint64_t v1276 = 2;
  sub_6D1AC((uint64_t)v430, (int *)v1275, 3);
  char v432 = 0;
  uint64_t v433 = 0;
  sub_6D224(v1310, (long long *)v434, (long long *)v410);
  sub_21C8C(v401, "speaker_latenight_general");
  sub_21C8C(v1275, "speaker_general");
  uint64_t v1278 = 0;
  uint64_t v1277 = 0;
  uint64_t v1279 = 0;
  sub_21C8C(v1280, "speaker_latenight_general");
  sub_21C8C(v1281, "speaker_general");
  memset(&v1281[3], 0, 24);
  int v1282 = 1668051824;
  sub_22210((CFStringRef *)&v1269, "SetTelemetryDataSources");
  CFTypeRef v1270 = kCFBooleanTrue;
  v399[0] = &v1269;
  v399[1] = 1;
  CFDictionaryRef v17 = sub_4D3D8((uint64_t)v399);
  v1271[0] = 1936749683;
  CFDictionaryRef v1272 = v17;
  CFTypeRef v400 = 0;
  BOOL v18 = operator new(0xCuLL);
  v1266 = (char *)(v18 + 3);
  *(void *)BOOL v18 = 0x6473706700000001;
  v18[2] = 1869768046;
  v1264 = v18;
  v1265 = v18 + 3;
  v396 = 0;
  char v394 = 0;
  char v395 = 0;
  v1241.__r_.__value_.__r.__words[0] = (std::string::size_type)&v394;
  v1241.__r_.__value_.__s.__data_[8] = 0;
  char v394 = operator new(0x18uLL);
  char v395 = v394;
  v396 = v394 + 3;
  char v395 = sub_1CDC20((uint64_t)&v396, (uint64_t)&v1264, (uint64_t)&v1267, v394);
  sub_1CDCD4((uint64_t)&v1267, (uint64_t *)&v394);
  v397[0] = &v1267;
  v397[1] = 1;
  CFDictionaryRef v19 = sub_4D3D8((uint64_t)v397);
  int v1273 = 1768907891;
  CFDictionaryRef v1274 = v19;
  CFTypeRef v398 = 0;
  v1284 = 0;
  v1285 = 0;
  v1283 = 0;
  v1241.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1283;
  v1241.__r_.__value_.__s.__data_[8] = 0;
  int v20 = (char *)operator new(0x20uLL);
  uint64_t v21 = 0;
  v1283 = v20;
  v1284 = v20;
  v1285 = v20 + 32;
  do
  {
    sub_6D16C((uint64_t)&v20[v21 * 4], v1271[v21], *(CFTypeRef *)&v1271[v21 + 2]);
    v21 += 4;
  }
  while (v21 != 8);
  v1284 = v20 + 32;
  long long v1286 = 0u;
  long long v1287 = 0u;
  uint64_t v22 = operator new(8uLL);
  *((void *)&v1286 + 1) = v22;
  *uint64_t v22 = 0x6C766F6C766F6C75;
  *((void *)&v1287 + 1) = v22 + 1;
  *(void *)&long long v1287 = v22 + 1;
  v1289[0] = 0;
  v1289[1] = 0;
  v1288 = v1289;
  v1292 = 0;
  v1290 = 0;
  v1291 = 0;
  uint64_t v23 = operator new(0x10uLL);
  *(void *)uint64_t v23 = 0x200000002;
  void v23[2] = v16;
  v23[3] = 0;
  v1290 = v23;
  v1291 = (char *)(v23 + 4);
  char v1293 = 0;
  char v1294 = 0;
  memset(v1295, 0, sizeof(v1295));
  v1292 = (char *)(v23 + 4);
  uint64_t v1296 = 0;
  *(_OWORD *)&v1241.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v1241.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v1295, (int *)&v1241, 3);
  char v1297 = 0;
  uint64_t v1298 = 0;
  sub_6D224(v1317, (long long *)v401, (long long *)v1275);
  sub_21C8C(v392, "speaker_movie");
  sub_21C8C(&v1241, "speaker_general");
  uint64_t v1243 = 0;
  uint64_t v1242 = 0;
  uint64_t v1244 = 0;
  sub_21C8C(v1245, "speaker_movie");
  sub_21C8C(v1246, "speaker_general");
  memset(&v1246[3], 0, 24);
  int v1247 = 1668051824;
  sub_22210((CFStringRef *)&v1235, "SetTelemetryDataSources");
  CFTypeRef v1236 = kCFBooleanTrue;
  v390[0] = &v1235;
  v390[1] = 1;
  CFDictionaryRef v24 = sub_4D3D8((uint64_t)v390);
  v1237[0] = 1936749683;
  CFDictionaryRef v1238 = v24;
  CFTypeRef v391 = 0;
  int v25 = operator new(0xCuLL);
  v1232 = (char *)(v25 + 3);
  *(void *)int v25 = 0x6473706700000001;
  void v25[2] = 1869768046;
  v1230 = v25;
  v1231 = v25 + 3;
  int v387 = 0;
  v385 = 0;
  v386 = 0;
  v1207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v385;
  v1207.__r_.__value_.__s.__data_[8] = 0;
  v385 = operator new(0x18uLL);
  v386 = v385;
  int v387 = v385 + 3;
  v386 = sub_1CDC20((uint64_t)&v387, (uint64_t)&v1230, (uint64_t)&v1233, v385);
  sub_1CDCD4((uint64_t)&v1233, (uint64_t *)&v385);
  v388[0] = &v1233;
  v388[1] = 1;
  CFDictionaryRef v26 = sub_4D3D8((uint64_t)v388);
  int v1239 = 1768907891;
  CFDictionaryRef v1240 = v26;
  CFTypeRef v389 = 0;
  v1249 = 0;
  v1250 = 0;
  v1248 = 0;
  v1207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1248;
  v1207.__r_.__value_.__s.__data_[8] = 0;
  __int16 v27 = (char *)operator new(0x20uLL);
  uint64_t v28 = 0;
  v1248 = v27;
  v1249 = v27;
  v1250 = v27 + 32;
  do
  {
    sub_6D16C((uint64_t)&v27[v28 * 4], v1237[v28], *(CFTypeRef *)&v1237[v28 + 2]);
    v28 += 4;
  }
  while (v28 != 8);
  v1249 = v27 + 32;
  long long v1251 = 0u;
  long long v1252 = 0u;
  long long v29 = operator new(8uLL);
  *((void *)&v1251 + 1) = v29;
  void *v29 = 0x6C766F6C766F6C75;
  *((void *)&v1252 + 1) = v29 + 1;
  *(void *)&long long v1252 = v29 + 1;
  v1254[0] = 0;
  v1254[1] = 0;
  v1253 = v1254;
  v1257 = 0;
  v1255 = 0;
  v1256 = 0;
  char v30 = operator new(0x10uLL);
  *(void *)char v30 = 0x200000002;
  v30[2] = v16;
  v30[3] = 0;
  v1255 = v30;
  v1256 = (char *)(v30 + 4);
  char v1258 = 0;
  char v1259 = 0;
  memset(v1260, 0, sizeof(v1260));
  v1257 = (char *)(v30 + 4);
  uint64_t v1261 = 0;
  *(_OWORD *)&v1207.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v1207.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v1260, (int *)&v1207, 3);
  char v1262 = 0;
  uint64_t v1263 = 0;
  sub_6D224(v1318, (long long *)v392, (long long *)&v1241);
  sub_21C8C(v383, "speaker_latenight_movie");
  sub_21C8C(&v1207, "speaker_general");
  uint64_t v1209 = 0;
  uint64_t v1208 = 0;
  uint64_t v1210 = 0;
  sub_21C8C(v1211, "speaker_latenight_movie");
  sub_21C8C(v1212, "speaker_general");
  memset(&v1212[3], 0, 24);
  int v1213 = 1668051824;
  sub_22210((CFStringRef *)&v1201, "SetTelemetryDataSources");
  CFTypeRef v1202 = kCFBooleanTrue;
  v381[0] = &v1201;
  v381[1] = 1;
  CFDictionaryRef v31 = sub_4D3D8((uint64_t)v381);
  v1203[0] = 1936749683;
  CFDictionaryRef v1204 = v31;
  CFTypeRef v382 = 0;
  uint64_t v32 = operator new(0xCuLL);
  v1198 = (char *)(v32 + 3);
  *(void *)uint64_t v32 = 0x6473706700000001;
  v32[2] = 1869768046;
  v1196 = v32;
  v1197 = v32 + 3;
  int v378 = 0;
  CFTypeRef v376 = 0;
  CFTypeRef v377 = 0;
  v1173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v376;
  v1173.__r_.__value_.__s.__data_[8] = 0;
  CFTypeRef v376 = operator new(0x18uLL);
  CFTypeRef v377 = v376;
  int v378 = v376 + 3;
  CFTypeRef v377 = sub_1CDC20((uint64_t)&v378, (uint64_t)&v1196, (uint64_t)&v1199, v376);
  sub_1CDCD4((uint64_t)&v1199, (uint64_t *)&v376);
  v379[0] = &v1199;
  v379[1] = 1;
  CFDictionaryRef v33 = sub_4D3D8((uint64_t)v379);
  int v1205 = 1768907891;
  CFDictionaryRef v1206 = v33;
  CFTypeRef v380 = 0;
  v1215 = 0;
  v1216 = 0;
  v1214 = 0;
  v1173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v1214;
  v1173.__r_.__value_.__s.__data_[8] = 0;
  int v34 = (char *)operator new(0x20uLL);
  uint64_t v35 = 0;
  v1214 = v34;
  v1215 = v34;
  v1216 = v34 + 32;
  do
  {
    sub_6D16C((uint64_t)&v34[v35 * 4], v1203[v35], *(CFTypeRef *)&v1203[v35 + 2]);
    v35 += 4;
  }
  while (v35 != 8);
  v1215 = v34 + 32;
  long long v1217 = 0u;
  long long v1218 = 0u;
  uint64_t v36 = operator new(8uLL);
  *((void *)&v1217 + 1) = v36;
  void *v36 = 0x6C766F6C766F6C75;
  *((void *)&v1218 + 1) = v36 + 1;
  *(void *)&long long v1218 = v36 + 1;
  v1220[0] = 0;
  v1220[1] = 0;
  v1219 = v1220;
  v1223 = 0;
  v1221 = 0;
  v1222 = 0;
  long long v37 = operator new(0x10uLL);
  *(void *)long long v37 = 0x200000002;
  v37[2] = v16;
  v37[3] = 0;
  v1221 = v37;
  v1222 = (char *)(v37 + 4);
  char v1224 = 0;
  char v1225 = 0;
  memset(v1226, 0, sizeof(v1226));
  v1223 = (char *)(v37 + 4);
  uint64_t v1227 = 0;
  *(_OWORD *)&v1173.__r_.__value_.__l.__data_ = xmmword_5968C4;
  v1173.__r_.__value_.__r.__words[2] = 2;
  sub_6D1AC((uint64_t)v1226, (int *)&v1173, 3);
  char v1228 = 0;
  uint64_t v1229 = 0;
  sub_6D224(v1319, (long long *)v383, (long long *)&v1207);
  sub_21C8C(v374, "speaker_alarm");
  sub_21C8C(&v1173, "speaker_general");
  uint64_t v1175 = 0;
  uint64_t v1174 = 0;
  uint64_t v1176 = 0;
  sub_21C8C(v1177, "speaker_alarm");
  sub_21C8C(v1178, "speaker_general");
  memset(&v1178[3], 0, 24);
  int v1179 = 1668051824;
  sub_22210((CFStringRef *)&v1167, "SetTelemetryDataSources");
  CFTypeRef v1168 = kCFBooleanTrue;
  v372[0] = &v1167;
  v372[1] = 1;
  CFDictionaryRef v38 = sub_4D3D8((uint64_t)v372);
  v1169[0] = 1936749683;
  CFDictionaryRef v1170 = v38;
  CFTypeRef v373 = 0;
  std::string::size_type v39 = operator new(0xCuLL);
  v1164 = (char *)(v39 + 3);
  *(void *)std::string::size_type v39 = 0x6473706700000001;
  v39[2] = 1869768046;
  v1162 = v39;
  v1163 = v39 + 3;
  uint64_t v369 = 0;
  char v367 = 0;
  v368 = 0;
  *(void *)&long long v1138 = &v367;
  BYTE8(v1138) = 0;
  char v367 = operator new(0x18uLL);
  v368 = v367;
  uint64_t v369 = v367 + 3;
  v368 = sub_1CDC20((uint64_t)&v369, (uint64_t)&v1162, (uint64_t)&v1165, v367);
  sub_1CDCD4((uint64_t)&v1165, (uint64_t *)&v367);
  v370[0] = &v1165;
  v370[1] = 1;
  CFDictionaryRef v40 = sub_4D3D8((uint64_t)v370);
  int v1171 = 1768907891;
  CFDictionaryRef v1172 = v40;
  CFTypeRef v371 = 0;
  v1181 = 0;
  v1182 = 0;
  v1180 = 0;
  *(void *)&long long v1138 = &v1180;
  BYTE8(v1138) = 0;
  uint64_t v41 = (char *)operator new(0x20uLL);
  uint64_t v42 = 0;
  v1180 = v41;
  v1181 = v41;
  v1182 = v41 + 32;
  do
  {
    sub_6D16C((uint64_t)&v41[v42 * 4], v1169[v42], *(CFTypeRef *)&v1169[v42 + 2]);
    v42 += 4;
  }
  while (v42 != 8);
  v1181 = v41 + 32;
  long long v1183 = 0u;
  long long v1184 = 0u;
  std::string v43 = operator new(8uLL);
  *((void *)&v1183 + 1) = v43;
  void *v43 = 0x6C766F6C766F6C75;
  *((void *)&v1184 + 1) = v43 + 1;
  *(void *)&long long v1184 = v43 + 1;
  v1186[0] = 0;
  v1186[1] = 0;
  v1185 = v1186;
  v1189 = 0;
  v1187 = 0;
  v1188 = 0;
  std::string v44 = operator new(0x10uLL);
  *(void *)std::string v44 = 0x200000002;
  uint64_t v44[2] = v16;
  v44[3] = 0;
  v1187 = v44;
  v1188 = (char *)(v44 + 4);
  char v1190 = 0;
  char v1191 = 0;
  memset(v1192, 0, sizeof(v1192));
  v1189 = (char *)(v44 + 4);
  uint64_t v1193 = 0;
  long long v1138 = xmmword_5968C4;
  uint64_t v1139 = 2;
  sub_6D1AC((uint64_t)v1192, (int *)&v1138, 3);
  char v1194 = 0;
  uint64_t v1195 = 0;
  sub_6D224(v1320, (long long *)v374, (long long *)&v1173);
  sub_21C8C(v365, "speaker_measurement");
  sub_21C8C(&v1138, "speaker_measurement");
  uint64_t v1141 = 0;
  uint64_t v1140 = 0;
  uint64_t v1142 = 0;
  sub_21C8C(v1143, "speaker_measurement");
  sub_21C8C(v1144, "speaker_measurement");
  memset(&v1144[3], 0, 24);
  int v1145 = 1668051824;
  sub_22210((CFStringRef *)&v1132, "SetTelemetryDataSources");
  CFTypeRef v1133 = kCFBooleanTrue;
  v363[0] = &v1132;
  v363[1] = 1;
  CFDictionaryRef v45 = sub_4D3D8((uint64_t)v363);
  v1134[0] = 1936749683;
  CFDictionaryRef v1135 = v45;
  CFTypeRef v364 = 0;
  int64_t v46 = operator new(0xCuLL);
  v1129 = (char *)(v46 + 3);
  *(void *)int64_t v46 = 0x6473706700000001;
  v46[2] = 1869768046;
  v1127 = v46;
  v1128 = v46 + 3;
  long long v360 = 0;
  v358 = 0;
  int v359 = 0;
  *(void *)&long long v1103 = &v358;
  BYTE8(v1103) = 0;
  v358 = operator new(0x18uLL);
  int v359 = v358;
  long long v360 = v358 + 3;
  int v359 = sub_1CDC20((uint64_t)&v360, (uint64_t)&v1127, (uint64_t)&v1130, v358);
  sub_1CDCD4((uint64_t)&v1130, (uint64_t *)&v358);
  v361[0] = &v1130;
  v361[1] = 1;
  CFDictionaryRef v47 = sub_4D3D8((uint64_t)v361);
  int v1136 = 1768907891;
  CFDictionaryRef v1137 = v47;
  CFTypeRef v362 = 0;
  v1147 = 0;
  v1148 = 0;
  v1146 = 0;
  *(void *)&long long v1103 = &v1146;
  BYTE8(v1103) = 0;
  __int16 v48 = (char *)operator new(0x20uLL);
  uint64_t v49 = 0;
  v1146 = v48;
  v1147 = v48;
  v1148 = v48 + 32;
  do
  {
    sub_6D16C((uint64_t)&v48[v49 * 4], v1134[v49], *(CFTypeRef *)&v1134[v49 + 2]);
    v49 += 4;
  }
  while (v49 != 8);
  v1147 = v48 + 32;
  long long v1149 = 0u;
  long long v1150 = 0u;
  __int16 v50 = operator new(4uLL);
  *((void *)&v1149 + 1) = v50;
  *__int16 v50 = 1987405668;
  *((void *)&v1150 + 1) = v50 + 1;
  *(void *)&long long v1150 = v50 + 1;
  v1152[0] = 0;
  v1152[1] = 0;
  v1151 = v1152;
  v1155 = 0;
  v1153 = 0;
  v1154 = 0;
  uint64_t v51 = operator new(0x10uLL);
  *(void *)uint64_t v51 = 0x200000002;
  v51[2] = v16;
  v51[3] = 0;
  v1153 = v51;
  v1154 = (char *)(v51 + 4);
  char v1156 = 0;
  char v1157 = 0;
  memset(v1158, 0, sizeof(v1158));
  v1155 = (char *)(v51 + 4);
  uint64_t v1159 = 0;
  long long v1103 = xmmword_5968C4;
  uint64_t v1104 = 2;
  sub_6D1AC((uint64_t)v1158, (int *)&v1103, 3);
  char v1160 = 0;
  uint64_t v1161 = 0;
  sub_6D224(v1321, (long long *)v365, &v1138);
  sub_21C8C(v356, "speaker_raw");
  sub_21C8C(&v1103, "speaker_raw");
  uint64_t v1106 = 0;
  uint64_t v1105 = 0;
  uint64_t v1107 = 0;
  sub_21C8C(v1108, "speaker_measurement");
  sub_21C8C(v1109, "speaker_raw");
  memset(&v1109[3], 0, 24);
  int v1110 = 1668051824;
  sub_22210((CFStringRef *)&v1097, "SetTelemetryDataSources");
  CFTypeRef v1098 = kCFBooleanTrue;
  v354[0] = &v1097;
  v354[1] = 1;
  CFDictionaryRef v52 = sub_4D3D8((uint64_t)v354);
  v1099[0] = 1936749683;
  CFDictionaryRef v1100 = v52;
  CFTypeRef v355 = 0;
  char v53 = operator new(0xCuLL);
  v1094 = (char *)(v53 + 3);
  *(void *)char v53 = 0x6473706700000001;
  v53[2] = 1869768046;
  v1092 = v53;
  v1093 = v53 + 3;
  uint64_t v351 = 0;
  CFTypeRef v349 = 0;
  int v350 = 0;
  *(void *)&long long v1068 = &v349;
  BYTE8(v1068) = 0;
  CFTypeRef v349 = operator new(0x18uLL);
  int v350 = v349;
  uint64_t v351 = v349 + 3;
  int v350 = sub_1CDC20((uint64_t)&v351, (uint64_t)&v1092, (uint64_t)&v1095, v349);
  sub_1CDCD4((uint64_t)&v1095, (uint64_t *)&v349);
  v352[0] = &v1095;
  v352[1] = 1;
  CFDictionaryRef v54 = sub_4D3D8((uint64_t)v352);
  int v1101 = 1768907891;
  CFDictionaryRef v1102 = v54;
  CFTypeRef v353 = 0;
  v1112 = 0;
  v1113 = 0;
  v1111 = 0;
  *(void *)&long long v1068 = &v1111;
  BYTE8(v1068) = 0;
  uint64_t v55 = (char *)operator new(0x20uLL);
  uint64_t v56 = 0;
  v1111 = v55;
  v1112 = v55;
  v1113 = v55 + 32;
  do
  {
    sub_6D16C((uint64_t)&v55[v56 * 4], v1099[v56], *(CFTypeRef *)&v1099[v56 + 2]);
    v56 += 4;
  }
  while (v56 != 8);
  v1112 = v55 + 32;
  long long v1114 = 0u;
  long long v1115 = 0u;
  int v57 = operator new(4uLL);
  *((void *)&v1114 + 1) = v57;
  *int v57 = 1987405668;
  *((void *)&v1115 + 1) = v57 + 1;
  *(void *)&long long v1115 = v57 + 1;
  v1117[0] = 0;
  v1117[1] = 0;
  v1116 = v1117;
  v1120 = 0;
  v1118 = 0;
  v1119 = 0;
  char v58 = operator new(0x10uLL);
  *(void *)char v58 = 0x200000002;
  v58[2] = v16;
  v58[3] = 0;
  v1118 = v58;
  v1119 = (char *)(v58 + 4);
  char v1121 = 0;
  char v1122 = 0;
  memset(v1123, 0, sizeof(v1123));
  v1120 = (char *)(v58 + 4);
  uint64_t v1124 = 0;
  long long v1068 = xmmword_5968C4;
  uint64_t v1069 = 2;
  sub_6D1AC((uint64_t)v1123, (int *)&v1068, 3);
  char v1125 = 0;
  uint64_t v1126 = 0;
  sub_6D224(v1322, (long long *)v356, &v1103);
  sub_21C8C(v347, "speaker_ringtone");
  sub_21C8C(&v1068, "speaker_general");
  uint64_t v1071 = 0;
  uint64_t v1070 = 0;
  uint64_t v1072 = 0;
  sub_21C8C(v1073, "speaker_ringtone");
  sub_21C8C(v1074, "speaker_general");
  memset(&v1074[3], 0, 24);
  int v1075 = 1668051824;
  sub_22210((CFStringRef *)&v1062, "SetTelemetryDataSources");
  CFTypeRef v1063 = kCFBooleanTrue;
  v345[0] = &v1062;
  v345[1] = 1;
  CFDictionaryRef v59 = sub_4D3D8((uint64_t)v345);
  v1064[0] = 1936749683;
  CFDictionaryRef v1065 = v59;
  CFTypeRef v346 = 0;
  char v60 = operator new(0xCuLL);
  v1059 = (char *)(v60 + 3);
  *(void *)char v60 = 0x6473706700000001;
  v60[2] = 1869768046;
  v1057 = v60;
  v1058 = v60 + 3;
  char v342 = 0;
  uint64_t v340 = 0;
  char v341 = 0;
  *(void *)&long long v1036 = &v340;
  BYTE8(v1036) = 0;
  uint64_t v340 = operator new(0x18uLL);
  char v341 = v340;
  char v342 = v340 + 3;
  char v341 = sub_1CDC20((uint64_t)&v342, (uint64_t)&v1057, (uint64_t)&v1060, v340);
  sub_1CDCD4((uint64_t)&v1060, (uint64_t *)&v340);
  v343[0] = &v1060;
  v343[1] = 1;
  CFDictionaryRef v61 = sub_4D3D8((uint64_t)v343);
  int v1066 = 1768907891;
  CFDictionaryRef v1067 = v61;
  CFTypeRef v344 = 0;
  v1077 = 0;
  v1078 = 0;
  v1076 = 0;
  *(void *)&long long v1036 = &v1076;
  BYTE8(v1036) = 0;
  uint64_t v62 = (char *)operator new(0x20uLL);
  uint64_t v63 = 0;
  v1076 = v62;
  v1077 = v62;
  v1078 = v62 + 32;
  do
  {
    sub_6D16C((uint64_t)&v62[v63 * 4], v1064[v63], *(CFTypeRef *)&v1064[v63 + 2]);
    v63 += 4;
  }
  while (v63 != 8);
  v1077 = v62 + 32;
  long long v1079 = 0u;
  long long v1080 = 0u;
  __int16 v64 = operator new(8uLL);
  *((void *)&v1079 + 1) = v64;
  void *v64 = 0x6C766F6C766F6C75;
  *((void *)&v1080 + 1) = v64 + 1;
  *(void *)&long long v1080 = v64 + 1;
  v1082[0] = 0;
  v1082[1] = 0;
  v1081 = v1082;
  v1085 = 0;
  v1083 = 0;
  v1084 = 0;
  int v65 = operator new(0x10uLL);
  *(void *)int v65 = 0x200000002;
  v65[2] = v16;
  v65[3] = 0;
  v1083 = v65;
  v1084 = (char *)(v65 + 4);
  char v1086 = 0;
  char v1087 = 0;
  memset(v1088, 0, sizeof(v1088));
  v1085 = (char *)(v65 + 4);
  uint64_t v1089 = 0;
  long long v1036 = xmmword_5968C4;
  uint64_t v1037 = 2;
  sub_6D1AC((uint64_t)v1088, (int *)&v1036, 3);
  char v1090 = 0;
  uint64_t v1091 = 0;
  sub_6D224(v1323, (long long *)v347, &v1068);
  sub_21C8C(v338, "front_mic_general");
  sub_21C8C(&v1036, "front_mic_general");
  uint64_t v1039 = 0;
  uint64_t v1038 = 0;
  uint64_t v1040 = 0;
  sub_21C8C(v1041, "front_mic_general");
  sub_21C8C(v1042, "front_mic_general");
  memset(&v1042[3], 0, 24);
  int v1043 = 1684434036;
  sub_1CDF04(v1033, "aufx-firf-appl");
  int v335 = sub_8598C(v4, 0x666E7431u);
  sub_1CDF58((uint64_t)v1034, "VPMicIndex", &v335);
  v336[0] = v1033;
  v336[1] = 2;
  CFDictionaryRef v66 = sub_4D3D8((uint64_t)v336);
  v1034[4] = 1718186601;
  CFTypeRef v1035 = v66;
  CFTypeRef v337 = 0;
  v1045 = 0;
  v1046 = 0;
  v1044 = 0;
  *(void *)&long long v1012 = &v1044;
  BYTE8(v1012) = 0;
  v1044 = (char *)operator new(0x10uLL);
  v1045 = v1044;
  __int16 v67 = v1044 + 16;
  v1046 = v1044 + 16;
  sub_6D16C((uint64_t)v1044, 1718186601, v66);
  memset(v1050, 0, sizeof(v1050));
  long long v1047 = 0u;
  long long v1048 = 0u;
  v1045 = v67;
  v1049 = v1050;
  char v1052 = 0;
  memset(v1053, 0, sizeof(v1053));
  uint64_t v1054 = 0;
  char v1051 = 0;
  long long v1012 = xmmword_5968C4;
  uint64_t v1013 = 2;
  sub_6D1AC((uint64_t)v1053, (int *)&v1012, 3);
  char v1055 = 0;
  uint64_t v1056 = 0;
  sub_6D224(v1324, (long long *)v338, &v1036);
  sub_21C8C(v333, "bottom_mic_general");
  sub_21C8C(&v1012, "bottom_mic_general");
  uint64_t v1015 = 0;
  uint64_t v1014 = 0;
  uint64_t v1016 = 0;
  sub_21C8C(v1017, "bottom_mic_general");
  sub_21C8C(v1018, "bottom_mic_general");
  memset(&v1018[3], 0, 24);
  int v1019 = 1684434036;
  sub_1CDF04(v1009, "aufx-firf-appl");
  int v330 = sub_8598C(v4, 0x62746D31u);
  sub_1CDF58((uint64_t)v1010, "VPMicIndex", &v330);
  v331[0] = v1009;
  v331[1] = 2;
  CFDictionaryRef v68 = sub_4D3D8((uint64_t)v331);
  v1010[4] = 1718186601;
  CFTypeRef v1011 = v68;
  CFTypeRef v332 = 0;
  v1021 = 0;
  v1022 = 0;
  v1020 = 0;
  *(void *)&long long v988 = &v1020;
  BYTE8(v988) = 0;
  v1020 = (char *)operator new(0x10uLL);
  v1021 = v1020;
  __int16 v69 = v1020 + 16;
  v1022 = v1020 + 16;
  sub_6D16C((uint64_t)v1020, 1718186601, v68);
  memset(v1026, 0, sizeof(v1026));
  long long v1023 = 0u;
  long long v1024 = 0u;
  v1021 = v69;
  v1025 = v1026;
  char v1028 = 0;
  memset(v1029, 0, sizeof(v1029));
  uint64_t v1030 = 0;
  char v1027 = 0;
  long long v988 = xmmword_5968C4;
  uint64_t v989 = 2;
  sub_6D1AC((uint64_t)v1029, (int *)&v988, 3);
  char v1031 = 0;
  uint64_t v1032 = 0;
  sub_6D224(v1325, (long long *)v333, &v1012);
  sub_21C8C(v328, "bottom_mic_hearing_accessibility");
  sub_21C8C(&v988, "bottom_mic_hearing_accessibility");
  uint64_t v991 = 0;
  uint64_t v990 = 0;
  uint64_t v992 = 0;
  sub_21C8C(v993, "bottom_mic_hearing_accessibility");
  sub_21C8C(v994, "bottom_mic_hearing_accessibility");
  memset(&v994[3], 0, 24);
  int v995 = 1684434036;
  sub_1CDF04(v985, "aufx-firf-appl");
  int v325 = sub_8598C(v4, 0x62746D31u);
  sub_1CDF58((uint64_t)v986, "VPMicIndex", &v325);
  v326[0] = v985;
  v326[1] = 2;
  CFDictionaryRef v70 = sub_4D3D8((uint64_t)v326);
  v986[4] = 1718186601;
  CFTypeRef v987 = v70;
  CFTypeRef v327 = 0;
  v997 = 0;
  v998 = 0;
  v996 = 0;
  *(void *)&long long v964 = &v996;
  BYTE8(v964) = 0;
  v996 = (char *)operator new(0x10uLL);
  v997 = v996;
  __int16 v71 = v996 + 16;
  v998 = v996 + 16;
  sub_6D16C((uint64_t)v996, 1718186601, v70);
  memset(v1002, 0, sizeof(v1002));
  long long v999 = 0u;
  long long v1000 = 0u;
  v997 = v71;
  v1001 = v1002;
  char v1004 = 0;
  memset(v1005, 0, sizeof(v1005));
  uint64_t v1006 = 0;
  char v1003 = 0;
  long long v964 = xmmword_5968C4;
  uint64_t v965 = 2;
  sub_6D1AC((uint64_t)v1005, (int *)&v964, 3);
  char v1007 = 0;
  uint64_t v1008 = 0;
  sub_6D224(v1326, (long long *)v328, &v988);
  sub_21C8C(v323, "bottom_mic2_general");
  sub_21C8C(&v964, "bottom_mic_general");
  uint64_t v967 = 0;
  uint64_t v966 = 0;
  uint64_t v968 = 0;
  sub_21C8C(v969, "bottom_mic_general");
  sub_21C8C(v970, "bottom_mic_general");
  memset(&v970[3], 0, 24);
  int v971 = 1684434036;
  sub_1CDF04(v961, "aufx-firf-appl");
  int v320 = sub_8598C(v4, 0x62746D32u);
  sub_1CDF58((uint64_t)v962, "VPMicIndex", &v320);
  v321[0] = v961;
  v321[1] = 2;
  CFDictionaryRef v72 = sub_4D3D8((uint64_t)v321);
  v962[4] = 1718186601;
  CFTypeRef v963 = v72;
  CFTypeRef v322 = 0;
  char v973 = 0;
  uint64_t v974 = 0;
  uint64_t v972 = 0;
  *(void *)&long long v940 = &v972;
  BYTE8(v940) = 0;
  uint64_t v972 = (char *)operator new(0x10uLL);
  char v973 = v972;
  char v73 = v972 + 16;
  uint64_t v974 = v972 + 16;
  sub_6D16C((uint64_t)v972, 1718186601, v72);
  memset(v978, 0, sizeof(v978));
  long long v975 = 0u;
  long long v976 = 0u;
  char v973 = v73;
  v977 = v978;
  char v980 = 0;
  memset(v981, 0, sizeof(v981));
  uint64_t v982 = 0;
  char v979 = 0;
  long long v940 = xmmword_5968C4;
  uint64_t v941 = 2;
  sub_6D1AC((uint64_t)v981, (int *)&v940, 3);
  char v983 = 0;
  uint64_t v984 = 0;
  sub_6D224(v1327, (long long *)v323, &v964);
  sub_21C8C(v318, "back_mic_general");
  sub_21C8C(&v940, "back_mic_general");
  uint64_t v943 = 0;
  uint64_t v942 = 0;
  uint64_t v944 = 0;
  sub_21C8C(v945, "back_mic_general");
  sub_21C8C(v946, "back_mic_general");
  memset(&v946[3], 0, 24);
  int v947 = 1684434036;
  sub_1CDF04(v937, "aufx-firf-appl");
  int v315 = sub_8598C(v4, 0x62616B31u);
  sub_1CDF58((uint64_t)v938, "VPMicIndex", &v315);
  v316[0] = v937;
  v316[1] = 2;
  CFDictionaryRef v74 = sub_4D3D8((uint64_t)v316);
  v938[4] = 1718186601;
  CFTypeRef v939 = v74;
  CFTypeRef v317 = 0;
  int v949 = 0;
  CFDictionaryRef v950 = 0;
  uint64_t v948 = 0;
  *(void *)&long long v913 = &v948;
  BYTE8(v913) = 0;
  uint64_t v948 = (char *)operator new(0x10uLL);
  int v949 = v948;
  char v75 = v948 + 16;
  CFDictionaryRef v950 = v948 + 16;
  sub_6D16C((uint64_t)v948, 1718186601, v74);
  memset(v954, 0, sizeof(v954));
  long long v951 = 0u;
  long long v952 = 0u;
  int v949 = v75;
  long long v953 = v954;
  char v956 = 0;
  memset(v957, 0, sizeof(v957));
  uint64_t v958 = 0;
  char v955 = 0;
  long long v913 = xmmword_5968C4;
  uint64_t v914 = 2;
  sub_6D1AC((uint64_t)v957, (int *)&v913, 3);
  char v959 = 0;
  uint64_t v960 = 0;
  sub_6D224(v1328, (long long *)v318, &v940);
  sub_21C8C(v313, "beamformed_mic_general");
  sub_21C8C(&v913, "beam_mic_general");
  uint64_t v916 = 0;
  uint64_t v915 = 0;
  uint64_t v917 = 0;
  sub_21C8C(v918, "beam_mic_general");
  sub_21C8C(v919, "beam_mic_general");
  memset(&v919[3], 0, 24);
  int v920 = 1684434036;
  int v310 = 0;
  sub_21E288((uint64_t)&v907, &v310);
  v311[0] = &v907;
  v311[1] = 1;
  CFDictionaryRef v76 = sub_4D3D8((uint64_t)v311);
  v909[0] = 1651074168;
  CFDictionaryRef v910 = v76;
  CFTypeRef v312 = 0;
  int v307 = 0;
  sub_1CE110((uint64_t)&v905, &v307);
  v308[0] = &v905;
  v308[1] = 1;
  CFDictionaryRef v77 = sub_4D3D8((uint64_t)v308);
  int v911 = 1920365171;
  CFDictionaryRef v912 = v77;
  CFTypeRef v309 = 0;
  uint64_t v922 = 0;
  uint64_t v923 = 0;
  long long v921 = 0;
  *(void *)&long long v884 = &v921;
  BYTE8(v884) = 0;
  int v78 = (char *)operator new(0x20uLL);
  uint64_t v79 = 0;
  long long v921 = v78;
  uint64_t v922 = v78;
  uint64_t v923 = v78 + 32;
  do
  {
    sub_6D16C((uint64_t)&v78[v79 * 4], v909[v79], *(CFTypeRef *)&v909[v79 + 2]);
    v79 += 4;
  }
  while (v79 != 8);
  v927[0] = 0;
  v927[1] = 0;
  long long v924 = 0u;
  long long v925 = 0u;
  uint64_t v922 = v78 + 32;
  v926 = v927;
  v930 = 0;
  int v928 = 0;
  long long v929 = 0;
  int v80 = operator new(8uLL);
  int v928 = v80;
  *int v80 = 0x100000002;
  v930 = v80 + 1;
  long long v929 = v80 + 1;
  char v931 = 0;
  char v932 = 0;
  memset(v933, 0, sizeof(v933));
  uint64_t v934 = 0;
  long long v884 = xmmword_5968C4;
  uint64_t v885 = 2;
  sub_6D1AC((uint64_t)v933, (int *)&v884, 3);
  char v935 = 0;
  uint64_t v936 = 0;
  sub_6D224(v1329, (long long *)v313, &v913);
  sub_21C8C(v305, "front_mic_measurement");
  sub_21C8C(&v884, "front_mic_measurement");
  uint64_t v887 = 0;
  uint64_t v886 = 0;
  uint64_t v888 = 0;
  sub_21C8C(v889, "front_mic_measurement");
  sub_21C8C(v890, "front_mic_measurement");
  memset(&v890[3], 0, 24);
  int v891 = 1684434036;
  sub_1CDF04(v881, "aufx-firf-appl");
  int v302 = sub_8598C(v4, 0x666E7431u);
  sub_1CDF58((uint64_t)v882, "VPMicIndex", &v302);
  v303[0] = v881;
  v303[1] = 2;
  CFDictionaryRef v81 = sub_4D3D8((uint64_t)v303);
  v882[4] = 1718186601;
  CFTypeRef v883 = v81;
  CFTypeRef v304 = 0;
  uint64_t v893 = 0;
  uint64_t v894 = 0;
  char v892 = 0;
  *(void *)&long long v860 = &v892;
  BYTE8(v860) = 0;
  char v892 = (char *)operator new(0x10uLL);
  uint64_t v893 = v892;
  int v82 = v892 + 16;
  uint64_t v894 = v892 + 16;
  sub_6D16C((uint64_t)v892, 1718186601, v81);
  memset(v898, 0, sizeof(v898));
  long long v895 = 0u;
  long long v896 = 0u;
  uint64_t v893 = v82;
  long long v897 = v898;
  char v900 = 0;
  memset(v901, 0, sizeof(v901));
  uint64_t v902 = 0;
  char v899 = 0;
  long long v860 = xmmword_5968C4;
  uint64_t v861 = 2;
  sub_6D1AC((uint64_t)v901, (int *)&v860, 3);
  char v903 = 0;
  uint64_t v904 = 0;
  sub_6D224(v1330, (long long *)v305, &v884);
  sub_21C8C(v300, "bottom_mic_measurement");
  sub_21C8C(&v860, "bottom_mic_measurement");
  uint64_t v863 = 0;
  uint64_t v862 = 0;
  uint64_t v864 = 0;
  sub_21C8C(v865, "bottom_mic_measurement");
  sub_21C8C(v866, "bottom_mic_measurement");
  memset(&v866[3], 0, 24);
  int v867 = 1684434036;
  sub_1CDF04(v857, "aufx-firf-appl");
  int v297 = sub_8598C(v4, 0x62746D31u);
  sub_1CDF58((uint64_t)v858, "VPMicIndex", &v297);
  v298[0] = v857;
  v298[1] = 2;
  CFDictionaryRef v83 = sub_4D3D8((uint64_t)v298);
  v858[4] = 1718186601;
  CFTypeRef v859 = v83;
  CFTypeRef v299 = 0;
  uint64_t v869 = 0;
  uint64_t v870 = 0;
  char v868 = 0;
  *(void *)&long long v836 = &v868;
  BYTE8(v836) = 0;
  char v868 = (char *)operator new(0x10uLL);
  uint64_t v869 = v868;
  int v84 = v868 + 16;
  uint64_t v870 = v868 + 16;
  sub_6D16C((uint64_t)v868, 1718186601, v83);
  memset(v874, 0, sizeof(v874));
  long long v871 = 0u;
  long long v872 = 0u;
  uint64_t v869 = v84;
  long long v873 = v874;
  char v876 = 0;
  memset(v877, 0, sizeof(v877));
  uint64_t v878 = 0;
  char v875 = 0;
  long long v836 = xmmword_5968C4;
  uint64_t v837 = 2;
  sub_6D1AC((uint64_t)v877, (int *)&v836, 3);
  char v879 = 0;
  uint64_t v880 = 0;
  sub_6D224(v1331, (long long *)v300, &v860);
  sub_21C8C(v295, "bottom_mic2_measurement");
  sub_21C8C(&v836, "bottom_mic_measurement");
  uint64_t v839 = 0;
  uint64_t v838 = 0;
  uint64_t v840 = 0;
  sub_21C8C(v841, "bottom_mic_measurement");
  sub_21C8C(v842, "bottom_mic_measurement");
  memset(&v842[3], 0, 24);
  int v843 = 1684434036;
  sub_1CDF04(v833, "aufx-firf-appl");
  int v292 = sub_8598C(v4, 0x62746D32u);
  sub_1CDF58((uint64_t)v834, "VPMicIndex", &v292);
  v293[0] = v833;
  v293[1] = 2;
  CFDictionaryRef v85 = sub_4D3D8((uint64_t)v293);
  v834[4] = 1718186601;
  CFTypeRef v835 = v85;
  CFTypeRef v294 = 0;
  uint64_t v845 = 0;
  uint64_t v846 = 0;
  char v844 = 0;
  *(void *)&long long v812 = &v844;
  BYTE8(v812) = 0;
  char v844 = (char *)operator new(0x10uLL);
  uint64_t v845 = v844;
  int v86 = v844 + 16;
  uint64_t v846 = v844 + 16;
  sub_6D16C((uint64_t)v844, 1718186601, v85);
  memset(v850, 0, sizeof(v850));
  long long v847 = 0u;
  long long v848 = 0u;
  uint64_t v845 = v86;
  long long v849 = v850;
  char v852 = 0;
  memset(v853, 0, sizeof(v853));
  uint64_t v854 = 0;
  char v851 = 0;
  long long v812 = xmmword_5968C4;
  uint64_t v813 = 2;
  sub_6D1AC((uint64_t)v853, (int *)&v812, 3);
  char v855 = 0;
  uint64_t v856 = 0;
  sub_6D224(v1332, (long long *)v295, &v836);
  sub_21C8C(v290, "back_mic_measurement");
  sub_21C8C(&v812, "back_mic_measurement");
  uint64_t v815 = 0;
  uint64_t v814 = 0;
  uint64_t v816 = 0;
  sub_21C8C(v817, "back_mic_measurement");
  sub_21C8C(v818, "back_mic_measurement");
  memset(&v818[3], 0, 24);
  int v819 = 1684434036;
  sub_1CDF04(v809, "aufx-firf-appl");
  int v287 = sub_8598C(v4, 0x62616B31u);
  sub_1CDF58((uint64_t)v810, "VPMicIndex", &v287);
  v288[0] = v809;
  v288[1] = 2;
  CFDictionaryRef v87 = sub_4D3D8((uint64_t)v288);
  v810[4] = 1718186601;
  CFTypeRef v811 = v87;
  CFTypeRef v289 = 0;
  uint64_t v821 = 0;
  uint64_t v822 = 0;
  char v820 = 0;
  *(void *)&long long v785 = &v820;
  BYTE8(v785) = 0;
  char v820 = (char *)operator new(0x10uLL);
  uint64_t v821 = v820;
  int v88 = v820 + 16;
  uint64_t v822 = v820 + 16;
  sub_6D16C((uint64_t)v820, 1718186601, v87);
  memset(v826, 0, sizeof(v826));
  long long v823 = 0u;
  long long v824 = 0u;
  uint64_t v821 = v88;
  long long v825 = v826;
  char v828 = 0;
  memset(v829, 0, sizeof(v829));
  uint64_t v830 = 0;
  char v827 = 0;
  long long v785 = xmmword_5968C4;
  uint64_t v786 = 2;
  sub_6D1AC((uint64_t)v829, (int *)&v785, 3);
  char v831 = 0;
  uint64_t v832 = 0;
  sub_6D224(v1333, (long long *)v290, &v812);
  sub_21C8C(v285, "beamformed_mic_measurement");
  sub_21C8C(&v785, "beam_mic_measurement");
  uint64_t v788 = 0;
  uint64_t v787 = 0;
  uint64_t v789 = 0;
  sub_21C8C(v790, "beam_mic_measurement");
  sub_21C8C(v791, "beam_mic_measurement");
  memset(&v791[3], 0, 24);
  int v792 = 1684434036;
  int v282 = 0;
  sub_21E288((uint64_t)&v779, &v282);
  v283[0] = &v779;
  v283[1] = 1;
  CFDictionaryRef v89 = sub_4D3D8((uint64_t)v283);
  v781[0] = 1651074168;
  CFDictionaryRef v782 = v89;
  CFTypeRef v284 = 0;
  int v279 = 0;
  sub_1CE110((uint64_t)&v777, &v279);
  v280[0] = &v777;
  v280[1] = 1;
  CFDictionaryRef v90 = sub_4D3D8((uint64_t)v280);
  int v783 = 1920365171;
  CFDictionaryRef v784 = v90;
  CFTypeRef v281 = 0;
  long long v794 = 0;
  CFDictionaryRef v795 = 0;
  CFTypeRef v793 = 0;
  *(void *)&long long v756 = &v793;
  BYTE8(v756) = 0;
  char v91 = (char *)operator new(0x20uLL);
  uint64_t v92 = 0;
  CFTypeRef v793 = v91;
  long long v794 = v91;
  CFDictionaryRef v795 = v91 + 32;
  do
  {
    sub_6D16C((uint64_t)&v91[v92 * 4], v781[v92], *(CFTypeRef *)&v781[v92 + 2]);
    v92 += 4;
  }
  while (v92 != 8);
  v799[0] = 0;
  v799[1] = 0;
  long long v796 = 0u;
  long long v797 = 0u;
  long long v794 = v91 + 32;
  long long v798 = v799;
  uint64_t v802 = 0;
  uint64_t v800 = 0;
  uint64_t v801 = 0;
  char v93 = operator new(8uLL);
  uint64_t v800 = v93;
  void *v93 = 0x100000002;
  uint64_t v802 = v93 + 1;
  uint64_t v801 = v93 + 1;
  char v803 = 0;
  char v804 = 0;
  memset(v805, 0, sizeof(v805));
  uint64_t v806 = 0;
  long long v756 = xmmword_5968C4;
  uint64_t v757 = 2;
  sub_6D1AC((uint64_t)v805, (int *)&v756, 3);
  char v807 = 0;
  uint64_t v808 = 0;
  sub_6D224(v1334, (long long *)v285, &v785);
  sub_21C8C(v277, "bottom_mic_voice_messages");
  sub_21C8C(&v756, "bottom_mic_voice_messages");
  uint64_t v759 = 0;
  uint64_t v758 = 0;
  uint64_t v760 = 0;
  sub_21C8C(v761, "bottom_mic_voice_messages");
  sub_21C8C(v762, "bottom_mic_voice_messages");
  memset(&v762[3], 0, 24);
  int v763 = 1684434036;
  sub_1CDF04(v753, "aufx-firf-appl");
  int v274 = sub_8598C(v4, 0x62746D31u);
  sub_1CDF58((uint64_t)v754, "VPMicIndex", &v274);
  v275[0] = v753;
  v275[1] = 2;
  CFDictionaryRef v94 = sub_4D3D8((uint64_t)v275);
  v754[4] = 1718186601;
  CFTypeRef v755 = v94;
  CFTypeRef v276 = 0;
  CFDictionaryRef v765 = 0;
  long long v766 = 0;
  int v764 = 0;
  *(void *)&long long v732 = &v764;
  BYTE8(v732) = 0;
  int v764 = (char *)operator new(0x10uLL);
  CFDictionaryRef v765 = v764;
  int v95 = v764 + 16;
  long long v766 = v764 + 16;
  sub_6D16C((uint64_t)v764, 1718186601, v94);
  memset(v770, 0, sizeof(v770));
  long long v767 = 0u;
  long long v768 = 0u;
  CFDictionaryRef v765 = v95;
  uint64_t v769 = v770;
  char v772 = 0;
  memset(v773, 0, sizeof(v773));
  uint64_t v774 = 0;
  char v771 = 0;
  long long v732 = xmmword_5968C4;
  uint64_t v733 = 2;
  sub_6D1AC((uint64_t)v773, (int *)&v732, 3);
  char v775 = 0;
  uint64_t v776 = 0;
  sub_6D224(v1335, (long long *)v277, &v756);
  sub_21C8C(v272, "bottom_mic_voice_recognition");
  sub_21C8C(&v732, "bottom_mic_voice_recognition");
  uint64_t v735 = 0;
  uint64_t v734 = 0;
  uint64_t v736 = 0;
  sub_21C8C(v737, "bottom_mic_voice_recognition");
  sub_21C8C(v738, "bottom_mic_voice_recognition");
  memset(&v738[3], 0, 24);
  int v739 = 1684434036;
  sub_1CDF04(v729, "aufx-firf-appl");
  int v269 = sub_8598C(v4, 0x62746D31u);
  sub_1CDF58((uint64_t)v730, "VPMicIndex", &v269);
  v270[0] = v729;
  v270[1] = 2;
  CFDictionaryRef v96 = sub_4D3D8((uint64_t)v270);
  v730[4] = 1718186601;
  CFTypeRef v731 = v96;
  CFTypeRef v271 = 0;
  long long v741 = 0;
  int v742 = 0;
  long long v740 = 0;
  *(void *)&long long v705 = &v740;
  BYTE8(v705) = 0;
  long long v740 = (char *)operator new(0x10uLL);
  long long v741 = v740;
  int v97 = v740 + 16;
  int v742 = v740 + 16;
  sub_6D16C((uint64_t)v740, 1718186601, v96);
  memset(v746, 0, sizeof(v746));
  long long v743 = 0u;
  long long v744 = 0u;
  long long v741 = v97;
  long long v745 = v746;
  char v748 = 0;
  memset(v749, 0, sizeof(v749));
  uint64_t v750 = 0;
  char v747 = 0;
  long long v705 = xmmword_5968C4;
  uint64_t v706 = 2;
  sub_6D1AC((uint64_t)v749, (int *)&v705, 3);
  char v751 = 0;
  uint64_t v752 = 0;
  sub_6D224(v1336, (long long *)v272, &v732);
  sub_21C8C(v267, "beamformed_mic_voice_messages");
  sub_21C8C(&v705, "beam_mic_voice_messages");
  uint64_t v708 = 0;
  uint64_t v707 = 0;
  uint64_t v709 = 0;
  sub_21C8C(v710, "beam_mic_voice_messages");
  sub_21C8C(v711, "beam_mic_voice_messages");
  memset(&v711[3], 0, 24);
  int v712 = 1684434036;
  int v264 = 0;
  sub_21E288((uint64_t)&v699, &v264);
  v265[0] = &v699;
  v265[1] = 1;
  CFDictionaryRef v98 = sub_4D3D8((uint64_t)v265);
  v701[0] = 1651074168;
  CFDictionaryRef v702 = v98;
  CFTypeRef v266 = 0;
  int v261 = 0;
  sub_1CE110((uint64_t)&v697, &v261);
  v262[0] = &v697;
  v262[1] = 1;
  CFDictionaryRef v99 = sub_4D3D8((uint64_t)v262);
  int v703 = 1920365171;
  CFDictionaryRef v704 = v99;
  CFTypeRef v263 = 0;
  long long v714 = 0;
  uint64_t v715 = 0;
  CFTypeRef v713 = 0;
  *(void *)&long long v673 = &v713;
  BYTE8(v673) = 0;
  char v100 = (char *)operator new(0x20uLL);
  uint64_t v101 = 0;
  CFTypeRef v713 = v100;
  long long v714 = v100;
  uint64_t v715 = v100 + 32;
  do
  {
    sub_6D16C((uint64_t)&v100[v101 * 4], v701[v101], *(CFTypeRef *)&v701[v101 + 2]);
    v101 += 4;
  }
  while (v101 != 8);
  v719[0] = 0;
  v719[1] = 0;
  long long v716 = 0u;
  long long v717 = 0u;
  long long v714 = v100 + 32;
  uint64_t v718 = v719;
  long long v722 = 0;
  v720 = 0;
  int v721 = 0;
  char v102 = operator new(8uLL);
  v720 = v102;
  *char v102 = 0x100000002;
  long long v722 = v102 + 1;
  int v721 = v102 + 1;
  char v723 = 0;
  char v724 = 0;
  memset(v725, 0, sizeof(v725));
  uint64_t v726 = 0;
  long long v673 = xmmword_5968C4;
  uint64_t v674 = 2;
  sub_6D1AC((uint64_t)v725, (int *)&v673, 3);
  char v727 = 0;
  uint64_t v728 = 0;
  sub_6D224(v1337, (long long *)v267, &v705);
  sub_21C8C(v259, "beamformed_mic_voice_recognition");
  sub_21C8C(&v673, "beam_mic_voice_recognition");
  uint64_t v676 = 0;
  uint64_t v675 = 0;
  uint64_t v677 = 0;
  sub_21C8C(v678, "beam_mic_voice_recognition");
  sub_21C8C(v679, "beam_mic_voice_recognition");
  memset(&v679[3], 0, 24);
  int v680 = 1684434036;
  int v256 = 0;
  sub_21E288((uint64_t)&v667, &v256);
  v257[0] = &v667;
  v257[1] = 1;
  CFDictionaryRef v103 = sub_4D3D8((uint64_t)v257);
  v669[0] = 1651074168;
  CFDictionaryRef v670 = v103;
  CFTypeRef v258 = 0;
  int v253 = 0;
  sub_1CE110((uint64_t)&v665, &v253);
  v254[0] = &v665;
  v254[1] = 1;
  CFDictionaryRef v104 = sub_4D3D8((uint64_t)v254);
  int v671 = 1920365171;
  CFDictionaryRef v672 = v104;
  CFTypeRef v255 = 0;
  char v682 = 0;
  v683 = 0;
  char v681 = 0;
  *(void *)&long long v642 = &v681;
  BYTE8(v642) = 0;
  char v105 = (char *)operator new(0x20uLL);
  uint64_t v106 = 0;
  char v681 = v105;
  char v682 = v105;
  v683 = v105 + 32;
  do
  {
    sub_6D16C((uint64_t)&v105[v106 * 4], v669[v106], *(CFTypeRef *)&v669[v106 + 2]);
    v106 += 4;
  }
  while (v106 != 8);
  v687[0] = 0;
  v687[1] = 0;
  long long v684 = 0u;
  long long v685 = 0u;
  char v682 = v105 + 32;
  uint64_t v686 = v687;
  long long v690 = 0;
  uint64_t v688 = 0;
  CFTypeRef v689 = 0;
  char v107 = operator new(8uLL);
  uint64_t v688 = v107;
  *char v107 = 0x100000002;
  long long v690 = v107 + 1;
  CFTypeRef v689 = v107 + 1;
  char v691 = 0;
  char v692 = 0;
  memset(v693, 0, sizeof(v693));
  uint64_t v694 = 0;
  long long v642 = xmmword_5968C4;
  uint64_t v643 = 2;
  sub_6D1AC((uint64_t)v693, (int *)&v642, 3);
  char v695 = 0;
  uint64_t v696 = 0;
  sub_6D224(v1338, (long long *)v259, &v673);
  sub_21C8C(v251, "siri_barge_in");
  sub_21C8C(&v642, "mic_voice_recognition");
  uint64_t v645 = 0;
  uint64_t v644 = 0;
  uint64_t v646 = 0;
  sub_21C8C(v647, "mic_voice_recognition");
  sub_21C8C(v648, "mic_voice_recognition");
  memset(&v648[3], 0, 24);
  int v649 = 1684434036;
  v655[0] = 0;
  v655[1] = 0;
  long long v650 = 0u;
  long long v651 = 0u;
  long long v652 = 0u;
  uint64_t v653 = 0;
  long long v654 = v655;
  char v658 = 0;
  uint64_t v656 = 0;
  char v657 = 0;
  char v108 = operator new(0x10uLL);
  uint64_t v656 = v108;
  *char v108 = xmmword_4E7970;
  char v658 = v108 + 1;
  char v657 = v108 + 1;
  char v659 = 0;
  char v660 = 0;
  memset(v661, 0, sizeof(v661));
  uint64_t v662 = 0;
  long long v618 = xmmword_5968C4;
  uint64_t v619 = 2;
  sub_6D1AC((uint64_t)v661, (int *)&v618, 3);
  char v663 = 0;
  uint64_t v664 = 0;
  sub_6D224(v1339, (long long *)v251, &v642);
  sub_21C8C(v249, "beamformed_mic_video_recording");
  sub_21C8C(&v618, "beam_mic_video_recording");
  uint64_t v621 = 0;
  uint64_t v620 = 0;
  uint64_t v622 = 0;
  sub_21C8C(v623, "beam_mic_video_recording");
  sub_21C8C(v624, "beam_mic_video_recording");
  memset(&v624[3], 0, 24);
  int v625 = 1684434036;
  int v246 = 0;
  sub_21E288((uint64_t)&v612, &v246);
  v247[0] = &v612;
  v247[1] = 1;
  CFDictionaryRef v109 = sub_4D3D8((uint64_t)v247);
  v614[0] = 1651074168;
  CFDictionaryRef v615 = v109;
  CFTypeRef v248 = 0;
  int v243 = 0;
  sub_1CE110((uint64_t)&v610, &v243);
  v244[0] = &v610;
  v244[1] = 1;
  CFDictionaryRef v110 = sub_4D3D8((uint64_t)v244);
  int v616 = 1920365171;
  CFDictionaryRef v617 = v110;
  CFTypeRef v245 = 0;
  long long v627 = 0;
  v628 = 0;
  long long v626 = 0;
  *(void *)&long long v586 = &v626;
  BYTE8(v586) = 0;
  char v111 = (char *)operator new(0x20uLL);
  uint64_t v112 = 0;
  long long v626 = v111;
  long long v627 = v111;
  v628 = v111 + 32;
  do
  {
    sub_6D16C((uint64_t)&v111[v112 * 4], v614[v112], *(CFTypeRef *)&v614[v112 + 2]);
    v112 += 4;
  }
  while (v112 != 8);
  v632[0] = 0;
  v632[1] = 0;
  long long v629 = 0u;
  long long v630 = 0u;
  long long v627 = v111 + 32;
  v631 = v632;
  v635 = 0;
  char v633 = 0;
  char v634 = 0;
  char v113 = operator new(8uLL);
  char v633 = v113;
  *char v113 = 0x100000002;
  v635 = v113 + 1;
  char v634 = v113 + 1;
  char v636 = 0;
  char v637 = 0;
  memset(v638, 0, sizeof(v638));
  uint64_t v639 = 0;
  long long v586 = xmmword_5968C4;
  uint64_t v587 = 2;
  sub_6D1AC((uint64_t)v638, (int *)&v586, 3);
  char v640 = 0;
  uint64_t v641 = 0;
  sub_6D224(v1340, (long long *)v249, &v618);
  sub_21C8C(v241, "spatial_video_recording");
  sub_21C8C(&v586, "spatial_video_recording");
  uint64_t v589 = 0;
  uint64_t v588 = 0;
  uint64_t v590 = 0;
  sub_21C8C(v591, "mic_spatial");
  sub_21C8C(v592, "mic_spatial");
  memset(&v592[3], 0, 24);
  int v593 = 1684434036;
  char v114 = operator new(8uLL);
  *char v114 = 0x7472696D706D6269;
  v235[1] = v114 + 1;
  v235[2] = v114 + 1;
  v235[0] = v114;
  CFArrayRef v115 = sub_650B4((int **)v235);
  CFTypeRef v579 = v115;
  CFTypeRef v237 = 0;
  CFTypeRef v238 = 0;
  float v236 = 0;
  *(void *)&long long v550 = &v236;
  BYTE8(v550) = 0;
  float v236 = (uint64_t *)operator new(8uLL);
  CFTypeRef v237 = v236;
  char v116 = v236 + 1;
  CFTypeRef v238 = v236 + 1;
  sub_1CE2D0(v236, v115);
  CFTypeRef v237 = v116;
  sub_1CE30C((uint64_t)&v580, &v236);
  v239[0] = &v580;
  v239[1] = 1;
  CFDictionaryRef v117 = sub_4D3D8((uint64_t)v239);
  v582[0] = 1684303986;
  CFDictionaryRef v583 = v117;
  CFTypeRef v240 = 0;
  char v118 = operator new(0xCuLL);
  uint64_t v576 = (char *)(v118 + 3);
  *(void *)char v118 = 0x6473706700000000;
  v118[2] = 1969844082;
  long long v574 = v118;
  v575 = v118 + 3;
  CFTypeRef v231 = 0;
  char v232 = 0;
  CFTypeRef v230 = 0;
  *(void *)&long long v550 = &v230;
  BYTE8(v550) = 0;
  CFTypeRef v230 = operator new(0x18uLL);
  CFTypeRef v231 = v230;
  char v232 = v230 + 3;
  CFTypeRef v231 = sub_1CDC20((uint64_t)&v232, (uint64_t)&v574, (uint64_t)&v577, v230);
  sub_1CDCD4((uint64_t)&v577, (uint64_t *)&v230);
  v233[0] = &v577;
  v233[1] = 1;
  CFDictionaryRef v119 = sub_4D3D8((uint64_t)v233);
  int v584 = 1768907891;
  CFDictionaryRef v585 = v119;
  CFTypeRef v234 = 0;
  v595 = 0;
  v596 = 0;
  long long v594 = 0;
  *(void *)&long long v550 = &v594;
  BYTE8(v550) = 0;
  char v120 = (char *)operator new(0x20uLL);
  uint64_t v121 = 0;
  long long v594 = v120;
  v595 = v120;
  v596 = v120 + 32;
  do
  {
    sub_6D16C((uint64_t)&v120[v121 * 4], v582[v121], *(CFTypeRef *)&v582[v121 + 2]);
    v121 += 4;
  }
  while (v121 != 8);
  v600[0] = 0;
  v600[1] = 0;
  long long v597 = 0u;
  long long v598 = 0u;
  v595 = v120 + 32;
  v599 = v600;
  CFTypeRef v603 = 0;
  char v601 = 0;
  char v602 = 0;
  char v122 = operator new(0x10uLL);
  char v601 = v122;
  *char v122 = xmmword_4E7970;
  CFTypeRef v603 = v122 + 1;
  char v602 = v122 + 1;
  char v604 = 0;
  char v605 = 0;
  memset(v606, 0, sizeof(v606));
  uint64_t v607 = 0;
  long long v550 = xmmword_5968C4;
  uint64_t v551 = 2;
  sub_6D1AC((uint64_t)v606, (int *)&v550, 3);
  char v608 = 0;
  uint64_t v609 = 0;
  sub_6D224(v1341, (long long *)v241, &v586);
  sub_21C8C(v228, "multicam_recording");
  sub_21C8C(&v550, "multicam");
  uint64_t v553 = 0;
  uint64_t v552 = 0;
  uint64_t v554 = 0;
  sub_21C8C(v555, "multicam");
  sub_21C8C(v556, "multicam");
  memset(&v556[3], 0, 24);
  int v557 = 1684434036;
  char v123 = operator new(0xCuLL);
  v225[1] = v123 + 3;
  void v225[2] = v123 + 3;
  *(void *)char v123 = 0x300000002;
  v123[2] = 4;
  v225[0] = v123;
  sub_1CE360((uint64_t)&v546, (int **)v225);
  v226[0] = &v546;
  v226[1] = 1;
  CFDictionaryRef v124 = sub_4D3D8((uint64_t)v226);
  int v548 = 1667789676;
  CFTypeRef v549 = v124;
  CFTypeRef v227 = 0;
  uint64_t v559 = 0;
  uint64_t v560 = 0;
  uint64_t v558 = 0;
  *(void *)&long long v522 = &v558;
  BYTE8(v522) = 0;
  uint64_t v558 = (char *)operator new(0x10uLL);
  uint64_t v559 = v558;
  char v125 = v558 + 16;
  uint64_t v560 = v558 + 16;
  sub_6D16C((uint64_t)v558, 1667789676, v124);
  v564[0] = 0;
  v564[1] = 0;
  long long v561 = 0u;
  long long v562 = 0u;
  uint64_t v559 = v125;
  uint64_t v563 = v564;
  v567 = 0;
  uint64_t v565 = 0;
  uint64_t v566 = 0;
  char v126 = operator new(8uLL);
  uint64_t v565 = v126;
  void *v126 = 0x300000004;
  v567 = v126 + 1;
  uint64_t v566 = v126 + 1;
  char v568 = 0;
  char v569 = 0;
  memset(v570, 0, sizeof(v570));
  uint64_t v571 = 0;
  long long v522 = xmmword_5968C4;
  uint64_t v523 = 2;
  sub_6D1AC((uint64_t)v570, (int *)&v522, 3);
  char v572 = 0;
  uint64_t v573 = 0;
  sub_6D224(v1342, (long long *)v228, &v550);
  sub_21C8C(v223, "stereo_recording");
  sub_21C8C(&v522, "stereo_recording_no_tap");
  uint64_t v525 = 0;
  uint64_t v524 = 0;
  uint64_t v526 = 0;
  sub_21C8C(v527, "mic_spatial");
  sub_21C8C(v528, "mic_spatial");
  memset(&v528[3], 0, 24);
  int v529 = 1684434036;
  char v127 = operator new(8uLL);
  *char v127 = 0x7472696D706D6269;
  v217[1] = v127 + 1;
  v217[2] = v127 + 1;
  v217[0] = v127;
  CFArrayRef v128 = sub_650B4((int **)v217);
  CFTypeRef v517 = v128;
  uint64_t v219 = 0;
  uint64_t v220 = 0;
  char v218 = 0;
  *(void *)&long long v493 = &v218;
  BYTE8(v493) = 0;
  char v218 = (uint64_t *)operator new(8uLL);
  uint64_t v219 = v218;
  char v129 = v218 + 1;
  uint64_t v220 = v218 + 1;
  sub_1CE2D0(v218, v128);
  uint64_t v219 = v129;
  sub_1CE30C((uint64_t)&v518, &v218);
  v221[0] = &v518;
  v221[1] = 1;
  CFDictionaryRef v130 = sub_4D3D8((uint64_t)v221);
  int v520 = 1684303986;
  CFTypeRef v521 = v130;
  CFTypeRef v222 = 0;
  long long v531 = 0;
  CFDictionaryRef v532 = 0;
  CFTypeRef v530 = 0;
  *(void *)&long long v493 = &v530;
  BYTE8(v493) = 0;
  CFTypeRef v530 = (char *)operator new(0x10uLL);
  long long v531 = v530;
  char v131 = v530 + 16;
  CFDictionaryRef v532 = v530 + 16;
  sub_6D16C((uint64_t)v530, 1684303986, v130);
  v536[0] = 0;
  v536[1] = 0;
  long long v533 = 0u;
  long long v534 = 0u;
  long long v531 = v131;
  long long v535 = v536;
  uint64_t v539 = 0;
  uint64_t v537 = 0;
  uint64_t v538 = 0;
  char v132 = operator new(8uLL);
  uint64_t v537 = v132;
  *char v132 = 0x200000004;
  uint64_t v539 = v132 + 1;
  uint64_t v538 = v132 + 1;
  char v540 = 0;
  char v541 = 0;
  memset(v542, 0, sizeof(v542));
  uint64_t v543 = 0;
  long long v493 = xmmword_5968C4;
  uint64_t v494 = 2;
  sub_6D1AC((uint64_t)v542, (int *)&v493, 3);
  char v544 = 0;
  uint64_t v545 = 0;
  sub_6D224(v1343, (long long *)v223, &v522);
  sub_21C8C(v215, "mic_peripheral");
  sub_21C8C(&v493, "mic_peripheral");
  uint64_t v496 = 0;
  uint64_t v495 = 0;
  uint64_t v497 = 0;
  sub_21C8C(v498, "mic_peripheral");
  sub_21C8C(v499, "mic_peripheral");
  memset(&v499[3], 0, 24);
  int v500 = 1684434036;
  sub_22210((CFStringRef *)&v487, "BeamIndex");
  LODWORD(valuePtr) = 1;
  CFTypeRef v488 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v488)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  v213[0] = &v487;
  v213[1] = 1;
  CFDictionaryRef v133 = sub_4D3D8((uint64_t)v213);
  v489[0] = 1651074168;
  CFDictionaryRef v490 = v133;
  CFTypeRef v214 = 0;
  int v210 = 0;
  sub_1CE110((uint64_t)&v485, &v210);
  v211[0] = &v485;
  v211[1] = 1;
  CFDictionaryRef v134 = sub_4D3D8((uint64_t)v211);
  int v491 = 1920365171;
  CFDictionaryRef v492 = v134;
  CFTypeRef cf = 0;
  CFDictionaryRef v502 = 0;
  long long v503 = 0;
  int v501 = 0;
  *(void *)&long long valuePtr = &v501;
  BYTE8(valuePtr) = 0;
  char v135 = (char *)operator new(0x20uLL);
  uint64_t v136 = 0;
  int v501 = v135;
  CFDictionaryRef v502 = v135;
  long long v503 = v135 + 32;
  do
  {
    sub_6D16C((uint64_t)&v135[v136 * 4], v489[v136], *(CFTypeRef *)&v489[v136 + 2]);
    v136 += 4;
  }
  while (v136 != 8);
  v507[0] = 0;
  v507[1] = 0;
  long long v504 = 0u;
  long long v505 = 0u;
  CFDictionaryRef v502 = v135 + 32;
  uint64_t v506 = v507;
  int v510 = 0;
  v508 = 0;
  v509 = 0;
  char v137 = operator new(8uLL);
  v508 = v137;
  *char v137 = 0x100000004;
  int v510 = v137 + 1;
  v509 = v137 + 1;
  char v511 = 0;
  char v512 = 0;
  memset(v513, 0, sizeof(v513));
  uint64_t v514 = 0;
  long long valuePtr = xmmword_5968C4;
  uint64_t v463 = 2;
  sub_6D1AC((uint64_t)v513, (int *)&valuePtr, 3);
  char v515 = 0;
  uint64_t v516 = 0;
  sub_6D224(v1344, (long long *)v215, &v493);
  sub_21C8C(v208, "mic_peripheral_allmics");
  sub_21C8C(&valuePtr, "mic_peripheral_sender_all_mics");
  uint64_t v465 = 0;
  uint64_t v464 = 0;
  uint64_t v466 = 0;
  sub_21C8C(v467, "mic_peripheral_sender_all_mics");
  sub_21C8C(v468, "mic_peripheral_sender_all_mics");
  memset(&v468[3], 0, 24);
  int v469 = 1684434036;
  v475[0] = 0;
  v475[1] = 0;
  long long v470 = 0u;
  long long v471 = 0u;
  long long v472 = 0u;
  uint64_t v473 = 0;
  uint64_t v474 = v475;
  long long v478 = 0;
  uint64_t v476 = 0;
  long long v477 = 0;
  __int16 v138 = operator new(8uLL);
  uint64_t v476 = v138;
  void *v138 = 0x400000004;
  long long v478 = v138 + 1;
  long long v477 = v138 + 1;
  char v479 = 0;
  char v480 = 0;
  memset(v481, 0, sizeof(v481));
  uint64_t v482 = 0;
  long long v437 = xmmword_5968C4;
  uint64_t v438 = 2;
  sub_6D1AC((uint64_t)v481, (int *)&v437, 3);
  char v483 = 0;
  uint64_t v484 = 0;
  sub_6D224(v1345, (long long *)v208, &valuePtr);
  sub_21C8C(v206, "actuator_general");
  sub_21C8C(&v437, "actuator_general");
  uint64_t v440 = 0;
  uint64_t v439 = 0;
  uint64_t v441 = 0;
  sub_21C8C(v442, "actuator_general");
  long long v445 = 0u;
  long long v444 = 0u;
  long long v443 = 0u;
  int v446 = 1684434036;
  v452[0] = 0;
  v452[1] = 0;
  long long v447 = 0u;
  long long v448 = 0u;
  long long v449 = 0u;
  uint64_t v450 = 0;
  uint64_t v451 = v452;
  int v455 = 0;
  v453 = 0;
  v454 = 0;
  char v139 = operator new(8uLL);
  v453 = v139;
  void *v139 = 0x100000002;
  int v455 = v139 + 1;
  v454 = v139 + 1;
  char v456 = 0;
  char v457 = 0;
  memset(v458, 0, sizeof(v458));
  uint64_t v459 = 0;
  long long v1347 = xmmword_5968C4;
  uint64_t v1348 = 2;
  sub_6D1AC((uint64_t)v458, (int *)&v1347, 3);
  char v460 = 0;
  uint64_t v461 = 0;
  sub_6D224(v1346, (long long *)v206, &v437);
  sub_6D2A0((uint64_t)__p, (unsigned __int8 *)v1310, 31);
  sub_6D31C(v2 + 512, (uint64_t *)__p);
  sub_6C7E4((void *)__p[2]);
  char v140 = __p[0];
  __p[0] = 0;
  if (v140) {
    operator delete(v140);
  }
  for (uint64_t i = 0; i != -10168; i -= 328)
  {
    sub_6C878((uint64_t)&v1346[i + 24]);
    if ((char)v1346[i + 23] < 0) {
      operator delete(*(void **)&v1346[i]);
    }
  }
  sub_6C878((uint64_t)&v437);
  if (v207 < 0) {
    operator delete(v206[0]);
  }
  sub_6C878((uint64_t)&valuePtr);
  if (v209 < 0) {
    operator delete(v208[0]);
  }
  sub_6C878((uint64_t)&v493);
  for (uint64_t j = 6; j != -2; j -= 4)
  {
    char v143 = *(const void **)&v489[j];
    if (v143) {
      CFRelease(v143);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v486) {
    CFRelease(v486);
  }
  if (v485) {
    CFRelease(v485);
  }
  if (v214) {
    CFRelease(v214);
  }
  if (v488) {
    CFRelease(v488);
  }
  if (v487) {
    CFRelease(v487);
  }
  if (v216 < 0) {
    operator delete(v215[0]);
  }
  sub_6C878((uint64_t)&v522);
  if (v521) {
    CFRelease(v521);
  }
  if (v222) {
    CFRelease(v222);
  }
  if (v519) {
    CFRelease(v519);
  }
  if (v518) {
    CFRelease(v518);
  }
  *(void *)&long long v493 = &v218;
  sub_15CB74((void ***)&v493);
  if (v517) {
    CFRelease(v517);
  }
  if (v217[0]) {
    operator delete(v217[0]);
  }
  if (v224 < 0) {
    operator delete(v223[0]);
  }
  sub_6C878((uint64_t)&v550);
  if (v549) {
    CFRelease(v549);
  }
  if (v227) {
    CFRelease(v227);
  }
  if (v547) {
    CFRelease(v547);
  }
  if (v546) {
    CFRelease(v546);
  }
  if (v225[0]) {
    operator delete(v225[0]);
  }
  if (v229 < 0) {
    operator delete(v228[0]);
  }
  sub_6C878((uint64_t)&v586);
  for (uint64_t k = 6; k != -2; k -= 4)
  {
    char v145 = *(const void **)&v582[k];
    if (v145) {
      CFRelease(v145);
    }
  }
  if (v234) {
    CFRelease(v234);
  }
  if (v578) {
    CFRelease(v578);
  }
  if (v577) {
    CFRelease(v577);
  }
  *(void *)&long long v550 = &v230;
  sub_15B944((void ***)&v550);
  if (v574)
  {
    v575 = v574;
    operator delete(v574);
  }
  if (v240) {
    CFRelease(v240);
  }
  if (v581) {
    CFRelease(v581);
  }
  if (v580) {
    CFRelease(v580);
  }
  *(void *)&long long v550 = &v236;
  sub_15CB74((void ***)&v550);
  if (v579) {
    CFRelease(v579);
  }
  if (v235[0]) {
    operator delete(v235[0]);
  }
  if (v242 < 0) {
    operator delete(v241[0]);
  }
  sub_6C878((uint64_t)&v618);
  for (uint64_t m = 6; m != -2; m -= 4)
  {
    char v147 = *(const void **)&v614[m];
    if (v147) {
      CFRelease(v147);
    }
  }
  if (v245) {
    CFRelease(v245);
  }
  if (v611) {
    CFRelease(v611);
  }
  if (v610) {
    CFRelease(v610);
  }
  if (v248) {
    CFRelease(v248);
  }
  if (v613) {
    CFRelease(v613);
  }
  if (v612) {
    CFRelease(v612);
  }
  if (v250 < 0) {
    operator delete(v249[0]);
  }
  sub_6C878((uint64_t)&v642);
  if (v252 < 0) {
    operator delete(v251[0]);
  }
  sub_6C878((uint64_t)&v673);
  for (uint64_t n = 6; n != -2; n -= 4)
  {
    char v149 = *(const void **)&v669[n];
    if (v149) {
      CFRelease(v149);
    }
  }
  if (v255) {
    CFRelease(v255);
  }
  if (v666) {
    CFRelease(v666);
  }
  if (v665) {
    CFRelease(v665);
  }
  if (v258) {
    CFRelease(v258);
  }
  if (v668) {
    CFRelease(v668);
  }
  if (v667) {
    CFRelease(v667);
  }
  if (v260 < 0) {
    operator delete(v259[0]);
  }
  sub_6C878((uint64_t)&v705);
  for (iuint64_t i = 6; ii != -2; ii -= 4)
  {
    char v151 = *(const void **)&v701[ii];
    if (v151) {
      CFRelease(v151);
    }
  }
  if (v263) {
    CFRelease(v263);
  }
  if (v698) {
    CFRelease(v698);
  }
  if (v697) {
    CFRelease(v697);
  }
  if (v266) {
    CFRelease(v266);
  }
  if (v700) {
    CFRelease(v700);
  }
  if (v699) {
    CFRelease(v699);
  }
  if (v268 < 0) {
    operator delete(v267[0]);
  }
  sub_6C878((uint64_t)&v732);
  if (v731) {
    CFRelease(v731);
  }
  if (v271) {
    CFRelease(v271);
  }
  for (juint64_t j = 0; jj != -32; jj -= 16)
  {
    char v153 = *(const void **)&v730[jj / 4 + 2];
    if (v153) {
      CFRelease(v153);
    }
    CFStringRef v154 = v729[jj / 8 + 2];
    if (v154) {
      CFRelease(v154);
    }
  }
  if (v273 < 0) {
    operator delete(v272[0]);
  }
  sub_6C878((uint64_t)&v756);
  if (v755) {
    CFRelease(v755);
  }
  if (v276) {
    CFRelease(v276);
  }
  for (kuint64_t k = 0; kk != -32; kk -= 16)
  {
    char v156 = *(const void **)&v754[kk / 4 + 2];
    if (v156) {
      CFRelease(v156);
    }
    CFStringRef v157 = v753[kk / 8 + 2];
    if (v157) {
      CFRelease(v157);
    }
  }
  if (v278 < 0) {
    operator delete(v277[0]);
  }
  sub_6C878((uint64_t)&v785);
  for (muint64_t m = 6; mm != -2; mm -= 4)
  {
    char v159 = *(const void **)&v781[mm];
    if (v159) {
      CFRelease(v159);
    }
  }
  if (v281) {
    CFRelease(v281);
  }
  if (v778) {
    CFRelease(v778);
  }
  if (v777) {
    CFRelease(v777);
  }
  if (v284) {
    CFRelease(v284);
  }
  if (v780) {
    CFRelease(v780);
  }
  if (v779) {
    CFRelease(v779);
  }
  if (v286 < 0) {
    operator delete(v285[0]);
  }
  sub_6C878((uint64_t)&v812);
  if (v811) {
    CFRelease(v811);
  }
  if (v289) {
    CFRelease(v289);
  }
  for (nuint64_t n = 0; nn != -32; nn -= 16)
  {
    char v161 = *(const void **)&v810[nn / 4 + 2];
    if (v161) {
      CFRelease(v161);
    }
    CFStringRef v162 = v809[nn / 8 + 2];
    if (v162) {
      CFRelease(v162);
    }
  }
  if (v291 < 0) {
    operator delete(v290[0]);
  }
  sub_6C878((uint64_t)&v836);
  if (v835) {
    CFRelease(v835);
  }
  if (v294) {
    CFRelease(v294);
  }
  for (unint64_t i1 = 0; i1 != -32; i1 -= 16)
  {
    char v164 = *(const void **)&v834[i1 / 4 + 2];
    if (v164) {
      CFRelease(v164);
    }
    CFStringRef v165 = v833[i1 / 8 + 2];
    if (v165) {
      CFRelease(v165);
    }
  }
  if (v296 < 0) {
    operator delete(v295[0]);
  }
  sub_6C878((uint64_t)&v860);
  if (v859) {
    CFRelease(v859);
  }
  if (v299) {
    CFRelease(v299);
  }
  for (unint64_t i2 = 0; i2 != -32; i2 -= 16)
  {
    char v167 = *(const void **)&v858[i2 / 4 + 2];
    if (v167) {
      CFRelease(v167);
    }
    CFStringRef v168 = v857[i2 / 8 + 2];
    if (v168) {
      CFRelease(v168);
    }
  }
  if (v301 < 0) {
    operator delete(v300[0]);
  }
  sub_6C878((uint64_t)&v884);
  if (v883) {
    CFRelease(v883);
  }
  if (v304) {
    CFRelease(v304);
  }
  for (unint64_t i3 = 0; i3 != -32; i3 -= 16)
  {
    char v170 = *(const void **)&v882[i3 / 4 + 2];
    if (v170) {
      CFRelease(v170);
    }
    CFStringRef v171 = v881[i3 / 8 + 2];
    if (v171) {
      CFRelease(v171);
    }
  }
  if (v306 < 0) {
    operator delete(v305[0]);
  }
  sub_6C878((uint64_t)&v913);
  for (uint64_t i4 = 6; i4 != -2; i4 -= 4)
  {
    char v173 = *(const void **)&v909[i4];
    if (v173) {
      CFRelease(v173);
    }
  }
  if (v309) {
    CFRelease(v309);
  }
  if (v906) {
    CFRelease(v906);
  }
  if (v905) {
    CFRelease(v905);
  }
  if (v312) {
    CFRelease(v312);
  }
  if (v908) {
    CFRelease(v908);
  }
  if (v907) {
    CFRelease(v907);
  }
  if (v314 < 0) {
    operator delete(v313[0]);
  }
  sub_6C878((uint64_t)&v940);
  if (v939) {
    CFRelease(v939);
  }
  if (v317) {
    CFRelease(v317);
  }
  for (unint64_t i5 = 0; i5 != -32; i5 -= 16)
  {
    char v175 = *(const void **)&v938[i5 / 4 + 2];
    if (v175) {
      CFRelease(v175);
    }
    CFStringRef v176 = v937[i5 / 8 + 2];
    if (v176) {
      CFRelease(v176);
    }
  }
  if (v319 < 0) {
    operator delete(v318[0]);
  }
  sub_6C878((uint64_t)&v964);
  if (v963) {
    CFRelease(v963);
  }
  if (v322) {
    CFRelease(v322);
  }
  for (unint64_t i6 = 0; i6 != -32; i6 -= 16)
  {
    std::string v178 = *(const void **)&v962[i6 / 4 + 2];
    if (v178) {
      CFRelease(v178);
    }
    CFStringRef v179 = v961[i6 / 8 + 2];
    if (v179) {
      CFRelease(v179);
    }
  }
  if (v324 < 0) {
    operator delete(v323[0]);
  }
  sub_6C878((uint64_t)&v988);
  if (v987) {
    CFRelease(v987);
  }
  if (v327) {
    CFRelease(v327);
  }
  for (unint64_t i7 = 0; i7 != -32; i7 -= 16)
  {
    char v181 = *(const void **)&v986[i7 / 4 + 2];
    if (v181) {
      CFRelease(v181);
    }
    CFStringRef v182 = v985[i7 / 8 + 2];
    if (v182) {
      CFRelease(v182);
    }
  }
  if (v329 < 0) {
    operator delete(v328[0]);
  }
  sub_6C878((uint64_t)&v1012);
  if (v1011) {
    CFRelease(v1011);
  }
  if (v332) {
    CFRelease(v332);
  }
  for (unint64_t i8 = 0; i8 != -32; i8 -= 16)
  {
    std::string v184 = *(const void **)&v1010[i8 / 4 + 2];
    if (v184) {
      CFRelease(v184);
    }
    CFStringRef v185 = v1009[i8 / 8 + 2];
    if (v185) {
      CFRelease(v185);
    }
  }
  if (v334 < 0) {
    operator delete(v333[0]);
  }
  sub_6C878((uint64_t)&v1036);
  if (v1035) {
    CFRelease(v1035);
  }
  if (v337) {
    CFRelease(v337);
  }
  for (unint64_t i9 = 0; i9 != -32; i9 -= 16)
  {
    long long v187 = *(const void **)&v1034[i9 / 4 + 2];
    if (v187) {
      CFRelease(v187);
    }
    CFStringRef v188 = v1033[i9 / 8 + 2];
    if (v188) {
      CFRelease(v188);
    }
  }
  if (v339 < 0) {
    operator delete(v338[0]);
  }
  sub_6C878((uint64_t)&v1068);
  for (uint64_t i10 = 6; i10 != -2; i10 -= 4)
  {
    char v190 = *(const void **)&v1064[i10];
    if (v190) {
      CFRelease(v190);
    }
  }
  if (v344) {
    CFRelease(v344);
  }
  if (v1061) {
    CFRelease(v1061);
  }
  if (v1060) {
    CFRelease(v1060);
  }
  *(void *)&long long v1036 = &v340;
  sub_15B944((void ***)&v1036);
  if (v1057)
  {
    v1058 = v1057;
    operator delete(v1057);
  }
  if (v346) {
    CFRelease(v346);
  }
  if (v1063) {
    CFRelease(v1063);
  }
  if (v1062) {
    CFRelease(v1062);
  }
  if (v348 < 0) {
    operator delete(v347[0]);
  }
  sub_6C878((uint64_t)&v1103);
  for (uint64_t i11 = 6; i11 != -2; i11 -= 4)
  {
    char v192 = *(const void **)&v1099[i11];
    if (v192) {
      CFRelease(v192);
    }
  }
  if (v353) {
    CFRelease(v353);
  }
  if (v1096) {
    CFRelease(v1096);
  }
  if (v1095) {
    CFRelease(v1095);
  }
  *(void *)&long long v1068 = &v349;
  sub_15B944((void ***)&v1068);
  if (v1092)
  {
    v1093 = v1092;
    operator delete(v1092);
  }
  if (v355) {
    CFRelease(v355);
  }
  if (v1098) {
    CFRelease(v1098);
  }
  if (v1097) {
    CFRelease(v1097);
  }
  if (v357 < 0) {
    operator delete(v356[0]);
  }
  sub_6C878((uint64_t)&v1138);
  for (uint64_t i12 = 6; i12 != -2; i12 -= 4)
  {
    char v194 = *(const void **)&v1134[i12];
    if (v194) {
      CFRelease(v194);
    }
  }
  if (v362) {
    CFRelease(v362);
  }
  if (v1131) {
    CFRelease(v1131);
  }
  if (v1130) {
    CFRelease(v1130);
  }
  *(void *)&long long v1103 = &v358;
  sub_15B944((void ***)&v1103);
  if (v1127)
  {
    v1128 = v1127;
    operator delete(v1127);
  }
  if (v364) {
    CFRelease(v364);
  }
  if (v1133) {
    CFRelease(v1133);
  }
  if (v1132) {
    CFRelease(v1132);
  }
  if (v366 < 0) {
    operator delete(v365[0]);
  }
  sub_6C878((uint64_t)&v1173);
  for (uint64_t i13 = 6; i13 != -2; i13 -= 4)
  {
    int v196 = *(const void **)&v1169[i13];
    if (v196) {
      CFRelease(v196);
    }
  }
  if (v371) {
    CFRelease(v371);
  }
  if (v1166) {
    CFRelease(v1166);
  }
  if (v1165) {
    CFRelease(v1165);
  }
  *(void *)&long long v1138 = &v367;
  sub_15B944((void ***)&v1138);
  if (v1162)
  {
    v1163 = v1162;
    operator delete(v1162);
  }
  if (v373) {
    CFRelease(v373);
  }
  if (v1168) {
    CFRelease(v1168);
  }
  if (v1167) {
    CFRelease(v1167);
  }
  if (v375 < 0) {
    operator delete(v374[0]);
  }
  sub_6C878((uint64_t)&v1207);
  for (uint64_t i14 = 6; i14 != -2; i14 -= 4)
  {
    uint64_t v198 = *(const void **)&v1203[i14];
    if (v198) {
      CFRelease(v198);
    }
  }
  if (v380) {
    CFRelease(v380);
  }
  if (v1200) {
    CFRelease(v1200);
  }
  if (v1199) {
    CFRelease(v1199);
  }
  v1173.__r_.__value_.__r.__words[0] = (std::string::size_type)&v376;
  sub_15B944((void ***)&v1173);
  if (v1196)
  {
    v1197 = v1196;
    operator delete(v1196);
  }
  if (v382) {
    CFRelease(v382);
  }
  if (v1202) {
    CFRelease(v1202);
  }
  if (v1201) {
    CFRelease(v1201);
  }
  if (v384 < 0) {
    operator delete(v383[0]);
  }
  sub_6C878((uint64_t)&v1241);
  for (uint64_t i15 = 6; i15 != -2; i15 -= 4)
  {
    uint64_t v200 = *(const void **)&v1237[i15];
    if (v200) {
      CFRelease(v200);
    }
  }
  if (v389) {
    CFRelease(v389);
  }
  if (v1234) {
    CFRelease(v1234);
  }
  if (v1233) {
    CFRelease(v1233);
  }
  v1207.__r_.__value_.__r.__words[0] = (std::string::size_type)&v385;
  sub_15B944((void ***)&v1207);
  if (v1230)
  {
    v1231 = v1230;
    operator delete(v1230);
  }
  if (v391) {
    CFRelease(v391);
  }
  if (v1236) {
    CFRelease(v1236);
  }
  if (v1235) {
    CFRelease(v1235);
  }
  if (v393 < 0) {
    operator delete(v392[0]);
  }
  sub_6C878((uint64_t)v1275);
  for (uint64_t i16 = 6; i16 != -2; i16 -= 4)
  {
    uint64_t v202 = *(const void **)&v1271[i16];
    if (v202) {
      CFRelease(v202);
    }
  }
  if (v398) {
    CFRelease(v398);
  }
  if (v1268) {
    CFRelease(v1268);
  }
  if (v1267) {
    CFRelease(v1267);
  }
  v1241.__r_.__value_.__r.__words[0] = (std::string::size_type)&v394;
  sub_15B944((void ***)&v1241);
  if (v1264)
  {
    v1265 = v1264;
    operator delete(v1264);
  }
  if (v400) {
    CFRelease(v400);
  }
  if (v1270) {
    CFRelease(v1270);
  }
  if (v1269) {
    CFRelease(v1269);
  }
  if (v402 < 0) {
    operator delete(v401[0]);
  }
  sub_6C878((uint64_t)v410);
  for (uint64_t i17 = 6; i17 != -2; i17 -= 4)
  {
    char v204 = *(const void **)&v1306[i17];
    if (v204) {
      CFRelease(v204);
    }
  }
  if (v407) {
    CFRelease(v407);
  }
  if (v1303) {
    CFRelease(v1303);
  }
  if (v1302) {
    CFRelease(v1302);
  }
  v1275[0] = &v403;
  sub_15B944((void ***)v1275);
  if (v1299)
  {
    v1300 = v1299;
    operator delete(v1299);
  }
  if (v409) {
    CFRelease(v409);
  }
  if (v1305) {
    CFRelease(v1305);
  }
  if (v1304) {
    CFRelease(v1304);
  }
  if (v435 < 0) {
    operator delete(v434[0]);
  }
  *(unsigned char *)(v2 + 121) = 1;
  sub_21C8C(v410, "");
  sub_208ED4(v1275);
  sub_21C8C(&v1241, off_648B50);
  sub_21C8C(&v1207, "AU");
  sub_21C8C(&v1173, "VAD");
  sub_6D364((char *)v1310, (long long *)v410, (uint64_t)v1275, &v1241, &v1207, &v1173);
  sub_6D600(v2 + 432, (long long *)v1310);
  if (v1316 < 0) {
    operator delete(v1315);
  }
  if (v1314 < 0) {
    operator delete(v1313);
  }
  if (v1312 < 0) {
    operator delete(v1310[0]);
  }
  if (SHIBYTE(v1173.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1173.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1207.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1207.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1241.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1241.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1276) < 0) {
    operator delete(v1275[0]);
  }
  if (v411 < 0) {
    operator delete(v410[0]);
  }
}

void sub_219A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_objecta, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,const void *a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,const void *a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0xCF8]) {
    CFRelease((CFTypeRef)STACK[0xCF8]);
  }
  if (STACK[0xCF0]) {
    CFRelease((CFTypeRef)STACK[0xCF0]);
  }
  if (SLOBYTE(STACK[0xD97]) < 0) {
    operator delete((void *)STACK[0xD80]);
  }
  if (SLOBYTE(STACK[0xD7F]) < 0) {
    operator delete((void *)STACK[0xD68]);
  }
  if (SLOBYTE(STACK[0xD67]) < 0) {
    operator delete((void *)STACK[0xD50]);
  }
  if (SLOBYTE(STACK[0xD4F]) < 0) {
    operator delete((void *)STACK[0xD38]);
  }
  if (SLOBYTE(STACK[0xD37]) < 0) {
    operator delete((void *)STACK[0xD20]);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_6C878((uint64_t)&STACK[0xE80]);
  sub_6D74C((uint64_t)&STACK[0xE70]);
  sub_60394(&a42);
  sub_602D0((uint64_t)&STACK[0xE60]);
  STACK[0xD00] = (unint64_t)&a37;
  sub_15CB74((void ***)&STACK[0xD00]);
  sub_63908((const void **)&STACK[0xE58]);
  if (a34) {
    operator delete(a34);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  CFDictionaryRef v76 = a49;
  sub_6C878((uint64_t)&STACK[0xFD0]);
  sub_6D74C((uint64_t)&STACK[0xFC0]);
  sub_60394(&a54);
  sub_602D0((uint64_t)&STACK[0xFB0]);
  if (v76)
  {
    a50 = v76;
    operator delete(v76);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  sub_6C878((uint64_t)&STACK[0x1160]);
  for (uint64_t i = 16; i != -16; i -= 16)
    sub_6D74C((uint64_t)&STACK[0x1140] + i);
  sub_60394(&a66);
  sub_602D0((uint64_t)&STACK[0x1118]);
  STACK[0xD00] = (unint64_t)&a61;
  sub_15B944((void ***)&STACK[0xD00]);
  int v78 = (void *)STACK[0x1100];
  if (STACK[0x1100])
  {
    STACK[0x1108] = (unint64_t)v78;
    operator delete(v78);
  }
  sub_60394(&a72);
  uint64_t v79 = a67;
  sub_602D0((uint64_t)&STACK[0x1130]);
  STACK[0xD00] = (unint64_t)&a70;
  sub_15CB74((void ***)&STACK[0xD00]);
  sub_63908((const void **)&STACK[0x1128]);
  if (v79)
  {
    a68 = v79;
    operator delete(v79);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  sub_6C878((uint64_t)&STACK[0x12D0]);
  for (uint64_t j = 16; j != -16; j -= 16)
    sub_6D74C((uint64_t)&STACK[0x12B0] + j);
  sub_60394((const void **)&STACK[0x200]);
  sub_602D0((uint64_t)&STACK[0x1290]);
  sub_60394((const void **)&STACK[0x220]);
  sub_602D0((uint64_t)&STACK[0x12A0]);
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  sub_6C878((uint64_t)&STACK[0x1400]);
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  sub_6C878((uint64_t)&STACK[0x1570]);
  for (uint64_t k = 16; k != -16; k -= 16)
    sub_6D74C((uint64_t)&STACK[0x1550] + k);
  sub_60394((const void **)&STACK[0x270]);
  sub_602D0((uint64_t)&STACK[0x1530]);
  sub_60394((const void **)&STACK[0x290]);
  sub_602D0((uint64_t)&STACK[0x1540]);
  if (SLOBYTE(STACK[0x2AF]) < 0) {
    operator delete((void *)STACK[0x298]);
  }
  sub_6C878((uint64_t)&STACK[0x16E0]);
  for (uint64_t m = 16; m != -16; m -= 16)
    sub_6D74C((uint64_t)&STACK[0x16C0] + m);
  sub_60394((const void **)&STACK[0x2C8]);
  sub_602D0((uint64_t)&STACK[0x16A0]);
  sub_60394((const void **)&STACK[0x2E8]);
  sub_602D0((uint64_t)&STACK[0x16B0]);
  if (SLOBYTE(STACK[0x307]) < 0) {
    operator delete((void *)STACK[0x2F0]);
  }
  sub_6C878((uint64_t)&STACK[0x1840]);
  sub_6D74C((uint64_t)&STACK[0x1830]);
  sub_60394((const void **)&STACK[0x320]);
  for (uint64_t n = 16; n != -16; n -= 16)
    sub_602D0((uint64_t)&STACK[0x1810] + n);
  if (SLOBYTE(STACK[0x33F]) < 0) {
    operator delete((void *)STACK[0x328]);
  }
  sub_6C878((uint64_t)&STACK[0x19A0]);
  sub_6D74C((uint64_t)&STACK[0x1990]);
  sub_60394((const void **)&STACK[0x358]);
  for (iuint64_t i = 16; ii != -16; ii -= 16)
    sub_602D0((uint64_t)&STACK[0x1970] + ii);
  if (SLOBYTE(STACK[0x377]) < 0) {
    operator delete((void *)STACK[0x360]);
  }
  sub_6C878((uint64_t)&STACK[0x1B10]);
  for (juint64_t j = 16; jj != -16; jj -= 16)
    sub_6D74C((uint64_t)&STACK[0x1AF0] + jj);
  sub_60394((const void **)&STACK[0x390]);
  sub_602D0((uint64_t)&STACK[0x1AD0]);
  sub_60394((const void **)&STACK[0x3B0]);
  sub_602D0((uint64_t)&STACK[0x1AE0]);
  if (SLOBYTE(STACK[0x3CF]) < 0) {
    operator delete((void *)STACK[0x3B8]);
  }
  sub_6C878((uint64_t)&STACK[0x1C70]);
  sub_6D74C((uint64_t)&STACK[0x1C60]);
  sub_60394((const void **)&STACK[0x3E8]);
  for (kuint64_t k = 16; kk != -16; kk -= 16)
    sub_602D0((uint64_t)&STACK[0x1C40] + kk);
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }
  sub_6C878((uint64_t)&STACK[0x1DD0]);
  sub_6D74C((uint64_t)&STACK[0x1DC0]);
  sub_60394((const void **)&STACK[0x420]);
  for (muint64_t m = 16; mm != -16; mm -= 16)
    sub_602D0((uint64_t)&STACK[0x1DA0] + mm);
  if (SLOBYTE(STACK[0x43F]) < 0) {
    operator delete((void *)STACK[0x428]);
  }
  sub_6C878((uint64_t)&STACK[0x1F30]);
  sub_6D74C((uint64_t)&STACK[0x1F20]);
  sub_60394((const void **)&STACK[0x458]);
  for (nuint64_t n = 16; nn != -16; nn -= 16)
    sub_602D0((uint64_t)&STACK[0x1F00] + nn);
  if (SLOBYTE(STACK[0x477]) < 0) {
    operator delete((void *)STACK[0x460]);
  }
  sub_6C878((uint64_t)&STACK[0x2090]);
  sub_6D74C((uint64_t)&STACK[0x2080]);
  sub_60394((const void **)&STACK[0x490]);
  for (uint64_t i1 = 16; i1 != -16; i1 -= 16)
    sub_602D0((uint64_t)&STACK[0x2060] + i1);
  if (SLOBYTE(STACK[0x4AF]) < 0) {
    operator delete((void *)STACK[0x498]);
  }
  sub_6C878((uint64_t)&STACK[0x2200]);
  for (uint64_t i2 = 16; i2 != -16; i2 -= 16)
    sub_6D74C((uint64_t)&STACK[0x21E0] + i2);
  sub_60394((const void **)&STACK[0x4C8]);
  sub_602D0((uint64_t)&STACK[0x21C0]);
  sub_60394((const void **)&STACK[0x4E8]);
  sub_602D0((uint64_t)&STACK[0x21D0]);
  if (SLOBYTE(STACK[0x507]) < 0) {
    operator delete((void *)STACK[0x4F0]);
  }
  sub_6C878((uint64_t)&STACK[0x2360]);
  sub_6D74C((uint64_t)&STACK[0x2350]);
  sub_60394((const void **)&STACK[0x520]);
  for (uint64_t i3 = 16; i3 != -16; i3 -= 16)
    sub_602D0((uint64_t)&STACK[0x2330] + i3);
  if (SLOBYTE(STACK[0x53F]) < 0) {
    operator delete((void *)STACK[0x528]);
  }
  sub_6C878((uint64_t)&STACK[0x24C0]);
  sub_6D74C((uint64_t)&STACK[0x24B0]);
  sub_60394((const void **)&STACK[0x558]);
  for (uint64_t i4 = 16; i4 != -16; i4 -= 16)
    sub_602D0((uint64_t)&STACK[0x2490] + i4);
  if (SLOBYTE(STACK[0x577]) < 0) {
    operator delete((void *)STACK[0x560]);
  }
  sub_6C878((uint64_t)&STACK[0x2620]);
  sub_6D74C((uint64_t)&STACK[0x2610]);
  sub_60394((const void **)&STACK[0x590]);
  for (uint64_t i5 = 16; i5 != -16; i5 -= 16)
    sub_602D0((uint64_t)&STACK[0x25F0] + i5);
  if (SLOBYTE(STACK[0x5AF]) < 0) {
    operator delete((void *)STACK[0x598]);
  }
  sub_6C878((uint64_t)&STACK[0x2780]);
  sub_6D74C((uint64_t)&STACK[0x2770]);
  sub_60394((const void **)&STACK[0x5C8]);
  for (uint64_t i6 = 16; i6 != -16; i6 -= 16)
    sub_602D0((uint64_t)&STACK[0x2750] + i6);
  if (SLOBYTE(STACK[0x5E7]) < 0) {
    operator delete((void *)STACK[0x5D0]);
  }
  sub_6C878((uint64_t)&STACK[0x28E0]);
  sub_6D74C((uint64_t)&STACK[0x28D0]);
  sub_60394((const void **)&STACK[0x600]);
  for (uint64_t i7 = 16; i7 != -16; i7 -= 16)
    sub_602D0((uint64_t)&STACK[0x28B0] + i7);
  if (SLOBYTE(STACK[0x61F]) < 0) {
    operator delete((void *)STACK[0x608]);
  }
  sub_6C878((uint64_t)&STACK[0x2A70]);
  for (uint64_t i8 = 16; i8 != -16; i8 -= 16)
    sub_6D74C((uint64_t)&STACK[0x2A50] + i8);
  sub_60394((const void **)&STACK[0x648]);
  sub_602D0((uint64_t)&STACK[0x2A30]);
  STACK[0x28B0] = (unint64_t)&STACK[0x620];
  sub_15B944((void ***)&STACK[0x28B0]);
  int v97 = (void *)STACK[0x2A18];
  if (STACK[0x2A18])
  {
    STACK[0x2A20] = (unint64_t)v97;
    operator delete(v97);
  }
  sub_60394((const void **)&STACK[0x660]);
  sub_602D0((uint64_t)&STACK[0x2A40]);
  if (SLOBYTE(STACK[0x67F]) < 0) {
    operator delete((void *)STACK[0x668]);
  }
  sub_6C878((uint64_t)&STACK[0x2C00]);
  for (uint64_t i9 = 16; i9 != -16; i9 -= 16)
    sub_6D74C((uint64_t)&STACK[0x2BE0] + i9);
  sub_60394((const void **)&STACK[0x6A8]);
  sub_602D0((uint64_t)&STACK[0x2BC0]);
  STACK[0x2A50] = (unint64_t)&STACK[0x680];
  sub_15B944((void ***)&STACK[0x2A50]);
  CFDictionaryRef v99 = (void *)STACK[0x2BA8];
  if (STACK[0x2BA8])
  {
    STACK[0x2BB0] = (unint64_t)v99;
    operator delete(v99);
  }
  sub_60394((const void **)&STACK[0x6C0]);
  sub_602D0((uint64_t)&STACK[0x2BD0]);
  if (SLOBYTE(STACK[0x6DF]) < 0) {
    operator delete((void *)STACK[0x6C8]);
  }
  sub_6C878((uint64_t)&STACK[0x2D90]);
  for (uint64_t i10 = 16; i10 != -16; i10 -= 16)
    sub_6D74C((uint64_t)&STACK[0x2D70] + i10);
  sub_60394((const void **)&STACK[0x708]);
  sub_602D0((uint64_t)&STACK[0x2D50]);
  STACK[0x2BE0] = (unint64_t)&STACK[0x6E0];
  sub_15B944((void ***)&STACK[0x2BE0]);
  uint64_t v101 = (void *)STACK[0x2D38];
  if (STACK[0x2D38])
  {
    STACK[0x2D40] = (unint64_t)v101;
    operator delete(v101);
  }
  sub_60394((const void **)&STACK[0x720]);
  sub_602D0((uint64_t)&STACK[0x2D60]);
  if (SLOBYTE(STACK[0x73F]) < 0) {
    operator delete((void *)STACK[0x728]);
  }
  sub_6C878((uint64_t)&STACK[0x2F20]);
  for (uint64_t i11 = 16; i11 != -16; i11 -= 16)
    sub_6D74C((uint64_t)&STACK[0x2F00] + i11);
  sub_60394((const void **)&STACK[0x768]);
  sub_602D0((uint64_t)&STACK[0x2EE0]);
  STACK[0x2D70] = (unint64_t)&STACK[0x740];
  sub_15B944((void ***)&STACK[0x2D70]);
  CFDictionaryRef v103 = (void *)STACK[0x2EC8];
  if (STACK[0x2EC8])
  {
    STACK[0x2ED0] = (unint64_t)v103;
    operator delete(v103);
  }
  sub_60394((const void **)&STACK[0x780]);
  sub_602D0((uint64_t)&STACK[0x2EF0]);
  if (SLOBYTE(STACK[0x79F]) < 0) {
    operator delete((void *)STACK[0x788]);
  }
  sub_6C878((uint64_t)&STACK[0x30B0]);
  for (uint64_t i12 = 16; i12 != -16; i12 -= 16)
    sub_6D74C((uint64_t)&STACK[0x3090] + i12);
  sub_60394((const void **)&STACK[0x7C8]);
  sub_602D0((uint64_t)&STACK[0x3070]);
  STACK[0x2F00] = (unint64_t)&STACK[0x7A0];
  sub_15B944((void ***)&STACK[0x2F00]);
  char v105 = (void *)STACK[0x3058];
  if (STACK[0x3058])
  {
    STACK[0x3060] = (unint64_t)v105;
    operator delete(v105);
  }
  sub_60394((const void **)&STACK[0x7E0]);
  sub_602D0((uint64_t)&STACK[0x3080]);
  if (SLOBYTE(STACK[0x7FF]) < 0) {
    operator delete((void *)STACK[0x7E8]);
  }
  sub_6C878((uint64_t)&STACK[0x3240]);
  for (uint64_t i13 = 16; i13 != -16; i13 -= 16)
    sub_6D74C((uint64_t)&STACK[0x3220] + i13);
  sub_60394((const void **)&STACK[0x828]);
  sub_602D0((uint64_t)&STACK[0x3200]);
  STACK[0x3090] = (unint64_t)&STACK[0x800];
  sub_15B944((void ***)&STACK[0x3090]);
  char v107 = (void *)STACK[0x31E8];
  if (STACK[0x31E8])
  {
    STACK[0x31F0] = (unint64_t)v107;
    operator delete(v107);
  }
  sub_60394((const void **)&STACK[0x840]);
  sub_602D0((uint64_t)&STACK[0x3210]);
  if (SLOBYTE(STACK[0x85F]) < 0) {
    operator delete((void *)STACK[0x848]);
  }
  sub_6C878((uint64_t)&STACK[0x33D0]);
  for (uint64_t i14 = 16; i14 != -16; i14 -= 16)
    sub_6D74C((uint64_t)&STACK[0x33B0] + i14);
  sub_60394((const void **)&STACK[0x888]);
  sub_602D0((uint64_t)&STACK[0x3390]);
  STACK[0x3220] = (unint64_t)&STACK[0x860];
  sub_15B944((void ***)&STACK[0x3220]);
  CFDictionaryRef v109 = (void *)STACK[0x3378];
  if (STACK[0x3378])
  {
    STACK[0x3380] = (unint64_t)v109;
    operator delete(v109);
  }
  sub_60394((const void **)&STACK[0x8A0]);
  sub_602D0((uint64_t)&STACK[0x33A0]);
  if (SLOBYTE(STACK[0x8BF]) < 0) {
    operator delete((void *)STACK[0x8A8]);
  }
  sub_6C878((uint64_t)&STACK[0x908]);
  for (uint64_t i15 = 16; i15 != -16; i15 -= 16)
    sub_6D74C((uint64_t)&STACK[0x3540] + i15);
  sub_60394((const void **)&STACK[0x8E8]);
  sub_602D0((uint64_t)&STACK[0x3520]);
  STACK[0x33B0] = (unint64_t)&STACK[0x8C0];
  sub_15B944((void ***)&STACK[0x33B0]);
  char v111 = (void *)STACK[0x3508];
  if (STACK[0x3508])
  {
    STACK[0x3510] = (unint64_t)v111;
    operator delete(v111);
  }
  sub_60394((const void **)&STACK[0x900]);
  sub_602D0((uint64_t)&STACK[0x3530]);
  if (SLOBYTE(STACK[0xA4F]) < 0) {
    operator delete((void *)STACK[0xA38]);
  }
  while (v75 != &STACK[0x3560])
  {
    v75 -= 41;
    sub_6D710((uint64_t)v75);
  }
  sub_6C63C(v74);
  _Unwind_Resume(a1);
}

uint64_t sub_21E288(uint64_t a1, int *a2)
{
  sub_22210((CFStringRef *)a1, "BeamIndex");
  int valuePtr = *a2;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v4;
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_21E328(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)v1) {
    CFRelease(*(CFTypeRef *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_21E36C(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v2 = sub_32A48(16);
    if (*(unsigned char *)(v2 + 8))
    {
      uint64_t v3 = *(NSObject **)v2;
      if (*(void *)v2)
      {
        if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
        {
          int v5 = 136315394;
          uint64_t v6 = "AggregateDevice.cpp";
          __int16 v7 = 1024;
          int v8 = 182;
          _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Closing VAD Captures", (uint8_t *)&v5, 0x12u);
        }
      }
    }
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  sub_13910();
  operator new();
}

void sub_21E4AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21E4B8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = sub_32A48(16);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v4 = 136315394;
        int v5 = "AggregateDevice.cpp";
        __int16 v6 = 1024;
        int v7 = 188;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d deleting IOMonitorCloseMessage", (uint8_t *)&v4, 0x12u);
      }
    }
  }
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  operator delete();
}

void sub_21E5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    unint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 98;
      CFDictionaryRef v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    uint64_t v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v23 = v22;
      CFDictionaryRef v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 98;
        CFDictionaryRef v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      __int16 v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 98;
        CFDictionaryRef v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x21E588);
}

void sub_21E840(caulk::concurrent::message *this)
{
  *(void *)this = off_6351D0;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  caulk::concurrent::message::~message(this);
}

uint64_t sub_21E8C0()
{
  return 0;
}

uint64_t sub_21E8D0()
{
  return 0;
}

void sub_21E8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a3 + 88))(a3))
    {
      long long v5 = *(_OWORD *)(a2 + 16);
      v6[0] = *(_OWORD *)a2;
      v6[1] = v5;
      uint64_t v7 = *(void *)(a2 + 32);
      char v8 = 1;
      sub_21E95C(a1, (uint64_t)v6);
    }
  }
}

void sub_21E95C(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = *(void *)(a1 + 268);
  uint64_t v4 = sub_32A48(16);
  sub_4D60((std::string *)__p, (unsigned int *)&v33);
  if (__p[23] >= 0) {
    long long v5 = __p;
  }
  else {
    long long v5 = *(const char **)__p;
  }
  sub_6974(3, v4, (uint64_t)"", 763, (uint64_t)"", "Updating time sync device for VAD %s", v5);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1)) {
    goto LABEL_18;
  }
  if (*(unsigned char *)(a2 + 40))
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    *(_OWORD *)&__p[16] = v6;
    uint64_t v36 = *(void *)(a2 + 32);
    if (*(_DWORD *)&__p[8] != 1819304813) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 96))(a1, 1, 0);
    if ((*(unsigned int (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v7 + 120))(v7, __p, 1885762592)) {
      BOOL v8 = 0;
    }
    else {
      BOOL v8 = *(_DWORD *)&__p[8] == 1819304813;
    }
    if (!v8) {
      goto LABEL_18;
    }
  }
  uint64_t v9 = *(void *)(a1 + 208);
  char v10 = sub_21EF80((_DWORD *)(a1 + 264));
  if (!sub_327274(v9, v10))
  {
LABEL_18:
    sub_21C8C(__dst, "");
    goto LABEL_19;
  }
  if (*(char *)(a1 + 415) < 0) {
    uint64_t v11 = *(void *)(a1 + 400);
  }
  else {
    uint64_t v11 = *(unsigned __int8 *)(a1 + 415);
  }
  BOOL v23 = v11 == 0;
  CFDictionaryRef v24 = (os_log_t *)sub_32A48(16);
  os_log_t v25 = *v24;
  if (!v23)
  {
    uint64_t v26 = (uint64_t *)(a1 + 392);
    if (v25 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = a1 + 392;
      if (*(char *)(a1 + 415) < 0) {
        uint64_t v27 = *v26;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "AggregateDevice.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 967;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v27;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Selected clock is %s", __p, 0x1Cu);
    }
    if (*(char *)(a1 + 415) < 0)
    {
      sub_21E8C(__dst, *(void **)(a1 + 392), *(void *)(a1 + 400));
      goto LABEL_19;
    }
    goto LABEL_63;
  }
  uint64_t v26 = (uint64_t *)(a1 + 368);
  if (v25 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = a1 + 368;
    if (*(char *)(a1 + 391) < 0) {
      uint64_t v28 = *v26;
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = "AggregateDevice.cpp";
    *(_WORD *)&unsigned char __p[12] = 1024;
    *(_DWORD *)&__p[14] = 971;
    *(_WORD *)&__p[18] = 2080;
    *(void *)&__p[20] = v28;
    _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Selected clock is %s", __p, 0x1Cu);
  }
  if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
LABEL_63:
    *(_OWORD *)std::__fs::filesystem::path __dst = *(_OWORD *)v26;
    uint64_t v32 = v26[2];
    goto LABEL_19;
  }
  sub_21E8C(__dst, *(void **)(a1 + 368), *(void *)(a1 + 376));
LABEL_19:
  AudioObjectID v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v13 = sub_32A48(16);
  sub_4D60((std::string *)__p, (unsigned int *)&v33);
  if (__p[23] >= 0) {
    unsigned int v14 = __p;
  }
  else {
    unsigned int v14 = *(const char **)__p;
  }
  uint64_t v15 = "None";
  if (SHIBYTE(v32) < 0)
  {
    if (__dst[1]) {
      uint64_t v15 = (const char *)__dst[0];
    }
  }
  else if (HIBYTE(v32))
  {
    uint64_t v15 = (const char *)__dst;
  }
  sub_6974(3, v13, (uint64_t)"", 138, (uint64_t)"", "Setting clock for VAD '%s' to %s", v14, v15);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  strcpy(__p, "dcpabolg");
  __p[9] = 0;
  *(_WORD *)&unsigned char __p[10] = 0;
  if (!sub_55020(v12, (const AudioObjectPropertyAddress *)__p))
  {
    long long v29 = (os_log_t *)sub_32A48(13);
    char v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "AggregateDevice.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 130;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Default VAD's clock device is not settable\"", __p, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    int v20 = (void (*)(void *))&std::logic_error::~logic_error;
    std::logic_error::logic_error(exception, "Default VAD's clock device is not settable");
LABEL_69:
    __cxa_throw(exception, v21, v20);
  }
  if (v32 >= 0) {
    unint64_t v16 = __dst;
  }
  else {
    unint64_t v16 = (void **)__dst[0];
  }
  if (v16)
  {
    if (v32 >= 0) {
      CFIndex v17 = HIBYTE(v32);
    }
    else {
      CFIndex v17 = (CFIndex)__dst[1];
    }
    CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v17, 0x8000100u, 0);
    if (!v18)
    {
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      int v20 = (void (*)(void *))&std::runtime_error::~runtime_error;
      std::runtime_error::runtime_error((std::runtime_error *)exception, "Could not construct");
      goto LABEL_69;
    }
  }
  else
  {
    CFStringRef v18 = 0;
  }
  inData[0] = v18;
  inData[1] = 0;
  strcpy(__p, "dcpabolg");
  __p[9] = 0;
  *(_WORD *)&unsigned char __p[10] = 0;
  AudioObjectSetPropertyData(v12, (const AudioObjectPropertyAddress *)__p, 0, 0, 8u, inData);
  unint64_t v22 = sub_327454((unsigned __int8 *)__dst);
  if (HIDWORD(v22))
  {
    *(_DWORD *)(a1 + 312) = v22;
    *(unsigned char *)(a1 + 316) = 1;
  }
  else if (*(unsigned char *)(a1 + 316))
  {
    *(unsigned char *)(a1 + 316) = 0;
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_21EF08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  __cxa_free_exception(v25);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21EF80(_DWORD *a1)
{
  if (a1[1] == 1986224492) {
    return 1;
  }
  int v1 = a1[3];
  if (v1 == 1668576377 || v1 == 1668703084) {
    return 1;
  }
  int v4 = a1[4];
  uint64_t result = 1;
  if (v4 <= 1987077986)
  {
    if (v4 == 1768057203) {
      return result;
    }
    int v5 = 1919776355;
    goto LABEL_14;
  }
  if (v4 != 1987077987 && v4 != 1987081833)
  {
    int v5 = 1987081839;
LABEL_14:
    if (v4 != v5) {
      return 0;
    }
  }
  return result;
}

void sub_21F048(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  operator delete();
}

void sub_21F084(id a1)
{
  int v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1 || (int v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    off_65D928 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorCreate");
    off_65D930 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorInitialize");
    off_65D938 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorDispose");
    qword_65D940 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetNodeFormat");
    off_65D948 = (uint64_t (*)(void, void, void, void, void, void))dlsym(v1, "AudioIssueDetectorSetNodeFormatWithDirection");
    qword_65D950 = (uint64_t)dlsym(v1, "AudioIssueDetectorReset");
    off_65D958 = dlsym(v1, "AudioIssueDetectorAnalyzeBuffer");
    off_65D960 = (uint64_t (*)(void, void))dlsym(v1, "AudioIssueDetectorUpdateReportingSessions");
    qword_65D968 = (uint64_t)dlsym(v1, "AudioIssueDetectorRemoveNode");
    qword_65D970 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetUplinkMute");
    qword_65D978 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetDownlinkVolume");
    qword_65D980 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    off_65D988 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  uint64_t v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (v2)
  {
    uint64_t v3 = (void (*)(void))dlsym(v2, "RegisterAudioUnits_Analyzer");
    if (v3)
    {
      v3();
    }
  }
}

void sub_21F248(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = (uint64_t)a3;
  a3[1] = (uint64_t)a3;
  a3[2] = 0;
  uint64_t v6 = sub_10FBF0();
  v17[0] = (uint64_t)off_627990;
  _DWORD v17[3] = (uint64_t)v17;
  sub_10EA24(v16, v6, a2, (uint64_t)v17);
  sub_6AFD4(v17);
  sub_B680(v17, (void *)(a1 + 184), "", 275);
  sub_8E4B8(&v14, v16);
  uint64_t v7 = v15;
  if (v15 != &v14)
  {
    BOOL v8 = (uint64_t *)v17[1];
    do
    {
      if (v8 != v17)
      {
        uint64_t v9 = v7[2];
        char v10 = v8;
        while (*(void *)(v9 + 192) != v10[2])
        {
          char v10 = (uint64_t *)v10[1];
          if (v10 == v17) {
            goto LABEL_12;
          }
        }
        if (v10 != v17)
        {
          uint64_t v11 = v7[3];
          if (v11) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
          }
          AudioObjectID v12 = operator new(0x20uLL);
          void v12[2] = v9;
          v12[3] = v11;
          uint64_t v13 = *a3;
          *AudioObjectID v12 = *a3;
          v12[1] = a3;
          *(void *)(v13 + 8) = v12;
          *a3 = (uint64_t)v12;
          ++a3[2];
        }
      }
LABEL_12:
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7 != &v14);
  }
  sub_B8E4(&v14);
  sub_B8E4(v17);
  sub_8108(v16);
}

void sub_21F3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_B8E4((uint64_t *)va1);
  sub_8108((uint64_t *)va);
  sub_8108(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_21F440()
{
  return 1;
}

void sub_21F450(uint64_t a1, void *a2)
{
  *a2 = off_627990;
}

void *sub_21F470()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_627990;
  return result;
}

void sub_21F4A8()
{
}

uint64_t sub_21F4C0(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(a1 + 360));
  return (v1 >> 1) & 1;
}

void sub_21F4D0()
{
  unint64_t v0 = (os_log_t *)sub_32A48(13);
  unsigned int v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      int v4 = "AggregateDevice.cpp";
      __int16 v5 = 1024;
      int v6 = 267;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"DefinesCustomPreferredOutputChannelsForStereo returned false; calling "
        "this function is illegal.\"",
        (uint8_t *)&v3,
        0x12u);
    }
  }
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "DefinesCustomPreferredOutputChannelsForStereo returned false; calling this function is illegal.");
}

void sub_21F59C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_21F5B8()
{
  return 0;
}

void sub_21F5C0(void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  unsigned int v3 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  std::to_string(&v42, v3);
  int v4 = std::string::insert(&v42, 0, "[ id: ", 6uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v44 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if (v44 >= 0) {
    std::string::size_type v7 = HIBYTE(v44);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v44) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  snprintf(__str, 0x13uLL, "%p", a1);
  sub_21C8C(&v42, __str);
  BOOL v8 = std::string::insert(&v42, 0, "; addr: ", 8uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  int64_t v44 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v44 >= 0) {
    std::string::size_type v11 = HIBYTE(v44);
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v44) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  (*(void (**)(char *__return_ptr, void *))(*a1 + 128))(__str, a1);
  sub_21B7C(&v42, *(CFStringRef *)__str);
  AudioObjectID v12 = std::string::insert(&v42, 0, "; uid: \"", 8uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v44 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v44 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if (v44 >= 0) {
    std::string::size_type v15 = HIBYTE(v44);
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(v44) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  sub_72924((uint64_t)__str);
  uint64_t v16 = *(void *)((char *)a1 + 292);
  if ((v16 & 0xFF00000000) != 0)
  {
    sub_2417C(&v42, v16);
    CFIndex v17 = std::string::insert(&v42, 0, "; isolatedUseCaseID: \"", 0x16uLL);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    int64_t v44 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (v44 >= 0) {
      CFDictionaryRef v19 = __p;
    }
    else {
      CFDictionaryRef v19 = (void **)__p[0];
    }
    if (v44 >= 0) {
      std::string::size_type v20 = HIBYTE(v44);
    }
    else {
      std::string::size_type v20 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v19, v20);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
  }
  sub_21C8C(&v41, "{ ");
  char v21 = 0;
  uint64_t v22 = 0;
  __int16 v45 = 256;
  do
  {
    char v23 = v21;
    int v24 = __str[v22 - 2];
    unsigned int v25 = (*(uint64_t (**)(void *, void))(*a1 + 88))(a1, __str[v22 - 2]);
    if (v25)
    {
      uint64_t v26 = 0;
      if (v24) {
        uint64_t v27 = "o/";
      }
      else {
        uint64_t v27 = "i/";
      }
      do
      {
        uint64_t v28 = (const void *)(*(uint64_t (**)(void *, BOOL, uint64_t))(*a1 + 96))(a1, v24 != 0, v26);
        snprintf(__s, 0x13uLL, "%p", v28);
        sub_21C8C(&v42, __s);
        long long v29 = std::string::insert(&v42, 0, v27, 2uLL);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        int64_t v44 = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (v44 >= 0) {
          CFDictionaryRef v31 = __p;
        }
        else {
          CFDictionaryRef v31 = (void **)__p[0];
        }
        if (v44 >= 0) {
          std::string::size_type v32 = HIBYTE(v44);
        }
        else {
          std::string::size_type v32 = (std::string::size_type)__p[1];
        }
        std::string::append(&v41, (const std::string::value_type *)v31, v32);
        if (SHIBYTE(v44) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        uint64_t v26 = (v26 + 1);
        if (!v24 || v26 < v25) {
          std::string::append(&v41, ", ", 2uLL);
        }
      }
      while (v25 != v26);
    }
    char v21 = 1;
    uint64_t v22 = 1;
  }
  while ((v23 & 1) == 0);
  std::string::append(&v41, " }", 2uLL);
  uint64_t v33 = std::string::insert(&v41, 0, "\"; virt strms: ", 0xFuLL);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  int64_t v47 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __str = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (v47 >= 0) {
    uint64_t v35 = __str;
  }
  else {
    uint64_t v35 = *(char **)__str;
  }
  if (v47 >= 0) {
    std::string::size_type v36 = HIBYTE(v47);
  }
  else {
    std::string::size_type v36 = *(void *)&__str[8];
  }
  std::string::append(a2, v35, v36);
  if (SHIBYTE(v47) < 0) {
    operator delete(*(void **)__str);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, "; phys devs: { ", 0xFuLL);
  sub_B680((uint64_t *)__p, a1 + 23, "", 322);
  long long v37 = (void **)__p[1];
  if (__p[1] != __p)
  {
    while (1)
    {
      sub_4F64((uint64_t)&v42, (os_unfair_lock_t)v37[2] + 2);
      CFDictionaryRef v38 = (v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v42
          : (std::string *)v42.__r_.__value_.__r.__words[0];
      std::string::size_type v39 = (v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(v42.__r_.__value_.__r.__words[2])
          : v42.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v38, v39);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      long long v37 = (void **)v37[1];
      if (v37 == __p) {
        break;
      }
      std::string::append(a2, ", ", 2uLL);
    }
  }
  std::string::append(a2, " } ]", 4uLL);
  sub_B8E4((uint64_t *)__p);
}

void sub_21FB8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (*(char *)(a10 + 23) < 0) {
    operator delete(*(void **)a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21FCE4(void *a1, double *a2)
{
  *a2 = 0.0;
  int v4 = (void *)*a1;
  uint64_t v2 = a1 + 1;
  unsigned int v3 = v4;
  if (v4 == v2) {
    return 0;
  }
  long long v5 = (void *)v3[1];
  if (v5)
  {
    do
    {
      int v6 = v5;
      long long v5 = (void *)*v5;
    }
    while (v5);
  }
  else
  {
    std::string::size_type v7 = v3;
    do
    {
      int v6 = (void *)v7[2];
      BOOL v8 = *v6 == (void)v7;
      std::string::size_type v7 = v6;
    }
    while (!v8);
  }
  double v9 = *((double *)v3 + 5);
  while (v6 != v2)
  {
    uint64_t v10 = (void *)v6[1];
    std::string::size_type v11 = v6;
    if (v10)
    {
      do
      {
        AudioObjectID v12 = v10;
        uint64_t v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        AudioObjectID v12 = (void *)v11[2];
        BOOL v8 = *v12 == (void)v11;
        std::string::size_type v11 = v12;
      }
      while (!v8);
    }
    double v13 = *((double *)v6 + 5);
    int v6 = v12;
    if (v13 != v9) {
      return 0;
    }
  }
  *a2 = v9;
  return 1;
}

double sub_21FD84(double *a1, unint64_t a2)
{
  if (!a1) {
LABEL_7:
  }
    sub_8251C("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unint64_t v2 = *((void *)a1 + 4);
      if (v2 <= a2) {
        break;
      }
      a1 = *(double **)a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1[5];
    }
    a1 = (double *)*((void *)a1 + 1);
    if (!a1) {
      goto LABEL_7;
    }
  }
}

void sub_21FDD0(uint64_t **a1, unint64_t a2, double a3)
{
  std::string::size_type v7 = a1 + 1;
  int v6 = a1[1];
  BOOL v8 = a1 + 1;
  double v9 = a1 + 1;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        double v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v10 <= a2) {
          break;
        }
        int v6 = *v9;
        BOOL v8 = v9;
        if (!*v9) {
          goto LABEL_8;
        }
      }
      if (v10 >= a2) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        BOOL v8 = v9 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    std::string::size_type v11 = (double *)operator new(0x30uLL);
    *((void *)v11 + 4) = a2;
    v11[5] = a3;
    sub_46CA8(a1, (uint64_t)v9, v8, (uint64_t *)v11);
    if (*(double *)sub_220044(a1[1], a2) != a3)
    {
      uint64_t v12 = sub_32A48(16);
      uint64_t v13 = sub_32A48(36);
      char v14 = 0;
      uint64_t v15 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v16 = *(void *)(v12 + 8);
      while (1)
      {
        uint64_t v17 = *(int *)&buf[4 * v15];
        char v18 = v14;
        if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
          break;
        }
        char v14 = 1;
        uint64_t v15 = 1;
        if (v18) {
          goto LABEL_15;
        }
      }
      if ((v16 & v17) == 0) {
        uint64_t v12 = v13;
      }
LABEL_15:
      CFDictionaryRef v19 = *(NSObject **)v12;
      if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v20 = (double *)sub_220044(*v7, a2);
        std::to_string(&v26, *v20);
        int v21 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
        std::string::size_type v22 = v26.__r_.__value_.__r.__words[0];
        std::to_string(&__p, a3);
        char v23 = &v26;
        if (v21 < 0) {
          char v23 = (std::string *)v22;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
        __int16 v28 = 1024;
        int v29 = 115;
        __int16 v30 = 2048;
        unint64_t v31 = a2;
        __int16 v32 = 2080;
        uint64_t v33 = v23;
        __int16 v34 = 2080;
        uint64_t v35 = p_p;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d A sample rate for the device at %p already exists in this description. Existing rate: %s, new rate: %s. Ignoring the new rate.", buf, 0x30u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
      }
    }
  }
}

void sub_220020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_220044(void *a1, unint64_t a2)
{
  if (!a1) {
LABEL_7:
  }
    sub_8251C("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unint64_t v2 = a1[4];
      if (v2 <= a2) {
        break;
      }
      a1 = (void *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (void *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

uint64_t sub_220090(uint64_t a1, void **a2, long long *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, AudioObjectID a8)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = off_627708;
  uint64_t v16 = sub_2205E8((uint64_t)a3);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = v16;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 128) = a8;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  if (qword_65D920 != -1) {
    dispatch_once(&qword_65D920, &stru_627960);
  }
  if (off_65D928) {
    uint64_t v17 = off_65D928(2);
  }
  else {
    uint64_t v17 = 0;
  }
  *(void *)(a1 + 168) = v17;
  *(unsigned char *)(a1 + 176) = sub_165060();
  sub_220F38((uint64_t *)(a1 + 184), a4);
  *(void *)(a1 + 208) = a5;
  sub_46A4C((uint64_t *)(a1 + 216), (uint64_t)a6);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  sub_67D90((void *)(a1 + 240), *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  long long v18 = *a3;
  long long v19 = a3[2];
  *(_OWORD *)(a1 + 280) = a3[1];
  *(_OWORD *)(a1 + 296) = v19;
  *(_OWORD *)(a1 + 264) = v18;
  AudioObjectID v42 = a8;
  *(void *)&v41.AudioObjectPropertySelector mSelector = 0x676C6F6261706364;
  v41.AudioObjectPropertyElement mElement = 0;
  sub_CDE9C((uint64_t)&__p, &v42, &v41, 0, 0);
  if (v40)
  {
    std::string::size_type v20 = v39;
    std::string::size_type v39 = 0;
    __int16 v34 = off_63E5A8;
    CFTypeRef cf = v20;
    char v36 = 1;
    sub_49A90(&v38);
    if (cf) {
      CFRetain(cf);
    }
    sub_14E44(&v41, cf);
    if (!*(void *)&v41.mSelector)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
    sub_20C54((uint64_t)&__p, *(const __CFString **)&v41.mSelector);
    if (*(void *)&v41.mSelector) {
      CFRelease(*(CFTypeRef *)&v41.mSelector);
    }
    uint64_t v21 = sub_327454((unsigned __int8 *)&__p);
    if (SHIBYTE(v39) < 0) {
      operator delete(__p);
    }
    sub_49A90(&v34);
    uint64_t v22 = v21 & 0x100000000;
    uint64_t v23 = v21 & 0xFFFFFF00;
    uint64_t v24 = v21;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v22 = 0;
  }
  *(void *)(a1 + 312) = v23 | v24 | v22;
  *(unsigned char *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  if (sub_165060())
  {
    uint64_t v27 = (void *)*a6;
    std::string v26 = a6 + 1;
    unsigned int v25 = v27;
    if (v27 != v26)
    {
      while ((*((_DWORD *)v25 + 7) & 0xFBFFFFFF) != 0x6870696E)
      {
        __int16 v28 = (void *)v25[1];
        if (v28)
        {
          do
          {
            int v29 = v28;
            __int16 v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            int v29 = (void *)v25[2];
            BOOL v30 = *v29 == (void)v25;
            unsigned int v25 = v29;
          }
          while (!v30);
        }
        unsigned int v25 = v29;
        if (v29 == v26)
        {
          unsigned int v25 = v26;
          break;
        }
      }
    }
    BOOL v31 = v25 == v26;
  }
  else
  {
    BOOL v31 = 0;
  }
  *(unsigned char *)(a1 + 364) = v31;
  *(unsigned char *)(a1 + 365) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  if (*(unsigned char *)(a7 + 24)) {
    std::string::operator=((std::string *)(a1 + 392), (const std::string *)a7);
  }
  if (*(unsigned char *)(a7 + 56)) {
    std::string::operator=((std::string *)(a1 + 368), (const std::string *)(a7 + 32));
  }
  return a1;
}

void sub_22043C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, caulk::concurrent::messenger **a12, uint64_t *a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,const void *a24)
{
  __cxa_free_exception(v27);
  sub_6393C(&a24);
  if (a16) {
    sub_49A90(&a14);
  }
  sub_638B4((void ***)&__p);
  sub_463E0(*(void **)(v24 + 224));
  sub_8108(a10);
  sub_221018(a11);
  sub_221094(v26, 0);
  sub_22112C(a12);
  uint64_t v29 = *a13;
  *a13 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *(void *)(v24 + 96);
  *(void *)(v24 + 96) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *v25;
  *unsigned int v25 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  sub_FE920(v24);
  _Unwind_Resume(a1);
}

void sub_2205CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v12 = *a11;
  if (*a11)
  {
    *(void *)(v11 + 152) = v12;
    operator delete(v12);
  }
  JUMPOUT(0x220514);
}

uint64_t sub_2205E8(uint64_t a1)
{
  if (sub_21EF80((_DWORD *)a1))
  {
    sub_208FFC(1);
    int v3 = v2;
    sub_208FFC(2);
    unsigned int v5 = v4;
    sub_208FFC(3);
    int v7 = v6;
    uint64_t v8 = sub_32A48(16);
    if (*(unsigned char *)(v8 + 8))
    {
      double v9 = *(NSObject **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v62 = "AggregateDevice.cpp";
          __int16 v63 = 1024;
          int v64 = 569;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Configuring stream capture settings for call-like configuration", buf, 0x12u);
        }
      }
    }
    uint64_t v10 = sub_32A48(16);
    if (*(unsigned char *)(v10 + 8))
    {
      uint64_t v11 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = "is NOT";
          uint64_t v62 = "AggregateDevice.cpp";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          if (v3) {
            uint64_t v12 = "is";
          }
          __int16 v63 = 1024;
          int v64 = 571;
          __int16 v65 = 2080;
          CFDictionaryRef v66 = v12;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d in-call VA stream capture %s allowed", buf, 0x1Cu);
        }
      }
    }
    uint64_t v13 = 14;
    if (!*(unsigned char *)(a1 + 36)) {
      uint64_t v13 = 10;
    }
    if (v3) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = sub_32A48(16);
    if (*(unsigned char *)(v15 + 8))
    {
      uint64_t v16 = *(NSObject **)v15;
      if (*(void *)v15)
      {
        if (os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = "is NOT";
          uint64_t v62 = "AggregateDevice.cpp";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          if (v5) {
            uint64_t v17 = "is";
          }
          __int16 v63 = 1024;
          int v64 = 581;
          __int16 v65 = 2080;
          CFDictionaryRef v66 = v17;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d in-call HAL stream capture %s allowed", buf, 0x1Cu);
        }
      }
    }
    uint64_t v18 = sub_32A48(16);
    uint64_t v19 = v14 | v5;
    if (*(unsigned char *)(v18 + 8))
    {
      std::string::size_type v20 = *(NSObject **)v18;
      if (*(void *)v18)
      {
        if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v21 = "is NOT";
          uint64_t v62 = "AggregateDevice.cpp";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          if (v7) {
            uint64_t v21 = "is";
          }
          __int16 v63 = 1024;
          int v64 = 587;
          __int16 v65 = 2080;
          CFDictionaryRef v66 = v21;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d ANC capture %s allowed", buf, 0x1Cu);
        }
      }
    }
    if (v7) {
      uint64_t v22 = v19 | 0x10;
    }
    else {
      uint64_t v22 = v19;
    }
    goto LABEL_88;
  }
  int v23 = *(_DWORD *)(a1 + 16);
  if (v23 != 1986556788 && v23 != 1987211117 && v23 != 1987208039)
  {
    if (*(unsigned char *)a1 || *(_DWORD *)(a1 + 4) == 1986224492)
    {
      uint64_t v22 = 0;
    }
    else
    {
      int v47 = *(_DWORD *)(a1 + 12);
      BOOL v48 = sub_1642B8();
      if (v47 == 1667785079) {
        uint64_t v49 = "EnableFlickerSensorHALMediaMonitor";
      }
      else {
        uint64_t v49 = "EnableHALMediaMonitor";
      }
      int v50 = sub_1645B0(v49);
      int v51 = v50;
      if (v48) {
        uint64_t v22 = 6;
      }
      else {
        uint64_t v22 = 0;
      }
      if ((v50 - 1) <= 3) {
        v22 |= qword_4E8790[v50 - 1];
      }
      uint64_t v52 = sub_32A48(16);
      if (*(unsigned char *)(v52 + 8))
      {
        char v53 = *(NSObject **)v52;
        if (*(void *)v52)
        {
          if (os_log_type_enabled(*(os_log_t *)v52, OS_LOG_TYPE_DEBUG))
          {
            CFDictionaryRef v54 = v48 ? "is" : "is NOT";
            sub_4D60(&__p, (unsigned int *)(a1 + 4));
            uint64_t v55 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v62 = "AggregateDevice.cpp";
            __int16 v63 = 1024;
            int v64 = 646;
            __int16 v65 = 2080;
            CFDictionaryRef v66 = v54;
            __int16 v67 = 2080;
            v68[0] = v55;
            _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEBUG, "%25s:%-5d general VA media capture %s allowed for vad '%s'", buf, 0x26u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      uint64_t v56 = sub_32A48(16);
      if (*(unsigned char *)(v56 + 8))
      {
        int v57 = *(NSObject **)v56;
        if (*(void *)v56)
        {
          if (os_log_type_enabled(*(os_log_t *)v56, OS_LOG_TYPE_DEBUG))
          {
            char v58 = v51 ? "is" : "is NOT";
            sub_4D60(&__p, (unsigned int *)(a1 + 4));
            CFDictionaryRef v59 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v62 = "AggregateDevice.cpp";
            __int16 v63 = 1024;
            int v64 = 648;
            __int16 v65 = 2080;
            CFDictionaryRef v66 = v58;
            __int16 v67 = 2080;
            v68[0] = v59;
            _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_DEBUG, "%25s:%-5d general HAL media capture %s allowed for vad '%s'", buf, 0x26u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
    goto LABEL_88;
  }
  if (MGGetBoolAnswer() && sub_1642B8())
  {
    int v26 = 1;
  }
  else
  {
    CFPreferencesAppSynchronize(@"com.apple.audio.virtualaudio");
    *(_DWORD *)AudioObjectPropertyAddress buf = 0;
    BOOL v27 = sub_1614F4(@"CaptureBorealis", @"com.apple.audio.virtualaudio", buf);
    int v28 = *(_DWORD *)buf;
    if (*(_DWORD *)buf) {
      int v26 = v27;
    }
    else {
      int v26 = 0;
    }
    if (v27)
    {
      uint64_t v29 = (os_log_t *)sub_32A48(13);
      uint64_t v30 = *v29;
      if (*v29)
      {
        if (os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = "Dis";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          uint64_t v62 = "RunTimeDefaults.cpp";
          __int16 v63 = 1024;
          int v64 = 1497;
          CFDictionaryRef v66 = "CaptureBorealis";
          __int16 v65 = 2080;
          if (v26) {
            uint64_t v31 = "En";
          }
          __int16 v67 = 1024;
          LODWORD(v68[0]) = v28;
          WORD2(v68[0]) = 2080;
          *(void *)((char *)v68 + 6) = v31;
          _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %d. %sabling VA Borealis capture.", buf, 0x2Cu);
        }
      }
    }
  }
  if (!MGGetBoolAnswer())
  {
    BOOL v32 = sub_164474();
    if (v26) {
      uint64_t v22 = 6;
    }
    else {
      uint64_t v22 = 0;
    }
    if (!v32) {
      goto LABEL_75;
    }
LABEL_61:
    if (MGGetBoolAnswer() && (int)sub_1645B0("EnableHALMediaMonitor") >= 1) {
      int v33 = sub_1645B0("EnableHALMediaMonitor");
    }
    else {
      int v33 = sub_164474();
    }
    if ((v33 - 1) <= 3) {
      v22 |= qword_4E8790[v33 - 1];
    }
    int v34 = 1;
    goto LABEL_76;
  }
  if ((int)sub_1645B0("EnableHALMediaMonitor") >= 1)
  {
    if (v26) {
      uint64_t v22 = 6;
    }
    else {
      uint64_t v22 = 0;
    }
    goto LABEL_61;
  }
  BOOL v35 = sub_164474();
  if (v26) {
    uint64_t v22 = 6;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v35) {
    goto LABEL_61;
  }
LABEL_75:
  int v34 = 0;
LABEL_76:
  uint64_t v36 = sub_32A48(16);
  if (*(unsigned char *)(v36 + 8))
  {
    long long v37 = *(NSObject **)v36;
    if (*(void *)v36)
    {
      if (os_log_type_enabled(*(os_log_t *)v36, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v38 = "is NOT";
        uint64_t v62 = "AggregateDevice.cpp";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if (v26) {
          uint64_t v38 = "is";
        }
        __int16 v63 = 1024;
        int v64 = 618;
        __int16 v65 = 2080;
        CFDictionaryRef v66 = v38;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d VA Borealis capture %s allowed", buf, 0x1Cu);
      }
    }
  }
  uint64_t v39 = sub_32A48(16);
  if (*(unsigned char *)(v39 + 8))
  {
    char v40 = *(NSObject **)v39;
    if (*(void *)v39)
    {
      if (os_log_type_enabled(*(os_log_t *)v39, OS_LOG_TYPE_DEBUG))
      {
        AudioObjectPropertyAddress v41 = "is NOT";
        uint64_t v62 = "AggregateDevice.cpp";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if (v34) {
          AudioObjectPropertyAddress v41 = "is";
        }
        __int16 v63 = 1024;
        int v64 = 619;
        __int16 v65 = 2080;
        CFDictionaryRef v66 = v41;
        _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_DEBUG, "%25s:%-5d HAL Borealis capture %s allowed", buf, 0x1Cu);
      }
    }
  }
LABEL_88:
  if (*(_DWORD *)(a1 + 12) == 1667329133)
  {
    uint64_t v42 = sub_32A48(16);
    if (*(unsigned char *)(v42 + 8))
    {
      std::string v43 = *(NSObject **)v42;
      if (*(void *)v42)
      {
        if (os_log_type_enabled(*(os_log_t *)v42, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v62 = "AggregateDevice.cpp";
          __int16 v63 = 1024;
          int v64 = 657;
          _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alarm VA media capture is allowed", buf, 0x12u);
        }
      }
    }
    uint64_t v44 = sub_32A48(16);
    v22 |= 7uLL;
    if (*(unsigned char *)(v44 + 8))
    {
      __int16 v45 = *(NSObject **)v44;
      if (*(void *)v44)
      {
        if (os_log_type_enabled(*(os_log_t *)v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v62 = "AggregateDevice.cpp";
          __int16 v63 = 1024;
          int v64 = 658;
          _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_DEBUG, "%25s:%-5d Alarm HAL media capture is allowed", buf, 0x12u);
        }
      }
    }
  }
  return v22;
}

void sub_220F38(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    sub_8C0F4(&v9, *(void *)(i + 16));
    uint64_t v6 = v9;
    unsigned int v5 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int v7 = operator new(0x20uLL);
    v7[2] = v6;
    v7[3] = v5;
    uint64_t v8 = *a1;
    *int v7 = *a1;
    v7[1] = a1;
    *(void *)(v8 + 8) = v7;
    *a1 = (uint64_t)v7;
    ++a1[2];
    if (v5) {
      sub_4636C(v5);
    }
  }
}

void sub_220FE8(_Unwind_Exception *a1)
{
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    sub_4636C(v2);
  }
  sub_8108(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_221018(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (qword_65D920 != -1) {
    dispatch_once(&qword_65D920, &stru_627960);
  }
  if (off_65D938) {
    off_65D938(v2);
  }
  int v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_221094(void *result, uint64_t a2)
{
  uint64_t v2 = (void *)*result;
  void *result = a2;
  if (v2)
  {
    int v3 = (const void *)v2[22];
    if (v3) {
      CFRelease(v3);
    }
    sub_A8D98((uint64_t)(v2 + 14));
    unsigned int v4 = (void *)v2[12];
    if (v4)
    {
      free(v4);
      v2[12] = 0;
    }
    unsigned int v5 = (void *)v2[7];
    if (v5)
    {
      v2[8] = v5;
      operator delete(v5);
    }
    sub_D7EC0((uint64_t)(v2 + 2));
    operator delete();
  }
  return result;
}

caulk::concurrent::messenger *sub_22112C(caulk::concurrent::messenger **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    caulk::concurrent::messenger::~messenger(result);
    operator delete();
  }
  return result;
}

uint64_t sub_22117C(uint64_t a1)
{
  *(void *)a1 = off_627708;
  if (*(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  uint64_t v6 = (void **)(a1 + 240);
  sub_638B4(&v6);
  sub_463E0(*(void **)(a1 + 224));
  sub_8108((uint64_t *)(a1 + 184));
  sub_221018(a1 + 144);
  sub_221094((void *)(a1 + 136), 0);
  sub_22112C((caulk::concurrent::messenger **)(a1 + 120));
  uint64_t v2 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return sub_FE920(a1);
}

BOOL sub_2212D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 320)) {
    return 0;
  }
  unsigned int v1 = *(_opaque_pthread_t **)(a1 + 328);
  uint64_t v2 = pthread_self();
  return pthread_equal(v1, v2) != 0;
}

uint64_t sub_221318(void *a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 552))(a1);
  uint64_t v6 = (uint64_t *)a1[30];
  unsigned int v5 = (uint64_t *)a1[31];
  while (v6 != v5)
  {
    uint64_t v7 = *v6;
    v6 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, a2);
  }
  return result;
}

BOOL sub_2213AC(uint64_t a1)
{
  unsigned int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1);
  if (v2)
  {
    unsigned int v3 = v2;
    uint64_t v4 = 0;
    BOOL v5 = 1;
    do
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, 1, v4);
      if (v6 && !(*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)v6 + 112))(v6, v10))
      {
        if (v11 > 1836343850)
        {
          if (v11 == 1836343851 || v11 == 1836344107) {
            return v5;
          }
        }
        else if (v11 == 1667443507 || v11 == 1667509043)
        {
          return v5;
        }
      }
      uint64_t v4 = (v4 + 1);
      BOOL v5 = v4 < v3;
    }
    while (v3 != v4);
  }
  return 0;
}

char *sub_2214F8(uint64_t a1, char *__src, char *a3)
{
  unsigned int v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v8)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      sub_60548();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v8 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v31 = v7;
    if (v18)
    {
      std::string::size_type v20 = (char *)sub_106EC(v18);
    }
    else
    {
      std::string::size_type v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v21 = &v20[8 * v16];
    std::string __p = v20;
    int v28 = v21;
    uint64_t v30 = &v20[8 * v19];
    if (v16 == v19)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v23 = 1;
        }
        else {
          unint64_t v23 = v15 >> 2;
        }
        uint64_t v24 = (char *)sub_106EC(v23);
        uint64_t v21 = &v24[8 * (v23 >> 2)];
        std::string __p = v24;
        int v28 = v21;
        uint64_t v30 = &v24[8 * v25];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        unint64_t v22 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v22 = v16 + 1;
        }
        v21 -= 8 * (v22 >> 1);
        int v28 = v21;
      }
    }
    *(void *)uint64_t v21 = *(void *)v3;
    uint64_t v29 = v21 + 8;
    uint64_t v4 = sub_EDA14((void **)a1, (uint64_t)&__p, v4);
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)long long __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_2216D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2216EC(uint64_t a1)
{
  unsigned int v1 = (unsigned int *)(a1 + 16);
  if (atomic_load((unsigned int *)(a1 + 16)))
  {
    sub_2739CC(a1);
    unsigned int v4 = atomic_load(v1);
    if (!v4 && (atomic_exchange((atomic_uchar *volatile)(a1 + 64), 0) & 1) != 0)
    {
      uint64_t v5 = *(void *)(a1 + 72);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
          uint64_t v5 = *(void *)(a1 + 72);
        }
        uint64_t v7 = *(void *)(a1 + 80);
        *(void *)(a1 + 72) = 0;
        uint64_t v8 = *(void *)(v7 + 24);
        *(void *)(v7 + 24) = v5;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
        uint64_t v9 = *(caulk::concurrent::message **)(a1 + 80);
        sub_54694();
        caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, v9);
      }
    }
  }
}

void sub_2217D0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 64));
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      unsigned int v7 = sub_46F1D8(v6, a4);
      if (v7)
      {
        unsigned int v8 = v7;
        uint64_t v9 = (os_log_t *)sub_32A48(16);
        uint64_t v10 = *v9;
        if (*v9)
        {
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
          {
            sub_2417C(__p, v8);
            int v11 = v15 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            uint64_t v17 = "HapticDebugIODelegate.cpp";
            __int16 v18 = 1024;
            int v19 = 145;
            __int16 v20 = 1024;
            unsigned int v21 = v8;
            __int16 v22 = 2080;
            unint64_t v23 = v11;
            _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d error writing buffer to file: %d %s", buf, 0x22u);
            if (v15 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
    }
  }
  while (atomic_load((unsigned int *)(a1 + 68)))
  {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 68), 0xFFFFFFFF);
    sub_2216EC(a1);
  }
}

uint64_t sub_22192C(uint64_t result)
{
  return result;
}

void sub_22193C(void *a1)
{
  sub_221974(a1);

  operator delete();
}

void *sub_221974(void *a1)
{
  unsigned int v2 = (os_log_t *)sub_32A48(16);
  unsigned int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    unsigned int v8 = "HapticDebugIODelegate.cpp";
    __int16 v9 = 1024;
    int v10 = 57;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_INFO, "%25s:%-5d Deleting haptic debug delegate", (uint8_t *)&v7, 0x12u);
  }
  uint64_t v4 = a1[10];
  a1[10] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[9];
  a1[9] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_45F50(a1 + 5);
  *a1 = off_63C9A0;
  sub_86524(a1 + 3);
  sub_864D4(a1 + 1);
  return a1;
}

void sub_221AD0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_221AE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    goto LABEL_6;
  }
  unsigned int v3 = (os_log_t *)sub_32A48(16);
  uint64_t v4 = *v3;
  if (*v3)
  {
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      uint64_t v6 = "HapticDebugIODelegate.cpp";
      __int16 v7 = 1024;
      int v8 = 203;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HapticDebugDelegate not instantiated yet", (uint8_t *)&v5, 0x12u);
    }
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
LABEL_6:
  }
    atomic_fetch_add((atomic_uint *volatile)(v1 + 68), 1u);
}

void sub_221BBC(uint64_t a1)
{
  sub_221C38((void **)(a1 + 32));
  *(void *)a1 = off_63C9A0;
  sub_86524((uint64_t *)(a1 + 24));
  sub_864D4((uint64_t *)(a1 + 8));

  operator delete();
}

void *sub_221C38(void **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_221974(result);
    operator delete();
  }
  return result;
}

uint64_t sub_221C88(uint64_t a1)
{
  *(void *)a1 = off_63C9A0;
  sub_86524((uint64_t *)(a1 + 24));
  sub_864D4((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t sub_221CE4(uint64_t a1)
{
  unsigned int v2 = (os_log_t *)sub_32A48(16);
  unsigned int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = "HapticDebugIOMonitor.h";
    __int16 v7 = 1024;
    int v8 = 61;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Closing Haptic IO Monitor", (uint8_t *)&v5, 0x12u);
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    *(void *)(a1 + 24) = 0;
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_221DD4(caulk::concurrent::message *this)
{
  *(void *)this = off_627A38;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_221E68(caulk::concurrent::message *this)
{
  *(void *)this = off_627A38;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  caulk::concurrent::message::~message(this);
}

uint64_t sub_221EE8(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a7)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    __int16 v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "HapticDebugIODelegate.cpp";
      __int16 v13 = 1024;
      int v14 = 130;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_2217D0(a7, a2, (uint64_t)a3, a3);
  return 0;
}

void sub_221FF4(_Unwind_Exception *exception_object)
{
}

void sub_222010(AudioObjectID a1, unsigned int **a2)
{
  uint64_t v4 = sub_32A48(26);
  if (*(unsigned char *)(v4 + 8))
  {
    int v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        sub_82188((std::string *)&v110, *a2, a2[1]);
        uint64_t v6 = v110.__m_.__opaque[15] >= 0 ? &v110 : (std::mutex *)v110.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugIODelegate.cpp";
        __int16 v100 = 1024;
        int v101 = 30;
        __int16 v102 = 2080;
        *(void *)CFDictionaryRef v103 = v6;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting input data sources: [%s]", (uint8_t *)&buf, 0x1Cu);
        if (v110.__m_.__opaque[15] < 0) {
          operator delete((void *)v110.__m_.__sig);
        }
      }
    }
  }
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x696E707473737263;
  inAddress.AudioObjectPropertyElement mElement = 0;
  uint64_t v7 = sub_32A48(13);
  if (*(unsigned char *)(v7 + 8))
  {
    int v8 = *(NSObject **)v7;
    if (*(void *)v7)
    {
      if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
      {
        v109.__cv_.__uint64_t sig = *(void *)&inAddress.mSelector;
        *(_DWORD *)v109.__cv_.__opaque = inAddress.mElement;
        sub_16C9C4((uint64_t)&v110, (unsigned int *)&v109);
        __int16 v9 = v110.__m_.__opaque[15] >= 0 ? &v110 : (std::mutex *)v110.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v100 = 1024;
        int v101 = 166;
        __int16 v102 = 2080;
        *(void *)CFDictionaryRef v103 = v9;
        *(_WORD *)&v103[8] = 1024;
        *(_DWORD *)&v103[10] = a1;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v110.__m_.__opaque[15] < 0) {
          operator delete((void *)v110.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress v96 = inAddress;
  AudioObjectID v95 = a1;
  int v97 = 0;
  uint64_t v98 = 0;
  sub_222D68((uint64_t)&v110, (uint64_t)&v95);
  if (*(_DWORD *)&v110.__m_.__opaque[16]) {
    goto LABEL_18;
  }
  uint64_t v92 = 0;
  char v93 = 0;
  uint64_t v94 = 0;
  sub_46B38(&v92, (const void *)v110.__m_.__sig, *(uint64_t *)v110.__m_.__opaque, (*(void *)v110.__m_.__opaque - v110.__m_.__sig) >> 2);
  CFDictionaryRef v89 = 0;
  CFDictionaryRef v90 = 0;
  uint64_t v91 = 0;
  sub_46B38(&v89, *a2, (uint64_t)a2[1], a2[1] - *a2);
  unsigned int v21 = v92;
  __int16 v22 = v89;
  if (v93 - v92 != v90 - v89)
  {
    BOOL v23 = 0;
    if (!v89) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  BOOL v23 = memcmp(v92, v89, v93 - v92) == 0;
  if (v22)
  {
LABEL_43:
    CFDictionaryRef v90 = v22;
    operator delete(v22);
  }
LABEL_44:
  if (!v21)
  {
    if (v23) {
      goto LABEL_48;
    }
LABEL_18:
    uint64_t v10 = sub_32A48(13);
    if (*(unsigned char *)(v10 + 8))
    {
      int v11 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          AudioObjectPropertyAddress __p = inAddress;
          sub_16C9C4((uint64_t)&v109, &__p.mSelector);
          uint64_t v12 = v109.__cv_.__opaque[15] >= 0 ? &v109 : (std::condition_variable *)v109.__cv_.__sig;
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v100 = 1024;
          int v101 = 199;
          __int16 v102 = 2080;
          *(void *)CFDictionaryRef v103 = v12;
          *(_WORD *)&v103[8] = 1024;
          *(_DWORD *)&v103[10] = a1;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v109.__cv_.__opaque[15] < 0) {
            operator delete((void *)v109.__cv_.__sig);
          }
        }
      }
    }
    AudioObjectPropertyAddress buf = inAddress;
    unsigned int v13 = sub_86998(a1, &buf, *a2, (int)a2[1]);
    if (!v13)
    {
      LOBYTE(v16) = 1;
      goto LABEL_53;
    }
    unsigned int v14 = v13;
    char v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (!*v15) {
      goto LABEL_53;
    }
    if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v109, v14);
      int v17 = v109.__cv_.__opaque[15];
      uint64_t sig = v109.__cv_.__sig;
      int v86 = *(void **)&inAddress.mSelector;
      LODWORD(v87) = inAddress.mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v86);
      int v19 = &v109;
      if (v17 < 0) {
        int v19 = (std::condition_variable *)sig;
      }
      if (v78 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = *(AudioObjectPropertyAddress **)&__p.mSelector;
      }
      buf.AudioObjectPropertySelector mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v100 = 1024;
      int v101 = 207;
      __int16 v102 = 1024;
      *(_DWORD *)CFDictionaryRef v103 = v14;
      *(_WORD *)&v103[4] = 2080;
      *(void *)&v103[6] = v19;
      *(_WORD *)&v103[14] = 2080;
      *(void *)&v103[16] = p_p;
      *(_WORD *)&v103[24] = 1024;
      *(_DWORD *)&v103[26] = a1;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
      if (v78 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
      if (v109.__cv_.__opaque[15] < 0) {
        operator delete((void *)v109.__cv_.__sig);
      }
    }
    goto LABEL_52;
  }
  char v93 = v21;
  operator delete(v21);
  if (!v23) {
    goto LABEL_18;
  }
LABEL_48:
  uint64_t v24 = sub_32A48(13);
  if (*(unsigned char *)(v24 + 8))
  {
    uint64_t v16 = *(NSObject **)v24;
    if (!*(void *)v24) {
      goto LABEL_53;
    }
    if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
    {
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v100 = 1024;
      int v101 = 191;
      __int16 v102 = 1024;
      *(_DWORD *)CFDictionaryRef v103 = a1;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
    }
  }
LABEL_52:
  LOBYTE(v16) = 0;
LABEL_53:
  if (v110.__m_.__sig) {
    operator delete((void *)v110.__m_.__sig);
  }
  if (v16)
  {
    sub_222D68((uint64_t)&v86, (uint64_t)&v95);
    if (v88)
    {
LABEL_57:
      memset(v110.__m_.__opaque, 0, sizeof(v110.__m_.__opaque));
      v110.__m_.__uint64_t sig = 850045863;
      memset(v109.__cv_.__opaque, 0, sizeof(v109.__cv_.__opaque));
      v109.__cv_.__uint64_t sig = 1018212795;
      char v79 = 0;
      sub_662FC(&__p, a1, &inAddress, (uint64_t)&v109, (uint64_t)&v110, (uint64_t)&v79);
      uint64_t v25 = 2000;
      while (1)
      {
        sub_222D68((uint64_t)&v73, (uint64_t)&v95);
        int v26 = v73;
        if (v76) {
          goto LABEL_59;
        }
        CFDictionaryRef v70 = 0;
        __int16 v71 = 0;
        uint64_t v72 = 0;
        uint64_t v28 = v74;
        unint64_t v29 = (v74 - (uint64_t)v73) >> 2;
        sub_46B38(&v70, v73, v74, v29);
        __int16 v67 = 0;
        CFDictionaryRef v68 = 0;
        uint64_t v69 = 0;
        sub_46B38(&v67, *a2, (uint64_t)a2[1], a2[1] - *a2);
        uint64_t v30 = v70;
        uint64_t v31 = v67;
        if (v71 - v70 != v68 - v67) {
          break;
        }
        BOOL v32 = memcmp(v70, v67, v71 - v70) == 0;
        if (v31) {
          goto LABEL_65;
        }
LABEL_66:
        if (v30)
        {
          __int16 v71 = v30;
          operator delete(v30);
        }
        if (!v32)
        {
          if (v25 <= 0)
          {
            long long v37 = (os_log_t *)sub_32A48(13);
            uint64_t v38 = *v37;
            if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
            {
              AudioObjectPropertyAddress v64 = inAddress;
              sub_16C9C4((uint64_t)&__lk, &v64.mSelector);
              if (v66 >= 0) {
                p_luint64_t k = &__lk;
              }
              else {
                p_luint64_t k = __lk.__m_;
              }
              uint64_t v62 = 0;
              uint64_t v63 = 0;
              CFDictionaryRef v61 = 0;
              sub_46B38(&v61, v26, v28, v29);
              char v58 = 0;
              CFDictionaryRef v59 = 0;
              uint64_t v60 = 0;
              sub_46B38(&v58, *a2, (uint64_t)a2[1], a2[1] - *a2);
              char v40 = v61;
              AudioObjectPropertyAddress v41 = v58;
              BOOL v42 = v62 - v61 == v59 - v58 && memcmp(v61, v58, v62 - v61) == 0;
              buf.AudioObjectPropertySelector mSelector = 136316930;
              *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
              __int16 v100 = 1024;
              int v101 = 248;
              __int16 v102 = 2080;
              *(void *)CFDictionaryRef v103 = "set";
              *(_WORD *)&v103[8] = 2080;
              *(void *)&v103[10] = p_lk;
              *(_WORD *)&unsigned char v103[18] = 2080;
              *(void *)&unsigned char v103[20] = "set";
              *(_WORD *)&v103[28] = 1024;
              BOOL v104 = v42;
              __int16 v105 = 1024;
              int v106 = 0;
              __int16 v107 = 1024;
              AudioObjectID v108 = a1;
              _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
              if (v41)
              {
                CFDictionaryRef v59 = v41;
                operator delete(v41);
              }
              if (v40)
              {
                uint64_t v62 = v40;
                operator delete(v40);
              }
              if (v66 < 0) {
                operator delete(__lk.__m_);
              }
            }
LABEL_59:
            int v27 = 1;
            if (!v26) {
              goto LABEL_71;
            }
LABEL_70:
            operator delete(v26);
            goto LABEL_71;
          }
          v33.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v34 = sub_32A48(13);
          if (*(unsigned char *)(v34 + 8))
          {
            BOOL v35 = *(NSObject **)v34;
            if (*(void *)v34)
            {
              if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
              {
                buf.AudioObjectPropertySelector mSelector = 136315906;
                *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                __int16 v100 = 1024;
                int v101 = 257;
                __int16 v102 = 2080;
                *(void *)CFDictionaryRef v103 = "with timeout";
                *(_WORD *)&v103[8] = 1024;
                *(_DWORD *)&v103[10] = a1;
                _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
              }
            }
          }
          sub_3B7EC();
          *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_64CC40;
          LOBYTE(buf.mElement) = 0;
          LOBYTE(buf.mElement) = sub_1D4024();
          __lk.__m_ = &v110;
          __lk.__owns_ = 1;
          std::mutex::lock(&v110);
          v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          if (v79)
          {
LABEL_79:
            if (__lk.__owns_) {
              std::mutex::unlock(__lk.__m_);
            }
            sub_66410((uint64_t)&buf);
            int v27 = 0;
            v25 += (std::chrono::system_clock::now().__d_.__rep_ - v33.__d_.__rep_) / -1000;
            if (!v26) {
              goto LABEL_71;
            }
            goto LABEL_70;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = v36.__d_.__rep_ + 1000000 * v25;
          while (2)
          {
            if (v43 <= std::chrono::steady_clock::now().__d_.__rep_) {
              goto LABEL_79;
            }
            v44.__d_.__rep_ = v43 - std::chrono::steady_clock::now().__d_.__rep_;
            if (v44.__d_.__rep_ >= 1)
            {
              std::chrono::steady_clock::now();
              v45.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
              if (!v45.__d_.__rep_)
              {
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 0;
                goto LABEL_101;
              }
              if (v45.__d_.__rep_ < 1)
              {
                if ((unint64_t)v45.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
                  goto LABEL_100;
                }
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 0x8000000000000000;
              }
              else
              {
                if ((unint64_t)v45.__d_.__rep_ > 0x20C49BA5E353F7)
                {
                  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 0x7FFFFFFFFFFFFFFFLL;
                  goto LABEL_101;
                }
LABEL_100:
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 1000 * v45.__d_.__rep_;
LABEL_101:
                if (v46 > (v44.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                {
                  v47.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
                  goto LABEL_104;
                }
              }
              v47.__d_.__rep_ = v46 + v44.__d_.__rep_;
LABEL_104:
              std::condition_variable::__do_timed_wait(&v109, &__lk, v47);
              std::chrono::steady_clock::now();
            }
            if (std::chrono::steady_clock::now().__d_.__rep_ >= v43 || v79) {
              goto LABEL_79;
            }
            continue;
          }
        }
        int v27 = 12;
        if (v26) {
          goto LABEL_70;
        }
LABEL_71:
        if (v27)
        {
          if (v27 == 12)
          {
            uint64_t v48 = sub_32A48(13);
            if (*(unsigned char *)(v48 + 8))
            {
              uint64_t v49 = *(NSObject **)v48;
              if (*(void *)v48)
              {
                if (os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG))
                {
                  __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)&inAddress.mSelector;
                  *(_DWORD *)&__lk.__owns_ = inAddress.mElement;
                  sub_16C9C4((uint64_t)&v73, (unsigned int *)&__lk);
                  if (v75 >= 0) {
                    int v50 = &v73;
                  }
                  else {
                    int v50 = v73;
                  }
                  buf.AudioObjectPropertySelector mSelector = 136315906;
                  *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                  __int16 v100 = 1024;
                  int v101 = 288;
                  __int16 v102 = 2080;
                  *(void *)CFDictionaryRef v103 = v50;
                  *(_WORD *)&v103[8] = 1024;
                  *(_DWORD *)&v103[10] = a1;
                  _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
                  if (v75 < 0) {
                    operator delete(v73);
                  }
                }
              }
            }
          }
          sub_6651C((uint64_t)&__p);
          std::condition_variable::~condition_variable(&v109);
          std::mutex::~mutex(&v110);
          int v51 = v86;
LABEL_125:
          if (v51) {
            operator delete(v51);
          }
          return;
        }
      }
      BOOL v32 = 0;
      if (!v67) {
        goto LABEL_66;
      }
LABEL_65:
      CFDictionaryRef v68 = v31;
      operator delete(v31);
      goto LABEL_66;
    }
    CFDictionaryRef v83 = 0;
    int v84 = 0;
    uint64_t v85 = 0;
    int v51 = v86;
    sub_46B38(&v83, v86, v87, (v87 - (uint64_t)v86) >> 2);
    int v80 = 0;
    CFDictionaryRef v81 = 0;
    uint64_t v82 = 0;
    sub_46B38(&v80, *a2, (uint64_t)a2[1], a2[1] - *a2);
    uint64_t v52 = v83;
    char v53 = v80;
    if (v84 - v83 == v81 - v80)
    {
      BOOL v54 = memcmp(v83, v80, v84 - v83) == 0;
      if (!v53)
      {
LABEL_133:
        if (v52)
        {
          int v84 = v52;
          operator delete(v52);
          if (!v54) {
            goto LABEL_57;
          }
        }
        else if (!v54)
        {
          goto LABEL_57;
        }
        uint64_t v55 = sub_32A48(13);
        if (*(unsigned char *)(v55 + 8))
        {
          uint64_t v56 = *(NSObject **)v55;
          if (*(void *)v55)
          {
            if (os_log_type_enabled(*(os_log_t *)v55, OS_LOG_TYPE_DEBUG))
            {
              buf.AudioObjectPropertySelector mSelector = 136315650;
              *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
              __int16 v100 = 1024;
              int v101 = 219;
              __int16 v102 = 1024;
              *(_DWORD *)CFDictionaryRef v103 = a1;
              _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
            }
          }
        }
        goto LABEL_125;
      }
    }
    else
    {
      BOOL v54 = 0;
      if (!v80) {
        goto LABEL_133;
      }
    }
    CFDictionaryRef v81 = v53;
    operator delete(v53);
    goto LABEL_133;
  }
}

void sub_222C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *__p)
{
  sub_6651C((uint64_t)&a37);
  std::condition_variable::~condition_variable((std::condition_variable *)(v49 - 216));
  std::mutex::~mutex((std::mutex *)(v49 - 168));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_222D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].AudioObjectPropertySelector mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_869C8((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v21;
  if (v21)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v19, v6);
        int v9 = v20;
        uint64_t v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v15);
        int v11 = v19;
        if (v9 < 0) {
          int v11 = v10;
        }
        uint64_t v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          uint64_t v12 = __p;
        }
        buf[0].AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        int v27 = v11;
        __int16 v28 = 2080;
        unint64_t v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)buf, 0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }
  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_46B38(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_222F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    if (a22) {
      operator delete(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_222FA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1) {
    goto LABEL_6;
  }
  unsigned int v3 = (os_log_t *)sub_32A48(16);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    buf.AudioObjectPropertySelector mSelector = 136315394;
    *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugIODelegate.cpp";
    __int16 v39 = 1024;
    *(_DWORD *)AudioObjectPropertyAddress __p = 191;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HapticDebugDelegate not instantiated yet", (uint8_t *)&buf, 0x12u);
  }
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
LABEL_6:
    if (!*(void *)(v1 + 56))
    {
      std::chrono::system_clock::time_point v33 = (os_log_t *)sub_32A48(13);
      uint64_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugIODelegate.cpp";
        __int16 v39 = 1024;
        *(_DWORD *)AudioObjectPropertyAddress __p = 62;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&buf, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    uint64_t v5 = v1 + 40;
    for (uint64_t i = *(void *)(v1 + 48); i != v5; uint64_t i = *(void *)(i + 8))
    {
      if ((*(uint64_t (**)(void))(**(void **)(i + 16) + 472))(*(void *)(i + 16)))
      {
        if (i != v5) {
          goto LABEL_16;
        }
        break;
      }
    }
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugIODelegate.cpp";
      __int16 v39 = 1024;
      *(_DWORD *)AudioObjectPropertyAddress __p = 69;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Cannot find master haptic debug device\"", (uint8_t *)&buf, 0x12u);
    }
    uint64_t i = v1 + 40;
LABEL_16:
    uint64_t v9 = *(void *)(i + 16);
    AudioObjectID v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 120))(v9);
    strcpy((char *)&buf, "crsstpni");
    BYTE1(buf.mElement) = 0;
    HIWORD(buf.mElement) = 0;
    if (AudioObjectHasProperty(v10, &buf))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v9 + 480))(&v36, v9);
      if (v36 == v37)
      {
        uint64_t v18 = sub_32A48(16);
        uint64_t v19 = sub_32A48(26);
        char v20 = 0;
        uint64_t v21 = 0;
        *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
        uint64_t v22 = *(void *)(v18 + 8);
        while (1)
        {
          uint64_t v23 = *((int *)&buf.mSelector + v21);
          char v24 = v20;
          if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
            break;
          }
          char v20 = 1;
          uint64_t v21 = 1;
          if (v24) {
            goto LABEL_46;
          }
        }
        if ((v22 & v23) == 0) {
          uint64_t v18 = v19;
        }
LABEL_46:
        BOOL v32 = *(NSObject **)v18;
        if (v32 && os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          buf.AudioObjectPropertySelector mSelector = 136315394;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugIODelegate.cpp";
          __int16 v39 = 1024;
          *(_DWORD *)AudioObjectPropertyAddress __p = 79;
          _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_INFO, "%25s:%-5d No valid input data sources found for this device", (uint8_t *)&buf, 0x12u);
        }
      }
      else
      {
        uint64_t v11 = sub_32A48(16);
        uint64_t v12 = sub_32A48(26);
        char v13 = 0;
        uint64_t v14 = 0;
        *(void *)&buf.AudioObjectPropertySelector mSelector = 0x100000002;
        uint64_t v15 = *(void *)(v11 + 8);
        while (1)
        {
          uint64_t v16 = *((int *)&buf.mSelector + v14);
          char v17 = v13;
          if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
            break;
          }
          char v13 = 1;
          uint64_t v14 = 1;
          if (v17) {
            goto LABEL_28;
          }
        }
        if ((v15 & v16) == 0) {
          uint64_t v11 = v12;
        }
LABEL_28:
        uint64_t v25 = *(NSObject **)v11;
        if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          sub_82188(&v42, (unsigned int *)v36, v37);
          __int16 v26 = (v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v42
              : (std::string *)v42.__r_.__value_.__r.__words[0];
          buf.AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HapticDebugIODelegate.cpp";
          __int16 v39 = 1024;
          *(_DWORD *)AudioObjectPropertyAddress __p = 83;
          *(_WORD *)&__p[4] = 2080;
          *(void *)&__p[6] = v26;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_INFO, "%25s:%-5d Setting input data sources: %s", (uint8_t *)&buf, 0x1Cu);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v42.__r_.__value_.__l.__data_);
          }
        }
        AudioObjectPropertyElement v27 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 120))(v9);
        *(void *)&buf.AudioObjectPropertySelector mSelector = sub_222010;
        buf.AudioObjectPropertyElement mElement = v27;
        *(void *)&unsigned char __p[10] = 0;
        uint64_t v41 = 0;
        *(void *)&__p[2] = 0;
        sub_46B38(&__p[2], v36, (uint64_t)v37, ((char *)v37 - (unsigned char *)v36) >> 2);
        __int16 v28 = (os_log_t *)sub_32A48(16);
        unint64_t v29 = *v28;
        if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v30 = atomic_load((unsigned int *)(v1 + 16));
          LODWORD(v42.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_IODelegate.h";
          WORD2(v42.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v42.__r_.__value_.__r.__words[1] + 6) = 46;
          WORD1(v42.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v42.__r_.__value_.__r.__words[2]) = v30;
          _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d executing function with device stopped. start count is %d", (uint8_t *)&v42, 0x18u);
        }
        if (atomic_load((unsigned int *)(v1 + 16)))
        {
          if (sub_273E0C(v1))
          {
            (*(void (**)(void, unsigned char *))&buf.mSelector)(buf.mElement, &__p[2]);
            sub_2744A0(v1);
          }
        }
        else
        {
          (*(void (**)(void, unsigned char *))&buf.mSelector)(buf.mElement, &__p[2]);
        }
        if (*(void *)&__p[2])
        {
          *(void *)&unsigned char __p[10] = *(void *)&__p[2];
          operator delete(*(void **)&__p[2]);
        }
      }
      if (v36)
      {
        long long v37 = (unsigned int *)v36;
        operator delete(v36);
      }
    }
  }
}

void sub_223594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2235FC(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    goto LABEL_6;
  }
  uint64_t v5 = (os_log_t *)sub_32A48(16);
  unsigned int v6 = *v5;
  if (*v5)
  {
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "HapticDebugIODelegate.cpp";
      __int16 v9 = 1024;
      int v10 = 216;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d HapticDebugDelegate not instantiated yet", (uint8_t *)&v7, 0x12u);
    }
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
LABEL_6:
  }
    atomic_store(a2, (unsigned __int8 *)(v3 + 32));
}

void sub_2236E0()
{
  sub_20A0D0();
  char v5 = 1;
  *(_OWORD *)unsigned int v6 = 0u;
  *(_OWORD *)int v7 = 0u;
  long long v8 = 0u;
  *(_DWORD *)__int16 v9 = 0;
  v9[4] = (unsigned __int16)sub_6CBEC() > 0x100u;
  v9[5] = 1;
  *(void *)&v9[6] = 0;
  __int16 v10 = 0;
  int v11 = 16777473;
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v12 = v13;
  __int16 v14 = 0;
  char v15 = 0;
  int v16 = -1044381696;
  char v17 = 1;
  int v18 = -1044381696;
  char v19 = 1;
  int v20 = 0;
  char v21 = 1;
  int v22 = -1056964608;
  char v23 = 1;
  int v24 = -1033371648;
  char v25 = 1;
  int v26 = 0;
  char v27 = 1;
  int v28 = -1033371648;
  char v29 = 1;
  int v30 = 0;
  char v31 = 1;
  int v32 = -1044381696;
  char v33 = 1;
  int v34 = 0;
  char v35 = 1;
  int v36 = -1033371648;
  char v37 = 1;
  int v38 = 0;
  char v39 = 1;
  int v40 = -1033371648;
  char v41 = 1;
  int v42 = -1055916032;
  char v43 = 1;
  int v44 = -1033371648;
  char v45 = 1;
  int v46 = 0;
  char v47 = 1;
  int v48 = -1055916032;
  char v49 = 1;
  int v50 = -1033371648;
  char v51 = 1;
  int v52 = -1055916032;
  char v53 = 1;
  int v54 = -1033371648;
  char v55 = 1;
  int v56 = 0;
  char v57 = 1;
  int v58 = -1055916032;
  char v59 = 1;
  int v60 = -1043333120;
  char v61 = 1;
  int v62 = 0x40000000;
  char v63 = 1;
  int v64 = 16777472;
  int v65 = 0;
  char v66 = 1;
  int v67 = 0;
  char v68 = 1;
  int v69 = 1103626240;
  char v70 = 1;
  int v71 = 0;
  char v72 = 1;
  int v73 = 1094713344;
  char v74 = 1;
  int v75 = 1094713344;
  char v76 = 1;
  int v77 = 1094713344;
  char v78 = 1;
  int v79 = -1061158912;
  char v80 = 1;
  int v81 = 1107296256;
  char v82 = 1;
  int v83 = 1107296256;
  char v84 = 1;
  int v85 = 1092616192;
  char v86 = 1;
  int v87 = 0;
  char v88 = 1;
  int v89 = 0;
  char v90 = 1;
  int v91 = 16777472;
  v92[0] = 0;
  v92[72] = 0;
  v92[80] = 0;
  v92[120] = 0;
  v92[128] = 0;
  v92[200] = 0;
  v92[208] = 0;
  v92[248] = 0;
  LOBYTE(v93) = 0;
  char v94 = 0;
  LOBYTE(v95) = 0;
  char v96 = 0;
  LOBYTE(v97) = 0;
  char v98 = 0;
  LOBYTE(v99) = 0;
  char v100 = 0;
  char v101 = 0;
  char v102 = 0;
  LOBYTE(v103) = 0;
  char v104 = 0;
  LOBYTE(v105) = 0;
  char v106 = 0;
  LOBYTE(v107) = 0;
  char v108 = 0;
  char v109 = 0;
  char v110 = 0;
  char v111 = 0;
  char v112 = 0;
  LOBYTE(v113) = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 0;
  char v123 = 0;
  char v124 = 0;
  char v125 = 0;
  char v126 = 0;
  char v127 = 1;
  char v128 = 0;
  char v129 = 0;
  LOBYTE(v130) = 0;
  char v131 = 0;
  LOBYTE(v132) = 0;
  char v133 = 0;
  LOBYTE(v134) = 0;
  char v135 = 0;
  LOBYTE(v136) = 0;
  char v137 = 0;
  __int16 v138 = 0;
  LOBYTE(v139) = 0;
  char v140 = 0;
  LOBYTE(v141) = 0;
  char v142 = 0;
  LOBYTE(v143) = 0;
  char v144 = 0;
  char v145 = 0;
  char v146 = 0;
  char v147 = 0;
  char v148 = 0;
  LOBYTE(v149) = 0;
  char v150 = 0;
  LOBYTE(v151) = 0;
  char v152 = 0;
  LOBYTE(v153) = 0;
  char v154 = 0;
  LOBYTE(v155) = 0;
  char v156 = 0;
  char v157 = 0;
  char v158 = 0;
  char v159 = 0;
  char v160 = 0;
  LOBYTE(__p) = 0;
  char v163 = 0;
  v164.__r_.__value_.__s.__data_[0] = 0;
  char v165 = 0;
  v166.__r_.__value_.__s.__data_[0] = 0;
  char v167 = 0;
  v168.__r_.__value_.__s.__data_[0] = 0;
  char v169 = 0;
  int v170 = 256;
  char v171 = 0;
  char v172 = 0;
  char v173 = 0;
  char v174 = 0;
  char v175 = 0;
  char v176 = 0;
  __int16 v177 = 0;
  char v1 = 1;
  int v0 = 1953460273;
  char v3 = 1;
  int v2 = 1;
  int v4 = 2;
  LODWORD(__src) = 1;
  sub_8732C((char *)v6, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  *(void *)&long long __src = 0x200000001;
  sub_8732C((char *)&v7[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  *(void *)__int16 v9 = 0x101010101000100;
  *(_WORD *)&unsigned char v9[12] = 257;
  int v11 = 16843008;
  int v60 = -1047527424;
  char v61 = 1;
  int v69 = 1103101952;
  char v70 = 1;
  int v75 = 0;
  char v76 = 1;
  int v77 = 0;
  char v78 = 1;
  int v73 = 0;
  char v74 = 1;
  int v89 = 1090519040;
  char v90 = 1;
  int v79 = -1040187392;
  char v80 = 1;
  int v62 = 0;
  char v63 = 1;
  int v91 = 16843009;
  if (!v94) {
    char v94 = 1;
  }
  int v93 = 1836282987;
  if (!v96) {
    char v96 = 1;
  }
  int v95 = 2;
  if (!v98) {
    char v98 = 1;
  }
  int v97 = 2;
  if (!v100) {
    char v100 = 1;
  }
  int v99 = 4;
  if (!v140) {
    char v140 = 1;
  }
  int v139 = 2;
  if (!v144) {
    char v144 = 1;
  }
  int v143 = 2;
  if (!v142) {
    char v142 = 1;
  }
  int v141 = 2;
  int v103 = 36;
  char v104 = 1;
  int v105 = 36;
  char v106 = 1;
  int v107 = 36;
  char v108 = 1;
  int v113 = 36;
  char v114 = 1;
  int v130 = 41;
  char v131 = 1;
  int v132 = 3;
  char v133 = 1;
  int v134 = 25;
  char v135 = 1;
  int v136 = 41;
  char v137 = 1;
  __int16 v138 = 257;
  int v149 = 41;
  char v150 = 1;
  int v151 = 41;
  char v152 = 1;
  int v153 = 23;
  char v154 = 1;
  int v155 = 7;
  char v156 = 1;
  sub_208140(&__src, 84);
  if (v163)
  {
    if (SHIBYTE(v162) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v162 = v179;
  }
  else
  {
    long long __p = __src;
    uint64_t v162 = v179;
    char v163 = 1;
  }
  sub_87428(&v164, "_top_mic_general");
  sub_87428(&v166, "_top_mic_measurement");
  sub_87428(&v168, "_top_mic_hearing_accessibility");
  LOBYTE(v14) = 1;
  sub_402E04(&v0);
  sub_6C690((uint64_t)v92);
  sub_463E0(v13[0]);
  if (v7[1])
  {
    *(void **)&long long v8 = v7[1];
    operator delete(v7[1]);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
}

void sub_223D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_223DA4(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 664);
  if (!v3)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      long long v8 = "Device_HPMic_Aspen.cpp";
      __int16 v9 = 1024;
      int v10 = 898;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No valid support policy present\"", (uint8_t *)&v7, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No valid support policy present");
  }

  sub_3901F4(v3, a2, a3);
}

void sub_223EB4(_Unwind_Exception *exception_object)
{
}

char *sub_223ED0@<X0>(char *result@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  uint64_t v3 = (uint64_t)result;
  int v5 = *(_DWORD *)(a2 + 144);
  switch(v5)
  {
    case 1886216809:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_2091A4((uint64_t)&theData);
      if (v84)
      {
        CFDataRef v6 = theData;
        if (theData && (BytePtr = CFDataGetBytePtr(theData), unint64_t Length = CFDataGetLength(v6), BytePtr))
        {
          uint64_t v9 = Length;
          if (Length > 3)
          {
            LODWORD(v10) = *(_DWORD *)BytePtr;
            int v11 = (os_log_t *)sub_32A48(17);
            uint64_t v12 = *v11;
            if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
              char v86 = "Device_HPMic_Aspen.cpp";
              __int16 v87 = 1024;
              int v88 = 1250;
              __int16 v89 = 1024;
              *(_DWORD *)char v90 = WORD1(v10);
              *(_WORD *)&v90[4] = 1024;
              *(_DWORD *)&v90[6] = BYTE1(v10);
              LOWORD(v91) = 1024;
              *(_DWORD *)((char *)&v91 + 2) = v10;
              _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Mic Trim gains: version %d, size %d, entries %d", buf, 0x24u);
            }
            if (WORD1(v10) != 1 || (v10 & 0xFF00) != 0x200)
            {
              int v75 = (os_log_t *)sub_32A48(13);
              char v76 = *v75;
              if (*v75 && os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                char v86 = "Device_HPMic_Aspen.cpp";
                __int16 v87 = 1024;
                int v88 = 1252;
                _os_log_impl(&def_1E50E8, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
              }
              exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Precondition failure.");
            }
            unint64_t v10 = v10;
            if ((_BYTE)v10)
            {
              if (v9 > 7)
              {
                char v13 = 0;
                unint64_t v39 = (unint64_t)&BytePtr[v9 - 4];
                int v40 = (int *)(BytePtr + 4);
                unint64_t v10 = v10;
                long long v14 = 0uLL;
                do
                {
                  char v41 = (char *)*((void *)&v14 + 1);
                  int v42 = (char *)v14;
                  unint64_t v43 = (uint64_t)(*((void *)&v14 + 1) - v14) >> 2;
                  if (v43 >= v10) {
                    break;
                  }
                  int v44 = *v40;
                  float v45 = (double)(*v40 >> 16) * 0.1;
                  if (*((void *)&v14 + 1) >= (unint64_t)v13)
                  {
                    unint64_t v47 = (uint64_t)((uint64_t)v13 - v14) >> 1;
                    if (v47 <= v43 + 1) {
                      unint64_t v47 = v43 + 1;
                    }
                    if ((unint64_t)((unint64_t)v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v48 = v47;
                    }
                    char v49 = (char *)sub_46BF4(v48);
                    char v51 = (float *)&v49[4 * v43];
                    *char v51 = v45;
                    int v46 = v51 + 1;
                    while (v41 != v42)
                    {
                      int v52 = *((_DWORD *)v41 - 1);
                      v41 -= 4;
                      *((_DWORD *)v51-- - 1) = v52;
                    }
                    char v13 = (float *)&v49[4 * v50];
                    *(void *)&long long v14 = v51;
                    if (v42)
                    {
                      char v78 = v51;
                      operator delete(v42);
                      *(void *)&long long v14 = v78;
                    }
                  }
                  else
                  {
                    **((float **)&v14 + 1) = v45;
                    int v46 = (float *)(*((void *)&v14 + 1) + 4);
                  }
                  float v53 = (double)(__int16)v44 * 0.1;
                  int v79 = (float *)v14;
                  if (v46 >= v13)
                  {
                    char v55 = (float *)v14;
                    uint64_t v56 = (uint64_t)((uint64_t)v46 - v14) >> 2;
                    unint64_t v57 = v56 + 1;
                    if ((unint64_t)(v56 + 1) >> 62) {
                      sub_60548();
                    }
                    if ((uint64_t)((uint64_t)v13 - v14) >> 1 > v57) {
                      unint64_t v57 = (uint64_t)((uint64_t)v13 - v14) >> 1;
                    }
                    if ((unint64_t)((unint64_t)v13 - v14) >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v58 = v57;
                    }
                    if (v58) {
                      unint64_t v58 = (unint64_t)sub_46BF4(v58);
                    }
                    else {
                      uint64_t v59 = 0;
                    }
                    int v60 = (float *)(v58 + 4 * v56);
                    *int v60 = v53;
                    int v54 = v60 + 1;
                    while (v46 != v55)
                    {
                      int v61 = *((_DWORD *)v46-- - 1);
                      *((_DWORD *)v60-- - 1) = v61;
                    }
                    char v13 = (float *)(v58 + 4 * v59);
                    int v79 = v60;
                    if (v55) {
                      operator delete(v55);
                    }
                  }
                  else
                  {
                    float *v46 = v53;
                    int v54 = v46 + 1;
                  }
                  *(void *)&long long v62 = v79;
                  *((void *)&v62 + 1) = v54;
                  long long v80 = v62;
                  char v63 = (os_log_t *)sub_32A48(17);
                  int v64 = *v63;
                  if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                    char v86 = "Device_HPMic_Aspen.cpp";
                    __int16 v87 = 1024;
                    int v88 = 1271;
                    __int16 v89 = 2048;
                    *(double *)char v90 = v45;
                    *(_WORD *)&v90[8] = 2048;
                    double v91 = v53;
                    _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Parsed trim gains: %f %f", buf, 0x26u);
                  }
                  ++v40;
                  long long v14 = v80;
                }
                while ((unint64_t)v40 <= v39);
              }
              else
              {
                char v13 = 0;
                long long v14 = 0uLL;
              }
              uint64_t v65 = *((void *)&v14 + 1);
              if (v10 < (uint64_t)(*((void *)&v14 + 1) - v14) >> 2)
              {
                uint64_t v66 = *((void *)&v14 + 1) - v14 - 4;
                do
                {
                  v65 -= 4;
                  BOOL v21 = v10 >= v66 >> 2;
                  v66 -= 4;
                }
                while (!v21);
                *((void *)&v14 + 1) = v65;
              }
            }
            else
            {
              char v37 = (os_log_t *)sub_32A48(17);
              int v38 = *v37;
              long long v14 = 0uLL;
              if (*v37)
              {
                if (os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                  char v86 = "Device_HPMic_Aspen.cpp";
                  __int16 v87 = 1024;
                  int v88 = 1256;
                  _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d Number of Mic trim gain entries is zero", buf, 0x12u);
                }
                char v13 = 0;
                long long v14 = 0uLL;
              }
              else
              {
                char v13 = 0;
              }
            }
            *(_OWORD *)a3 = v14;
            a3[2] = (char *)v13;
            return (char *)sub_19D11C((uint64_t)&theData);
          }
          char v72 = (os_log_t *)sub_32A48(13);
          int v73 = *v72;
          if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            char v86 = "Device_HPMic_Aspen.cpp";
            __int16 v87 = 1024;
            int v88 = 1238;
            _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
        }
        else
        {
          int v67 = (os_log_t *)sub_32A48(13);
          char v68 = *v67;
          if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            char v86 = "Device_HPMic_Aspen.cpp";
            __int16 v87 = 1024;
            int v88 = 1237;
            _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
        }
        char v74 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v74, "Precondition failure.");
      }
      uint64_t v15 = *(void *)(v3 + 664);
      uint64_t v18 = *(void *)(v15 + 72);
      uint64_t v16 = v15 + 72;
      uint64_t v17 = v18;
      if (!v18) {
        goto LABEL_115;
      }
      uint64_t v19 = v16;
      do
      {
        unsigned int v20 = *(_DWORD *)(v17 + 32);
        BOOL v21 = v20 >= 0x706D6269;
        if (v20 >= 0x706D6269) {
          int v22 = (uint64_t *)v17;
        }
        else {
          int v22 = (uint64_t *)(v17 + 8);
        }
        if (v21) {
          uint64_t v19 = v17;
        }
        uint64_t v17 = *v22;
      }
      while (*v22);
      if (v19 == v16 || *(_DWORD *)(v19 + 32) > 0x706D6269u)
      {
LABEL_115:
        int v69 = (os_log_t *)sub_32A48(13);
        char v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          char v86 = "Device_HPMic_Aspen.cpp";
          __int16 v87 = 1024;
          int v88 = 1295;
          _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unable to locate built-in mic sub-port information\"", buf, 0x12u);
        }
        int v71 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v71, "Unable to locate built-in mic sub-port information");
      }
      char v23 = *(unsigned int **)(v19 + 40);
      if (*(unsigned int **)(v19 + 48) != v23)
      {
        int v24 = 0;
        unint64_t v25 = 0;
        int v26 = 0;
        do
        {
          uint64_t v27 = sub_32A48(17);
          if (*(unsigned char *)(v27 + 8))
          {
            int v28 = *(NSObject **)v27;
            if (*(void *)v27)
            {
              if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
              {
                sub_2417C(__p, *v23);
                char v29 = __p;
                if (v82 < 0) {
                  char v29 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                char v86 = "Device_HPMic_Aspen.cpp";
                __int16 v87 = 1024;
                int v88 = 1301;
                __int16 v89 = 2080;
                *(void *)char v90 = v29;
                _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting trim for Data Source ID %s", buf, 0x1Cu);
                if (v82 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 0;
          if (sub_19D060(v3, 1768845428, *v23, (uint64_t)buf))
          {
            if ((unint64_t)v26 >= v25)
            {
              uint64_t v31 = (v26 - v24) >> 2;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
                sub_60548();
              }
              if ((uint64_t)(v25 - (void)v24) >> 1 > v32) {
                unint64_t v32 = (uint64_t)(v25 - (void)v24) >> 1;
              }
              if (v25 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v32;
              }
              if (v33) {
                unint64_t v33 = (unint64_t)sub_46BF4(v33);
              }
              else {
                uint64_t v34 = 0;
              }
              char v35 = (char *)(v33 + 4 * v31);
              *(_DWORD *)char v35 = *(_DWORD *)buf;
              int v30 = v35 + 4;
              while (v26 != v24)
              {
                int v36 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              unint64_t v25 = v33 + 4 * v34;
              *a3 = v35;
              a3[1] = v30;
              a3[2] = (char *)v25;
              if (v24) {
                operator delete(v24);
              }
              int v24 = v35;
            }
            else
            {
              *(_DWORD *)int v26 = *(_DWORD *)buf;
              int v30 = v26 + 4;
            }
            a3[1] = v30;
            int v26 = v30;
          }
          ++v23;
        }
        while (*(unsigned int **)(v19 + 48) != v23);
      }
      return (char *)sub_19D11C((uint64_t)&theData);
    case 1886545251:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      uint64_t result = (char *)sub_19D060((uint64_t)result, 1869968496, 3, (uint64_t)buf);
      if (result)
      {
LABEL_7:
        uint64_t result = (char *)operator new(4uLL);
        *(_DWORD *)uint64_t result = *(_DWORD *)buf;
        *a3 = result;
        a3[1] = result + 4;
        a3[2] = result + 4;
      }
      break;
    case 1886613611:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      uint64_t result = (char *)sub_19D060((uint64_t)result, 1869968496, 4, (uint64_t)buf);
      if (result) {
        goto LABEL_7;
      }
      break;
    default:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      break;
  }
  return result;
}

void sub_224890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_19D11C((uint64_t)va);
  int v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void *sub_224954@<X0>(void *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 == 1886216809)
  {
    uint64_t v3 = *(void *)(result[84] + 24);
    if (!v3)
    {
      unint64_t v10 = (os_log_t *)sub_32A48(13);
      int v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        __int32 v13 = 136315394;
        long long v14 = "Device_HPMic_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 907;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [mTransducerDatabase.mBuiltInMicDefaultSubPort is NULL]: \"No default sub-port specified for built-in mic.\"", (uint8_t *)&v13, 0x12u);
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "No default sub-port specified for built-in mic.");
    }
    int v4 = *(__int32 **)(v3 + 32);
    int v5 = *(__int32 **)(v3 + 40);
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x41 && v4 != v5)
    {
      int v7 = v4;
      while (v7[8] != 1869442665)
      {
        v7 += 16;
        if (v7 == v5) {
          goto LABEL_17;
        }
      }
      int v4 = v7;
    }
LABEL_17:
    __int32 v13 = *v4;
    return sub_72300(a3, &v13, 1);
  }
  else
  {
    uint64_t v9 = result[83];
    if (v9)
    {
      return sub_3921D0(a3, v9, a2);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
  }
  return result;
}

void sub_224B14(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_224B30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_32A48(17);
  if (*(unsigned char *)(v4 + 8))
  {
    int v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a2 + 16);
        sub_19D4F8(&__p, *(void *)(a2 + 8), a2);
        int v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        long long v14 = "Device_HPMic_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 888;
        __int16 v17 = 2048;
        uint64_t v18 = v6;
        __int16 v19 = 2080;
        unsigned int v20 = v7;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d inPortList (%zu): %s.", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  BOOL v8 = sub_24AA28(1886154613, a2);
  BOOL v9 = v8;
  if (v8)
  {
    unint64_t v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        long long v14 = "Device_HPMic_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 891;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Unexpected lineout port\"", buf, 0x12u);
      }
    }
  }
  *(unsigned char *)(a1 + 656) = v9;
}

uint64_t sub_224CE4(uint64_t a1, signed int a2)
{
  if (a2 > 1886545250)
  {
    switch(a2)
    {
      case 1886545251:
        return 3;
      case 1886613611:
        return 4;
      case 1886680175:
        return 1;
      default:
        goto LABEL_13;
    }
  }
  else
  {
    if (a2 != 1885888867)
    {
      if (a2 != 1885892727)
      {
        if (a2 == 1886154613) {
          return 2;
        }
LABEL_13:
        uint64_t v3 = (os_log_t *)sub_32A48(17);
        uint64_t v4 = *v3;
        if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, a2);
          int v5 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          long long v14 = "Device_HPMic_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 872;
          __int16 v17 = 2080;
          uint64_t v18 = v5;
          _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v6 = (os_log_t *)sub_32A48(13);
        int v7 = *v6;
        if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, a2);
          if (v12 >= 0) {
            BOOL v8 = __p;
          }
          else {
            BOOL v8 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          long long v14 = "Device_HPMic_Aspen.cpp";
          __int16 v15 = 1024;
          int v16 = 873;
          __int16 v17 = 2080;
          uint64_t v18 = v8;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType: %s.\"", buf, 0x1Cu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
        exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType: %s.");
      }
      return 1;
    }
    return 5;
  }
}

void sub_224F58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_224F74()
{
  if (sub_20A008()) {
    return 0;
  }
  char v1 = (void *)sub_F820C();
  CFStringRef v3 = CFStringCreateWithCString(0, "AOP Audio-1", 0x600u);
  char v4 = 1;
  uint64_t v0 = sub_F832C(v1, &v3);
  sub_72924((uint64_t)&v3);
  return v0;
}

void sub_224FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_225008(uint64_t a1)
{
  sub_42E5FC((os_unfair_lock_s *)a1);
  v41[0] = 1;
  *(void *)&v41[1] = 0x6F7574706D757465;
  v41[3] = 1;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v41[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v41[1], 0, 0, 4, v41);
  }
  v41[3] = 2;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v41[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v41[1], 0, 0, 4, v41);
  }
  v41[3] = 3;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v41[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v41[1], 0, 0, 4, v41);
  }
  v41[3] = 4;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v41[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v41[1], 0, 0, 4, v41);
  }
  int v39 = 4;
  float v40 = 0.0;
  strcpy((char *)&v41[1], "dlovptuo");
  BYTE1(v41[3]) = 0;
  HIWORD(v41[3]) = 0;
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v41[1]))
  {
    (*(void (**)(uint64_t, _DWORD *, void, void, int *, float *))(*(void *)a1 + 40))(a1, &v41[1], 0, 0, &v39, &v40);
    float v2 = v40;
    if (v40 != 0.0)
    {
      float v40 = 0.0;
      (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, float *, float))(*(void *)a1 + 48))(a1, &v41[1], 0, 0, 4, &v40, v2);
    }
  }
  BYTE1(v41[3]) = 0;
  HIWORD(v41[3]) = 0;
  strcpy((char *)v41, "Ms2icrscbolg");
  if ((*(unsigned int (**)(uint64_t, _DWORD *))(*(void *)a1 + 16))(a1, &v41[1])) {
    (*(void (**)(uint64_t, _DWORD *, void, void, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, &v41[1], 0, 0, 4, v41);
  }
  sub_85F24();
  strcpy(inAddress, "etumtpni");
  inAddress[9] = 0;
  *(_WORD *)&inAddress[10] = 0;
  AudioObjectID v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v3, (const AudioObjectPropertyAddress *)inAddress)) {
    operator new();
  }
  *(void *)&long long v52 = 0x696E7074766F6C64;
  DWORD2(v52) = 0;
  AudioObjectID v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v4, (const AudioObjectPropertyAddress *)&v52)) {
    operator new();
  }
  *(void *)&v48.AudioObjectPropertySelector mSelector = 0x6F7574706D757465;
  v48.AudioObjectPropertyElement mElement = 4;
  AudioObjectID v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v5, &v48))
  {
    uint64_t v6 = (os_log_t *)sub_32A48(17);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 1053;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating a speaker port", inAddress, 0x12u);
    }
    long long v50 = 0uLL;
    uint64_t v51 = 0;
    sub_105048((uint64_t)inAddress, qword_64E0B8);
    long long v45 = 0uLL;
    uint64_t v46 = 0;
    BOOL v8 = (char *)operator new(0x228uLL);
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(void *)BOOL v8 = off_640AB8;
    *(void *)&long long v49 = CFStringCreateWithCString(0, "Built-In Speaker", 0x600u);
    BYTE8(v49) = 1;
    sub_21C8C(&v52, "");
    sub_105158((uint64_t)(v8 + 24), &qword_64E0B8, a1, (uint64_t)&v50, (uint64_t)inAddress, (uint64_t)&v49, (uint64_t)&v45, &v52);
    *((void *)v8 + 3) = &off_621AD0;
    *((_WORD *)v8 + 272) = 0;
    if (SHIBYTE(v53) < 0) {
      operator delete((void *)v52);
    }
    sub_72924((uint64_t)&v49);
    v47[0] = (CFMutableStringRef)(v8 + 24);
    v47[1] = (CFMutableStringRef)v8;
    sub_56E64((uint64_t)v47, (void *)v8 + 13, (uint64_t)(v8 + 24));
    long long v49 = *(_OWORD *)v47;
    v47[0] = 0;
    v47[1] = 0;
    sub_436484(a1, (void ***)&v49);
    if (*((void *)&v49 + 1)) {
      sub_4636C(*((std::__shared_weak_count **)&v49 + 1));
    }
    *(void *)&long long v52 = &v45;
    sub_74004((void ***)&v52);
    sub_72924((uint64_t)&inAddress[32]);
    sub_72924((uint64_t)&inAddress[16]);
    sub_72924((uint64_t)inAddress);
    if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1) & 0xFF00000000) != 0)
    {
      BOOL v9 = (os_log_t *)sub_32A48(17);
      unint64_t v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 1063;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d creating a speaker tap input port", inAddress, 0x12u);
      }
      int v11 = operator new(0x228uLL);
      v11[1] = 0;
      uint64_t v11[2] = 0;
      *int v11 = off_63F980;
      sub_280A18((uint64_t)(v11 + 3), a1);
      *(void *)AudioObjectPropertyAddress inAddress = v11 + 3;
      *(void *)&inAddress[8] = v11;
      sub_56E64((uint64_t)inAddress, v11 + 13, (uint64_t)(v11 + 3));
      long long v45 = *(_OWORD *)inAddress;
      sub_436484(a1, (void ***)&v45);
      if (*((void *)&v45 + 1)) {
        sub_4636C(*((std::__shared_weak_count **)&v45 + 1));
      }
    }
  }
  if (sub_8B774())
  {
    char v12 = (os_log_t *)sub_32A48(17);
    __int32 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 1122;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d No input sources are present - no builtin mic on codec", inAddress, 0x12u);
    }
  }
  else
  {
    LODWORD(v47[0]) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    *(void *)&long long v50 = 0x696E707473736323;
    DWORD2(v50) = 0;
    sub_869C8((uint64_t)inAddress, (AudioObjectID *)v47, (AudioObjectPropertyAddress *)&v50, 0, 0);
    int v14 = *(_DWORD *)inAddress;
    if (*(_DWORD *)inAddress || !inAddress[32])
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = &off_6414D8;
      exception[2] = v14;
    }
    long long v52 = 0uLL;
    uint64_t v53 = 0;
    __int16 v15 = *(void **)&inAddress[8];
    sub_46B38(&v52, *(const void **)&inAddress[8], *(uint64_t *)&inAddress[16], (uint64_t)(*(void *)&inAddress[16] - *(void *)&inAddress[8]) >> 2);
    if (v15) {
      operator delete(v15);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64E150, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64E150))
    {
      qmemcpy(inAddress, "cimicimscimfcimlcimtcimu1imi2imi3imi4imi", sizeof(inAddress));
      sub_1A2E28(qword_64E138, inAddress, 0xAuLL);
      __cxa_guard_release(&qword_64E150);
    }
    long long v16 = v52;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    long long v50 = 0uLL;
    uint64_t v51 = 0;
    sub_1A2EAC((unsigned int **)inAddress, (unsigned int *)v16, *((unsigned int **)&v16 + 1), (unsigned int *)qword_64E138[0], unk_64E140, (uint64_t)&v50, 0);
    long long v17 = v50;
    if ((void)v50)
    {
      *((void *)&v50 + 1) = v50;
      operator delete((void *)v50);
    }
    if ((void)v16) {
      operator delete((void *)v16);
    }
    if (*((void *)&v17 + 1) != (void)v17
      && (sub_392434(*(void *)(a1 + 664), 0x696D6963u) || sub_392434(*(void *)(a1 + 664), 0x696D6931u)))
    {
      uint64_t v18 = (os_log_t *)sub_32A48(17);
      __int16 v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 1072;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating an internal microphone port", inAddress, 0x12u);
      }
      v47[0] = 0;
      LOBYTE(v47[1]) = 1;
      sub_E2930((uint64_t)&theString);
      if (v44 && theString)
      {
        *(void *)AudioObjectPropertyAddress inAddress = CFStringCreateMutableCopy(0, 0, theString);
        inAddress[8] = 1;
        sub_E29F8((uint64_t)v47, (uint64_t)inAddress);
        sub_E2A54((uint64_t)inAddress);
        if (v47[0]) {
          CFStringAppend(v47[0], @" ");
        }
      }
      else
      {
        unsigned int v20 = (os_log_t *)sub_32A48(17);
        BOOL v21 = *v20;
        if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
          *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
          *(_WORD *)&inAddress[12] = 1024;
          *(_DWORD *)&inAddress[14] = 1082;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Could not retrieve localized device name", inAddress, 0x12u);
        }
        *(void *)AudioObjectPropertyAddress inAddress = CFStringCreateMutableCopy(0, 0, &stru_642048);
        inAddress[8] = 1;
        sub_E29F8((uint64_t)v47, (uint64_t)inAddress);
        sub_E2A54((uint64_t)inAddress);
      }
      sub_23B86C((uint64_t)inAddress, 0x706D6269u);
      if (v47[0]) {
        CFStringAppend(v47[0], *(CFStringRef *)inAddress);
      }
      sub_72924((uint64_t)inAddress);
      uint64_t v22 = sub_32A48(17);
      if (*(unsigned char *)(v22 + 8))
      {
        char v23 = *(NSObject **)v22;
        if (*(void *)v22)
        {
          if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
          {
            sub_21B7C(&v52, v47[0]);
            int v24 = v53 >= 0 ? &v52 : (long long *)v52;
            *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315650;
            *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
            *(_WORD *)&inAddress[12] = 1024;
            *(_DWORD *)&inAddress[14] = 1090;
            *(_WORD *)&inAddress[18] = 2080;
            *(void *)&inAddress[20] = v24;
            _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Localized microphone name: '%s'", inAddress, 0x1Cu);
            if (SHIBYTE(v53) < 0) {
              operator delete((void *)v52);
            }
          }
        }
      }
      CFTypeRef v25 = CFRetain(v47[0]);
      *(void *)&long long v52 = v25;
      BYTE8(v52) = 1;
      *(void *)AudioObjectPropertyAddress inAddress = v25;
      inAddress[8] = 1;
      if (v25) {
        CFRetain(v25);
      }
      *(void *)&inAddress[16] = 0;
      unsigned char inAddress[24] = 1;
      *(void *)&inAddress[32] = 0;
      char v55 = 1;
      sub_72924((uint64_t)&v52);
      long long v52 = 0uLL;
      uint64_t v53 = 0;
      uint64_t v26 = sub_3EFF58();
      uint64_t v27 = operator new(0x260uLL);
      v27[1] = 0;
      v27[2] = 0;
      *uint64_t v27 = off_627CD0;
      *(void *)&long long v50 = CFStringCreateWithCString(0, "Built-In Microphone", 0x600u);
      BYTE8(v50) = 1;
      sub_45C748((uint64_t)(v27 + 3), a1, (uint64_t)&v52, (uint64_t)inAddress, (uint64_t)&v50, v26);
      sub_72924((uint64_t)&v50);
      *(void *)&long long v42 = v27 + 3;
      *((void *)&v42 + 1) = v27;
      sub_56E64((uint64_t)&v42, v27 + 13, (uint64_t)(v27 + 3));
      long long v50 = v42;
      sub_436484(a1, (void ***)&v50);
      if (*((void *)&v50 + 1)) {
        sub_4636C(*((std::__shared_weak_count **)&v50 + 1));
      }
      sub_72924((uint64_t)&inAddress[32]);
      sub_72924((uint64_t)&inAddress[16]);
      sub_72924((uint64_t)inAddress);
      sub_E2A90((uint64_t)&theString);
      sub_E2A54((uint64_t)v47);
    }
  }
  sub_4391DC(a1, (uint64_t)&qword_64E018, 0);
  *(void *)&long long v50 = 0x707472755354656ELL;
  DWORD2(v50) = 0;
  if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)a1 + 16))(a1, &v50))
  {
    *(_DWORD *)AudioObjectPropertyAddress inAddress = 0;
    (*(void (**)(uint64_t, long long *, void, void, uint64_t, unsigned char *))(*(void *)a1 + 48))(a1, &v50, 0, 0, 4, inAddress);
  }
  *(void *)&long long v45 = 0x6F7574706D757465;
  DWORD2(v45) = 5;
  if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)a1 + 16))(a1, &v45))
  {
    *(_DWORD *)AudioObjectPropertyAddress inAddress = 1;
    (*(void (**)(uint64_t, long long *, void, void, uint64_t, unsigned char *))(*(void *)a1 + 48))(a1, &v45, 0, 0, 4, inAddress);
  }
  *(void *)&long long v49 = 0x676C6F624D434373;
  DWORD2(v49) = 0;
  if ((*(unsigned int (**)(uint64_t, long long *))(*(void *)a1 + 16))(a1, &v49))
  {
    v47[0] = 0;
    int v39 = 8;
    (*(void (**)(uint64_t, long long *, void, void, int *, CFMutableStringRef *))(*(void *)a1 + 40))(a1, &v49, 0, 0, &v39, v47);
    if (!v47[0])
    {
      int v36 = (os_log_t *)sub_32A48(13);
      char v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 779;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [maxChannelInfo is NULL]: \"Invalid Maximum Channel Info\"", inAddress, 0x12u);
      }
      int v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v38, "Invalid Maximum Channel Info");
    }
    *(CFMutableStringRef *)&long long v52 = v47[0];
    WORD4(v52) = 1;
    if (CFDictionaryContainsKey((CFDictionaryRef)v47[0], @"MaxInputChannelCount"))
    {
      int v28 = (int *)(a1 + 684);
      if ((sub_1D4800((const __CFDictionary *)v52, @"MaxInputChannelCount", v28) & 1) == 0)
      {
        char v29 = (os_log_t *)sub_32A48(17);
        int v30 = *v29;
        if (*v29)
        {
          if (os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
            *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
            *(_WORD *)&inAddress[12] = 1024;
            *(_DWORD *)&inAddress[14] = 786;
            _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d Unable to convert max num input channels to UInt32", inAddress, 0x12u);
          }
        }
      }
      uint64_t v31 = sub_32A48(17);
      if (*(unsigned char *)(v31 + 8))
      {
        unint64_t v32 = *(NSObject **)v31;
        if (*(void *)v31)
        {
          if (os_log_type_enabled(*(os_log_t *)v31, OS_LOG_TYPE_DEBUG))
          {
            int v33 = *v28;
            *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315650;
            *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
            *(_WORD *)&inAddress[12] = 1024;
            *(_DWORD *)&inAddress[14] = 790;
            *(_WORD *)&inAddress[18] = 1024;
            *(_DWORD *)&inAddress[20] = v33;
            _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEBUG, "%25s:%-5d Codec specified a maximum number of input channels: %u", inAddress, 0x18u);
          }
        }
      }
    }
    sub_80594((uint64_t)&v52);
  }
  return 1;
}

void sub_226230(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_64E150);
  if (*(void *)(v1 + 40)) {
    operator delete(*(void **)(v1 + 40));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_226458(uint64_t a1)
{
  *(void *)&inAddress.AudioObjectPropertySelector mSelector = 0x6F7574706A61636BLL;
  inAddress.AudioObjectPropertyElement mElement = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64E120, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64E120))
  {
    AudioObjectID v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    byte_64E118 = AudioObjectHasProperty(v2, &inAddress) != 0;
    __cxa_guard_release(&qword_64E120);
  }
  return byte_64E118;
}

void sub_22650C(_Unwind_Exception *a1)
{
}

BOOL sub_226524(uint64_t a1)
{
  if (sub_8B774()) {
    return 0;
  }
  *(void *)&v6.AudioObjectPropertySelector mSelector = 0x696E70746A61636BLL;
  v6.AudioObjectPropertyElement mElement = 0;
  AudioObjectID v3 = &unk_64E000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64E130, memory_order_acquire) & 1) == 0)
  {
    int v4 = __cxa_guard_acquire(&qword_64E130);
    AudioObjectID v3 = (unsigned char *)&unk_64E000;
    if (v4)
    {
      AudioObjectID v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      byte_64E128 = AudioObjectHasProperty(v5, &v6) == 1;
      __cxa_guard_release(&qword_64E130);
      AudioObjectID v3 = &unk_64E000;
    }
  }
  return v3[296] != 0;
}

void sub_2265F4(_Unwind_Exception *a1)
{
}

uint64_t sub_22660C(uint64_t a1, double a2)
{
  double v19 = a2;
  uint64_t v4 = sub_42FD90(a1, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 200))(a1);
  uint64_t v17 = 0x676C6F62616F7372;
  int v18 = 0;
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = v5;
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v17))
    {
      uint64_t v8 = sub_32A48(17);
      uint64_t v9 = sub_32A48(36);
      char v10 = 0;
      uint64_t v11 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v12 = *(void *)(v8 + 8);
      while (1)
      {
        uint64_t v13 = *(int *)&buf[4 * v11];
        char v14 = v10;
        if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
          break;
        }
        char v10 = 1;
        uint64_t v11 = 1;
        if (v14) {
          goto LABEL_13;
        }
      }
      if ((v12 & v13) == 0) {
        uint64_t v8 = v9;
      }
LABEL_13:
      __int16 v15 = *(NSObject **)v8;
      if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
        __int16 v21 = 1024;
        int v22 = 814;
        __int16 v23 = 2048;
        double v24 = a2;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Informing AOP of Codec sample rate %f Hz", buf, 0x1Cu);
      }
      (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, double *))(*(void *)v7 + 48))(v7, &v17, 0, 0, 8, &v19);
    }
  }
  return v4;
}

BOOL sub_226814(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_64E048 && a2->mElement == dword_64E050
    || *(void *)&a2->mSelector == qword_64E058 && a2->mElement == dword_64E060
    || *(void *)&a2->mSelector == qword_64E068 && a2->mElement == dword_64E070)
  {
    uint64_t v8 = *(void *)&a2->mSelector;
    uint64_t v13 = a4;
    uint64_t v14 = v8;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v10 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v11 = a2->mElement;
    uint64_t v12 = a3;
    sub_1A4260((void *)(a1 + 512), (unsigned int *)&v14, (uint64_t)&v10);
    return 1;
  }
  else
  {
    sub_50848((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }
}

BOOL sub_22695C(void *a1, uint64_t a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void **)a2;
      int v14 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v13);
      AudioObjectPropertyElement v11 = v17 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
      __int16 v19 = 1024;
      *(_DWORD *)unsigned int v20 = 661;
      *(_WORD *)&v20[4] = 2080;
      *(void *)&v20[6] = v11;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v17 < 0) {
        operator delete(__p);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (*(void *)a2 == qword_64E048 && *(_DWORD *)(a2 + 8) == dword_64E050
    || *(void *)a2 == qword_64E058 && *(_DWORD *)(a2 + 8) == dword_64E060
    || *(void *)a2 == qword_64E068 && *(_DWORD *)(a2 + 8) == dword_64E070)
  {
    std::string __p = *(void **)a2;
    int v16 = *(_DWORD *)(a2 + 8);
    *(void *)AudioObjectPropertyAddress buf = *(void *)a2;
    *(_DWORD *)&buf[8] = *(_DWORD *)(a2 + 8);
    *(void *)&_OWORD v20[2] = a3;
    *(void *)&v20[10] = a4;
    sub_1A4AA0(a1 + 64, (unsigned int *)&__p, (uint64_t)buf);
    return 1;
  }
  else
  {
    return sub_431F5C((uint64_t)a1, (const AudioObjectPropertyAddress *)a2, a3, a4);
  }
}

void sub_226C28(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v79 = (os_log_t *)sub_32A48(13);
    long long v80 = *v79;
    if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
    {
      v152.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
      int v81 = v153.__m_.__opaque[15] >= 0 ? &v153 : (std::mutex *)v153.__m_.__sig;
      buf.AudioObjectPropertySelector mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
      __int16 v143 = 1024;
      int v144 = 540;
      __int16 v145 = 2080;
      *(void *)char v146 = v81;
      _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)&buf, 0x1Cu);
      if (v153.__m_.__opaque[15] < 0) {
        operator delete((void *)v153.__m_.__sig);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v83 = (os_log_t *)sub_32A48(13);
    char v84 = *v83;
    if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
    {
      v152.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
      int v85 = v153.__m_.__opaque[15] >= 0 ? &v153 : (std::mutex *)v153.__m_.__sig;
      buf.AudioObjectPropertySelector mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
      __int16 v143 = 1024;
      int v144 = 541;
      __int16 v145 = 2080;
      *(void *)char v146 = v85;
      *(_WORD *)&v146[8] = 1024;
      *(_DWORD *)&v146[10] = a3;
      *(_WORD *)&v146[14] = 2048;
      *(void *)&v146[16] = a4;
      _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)&buf,
        0x2Cu);
      if (v153.__m_.__opaque[15] < 0) {
        operator delete((void *)v153.__m_.__sig);
      }
    }
    char v86 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v86 = &off_6414D8;
    v86[2] = 561211770;
  }
  if (!a6)
  {
    __int16 v87 = (os_log_t *)sub_32A48(13);
    int v88 = *v87;
    if (*v87 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
    {
      v152.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
      __int16 v89 = v153.__m_.__opaque[15] >= 0 ? &v153 : (std::mutex *)v153.__m_.__sig;
      buf.AudioObjectPropertySelector mSelector = 136315906;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
      __int16 v143 = 1024;
      int v144 = 542;
      __int16 v145 = 2080;
      *(void *)char v146 = "inData";
      *(_WORD *)&v146[8] = 2080;
      *(void *)&v146[10] = v89;
      _os_log_impl(&def_1E50E8, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", (uint8_t *)&buf, 0x26u);
      if (v153.__m_.__opaque[15] < 0) {
        operator delete((void *)v153.__m_.__sig);
      }
    }
    char v90 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v90 = &off_6414D8;
    _DWORD v90[2] = 561211770;
  }
  int v12 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1685483629)
  {
    switch(v12)
    {
      case 1162046576:
        unsigned int v18 = *a6;
        __int16 v19 = (os_log_t *)sub_32A48(17);
        unsigned int v20 = *v19;
        if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
        {
          buf.AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
          __int16 v143 = 1024;
          int v144 = 563;
          __int16 v145 = 1024;
          *(_DWORD *)char v146 = v18;
          _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d set DevicePropertyCodecLowPowerModeEnable = %u.", (uint8_t *)&buf, 0x18u);
        }
        break;
      case 1162701936:
        unsigned int v23 = *a6;
        double v24 = (os_log_t *)sub_32A48(17);
        CFTypeRef v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
        {
          buf.AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
          __int16 v143 = 1024;
          int v144 = 575;
          __int16 v145 = 1024;
          *(_DWORD *)char v146 = v23;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d set DevicePropertyMicrophoneLowPowerModeEnable = %u.", (uint8_t *)&buf, 0x18u);
        }
        break;
      case 1634759542:
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
        {
          int v105 = (os_log_t *)sub_32A48(13);
          char v106 = *v105;
          if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
          {
            v152.__cv_.__uint64_t sig = *(void *)a2;
            *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
            int v107 = v153.__m_.__opaque[15];
            uint64_t sig = v153.__m_.__sig;
            int v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            char v110 = &v153;
            buf.AudioObjectPropertySelector mSelector = 136316162;
            *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
            if (v107 < 0) {
              char v110 = (std::mutex *)sig;
            }
            __int16 v143 = 1024;
            int v144 = 548;
            __int16 v145 = 2080;
            *(void *)char v146 = v110;
            *(_WORD *)&v146[8] = 1024;
            *(_DWORD *)&v146[10] = a5;
            *(_WORD *)&v146[14] = 1024;
            *(_DWORD *)&v146[16] = v109;
            _os_log_impl(&def_1E50E8, v106, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              (uint8_t *)&buf,
              0x28u);
            if (v153.__m_.__opaque[15] < 0) {
              operator delete((void *)v153.__m_.__sig);
            }
          }
          char v111 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v111 = &off_6414D8;
          v111[2] = 561211770;
        }
        AudioObjectPropertyScope v14 = *(_DWORD *)(a2 + 4);
        buf.AudioObjectPropertySelector mSelector = 1987013732;
        buf.AudioObjectPropertyScope mScope = v14;
        buf.AudioObjectPropertyElement mElement = 0;
        (*(void (**)(uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, &buf, a3, a4, a5, a6);
        return;
      default:
LABEL_43:
        sub_4321A0(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
        return;
    }
    sub_4321A0(a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
    return;
  }
  if (v12 > 1836414052)
  {
    if (v12 == 1836414053)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
      {
        char v98 = (os_log_t *)sub_32A48(13);
        int v99 = *v98;
        if (*v98 && os_log_type_enabled(*v98, OS_LOG_TYPE_ERROR))
        {
          v152.__cv_.__uint64_t sig = *(void *)a2;
          *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
          int v100 = v153.__m_.__opaque[15];
          uint64_t v101 = v153.__m_.__sig;
          int v102 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          int v103 = &v153;
          buf.AudioObjectPropertySelector mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
          if (v100 < 0) {
            int v103 = (std::mutex *)v101;
          }
          __int16 v143 = 1024;
          int v144 = 605;
          __int16 v145 = 2080;
          *(void *)char v146 = v103;
          *(_WORD *)&v146[8] = 1024;
          *(_DWORD *)&v146[10] = a5;
          *(_WORD *)&v146[14] = 1024;
          *(_DWORD *)&v146[16] = v102;
          _os_log_impl(&def_1E50E8, v99, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)&buf,
            0x28u);
          if (v153.__m_.__opaque[15] < 0) {
            operator delete((void *)v153.__m_.__sig);
          }
        }
        char v104 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v104 = &off_6414D8;
        v104[2] = 561211770;
      }
      if (*(_DWORD *)(a2 + 8) == 6 && *(_DWORD *)(a2 + 4) == 1869968496)
      {
        uint64_t v21 = sub_23EE78();
        BOOL v22 = *a6 != 0;
        sub_24063C(v21, v22);
        return;
      }
    }
    else if (v12 == 1987013732)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
      {
        char v112 = (os_log_t *)sub_32A48(13);
        int v113 = *v112;
        if (*v112 && os_log_type_enabled(*v112, OS_LOG_TYPE_ERROR))
        {
          v152.__cv_.__uint64_t sig = *(void *)a2;
          *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
          int v114 = v153.__m_.__opaque[15];
          uint64_t v115 = v153.__m_.__sig;
          int v116 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          char v117 = &v153;
          buf.AudioObjectPropertySelector mSelector = 136316162;
          *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
          if (v114 < 0) {
            char v117 = (std::mutex *)v115;
          }
          __int16 v143 = 1024;
          int v144 = 581;
          __int16 v145 = 2080;
          *(void *)char v146 = v117;
          *(_WORD *)&v146[8] = 1024;
          *(_DWORD *)&v146[10] = a5;
          *(_WORD *)&v146[14] = 1024;
          *(_DWORD *)&v146[16] = v116;
          _os_log_impl(&def_1E50E8, v113, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)&buf,
            0x28u);
          if (v153.__m_.__opaque[15] < 0) {
            operator delete((void *)v153.__m_.__sig);
          }
        }
        char v118 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v118 = &off_6414D8;
        v118[2] = 561211770;
      }
      if (*(_DWORD *)(a2 + 8) == 6 && *(_DWORD *)(a2 + 4) == 1869968496)
      {
        uint64_t v15 = sub_23EE78();
        if (sub_23FC74(v15))
        {
          float v16 = (float)(*(float *)a6 + 100.0) / 100.0;
          uint64_t v17 = sub_23EE78();
          sub_240048(v17, v16);
          if (sub_1A1BE4((void *)(a1 + 512), (uint64_t)&qword_64E048)) {
            sub_1A1D20((void *)(a1 + 512), (unsigned int *)&qword_64E048);
          }
          if (sub_1A1BE4((void *)(a1 + 512), (uint64_t)&qword_64E058))
          {
            sub_1A1D20((void *)(a1 + 512), (unsigned int *)&qword_64E058);
          }
        }
        return;
      }
    }
    goto LABEL_43;
  }
  if (v12 == 1685483630)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
    {
      double v91 = (os_log_t *)sub_32A48(13);
      uint64_t v92 = *v91;
      if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_ERROR))
      {
        v152.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
        int v93 = v153.__m_.__opaque[15];
        uint64_t v94 = v153.__m_.__sig;
        int v95 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        char v96 = &v153;
        buf.AudioObjectPropertySelector mSelector = 136316162;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
        if (v93 < 0) {
          char v96 = (std::mutex *)v94;
        }
        __int16 v143 = 1024;
        int v144 = 617;
        __int16 v145 = 2080;
        *(void *)char v146 = v96;
        *(_WORD *)&v146[8] = 1024;
        *(_DWORD *)&v146[10] = a5;
        *(_WORD *)&v146[14] = 1024;
        *(_DWORD *)&v146[16] = v95;
        _os_log_impl(&def_1E50E8, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          (uint8_t *)&buf,
          0x28u);
        if (v153.__m_.__opaque[15] < 0) {
          operator delete((void *)v153.__m_.__sig);
        }
      }
      int v97 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v97 = &off_6414D8;
      v97[2] = 561211770;
    }
    *(unsigned char *)(a1 + 688) = *a6 != 0;
    return;
  }
  if (v12 != 1768255076) {
    goto LABEL_43;
  }
  if (__PAIR64__(*(_DWORD *)(a2 + 4), 1768255076) != qword_64E078 || *(_DWORD *)(a2 + 8) != dword_64E080)
  {
    uint64_t v26 = (os_log_t *)sub_32A48(17);
    os_log_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      buf.AudioObjectPropertySelector mSelector = 136315394;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
      __int16 v143 = 1024;
      int v144 = 643;
      int v28 = "%25s:%-5d Unknown property address using selector kAppleEmbeddedAudio_DevicePropertyInputEnableDevice. Ignoring.";
      char v29 = v27;
      os_log_type_t v30 = OS_LOG_TYPE_ERROR;
      uint32_t v31 = 18;
LABEL_53:
      _os_log_impl(&def_1E50E8, v29, v30, v28, (uint8_t *)&buf, v31);
      return;
    }
    return;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
  {
    char v119 = (os_log_t *)sub_32A48(13);
    char v120 = *v119;
    if (*v119 && os_log_type_enabled(*v119, OS_LOG_TYPE_ERROR))
    {
      v152.__cv_.__uint64_t sig = *(void *)a2;
      *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
      int v121 = v153.__m_.__opaque[15];
      uint64_t v122 = v153.__m_.__sig;
      int v123 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
      char v124 = &v153;
      buf.AudioObjectPropertySelector mSelector = 136316162;
      *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
      if (v121 < 0) {
        char v124 = (std::mutex *)v122;
      }
      __int16 v143 = 1024;
      int v144 = 624;
      __int16 v145 = 2080;
      *(void *)char v146 = v124;
      *(_WORD *)&v146[8] = 1024;
      *(_DWORD *)&v146[10] = a5;
      *(_WORD *)&v146[14] = 1024;
      *(_DWORD *)&v146[16] = v123;
      _os_log_impl(&def_1E50E8, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        (uint8_t *)&buf,
        0x28u);
      if (v153.__m_.__opaque[15] < 0) {
        operator delete((void *)v153.__m_.__sig);
      }
    }
    char v125 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v125 = &off_6414D8;
    v125[2] = 561211770;
  }
  unsigned int v13 = *a6;
  if (v13)
  {
    if (atomic_fetch_add((atomic_uint *volatile)(a1 + 692), 1u)) {
      return;
    }
  }
  else
  {
    if (!atomic_load((unsigned int *)(a1 + 692)))
    {
      char v126 = (os_log_t *)sub_32A48(13);
      char v127 = *v126;
      if (*v126 && os_log_type_enabled(*v126, OS_LOG_TYPE_ERROR))
      {
        buf.AudioObjectPropertySelector mSelector = 136315394;
        *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
        __int16 v143 = 1024;
        int v144 = 628;
        _os_log_impl(&def_1E50E8, v127, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Attempt to power off the built-in mic when mMicPowerOnCount is 0.\"", (uint8_t *)&buf, 0x12u);
      }
      char v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v128, "Attempt to power off the built-in mic when mMicPowerOnCount is 0.");
    }
    if (atomic_fetch_add((atomic_uint *volatile)(a1 + 692), 0xFFFFFFFF) != 1) {
      return;
    }
  }
  int v33 = (os_log_t *)sub_32A48(17);
  uint64_t v34 = *v33;
  if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_INFO))
  {
    char v35 = "dis";
    *(void *)&buf.AudioObjectPropertyScope mScope = "Device_HPMic_Aspen.cpp";
    buf.AudioObjectPropertySelector mSelector = 136315650;
    if (v13) {
      char v35 = "en";
    }
    __int16 v143 = 1024;
    int v144 = 634;
    __int16 v145 = 2080;
    *(void *)char v146 = v35;
    _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_INFO, "%25s:%-5d Non-redundant requesting to %sable microphone power. Calling the HAL.", (uint8_t *)&buf, 0x1Cu);
  }
  AudioObjectID v36 = *(_DWORD *)(a1 + 268);
  int inData = v13 != 0;
  uint64_t v37 = sub_32A48(13);
  if (*(unsigned char *)(v37 + 8))
  {
    int v38 = *(NSObject **)v37;
    if (*(void *)v37)
    {
      if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
      {
        v152.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
        int v39 = v153.__m_.__opaque[15] >= 0 ? &v153 : (std::mutex *)v153.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v143 = 1024;
        int v144 = 166;
        __int16 v145 = 2080;
        *(void *)char v146 = v39;
        *(_WORD *)&v146[8] = 1024;
        *(_DWORD *)&v146[10] = v36;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v153.__m_.__opaque[15] < 0) {
          operator delete((void *)v153.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v137 = v36;
  uint64_t v138 = *(void *)a2;
  int v139 = *(_DWORD *)(a2 + 8);
  int v140 = a3;
  int v141 = a4;
  unint64_t v40 = sub_2286C8((uint64_t)&v137);
  if (HIDWORD(v40)) {
    BOOL v41 = 0;
  }
  else {
    BOOL v41 = inData == v40;
  }
  int v42 = v41;
  uint64_t v43 = sub_32A48(13);
  uint64_t v44 = *(void *)(v43 + 8);
  if (v42)
  {
    if (v44)
    {
      os_log_t v45 = *(os_log_t *)v43;
      if (*(void *)v43)
      {
        if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
        {
          buf.AudioObjectPropertySelector mSelector = 136315650;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v143 = 1024;
          int v144 = 191;
          __int16 v145 = 1024;
          *(_DWORD *)char v146 = v36;
          int v28 = "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitiv"
                "e for a notification on id %u.";
LABEL_81:
          char v29 = v45;
          os_log_type_t v30 = OS_LOG_TYPE_DEBUG;
          uint32_t v31 = 24;
          goto LABEL_53;
        }
      }
    }
    return;
  }
  if (v44)
  {
    uint64_t v46 = *(NSObject **)v43;
    if (*(void *)v43)
    {
      if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
      {
        v152.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v152.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v153, (unsigned int *)&v152);
        unint64_t v47 = v153.__m_.__opaque[15] >= 0 ? &v153 : (std::mutex *)v153.__m_.__sig;
        buf.AudioObjectPropertySelector mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v143 = 1024;
        int v144 = 199;
        __int16 v145 = 2080;
        *(void *)char v146 = v47;
        *(_WORD *)&v146[8] = 1024;
        *(_DWORD *)&v146[10] = v36;
        _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v153.__m_.__opaque[15] < 0) {
          operator delete((void *)v153.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
  OSStatus v48 = AudioObjectSetPropertyData(v36, &buf, a3, a4, 4u, &inData);
  if (v48)
  {
    long long v49 = (os_log_t *)sub_32A48(13);
    long long v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v153, v48);
      int v51 = v153.__m_.__opaque[15];
      uint64_t v52 = v153.__m_.__sig;
      uint64_t inClientData = *(void *)a2;
      int v135 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&v152, (unsigned int *)&inClientData);
      uint64_t v53 = &v153;
      if (v51 < 0) {
        uint64_t v53 = (std::mutex *)v52;
      }
      if (v152.__cv_.__opaque[15] >= 0) {
        uint64_t v54 = (uint64_t)&v152;
      }
      else {
        uint64_t v54 = v152.__cv_.__sig;
      }
      buf.AudioObjectPropertySelector mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v143 = 1024;
      int v144 = 207;
      __int16 v145 = 1024;
      *(_DWORD *)char v146 = v48;
      *(_WORD *)&v146[4] = 2080;
      *(void *)&v146[6] = v53;
      *(_WORD *)&v146[14] = 2080;
      *(void *)&v146[16] = v54;
      *(_WORD *)&v146[24] = 1024;
      *(_DWORD *)&v146[26] = v36;
      _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
      if (v152.__cv_.__opaque[15] < 0) {
        operator delete((void *)v152.__cv_.__sig);
      }
      if (v153.__m_.__opaque[15] < 0) {
        operator delete((void *)v153.__m_.__sig);
      }
    }
    return;
  }
  unint64_t v55 = sub_2286C8((uint64_t)&v137);
  if (HIDWORD(v55) || inData != v55)
  {
    memset(v153.__m_.__opaque, 0, sizeof(v153.__m_.__opaque));
    v152.__cv_.__uint64_t sig = 1018212795;
    memset(v152.__cv_.__opaque, 0, sizeof(v152.__cv_.__opaque));
    v153.__m_.__uint64_t sig = 850045863;
    char v136 = 0;
    sub_662FC(&inClientData, v36, (AudioObjectPropertyAddress *)a2, (uint64_t)&v152, (uint64_t)&v153, (uint64_t)&v136);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v60.__d_.__rep_) / -1000)
    {
      unint64_t v58 = sub_2286C8((uint64_t)&v137);
      int v59 = v58;
      if (HIDWORD(v58)) {
        goto LABEL_153;
      }
      if (inData == v58) {
        break;
      }
      if (i <= 0)
      {
        char v76 = (os_log_t *)sub_32A48(13);
        os_log_t v77 = *v76;
        if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
        {
          uint64_t v130 = *(void *)a2;
          int v131 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v130);
          if (v133 >= 0) {
            p_luint64_t k = &__lk;
          }
          else {
            p_luint64_t k = __lk.__m_;
          }
          buf.AudioObjectPropertySelector mSelector = 136316930;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v143 = 1024;
          int v144 = 248;
          __int16 v145 = 2080;
          *(void *)char v146 = "set";
          *(_WORD *)&v146[8] = 2080;
          *(void *)&v146[10] = p_lk;
          *(_WORD *)&v146[18] = 2080;
          *(void *)&v146[20] = "set";
          *(_WORD *)&v146[28] = 1024;
          BOOL v147 = inData == v59;
          __int16 v148 = 1024;
          int v149 = 0;
          __int16 v150 = 1024;
          AudioObjectID v151 = v36;
          char v72 = "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.";
          int v73 = v77;
          os_log_type_t v74 = OS_LOG_TYPE_ERROR;
          uint32_t v75 = 66;
LABEL_151:
          _os_log_impl(&def_1E50E8, v73, v74, v72, (uint8_t *)&buf, v75);
          if (v133 < 0) {
            operator delete(__lk.__m_);
          }
        }
        goto LABEL_153;
      }
      v60.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v61 = sub_32A48(13);
      if (*(unsigned char *)(v61 + 8))
      {
        long long v62 = *(NSObject **)v61;
        if (*(void *)v61)
        {
          if (os_log_type_enabled(*(os_log_t *)v61, OS_LOG_TYPE_DEBUG))
          {
            buf.AudioObjectPropertySelector mSelector = 136315906;
            *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
            __int16 v143 = 1024;
            int v144 = 257;
            __int16 v145 = 2080;
            *(void *)char v146 = "with timeout";
            *(_WORD *)&v146[8] = 1024;
            *(_DWORD *)&v146[10] = v36;
            _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.AudioObjectPropertySelector mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v153;
      __lk.__owns_ = 1;
      std::mutex::lock(&v153);
      v63.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v136)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v64 = v63.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v64 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_117;
          }
          v65.__d_.__rep_ = v64 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v65.__d_.__rep_ >= 1) {
            break;
          }
LABEL_135:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v64 || v136) {
            goto LABEL_117;
          }
        }
        std::chrono::steady_clock::now();
        v66.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v66.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0;
          goto LABEL_131;
        }
        if (v66.__d_.__rep_ < 1)
        {
          if ((unint64_t)v66.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_130;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v66.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_131;
          }
LABEL_130:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = 1000 * v66.__d_.__rep_;
LABEL_131:
          if (v67 > (v65.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v68.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_134:
            std::condition_variable::__do_timed_wait(&v152, &__lk, v68);
            std::chrono::steady_clock::now();
            goto LABEL_135;
          }
        }
        v68.__d_.__rep_ = v67 + v65.__d_.__rep_;
        goto LABEL_134;
      }
LABEL_117:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v69 = sub_32A48(13);
    if (*(unsigned char *)(v69 + 8))
    {
      os_log_t v70 = *(os_log_t *)v69;
      if (*(void *)v69)
      {
        if (os_log_type_enabled(*(os_log_t *)v69, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v130 = *(void *)a2;
          int v131 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v130);
          if (v133 >= 0) {
            uint64_t m = &__lk;
          }
          else {
            uint64_t m = __lk.__m_;
          }
          buf.AudioObjectPropertySelector mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v143 = 1024;
          int v144 = 288;
          __int16 v145 = 2080;
          *(void *)char v146 = m;
          *(_WORD *)&v146[8] = 1024;
          *(_DWORD *)&v146[10] = v36;
          char v72 = "%25s:%-5d Successfully synchronized the property %s on id %u.";
          int v73 = v70;
          os_log_type_t v74 = OS_LOG_TYPE_DEBUG;
          uint32_t v75 = 34;
          goto LABEL_151;
        }
      }
    }
LABEL_153:
    sub_6651C((uint64_t)&inClientData);
    std::condition_variable::~condition_variable(&v152);
    std::mutex::~mutex(&v153);
    return;
  }
  uint64_t v56 = sub_32A48(13);
  if (*(unsigned char *)(v56 + 8))
  {
    os_log_t v45 = *(os_log_t *)v56;
    if (*(void *)v56)
    {
      if (os_log_type_enabled(*(os_log_t *)v56, OS_LOG_TYPE_DEBUG))
      {
        buf.AudioObjectPropertySelector mSelector = 136315650;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v143 = 1024;
        int v144 = 219;
        __int16 v145 = 1024;
        *(_DWORD *)char v146 = v36;
        int v28 = "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive "
              "for a notification on id %u.";
        goto LABEL_81;
      }
    }
  }
}

void sub_228620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::condition_variable *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  sub_6651C((uint64_t)&a17);
  std::condition_variable::~condition_variable((std::condition_variable *)&a36);
  std::mutex::~mutex((std::mutex *)(v36 - 184));
  _Unwind_Resume(a1);
}

unint64_t sub_2286C8(uint64_t a1)
{
  AudioObjectID v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.AudioObjectPropertySelector mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.AudioObjectPropertyElement mElement = *(_DWORD *)(a1 + 12);
  unint64_t v4 = sub_26DAC((AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  char v6 = v5;
  if (v4)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v20, v4);
        int v9 = v21;
        uint64_t v10 = (void **)v20[0];
        uint64_t v16 = *v2;
        int v17 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
        AudioObjectPropertyElement v11 = v20;
        if (v9 < 0) {
          AudioObjectPropertyElement v11 = v10;
        }
        if (v19 >= 0) {
          int v12 = __p;
        }
        else {
          int v12 = (void **)__p[0];
        }
        AudioObjectID v13 = *(_DWORD *)a1;
        buf.AudioObjectPropertySelector mSelector = 136316418;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        int v26 = v4;
        __int16 v27 = 2080;
        int v28 = v11;
        __int16 v29 = 2080;
        os_log_type_t v30 = v12;
        __int16 v31 = 1024;
        AudioObjectID v32 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
    }
  }
  unint64_t v14 = HIDWORD(v4);
  if (!v6) {
    unint64_t v14 = 0;
  }
  return v14 | (v4 << 32);
}

void sub_228874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_228898(uint64_t a1, const AudioObjectPropertyAddress *a2, uint64_t a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    AudioObjectID v32 = (os_log_t *)sub_32A48(13);
    int v33 = *v32;
    if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
      uint64_t v34 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 429;
      __int16 v107 = 2080;
      char v108 = (const char *)v34;
      _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v36 = (os_log_t *)sub_32A48(13);
    uint64_t v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
      int v38 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 430;
      __int16 v107 = 2080;
      char v108 = (const char *)v38;
      __int16 v109 = 1024;
      LODWORD(v110[0]) = a3;
      WORD2(v110[0]) = 2048;
      *(void *)((char *)v110 + 6) = a4;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    int v39 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v39 = &off_6414D8;
    v39[2] = 561211770;
  }
  if (!a6)
  {
    unint64_t v40 = (os_log_t *)sub_32A48(13);
    BOOL v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
      int v42 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
      __int16 v105 = 1024;
      int v106 = 431;
      __int16 v107 = 2080;
      char v108 = "outData";
      __int16 v109 = 2080;
      v110[0] = v42;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v103 < 0) {
        operator delete(*(void **)&__p.mSelector);
      }
    }
    uint64_t v43 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v43 = &off_6414D8;
    v43[2] = 561211770;
  }
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector <= 1986290210)
    {
      if (mSelector == 1836414053)
      {
        UInt32 v26 = *a5;
        if (v26 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
        {
          uint64_t v52 = (os_log_t *)sub_32A48(13);
          uint64_t v53 = *v52;
          if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
            int v54 = v103;
            unint64_t v55 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v56 = *a5;
            int v57 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            p_p = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
            if (v54 < 0) {
              p_p = v55;
            }
            __int16 v105 = 1024;
            int v106 = 493;
            __int16 v107 = 2080;
            char v108 = (const char *)p_p;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v56;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v57;
            _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }
          int v59 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v59 = &off_6414D8;
          v59[2] = 561211770;
        }
        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          goto LABEL_49;
        }
        __int16 v27 = (unsigned __int8 *)sub_23EE78();
        int v17 = sub_2404BC(v27);
      }
      else
      {
        if (mSelector != 1986229104) {
          goto LABEL_49;
        }
        UInt32 v15 = *a5;
        if (v15 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
        {
          char v76 = (os_log_t *)sub_32A48(13);
          os_log_t v77 = *v76;
          if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
            int v78 = v103;
            int v79 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v80 = *a5;
            int v81 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            char v82 = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
            if (v78 < 0) {
              char v82 = v79;
            }
            __int16 v105 = 1024;
            int v106 = 505;
            __int16 v107 = 2080;
            char v108 = (const char *)v82;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v80;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v81;
            _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }
          int v83 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v83 = &off_6414D8;
          v83[2] = 561211770;
        }
        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          goto LABEL_49;
        }
        uint64_t v16 = sub_23EE78();
        int v17 = sub_23FC74(v16);
      }
      *(_DWORD *)a6 = v17;
      return;
    }
    if (mSelector == 1986290211)
    {
      UInt32 v31 = *a5;
      if (v31 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
      {
        std::chrono::system_clock::time_point v60 = (os_log_t *)sub_32A48(13);
        uint64_t v61 = *v60;
        if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
        {
          uint64_t v100 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
          int v62 = v103;
          std::chrono::steady_clock::time_point v63 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v64 = *a5;
          int v65 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          std::chrono::system_clock::time_point v66 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
          if (v62 < 0) {
            std::chrono::system_clock::time_point v66 = v63;
          }
          __int16 v105 = 1024;
          int v106 = 480;
          __int16 v107 = 2080;
          char v108 = (const char *)v66;
          __int16 v109 = 1024;
          LODWORD(v110[0]) = v64;
          WORD2(v110[0]) = 1024;
          *(_DWORD *)((char *)v110 + 6) = v65;
          _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v103 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v67 = &off_6414D8;
        v67[2] = 561211770;
      }
      if (a2->mElement == 6 && a2->mScope == 1869968496)
      {
        *(_OWORD *)a6 = xmmword_4E7920;
        return;
      }
    }
    else if (mSelector == 1987013732)
    {
      UInt32 v22 = *a5;
      if (v22 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
      {
        uint64_t v92 = (os_log_t *)sub_32A48(13);
        int v93 = *v92;
        if (*v92 && os_log_type_enabled(*v92, OS_LOG_TYPE_ERROR))
        {
          uint64_t v100 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
          int v94 = v103;
          int v95 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v96 = *a5;
          int v97 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          char v98 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
          if (v94 < 0) {
            char v98 = v95;
          }
          __int16 v105 = 1024;
          int v106 = 467;
          __int16 v107 = 2080;
          char v108 = (const char *)v98;
          __int16 v109 = 1024;
          LODWORD(v110[0]) = v96;
          WORD2(v110[0]) = 1024;
          *(_DWORD *)((char *)v110 + 6) = v97;
          _os_log_impl(&def_1E50E8, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v103 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }
        int v99 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v99 = &off_6414D8;
        v99[2] = 561211770;
      }
      if (a2->mElement == 6 && a2->mScope == 1869968496)
      {
        __int16 v23 = (float *)sub_23EE78();
        float v24 = (float)(sub_23FDA8(v23) * 100.0) + -100.0;
        goto LABEL_53;
      }
    }
LABEL_49:
    sub_432AE8(a1, a2, a3, a4, a5, a6);
    return;
  }
  if (mSelector <= 1685483629)
  {
    if (mSelector != 1064725619)
    {
      if (mSelector == 1634759542)
      {
        UInt32 v13 = *a5;
        if (v13 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
        {
          std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v68 = (os_log_t *)sub_32A48(13);
          uint64_t v69 = *v68;
          if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)&a2->mSelector;
            AudioObjectPropertyElement mElement = a2->mElement;
            sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
            int v70 = v103;
            int v71 = *(AudioObjectPropertyAddress **)&__p.mSelector;
            UInt32 v72 = *a5;
            int v73 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            os_log_type_t v74 = &__p;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
            if (v70 < 0) {
              os_log_type_t v74 = v71;
            }
            __int16 v105 = 1024;
            int v106 = 437;
            __int16 v107 = 2080;
            char v108 = (const char *)v74;
            __int16 v109 = 1024;
            LODWORD(v110[0]) = v72;
            WORD2(v110[0]) = 1024;
            *(_DWORD *)((char *)v110 + 6) = v73;
            _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              buf,
              0x28u);
            if (v103 < 0) {
              operator delete(*(void **)&__p.mSelector);
            }
          }
          uint32_t v75 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint32_t v75 = &off_6414D8;
          v75[2] = 561211770;
        }
        AudioObjectPropertyScope mScope = a2->mScope;
        *(_DWORD *)AudioObjectPropertyAddress buf = 1987013732;
        *(_DWORD *)&uint8_t buf[4] = mScope;
        *(_DWORD *)&buf[8] = 0;
        (*(void (**)(uint64_t, unsigned char *, uint64_t, const void *, UInt32 *, float *))(*(void *)a1 + 40))(a1, buf, a3, a4, a5, a6);
        return;
      }
      goto LABEL_49;
    }
    UInt32 v25 = *a5;
    if (v25 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
    {
      uint64_t v44 = (os_log_t *)sub_32A48(13);
      os_log_t v45 = *v44;
      if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
      {
        uint64_t v100 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
        int v46 = v103;
        unint64_t v47 = *(AudioObjectPropertyAddress **)&__p.mSelector;
        UInt32 v48 = *a5;
        int v49 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
        long long v50 = &__p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
        if (v46 < 0) {
          long long v50 = v47;
        }
        __int16 v105 = 1024;
        int v106 = 523;
        __int16 v107 = 2080;
        char v108 = (const char *)v50;
        __int16 v109 = 1024;
        LODWORD(v110[0]) = v48;
        WORD2(v110[0]) = 1024;
        *(_DWORD *)((char *)v110 + 6) = v49;
        _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v103 < 0) {
          operator delete(*(void **)&__p.mSelector);
        }
      }
      int v51 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v51 = &off_6414D8;
      v51[2] = 561211770;
    }
    int v21 = 1;
LABEL_31:
    *(_DWORD *)a6 = v21;
    return;
  }
  if (mSelector != 1685483630)
  {
    if (mSelector == 1835103844)
    {
      UInt32 v18 = *a5;
      if (v18 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4))
      {
        char v84 = (os_log_t *)sub_32A48(13);
        int v85 = *v84;
        if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
        {
          uint64_t v100 = *(void *)&a2->mSelector;
          AudioObjectPropertyElement mElement = a2->mElement;
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v100);
          int v86 = v103;
          __int16 v87 = *(AudioObjectPropertyAddress **)&__p.mSelector;
          UInt32 v88 = *a5;
          int v89 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(*(void *)a1 + 32))(a1, a2, a3, a4);
          char v90 = &__p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
          if (v86 < 0) {
            char v90 = v87;
          }
          __int16 v105 = 1024;
          int v106 = 446;
          __int16 v107 = 2080;
          char v108 = (const char *)v90;
          __int16 v109 = 1024;
          LODWORD(v110[0]) = v88;
          WORD2(v110[0]) = 1024;
          *(_DWORD *)((char *)v110 + 6) = v89;
          _os_log_impl(&def_1E50E8, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v103 < 0) {
            operator delete(*(void **)&__p.mSelector);
          }
        }
        double v91 = __cxa_allocate_exception(0x10uLL);
        *(void *)double v91 = &off_6414D8;
        v91[2] = 561211770;
      }
      AudioObjectPropertyScope v20 = a2->mScope;
      AudioObjectPropertyElement v19 = a2->mElement;
      if (v19 == 6 && v20 == 1869968496)
      {
        int v21 = -1027131310;
        goto LABEL_31;
      }
      __p.int mSelector = 1986290211;
      __p.AudioObjectPropertyScope mScope = v20;
      __p.AudioObjectPropertyElement mElement = v19;
      LODWORD(v100) = 16;
      sub_432AE8(a1, &__p, 0, 0, (UInt32 *)&v100, (float *)buf);
      float v24 = *(double *)buf;
LABEL_53:
      *a6 = v24;
      return;
    }
    goto LABEL_49;
  }
  int v28 = (os_log_t *)sub_32A48(17);
  __int16 v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(&__p, a2->mSelector);
    os_log_type_t v30 = v103 >= 0 ? &__p : *(AudioObjectPropertyAddress **)&__p.mSelector;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_HPMic_Aspen.cpp";
    __int16 v105 = 1024;
    int v106 = 518;
    __int16 v107 = 2080;
    char v108 = (const char *)v30;
    _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Property '%s' is write-only", buf, 0x1Cu);
    if (v103 < 0) {
      operator delete(*(void **)&__p.mSelector);
    }
  }
  *a5 = 0;
}

void sub_229ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_229B18(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    AudioObjectPropertyElement v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      UInt32 v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      float v24 = "Device_HPMic_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 368;
      __int16 v27 = 2080;
      int v28 = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    UInt32 v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      int v17 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      float v24 = "Device_HPMic_Aspen.cpp";
      __int16 v25 = 1024;
      int v26 = 369;
      __int16 v27 = 2080;
      int v28 = v17;
      __int16 v29 = 1024;
      UInt32 v30 = a3;
      __int16 v31 = 2048;
      AudioObjectID v32 = a4;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    UInt32 v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)UInt32 v18 = &off_6414D8;
    v18[2] = 561211770;
  }
  int mSelector = a2->mSelector;
  uint64_t result = 4;
  if ((int)a2->mSelector <= 1836414052)
  {
    if (mSelector > 1685483629)
    {
      if (mSelector == 1685483630) {
        return result;
      }
      int v10 = 1835103844;
    }
    else
    {
      if (mSelector == 1064725619) {
        return result;
      }
      int v10 = 1634759542;
    }
LABEL_16:
    if (mSelector == v10) {
      return result;
    }
    goto LABEL_18;
  }
  if (mSelector > 1986290210)
  {
    if (mSelector == 1986290211) {
      return 16;
    }
    int v10 = 1987013732;
    goto LABEL_16;
  }
  if (mSelector != 1836414053)
  {
    int v10 = 1986229104;
    goto LABEL_16;
  }
  if (a2->mElement == 6)
  {
    int mSelector = a2->mScope;
    int v10 = 1869968496;
    goto LABEL_16;
  }
LABEL_18:

  return sub_433254(a1, a2, a3, a4);
}

uint64_t sub_229F04(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      if (mSelector == 1986290211)
      {
LABEL_18:
        if (a2->mElement != 6 || a2->mScope != 1869968496) {
          return sub_43356C(a1, a2);
        }
        return 0;
      }
      if (mSelector != 1987013732) {
        return sub_43356C(a1, a2);
      }
    }
    else if (mSelector != 1836414053)
    {
      if (mSelector != 1986229104) {
        return sub_43356C(a1, a2);
      }
      goto LABEL_18;
    }
    if (a2->mElement != 6 || a2->mScope != 1869968496) {
      return sub_43356C(a1, a2);
    }
    return 1;
  }
  uint64_t v3 = 1;
  if (mSelector > 1685483629)
  {
    if (mSelector == 1685483630) {
      return v3;
    }
    if (mSelector != 1835103844) {
      return sub_43356C(a1, a2);
    }
    return 0;
  }
  if (mSelector == 1064725619) {
    return 0;
  }
  if (mSelector != 1634759542) {
    return sub_43356C(a1, a2);
  }
  return v3;
}

BOOL sub_22A018(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1836414052)
  {
    if (mSelector > 1986290210)
    {
      BOOL v6 = mSelector == 1987013732;
      int v7 = 1986290211;
    }
    else
    {
      BOOL v6 = mSelector == 1836414053;
      int v7 = 1986229104;
    }
    BOOL v9 = v6 || mSelector == v7;
    if (v9 && a2->mElement == 6 && a2->mScope == 1869968496) {
      return 1;
    }
    goto LABEL_22;
  }
  BOOL result = 1;
  if (mSelector > 1685483629)
  {
    if (mSelector != 1685483630 && mSelector != 1835103844)
    {
LABEL_22:
      sub_50848((std::mutex *)a1);
      return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
    }
  }
  else
  {
    if (mSelector != 1064725619)
    {
      if (mSelector == 1634759542) {
        return result;
      }
      goto LABEL_22;
    }
    return a2->mScope == 1869968496;
  }
  return result;
}

void sub_22A148(void *a1)
{
  sub_22A180(a1);

  operator delete();
}

uint64_t sub_22A180(void *a1)
{
  *a1 = off_627A60;
  uint64_t v2 = a1[83];
  a1[83] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1A97C8((uint64_t)(a1 + 64));
  sub_1A980C(a1 + 63);
  uint64_t v3 = a1[62];
  a1[62] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_43456C((uint64_t)a1);
}

uint64_t sub_22A244(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  BOOL v6 = (void *)sub_433710(a1, a2, a3, a3, 0);
  *BOOL v6 = off_627A60;
  v6[62] = 0;
  v6[63] = 0;
  sub_1A9860((uint64_t)(v6 + 64));
  *(unsigned char *)(a1 + 656) = 0;
  if (!sub_8B774())
  {
    *(void *)AudioObjectPropertyAddress inAddress = &inAddress[8];
    *(void *)&inAddress[8] = 0;
    v23[0] = 0;
    v23[1] = 0;
    *(void *)&inAddress[16] = 0;
    char v22 = v23;
    sub_38DB90((uint64_t *)inAddress, 0x706D6269u, 1768778083);
    sub_38DB90((uint64_t *)inAddress, 0x706D6269u, 1768778033);
    sub_38DB90((uint64_t *)inAddress, 0x706D7769u, 1701669219);
    sub_38DB90((uint64_t *)inAddress, 0x70747469u, 1701669219);
    sub_38DD5C((uint64_t)inAddress, 0x656D6963u, 1886222185);
    sub_38DD5C((uint64_t)inAddress, 0x656D6963u, 1886680169);
    sub_38DD5C((uint64_t)inAddress, 0x696D6963u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x696D6931u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x736D6963u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x696D6932u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x6C6D6963u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x666D6963u, 1886216809);
    sub_38DD5C((uint64_t)inAddress, 0x6265616Du, 1886216809);
    operator new();
  }
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 672) = sub_3EFF58();
  *(unsigned char *)(a1 + 680) = 0;
  *(_DWORD *)(a1 + 684) = 2;
  *(unsigned char *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 692) = 0;
  if (!a2)
  {
    int v12 = (os_log_t *)sub_32A48(13);
    UInt32 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 238;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", inAddress, 0x12u);
    }
    goto LABEL_13;
  }
  if (!a3)
  {
    UInt32 v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
      *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
      *(_WORD *)&inAddress[12] = 1024;
      *(_DWORD *)&inAddress[14] = 239;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", inAddress, 0x12u);
    }
LABEL_13:
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
    goto LABEL_23;
  }
  AudioObjectID v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  if (AudioObjectHasProperty(v7, (const AudioObjectPropertyAddress *)&qword_64E078))
  {
    AudioObjectID v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    int inData = 0;
    strcpy(inAddress, "dneitpni");
    inAddress[9] = 0;
    *(_WORD *)&inAddress[10] = 0;
    OSStatus v9 = AudioObjectSetPropertyData(v8, (const AudioObjectPropertyAddress *)inAddress, 0, 0, 4u, &inData);
    if (v9)
    {
      int v17 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v17 = &off_6414D8;
      v17[2] = v9;
    }
    if (atomic_load((unsigned int *)(a1 + 692)))
    {
      UInt32 v18 = (os_log_t *)sub_32A48(13);
      uint64_t v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
        *(void *)&inAddress[4] = "Device_HPMic_Aspen.cpp";
        *(_WORD *)&inAddress[12] = 1024;
        *(_DWORD *)&inAddress[14] = 247;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION FAILURE (std::logic_error).", inAddress, 0x12u);
      }
      exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Postcondition failure.");
LABEL_23:
    }
  }
  return a1;
}

void sub_22A750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __cxa_free_exception(v17);
  uint64_t v19 = v15[83];
  v15[83] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_1A97C8(v16);
  sub_1A980C(v15 + 63);
  uint64_t v20 = v15[62];
  v15[62] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  sub_43456C((uint64_t)v15);
  _Unwind_Resume(a1);
}

uint64_t sub_22A860(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &qword_64E078);
  if (result)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    unint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315394;
        AudioObjectID v7 = "Device_HPMic_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 120;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Requesting HPMic power to be disabled.", (uint8_t *)&v6, 0x12u);
      }
    }
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 0;
    return sub_1A99B8(v5);
  }
  return result;
}

uint64_t sub_22A96C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), &qword_64E078);
  if (result)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    unint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
      {
        int v6 = 136315394;
        AudioObjectID v7 = "Device_HPMic_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 108;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Requesting HPMic power to be enabled.", (uint8_t *)&v6, 0x12u);
      }
    }
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 1;
    return sub_1A99B8(v5);
  }
  return result;
}

void sub_22AA7C()
{
}

uint64_t sub_22AA98(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_22AABC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_627C48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_22AB10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_627C48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

__n128 sub_22AB30@<Q0>(AudioObjectID a1@<W1>, __n128 *a2@<X8>)
{
  unint64_t v4 = (os_log_t *)sub_32A48(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 136315650;
    int v10 = "Device_USB_iAP_Aspen.cpp";
    __int16 v11 = 1024;
    int v12 = 439;
    __int16 v13 = 1024;
    AudioObjectID v14 = a1;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d stream ID = %u", (uint8_t *)&v9, 0x18u);
  }
  int v6 = operator new(0x70uLL);
  v6[1] = 0;
  _OWORD v6[2] = 0;
  *int v6 = off_627EF0;
  uint64_t v7 = sub_1941C8((uint64_t)(v6 + 3), a1);
  v6[3] = off_628110;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a2 = result;
  return result;
}

void sub_22AC60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_22AC84(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_22ACA8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_627EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_22ACFC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_627EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_22AD1C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886745455)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    unint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v13 = "Device_USB_iAP_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 426;
      __int16 v16 = 2080;
      int v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    int v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v13 = "Device_USB_iAP_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 427;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_22AED4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_22AEF0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v4 = sub_32A48(17);
    uint64_t v5 = sub_32A48(37);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_8;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_8:
    uint64_t v11 = sub_32A48(36);
    char v12 = 0;
    uint64_t v13 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v14 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v15 = *(int *)&buf[4 * v13];
      char v16 = v12;
      if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
        break;
      }
      char v12 = 1;
      uint64_t v13 = 1;
      if (v16) {
        goto LABEL_14;
      }
    }
    if ((v14 & v15) == 0) {
      uint64_t v4 = v11;
    }
LABEL_14:
    int v17 = *(NSObject **)v4;
    if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 401;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Getting sample rate from USB HAL device.", buf, 0x12u);
    }
    double outData = 0.0;
    UInt32 ioDataSize = 8;
    AudioObjectID v18 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    OSStatus PropertyData = AudioObjectGetPropertyData(v18, (const AudioObjectPropertyAddress *)&qword_64E1E0, 0, 0, &ioDataSize, &outData);
    if (PropertyData)
    {
      uint64_t v20 = (os_log_t *)sub_32A48(17);
      int v21 = *v20;
      if (*v20)
      {
        if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
          __int16 v54 = 1024;
          int v55 = 405;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL reported an error attempting to get the sample rate.", buf, 0x12u);
        }
      }
    }
    uint64_t v22 = sub_32A48(17);
    uint64_t v23 = sub_32A48(37);
    char v24 = 0;
    uint64_t v25 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v26 = *(void *)(v22 + 8);
    while (1)
    {
      uint64_t v27 = *(int *)&buf[4 * v25];
      char v28 = v24;
      if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
        break;
      }
      char v24 = 1;
      uint64_t v25 = 1;
      if (v28) {
        goto LABEL_27;
      }
    }
    if ((v26 & v27) == 0) {
      uint64_t v22 = v23;
    }
LABEL_27:
    uint64_t v29 = sub_32A48(36);
    char v30 = 0;
    uint64_t v31 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v32 = *(void *)(v22 + 8);
    while (1)
    {
      uint64_t v33 = *(int *)&buf[4 * v31];
      char v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      char v30 = 1;
      uint64_t v31 = 1;
      if (v34) {
        goto LABEL_33;
      }
    }
    if ((v32 & v33) == 0) {
      uint64_t v22 = v29;
    }
LABEL_33:
    char v35 = *(NSObject **)v22;
    if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
    {
      int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 406;
      __int16 v56 = 1024;
      LODWORD(v57[0]) = v36;
      WORD2(v57[0]) = 2048;
      *(double *)((char *)v57 + 6) = outData;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d USB HAL device %u reported a sample rate of %f.", buf, 0x22u);
    }
    if (!PropertyData)
    {
      uint64_t v37 = sub_32A48(17);
      uint64_t v38 = sub_32A48(37);
      char v39 = 0;
      uint64_t v40 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v41 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v42 = *(int *)&buf[4 * v40];
        char v43 = v39;
        if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
          break;
        }
        char v39 = 1;
        uint64_t v40 = 1;
        if (v43) {
          goto LABEL_43;
        }
      }
      if ((v41 & v42) == 0) {
        uint64_t v37 = v38;
      }
LABEL_43:
      uint64_t v44 = sub_32A48(36);
      char v45 = 0;
      uint64_t v46 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v47 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v48 = *(int *)&buf[4 * v46];
        char v49 = v45;
        if (((v47 & v48) != 0) != ((*(void *)(v44 + 8) & v48) != 0)) {
          break;
        }
        char v45 = 1;
        uint64_t v46 = 1;
        if (v49) {
          goto LABEL_49;
        }
      }
      if ((v47 & v48) == 0) {
        uint64_t v37 = v44;
      }
LABEL_49:
      long long v50 = *(NSObject **)v37;
      if (v50)
      {
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
          __int16 v54 = 1024;
          int v55 = 410;
          __int16 v56 = 2048;
          *(double *)int v57 = outData;
          _os_log_impl(&def_1E50E8, v50, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling SetSampleRate() to value reported by USB HAL device (%f).", buf, 0x1Cu);
        }
      }
      sub_22B3E8(a1, 0, outData);
    }
  }
}

void sub_22B3E8(uint64_t a1, int a2, double a3)
{
  uint64_t v6 = sub_32A48(17);
  uint64_t v7 = sub_32A48(37);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12) {
      goto LABEL_7;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_7:
  uint64_t v13 = sub_32A48(36);
  char v15 = 0;
  uint64_t v16 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v17 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v18 = *(int *)&buf[4 * v16];
    char v19 = v15;
    if (((v17 & v18) != 0) != ((*(void *)(v13 + 8) & v18) != 0)) {
      break;
    }
    char v15 = 1;
    uint64_t v16 = 1;
    if (v19) {
      goto LABEL_13;
    }
  }
  if ((v17 & v18) == 0) {
    uint64_t v6 = v13;
  }
LABEL_13:
  uint64_t v20 = *(NSObject **)v6;
  if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v90 = 1024;
    int v91 = 517;
    __int16 v92 = 2048;
    *(double *)int v93 = a3;
    *(_WORD *)&v93[8] = 1024;
    *(_DWORD *)&v93[10] = a2;
    _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Entered Device_USB_iAP_Aspen::SetSampleRate(sampleRate %f, synchronous %u).", buf, 0x22u);
  }
  v14.n128_u64[0] = 0;
  if (a3 >= 0.0) {
    v14.n128_f64[0] = a3;
  }
  if (a3 <= 4294967300.0) {
    double v21 = v14.n128_f64[0];
  }
  else {
    double v21 = 4294967300.0;
  }
  double inData = v21;
  double v22 = (*(double (**)(uint64_t, __n128))(*(void *)a1 + 104))(a1, v14);
  uint64_t v23 = sub_32A48(17);
  uint64_t v24 = sub_32A48(37);
  char v25 = 0;
  uint64_t v26 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v27 = *(void *)(v23 + 8);
  while (1)
  {
    uint64_t v28 = *(int *)&buf[4 * v26];
    char v29 = v25;
    if (((v27 & v28) != 0) != ((*(void *)(v24 + 8) & v28) != 0)) {
      break;
    }
    char v25 = 1;
    uint64_t v26 = 1;
    if (v29) {
      goto LABEL_27;
    }
  }
  if ((v27 & v28) == 0) {
    uint64_t v23 = v24;
  }
LABEL_27:
  uint64_t v30 = sub_32A48(36);
  char v31 = 0;
  uint64_t v32 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v33 = *(void *)(v23 + 8);
  while (1)
  {
    uint64_t v34 = *(int *)&buf[4 * v32];
    char v35 = v31;
    if (((v33 & v34) != 0) != ((*(void *)(v30 + 8) & v34) != 0)) {
      break;
    }
    char v31 = 1;
    uint64_t v32 = 1;
    if (v35) {
      goto LABEL_33;
    }
  }
  if ((v33 & v34) == 0) {
    uint64_t v23 = v30;
  }
LABEL_33:
  int v36 = *(NSObject **)v23;
  if (v36 && os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v90 = 1024;
    int v91 = 526;
    __int16 v92 = 1024;
    *(_DWORD *)int v93 = v21;
    _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling IAPManager::SetSampleRateForUSB() with %u", buf, 0x18u);
  }
  if (!sub_2408D4(v21))
  {
    char v84 = (os_log_t *)sub_32A48(13);
    int v85 = *v84;
    if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v90 = 1024;
      int v91 = 528;
      _os_log_impl(&def_1E50E8, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"IAPDigitalAudioSetSampleRate() failed.\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003329396;
LABEL_99:
  }
  if (v21 != v22)
  {
    uint64_t v37 = sub_32A48(17);
    uint64_t v38 = sub_32A48(37);
    char v39 = 0;
    uint64_t v40 = 0;
    if (a2)
    {
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v41 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v42 = *(int *)&buf[4 * v40];
        char v43 = v39;
        if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
          break;
        }
        char v39 = 1;
        uint64_t v40 = 1;
        if (v43) {
          goto LABEL_49;
        }
      }
      if ((v41 & v42) == 0) {
        uint64_t v37 = v38;
      }
LABEL_49:
      uint64_t v47 = sub_32A48(36);
      char v48 = 0;
      uint64_t v49 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v50 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v51 = *(int *)&buf[4 * v49];
        char v52 = v48;
        if (((v50 & v51) != 0) != ((*(void *)(v47 + 8) & v51) != 0)) {
          break;
        }
        char v48 = 1;
        uint64_t v49 = 1;
        if (v52) {
          goto LABEL_61;
        }
      }
      if ((v50 & v51) == 0) {
        uint64_t v37 = v47;
      }
LABEL_61:
      int v59 = *(NSObject **)v37;
      if (*(void *)v37 && os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
      {
        int v60 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
        __int16 v90 = 1024;
        int v91 = 536;
        __int16 v92 = 1024;
        *(_DWORD *)int v93 = v60;
        *(_WORD *)&v93[4] = 2048;
        *(double *)&v93[6] = v21;
        _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling Device_HAL_Common::SetSampleRateSynchronously() on USB HAL device %u with rate %f.", buf, 0x22u);
      }
      OSStatus v61 = sub_42FD90(a1, v21);
      if (v61)
      {
        OSStatus v62 = v61;
        std::chrono::steady_clock::time_point v63 = (os_log_t *)sub_32A48(13);
        UInt32 v64 = *v63;
        if (!*v63 || !os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
        __int16 v90 = 1024;
        int v91 = 538;
        int v65 = "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Device_HAL_Common::SetSampleRateSynchronously()"
              " failed to set sample rate.\"";
LABEL_97:
        _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_ERROR, v65, buf, 0x12u);
LABEL_98:
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = &off_6414D8;
        exception[2] = v62;
        goto LABEL_99;
      }
    }
    else
    {
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v44 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v45 = *(int *)&buf[4 * v40];
        char v46 = v39;
        if (((v44 & v45) != 0) != ((*(void *)(v38 + 8) & v45) != 0)) {
          break;
        }
        char v39 = 1;
        uint64_t v40 = 1;
        if (v46) {
          goto LABEL_55;
        }
      }
      if ((v44 & v45) == 0) {
        uint64_t v37 = v38;
      }
LABEL_55:
      uint64_t v53 = sub_32A48(36);
      char v54 = 0;
      uint64_t v55 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v56 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v57 = *(int *)&buf[4 * v55];
        char v58 = v54;
        if (((v56 & v57) != 0) != ((*(void *)(v53 + 8) & v57) != 0)) {
          break;
        }
        char v54 = 1;
        uint64_t v55 = 1;
        if (v58) {
          goto LABEL_70;
        }
      }
      if ((v56 & v57) == 0) {
        uint64_t v37 = v53;
      }
LABEL_70:
      std::chrono::system_clock::time_point v66 = *(NSObject **)v37;
      if (*(void *)v37 && os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
      {
        int v67 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
        __int16 v90 = 1024;
        int v91 = 542;
        __int16 v92 = 1024;
        *(_DWORD *)int v93 = v67;
        *(_WORD *)&v93[4] = 2048;
        *(double *)&v93[6] = v21;
        _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d Calling AudioObjectSetPropertyData() on USB HAL device %u with rate %f.", buf, 0x22u);
      }
      AudioObjectID v68 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
      OSStatus v69 = AudioObjectSetPropertyData(v68, (const AudioObjectPropertyAddress *)&qword_64E1E0, 0, 0, 8u, &inData);
      if (v69)
      {
        OSStatus v62 = v69;
        __int16 v87 = (os_log_t *)sub_32A48(13);
        UInt32 v64 = *v87;
        if (!*v87 || !os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR)) {
          goto LABEL_98;
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
        __int16 v90 = 1024;
        int v91 = 545;
        int v65 = "%25s:%-5d EXCEPTION (status) [error status is an error]: \"AudioObjectSetPropertyData() failed to set sample rate.\"";
        goto LABEL_97;
      }
    }
  }
  uint64_t v70 = sub_32A48(17);
  uint64_t v71 = sub_32A48(37);
  char v72 = 0;
  uint64_t v73 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v74 = *(void *)(v70 + 8);
  while (1)
  {
    uint64_t v75 = *(int *)&buf[4 * v73];
    char v76 = v72;
    if (((v74 & v75) != 0) != ((*(void *)(v71 + 8) & v75) != 0)) {
      break;
    }
    char v72 = 1;
    uint64_t v73 = 1;
    if (v76) {
      goto LABEL_80;
    }
  }
  if ((v74 & v75) == 0) {
    uint64_t v70 = v71;
  }
LABEL_80:
  uint64_t v77 = sub_32A48(36);
  char v78 = 0;
  uint64_t v79 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v80 = *(void *)(v70 + 8);
  while (1)
  {
    uint64_t v81 = *(int *)&buf[4 * v79];
    char v82 = v78;
    if (((v80 & v81) != 0) != ((*(void *)(v77 + 8) & v81) != 0)) {
      break;
    }
    char v78 = 1;
    uint64_t v79 = 1;
    if (v82) {
      goto LABEL_86;
    }
  }
  if ((v80 & v81) == 0) {
    uint64_t v70 = v77;
  }
LABEL_86:
  int v83 = *(NSObject **)v70;
  if (v83 && os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v90 = 1024;
    int v91 = 549;
    _os_log_impl(&def_1E50E8, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d Exited Device_USB_iAP_Aspen::SetSampleRate().", buf, 0x12u);
  }
}

void sub_22BCF0(os_unfair_lock_s *a1)
{
}

void sub_22BF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_4636C(a12);
  }
  sub_72924((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_22C004(int a1, os_unfair_lock_s *a2)
{
  if (!a2)
  {
    char v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress __p = 136315394;
        *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 463;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"IAPManager passed clientData as NULL.\"", __p, 0x12u);
      }
    }
  }
  if (a1 == 1684500341)
  {
    uint64_t v4 = operator new(4uLL);
    *uint64_t v4 = 1886745455;
    *(void *)AudioObjectPropertyAddress __p = v4;
    *(void *)&__p[8] = v4 + 1;
    *(void *)&__p[16] = v4 + 1;
    strcpy(&__p[24], "cwdv");
    BYTE2(v101) = 0;
    LODWORD(v103) = 3;
    v105[0] = 0;
    v105[1] = 0;
    char v104 = v105;
    int v106 = 44739242;
    CFTypeRef cf = 0;
    sub_43637C((uint64_t *)outData, (uint64_t)a2, (uint64_t)__p);
    sub_FB288(&v97, outData);
    sub_8108((uint64_t *)outData);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v105[0]);
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    if (v99 != 1)
    {
      char v82 = (os_log_t *)sub_32A48(13);
      int v83 = *v82;
      if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_ERROR))
      {
        uint64_t v84 = v99;
        sub_2417C(outData, 0x7075736Fu);
        int v85 = v96;
        int v86 = (void **)outData[0];
        sub_4F64((uint64_t)ioDataSize, a2 + 2);
        __int16 v87 = outData;
        if (v85 < 0) {
          __int16 v87 = v86;
        }
        if (v94 >= 0) {
          UInt32 v88 = ioDataSize;
        }
        else {
          UInt32 v88 = *(UInt32 **)ioDataSize;
        }
        *(_DWORD *)AudioObjectPropertyAddress __p = 136316162;
        *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 476;
        *(_WORD *)&unsigned char __p[18] = 2048;
        *(void *)&__p[20] = v84;
        *(_WORD *)&unsigned char __p[28] = 2080;
        uint64_t v101 = v87;
        __int16 v102 = 2080;
        char v103 = v88;
        _os_log_impl(&def_1E50E8, v83, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Found %lu ports of type '%s' in device %s (looking for exactly 1)\"", __p, 0x30u);
        if (v94 < 0) {
          operator delete(*(void **)ioDataSize);
        }
        if (v96 < 0) {
          operator delete(outData[0]);
        }
      }
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Found %lu ports of type '%s' in device %s (looking for exactly 1)");
    }
    uint64_t v6 = *(void *)(v98 + 16);
    uint64_t v5 = *(std::__shared_weak_count **)(v98 + 24);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 152))(v6);
    sub_18EB10(v6);
    if (v7 != (*(unsigned int (**)(uint64_t))(*(void *)v6 + 152))(v6))
    {
      if ((v7 & 1) == 0)
      {
        uint64_t v8 = sub_32A48(17);
        uint64_t v9 = sub_32A48(37);
        char v10 = 0;
        uint64_t v11 = 0;
        *(void *)AudioObjectPropertyAddress __p = 0x100000002;
        uint64_t v12 = *(void *)(v8 + 8);
        while (1)
        {
          uint64_t v13 = *(int *)&__p[4 * v11];
          char v14 = v10;
          if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
            break;
          }
          char v10 = 1;
          uint64_t v11 = 1;
          if (v14) {
            goto LABEL_21;
          }
        }
        if ((v12 & v13) == 0) {
          uint64_t v8 = v9;
        }
LABEL_21:
        uint64_t v17 = sub_32A48(36);
        char v18 = 0;
        uint64_t v19 = 0;
        *(void *)AudioObjectPropertyAddress __p = 0x100000002;
        uint64_t v20 = *(void *)(v8 + 8);
        while (1)
        {
          uint64_t v21 = *(int *)&__p[4 * v19];
          char v22 = v18;
          if (((v20 & v21) != 0) != ((*(void *)(v17 + 8) & v21) != 0)) {
            break;
          }
          char v18 = 1;
          uint64_t v19 = 1;
          if (v22) {
            goto LABEL_27;
          }
        }
        if ((v20 & v21) == 0) {
          uint64_t v8 = v17;
        }
LABEL_27:
        uint64_t v23 = *(NSObject **)v8;
        if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress __p = 136315394;
          *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 79;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Entered Device_USB_iAP_Aspen::ReconcileSampleRates().", __p, 0x12u);
        }
        uint64_t v24 = sub_32A48(17);
        uint64_t v25 = sub_32A48(37);
        char v26 = 0;
        uint64_t v27 = 0;
        *(void *)AudioObjectPropertyAddress __p = 0x100000002;
        uint64_t v28 = *(void *)(v24 + 8);
        while (1)
        {
          uint64_t v29 = *(int *)&__p[4 * v27];
          char v30 = v26;
          if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
            break;
          }
          char v26 = 1;
          uint64_t v27 = 1;
          if (v30) {
            goto LABEL_36;
          }
        }
        if ((v28 & v29) == 0) {
          uint64_t v24 = v25;
        }
LABEL_36:
        uint64_t v31 = sub_32A48(36);
        char v32 = 0;
        uint64_t v33 = 0;
        *(void *)AudioObjectPropertyAddress __p = 0x100000002;
        uint64_t v34 = *(void *)(v24 + 8);
        while (1)
        {
          uint64_t v35 = *(int *)&__p[4 * v33];
          char v36 = v32;
          if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
            break;
          }
          char v32 = 1;
          uint64_t v33 = 1;
          if (v36) {
            goto LABEL_42;
          }
        }
        if ((v34 & v35) == 0) {
          uint64_t v24 = v31;
        }
LABEL_42:
        uint64_t v37 = *(NSObject **)v24;
        if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress __p = 136315650;
          *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 83;
          *(_WORD *)&unsigned char __p[18] = 2048;
          *(void *)&__p[20] = 0x40E5888000000000;
          _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting iAP and driver to default sample rate of %f kHz.", __p, 0x1Cu);
        }
        sub_22B3E8((uint64_t)a2, 1, 44100.0);
        uint64_t v38 = (void *)sub_32A48(17);
        uint64_t v39 = sub_32A48(37);
        char v40 = 0;
        uint64_t v41 = 0;
        *(void *)AudioObjectPropertyAddress __p = 0x100000002;
        uint64_t v42 = v38[1];
        while (1)
        {
          uint64_t v43 = *(int *)&__p[4 * v41];
          char v44 = v40;
          if (((v42 & v43) != 0) != ((*(void *)(v39 + 8) & v43) != 0)) {
            break;
          }
          char v40 = 1;
          uint64_t v41 = 1;
          if (v44) {
            goto LABEL_51;
          }
        }
        if ((v42 & v43) == 0) {
          uint64_t v38 = (void *)v39;
        }
LABEL_51:
        uint64_t v45 = sub_32A48(36);
        char v46 = 0;
        uint64_t v47 = 0;
        *(void *)AudioObjectPropertyAddress __p = 0x100000002;
        uint64_t v48 = v38[1];
        while (1)
        {
          uint64_t v49 = *(int *)&__p[4 * v47];
          char v50 = v46;
          if (((v48 & v49) != 0) != ((*(void *)(v45 + 8) & v49) != 0)) {
            break;
          }
          char v46 = 1;
          uint64_t v47 = 1;
          if (v50) {
            goto LABEL_57;
          }
        }
        if ((v48 & v49) == 0) {
          uint64_t v38 = (void *)v45;
        }
LABEL_57:
        if (*v38)
        {
          outData[0] = 0;
          ioDataSize[0] = 8;
          AudioObjectID v51 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a2->_os_unfair_lock_opaque + 120))(a2);
          OSStatus PropertyData = AudioObjectGetPropertyData(v51, (const AudioObjectPropertyAddress *)&qword_64E1E0, 0, 0, ioDataSize, outData);
          if (PropertyData)
          {
            __int16 v90 = (os_log_t *)sub_32A48(13);
            int v91 = *v90;
            if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress __p = 136315394;
              *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 92;
              _os_log_impl(&def_1E50E8, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"AudioObjectGetPropertyData() failed to get sample rate.\"", __p, 0x12u);
            }
            __int16 v92 = __cxa_allocate_exception(0x10uLL);
            *(void *)__int16 v92 = &off_6414D8;
            v92[2] = PropertyData;
          }
          if (*(double *)outData != 44100.0)
          {
            uint64_t v53 = sub_32A48(17);
            uint64_t v54 = sub_32A48(37);
            char v55 = 0;
            uint64_t v56 = 0;
            *(void *)AudioObjectPropertyAddress __p = 0x100000002;
            uint64_t v57 = *(void *)(v53 + 8);
            while (1)
            {
              uint64_t v58 = *(int *)&__p[4 * v56];
              char v59 = v55;
              if (((v57 & v58) != 0) != ((*(void *)(v54 + 8) & v58) != 0)) {
                break;
              }
              char v55 = 1;
              uint64_t v56 = 1;
              if (v59) {
                goto LABEL_66;
              }
            }
            if ((v57 & v58) == 0) {
              uint64_t v53 = v54;
            }
LABEL_66:
            uint64_t v60 = sub_32A48(36);
            char v61 = 0;
            uint64_t v62 = 0;
            *(void *)AudioObjectPropertyAddress __p = 0x100000002;
            uint64_t v63 = *(void *)(v53 + 8);
            while (1)
            {
              uint64_t v64 = *(int *)&__p[4 * v62];
              char v65 = v61;
              if (((v63 & v64) != 0) != ((*(void *)(v60 + 8) & v64) != 0)) {
                break;
              }
              char v61 = 1;
              uint64_t v62 = 1;
              if (v65) {
                goto LABEL_72;
              }
            }
            if ((v63 & v64) == 0) {
              uint64_t v53 = v60;
            }
LABEL_72:
            std::chrono::system_clock::time_point v66 = *(NSObject **)v53;
            if (v66 && os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress __p = 136315906;
              *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
              *(_WORD *)&unsigned char __p[12] = 1024;
              *(_DWORD *)&__p[14] = 93;
              *(_WORD *)&unsigned char __p[18] = 2048;
              *(void *)&__p[20] = 0x40E5888000000000;
              *(_WORD *)&unsigned char __p[28] = 1024;
              LODWORD(v101) = *(double *)outData;
              _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d iAP USB: Driver sample rate was not successfully set. target: %f; actual: %u",
                __p,
                0x22u);
            }
          }
        }
        uint64_t v67 = sub_32A48(17);
        uint64_t v68 = sub_32A48(37);
        char v69 = 0;
        uint64_t v70 = 0;
        *(void *)AudioObjectPropertyAddress __p = 0x100000002;
        uint64_t v71 = *(void *)(v67 + 8);
        while (1)
        {
          uint64_t v72 = *(int *)&__p[4 * v70];
          char v73 = v69;
          if (((v71 & v72) != 0) != ((*(void *)(v68 + 8) & v72) != 0)) {
            break;
          }
          char v69 = 1;
          uint64_t v70 = 1;
          if (v73) {
            goto LABEL_81;
          }
        }
        if ((v71 & v72) == 0) {
          uint64_t v67 = v68;
        }
LABEL_81:
        uint64_t v74 = sub_32A48(36);
        char v75 = 0;
        uint64_t v76 = 0;
        *(void *)AudioObjectPropertyAddress __p = 0x100000002;
        uint64_t v77 = *(void *)(v67 + 8);
        while (1)
        {
          uint64_t v78 = *(int *)&__p[4 * v76];
          char v79 = v75;
          if (((v77 & v78) != 0) != ((*(void *)(v74 + 8) & v78) != 0)) {
            break;
          }
          char v75 = 1;
          uint64_t v76 = 1;
          if (v79) {
            goto LABEL_87;
          }
        }
        if ((v77 & v78) == 0) {
          uint64_t v67 = v74;
        }
LABEL_87:
        uint64_t v80 = *(NSObject **)v67;
        if (v80 && os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress __p = 136315394;
          *(void *)&__p[4] = "Device_USB_iAP_Aspen.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 96;
          _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_DEBUG, "%25s:%-5d Exited Device_USB_iAP_Aspen::ReconcileSampleRates().", __p, 0x12u);
        }
      }
      uint64_t v81 = (_DWORD *)sub_10FBF0();
      *(void *)AudioObjectPropertyAddress __p = v6;
      *(void *)&__p[8] = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1106D8(v81, (uint64_t *)__p);
      if (v5) {
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v5) {
      sub_4636C(v5);
    }
    sub_B8E4(&v97);
  }
}

void sub_22CA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_B8E4(&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_22CAF0(uint64_t a1, double a2)
{
  uint64_t v4 = sub_32A48(17);
  uint64_t v5 = sub_32A48(36);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)uint64_t v13 = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&v13[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_7;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  uint64_t v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t v13 = 136315650;
    *(void *)&void v13[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v14 = 1024;
    int v15 = 374;
    __int16 v16 = 2048;
    double v17 = a2;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting iAP sample rate to %f Hz", v13, 0x1Cu);
  }
  sub_22B3E8(a1, 1, a2);
  return 0;
}

void sub_22CC44(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x22CC10);
  }
  _Unwind_Resume(a1);
}

void sub_22CC74(uint64_t a1)
{
  uint64_t v2 = sub_32A48(17);
  uint64_t v3 = sub_32A48(37);
  char v4 = 0;
  uint64_t v5 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8) {
      goto LABEL_7;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
LABEL_7:
  uint64_t v9 = sub_32A48(36);
  char v10 = 0;
  uint64_t v11 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v12 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v13 = *(int *)&buf[4 * v11];
    char v14 = v10;
    if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
      break;
    }
    char v10 = 1;
    uint64_t v11 = 1;
    if (v14) {
      goto LABEL_13;
    }
  }
  if ((v12 & v13) == 0) {
    uint64_t v2 = v9;
  }
LABEL_13:
  int v15 = *(NSObject **)v2;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v54 = 1024;
    int v55 = 355;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Entered Device_USB_iAP_Aspen::GetSampleRate().", buf, 0x12u);
  }
  uint64_t outData = 0;
  UInt32 ioDataSize = 8;
  AudioObjectID v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
  OSStatus PropertyData = AudioObjectGetPropertyData(v16, (const AudioObjectPropertyAddress *)&qword_64E1E0, 0, 0, &ioDataSize, &outData);
  if (PropertyData)
  {
    OSStatus v47 = PropertyData;
    uint64_t v48 = (os_log_t *)sub_32A48(13);
    uint64_t v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 361;
      _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"AudioObjectGetPropertyData() failed to get sample rate.\"", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v47;
  }
  uint64_t v18 = sub_32A48(17);
  uint64_t v19 = sub_32A48(37);
  char v20 = 0;
  uint64_t v21 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v22 = *(void *)(v18 + 8);
  while (1)
  {
    uint64_t v23 = *(int *)&buf[4 * v21];
    char v24 = v20;
    if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
      break;
    }
    char v20 = 1;
    uint64_t v21 = 1;
    if (v24) {
      goto LABEL_23;
    }
  }
  if ((v22 & v23) == 0) {
    uint64_t v18 = v19;
  }
LABEL_23:
  uint64_t v25 = sub_32A48(36);
  char v26 = 0;
  uint64_t v27 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v28 = *(void *)(v18 + 8);
  while (1)
  {
    uint64_t v29 = *(int *)&buf[4 * v27];
    char v30 = v26;
    if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
      break;
    }
    char v26 = 1;
    uint64_t v27 = 1;
    if (v30) {
      goto LABEL_29;
    }
  }
  if ((v28 & v29) == 0) {
    uint64_t v18 = v25;
  }
LABEL_29:
  uint64_t v31 = *(NSObject **)v18;
  if (v31 && os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    int v32 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
    __int16 v54 = 1024;
    int v55 = 362;
    __int16 v56 = 1024;
    int v57 = v32;
    __int16 v58 = 2048;
    uint64_t v59 = outData;
    _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEBUG, "%25s:%-5d USB HAL device %u reports a sample rate of %f.", buf, 0x22u);
  }
  uint64_t v33 = sub_32A48(17);
  uint64_t v34 = sub_32A48(37);
  char v35 = 0;
  uint64_t v36 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v37 = *(void *)(v33 + 8);
  while (1)
  {
    uint64_t v38 = *(int *)&buf[4 * v36];
    char v39 = v35;
    if (((v37 & v38) != 0) != ((*(void *)(v34 + 8) & v38) != 0)) {
      break;
    }
    char v35 = 1;
    uint64_t v36 = 1;
    if (v39) {
      goto LABEL_38;
    }
  }
  if ((v37 & v38) == 0) {
    uint64_t v33 = v34;
  }
LABEL_38:
  uint64_t v40 = sub_32A48(36);
  char v41 = 0;
  uint64_t v42 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v43 = *(void *)(v33 + 8);
  while (1)
  {
    uint64_t v44 = *(int *)&buf[4 * v42];
    char v45 = v41;
    if (((v43 & v44) != 0) != ((*(void *)(v40 + 8) & v44) != 0)) {
      break;
    }
    char v41 = 1;
    uint64_t v42 = 1;
    if (v45) {
      goto LABEL_44;
    }
  }
  if ((v43 & v44) == 0) {
    uint64_t v33 = v40;
  }
LABEL_44:
  char v46 = *(NSObject **)v33;
  if (v46)
  {
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v54 = 1024;
      int v55 = 364;
      _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEBUG, "%25s:%-5d Exited Device_USB_iAP_Aspen::GetSampleRate().", buf, 0x12u);
    }
  }
}

void sub_22D184(uint64_t a1)
{
  uint64_t v2 = (uint64_t **)sub_23EE78();
  sub_23F288(v2, (unint64_t)sub_22C004);
  uint64_t v3 = (void *)sub_23EE78();
  sub_23F948(v3, 1684500341, (unint64_t)sub_22D1F0);

  sub_430D98(a1);
}

void *sub_22D1F0(void *result, uint64_t a2)
{
  if (result == 1684500341)
  {
    if (!a2)
    {
      char v4 = (os_log_t *)sub_32A48(13);
      uint64_t v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v6 = 136315394;
          uint64_t v7 = "Device_USB_iAP_Aspen.cpp";
          __int16 v8 = 1024;
          int v9 = 505;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"IAPManager passed clientData as NULL.\"", (uint8_t *)&v6, 0x12u);
        }
      }
    }
    uint64_t v3 = (void *)(a2 + 496);
    __n128 result = (void *)sub_1A1BE4(v3, (uint64_t)&qword_64E210);
    if (result) {
      return sub_1A1D20(v3, (unsigned int *)&qword_64E210);
    }
  }
  return result;
}

BOOL sub_22D2F0(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_64E1F0 && a2->mElement == dword_64E1F8
    || *(void *)&a2->mSelector == qword_64E200 && a2->mElement == dword_64E208
    || *(void *)&a2->mSelector == qword_64E210 && a2->mElement == dword_64E218)
  {
    uint64_t v8 = *(void *)&a2->mSelector;
    uint64_t v13 = a4;
    uint64_t v14 = v8;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v10 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v11 = a2->mElement;
    uint64_t v12 = a3;
    sub_1A4260((void *)(a1 + 496), (unsigned int *)&v14, (uint64_t)&v10);
    return 1;
  }
  else
  {
    sub_50848((std::mutex *)a1);
    return AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 268), a2, a3, a4) == 0;
  }
}

BOOL sub_22D438(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  if (*(void *)&a2->mSelector == qword_64E1F0 && a2->mElement == dword_64E1F8
    || *(void *)&a2->mSelector == qword_64E200 && a2->mElement == dword_64E208
    || *(void *)&a2->mSelector == qword_64E210 && a2->mElement == dword_64E218)
  {
    uint64_t v9 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement mElement = a2->mElement;
    uint64_t v5 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement v6 = a2->mElement;
    uint64_t v7 = a3;
    uint64_t v8 = a4;
    sub_1A4AA0((void *)(a1 + 496), (unsigned int *)&v9, (uint64_t)&v5);
    return 1;
  }
  else
  {
    return sub_431F5C(a1, a2, a3, a4);
  }
}

void sub_22D554(void *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v40);
      uint64_t v23 = v43 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v45 = "Device_USB_iAP_Aspen.cpp";
      __int16 v46 = 1024;
      int v47 = 234;
      __int16 v48 = 2080;
      uint64_t v49 = (const char *)v23;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v25 = (os_log_t *)sub_32A48(13);
    char v26 = *v25;
    if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v40);
      uint64_t v27 = v43 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      char v45 = "Device_USB_iAP_Aspen.cpp";
      __int16 v46 = 1024;
      int v47 = 235;
      __int16 v48 = 2080;
      uint64_t v49 = (const char *)v27;
      __int16 v50 = 1024;
      LODWORD(v51[0]) = a3;
      WORD2(v51[0]) = 2048;
      *(void *)((char *)v51 + 6) = a4;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v28 = &off_6414D8;
    _OWORD v28[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v29 = (os_log_t *)sub_32A48(13);
    char v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v40);
      uint64_t v31 = v43 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      char v45 = "Device_USB_iAP_Aspen.cpp";
      __int16 v46 = 1024;
      int v47 = 236;
      __int16 v48 = 2080;
      uint64_t v49 = "inData";
      __int16 v50 = 2080;
      v51[0] = v31;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }
    int v32 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v32 = &off_6414D8;
    v32[2] = 561211770;
  }
  if (((*(uint64_t (**)(void *, const AudioObjectPropertyAddress *))(*a1 + 24))(a1, a2) & 1) == 0)
  {
    uint64_t v33 = (os_log_t *)sub_32A48(13);
    uint64_t v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v40);
      char v35 = v43 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v45 = "Device_USB_iAP_Aspen.cpp";
      __int16 v46 = 1024;
      int v47 = 237;
      __int16 v48 = 2080;
      uint64_t v49 = (const char *)v35;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v36 = &off_6414D8;
    v36[2] = 1852797029;
  }
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1853059699)
  {
    if (mSelector != 1836414053)
    {
      if (mSelector == 1853059619)
      {
        uint64_t v37 = (os_log_t *)sub_32A48(13);
        uint64_t v38 = *v37;
        if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          char v45 = "Device_USB_iAP_Aspen.cpp";
          __int16 v46 = 1024;
          int v47 = 260;
          _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"kAudioDevicePropertyAvailableNominalSampleRates cannot be set (kAudioHardwareUnsupportedOperationError).\"", buf, 0x12u);
        }
        char v39 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v39 = &off_6414D8;
        v39[2] = 1970171760;
      }
LABEL_28:
      sub_4321A0((uint64_t)a1, a2, a3, a4, a5, a6);
      return;
    }
    uint64_t v16 = sub_23EE78();
    BOOL v17 = *a6 != 0;
    sub_24063C(v16, v17);
  }
  else
  {
    if (mSelector != 1853059700)
    {
      if (mSelector == 1987013732)
      {
        uint64_t v13 = sub_23EE78();
        if (sub_23FC74(v13))
        {
          float v14 = (float)(*(float *)a6 + 100.0) / 100.0;
          uint64_t v15 = sub_23EE78();
          sub_240048(v15, v14);
          if (sub_1A1BE4(a1 + 62, (uint64_t)&qword_64E1F0)) {
            sub_1A1D20(a1 + 62, (unsigned int *)&qword_64E1F0);
          }
          if (sub_1A1BE4(a1 + 62, (uint64_t)&qword_64E200))
          {
            sub_1A1D20(a1 + 62, (unsigned int *)&qword_64E200);
          }
        }
        return;
      }
      goto LABEL_28;
    }
    if (a5 != 8)
    {
      uint64_t v18 = (os_log_t *)sub_32A48(13);
      uint64_t v19 = *v18;
      if (*v18)
      {
        if (os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          char v45 = "StandardUtilities.h";
          __int16 v46 = 1024;
          int v47 = 149;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"sizeof(T) == inDataSize\"", buf, 0x12u);
        }
      }
    }
    double v20 = *(double *)a6;
    sub_22B3E8((uint64_t)a1, 0, v20);
  }
}

void sub_22DDCC(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v22 = (os_log_t *)sub_32A48(13);
    uint64_t v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)theArray, (unsigned int *)&v37);
      char v24 = v40 >= 0 ? theArray : (CFArrayRef *)theArray[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v42 = "Device_USB_iAP_Aspen.cpp";
      __int16 v43 = 1024;
      int v44 = 200;
      __int16 v45 = 2080;
      __int16 v46 = (const char *)v24;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v40 < 0) {
        operator delete(theArray[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v26 = (os_log_t *)sub_32A48(13);
    uint64_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)theArray, (unsigned int *)&v37);
      uint64_t v28 = v40 >= 0 ? theArray : (CFArrayRef *)theArray[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v42 = "Device_USB_iAP_Aspen.cpp";
      __int16 v43 = 1024;
      int v44 = 201;
      __int16 v45 = 2080;
      __int16 v46 = (const char *)v28;
      __int16 v47 = 1024;
      LODWORD(v48[0]) = a3;
      WORD2(v48[0]) = 2048;
      *(void *)((char *)v48 + 6) = a4;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v40 < 0) {
        operator delete(theArray[0]);
      }
    }
    uint64_t v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v29 = &off_6414D8;
    void v29[2] = 561211770;
  }
  if (!a6)
  {
    char v30 = (os_log_t *)sub_32A48(13);
    uint64_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)theArray, (unsigned int *)&v37);
      int v32 = v40 >= 0 ? theArray : (CFArrayRef *)theArray[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v42 = "Device_USB_iAP_Aspen.cpp";
      __int16 v43 = 1024;
      int v44 = 202;
      __int16 v45 = 2080;
      __int16 v46 = "outData";
      __int16 v47 = 2080;
      v48[0] = v32;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v40 < 0) {
        operator delete(theArray[0]);
      }
    }
    uint64_t v33 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v33 = &off_6414D8;
    uint64_t v33[2] = 561211770;
  }
  AudioObjectPropertySelector mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1986229103)
  {
    if (mSelector != 1986229104)
    {
      if (mSelector == 1986290211)
      {
        *(_OWORD *)a6 = xmmword_4E7920;
        return;
      }
      if (mSelector == 1987013732)
      {
        float v14 = (float *)sub_23EE78();
        *a6 = (float)(sub_23FDA8(v14) * 100.0) + -100.0;
        return;
      }
LABEL_18:
      sub_432AE8(a1, a2, a3, a4, a5, a6);
      return;
    }
    uint64_t v17 = sub_23EE78();
    int v16 = sub_23FC74(v17);
LABEL_17:
    *(_DWORD *)a6 = v16;
    return;
  }
  if (mSelector == 1836414053)
  {
    uint64_t v15 = (unsigned __int8 *)sub_23EE78();
    int v16 = sub_2404BC(v15);
    goto LABEL_17;
  }
  if (mSelector != 1853059619)
  {
    if (mSelector == 1853059700)
    {
      (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
      sub_BC56C(a5, (double *)a6, v13);
      return;
    }
    goto LABEL_18;
  }
  sub_240A3C((uint64_t)theArray);
  if (theArray[0] && (Count = CFArrayGetCount(theArray[0]), uint64_t v19 = Count, Count))
  {
    if (((16 * Count) & 0xFFFFFFFF0uLL) > *a5)
    {
      *a5 = 0;
      uint64_t v34 = (os_log_t *)sub_32A48(13);
      char v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v42 = "Device_USB_iAP_Aspen.cpp";
        __int16 v43 = 1024;
        int v44 = 566;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"ioDataSize is insufficient (kAudioHardwareBadPropertySizeError).\"", buf, 0x12u);
      }
      uint64_t v36 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v36 = &off_6414D8;
      v36[2] = 561211770;
    }
    uint64_t v20 = 0;
    *a5 = 16 * Count;
    do
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      sub_1D1B30(theArray, v20, buf);
      LODWORD(v21) = *(_DWORD *)buf;
      *(int64x2_t *)&a6[4 * v20++] = vdupq_lane_s64(COERCE__INT64((double)v21), 0);
    }
    while (v19 != v20);
  }
  else
  {
    *a5 = 0;
  }
  sub_3D61C((uint64_t)theArray);
}

void sub_22E488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_3D61C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22E4AC(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    AudioObjectPropertyElement v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      double v13 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)CFArrayRef theArray = 136315650;
      *(void *)&theArray[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 165;
      __int16 v26 = 2080;
      uint64_t v27 = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", theArray, 0x1Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v15 = (os_log_t *)sub_32A48(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v19);
      uint64_t v17 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)CFArrayRef theArray = 136316162;
      *(void *)&theArray[4] = "Device_USB_iAP_Aspen.cpp";
      __int16 v24 = 1024;
      int v25 = 166;
      __int16 v26 = 2080;
      uint64_t v27 = v17;
      __int16 v28 = 1024;
      UInt32 v29 = a3;
      __int16 v30 = 2048;
      uint64_t v31 = a4;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        theArray,
        0x2Cu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v18 = &off_6414D8;
    v18[2] = 561211770;
  }
  AudioObjectPropertySelector mSelector = a2->mSelector;
  uint64_t v9 = 4;
  if ((int)a2->mSelector > 1986229103)
  {
    if (mSelector == 1986229104 || mSelector == 1987013732) {
      return v9;
    }
    if (mSelector == 1986290211) {
      return 16;
    }
  }
  else
  {
    switch(mSelector)
    {
      case 0x6D757465u:
        return v9;
      case 0x6E737223u:
        sub_240A3C((uint64_t)theArray);
        if (*(void *)theArray) {
          uint64_t v9 = 16 * CFArrayGetCount(*(CFArrayRef *)theArray);
        }
        else {
          uint64_t v9 = 0;
        }
        sub_3D61C((uint64_t)theArray);
        return v9;
      case 0x6E737274u:
        return 8;
    }
  }

  return sub_433254(a1, a2, a3, a4);
}

void sub_22E884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3D61C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_22E8A0(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  AudioObjectPropertySelector mSelector = a2->mSelector;
  uint64_t result = 1;
  if ((int)a2->mSelector <= 1986229103)
  {
    if (mSelector == 1836414053) {
      return result;
    }
    if (mSelector != 1853059619)
    {
      if (mSelector == 1853059700) {
        return result;
      }
      return sub_43356C(a1, a2);
    }
    return 0;
  }
  if (mSelector == 1986229104) {
    return 0;
  }
  if (mSelector != 1987013732)
  {
    if (mSelector != 1986290211) {
      return sub_43356C(a1, a2);
    }
    return 0;
  }
  return result;
}

BOOL sub_22E930(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  int mSelector = a2->mSelector;
  BOOL result = 1;
  if ((int)a2->mSelector > 1986229103)
  {
    BOOL v6 = mSelector == 1986229104 || mSelector == 1986290211;
    int v7 = 1987013732;
  }
  else
  {
    BOOL v6 = mSelector == 1836414053 || mSelector == 1853059619;
    int v7 = 1853059700;
  }
  if (!v6 && mSelector != v7)
  {
    sub_50848((std::mutex *)a1);
    return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
  }
  return result;
}

void sub_22E9D8(void *a1)
{
  *a1 = off_627D08;
  sub_1A97C8((uint64_t)(a1 + 62));
  sub_43456C((uint64_t)a1);

  operator delete();
}

uint64_t sub_22EA44(void *a1)
{
  *a1 = off_627D08;
  sub_1A97C8((uint64_t)(a1 + 62));

  return sub_43456C((uint64_t)a1);
}

uint64_t sub_22EA9C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886155119 && a2 != 1886155113)
  {
    char v4 = (os_log_t *)sub_32A48(17);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      BOOL v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      float v14 = "Device_LDCM_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 112;
      __int16 v17 = 2080;
      uint64_t v18 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        float v14 = "Device_LDCM_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 113;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
      }
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_22EC60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_22EC7C(os_unfair_lock_s *a1)
{
}

void sub_22F000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p)
{
}

void sub_22F0B8(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, const char *a6, uint64_t a7)
{
  float v14 = operator new(0x228uLL);
  v14[1] = 0;
  v14[2] = 0;
  *float v14 = off_640AB8;
  CFStringRef v17 = CFStringCreateWithCString(0, a6, 0x600u);
  char v18 = 1;
  sub_21C8C(__p, "");
  sub_105158((uint64_t)(v14 + 3), a2, a3, a4, a5, (uint64_t)&v17, a7, (long long *)__p);
  v14[3] = &off_621AD0;
  *((_WORD *)v14 + 272) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  sub_72924((uint64_t)&v17);
  *a1 = v14 + 3;
  a1[1] = v14;

  sub_56E64((uint64_t)a1, v14 + 13, (uint64_t)(v14 + 3));
}

void sub_22F1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_72924((uint64_t)&a16);
  std::__shared_weak_count::~__shared_weak_count(v16);
  operator delete(v18);
  _Unwind_Resume(a1);
}

void sub_22F228(void *a1, AudioObjectID a2, double a3)
{
  AudioObjectID v13 = a2;
  inAddress.int mSelector = 1936941859;
  *(double *)&inAddress.AudioObjectPropertyScope mScope = a3;
  sub_869C8((uint64_t)&v8, &v13, &inAddress, 0, 0);
  int v4 = v8;
  if (v8) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v11 == 0;
  }
  if (v5)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = &off_6414D8;
    exception[2] = v4;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  BOOL v6 = v9;
  sub_46B38(a1, v9, v10, (v10 - (uint64_t)v9) >> 2);
  if (v6) {
    operator delete(v6);
  }
}

void sub_22F304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (a14)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_22F324(AudioObjectID a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_32A48(13);
  if (*(unsigned char *)(v6 + 8))
  {
    int v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        v111.__cv_.__uint64_t sig = *(void *)a2;
        *(_DWORD *)v111.__cv_.__opaque = *(_DWORD *)(a2 + 8);
        sub_16C9C4((uint64_t)&v112, (unsigned int *)&v111);
        int v8 = v112.__m_.__opaque[15] >= 0 ? &v112 : (std::mutex *)v112.__m_.__sig;
        buf.int mSelector = 136315906;
        *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        __int16 v102 = 1024;
        int v103 = 166;
        __int16 v104 = 2080;
        *(void *)__int16 v105 = v8;
        *(_WORD *)&v105[8] = 1024;
        *(_DWORD *)&v105[10] = a1;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v112.__m_.__opaque[15] < 0) {
          operator delete((void *)v112.__m_.__sig);
        }
      }
    }
  }
  uint64_t v97 = *(void *)a2;
  int v9 = *(_DWORD *)(a2 + 8);
  AudioObjectID v96 = a1;
  int v98 = v9;
  int v99 = 0;
  uint64_t v100 = 0;
  sub_22FFDC((uint64_t)&v112, (uint64_t)&v96);
  if (*(_DWORD *)&v112.__m_.__opaque[16]) {
    goto LABEL_10;
  }
  int v93 = 0;
  char v94 = 0;
  uint64_t v95 = 0;
  sub_46B38(&v93, (const void *)v112.__m_.__sig, *(uint64_t *)v112.__m_.__opaque, (*(void *)v112.__m_.__opaque - v112.__m_.__sig) >> 2);
  __int16 v90 = 0;
  int v91 = 0;
  uint64_t v92 = 0;
  sub_46B38(&v90, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  unint64_t v21 = v93;
  char v22 = v90;
  if (v94 - v93 != v91 - v90)
  {
    BOOL v23 = 0;
    if (!v90) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  BOOL v23 = memcmp(v93, v90, v94 - v93) == 0;
  if (v22)
  {
LABEL_35:
    int v91 = v22;
    operator delete(v22);
  }
LABEL_36:
  if (!v21)
  {
    if (v23) {
      goto LABEL_40;
    }
LABEL_10:
    uint64_t v10 = sub_32A48(13);
    if (*(unsigned char *)(v10 + 8))
    {
      char v11 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          AudioObjectPropertyAddress __p = *(void **)a2;
          int v78 = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&v111, (unsigned int *)&__p);
          char v12 = v111.__cv_.__opaque[15] >= 0 ? &v111 : (std::condition_variable *)v111.__cv_.__sig;
          buf.int mSelector = 136315906;
          *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
          __int16 v102 = 1024;
          int v103 = 199;
          __int16 v104 = 2080;
          *(void *)__int16 v105 = v12;
          *(_WORD *)&v105[8] = 1024;
          *(_DWORD *)&v105[10] = a1;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v111.__cv_.__opaque[15] < 0) {
            operator delete((void *)v111.__cv_.__sig);
          }
        }
      }
    }
    AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a2;
    unsigned int v13 = sub_86998(a1, &buf, *(void **)a3, *(void *)(a3 + 8));
    if (!v13)
    {
      LOBYTE(v16) = 1;
      goto LABEL_45;
    }
    unsigned int v14 = v13;
    __int16 v15 = (os_log_t *)sub_32A48(13);
    char v16 = *v15;
    if (!*v15) {
      goto LABEL_45;
    }
    if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v111, v14);
      int v17 = v111.__cv_.__opaque[15];
      uint64_t sig = v111.__cv_.__sig;
      __int16 v87 = *(void **)a2;
      LODWORD(v88) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v87);
      uint64_t v19 = &v111;
      if (v17 < 0) {
        uint64_t v19 = (std::condition_variable *)sig;
      }
      if (v79 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      buf.int mSelector = 136316418;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v102 = 1024;
      int v103 = 207;
      __int16 v104 = 1024;
      *(_DWORD *)__int16 v105 = v14;
      *(_WORD *)&v105[4] = 2080;
      *(void *)&v105[6] = v19;
      *(_WORD *)&unsigned char v105[14] = 2080;
      *(void *)&v105[16] = p_p;
      *(_WORD *)&v105[24] = 1024;
      *(_DWORD *)&v105[26] = a1;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
      if (v79 < 0) {
        operator delete(__p);
      }
      if (v111.__cv_.__opaque[15] < 0) {
        operator delete((void *)v111.__cv_.__sig);
      }
    }
    goto LABEL_44;
  }
  char v94 = v21;
  operator delete(v21);
  if (!v23) {
    goto LABEL_10;
  }
LABEL_40:
  uint64_t v24 = sub_32A48(13);
  if (*(unsigned char *)(v24 + 8))
  {
    char v16 = *(NSObject **)v24;
    if (!*(void *)v24) {
      goto LABEL_45;
    }
    if (os_log_type_enabled(*(os_log_t *)v24, OS_LOG_TYPE_DEBUG))
    {
      buf.int mSelector = 136315650;
      *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
      __int16 v102 = 1024;
      int v103 = 191;
      __int16 v104 = 1024;
      *(_DWORD *)__int16 v105 = a1;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
    }
  }
LABEL_44:
  LOBYTE(v16) = 0;
LABEL_45:
  if (v112.__m_.__sig) {
    operator delete((void *)v112.__m_.__sig);
  }
  if (v16)
  {
    sub_22FFDC((uint64_t)&v87, (uint64_t)&v96);
    if (v89)
    {
LABEL_49:
      memset(v112.__m_.__opaque, 0, sizeof(v112.__m_.__opaque));
      v112.__m_.__uint64_t sig = 850045863;
      memset(v111.__cv_.__opaque, 0, sizeof(v111.__cv_.__opaque));
      v111.__cv_.__uint64_t sig = 1018212795;
      char v80 = 0;
      sub_662FC(&__p, a1, (AudioObjectPropertyAddress *)a2, (uint64_t)&v111, (uint64_t)&v112, (uint64_t)&v80);
      uint64_t v25 = 2000;
      while (1)
      {
        sub_22FFDC((uint64_t)&v73, (uint64_t)&v96);
        __int16 v26 = v73;
        if (v76) {
          goto LABEL_51;
        }
        uint64_t v70 = 0;
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        uint64_t v28 = v74;
        unint64_t v29 = (v74 - (uint64_t)v73) >> 2;
        sub_46B38(&v70, v73, v74, v29);
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        sub_46B38(&v67, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
        __int16 v30 = v70;
        uint64_t v31 = v67;
        if (v71 - v70 != v68 - v67) {
          break;
        }
        BOOL v32 = memcmp(v70, v67, v71 - v70) == 0;
        if (v31) {
          goto LABEL_57;
        }
LABEL_58:
        if (v30)
        {
          uint64_t v71 = v30;
          operator delete(v30);
        }
        if (!v32)
        {
          if (v25 <= 0)
          {
            uint64_t v37 = (os_log_t *)sub_32A48(13);
            uint64_t v38 = *v37;
            if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
            {
              uint64_t v63 = *(void *)a2;
              int v64 = *(_DWORD *)(a2 + 8);
              sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v63);
              if (v66 >= 0) {
                p_luint64_t k = &__lk;
              }
              else {
                p_luint64_t k = __lk.__m_;
              }
              char v61 = 0;
              uint64_t v62 = 0;
              uint64_t v60 = 0;
              sub_46B38(&v60, v26, v28, v29);
              int v57 = 0;
              __int16 v58 = 0;
              uint64_t v59 = 0;
              sub_46B38(&v57, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
              char v40 = v60;
              char v41 = v57;
              BOOL v42 = v61 - v60 == v58 - v57 && memcmp(v60, v57, v61 - v60) == 0;
              buf.int mSelector = 136316930;
              *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
              __int16 v102 = 1024;
              int v103 = 248;
              __int16 v104 = 2080;
              *(void *)__int16 v105 = "set";
              *(_WORD *)&v105[8] = 2080;
              *(void *)&v105[10] = p_lk;
              *(_WORD *)&v105[18] = 2080;
              *(void *)&v105[20] = "set";
              *(_WORD *)&v105[28] = 1024;
              BOOL v106 = v42;
              __int16 v107 = 1024;
              int v108 = 0;
              __int16 v109 = 1024;
              AudioObjectID v110 = a1;
              _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
              if (v41)
              {
                __int16 v58 = v41;
                operator delete(v41);
              }
              if (v40)
              {
                char v61 = v40;
                operator delete(v40);
              }
              if (v66 < 0) {
                operator delete(__lk.__m_);
              }
            }
LABEL_51:
            int v27 = 1;
            if (!v26) {
              goto LABEL_63;
            }
LABEL_62:
            operator delete(v26);
            goto LABEL_63;
          }
          v33.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
          uint64_t v34 = sub_32A48(13);
          if (*(unsigned char *)(v34 + 8))
          {
            char v35 = *(NSObject **)v34;
            if (*(void *)v34)
            {
              if (os_log_type_enabled(*(os_log_t *)v34, OS_LOG_TYPE_DEBUG))
              {
                buf.int mSelector = 136315906;
                *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                __int16 v102 = 1024;
                int v103 = 257;
                __int16 v104 = 2080;
                *(void *)__int16 v105 = "with timeout";
                *(_WORD *)&v105[8] = 1024;
                *(_DWORD *)&v105[10] = a1;
                _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
              }
            }
          }
          sub_3B7EC();
          *(void *)&buf.int mSelector = &qword_64CC40;
          LOBYTE(buf.mElement) = 0;
          LOBYTE(buf.mElement) = sub_1D4024();
          __lk.__m_ = &v112;
          __lk.__owns_ = 1;
          std::mutex::lock(&v112);
          v36.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          if (v80)
          {
LABEL_71:
            if (__lk.__owns_) {
              std::mutex::unlock(__lk.__m_);
            }
            sub_66410((uint64_t)&buf);
            int v27 = 0;
            v25 += (std::chrono::system_clock::now().__d_.__rep_ - v33.__d_.__rep_) / -1000;
            if (!v26) {
              goto LABEL_63;
            }
            goto LABEL_62;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = v36.__d_.__rep_ + 1000000 * v25;
          while (2)
          {
            if (v43 <= std::chrono::steady_clock::now().__d_.__rep_) {
              goto LABEL_71;
            }
            v44.__d_.__rep_ = v43 - std::chrono::steady_clock::now().__d_.__rep_;
            if (v44.__d_.__rep_ >= 1)
            {
              std::chrono::steady_clock::now();
              v45.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
              if (!v45.__d_.__rep_)
              {
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 0;
                goto LABEL_93;
              }
              if (v45.__d_.__rep_ < 1)
              {
                if ((unint64_t)v45.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
                  goto LABEL_92;
                }
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 0x8000000000000000;
              }
              else
              {
                if ((unint64_t)v45.__d_.__rep_ > 0x20C49BA5E353F7)
                {
                  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 0x7FFFFFFFFFFFFFFFLL;
                  goto LABEL_93;
                }
LABEL_92:
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = 1000 * v45.__d_.__rep_;
LABEL_93:
                if (v46 > (v44.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
                {
                  v47.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
                  goto LABEL_96;
                }
              }
              v47.__d_.__rep_ = v46 + v44.__d_.__rep_;
LABEL_96:
              std::condition_variable::__do_timed_wait(&v111, &__lk, v47);
              std::chrono::steady_clock::now();
            }
            if (std::chrono::steady_clock::now().__d_.__rep_ >= v43 || v80) {
              goto LABEL_71;
            }
            continue;
          }
        }
        int v27 = 12;
        if (v26) {
          goto LABEL_62;
        }
LABEL_63:
        if (v27)
        {
          if (v27 == 12)
          {
            uint64_t v48 = sub_32A48(13);
            if (*(unsigned char *)(v48 + 8))
            {
              uint64_t v49 = *(NSObject **)v48;
              if (*(void *)v48)
              {
                if (os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG))
                {
                  std::unique_lock<std::mutex> __lk = *(std::unique_lock<std::mutex> *)a2;
                  sub_16C9C4((uint64_t)&v73, (unsigned int *)&__lk);
                  if (v75 >= 0) {
                    __int16 v50 = &v73;
                  }
                  else {
                    __int16 v50 = v73;
                  }
                  buf.int mSelector = 136315906;
                  *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
                  __int16 v102 = 1024;
                  int v103 = 288;
                  __int16 v104 = 2080;
                  *(void *)__int16 v105 = v50;
                  *(_WORD *)&v105[8] = 1024;
                  *(_DWORD *)&v105[10] = a1;
                  _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
                  if (v75 < 0) {
                    operator delete(v73);
                  }
                }
              }
            }
          }
          sub_6651C((uint64_t)&__p);
          std::condition_variable::~condition_variable(&v111);
          std::mutex::~mutex(&v112);
          AudioObjectID v51 = v87;
LABEL_117:
          if (v51) {
            operator delete(v51);
          }
          return;
        }
      }
      BOOL v32 = 0;
      if (!v67) {
        goto LABEL_58;
      }
LABEL_57:
      uint64_t v68 = v31;
      operator delete(v31);
      goto LABEL_58;
    }
    uint64_t v84 = 0;
    int v85 = 0;
    uint64_t v86 = 0;
    AudioObjectID v51 = v87;
    sub_46B38(&v84, v87, v88, (v88 - (uint64_t)v87) >> 2);
    uint64_t v81 = 0;
    char v82 = 0;
    uint64_t v83 = 0;
    sub_46B38(&v81, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
    char v52 = v84;
    uint64_t v53 = v81;
    if (v85 - v84 == v82 - v81)
    {
      BOOL v54 = memcmp(v84, v81, v85 - v84) == 0;
      if (!v53)
      {
LABEL_125:
        if (v52)
        {
          int v85 = v52;
          operator delete(v52);
          if (!v54) {
            goto LABEL_49;
          }
        }
        else if (!v54)
        {
          goto LABEL_49;
        }
        uint64_t v55 = sub_32A48(13);
        if (*(unsigned char *)(v55 + 8))
        {
          __int16 v56 = *(NSObject **)v55;
          if (*(void *)v55)
          {
            if (os_log_type_enabled(*(os_log_t *)v55, OS_LOG_TYPE_DEBUG))
            {
              buf.int mSelector = 136315650;
              *(void *)&buf.AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
              __int16 v102 = 1024;
              int v103 = 219;
              __int16 v104 = 1024;
              *(_DWORD *)__int16 v105 = a1;
              _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
            }
          }
        }
        goto LABEL_117;
      }
    }
    else
    {
      BOOL v54 = 0;
      if (!v81) {
        goto LABEL_125;
      }
    }
    char v82 = v53;
    operator delete(v53);
    goto LABEL_125;
  }
}

void sub_22FEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *__p)
{
  sub_6651C((uint64_t)&a35);
  std::condition_variable::~condition_variable((std::condition_variable *)(v47 - 216));
  std::mutex::~mutex((std::mutex *)(v47 - 168));
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_22FFDC(uint64_t a1, uint64_t a2)
{
  int v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].int mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_869C8((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v21;
  if (v21)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v19, v6);
        int v9 = v20;
        uint64_t v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v15);
        char v11 = v19;
        if (v9 < 0) {
          char v11 = v10;
        }
        char v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          char v12 = __p;
        }
        buf[0].int mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        int v27 = v11;
        __int16 v28 = 2080;
        unint64_t v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)buf, 0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }
  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_46B38(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_2301D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    if (a22) {
      operator delete(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_230214(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

uint64_t sub_230250(uint64_t a1, double *a2, AudioObjectPropertySelector a3)
{
  uint64_t v3 = sub_230324(a1, a2, 1, a3);
  if (v3)
  {
    int v4 = (os_log_t *)sub_32A48(22);
    UInt32 v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        int v8 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 159;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting the USB format", (uint8_t *)&v7, 0x12u);
      }
    }
  }
  return v3;
}

uint64_t sub_230324(uint64_t a1, double *a2, int a3, AudioObjectPropertySelector a4)
{
  int v8 = *a2;
  uint64_t v9 = sub_32A48(11);
  if (*(unsigned char *)(v9 + 8))
  {
    int v10 = *(NSObject **)v9;
    if (*(void *)v9)
    {
      if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        __int16 v30 = "IAPManager.cpp";
        __int16 v31 = 1024;
        int v32 = 401;
        __int16 v33 = 1024;
        int v34 = v8;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d +- IAPManager::GetNearestSampleRateForUSB(inSampleRate: %u)", buf, 0x18u);
      }
    }
  }
  int v11 = IAPDigitalAudioSupportedSampleRate();
  char v12 = (os_log_t *)sub_32A48(11);
  AudioObjectID v13 = *v12;
  if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    __int16 v30 = "IAPManager.cpp";
    __int16 v31 = 1024;
    int v32 = 404;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 1024;
    LODWORD(v36) = v11;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d IAPDigitalAudioSupportedSampleRate(%u) returned %u.", buf, 0x1Eu);
  }
  if (v11 != v8)
  {
    uint64_t v15 = 560226676;
    int v16 = (os_log_t *)sub_32A48(22);
    os_log_t v17 = *v16;
    if (!*v16 || !os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR)) {
      return v15;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    __int16 v30 = "Stream_USB_iAP_Aspen.cpp";
    __int16 v31 = 1024;
    int v32 = 208;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 1024;
    LODWORD(v36) = v11;
    char v18 = "%25s:%-5d Format's sample rate %u Hz is not a supported iAP digital audio rate (nearest is %u Hz)";
    uint64_t v19 = v17;
    uint32_t v20 = 30;
LABEL_18:
    _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, v18, buf, v20);
    return v15;
  }
  if (!sub_2408D4(v8))
  {
    uint64_t v15 = 2003329396;
    unsigned int v21 = (os_log_t *)sub_32A48(22);
    os_log_t v22 = *v21;
    if (!*v21 || !os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR)) {
      return v15;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    __int16 v30 = "Stream_USB_iAP_Aspen.cpp";
    __int16 v31 = 1024;
    int v32 = 202;
    char v18 = "%25s:%-5d Error setting the iAP digital audio sample rate";
    uint64_t v19 = v22;
    uint32_t v20 = 18;
    goto LABEL_18;
  }
  if (a3) {
    uint64_t v14 = sub_190B40(a1, (uint64_t)a2, a4);
  }
  else {
    uint64_t v14 = sub_191B80(a1, a2, a4);
  }
  uint64_t v15 = v14;
  if (v14)
  {
    uint64_t v23 = (os_log_t *)sub_32A48(22);
    char v24 = *v23;
    if (*v23)
    {
      if (os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v15);
        if (v28 >= 0) {
          uint64_t v25 = __p;
        }
        else {
          uint64_t v25 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        __int16 v30 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v31 = 1024;
        int v32 = 198;
        __int16 v33 = 1024;
        int v34 = v15;
        __int16 v35 = 2080;
        std::chrono::steady_clock::time_point v36 = v25;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d ('%s') setting the HAL stream format", buf, 0x22u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  return v15;
}

uint64_t sub_230694(uint64_t a1, double *a2)
{
  uint64_t v2 = sub_230324(a1, a2, 1, 0x73666D74u);
  if (v2)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(22);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        int v7 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 170;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting the USB format", (uint8_t *)&v6, 0x12u);
      }
    }
  }
  return v2;
}

uint64_t sub_23076C(uint64_t a1, double *a2, AudioObjectPropertySelector a3)
{
  uint64_t v3 = sub_230324(a1, a2, 0, a3);
  if (v3)
  {
    int v4 = (os_log_t *)sub_32A48(22);
    UInt32 v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        __int16 v8 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v9 = 1024;
        int v10 = 148;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting the USB format", (uint8_t *)&v7, 0x12u);
      }
    }
  }
  return v3;
}

uint64_t sub_230840(uint64_t a1, double *a2)
{
  uint64_t v2 = sub_230324(a1, a2, 0, 0x73666D74u);
  if (v2)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(22);
    int v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        int v7 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v8 = 1024;
        int v9 = 137;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting the USB format", (uint8_t *)&v6, 0x12u);
      }
    }
  }
  return v2;
}

uint64_t sub_230918(uint64_t a1, void **a2, AudioObjectPropertySelector a3)
{
  if (*a2 != a2[1])
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v46 = (os_log_t *)sub_32A48(13);
    uint64_t v47 = *v46;
    if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v56 = "Stream_USB_iAP_Aspen.cpp";
      __int16 v57 = 1024;
      int v58 = 81;
      _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"specified StreamFormatList is not empty\"", buf, 0x12u);
    }
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "specified StreamFormatList is not empty");
  }
  sub_240A3C((uint64_t)theArray);
  if (theArray[0])
  {
    int Count = CFArrayGetCount(theArray[0]);
    if (!Count)
    {
      uint64_t v14 = (os_log_t *)sub_32A48(22);
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          __int16 v56 = "Stream_USB_iAP_Aspen.cpp";
          __int16 v57 = 1024;
          int v58 = 91;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d IAPDigitalAudioCopySupportSampleRates() returned a CFArrayRef with a count of 0", buf, 0x12u);
        }
      }
    }
    AudioObjectID v51 = 0;
    char v52 = 0;
    uint64_t v53 = 0;
    uint64_t v7 = sub_191F2C(a1, &v51, a3);
    if (v7)
    {
      __int16 v8 = (os_log_t *)sub_32A48(22);
      int v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, v7);
        int v10 = v50 >= 0 ? __p : (void **)__p[0];
        int v11 = *(_DWORD *)(a1 + 80);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        __int16 v56 = "Stream_USB_iAP_Aspen.cpp";
        __int16 v57 = 1024;
        int v58 = 96;
        __int16 v59 = 1024;
        int v60 = v7;
        __int16 v61 = 2080;
        uint64_t v62 = v10;
        __int16 v63 = 1024;
        int v64 = v11;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %d ('%s') getting the HAL stream formats for stream %u", buf, 0x28u);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else if (Count)
    {
      unsigned int v16 = 0;
      char v18 = (double *)v51;
      os_log_t v17 = v52;
      do
      {
        LODWORD(__p[0]) = 0;
        if (sub_1D1B30(theArray, v16, __p))
        {
          uint64_t v19 = (os_log_t *)sub_32A48(22);
          uint32_t v20 = *v19;
          if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v56 = "Stream_USB_iAP_Aspen.cpp";
            __int16 v57 = 1024;
            int v58 = 107;
            __int16 v59 = 1024;
            int v60 = (int)__p[0];
            _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to resolve iAP digital audio sample rate %u Hz to a HAL stream format", buf, 0x18u);
          }
          unsigned int v21 = v18;
          if (v17 != v18)
          {
            unsigned int v21 = v18;
            while (LODWORD(__p[0]) < v21[5] || LODWORD(__p[0]) > v21[6])
            {
              v21 += 7;
              if (v21 == v17) {
                goto LABEL_51;
              }
            }
          }
          if (v17 != v21)
          {
            char v24 = (double *)a2[1];
            uint64_t v25 = (double *)a2[2];
            if (v24 >= v25)
            {
              uint64_t v30 = 0x6DB6DB6DB6DB6DB7 * (((char *)v24 - (unsigned char *)*a2) >> 3);
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) > 0x492492492492492) {
                sub_60548();
              }
              unint64_t v32 = 0x6DB6DB6DB6DB6DB7 * (((char *)v25 - (unsigned char *)*a2) >> 3);
              if (2 * v32 > v31) {
                unint64_t v31 = 2 * v32;
              }
              if (v32 >= 0x249249249249249) {
                unint64_t v33 = 0x492492492492492;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33) {
                unint64_t v33 = (unint64_t)sub_1927E0(v33);
              }
              else {
                uint64_t v34 = 0;
              }
              unint64_t v35 = v33 + 56 * v30;
              long long v36 = *(_OWORD *)v21;
              long long v37 = *((_OWORD *)v21 + 1);
              long long v38 = *((_OWORD *)v21 + 2);
              *(double *)(v35 + 48) = v21[6];
              *(_OWORD *)(v35 + 16) = v37;
              *(_OWORD *)(v35 + 32) = v38;
              *(_OWORD *)unint64_t v35 = v36;
              char v40 = (char *)*a2;
              char v39 = (char *)a2[1];
              char v41 = (char *)v35;
              if (v39 != *a2)
              {
                do
                {
                  long long v42 = *(_OWORD *)(v39 - 56);
                  long long v43 = *(_OWORD *)(v39 - 40);
                  long long v44 = *(_OWORD *)(v39 - 24);
                  *((void *)v41 - 1) = *((void *)v39 - 1);
                  *(_OWORD *)(v41 - 24) = v44;
                  *(_OWORD *)(v41 - 40) = v43;
                  *(_OWORD *)(v41 - 56) = v42;
                  v41 -= 56;
                  v39 -= 56;
                }
                while (v39 != v40);
                char v39 = (char *)*a2;
              }
              unint64_t v29 = (void *)(v35 + 56);
              *a2 = v41;
              a2[1] = (void *)(v35 + 56);
              a2[2] = (void *)(v33 + 56 * v34);
              if (v39) {
                operator delete(v39);
              }
            }
            else
            {
              long long v26 = *(_OWORD *)v21;
              long long v27 = *((_OWORD *)v21 + 1);
              long long v28 = *((_OWORD *)v21 + 2);
              v24[6] = v21[6];
              *((_OWORD *)v24 + 1) = v27;
              *((_OWORD *)v24 + 2) = v28;
              *(_OWORD *)char v24 = v26;
              unint64_t v29 = v24 + 7;
            }
            a2[1] = v29;
          }
        }
        else
        {
          os_log_t v22 = (os_log_t *)sub_32A48(22);
          uint64_t v23 = *v22;
          if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            __int16 v56 = "Stream_USB_iAP_Aspen.cpp";
            __int16 v57 = 1024;
            int v58 = 117;
            _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not convert to a UInt32 array value from the CFArrayRef returned by IAPDigitalAudioCopySupportSampleRates()", buf, 0x12u);
          }
        }
LABEL_51:
        ++v16;
      }
      while (v16 != Count);
    }
    if (v51) {
      operator delete(v51);
    }
  }
  else
  {
    char v12 = (os_log_t *)sub_32A48(22);
    uint64_t v7 = 2003329396;
    AudioObjectID v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v56 = "Stream_USB_iAP_Aspen.cpp";
      __int16 v57 = 1024;
      int v58 = 124;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d IAPDigitalAudioCopySupportSampleRates() returned a NULL CFArrayRef", buf, 0x12u);
    }
  }
  sub_3D61C((uint64_t)theArray);
  return v7;
}

void sub_230F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_3D61C((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_230F64(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, a2, 1936092513);
}

void sub_230F90(void *a1)
{
  *a1 = off_625BF0;
  sub_FE920((uint64_t)a1);

  operator delete();
}

uint64_t sub_230FE4(uint64_t a1)
{
  *(void *)a1 = off_625BF0;
  return sub_FE920(a1);
}

void sub_231004(uint64_t a1)
{
  char v24 = 0;
  uint64_t v25 = 0;
  AudioObjectPropertyAddress __p = (void *)sub_10FBF0();
  LOBYTE(v10) = (*(uint64_t (**)(void *))(*(void *)__p + 16))(__p);
  ++*((_DWORD *)__p + 114);
  sub_3BCAC(&__p);
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = 0x706D776970687077;
  AudioObjectPropertyAddress __p = v2;
  int v10 = v2 + 1;
  int v11 = v2 + 1;
  strcpy(v12, "cwdv");
  char v13 = 0;
  int v14 = 3;
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = &v16;
  int v18 = 44739242;
  CFTypeRef cf = 0;
  sub_43637C(v20, a1, (uint64_t)&__p);
  sub_FB288((uint64_t *)&v21, v20);
  sub_8108(v20);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v16);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
  for (uint64_t i = v22; (CFTypeRef *)i != &v21; uint64_t i = *(void *)(i + 8))
  {
    (*(void (**)(void, void, void, void))(**(void **)(i + 16) + 544))(*(void *)(i + 16), 0, 0, 0);
    int v4 = (_DWORD *)sub_10FBF0();
    UInt32 v5 = *(std::__shared_weak_count **)(i + 24);
    AudioObjectPropertyAddress __p = *(void **)(i + 16);
    int v10 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1106D8(v4, (uint64_t *)&__p);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_B8E4((uint64_t *)&v21);
  int v6 = operator new(8uLL);
  *int v6 = 0x7075736F70687077;
  AudioObjectPropertyAddress __p = v6;
  int v10 = v6 + 1;
  int v11 = v6 + 1;
  strcpy(v12, "cwdv");
  char v13 = 0;
  int v14 = 3;
  unsigned int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v15 = &v16;
  int v18 = 44739242;
  CFTypeRef cf = 0;
  sub_43637C((uint64_t *)&v21, a1, (uint64_t)&__p);
  uint64_t v7 = v23;
  sub_8108((uint64_t *)&v21);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v16);
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    sub_87458();
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(&__p, a1);
    __int16 v8 = __p;
    if (__p) {
      CFRetain(__p);
    }
    sub_14E44(&v21, v8);
    (*(void (**)(void))(qword_64A1C8 + 56))();
    if (v21) {
      CFRelease(v21);
    }
    sub_72924((uint64_t)&__p);
  }
  sub_430D98(a1);
}

void sub_231320(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_6393C((const void **)(v1 - 104));
  sub_72924((uint64_t)va);
  sub_F69B4(v1 - 80);
}

void sub_2313C8(uint64_t a1, __int32 **a2, char a3)
{
  uint64_t v3 = *a2;
  int v4 = a2[1];
  if ((unint64_t)((char *)v4 - (char *)*a2) >= 8)
  {
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    char v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      long long v37 = "Device_USB_Aspen.cpp";
      __int16 v38 = 1024;
      int v39 = 1206;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (v3 != v4)
  {
    __int32 v7 = *v3;
    __int32 __c = *v3;
    uint64_t v8 = sub_32A48(17);
    if (*(unsigned char *)(v8 + 8))
    {
      int v9 = *(NSObject **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          long long v37 = "Device_USB_Aspen.cpp";
          __int16 v38 = 1024;
          int v39 = 1213;
          __int16 v40 = 1024;
          LODWORD(v41) = v7;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to activate sub-port with ID %u", buf, 0x18u);
        }
      }
    }
    sub_4361E4((uint64_t *)buf, a1);
    sub_8E4B8(&v33, buf);
    sub_8108((uint64_t *)buf);
    int v10 = v34;
    if (v34 == &v33)
    {
      sub_B8E4(&v33);
      goto LABEL_46;
    }
    char v11 = 0;
    while (1)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v10[2] + 168))(&__p);
      char v12 = v32;
      char v13 = wmemchr((__int32 *)__p, __c, ((char *)v32 - (unsigned char *)__p) >> 2);
      if (v13) {
        char v12 = v13;
      }
      int v14 = v32;
      if (v12 == v32) {
        goto LABEL_27;
      }
      int v15 = *(_DWORD *)(v10[2] + 144);
      if (v15 > 1886740851)
      {
        if (v15 == 1886740852 || v15 == 1886745449)
        {
LABEL_24:
          if ((a3 & 1) == 0)
          {
LABEL_33:
            uint64_t v19 = (os_log_t *)sub_32A48(13);
            uint32_t v20 = *v19;
            if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
            {
              sub_4F64((uint64_t)v29, (os_unfair_lock_t)(v10[2] + 8));
              CFTypeRef v21 = v30 >= 0 ? v29 : (void **)v29[0];
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              long long v37 = "Device_USB_Aspen.cpp";
              __int16 v38 = 1024;
              int v39 = 1231;
              __int16 v40 = 2080;
              char v41 = v21;
              _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Scope of Port (%s) does not match scope of input parameter\"", buf, 0x1Cu);
              if (v30 < 0) {
                operator delete(v29[0]);
              }
            }
            uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v22, "Scope of Port (%s) does not match scope of input parameter");
          }
          unsigned int v17 = 1768845428;
          goto LABEL_26;
        }
      }
      else if (v15 == 1885894516 || v15 == 1886222185)
      {
        goto LABEL_24;
      }
      if (a3) {
        goto LABEL_33;
      }
      unsigned int v17 = 1869968496;
LABEL_26:
      *(_DWORD *)AudioObjectPropertyAddress buf = 1936945763;
      long long v37 = (const char *)v17;
      (*(void (**)(uint64_t, uint8_t *, void, void, uint64_t, __int32 *))(*(void *)a1 + 48))(a1, buf, 0, 0, 4, &__c);
      char v11 = 1;
LABEL_27:
      if (__p)
      {
        unint64_t v32 = (__int32 *)__p;
        operator delete(__p);
      }
      if (v12 == v14)
      {
        int v10 = (uint64_t *)v10[1];
        if (v10 != &v33) {
          continue;
        }
      }
      sub_B8E4(&v33);
      if (v11) {
        return;
      }
LABEL_46:
      long long v26 = (os_log_t *)sub_32A48(13);
      long long v27 = *v26;
      if (*v26)
      {
        if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          long long v37 = "Device_USB_Aspen.cpp";
          __int16 v38 = 1024;
          int v39 = 1241;
          __int16 v40 = 1024;
          LODWORD(v41) = __c;
          _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not locate sub-port with ID: %u in order to activate it.\"", buf, 0x18u);
        }
      }
      long long v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v28, "Could not locate sub-port with ID: %u in order to activate it.");
    }
  }
}

void sub_2318A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_23191C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 494);
}

void sub_231924(uint64_t a1)
{
  AudioObjectPropertyAddress __p = 0;
  long long v26 = 0;
  uint64_t v27 = 0;
  strcpy(v28, "cwdv");
  v28[8] = 0;
  int v29 = 3;
  v31[0] = 0;
  v31[1] = 0;
  char v30 = v31;
  CFTypeRef cf = 0;
  int v32 = 44739210;
  sub_43637C(v24, a1, (uint64_t)&__p);
  if (v24[2])
  {
    uint64_t v2 = (os_log_t *)sub_32A48(17);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 751;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_INFO, "%25s:%-5d USB Device- tearing down current output ref port", buf, 0x12u);
    }
    sub_FB288((uint64_t *)buf, v24);
    uint64_t v4 = *(void *)&buf[8];
    if (*(unsigned char **)&buf[8] != buf)
    {
      while (1)
      {
        UInt32 v5 = *(_DWORD **)(v4 + 16);
        int v6 = v5[36];
        if (v6 == 1886745449) {
          goto LABEL_12;
        }
        if (v6 == 1886222185) {
          break;
        }
LABEL_16:
        char v11 = *(std::__shared_weak_count **)(v4 + 24);
        v23[0] = (unint64_t)v5;
        v23[1] = (unint64_t)v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_431020(a1, v23);
        if (v11) {
          sub_4636C(v11);
        }
        uint64_t v4 = *(void *)(v4 + 8);
        if ((unsigned char *)v4 == buf) {
          goto LABEL_21;
        }
      }
      (*(void (**)(_DWORD *, void, void, void))(*(void *)v5 + 544))(v5, 0, 0, 0);
      __int32 v7 = (_DWORD *)sub_10FBF0();
      uint64_t v8 = *(std::__shared_weak_count **)(v4 + 24);
      *(void *)uint64_t v34 = *(void *)(v4 + 16);
      *(void *)&v34[8] = v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1106D8(v7, (uint64_t *)v34);
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
LABEL_12:
      int v9 = (os_log_t *)sub_32A48(17);
      int v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v34 = 136315394;
        *(void *)&v34[4] = "Device_USB_Aspen.cpp";
        *(_WORD *)&v34[12] = 1024;
        *(_DWORD *)&v34[14] = 767;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_INFO, "%25s:%-5d USB Device- tearing down current input port of output device", v34, 0x12u);
      }
      *(unsigned char *)(a1 + 493) = 0;
      UInt32 v5 = *(_DWORD **)(v4 + 16);
      goto LABEL_16;
    }
LABEL_21:
    sub_B8E4((uint64_t *)buf);
  }
  char v12 = (unsigned char *)sub_231E4C(a1);
  if (v12)
  {
    sub_43637C((uint64_t *)buf, (uint64_t)v12, (uint64_t)&__p);
    if (*(void *)&buf[16])
    {
      uint64_t v13 = *(void *)&buf[8];
      int v14 = *(std::__shared_weak_count **)(*(void *)&buf[8] + 24);
      if (v14)
      {
        int v15 = std::__shared_weak_count::lock(v14);
        if (v15)
        {
          unsigned int v16 = v15;
          unsigned int v17 = *(_DWORD **)(v13 + 16);
          if (v17)
          {
            int v18 = v17[36];
            if (v18 == 1886745449) {
              goto LABEL_30;
            }
            if (v18 == 1886222185)
            {
              (*(void (**)(_DWORD *, void, void, void))(*(void *)v17 + 544))(v17, 0, 0, 0);
              uint64_t v19 = (_DWORD *)sub_10FBF0();
              *(void *)uint64_t v34 = v17;
              *(void *)&v34[8] = v16;
              atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              sub_1106D8(v19, (uint64_t *)v34);
              std::__shared_weak_count::__release_weak(v16);
LABEL_30:
              uint32_t v20 = (os_log_t *)sub_32A48(17);
              CFTypeRef v21 = *v20;
              if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)uint64_t v34 = 136315394;
                *(void *)&v34[4] = "Device_USB_Aspen.cpp";
                *(_WORD *)&v34[12] = 1024;
                *(_DWORD *)&v34[14] = 794;
                _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_INFO, "%25s:%-5d USB Device- tearing down input port", v34, 0x12u);
              }
              v22[0] = (unint64_t)v17;
              v22[1] = (unint64_t)v16;
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_431020((uint64_t)v12, v22);
              sub_4636C(v16);
              v12[493] = 0;
              sub_231FD8(v12);
            }
          }
          sub_4636C(v16);
        }
      }
    }
  }
  else
  {
    *(void *)AudioObjectPropertyAddress buf = buf;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0;
  }
  sub_8108((uint64_t *)buf);
  sub_8108(v24);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v31[0]);
  if (__p)
  {
    long long v26 = __p;
    operator delete(__p);
  }
}

void sub_231D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::__shared_weak_count::__release_weak(v18);
  sub_4636C(v18);
  sub_8108((uint64_t *)(v19 - 128));
  sub_8108(&a15);
  sub_470A4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_231E4C(uint64_t a1)
{
  uint64_t v10 = 0x676C6F626C634944;
  int v11 = 0;
  int v8 = 4;
  int v9 = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v10)) {
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, int *))(*(void *)a1 + 40))(a1, &v10, 0, 0, &v8, &v9);
  uint64_t v2 = sub_F820C();
  int v3 = v9;
  uint64_t v12 = 0x676C6F626C634944;
  int v13 = 0;
  uint64_t v4 = v2 + 104;
  uint64_t v5 = *(void *)(v2 + 112);
  if (v5 == v2 + 104) {
    return 0;
  }
  while (1)
  {
    int v15 = 0;
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6 != a1 && ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v12) & 1) != 0)
    {
      int v14 = 4;
      (*(void (**)(void, uint64_t *, void, void, int *, int *))(**(void **)(v5 + 16) + 40))(*(void *)(v5 + 16), &v12, 0, 0, &v14, &v15);
      if (v15 == v3) {
        break;
      }
    }
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5 == v4) {
      return 0;
    }
  }
  if (v5 == v4) {
    return 0;
  }
  else {
    return *(void *)(v5 + 16);
  }
}

void sub_231FD8(unsigned char *a1)
{
  if (!a1[492] || !a1[493])
  {
    BOOL v26 = sub_234B00((uint64_t)a1);
    int v2 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 88))(a1, 1);
    unsigned int v3 = (*(uint64_t (**)(unsigned char *, void))(*(void *)a1 + 88))(a1, 0);
    BOOL v4 = sub_234B00((uint64_t)a1);
    uint64_t v5 = (os_log_t *)sub_32A48(17);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(uint8_t *__return_ptr, unsigned char *))(*(void *)a1 + 128))(v38, a1);
      CFTypeRef v7 = *(CFTypeRef *)v38;
      int v8 = (*(uint64_t (**)(unsigned char *, void))(*(void *)a1 + 88))(a1, 0);
      int v9 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 88))(a1, 1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 901;
      *(_WORD *)&unsigned char buf[18] = 2112;
      *(void *)&unsigned char buf[20] = v7;
      __int16 v33 = 1024;
      BOOL v34 = v26;
      __int16 v35 = 1024;
      int v36 = v8;
      v37[0] = 1024;
      *(_DWORD *)&v37[1] = v9;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device %@ hasSpeakerTapStream %d num input streams %u num output streams %u", buf, 0x2Eu);
      sub_72924((uint64_t)v38);
    }
    uint64_t v10 = sub_231E4C((uint64_t)a1);
    if (v10) {
      sub_234B00(v10);
    }
    if (v2) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = v3 > v4;
    }
    if (!v11)
    {
      uint64_t v12 = (os_log_t *)sub_32A48(17);
      int v13 = *v12;
      if (*v12)
      {
        if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = 908;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d USB audio device has no streams", buf, 0x12u);
        }
      }
    }
    int v14 = (os_log_t *)sub_32A48(17);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(uint8_t *__return_ptr, unsigned char *))(*(void *)a1 + 128))(v38, a1);
      CFTypeRef v16 = *(CFTypeRef *)v38;
      sub_234BEC((uint64_t)buf, (uint64_t)a1, COERCE_DOUBLE(1735159650));
      if (buf[16])
      {
        BOOL v17 = sub_234C80(*(const __CFDictionary **)&buf[8]) != 0;
        if (buf[16]) {
          sub_49A90(buf);
        }
      }
      else
      {
        BOOL v17 = 0;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = 909;
      *(_WORD *)&unsigned char buf[18] = 2112;
      *(void *)&unsigned char buf[20] = v16;
      __int16 v33 = 1024;
      BOOL v34 = v17;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d USB device %@ HasHeadsetInfo: %d", buf, 0x22u);
      sub_72924((uint64_t)v38);
    }
    BOOL v25 = sub_234CA0((uint64_t)a1);
    if (v2 && !a1[492])
    {
      unsigned int v18 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 440))(a1, 1);
      int v19 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)a1 + 88))(a1, 1);
      if (v18 <= 2 && v19 == 1 && !sub_172718((uint64_t)a1) && !v25)
      {
        (*(void (**)(CFTypeRef *__return_ptr, unsigned char *))(*(void *)a1 + 448))(&v28, a1);
        CFTypeRef cf = 0;
        strcpy(__p, "manlbolg");
        char v30 = 0;
        __int16 v31 = 0;
        sub_2379A4((uint64_t)buf, (uint64_t)a1);
        v38[0] = 0;
        LOBYTE(v40) = 0;
        if (buf[24]
          && (uint32_t v20 = *(const void **)&buf[16],
              *(void *)&buf[16] = 0,
              *(void *)__int16 v38 = off_63E5A8,
              CFTypeRef v39 = v20,
              LOBYTE(v40) = 1,
              sub_49A90(&buf[8]),
              (_BYTE)v40))
        {
          CFTypeRef v21 = v39;
          if (v39)
          {
            CFRetain(v39);
            sub_14E44(buf, v21);
            uint64_t v22 = *(const void **)buf;
          }
          else
          {
            uint64_t v22 = 0;
          }
          CFTypeRef v23 = cf;
          CFTypeRef cf = v22;
          *(void *)AudioObjectPropertyAddress buf = v23;
        }
        else
        {
          sub_235134(&cf, v28);
        }
        if ((_BYTE)v40) {
          sub_49A90(v38);
        }
        sub_87458();
        (*(void (**)(uint64_t *, CFTypeRef *, CFTypeRef *))(qword_64A1C8 + 40))(&qword_64A1C8, &cf, &v28);
        if (cf) {
          CFRelease(cf);
        }
        if (v28) {
          CFRelease(v28);
        }
      }
      sub_87458();
      (*(void (**)(unsigned char *__return_ptr, unsigned char *))(*(void *)a1 + 128))(buf, a1);
      char v24 = *(const void **)buf;
      if (*(void *)buf) {
        CFRetain(*(CFTypeRef *)buf);
      }
      sub_14E44(v38, v24);
      (*(void (**)(uint64_t *, uint8_t *, uint64_t))(qword_64A1C8 + 56))(&qword_64A1C8, v38, 1);
      if (*(void *)v38) {
        CFRelease(*(CFTypeRef *)v38);
      }
      sub_72924((uint64_t)buf);
      (*(void (**)(unsigned char *, uint64_t))(*(void *)a1 + 440))(a1, 1);
      sub_439750();
    }
    if (v3 > v4 && !a1[493])
    {
      (*(void (**)(unsigned char *, void))(*(void *)a1 + 440))(a1, 0);
      sub_43A330();
    }
  }
}

void sub_2345C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33)
{
  sub_4636C(v38);
  sub_4636C(v35);
  std::__shared_weak_count::__release_weak(v33);
  std::__shared_weak_count::__release_weak(v34);
  sub_B8E4((uint64_t *)&a23);
  if (v37) {
    sub_4636C(v37);
  }
  if (v36) {
    sub_4636C(v36);
  }
  sub_B8E4((uint64_t *)(v39 - 144));
  _Unwind_Resume(a1);
}

BOOL sub_234B00(uint64_t a1)
{
  sub_2355A0(a1);
  uint64_t v9 = 0x6F75747074617064;
  int v10 = 0;
  int v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 16))(a1, &v9);
  BOOL result = 0;
  if (v2)
  {
    uint64_t v9 = 0x6F75747074617064;
    int v10 = 0;
    uint64_t v4 = sub_99A40(a1);
    BOOL result = 0;
    *((void *)&v6 + 1) = v5;
    *(void *)&long long v6 = v4;
    uint64_t v7 = HIDWORD(v4);
    if (((v6 >> 32) & 0xFF00000000) != 0 && v7 != 0) {
      return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1) != 0;
    }
  }
  return result;
}

void *sub_234BEC(uint64_t a1, uint64_t a2, double a3)
{
  int v10 = 1751474532;
  double v11 = a3;
  BOOL result = (void *)sub_237C6C((uint64_t)&v6, a2);
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  if (v9)
  {
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    *(void *)a1 = &off_6412B0;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = 1;
    return sub_49A90(&v7);
  }
  return result;
}

CFDictionaryRef sub_234C80(const __CFDictionary *result)
{
  if (result) {
    return (const __CFDictionary *)CFDictionaryGetCount(result);
  }
  return result;
}

BOOL sub_234CA0(uint64_t a1)
{
  if (*(void *)(a1 + 484) != 0x110A000005ACLL)
  {
    unint64_t v3 = sub_237ABC(1869968496, a1);
    if (!HIDWORD(v3) || v3 == 1026 || v3 == 770)
    {
      unint64_t v4 = sub_237ABC(1768845428, a1);
      if (!HIDWORD(v4) || v4 == 1026 || v4 == 770)
      {
        strcpy(v19, "CFAubolg");
        v19[9] = 0;
        __int16 v20 = 0;
        if (sub_FE748(a1))
        {
          LOBYTE(v24) = 0;
          char v25 = 0;
          LODWORD(valuePtr) = 2003329396;
          LOBYTE(v17) = 0;
          char v18 = 0;
          sub_15EF88((uint64_t)&v24);
          if (sub_FE7BC(a1))
          {
            char v24 = 0;
            LODWORD(valuePtr) = sub_FE830(a1);
            if (!valuePtr)
            {
              uint64_t v5 = v24;
              uint64_t v22 = v24;
              sub_1707BC(&v21, &v22);
              char v18 = 1;
              CFNumberRef v17 = v21;
              if (v5) {
                CFRelease(v5);
              }
            }
          }
        }
        else
        {
          LOBYTE(v24) = 0;
          char v25 = 0;
          LODWORD(valuePtr) = 2003332927;
          LOBYTE(v17) = 0;
          char v18 = 0;
          sub_15EF88((uint64_t)&v24);
        }
        LOBYTE(v14) = 0;
        char v15 = 0;
        if (v18)
        {
          CFNumberRef v14 = v17;
          CFNumberRef v17 = 0;
          char v15 = 1;
        }
        sub_15EF88((uint64_t)&v17);
        if (v15)
        {
          if (v14)
          {
            CFTypeID TypeID = CFNumberGetTypeID();
            if (TypeID == CFGetTypeID(v14))
            {
              switch(CFNumberGetType(v14))
              {
                case kCFNumberSInt8Type:
                  LOBYTE(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberSInt8Type, &valuePtr);
                  goto LABEL_41;
                case kCFNumberSInt16Type:
                  LOWORD(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberSInt16Type, &valuePtr);
                  goto LABEL_41;
                case kCFNumberSInt32Type:
                  LODWORD(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberSInt32Type, &valuePtr);
                  goto LABEL_41;
                case kCFNumberSInt64Type:
                  uint64_t valuePtr = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberSInt64Type, &valuePtr);
                  goto LABEL_41;
                case kCFNumberFloat32Type:
                  __int16 v9 = sub_237BEC(v14, kCFNumberFloat32Type);
                  goto LABEL_36;
                case kCFNumberFloat64Type:
                  __int16 v9 = sub_237C2C(v14, kCFNumberFloat64Type);
                  goto LABEL_36;
                case kCFNumberCharType:
                  LOBYTE(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberCharType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberShortType:
                  LOWORD(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberShortType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberIntType:
                  LODWORD(valuePtr) = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberIntType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberLongType:
                  uint64_t valuePtr = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberLongType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberLongLongType:
                  uint64_t valuePtr = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberLongLongType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberFloatType:
                  __int16 v9 = sub_237BEC(v14, kCFNumberFloatType);
                  goto LABEL_36;
                case kCFNumberDoubleType:
                  __int16 v9 = sub_237C2C(v14, kCFNumberDoubleType);
                  goto LABEL_36;
                case kCFNumberCFIndexType:
                  uint64_t valuePtr = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberCFIndexType, &valuePtr);
                  goto LABEL_41;
                case kCFNumberNSIntegerType:
                  uint64_t valuePtr = 0;
                  int Value = CFNumberGetValue(v14, kCFNumberNSIntegerType, &valuePtr);
LABEL_41:
                  int v10 = Value != 0;
                  if (Value) {
                    LOBYTE(v9) = valuePtr;
                  }
                  else {
                    LOBYTE(v9) = 0;
                  }
                  goto LABEL_44;
                case kCFNumberCGFloatType:
                  __int16 v9 = sub_237C2C(v14, kCFNumberCGFloatType);
LABEL_36:
                  int v10 = HIBYTE(v9);
LABEL_44:
                  if (v10) {
                    goto LABEL_45;
                  }
                  goto LABEL_53;
                default:
                  goto LABEL_53;
              }
            }
            CFTypeID v8 = CFBooleanGetTypeID();
            if (v8 == CFGetTypeID(v14))
            {
              LOBYTE(v9) = CFBooleanGetValue(v14);
LABEL_45:
              BOOL v1 = v9 == 4 || v9 == 13;
              goto LABEL_51;
            }
LABEL_53:
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not convert");
          }
          else
          {
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
          }
        }
        BOOL v1 = 0;
LABEL_51:
        sub_15EF88((uint64_t)&v14);
        return v1;
      }
    }
  }
  return 0;
}

void sub_2350C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_free_exception(v9);
  sub_15EF88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

const void **sub_235134(const void **a1, CFTypeRef cf)
{
  unint64_t v3 = *a1;
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t sub_235180(int a1, uint64_t a2)
{
  if (sub_207DFC())
  {
    int v4 = 1;
  }
  else if (MGGetBoolAnswer())
  {
    int v4 = MGGetBoolAnswer();
  }
  else
  {
    int v4 = 0;
  }
  if (qword_64BB20 != -1) {
    dispatch_once(&qword_64BB20, &stru_6235F8);
  }
  int v5 = byte_64BB1A;
  int v6 = sub_20A744();
  if (v5) {
    int v7 = 1;
  }
  else {
    int v7 = v4;
  }
  uint64_t result = 2;
  if (a2 && v7)
  {
    if ((sub_2355A0(a2) | v6))
    {
      return 1;
    }
    else if (a1 == 1869968496)
    {
      unsigned int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 440))(a2, 1);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, 1) != 1 || v12 >= 3) {
        return 2;
      }
      else {
        return 1;
      }
    }
    else if (a1 == 1768845428)
    {
      unsigned int v9 = sub_4584EC(a2, 0);
      int v10 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
      if (v10 - (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 312))(a2) & 0xFF00000000) != 0) != 1
        || v9 >= 3)
      {
        return 2;
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

BOOL sub_235388(uint64_t a1)
{
  unsigned int v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 440))(a1, 1);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, 1);
  if (v2 > 2 || v3 != 1) {
    return 0;
  }
  if (sub_234CA0(a1)) {
    return 1;
  }
  unsigned int v6 = sub_2372E4(0, a1);
  uint64_t v7 = sub_32A48(21);
  uint64_t v8 = sub_32A48(30);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_14;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_14:
  CFNumberRef v14 = *(NSObject **)v7;
  if (v14 && os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(__p, v6);
    char v15 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "Device_USB_Aspen.cpp";
    __int16 v20 = 1024;
    int v21 = 1426;
    __int16 v22 = 2080;
    CFTypeRef v23 = v15;
    _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Output using headset value: '%s'", buf, 0x1Cu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v6) {
    BOOL v16 = v6 == 1786082146;
  }
  else {
    BOOL v16 = 1;
  }
  return !v16;
}