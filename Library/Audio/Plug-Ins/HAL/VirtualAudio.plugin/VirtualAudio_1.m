void sub_8B924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_8B960((uint64_t)&a9);
  sub_72924((uint64_t)&a11);
  sub_8B960((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_8B960(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t sub_8B99C()
{
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

uint64_t sub_8B9E0(uint64_t a1, uint64_t a2)
{
  v3 = *(const void **)a2;
  if (*(void *)a2 != *(void *)a1)
  {
    if (*(void *)a1) {
      BOOL v5 = *(unsigned char *)(a1 + 8) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      CFRelease(*(CFTypeRef *)a1);
      v3 = *(const void **)a2;
    }
    *(void *)a1 = v3;
    int v6 = *(unsigned __int8 *)(a2 + 8);
    *(unsigned char *)(a1 + 8) = v6;
    if (v6) {
      BOOL v7 = v3 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      CFRetain(v3);
    }
  }
  return a1;
}

CFStringRef sub_8BA50()
{
  if (MGIsQuestionValid()) {
    MGGetSInt32Answer();
  }
  sub_2440C((uint64_t)v6);
  sub_256E4(&v7, (uint64_t)"AID", 3);
  std::ostream::operator<<();
  sub_246E4(__p, (uint64_t)v8);
  if (v5 >= 0) {
    v0 = __p;
  }
  else {
    v0 = (void **)__p[0];
  }
  CFStringRef v1 = CFStringCreateWithCString(0, (const char *)v0, 0x600u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  *(void *)((char *)v6
  uint64_t v7 = v2;
  if (v9 < 0) {
    operator delete((void *)v8[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return v1;
}

void sub_8BC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_5E32C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_8BC64(uint64_t a1)
{
  if (!_os_feature_enabled_impl()) {
    goto LABEL_8;
  }
  sub_8BD08(&v6, a1);
  char v2 = v6 ? sub_8BFA8(v6) ^ 1 : 1;
  if (v7) {
    sub_4636C(v7);
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v4 = 0x100000000;
    uint64_t v3 = 2;
  }
  else
  {
LABEL_8:
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  return v4 | v3;
}

void sub_8BCF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_8BD08(void *a1, uint64_t a2)
{
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v16 = "AggregateDevice_CommonBase.cpp";
      __int16 v17 = 1024;
      int v18 = 3476;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 136))(a2);
  sub_8C0F4(&v13, v4);
  uint64_t v5 = v13;
  if (!v13)
  {
    v10 = (os_log_t *)sub_32A48(13);
    v11 = *v10;
    if (*v10)
    {
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v16 = "AggregateDevice_CommonBase.cpp";
        __int16 v17 = 1024;
        int v18 = 3479;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mainDevice is NULL]: \"Got NULL for the aggregate's main physical device\"", buf, 0x12u);
      }
    }
    v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Got NULL for the aggregate's main physical device");
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 392))(v13))
  {
    int v6 = v14;
    *a1 = v5;
    a1[1] = v6;
    if (!v6) {
      return;
    }
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    int v6 = v14;
    if (!v14) {
      return;
    }
  }
  sub_4636C(v6);
}

void sub_8BF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_8BFA8(unsigned __int8 *a1)
{
  if (((*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 392))(a1) & 1) == 0)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "PhysicalDevice.h";
      __int16 v8 = 1024;
      int v9 = 379;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return a1[264];
}

void sub_8C0D8(_Unwind_Exception *exception_object)
{
}

std::__shared_weak_count *sub_8C0F4(void *a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        int v9 = "StandardUtilities.h";
        __int16 v10 = 1024;
        int v11 = 279;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 88);
  *a1 = *(void *)(a2 + 80);
  if (!v3)
  {
    a1[1] = 0;
LABEL_10:
    sub_5CABC();
  }
  uint64_t result = std::__shared_weak_count::lock(v3);
  a1[1] = result;
  if (!result) {
    goto LABEL_10;
  }
  return result;
}

void sub_8C214(_Unwind_Exception *exception_object)
{
}

uint64_t sub_8C230(uint64_t a1, int a2)
{
  sub_B680(v7, (void *)(a1 + 184), "", 510);
  for (uint64_t i = v7[1]; ; uint64_t i = *(void *)(i + 8))
  {
    if ((uint64_t *)i == v7)
    {
      uint64_t v5 = 0;
      goto LABEL_8;
    }
    if ((*(uint64_t (**)(void))(**(void **)(i + 16) + 200))(*(void *)(i + 16)))
    {
      uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(i + 16) + 200))(*(void *)(i + 16));
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 120))(v4) == a2) {
        break;
      }
    }
  }
  uint64_t v5 = 1;
LABEL_8:
  sub_B8E4(v7);
  return v5;
}

void sub_8C328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_8C33C(void *a1, int a2, int a3)
{
  uint64_t v25 = 3;
  BYTE4(v27) = a3;
  int v34 = 0;
  (*(void (**)(void *, uint64_t *, uint8_t *, uint64_t))(*a1 + 424))(a1, &v25, buf, 1869968496);
  uint64_t result = sub_8C710((uint64_t)&v27 + 4);
  uint64_t v7 = a1[68];
  uint64_t v8 = a1[69];
  if (v7 != v8)
  {
    int v9 = "disabled";
    if (a2) {
      __int16 v10 = "enabled";
    }
    else {
      __int16 v10 = "disabled";
    }
    if (a3) {
      float v11 = 1.0;
    }
    else {
      float v11 = 0.0;
    }
    if (a3) {
      int v9 = "enabled";
    }
    v24 = v9;
    do
    {
      uint64_t v12 = *(void *)(*(void *)v7 + 136);
      if (!*(void *)(v12 + 376))
      {
        uint64_t v20 = sub_32A48(13);
        v21 = sub_7D5E8(1, *(void **)v20, *(void *)(v20 + 8));
        v22 = v21;
        if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v27 = "DSPChain.mm";
          __int16 v28 = 1024;
          int v29 = 3109;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
      uint64_t v13 = *(id *)sub_32A48(41);
      v14 = v13;
      if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v15 = (void *)(v12 + 712);
        if (*(char *)(v12 + 735) < 0) {
          v15 = (void *)*v15;
        }
        *(_DWORD *)buf = 136315906;
        v27 = "DSPChain.mm";
        __int16 v28 = 1024;
        int v29 = 3113;
        __int16 v30 = 2080;
        v31 = v10;
        __int16 v32 = 2080;
        v33 = v15;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPChain::SetAdaptiveVolumeActive() - setting adaptive volume %s on chain '%s'.", buf, 0x26u);
      }

      uint64_t v16 = *(void *)(v12 + 376);
      atomic_store(a2, (unsigned __int8 *)(v16 + 64));
      atomic_store(a3, (unsigned __int8 *)(v16 + 65));
      uint64_t result = sub_A5E54((void *)(v12 + 1000), 2);
      if (result)
      {
        uint64_t result = sub_A5E54((void *)(v12 + 1000), 0);
        if ((result & 1) == 0)
        {
          __int16 v17 = *(id *)sub_32A48(41);
          int v18 = v17;
          if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            v19 = (void *)(v12 + 712);
            if (*(char *)(v12 + 735) < 0) {
              v19 = (void *)*v19;
            }
            *(_DWORD *)buf = 136315906;
            v27 = "DSPChain.mm";
            __int16 v28 = 1024;
            int v29 = 3124;
            __int16 v30 = 2080;
            v31 = v24;
            __int16 v32 = 2080;
            v33 = v19;
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPChain::SetAdaptiveVolumeActive() - setting AULoudnessNormalizer %s on chain '%s'.", buf, 0x26u);
          }

          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v12 + 72))(v12, 1685287015, 1819174254, 0, v11);
        }
      }
      v7 += 16;
    }
    while (v7 != v8);
  }
  return result;
}

void sub_8C6E4(_Unwind_Exception *a1)
{
  sub_8C710(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8C710(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_61F980[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_8C774(uint64_t a1, uint64_t a2)
{
  sub_8F90(*(char **)(a2 + 56));
  sub_8F90(*(char **)(a2 + 32));
  uint64_t v3 = *(void **)(a2 + 8);

  sub_463E0(v3);
}

void sub_8C7B8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 64) && *(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  if (*(unsigned char *)(a2 + 32) && *(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void sub_8C824(void *a1, unint64_t *a2, uint64_t a3, int a4)
{
  if (a4 != 1869968496)
  {
    if (a4 == 1768845428)
    {
LABEL_9:
      float v11 = (uint64_t *)a1[65];
      uint64_t v12 = (uint64_t *)a1[66];
      while (v11 != v12)
      {
        uint64_t v13 = *v11;
        v11 += 2;
        sub_1B1938(*(void *)(v13 + 136), *a2, a3);
      }
      return;
    }
    if (a4 != 1735159650) {
      return;
    }
  }
  uint64_t v8 = (uint64_t *)a1[68];
  int v9 = (uint64_t *)a1[69];
  while (v8 != v9)
  {
    uint64_t v10 = *v8;
    v8 += 2;
    sub_1B1938(*(void *)(v10 + 136), *a2, a3);
  }
  if (a4 == 1768845428 || a4 == 1735159650) {
    goto LABEL_9;
  }
}

uint64_t sub_8C900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!result)
  {
LABEL_15:
    char v10 = 0;
    *a4 = 0;
    goto LABEL_16;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a2, a3);
  if (!v9)
  {
    uint64_t result = sub_32A48(16);
    float v11 = *(NSObject **)result;
    if (*(void *)result)
    {
      uint64_t result = os_log_type_enabled(*(os_log_t *)result, OS_LOG_TYPE_DEFAULT);
      if (result)
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128))(v17, a1);
        uint64_t v12 = v17[0];
        if (a2) {
          uint64_t v13 = "output";
        }
        else {
          uint64_t v13 = "input";
        }
        sub_21C8C(__p, v13);
        if (v16 >= 0) {
          v14 = __p;
        }
        else {
          v14 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        v19 = "AggregateDevice_CommonBase.cpp";
        __int16 v20 = 1024;
        int v21 = 432;
        __int16 v22 = 2112;
        uint64_t v23 = v12;
        __int16 v24 = 2080;
        uint64_t v25 = v14;
        __int16 v26 = 1024;
        int v27 = a3;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Encountered a null stream in AggregateDevice_CommonBase::GetDSPConfigurationUseCases() for device '%@'. Direction: %s, stream index: %u", buf, 0x2Cu);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        uint64_t result = sub_72924((uint64_t)v17);
      }
    }
    goto LABEL_15;
  }
  uint64_t result = sub_6E644((uint64_t)a4, *(void *)(v9 + 136) + 1000);
  char v10 = 1;
LABEL_16:
  a4[40] = v10;
  return result;
}

void sub_8CAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_72924((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_8CB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a6, a7);
  if (!v12)
  {
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    __int16 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(v35, a1);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v38 = 1024;
      int v39 = 407;
      __int16 v40 = 2112;
      *(void **)v41 = v35[0];
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [stream is NULL]: \"Encountered a NULL stream in %@\"", buf, 0x1Cu);
      sub_72924((uint64_t)v35);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Encountered a NULL stream in %@");
  }
  uint64_t v13 = *(void *)(v12 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 88))(v13, a2, a3, 0))
  {
    int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v13 + 104))(v13, a2, a3, a4, a5, 0, 0);
    uint64_t v15 = sub_32A48(16);
    uint64_t v16 = sub_32A48(24);
    char v17 = 0;
    uint64_t v18 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1;
      if (v21)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_14;
        }
        goto LABEL_11;
      }
    }
    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
    if (*(void *)(v15 + 8))
    {
LABEL_11:
      __int16 v22 = *(NSObject **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v38 = 1024;
        int v39 = 413;
        __int16 v40 = 1024;
        *(_DWORD *)v41 = a3;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = v14;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d chain->GetDSPProperty(%u): %d.", buf, 0x1Eu);
      }
    }
LABEL_14:
    if (v14)
    {
      __int16 v26 = (os_log_t *)sub_32A48(13);
      int v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v35, a2);
        int v28 = v36;
        int v29 = (void **)v35[0];
        sub_2417C(__p, a3);
        __int16 v30 = v35;
        if (v28 < 0) {
          __int16 v30 = v29;
        }
        if (v34 >= 0) {
          v31 = __p;
        }
        else {
          v31 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v38 = 1024;
        int v39 = 414;
        __int16 v40 = 2080;
        *(void *)v41 = v30;
        *(_WORD *)&v41[8] = 2080;
        v42 = v31;
        __int16 v43 = 1024;
        int v44 = v14;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"chain->GetDSPProperty failed for AU (%s) property %s with error %d.\"", buf, 0x2Cu);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        if (v36 < 0) {
          operator delete(v35[0]);
        }
      }
      __int16 v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v32 = &off_6414D8;
      v32[2] = v14;
    }
  }
}

void sub_8CF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_8CF78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a6, a7);
  if (!v12)
  {
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    __int16 v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(v35, a1);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v38 = 1024;
      int v39 = 391;
      __int16 v40 = 2112;
      *(void **)v41 = v35[0];
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [stream is NULL]: \"Encountered a NULL stream in %@\"", buf, 0x1Cu);
      sub_72924((uint64_t)v35);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Encountered a NULL stream in %@");
  }
  uint64_t v13 = *(void *)(v12 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 88))(v13, a2, a3, 0))
  {
    int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 112))(v13, a2, a3, a4, a5, 0);
    uint64_t v15 = sub_32A48(16);
    uint64_t v16 = sub_32A48(24);
    char v17 = 0;
    uint64_t v18 = 0;
    *(void *)buf = 0x100000002;
    uint64_t v19 = *(void *)(v15 + 8);
    while (1)
    {
      uint64_t v20 = *(int *)&buf[4 * v18];
      char v21 = v17;
      if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
        break;
      }
      char v17 = 1;
      uint64_t v18 = 1;
      if (v21)
      {
        if ((v19 & 1) == 0) {
          goto LABEL_14;
        }
        goto LABEL_11;
      }
    }
    if ((v19 & v20) == 0) {
      uint64_t v15 = v16;
    }
    if (*(void *)(v15 + 8))
    {
LABEL_11:
      __int16 v22 = *(NSObject **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v38 = 1024;
        int v39 = 397;
        __int16 v40 = 1024;
        *(_DWORD *)v41 = a3;
        *(_WORD *)&v41[4] = 1024;
        *(_DWORD *)&v41[6] = v14;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEBUG, "%25s:%-5d chain->SetProperty(%d): %d.", buf, 0x1Eu);
      }
    }
LABEL_14:
    if (v14)
    {
      __int16 v26 = (os_log_t *)sub_32A48(13);
      int v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v35, a2);
        int v28 = v36;
        int v29 = (void **)v35[0];
        sub_2417C(__p, a3);
        __int16 v30 = v35;
        if (v28 < 0) {
          __int16 v30 = v29;
        }
        if (v34 >= 0) {
          v31 = __p;
        }
        else {
          v31 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v38 = 1024;
        int v39 = 398;
        __int16 v40 = 2080;
        *(void *)v41 = v30;
        *(_WORD *)&v41[8] = 2080;
        v42 = v31;
        __int16 v43 = 1024;
        int v44 = v14;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"chain->SetProperty failed for AU (%s) property %s with error %d.\"", buf, 0x2Cu);
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        if (v36 < 0) {
          operator delete(v35[0]);
        }
      }
      __int16 v32 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v32 = &off_6414D8;
      v32[2] = v14;
    }
  }
}

void sub_8D3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8D3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9 = a1 + 520;
  uint64_t v10 = 520;
  if (a7)
  {
    uint64_t v10 = 544;
    uint64_t v9 = a1 + 544;
  }
  uint64_t v11 = *(void *)(a1 + v10);
  uint64_t v12 = *(void *)(v9 + 8);
  if (v11 == v12)
  {
LABEL_6:
    char v17 = (os_log_t *)sub_32A48(16);
    uint64_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG))
    {
      sub_2417C(v27, a3);
      int v19 = v28;
      uint64_t v20 = (void **)v27[0];
      sub_2417C(__p, a2);
      char v21 = v27;
      if (v19 < 0) {
        char v21 = v20;
      }
      if (v26 >= 0) {
        __int16 v22 = __p;
      }
      else {
        __int16 v22 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      __int16 v30 = "AggregateDevice_CommonBase.cpp";
      __int16 v31 = 1024;
      int v32 = 381;
      __int16 v33 = 2080;
      char v34 = v21;
      __int16 v35 = 2080;
      char v36 = v22;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d could not find dspproperty %s for AU %s", buf, 0x26u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
    }
    return 0;
  }
  else
  {
    while (1)
    {
      uint64_t v16 = *(void *)(*(void *)v11 + 136);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 88))(v16, a2, a3, a6)) {
        break;
      }
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_6;
      }
    }
    __int16 v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 96);
    return v24(v16, a2, a3, a4, a5, a6);
  }
}

void sub_8D62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_8D650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v9 = 0;
  *(_WORD *)buf = 256;
  uint64_t v10 = a1 + 520;
  uint64_t v11 = a1 + 544;
  while (2)
  {
    char v12 = v8;
    uint64_t v13 = 544;
    if (buf[v9])
    {
      uint64_t v14 = v11;
    }
    else
    {
      uint64_t v13 = 520;
      uint64_t v14 = v10;
    }
    uint64_t v15 = *(void *)(a1 + v13);
    uint64_t v16 = *(void *)(v14 + 8);
    while (v15 != v16)
    {
      if ((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)v15 + 136) + 88))(*(void *)(*(void *)v15 + 136), a2, a3, a4))return 1; {
      v15 += 16;
      }
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if ((v12 & 1) == 0) {
      continue;
    }
    break;
  }
  char v17 = (os_log_t *)sub_32A48(16);
  uint64_t v18 = *v17;
  if (*v17)
  {
    BOOL result = os_log_type_enabled(*v17, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    sub_2417C(v26, a3);
    int v20 = v27;
    char v21 = (void **)v26[0];
    sub_2417C(__p, a2);
    __int16 v22 = v26;
    if (v20 < 0) {
      __int16 v22 = v21;
    }
    if (v25 >= 0) {
      uint64_t v23 = __p;
    }
    else {
      uint64_t v23 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315906;
    int v29 = "AggregateDevice_CommonBase.cpp";
    __int16 v30 = 1024;
    int v31 = 364;
    __int16 v32 = 2080;
    __int16 v33 = v22;
    __int16 v34 = 2080;
    __int16 v35 = v23;
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEBUG, "%25s:%-5d could not find dspproperty %s for AU %s", buf, 0x26u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }
  return 0;
}

void sub_8D854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_8D878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7 = a1 + 520;
  uint64_t v8 = 520;
  if (a5)
  {
    uint64_t v8 = 544;
    uint64_t v7 = a1 + 544;
  }
  uint64_t v9 = *(void *)(a1 + v8);
  uint64_t v10 = *(void *)(v7 + 8);
  if (v9 == v10)
  {
LABEL_6:
    char v12 = (os_log_t *)sub_32A48(16);
    uint64_t v13 = *v12;
    if (*v12)
    {
      BOOL result = os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG);
      if (!result) {
        return result;
      }
      sub_2417C(v21, a3);
      int v15 = v22;
      uint64_t v16 = (void **)v21[0];
      sub_2417C(__p, a2);
      char v17 = v21;
      if (v15 < 0) {
        char v17 = v16;
      }
      if (v20 >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315906;
      __int16 v24 = "AggregateDevice_CommonBase.cpp";
      __int16 v25 = 1024;
      int v26 = 346;
      __int16 v27 = 2080;
      char v28 = v17;
      __int16 v29 = 2080;
      __int16 v30 = v18;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d could not find dspproperty %s for AU %s", buf, 0x26u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
    }
    return 0;
  }
  else
  {
    while (((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)v9 + 136) + 88))(*(void *)(*(void *)v9 + 136), a2, a3, a4) & 1) == 0)
    {
      v9 += 16;
      if (v9 == v10) {
        goto LABEL_6;
      }
    }
    return 1;
  }
}

void sub_8DA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_8DA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 352))(a1) & 1) == 0)
  {
    __int16 v30 = (os_log_t *)sub_32A48(13);
    int v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v38 = 1024;
      int v39 = 315;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  char v10 = 0;
  uint64_t v11 = 0;
  __int16 v36 = 256;
LABEL_3:
  char v12 = v10;
  uint64_t v13 = 544;
  if (buf[v11 - 2])
  {
    uint64_t v14 = a1 + 544;
  }
  else
  {
    uint64_t v13 = 520;
    uint64_t v14 = a1 + 520;
  }
  uint64_t v15 = *(void *)(a1 + v13);
  uint64_t v16 = *(void *)(v14 + 8);
  while (1)
  {
    if (v15 == v16)
    {
      char v10 = 1;
      uint64_t v11 = 1;
      if (v12)
      {
        uint64_t v18 = (os_log_t *)sub_32A48(13);
        int v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
          __int16 v38 = 1024;
          int v39 = 332;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate a DSP chain with the given parameters, but HasDSPParameter returned true.\"", buf, 0x12u);
        }
        char v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Unable to locate a DSP chain with the given parameters, but HasDSPParameter returned true.");
      }
      goto LABEL_3;
    }
    uint64_t v17 = *(void *)(*(void *)v15 + 136);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 56))(v17, a2, a3, a4)) {
      break;
    }
    v15 += 16;
  }
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)v17 + 72))(v17, a2, a3, a4, a5);
  uint64_t v22 = sub_32A48(16);
  uint64_t v23 = sub_32A48(24);
  char v24 = 0;
  uint64_t v25 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v26 = *(void *)(v22 + 8);
  while (1)
  {
    uint64_t v27 = *(int *)&buf[4 * v25];
    char v28 = v24;
    if (((v26 & v27) != 0) != ((*(void *)(v23 + 8) & v27) != 0)) {
      break;
    }
    char v24 = 1;
    uint64_t v25 = 1;
    if (v28)
    {
      if ((v26 & 1) == 0) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
  }
  if ((v26 & v27) == 0) {
    uint64_t v22 = v23;
  }
  if (*(void *)(v22 + 8))
  {
LABEL_23:
    __int16 v29 = *(NSObject **)v22;
    if (v29 && os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v38 = 1024;
      int v39 = 325;
      __int16 v40 = 2048;
      double v41 = a5;
      __int16 v42 = 1024;
      int v43 = v21;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d chain->SetParameter(%f): %d.", buf, 0x22u);
    }
  }
LABEL_26:
  if (v21)
  {
    __int16 v33 = (os_log_t *)sub_32A48(13);
    __int16 v34 = *v33;
    if (*v33)
    {
      if (os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v38 = 1024;
        int v39 = 326;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"chain->SetParameter failed.\"", buf, 0x12u);
      }
    }
    __int16 v35 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v35 = &off_6414D8;
    v35[2] = v21;
  }
}

void sub_8DEF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float sub_8DF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 352))(a1) & 1) == 0)
  {
    char v28 = (os_log_t *)sub_32A48(13);
    __int16 v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v34 = 1024;
      int v35 = 292;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  char v8 = 0;
  uint64_t v9 = 0;
  __int16 v32 = 256;
LABEL_3:
  char v10 = v8;
  uint64_t v11 = 544;
  if (buf[v9 - 2])
  {
    uint64_t v12 = a1 + 544;
  }
  else
  {
    uint64_t v11 = 520;
    uint64_t v12 = a1 + 520;
  }
  uint64_t v13 = *(void *)(a1 + v11);
  uint64_t v14 = *(void *)(v12 + 8);
  while (1)
  {
    if (v13 == v14)
    {
      char v8 = 1;
      uint64_t v9 = 1;
      if (v10)
      {
        uint64_t v16 = (os_log_t *)sub_32A48(13);
        uint64_t v17 = *v16;
        if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
          __int16 v34 = 1024;
          int v35 = 309;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to locate a DSP chain with the given parameters, but HasDSPParameter returned true.\"", buf, 0x12u);
        }
        uint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v18, "Unable to locate a DSP chain with the given parameters, but HasDSPParameter returned true.");
      }
      goto LABEL_3;
    }
    uint64_t v15 = *(void *)(*(void *)v13 + 136);
    float v31 = 0.0;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, float *, uint64_t))(*(void *)v15 + 64))(v15, a2, a3, &v31, a4))break; {
    v13 += 16;
    }
  }
  uint64_t v19 = sub_32A48(16);
  uint64_t v20 = sub_32A48(24);
  char v21 = 0;
  uint64_t v22 = 0;
  *(void *)buf = 0x100000002;
  uint64_t v23 = *(void *)(v19 + 8);
  while (1)
  {
    uint64_t v24 = *(int *)&buf[4 * v22];
    char v25 = v21;
    if (((v23 & v24) != 0) != ((*(void *)(v20 + 8) & v24) != 0)) {
      break;
    }
    char v21 = 1;
    uint64_t v22 = 1;
    if (v25)
    {
      if ((v23 & 1) == 0) {
        return v31;
      }
      goto LABEL_23;
    }
  }
  if ((v23 & v24) == 0) {
    uint64_t v19 = v20;
  }
  if (*(void *)(v19 + 8))
  {
LABEL_23:
    uint64_t v26 = *(NSObject **)v19;
    if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v34 = 1024;
      int v35 = 303;
      __int16 v36 = 2048;
      double v37 = v31;
      _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d chain->GetParameter: %f.", buf, 0x1Cu);
    }
  }
  return v31;
}

void sub_8E2AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8E2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v9 = 0;
  __int16 v18 = 256;
  uint64_t v10 = a1 + 520;
  uint64_t v11 = a1 + 544;
  while (2)
  {
    char v12 = v8;
    uint64_t v13 = 544;
    if (*((unsigned char *)&v18 + v9))
    {
      uint64_t v14 = v11;
    }
    else
    {
      uint64_t v13 = 520;
      uint64_t v14 = v10;
    }
    uint64_t v15 = *(void *)(a1 + v13);
    uint64_t v16 = *(void *)(v14 + 8);
    while (v15 != v16)
    {
      if ((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)v15 + 136) + 56))(*(void *)(*(void *)v15 + 136), a2, a3, a4))return 1; {
      v15 += 16;
      }
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if ((v12 & 1) == 0) {
      continue;
    }
    break;
  }
  return 0;
}

uint64_t sub_8E3C4(uint64_t a1, uint64_t a2)
{
  sub_4C264(a1);
  uint64_t v4 = a1 + 520;
  uint64_t v5 = 520;
  if ((*(_WORD *)(a2 + 184) & 1) == 0)
  {
    uint64_t v5 = 544;
    uint64_t v4 = a1 + 544;
  }
  int v6 = *(uint64_t **)(a1 + v5);
  uint64_t v7 = *(uint64_t **)(v4 + 8);
  if (v6 == v7) {
    return 0;
  }
  while (1)
  {
    sub_3524(v10, (void *)(*v6 + 112));
    sub_8E4B8(v11, v10);
    sub_8108(v10);
    v10[0] = a2;
    if (v11 != sub_8E5F0((void *)v11[1], v11, v10)) {
      break;
    }
    sub_B8E4(v11);
    v6 += 2;
    if (v6 == v7) {
      return 0;
    }
  }
  uint64_t v8 = *v6;
  sub_B8E4(v11);
  return v8;
}

void sub_8E4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_8E4B8(uint64_t *a1, void *a2)
{
  uint64_t v17 = &v17;
  __int16 v18 = (uint64_t *)&v17;
  uint64_t v19 = 0;
  uint64_t v3 = (void *)a2[1];
  if (v3 == a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    uint64_t v5 = a1 + 2;
    goto LABEL_12;
  }
  uint64_t v5 = &v19;
  do
  {
    int v6 = (std::__shared_weak_count *)v3[3];
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = v3[2];
        if (v9)
        {
          uint64_t v10 = operator new(0x20uLL);
          v10[2] = v9;
          uint64_t v10[3] = v8;
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = (uint64_t)v17;
          v17[1] = v10;
          void *v10 = v11;
          v10[1] = &v17;
          uint64_t v17 = v10;
          ++v19;
        }
        sub_4636C(v8);
      }
    }
    uint64_t v3 = (void *)v3[1];
  }
  while (v3 != a2);
  uint64_t v12 = v19;
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (v12)
  {
    uint64_t v14 = (uint64_t)v17;
    uint64_t v13 = v18;
    uint64_t v15 = *v18;
    *(void *)(v15 + 8) = v17[1];
    **(void **)(v14 + 8) = v15;
    uint64_t v16 = *a1;
    *(void *)(v16 + 8) = v13;
    *uint64_t v13 = v16;
    *a1 = v14;
    *(void *)(v14 + 8) = a1;
    a1[2] = v12;
LABEL_12:
    *uint64_t v5 = 0;
  }
  sub_B8E4((uint64_t *)&v17);
}

void sub_8E5D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4636C(v2);
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_8E5F0(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    do
    {
      int v6 = (std::__shared_weak_count *)v3[3];
      if (v6)
      {
        uint64_t v7 = v3[2];
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v8 = *a3;
        uint64_t v9 = std::__shared_weak_count::lock(v6);
        if (v9) {
          sub_4636C(v9);
        }
        else {
          uint64_t v7 = 0;
        }
        std::__shared_weak_count::__release_weak(v6);
        if (v7 == v8) {
          return v3;
        }
      }
      else if (!*a3)
      {
        return v3;
      }
      uint64_t v3 = (void *)v3[1];
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void sub_8E69C(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_4C264((uint64_t)a1);
  *a3 = 0;
  a3[1] = 0;
  int v6 = a1 + 130;
  uint64_t v7 = 130;
  if ((*(_WORD *)(a2 + 184) & 1) == 0)
  {
    uint64_t v7 = 136;
    int v6 = a1 + 136;
  }
  uint64_t v8 = *(void *)&a1[v7]._os_unfair_lock_opaque;
  uint64_t v9 = *(void *)&v6[2]._os_unfair_lock_opaque;
  if (v8 != v9)
  {
    uint64_t v10 = 0;
    do
    {
      sub_3524((uint64_t *)v22, (void *)(*(void *)v8 + 112));
      sub_8E4B8((uint64_t *)buf, v22);
      sub_8108((uint64_t *)v22);
      v22[0] = (void *)a2;
      if (buf == (uint8_t *)sub_8E5F0(*(void **)&v25[4], buf, (uint64_t *)v22))
      {
        uint64_t v12 = v10;
      }
      else
      {
        uint64_t v11 = *(void *)(*(void *)v8 + 152);
        uint64_t v12 = *(std::__shared_weak_count **)(*(void *)v8 + 160);
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        *a3 = v11;
        a3[1] = v12;
        if (v10) {
          std::__shared_weak_count::__release_weak(v10);
        }
        if (v12 && v12->__shared_owners_ != -1)
        {
          sub_B8E4((uint64_t *)buf);
          break;
        }
      }
      sub_B8E4((uint64_t *)buf);
      v8 += 16;
      uint64_t v10 = v12;
    }
    while (v8 != v9);
  }
  uint64_t v13 = a3[1];
  if (!v13 || *(void *)(v13 + 8) == -1)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(16);
    uint64_t v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
      {
        sub_4F64((uint64_t)v22, a1 + 2);
        int v16 = v23;
        uint64_t v17 = (void **)v22[0];
        sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a2 + 8));
        __int16 v18 = v22;
        if (v16 < 0) {
          __int16 v18 = v17;
        }
        if (v21 >= 0) {
          uint64_t v19 = __p;
        }
        else {
          uint64_t v19 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)char v25 = "AggregateDevice_CommonBase.cpp";
        *(_WORD *)&v25[8] = 1024;
        *(_DWORD *)&v25[10] = 245;
        __int16 v26 = 2080;
        uint64_t v27 = v18;
        __int16 v28 = 2080;
        __int16 v29 = v19;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d failed to fetch software volume command on AggregateDevice %s with port %s", buf, 0x26u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
      }
    }
  }
}

void sub_8E8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8E940(AudioObjectID *a1, AudioTimeStamp *a2, UInt32 a3)
{
  if (((*(uint64_t (**)(AudioObjectID *))(*(void *)a1 + 272))(a1) & 1) == 0)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      uint64_t v15 = "AggregateDevice_CommonBase.cpp";
      __int16 v16 = 1024;
      int v17 = 598;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_4C264((uint64_t)a1);
  uint64_t result = AudioDeviceGetNearestStartTime(a1[32], a2, a3);
  if (result)
  {
    int v10 = result;
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        uint64_t v15 = "AggregateDevice_CommonBase.cpp";
        __int16 v16 = 1024;
        int v17 = 603;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to get nearest start time.\"", (uint8_t *)&v14, 0x12u);
      }
    }
    uint64_t v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v13 = &off_6414D8;
    v13[2] = v10;
  }
  return result;
}

void sub_8EB50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8EB6C(AudioObjectID *a1, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  if (((*(uint64_t (**)(AudioObjectID *))(*(void *)a1 + 272))(a1) & 1) == 0)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      uint64_t v15 = "AggregateDevice_CommonBase.cpp";
      __int16 v16 = 1024;
      int v17 = 587;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_4C264((uint64_t)a1);
  uint64_t result = AudioDeviceTranslateTime(a1[32], a2, a3);
  if (result)
  {
    int v10 = result;
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11)
    {
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        uint64_t v15 = "AggregateDevice_CommonBase.cpp";
        __int16 v16 = 1024;
        int v17 = 592;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to translate time.\"", (uint8_t *)&v14, 0x12u);
      }
    }
    uint64_t v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v13 = &off_6414D8;
    v13[2] = v10;
  }
  return result;
}

void sub_8ED7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8ED98(AudioObjectID *a1, AudioTimeStamp *a2)
{
  if (((*(uint64_t (**)(AudioObjectID *))(*(void *)a1 + 272))(a1) & 1) == 0)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      uint64_t v13 = "AggregateDevice_CommonBase.cpp";
      __int16 v14 = 1024;
      int v15 = 576;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v12, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_4C264((uint64_t)a1);
  uint64_t result = AudioDeviceGetCurrentTime(a1[32], a2);
  if (result)
  {
    int v8 = result;
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        uint64_t v13 = "AggregateDevice_CommonBase.cpp";
        __int16 v14 = 1024;
        int v15 = 581;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to get current time.\"", (uint8_t *)&v12, 0x12u);
      }
    }
    uint64_t v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v11 = &off_6414D8;
    v11[2] = v8;
  }
  return result;
}

void sub_8EF98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8EFB4(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void *))(*a1 + 272))(a1))
  {
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      __int16 v14 = "AggregateDevice_CommonBase.cpp";
      __int16 v15 = 1024;
      int v16 = 538;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a2 && a1[57])
  {
    int v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      __int16 v14 = "AggregateDevice_CommonBase.cpp";
      __int16 v15 = 1024;
      int v16 = 539;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }
    int v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "Precondition failure.");
  }
  uint64_t result = sub_4C264((uint64_t)a1);
  a1[57] = a2;
  a1[58] = a3;
  return result;
}

void sub_8F1B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_8F1D0(uint64_t a1, uint64_t a2)
{
  sub_4C264(a1);
  if (*(void *)(a2 + 16) != *(void *)(a1 + 200))
  {
    v55 = (os_log_t *)sub_32A48(13);
    v56 = *v55;
    if (*v55 && os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
    {
      std::to_string(&__p, *(void *)(a1 + 200));
      int v57 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      std::string::size_type v58 = __p.__r_.__value_.__r.__words[0];
      std::to_string(&v63, *(void *)(a2 + 16));
      p_p = &__p;
      if (v57 < 0) {
        p_p = (std::string *)v58;
      }
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v60 = &v63;
      }
      else {
        v60 = (std::string *)v63.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v67 = 1024;
      int v68 = 172;
      __int16 v69 = 2080;
      double v70 = *(double *)&p_p;
      __int16 v71 = 2080;
      v72 = v60;
      _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Encountered malformed sample rate description. Expected %s entries, found %s\"", buf, 0x26u);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v63.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Encountered malformed sample rate description. Expected %s entries, found %s");
  }
  uint64_t v4 = *(void **)(a1 + 192);
  uint64_t v5 = &unk_4E6000;
  if (v4 == (void *)(a1 + 184)) {
    goto LABEL_43;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = (std::__shared_weak_count *)v4[3];
    if (v7)
    {
      int v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        uint64_t v9 = v8;
        int v10 = (os_unfair_lock_s *)v4[2];
        if (v10)
        {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          if (!v6)
          {
            double v11 = sub_21FD84(*(double **)(a2 + 8), (unint64_t)v10);
            uint64_t v12 = sub_32A48(16);
            uint64_t v13 = sub_32A48(36);
            char v14 = 0;
            uint64_t v15 = 0;
            *(void *)buf = 0x100000002;
            uint64_t v16 = *(void *)(v12 + 8);
            while (1)
            {
              uint64_t v17 = *(int *)&buf[4 * v15];
              char v18 = v14;
              if (((v16 & v17) != 0) != ((*(void *)(v13 + 8) & v17) != 0)) {
                break;
              }
              char v14 = 1;
              uint64_t v15 = 1;
              if (v18) {
                goto LABEL_18;
              }
            }
            if ((v16 & v17) == 0) {
              uint64_t v12 = v13;
            }
LABEL_18:
            uint64_t v19 = *(NSObject **)v12;
            if (v19 && os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              sub_4F64((uint64_t)&__p, v10 + 2);
              uint64_t v20 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136315906;
              *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
              __int16 v67 = 1024;
              int v68 = 182;
              __int16 v69 = 2048;
              double v70 = v11;
              __int16 v71 = 2080;
              v72 = v20;
              _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Synchronously setting sample rate to %f Hz on physical device %s.", buf, 0x26u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            uint64_t v6 = (*(uint64_t (**)(os_unfair_lock_s *, double))(*(void *)&v10->_os_unfair_lock_opaque + 112))(v10, v11);
            if (v6)
            {
              uint64_t v21 = sub_32A48(16);
              uint64_t v22 = sub_32A48(36);
              char v23 = 0;
              uint64_t v24 = 0;
              *(void *)buf = 0x100000002;
              uint64_t v25 = *(void *)(v21 + 8);
              while (1)
              {
                uint64_t v26 = *(int *)&buf[4 * v24];
                char v27 = v23;
                if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
                  break;
                }
                char v23 = 1;
                uint64_t v24 = 1;
                if (v27) {
                  goto LABEL_31;
                }
              }
              if ((v25 & v26) == 0) {
                uint64_t v21 = v22;
              }
LABEL_31:
              __int16 v28 = *(NSObject **)v21;
              if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
              {
                (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)a1 + 128))(theString, a1);
                uint64_t v62 = a2;
                __int16 v29 = v5;
                sub_21B7C(&__p, theString[0]);
                int v30 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
                std::string::size_type v31 = __p.__r_.__value_.__r.__words[0];
                sub_2417C(&v63, v6);
                __int16 v32 = &__p;
                if (v30 < 0) {
                  __int16 v32 = (std::string *)v31;
                }
                __int16 v33 = &v63;
                if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  __int16 v33 = (std::string *)v63.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)buf = 136316162;
                *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
                __int16 v67 = 1024;
                int v68 = 184;
                __int16 v69 = 2048;
                double v70 = v11;
                __int16 v71 = 2080;
                v72 = v32;
                __int16 v73 = 2080;
                v74 = v33;
                _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Attempt to set sample rate to %f Hz on physical device \"%s\" failed with result '%s'", buf, 0x30u);
                if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v63.__r_.__value_.__l.__data_);
                }
                uint64_t v5 = v29;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                sub_72924((uint64_t)theString);
                a2 = v62;
              }
            }
          }
          sub_4636C(v9);
        }
        sub_4636C(v9);
      }
    }
    uint64_t v4 = (void *)v4[1];
  }
  while (v4 != (void *)(a1 + 184));
  if (!v6)
  {
LABEL_43:
    unint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(a1);
    v63.__r_.__value_.__r.__words[0] = sub_21FD84(*(double **)(a2 + 8), v34);
    AudioObjectID v35 = *(_DWORD *)(a1 + 128);
    if (*(unsigned char *)(a1 + 316))
    {
      strcpy((char *)buf, "trsnbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      uint64_t v36 = sub_8F968(0, v35, (uint64_t)buf, (double *)&v63);
    }
    else
    {
      strcpy((char *)buf, "trsnbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      uint64_t v36 = sub_8F968(1, v35, (uint64_t)buf, (double *)&v63);
    }
    uint64_t v6 = v36;
    if (v36)
    {
      uint64_t v37 = sub_32A48(16);
      uint64_t v38 = sub_32A48(36);
      char v39 = 0;
      uint64_t v40 = 0;
      *(void *)buf = v5[217];
      uint64_t v41 = *(void *)(v37 + 8);
      while (1)
      {
        uint64_t v42 = *(int *)&buf[4 * v40];
        char v43 = v39;
        if (((v41 & v42) != 0) != ((*(void *)(v38 + 8) & v42) != 0)) {
          break;
        }
        char v39 = 1;
        uint64_t v40 = 1;
        if (v43) {
          goto LABEL_53;
        }
      }
      if ((v41 & v42) == 0) {
        uint64_t v37 = v38;
      }
LABEL_53:
      int v44 = *(NSObject **)v37;
      if (v44 && os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        std::string::size_type v45 = v63.__r_.__value_.__r.__words[0];
        sub_2417C(&__p, v6);
        v46 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v67 = 1024;
        int v68 = 205;
        __int16 v69 = 2048;
        double v70 = *(double *)&v45;
        __int16 v71 = 2080;
        v72 = v46;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d Waiting for aggregate device's sample rate to update to %f Hz failed with result '%s'", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  char v47 = 0;
  uint64_t v48 = 0;
  *(_WORD *)buf = 256;
  do
  {
    char v49 = v47;
    if (buf[v48]) {
      uint64_t v50 = 544;
    }
    else {
      uint64_t v50 = 520;
    }
    if (buf[v48]) {
      uint64_t v51 = a1 + 544;
    }
    else {
      uint64_t v51 = a1 + 520;
    }
    v52 = *(uint64_t ***)(a1 + v50);
    v53 = *(uint64_t ***)(v51 + 8);
    while (v52 != v53)
    {
      sub_31A740(*v52, 0);
      v52 += 2;
    }
    char v47 = 1;
    uint64_t v48 = 1;
  }
  while ((v49 & 1) == 0);
  return v6;
}

void sub_8F8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_8F968(int a1, AudioObjectID a2, uint64_t a3, double *a4)
{
  uint64_t v8 = sub_32A48(13);
  if (*(unsigned char *)(v8 + 8))
  {
    uint64_t v9 = *(NSObject **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        v73.__cv_.__uint64_t sig = *(void *)a3;
        *(_DWORD *)v73.__cv_.__opaque = *(_DWORD *)(a3 + 8);
        sub_16C9C4((uint64_t)&v74, (unsigned int *)&v73);
        int v10 = v74.__m_.__opaque[15] >= 0 ? &v74 : (std::mutex *)v74.__m_.__sig;
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v64 = 1024;
        int v65 = 166;
        __int16 v66 = 2080;
        *(void *)__int16 v67 = v10;
        *(_WORD *)&v67[8] = 1024;
        *(_DWORD *)&v67[10] = a2;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to synchronize the property %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v74.__m_.__opaque[15] < 0) {
          operator delete((void *)v74.__m_.__sig);
        }
      }
    }
  }
  AudioObjectID v58 = a2;
  uint64_t v59 = *(void *)a3;
  int v60 = *(_DWORD *)(a3 + 8);
  int v61 = 0;
  uint64_t v62 = 0;
  if (a1) {
    goto LABEL_10;
  }
  double v27 = COERCE_DOUBLE(sub_90314((uint64_t)&v58));
  if (!v28 && *a4 == v27)
  {
    uint64_t v48 = sub_32A48(13);
    if ((*(unsigned char *)(v48 + 8) & 1) == 0) {
      return 0;
    }
    char v39 = *(NSObject **)v48;
    if (!*(void *)v48 || !os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    buf.mSelector = 136315650;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    __int16 v64 = 1024;
    int v65 = 191;
    __int16 v66 = 1024;
    *(_DWORD *)__int16 v67 = a2;
    goto LABEL_91;
  }
  uint64_t v29 = sub_32A48(13);
  if (*(unsigned char *)(v29 + 8))
  {
    int v30 = *(NSObject **)v29;
    if (*(void *)v29)
    {
      if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
      {
        v73.__cv_.__uint64_t sig = *(void *)a3;
        *(_DWORD *)v73.__cv_.__opaque = *(_DWORD *)(a3 + 8);
        sub_16C9C4((uint64_t)&v74, (unsigned int *)&v73);
        std::string::size_type v31 = v74.__m_.__opaque[15] >= 0 ? &v74 : (std::mutex *)v74.__m_.__sig;
        buf.mSelector = 136315906;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v64 = 1024;
        int v65 = 199;
        __int16 v66 = 2080;
        *(void *)__int16 v67 = v31;
        *(_WORD *)&v67[8] = 1024;
        *(_DWORD *)&v67[10] = a2;
        _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d About to call AudioObjectSetPropertyData to set property: %s on id %u.", (uint8_t *)&buf, 0x22u);
        if (v74.__m_.__opaque[15] < 0) {
          operator delete((void *)v74.__m_.__sig);
        }
      }
    }
  }
  AudioObjectPropertyAddress buf = *(AudioObjectPropertyAddress *)a3;
  uint64_t v16 = AudioObjectSetPropertyData(a2, &buf, 0, 0, 8u, a4);
  if (!v16)
  {
LABEL_10:
    double v11 = COERCE_DOUBLE(sub_90314((uint64_t)&v58));
    if (!v12 && *a4 == v11)
    {
      uint64_t v38 = sub_32A48(13);
      if ((*(unsigned char *)(v38 + 8) & 1) == 0) {
        return 0;
      }
      char v39 = *(NSObject **)v38;
      if (!*(void *)v38 || !os_log_type_enabled(*(os_log_t *)v38, OS_LOG_TYPE_DEBUG)) {
        return 0;
      }
      buf.mSelector = 136315650;
      *(void *)&buf.mScope = "HALPropertySynchronizer.h";
      __int16 v64 = 1024;
      int v65 = 219;
      __int16 v66 = 1024;
      *(_DWORD *)__int16 v67 = a2;
LABEL_91:
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d Read-back value was the same as the set-to value, so we didn't need to wait on a sync primitive for a notification on id %u.", (uint8_t *)&buf, 0x18u);
      return 0;
    }
    memset(v74.__m_.__opaque, 0, sizeof(v74.__m_.__opaque));
    v74.__m_.__uint64_t sig = 850045863;
    memset(v73.__cv_.__opaque, 0, sizeof(v73.__cv_.__opaque));
    v73.__cv_.__uint64_t sig = 1018212795;
    char v57 = 0;
    AudioObjectID v50 = a2;
    sub_662FC(&inClientData, a2, (AudioObjectPropertyAddress *)a3, (uint64_t)&v73, (uint64_t)&v74, (uint64_t)&v57);
    for (uint64_t i = 2000; ; i += (std::chrono::system_clock::now().__d_.__rep_ - v18.__d_.__rep_) / -1000)
    {
      double v14 = COERCE_DOUBLE(sub_90314((uint64_t)&v58));
      uint64_t v16 = v15;
      if (v15) {
        goto LABEL_85;
      }
      double v17 = v14;
      if (*a4 == v14) {
        break;
      }
      if (i <= 0)
      {
        char v43 = (os_log_t *)sub_32A48(13);
        uint64_t v16 = 2003329396;
        int v44 = *v43;
        if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
        {
          uint64_t v51 = *(void *)a3;
          int v52 = *(_DWORD *)(a3 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v51);
          std::string::size_type v45 = "updated";
          if (!a1) {
            std::string::size_type v45 = "set";
          }
          if (v54 >= 0) {
            p_lk = &__lk;
          }
          else {
            p_lk = __lk.__m_;
          }
          buf.mSelector = 136316930;
          BOOL v47 = *a4 == v17;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v64 = 1024;
          int v65 = 248;
          __int16 v66 = 2080;
          *(void *)__int16 v67 = v45;
          *(_WORD *)&v67[8] = 2080;
          *(void *)&v67[10] = p_lk;
          *(_WORD *)&v67[18] = 2080;
          *(void *)&v67[20] = v45;
          *(_WORD *)&v67[28] = 1024;
          BOOL v68 = v47;
          __int16 v69 = 1024;
          int v70 = 0;
          __int16 v71 = 1024;
          AudioObjectID v72 = v50;
          _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d timed out waiting for property data to be %s for property %s (property was %s = %u, error = %d) on id %u.", (uint8_t *)&buf, 0x42u);
          if (v54 < 0) {
            operator delete(__lk.__m_);
          }
        }
LABEL_85:
        sub_6651C((uint64_t)&inClientData);
        std::condition_variable::~condition_variable(&v73);
        std::mutex::~mutex(&v74);
        return v16;
      }
      v18.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      uint64_t v19 = sub_32A48(13);
      if (*(unsigned char *)(v19 + 8))
      {
        uint64_t v20 = *(NSObject **)v19;
        if (*(void *)v19)
        {
          if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
          {
            buf.mSelector = 136315906;
            *(void *)&buf.mScope = "HALPropertySynchronizer.h";
            __int16 v64 = 1024;
            int v65 = 257;
            __int16 v66 = 2080;
            *(void *)__int16 v67 = "with timeout";
            *(_WORD *)&v67[8] = 1024;
            *(_DWORD *)&v67[10] = v50;
            _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Waiting (%s) for sync primitive to be unlocked on id %u.", (uint8_t *)&buf, 0x22u);
          }
        }
      }
      sub_3B7EC();
      *(void *)&buf.mSelector = &qword_64CC40;
      LOBYTE(buf.mElement) = 0;
      LOBYTE(buf.mElement) = sub_1D4024();
      __lk.__m_ = &v74;
      __lk.__owns_ = 1;
      std::mutex::lock(&v74);
      v21.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      if (!v57)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = v21.__d_.__rep_ + 1000000 * i;
        while (1)
        {
          if (v22 <= std::chrono::steady_clock::now().__d_.__rep_) {
            goto LABEL_20;
          }
          v23.__d_.__rep_ = v22 - std::chrono::steady_clock::now().__d_.__rep_;
          if (v23.__d_.__rep_ >= 1) {
            break;
          }
LABEL_38:
          if (std::chrono::steady_clock::now().__d_.__rep_ >= v22 || v57) {
            goto LABEL_20;
          }
        }
        std::chrono::steady_clock::now();
        v24.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v24.__d_.__rep_)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 0;
          goto LABEL_34;
        }
        if (v24.__d_.__rep_ < 1)
        {
          if ((unint64_t)v24.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
            goto LABEL_33;
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v24.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_34;
          }
LABEL_33:
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = 1000 * v24.__d_.__rep_;
LABEL_34:
          if (v25 > (v23.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v26.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_37:
            std::condition_variable::__do_timed_wait(&v73, &__lk, v26);
            std::chrono::steady_clock::now();
            goto LABEL_38;
          }
        }
        v26.__d_.__rep_ = v25 + v23.__d_.__rep_;
        goto LABEL_37;
      }
LABEL_20:
      if (__lk.__owns_) {
        std::mutex::unlock(__lk.__m_);
      }
      sub_66410((uint64_t)&buf);
    }
    uint64_t v40 = sub_32A48(13);
    if (*(unsigned char *)(v40 + 8))
    {
      uint64_t v41 = *(NSObject **)v40;
      if (*(void *)v40)
      {
        if (os_log_type_enabled(*(os_log_t *)v40, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v51 = *(void *)a3;
          int v52 = *(_DWORD *)(a3 + 8);
          sub_16C9C4((uint64_t)&__lk, (unsigned int *)&v51);
          uint64_t v42 = v54 >= 0 ? &__lk : (std::unique_lock<std::mutex> *)__lk.__m_;
          buf.mSelector = 136315906;
          *(void *)&buf.mScope = "HALPropertySynchronizer.h";
          __int16 v64 = 1024;
          int v65 = 288;
          __int16 v66 = 2080;
          *(void *)__int16 v67 = v42;
          *(_WORD *)&v67[8] = 1024;
          *(_DWORD *)&v67[10] = v50;
          _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_DEBUG, "%25s:%-5d Successfully synchronized the property %s on id %u.", (uint8_t *)&buf, 0x22u);
          if (v54 < 0) {
            operator delete(__lk.__m_);
          }
        }
      }
    }
    uint64_t v16 = 0;
    goto LABEL_85;
  }
  __int16 v32 = (os_log_t *)sub_32A48(13);
  __int16 v33 = *v32;
  if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
  {
    sub_2417C(&v74, v16);
    int v34 = v74.__m_.__opaque[15];
    uint64_t sig = v74.__m_.__sig;
    uint64_t inClientData = *(void *)a3;
    int v56 = *(_DWORD *)(a3 + 8);
    sub_16C9C4((uint64_t)&v73, (unsigned int *)&inClientData);
    uint64_t v36 = &v74;
    if (v34 < 0) {
      uint64_t v36 = (std::mutex *)sig;
    }
    if (v73.__cv_.__opaque[15] >= 0) {
      uint64_t v37 = (uint64_t)&v73;
    }
    else {
      uint64_t v37 = v73.__cv_.__sig;
    }
    buf.mSelector = 136316418;
    *(void *)&buf.mScope = "HALPropertySynchronizer.h";
    __int16 v64 = 1024;
    int v65 = 207;
    __int16 v66 = 1024;
    *(_DWORD *)__int16 v67 = v16;
    *(_WORD *)&v67[4] = 2080;
    *(void *)&v67[6] = v36;
    *(_WORD *)&v67[14] = 2080;
    *(void *)&v67[16] = v37;
    *(_WORD *)&v67[24] = 1024;
    *(_DWORD *)&v67[26] = a2;
    _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) setting property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
    if (v73.__cv_.__opaque[15] < 0) {
      operator delete((void *)v73.__cv_.__sig);
    }
    if (v74.__m_.__opaque[15] < 0) {
      operator delete((void *)v74.__m_.__sig);
    }
  }
  return v16;
}

void sub_90290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::condition_variable *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  sub_6651C((uint64_t)&a19);
  std::condition_variable::~condition_variable((std::condition_variable *)&a38);
  std::mutex::~mutex((std::mutex *)(v38 - 184));
  _Unwind_Resume(a1);
}

uint64_t sub_90314(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 4);
  *(void *)&buf.mSelector = *(void *)(a1 + 4);
  UInt32 v3 = *(_DWORD *)(a1 + 16);
  buf.mElement = *(_DWORD *)(a1 + 12);
  sub_904E4((uint64_t)&v19, (AudioObjectID *)a1, &buf, v3, *(const void **)(a1 + 24));
  unsigned int v4 = v19;
  if (v19)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v17, v4);
        int v7 = v18;
        uint64_t v8 = (void **)v17[0];
        uint64_t v13 = *v2;
        int v14 = *((_DWORD *)v2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v13);
        uint64_t v9 = v17;
        if (v7 < 0) {
          uint64_t v9 = v8;
        }
        if (v16 >= 0) {
          int v10 = __p;
        }
        else {
          int v10 = (void **)__p[0];
        }
        AudioObjectID v11 = *(_DWORD *)a1;
        buf.mSelector = 136316418;
        *(void *)&buf.mScope = "HALPropertySynchronizer.h";
        __int16 v23 = 1024;
        int v24 = 176;
        __int16 v25 = 1024;
        unsigned int v26 = v4;
        __int16 v27 = 2080;
        int v28 = v9;
        __int16 v29 = 2080;
        int v30 = v10;
        __int16 v31 = 1024;
        AudioObjectID v32 = v11;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)&buf, 0x32u);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
      }
    }
  }
  if (v21) {
    return v20;
  }
  else {
    return 0;
  }
}

void sub_904C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_904E4(uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress, UInt32 a4, const void *a5)
{
  uint64_t result = AudioObjectHasProperty(*a2, inAddress);
  if (result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t result = sub_26E94(*a2, inAddress, a4, a5);
    UInt32 ioDataSize = result;
    if (result)
    {
      uint64_t v11 = 0;
      uint64_t result = AudioObjectGetPropertyData(*a2, inAddress, a4, a5, &ioDataSize, &v11);
      *(_DWORD *)a1 = result;
      if (!result)
      {
        *(void *)(a1 + 8) = v11;
        *(unsigned char *)(a1 + 16) = 1;
      }
    }
  }
  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
  }
  return result;
}

void sub_905C0(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  sub_4C264((uint64_t)a1);
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 136))(a1);
  if (!v6)
  {
    uint64_t v15 = (os_log_t *)sub_32A48(13);
    char v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = "StandardUtilities.h";
      *(_WORD *)&v22[8] = 1024;
      *(_DWORD *)&v22[10] = 279;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!*(void *)(v6 + 88)
    || (unint64_t v7 = *(void *)(v6 + 80), (v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v6 + 88))) == 0))
  {
    sub_5CABC();
  }
  uint64_t v9 = v8;
  if (!v7)
  {
    char v18 = (os_log_t *)sub_32A48(13);
    unsigned int v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      *(void *)std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v22[8] = 1024;
      *(_DWORD *)&v22[10] = 137;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [masterDevice is NULL]: \"Got NULL for the aggregate's master physical device\"", (uint8_t *)&v21, 0x12u);
    }
    uint64_t v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Got NULL for the aggregate's master physical device");
  }
  double v10 = (*(double (**)(unint64_t, double))(*(void *)v7 + 296))(v7, a3);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  sub_B680((uint64_t *)&v21, a1 + 23, "", 143);
  for (uint64_t i = *(void *)&v22[4]; (int *)i != &v21; uint64_t i = *(void *)(i + 8))
  {
    unint64_t v12 = v7;
    double v13 = v10;
    if (*(void *)(i + 16) != v7)
    {
      if ((*(unsigned int (**)(void *, unint64_t, double))(*a1 + 464))(a1, v7, v10)) {
        v14.n128_f64[0] = a3;
      }
      else {
        v14.n128_f64[0] = v10;
      }
      (*(void (**)(void, __n128))(**(void **)(i + 16) + 296))(*(void *)(i + 16), v14);
      unint64_t v12 = *(void *)(i + 16);
    }
    sub_21FDD0((uint64_t **)a2, v12, v13);
  }
  sub_B8E4((uint64_t *)&v21);
  sub_4636C(v9);
}

void sub_908FC(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_90960(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_4C264(a1);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  sub_B680(&v7, (void *)(a1 + 184), "", 119);
  for (uint64_t i = v8; i != &v7; uint64_t i = (uint64_t *)i[1])
  {
    unint64_t v5 = i[2];
    double v6 = (*(double (**)(unint64_t))(*(void *)v5 + 104))(v5);
    sub_21FDD0((uint64_t **)a2, v5, v6);
  }
  sub_B8E4(&v7);
}

void sub_90A28(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void sub_90A4C(uint64_t a1, int a2)
{
  char v4 = 0;
  uint64_t v5 = 0;
  __int16 v20 = 256;
  double v6 = "un";
  if (a2) {
    double v6 = "";
  }
  unsigned int v19 = v6;
  do
  {
    char v7 = v4;
    int v8 = *((unsigned __int8 *)&v20 + v5);
    int v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88))(a1, *((unsigned __int8 *)&v20 + v5));
    if (v9)
    {
      uint64_t v10 = 0;
      do
      {
        uint64_t v11 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)a1 + 96))(a1, v8 != 0, v10);
        uint64_t v12 = v11;
        if (v11)
        {
          if (*(unsigned __int8 *)(v11 + 400) != a2)
          {
            double v13 = (os_log_t *)sub_32A48(22);
            __n128 v14 = *v13;
            if (*v13)
            {
              if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
              {
                sub_4F64((uint64_t)__p, (os_unfair_lock_t)(v12 + 8));
                uint64_t v15 = __p;
                if (v22 < 0) {
                  uint64_t v15 = (void **)__p[0];
                }
                char v16 = "un";
                if (*(unsigned char *)(v12 + 400)) {
                  char v16 = "";
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                int v24 = "VirtualStream.cpp";
                __int16 v25 = 1024;
                int v26 = 951;
                __int16 v27 = 2080;
                int v28 = v15;
                __int16 v29 = 2080;
                int v30 = v16;
                __int16 v31 = 2080;
                AudioObjectID v32 = v19;
                _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream %s is currently flagged as %strustworthy, but it should be flagged as %strustworthy.", buf, 0x30u);
                if (v22 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
        }
        else
        {
          double v17 = (os_log_t *)sub_32A48(16);
          char v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            int v24 = "AggregateDevice_CommonBase.cpp";
            __int16 v25 = 1024;
            int v26 = 498;
            __int16 v27 = 1024;
            LODWORD(v28) = v10;
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream index %u was not resolvable to a va::VirtualStream", buf, 0x18u);
          }
        }
        uint64_t v10 = (v10 + 1);
      }
      while (v9 != v10);
    }
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v7 & 1) == 0);
}

void sub_90CF4(uint64_t a1, int a2)
{
  char v4 = 0;
  uint64_t v5 = 0;
  __int16 v21 = 256;
  double v6 = "untrustworthy";
  if (a2) {
    double v6 = "trustworthy";
  }
  char v18 = v6;
  do
  {
    char v7 = v4;
    int v8 = buf[v5 - 2];
    int v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88))(a1, buf[v5 - 2]);
    if (v9)
    {
      uint64_t v10 = 0;
      if (v8) {
        uint64_t v11 = "output";
      }
      else {
        uint64_t v11 = "input";
      }
      do
      {
        uint64_t v12 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)a1 + 96))(a1, v8 != 0, v10);
        if (v12)
        {
          sub_31D430(v12, a2);
          uint64_t v13 = sub_32A48(16);
          if (*(unsigned char *)(v13 + 8))
          {
            __n128 v14 = *(NSObject **)v13;
            if (*(void *)v13)
            {
              if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
              {
                sub_21C8C(__p, v11);
                uint64_t v15 = __p;
                if (v20 < 0) {
                  uint64_t v15 = (void **)__p[0];
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
                __int16 v23 = "AggregateDevice_CommonBase.cpp";
                __int16 v24 = 1024;
                int v25 = 482;
                __int16 v26 = 2080;
                __int16 v27 = v15;
                __int16 v28 = 1024;
                int v29 = v10;
                __int16 v30 = 2080;
                __int16 v31 = v18;
                _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s stream index %u is now flagged as %s", buf, 0x2Cu);
                if (v20 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
        }
        else
        {
          char v16 = (os_log_t *)sub_32A48(16);
          double v17 = *v16;
          if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v23 = "AggregateDevice_CommonBase.cpp";
            __int16 v24 = 1024;
            int v25 = 478;
            __int16 v26 = 1024;
            LODWORD(v27) = v10;
            _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Stream index %u was not resolvable to a va::VirtualStream", buf, 0x18u);
          }
        }
        uint64_t v10 = (v10 + 1);
      }
      while (v9 != v10);
    }
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v7 & 1) == 0);
}

void sub_90F98(void *a1)
{
  AudioObjectID v2 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  sub_16D108((uint64_t)v17, 0, v2, a1[52]);
  UInt32 v3 = v18;
  uint64_t v4 = *((unsigned int *)v18 + 2);
  if (v4)
  {
    bzero((char *)v18 + 12, 4 * v4);
    sub_16D560((uint64_t)v17);
    UInt32 v3 = v18;
  }
  free(v3);
  AudioObjectID v5 = (*(uint64_t (**)(void *))(*a1 + 120))(a1);
  sub_16D108((uint64_t)v17, 1, v5, a1[52]);
  double v6 = v18;
  uint64_t v7 = *((unsigned int *)v18 + 2);
  if (v7)
  {
    bzero((char *)v18 + 12, 4 * v7);
    sub_16D560((uint64_t)v17);
    double v6 = v18;
  }
  free(v6);
  int v8 = (uint64_t *)a1[65];
  int v9 = (uint64_t *)a1[66];
  while (v8 != v9)
  {
    uint64_t v10 = *v8;
    v8 += 2;
    sub_31FAA0(v10);
  }
  uint64_t v11 = (uint64_t *)a1[68];
  uint64_t v12 = (uint64_t *)a1[69];
  while (v11 != v12)
  {
    uint64_t v13 = *v11;
    v11 += 2;
    sub_31FAA0(v13);
  }
  uint64_t v15 = (uint64_t *)a1[30];
  __n128 v14 = (uint64_t *)a1[31];
  while (v15 != v14)
  {
    uint64_t v16 = *v15;
    v15 += 2;
    (*(void (**)(uint64_t))(*(void *)v16 + 56))(v16);
  }
}

void sub_910FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

uint64_t sub_91114(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 208);
  if (!result) {
    return *(void *)(*(void *)(*(void *)(a1 + 432) + 24) + 16);
  }
  return result;
}

void sub_91134(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_4C264(a1);
  uint64_t outData = 0;
  inAddress.mElement = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.mSelector = 0x676C6F6275696420;
  OSStatus PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 128), &inAddress, 0, 0, &ioDataSize, &outData);
  if (PropertyData)
  {
    AudioObjectID v5 = (os_log_t *)sub_32A48(16);
    double v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, PropertyData);
        if (v9 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        __n128 v14 = "AggregateDevice_CommonBase.cpp";
        __int16 v15 = 1024;
        int v16 = 671;
        __int16 v17 = 2080;
        char v18 = v7;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioObjectGetPropertyData(kAudioDevicePropertyDeviceUID) returned status %s.", buf, 0x1Cu);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  *(void *)a2 = outData;
  *(unsigned char *)(a2 + 8) = 1;
}

uint64_t sub_91290(os_unfair_lock_s *a1, double a2)
{
  uint64_t v4 = sub_32A48(16);
  uint64_t v5 = sub_32A48(36);
  char v6 = 0;
  uint64_t v7 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v8 = *(void *)(v4 + 8);
  while (1)
  {
    uint64_t v9 = *(int *)&buf[4 * v7];
    char v10 = v6;
    if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
      break;
    }
    char v6 = 1;
    uint64_t v7 = 1;
    if (v10) {
      goto LABEL_7;
    }
  }
  if ((v8 & v9) == 0) {
    uint64_t v4 = v5;
  }
LABEL_7:
  uint64_t v11 = *(NSObject **)v4;
  if (v11 && os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    sub_4F64((uint64_t)&__p, a1 + 2);
    uint64_t v12 = v26 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
    *(_WORD *)&uint8_t buf[12] = 1024;
    *(_DWORD *)&buf[14] = 631;
    __int16 v28 = 2048;
    double v29 = a2;
    __int16 v30 = 2080;
    __int16 v31 = v12;
    _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Synchronously setting sample rate to %f Hz on aggregate device %s.", buf, 0x26u);
    if (v26 < 0) {
      operator delete(__p);
    }
  }
  if (!_os_feature_enabled_impl()) {
    goto LABEL_28;
  }
  sub_8BD08(&__p, (uint64_t)a1);
  uint64_t v13 = __p;
  if (__p && sub_8BFA8((unsigned __int8 *)__p))
  {
    double v14 = (*(double (**)(void *))(*(void *)v13 + 104))(v13);
    double v15 = fabs(a2);
    double v16 = fabs(v14);
    if (v15 < v16) {
      double v15 = v16;
    }
    if (v15 >= 1.0) {
      double v17 = v15 * 2.22044605e-16;
    }
    else {
      double v17 = 2.22044605e-16;
    }
    if (vabdd_f64(a2, v14) > v17)
    {
      __int16 v21 = (os_log_t *)sub_32A48(13);
      char v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = 641;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Accessory device controlled. Other sample rates not supported.\"", buf, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Accessory device controlled. Other sample rates not supported.");
    }
    char v18 = 0;
  }
  else
  {
    char v18 = 1;
  }
  if (v25) {
    sub_4636C(v25);
  }
  if ((v18 & 1) == 0) {
    return 0;
  }
LABEL_28:
  (*(void (**)(unsigned char *__return_ptr, os_unfair_lock_s *, double))(*(void *)&a1->_os_unfair_lock_opaque
                                                                          + 192))(buf, a1, a2);
  uint64_t v19 = (*(uint64_t (**)(os_unfair_lock_s *, unsigned char *))(*(void *)&a1->_os_unfair_lock_opaque + 200))(a1, buf);
  sub_463E0(*(void **)&buf[8]);
  return v19;
}

void sub_915DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_free_exception(v14);
  if (a11) {
    sub_4636C(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_91620(uint64_t a1, const AudioObjectPropertyAddress *a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  sub_4C264(a1);
  if (!(*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *))(*(void *)a1 + 16))(a1, a2)) {
    return 1;
  }
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector > 1935762280)
  {
    if (mSelector <= 1953002353)
    {
      if (mSelector == 1935762281 || mSelector == 1937204590) {
        goto LABEL_20;
      }
      if (mSelector == 1952997988)
      {
        char v10 = (void *)(sub_91A00() + 408);
        if (sub_1A1BE4(v10, (uint64_t)&qword_64CAC0))
        {
          *(void *)AudioObjectPropertyAddress buf = qword_64CAC0;
          *(_DWORD *)&buf[8] = dword_64CAC8;
          *(void *)&buf[16] = a3;
          *(void *)&buf[24] = a4;
          sub_1A4260(v10, (unsigned int *)&qword_64CAC0, (uint64_t)buf);
        }
        return 1;
      }
      goto LABEL_28;
    }
    if (mSelector == 1953002354 || mSelector == 1986225268) {
      goto LABEL_20;
    }
    int v9 = 1986225266;
  }
  else if (mSelector > 1635153006)
  {
    if (mSelector == 1635153007 || mSelector == 1684103987) {
      goto LABEL_20;
    }
    int v9 = 1886807154;
  }
  else
  {
    if (mSelector == 1165513555 || mSelector == 1633973868) {
      goto LABEL_20;
    }
    int v9 = 1635152995;
  }
  if (mSelector != v9)
  {
LABEL_28:
    OSStatus v14 = AudioObjectRemovePropertyListener(*(_DWORD *)(a1 + 128), a2, a3, a4);
    if (v14)
    {
      unsigned int v15 = v14;
      double v16 = (os_log_t *)sub_32A48(16);
      double v17 = *v16;
      if (*v16)
      {
        uint64_t v13 = 1;
        if (!os_log_type_enabled(*v16, OS_LOG_TYPE_INFO)) {
          return v13;
        }
        uint64_t v25 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)v27, (unsigned int *)&v25);
        int v18 = v28;
        uint64_t v19 = (void **)v27[0];
        sub_2417C(__p, v15);
        char v20 = v27;
        if (v18 < 0) {
          char v20 = v19;
        }
        if (v24 >= 0) {
          __int16 v21 = __p;
        }
        else {
          __int16 v21 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2007;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v20;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v21;
        _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_INFO, "%25s:%-5d AudioObjectRemovePropertyListener(%s) returned status %s.", buf, 0x26u);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if (v28 < 0) {
          operator delete(v27[0]);
        }
      }
    }
    return 1;
  }
LABEL_20:
  sub_B680((uint64_t *)buf, (void *)(a1 + 184), "", 1985);
  uint64_t v11 = *(void *)&buf[8];
  if (*(unsigned char **)&buf[8] == buf)
  {
    LOBYTE(v12) = 1;
  }
  else
  {
    int v12 = 1;
    do
    {
      if ((*(unsigned int (**)(void, const AudioObjectPropertyAddress *))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), a2))
      {
        v12 &= (*(uint64_t (**)(void, const AudioObjectPropertyAddress *, OSStatus (__cdecl *)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *))(**(void **)(v11 + 16) + 72))(*(void *)(v11 + 16), a2, a3, a4);
      }
      uint64_t v11 = *(void *)(v11 + 8);
    }
    while ((unsigned char *)v11 != buf);
  }
  sub_B8E4((uint64_t *)buf);
  return v12 & 1;
}

void sub_919CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_91A00()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_65E288, memory_order_acquire) != -1)
  {
    UInt32 v3 = &v1;
    AudioObjectID v2 = &v3;
    std::__call_once(&qword_65E288, &v2, (void (__cdecl *)(void *))sub_91A68);
  }
  return qword_65E290;
}

void sub_91A68()
{
}

void sub_9216C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, void **a13, void **a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,CFTypeRef cf)
{
  sub_1A97C8(a10);
  std::mutex::~mutex((std::mutex *)(v23 + 344));
  if (*(char *)(v23 + 343) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v23 + 319) < 0) {
    operator delete(*v27);
  }
  if (*(char *)(v23 + 295) < 0) {
    operator delete(*a13);
  }
  sub_4EDB8((void ***)&cf);
  if (*(char *)(v23 + 239) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v23 + 215) < 0) {
    operator delete(*v26);
  }
  sub_8F90(*v25);
  sub_8F90(*v24);
  char v28 = *a11;
  if (*a11)
  {
    *(void *)(v23 + 128) = v28;
    operator delete(v28);
  }
  sub_16EED8(*(void **)(v23 + 104));
  sub_8F90(*(char **)(v23 + 72));
  sub_8F90(*(char **)(v23 + 40));
  sub_8F90(*(char **)(v23 + 8));
  operator delete();
}

void sub_922E8()
{
}

BOOL sub_922F0(uint64_t a1, uint64_t a2, OSStatus (__cdecl *a3)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *a4)
{
  sub_4C264(a1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2) & 1) == 0)
  {
    char v24 = (os_log_t *)sub_32A48(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      int v29 = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)v32, (unsigned int *)&__p);
      char v26 = v33 >= 0 ? v32 : (void **)v32[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1906;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v8 = *(_DWORD *)a2;
  if (*(int *)a2 > 1935762280)
  {
    if (v8 <= 1953002353)
    {
      if (v8 == 1935762281 || v8 == 1937204590) {
        goto LABEL_19;
      }
      if (v8 == 1952997988)
      {
        uint64_t v10 = sub_91A00();
        *(void *)AudioObjectPropertyAddress buf = qword_64CAC0;
        *(_DWORD *)&buf[8] = dword_64CAC8;
        *(void *)&buf[16] = a3;
        *(void *)&buf[24] = a4;
        sub_1A4AA0((void *)(v10 + 408), (unsigned int *)&qword_64CAC0, (uint64_t)buf);
        return 1;
      }
LABEL_28:
      OSStatus v14 = AudioObjectAddPropertyListener(*(_DWORD *)(a1 + 128), (const AudioObjectPropertyAddress *)a2, a3, a4);
      if (v14)
      {
        unsigned int v15 = v14;
        double v16 = (os_log_t *)sub_32A48(16);
        double v17 = *v16;
        if (*v16)
        {
          BOOL result = os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          sub_2417C(v32, v15);
          if (v33 >= 0) {
            int v18 = v32;
          }
          else {
            int v18 = (void **)v32[0];
          }
          int v19 = *(_DWORD *)(a1 + 128);
          (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 128))(v31, a1);
          uint64_t v20 = v31[0];
          sub_2417C(&__p, *(_DWORD *)a2);
          if (v30 >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          int v22 = *(_DWORD *)(a2 + 4);
          int v23 = *(_DWORD *)(a2 + 8);
          *(_DWORD *)AudioObjectPropertyAddress buf = 136317186;
          *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
          *(_WORD *)&uint8_t buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1946;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v15;
          *(_WORD *)&buf[24] = 2080;
          *(void *)&buf[26] = v18;
          __int16 v35 = 1024;
          int v36 = v19;
          __int16 v37 = 2112;
          uint64_t v38 = v20;
          __int16 v39 = 2080;
          uint64_t v40 = p_p;
          __int16 v41 = 1024;
          int v42 = v22;
          __int16 v43 = 1024;
          int v44 = v23;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d FAIL with status %d (\"%s\"): mDeviceID %d (uid \"%@\"); selector \"%s\"; scope %u; element %u",
            buf,
            0x48u);
          if (v30 < 0) {
            operator delete(__p);
          }
          sub_72924((uint64_t)v31);
          if (v33 < 0) {
            operator delete(v32[0]);
          }
        }
        return 0;
      }
      return 1;
    }
    if (v8 == 1953002354 || v8 == 1986225268) {
      goto LABEL_19;
    }
    int v9 = 1986225266;
  }
  else if (v8 > 1635153006)
  {
    if (v8 == 1635153007 || v8 == 1684103987) {
      goto LABEL_19;
    }
    int v9 = 1886807154;
  }
  else
  {
    if (v8 == 1165513555 || v8 == 1633973868) {
      goto LABEL_19;
    }
    int v9 = 1635152995;
  }
  if (v8 != v9) {
    goto LABEL_28;
  }
LABEL_19:
  sub_B680((uint64_t *)buf, (void *)(a1 + 184), "", 1923);
  uint64_t v11 = *(void *)&buf[8];
  if (*(unsigned char **)&buf[8] == buf)
  {
    LOBYTE(v12) = 1;
  }
  else
  {
    int v12 = 1;
    do
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), a2)) {
        v12 &= (*(uint64_t (**)(void, uint64_t, OSStatus (__cdecl *)(AudioObjectID, UInt32, const AudioObjectPropertyAddress *, void *), void *))(**(void **)(v11 + 16) + 64))(*(void *)(v11 + 16), a2, a3, a4);
      }
      uint64_t v11 = *(void *)(v11 + 8);
    }
    while ((unsigned char *)v11 != buf);
  }
  sub_B8E4((uint64_t *)buf);
  return v12 & 1;
}

void sub_927F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_92834(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, double *a6)
{
  sub_4C264(a1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a2) & 1) == 0)
  {
    v172 = (os_log_t *)sub_32A48(13);
    v173 = *v172;
    if (*v172 && os_log_type_enabled(*v172, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v320 = *(CFTypeRef *)a2;
      LODWORD(cf) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v320);
      v174 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1653;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v174;
      _os_log_impl(&def_1E50E8, v173, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    v176 = (os_log_t *)sub_32A48(13);
    v177 = *v176;
    if (*v176 && os_log_type_enabled(*v176, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v320 = *(CFTypeRef *)a2;
      LODWORD(cf) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v320);
      v178 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0] = 136316162;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1654;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v178;
      LOWORD(buf[7]) = 1024;
      *(_DWORD *)((char *)&buf[7] + 2) = a3;
      HIWORD(buf[8]) = 2048;
      *(void *)&buf[9] = a4;
      _os_log_impl(&def_1E50E8, v177, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)buf,
        0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v179 = __cxa_allocate_exception(0x10uLL);
    *(void *)v179 = &off_6414D8;
    v179[2] = 561211770;
  }
  if (!a6)
  {
    v180 = (os_log_t *)sub_32A48(13);
    v181 = *v180;
    if (*v180 && os_log_type_enabled(*v180, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v320 = *(CFTypeRef *)a2;
      LODWORD(cf) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v320);
      v182 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0] = 136315906;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1655;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = "inData";
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v182;
      _os_log_impl(&def_1E50E8, v181, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", (uint8_t *)buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v183 = __cxa_allocate_exception(0x10uLL);
    *(void *)v183 = &off_6414D8;
    v183[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    v184 = (os_log_t *)sub_32A48(13);
    v185 = *v184;
    if (*v184 && os_log_type_enabled(*v184, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v320 = *(CFTypeRef *)a2;
      LODWORD(cf) = *(_DWORD *)(a2 + 8);
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v320);
      v186 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
      buf[0] = 136315650;
      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 1656;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v186;
      _os_log_impl(&def_1E50E8, v185, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", (uint8_t *)buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v187 = __cxa_allocate_exception(0x10uLL);
    *(void *)v187 = &off_6414D8;
    v187[2] = 1852797029;
  }
  int v13 = *(_DWORD *)a2;
  if (*(int *)a2 <= 1718839673)
  {
    if (v13 <= 1651664738)
    {
      if (v13 <= 1634755427)
      {
        if (v13 <= 1633970531)
        {
          if (v13 != 1633776747)
          {
            if (v13 == 1633904999)
            {
              if ((_os_feature_enabled_impl() & 1) == 0)
              {
                v239 = (os_log_t *)sub_32A48(13);
                v240 = *v239;
                if (*v239 && os_log_type_enabled(*v239, OS_LOG_TYPE_ERROR))
                {
                  buf[0] = 136315394;
                  *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 1877;
                  _os_log_impl(&def_1E50E8, v240, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
                }
                v241 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v241, "Precondition failure.");
              }
              sub_8BD08(&__p, a1);
              if (__p.__r_.__value_.__r.__words[0])
              {
                if ((sub_981DC((uint64_t)__p.__r_.__value_.__l.__data_, *a4) & 1) == 0)
                {
                  v276 = (os_log_t *)sub_32A48(13);
                  v277 = *v276;
                  if (*v276 && os_log_type_enabled(*v276, OS_LOG_TYPE_ERROR))
                  {
                    buf[0] = 136315394;
                    *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 1883;
                    _os_log_impl(&def_1E50E8, v277, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Do not have control of device.\"", (uint8_t *)buf, 0x12u);
                  }
                  v278 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v278 = &off_6414D8;
                  v278[2] = 1852797029;
                }
                sub_98340(a1, *(_DWORD *)(a2 + 8), *(float *)a6);
              }
              goto LABEL_251;
            }
            if (v13 == 1633907570)
            {
              if ((_os_feature_enabled_impl() & 1) == 0)
              {
                v226 = (os_log_t *)sub_32A48(13);
                v227 = *v226;
                if (*v226 && os_log_type_enabled(*v226, OS_LOG_TYPE_ERROR))
                {
                  buf[0] = 136315394;
                  *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 1861;
                  _os_log_impl(&def_1E50E8, v227, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
                }
                v228 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v228, "Precondition failure.");
              }
              sub_8BD08(&__p, a1);
              std::string::size_type v14 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__r.__words[0])
              {
                if (sub_981DC((uint64_t)__p.__r_.__value_.__l.__data_, *a4))
                {
                  (*(void (**)(std::string::size_type, double))(*(void *)v14 + 112))(v14, *a6);
                  sub_97FBC();
                }
                v270 = (os_log_t *)sub_32A48(13);
                v271 = *v270;
                if (*v270)
                {
                  if (os_log_type_enabled(*v270, OS_LOG_TYPE_ERROR))
                  {
                    buf[0] = 136315394;
                    *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 1867;
                    _os_log_impl(&def_1E50E8, v271, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Do not have control of device.\"", (uint8_t *)buf, 0x12u);
                  }
                }
                v272 = __cxa_allocate_exception(0x10uLL);
                *(void *)v272 = &off_6414D8;
                v272[2] = 1852797029;
              }
LABEL_251:
              if (__p.__r_.__value_.__l.__size_) {
                sub_4636C((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
              }
              return;
            }
            goto LABEL_254;
          }
          if ((_os_feature_enabled_impl() & 1) == 0)
          {
            v242 = (os_log_t *)sub_32A48(13);
            v243 = *v242;
            if (*v242 && os_log_type_enabled(*v242, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 1827;
              _os_log_impl(&def_1E50E8, v243, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
            }
            v244 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v244, "Precondition failure.");
          }
          sub_8BD08(&__p, a1);
          v100 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
          if (!__p.__r_.__value_.__r.__words[0]) {
            goto LABEL_251;
          }
          if (sub_8BFA8((unsigned __int8 *)__p.__r_.__value_.__l.__data_))
          {
            v279 = (os_log_t *)sub_32A48(13);
            v280 = *v279;
            if (*v279 && os_log_type_enabled(*v279, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 1831;
              v281 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Device is already controlled.\"";
LABEL_542:
              _os_log_impl(&def_1E50E8, v280, OS_LOG_TYPE_ERROR, v281, (uint8_t *)buf, 0x12u);
            }
          }
          else
          {
            sub_97E58((uint64_t)v100, *(_DWORD *)a6);
            if (sub_8BFA8(v100)) {
              sub_97FBC();
            }
            v282 = (os_log_t *)sub_32A48(13);
            v280 = *v282;
            if (*v282 && os_log_type_enabled(*v282, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 1835;
              v281 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Failed to take control of device.\"";
              goto LABEL_542;
            }
          }
          v283 = __cxa_allocate_exception(0x10uLL);
          *(void *)v283 = &off_6414D8;
          v283[2] = 1852797029;
        }
        if (v13 != 1633970532)
        {
          if (v13 == 1633973868) {
            goto LABEL_149;
          }
          int v15 = 1634692199;
LABEL_148:
          if (v13 == v15) {
            goto LABEL_149;
          }
LABEL_254:
          AudioObjectID v101 = *(_DWORD *)(a1 + 128);
          sub_988F0(v101, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, a6);
          return;
        }
        v53 = (std::mutex *)(a1 + 568);
        std::mutex::lock((std::mutex *)(a1 + 568));
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
        {
          v253 = (os_log_t *)sub_32A48(13);
          v254 = *v253;
          if (*v253 && os_log_type_enabled(*v253, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef v320 = *(CFTypeRef *)a2;
            LODWORD(cf) = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&__p, (unsigned int *)&v320);
            int v255 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v256 = __p.__r_.__value_.__r.__words[0];
            int v257 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            p_p = &__p;
            buf[0] = 136316162;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            if (v255 < 0) {
              p_p = (std::string *)v256;
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1788;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = p_p;
            LOWORD(buf[7]) = 1024;
            *(_DWORD *)((char *)&buf[7] + 2) = a5;
            HIWORD(buf[8]) = 1024;
            buf[9] = v257;
            _os_log_impl(&def_1E50E8, v254, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              (uint8_t *)buf,
              0x28u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v259 = __cxa_allocate_exception(0x10uLL);
          *(void *)v259 = &off_6414D8;
          v259[2] = 561211770;
        }
        memset(buf, 0, 24);
        sub_4CAB0(buf, *(const void **)(a1 + 144), *(void *)(a1 + 152), (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
        v102 = *(void **)buf;
        if (*(void *)buf != *(void *)&buf[2])
        {
          while (*v102 != *(void *)a6)
          {
            if (++v102 == *(void **)&buf[2])
            {
              v102 = *(void **)&buf[2];
              break;
            }
          }
        }
        if (v102 == *(void **)&buf[2]) {
          sub_97D7C((uint64_t)buf, a6);
        }
        goto LABEL_278;
      }
      if ((v13 - 1635152993) > 0xE || ((1 << (v13 - 97)) & 0x4015) == 0)
      {
        if (v13 != 1634755428)
        {
          if (v13 != 1634890859) {
            goto LABEL_254;
          }
          if ((_os_feature_enabled_impl() & 1) == 0)
          {
            v229 = (os_log_t *)sub_32A48(13);
            v230 = *v229;
            if (*v229 && os_log_type_enabled(*v229, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 1844;
              _os_log_impl(&def_1E50E8, v230, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
            }
            v231 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v231, "Precondition failure.");
          }
          sub_8BD08(&__p, a1);
          int v18 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
          if (!__p.__r_.__value_.__r.__words[0]) {
            goto LABEL_251;
          }
          if (sub_8BFA8((unsigned __int8 *)__p.__r_.__value_.__l.__data_))
          {
            sub_98064((uint64_t)v18, *(_DWORD *)a6);
            if (!sub_8BFA8(v18)) {
              sub_97FBC();
            }
            v284 = (os_log_t *)sub_32A48(13);
            v274 = *v284;
            if (*v284 && os_log_type_enabled(*v284, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 1852;
              v275 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Failed to relinquish control of device.\"";
              goto LABEL_547;
            }
          }
          else
          {
            v273 = (os_log_t *)sub_32A48(13);
            v274 = *v273;
            if (*v273 && os_log_type_enabled(*v273, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 1848;
              v275 = "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Device is not controlled.\"";
LABEL_547:
              _os_log_impl(&def_1E50E8, v274, OS_LOG_TYPE_ERROR, v275, (uint8_t *)buf, 0x12u);
            }
          }
          v285 = __cxa_allocate_exception(0x10uLL);
          *(void *)v285 = &off_6414D8;
          v285[2] = 1852797029;
        }
        v103 = *(const void **)a6;
        if (v103)
        {
          CFRetain(v103);
          sub_14E44(&v320, v103);
          if (v320)
          {
            sub_20C54((uint64_t)&__p, (const __CFString *)v320);
            v104 = (os_log_t *)sub_32A48(16);
            v105 = *v104;
            if (*v104 && os_log_type_enabled(*v104, OS_LOG_TYPE_DEFAULT))
            {
              v106 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                v106 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              buf[0] = 136315650;
              *(void *)&buf[1] = "AggregateDevice.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 956;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v106;
              _os_log_impl(&def_1E50E8, v105, OS_LOG_TYPE_DEFAULT, "%25s:%-5d media clock is %s", (uint8_t *)buf, 0x1Cu);
            }
            std::string::operator=((std::string *)(a1 + 392), &__p);
            LOBYTE(buf[0]) = 0;
            LOBYTE(buf[10]) = 0;
            sub_21E95C(a1, (uint64_t)buf);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v320) {
              CFRelease(v320);
            }
            return;
          }
        }
        else
        {
          CFTypeRef v320 = 0;
        }
        v245 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v245, "Could not construct");
      }
LABEL_149:
      sub_B680((uint64_t *)buf, (void *)(a1 + 184), "", 1696);
      for (uint64_t i = *(void *)&buf[2]; (_DWORD *)i != buf; uint64_t i = *(void *)(i + 8))
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(i + 16) + 16))(*(void *)(i + 16), a2)) {
          (*(void (**)(void, uint64_t, uint64_t, int *, uint64_t, double *))(**(void **)(i + 16) + 48))(*(void *)(i + 16), a2, a3, a4, a5, a6);
        }
      }
LABEL_153:
      uint64_t v59 = (std::string *)buf;
LABEL_154:
      sub_B8E4((uint64_t *)v59);
      return;
    }
    if (v13 <= 1684500593)
    {
      if (v13 <= 1684365923)
      {
        if (v13 != 1651664739 && v13 != 1668576114)
        {
          int v15 = 1684304756;
          goto LABEL_148;
        }
        goto LABEL_149;
      }
      if (v13 == 1684365924 || v13 == 1684370276) {
        goto LABEL_149;
      }
      if (v13 != 1684500589 || *(unsigned char *)(a1 + 296)) {
        goto LABEL_254;
      }
      if (a3 != 4 || !a4)
      {
        v292 = (os_log_t *)sub_32A48(13);
        v293 = *v292;
        if (*v292 && os_log_type_enabled(*v292, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef v320 = *(CFTypeRef *)a2;
          LODWORD(cf) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v320);
          v294 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &__p
               : (std::string *)__p.__r_.__value_.__r.__words[0];
          buf[0] = 136316674;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3357;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v294;
          LOWORD(buf[7]) = 1024;
          *(_DWORD *)((char *)&buf[7] + 2) = 4;
          HIWORD(buf[8]) = 2080;
          *(void *)&buf[9] = "non-";
          __int16 v325 = 1024;
          int v326 = a3;
          __int16 v327 = 2048;
          v328 = a4;
          _os_log_impl(&def_1E50E8, v293, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
            (uint8_t *)buf,
            0x3Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v295 = __cxa_allocate_exception(0x10uLL);
        *(void *)v295 = &off_6414D8;
        v295[2] = 561211770;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 32))(a1, a2, 4, a4) != a5)
      {
        v300 = (os_log_t *)sub_32A48(13);
        v301 = *v300;
        if (*v300 && os_log_type_enabled(*v300, OS_LOG_TYPE_ERROR))
        {
          CFTypeRef v320 = *(CFTypeRef *)a2;
          LODWORD(cf) = *(_DWORD *)(a2 + 8);
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v320);
          int v302 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v303 = __p.__r_.__value_.__r.__words[0];
          int v304 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 32))(a1, a2, 4, a4);
          v305 = &__p;
          buf[0] = 136316162;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          if (v302 < 0) {
            v305 = (std::string *)v303;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3358;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v305;
          LOWORD(buf[7]) = 1024;
          *(_DWORD *)((char *)&buf[7] + 2) = a5;
          HIWORD(buf[8]) = 1024;
          buf[9] = v304;
          _os_log_impl(&def_1E50E8, v301, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)buf,
            0x28u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        v306 = __cxa_allocate_exception(0x10uLL);
        *(void *)v306 = &off_6414D8;
        v306[2] = 561211770;
      }
      int v57 = *(_DWORD *)(a2 + 4);
      if (v57 != 1768845428 && v57 != 1869968496)
      {
        v314 = (os_log_t *)sub_32A48(13);
        v315 = *v314;
        if (*v314 && os_log_type_enabled(*v314, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3359;
          _os_log_impl(&def_1E50E8, v315, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
        }
        v316 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v316, "Precondition failure.");
      }
      v12.n128_u32[0] = *(_DWORD *)a6;
      uint64_t v52 = *a4;
      char v49 = *(void (**)(uint64_t, uint64_t, uint64_t, void, __n128))(*(void *)a1 + 368);
      uint64_t v50 = a1;
      uint64_t v51 = 1685287015;
      goto LABEL_140;
    }
    if (v13 > 1685287522)
    {
      if (v13 != 1685287523 && v13 != 1685483630)
      {
        int v15 = 1718383987;
        goto LABEL_148;
      }
      goto LABEL_149;
    }
    switch(v13)
    {
      case 1684500594:
        if (*(unsigned char *)(a1 + 296)) {
          goto LABEL_254;
        }
        if (a3 != 4 || !a4)
        {
          v296 = (os_log_t *)sub_32A48(13);
          v297 = *v296;
          if (*v296 && os_log_type_enabled(*v296, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef v320 = *(CFTypeRef *)a2;
            LODWORD(cf) = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&__p, (unsigned int *)&v320);
            v298 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &__p
                 : (std::string *)__p.__r_.__value_.__r.__words[0];
            buf[0] = 136316674;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 3230;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v298;
            LOWORD(buf[7]) = 1024;
            *(_DWORD *)((char *)&buf[7] + 2) = 4;
            HIWORD(buf[8]) = 2080;
            *(void *)&buf[9] = "non-";
            __int16 v325 = 1024;
            int v326 = a3;
            __int16 v327 = 2048;
            v328 = a4;
            _os_log_impl(&def_1E50E8, v297, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
              (uint8_t *)buf,
              0x3Cu);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v299 = __cxa_allocate_exception(0x10uLL);
          *(void *)v299 = &off_6414D8;
          v299[2] = 561211770;
        }
        int v107 = *(_DWORD *)(a2 + 4);
        if (v107 != 1768845428 && v107 != 1869968496)
        {
          v311 = (os_log_t *)sub_32A48(13);
          v312 = *v311;
          if (*v311 && os_log_type_enabled(*v311, OS_LOG_TYPE_ERROR))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 3231;
            _os_log_impl(&def_1E50E8, v312, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
          }
          v313 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v313, "Precondition failure.");
        }
        uint64_t v108 = *a4;
        uint64_t v109 = *(unsigned int *)(a2 + 8);
        v110 = *(void (**)(uint64_t, uint64_t, uint64_t, double *, uint64_t, BOOL, uint64_t))(*(void *)a1 + 400);
        v110(a1, 1685287015, v108, a6, a5, v107 != 1768845428, v109);
        break;
      case 1685087596:
        goto LABEL_149;
      case 1685287011:
        if (*(_DWORD *)(a2 + 4) == 1869968496)
        {
          uint64_t v19 = *(void *)(a1 + 544);
          for (uint64_t j = *(void *)(a1 + 552); v19 != j; v19 += 16)
          {
            uint64_t v21 = *(void *)(*(void *)v19 + 136);
            int v22 = (os_log_t *)sub_32A48(26);
            int v23 = *v22;
            if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
            {
              sub_21B7C(&__p, (CFStringRef)a4);
              char v24 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                char v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              buf[0] = 136315650;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 3033;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v24;
              _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Set DSPConfig Qualifier String: %s", (uint8_t *)buf, 0x1Cu);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            if (CFStringCompare((CFStringRef)a4, @"haptics protection mode", 0))
            {
              if (CFEqual((CFStringRef)a4, @"loudness normalizer reset")
                && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v21 + 88))(v21, 1818521197, 1920165236, 0))
              {
                float v25 = *(float *)a6;
                *(float *)&__p.__r_.__value_.__l.__data_ = v25;
                if (LODWORD(v25) != 2)
                {
                  uint64_t v218 = sub_32A48(13);
                  v219 = sub_7D5E8(1, *(void **)v218, *(void *)(v218 + 8));
                  v220 = v219;
                  if (v219 && os_log_type_enabled(v219, OS_LOG_TYPE_ERROR))
                  {
                    buf[0] = 136315650;
                    *(void *)&buf[1] = "DSPChain.mm";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2900;
                    HIWORD(buf[4]) = 1024;
                    *(float *)&buf[5] = v25;
                    _os_log_impl(&def_1E50E8, v220, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Invalid reset value for AULN - Expected 2 and got: %u\"", (uint8_t *)buf, 0x18u);
                  }

                  v221 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v221, "Invalid reset value for AULN - Expected 2 and got: %u");
                }
                uint64_t v26 = sub_32A48(24);
                uint64_t v27 = sub_32A48(31);
                char v28 = 0;
                uint64_t v29 = 0;
                *(void *)AudioObjectPropertyAddress buf = 0x100000002;
                uint64_t v30 = *(void *)(v26 + 8);
                while (1)
                {
                  uint64_t v31 = (int)buf[v29];
                  char v32 = v28;
                  if (((v30 & v31) != 0) != ((*(void *)(v27 + 8) & v31) != 0)) {
                    break;
                  }
                  char v28 = 1;
                  uint64_t v29 = 1;
                  if (v32) {
                    goto LABEL_80;
                  }
                }
                if ((v30 & v31) == 0) {
                  uint64_t v26 = v27;
                }
LABEL_80:
                __int16 v37 = *(id *)v26;
                uint64_t v38 = v37;
                if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                {
                  buf[0] = 136315650;
                  *(void *)&buf[1] = "DSPChain.mm";
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 2904;
                  HIWORD(buf[4]) = 1024;
                  buf[5] = 2;
                  _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Resetting AULoudnessNormalizer: %u", (uint8_t *)buf, 0x18u);
                }

                int v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, std::string *, uint64_t, void))(*(void *)v21 + 112))(v21, 1818521197, 1920165236, &__p, 4, 0);
                if (v39)
                {
                  uint64_t v222 = sub_32A48(13);
                  v223 = sub_7D5E8(1, *(void **)v222, *(void *)(v222 + 8));
                  v224 = v223;
                  if (v223 && os_log_type_enabled(v223, OS_LOG_TYPE_ERROR))
                  {
                    buf[0] = 136315650;
                    *(void *)&buf[1] = "DSPChain.mm";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2907;
                    HIWORD(buf[4]) = 1024;
                    buf[5] = v39;
                    _os_log_impl(&def_1E50E8, v224, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) resetting AULoudnessNormalizer\"", (uint8_t *)buf, 0x18u);
                  }

                  v225 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v225 = &off_6414D8;
                  v225[2] = v39;
                }
              }
            }
            else if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v21 + 88))(v21, 1751216240, 88000, 0))
            {
              float v33 = *(float *)a6;
              *(float *)&__p.__r_.__value_.__l.__data_ = v33;
              if (LODWORD(v33) >= 3)
              {
                uint64_t v209 = sub_32A48(13);
                v210 = sub_7D5E8(1, *(void **)v209, *(void *)(v209 + 8));
                v211 = v210;
                if (v210 && os_log_type_enabled(v210, OS_LOG_TYPE_ERROR))
                {
                  buf[0] = 136315394;
                  *(void *)&buf[1] = "DSPChain.mm";
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 2887;
                  _os_log_impl(&def_1E50E8, v211, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
                }

                v212 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v212, "Precondition failure.");
              }
              int v34 = *(id *)sub_32A48(26);
              __int16 v35 = v34;
              if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
              {
                buf[0] = 136315650;
                *(void *)&buf[1] = "DSPChain.mm";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 2889;
                HIWORD(buf[4]) = 1024;
                *(float *)&buf[5] = v33;
                _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Haptics Protection Mode: %u", (uint8_t *)buf, 0x18u);
              }

              int v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, std::string *, uint64_t, void))(*(void *)v21 + 112))(v21, 1751216240, 88000, &__p, 4, 0);
              if (v36)
              {
                uint64_t v213 = sub_32A48(13);
                v214 = sub_7D5E8(1, *(void **)v213, *(void *)(v213 + 8));
                v215 = v214;
                if (v214 && os_log_type_enabled(v214, OS_LOG_TYPE_ERROR))
                {
                  buf[0] = 136315650;
                  *(void *)&buf[1] = "DSPChain.mm";
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 2892;
                  HIWORD(buf[4]) = 1024;
                  buf[5] = v36;
                  _os_log_impl(&def_1E50E8, v215, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) setting DSP Property for Haptics Protection\"", (uint8_t *)buf, 0x18u);
                }

                v216 = __cxa_allocate_exception(0x10uLL);
                *(void *)v216 = &off_6414D8;
                v216[2] = v36;
              }
            }
          }
        }
        break;
      default:
        goto LABEL_254;
    }
    return;
  }
  if (v13 <= 1934456179)
  {
    if (v13 <= 1885434481)
    {
      if (v13 > 1853059699)
      {
        switch(v13)
        {
          case 1853059700:
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
            {
              v232 = (os_log_t *)sub_32A48(13);
              v233 = *v232;
              if (*v232 && os_log_type_enabled(*v232, OS_LOG_TYPE_ERROR))
              {
                CFTypeRef v320 = *(CFTypeRef *)a2;
                LODWORD(cf) = *(_DWORD *)(a2 + 8);
                sub_16C9C4((uint64_t)&__p, (unsigned int *)&v320);
                int v234 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
                std::string::size_type v235 = __p.__r_.__value_.__r.__words[0];
                int v236 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 32))(a1, a2, a3, a4);
                v237 = &__p;
                buf[0] = 136316162;
                *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                if (v234 < 0) {
                  v237 = (std::string *)v235;
                }
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 1664;
                HIWORD(buf[4]) = 2080;
                *(void *)&buf[5] = v237;
                LOWORD(buf[7]) = 1024;
                *(_DWORD *)((char *)&buf[7] + 2) = a5;
                HIWORD(buf[8]) = 1024;
                buf[9] = v236;
                _os_log_impl(&def_1E50E8, v233, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
                  (uint8_t *)buf,
                  0x28u);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              v238 = __cxa_allocate_exception(0x10uLL);
              *(void *)v238 = &off_6414D8;
              v238[2] = 561211770;
            }
            int v95 = (*(uint64_t (**)(uint64_t, double))(*(void *)a1 + 112))(a1, *a6);
            if (v95)
            {
              int v96 = v95;
              v97 = (os_log_t *)sub_32A48(13);
              v98 = *v97;
              if (*v97 && os_log_type_enabled(*v97, OS_LOG_TYPE_ERROR))
              {
                buf[0] = 136315394;
                *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 1666;
                _os_log_impl(&def_1E50E8, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Failed to set sample rate.\"", (uint8_t *)buf, 0x12u);
              }
              v99 = __cxa_allocate_exception(0x10uLL);
              *(void *)v99 = &off_6414D8;
              v99[2] = v96;
            }
            break;
          case 1869574756:
            if (*(_DWORD *)(a2 + 4) == 1768845428)
            {
              uint64_t v83 = *(void *)(a1 + 520);
              for (uint64_t k = *(void *)(a1 + 528); v83 != k; v83 += 16)
              {
                uint64_t v85 = *(void *)(*(void *)v83 + 136);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v85 + 88))(v85, 1685287015, 1818980210, 0))
                {
                  float v86 = *(float *)a6;
                  if ((*(_DWORD *)a6 - 1) >= 5)
                  {
                    v198 = (os_log_t *)sub_32A48(13);
                    v199 = *v198;
                    if (*v198 && os_log_type_enabled(*v198, OS_LOG_TYPE_ERROR))
                    {
                      buf[0] = 136315394;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2635;
                      _os_log_impl(&def_1E50E8, v199, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
                    }
                    v200 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v200, "Precondition failure.");
                  }
                  if (LODWORD(v86) == 5) {
                    uint64_t v87 = 1970040690;
                  }
                  else {
                    uint64_t v87 = 1818980210;
                  }
                  v88 = (os_log_t *)sub_32A48(16);
                  v89 = *v88;
                  if (*v88 && os_log_type_enabled(*v88, OS_LOG_TYPE_INFO))
                  {
                    sub_2417C(&__p, v87);
                    v90 = &__p;
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      v90 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    buf[0] = 136315906;
                    *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2638;
                    HIWORD(buf[4]) = 2080;
                    *(void *)&buf[5] = v90;
                    LOWORD(buf[7]) = 1024;
                    *(float *)((char *)&buf[7] + 2) = v86;
                    _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_INFO, "%25s:%-5d Setting orientation override {%s, %d}", (uint8_t *)buf, 0x22u);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                  }
                  int v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double *, uint64_t, void))(*(void *)v85 + 112))(v85, 1685287015, v87, a6, a5, 0);
                  if (v91)
                  {
                    v204 = (os_log_t *)sub_32A48(13);
                    v205 = *v204;
                    if (*v204 && os_log_type_enabled(*v204, OS_LOG_TYPE_ERROR))
                    {
                      sub_2417C(&__p, v87);
                      v206 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? &__p
                           : (std::string *)__p.__r_.__value_.__r.__words[0];
                      buf[0] = 136315906;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2641;
                      HIWORD(buf[4]) = 1024;
                      buf[5] = v91;
                      LOWORD(buf[6]) = 2080;
                      *(void *)((char *)&buf[6] + 2) = v206;
                      _os_log_impl(&def_1E50E8, v205, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) setting DSP Property %s\"", (uint8_t *)buf, 0x22u);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                    }
                    v207 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v207 = &off_6414D8;
                    v207[2] = v91;
                  }
                  __p.__r_.__value_.__r.__words[0] = 0;
                  LODWORD(v320) = 8;
                  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v85 + 88))(v85, 1685287015, 1869768052, 0) & 1) == 0)
                  {
                    v195 = (os_log_t *)sub_32A48(13);
                    v196 = *v195;
                    if (*v195 && os_log_type_enabled(*v195, OS_LOG_TYPE_ERROR))
                    {
                      buf[0] = 136315394;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2647;
                      _os_log_impl(&def_1E50E8, v196, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"LockOrientation Property is present, but OrientationEffectiveTime is missing\"", (uint8_t *)buf, 0x12u);
                    }
                    v197 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v197, "LockOrientation Property is present, but OrientationEffectiveTime is missing");
                  }
                  int v92 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, std::string *, CFTypeRef *, void, void))(*(void *)v85 + 104))(v85, 1685287015, 1869768052, &__p, &v320, 0, 0);
                  if (v92)
                  {
                    v201 = (os_log_t *)sub_32A48(13);
                    v202 = *v201;
                    if (*v201 && os_log_type_enabled(*v201, OS_LOG_TYPE_ERROR))
                    {
                      buf[0] = 136315650;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2650;
                      HIWORD(buf[4]) = 1024;
                      buf[5] = v92;
                      _os_log_impl(&def_1E50E8, v202, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) obtaining DSP Property for orientation effective time\"", (uint8_t *)buf, 0x18u);
                    }
                    v203 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v203 = &off_6414D8;
                    v203[2] = v92;
                  }
                  v93 = (os_log_t *)sub_32A48(16);
                  v94 = *v93;
                  if (*v93 && os_log_type_enabled(*v93, OS_LOG_TYPE_DEFAULT))
                  {
                    buf[0] = 136315650;
                    *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2651;
                    HIWORD(buf[4]) = 2048;
                    *(void *)&buf[5] = __p.__r_.__value_.__r.__words[0];
                    _os_log_impl(&def_1E50E8, v94, OS_LOG_TYPE_DEFAULT, "%25s:%-5d orientation effective time: %llu", (uint8_t *)buf, 0x1Cu);
                  }
                  a6[1] = *(double *)&__p.__r_.__value_.__l.__data_;
                }
              }
            }
            break;
          case 1869575794:
            if (*(_DWORD *)(a2 + 4) == 1768845428)
            {
              uint64_t v40 = *(void *)(a1 + 520);
              for (uint64_t m = *(void *)(a1 + 528); v40 != m; v40 += 16)
              {
                uint64_t v42 = *(void *)(*(void *)v40 + 136);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v42 + 88))(v42, 1685287015, 1818980210, 0))
                {
                  float v43 = *(float *)a6;
                  if ((*(_DWORD *)a6 - 1) >= 5)
                  {
                    v188 = (os_log_t *)sub_32A48(13);
                    v189 = *v188;
                    if (*v188 && os_log_type_enabled(*v188, OS_LOG_TYPE_ERROR))
                    {
                      buf[0] = 136315394;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2693;
                      _os_log_impl(&def_1E50E8, v189, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
                    }
                    v190 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v190, "Precondition failure.");
                  }
                  if (LODWORD(v43) == 5) {
                    uint64_t v44 = 1970040690;
                  }
                  else {
                    uint64_t v44 = 1818980210;
                  }
                  std::string::size_type v45 = (os_log_t *)sub_32A48(16);
                  v46 = *v45;
                  if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_INFO))
                  {
                    sub_2417C(&__p, v44);
                    BOOL v47 = &__p;
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      BOOL v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    buf[0] = 136315906;
                    *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2696;
                    HIWORD(buf[4]) = 2080;
                    *(void *)&buf[5] = v47;
                    LOWORD(buf[7]) = 1024;
                    *(float *)((char *)&buf[7] + 2) = v43;
                    _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_INFO, "%25s:%-5d Setting orientation override {%s, %d}", (uint8_t *)buf, 0x22u);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                  }
                  int v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double *, uint64_t, void))(*(void *)v42 + 112))(v42, 1685287015, v44, a6, a5, 0);
                  if (v48)
                  {
                    v191 = (os_log_t *)sub_32A48(13);
                    v192 = *v191;
                    if (*v191 && os_log_type_enabled(*v191, OS_LOG_TYPE_ERROR))
                    {
                      sub_2417C(&__p, v44);
                      v193 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? &__p
                           : (std::string *)__p.__r_.__value_.__r.__words[0];
                      buf[0] = 136315906;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2699;
                      HIWORD(buf[4]) = 1024;
                      buf[5] = v48;
                      LOWORD(buf[6]) = 2080;
                      *(void *)((char *)&buf[6] + 2) = v193;
                      _os_log_impl(&def_1E50E8, v192, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) setting DSP Property %s\"", (uint8_t *)buf, 0x22u);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                    }
                    v194 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v194 = &off_6414D8;
                    v194[2] = v48;
                  }
                }
              }
            }
            break;
          default:
            goto LABEL_254;
        }
        return;
      }
      if (v13 != 1718839674)
      {
        int v15 = 1818326127;
        goto LABEL_148;
      }
    }
    else
    {
      if (v13 <= 1886807153)
      {
        if (v13 != 1885434482 && v13 != 1885631346)
        {
          if (v13 == 1886413412)
          {
            if (*(_DWORD *)(a2 + 4) != 1869968496) {
              return;
            }
            sub_B680((uint64_t *)buf, (void *)(a1 + 184), "", 2805);
            uint64_t v16 = *(void *)&buf[2];
            if (*(_DWORD **)&buf[2] != buf)
            {
              while (1)
              {
                uint64_t v17 = *(void *)(v16 + 16);
                __p.__r_.__value_.__r.__words[0] = 0x6F75747050504277;
                LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
                if ((*(uint64_t (**)(uint64_t, std::string *))(*(void *)v17 + 16))(v17, &__p)) {
                  break;
                }
                uint64_t v16 = *(void *)(v16 + 8);
                if ((_DWORD *)v16 == buf) {
                  goto LABEL_153;
                }
              }
              if ((_DWORD *)v16 != buf)
              {
                uint64_t v130 = sub_32A48(16);
                if (*(unsigned char *)(v130 + 8))
                {
                  v131 = *(NSObject **)v130;
                  if (*(void *)v130)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v130, OS_LOG_TYPE_DEBUG))
                    {
                      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_CommonBase.cpp";
                      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 2812;
                      _os_log_impl(&def_1E50E8, v131, OS_LOG_TYPE_DEBUG, "%25s:%-5d Legacy: Setting PeakPowerBudget (AEA property supported)", (uint8_t *)&__p, 0x12u);
                    }
                  }
                }
                CFDictionaryRef v132 = *(const __CFDictionary **)a6;
                if (!v132)
                {
                  v160 = (os_log_t *)sub_32A48(13);
                  v161 = *v160;
                  if (*v160)
                  {
                    if (os_log_type_enabled(*v160, OS_LOG_TYPE_ERROR))
                    {
                      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
                      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"AggregateDevice_CommonBase.cpp";
                      WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
                      *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 2814;
                      _os_log_impl(&def_1E50E8, v161, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Dictionary is null!\"", (uint8_t *)&__p, 0x12u);
                    }
                  }
                }
                CFNumberRef v133 = sub_99350(v132, @"device peak power budget");
                (*(void (**)(void, const __CFNumber *))(**(void **)(v16 + 16) + 216))(*(void *)(v16 + 16), v133);
              }
            }
            goto LABEL_153;
          }
          goto LABEL_254;
        }
        goto LABEL_149;
      }
      if (v13 == 1886807154) {
        goto LABEL_149;
      }
      if (v13 != 1902539642)
      {
        if (v13 != 1919773028) {
          goto LABEL_254;
        }
        v53 = (std::mutex *)(a1 + 568);
        std::mutex::lock((std::mutex *)(a1 + 568));
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
        {
          v246 = (os_log_t *)sub_32A48(13);
          v247 = *v246;
          if (*v246 && os_log_type_enabled(*v246, OS_LOG_TYPE_ERROR))
          {
            CFTypeRef v320 = *(CFTypeRef *)a2;
            LODWORD(cf) = *(_DWORD *)(a2 + 8);
            sub_16C9C4((uint64_t)&__p, (unsigned int *)&v320);
            int v248 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v249 = __p.__r_.__value_.__r.__words[0];
            int v250 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 32))(a1, a2, a3, a4);
            v251 = &__p;
            buf[0] = 136316162;
            *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
            if (v248 < 0) {
              v251 = (std::string *)v249;
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 1806;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v251;
            LOWORD(buf[7]) = 1024;
            *(_DWORD *)((char *)&buf[7] + 2) = a5;
            HIWORD(buf[8]) = 1024;
            buf[9] = v250;
            _os_log_impl(&def_1E50E8, v247, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              (uint8_t *)buf,
              0x28u);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v252 = __cxa_allocate_exception(0x10uLL);
          *(void *)v252 = &off_6414D8;
          v252[2] = 561211770;
        }
        memset(buf, 0, 24);
        sub_4CAB0(buf, *(const void **)(a1 + 144), *(void *)(a1 + 152), (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
        v55 = *(void **)buf;
        char v54 = *(void **)&buf[2];
        if (*(void *)buf != *(void *)&buf[2])
        {
          while (*v55 != *(void *)a6)
          {
            if (++v55 == *(void **)&buf[2])
            {
              v55 = *(void **)&buf[2];
              break;
            }
          }
        }
        if (v55 != *(void **)&buf[2])
        {
          for (n = v55 + 1; n != v54; ++n)
          {
            if (*n != *(void *)a6) {
              *v55++ = *n;
            }
          }
        }
        if (v54 != v55) {
          *(void *)&buf[2] = v55;
        }
LABEL_278:
        (*(void (**)(uint64_t, _DWORD *))(*(void *)a1 + 496))(a1, buf);
        if (*(void *)buf)
        {
          *(void *)&buf[2] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        std::mutex::unlock(v53);
        return;
      }
    }
    sub_97784((AudioObjectID *)a1, (const AudioObjectPropertyAddress *)a2, a3, a4, a5, (unsigned int *)a6);
    return;
  }
  if (v13 <= 1952997987)
  {
    if (v13 > 1936879203)
    {
      if (v13 != 1936879204)
      {
        if (v13 == 1937138532) {
          goto LABEL_149;
        }
        int v15 = 1937204590;
        goto LABEL_148;
      }
    }
    else
    {
      if (v13 == 1934456180 || v13 == 1935762281) {
        goto LABEL_149;
      }
      if (v13 != 1936876644) {
        goto LABEL_254;
      }
    }
    sub_973BC(a1, (_DWORD *)a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
    return;
  }
  if (v13 <= 1953719147)
  {
    if (v13 != 1952997988)
    {
      if (v13 == 1953002093) {
        goto LABEL_149;
      }
      int v15 = 1953002354;
      goto LABEL_148;
    }
    if (*(_DWORD *)(a2 + 4) != 1869968496) {
      return;
    }
    sub_B680((uint64_t *)&__p, (void *)(a1 + 184), "", 2361);
    int v79 = sub_209270();
    size = (std::string *)__p.__r_.__value_.__l.__size_;
    if (!v79)
    {
      if ((std::string *)__p.__r_.__value_.__l.__size_ == &__p) {
        goto LABEL_387;
      }
      while (1)
      {
        std::string::size_type v111 = size->__r_.__value_.__r.__words[2];
        strcpy((char *)buf, "wBhTptuo");
        BYTE1(buf[2]) = 0;
        HIWORD(buf[2]) = 0;
        if ((*(uint64_t (**)(std::string::size_type, _DWORD *))(*(void *)v111 + 16))(v111, buf)) {
          break;
        }
        size = (std::string *)size->__r_.__value_.__l.__size_;
        if (size == &__p) {
          goto LABEL_387;
        }
      }
      if (size != &__p)
      {
        uint64_t v137 = sub_32A48(16);
        if (*(unsigned char *)(v137 + 8))
        {
          v138 = *(NSObject **)v137;
          if (*(void *)v137)
          {
            if (os_log_type_enabled(*(os_log_t *)v137, OS_LOG_TYPE_DEBUG))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2487;
              _os_log_impl(&def_1E50E8, v138, OS_LOG_TYPE_DEBUG, "%25s:%-5d Legacy: Setting ThermalBudget (AEA property supported)", (uint8_t *)buf, 0x12u);
            }
          }
        }
        CFDictionaryRef v139 = *(const __CFDictionary **)a6;
        if (!v139)
        {
          v166 = (os_log_t *)sub_32A48(13);
          v167 = *v166;
          if (*v166)
          {
            if (os_log_type_enabled(*v166, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2489;
              _os_log_impl(&def_1E50E8, v167, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Dictionary is null!\"", (uint8_t *)buf, 0x12u);
            }
          }
        }
        CFNumberRef v140 = sub_99350(v139, @"HapticTargetPower");
        (*(void (**)(std::string::size_type, const __CFNumber *))(*(void *)size->__r_.__value_.__r.__words[2]
                                                                           + 224))(size->__r_.__value_.__r.__words[2], v140);
      }
LABEL_387:
      uint64_t v59 = &__p;
      goto LABEL_154;
    }
    while (size != &__p)
    {
      if (sub_D6F60(size->__r_.__value_.__r.__words[2]))
      {
        v134 = (os_log_t *)sub_32A48(16);
        v135 = *v134;
        if (*v134 && os_log_type_enabled(*v134, OS_LOG_TYPE_DEFAULT))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2368;
          _os_log_impl(&def_1E50E8, v135, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS: Setting Actuator ThermalBudget", (uint8_t *)buf, 0x12u);
        }
        for (iuint64_t i = (std::string *)__p.__r_.__value_.__l.__size_;
              ii != &__p;
              iuint64_t i = (std::string *)ii->__r_.__value_.__l.__size_)
        {
          if (sub_D6F60(ii->__r_.__value_.__r.__words[2]))
          {
            if (ii != &__p)
            {
              uint64_t v163 = ii->__r_.__value_.__r.__words[2];
              data = (std::__shared_weak_count *)ii[1].__r_.__value_.__l.__data_;
              if (data) {
                atomic_fetch_add_explicit(&data->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (sub_20994C() && sub_458294(v163))
              {
                uint64_t v164 = sub_91A00();
                unint64_t v165 = sub_1D0CF4(v164, (CFTypeRef *)a6);
                (*(void (**)(std::string::size_type, unint64_t))(*(void *)ii->__r_.__value_.__r.__words[2]
                                                                                 + 224))(ii->__r_.__value_.__r.__words[2], v165);
                (*(void (**)(std::string::size_type, unint64_t))(*(void *)ii->__r_.__value_.__r.__words[2]
                                                                                 + 216))(ii->__r_.__value_.__r.__words[2], HIDWORD(v165));
              }
              else if (sub_20994C())
              {
                uint64_t v168 = sub_91A00();
                uint64_t v169 = sub_1CFC7C(v168, (CFTypeRef *)a6);
                (*(void (**)(std::string::size_type, uint64_t))(*(void *)ii->__r_.__value_.__r.__words[2]
                                                                        + 224))(ii->__r_.__value_.__r.__words[2], v169);
              }
              else if (sub_2099D4())
              {
                uint64_t v170 = sub_91A00();
                uint64_t v171 = sub_1CFC7C(v170, (CFTypeRef *)a6);
                (*(void (**)(std::string::size_type, uint64_t))(*(void *)ii->__r_.__value_.__r.__words[2]
                                                                        + 216))(ii->__r_.__value_.__r.__words[2], v171);
              }
              if (data) {
                sub_4636C(data);
              }
            }
            goto LABEL_387;
          }
        }
        goto LABEL_387;
      }
      size = (std::string *)size->__r_.__value_.__l.__size_;
    }
    if (!a4 || (sub_91A00(), (int v112 = sub_1CE9C4(*a4)) == 0))
    {
      v113 = (os_log_t *)sub_32A48(16);
      v114 = *v113;
      if (*v113 && os_log_type_enabled(*v113, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2417;
        _os_log_impl(&def_1E50E8, v114, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS: Setting Speaker ThermalBudget", (uint8_t *)buf, 0x12u);
      }
      uint64_t v115 = sub_91A00();
      v116 = *(const void **)a6;
      if (v116)
      {
        CFRetain(v116);
        sub_22084(buf, v116);
      }
      else
      {
        *(void *)AudioObjectPropertyAddress buf = 0;
      }
      sub_1CF16C(v115, (CFDictionaryRef *)buf);
      v141 = (_DWORD *)(v115 + 24);
      if (*(_DWORD *)(v115 + 24)) {
        sub_1CF4B4(v115, (CFDictionaryRef *)buf, a5, (uint64_t **)v115, v141);
      }
      else {
        sub_1CEBE8(v115, (const void **)buf, a5, v115, v141);
      }
      if (*(void *)buf) {
        CFRelease(*(CFTypeRef *)buf);
      }
      v142 = (void *)(sub_91A00() + 408);
      if (sub_1A1BE4(v142, (uint64_t)&qword_64CAC0)) {
        sub_1A1D20(v142, (unsigned int *)&qword_64CAC0);
      }
      int v112 = 0;
    }
    int v143 = sub_474DD8(*(_DWORD *)(a2 + 4));
    uint64_t v144 = a1 + 520;
    uint64_t v145 = 520;
    if (v143)
    {
      uint64_t v145 = 544;
      uint64_t v144 = a1 + 544;
    }
    uint64_t v146 = *(void *)(a1 + v145);
    if (v146 == *(void *)(v144 + 8)) {
      goto LABEL_387;
    }
    uint64_t v147 = *(void *)(*(void *)v146 + 136);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v147 + 88))(v147, 1936748595, 64008, 0))
    {
      CFTypeRef v320 = 0;
      LODWORD(cf) = 0;
      if (v112 || *(_DWORD *)(a1 + 280) == 1650811758)
      {
        v148 = (os_log_t *)sub_32A48(16);
        v149 = *v148;
        if (*v148 && os_log_type_enabled(*v148, OS_LOG_TYPE_DEFAULT))
        {
          buf[0] = 136315650;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2446;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = "Speaker";
          _os_log_impl(&def_1E50E8, v149, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS sent asynchronously for %s", (uint8_t *)buf, 0x1Cu);
        }
LABEL_361:
        uint64_t v154 = sub_91A00();
        sub_1D13C0((uint64_t)buf, v154, 0);
        v155 = *(const void **)buf;
        if (*(void *)buf)
        {
          v156 = sub_99744(*(const __CFDictionary **)buf, (const void *)qword_64CAE8);
          if (v156) {
            sub_9976C((uint64_t)v156);
          }
          CFRelease(v155);
          sub_73A68();
          sub_13910();
          operator new();
        }
        v208 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v208, "Could not construct");
      }
      uint64_t v157 = sub_91A00();
      sub_1D13C0((uint64_t)buf, v157, 0);
      v151 = *(const void **)buf;
      CFTypeRef v320 = *(CFTypeRef *)buf;
      *(void *)AudioObjectPropertyAddress buf = 0;
      uint64_t v158 = buf[2];
      LODWORD(cf) = buf[2];
      if (!v320)
      {
        CFDictionaryRef v318 = 0;
        goto LABEL_361;
      }
      CFRetain(v151);
      CFDictionaryRef v318 = (CFDictionaryRef)v151;
      int v319 = v158;
      CFRelease(v151);
      v317 = v151;
      int v159 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void **, uint64_t, void))(*(void *)v147
                                                                                                  + 112))(v147, 1936748595, 64008, &v317, v158, 0);
      if (v159)
      {
        v307 = (os_log_t *)sub_32A48(13);
        v308 = *v307;
        if (*v307 && os_log_type_enabled(*v307, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(&v320, 0xFA08u);
          v309 = v322 >= 0 ? &v320 : (CFTypeRef *)v320;
          buf[0] = 136315906;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2457;
          HIWORD(buf[4]) = 1024;
          buf[5] = v159;
          LOWORD(buf[6]) = 2080;
          *(void *)((char *)&buf[6] + 2) = v309;
          _os_log_impl(&def_1E50E8, v308, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) setting DSP Property %s\"", (uint8_t *)buf, 0x22u);
          if (v322 < 0) {
            operator delete((void *)v320);
          }
        }
        v310 = __cxa_allocate_exception(0x10uLL);
        *(void *)v310 = &off_6414D8;
        v310[2] = v159;
      }
    }
    else
    {
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v147 + 88))(v147, 1668312369, 64100, 0))goto LABEL_361; {
      CFDictionaryRef v318 = 0;
      }
      int v319 = 0;
      if (v112
        || (uint64_t v150 = sub_91A00(),
            sub_1D13C0((uint64_t)buf, v150, 0),
            v151 = *(const void **)buf,
            CFDictionaryRef v318 = *(CFDictionaryRef *)buf,
            uint64_t v152 = buf[2],
            int v319 = buf[2],
            !*(void *)buf))
      {
        v217 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v217, "Could not construct");
      }
      if (!CFDictionaryGetCount(*(CFDictionaryRef *)buf))
      {
        v267 = (os_log_t *)sub_32A48(13);
        v268 = *v267;
        if (*v267 && os_log_type_enabled(*v267, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2469;
          _os_log_impl(&def_1E50E8, v268, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"CPMS: ThermalBudget is empty\"", (uint8_t *)buf, 0x12u);
        }
        v269 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v269, "CPMS: ThermalBudget is empty");
      }
      v317 = v151;
      int v153 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void **, uint64_t, void))(*(void *)v147
                                                                                                  + 112))(v147, 1668312369, 64100, &v317, v152, 0);
      if (v153)
      {
        v263 = (os_log_t *)sub_32A48(13);
        v264 = *v263;
        if (*v263 && os_log_type_enabled(*v263, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(&v320, 0xFA64u);
          v265 = v322 >= 0 ? &v320 : (CFTypeRef *)v320;
          buf[0] = 136315906;
          *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2473;
          HIWORD(buf[4]) = 1024;
          buf[5] = v153;
          LOWORD(buf[6]) = 2080;
          *(void *)((char *)&buf[6] + 2) = v265;
          _os_log_impl(&def_1E50E8, v264, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) setting DSP Property %s\"", (uint8_t *)buf, 0x22u);
          if (v322 < 0) {
            operator delete((void *)v320);
          }
        }
        v266 = __cxa_allocate_exception(0x10uLL);
        *(void *)v266 = &off_6414D8;
        v266[2] = v153;
      }
    }
    CFRelease(v151);
    goto LABEL_361;
  }
  switch(v13)
  {
    case 1953719148:
      if (*(_DWORD *)(a2 + 4) == 1869968496)
      {
        sub_B680((uint64_t *)&__p, (void *)(a1 + 184), "", 2252);
        v81 = (std::string *)__p.__r_.__value_.__l.__size_;
        if ((std::string *)__p.__r_.__value_.__l.__size_ != &__p)
        {
          while (1)
          {
            std::string::size_type v82 = v81->__r_.__value_.__r.__words[2];
            strcpy((char *)buf, "#sTTptuo");
            BYTE1(buf[2]) = 0;
            HIWORD(buf[2]) = 0;
            if ((*(uint64_t (**)(std::string::size_type, _DWORD *))(*(void *)v82 + 16))(v82, buf)) {
              break;
            }
            v81 = (std::string *)v81->__r_.__value_.__l.__size_;
            if (v81 == &__p) {
              goto LABEL_301;
            }
          }
          if (v81 != &__p)
          {
            std::string::size_type v117 = v81->__r_.__value_.__r.__words[2];
            strcpy((char *)buf, "#sTTptuo");
            BYTE1(buf[2]) = 0;
            HIWORD(buf[2]) = 0;
            (*(void (**)(std::string::size_type, _DWORD *, uint64_t, int *, uint64_t, double *))(*(void *)v117 + 48))(v117, buf, a3, a4, a5, a6);
            goto LABEL_387;
          }
        }
LABEL_301:
        uint64_t v118 = *(void *)(a1 + 544);
        for (juint64_t j = *(void *)(a1 + 552); v118 != jj; v118 += 16)
        {
          if ((*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(*(void *)v118 + 136)
                                                                                + 88))(*(void *)(*(void *)v118 + 136), 1987013737, 64001, 0))
          {
            v120 = *(std::__shared_weak_count **)(*(void *)v118 + 176);
            if (v120)
            {
              uint64_t v121 = *(void *)(*(void *)v118 + 168);
              atomic_fetch_add_explicit(&v120->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              v122 = std::__shared_weak_count::lock(v120);
              if (v122)
              {
                v123 = v122;
                if (v121)
                {
                  int v124 = (*(uint64_t (**)(uint64_t))(*(void *)v121 + 136))(v121);
                  v125 = (os_log_t *)sub_32A48(16);
                  v127 = *v125;
                  if (*v125 && os_log_type_enabled(*v125, OS_LOG_TYPE_INFO))
                  {
                    float v128 = *(float *)a6;
                    int v129 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
                    buf[0] = 136315906;
                    *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2278;
                    HIWORD(buf[4]) = 2048;
                    *(double *)&buf[5] = v128;
                    LOWORD(buf[7]) = 1024;
                    *(_DWORD *)((char *)&buf[7] + 2) = v129;
                    _os_log_impl(&def_1E50E8, v127, OS_LOG_TYPE_INFO, "%25s:%-5d Setting thermal gain %f on aggregate device %u.", (uint8_t *)buf, 0x22u);
                  }
                  v126.n128_u32[0] = *(_DWORD *)a6;
                  if (v124 != 1935895666) {
                    sub_796B4((uint64_t)&unk_64A290, v126.n128_f32[0]);
                  }
                  (*(void (**)(uint64_t, __n128))(*(void *)v121 + 16))(v121, v126);
                }
                sub_4636C(v123);
              }
              std::__shared_weak_count::__release_weak(v120);
            }
          }
        }
        goto LABEL_387;
      }
      break;
    case 1969844082:
      if (*(_DWORD *)(a2 + 4) == 1768845428)
      {
        uint64_t v60 = *(void *)(a1 + 520);
        for (uint64_t kk = *(void *)(a1 + 528); v60 != kk; v60 += 16)
        {
          uint64_t v62 = *(void *)(*(void *)v60 + 136);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 384))(a1, 1685287015, 1818980210, 0))
          {
            (*(void (**)(_DWORD *__return_ptr, uint64_t))(*(void *)v62 + 168))(buf, v62);
            uint64_t v63 = *(void *)buf;
            uint64_t v64 = *(void *)&buf[2];
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
            sub_638B4((void ***)&__p);
            if (v63 == v64)
            {
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v62 + 56))(v62, 1685287015, 1969844082, 0))
              {
                unsigned int v65 = *(_DWORD *)a6;
                LODWORD(v317) = 0;
                if (v65 >= 5)
                {
                  v260 = (os_log_t *)sub_32A48(13);
                  v261 = *v260;
                  if (*v260 && os_log_type_enabled(*v260, OS_LOG_TYPE_ERROR))
                  {
                    buf[0] = 136315394;
                    *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2749;
                    _os_log_impl(&def_1E50E8, v261, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
                  }
                  v262 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v262, "Precondition failure.");
                }
                (*(void (**)(uint64_t, uint64_t, uint64_t, const void **, void))(*(void *)v62 + 64))(v62, 1685287015, 1969844082, &v317, 0);
                BOOL v66 = v65 == *(float *)&v317;
                __int16 v67 = (os_log_t *)sub_32A48(16);
                BOOL v68 = *v67;
                if (v66)
                {
                  if (v68 && os_log_type_enabled(*v67, OS_LOG_TYPE_INFO))
                  {
                    sub_2417C(&__p, 0x75696F72u);
                    int v69 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
                    std::string::size_type v70 = __p.__r_.__value_.__r.__words[0];
                    sub_2417C(&v320, 0x75696F72u);
                    __int16 v71 = &__p;
                    if (v69 < 0) {
                      __int16 v71 = (std::string *)v70;
                    }
                    AudioObjectID v72 = &v320;
                    if (v322 < 0) {
                      AudioObjectID v72 = (void *)v320;
                    }
                    buf[0] = 136316418;
                    *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2766;
                    HIWORD(buf[4]) = 2080;
                    *(void *)&buf[5] = v71;
                    LOWORD(buf[7]) = 1024;
                    *(_DWORD *)((char *)&buf[7] + 2) = v65;
                    HIWORD(buf[8]) = 2080;
                    *(void *)&buf[9] = v72;
                    __int16 v325 = 1024;
                    int v326 = v65;
                    _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_INFO, "%25s:%-5d Got UI orientation param {%s, %u}, skipping redundant orientation update {%s, %u}", (uint8_t *)buf, 0x32u);
                    if (v322 < 0) {
                      operator delete((void *)v320);
                    }
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                  }
                }
                else
                {
                  if (v68 && os_log_type_enabled(*v67, OS_LOG_TYPE_INFO))
                  {
                    sub_2417C(&__p, 0x75696F72u);
                    std::condition_variable v73 = &__p;
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      std::condition_variable v73 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    buf[0] = 136315906;
                    *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                    LOWORD(buf[3]) = 1024;
                    *(_DWORD *)((char *)&buf[3] + 2) = 2756;
                    HIWORD(buf[4]) = 2080;
                    *(void *)&buf[5] = v73;
                    LOWORD(buf[7]) = 1024;
                    *(_DWORD *)((char *)&buf[7] + 2) = v65;
                    _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_INFO, "%25s:%-5d Setting UI orientation param {%s, %u}", (uint8_t *)buf, 0x22u);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                  }
                  int v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v62 + 72))(v62, 1685287015, 1969844082, 0, (float)v65);
                  if (v74)
                  {
                    v286 = (os_log_t *)sub_32A48(13);
                    v287 = *v286;
                    if (*v286 && os_log_type_enabled(*v286, OS_LOG_TYPE_ERROR))
                    {
                      sub_2417C(&__p, 0x75696F72u);
                      v288 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? &__p
                           : (std::string *)__p.__r_.__value_.__r.__words[0];
                      buf[0] = 136315906;
                      *(void *)&buf[1] = "AggregateDevice_CommonBase.cpp";
                      LOWORD(buf[3]) = 1024;
                      *(_DWORD *)((char *)&buf[3] + 2) = 2759;
                      HIWORD(buf[4]) = 1024;
                      buf[5] = v74;
                      LOWORD(buf[6]) = 2080;
                      *(void *)((char *)&buf[6] + 2) = v288;
                      _os_log_impl(&def_1E50E8, v287, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) setting DSP Property %s\"", (uint8_t *)buf, 0x22u);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                    }
                    v289 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v289 = &off_6414D8;
                    v289[2] = v74;
                  }
                  if (byte_64A2D7 >= 0) {
                    v75 = (const UInt8 *)&qword_64A2C0;
                  }
                  else {
                    v75 = (const UInt8 *)qword_64A2C0;
                  }
                  if (byte_64A2D7 >= 0) {
                    CFIndex v76 = byte_64A2D7;
                  }
                  else {
                    CFIndex v76 = unk_64A2C8;
                  }
                  CFTypeRef v320 = CFStringCreateWithBytes(0, v75, v76, 0x8000100u, 0);
                  if (!v320)
                  {
                    v291 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v291, "Could not construct");
                  }
                  buf[0] = v65;
                  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, buf);
                  if (!cf)
                  {
                    v290 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v290, "Could not construct");
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v320;
                  __p.__r_.__value_.__l.__size_ = 1;
                  CFDictionaryRef v77 = sub_4D3D8((uint64_t)&__p);
                  CFDictionaryRef v318 = v77;
                  memset(buf, 0, 24);
                  sub_4CAB0(buf, *(const void **)(a1 + 144), *(void *)(a1 + 152), (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3);
                  v78 = *(void **)buf;
                  sub_F3FF0((uint64_t *)&v318, *(uint64_t **)buf, *(uint64_t **)&buf[2], 1, 0);
                  if (v78) {
                    operator delete(v78);
                  }
                  if (v77) {
                    CFRelease(v77);
                  }
                  if (cf) {
                    CFRelease(cf);
                  }
                  if (v320) {
                    CFRelease(v320);
                  }
                }
              }
            }
          }
        }
      }
      break;
    case 1986361444:
      char v49 = *(void (**)(uint64_t, uint64_t, uint64_t, void, __n128))(*(void *)a1 + 368);
      v12.n128_f32[0] = (float)*(unsigned int *)a6;
      uint64_t v50 = a1;
      uint64_t v51 = 1818521197;
      uint64_t v52 = 40;
LABEL_140:
      v49(v50, v51, v52, 0, v12);
      return;
    default:
      goto LABEL_254;
  }
}

void sub_97068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, CFTypeRef cf, CFTypeRef a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (v27) {
    sub_4636C(v27);
  }
  sub_B8E4((uint64_t *)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_973BC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*a2 != 1936876644 && *a2 != 1936879204)
  {
    char v24 = (os_log_t *)sub_32A48(13);
    float v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        char v32 = "AggregateDevice_CommonBase.cpp";
        __int16 v33 = 1024;
        int v34 = 2893;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1) > a5)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)a2;
      int v28 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v27);
      int v19 = v30;
      uint64_t v20 = (void **)__p[0];
      int v21 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4);
      int v22 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      char v32 = "AggregateDevice_CommonBase.cpp";
      if (v19 < 0) {
        int v22 = v20;
      }
      __int16 v33 = 1024;
      int v34 = 2895;
      __int16 v35 = 2080;
      int v36 = v22;
      __int16 v37 = 1024;
      int v38 = a5;
      __int16 v39 = 1024;
      int v40 = v21;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
    }
    int v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v23 = &off_6414D8;
    v23[2] = 561211770;
  }
  if (a2[1] == 1768845428) {
    uint64_t v13 = a1 + 472;
  }
  else {
    uint64_t v13 = a1 + 496;
  }
  if (*(void *)(v13 + 16) != 1)
  {
    std::string::size_type v14 = (os_log_t *)sub_32A48(13);
    int v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        char v32 = "AggregateDevice_CommonBase.cpp";
        __int16 v33 = 1024;
        int v34 = 2897;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty should have blocked this code path because the appropriate device list's size is not 1.\"", buf, 0x12u);
      }
    }
  }
  return (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(*(void *)(v13 + 8) + 16)
                                                                                         + 48))(*(void *)(*(void *)(v13 + 8) + 16), a2, a3, a4, a5, a6);
}

void sub_97750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_97784(AudioObjectID *a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, unsigned int *a6)
{
  if (a2->mSelector != 1718839674 && a2->mSelector != 1902539642)
  {
    v46 = (os_log_t *)sub_32A48(13);
    BOOL v47 = *v46;
    if (*v46)
    {
      if (os_log_type_enabled(*v46, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v60 = 1024;
        int v61 = 3111;
        _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unsigned int v13 = *a6;
  if (sub_2213AC((uint64_t)a1))
  {
    strcpy(buf, "rrapbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v14 = sub_99A40((uint64_t)a1);
    *((void *)&v16 + 1) = v15;
    *(void *)&long long v16 = v14;
    BOOL v17 = ((v16 >> 32) & 0xFF00000000) == 0 || HIDWORD(v14) == 0;
    if (v17 || (_os_feature_enabled_impl() & 1) == 0) {
      v13 *= 16;
    }
  }
  strcpy(buf, "rsfbptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v18 = sub_99A40((uint64_t)a1);
  *((void *)&v21 + 1) = v19;
  *(void *)&long long v21 = v18;
  uint64_t v20 = v21 >> 32;
  uint64_t v22 = (*(uint64_t (**)(AudioObjectID *, uint64_t))(*(void *)a1 + 528))(a1, 1735159650);
  if ((v22 & 0xFF00000000) != 0) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = v13;
  }
  unsigned int inData = v23;
  if (v20) {
    BOOL v24 = (v20 & 0xFF00000000) == 0;
  }
  else {
    BOOL v24 = 1;
  }
  if (!v24 && (v23 & 0x1F) != 0)
  {
    unsigned int v25 = v23 & 0xFFFFFFE0;
    unsigned int v23 = (v23 & 0xFFFFFFE0) + 32;
    unsigned int inData = v25 + 32;
    uint64_t v26 = (os_log_t *)sub_32A48(16);
    uint64_t v27 = *v26;
    if (*v26)
    {
      if (os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = (*(uint64_t (**)(AudioObjectID *))(*(void *)a1 + 120))(a1);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v60 = 1024;
        int v61 = 3129;
        __int16 v62 = 1024;
        *(_DWORD *)uint64_t v63 = v23;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = v28;
        _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Buffer size is restricted, rounding up to nearest multiple of 32: %u for aggregate device %u.", buf, 0x1Eu);
      }
    }
  }
  uint64_t v29 = (os_log_t *)sub_32A48(16);
  char v30 = *v29;
  if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v31 = *a6;
    int v32 = (*(uint64_t (**)(AudioObjectID *))(*(void *)a1 + 120))(a1);
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
    __int16 v60 = 1024;
    int v61 = 3132;
    __int16 v62 = 1024;
    *(_DWORD *)uint64_t v63 = v31;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v23;
    LOWORD(v64) = 1024;
    *(_DWORD *)((char *)&v64 + 2) = v32;
    _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Requested to set %u, setting buffer frame size of %u on aggregate device %u.", buf, 0x24u);
  }
  uint64_t result = AudioObjectSetPropertyData(a1[32], a2, a3, a4, a5, &inData);
  unsigned int v34 = result;
  if (result)
  {
    unsigned int mSelector = a2->mSelector;
    BOOL v36 = a2->mSelector == 1902539642;
    __int16 v37 = (os_log_t *)sub_32A48(16);
    os_log_t v38 = *v37;
    if (v36)
    {
      if (!v38 || !os_log_type_enabled(*v37, OS_LOG_TYPE_INFO)) {
        goto LABEL_53;
      }
      sub_2417C(v57, 0x7166737Au);
      int v39 = v58;
      int v40 = (void **)v57[0];
      sub_2417C(__p, v34);
      __int16 v41 = v57;
      if (v39 < 0) {
        __int16 v41 = v40;
      }
      if (v56 >= 0) {
        uint64_t v42 = __p;
      }
      else {
        uint64_t v42 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
      __int16 v60 = 1024;
      int v61 = 534;
      __int16 v62 = 2080;
      *(void *)uint64_t v63 = v41;
      *(_WORD *)&v63[8] = 2080;
      uint64_t v64 = v42;
      float v43 = "%25s:%-5d This is not necessarily a problem, but the HAL returned an error here: AudioObjectSetPropertyData("
            ") for selector '%s' returned status '%s'.";
      uint64_t v44 = v38;
      os_log_type_t v45 = OS_LOG_TYPE_INFO;
    }
    else
    {
      if (!v38 || !os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR)) {
        goto LABEL_53;
      }
      sub_2417C(v57, mSelector);
      int v49 = v58;
      uint64_t v50 = (void **)v57[0];
      sub_2417C(__p, v34);
      uint64_t v51 = v57;
      if (v49 < 0) {
        uint64_t v51 = v50;
      }
      if (v56 >= 0) {
        uint64_t v52 = __p;
      }
      else {
        uint64_t v52 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice.cpp";
      __int16 v60 = 1024;
      int v61 = 538;
      __int16 v62 = 2080;
      *(void *)uint64_t v63 = v51;
      *(_WORD *)&v63[8] = 2080;
      uint64_t v64 = v52;
      float v43 = "%25s:%-5d AudioObjectSetPropertyData() for selector '%s' returned status '%s'.";
      uint64_t v44 = v38;
      os_log_type_t v45 = OS_LOG_TYPE_ERROR;
    }
    _os_log_impl(&def_1E50E8, v44, v45, v43, buf, 0x26u);
    if (v56 < 0) {
      operator delete(__p[0]);
    }
    if (v58 < 0) {
      operator delete(v57[0]);
    }
LABEL_53:
    v53 = __cxa_allocate_exception(0x10uLL);
    *(void *)v53 = &off_6414D8;
    v53[2] = v34;
  }
  return result;
}

void sub_97D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_97D7C(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(void **)a1;
    uint64_t v8 = ((uint64_t)v5 - *(void *)a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_60548();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    BOOL v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v9;
    }
    if (v12)
    {
      unint64_t v12 = (unint64_t)sub_106EC(v12);
      uint64_t v7 = *(void **)a1;
      uint64_t v5 = *(void **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (void *)(v12 + 8 * v8);
    unint64_t v15 = v12 + 8 * v13;
    void *v14 = *a2;
    char v6 = v14 + 1;
    while (v5 != v7)
    {
      uint64_t v16 = *--v5;
      *--uint64_t v14 = v16;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    char v6 = v5 + 1;
  }
  *(void *)(a1 + 8) = v6;
}

uint64_t sub_97E58(uint64_t a1, int a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 392))(a1);
  if ((result & 1) == 0)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    char v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "PhysicalDevice.h";
      __int16 v10 = 1024;
      int v11 = 393;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*(_DWORD *)(a1 + 256) == a2)
  {
    *(_DWORD *)(a1 + 260) = a2;
    *(unsigned char *)(a1 + 264) = 1;
  }
  return result;
}

void sub_97FA0(_Unwind_Exception *exception_object)
{
}

void sub_97FBC()
{
}

uint64_t sub_98064(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 392))(a1) & 1) == 0)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    char v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "PhysicalDevice.h";
      __int16 v10 = 1024;
      int v11 = 403;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a2 == -1 || (uint64_t result = sub_981DC(a1, a2), result))
  {
    if (*(unsigned char *)(a1 + 264)) {
      *(unsigned char *)(a1 + 264) = 0;
    }
    uint64_t result = sub_2106EC();
    *(_DWORD *)(a1 + 256) = result;
  }
  return result;
}

void sub_981C0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_981DC(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 392))(a1) & 1) == 0)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(13);
    char v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "PhysicalDevice.h";
      __int16 v10 = 1024;
      int v11 = 386;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t result = sub_8BFA8((unsigned __int8 *)a1);
  if (result) {
    return *(_DWORD *)(a1 + 260) == a2;
  }
  return result;
}

void sub_98324(_Unwind_Exception *exception_object)
{
}

void sub_98340(uint64_t a1, int a2, float a3)
{
  float v63 = a3;
  sub_8BD08(&v61, a1);
  unint64_t v4 = v61;
  if (v61)
  {
    uint64_t v5 = sub_98AB0(v61);
    (*(void (**)(uint64_t *__return_ptr, os_unfair_lock_s *, void, uint64_t))(*(void *)&v4->_os_unfair_lock_opaque
                                                                                       + 256))(&v71, v4, 0, v5);
    if (v72.i64[0])
    {
      char v6 = std::__shared_weak_count::lock((std::__shared_weak_count *)v72.i64[0]);
      if (v6) {
        uint64_t v7 = v71;
      }
      else {
        uint64_t v7 = 0;
      }
      if (v72.i64[0]) {
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v72.i64[0]);
      }
      if (v7)
      {
        char v56 = v6;
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 144))(&v57, v7);
        v66[0] = 0;
        long long v8 = 0uLL;
        long long v65 = 0u;
        unint64_t v9 = v57;
        __int16 v10 = v58;
        if (v57 != v58)
        {
          while (1)
          {
            *(void *)&long long v64 = 0;
            int v11 = (std::__shared_weak_count *)v9[1];
            if (v11) {
              break;
            }
LABEL_65:
            v9 += 2;
            if (v9 == v10)
            {
              long long v8 = v65;
              uint64_t v52 = v66[0];
              goto LABEL_68;
            }
          }
          unint64_t v12 = std::__shared_weak_count::lock(v11);
          *((void *)&v64 + 1) = v12;
          if (v12)
          {
            *(void *)&long long v64 = *v9;
            if (!(void)v64)
            {
LABEL_63:
              if (v12) {
                sub_4636C(v12);
              }
              goto LABEL_65;
            }
          }
          else if (!(void)v64)
          {
            goto LABEL_63;
          }
          long long v13 = v65;
          uint64_t v14 = *((void *)&v65 + 1) - v65;
          uint64_t v15 = (uint64_t)(*((void *)&v65 + 1) - v65) >> 4;
          uint64_t v16 = (void *)(v65 + ((*((void *)&v65 + 1) - v65) & 0xFFFFFFFFFFFFFFF0));
          if (*((void *)&v65 + 1) >= v66[0])
          {
            uint64_t v19 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 60) {
              sub_60548();
            }
            unint64_t v20 = (uint64_t)(v66[0] - v65) >> 3;
            if (v20 <= v19) {
              unint64_t v20 = v15 + 1;
            }
            if (v66[0] - (void)v65 >= 0x7FFFFFFFFFFFFFF0uLL) {
              unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v20;
            }
            std::string::size_type v70 = v66;
            if (v21) {
              unint64_t v21 = (unint64_t)sub_10724(v21);
            }
            else {
              uint64_t v22 = 0;
            }
            __int16 v33 = (void *)(v21 + 16 * v15);
            __int16 v67 = (void **)v21;
            *(void *)&long long v68 = v33;
            *((void *)&v68 + 1) = v33;
            int v69 = (char *)(v21 + 16 * v22);
            if (v15 == v22)
            {
              if (v14 < 1)
              {
                if ((void)v13 == *((void *)&v13 + 1)) {
                  unint64_t v35 = 1;
                }
                else {
                  unint64_t v35 = v14 >> 3;
                }
                int v74 = v66;
                BOOL v36 = (void **)sub_10724(v35);
                uint64_t v38 = v68;
                uint64_t v39 = *((void *)&v68 + 1) - v68;
                if (*((void *)&v68 + 1) == (void)v68)
                {
                  int64x2_t v44 = vdupq_n_s64(v68);
                  unint64_t v41 = (unint64_t)&v36[2 * (v35 >> 2)];
                }
                else
                {
                  uint64_t v40 = v39 >> 4;
                  unint64_t v41 = (unint64_t)&v36[2 * (v35 >> 2)] + (v39 & 0xFFFFFFFFFFFFFFF0);
                  uint64_t v42 = 16 * v40;
                  float v43 = (char *)&v36[2 * (v35 >> 2)];
                  do
                  {
                    *(_OWORD *)float v43 = *(_OWORD *)v38;
                    v43 += 16;
                    *(void *)uint64_t v38 = 0;
                    *(void *)(v38 + 8) = 0;
                    v38 += 16;
                    v42 -= 16;
                  }
                  while (v42);
                  int64x2_t v44 = (int64x2_t)v68;
                }
                os_log_type_t v45 = v67;
                v46 = v69;
                __int16 v67 = v36;
                *(void *)&long long v68 = &v36[2 * (v35 >> 2)];
                int64x2_t v72 = v44;
                *((void *)&v68 + 1) = v41;
                int v69 = (char *)&v36[2 * v37];
                uint64_t v71 = (uint64_t)v45;
                std::condition_variable v73 = v46;
                sub_98E24((uint64_t)&v71);
                __int16 v33 = (void *)*((void *)&v68 + 1);
              }
              else
              {
                if (v19 >= 0) {
                  unint64_t v34 = v15 + 1;
                }
                else {
                  unint64_t v34 = v15 + 2;
                }
                v33 -= 2 * (v34 >> 1);
                *(void *)&long long v68 = v33;
                *((void *)&v68 + 1) = v33;
              }
            }
            uint64_t v47 = *((void *)&v64 + 1);
            void *v33 = v64;
            v33[1] = v47;
            if (v47)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
              __int16 v33 = (void *)*((void *)&v68 + 1);
            }
            *((void *)&v68 + 1) = v33 + 2;
            *(void *)&long long v68 = sub_98E84((uint64_t)v66, (uint64_t)v16, v16, v65, (void *)v65, v68, v68);
            int v48 = (void *)*((void *)&v65 + 1);
            int v49 = (_OWORD *)*((void *)&v68 + 1);
            if (v16 != *((void **)&v65 + 1))
            {
              do
              {
                *v49++ = *(_OWORD *)v16;
                void *v16 = 0;
                v16[1] = 0;
                v16 += 2;
              }
              while (v16 != v48);
              uint64_t v16 = (void *)*((void *)&v65 + 1);
            }
            uint64_t v50 = (void **)v65;
            uint64_t v51 = (char *)v66[0];
            *(void *)&long long v65 = v68;
            *((void *)&v65 + 1) = v49;
            v66[0] = v69;
            *((void *)&v68 + 1) = v16;
            int v69 = v51;
            __int16 v67 = v50;
            *(void *)&long long v68 = v50;
            sub_98E24((uint64_t)&v67);
          }
          else if (v16 == *((void **)&v65 + 1))
          {
            uint64_t v32 = *((void *)&v64 + 1);
            **((_OWORD **)&v65 + 1) = v64;
            if (v32) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
            }
            *((void *)&v65 + 1) = *((void *)&v13 + 1) + 16;
          }
          else
          {
            unint64_t v17 = *((void *)&v65 + 1) - 16;
            uint64_t v18 = (_OWORD *)*((void *)&v65 + 1);
            while (v17 < *((void *)&v13 + 1))
            {
              *v18++ = *(_OWORD *)v17;
              *(void *)unint64_t v17 = 0;
              *(void *)(v17 + 8) = 0;
              v17 += 16;
            }
            *((void *)&v65 + 1) = v18;
            if (*((void **)&v13 + 1) != v16 + 2)
            {
              unsigned int v23 = (std::__shared_weak_count **)(*((void *)&v13 + 1) - 8);
              uint64_t v24 = 16 * ((uint64_t)(*((void *)&v13 + 1) - (void)(v16 + 2)) >> 4);
              uint64_t v25 = v13 + 16 * v15 - 16;
              do
              {
                uint64_t v26 = (void *)(v25 + v24);
                long long v27 = *(_OWORD *)(v25 + v24);
                *uint64_t v26 = 0;
                v26[1] = 0;
                int v28 = *v23;
                *(_OWORD *)(v23 - 1) = v27;
                if (v28) {
                  sub_4636C(v28);
                }
                v23 -= 2;
                v24 -= 16;
              }
              while (v24);
            }
            long long v29 = v64;
            if (*((void *)&v64 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v64 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            void *v16 = v29;
            uint64_t v30 = v13 + 16 * v15;
            unsigned int v31 = *(std::__shared_weak_count **)(v30 + 8);
            *(void *)(v30 + 8) = *((void *)&v29 + 1);
            if (v31) {
              sub_4636C(v31);
            }
          }
          unint64_t v12 = (std::__shared_weak_count *)*((void *)&v64 + 1);
          goto LABEL_63;
        }
        uint64_t v52 = 0;
LABEL_68:
        long long v55 = v8;
        long long v59 = v8;
        uint64_t v60 = v52;
        v66[0] = 0;
        long long v65 = 0uLL;
        uint64_t v71 = (uint64_t)&v65;
        sub_74004((void ***)&v71);
        uint64_t v71 = (uint64_t)&v57;
        sub_98D9C((void ***)&v71);
        v53 = (uint64_t *)v55;
        char v6 = v56;
        if ((void)v55 != *((void *)&v55 + 1))
        {
          while ((*(unsigned int (**)(void))(*(void *)*v53 + 152))() != a2)
          {
            v53 += 2;
            if (v53 == *((uint64_t **)&v55 + 1))
            {
              v53 = (uint64_t *)*((void *)&v55 + 1);
              break;
            }
          }
          if (v53 != *((uint64_t **)&v59 + 1))
          {
            uint64_t v54 = *v53;
            uint64_t v71 = 0x676C6F62766F6C6DLL;
            v72.i32[0] = 0;
            (*(void (**)(uint64_t, uint64_t *, void, void, uint64_t, float *))(*(void *)v54 + 48))(v54, &v71, 0, 0, 4, &v63);
          }
        }
        uint64_t v71 = (uint64_t)&v59;
        sub_74004((void ***)&v71);
      }
      if (v6) {
        sub_4636C(v6);
      }
    }
  }
  if (v62) {
    sub_4636C(v62);
  }
}

void sub_9885C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  *(void *)(v19 - 136) = &a15;
  sub_74004((void ***)(v19 - 136));
  if (a11) {
    sub_4636C(a11);
  }
  if (a19) {
    sub_4636C(a19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_988F0(AudioObjectID a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 a5, const void *a6)
{
  uint64_t result = AudioObjectSetPropertyData(a1, a2, a3, a4, a5, a6);
  if (result)
  {
    p_unsigned int mSelector = &a2->mSelector;
    unsigned int v16 = result;
    long long v8 = (os_log_t *)sub_32A48(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v19, *p_mSelector);
      int v10 = v20;
      int v11 = (void **)v19[0];
      sub_2417C(__p, v16);
      unint64_t v12 = v19;
      if (v10 < 0) {
        unint64_t v12 = v11;
      }
      if (v18 >= 0) {
        long long v13 = __p;
      }
      else {
        long long v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v22 = "AggregateDevice_CommonBase.cpp";
      __int16 v23 = 1024;
      int v24 = 3420;
      __int16 v25 = 2080;
      uint64_t v26 = v12;
      __int16 v27 = 2080;
      int v28 = v13;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"AudioObjectSetPropertyData() for selector '%s' returned status '%s'.\"", buf, 0x26u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v16;
  }
  return result;
}

void sub_98A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_98AB0(os_unfair_lock_s *a1)
{
  unint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  strcpy(v20, "cwdv");
  v20[8] = 0;
  int v21 = 3;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v22 = v23;
  CFTypeRef cf = 0;
  int v24 = 44731016;
  uint64_t v2 = sub_10FBF0();
  *(void *)AudioObjectPropertyAddress buf = off_61F9B8;
  *(void *)&v30[4] = buf;
  sub_10EA24((uint64_t *)__p, v2, &v17, (uint64_t)buf);
  sub_8E4B8(&v15, __p);
  sub_8108((uint64_t *)__p);
  sub_6AFD4(buf);
  UInt32 v3 = v16;
  if (v16 == &v15) {
    goto LABEL_7;
  }
  while (1)
  {
    uint64_t v5 = v3[2];
    unint64_t v4 = (std::__shared_weak_count *)v3[3];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      char v6 = *(os_unfair_lock_s **)(v5 + 192);
      sub_4636C(v4);
      if (v6 == a1) {
        break;
      }
      goto LABEL_6;
    }
    if (*(os_unfair_lock_s **)(v5 + 192) == a1) {
      break;
    }
LABEL_6:
    UInt32 v3 = (uint64_t *)v3[1];
    if (v3 == &v15) {
      goto LABEL_7;
    }
  }
  if (v3 == &v15)
  {
LABEL_7:
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    long long v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      sub_4F64((uint64_t)__p, a1 + 2);
      unint64_t v9 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v27 = 1024;
      int v28 = 3497;
      __int16 v29 = 2080;
      *(void *)uint64_t v30 = v9;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"No input port type found for connected accessory physical device %s.\"", buf, 0x1Cu);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No input port type found for connected accessory physical device %s.");
  }
  uint64_t v11 = *(unsigned int *)(v3[2] + 144);
  sub_B8E4(&v15);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v23[0]);
  if (v17)
  {
    char v18 = v17;
    operator delete(v17);
  }
  return v11;
}

void sub_98D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_98D9C(void ***a1)
{
  char v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_weak(v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_98E24(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      sub_4636C(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_98E84(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  while (a3 != a5)
  {
    long long v8 = *((_OWORD *)a3 - 1);
    a3 -= 2;
    *(_OWORD *)(result - 16) = v8;
    result -= 16;
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t sub_98EA4()
{
  return 1;
}

void sub_98EB4(uint64_t a1, void *a2)
{
  *a2 = off_61F9B8;
}

void *sub_98ED4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_61F9B8;
  return result;
}

void sub_98F0C()
{
}

void *sub_98F24@<X0>(void *a1@<X8>)
{
  return sub_21C8C(a1, "Connected accessory device update");
}

void sub_98F34(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_298DA4();
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v2 + 312))(buf);
  uint64_t v3 = *(void *)buf;
  if (*(void *)buf)
  {
    sub_3B7EC();
    int v28 = &qword_64CC40;
    char v29 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    uint64_t v4 = sub_32A48(8);
    uint64_t v5 = sub_32A48(34);
    char v6 = 0;
    uint64_t v7 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v8 = *(void *)(v4 + 8);
    while (1)
    {
      uint64_t v9 = *(int *)&buf[4 * v7];
      char v10 = v6;
      if (((v8 & v9) != 0) != ((*(void *)(v5 + 8) & v9) != 0)) {
        break;
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v10) {
        goto LABEL_12;
      }
    }
    if ((v8 & v9) == 0) {
      uint64_t v4 = v5;
    }
LABEL_12:
    char v18 = *(NSObject **)v4;
    if (v18 && os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingManager.cpp";
      __int16 v31 = 1024;
      int v32 = 2176;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_INFO, "%25s:%-5d Connected accessory device update.", buf, 0x12u);
    }
    sub_14C070(a1, v3, 1667327075);
    sub_10C78C(&v28);
    if (*(_DWORD *)(a1 + 8))
    {
      uint64_t v19 = sub_32A48(16);
      uint64_t v20 = sub_32A48(15);
      char v21 = 0;
      uint64_t v22 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v23 = *(void *)(v19 + 8);
      while (1)
      {
        uint64_t v24 = *(int *)&buf[4 * v22];
        char v25 = v21;
        if (((v23 & v24) != 0) != ((*(void *)(v20 + 8) & v24) != 0)) {
          break;
        }
        char v21 = 1;
        uint64_t v22 = 1;
        if (v25) {
          goto LABEL_22;
        }
      }
      if ((v23 & v24) == 0) {
        uint64_t v19 = v20;
      }
LABEL_22:
      uint64_t v26 = *(NSObject **)v19;
      if (*(void *)v19)
      {
        if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
          __int16 v31 = 1024;
          int v32 = 3601;
          _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing manager ConnectedAccessoryUpdateCommand() failed.", buf, 0x12u);
        }
      }
    }
  }
  else
  {
    uint64_t v11 = sub_32A48(16);
    uint64_t v12 = sub_32A48(15);
    char v13 = 0;
    uint64_t v14 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v15 = *(void *)(v11 + 8);
    while (1)
    {
      uint64_t v16 = *(int *)&buf[4 * v14];
      char v17 = v13;
      if (((v15 & v16) != 0) != ((*(void *)(v12 + 8) & v16) != 0)) {
        break;
      }
      char v13 = 1;
      uint64_t v14 = 1;
      if (v17) {
        goto LABEL_27;
      }
    }
    if ((v15 & v16) == 0) {
      uint64_t v11 = v12;
    }
LABEL_27:
    __int16 v27 = *(NSObject **)v11;
    if (v27 && os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v31 = 1024;
      int v32 = 3607;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing manager does not exist -- cannot execute command", buf, 0x12u);
    }
    *(void *)a1 = off_6228D0;
    *(void *)(a1 + 8) = 1;
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 0;
  }
}

void sub_992D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_99304()
{
}

const void **sub_9931C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFNumberRef sub_99350(const __CFDictionary *a1, const void *a2)
{
  if (!a1 || !a2 || (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_68BF0(exception);
  }

  return sub_993D4(Value);
}

void sub_993BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFNumberRef sub_993D4(const __CFNumber *a1)
{
  CFNumberRef result = sub_99440(a1);
  if (!((unint64_t)result >> 32))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(exception);
  }
  return result;
}

void sub_9942C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFNumberRef sub_99440(const __CFNumber *result)
{
  if (result)
  {
    CFNumberRef v1 = result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_15;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_22;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberSInt64Type:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_29;
        case kCFNumberFloat64Type:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_35;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_15:
          uint64_t v11 = Value != 0;
          if (Value) {
            unsigned __int8 v12 = LOBYTE(valuePtr);
          }
          else {
            unsigned __int8 v12 = 0;
          }
          int v13 = -256;
          if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0) {
            int v13 = 0;
          }
          uint64_t v8 = v11 << 32;
          LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
          int v7 = v5 & 0xFFFFFF00;
          break;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int v9 = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_22:
          if (v9) {
            uint64_t v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
          }
          else {
            uint64_t v5 = 0;
          }
          goto LABEL_38;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
          goto LABEL_33;
        case kCFNumberLongType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_33;
        case kCFNumberLongLongType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int v10 = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_29:
          uint64_t v14 = (int)*(float *)&valuePtr;
          goto LABEL_36;
        case kCFNumberDoubleType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_35;
        case kCFNumberCFIndexType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_33;
        case kCFNumberNSIntegerType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_33:
          uint64_t v14 = LODWORD(valuePtr);
          goto LABEL_36;
        case kCFNumberCGFloatType:
          double valuePtr = 0.0;
          int v10 = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_35:
          uint64_t v14 = (int)valuePtr;
LABEL_36:
          uint64_t v5 = v14 | 0x100000000;
          if (!v10) {
            uint64_t v5 = 0;
          }
LABEL_38:
          int v7 = v5 & 0xFFFFFF00;
          uint64_t v8 = v5 & 0x100000000;
          break;
        default:
          int v7 = 0;
          uint64_t v8 = 0;
          LOBYTE(v5) = 0;
          break;
      }
      uint64_t v6 = v8 | v7 & 0xFFFFFF00;
      uint64_t v5 = v5;
    }
    else
    {
      CFTypeID v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1))
      {
        uint64_t v5 = CFBooleanGetValue(v1);
        uint64_t v6 = 0x100000000;
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v6 = 0;
      }
    }
    return (const __CFNumber *)(v6 | v5);
  }
  return result;
}

const void *sub_99744(const __CFDictionary *a1, const void *a2)
{
  if (a2) {
    return CFDictionaryGetValue(a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_9976C(uint64_t result)
{
  if (result)
  {
    CFNumberRef v1 = (const __CFNumber *)result;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      switch(CFNumberGetType(v1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_15;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_17;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_20;
        case kCFNumberSInt64Type:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_28;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_24;
        case kCFNumberFloat64Type:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_30;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberCharType, &valuePtr);
LABEL_15:
          int v8 = SLOBYTE(valuePtr);
          goto LABEL_18;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberShortType, &valuePtr);
LABEL_17:
          int v8 = SLOWORD(valuePtr);
LABEL_18:
          float v9 = (float)v8;
          goto LABEL_31;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberIntType, &valuePtr);
LABEL_20:
          float v9 = (float)SLODWORD(valuePtr);
          goto LABEL_31;
        case kCFNumberLongType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberLongType, &valuePtr);
          goto LABEL_28;
        case kCFNumberLongLongType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_28;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(v1, kCFNumberFloatType, &valuePtr);
LABEL_24:
          uint64_t v10 = LODWORD(valuePtr);
          goto LABEL_32;
        case kCFNumberDoubleType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_30;
        case kCFNumberCFIndexType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_28;
        case kCFNumberNSIntegerType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberNSIntegerType, &valuePtr);
LABEL_28:
          float v9 = (float)*(uint64_t *)&valuePtr;
          goto LABEL_31;
        case kCFNumberCGFloatType:
          double valuePtr = 0.0;
          int Value = CFNumberGetValue(v1, kCFNumberCGFloatType, &valuePtr);
LABEL_30:
          float v9 = valuePtr;
LABEL_31:
          uint64_t v10 = LODWORD(v9);
LABEL_32:
          uint64_t v7 = v10 | 0x100000000;
          if (!Value) {
            uint64_t v7 = 0;
          }
          int v5 = v7 & 0xFFFFFF00;
          uint64_t v6 = v7 & 0x100000000;
          break;
        default:
          int v5 = 0;
          uint64_t v6 = 0;
          LOBYTE(v7) = 0;
          break;
      }
      return v6 | v5 & 0xFFFFFF00 | v7;
    }
    else
    {
      CFTypeID v4 = CFBooleanGetTypeID();
      if (v4 == CFGetTypeID(v1)) {
        return COERCE_UNSIGNED_INT((float)CFBooleanGetValue(v1)) | 0x100000000;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_99A40(uint64_t a1)
{
  if (sub_FE748(a1))
  {
    unsigned int v2 = 2003329396;
    if (sub_FE7BC(a1)) {
      return sub_FE830(a1);
    }
  }
  else
  {
    return 2003332927;
  }
  return v2;
}

void sub_99B14(AudioObjectID *a1, const AudioObjectPropertyAddress *a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  if (a2->mSelector != 1819569763)
  {
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v40 = "AggregateDevice_CommonBase.cpp";
      __int16 v41 = 1024;
      int v42 = 2824;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v12 = *a5;
  if (v12 != (*(unsigned int (**)(AudioObjectID *))(*(void *)a1 + 32))(a1))
  {
    uint64_t v26 = (os_log_t *)sub_32A48(13);
    __int16 v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t outData = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&outData);
      int v28 = v38;
      char v29 = (void **)__p[0];
      int v30 = *a5;
      int v31 = (*(uint64_t (**)(AudioObjectID *, const AudioObjectPropertyAddress *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4);
      int v32 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v40 = "AggregateDevice_CommonBase.cpp";
      if (v28 < 0) {
        int v32 = v29;
      }
      __int16 v41 = 1024;
      int v42 = 2825;
      __int16 v43 = 2080;
      int64x2_t v44 = v32;
      __int16 v45 = 1024;
      int v46 = v30;
      __int16 v47 = 1024;
      int v48 = v31;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v33 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v33 = &off_6414D8;
    v33[2] = 561211770;
  }
  UInt32 ioDataSize = 4;
  LODWORD(outData) = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData(a1[32], a2, 0, 0, &ioDataSize, &outData);
  if (PropertyData)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(16);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_INFO))
    {
      sub_2417C(__p, PropertyData);
      uint64_t v16 = v38 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v40 = "AggregateDevice_CommonBase.cpp";
      __int16 v41 = 1024;
      int v42 = 2835;
      __int16 v43 = 2080;
      int64x2_t v44 = v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_INFO, "%25s:%-5d Error '%s' reading device latency from the HAL. Treating as 0.", buf, 0x1Cu);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }
    LODWORD(outData) = 0;
  }
  uint64_t v17 = sub_474DD8(a2->mScope);
  int v18 = (*(uint64_t (**)(AudioObjectID *, uint64_t))(*(void *)a1 + 568))(a1, v17);
  uint64_t v19 = sub_32A48(16);
  if (*(unsigned char *)(v19 + 8))
  {
    uint64_t v20 = *(NSObject **)v19;
    if (*(void *)v19)
    {
      if (os_log_type_enabled(*(os_log_t *)v19, OS_LOG_TYPE_DEBUG))
      {
        BOOL v21 = a2->mScope == 1768845428;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
        uint64_t v40 = "AggregateDevice_CommonBase.cpp";
        if (v21) {
          uint64_t v22 = "input";
        }
        else {
          uint64_t v22 = "output";
        }
        __int16 v41 = 1024;
        int v42 = 2843;
        __int16 v43 = 2080;
        int64x2_t v44 = (void *)v22;
        __int16 v45 = 1024;
        int v46 = outData;
        __int16 v47 = 1024;
        int v48 = v18;
        __int16 v49 = 1024;
        int v50 = outData + v18;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d Request for aggregate device %s latency. HAL device latency = %u frames, DSP latency = %u frames, total = %u frames", buf, 0x2Eu);
      }
    }
  }
  *a6 = outData + v18;
}

void sub_99FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_99FEC(void *a1, _DWORD *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  if (*a2 != 1634169456)
  {
    int v18 = (os_log_t *)sub_32A48(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)unint64_t v34 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 3073;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unsigned int v12 = *a5;
  if (v12 < (*(unsigned int (**)(void *))(*a1 + 32))(a1))
  {
    BOOL v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = *(void *)a2;
      int v30 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v29);
      int v23 = v32;
      uint64_t v24 = (void **)__p[0];
      unsigned int v25 = *a5;
      int v26 = (*(uint64_t (**)(void *, _DWORD *, uint64_t, uint64_t))(*a1 + 32))(a1, a2, a3, a4);
      __int16 v27 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)unint64_t v34 = "AggregateDevice_CommonBase.cpp";
      if (v23 < 0) {
        __int16 v27 = v24;
      }
      *(_WORD *)&v34[8] = 1024;
      *(_DWORD *)&v34[10] = 3074;
      __int16 v35 = 2080;
      BOOL v36 = v27;
      __int16 v37 = 1024;
      unsigned int v38 = v25;
      __int16 v39 = 1024;
      int v40 = v26;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
    }
    int v28 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v28 = &off_6414D8;
    v28[2] = 561211770;
  }
  sub_B680((uint64_t *)buf, a1 + 23, "", 3077);
  uint64_t v13 = *(void *)&v34[4];
  if (*(uint8_t **)&v34[4] == buf)
  {
    int v17 = 0;
  }
  else
  {
    unsigned int v14 = 0;
    do
    {
      int v15 = (*(uint64_t (**)(void))(**(void **)(v13 + 16) + 120))(*(void *)(v13 + 16));
      unsigned int v16 = v14 + 1;
      *(_DWORD *)(a6 + 4 * v14) = v15;
      uint64_t v13 = *(void *)(v13 + 8);
      ++v14;
    }
    while ((uint8_t *)v13 != buf);
    int v17 = 4 * v16;
  }
  *a5 = v17;
  sub_B8E4((uint64_t *)buf);
}

void sub_9A330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9A374(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6)
{
  if (*a2 != 1684103987)
  {
    uint64_t v13 = (os_log_t *)sub_32A48(13);
    unsigned int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)int v18 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v18[8] = 1024;
      *(_DWORD *)&v18[10] = 3055;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_B680((uint64_t *)buf, (void *)(a1 + 184), "", 3058);
  uint64_t v11 = *(void *)&v18[4];
  if (*(uint8_t **)&v18[4] == buf)
  {
    int v12 = 1;
  }
  else
  {
    int v12 = 1;
    do
    {
      if ((*(unsigned int (**)(void, _DWORD *))(**(void **)(v11 + 16) + 16))(*(void *)(v11 + 16), a2))
      {
        int v16 = 0;
        (*(void (**)(void, _DWORD *, uint64_t, uint64_t, uint64_t, int *))(**(void **)(v11 + 16) + 40))(*(void *)(v11 + 16), a2, a3, a4, a5, &v16);
        v12 &= v16;
      }
      uint64_t v11 = *(void *)(v11 + 8);
    }
    while ((uint8_t *)v11 != buf);
  }
  sub_B8E4((uint64_t *)buf);
  *a6 = v12;
}

void sub_9A574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_9A5A4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  if (*a2 != 1936876644)
  {
    int v17 = (os_log_t *)sub_32A48(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v33 = "AggregateDevice_CommonBase.cpp";
      __int16 v34 = 1024;
      int v35 = 2878;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unsigned int v12 = *a5;
  if (v12 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    BOOL v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(void *)a2;
      int v29 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v28);
      int v22 = v31;
      int v23 = (void **)__p[0];
      unsigned int v24 = *a5;
      int v25 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4);
      int v26 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int16 v33 = "AggregateDevice_CommonBase.cpp";
      if (v22 < 0) {
        int v26 = v23;
      }
      __int16 v34 = 1024;
      int v35 = 2879;
      __int16 v36 = 2080;
      __int16 v37 = v26;
      __int16 v38 = 1024;
      unsigned int v39 = v24;
      __int16 v40 = 1024;
      int v41 = v25;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v27 = &off_6414D8;
    v27[2] = 561211770;
  }
  if (a2[1] == 1768845428) {
    uint64_t v13 = a1 + 472;
  }
  else {
    uint64_t v13 = a1 + 496;
  }
  if (*(void *)(v13 + 16) != 1)
  {
    unsigned int v14 = (os_log_t *)sub_32A48(13);
    int v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v33 = "AggregateDevice_CommonBase.cpp";
        __int16 v34 = 1024;
        int v35 = 2882;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty should have blocked this code path because the appropriate device list's size is not 1.\"", buf, 0x12u);
      }
    }
  }
  return (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t, unsigned int *, uint64_t))(**(void **)(*(void *)(v13 + 8) + 16)
                                                                                                + 40))(*(void *)(*(void *)(v13 + 8) + 16), a2, a3, a4, a5, a6);
}

void sub_9A934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_9A968(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, unsigned int *a5, void *a6)
{
  if (*a2 != 1936879204)
  {
    int v26 = (os_log_t *)sub_32A48(13);
    __int16 v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v47 = "AggregateDevice_CommonBase.cpp";
      __int16 v48 = 1024;
      int v49 = 2849;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unsigned int v12 = *a5;
  if (v12 < (*(unsigned int (**)(uint64_t))(*(void *)a1 + 32))(a1))
  {
    int v29 = (os_log_t *)sub_32A48(13);
    int v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v42 = *(void *)a2;
      int v43 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v42);
      int v31 = v45;
      char v32 = (void **)__p[0];
      unsigned int v33 = *a5;
      int v34 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4);
      int v35 = __p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      __int16 v47 = "AggregateDevice_CommonBase.cpp";
      if (v31 < 0) {
        int v35 = v32;
      }
      __int16 v48 = 1024;
      int v49 = 2850;
      __int16 v50 = 2080;
      *(void *)uint64_t v51 = v35;
      *(_WORD *)&v51[8] = 1024;
      unsigned int v52 = v33;
      __int16 v53 = 1024;
      int v54 = v34;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).",
        buf,
        0x28u);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v36 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v36 = &off_6414D8;
    v36[2] = 561211770;
  }
  int v13 = sub_474DD8(a2[1]);
  uint64_t v14 = a1 + 544;
  uint64_t v15 = 520;
  if (v13) {
    uint64_t v15 = 544;
  }
  else {
    uint64_t v14 = a1 + 520;
  }
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(v14 + 8);
  while (v16 != v17)
  {
    if (*(unsigned char *)(*(void *)v16 + 200))
    {
      int v22 = *(unsigned int **)(*(void *)v16 + 192);
      int v23 = sub_A313C(v22[2]);
      unsigned int v24 = sub_A31B4(v23);
      size_t v25 = *a5;
      if (v24 > v25)
      {
        unsigned int v37 = v24;
        __int16 v38 = (os_log_t *)sub_32A48(13);
        unsigned int v39 = *v38;
        if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
        {
          unsigned int v40 = *a5;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          __int16 v47 = "AggregateDevice_CommonBase.cpp";
          __int16 v48 = 1024;
          int v49 = 2861;
          __int16 v50 = 1024;
          *(_DWORD *)uint64_t v51 = v40;
          *(_WORD *)&v51[4] = 1024;
          *(_DWORD *)&v51[6] = v37;
          _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"invalid AudioChannelLayout size for property kAudioDevicePropertyPreferredChannelLayout, given %u expected atleast %u bytes\"", buf, 0x1Eu);
        }
        int v41 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v41 = &off_6414D8;
        v41[2] = 2003332927;
      }
      return memcpy(a6, v22, v25);
    }
    v16 += 16;
  }
  if (a2[1] == 1768845428) {
    uint64_t v18 = a1 + 472;
  }
  else {
    uint64_t v18 = a1 + 496;
  }
  if (*(void *)(v18 + 16) != 1)
  {
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    uint64_t v20 = *v19;
    if (*v19)
    {
      if (os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v47 = "AggregateDevice_CommonBase.cpp";
        __int16 v48 = 1024;
        int v49 = 2871;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty should have blocked this code path because the appropriate device list's size is not 1.\"", buf, 0x12u);
      }
    }
  }
  return (void *)(*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t, unsigned int *, void *))(**(void **)(*(void *)(v18 + 8) + 16) + 40))(*(void *)(*(void *)(v18 + 8) + 16), a2, a3, a4, a5, a6);
}

void sub_9AE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_9AEB0(uint64_t a1, int a2, unsigned int a3, int *a4)
{
  if (a2 != 1650881394)
  {
    unsigned int v12 = (os_log_t *)sub_32A48(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      uint64_t v16 = "AggregateDevice_CommonBase.cpp";
      __int16 v17 = 1024;
      int v18 = 3041;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v15, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t result = sub_474DD8(a3);
  uint64_t v7 = a1 + 520;
  uint64_t v8 = 520;
  if (result)
  {
    uint64_t v8 = 544;
    uint64_t v7 = a1 + 544;
  }
  uint64_t v9 = *(void *)(a1 + v8);
  uint64_t v10 = *(void *)(v7 + 8);
  while (1)
  {
    if (v9 == v10)
    {
      int v11 = 0;
      goto LABEL_10;
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v9 + 136) + 120))(*(void *)(*(void *)v9 + 136), 1987013737);
    if (result) {
      break;
    }
    v9 += 16;
  }
  int v11 = 1;
LABEL_10:
  *a4 = v11;
  return result;
}

void sub_9B04C(_Unwind_Exception *exception_object)
{
}

void sub_9B068(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6)
{
  if (*a2 != 1953719148)
  {
    uint64_t v28 = (os_log_t *)sub_32A48(13);
    int v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)int v41 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&unsigned char v41[10] = 2207;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_B680((uint64_t *)buf, (void *)(a1 + 184), "", 2210);
  uint64_t v12 = *(void *)&v41[4];
  if (*(uint8_t **)&v41[4] == buf) {
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v13 = *(void *)(v12 + 16);
    strcpy((char *)v35, "#sTTptuo");
    BYTE1(v35[2]) = 0;
    HIWORD(v35[2]) = 0;
    if ((*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v13 + 16))(v13, v35)) {
      break;
    }
    uint64_t v12 = *(void *)(v12 + 8);
    if ((uint8_t *)v12 == buf) {
      goto LABEL_8;
    }
  }
  if ((uint8_t *)v12 == buf)
  {
LABEL_8:
    int v15 = sub_474DD8(a2[1]);
    uint64_t v16 = a1 + 520;
    uint64_t v17 = 520;
    if (v15)
    {
      uint64_t v17 = 544;
      uint64_t v16 = a1 + 544;
    }
    int v18 = *(uint64_t **)(a1 + v17);
    for (uint64_t i = *(uint64_t **)(v16 + 8); v18 != i; v18 += 2)
    {
      if (v15 == sub_31B098(*v18))
      {
        uint64_t v20 = *(void *)(*v18 + 136);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v20 + 88))(v20, 1987013737, 64001, 0))
        {
          BOOL v21 = *(std::__shared_weak_count **)(*v18 + 176);
          if (v21)
          {
            uint64_t v22 = *(void *)(*v18 + 168);
            atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            int v23 = std::__shared_weak_count::lock(v21);
            if (v23)
            {
              unsigned int v24 = v23;
              if (v22)
              {
                float v34 = 0.0;
                int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)v20 + 64))(v20, 1987013737, 1601402742, &v34, 0);
                if (v25)
                {
                  int v31 = (os_log_t *)sub_32A48(13);
                  char v32 = *v31;
                  if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
                  {
                    v35[0] = 136315650;
                    *(void *)&v35[1] = "AggregateDevice_CommonBase.cpp";
                    __int16 v36 = 1024;
                    int v37 = 2235;
                    __int16 v38 = 1024;
                    int v39 = v25;
                    _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) obtaining DSP Parameter related to ThermalScalarGain property\"", (uint8_t *)v35, 0x18u);
                  }
                  unsigned int v33 = __cxa_allocate_exception(0x10uLL);
                  *(void *)unsigned int v33 = &off_6414D8;
                  v33[2] = v25;
                }
                int v26 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 136))(v22);
                float v27 = v34;
                if (v26 != 1935895666) {
                  float v27 = sub_7953C((uint64_t)&unk_64A290, v34);
                }
                *a6 = v27;
              }
              sub_4636C(v24);
            }
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
    }
  }
  else
  {
    uint64_t v14 = *(void *)(v12 + 16);
    strcpy((char *)v35, "#sTTptuo");
    BYTE1(v35[2]) = 0;
    HIWORD(v35[2]) = 0;
    (*(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, float *))(*(void *)v14 + 40))(v14, v35, a3, a4, a5, a6);
  }
  sub_B8E4((uint64_t *)buf);
}

void sub_9B4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_9B518(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, CFDictionaryRef *a5)
{
  if (*a2 != 1886413426)
  {
    uint64_t v19 = (os_log_t *)sub_32A48(13);
    uint64_t v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2775;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a2[1] == 1869968496)
  {
    sub_B680(&v31, (void *)(a1 + 184), "", 2778);
    uint64_t v29 = 0x6F75747050504272;
    int v30 = 0;
    uint64_t v9 = v32;
    int v28 = 0;
    uint64_t v27 = 0x6F75747050504272;
    if (v32 != &v31)
    {
      while (((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v9[2] + 16))(v9[2], &v27) & 1) == 0)
      {
        uint64_t v9 = (uint64_t *)v9[1];
        if (v9 == &v31) {
          goto LABEL_32;
        }
      }
      if (v9 != &v31)
      {
        int v25 = 8;
        (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, int *, uint64_t *))(*(void *)v9[2] + 40))(v9[2], &v29, a3, a4, &v25, &v26);
        uint64_t v41 = v26;
        __p[0] = &v41;
        __p[1] = &def_1E50E8 + 2;
        CFArrayRef v10 = sub_A2E70((uint64_t)__p);
        v24[0] = v10;
        sub_A3038((uint64_t)&v33, v24);
        *(void *)AudioObjectPropertyAddress buf = &v33;
        *(void *)&buf[8] = 1;
        CFDictionaryRef v11 = sub_4D3D8((uint64_t)buf);
        v24[1] = v11;
        if (cf) {
          CFRelease(cf);
        }
        if (v33) {
          CFRelease(v33);
        }
        if (v10) {
          CFRelease(v10);
        }
        uint64_t v12 = sub_32A48(16);
        if (*(unsigned char *)(v12 + 8))
        {
          uint64_t v13 = *(NSObject **)v12;
          if (*(void *)v12)
          {
            if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v14 = *a2;
              if (v14 > 6) {
                int v15 = "unknown";
              }
              else {
                int v15 = off_623840[v14];
              }
              sub_21C8C(&v33, v15);
              if (v35 >= 0) {
                uint64_t v16 = &v33;
              }
              else {
                uint64_t v16 = (void *)v33;
              }
              CFStringRef v17 = CFCopyDescription(v11);
              sub_20B40((uint64_t)__p, v17);
              if (v17) {
                CFRelease(v17);
              }
              int v18 = __p;
              if (v23 < 0) {
                int v18 = (void **)__p[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2794;
              __int16 v37 = 2080;
              __int16 v38 = v16;
              __int16 v39 = 2080;
              unsigned int v40 = v18;
              _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Legacy: Get %s Dictionary description: %s", buf, 0x26u);
              if (v23 < 0) {
                operator delete(__p[0]);
              }
              if (v35 < 0) {
                operator delete((void *)v33);
              }
            }
          }
        }
        *a5 = v11;
      }
    }
LABEL_32:
    sub_B8E4(&v31);
  }
}

void sub_9B8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_9B98C(uint64_t a1, unsigned int *a2, uint64_t a3, int *a4, _DWORD *a5, CFDictionaryRef *a6)
{
  if (*a2 != 1952997988)
  {
    uint64_t v31 = (os_log_t *)sub_32A48(13);
    char v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v47 = 136315394;
      *(void *)&v47[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v47[12] = 1024;
      *(_DWORD *)&v47[14] = 2290;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v47, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a2[1] == 1869968496)
  {
    int v12 = sub_209270();
    uint64_t v13 = (void *)(a1 + 184);
    if (v12)
    {
      sub_B680((uint64_t *)v47, v13, "", 2295);
      uint64_t v14 = *(void *)&v47[8];
      if (*(unsigned char **)&v47[8] == v47)
      {
LABEL_7:
        if (a4)
        {
          sub_91A00();
          sub_1CE9C4(*a4);
        }
        int v15 = (os_log_t *)sub_32A48(16);
        uint64_t v16 = *v15;
        if (*v15)
        {
          if (os_log_type_enabled(*v15, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2320;
            _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS: Getting Speaker ThermalBudget", buf, 0x12u);
          }
        }
        uint64_t v17 = sub_91A00();
        sub_1D13C0((uint64_t)buf, v17, 0);
      }
      else
      {
        while (!sub_D6F60(*(void *)(v14 + 16)))
        {
          uint64_t v14 = *(void *)(v14 + 8);
          if ((unsigned char *)v14 == v47) {
            goto LABEL_7;
          }
        }
        uint64_t v27 = sub_91A00();
        sub_1D13C0((uint64_t)buf, v27, 1);
      }
      *a6 = *(CFDictionaryRef *)buf;
      *a5 = *(_DWORD *)&buf[8];
      uint64_t v26 = (uint64_t *)v47;
    }
    else
    {
      sub_B680((uint64_t *)buf, v13, "", 2330);
      uint64_t v42 = 0x6F75747054684277;
      int v43 = 0;
      uint64_t v18 = *(void *)&buf[8];
      int v41 = 0;
      uint64_t v40 = 0x6F75747054684277;
      while ((unsigned char *)v18 != buf)
      {
        if ((*(uint64_t (**)(void, uint64_t *))(**(void **)(v18 + 16) + 16))(*(void *)(v18 + 16), &v40))
        {
          if ((unsigned char *)v18 != buf)
          {
            int v38 = 4;
            int v39 = 0;
            (*(void (**)(void, uint64_t *, uint64_t, int *, int *, int *))(**(void **)(v18 + 16) + 40))(*(void *)(v18 + 16), &v42, a3, a4, &v38, &v39);
            sub_22210((CFStringRef *)&v44, "HapticTargetPower");
            LODWORD(__p[0]) = v39;
            CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, __p);
            if (!cf)
            {
              float v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v34, "Could not construct");
            }
            *(void *)__int16 v47 = &v44;
            *(void *)&v47[8] = 1;
            CFDictionaryRef v19 = sub_4D3D8((uint64_t)v47);
            CFDictionaryRef v37 = v19;
            if (cf) {
              CFRelease(cf);
            }
            if (v44) {
              CFRelease(v44);
            }
            uint64_t v20 = sub_32A48(16);
            if (*(unsigned char *)(v20 + 8))
            {
              BOOL v21 = *(NSObject **)v20;
              if (*(void *)v20)
              {
                if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v22 = *a2;
                  if (v22 > 6) {
                    char v23 = "unknown";
                  }
                  else {
                    char v23 = off_623840[v22];
                  }
                  sub_21C8C(&v44, v23);
                  if (v46 >= 0) {
                    int v28 = &v44;
                  }
                  else {
                    int v28 = (void *)v44;
                  }
                  CFStringRef v29 = CFCopyDescription(v19);
                  sub_20B40((uint64_t)__p, v29);
                  if (v29) {
                    CFRelease(v29);
                  }
                  int v30 = __p;
                  if (v36 < 0) {
                    int v30 = (void **)__p[0];
                  }
                  *(_DWORD *)__int16 v47 = 136315906;
                  *(void *)&v47[4] = "AggregateDevice_CommonBase.cpp";
                  *(_WORD *)&v47[12] = 1024;
                  *(_DWORD *)&v47[14] = 2344;
                  __int16 v48 = 2080;
                  int v49 = v28;
                  __int16 v50 = 2080;
                  uint64_t v51 = v30;
                  _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Legacy: Get %s Dictionary description: %s", v47, 0x26u);
                  if (v36 < 0) {
                    operator delete(__p[0]);
                  }
                  if (v46 < 0) {
                    operator delete((void *)v44);
                  }
                }
              }
            }
            *a6 = v19;
            goto LABEL_32;
          }
          break;
        }
        uint64_t v18 = *(void *)(v18 + 8);
      }
      unsigned int v24 = (os_log_t *)sub_32A48(16);
      int v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int16 v47 = 136315394;
        *(void *)&v47[4] = "AggregateDevice_CommonBase.cpp";
        *(_WORD *)&v47[12] = 1024;
        *(_DWORD *)&v47[14] = 2349;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d kVirtualAudioDevicePropertyThermalBudget for CPMS is a write-only property", v47, 0x12u);
      }
      *a5 = 0;
LABEL_32:
      uint64_t v26 = (uint64_t *)buf;
    }
    sub_B8E4(v26);
  }
}

void sub_9BEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, CFTypeRef cf, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_9BFEC(uint64_t a1, int a2, int a3, uint64_t a4, int *a5, _DWORD *a6, CFDictionaryRef *a7)
{
  if (a2 != 1952998002)
  {
    int v54 = (os_log_t *)sub_32A48(13);
    long long v55 = *v54;
    if (*v54 && os_log_type_enabled(*v54, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2500;
      _os_log_impl(&def_1E50E8, v55, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a3 != 1869968496) {
    return;
  }
  sub_B680(&v158, (void *)(a1 + 184), "", 2503);
  if (!sub_209270())
  {
    values = (void **)0x6F75747054684272;
    LODWORD(v170) = 0;
    int v12 = v159;
    int v157 = 0;
    uint64_t v156 = 0x6F75747054684272;
    while (v12 != &v158)
    {
      if ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v12[2] + 16))(v12[2], &v156))
      {
        if (v12 != &v158)
        {
          LODWORD(v161) = 8;
          (*(void (**)(uint64_t, void ***, uint64_t, int *, uint64_t *, CFTypeRef *))(*(void *)v12[2] + 40))(v12[2], &values, a4, a5, &v161, cf);
          CFTypeRef v175 = cf[0];
          uint64_t v171 = &v175;
          v172[0] = (void *)(&def_1E50E8 + 2);
          int v25 = (uint64_t *)sub_A2E70((uint64_t)&v171);
          v162 = v25;
          sub_A3038((uint64_t)&v176, (const void **)&v162);
          *(void *)AudioObjectPropertyAddress buf = &v176;
          *(void *)&buf[8] = 1;
          CFDictionaryRef v26 = sub_4D3D8((uint64_t)buf);
          uint64_t v164 = (uint64_t **)v26;
          if (v177) {
            CFRelease(v177);
          }
          if (v176) {
            CFRelease((CFTypeRef)v176);
          }
          if (v25) {
            CFRelease(v25);
          }
          uint64_t v27 = sub_32A48(16);
          if (*(unsigned char *)(v27 + 8))
          {
            int v28 = *(NSObject **)v27;
            if (*(void *)v27)
            {
              if (os_log_type_enabled(*(os_log_t *)v27, OS_LOG_TYPE_DEBUG))
              {
                CFStringRef v29 = CFCopyDescription(v26);
                sub_20B40((uint64_t)&v176, v29);
                if (v29) {
                  CFRelease(v29);
                }
                int v30 = &v176;
                if (v179 < 0) {
                  int v30 = (uint64_t *)v176;
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2579;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v30;
                _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEBUG, "%25s:%-5d Legacy: Get ThermalBudgetRange Dictionary description: %s", buf, 0x1Cu);
                if (v179 < 0) {
                  operator delete((void *)v176);
                }
              }
            }
          }
          *a7 = v26;
          *a6 = 8;
        }
        goto LABEL_85;
      }
      int v12 = (uint64_t *)v12[1];
    }
    goto LABEL_85;
  }
  for (uint64_t i = v159; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == &v158)
    {
      if (a5)
      {
        sub_91A00();
        if (sub_1CE9C4(*a5)) {
          goto LABEL_85;
        }
      }
      v172[0] = 0;
      v172[1] = 0;
      uint64_t v171 = (CFTypeRef *)v172;
      sub_16E564(&v176);
      uint64_t v13 = (void ***)v176;
      if ((uint64_t **)v176 == v177)
      {
        uint64_t v31 = (os_log_t *)sub_32A48(13);
        char v32 = *v31;
        if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1287;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "IODeviceTree:/product/audio";
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = "speaker-cpms-bgd_inst";
          _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
            buf,
            0x26u);
        }
        uint64_t v16 = 0;
        CFTypeRef v33 = 0;
        if (!v13)
        {
LABEL_53:
          values = v33;
          sub_16E934((const __CFString *)qword_64CAE0, &values, (uint64_t **)&v171);
          sub_16E194(&v176);
          float v34 = (void ***)v176;
          if ((uint64_t **)v176 == v177)
          {
            int v38 = (os_log_t *)sub_32A48(13);
            int v39 = *v38;
            if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
              *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1287;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = "IODeviceTree:/product/audio";
              *(_WORD *)&buf[28] = 2080;
              *(void *)&buf[30] = "speaker-cpms-bgd_100ms";
              _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
                buf,
                0x26u);
            }
            CFDictionaryRef v37 = 0;
            uint64_t v40 = 0;
            if (!v34)
            {
LABEL_64:
              values = v40;
              sub_16E934((const __CFString *)qword_64CAD8, &values, (uint64_t **)&v171);
              sub_16DCD8(&v176);
              int v41 = (void ***)v176;
              if ((uint64_t **)v176 == v177)
              {
                char v45 = (os_log_t *)sub_32A48(13);
                char v46 = *v45;
                if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                  *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1287;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = "IODeviceTree:/product/audio";
                  *(_WORD *)&buf[28] = 2080;
                  *(void *)&buf[30] = "speaker-cpms-bgd_1s";
                  _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
                    buf,
                    0x26u);
                }
                CFTypeRef v44 = 0;
                __int16 v47 = 0;
                if (!v41) {
                  goto LABEL_75;
                }
              }
              else
              {
                uint64_t v42 = sub_32A48(13);
                if (*(unsigned char *)(v42 + 8))
                {
                  int v43 = *(NSObject **)v42;
                  if (*(void *)v42)
                  {
                    if (os_log_type_enabled(*(os_log_t *)v42, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                      *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 1282;
                      *(_WORD *)&unsigned char buf[18] = 2080;
                      *(void *)&buf[20] = "speaker-cpms-bgd_1s";
                      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS Power Budget T::key %s returned valid", buf, 0x1Cu);
                    }
                  }
                }
                CFTypeRef v44 = *v41;
              }
              operator delete(v41);
              __int16 v47 = v44;
LABEL_75:
              values = v47;
              sub_16E934((const __CFString *)qword_64CAD0, &values, (uint64_t **)&v171);
              sub_16ECB8((CFDictionaryRef *)cf, &v171);
              __int16 v48 = (os_log_t *)sub_32A48(13);
              int v49 = *v48;
              if (*v48)
              {
                BOOL v50 = os_log_type_enabled(*v48, OS_LOG_TYPE_DEFAULT);
                CFDictionaryRef v51 = (const __CFDictionary *)cf[0];
                if (v50)
                {
                  CFStringRef v52 = CFCopyDescription(cf[0]);
                  sub_20B40((uint64_t)&v176, v52);
                  if (v52) {
                    CFRelease(v52);
                  }
                  __int16 v53 = &v176;
                  if (v179 < 0) {
                    __int16 v53 = (uint64_t *)v176;
                  }
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                  *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1408;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = v53;
                  _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS-Speaker: Get ThermalBudgetRange Array description: %s", buf, 0x1Cu);
                  if (v179 < 0) {
                    operator delete((void *)v176);
                  }
                }
              }
              else
              {
                CFDictionaryRef v51 = (const __CFDictionary *)cf[0];
              }
              sub_16EED8(v172[0]);
              *a7 = v51;
              goto LABEL_85;
            }
          }
          else
          {
            uint64_t v35 = sub_32A48(13);
            if (*(unsigned char *)(v35 + 8))
            {
              char v36 = *(NSObject **)v35;
              if (*(void *)v35)
              {
                if (os_log_type_enabled(*(os_log_t *)v35, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                  *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 1282;
                  *(_WORD *)&unsigned char buf[18] = 2080;
                  *(void *)&buf[20] = "speaker-cpms-bgd_100ms";
                  _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS Power Budget T::key %s returned valid", buf, 0x1Cu);
                }
              }
            }
            CFDictionaryRef v37 = *v34;
          }
          operator delete(v34);
          uint64_t v40 = v37;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v14 = sub_32A48(13);
        if (*(unsigned char *)(v14 + 8))
        {
          int v15 = *(NSObject **)v14;
          if (*(void *)v14)
          {
            if (os_log_type_enabled(*(os_log_t *)v14, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 1282;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = "speaker-cpms-bgd_inst";
              _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS Power Budget T::key %s returned valid", buf, 0x1Cu);
            }
          }
        }
        uint64_t v16 = *v13;
      }
      operator delete(v13);
      CFTypeRef v33 = v16;
      goto LABEL_53;
    }
    if (sub_D6F60(i[2])) {
      break;
    }
  }
  v163[0] = 0;
  v163[1] = 0;
  v162 = (uint64_t *)v163;
  uint64_t v152 = a5;
  int v153 = a7;
  unsigned int v151 = a4;
  io_registry_entry_t v17 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v17)
  {
    int v57 = (os_log_t *)sub_32A48(13);
    char v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    long long v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v59, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)"actuator-cpms-bgd_inst", 22, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v18;
  if (!v18)
  {
    uint64_t v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v60, "Could not construct");
  }
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v17, v18, kCFAllocatorDefault, 0);
  sub_1534E8(&v171, CFProperty);
  if (!v171)
  {
    int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v61, "Could not construct");
  }
  sub_16E0A8(&v176, v171);
  if (v171) {
    CFRelease(v171);
  }
  CFRelease(v18);
  IOObjectRelease(v17);
  BOOL v21 = (uint64_t *)v176;
  uint64_t v20 = v177;
  if ((uint64_t **)v176 != v177)
  {
    uint64_t v22 = sub_32A48(13);
    if (*(unsigned char *)(v22 + 8))
    {
      char v23 = *(NSObject **)v22;
      if (*(void *)v22)
      {
        if (os_log_type_enabled(*(os_log_t *)v22, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1282;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "actuator-cpms-bgd_inst";
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS Power Budget T::key %s returned valid", buf, 0x1Cu);
        }
      }
    }
    uint64_t v24 = *v21;
    goto LABEL_101;
  }
  __int16 v62 = (os_log_t *)sub_32A48(13);
  float v63 = *v62;
  if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1287;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = "IODeviceTree:/product/audio";
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = "actuator-cpms-bgd_inst";
    _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
      buf,
      0x26u);
  }
  uint64_t v24 = 0;
  uint64_t v64 = 0;
  if (v20)
  {
LABEL_101:
    operator delete(v21);
    uint64_t v64 = v24;
  }
  uint64_t v161 = v64;
  sub_16E934((const __CFString *)qword_64CAE0, &v161, &v162);
  io_registry_entry_t v65 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v65)
  {
    std::condition_variable v73 = (os_log_t *)sub_32A48(13);
    int v74 = *v73;
    if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    v75 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v75, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v66 = CFStringCreateWithBytes(0, (const UInt8 *)"actuator-cpms-bgd_100ms", 23, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v66;
  if (!v66)
  {
    CFIndex v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v76, "Could not construct");
  }
  CFTypeRef v67 = IORegistryEntryCreateCFProperty(v65, v66, kCFAllocatorDefault, 0);
  sub_1534E8(&v171, v67);
  if (!v171)
  {
    CFDictionaryRef v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v77, "Could not construct");
  }
  sub_16E0A8(&v176, v171);
  if (v171) {
    CFRelease(v171);
  }
  CFRelease(v66);
  IOObjectRelease(v65);
  int v69 = (uint64_t *)v176;
  long long v68 = v177;
  if ((uint64_t **)v176 != v177)
  {
    uint64_t v70 = sub_32A48(13);
    if (*(unsigned char *)(v70 + 8))
    {
      uint64_t v71 = *(NSObject **)v70;
      if (*(void *)v70)
      {
        if (os_log_type_enabled(*(os_log_t *)v70, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1282;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "actuator-cpms-bgd_100ms";
          _os_log_impl(&def_1E50E8, v71, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS Power Budget T::key %s returned valid", buf, 0x1Cu);
        }
      }
    }
    uint64_t v72 = *v69;
    goto LABEL_123;
  }
  v78 = (os_log_t *)sub_32A48(13);
  int v79 = *v78;
  if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1287;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = "IODeviceTree:/product/audio";
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = "actuator-cpms-bgd_100ms";
    _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
      buf,
      0x26u);
  }
  uint64_t v72 = 0;
  uint64_t v80 = 0;
  if (v68)
  {
LABEL_123:
    operator delete(v69);
    uint64_t v80 = v72;
  }
  uint64_t v161 = v80;
  sub_16E934((const __CFString *)qword_64CAD8, &v161, &v162);
  io_registry_entry_t v81 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/product/audio");
  if (!v81)
  {
    v89 = (os_log_t *)sub_32A48(13);
    v90 = *v89;
    if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "EDTUtilsImpl.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 47;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "IODeviceTree:/product/audio";
      _os_log_impl(&def_1E50E8, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).\"", buf, 0x1Cu);
    }
    int v91 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v91, "IORegistryEntryFromPath %s returned MACH_PORT_NULL (i.e. failed).");
  }
  CFStringRef v82 = CFStringCreateWithBytes(0, (const UInt8 *)"actuator-cpms-bgd_1s", 20, 0x8000100u, 0);
  *(void *)AudioObjectPropertyAddress buf = v82;
  if (!v82)
  {
    int v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v92, "Could not construct");
  }
  CFTypeRef v83 = IORegistryEntryCreateCFProperty(v81, v82, kCFAllocatorDefault, 0);
  sub_1534E8(&v171, v83);
  if (!v171)
  {
    v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v93, "Could not construct");
  }
  sub_16E0A8(&v176, v171);
  if (v171) {
    CFRelease(v171);
  }
  CFRelease(v82);
  IOObjectRelease(v81);
  uint64_t v85 = (uint64_t *)v176;
  v84 = v177;
  if ((uint64_t **)v176 != v177)
  {
    uint64_t v86 = sub_32A48(13);
    if (*(unsigned char *)(v86 + 8))
    {
      uint64_t v87 = *(NSObject **)v86;
      if (*(void *)v86)
      {
        if (os_log_type_enabled(*(os_log_t *)v86, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1282;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "actuator-cpms-bgd_1s";
          _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_DEBUG, "%25s:%-5d CPMS Power Budget T::key %s returned valid", buf, 0x1Cu);
        }
      }
    }
    uint64_t v88 = *v85;
    goto LABEL_145;
  }
  v94 = (os_log_t *)sub_32A48(13);
  int v95 = *v94;
  if (*v94 && os_log_type_enabled(*v94, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1287;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = "IODeviceTree:/product/audio";
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = "actuator-cpms-bgd_1s";
    _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS Power Budget empty for EDT path '%s'; key '%s'",
      buf,
      0x26u);
  }
  uint64_t v88 = 0;
  uint64_t v96 = 0;
  if (v84)
  {
LABEL_145:
    operator delete(v85);
    uint64_t v96 = v88;
  }
  uint64_t v161 = v96;
  sub_16E934((const __CFString *)qword_64CAD0, &v161, &v162);
  sub_16ECB8((CFDictionaryRef *)&v160, &v162);
  uint64_t v97 = sub_91A00();
  CFTypeRef v98 = v160;
  if (!v160)
  {
    v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v149, "Could not construct");
    goto LABEL_230;
  }
  uint64_t v99 = v97;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(v98))
  {
    v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v149, "Could not convert");
LABEL_230:
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)v98);
  unint64_t v165 = 0;
  uint64_t v166 = 0;
  uint64_t v164 = &v165;
  sub_4ECEC(&v171, Count);
  sub_4ECEC(&values, Count);
  uint64_t v150 = v99;
  CFDictionaryGetKeysAndValues((CFDictionaryRef)v98, v171, (const void **)values);
  CFIndex v154 = Count;
  if (Count)
  {
    uint64_t v102 = 0;
    while (1)
    {
      sub_20C54((uint64_t)cf, (const __CFString *)v171[v102]);
      v103 = values[v102];
      if (!v103 || (CFTypeID v104 = CFArrayGetTypeID(), v104 != CFGetTypeID(v103)))
      {
        v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v148, "Could not convert");
      }
      CFIndex v105 = CFArrayGetCount((CFArrayRef)v103);
      int v106 = v105;
      if (v105 << 32)
      {
        if (v105 << 32 < 0) {
          sub_60548();
        }
        int v107 = (char *)sub_46BF4((int)v105);
        uint64_t v109 = &v107[4 * v108];
        int64x2_t v110 = vdupq_n_s64((unint64_t)v107);
      }
      else
      {
        uint64_t v109 = 0;
        int64x2_t v110 = 0uLL;
      }
      int64x2_t v155 = v110;
      if (v106 >= 1)
      {
        CFIndex v111 = 0;
        uint64_t v112 = v106;
        do
        {
          CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v103, v111);
          unsigned int v114 = sub_993D4(ValueAtIndex);
          unsigned int v115 = v114;
          uint64_t v116 = v155.i64[1];
          if (v155.i64[1] >= (unint64_t)v109)
          {
            uint64_t v118 = (void *)v155.i64[0];
            uint64_t v119 = (v155.i64[1] - v155.i64[0]) >> 2;
            unint64_t v120 = v119 + 1;
            if ((unint64_t)(v119 + 1) >> 62) {
              sub_60548();
            }
            if ((uint64_t)&v109[-v155.i64[0]] >> 1 > v120) {
              unint64_t v120 = (uint64_t)&v109[-v155.i64[0]] >> 1;
            }
            if ((unint64_t)&v109[-v155.i64[0]] >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v121 = v120;
            }
            if (v121) {
              unint64_t v121 = (unint64_t)sub_46BF4(v121);
            }
            else {
              uint64_t v122 = 0;
            }
            v123 = (unsigned int *)(v121 + 4 * v119);
            unsigned int *v123 = v115;
            uint64_t v117 = (uint64_t)(v123 + 1);
            while (v116 != v155.i64[0])
            {
              unsigned int v124 = *(_DWORD *)(v116 - 4);
              v116 -= 4;
              *--v123 = v124;
            }
            uint64_t v109 = (char *)(v121 + 4 * v122);
            v155.i64[0] = (uint64_t)v123;
            if (v118) {
              operator delete(v118);
            }
          }
          else
          {
            *(_DWORD *)v155.i64[1] = v114;
            uint64_t v117 = v155.i64[1] + 4;
          }
          v125.i64[0] = v155.i64[0];
          v125.i64[1] = v117;
          int64x2_t v155 = v125;
          ++v111;
        }
        while (v111 != v112);
      }
      *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)cf;
      uint64_t v126 = v168;
      cf[1] = 0;
      uint64_t v168 = 0;
      cf[0] = 0;
      *(int64x2_t *)&buf[24] = v155;
      *(void *)&buf[16] = v126;
      v174 = v109;
      v127 = sub_15DF8((uint64_t)&v164, &v175, (void **)buf);
      float v128 = (void *)v155.i64[0];
      if (!*v127) {
        break;
      }
      if (v155.i64[0]) {
        goto LABEL_177;
      }
LABEL_178:
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v168) < 0) {
        operator delete((void *)cf[0]);
      }
      if (++v102 == v154) {
        goto LABEL_191;
      }
    }
    int v129 = operator new(0x50uLL);
    uint64_t v176 = (uint64_t)v129;
    v177 = &v165;
    char v178 = 0;
    uint64_t v130 = v129 + 4;
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_21E8C(v130, *(void **)buf, *(unint64_t *)&buf[8]);
      int64x2_t v131 = *(int64x2_t *)&buf[24];
      uint64_t v109 = v174;
    }
    else
    {
      *(_OWORD *)uint64_t v130 = *(_OWORD *)buf;
      v129[6] = *(void *)&buf[16];
      int64x2_t v131 = v155;
    }
    *(int64x2_t *)(v129 + 7) = v131;
    v129[9] = v109;
    *(void *)&buf[32] = 0;
    v174 = 0;
    *(void *)&buf[24] = 0;
    char v178 = 1;
    CFTypeRef v132 = v175;
    *int v129 = 0;
    v129[1] = 0;
    v129[2] = v132;
    void *v127 = v129;
    if (*v164)
    {
      uint64_t v164 = (uint64_t **)*v164;
      int v129 = (void *)*v127;
    }
    sub_46D00(v165, v129);
    ++v166;
    uint64_t v176 = 0;
    sub_16F0B0((uint64_t)&v176);
    float v128 = *(void **)&buf[24];
    if (!*(void *)&buf[24]) {
      goto LABEL_178;
    }
LABEL_177:
    *(void *)&buf[32] = v128;
    operator delete(v128);
    goto LABEL_178;
  }
LABEL_191:
  if (values)
  {
    uint64_t v170 = values;
    operator delete(values);
  }
  if (v171)
  {
    v172[0] = v171;
    operator delete(v171);
  }
  uint64_t v133 = v150 + 104;
  sub_16EED8(*(void **)(v150 + 104));
  v134 = v165;
  *(void *)(v150 + 96) = v164;
  *(void *)(v150 + 104) = v134;
  uint64_t v135 = v166;
  *(void *)(v150 + 112) = v166;
  if (v135)
  {
    v134[2] = v133;
    uint64_t v164 = &v165;
    unint64_t v165 = 0;
    uint64_t v166 = 0;
    v134 = 0;
  }
  else
  {
    *(void *)(v150 + 96) = v133;
  }
  sub_16EED8(v134);
  v136 = (os_log_t *)sub_32A48(13);
  uint64_t v137 = *v136;
  if (*v136)
  {
    BOOL v138 = os_log_type_enabled(*v136, OS_LOG_TYPE_DEFAULT);
    CFDictionaryRef v139 = (const __CFDictionary *)v160;
    if (v138)
    {
      CFStringRef v140 = CFCopyDescription(v160);
      sub_20B40((uint64_t)&v176, v140);
      if (v140) {
        CFRelease(v140);
      }
      v141 = &v176;
      if (v179 < 0) {
        v141 = (uint64_t *)v176;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "StandardUtilities.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1385;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v141;
      _os_log_impl(&def_1E50E8, v137, OS_LOG_TYPE_DEFAULT, "%25s:%-5d CPMS-Actuator: Get ThermalBudgetRange Array description: %s", buf, 0x1Cu);
      if (v179 < 0) {
        operator delete((void *)v176);
      }
    }
  }
  else
  {
    CFDictionaryRef v139 = (const __CFDictionary *)v160;
  }
  sub_16EED8(v163[0]);
  *int v153 = v139;
  strcpy(buf, "rBhTptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v176 = 0x6F75747050504272;
  LODWORD(v177) = 0;
  for (uint64_t j = v159; j != &v158; uint64_t j = (uint64_t *)j[1])
  {
    if (sub_D6F60(j[2]))
    {
      if (j != &v158)
      {
        uint64_t v144 = j[2];
        int v143 = (std::__shared_weak_count *)j[3];
        if (v143) {
          atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (sub_20994C() && sub_458294(v144))
        {
          LODWORD(cf[0]) = 8;
          (*(void (**)(uint64_t, unsigned char *, void, int *, CFTypeRef *, CFTypeRef **))(*(void *)j[2] + 40))(j[2], buf, v151, v152, cf, &v171);
          (*(void (**)(uint64_t, uint64_t *, void, int *, CFTypeRef *, void ***))(*(void *)j[2] + 40))(j[2], &v176, v151, v152, cf, &values);
          uint64_t v145 = sub_91A00();
          sub_1D11E8(v145, (uint64_t)v171, (uint64_t)values);
        }
        else if (sub_20994C() {
               && (*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)j[2] + 16))(j[2], buf))
        }
        {
          LODWORD(values) = 8;
          (*(void (**)(uint64_t, unsigned char *, void, int *, void ***, CFTypeRef **))(*(void *)j[2] + 40))(j[2], buf, v151, v152, &values, &v171);
          uint64_t v146 = (void *)sub_91A00();
          sub_1D08A8(v146, (int)v171, SHIDWORD(v171));
        }
        else if (sub_2099D4() {
               && (*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)j[2] + 16))(j[2], &v176))
        }
        {
          LODWORD(values) = 8;
          (*(void (**)(uint64_t, uint64_t *, void, int *, void ***, CFTypeRef **))(*(void *)j[2] + 40))(j[2], &v176, v151, v152, &values, &v171);
          uint64_t v147 = (void *)sub_91A00();
          sub_1D08A8(v147, (int)v171, SHIDWORD(v171));
        }
        if (v143) {
          sub_4636C(v143);
        }
      }
      break;
    }
  }
LABEL_85:
  sub_B8E4(&v158);
}

void sub_9DF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
}

void sub_9DF40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,const void *a24)
{
  if (v24) {
    CFRelease(v24);
  }
  sub_60394(&a24);
  JUMPOUT(0x9E0B0);
}

void sub_9DF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  __cxa_free_exception(v15);
  sub_60394((const void **)va);
  JUMPOUT(0x9E0B0);
}

void sub_9DF84()
{
  if (v0) {
    sub_4636C(v0);
  }
  JUMPOUT(0x9E0B8);
}

void sub_9DFA0()
{
}

void sub_9DFA8()
{
}

void sub_9DFB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38)
{
  sub_16F0B0(v38 - 128);
  sub_16F06C(v38 - 192);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a38) {
    operator delete(a38);
  }
  int v39 = *(void **)(v38 - 216);
  if (v39)
  {
    *(void *)(v38 - 208) = v39;
    operator delete(v39);
  }
  sub_16EED8(a30);
  JUMPOUT(0x9E0A8);
}

void sub_9DFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
}

void sub_9DFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_60394((uint64_t *)va);
  JUMPOUT(0x9E0B0);
}

void sub_9DFE8()
{
  __cxa_free_exception(v0);
  JUMPOUT(0x9E0C0);
}

void sub_9E00C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(a32);
  }
  JUMPOUT(0x9E080);
}

void sub_9E020()
{
}

void sub_9E028(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p) {
    operator delete(__p);
  }
  CFDictionaryRef v37 = *(void **)(v36 - 216);
  if (v37)
  {
    *(void *)(v36 - 208) = v37;
    operator delete(v37);
  }
  sub_16EED8(a30);
  JUMPOUT(0x9E0A8);
}

void sub_9E034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_free_exception(v37);
  if (a37 < 0) {
    operator delete(a32);
  }
  JUMPOUT(0x9E080);
}

void sub_9E048()
{
}

void sub_9E050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(a32);
  }
  JUMPOUT(0x9E080);
}

void sub_9E058()
{
}

uint64_t sub_9E0C8(uint64_t result, int a2, int a3, _DWORD *a4, uint64_t a5)
{
  if (a2 != 1869574756)
  {
    BOOL v21 = (os_log_t *)sub_32A48(13);
    uint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      CFStringRef v29 = "AggregateDevice_CommonBase.cpp";
      __int16 v30 = 1024;
      int v31 = 2590;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a3 == 1768845428)
  {
    uint64_t v5 = *(void *)(result + 520);
    for (uint64_t i = *(void *)(result + 528); v5 != i; v5 += 16)
    {
      uint64_t v9 = *(void *)(*(void *)v5 + 136);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 88))(v9, 1685287015, 1818980210, 0);
      if (result)
      {
        int v26 = 4;
        int v27 = 0;
        int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, int *, void, void))(*(void *)v9 + 104))(v9, 1685287015, 1818980210, &v27, &v26, 0, 0);
        if (v10)
        {
          CFStringRef v18 = (os_log_t *)sub_32A48(13);
          CFDictionaryRef v19 = *v18;
          if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            CFStringRef v29 = "AggregateDevice_CommonBase.cpp";
            __int16 v30 = 1024;
            int v31 = 2603;
            __int16 v32 = 1024;
            int v33 = v10;
            _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) obtaining DSP Property for lock orientation\"", buf, 0x18u);
          }
          uint64_t v20 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v20 = &off_6414D8;
          v20[2] = v10;
        }
        *(_DWORD *)a5 = v27;
        uint64_t v25 = 0;
        int v24 = 8;
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 88))(v9, 1685287015, 1869768052, 0) & 1) == 0)
        {
          int v12 = (os_log_t *)sub_32A48(13);
          uint64_t v13 = *v12;
          if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            CFStringRef v29 = "AggregateDevice_CommonBase.cpp";
            __int16 v30 = 1024;
            int v31 = 2610;
            _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"LockOrientation Property is present, but OrientationEffectiveTime is missing\"", buf, 0x12u);
          }
          uint64_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v14, "LockOrientation Property is present, but OrientationEffectiveTime is missing");
        }
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, int *, void, void))(*(void *)v9 + 104))(v9, 1685287015, 1869768052, &v25, &v24, 0, 0);
        int v11 = result;
        if (result)
        {
          int v15 = (os_log_t *)sub_32A48(13);
          uint64_t v16 = *v15;
          if (*v15)
          {
            if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              CFStringRef v29 = "AggregateDevice_CommonBase.cpp";
              __int16 v30 = 1024;
              int v31 = 2613;
              __int16 v32 = 1024;
              int v33 = v11;
              _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) obtaining DSP Property for orientation effective time\"", buf, 0x18u);
            }
          }
          io_registry_entry_t v17 = __cxa_allocate_exception(0x10uLL);
          *(void *)io_registry_entry_t v17 = &off_6414D8;
          void v17[2] = v11;
        }
        *(void *)(a5 + 8) = v25;
        *a4 = 16;
      }
    }
  }
  return result;
}

void sub_9E598(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_9E5B8(uint64_t result, int a2, int a3, int *a4, _DWORD *a5)
{
  if (a2 != 1869575794)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v20 = "AggregateDevice_CommonBase.cpp";
      __int16 v21 = 1024;
      int v22 = 2660;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a3 == 1768845428)
  {
    uint64_t v5 = *(void *)(result + 520);
    for (uint64_t i = *(void *)(result + 528); v5 != i; v5 += 16)
    {
      uint64_t v9 = *(void *)(*(void *)v5 + 136);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 88))(v9, 1685287015, 1818980210, 0);
      if (result)
      {
        int v17 = 4;
        int v18 = 0;
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, int *, void, void))(*(void *)v9 + 104))(v9, 1685287015, 1818980210, &v18, &v17, 0, 0);
        int v10 = result;
        if (result)
        {
          int v11 = (os_log_t *)sub_32A48(13);
          int v12 = *v11;
          if (*v11)
          {
            if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              uint64_t v20 = "AggregateDevice_CommonBase.cpp";
              __int16 v21 = 1024;
              int v22 = 2672;
              __int16 v23 = 1024;
              int v24 = v10;
              _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) obtaining DSP Property for lock orientation\"", buf, 0x18u);
            }
          }
          uint64_t v13 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v13 = &off_6414D8;
          v13[2] = v10;
        }
        *a5 = v18;
        *a4 = v17;
      }
    }
  }
  return result;
}

void sub_9E870(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_9E88C(void *a1, int a2, int a3, _DWORD *a4, _DWORD *a5)
{
  if (a2 != 1969844082)
  {
    int v18 = (os_log_t *)sub_32A48(13);
    CFDictionaryRef v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v25 = "AggregateDevice_CommonBase.cpp";
      __int16 v26 = 1024;
      int v27 = 2707;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a3 == 1768845428)
  {
    uint64_t v6 = a1[65];
    for (uint64_t i = a1[66]; v6 != i; v6 += 16)
    {
      uint64_t v10 = *(void *)(*(void *)v6 + 136);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t, void))(*a1 + 384))(a1, 1685287015, 1818980210, 0)&& (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v10 + 56))(v10, 1685287015, 1969844082, 0))
      {
        float v23 = 0.0;
        int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float *, void))(*(void *)v10 + 64))(v10, 1685287015, 1969844082, &v23, 0);
        int v12 = (os_log_t *)sub_32A48(16);
        uint64_t v13 = *v12;
        if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_INFO))
        {
          sub_2417C(__p, 0x75696F72u);
          uint64_t v14 = __p;
          if (v22 < 0) {
            uint64_t v14 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v25 = "AggregateDevice_CommonBase.cpp";
          __int16 v26 = 1024;
          int v27 = 2721;
          __int16 v28 = 2080;
          CFStringRef v29 = v14;
          __int16 v30 = 1024;
          int v31 = (int)v23;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Getting UI orientation {%s, %d}", buf, 0x22u);
          if (v22 < 0) {
            operator delete(__p[0]);
          }
        }
        if (v11)
        {
          int v15 = (os_log_t *)sub_32A48(13);
          uint64_t v16 = *v15;
          if (*v15)
          {
            if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              uint64_t v25 = "AggregateDevice_CommonBase.cpp";
              __int16 v26 = 1024;
              int v27 = 2723;
              __int16 v28 = 1024;
              LODWORD(v29) = v11;
              _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) obtaining DSP param for UI orientation\"", buf, 0x18u);
            }
          }
          int v17 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v17 = &off_6414D8;
          void v17[2] = v11;
        }
        *a5 = v23;
        *a4 = 4;
      }
    }
  }
}

void sub_9EC60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_9EC7C(int a1, _DWORD *a2, _DWORD *a3)
{
  if (!a3)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "StandardUtilities.h";
      __int16 v13 = 1024;
      int v14 = 157;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*a2 <= 3u)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        int v12 = "StandardUtilities.h";
        __int16 v13 = 1024;
        int v14 = 158;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"sizeof(T) <= ioDataSize\"", (uint8_t *)&v11, 0x12u);
      }
    }
  }
  *a2 = 4;
  *a3 = a1;
}

void sub_9EE10(_Unwind_Exception *exception_object)
{
}

void sub_9EE2C(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, _DWORD *a6)
{
  if (a2->mSelector != 1718839674 && a2->mSelector != 1902539642)
  {
    uint64_t v25 = (os_log_t *)sub_32A48(13);
    __int16 v26 = *v25;
    if (*v25)
    {
      if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v34 = 1024;
        int v35 = 3089;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unsigned int outData = 0;
  OSStatus PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 128), a2, a3, a4, a5, &outData);
  if (PropertyData)
  {
    uint64_t v16 = (os_log_t *)sub_32A48(16);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v30, a2->mSelector);
      int v18 = v31;
      CFDictionaryRef v19 = (void **)v30[0];
      sub_2417C(__p, PropertyData);
      uint64_t v20 = v30;
      if (v18 < 0) {
        uint64_t v20 = v19;
      }
      if (v29 >= 0) {
        __int16 v21 = __p;
      }
      else {
        __int16 v21 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v34 = 1024;
      int v35 = 3093;
      __int16 v36 = 2080;
      CFDictionaryRef v37 = v20;
      __int16 v38 = 2080;
      int v39 = v21;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioObjectGetPropertyData() for selector '%s' returned status '%s'.", buf, 0x26u);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
    char v22 = (os_log_t *)sub_32A48(13);
    float v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v34 = 1024;
      int v35 = 3094;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to obtain property data.\"", buf, 0x12u);
    }
    int v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v24 = &off_6414D8;
    v24[2] = PropertyData;
  }
  if (sub_2213AC(a1))
  {
    strcpy(buf, "rrapbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v12 = sub_99A40(a1);
    *((void *)&v15 + 1) = v13;
    *(void *)&long long v15 = v12;
    uint64_t v14 = v15 >> 32;
    if ((v14 & 0xFF00000000) == 0 || !v14 || (_os_feature_enabled_impl() & 1) == 0) {
      outData >>= 4;
    }
  }
  sub_9EC7C(outData, a5, a6);
}

void sub_9F188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9F1BC(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, double *a6)
{
  if (a2->mSelector != 1718843939)
  {
    long long v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v33 = 1024;
      int v34 = 3145;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  float64x2_t outData = 0uLL;
  OSStatus PropertyData = AudioObjectGetPropertyData(*(_DWORD *)(a1 + 128), a2, a3, a4, a5, &outData);
  if (PropertyData)
  {
    int v18 = (os_log_t *)sub_32A48(16);
    CFDictionaryRef v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v29, a2->mSelector);
      int v20 = v30;
      __int16 v21 = (void **)v29[0];
      sub_2417C(__p, PropertyData);
      char v22 = v29;
      if (v20 < 0) {
        char v22 = v21;
      }
      if (v28 >= 0) {
        float v23 = __p;
      }
      else {
        float v23 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v33 = 1024;
      int v34 = 3149;
      __int16 v35 = 2080;
      __int16 v36 = v22;
      __int16 v37 = 2080;
      __int16 v38 = v23;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioObjectGetPropertyData() for selector '%s' returned status '%s'.", buf, 0x26u);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    int v24 = (os_log_t *)sub_32A48(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      __int16 v33 = 1024;
      int v34 = 3150;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to obtain property data.\"", buf, 0x12u);
    }
    __int16 v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v26 = &off_6414D8;
    v26[2] = PropertyData;
  }
  if (sub_2213AC(a1))
  {
    strcpy(buf, "rrapbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v11 = sub_99A40(a1);
    *((void *)&v14 + 1) = v12;
    *(void *)&long long v14 = v11;
    uint64_t v13 = v14 >> 32;
    if ((v13 & 0xFF00000000) == 0 || !v13 || (_os_feature_enabled_impl() & 1) == 0) {
      float64x2_t outData = vmulq_f64(outData, (float64x2_t)vdupq_n_s64(0x3FB0000000000000uLL));
    }
  }
  sub_A2CB4(a5, a6, outData.f64[0], outData.f64[1]);
}

void sub_9F514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_9F548(uint64_t a1, int a2, unsigned int a3, const __CFString *a4, void *a5)
{
  if (a2 != 1685287011)
  {
    uint64_t v40 = (os_log_t *)sub_32A48(13);
    int v41 = *v40;
    if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2990;
      _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v8 = sub_474DD8(a3);
  uint64_t v9 = a1 + 520;
  uint64_t v10 = 520;
  if (v8)
  {
    uint64_t v10 = 544;
    uint64_t v9 = a1 + 544;
  }
  uint64_t v11 = *(void *)(a1 + v10);
  for (uint64_t i = *(void *)(v9 + 8); v11 != i; v11 += 16)
  {
    uint64_t v13 = *(void *)(*(void *)v11 + 136);
    long long v14 = (os_log_t *)sub_32A48(26);
    long long v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      sub_21B7C(__p, a4);
      uint64_t v16 = __p;
      if (v44 < 0) {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2996;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v16;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Get DSPConfig Qualifier String: %s", buf, 0x1Cu);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p[0]);
      }
    }
    if (CFStringCompare(a4, @"haptics protection mode", 0))
    {
      if (CFStringCompare(a4, @"loudness normalizer reset", 0))
      {
        if (CFStringCompare(a4, @"dsp chain name", 0))
        {
          if (CFEqual(a4, @"dsp chain active"))
          {
            id v17 = *(id *)sub_32A48(24);
            int v18 = v17;
            if (v17)
            {
              CFDictionaryRef v19 = v17;
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
              {
                if (*(unsigned char *)(v13 + 448) || *(void *)(v13 + 584) || *(void *)(v13 + 672)) {
                  int v20 = "yes";
                }
                else {
                  int v20 = "no";
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "DSPChain.mm";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 2947;
                *(_WORD *)&unsigned char buf[18] = 2080;
                *(void *)&buf[20] = v20;
                _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d DSP chain is active: %s", buf, 0x1Cu);
              }
            }
            if (*(unsigned char *)(v13 + 448) || *(void *)(v13 + 584) || (CFBooleanRef v21 = kCFBooleanFalse, *(void *)(v13 + 672))) {
              CFBooleanRef v21 = kCFBooleanTrue;
            }
            *a5 = v21;
          }
        }
        else
        {
          id v27 = *(id *)sub_32A48(24);
          char v28 = v27;
          if (v27)
          {
            char v29 = v27;
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(v13 + 735) < 0)
              {
                sub_21E8C(__p, *(void **)(v13 + 712), *(void *)(v13 + 720));
              }
              else
              {
                *(_OWORD *)std::string __p = *(_OWORD *)(v13 + 712);
                uint64_t v44 = *(void *)(v13 + 728);
              }
              char v30 = __p;
              if (v44 < 0) {
                char v30 = (void **)__p[0];
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)&uint8_t buf[4] = "DSPChain.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 2942;
              *(_WORD *)&unsigned char buf[18] = 2080;
              *(void *)&buf[20] = v30;
              _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPChain Name: %s", buf, 0x1Cu);
              if (SHIBYTE(v44) < 0) {
                operator delete(__p[0]);
              }
            }
          }
          if (*(char *)(v13 + 735) < 0)
          {
            sub_21E8C(buf, *(void **)(v13 + 712), *(void *)(v13 + 720));
          }
          else
          {
            *(_OWORD *)AudioObjectPropertyAddress buf = *(_OWORD *)(v13 + 712);
            *(void *)&buf[16] = *(void *)(v13 + 728);
          }
          if (buf[23] >= 0) {
            char v31 = buf;
          }
          else {
            char v31 = *(const char **)buf;
          }
          *a5 = CFStringCreateWithCString(kCFAllocatorDefault, v31, 0x600u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        continue;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 88))(v13, 1818521197, 1920165236, 0))
      {
        LODWORD(__p[0]) = 0;
        int v45 = 4;
        int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, int *, void, void))(*(void *)v13 + 104))(v13, 1818521197, 1920165236, __p, &v45, 0, 0);
        if (v25)
        {
          uint64_t v36 = sub_32A48(13);
          __int16 v37 = sub_7D5E8(1, *(void **)v36, *(void *)(v36 + 8));
          __int16 v38 = v37;
          if (v37 && os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "DSPChain.mm";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 2934;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v25;
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) getting AULoudnessNormalizer\"", buf, 0x18u);
          }

          int v39 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v39 = &off_6414D8;
          v39[2] = v25;
        }
        *(_DWORD *)a5 = __p[0];
        __int16 v26 = *(id *)sub_32A48(26);
        int v24 = v26;
        if (v26 && os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2937;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = __p[0];
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d LoudnessNormalizer Reset: %u", buf, 0x18u);
        }
LABEL_33:
      }
    }
    else if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 88))(v13, 1751216240, 88000, 0))
    {
      LODWORD(__p[0]) = 0;
      int v45 = 4;
      int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, int *, void, void))(*(void *)v13 + 104))(v13, 1751216240, 88000, __p, &v45, 0, 0);
      if (v22)
      {
        uint64_t v32 = sub_32A48(13);
        __int16 v33 = sub_7D5E8(1, *(void **)v32, *(void *)(v32 + 8));
        int v34 = v33;
        if (v33 && os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "DSPChain.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2921;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = v22;
          _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error (%d) obtaining DSP Property for Haptics Protection Mode\"", buf, 0x18u);
        }

        __int16 v35 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v35 = &off_6414D8;
        v35[2] = v22;
      }
      *(_DWORD *)a5 = __p[0];
      float v23 = *(id *)sub_32A48(26);
      int v24 = v23;
      if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "DSPChain.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2924;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = __p[0];
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Haptics Protection Mode: %u", buf, 0x18u);
      }
      goto LABEL_33;
    }
  }
}

void sub_9FE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

void sub_9FE44(uint64_t a1, _DWORD *a2, CFDictionaryRef *a3)
{
  float v6 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 360))(a1, 1685287015, 1852076912, 0);
  float v7 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 360))(a1, 1685287015, 1835623283, 0);
  float v8 = (*(float (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 360))(a1, 1685287015, 1919247987, 0);
  sub_22210(&v17, "DSP channels");
  unsigned int valuePtr = v6;
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  unsigned int valuePtr = v7;
  sub_A2BE0((uint64_t)&v19, "mics", (int *)&valuePtr);
  unsigned int v14 = v8;
  sub_A2BE0((uint64_t)v20, "refs", (int *)&v14);
  v15[0] = &v17;
  v15[1] = 3;
  CFDictionaryRef v9 = sub_4D3D8((uint64_t)v15);
  for (uint64_t i = 0; i != -48; i -= 16)
  {
    uint64_t v11 = *(const void **)&v20[i + 8];
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = *(const void **)&v20[i];
    if (v12) {
      CFRelease(v12);
    }
  }
  *a2 = 8;
  *a3 = v9;
}

void sub_A00AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  sub_60594(&a14);
  _Unwind_Resume(a1);
}

void sub_A014C(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, unsigned int *a4, UInt32 *a5, float *a6)
{
  if (*(unsigned char *)(a1 + 296))
  {
    AudioObjectID v11 = *(_DWORD *)(a1 + 128);
    sub_4B258(v11, a2, a3, a4, a5, a6);
  }
  else
  {
    if (a3 != 4 || !a4)
    {
      long long v15 = (os_log_t *)sub_32A48(13);
      uint64_t v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
        CFStringRef v17 = v33 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        __int16 v36 = 1024;
        int v37 = 3339;
        __int16 v38 = 2080;
        int v39 = v17;
        __int16 v40 = 1024;
        int v41 = 4;
        __int16 v42 = 2080;
        int v43 = "non-";
        __int16 v44 = 1024;
        UInt32 v45 = a3;
        __int16 v46 = 2048;
        __int16 v47 = a4;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x3Cu);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 561211770;
    }
    UInt32 v12 = *a5;
    if (v12 != (*(unsigned int (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, unsigned int *))(*(void *)a1 + 32))(a1, a2, 4, a4))
    {
      uint64_t v19 = (os_log_t *)sub_32A48(13);
      int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
        int v21 = v33;
        int v22 = (void **)__p[0];
        UInt32 v23 = *a5;
        int v24 = (*(uint64_t (**)(uint64_t, const AudioObjectPropertyAddress *, uint64_t, unsigned int *))(*(void *)a1 + 32))(a1, a2, 4, a4);
        int v25 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        if (v21 < 0) {
          int v25 = v22;
        }
        __int16 v36 = 1024;
        int v37 = 3340;
        __int16 v38 = 2080;
        int v39 = v25;
        __int16 v40 = 1024;
        int v41 = v23;
        __int16 v42 = 1024;
        LODWORD(v43) = v24;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      __int16 v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v26 = &off_6414D8;
      v26[2] = 561211770;
    }
    AudioObjectPropertyScope mScope = a2->mScope;
    if (mScope != 1768845428 && mScope != 1869968496)
    {
      id v27 = (os_log_t *)sub_32A48(13);
      char v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        __int16 v36 = 1024;
        int v37 = 3341;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      char v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v29, "Precondition failure.");
    }
    *a6 = (*(float (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 360))(a1, 1685287015, *a4, 0);
  }
}

void sub_A0610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A0644(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, void *a6)
{
  if (*(unsigned char *)(a1 + 296))
  {
    AudioObjectID v6 = *(_DWORD *)(a1 + 128);
    return sub_4B258(v6, a2, a3, a4, a5, a6);
  }
  else
  {
    if (a3 != 4 || !a4)
    {
      UInt32 v12 = (os_log_t *)sub_32A48(13);
      uint64_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v21);
        unsigned int v14 = v24 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        __int16 v26 = "AggregateDevice_CommonBase.cpp";
        __int16 v27 = 1024;
        int v28 = 3211;
        __int16 v29 = 2080;
        uint64_t v30 = v14;
        __int16 v31 = 1024;
        int v32 = 4;
        __int16 v33 = 2080;
        int v34 = "non-";
        __int16 v35 = 1024;
        UInt32 v36 = a3;
        __int16 v37 = 2048;
        __int16 v38 = a4;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x3Cu);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 561211770;
    }
    AudioObjectPropertyScope mScope = a2->mScope;
    if (mScope != 1768845428 && mScope != 1869968496)
    {
      uint64_t v16 = (os_log_t *)sub_32A48(13);
      CFStringRef v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v26 = "AggregateDevice_CommonBase.cpp";
        __int16 v27 = 1024;
        int v28 = 3212;
        _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      int v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v18, "Precondition failure.");
    }
    uint64_t v10 = *(uint64_t (**)(void))(*(void *)a1 + 408);
    return v10();
  }
}

void sub_A0950(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A096C(unsigned char *a1, uint64_t *a2, int a3, unsigned int *a4, int *a5, _DWORD *a6)
{
  if (a1[296])
  {
    uint64_t result = 1;
  }
  else
  {
    if (a3 != 4 || !a4)
    {
      long long v15 = (os_log_t *)sub_32A48(13);
      uint64_t v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *a2;
        int v31 = *((_DWORD *)a2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
        CFStringRef v17 = v33 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        __int16 v36 = 1024;
        int v37 = 3322;
        __int16 v38 = 2080;
        int v39 = v17;
        __int16 v40 = 1024;
        int v41 = 4;
        __int16 v42 = 2080;
        int v43 = "non-";
        __int16 v44 = 1024;
        int v45 = a3;
        __int16 v46 = 2048;
        __int16 v47 = a4;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x3Cu);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 561211770;
    }
    int v13 = *a5;
    if (v13 != (*(unsigned int (**)(unsigned char *, uint64_t *, uint64_t, unsigned int *))(*(void *)a1 + 32))(a1, a2, 4, a4))
    {
      uint64_t v19 = (os_log_t *)sub_32A48(13);
      int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *a2;
        int v31 = *((_DWORD *)a2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
        int v21 = v33;
        int v22 = (void **)__p[0];
        int v23 = *a5;
        int v24 = (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, unsigned int *))(*(void *)a1 + 32))(a1, a2, 4, a4);
        int v25 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        if (v21 < 0) {
          int v25 = v22;
        }
        __int16 v36 = 1024;
        int v37 = 3323;
        __int16 v38 = 2080;
        int v39 = v25;
        __int16 v40 = 1024;
        int v41 = v23;
        __int16 v42 = 1024;
        LODWORD(v43) = v24;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      __int16 v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v26 = &off_6414D8;
      v26[2] = 561211770;
    }
    int v14 = *((_DWORD *)a2 + 1);
    if (v14 != 1768845428 && v14 != 1869968496)
    {
      __int16 v27 = (os_log_t *)sub_32A48(13);
      int v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        __int16 v36 = 1024;
        int v37 = 3324;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      __int16 v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v29, "Precondition failure.");
    }
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, void, void))(*(void *)a1 + 352))(a1, 1685287015, *a4, 0);
  }
  *a6 = result;
  return result;
}

void sub_A0DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A0E10(unsigned char *a1, uint64_t *a2, int a3, unsigned int *a4, int *a5, _DWORD *a6)
{
  if (a1[296])
  {
    uint64_t result = 1;
  }
  else
  {
    if (a3 != 4 || !a4)
    {
      long long v15 = (os_log_t *)sub_32A48(13);
      uint64_t v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *a2;
        int v31 = *((_DWORD *)a2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
        CFStringRef v17 = v33 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        __int16 v36 = 1024;
        int v37 = 3281;
        __int16 v38 = 2080;
        int v39 = v17;
        __int16 v40 = 1024;
        int v41 = 4;
        __int16 v42 = 2080;
        int v43 = "non-";
        __int16 v44 = 1024;
        int v45 = a3;
        __int16 v46 = 2048;
        __int16 v47 = a4;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x3Cu);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 561211770;
    }
    int v13 = *a5;
    if (v13 != (*(unsigned int (**)(unsigned char *, uint64_t *, uint64_t, unsigned int *))(*(void *)a1 + 32))(a1, a2, 4, a4))
    {
      uint64_t v19 = (os_log_t *)sub_32A48(13);
      int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *a2;
        int v31 = *((_DWORD *)a2 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v30);
        int v21 = v33;
        int v22 = (void **)__p[0];
        int v23 = *a5;
        int v24 = (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, unsigned int *))(*(void *)a1 + 32))(a1, a2, 4, a4);
        int v25 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        if (v21 < 0) {
          int v25 = v22;
        }
        __int16 v36 = 1024;
        int v37 = 3282;
        __int16 v38 = 2080;
        int v39 = v25;
        __int16 v40 = 1024;
        int v41 = v23;
        __int16 v42 = 1024;
        LODWORD(v43) = v24;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v33 < 0) {
          operator delete(__p[0]);
        }
      }
      __int16 v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v26 = &off_6414D8;
      v26[2] = 561211770;
    }
    int v14 = *((_DWORD *)a2 + 1);
    if (v14 != 1768845428 && v14 != 1869968496)
    {
      __int16 v27 = (os_log_t *)sub_32A48(13);
      int v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v35 = "AggregateDevice_CommonBase.cpp";
        __int16 v36 = 1024;
        int v37 = 3283;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      __int16 v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v29, "Precondition failure.");
    }
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, void, void))(*(void *)a1 + 384))(a1, 1685287015, *a4, 0);
  }
  *a6 = result;
  return result;
}

void sub_A1280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_A12B4(unsigned char *__src, unsigned char *a2, _DWORD *a3, void *__dst)
{
  size_t v5 = a2 - __src;
  unint64_t v6 = *a3;
  if ((a2 - __src) >> 3 > v6 >> 3)
  {
    float v7 = (os_log_t *)sub_32A48(13);
    float v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      int v14 = "StandardUtilities.h";
      __int16 v15 = 1024;
      int v16 = 221;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"provided vector exceeds the size of the provided array.\"", (uint8_t *)&v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "provided vector exceeds the size of the provided array.");
  }
  if (!v6)
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    AudioObjectID v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      int v14 = "StandardUtilities.h";
      __int16 v15 = 1024;
      int v16 = 222;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"ioDataSize is 0.\"", (uint8_t *)&v13, 0x12u);
    }
    UInt32 v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v12, "ioDataSize is 0.");
  }
  if (a2 != __src)
  {
    *a3 = v5 & 0xFFFFFFF8;
    return memmove(__dst, __src, v5);
  }
  return __src;
}

void sub_A14C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A14E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = 1685220966;
  if (a1 != a2)
  {
    uint64_t v10 = a1;
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)v10 + 136);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v11 + 88))(v11, 1936748595, a3, 0))
      {
        break;
      }
      v10 += 16;
      if (v10 == a2) {
        return v5;
      }
    }
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v11 + 104))(v11, 1936748595, a3, a4, a5, 0, 0);
    uint64_t v13 = sub_32A48(16);
    uint64_t v14 = sub_32A48(24);
    char v15 = 0;
    uint64_t v16 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = *(int *)&buf[4 * v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1;
      if (v19)
      {
        if ((v17 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_14;
      }
    }
    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
    if (*(void *)(v13 + 8))
    {
LABEL_14:
      int v20 = *(NSObject **)v13;
      if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v34 = 1024;
        int v35 = 3376;
        __int16 v36 = 1024;
        *(_DWORD *)int v37 = a3;
        *(_WORD *)&v37[4] = 1024;
        *(_DWORD *)&v37[6] = v12;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, "%25s:%-5d chain->GetDSPProperty(%u): %d.", buf, 0x1Eu);
      }
    }
LABEL_17:
    if (v12)
    {
      int v22 = (os_log_t *)sub_32A48(13);
      int v23 = *v22;
      if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v31, 0x73707033u);
        int v24 = v32;
        int v25 = (void **)v31[0];
        sub_2417C(__p, a3);
        __int16 v26 = v31;
        if (v24 < 0) {
          __int16 v26 = v25;
        }
        if (v30 >= 0) {
          __int16 v27 = __p;
        }
        else {
          __int16 v27 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(void *)&uint8_t buf[4] = "AggregateDevice_CommonBase.cpp";
        __int16 v34 = 1024;
        int v35 = 3377;
        __int16 v36 = 2080;
        *(void *)int v37 = v26;
        *(_WORD *)&v37[8] = 2080;
        __int16 v38 = v27;
        __int16 v39 = 1024;
        int v40 = v12;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"chain->GetDSPProperty failed for AU (%s) property %s with error %d.\"", buf, 0x2Cu);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
        if (v32 < 0) {
          operator delete(v31[0]);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = v12;
    }
    return 0;
  }
  return v5;
}

void sub_A1838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_A185C(CFDictionaryRef *a1, uint64_t a2)
{
  sub_8BD08(&v86, a2);
  CFTypeID v4 = v86;
  if (!v86) {
    goto LABEL_135;
  }
  int v5 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&v86->_os_unfair_lock_opaque + 88))(v86, 0);
  CFTypeRef v83 = 0;
  v84 = 0;
  unint64_t v85 = 0;
  if (!v5
    || (uint64_t v6 = sub_98AB0(v4),
        (*(void (**)(unsigned char *__return_ptr, os_unfair_lock_s *, void, uint64_t))(*(void *)&v4->_os_unfair_lock_opaque
                                                                                         + 256))(v90, v4, 0, v6), !*(void *)&v90[8]))
  {
    float v8 = 0;
    uint64_t v11 = 0;
    goto LABEL_46;
  }
  float v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&v90[8]);
  if (v7) {
    float v8 = *(float **)v90;
  }
  else {
    float v8 = 0;
  }
  if (*(void *)&v90[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v90[8]);
  }
  if (v8)
  {
    (*(void (**)(unsigned char *__return_ptr, float *))(*(void *)v8 + 144))(v90, v8);
    CFDictionaryRef v9 = *(uint64_t **)v90;
    uint64_t v10 = *(uint64_t **)&v90[8];
    if (*(void *)v90 == *(void *)&v90[8])
    {
      float v8 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      CFDictionaryRef v77 = a1;
      uint64_t v11 = 0;
      float v8 = 0;
      unint64_t v12 = 0;
      do
      {
        uint64_t v13 = (std::__shared_weak_count *)v9[1];
        if (v13)
        {
          uint64_t v14 = std::__shared_weak_count::lock(v13);
          if (v14)
          {
            char v15 = v14;
            uint64_t v16 = *v9;
            if (*v9 && (*(unsigned int (**)(uint64_t))(*(void *)v16 + 152))(*v9))
            {
              strcpy((char *)valuePtr, "mlovbolg");
              BYTE1(valuePtr[1]) = 0;
              WORD1(valuePtr[1]) = 0;
              uint64_t v17 = sub_99A40(v16);
              *((void *)&v19 + 1) = v18;
              *(void *)&long long v19 = v17;
              if (((v19 >> 32) & 0xFF00000000) != 0) {
                float v20 = *((float *)&v17 + 1);
              }
              else {
                float v20 = 0.0;
              }
              if ((unint64_t)v11 >= v12)
              {
                uint64_t v21 = v11 - v8;
                unint64_t v22 = v21 + 1;
                if ((unint64_t)(v21 + 1) >> 62)
                {
                  unint64_t v85 = v12;
                  CFTypeRef v83 = v8;
                  sub_60548();
                }
                if ((uint64_t)(v12 - (void)v8) >> 1 > v22) {
                  unint64_t v22 = (uint64_t)(v12 - (void)v8) >> 1;
                }
                if (v12 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v23 = v22;
                }
                if (v23) {
                  unint64_t v23 = (unint64_t)sub_46BF4(v23);
                }
                else {
                  uint64_t v24 = 0;
                }
                int v25 = (float *)(v23 + 4 * v21);
                *int v25 = v20;
                unsigned int v2 = v25 + 1;
                while (v11 != v8)
                {
                  int v26 = *((_DWORD *)v11-- - 1);
                  *((_DWORD *)v25-- - 1) = v26;
                }
                unint64_t v12 = v23 + 4 * v24;
                v84 = v2;
                if (v8) {
                  operator delete(v8);
                }
                float v8 = v25;
              }
              else
              {
                float *v11 = v20;
                unsigned int v2 = v11 + 1;
              }
              v84 = v2;
              uint64_t v11 = v2;
            }
            sub_4636C(v15);
          }
        }
        v9 += 2;
      }
      while (v9 != v10);
      unint64_t v85 = v12;
      CFTypeRef v83 = v8;
      a1 = v77;
    }
    valuePtr[0] = v90;
    sub_98D9C((void ***)valuePtr);
    if (v7) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v11 = 0;
    if (v7) {
LABEL_45:
    }
      sub_4636C(v7);
  }
LABEL_46:
  strcpy((char *)__p, "#rsnbolg");
  BYTE1(__p[1]) = 0;
  WORD1(__p[1]) = 0;
  if (sub_FE748((uint64_t)v4))
  {
    *(_DWORD *)v90 = 2003329396;
    v90[8] = 0;
    LOBYTE(v92) = 0;
    unsigned int v27 = sub_FE7BC((uint64_t)v4);
    LODWORD(v82[0]) = v27;
    if (v27)
    {
      sub_739F0(valuePtr, v27 >> 4);
      *(_DWORD *)v90 = sub_FE830((uint64_t)v4);
      if (*(_DWORD *)v90)
      {
        int v28 = 0;
        v88.i8[0] = 0;
      }
      else
      {
        char v32 = sub_A2A10((void **)&v90[8], valuePtr);
        v88.i8[0] = 0;
        if ((_BYTE)v92)
        {
          int64x2_t v88 = *(int64x2_t *)&v90[8];
          unsigned int v2 = (float *)v91;
          v32[1] = 0;
          v32[2] = 0;
          *char v32 = 0;
          int v28 = 1;
        }
        else
        {
          int v28 = 0;
        }
      }
      int v33 = v28;
      if (valuePtr[0])
      {
        valuePtr[1] = valuePtr[0];
        operator delete((void *)valuePtr[0]);
        int v33 = v92;
      }
      if (v33 && *(void *)&v90[8])
      {
        *(void *)&v90[16] = *(void *)&v90[8];
        operator delete(*(void **)&v90[8]);
      }
      v90[0] = 0;
      BOOL v31 = v28 == 0;
      if (!v28)
      {
        __int16 v29 = 0;
        char v30 = valuePtr;
        goto LABEL_62;
      }
    }
    else
    {
      BOOL v31 = 0;
      unsigned int v2 = 0;
      int64x2_t v88 = 0uLL;
      v90[0] = 0;
    }
    *(int64x2_t *)v90 = v88;
    *(void *)&v90[16] = v2;
    LOBYTE(v91) = 1;
    __int16 v29 = (long long *)v88.i64[1];
    char v30 = (const void **)v90;
  }
  else
  {
    __int16 v29 = 0;
    v88.i8[0] = 0;
    v90[0] = 0;
    char v30 = valuePtr;
    BOOL v31 = 1;
  }
LABEL_62:
  memset(valuePtr, 0, sizeof(valuePtr));
  __int16 v34 = (long long *)*v30;
  v30[1] = 0;
  v30[2] = 0;
  *char v30 = 0;
  if (valuePtr[0]) {
    operator delete((void *)valuePtr[0]);
  }
  if (!v31 && *(void *)v90) {
    operator delete(*(void **)v90);
  }
  *(void *)&v90[8] = 0;
  *(void *)&v90[16] = 0;
  *(void *)v90 = &v90[8];
  if (v34 == v29) {
    goto LABEL_87;
  }
  int v35 = v34;
  do
  {
    long long v78 = *v35;
    sub_A2608((uint64_t *)v90, *(double *)&v78, *(double *)&v78);
    sub_A2608((uint64_t *)v90, *((double *)&v78 + 1), *((double *)&v78 + 1));
    ++v35;
  }
  while (v35 != v29);
  __int16 v36 = *(double **)v90;
  if (*(unsigned char **)v90 == &v90[8])
  {
LABEL_87:
    __int16 v47 = 0;
    __int16 v44 = 0;
  }
  else
  {
    unint64_t v37 = 0;
    __int16 v38 = *(unsigned char **)v90;
    do
    {
      unint64_t v39 = v37;
      int v40 = (void *)*((void *)v38 + 1);
      if (v40)
      {
        do
        {
          int v41 = v40;
          int v40 = (void *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          int v41 = (unsigned char *)*((void *)v38 + 2);
          BOOL v42 = *(void *)v41 == (void)v38;
          __int16 v38 = v41;
        }
        while (!v42);
      }
      ++v37;
      __int16 v38 = v41;
    }
    while (v41 != &v90[8]);
    if (v39 >= 0x1FFFFFFFFFFFFFFFLL) {
      sub_60548();
    }
    int v43 = (double *)sub_106EC(v37);
    __int16 v44 = v43;
    do
    {
      *__int16 v44 = v36[4];
      int v45 = (double *)*((void *)v36 + 1);
      if (v45)
      {
        do
        {
          __int16 v46 = v45;
          int v45 = *(double **)v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          __int16 v46 = (double *)*((void *)v36 + 2);
          BOOL v42 = *(void *)v46 == (void)v36;
          __int16 v36 = v46;
        }
        while (!v42);
      }
      ++v44;
      __int16 v36 = v46;
    }
    while (v46 != (double *)&v90[8]);
    __int16 v47 = v43;
  }
  sub_463E0(*(void **)&v90[8]);
  if (v34) {
    operator delete(v34);
  }
  BOOL v48 = v11 != v8;
  (*(void (**)(CFStringRef *__return_ptr, os_unfair_lock_s *))(*(void *)&v4->_os_unfair_lock_opaque + 128))(theString, v4);
  sub_21B7C(__p, theString[0]);
  sub_22210((CFStringRef *)v90, "accessory UID");
  if ((v81 & 0x80u) == 0) {
    int v49 = __p;
  }
  else {
    int v49 = (void **)__p[0];
  }
  if ((v81 & 0x80u) == 0) {
    CFIndex v50 = v81;
  }
  else {
    CFIndex v50 = (CFIndex)__p[1];
  }
  *(void *)&v90[8] = CFStringCreateWithBytes(0, (const UInt8 *)v49, v50, 0x8000100u, 0);
  if (!*(void *)&v90[8])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  sub_22210((CFStringRef *)&v90[16], "accessory capabilities");
  LODWORD(valuePtr[0]) = ((unint64_t)((char *)v44 - (char *)v47) > 8) | (2 * v48);
  CFNumberRef v91 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
  if (!v91)
  {
    uint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v71, "Could not construct");
  }
  if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v4->_os_unfair_lock_opaque + 392))(v4) & 1) == 0)
  {
    uint64_t v72 = (os_log_t *)sub_32A48(13);
    std::condition_variable v73 = *v72;
    if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
    {
      LODWORD(valuePtr[0]) = 136315394;
      *(const void **)((char *)valuePtr + 4) = "PhysicalDevice.h";
      WORD2(valuePtr[1]) = 1024;
      *(_DWORD *)((char *)&valuePtr[1] + 6) = 414;
      _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)valuePtr, 0x12u);
    }
    int v74 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v74, "Precondition failure.");
  }
  if (sub_8BFA8((unsigned __int8 *)v4)) {
    uint32_t os_unfair_lock_opaque = 0;
  }
  else {
    uint32_t os_unfair_lock_opaque = v4[64]._os_unfair_lock_opaque;
  }
  sub_22210(&v92, "accessory available control token");
  LODWORD(valuePtr[0]) = os_unfair_lock_opaque;
  if (!CFNumberCreate(0, kCFNumberIntType, valuePtr))
  {
    v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v75, "Could not construct");
  }
  sub_22210(v94, "accessory supported sample rates");
  int64x2_t v88 = 0uLL;
  unint64_t v89 = 0;
  sub_66C3C(&v88, v44 - v47);
  if (v47 != v44)
  {
    CFStringRef v52 = (CFNumberRef *)v88.i64[1];
    __int16 v53 = v47;
    do
    {
      double v54 = *v53;
      if ((unint64_t)v52 >= v89)
      {
        uint64_t v55 = ((uint64_t)v52 - v88.i64[0]) >> 3;
        if ((unint64_t)(v55 + 1) >> 61) {
          sub_60548();
        }
        unint64_t v56 = (uint64_t)(v89 - v88.i64[0]) >> 2;
        if (v56 <= v55 + 1) {
          unint64_t v56 = v55 + 1;
        }
        if (v89 - v88.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v56;
        }
        AudioObjectID v101 = &v89;
        if (v57) {
          unint64_t v57 = (unint64_t)sub_106EC(v57);
        }
        else {
          uint64_t v58 = 0;
        }
        valuePtr[0] = (const void *)v57;
        valuePtr[1] = (const void *)(v57 + 8 * v55);
        valuePtr[2] = valuePtr[1];
        unint64_t v100 = v57 + 8 * v58;
        sub_A2958((CFNumberRef *)valuePtr[1], v54);
        long long v59 = (char *)valuePtr[1];
        CFStringRef v52 = (CFNumberRef *)((char *)valuePtr[2] + 8);
        valuePtr[2] = (char *)valuePtr[2] + 8;
        uint64_t v60 = (void *)v88.i64[1];
        int v61 = (void *)v88.i64[0];
        if (v88.i64[1] == v88.i64[0])
        {
          int64x2_t v63 = vdupq_n_s64(v88.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v62 = *--v60;
            *((void *)v59 - 1) = v62;
            v59 -= 8;
            void *v60 = 0;
          }
          while (v60 != v61);
          int64x2_t v63 = v88;
          CFStringRef v52 = (CFNumberRef *)valuePtr[2];
        }
        v88.i64[0] = (uint64_t)v59;
        v88.i64[1] = (uint64_t)v52;
        *(int64x2_t *)&valuePtr[1] = v63;
        unint64_t v64 = v89;
        unint64_t v89 = v100;
        unint64_t v100 = v64;
        valuePtr[0] = (const void *)v63.i64[0];
        sub_66EEC((uint64_t)valuePtr);
      }
      else
      {
        sub_A2958(v52++, *v53);
      }
      v88.i64[1] = (uint64_t)v52;
      ++v53;
    }
    while (v53 != v44);
  }
  CFStringRef v65 = (const __CFString *)sub_66CFC((uint64_t **)&v88);
  valuePtr[0] = &v88;
  sub_66E4C((void ***)valuePtr);
  v94[1] = v65;
  double v66 = (*(double (**)(os_unfair_lock_s *))(*(void *)&v4->_os_unfair_lock_opaque + 104))(v4);
  sub_22210(&v95, "accessory current sample rate");
  valuePtr[0] = *(const void **)&v66;
  if (!CFNumberCreate(0, kCFNumberDoubleType, valuePtr))
  {
    CFIndex v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v76, "Could not construct");
  }
  sub_22210(&v97, "accessory input channel gains");
  CFArrayRef v98 = sub_A26C8((float **)&v83);
  v82[0] = v90;
  v82[1] = 6;
  uint64_t v67 = 0;
  *a1 = sub_4D3D8((uint64_t)v82);
  do
  {
    long long v68 = valuePtr[v67 - 1];
    if (v68) {
      CFRelease(v68);
    }
    int v69 = *(CFStringRef *)((char *)&v97 + v67 * 8);
    if (v69) {
      CFRelease(v69);
    }
    v67 -= 2;
  }
  while (v67 != -12);
  if ((char)v81 < 0) {
    operator delete(__p[0]);
  }
  sub_72924((uint64_t)theString);
  if (v47) {
    operator delete(v47);
  }
  if (v83) {
    operator delete(v83);
  }
LABEL_135:
  if (v87) {
    sub_4636C(v87);
  }
  if (!v4) {
    *a1 = 0;
  }
}

void sub_A2390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,CFTypeRef a31,uint64_t a32,CFTypeRef a33,uint64_t a34,CFTypeRef a35,uint64_t a36,uint64_t a37,uint64_t a38,CFTypeRef cf)
{
  sub_4636C(v41);
  *(void *)(v42 - 176) = &a30;
  sub_98D9C((void ***)(v42 - 176));
  if (v39) {
    sub_4636C(v39);
  }
  if (v40) {
    operator delete(v40);
  }
  if (a25) {
    sub_4636C(a25);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_A2608(uint64_t *result, double a2, double a3)
{
  CFTypeID v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        float v7 = (uint64_t **)v5;
        double v8 = *(double *)(v5 + 32);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *(void *)v5;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    float v7 = (uint64_t **)(result + 1);
LABEL_9:
    CFDictionaryRef v9 = (double *)operator new(0x28uLL);
    v9[4] = a3;
    *CFDictionaryRef v9 = 0.0;
    v9[1] = 0.0;
    *((void *)v9 + 2) = v7;
    *uint64_t v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *CFTypeID v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    uint64_t result = sub_46D00((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

CFArrayRef sub_A26C8(float **a1)
{
  unint64_t v2 = a1[1] - *a1;
  int64x2_t v19 = 0uLL;
  unint64_t v20 = 0;
  sub_66C3C(&v19, v2);
  uint64_t v3 = *a1;
  CFTypeID v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v5 = (CFNumberRef *)v19.i64[1];
    do
    {
      float v6 = *v3;
      if ((unint64_t)v5 >= v20)
      {
        uint64_t v7 = ((uint64_t)v5 - v19.i64[0]) >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          sub_60548();
        }
        unint64_t v8 = (uint64_t)(v20 - v19.i64[0]) >> 2;
        if (v8 <= v7 + 1) {
          unint64_t v8 = v7 + 1;
        }
        if (v20 - v19.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        uint64_t v24 = &v20;
        if (v9) {
          unint64_t v9 = (unint64_t)sub_106EC(v9);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v21 = (int64x2_t *)v9;
        v22.i64[0] = v9 + 8 * v7;
        v22.i64[1] = v22.i64[0];
        unint64_t v23 = v9 + 8 * v10;
        sub_A28A0((CFNumberRef *)v22.i64[0], v6);
        uint64_t v11 = v22.i64[0];
        uint64_t v5 = (CFNumberRef *)(v22.i64[1] + 8);
        v22.i64[1] += 8;
        unint64_t v12 = (void *)v19.i64[1];
        uint64_t v13 = (void *)v19.i64[0];
        if (v19.i64[1] == v19.i64[0])
        {
          int64x2_t v15 = vdupq_n_s64(v19.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v14 = *--v12;
            *(void *)(v11 - 8) = v14;
            v11 -= 8;
            void *v12 = 0;
          }
          while (v12 != v13);
          int64x2_t v15 = v19;
          uint64_t v5 = (CFNumberRef *)v22.i64[1];
        }
        v19.i64[0] = v11;
        v19.i64[1] = (uint64_t)v5;
        int64x2_t v22 = v15;
        unint64_t v16 = v20;
        unint64_t v20 = v23;
        unint64_t v23 = v16;
        uint64_t v21 = (int64x2_t *)v15.i64[0];
        sub_66EEC((uint64_t)&v21);
      }
      else
      {
        sub_A28A0(v5++, *v3);
      }
      v19.i64[1] = (uint64_t)v5;
      ++v3;
    }
    while (v3 != v4);
  }
  CFArrayRef v17 = sub_66CFC((uint64_t **)&v19);
  uint64_t v21 = &v19;
  sub_66E4C((void ***)&v21);
  return v17;
}

void sub_A2860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_66E4C(&a13);
  _Unwind_Resume(a1);
}

CFNumberRef *sub_A28A0(CFNumberRef *a1, float a2)
{
  float valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_A292C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

CFNumberRef *sub_A2958(CFNumberRef *a1, double a2)
{
  double valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_A29E4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void **sub_A2A10(void **a1, const void **a2)
{
  if (*((unsigned char *)a1 + 24))
  {
    if (a1 != (void **)a2)
    {
      CFNumberRef v3 = (char *)*a2;
      CFTypeID v4 = (char *)a2[1];
      int64_t v5 = v4 - (unsigned char *)*a2;
      unint64_t v6 = v5 >> 4;
      uint64_t v7 = (uint64_t)a1[2];
      unint64_t v8 = (char *)*a1;
      if (v5 >> 4 <= (unint64_t)((v7 - (uint64_t)*a1) >> 4))
      {
        uint64_t v11 = a1 + 1;
        unint64_t v12 = (char *)a1[1];
        unint64_t v13 = (v12 - v8) >> 4;
        if (v13 < v6)
        {
          uint64_t v14 = &v3[16 * v13];
          if (v12 != v8)
          {
            memmove(*a1, *a2, v12 - v8);
            unint64_t v8 = (char *)*v11;
          }
          int64_t v5 = v4 - v14;
          if (v4 == v14) {
            goto LABEL_22;
          }
          int64x2_t v15 = v8;
          unint64_t v16 = v14;
          goto LABEL_21;
        }
      }
      else
      {
        if (v8)
        {
          a1[1] = v8;
          operator delete(v8);
          uint64_t v7 = 0;
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
        }
        if (v5 < 0) {
          sub_60548();
        }
        uint64_t v9 = v7 >> 3;
        if (v7 >> 3 <= v6) {
          uint64_t v9 = v5 >> 4;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        sub_6E988(a1, v10);
        uint64_t v11 = a1 + 1;
        unint64_t v8 = (char *)a1[1];
      }
      if (v4 == v3)
      {
LABEL_22:
        uint64_t *v11 = &v8[v5];
        return a1;
      }
      int64x2_t v15 = v8;
      unint64_t v16 = v3;
LABEL_21:
      memmove(v15, v16, v5);
      goto LABEL_22;
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    sub_A2B64(a1, *a2, (uint64_t)a2[1], ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 4);
    *((unsigned char *)a1 + 24) = 1;
  }
  return a1;
}

void *sub_A2B64(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_6E988(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_A2BC4(_Unwind_Exception *exception_object)
{
  CFNumberRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A2BE0(uint64_t a1, char *a2, int *a3)
{
  sub_22210((CFStringRef *)a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_A2C78(_Unwind_Exception *a1)
{
  CFNumberRef v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

void sub_A2CB4(_DWORD *a1, double *a2, double a3, double a4)
{
  if (!a2)
  {
    unint64_t v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "StandardUtilities.h";
      __int16 v15 = 1024;
      int v16 = 157;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*a1 <= 0xFu)
  {
    size_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint64_t v14 = "StandardUtilities.h";
        __int16 v15 = 1024;
        int v16 = 158;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"sizeof(T) <= ioDataSize\"", (uint8_t *)&v13, 0x12u);
      }
    }
  }
  *a1 = 16;
  *a2 = a3;
  a2[1] = a4;
}

void sub_A2E54(_Unwind_Exception *exception_object)
{
}

CFArrayRef sub_A2E70(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  int64x2_t v19 = 0uLL;
  unint64_t v20 = 0;
  sub_66C3C(&v19, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    CFTypeID v4 = *(int **)a1;
    uint64_t v5 = *(void *)a1 + 4 * v3;
    unint64_t v6 = (CFNumberRef *)v19.i64[1];
    do
    {
      if ((unint64_t)v6 >= v20)
      {
        uint64_t v7 = ((uint64_t)v6 - v19.i64[0]) >> 3;
        if ((unint64_t)(v7 + 1) >> 61) {
          sub_60548();
        }
        unint64_t v8 = (uint64_t)(v20 - v19.i64[0]) >> 2;
        if (v8 <= v7 + 1) {
          unint64_t v8 = v7 + 1;
        }
        if (v20 - v19.i64[0] >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v9 = v8;
        }
        uint64_t v24 = &v20;
        if (v9) {
          unint64_t v9 = (unint64_t)sub_106EC(v9);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v21 = (int64x2_t *)v9;
        v22.i64[0] = v9 + 8 * v7;
        v22.i64[1] = v22.i64[0];
        unint64_t v23 = v9 + 8 * v10;
        sub_A3084((CFNumberRef *)v22.i64[0], *v4);
        uint64_t v11 = v22.i64[0];
        unint64_t v6 = (CFNumberRef *)(v22.i64[1] + 8);
        v22.i64[1] += 8;
        unint64_t v12 = (void *)v19.i64[1];
        int v13 = (void *)v19.i64[0];
        if (v19.i64[1] == v19.i64[0])
        {
          int64x2_t v15 = vdupq_n_s64(v19.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v14 = *--v12;
            *(void *)(v11 - 8) = v14;
            v11 -= 8;
            void *v12 = 0;
          }
          while (v12 != v13);
          int64x2_t v15 = v19;
          unint64_t v6 = (CFNumberRef *)v22.i64[1];
        }
        v19.i64[0] = v11;
        v19.i64[1] = (uint64_t)v6;
        int64x2_t v22 = v15;
        unint64_t v16 = v20;
        unint64_t v20 = v23;
        unint64_t v23 = v16;
        uint64_t v21 = (int64x2_t *)v15.i64[0];
        sub_66EEC((uint64_t)&v21);
      }
      else
      {
        sub_A3084(v6++, *v4);
      }
      v19.i64[1] = (uint64_t)v6;
      ++v4;
    }
    while (v4 != (int *)v5);
  }
  CFArrayRef v17 = sub_66CFC((uint64_t **)&v19);
  uint64_t v21 = &v19;
  sub_66E4C((void ***)&v21);
  return v17;
}

void sub_A2FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a9;
  sub_66E4C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_A3038(uint64_t a1, const void **a2)
{
  sub_22210((CFStringRef *)a1, "peak power budget range");
  CFTypeID v4 = *a2;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 8) = v4;
  return a1;
}

CFNumberRef *sub_A3084(CFNumberRef *a1, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_A3110(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A313C(unsigned int a1)
{
  uint64_t result = 20 * a1;
  if ((result & 0xFFFFFFFF00000000) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_A3224(exception, "arithmetic multiplication overflow");
  }
  return result;
}

void sub_A31A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A31B4(int a1)
{
  BOOL v1 = __CFADD__(a1, 12);
  uint64_t result = (a1 + 12);
  if (v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_A3224(exception, "arithmetic addition overflow");
  }
  return result;
}

void sub_A3210(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_A3224(std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  return result;
}

uint64_t sub_A3258(uint64_t a1, AudioObjectPropertyAddress *a2, uint64_t a3, void *a4)
{
  sub_4C264(a1);
  if (((*(uint64_t (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)a1 + 16))(a1, a2) & 1) == 0)
  {
    unint64_t v16 = (os_log_t *)sub_32A48(13);
    CFArrayRef v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v24);
      uint64_t v18 = v27 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)__int16 v29 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v29[8] = 1024;
      *(_DWORD *)&v29[10] = 1161;
      __int16 v30 = 2080;
      BOOL v31 = v18;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    unint64_t v20 = (os_log_t *)sub_32A48(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v24);
      int64x2_t v22 = v27 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)__int16 v29 = "AggregateDevice_CommonBase.cpp";
      *(_WORD *)&v29[8] = 1024;
      *(_DWORD *)&v29[10] = 1162;
      __int16 v30 = 2080;
      BOOL v31 = v22;
      __int16 v32 = 1024;
      int v33 = a3;
      __int16 v34 = 2048;
      int v35 = a4;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v23 = &off_6414D8;
    v23[2] = 561211770;
  }
  int mSelector = a2->mSelector;
  uint64_t v9 = 4;
  if ((int)a2->mSelector > 1752657011)
  {
    if (mSelector > 1936744802)
    {
      if (mSelector > 1953002092)
      {
        if (mSelector > 1986225265)
        {
          if (mSelector > 1986361443)
          {
            if (mSelector == 1986361444) {
              return v9;
            }
            int v12 = 2004053366;
          }
          else
          {
            if (mSelector == 1986225266) {
              goto LABEL_96;
            }
            int v12 = 1986225268;
          }
        }
        else
        {
          if (mSelector > 1953719147)
          {
            if (mSelector == 1953719148) {
              return v9;
            }
            int v10 = 1969844082;
            goto LABEL_104;
          }
          if (mSelector == 1953002093) {
            goto LABEL_96;
          }
          int v12 = 1953002354;
        }
        goto LABEL_95;
      }
      if (mSelector <= 1937138531)
      {
        switch(mSelector)
        {
          case 1936744803:
            return v9;
          case 1936876644:
            return sub_A3DB0(a1, a2, a3, (uint64_t)a4);
          case 1936879204:
            return sub_A3FC0(a1, a2, a3, (uint64_t)a4);
          default:
            goto LABEL_121;
        }
      }
      if (mSelector <= 1952997987)
      {
        if (mSelector == 1937138532) {
          goto LABEL_96;
        }
        int v12 = 1937204590;
        goto LABEL_95;
      }
      if (mSelector == 1952997988) {
        return 8;
      }
      int v11 = 1952998002;
    }
    else
    {
      if (mSelector <= 1885631345)
      {
        if (mSelector > 1819569762)
        {
          if (mSelector > 1869575793)
          {
            if (mSelector == 1869575794)
            {
              if (a2->mScope != 1768845428) {
                return 0;
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 0;
              LOBYTE(__p[0]) = 0;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint8_t *, void **, void, void))(*(void *)a1 + 392))(a1, 1685287015, 1818980210, buf, __p, 0, 0))
              {
                return *(unsigned int *)buf;
              }
              else
              {
                return 4;
              }
            }
            int v10 = 1885434482;
            goto LABEL_104;
          }
          if (mSelector == 1819569763) {
            return v9;
          }
          if (mSelector == 1869574756) {
            return 16 * (a2->mScope == 1768845428);
          }
          goto LABEL_121;
        }
        if (mSelector == 1752657012 || mSelector == 1769302372) {
          return v9;
        }
        int v12 = 1818326127;
        goto LABEL_95;
      }
      if (mSelector > 1919773027)
      {
        if (mSelector <= 1935762280)
        {
          if (mSelector == 1919773028) {
            return 8;
          }
          int v12 = 1934456180;
          goto LABEL_95;
        }
        if (mSelector == 1935762281) {
          goto LABEL_96;
        }
        int v11 = 1935962992;
      }
      else
      {
        if (mSelector > 1886413425)
        {
          if (mSelector == 1886413426) {
            return 8;
          }
          int v12 = 1886807154;
          goto LABEL_95;
        }
        if (mSelector == 1885631346) {
          goto LABEL_96;
        }
        int v11 = 1886413412;
      }
    }
LABEL_108:
    if (mSelector == v11) {
      return 8;
    }
LABEL_121:
    AudioObjectID v15 = *(_DWORD *)(a1 + 128);
    return sub_A4BB0(v15, a2, a3, a4);
  }
  if (mSelector <= 1651664738)
  {
    if (mSelector <= 1634692198)
    {
      if (mSelector <= 1633907569)
      {
        if (mSelector <= 1633903464)
        {
          if (mSelector != 1165513555)
          {
            int v10 = 1633776747;
            goto LABEL_104;
          }
LABEL_96:
          sub_B680((uint64_t *)buf, (void *)(a1 + 184), "", 1227);
          uint64_t v14 = *(void *)&v29[4];
          if (*(uint8_t **)&v29[4] == buf)
          {
LABEL_99:
            uint64_t v9 = 0;
          }
          else
          {
            while (!(*(unsigned int (**)(void, AudioObjectPropertyAddress *))(**(void **)(v14 + 16)
                                                                                          + 16))(*(void *)(v14 + 16), a2))
            {
              uint64_t v14 = *(void *)(v14 + 8);
              if ((uint8_t *)v14 == buf) {
                goto LABEL_99;
              }
            }
            uint64_t v9 = (*(uint64_t (**)(void, AudioObjectPropertyAddress *, uint64_t, void *))(**(void **)(v14 + 16)
                                                                                                  + 32))(*(void *)(v14 + 16), a2, a3, a4);
          }
          sub_B8E4((uint64_t *)buf);
          return v9;
        }
        if (mSelector != 1633903465)
        {
          int v10 = 1633904999;
          goto LABEL_104;
        }
        return 8;
      }
      if (mSelector > 1633973867)
      {
        if (mSelector == 1633973868) {
          goto LABEL_96;
        }
        if (mSelector == 1634169456) {
          return (4 * *(_DWORD *)(a1 + 200));
        }
        goto LABEL_121;
      }
      if (mSelector == 1633907570) {
        return 8;
      }
      int v11 = 1633970532;
      goto LABEL_108;
    }
    if (mSelector <= 1635152992)
    {
      if (mSelector != 1634692199)
      {
        if (mSelector == 1634890859) {
          return v9;
        }
        int v10 = 1635020147;
        goto LABEL_104;
      }
      goto LABEL_96;
    }
    if ((mSelector - 1635152993) <= 0xE && ((1 << (mSelector - 97)) & 0x4015) != 0) {
      goto LABEL_96;
    }
    int v10 = 1650881394;
LABEL_104:
    if (mSelector != v10) {
      goto LABEL_121;
    }
    return v9;
  }
  if (mSelector <= 1684498540)
  {
    if (mSelector <= 1668576113)
    {
      if (mSelector == 1651664739) {
        goto LABEL_96;
      }
      if (mSelector != 1651798898)
      {
        int v10 = 1668047203;
        goto LABEL_104;
      }
      return 8;
    }
    if (mSelector > 1684365923)
    {
      if (mSelector == 1684365924) {
        goto LABEL_96;
      }
      int v12 = 1684370276;
    }
    else
    {
      if (mSelector == 1668576114) {
        goto LABEL_96;
      }
      int v12 = 1684103987;
    }
    goto LABEL_95;
  }
  if (mSelector > 1685087595)
  {
    if (mSelector <= 1685483629)
    {
      if (mSelector == 1685087596) {
        goto LABEL_96;
      }
      if (mSelector != 1685287011) {
        goto LABEL_121;
      }
      return sub_A4268(a4);
    }
    if (mSelector == 1685483630) {
      return v9;
    }
    int v12 = 1718383987;
LABEL_95:
    if (mSelector == v12) {
      goto LABEL_96;
    }
    goto LABEL_121;
  }
  if (mSelector <= 1684500588)
  {
    if (mSelector == 1684498541) {
      return v9;
    }
    int v10 = 1684498544;
    goto LABEL_104;
  }
  if (mSelector == 1684500589)
  {
    return sub_A43E0(a1, a2, a3, (unsigned int *)a4);
  }
  else
  {
    if (mSelector != 1684500594) {
      goto LABEL_121;
    }
    return sub_A47BC(a1, a2, a3, (unsigned int *)a4);
  }
}

void sub_A3D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A3DB0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 != 1936876644)
  {
    int v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      AudioObjectID v15 = "AggregateDevice_CommonBase.cpp";
      __int16 v16 = 1024;
      int v17 = 2934;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v14, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a2[1] == 1768845428) {
    uint64_t v7 = a1 + 472;
  }
  else {
    uint64_t v7 = a1 + 496;
  }
  if (*(void *)(v7 + 16) != 1)
  {
    unint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        AudioObjectID v15 = "AggregateDevice_CommonBase.cpp";
        __int16 v16 = 1024;
        int v17 = 2937;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty should have blocked this code path because the appropriate device list's size is not 1.\"", (uint8_t *)&v14, 0x12u);
      }
    }
  }
  return (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t))(**(void **)(*(void *)(v7 + 8) + 16) + 32))(*(void *)(*(void *)(v7 + 8) + 16), a2, a3, a4);
}

void sub_A3FA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A3FC0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  if (*a2 != 1936879204)
  {
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    int64x2_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      int64x2_t v22 = "AggregateDevice_CommonBase.cpp";
      __int16 v23 = 1024;
      int v24 = 2904;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v8 = sub_474DD8(a2[1]);
  uint64_t v9 = a1 + 544;
  uint64_t v10 = 520;
  if (v8) {
    uint64_t v10 = 544;
  }
  else {
    uint64_t v9 = a1 + 520;
  }
  uint64_t v11 = *(void *)(a1 + v10);
  uint64_t v12 = *(void *)(v9 + 8);
  while (v11 != v12)
  {
    if (*(unsigned char *)(*(void *)v11 + 200))
    {
      int v17 = sub_A313C(*(_DWORD *)(*(void *)(*(void *)v11 + 192) + 8));
      return sub_A31B4(v17);
    }
    v11 += 16;
  }
  if (a2[1] == 1768845428) {
    uint64_t v13 = a1 + 472;
  }
  else {
    uint64_t v13 = a1 + 496;
  }
  if (*(void *)(v13 + 16) != 1)
  {
    int v14 = (os_log_t *)sub_32A48(13);
    AudioObjectID v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        int v21 = 136315394;
        int64x2_t v22 = "AggregateDevice_CommonBase.cpp";
        __int16 v23 = 1024;
        int v24 = 2925;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"HasProperty should have blocked this code path because the appropriate device list's size is not 1.\"", (uint8_t *)&v21, 0x12u);
      }
    }
  }
  return (*(uint64_t (**)(void, _DWORD *, uint64_t, uint64_t))(**(void **)(*(void *)(v13 + 8) + 16)
                                                                       + 32))(*(void *)(*(void *)(v13 + 8) + 16), a2, a3, a4);
}

void sub_A424C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A4268(const void *a1)
{
  if (a1)
  {
    CFRetain(a1);
    sub_14E44(&v9, a1);
  }
  else
  {
    CFTypeRef v9 = 0;
  }
  sub_14E44(&v8, @"loudness normalizer reset");
  if (sub_152A4((const __CFString *)v9, (const __CFString **)&v8))
  {
    sub_14E44(&cf, @"haptics protection mode");
    BOOL v2 = sub_152A4((const __CFString *)v9, (const __CFString **)&cf) == kCFCompareEqualTo;
    if (cf) {
      CFRelease(cf);
    }
  }
  else
  {
    BOOL v2 = 1;
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v2)
  {
    uint64_t v3 = 4;
  }
  else
  {
    sub_14E44(&v8, @"dsp chain name");
    CFComparisonResult v4 = sub_152A4((const __CFString *)v9, (const __CFString **)&v8);
    if (v8) {
      CFRelease(v8);
    }
    if (v4)
    {
      sub_14E44(&v8, @"dsp chain active");
      CFComparisonResult v5 = sub_152A4((const __CFString *)v9, (const __CFString **)&v8);
      if (v8) {
        CFRelease(v8);
      }
      uint64_t v3 = 8 * (v5 == kCFCompareEqualTo);
    }
    else
    {
      uint64_t v3 = 8;
    }
  }
  if (v9) {
    CFRelease(v9);
  }
  return v3;
}

void sub_A43A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_6393C((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A43E0(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, unsigned int *a4)
{
  if (*(unsigned char *)(a1 + 296))
  {
    AudioObjectID v4 = *(_DWORD *)(a1 + 128);
    return sub_A4BB0(v4, a2, a3, a4);
  }
  else
  {
    if (a3 != 4 || !a4)
    {
      uint64_t v10 = (os_log_t *)sub_32A48(13);
      uint64_t v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v22);
        uint64_t v12 = v25 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        char v27 = "AggregateDevice_CommonBase.cpp";
        __int16 v28 = 1024;
        int v29 = 3298;
        __int16 v30 = 2080;
        BOOL v31 = v12;
        __int16 v32 = 1024;
        int v33 = 4;
        __int16 v34 = 2080;
        int v35 = "non-";
        __int16 v36 = 1024;
        UInt32 v37 = a3;
        __int16 v38 = 2048;
        unint64_t v39 = a4;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x3Cu);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 561211770;
    }
    AudioObjectPropertyScope mScope = a2->mScope;
    if (mScope != 1768845428 && mScope != 1869968496)
    {
      int v17 = (os_log_t *)sub_32A48(13);
      uint64_t v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        char v27 = "AggregateDevice_CommonBase.cpp";
        __int16 v28 = 1024;
        int v29 = 3299;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      int64x2_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v19, "Precondition failure.");
    }
    int v8 = *a4;
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 352))(a1, 1685287015, *a4, 0) & 1) == 0)
    {
      int v14 = (os_log_t *)sub_32A48(13);
      AudioObjectID v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        char v27 = "AggregateDevice_CommonBase.cpp";
        __int16 v28 = 1024;
        int v29 = 3303;
        __int16 v30 = 1024;
        LODWORD(v31) = v8;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"GetPropertyDataSizeForDSPGraphParameter() failed for parameterID = %u\"", buf, 0x18u);
      }
      __int16 v16 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v16 = &off_6414D8;
      v16[2] = 1852797029;
    }
    return 4;
  }
}

void sub_A47A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A47BC(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, unsigned int *a4)
{
  if (*(unsigned char *)(a1 + 296))
  {
    AudioObjectID v4 = *(_DWORD *)(a1 + 128);
    return sub_A4BB0(v4, a2, a3, a4);
  }
  else
  {
    if (a3 != 4 || !a4)
    {
      uint64_t v10 = (os_log_t *)sub_32A48(13);
      uint64_t v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)&a2->mSelector;
        AudioObjectPropertyElement mElement = a2->mElement;
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v22);
        uint64_t v12 = v25 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316674;
        char v27 = "AggregateDevice_CommonBase.cpp";
        __int16 v28 = 1024;
        int v29 = 3249;
        __int16 v30 = 2080;
        BOOL v31 = v12;
        __int16 v32 = 1024;
        int v33 = 4;
        __int16 v34 = 2080;
        int v35 = "non-";
        __int16 v36 = 1024;
        UInt32 v37 = a3;
        __int16 v38 = 2048;
        unint64_t v39 = a4;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
          buf,
          0x3Cu);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 561211770;
    }
    AudioObjectPropertyScope mScope = a2->mScope;
    if (mScope != 1768845428 && mScope != 1869968496)
    {
      int v17 = (os_log_t *)sub_32A48(13);
      uint64_t v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        char v27 = "AggregateDevice_CommonBase.cpp";
        __int16 v28 = 1024;
        int v29 = 3250;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      int64x2_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v19, "Precondition failure.");
    }
    LODWORD(__p[0]) = 0;
    LOBYTE(v22) = 0;
    uint64_t v8 = *a4;
    if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t *, void, BOOL))(*(void *)a1 + 392))(a1, 1685287015, v8, __p, &v22, 0, mScope != 1768845428) & 1) == 0)
    {
      int v14 = (os_log_t *)sub_32A48(13);
      AudioObjectID v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        char v27 = "AggregateDevice_CommonBase.cpp";
        __int16 v28 = 1024;
        int v29 = 3262;
        __int16 v30 = 1024;
        LODWORD(v31) = v8;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"GetPropertyDataSizeForDSPGraphProperty() failed for propertyID = %u\"", buf, 0x18u);
      }
      __int16 v16 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v16 = &off_6414D8;
      v16[2] = 1852797029;
    }
    return LODWORD(__p[0]);
  }
}

void sub_A4B94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A4BB0(AudioObjectID a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  UInt32 outDataSize = 0;
  OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(a1, a2, a3, a4, &outDataSize);
  if (PropertyDataSize)
  {
    uint64_t v7 = (os_log_t *)sub_32A48(16);
    p_int mSelector = &a2->mSelector;
    CFTypeRef v9 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v19, *p_mSelector);
      int v10 = v20;
      uint64_t v11 = (void **)v19[0];
      sub_2417C(__p, PropertyDataSize);
      uint64_t v12 = v19;
      if (v10 < 0) {
        uint64_t v12 = v11;
      }
      if (v18 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      __int16 v23 = "AggregateDevice_CommonBase.cpp";
      __int16 v24 = 1024;
      int v25 = 3393;
      __int16 v26 = 2080;
      char v27 = v12;
      __int16 v28 = 2080;
      int v29 = v13;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioObjectGetPropertyDataSize() for selector '%s' returned status '%s'.", buf, 0x26u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }
    int v14 = (os_log_t *)sub_32A48(13);
    AudioObjectID v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v23 = "AggregateDevice_CommonBase.cpp";
      __int16 v24 = 1024;
      int v25 = 3394;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Unable to determine the property's data size.\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = PropertyDataSize;
  }
  return outDataSize;
}

void sub_A4DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A4DE8(uint64_t a1, AudioObjectPropertyAddress *a2)
{
  sub_4C264(a1);
  uint64_t v4 = 0;
  int mSelector = a2->mSelector;
  if ((int)a2->mSelector <= 1718383986)
  {
    if (mSelector <= 1651664738)
    {
      if (mSelector <= 1634692198)
      {
        if (mSelector <= 1633907569)
        {
          if (mSelector <= 1633903464)
          {
            if (mSelector != 1165513555)
            {
              int v6 = 1633776747;
              goto LABEL_79;
            }
            goto LABEL_100;
          }
          if (mSelector != 1633903465)
          {
            int v6 = 1633904999;
            goto LABEL_79;
          }
          return v4;
        }
        if (mSelector <= 1633973867)
        {
          if (mSelector != 1633907570)
          {
            int v6 = 1633970532;
            goto LABEL_79;
          }
          return 1;
        }
        if (mSelector != 1633973868)
        {
          int v7 = 1634169456;
          goto LABEL_89;
        }
LABEL_100:
        sub_B680((uint64_t *)buf, (void *)(a1 + 184), "", 1006);
        uint64_t v10 = *(void *)&v34[4];
        if (*(uint8_t **)&v34[4] == buf)
        {
          uint64_t v4 = 0;
        }
        else
        {
          do
          {
            uint64_t v4 = (*(uint64_t (**)(void, AudioObjectPropertyAddress *))(**(void **)(v10 + 16) + 24))(*(void *)(v10 + 16), a2);
            if (v4) {
              break;
            }
            uint64_t v10 = *(void *)(v10 + 8);
          }
          while ((uint8_t *)v10 != buf);
        }
LABEL_105:
        sub_B8E4((uint64_t *)buf);
        return v4;
      }
      if (mSelector > 1635152992)
      {
        if ((mSelector - 1635152993) > 0xE || ((1 << (mSelector - 97)) & 0x4015) == 0)
        {
          int v7 = 1650881394;
          goto LABEL_89;
        }
        goto LABEL_100;
      }
      if (mSelector == 1634692199) {
        goto LABEL_100;
      }
      if (mSelector == 1634890859) {
        return 1;
      }
      int v7 = 1635020147;
LABEL_89:
      if (mSelector == v7) {
        return v4;
      }
      goto LABEL_123;
    }
    if (mSelector <= 1684498540)
    {
      if (mSelector > 1684103986)
      {
        if (mSelector > 1684365923)
        {
          if (mSelector == 1684365924) {
            goto LABEL_100;
          }
          int v8 = 1684370276;
        }
        else
        {
          if (mSelector == 1684103987) {
            goto LABEL_100;
          }
          int v8 = 1684304756;
        }
      }
      else
      {
        if (mSelector <= 1668047202)
        {
          if (mSelector != 1651664739)
          {
            int v7 = 1651798898;
            goto LABEL_89;
          }
          goto LABEL_100;
        }
        if (mSelector == 1668047203) {
          return v4;
        }
        int v8 = 1668576114;
      }
LABEL_99:
      if (mSelector != v8) {
        goto LABEL_123;
      }
      goto LABEL_100;
    }
    if (mSelector > 1685087595)
    {
      if (mSelector <= 1685287522)
      {
        if (mSelector != 1685087596)
        {
          int v6 = 1685287011;
          goto LABEL_79;
        }
        goto LABEL_100;
      }
      if (mSelector == 1685287523) {
        goto LABEL_100;
      }
      int v8 = 1685483630;
      goto LABEL_99;
    }
    if (mSelector <= 1684500588)
    {
      if (mSelector == 1684498541) {
        return v4;
      }
      int v7 = 1684498544;
      goto LABEL_89;
    }
    if (mSelector == 1684500589) {
      return 1;
    }
    int v6 = 1684500594;
LABEL_79:
    if (mSelector == v6) {
      return 1;
    }
LABEL_123:
    Boolean outIsSettable = 0;
    OSStatus IsPropertySettable = AudioObjectIsPropertySettable(*(_DWORD *)(a1 + 128), a2, &outIsSettable);
    if (IsPropertySettable)
    {
      uint64_t v22 = (os_log_t *)sub_32A48(16);
      __int16 v23 = *v22;
      if (*v22)
      {
        if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v30, a2->mSelector);
          int v24 = v31;
          int v25 = (void **)v30[0];
          sub_2417C(__p, IsPropertySettable);
          __int16 v26 = v30;
          if (v24 < 0) {
            __int16 v26 = v25;
          }
          if (v29 >= 0) {
            char v27 = __p;
          }
          else {
            char v27 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)__int16 v34 = "AggregateDevice_CommonBase.cpp";
          *(_WORD *)&v34[8] = 1024;
          *(_DWORD *)&v34[10] = 1147;
          __int16 v35 = 2080;
          __int16 v36 = v26;
          __int16 v37 = 2080;
          __int16 v38 = v27;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d AudioObjectIsPropertySettable() for selector '%s' returned status '%s'.", buf, 0x26u);
          if (v29 < 0) {
            operator delete(__p[0]);
          }
          if (v31 < 0) {
            operator delete(v30[0]);
          }
        }
      }
    }
    return outIsSettable != 0;
  }
  if (mSelector <= 1935962991)
  {
    if (mSelector <= 1885434481)
    {
      if (mSelector <= 1818326126)
      {
        if (mSelector == 1718383987) {
          goto LABEL_100;
        }
        if (mSelector == 1735682404) {
          return v4;
        }
        int v7 = 1752657012;
        goto LABEL_89;
      }
      if (mSelector <= 1869574755)
      {
        if (mSelector != 1818326127)
        {
          int v7 = 1819569763;
          goto LABEL_89;
        }
        goto LABEL_100;
      }
      if (mSelector == 1869574756)
      {
        if (a2->mScope != 1768845428) {
          return 0;
        }
      }
      else
      {
        if (mSelector != 1869575794) {
          goto LABEL_123;
        }
        if (a2->mScope != 1768845428) {
          return 0;
        }
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 0;
      LOBYTE(v30[0]) = 0;
      unsigned int v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint8_t *, void **, void, void))(*(void *)a1 + 392))(a1, 1685287015, 1818980210, buf, v30, 0, 0);
      if (LOBYTE(v30[0])) {
        return v18;
      }
      else {
        return 0;
      }
    }
    if (mSelector > 1886807153)
    {
      if (mSelector <= 1934456179)
      {
        if (mSelector != 1886807154)
        {
          int v6 = 1919773028;
          goto LABEL_79;
        }
        goto LABEL_100;
      }
      if (mSelector == 1934456180) {
        goto LABEL_100;
      }
      int v8 = 1935762281;
      goto LABEL_99;
    }
    if (mSelector <= 1886413411)
    {
      if (mSelector == 1885434482) {
        return v4;
      }
      int v8 = 1885631346;
      goto LABEL_99;
    }
    if (mSelector != 1886413412)
    {
      int v7 = 1886413426;
      goto LABEL_89;
    }
    AudioObjectPropertyScope mScope = a2->mScope;
    p_AudioObjectPropertyScope mScope = (int *)&a2->mScope;
    if (mScope == 1869968496)
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 1347437175;
      return sub_45A040((int *)buf, p_mScope, (void *)(a1 + 184));
    }
    return 0;
  }
  if (mSelector > 1953002092)
  {
    if (mSelector > 1986225265)
    {
      if (mSelector > 1986361443)
      {
        if (mSelector == 1986361444) {
          return 1;
        }
        int v8 = 2004053366;
      }
      else
      {
        if (mSelector == 1986225266) {
          goto LABEL_100;
        }
        int v8 = 1986225268;
      }
      goto LABEL_99;
    }
    if (mSelector <= 1953719147)
    {
      if (mSelector == 1953002093) {
        goto LABEL_100;
      }
      int v8 = 1953002354;
      goto LABEL_99;
    }
    if (mSelector != 1953719148)
    {
      int v6 = 1969844082;
      goto LABEL_79;
    }
    if (a2->mScope == 1869968496)
    {
      sub_B680((uint64_t *)buf, (void *)(a1 + 184), "", 1045);
      LODWORD(v30[0]) = 0;
      LOBYTE(__p[0]) = 0;
      int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, void **, void, uint64_t))(*(void *)a1 + 392))(a1, 1987013737, 64001, v30, __p, 0, 1);
      int v15 = LOBYTE(__p[0]);
      unsigned int v16 = sub_A598C(*(uint64_t *)&v34[4], (uint64_t)buf);
      if (v15) {
        int v17 = v14;
      }
      else {
        int v17 = 0;
      }
      uint64_t v4 = v17 | v16;
      goto LABEL_105;
    }
    return 0;
  }
  if (mSelector > 1937138531)
  {
    if (mSelector <= 1952997987)
    {
      if (mSelector == 1937138532) {
        goto LABEL_100;
      }
      int v8 = 1937204590;
      goto LABEL_99;
    }
    if (mSelector != 1952997988)
    {
      int v7 = 1952998002;
      goto LABEL_89;
    }
    AudioObjectPropertyScope v20 = a2->mScope;
    int64x2_t v19 = (int *)&a2->mScope;
    if (v20 == 1869968496)
    {
      if (sub_209270()) {
        return 1;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 1416118903;
      return sub_45A040((int *)buf, v19, (void *)(a1 + 184));
    }
    return 0;
  }
  if (mSelector <= 1936876643)
  {
    if (mSelector == 1935962992) {
      return v4;
    }
    int v7 = 1936744803;
    goto LABEL_89;
  }
  if (mSelector != 1936876644 && mSelector != 1936879204) {
    goto LABEL_123;
  }

  return sub_A57B8(a1, a2);
}

void sub_A5780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A57B8(uint64_t a1, _DWORD *a2)
{
  if (*a2 != 1936876644 && *a2 != 1936879204)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    CFTypeRef v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        uint64_t v12 = "AggregateDevice_CommonBase.cpp";
        __int16 v13 = 1024;
        int v14 = 2967;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v3 = a2[1];
  if (v3 != 1869968496 && v3 != 1768845428) {
    return 0;
  }
  uint64_t v5 = v3 == 1768845428 ? a1 + 472 : a1 + 496;
  if (*(void *)(v5 + 16) != 1) {
    return 0;
  }
  int v6 = *(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 8) + 16) + 24);

  return v6();
}

void sub_A5970(_Unwind_Exception *exception_object)
{
}

uint64_t sub_A598C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v12 = v5;
  uint64_t v13 = v4;
  uint64_t v14 = v2;
  uint64_t v15 = v3;
  uint64_t v7 = a1;
  do
  {
    uint64_t v8 = *(void *)(v7 + 16);
    uint64_t v10 = 0x6F75747054547323;
    int v11 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v8 + 24))(v8, &v10);
    if (result) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7 != a2);
  return result;
}

uint64_t sub_A5A20(uint64_t a1, _DWORD *a2)
{
  if (*a2 != 1936876644 && *a2 != 1936879204)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    CFTypeRef v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        uint64_t v12 = "AggregateDevice_CommonBase.cpp";
        __int16 v13 = 1024;
        int v14 = 2950;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v3 = a2[1];
  if (v3 != 1869968496 && v3 != 1768845428) {
    return 0;
  }
  uint64_t v5 = v3 == 1768845428 ? a1 + 472 : a1 + 496;
  if (*(void *)(v5 + 16) != 1) {
    return 0;
  }
  int v6 = *(uint64_t (**)(void))(**(void **)(*(void *)(v5 + 8) + 16) + 16);

  return v6();
}

void sub_A5BD8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_A5BF4(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v12 = v5;
  uint64_t v13 = v4;
  uint64_t v14 = v2;
  uint64_t v15 = v3;
  uint64_t v7 = a1;
  do
  {
    uint64_t v8 = *(void *)(v7 + 16);
    uint64_t v10 = 0x6F75747054547323;
    int v11 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v8 + 16))(v8, &v10);
    if (result) {
      break;
    }
    uint64_t v7 = *(void *)(v7 + 8);
  }
  while (v7 != a2);
  return result;
}

uint64_t sub_A5C88(uint64_t a1)
{
  if (!MGGetBoolAnswer()
    || !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 352))(a1, 1685287015, 1852076912, 0)|| !(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 352))(a1, 1685287015, 1835623283, 0))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 352);

  return v2(a1, 1685287015, 1919247987, 0);
}

uint64_t sub_A5DA8(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 416))(v3);
  if (!v4) {
    return 0;
  }
  uint64_t v1 = sub_A5E54(v3, 2);
  if (v4) {
    sub_6C954((uint64_t)v3);
  }
  return v1;
}

void sub_A5E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    sub_6C954((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_A5E54(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    goto LABEL_17;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  uint64_t v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5 || (int v6 = *v5) == 0) {
LABEL_17:
  }
    sub_8251C("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v7 = v6[1];
    if (v7 == a2) {
      break;
    }
    if (v3.u32[0] > 1uLL)
    {
      if (v7 >= v2) {
        v7 %= v2;
      }
    }
    else
    {
      v7 &= v2 - 1;
    }
    if (v7 != v4) {
      goto LABEL_17;
    }
LABEL_16:
    int v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v6 + 4) != a2) {
    goto LABEL_16;
  }
  return *((unsigned __int8 *)v6 + 20);
}

uint64_t sub_A5F28(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void **)(a2 + 40);
  uint64_t v5 = (long long *)(a2 + 64);
  sub_86438(v7, a2 + 112);
  sub_220090(a1, v4, v5, (uint64_t)v7, *(void *)(a2 + 136), (void *)(a2 + 144), a2 + 168, *(_DWORD *)a2);
  sub_45F50(v7);
  *(void *)a1 = off_61F740;
  *(void *)(a1 + 416) = *(void *)(a2 + 8);
  sub_A603C((uint64_t *)(a1 + 424), a2 + 16);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 100);
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = a1 + 472;
  *(void *)(a1 + 480) = a1 + 472;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = a1 + 496;
  *(void *)(a1 + 504) = a1 + 496;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 568) = 850045863;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(void *)(a1 + 624) = 0;
  return a1;
}

void sub_A6018(_Unwind_Exception *a1)
{
  sub_22117C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_A603C(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = sub_A6138(i + 16);
    uint64_t v6 = *a1;
    *uint64_t v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_A60B0(_Unwind_Exception *a1)
{
  sub_A60C4(v1);
  _Unwind_Resume(a1);
}

void sub_A60C4(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint8x8_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_45F50(v3 + 2);
        operator delete(v3);
        uint8x8_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void *sub_A6138(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = 0;
  v2[1] = 0;
  sub_86438(v2 + 2, a1);
  return v2;
}

void sub_A6178(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A618C(uint64_t a1)
{
  *(void *)a1 = off_61F740;
  sub_4C264(a1);
  sub_329A4C(*(unsigned int *)(a1 + 128), *(OSStatus (__cdecl **)(AudioObjectID, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))(a1 + 416));
  sub_329688(*(_DWORD *)(a1 + 128));
  sub_63970((uint64_t *)(a1 + 240));
  uint64_t v2 = *(void **)(a1 + 520);
  uint8x8_t v3 = *(void **)(a1 + 528);
  while (v2 != v3)
  {
    uint64_t v4 = (std::__shared_weak_count *)v2[1];
    void *v2 = 0;
    v2[1] = 0;
    if (v4) {
      sub_4636C(v4);
    }
    v2 += 2;
  }
  uint64_t v5 = *(void **)(a1 + 544);
  uint64_t v6 = *(void **)(a1 + 552);
  while (v5 != v6)
  {
    unint64_t v7 = (std::__shared_weak_count *)v5[1];
    *uint64_t v5 = 0;
    v5[1] = 0;
    if (v7) {
      sub_4636C(v7);
    }
    v5 += 2;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 568));
  CFTypeRef v9 = (void **)(a1 + 544);
  sub_638B4(&v9);
  CFTypeRef v9 = (void **)(a1 + 520);
  sub_638B4(&v9);
  sub_45F50((void *)(a1 + 496));
  sub_45F50((void *)(a1 + 472));
  sub_A60C4((uint64_t *)(a1 + 424));
  sub_22117C(a1);
  return a1;
}

void sub_A64D4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_A64E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_A64F4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

void sub_A6504(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0xA6510);
  }
  sub_564E4(a1);
}

uint64_t sub_A6520(uint64_t a1)
{
  sub_B680(&v5, (void *)(a1 + 184), "", 2084);
  for (uint64_t i = v6; &v5 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v2 = i[2];
    uint8x8_t v3 = (std::__shared_weak_count *)i[3];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 160))(v2);
    if (v3) {
      sub_4636C(v3);
    }
  }
  sub_B8E4(&v5);
  return 0;
}

void sub_A6610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_4636C(v2);
  }
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_A6634(uint64_t a1)
{
  sub_B680(&v5, (void *)(a1 + 184), "", 2112);
  for (uint64_t i = v6; &v5 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v2 = i[2];
    uint8x8_t v3 = (std::__shared_weak_count *)i[3];
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 168))(v2);
    if (v3) {
      sub_4636C(v3);
    }
  }
  sub_B8E4(&v5);
  return 0;
}

void sub_A6724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_4636C(v2);
  }
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_A6748(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v7 = 0;
  unsigned int v8 = 0;
  buf[0] = 0;
  *(void *)((char *)&v38 + 4) = a2;
  while (1)
  {
    HIDWORD(v38) = v7;
    if (!sub_329E34((uint64_t)buf)) {
      return;
    }
    uint64_t v9 = sub_329E34((uint64_t)buf);
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)v9 + 88))(v9, 0)) {
      break;
    }
LABEL_19:
    ++v7;
  }
  (*(void (**)(CFStringRef *__return_ptr, uint64_t))(*(void *)v9 + 128))(theString, v9);
  sub_21B7C(__p, theString[0]);
  unint64_t v10 = v36;
  if ((v36 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10 == 7)
  {
    int v11 = (void **)__p[0];
    if ((v36 & 0x80u) == 0) {
      int v11 = __p;
    }
    int v12 = *(_DWORD *)v11;
    int v13 = *(_DWORD *)((char *)v11 + 3);
    BOOL v15 = v12 == 1634037843 && v13 == 1919249249;
    if ((char)v36 < 0) {
      goto LABEL_16;
    }
  }
  else
  {
    BOOL v15 = 0;
    if ((char)v36 < 0) {
LABEL_16:
    }
      operator delete(__p[0]);
  }
  sub_72924((uint64_t)theString);
  uint64_t v16 = *(void *)v9;
  if (!v15)
  {
    v8 += (*(uint64_t (**)(uint64_t, void))(v16 + 88))(v9, 0);
    goto LABEL_19;
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v16 + 312))(v9);
  BOOL v19 = (v17 & 0xFF00000000) != 0 && v17 == 0;
  AudioObjectPropertyScope v20 = *(uint64_t **)(a4 + 8);
  if (!v20)
  {
LABEL_33:
    int v22 = 1;
    goto LABEL_35;
  }
  while (2)
  {
    unsigned int v21 = *((_DWORD *)v20 + 7);
    if (v21 > 0x7073706B)
    {
LABEL_32:
      AudioObjectPropertyScope v20 = (uint64_t *)*v20;
      if (!v20) {
        goto LABEL_33;
      }
      continue;
    }
    break;
  }
  if (v21 != 1886613611)
  {
    ++v20;
    goto LABEL_32;
  }
  int v22 = 0;
LABEL_35:
  if (sub_209B38())
  {
LABEL_44:
    BOOL v24 = 1;
  }
  else
  {
    int v23 = a1[70];
    BOOL v24 = 1;
    if (v23 > 1987077986)
    {
      if (v23 != 1987077987 && v23 != 1987081839)
      {
        int v25 = 1987081833;
        goto LABEL_42;
      }
      goto LABEL_43;
    }
    if (v23 == 1768057203) {
      goto LABEL_43;
    }
    int v25 = 1919776355;
LABEL_42:
    if (v23 == v25)
    {
LABEL_43:
      if ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 152))(a1)) {
        goto LABEL_44;
      }
      sub_3CD68C();
      BOOL v24 = qword_65E380 == 1;
    }
  }
  if (((v19 | v22) & 1) == 0 && v24)
  {
    BOOL v26 = v8 < *(_DWORD *)(*(void *)(a3 + 16) + 8);
    char v27 = (os_log_t *)sub_32A48(16);
    __int16 v28 = *v27;
    if (v26)
    {
      if (v28 && os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = *(_DWORD *)(*(void *)(a3 + 16) + 4 * v8 + 12);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&long long v38 = "AggregateDevice_CommonBase.cpp";
        WORD4(v38) = 1024;
        *(_DWORD *)((char *)&v38 + 10) = 2184;
        HIWORD(v38) = 1024;
        unsigned int v39 = v8;
        __int16 v40 = 1024;
        int v41 = v29;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Speaker telemetry is at index %u, input stream usage mask is %u", buf, 0x1Eu);
      }
      if (!*(_DWORD *)(*(void *)(a3 + 16) + 4 * v8 + 12))
      {
        __int16 v30 = (os_log_t *)sub_32A48(13);
        char v31 = *v30;
        if (*v30)
        {
          if (os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            *(void *)&long long v38 = "AggregateDevice_CommonBase.cpp";
            WORD4(v38) = 1024;
            *(_DWORD *)((char *)&v38 + 10) = 2186;
            _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Speaker is in device topology, but telemetry stream usage is off\"", buf, 0x12u);
          }
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Speaker is in device topology, but telemetry stream usage is off");
      }
    }
    else if (v28 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      int v33 = *(_DWORD *)(*(void *)(a3 + 16) + 8);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&long long v38 = "AggregateDevice_CommonBase.cpp";
      WORD4(v38) = 1024;
      *(_DWORD *)((char *)&v38 + 10) = 2180;
      HIWORD(v38) = 1024;
      unsigned int v39 = v8;
      __int16 v40 = 1024;
      int v41 = v33;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Telemetry stream index %u is inconsistent with stream usage size %u", buf, 0x1Eu);
    }
  }
}

void sub_A6BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

BOOL sub_A6C28(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) != 1819304813)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      uint64_t v5 = "CAStreamBasicDescription.h";
      __int16 v6 = 1024;
      int v7 = 234;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  PackednessIsSignificant only applies for PCM", (uint8_t *)&v4, 0x12u);
    }
    __break(1u);
  }
  unsigned int v1 = *(_DWORD *)(a1 + 24);
  if (v1)
  {
    if ((*(unsigned char *)(a1 + 12) & 0x20) != 0)
    {
      unsigned int v2 = 1;
    }
    else
    {
      unsigned int v2 = *(_DWORD *)(a1 + 28);
      if (!v2)
      {
        unsigned int v1 = 0;
        return v1 != *(_DWORD *)(a1 + 32);
      }
    }
    unsigned int v1 = 8 * (v1 / v2);
  }
  return v1 != *(_DWORD *)(a1 + 32);
}

uint64_t sub_A6D24(_DWORD *a1, int a2)
{
  uint64_t result = a1[3];
  if (a1[2] == 1819304813)
  {
    unsigned int v4 = result & 0x7FFFFFFF;
    if ((result & 0x7FFFFFFF) == 0) {
      unsigned int v4 = result;
    }
    if (a2) {
      unsigned int v5 = v4;
    }
    else {
      unsigned int v5 = v4 & 0xFFFFFFBF;
    }
    if (!sub_A6C28((uint64_t)a1)) {
      v5 |= 8u;
    }
    BOOL v6 = sub_A6C28((uint64_t)a1);
    unsigned int v7 = a1[8];
    if (!v6 && (v7 & 7) == 0) {
      v5 &= ~0x10u;
    }
    unsigned int v8 = v5 & 0xFFFFFFFB;
    if ((v5 & 1) == 0) {
      unsigned int v8 = v5;
    }
    BOOL v9 = (v8 & 8) == 0 || v7 > 8;
    unsigned int v10 = v8 & 2;
    if (v9) {
      unsigned int v10 = v8;
    }
    if (a1[7] == 1) {
      v10 &= ~0x20u;
    }
    if (v10) {
      return v10;
    }
    else {
      return 0x80000000;
    }
  }
  return result;
}

BOOL sub_A6DD8(_DWORD *a1, _DWORD *a2, unsigned int a3)
{
  double v4 = *(double *)a1;
  if ((a3 & 1) == 0)
  {
    if (v4 == *(double *)a2)
    {
      int v5 = a1[2];
      if (v5 == a2[2] && a1[4] == a2[4] && a1[5] == a2[5] && a1[7] == a2[7] && a1[8] == a2[8]) {
        goto LABEL_36;
      }
    }
    return 0;
  }
  if (v4 != 0.0 && *(double *)a2 != 0.0 && v4 != *(double *)a2) {
    return 0;
  }
  int v5 = a1[2];
  if (v5)
  {
    int v7 = a2[2];
    if (v7)
    {
      if (v5 != v7) {
        return 0;
      }
    }
  }
  int v8 = a1[4];
  if (v8)
  {
    int v9 = a2[4];
    if (v9)
    {
      if (v8 != v9) {
        return 0;
      }
    }
  }
  int v10 = a1[5];
  if (v10)
  {
    int v11 = a2[5];
    if (v11)
    {
      if (v10 != v11) {
        return 0;
      }
    }
  }
  int v12 = a1[6];
  if (v12)
  {
    int v13 = a2[6];
    if (v13)
    {
      if (v12 != v13) {
        return 0;
      }
    }
  }
  int v14 = a1[7];
  if (v14)
  {
    int v15 = a2[7];
    if (v15)
    {
      if (v14 != v15) {
        return 0;
      }
    }
  }
  int v16 = a1[8];
  if (v16)
  {
    int v17 = a2[8];
    if (v17)
    {
      if (v16 != v17) {
        return 0;
      }
    }
  }
  int32x4_t v19 = *(int32x4_t *)(a2 + 2);
  v19.i64[1] = *((void *)a1 + 1);
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v19)))) {
    return 1;
  }
LABEL_36:
  if (v5 == 1819304813)
  {
    int v20 = (a3 >> 1) & 1;
    int v21 = sub_A6D24(a1, v20);
    return v21 == sub_A6D24(a2, v20);
  }
  else
  {
    return a1[3] == a2[3];
  }
}

void sub_A6F94(uint64_t a1)
{
  unsigned int v2 = (std::recursive_mutex *)(a1 + 80);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 80));
  uint8x8_t v3 = *(const __CFDictionary ***)(a1 + 144);
  double v4 = *(const __CFDictionary ***)(a1 + 152);
  if (v3 != v4)
  {
    LOBYTE(v43) = 0;
    char v44 = 0;
    LOBYTE(v41) = 0;
    char v42 = 0;
    do
    {
      if (*v3)
      {
        sub_A75B0(v3, (const UInt8 *)"Avg Watts Measured", (uint64_t)&v43);
        sub_A75B0(v3, (const UInt8 *)"Avg Watts Modelled", (uint64_t)&v41);
      }
      ++v3;
    }
    while (v3 != v4);
    int64x2_t v48 = 0uLL;
    v49[0] = 0;
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
    if (v44)
    {
      float v45 = v43 / (float)(unint64_t)v5;
      sub_A74DC((uint64_t)&v46, "Avg Watts Measured", (int *)&v45);
      uint64_t v6 = v48.i64[1];
      if (v48.i64[1] >= v49[0])
      {
        uint64_t v7 = (v48.i64[1] - v48.i64[0]) >> 4;
        unint64_t v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60) {
          sub_60548();
        }
        uint64_t v9 = v49[0] - v48.i64[0];
        if ((v49[0] - v48.i64[0]) >> 3 > v8) {
          unint64_t v8 = v9 >> 3;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v8;
        }
        CFStringRef v52 = v49;
        int v11 = (char *)sub_10724(v10);
        int v12 = (CFTypeRef *)&v11[16 * v7];
        CFDictionaryRef v51 = &v11[16 * v13];
        CFTypeRef *v12 = v46;
        CFTypeRef v46 = 0;
        v12[1] = cf;
        CFTypeRef cf = 0;
        int v14 = v12 + 2;
        *(void *)&buf[16] = v12 + 2;
        int v15 = (void *)v48.i64[1];
        int v16 = (void *)v48.i64[0];
        if (v48.i64[1] == v48.i64[0])
        {
          int64x2_t v18 = vdupq_n_s64(v48.u64[1]);
        }
        else
        {
          do
          {
            int v17 = (const void *)*(v15 - 2);
            v15 -= 2;
            *(v12 - 2) = v17;
            v12 -= 2;
            void *v15 = 0;
            v12[1] = (CFTypeRef)v15[1];
            v15[1] = 0;
          }
          while (v15 != v16);
          int64x2_t v18 = v48;
          int v14 = *(void **)&buf[16];
        }
        v48.i64[0] = (uint64_t)v12;
        v48.i64[1] = (uint64_t)v14;
        *(int64x2_t *)&buf[8] = v18;
        int32x4_t v19 = (char *)v49[0];
        v49[0] = v51;
        CFDictionaryRef v51 = v19;
        *(void *)AudioObjectPropertyAddress buf = v18.i64[0];
        sub_16358((uint64_t)buf);
        v48.i64[1] = (uint64_t)v14;
        if (cf) {
          CFRelease(cf);
        }
        if (v46) {
          CFRelease(v46);
        }
      }
      else
      {
        *(void *)v48.i64[1] = v46;
        *(void *)(v6 + 8) = cf;
        v48.i64[1] = v6 + 16;
      }
    }
    if (v42)
    {
      float v45 = v41 / (float)(unint64_t)v5;
      sub_A74DC((uint64_t)&v46, "Avg Watts Modelled", (int *)&v45);
      uint64_t v20 = v48.i64[1];
      if (v48.i64[1] >= v49[0])
      {
        uint64_t v21 = (v48.i64[1] - v48.i64[0]) >> 4;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 60) {
          sub_60548();
        }
        uint64_t v23 = v49[0] - v48.i64[0];
        if ((v49[0] - v48.i64[0]) >> 3 > v22) {
          unint64_t v22 = v23 >> 3;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        CFStringRef v52 = v49;
        int v25 = (char *)sub_10724(v24);
        char v27 = (CFTypeRef *)&v25[16 * v21];
        CFTypeRef *v27 = v46;
        CFTypeRef v46 = 0;
        v27[1] = cf;
        CFTypeRef cf = 0;
        __int16 v28 = v27 + 2;
        int v29 = (void *)v48.i64[1];
        __int16 v30 = (void *)v48.i64[0];
        if (v48.i64[1] == v48.i64[0])
        {
          int64x2_t v32 = vdupq_n_s64(v48.u64[1]);
        }
        else
        {
          do
          {
            char v31 = (const void *)*(v29 - 2);
            v29 -= 2;
            *(v27 - 2) = v31;
            v27 -= 2;
            *int v29 = 0;
            v27[1] = (CFTypeRef)v29[1];
            v29[1] = 0;
          }
          while (v29 != v30);
          int64x2_t v32 = v48;
        }
        v48.i64[0] = (uint64_t)v27;
        v48.i64[1] = (uint64_t)v28;
        *(int64x2_t *)&buf[8] = v32;
        int v33 = (char *)v49[0];
        v49[0] = &v25[16 * v26];
        CFDictionaryRef v51 = v33;
        *(void *)AudioObjectPropertyAddress buf = v32.i64[0];
        sub_16358((uint64_t)buf);
        v48.i64[1] = (uint64_t)v28;
        if (cf) {
          CFRelease(cf);
        }
        if (v46) {
          CFRelease(v46);
        }
      }
      else
      {
        *(void *)v48.i64[1] = v46;
        *(void *)(v20 + 8) = cf;
        v48.i64[1] = v20 + 16;
      }
    }
    CFDictionaryRef v34 = sub_4D69C((void ***)&v48);
    CFDictionaryRef v40 = v34;
    *(void *)AudioObjectPropertyAddress buf = &v48;
    sub_14F84((void ***)buf);
    sub_A7800(&v40);
    uint64_t v35 = *(void *)(a1 + 144);
    for (uint64_t i = *(void *)(a1 + 152); i != v35; i -= 8)
    {
      __int16 v37 = *(const void **)(i - 8);
      sub_A7860(v37);
    }
    *(void *)(a1 + 152) = v35;
    uint64_t v38 = sub_32A48(13);
    if (*(unsigned char *)(v38 + 8))
    {
      unsigned int v39 = *(NSObject **)v38;
      if (*(void *)v38)
      {
        if (os_log_type_enabled(*(os_log_t *)v38, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "PowerLogManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 357;
          _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d PowerLogManager entries flushed.", buf, 0x12u);
        }
      }
    }
    if (v34) {
      CFRelease(v34);
    }
  }
  std::recursive_mutex::unlock(v2);
}

void sub_A73CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_A7448(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 40);
  v2[0] = *(void *)(a1 + 32);
  v2[1] = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_153B0(v2);
  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_A74B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_A74CC(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_4636C(v1);
  }
}

uint64_t sub_A74DC(uint64_t a1, char *a2, int *a3)
{
  sub_22210((CFStringRef *)a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *(void *)(a1 + 8) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  return a1;
}

void sub_A7574(_Unwind_Exception *a1)
{
  uint8x8_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_60594((const void **)v1);
  _Unwind_Resume(a1);
}

void sub_A75B0(const __CFDictionary **a1, const UInt8 *__s, uint64_t a3)
{
  CFDictionaryRef v3 = *a1;
  if (!*a1) {
    goto LABEL_20;
  }
  CFNumberRef v5 = __s;
  size_t v7 = strlen((const char *)__s);
  if (v5)
  {
    CFStringRef v8 = CFStringCreateWithBytes(0, v5, v7, 0x8000100u, 0);
    if (!v8)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      goto LABEL_23;
    }
  }
  else
  {
    CFStringRef v8 = 0;
  }
  int v10 = CFDictionaryContainsKey(v3, v8);
  if (v8) {
    CFRelease(v8);
  }
  if (v10)
  {
    CFDictionaryRef v11 = *a1;
    if (v11)
    {
      size_t v12 = strlen((const char *)v5);
      if (v5)
      {
        CFNumberRef v5 = (const UInt8 *)CFStringCreateWithBytes(0, v5, v12, 0x8000100u, 0);
        if (!v5)
        {
          uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v13, "Could not construct");
        }
      }
      int Value = CFDictionaryGetValue(v11, v5);
      if (v5) {
        CFRelease(v5);
      }
      if (Value)
      {
        float v15 = sub_A7880((uint64_t)Value);
        if (*(unsigned char *)(a3 + 4))
        {
          *(float *)a3 = v15 + *(float *)a3;
        }
        else
        {
          *(float *)a3 = v15;
          *(unsigned char *)(a3 + 4) = 1;
        }
        return;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_68BF0(exception);
LABEL_23:
    }
LABEL_20:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_66F3C(exception);
    goto LABEL_23;
  }
}

void sub_A77EC(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_6393C((const void **)va);
  JUMPOUT(0xA77F8);
}

CFDictionaryRef sub_A7800(const __CFDictionary **a1)
{
  CFDictionaryRef result = *a1;
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetCount(result);
    if (result)
    {
      CFDictionaryRef v3 = *a1;
      return (const __CFDictionary *)_PLLogRegisteredEvent(26, @"Speaker Amp", v3, 0);
    }
  }
  return result;
}

void sub_A7860(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

float sub_A7880(uint64_t a1)
{
  unint64_t v1 = sub_9976C(a1);
  if (!HIDWORD(v1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_65D88(exception);
  }
  return *(float *)&v1;
}

void sub_A78DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A78F0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    double v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    sub_A7860(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_A7940(void ***a1)
{
  unint64_t v1 = *a1;
  unsigned int v2 = (char *)**a1;
  if (v2)
  {
    double v4 = (char *)v1[1];
    CFNumberRef v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        sub_A7860(v6);
      }
      while (v4 != v2);
      CFNumberRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_A79C0(uint64_t a1)
{
  sub_A6F94(*(void *)(a1 + 24));
  uint64_t v2 = *(void *)(a1 + 24);
  int64x2_t v39 = 0uLL;
  CFDictionaryRef v40 = 0;
  sub_21C8C(&__p, "measuredWattsParameterID");
  uint64_t v3 = v2 + 56;
  int v4 = *(_DWORD *)sub_15BCC(v3, &__p);
  if (v42.i8[15] < 0) {
    operator delete(__p);
  }
  if (v4 != -1)
  {
    int v36 = 0;
    sub_A74DC((uint64_t)&v37, "Avg Watts Measured", &v36);
    uint64_t v5 = v39.i64[1];
    if (v39.i64[1] >= (unint64_t)v40)
    {
      uint64_t v6 = (v39.i64[1] - v39.i64[0]) >> 4;
      unint64_t v7 = v6 + 1;
      if ((unint64_t)(v6 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v8 = (uint64_t)&v40[-v39.i64[0]];
      if ((uint64_t)&v40[-v39.i64[0]] >> 3 > v7) {
        unint64_t v7 = v8 >> 3;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v7;
      }
      char v44 = &v40;
      int v10 = (char *)sub_10724(v9);
      CFDictionaryRef v11 = (CFTypeRef *)&v10[16 * v6];
      float v43 = &v10[16 * v12];
      CFTypeRef *v11 = v37;
      CFTypeRef v37 = 0;
      v11[1] = cf;
      CFTypeRef cf = 0;
      uint64_t v13 = v11 + 2;
      v42.i64[1] = (uint64_t)(v11 + 2);
      int v14 = (void *)v39.i64[1];
      float v15 = (void *)v39.i64[0];
      if (v39.i64[1] == v39.i64[0])
      {
        int64x2_t v17 = vdupq_n_s64(v39.u64[1]);
      }
      else
      {
        do
        {
          int v16 = (const void *)*(v14 - 2);
          v14 -= 2;
          *(v11 - 2) = v16;
          v11 -= 2;
          void *v14 = 0;
          v11[1] = (CFTypeRef)v14[1];
          v14[1] = 0;
        }
        while (v14 != v15);
        int64x2_t v17 = v39;
        uint64_t v13 = (void *)v42.i64[1];
      }
      v39.i64[0] = (uint64_t)v11;
      v39.i64[1] = (uint64_t)v13;
      int64x2_t v42 = v17;
      int64x2_t v18 = v40;
      CFDictionaryRef v40 = v43;
      float v43 = v18;
      std::string __p = (void *)v17.i64[0];
      sub_16358((uint64_t)&__p);
      v39.i64[1] = (uint64_t)v13;
      if (cf) {
        CFRelease(cf);
      }
      if (v37) {
        CFRelease(v37);
      }
    }
    else
    {
      *(void *)v39.i64[1] = v37;
      *(void *)(v5 + 8) = cf;
      v39.i64[1] = v5 + 16;
    }
  }
  sub_21C8C(&__p, "modelledWattsParameterID");
  int v19 = *(_DWORD *)sub_15BCC(v3, &__p);
  if (v42.i8[15] < 0) {
    operator delete(__p);
  }
  if (v19 != -1)
  {
    int v36 = 0;
    sub_A74DC((uint64_t)&v37, "Avg Watts Modelled", &v36);
    uint64_t v20 = v39.i64[1];
    if (v39.i64[1] >= (unint64_t)v40)
    {
      uint64_t v21 = (v39.i64[1] - v39.i64[0]) >> 4;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v23 = (uint64_t)&v40[-v39.i64[0]];
      if ((uint64_t)&v40[-v39.i64[0]] >> 3 > v22) {
        unint64_t v22 = v23 >> 3;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      char v44 = &v40;
      int v25 = (char *)sub_10724(v24);
      char v27 = (CFTypeRef *)&v25[16 * v21];
      CFTypeRef *v27 = v37;
      CFTypeRef v37 = 0;
      v27[1] = cf;
      CFTypeRef cf = 0;
      __int16 v28 = v27 + 2;
      int v29 = (void *)v39.i64[1];
      __int16 v30 = (void *)v39.i64[0];
      if (v39.i64[1] == v39.i64[0])
      {
        int64x2_t v32 = vdupq_n_s64(v39.u64[1]);
      }
      else
      {
        do
        {
          char v31 = (const void *)*(v29 - 2);
          v29 -= 2;
          *(v27 - 2) = v31;
          v27 -= 2;
          *int v29 = 0;
          v27[1] = (CFTypeRef)v29[1];
          v29[1] = 0;
        }
        while (v29 != v30);
        int64x2_t v32 = v39;
      }
      v39.i64[0] = (uint64_t)v27;
      v39.i64[1] = (uint64_t)v28;
      int64x2_t v42 = v32;
      int v33 = v40;
      CFDictionaryRef v40 = &v25[16 * v26];
      float v43 = v33;
      std::string __p = (void *)v32.i64[0];
      sub_16358((uint64_t)&__p);
      v39.i64[1] = (uint64_t)v28;
      if (cf) {
        CFRelease(cf);
      }
      if (v37) {
        CFRelease(v37);
      }
    }
    else
    {
      *(void *)v39.i64[1] = v37;
      *(void *)(v20 + 8) = cf;
      v39.i64[1] = v20 + 16;
    }
  }
  CFDictionaryRef v34 = sub_4D69C((void ***)&v39);
  CFDictionaryRef v35 = v34;
  std::string __p = &v39;
  sub_14F84((void ***)&__p);
  sub_A7800(&v35);
  CFRelease(v34);
  sub_13910();
  operator new();
}

void sub_A7D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, CFTypeRef cf, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a11) {
    CFRelease(a11);
  }
  a11 = &a13;
  sub_14F84((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_A7E10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

void sub_A7E80(caulk::concurrent::message *this)
{
  *(void *)this = off_61FA60;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    sub_4636C(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_A7EF0(caulk::concurrent::message *this)
{
  *(void *)this = off_61FA60;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    sub_4636C(v2);
  }

  caulk::concurrent::message::~message(this);
}

uint64_t sub_A7F4C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2 == (void *)(a1 + 64))
  {
LABEL_9:
    atomic_load((unsigned __int8 *)(a1 + 16));
  }
  else
  {
    while (*((_DWORD *)v2 + 14) == -1)
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          int v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          int v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
      if (v4 == (void *)(a1 + 64)) {
        goto LABEL_9;
      }
    }
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 16));
    if ((v6 & 1) == 0)
    {
      CFDictionaryRef v11 = (os_log_t *)sub_32A48(13);
      uint64_t v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        int v14 = 136315394;
        float v15 = "PowerLogManager.cpp";
        __int16 v16 = 1024;
        int v17 = 277;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"BeginPowerLogTracking()/EndPowerLogTracking() mismatch.\"", (uint8_t *)&v14, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "BeginPowerLogTracking()/EndPowerLogTracking() mismatch.");
    }
  }
  uint64_t v7 = sub_32A48(13);
  if (*(unsigned char *)(v7 + 8))
  {
    uint64_t v8 = *(NSObject **)v7;
    if (*(void *)v7)
    {
      if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
      {
        int v14 = 136315394;
        float v15 = "PowerLogManager.cpp";
        __int16 v16 = 1024;
        int v17 = 279;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d EndPowerLogTracking()", (uint8_t *)&v14, 0x12u);
      }
    }
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 16));
  unint64_t v9 = *(caulk::concurrent::message **)(a1 + 24);
  sub_54694();
  uint64_t result = caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, v9);
  *(void *)(a1 + 24) = 0;
  return result;
}

void sub_A814C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_A8168(float a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (!a4)
  {
    *(float *)(a3 + 84) = a1;
LABEL_5:
    sub_205920((double *)a3);
    return 0;
  }
  if (a4 >= 0x3E8)
  {
    unsigned int v4 = a4 % 0x3E8;
    if (a4 % 0x3E8 >= *(_DWORD *)(a3 + 80)) {
      return 4294956418;
    }
    a4 = 1000 * (a4 / 0x3E8);
  }
  else
  {
    unsigned int v4 = 0;
  }
  uint64_t result = 4294956418;
  if ((int)a4 <= 2999)
  {
    if (a4 == 1000)
    {
      *(_DWORD *)(*(void *)(a3 + 56) + 20 * v4) = a1;
      goto LABEL_5;
    }
    if (a4 == 2000)
    {
      *(_DWORD *)(*(void *)(a3 + 56) + 20 * v4 + 4) = a1;
      goto LABEL_5;
    }
  }
  else
  {
    switch(a4)
    {
      case 0xBB8u:
        *(float *)(*(void *)(a3 + 56) + 20 * v4 + 8) = a1;
        goto LABEL_5;
      case 0xFA0u:
        *(float *)(*(void *)(a3 + 56) + 20 * v4 + 12) = a1;
        goto LABEL_5;
      case 0x1388u:
        *(float *)(*(void *)(a3 + 56) + 20 * v4 + 16) = a1;
        goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_A8278(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float *a6)
{
  if (a3)
  {
    if (a3 >= 0x3E8)
    {
      unsigned int v6 = a3 % 0x3E8;
      if (a3 % 0x3E8 >= *(_DWORD *)(a2 + 80)) {
        return 4294956418;
      }
      a3 = 1000 * (a3 / 0x3E8);
    }
    else
    {
      unsigned int v6 = 0;
    }
    uint64_t result = 4294956418;
    if ((int)a3 <= 2999)
    {
      if (a3 == 1000)
      {
        unsigned int v9 = *(_DWORD *)(*(void *)(a2 + 56) + 20 * v6);
      }
      else
      {
        if (a3 != 2000) {
          return result;
        }
        unsigned int v9 = *(_DWORD *)(*(void *)(a2 + 56) + 20 * v6 + 4);
      }
      float v7 = (float)v9;
    }
    else
    {
      switch(a3)
      {
        case 0xBB8u:
          float v7 = *(float *)(*(void *)(a2 + 56) + 20 * v6 + 8);
          break;
        case 0xFA0u:
          float v7 = *(float *)(*(void *)(a2 + 56) + 20 * v6 + 12);
          break;
        case 0x1388u:
          float v7 = *(float *)(*(void *)(a2 + 56) + 20 * v6 + 16);
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    float v7 = *(float *)(a2 + 84);
  }
  uint64_t result = 0;
  *a6 = v7;
  return result;
}

uint64_t sub_A8370(int a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  if (a4) {
    return 4294956430;
  }
  if (a3)
  {
    if (a3 != 36)
    {
      if (a3 == 21)
      {
        *(_DWORD *)(a2 + 88) = *(_DWORD *)a6;
        sub_205920((double *)a2);
        return 0;
      }
      return 4294956417;
    }
    if (a7 == 16 && *(void *)(a6 + 8))
    {
      CFRelease(*(CFTypeRef *)(a2 + 176));
      *(_OWORD *)(a2 + 168) = *(_OWORD *)a6;
      CFRetain(*(CFTypeRef *)(a2 + 176));
      return 0;
    }
    return 4294956445;
  }
  else
  {
    if (a7 != 8) {
      return 4294956417;
    }
    int v10 = *(const void **)a6;
    return sub_205658(a2, v10);
  }
}

uint64_t sub_A8430(int a1, uint64_t a2, int a3, int a4, unsigned int a5, char *buffer, _DWORD *a7)
{
  if (a4) {
    return 4294956430;
  }
  uint64_t result = 4294956417;
  if (a3 <= 10)
  {
    if (a3)
    {
      if (a3 == 3)
      {
        unsigned int v20 = *(_DWORD *)(a2 + 80);
        if (*a7 != 4 * (5 * v20 + 1)) {
          return 4294956445;
        }
        if (buffer)
        {
          *(_DWORD *)buffer = 0;
          unsigned int v20 = *(_DWORD *)(a2 + 80);
        }
        if (!v20) {
          return 0;
        }
        unsigned int v21 = 0;
        int v22 = 5;
        do
        {
          if (buffer)
          {
            *(_DWORD *)&buffer[4 * (v22 - 4)] = v21 + 1000;
            *(_DWORD *)&buffer[4 * (v22 - 3)] = v21 + 2000;
            *(_DWORD *)&buffer[4 * (v22 - 2)] = v21 + 3000;
            *(_DWORD *)&buffer[4 * (v22 - 1)] = v21 + 4000;
            *(_DWORD *)&buffer[4 * v22] = v21 + 5000;
            unsigned int v20 = *(_DWORD *)(a2 + 80);
          }
          uint64_t result = 0;
          ++v21;
          v22 += 5;
        }
        while (v21 < v20);
        return result;
      }
      if (a3 != 4) {
        return result;
      }
      *((_DWORD *)buffer + 24) = 0;
      *((void *)buffer + 7) = 0;
      if (!a5)
      {
        *((void *)buffer + 9) = @"global gain";
        *((_DWORD *)buffer + 24) = 0x8000000;
        CFStringGetCString(@"global gain", buffer, 64, 0x8000100u);
        *((_DWORD *)buffer + 20) = 13;
        *(void *)(buffer + 84) = 0x41C00000C2C00000;
        *((_DWORD *)buffer + 23) = 0;
        unsigned int v23 = *((_DWORD *)buffer + 24) | 0xC0000000;
LABEL_71:
        uint64_t result = 0;
        *((_DWORD *)buffer + 24) = v23;
        return result;
      }
      if (a5 >= 0x3E8)
      {
        unsigned int v11 = a5 % 0x3E8;
        if (a5 % 0x3E8 >= *(_DWORD *)(a2 + 80)) {
          return 4294956418;
        }
        a5 = 1000 * (a5 / 0x3E8);
      }
      else
      {
        unsigned int v11 = 0;
      }
      unsigned int v24 = v11 + 1;
      uint64_t result = 4294956418;
      if ((int)a5 <= 2999)
      {
        if (a5 != 1000)
        {
          if (a5 != 2000) {
            return result;
          }
          *((void *)buffer + 9) = @"type";
          *((_DWORD *)buffer + 24) = 0x8000000;
          CFStringGetCString(@"type", buffer, 64, 0x8000100u);
          *((_DWORD *)buffer + 16) = v24;
          int v25 = *((_DWORD *)buffer + 24);
          *((_DWORD *)buffer + 20) = 1;
          uint64_t v27 = 0x4120000000000000;
          goto LABEL_67;
        }
        *((void *)buffer + 9) = @"bypass";
        *((_DWORD *)buffer + 24) = 0x8000000;
        CFStringGetCString(@"bypass", buffer, 64, 0x8000100u);
        *((_DWORD *)buffer + 16) = v24;
        int v25 = *((_DWORD *)buffer + 24);
        *((_DWORD *)buffer + 20) = 2;
        *(void *)(buffer + 84) = 0x3F80000000000000;
        int v26 = 1065353216;
      }
      else
      {
        if (a5 != 3000)
        {
          if (a5 != 4000)
          {
            if (a5 != 5000) {
              return result;
            }
            *((void *)buffer + 9) = @"bandwidth";
            *((_DWORD *)buffer + 24) = 0x8000000;
            CFStringGetCString(@"bandwidth", buffer, 64, 0x8000100u);
            *((_DWORD *)buffer + 16) = v24;
            int v25 = *((_DWORD *)buffer + 24);
            *((_DWORD *)buffer + 20) = 21;
            *(void *)(buffer + 84) = 0x40A000003D4CCCCDLL;
            int v26 = 1056964608;
            goto LABEL_69;
          }
          *((void *)buffer + 9) = @"gain";
          *((_DWORD *)buffer + 24) = 0x8000000;
          CFStringGetCString(@"gain", buffer, 64, 0x8000100u);
          *((_DWORD *)buffer + 16) = v24;
          int v25 = *((_DWORD *)buffer + 24);
          *((_DWORD *)buffer + 20) = 13;
          uint64_t v27 = 0x41C00000C2C00000;
LABEL_67:
          *(void *)(buffer + 84) = v27;
          *((_DWORD *)buffer + 23) = 0;
LABEL_70:
          unsigned int v23 = v25 | 0xC0100000;
          goto LABEL_71;
        }
        *((void *)buffer + 9) = @"frequency";
        *((_DWORD *)buffer + 24) = 0x8000000;
        CFStringGetCString(@"frequency", buffer, 64, 0x8000100u);
        *((_DWORD *)buffer + 16) = v24;
        int v25 = *((_DWORD *)buffer + 24);
        *((void *)buffer + 10) = 0x4120000000000008;
        float v28 = *(double *)(a2 + 8) * 0.49000001;
        *((float *)buffer + 22) = v28;
        int v26 = 1148846080;
      }
LABEL_69:
      *((_DWORD *)buffer + 23) = v26;
      goto LABEL_70;
    }
    *(void *)buffer = 0;
    values = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    LOWORD(v34) = 257;
    sub_1D4AF4((uint64_t)&values, @"version", 0);
    sub_1D4AF4((uint64_t)&values, @"type", 1635083896);
    sub_1D4AF4((uint64_t)&values, @"subtype", 1936286821);
    sub_1D4AF4((uint64_t)&values, @"manufacturer", 1634758764);
    Mutable = CFDataCreateMutable(0, 0);
    *(void *)bytes = 0;
    CFDataAppendBytes(Mutable, bytes, 8);
    *(_DWORD *)char v31 = bswap32(((*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2) + 1);
    CFDataAppendBytes(Mutable, v31, 4);
    unsigned int v14 = bswap32(*(_DWORD *)(a2 + 84));
    *(_DWORD *)int v29 = 0;
    unsigned int v30 = v14;
    CFDataAppendBytes(Mutable, v29, 8);
    if (*(_DWORD *)(a2 + 80))
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        *(_DWORD *)int v29 = bswap32(v16 + 1000);
        unsigned int v30 = bswap32(COERCE_UNSIGNED_INT((float)*(unsigned int *)(*(void *)(a2 + 56) + v15)));
        CFDataAppendBytes(Mutable, v29, 8);
        *(_DWORD *)int v29 = bswap32(v16 + 2000);
        unsigned int v30 = bswap32(COERCE_UNSIGNED_INT((float)*(unsigned int *)(*(void *)(a2 + 56) + v15 + 4)));
        CFDataAppendBytes(Mutable, v29, 8);
        *(_DWORD *)int v29 = bswap32(v16 + 3000);
        unsigned int v30 = bswap32(*(_DWORD *)(*(void *)(a2 + 56) + v15 + 8));
        CFDataAppendBytes(Mutable, v29, 8);
        *(_DWORD *)int v29 = bswap32(v16 + 4000);
        unsigned int v30 = bswap32(*(_DWORD *)(*(void *)(a2 + 56) + v15 + 12));
        CFDataAppendBytes(Mutable, v29, 8);
        *(_DWORD *)int v29 = bswap32(v16 + 5000);
        unsigned int v30 = bswap32(*(_DWORD *)(*(void *)(a2 + 56) + v15 + 16));
        CFDataAppendBytes(Mutable, v29, 8);
        ++v16;
        v15 += 20;
      }
      while (v16 < *(unsigned int *)(a2 + 80));
    }
    if (BYTE1(v34) && Mutable && values) {
      CFDictionarySetValue((CFMutableDictionaryRef)values, @"data", Mutable);
    }
    CFRelease(Mutable);
    if (BYTE1(v34))
    {
      int v17 = *(const void **)(a2 + 176);
      int64x2_t v18 = values;
      if (!v17 || !values)
      {
LABEL_36:
        if (v18)
        {
          CFRetain(v18);
          int v19 = values;
        }
        else
        {
          int v19 = 0;
        }
        *(void *)buffer = v19;
        sub_80594((uint64_t)&values);
        return 0;
      }
      CFDictionarySetValue((CFMutableDictionaryRef)values, @"name", v17);
    }
    int64x2_t v18 = values;
    goto LABEL_36;
  }
  if (a3 > 20)
  {
    if (a3 == 21)
    {
      uint64_t result = 0;
      int v12 = *(_DWORD *)(a2 + 88);
      goto LABEL_48;
    }
    if (a3 != 36) {
      return result;
    }
    *(_OWORD *)buffer = *(_OWORD *)(a2 + 168);
    uint64_t result = *(void *)(a2 + 176);
    if (!result) {
      return result;
    }
    CFRetain((CFTypeRef)result);
    return 0;
  }
  if (a3 == 11)
  {
    uint64_t result = 0;
    int v12 = 1;
LABEL_48:
    *(_DWORD *)buffer = v12;
    return result;
  }
  if (a3 != 16) {
    return result;
  }
  if (a5 < 0x3E8) {
    return 4294956418;
  }
  uint64_t result = 4294956418;
  if (a5 % 0x3E8 < *(_DWORD *)(a2 + 80) && 1000 * (a5 / 0x3E8) == 2000)
  {
    if (buffer)
    {
      values = @"Parametric";
      CFStringRef v34 = @"Butterworth Low Pass";
      CFStringRef v35 = @"Butterworth High Pass";
      CFStringRef v36 = @"Resonant Low Pass";
      CFStringRef v37 = @"Resonant High Pass";
      CFStringRef v38 = @"Band Pass";
      CFStringRef v39 = @"Band Stop";
      CFStringRef v40 = @"Low Shelf";
      CFStringRef v41 = @"High Shelf";
      CFStringRef v42 = @"Resonant Low Shelf";
      CFStringRef v43 = @"Resonant High Shelf";
      CFArrayRef v10 = CFArrayCreate(0, (const void **)&values, 11, 0);
      uint64_t result = 0;
      *(void *)buffer = v10;
      return result;
    }
    return 0;
  }
  return result;
}

void sub_A8B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_A8BB0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, int *a6, char *a7)
{
  char v7 = 0;
  if (a4)
  {
    uint64_t result = 4294956430;
    goto LABEL_22;
  }
  uint64_t result = 4294956417;
  if (a3 <= 10)
  {
    if (a3)
    {
      if (a3 == 3)
      {
        char v7 = 0;
        int v9 = 20 * *(_DWORD *)(a2 + 80) + 4;
      }
      else
      {
        if (a3 != 4) {
          goto LABEL_22;
        }
        int v9 = 104;
      }
      goto LABEL_21;
    }
    char v7 = 1;
    goto LABEL_17;
  }
  if (a3 <= 20)
  {
    if (a3 != 11)
    {
      if (a3 != 16) {
        goto LABEL_22;
      }
      char v7 = 0;
LABEL_17:
      int v9 = 8;
      goto LABEL_21;
    }
    char v7 = 0;
LABEL_19:
    int v9 = 4;
    goto LABEL_21;
  }
  if (a3 == 21)
  {
    char v7 = 1;
    goto LABEL_19;
  }
  if (a3 != 36) {
    goto LABEL_22;
  }
  char v7 = 1;
  int v9 = 16;
LABEL_21:
  uint64_t result = 0;
  *a6 = v9;
LABEL_22:
  if (a7) {
    *a7 = v7;
  }
  return result;
}

void sub_A8C6C(uint64_t a1, char **a2)
{
  uint64_t v3 = *a2;
  a2[1] = *a2;
  unint64_t v4 = (unint64_t)a2[2];
  if ((unint64_t)v3 >= v4)
  {
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (void)v3) >> 2);
    uint64_t v7 = 2 * v6;
    if (2 * v6 <= 1) {
      uint64_t v7 = 1;
    }
    if (v6 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v8 = 0x1555555555555555;
    }
    else {
      unint64_t v8 = v7;
    }
    int v9 = (char *)sub_564C(v8);
    CFArrayRef v10 = *a2;
    unsigned int v11 = a2[1];
    uint64_t v13 = &v9[12 * v12];
    qmemcpy(v9, "xfuaedislppa", 12);
    BOOL v5 = v9 + 12;
    if (v11 != v10)
    {
      do
      {
        uint64_t v14 = *(void *)(v11 - 12);
        v11 -= 12;
        int v15 = *((_DWORD *)v11 + 2);
        *(void *)(v9 - 12) = v14;
        v9 -= 12;
        *((_DWORD *)v9 + 2) = v15;
      }
      while (v11 != v10);
      CFArrayRef v10 = *a2;
    }
    *a2 = v9;
    a2[1] = v5;
    a2[2] = v13;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    qmemcpy(v3, "xfuaedislppa", 12);
    BOOL v5 = v3 + 12;
  }
  a2[1] = v5;
}

void sub_A8D60(uint64_t a1)
{
  sub_A8D98(a1);

  operator delete();
}

void *sub_A8D98(uint64_t a1)
{
  *(void *)a1 = off_61FA88;
  if (*(void *)(a1 + 24) != *(void *)(a1 + 32))
  {
    AUPBUnregisterAU();
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v2 = *(void *)(a1 + 32);
    if (v2 != v3)
    {
      uint64_t v4 = v2 - (v3 + 24);
      if (v2 != v3 + 24) {
        memmove(*(void **)(a1 + 24), (const void *)(v3 + 24), v2 - (v3 + 24));
      }
      *(void *)(a1 + 32) = v3 + v4;
    }
  }

  return sub_297F20((void *)a1);
}

uint64_t sub_A8E3C(int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, void *inQualifierData, UInt32 inDataSize, void *inData)
{
  return AudioObjectSetPropertyData(inObjectID, inAddress, inQualifierDataSize, inQualifierData, inDataSize, inData);
}

uint64_t sub_A8E58(int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  return AudioObjectGetPropertyData(inObjectID, inAddress, inQualifierDataSize, inQualifierData, ioDataSize, outData);
}

uint64_t sub_A8E74(int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, void *inQualifierData)
{
  UInt32 outDataSize = 0;
  if (AudioObjectGetPropertyDataSize(inObjectID, inAddress, inQualifierDataSize, inQualifierData, &outDataSize)) {
    return 0;
  }
  else {
    return outDataSize;
  }
}

BOOL sub_A8EBC(int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress)
{
  Boolean outIsSettable = 0;
  if (AudioObjectIsPropertySettable(inObjectID, inAddress, &outIsSettable)) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = outIsSettable == 0;
  }
  return !v3;
}

BOOL sub_A8F00(int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress)
{
  return AudioObjectHasProperty(inObjectID, inAddress) != 0;
}

uint64_t sub_A8F28(int a1, AudioObjectID inObjectID, AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  return AudioObjectAddPropertyListener(inObjectID, inAddress, inListener, inClientData);
}

void sub_A8F3C()
{
}

uint64_t sub_A8F54(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
}

void sub_A8FD4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,long long buf,long long a22)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  unsigned int v24 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    int v25 = v24;
    int v26 = (os_log_t *)sub_32A48(13);
    uint64_t v27 = *v26;
    if (!*v26 || !os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    sub_2417C(&a15, v25[2]);
    int v28 = a20;
    int v29 = (void **)a15;
    sub_2417C(&__p, *v22);
    unsigned int v30 = &a15;
    if (v28 < 0) {
      unsigned int v30 = v29;
    }
    if (a14 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    LODWORD(buf) = 136315906;
    *(void *)((char *)&buf + 4) = "HALSystem.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 27;
    WORD1(a22) = 2080;
    *(void *)((char *)&a22 + 4) = v30;
    WORD6(a22) = 2080;
    *(void *)((char *)&a22 + 14) = p_p;
    _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Exception (%s) looking for presence of property %s", (uint8_t *)&buf, 0x26u);
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    int64x2_t v32 = (os_log_t *)sub_32A48(13);
    int v33 = *v32;
    if (!*v32 || !os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    sub_2417C(&a15, *v22);
    if (a20 >= 0) {
      CFStringRef v34 = &a15;
    }
    else {
      CFStringRef v34 = a15;
    }
    LODWORD(buf) = 136315650;
    *(void *)((char *)&buf + 4) = "HALSystem.cpp";
    WORD6(buf) = 1024;
    *(_DWORD *)((char *)&buf + 14) = 32;
    WORD1(a22) = 2080;
    *(void *)((char *)&a22 + 4) = v34;
    _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unknown Exception looking for presence of property %s", (uint8_t *)&buf, 0x1Cu);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
LABEL_20:
  __cxa_end_catch();
  JUMPOUT(0xA8FA4);
}

uint64_t sub_A9180(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
}

void sub_A91C0(void *a1)
{
}

uint64_t sub_A91F4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
}

void sub_A9234(void *a1)
{
}

uint64_t sub_A926C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_A9290(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61FB48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_A92E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61FB48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_A9304(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
  }
  sub_54694();
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 48, 8);
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = v2;
  *(void *)(v3 + 32) = v1;
  *(void *)uint64_t v3 = off_61FC40;
  *(void *)(v3 + 8) = 0;

  return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v3);
}

void sub_A93B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

caulk::concurrent::message **sub_A93C8(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_A9410((uint64_t)a1);
  return sub_A9734(&v2);
}

void sub_A93FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_A9734((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void sub_A9410(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  v2[0] = *(void *)(a1 + 24);
  v2[1] = (uint64_t)v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_67EC(&v3, v2, 161);
  if (v3) {
    sub_A9898(v3);
  }
  if (v4) {
    sub_4636C(v4);
  }
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_A94B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a12) {
    sub_4636C(a12);
  }
  if (a2 == 3)
  {
    unsigned int v20 = __cxa_begin_catch(a1);
    unsigned int v21 = (os_log_t *)sub_32A48(13);
    os_log_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      int v23 = v20[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v23;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 165;
      unsigned int v24 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      int v25 = v22;
      uint32_t v26 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&buf, v26);
    }
  }
  else
  {
    uint64_t v27 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v28 = v27;
      int v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v31 = (*(uint64_t (**)(void *))(*(void *)v28 + 16))(v28);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v31;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 165;
        unsigned int v24 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        int v25 = v30;
        uint32_t v26 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      int64x2_t v32 = (os_log_t *)sub_32A48(13);
      os_log_t v33 = *v32;
      if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 165;
        unsigned int v24 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        int v25 = v33;
        uint32_t v26 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0xA9478);
}

caulk::concurrent::message **sub_A9734(caulk::concurrent::message **a1)
{
  uint64_t v2 = *a1;
  *(void *)uint64_t v2 = off_61FC68;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24))(caulk::alloc::realtime_safe_resource, v2, 48, 8);
  return a1;
}

void sub_A97CC(caulk::concurrent::message *this)
{
  *(void *)this = off_61FC68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_A983C(caulk::concurrent::message *this)
{
  *(void *)this = off_61FC68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void sub_A9898(uint64_t a1)
{
  sub_54050(&v14);
  uint64_t v2 = v14;
  std::mutex::lock(v14);
  uint64_t v3 = *(uint64_t **)v2[1].__m_.__opaque;
  if (v3)
  {
    uint64_t v4 = (void **)(a1 + 24);
    opaque = v2[1].__m_.__opaque;
    unint64_t v6 = *(void **)v2[1].__m_.__opaque;
    do
    {
      char v7 = sub_15E8C(v6 + 4, v4);
      if (v7 >= 0) {
        unint64_t v8 = v6;
      }
      else {
        unint64_t v8 = v6 + 1;
      }
      if (v7 >= 0) {
        opaque = (char *)v6;
      }
      unint64_t v6 = (void *)*v8;
    }
    while (*v8);
    if (opaque != v2[1].__m_.__opaque && (sub_15E8C(v4, (void **)opaque + 4) & 0x80) == 0)
    {
      int v9 = (char *)*((void *)opaque + 1);
      if (v9)
      {
        do
        {
          CFArrayRef v10 = v9;
          int v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        unsigned int v11 = opaque;
        do
        {
          CFArrayRef v10 = (char *)*((void *)v11 + 2);
          BOOL v12 = *(void *)v10 == (void)v11;
          unsigned int v11 = v10;
        }
        while (!v12);
      }
      if ((char *)v2[1].__m_.__sig == opaque) {
        v2[1].__m_.__uint64_t sig = (uint64_t)v10;
      }
      --*(void *)&v2[1].__m_.__opaque[8];
      sub_89144(v3, (uint64_t *)opaque);
      sub_A99F8((uint64_t)(opaque + 32));
      operator delete(opaque);
    }
  }
  std::mutex::unlock(v2);
  uint64_t v13 = v15;
  if (v15)
  {
    sub_4636C(v13);
  }
}

void sub_A99E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_A99F8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_A9A4C(void *a1)
{
  if (a1)
  {
    sub_A9A4C(*a1);
    sub_A9A4C(a1[1]);
    sub_A99F8((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_A9AA0()
{
  sub_54050(&v11);
  v0 = v11;
  atomic_store(FigCaptureSpeakerInterferenceMitigationIsRequired() != 0, (unsigned __int8 *)&v11[1].__m_.__opaque[16]);
  uint64_t v1 = (os_log_t *)sub_32A48(24);
  uint64_t v2 = *v1;
  if (*v1 && os_log_type_enabled(*v1, OS_LOG_TYPE_INFO))
  {
    unsigned __int8 v3 = atomic_load((unsigned __int8 *)&v0[1].__m_.__opaque[16]);
    *(void *)&uint8_t buf[4] = "SpeakerInterferenceMitigationIODelegate.cpp";
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    if (v3) {
      uint64_t v4 = "true";
    }
    else {
      uint64_t v4 = "false";
    }
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 37;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v4;
    _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_INFO, "%25s:%-5d The speaker interference mitigation requirement was set to %s", buf, 0x1Cu);
  }
  std::mutex::lock(v0);
  uint64_t sig = (char *)v0[1].__m_.__sig;
  if (sig != v0[1].__m_.__opaque)
  {
    do
    {
      if (sig[55] < 0)
      {
        sub_21E8C(buf, *((void **)sig + 4), *((void *)sig + 5));
      }
      else
      {
        *(_OWORD *)AudioObjectPropertyAddress buf = *((_OWORD *)sig + 2);
        *(void *)&buf[16] = *((void *)sig + 6);
      }
      unint64_t v6 = (std::__shared_weak_count *)*((void *)sig + 8);
      *(void *)&unsigned char buf[24] = *((void *)sig + 7);
      uint64_t v14 = v6;
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (v14)
        {
          char v7 = std::__shared_weak_count::lock(v14);
          if (v7)
          {
            if (*(void *)&buf[24])
            {
              atomic_load((unsigned __int8 *)&v0[1].__m_.__opaque[16]);
              sub_4FE4(*(void *)(*(void *)&buf[24] + 8), *(void *)(*(void *)&buf[24] + 16));
            }
            sub_4636C(v7);
          }
          if (v14) {
            std::__shared_weak_count::__release_weak(v14);
          }
        }
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      unint64_t v8 = (char *)*((void *)sig + 1);
      if (v8)
      {
        do
        {
          int v9 = v8;
          unint64_t v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (char *)*((void *)sig + 2);
          BOOL v10 = *(void *)v9 == (void)sig;
          uint64_t sig = v9;
        }
        while (!v10);
      }
      uint64_t sig = v9;
    }
    while (v9 != v0[1].__m_.__opaque);
  }
  std::mutex::unlock(v0);
  if (v12) {
    sub_4636C(v12);
  }
}

void sub_A9CB4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, long long a12, __int16 a13, __int16 a14, int a15, int a16)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    int v17 = __cxa_begin_catch(a1);
    int64x2_t v18 = (os_log_t *)sub_32A48(13);
    os_log_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = v17[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a12) = 1024;
      DWORD1(a12) = v20;
      WORD4(a12) = 2080;
      *(void *)((char *)&a12 + 10) = "";
      a14 = 1024;
      a15 = 32;
      unsigned int v21 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      os_log_t v22 = v19;
      uint32_t v23 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&buf, v23);
    }
  }
  else
  {
    unsigned int v24 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v25 = v24;
      uint32_t v26 = (os_log_t *)sub_32A48(13);
      os_log_t v27 = *v26;
      if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = v28;
        WORD6(a12) = 2080;
        *(void *)((char *)&a12 + 14) = "";
        HIWORD(a15) = 1024;
        a16 = 32;
        unsigned int v21 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        os_log_t v22 = v27;
        uint32_t v23 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      int v29 = (os_log_t *)sub_32A48(13);
      os_log_t v30 = *v29;
      if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a12) = 2080;
        *(void *)((char *)&a12 + 4) = "";
        WORD6(a12) = 1024;
        *(_DWORD *)((char *)&a12 + 14) = 32;
        unsigned int v21 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        os_log_t v22 = v30;
        uint32_t v23 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0xA9AECLL);
}

uint64_t sub_A9F48(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_A9F8C(uint64_t a1)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, (const void *)(a1 + 24), kFigCaptureNotification_SpeakerInterferenceMitigationRequiredChanged, 0);
  unsigned __int8 v3 = (os_log_t *)sub_32A48(24);
  uint64_t v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_INFO))
  {
    int v5 = 136315394;
    unint64_t v6 = "SpeakerInterferenceMitigationIODelegate.cpp";
    __int16 v7 = 1024;
    int v8 = 99;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_INFO, "%25s:%-5d Central speaker interference mitigation handler is destroyed", (uint8_t *)&v5, 0x12u);
  }
  sub_A9A4C(*(void **)(a1 + 96));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void sub_AA084(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_AA090(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61FBD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_AA0E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61FBD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_AA104(caulk::concurrent::message *this)
{
  *(void *)this = off_61FC68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_AA174(caulk::concurrent::message *this)
{
  *(void *)this = off_61FC68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void sub_AA1D0(uint64_t a1)
{
  sub_AA208(a1);

  operator delete();
}

uint64_t sub_AA208(uint64_t a1)
{
  uint64_t v2 = sub_32A48(24);
  if (*(unsigned char *)(v2 + 8))
  {
    unsigned __int8 v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a1 + 47) < 0)
        {
          sub_21E8C(__p, *(void **)(a1 + 24), *(void *)(a1 + 32));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 24);
          uint64_t v10 = *(void *)(a1 + 40);
        }
        uint64_t v4 = __p;
        if (v10 < 0) {
          uint64_t v4 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        BOOL v12 = "SpeakerInterferenceMitigationIODelegate.cpp";
        __int16 v13 = 1024;
        int v14 = 171;
        __int16 v15 = 2080;
        unint64_t v16 = v4;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Destroying speaker interference mitigation IO delegate for chain %s", buf, 0x1Cu);
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_A9898(a1);
  int v5 = *(std::__shared_weak_count **)(a1 + 96);
  if (v5) {
    sub_4636C(v5);
  }
  unint64_t v6 = *(NSObject **)(a1 + 80);
  if (v6) {
    dispatch_release(v6);
  }
  sub_56A54((void *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  __int16 v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

void sub_AA374(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_AA384(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned __int8 v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t sub_AA408(uint64_t a1)
{
  return sub_AA208(a1 + 24);
}

void sub_AA410(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_61FC08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_AA464(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_61FC08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

CFTypeRef sub_AA484@<X0>(CFTypeRef result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 59);
  if (v3) {
    uint64_t result = CFRetain(*((CFTypeRef *)result + 59));
  }
  *a2 = v3;
  return result;
}

CFTypeRef sub_AA4BC@<X0>(CFTypeRef result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 58);
  if (v3) {
    uint64_t result = CFRetain(*((CFTypeRef *)result + 58));
  }
  *a2 = v3;
  return result;
}

uint64_t sub_AA4F8()
{
  return 0;
}

uint64_t sub_AA500()
{
  return 0;
}

uint64_t sub_AA510()
{
  return 1;
}

uint64_t sub_AA518()
{
  return 0;
}

void sub_AA520(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_AA528(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886742895 && a2 != 1886742889)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(17);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      unint64_t v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v14 = "Device_USB_IDAM_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 137;
      __int16 v17 = 2080;
      int64x2_t v18 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v14 = "Device_USB_IDAM_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 138;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_AA6EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AA70C()
{
  return 0;
}

uint64_t sub_AA724(os_unfair_lock_s *a1)
{
  if ((sub_1653A0() & 1) != 0
    && (*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 0))
  {
    operator new();
  }
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 1))
  {
    operator new();
  }
  return 1;
}

void sub_AACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_78FF8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_AAD74(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = operator new(0x228uLL);
  v14[1] = 0;
  v14[2] = 0;
  void *v14 = off_640AB8;
  sub_21C8C(__p, "");
  sub_105158((uint64_t)(v14 + 3), a2, a3, a4, a5, a6, a7, (long long *)__p);
  v14[3] = &off_621AD0;
  *((_WORD *)v14 + 272) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v14 + 3;
  a1[1] = v14;

  sub_56E64((uint64_t)a1, v14 + 13, (uint64_t)(v14 + 3));
}

void sub_AAE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_AAEBC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_AAEE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_640AB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_AAF34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_640AB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

CFTypeRef sub_AAF54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  CFTypeRef result = *(CFTypeRef *)(a1 + 448);
  *(void *)a2 = result;
  LODWORD(v2) = *(unsigned __int8 *)(v2 + 456);
  *(unsigned char *)(a2 + 8) = v2;
  if (v2) {
    BOOL v4 = result == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return CFRetain(result);
  }
  return result;
}

void sub_AAF7C(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

float sub_AAFB8(uint64_t a1, float a2)
{
  float v7 = a2;
  int v6 = 4;
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = 0x676C6F6264623276;
  int v5 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)v2 + 40))(v2, &v4, 0, 0, &v6, &v7);
  return v7;
}

float sub_AB030(uint64_t a1, float a2)
{
  float v7 = a2;
  int v6 = 4;
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = 0x676C6F6276326462;
  int v5 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)v2 + 40))(v2, &v4, 0, 0, &v6, &v7);
  return v7;
}

uint64_t sub_AB0A8(uint64_t a1, float a2)
{
  float v6 = a2;
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = 0x676C6F62766F6C6DLL;
  int v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, void, void, uint64_t, float *))(*(void *)v2 + 48))(v2, &v4, 0, 0, 4, &v6);
}

float sub_AB114(uint64_t a1)
{
  int v5 = 4;
  float v6 = 0.0;
  uint64_t v1 = *(void *)(a1 + 96);
  uint64_t v3 = 0x676C6F62766F6C6DLL;
  int v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)v1 + 40))(v1, &v3, 0, 0, &v5, &v6);
  return v6;
}

uint64_t sub_AB188(uint64_t a1, float a2)
{
  float v6 = a2;
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = 0x676C6F62766F6C64;
  int v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, void, void, uint64_t, float *))(*(void *)v2 + 48))(v2, &v4, 0, 0, 4, &v6);
}

float sub_AB1F4(uint64_t a1)
{
  int v5 = 4;
  float v6 = 0.0;
  uint64_t v1 = *(void *)(a1 + 96);
  uint64_t v3 = 0x676C6F62766F6C64;
  int v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, float *))(*(void *)v1 + 40))(v1, &v3, 0, 0, &v5, &v6);
  return v6;
}

float sub_AB268(uint64_t a1)
{
  uint64_t v7 = 0;
  double v8 = 0.0;
  int v6 = 16;
  uint64_t v1 = *(void *)(a1 + 96);
  strcpy(buf, "#bdvbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  (*(void (**)(uint64_t, unsigned char *, void, void, int *, uint64_t *))(*(void *)v1 + 40))(v1, buf, 0, 0, &v6, &v7);
  if (v8 > 3.40282347e38)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
      __int16 v10 = 1024;
      int v11 = 79;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::overflow_error): \"value exceeded the MAXFLOAT.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_A3224(exception, "value exceeded the MAXFLOAT.");
  }
  return v8;
}

void sub_AB3D0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float sub_AB3EC(uint64_t a1)
{
  v7[0] = 0.0;
  v7[1] = 0.0;
  int v6 = 16;
  uint64_t v1 = *(void *)(a1 + 96);
  strcpy(buf, "#bdvbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  (*(void (**)(uint64_t, unsigned char *, void, void, int *, double *))(*(void *)v1 + 40))(v1, buf, 0, 0, &v6, v7);
  if (v7[0] > 3.40282347e38)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
      __int16 v9 = 1024;
      int v10 = 67;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::overflow_error): \"value exceeded the MAXFLOAT.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_A3224(exception, "value exceeded the MAXFLOAT.");
  }
  return v7[0];
}

void sub_AB554(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_AB570(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_AB578(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

void sub_AB580(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if (a2)
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = a2;
LABEL_3:
    char v16 = v8;
    uint64_t v10 = 12 * v7;
    do
    {
      int v11 = *(_DWORD *)(a3 + v10);
      if (v11 <= 1919774834)
      {
        if (v11 != 1064725619 && v11 != 1684633187)
        {
LABEL_23:
          ++v7;
          char v8 = 1;
          uint64_t v15 = a2;
          if (v7 != v9) {
            goto LABEL_3;
          }
          goto LABEL_26;
        }
      }
      else if (v11 != 1919774835 && v11 != 1986817377 && v11 != 1986229104)
      {
        goto LABEL_23;
      }
      *(_DWORD *)int64x2_t v18 = *(_DWORD *)(a3 + v10);
      *(void *)&v18[4] = *(void *)(a1 + 104);
      if (!a4)
      {
        uint64_t v19 = *(void *)v18;
        int v20 = *(_DWORD *)&v18[8];
        sub_13910();
        operator new();
      }
      (*(void (**)(void, uint64_t, unsigned char *, uint64_t))(**(void **)(a1 + 80) + 72))(*(void *)(a1 + 80), 1, v18, 1);
      ++v7;
      v10 += 12;
    }
    while (v9 != v7);
    uint64_t v15 = a2;
    if ((v16 & 1) == 0) {
      return;
    }
LABEL_26:
    sub_8180(a1, v15, a3, a4);
  }
}

void sub_AB738(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  int v3 = *((_DWORD *)a1 + 4);
  (*(void (**)(void, uint64_t, uint64_t *, uint64_t))(**(void **)(v1 + 80) + 72))(*(void *)(v1 + 80), 1, &v2, 1);
  operator delete();
}

void sub_AB7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v19 = __cxa_begin_catch(exception_object);
    int v20 = (os_log_t *)sub_32A48(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = v19[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v22;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 319;
      uint32_t v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      unsigned int v24 = v21;
      uint32_t v25 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v25);
    }
  }
  else
  {
    uint32_t v26 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      os_log_t v27 = v26;
      uint64_t v28 = (os_log_t *)sub_32A48(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v30;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 319;
        uint32_t v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        unsigned int v24 = v29;
        uint32_t v25 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 319;
        uint32_t v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        unsigned int v24 = v32;
        uint32_t v25 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0xAB7ACLL);
}

uint64_t sub_ABCC0(void **a1, int *a2, uint64_t a3, uint64_t a4, int a5, unsigned __int32 *a6)
{
  if ((((uint64_t (*)(void **))(*a1)[4])(a1) & 1) == 0)
  {
    char v16 = (os_log_t *)sub_32A48(13);
    __int16 v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *(void *)a2;
      int v40 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v39);
      int64x2_t v18 = v42 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v44 = "VirtualAudio_Control.cpp";
      __int16 v45 = 1024;
      int v46 = 262;
      __int16 v47 = 2080;
      int64x2_t v48 = (const char *)v18;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v20 = (os_log_t *)sub_32A48(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *(void *)a2;
      int v40 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v39);
      int v22 = v42 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      char v44 = "VirtualAudio_Control.cpp";
      __int16 v45 = 1024;
      int v46 = 263;
      __int16 v47 = 2080;
      int64x2_t v48 = (const char *)v22;
      __int16 v49 = 1024;
      LODWORD(v50[0]) = a3;
      WORD2(v50[0]) = 2048;
      *(void *)((char *)v50 + 6) = a4;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    uint32_t v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint32_t v23 = &off_6414D8;
    v23[2] = 561211770;
  }
  if (!a6)
  {
    unsigned int v24 = (os_log_t *)sub_32A48(13);
    uint32_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *(void *)a2;
      int v40 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v39);
      uint32_t v26 = v42 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      char v44 = "VirtualAudio_Control.cpp";
      __int16 v45 = 1024;
      int v46 = 264;
      __int16 v47 = 2080;
      int64x2_t v48 = "inData";
      __int16 v49 = 2080;
      v50[0] = v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    os_log_t v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)os_log_t v27 = &off_6414D8;
    v27[2] = 561211770;
  }
  if ((((uint64_t (*)(void **, int *))(*a1)[5])(a1, a2) & 1) == 0)
  {
    uint64_t v28 = (os_log_t *)sub_32A48(13);
    os_log_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = *(void *)a2;
      int v40 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v39);
      uint64_t v30 = v42 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v44 = "VirtualAudio_Control.cpp";
      __int16 v45 = 1024;
      int v46 = 265;
      __int16 v47 = 2080;
      int64x2_t v48 = (const char *)v30;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v31 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v31 = &off_6414D8;
    void v31[2] = 1852797029;
  }
  int v12 = *a2;
  if (*a2 > 1919774834)
  {
    if (v12 > 1986098019)
    {
      if (v12 == 1986817377) {
        goto LABEL_17;
      }
      int v13 = 1986098020;
    }
    else
    {
      if (v12 == 1919774835) {
        goto LABEL_17;
      }
      int v13 = 1936878960;
    }
  }
  else
  {
    if (v12 <= 1836478307)
    {
      if (v12 != 1668443504)
      {
        int v13 = 1668705648;
        goto LABEL_16;
      }
LABEL_17:
      if (((unsigned int (*)(void **, int *, uint64_t, uint64_t))(*a1)[6])(a1, a2, a3, a4) != a5)
      {
        os_log_t v32 = (os_log_t *)sub_32A48(13);
        os_log_t v33 = *v32;
        if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
        {
          uint64_t v39 = *(void *)a2;
          int v40 = a2[2];
          sub_16C9C4((uint64_t)__p, (unsigned int *)&v39);
          int v34 = v42;
          CFStringRef v35 = (void **)__p[0];
          int v36 = ((uint64_t (*)(void **, int *, uint64_t, uint64_t))(*a1)[6])(a1, a2, a3, a4);
          CFStringRef v37 = __p;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          char v44 = "VirtualAudio_Control.cpp";
          if (v34 < 0) {
            CFStringRef v37 = v35;
          }
          __int16 v45 = 1024;
          int v46 = 277;
          __int16 v47 = 2080;
          int64x2_t v48 = (const char *)v37;
          __int16 v49 = 1024;
          LODWORD(v50[0]) = a5;
          WORD2(v50[0]) = 1024;
          *(_DWORD *)((char *)v50 + 6) = v36;
          _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v42 < 0) {
            operator delete(__p[0]);
          }
        }
        CFStringRef v38 = __cxa_allocate_exception(0x10uLL);
        *(void *)CFStringRef v38 = &off_6414D8;
        v38[2] = 561211770;
      }
      int v14 = *(uint64_t (**)(void))(*a1[12] + 48);
      return v14();
    }
    if (v12 == 1836478308) {
      goto LABEL_17;
    }
    int v13 = 1918987632;
  }
LABEL_16:
  if (v12 == v13) {
    goto LABEL_17;
  }

  return sub_7554C((uint64_t)a1, a2, a3, a4, a5, a6);
}

void sub_AC4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_AC4F8(void *a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t *a6)
{
  if (((*(uint64_t (**)(void *))(*a1 + 32))(a1) & 1) == 0)
  {
    char v16 = (os_log_t *)sub_32A48(13);
    __int16 v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = *(void *)a2;
      int v37 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v36);
      int64x2_t v18 = v39 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v41 = (uint64_t)"VirtualAudio_Control.cpp";
      __int16 v42 = 1024;
      int v43 = 231;
      __int16 v44 = 2080;
      __int16 v45 = (const char *)v18;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v20 = (os_log_t *)sub_32A48(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = *(void *)a2;
      int v37 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v36);
      int v22 = v39 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v41 = (uint64_t)"VirtualAudio_Control.cpp";
      __int16 v42 = 1024;
      int v43 = 232;
      __int16 v44 = 2080;
      __int16 v45 = (const char *)v22;
      __int16 v46 = 1024;
      LODWORD(v47[0]) = a3;
      WORD2(v47[0]) = 2048;
      *(void *)((char *)v47 + 6) = a4;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }
    uint32_t v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint32_t v23 = &off_6414D8;
    v23[2] = 561211770;
  }
  if (!a6)
  {
    unsigned int v24 = (os_log_t *)sub_32A48(13);
    uint32_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = *(void *)a2;
      int v37 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v36);
      uint32_t v26 = v39 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      uint64_t v41 = (uint64_t)"VirtualAudio_Control.cpp";
      __int16 v42 = 1024;
      int v43 = 233;
      __int16 v44 = 2080;
      __int16 v45 = "outData";
      __int16 v46 = 2080;
      v47[0] = v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }
    os_log_t v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)os_log_t v27 = &off_6414D8;
    v27[2] = 561211770;
  }
  int v12 = *a2;
  if (*a2 > 1919774834)
  {
    if (v12 > 1986225517)
    {
      if (v12 == 1986225518 || v12 == 1986817377) {
        goto LABEL_20;
      }
      int v13 = 1986229104;
    }
    else
    {
      if (v12 == 1919774835 || v12 == 1936878960) {
        goto LABEL_20;
      }
      int v13 = 1986098020;
    }
  }
  else if (v12 > 1684633186)
  {
    if (v12 == 1684633187 || v12 == 1685484390) {
      goto LABEL_20;
    }
    int v13 = 1918987632;
  }
  else
  {
    if (v12 == 1064725619 || v12 == 1668443504) {
      goto LABEL_20;
    }
    int v13 = 1668705648;
  }
  if (v12 == v13)
  {
LABEL_20:
    int v14 = *a5;
    if (v14 != (*(unsigned int (**)(void *, int *, uint64_t, uint64_t))(*a1 + 48))(a1, a2, a3, a4))
    {
      uint64_t v28 = (os_log_t *)sub_32A48(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = *(void *)a2;
        int v37 = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v36);
        int v30 = v39;
        uint64_t v31 = (void **)__p[0];
        int v32 = *a5;
        int v33 = (*(uint64_t (**)(void *, int *, uint64_t, uint64_t))(*a1 + 48))(a1, a2, a3, a4);
        int v34 = __p;
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        uint64_t v41 = (uint64_t)"VirtualAudio_Control.cpp";
        if (v30 < 0) {
          int v34 = v31;
        }
        __int16 v42 = 1024;
        int v43 = 249;
        __int16 v44 = 2080;
        __int16 v45 = (const char *)v34;
        __int16 v46 = 1024;
        LODWORD(v47[0]) = v32;
        WORD2(v47[0]) = 1024;
        *(_DWORD *)((char *)v47 + 6) = v33;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v39 < 0) {
          operator delete(__p[0]);
        }
      }
      CFStringRef v35 = __cxa_allocate_exception(0x10uLL);
      *(void *)CFStringRef v35 = &off_6414D8;
      v35[2] = 561211770;
    }
    uint64_t v15 = a1[12];
    *(_DWORD *)AudioObjectPropertyAddress buf = *a2;
    uint64_t v41 = 1735159650;
    (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t, int *, uint64_t *))(*(void *)v15 + 40))(v15, buf, a3, a4, a5, a6);
    return;
  }

  sub_7582C((uint64_t)a1, a2, a3, a4, a5, a6);
}

void sub_ACC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ACC40(void *a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *))(*a1 + 32))(a1) & 1) == 0)
  {
    int v13 = (os_log_t *)sub_32A48(13);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)a2;
      int v22 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v21);
      uint64_t v15 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v26 = (uint64_t)"VirtualAudio_Control.cpp";
      __int16 v27 = 1024;
      int v28 = 197;
      __int16 v29 = 2080;
      int v30 = v15;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    __int16 v17 = (os_log_t *)sub_32A48(13);
    int64x2_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)a2;
      int v22 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v21);
      uint64_t v19 = v24 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      uint64_t v26 = (uint64_t)"VirtualAudio_Control.cpp";
      __int16 v27 = 1024;
      int v28 = 198;
      __int16 v29 = 2080;
      int v30 = v19;
      __int16 v31 = 1024;
      int v32 = a3;
      __int16 v33 = 2048;
      uint64_t v34 = a4;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    int v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v20 = &off_6414D8;
    v20[2] = 561211770;
  }
  int v8 = *a2;
  if (*a2 <= 1918987631)
  {
    if (v8 > 1684633186)
    {
      if (v8 == 1684633187 || v8 == 1685484390) {
        goto LABEL_22;
      }
      int v10 = 1836478308;
    }
    else
    {
      if (v8 == 1064725619 || v8 == 1668443504) {
        goto LABEL_22;
      }
      int v10 = 1668705648;
    }
  }
  else
  {
    if (v8 > 1986098019)
    {
      if (v8 > 1986229103)
      {
        if (v8 != 1986817377)
        {
          unsigned __int16 v9 = 29552;
          goto LABEL_20;
        }
      }
      else if (v8 != 1986098020)
      {
        unsigned __int16 v9 = 25966;
LABEL_20:
        int v10 = v9 | 0x76630000;
        goto LABEL_21;
      }
LABEL_22:
      uint64_t v11 = a1[12];
      *(_DWORD *)AudioObjectPropertyAddress buf = *a2;
      uint64_t v26 = 1735159650;
      return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(void *)v11 + 32))(v11, buf, a3, a4);
    }
    if (v8 == 1918987632 || v8 == 1919774835) {
      goto LABEL_22;
    }
    int v10 = 1936878960;
  }
LABEL_21:
  if (v8 == v10) {
    goto LABEL_22;
  }

  return sub_75D8C((uint64_t)a1, a2);
}

uint64_t sub_AD0A0(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1918987631)
  {
    if (v2 > 1684633186)
    {
      BOOL v3 = v2 == 1684633187 || v2 == 1685484390;
      int v5 = 1836478308;
    }
    else
    {
      BOOL v3 = v2 == 1064725619 || v2 == 1668443504;
      int v5 = 1668705648;
    }
  }
  else if (v2 <= 1986098019)
  {
    BOOL v3 = v2 == 1918987632 || v2 == 1919774835;
    int v5 = 1936878960;
  }
  else
  {
    if (v2 > 1986229103)
    {
      BOOL v3 = v2 == 1986817377;
      unsigned __int16 v4 = 29552;
    }
    else
    {
      BOOL v3 = v2 == 1986098020;
      unsigned __int16 v4 = 25966;
    }
    int v5 = v4 | 0x76630000;
  }
  if (v3 || v2 == v5)
  {
    uint64_t v7 = *(void *)(a1 + 96);
    int v9 = *a2;
    uint64_t v10 = 1735159650;
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)v7 + 24))(v7, &v9);
  }
  else
  {
    return sub_75E04(a1, a2);
  }
}

uint64_t sub_AD1F4(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1918987631)
  {
    if (v2 > 1684633186)
    {
      BOOL v3 = v2 == 1684633187 || v2 == 1685484390;
      int v5 = 1836478308;
    }
    else
    {
      BOOL v3 = v2 == 1064725619 || v2 == 1668443504;
      int v5 = 1668705648;
    }
  }
  else if (v2 <= 1986098019)
  {
    BOOL v3 = v2 == 1918987632 || v2 == 1919774835;
    int v5 = 1936878960;
  }
  else
  {
    if (v2 > 1986229103)
    {
      BOOL v3 = v2 == 1986817377;
      unsigned __int16 v4 = 29552;
    }
    else
    {
      BOOL v3 = v2 == 1986098020;
      unsigned __int16 v4 = 25966;
    }
    int v5 = v4 | 0x76630000;
  }
  if (v3 || v2 == v5)
  {
    uint64_t v7 = *(void *)(a1 + 96);
    int v9 = *a2;
    uint64_t v10 = 1735159650;
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)v7 + 16))(v7, &v9);
  }
  else
  {
    return sub_75EB0(a1, a2);
  }
}

void sub_AD348(void *a1)
{
  sub_AD380(a1);

  operator delete();
}

uint64_t sub_AD380(void *a1)
{
  *a1 = off_61FC90;
  uint64_t v2 = a1[12];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  a1[12] = 0;

  return sub_3A6F14((uint64_t)a1);
}

uint64_t sub_AD404(uint64_t a1, int a2)
{
  int v6 = a2;
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v4 = 0x676C6F626D757465;
  int v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t *, void, void, uint64_t, int *))(*(void *)v2 + 48))(v2, &v4, 0, 0, 4, &v6);
}

BOOL sub_AD470(uint64_t a1)
{
  int v5 = 4;
  int v6 = 0;
  uint64_t v1 = *(void *)(a1 + 96);
  uint64_t v3 = 0x676C6F626D757465;
  int v4 = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, int *))(*(void *)v1 + 40))(v1, &v3, 0, 0, &v5, &v6);
  return v6 != 0;
}

uint64_t sub_AD4EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_AD4F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

void sub_AD4FC(void *a1)
{
  sub_AD534(a1);

  operator delete();
}

uint64_t sub_AD534(void *a1)
{
  *a1 = off_61FDB0;
  uint64_t v2 = a1[12];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  a1[12] = 0;

  return sub_3A6F14((uint64_t)a1);
}

double sub_AD5B8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 16);
    if (v5 >= (*(void *)(a1 + 24) - v7) >> 2)
    {
      int v9 = (os_log_t *)sub_32A48(13);
      uint64_t v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        int v12 = 136315394;
        int v13 = "VirtualAudio_Control.cpp";
        __int16 v14 = 1024;
        int v15 = 582;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::out_of_range): \"Invalid control address index\"", (uint8_t *)&v12, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_82578(exception, "Invalid control address index");
    }
    int v6 = (char *)(v7 + 4 * v5);
    goto LABEL_6;
  }
  if (a2 <= 0x25)
  {
    int v6 = &a0dap1dapcimici[4 * a2 + 32];
LABEL_6:
    *(_DWORD *)a3 = *(_DWORD *)v6;
  }
  double result = NAN;
  *(void *)(a3 + 4) = -3587560918;
  return result;
}

void sub_AD6FC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_AD718(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) + ((*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
}

void sub_AD730(void *a1)
{
  *a1 = off_61FEA0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void *sub_AD7A0(void *a1)
{
  *a1 = off_61FEA0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_AD7F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 96);
  if (!v2)
  {
    BOOL v8 = *(void *)(a1 + 112) == 0;
    unsigned int v9 = 2003329396;
    goto LABEL_12;
  }
  uint64_t v11 = 0x676C6F6278766F6CLL;
  int v12 = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v11))
  {
    BOOL v8 = *(void *)(a1 + 112) == 0;
    unsigned int v9 = 1970171760;
LABEL_12:
    if (v8) {
      return 0;
    }
    else {
      return v9;
    }
  }
  uint64_t v3 = *(void *)(a1 + 112);
  BOOL v4 = v3 == 0;
  if (v3) {
    unint64_t v5 = sub_AD8E8;
  }
  else {
    unint64_t v5 = 0;
  }
  if (v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = a1;
  }
  v10[0] = v5;
  v10[1] = v6;
  (*(void (**)(void, uint64_t *, void, void, uint64_t, void *))(**(void **)(a1 + 96) + 48))(*(void *)(a1 + 96), &v11, 0, 0, 16, v10);
  return 0;
}

void sub_AD8E8(void *a1, float a2)
{
  unint64_t v5 = (void **)a1[14];
  uint64_t v4 = a1[15];
  uint64_t v6 = a1[10];
  if (v6) {
    (*(void (**)(void **__return_ptr))(*(void *)v6 + 96))(__p);
  }
  else {
    sub_21C8C(__p, "unknown");
  }
  if (!v5)
  {
    uint64_t v14 = sub_32A48(0);
    uint64_t v15 = sub_32A48(38);
    char v16 = 0;
    uint64_t v17 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = *(int *)&buf[4 * v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1;
      if (v20)
      {
        if ((v18 & 1) == 0) {
          goto LABEL_30;
        }
        goto LABEL_24;
      }
    }
    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
    if ((*(void *)(v14 + 8) & 1) == 0) {
      goto LABEL_30;
    }
LABEL_24:
    __int16 v27 = *(NSObject **)v14;
    if (!v27 || !os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_30;
    }
    int v28 = __p;
    if (v30 < 0) {
      int v28 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
    __int16 v32 = 1024;
    int v33 = 482;
    __int16 v34 = 2080;
    CFStringRef v35 = v28;
    __int16 v36 = 2048;
    double v37 = a2;
    char v24 = "%25s:%-5d No external volume handler registered for VAD '%s'. Dropping volume change of %f on the floor.";
    uint32_t v25 = v27;
    uint32_t v26 = 38;
    goto LABEL_29;
  }
  ((void (*)(void, uint64_t, float))v5)(*(unsigned int *)(a1[10] + 8), v4, a2);
  uint64_t v7 = sub_32A48(0);
  uint64_t v8 = sub_32A48(38);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = *(int *)&buf[4 * v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_16;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_16:
  uint64_t v21 = *(NSObject **)v7;
  if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *(_DWORD *)(a1[10] + 8);
    uint32_t v23 = __p;
    if (v30 < 0) {
      uint32_t v23 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
    __int16 v32 = 1024;
    int v33 = 478;
    __int16 v34 = 2048;
    CFStringRef v35 = v5;
    __int16 v36 = 2048;
    double v37 = a2;
    __int16 v38 = 1024;
    int v39 = v22;
    __int16 v40 = 2080;
    uint64_t v41 = v23;
    char v24 = "%25s:%-5d Calling external volume handler %p with volume %f for object ID %u. VAD '%s'.";
    uint32_t v25 = v21;
    uint32_t v26 = 54;
LABEL_29:
    _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, v24, buf, v26);
  }
LABEL_30:
  if (v30 < 0) {
    operator delete(__p[0]);
  }
}

void sub_ADBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ADC10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a1 + 112);
    if (v4 && v4 != a2)
    {
      uint64_t v11 = (os_log_t *)sub_32A48(13);
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v15 = "VirtualAudio_Control.cpp";
          __int16 v16 = 1024;
          int v17 = 353;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Attempt to register an external volume handler when one is already registered.\"", buf, 0x12u);
        }
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      int v10 = 1852797029;
      goto LABEL_18;
    }
  }
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 120) = a3;
  uint64_t result = sub_AD7F0(a1);
  if (a2 && result)
  {
    int v13 = result;
    uint64_t v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v15 = "VirtualAudio_Control.cpp";
      __int16 v16 = 1024;
      int v17 = 359;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result): \"error configuring external volume handler on dispatch control\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    int v10 = v13;
LABEL_18:
    exception[2] = v10;
  }
  return result;
}

void sub_ADDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned int *)a1;
  uint64_t v6 = *(void *)(a1 + 80);
  if (v6) {
    uint64_t v7 = (*(void *(**)(void **__return_ptr))(*(void *)v6 + 96))(v102);
  }
  else {
    uint64_t v7 = sub_21C8C(v102, "unknown");
  }
  uint64_t v86 = (uint64_t)&v86;
  uint64_t v8 = a2;
  uint64_t v87 = a2;
  __n128 v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v86 - v10;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v9.n128_u64[0] = 136317186;
  __n128 v89 = v9;
  v9.n128_u64[0] = 136317442;
  __n128 v88 = v9;
  v94 = (char *)&v86 - v10;
  uint64_t v93 = a3;
  uint64_t v92 = a2;
  do
  {
    uint64_t v14 = (unsigned int *)(a3 + 12 * v12);
    unsigned int v15 = *v14;
    if (*v14 == 1986229104)
    {
      uint64_t v16 = sub_32A48(0);
      uint64_t v17 = sub_32A48(38);
      char v18 = 0;
      uint64_t v19 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v20 = *(void *)(v16 + 8);
      while (1)
      {
        uint64_t v21 = *(int *)&buf[4 * v19];
        char v22 = v18;
        if (((v20 & v21) != 0) != ((*(void *)(v17 + 8) & v21) != 0)) {
          break;
        }
        char v18 = 1;
        uint64_t v19 = 1;
        if (v22)
        {
          if ((v20 & 1) == 0) {
            goto LABEL_27;
          }
          goto LABEL_14;
        }
      }
      if ((v20 & v21) == 0) {
        uint64_t v16 = v17;
      }
      if (*(void *)(v16 + 8))
      {
LABEL_14:
        uint32_t v23 = *(NSObject **)v16;
        if (v23 && os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v95 = v13;
          if (v103 >= 0) {
            char v24 = v102;
          }
          else {
            char v24 = (void **)v102[0];
          }
          uint64_t v25 = a3 + 12 * v12;
          sub_2417C(v100, *(_DWORD *)(v25 + 4));
          uint64_t v26 = a3;
          int v27 = v101;
          int v28 = (void **)v100[0];
          int v29 = *(_DWORD *)(v25 + 4);
          int v30 = *(_DWORD *)(v26 + 12 * v12 + 8);
          sub_2417C(v98, v5[26]);
          __int16 v31 = v100;
          if (v27 < 0) {
            __int16 v31 = v28;
          }
          __int16 v32 = v98;
          if (v99 < 0) {
            __int16 v32 = (void **)v98[0];
          }
          unsigned int v33 = v5[26];
          unsigned int v34 = v5[27];
          *(_DWORD *)AudioObjectPropertyAddress buf = v89.n128_u32[0];
          *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
          __int16 v105 = 1024;
          int v106 = 379;
          __int16 v107 = 2080;
          *(void *)uint64_t v108 = v24;
          *(_WORD *)&v108[8] = 2080;
          uint64_t v109 = v31;
          __int16 v110 = 1024;
          *(_DWORD *)CFIndex v111 = v29;
          *(_WORD *)&v111[4] = 1024;
          *(_DWORD *)&v111[6] = v30;
          *(_WORD *)uint64_t v112 = 2080;
          *(void *)&v112[2] = v32;
          __int16 v113 = 1024;
          *(_DWORD *)unsigned int v114 = v33;
          *(_WORD *)&v114[4] = 1024;
          *(_DWORD *)&v114[6] = v34;
          _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Send property listener callback to VAD client '%s'. (selector: kVirtualAudioDevicePropertyVolumeControlSupported; scope: '%s' (%u); element: %u) translated to (scope: '%s' (%u); element: %u).",
            buf,
            0x48u);
          if (v99 < 0) {
            operator delete(v98[0]);
          }
          uint64_t v11 = v94;
          uint64_t v13 = v95;
          a3 = v93;
          uint64_t v8 = v92;
          if (v101 < 0) {
            operator delete(v100[0]);
          }
        }
      }
LABEL_27:
      unsigned int v15 = *v14;
    }
    if (v15 == 1684633187)
    {
      uint64_t v35 = sub_32A48(0);
      uint64_t v36 = sub_32A48(38);
      char v37 = 0;
      uint64_t v38 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v39 = *(void *)(v35 + 8);
      while (1)
      {
        uint64_t v40 = *(int *)&buf[4 * v38];
        char v41 = v37;
        if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
          break;
        }
        char v37 = 1;
        uint64_t v38 = 1;
        if (v41)
        {
          if ((v39 & 1) == 0) {
            goto LABEL_50;
          }
          goto LABEL_37;
        }
      }
      if ((v39 & v40) == 0) {
        uint64_t v35 = v36;
      }
      if (*(void *)(v35 + 8))
      {
LABEL_37:
        __int16 v42 = *(NSObject **)v35;
        if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v95 = v13;
          if (v103 >= 0) {
            int v43 = v102;
          }
          else {
            int v43 = (void **)v102[0];
          }
          uint64_t v44 = a3 + 12 * v12;
          sub_2417C(v100, *(_DWORD *)(v44 + 4));
          uint64_t v45 = a3;
          int v46 = v101;
          __int16 v47 = (void **)v100[0];
          int v48 = *(_DWORD *)(v44 + 4);
          int v49 = *(_DWORD *)(v45 + 12 * v12 + 8);
          sub_2417C(v98, v5[26]);
          CFIndex v50 = v100;
          if (v46 < 0) {
            CFIndex v50 = v47;
          }
          CFDictionaryRef v51 = v98;
          if (v99 < 0) {
            CFDictionaryRef v51 = (void **)v98[0];
          }
          unsigned int v52 = v5[26];
          unsigned int v53 = v5[27];
          *(_DWORD *)AudioObjectPropertyAddress buf = v89.n128_u32[0];
          *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
          __int16 v105 = 1024;
          int v106 = 390;
          __int16 v107 = 2080;
          *(void *)uint64_t v108 = v43;
          *(_WORD *)&v108[8] = 2080;
          uint64_t v109 = v50;
          __int16 v110 = 1024;
          *(_DWORD *)CFIndex v111 = v48;
          *(_WORD *)&v111[4] = 1024;
          *(_DWORD *)&v111[6] = v49;
          *(_WORD *)uint64_t v112 = 2080;
          *(void *)&v112[2] = v51;
          __int16 v113 = 1024;
          *(_DWORD *)unsigned int v114 = v52;
          *(_WORD *)&v114[4] = 1024;
          *(_DWORD *)&v114[6] = v53;
          _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_DEBUG, "%25s:%-5d Send property listener callback to VAD client '%s'. (selector: kVirtualAudioDevicePropertyDeviceInitiatedVolumeChange; scope: '%s' (%u); element: %u) translated to (scope: '%s' (%u); element %u).",
            buf,
            0x48u);
          if (v99 < 0) {
            operator delete(v98[0]);
          }
          uint64_t v11 = v94;
          uint64_t v13 = v95;
          a3 = v93;
          uint64_t v8 = v92;
          if (v101 < 0) {
            operator delete(v100[0]);
          }
        }
      }
    }
LABEL_50:
    int v54 = *v14;
    if (*v14 == 1986817377 || v54 == 1064725619)
    {
      uint64_t v56 = sub_32A48(0);
      uint64_t v57 = sub_32A48(38);
      char v58 = 0;
      uint64_t v59 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v60 = *(void *)(v56 + 8);
      while (1)
      {
        uint64_t v61 = *(int *)&buf[4 * v59];
        char v62 = v58;
        if (((v60 & v61) != 0) != ((*(void *)(v57 + 8) & v61) != 0)) {
          break;
        }
        char v58 = 1;
        uint64_t v59 = 1;
        if (v62)
        {
          if ((v60 & 1) == 0) {
            goto LABEL_80;
          }
          goto LABEL_63;
        }
      }
      if ((v60 & v61) == 0) {
        uint64_t v56 = v57;
      }
      if (*(void *)(v56 + 8))
      {
LABEL_63:
        int64x2_t v63 = *(NSObject **)v56;
        if (v63 && os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
        {
          if (v103 >= 0) {
            unint64_t v64 = v102;
          }
          else {
            unint64_t v64 = (void **)v102[0];
          }
          sub_2417C(v100, *v14);
          CFNumberRef v91 = v64;
          unsigned int v95 = v13;
          CFStringRef v65 = v5;
          double v66 = v100;
          if (v101 < 0) {
            double v66 = (void **)v100[0];
          }
          v90 = v66;
          uint64_t v67 = a3 + 12 * v12;
          sub_2417C(v98, *(_DWORD *)(v67 + 4));
          uint64_t v68 = a3;
          int v69 = v99;
          uint64_t v70 = (void **)v98[0];
          int v71 = *(_DWORD *)(v67 + 4);
          int v72 = *(_DWORD *)(v68 + 12 * v12 + 8);
          sub_2417C(v96, v65[26]);
          std::condition_variable v73 = v98;
          if (v69 < 0) {
            std::condition_variable v73 = v70;
          }
          int v74 = v96;
          if (v97 < 0) {
            int v74 = (void **)v96[0];
          }
          unsigned int v75 = v65[26];
          unsigned int v76 = v65[27];
          *(_DWORD *)AudioObjectPropertyAddress buf = v88.n128_u32[0];
          *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
          __int16 v105 = 1024;
          int v106 = 403;
          __int16 v107 = 2080;
          *(void *)uint64_t v108 = v91;
          *(_WORD *)&v108[8] = 2080;
          uint64_t v109 = v90;
          __int16 v110 = 2080;
          *(void *)CFIndex v111 = v73;
          *(_WORD *)&v111[8] = 1024;
          *(_DWORD *)uint64_t v112 = v71;
          *(_WORD *)&v112[4] = 1024;
          *(_DWORD *)&v112[6] = v72;
          __int16 v113 = 2080;
          *(void *)unsigned int v114 = v74;
          *(_WORD *)&v114[8] = 1024;
          unsigned int v115 = v75;
          __int16 v116 = 1024;
          unsigned int v117 = v76;
          _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_DEBUG, "%25s:%-5d Send property listener callback to VAD client '%s'. (selector: %s; scope: '%s' (%u); element: %u) "
            "translated to (scope: '%s' (%u); element %u).",
            buf,
            0x52u);
          unint64_t v5 = v65;
          if (v97 < 0) {
            operator delete(v96[0]);
          }
          uint64_t v11 = v94;
          uint64_t v13 = v95;
          a3 = v93;
          uint64_t v8 = v92;
          if (v99 < 0) {
            operator delete(v98[0]);
          }
          if (v101 < 0) {
            operator delete(v100[0]);
          }
        }
      }
LABEL_80:
      int v54 = *v14;
    }
    if (v54 <= 1919774834)
    {
      BOOL v77 = v54 == 1064725619;
      int v78 = 1684633187;
    }
    else
    {
      BOOL v77 = v54 == 1919774835 || v54 == 1986817377;
      int v78 = 1986229104;
    }
    if (v77 || v54 == v78)
    {
      uint64_t v80 = &v11[12 * v13];
      uint64_t v13 = (v13 + 1);
      *(void *)uint64_t v80 = *(void *)v14;
      *((_DWORD *)v80 + 2) = v14[2];
    }
    ++v12;
  }
  while (v12 != v8);
  uint64_t v81 = sub_32A48(0);
  unsigned int v82 = v87;
  if (*(unsigned char *)(v81 + 8))
  {
    CFTypeRef v83 = *(NSObject **)v81;
    if (*(void *)v81)
    {
      if (os_log_type_enabled(*(os_log_t *)v81, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
        __int16 v105 = 1024;
        int v106 = 412;
        __int16 v107 = 1024;
        *(_DWORD *)uint64_t v108 = v82;
        *(_WORD *)&v108[4] = 1024;
        *(_DWORD *)&v108[6] = v13;
        _os_log_impl(&def_1E50E8, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d inNumberAddresses: %u; outNumberAddresses: %u",
          buf,
          0x1Eu);
      }
    }
  }
  if (v13 <= v82)
  {
    if (!v13) {
      goto LABEL_104;
    }
  }
  else
  {
    v84 = (os_log_t *)sub_32A48(13);
    unint64_t v85 = *v84;
    if (*v84 && os_log_type_enabled(*v84, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Control.cpp";
      __int16 v105 = 1024;
      int v106 = 414;
      _os_log_impl(&def_1E50E8, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"inNumberAddresses < outNumberAddresses.\"", buf, 0x12u);
    }
  }
  (*(void (**)(unsigned int *, uint64_t, char *, uint64_t))(*(void *)v5 + 72))(v5, v13, v11, 1);
LABEL_104:
  if (v13 != v82) {
    (*(void (**)(unsigned int *))(*(void *)v5 + 168))(v5);
  }
  if (v103 < 0) {
    operator delete(v102[0]);
  }
}

void sub_AE78C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 209) < 0) {
    operator delete(*(void **)(v1 - 232));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_AE810(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 320))(a2, *(void *)(result + 16), *(void *)(result + 24));
  }
  return result;
}

void sub_AE850()
{
}

uint64_t sub_AE868(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 336))(a2, *(void *)(result + 16));
  }
  return result;
}

void sub_AE8A8()
{
}

uint64_t sub_AE8C0(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)a2 + 416))(a2, *(void *)(result + 16), *(unsigned __int8 *)(result + 24), *(unsigned int *)(result + 28), *(void *)(result + 32));
  }
  return result;
}

void sub_AE90C(void *a1)
{
  *a1 = off_61FF48;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    operator delete[]();
  }

  operator delete();
}

void *sub_AE98C(void *a1)
{
  *a1 = off_61FF48;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    operator delete[]();
  }
  return a1;
}

uint64_t sub_AE9F0(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 384))(a2, *(void *)(result + 16));
  }
  return result;
}

void sub_AEA30()
{
}

uint64_t sub_AEA48(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 400))(a2);
  }
  return result;
}

void sub_AEA80()
{
}

void sub_AEA98(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    int v3 = *(_DWORD *)(a1 + 12);
    if (a2[122] != v3)
    {
      int v4 = *(unsigned __int8 *)(a1 + 16);
      a2[122] = v3;
      uint64_t v5 = *((void *)a2 + 58);
      if (v5)
      {
        for (uint64_t i = *(uint64_t **)(v5 + 8); i != *(uint64_t **)(v5 + 16); ++i)
        {
          uint64_t v7 = *i;
          sub_B25F8(v5, v7);
        }
        sub_B26A4((_DWORD **)v5);
      }
      uint64_t v8 = *((void *)a2 + 59);
      if (v8)
      {
        for (uint64_t j = *(uint64_t **)(v8 + 8); j != *(uint64_t **)(v8 + 16); ++j)
        {
          uint64_t v10 = *j;
          sub_B3124(v8, v10);
        }
        sub_B31D0((_DWORD **)v8);
      }
      if (v4)
      {
        long long v20 = 0u;
        uint64_t v11 = sub_564C(1uLL);
        *(void *)uint64_t v11 = 0x676C6F626673697ALL;
        v11[2] = 0;
        __p[1] = v11 + 3;
        *(void *)&long long v20 = &v11[3 * v12];
        __p[0] = v11;
        (*(void (**)(_DWORD *, uint64_t, void **))(*(void *)a2 + 552))(a2, 1, __p);
        uint64_t v13 = (atomic_ullong *)(*(uint64_t (**)(_DWORD *))(*(void *)a2 + 528))(a2);
        if (v13
          && ((uint64_t v14 = pthread_self(), pthread_equal(v14, (pthread_t)atomic_load_explicit(v13 + 2, memory_order_acquire)))
           || (unsigned int v15 = pthread_self(), pthread_equal(v15, (pthread_t)atomic_load_explicit(v13 + 13, memory_order_acquire)))))
        {
          sub_B3DBC(v13);
          char v16 = 0;
        }
        else
        {
          char v16 = 1;
        }
        (*(void (**)(_DWORD *, void))(*(void *)a2 + 72))(a2, -1431655765 * ((unint64_t)((char *)__p[1] - (char *)__p[0]) >> 2));
        if (v13) {
          char v18 = v16;
        }
        else {
          char v18 = 1;
        }
        if ((v18 & 1) == 0) {
          sub_B3FB4((uint64_t)v13);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        uint64_t v17 = *(void (**)(_DWORD *, void, void))(*(void *)a2 + 552);
        v17(a2, 0, 0);
      }
    }
  }
}

void sub_AECE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_AED0C()
{
}

BOOL sub_AED24(uint64_t a1)
{
  return atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire) == 0;
}

uint64_t sub_AED38(uint64_t a1, char *a2)
{
  *a2 = 0;
  int v4 = pthread_self();
  if (pthread_equal(v4, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire)))
  {
    char v5 = 0;
  }
  else
  {
    int v6 = pthread_mutex_trylock((pthread_mutex_t *)(a1 + 24));
    if (v6 == 16)
    {
      char v5 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    if (v6)
    {
      v10[0] = HIBYTE(v6);
      v10[1] = BYTE2(v6);
      void v10[2] = BYTE1(v6);
      int v8 = v6;
      uint64_t v10[3] = v6;
      v10[4] = 0;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        uint64_t v12 = "CAMutex.cpp";
        __int16 v13 = 1024;
        int v14 = 224;
        __int16 v15 = 1024;
        int v16 = v8;
        __int16 v17 = 2080;
        char v18 = v10;
        _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::Try: call to pthread_mutex_trylock failed, Error: %d (%s)", buf, 0x22u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = v8;
    }
    atomic_store((unint64_t)v4, (unint64_t *)(a1 + 16));
    char v5 = 1;
  }
  uint64_t result = 1;
LABEL_7:
  *a2 = v5;
  return result;
}

void sub_AEED4(uint64_t a1)
{
  sub_AEF0C(a1);

  operator delete();
}

uint64_t sub_AEF0C(uint64_t a1)
{
  *(void *)a1 = off_620010;
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 24));
  return a1;
}

uint64_t sub_AEF58(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_620010;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  int v3 = pthread_mutex_init((pthread_mutex_t *)(a1 + 24), 0);
  if (v3)
  {
    int v5 = v3;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "CAMutex.cpp";
      __int16 v9 = 1024;
      int v10 = 56;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  CAMutex::CAMutex: Could not init the mutex", (uint8_t *)&v7, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v5;
  }
  return a1;
}

unsigned char *sub_AF08C(unsigned char *a1, uint64_t a2)
{
  *(void *)a1 = a2;
  a1[8] = 0;
  if (((*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      int v5 = "CAMutex.cpp";
      __int16 v6 = 1024;
      int v7 = 304;
      _os_log_impl(&def_1E50E8, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "%25s:%-5d  Major problem: Unlocker attempted to unlock a mutex not owned by the current thread!", (uint8_t *)&v4, 0x12u);
    }
    __break(1u);
  }
  (*(void (**)(void))(**(void **)a1 + 24))();
  a1[8] = 1;
  return a1;
}

unsigned char *sub_AF1B0(unsigned char *a1)
{
  if (a1[8]) {
    (*(void (**)(void))(**(void **)a1 + 16))();
  }
  return a1;
}

uint64_t sub_AF208(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 1008);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 488))();
  }
  return result;
}

uint64_t sub_AF240(uint64_t a1, uint64_t a2)
{
  if ((int)a2 <= 1918987631)
  {
    if ((int)a2 <= 1668705647)
    {
      if (a2 == 1064725619) {
        return a2;
      }
      int v2 = 1668443504;
    }
    else
    {
      if (a2 == 1668705648 || a2 == 1684633187) {
        return a2;
      }
      int v2 = 1836478308;
    }
  }
  else if ((int)a2 > 1986098019)
  {
    if (a2 == 1986098020 || a2 == 1986229104) {
      return a2;
    }
    int v2 = 1986817377;
  }
  else
  {
    if (a2 == 1918987632 || a2 == 1919774835) {
      return a2;
    }
    int v2 = 1936878960;
  }
  if (a2 == v2) {
    return a2;
  }
  return sub_35F428(a1, a2);
}

void sub_AF320(uint64_t a1, int *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  int v5 = *a2;
  if (*a2 <= 1918987631)
  {
    if (v5 <= 1668705647)
    {
      BOOL v6 = v5 == 1064725619;
      int v7 = 1668443504;
    }
    else
    {
      BOOL v6 = v5 == 1668705648 || v5 == 1684633187;
      int v7 = 1836478308;
    }
  }
  else if (v5 > 1986098019)
  {
    BOOL v6 = v5 == 1986098020 || v5 == 1986817377;
    int v7 = 1986229104;
  }
  else
  {
    BOOL v6 = v5 == 1918987632 || v5 == 1919774835;
    int v7 = 1936878960;
  }
  if (v6 || v5 == v7)
  {
    *a3 = 1986817381;
    *a4 = a2[1];
    *a5 = a2[2];
  }
  else
  {
    sub_35F834(a1, a2, a3, a4, a5);
  }
}

double sub_AF400(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1008);
  if (!v1)
  {
    int v3 = (os_log_t *)sub_32A48(13);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v9 = 1024;
      int v10 = 3619;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"Attempt to get actual sample rate without an active device\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  double v7 = 0.0;
  int v6 = 8;
  strcpy(buf, "trsabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  (*(void (**)(uint64_t, unsigned char *, void, void, int *, double *))(*(void *)v1 + 40))(v1, buf, 0, 0, &v6, &v7);
  return v7;
}

uint64_t sub_AF568(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1008);
  if (!v1)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "VirtualAudio_Device.cpp";
      __int16 v9 = 1024;
      int v10 = 3611;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"Attempt to get nominal sample rate without an active device\"", (uint8_t *)&v7, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  int v2 = *(uint64_t (**)(void))(*(void *)v1 + 104);

  return v2();
}

unsigned char *sub_AF6A8(BOOL *a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(BOOL *))(*a1 + 512))(a1) & 1) == 0)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    __int16 v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v17 = 136315394;
      *(void *)&v17[4] = "VirtualAudio_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 3581;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareNotRunningError): \"can't because there isn't anything running yet\"", v17, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1937010544;
  }
  if ((~a3 & 6) == 0)
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v17 = 136315394;
      *(void *)&v17[4] = "VirtualAudio_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 3582;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"can't because the start time flags are conflicting\"", v17, 0x12u);
    }
    __int16 v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v13 = &off_6414D8;
    v13[2] = 1852797029;
  }
  if (!a1[126])
  {
    int v14 = (os_log_t *)sub_32A48(13);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v17 = 136315394;
      *(void *)&v17[4] = "VirtualAudio_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 3585;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"Attempt to get nearest start time without an active device\"", v17, 0x12u);
    }
    int v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v16 = &off_6414D8;
    v16[2] = 2003329396;
  }
  if (sub_51CA0(a1[80]))
  {
    char v6 = 0;
    *(void *)__int16 v17 = 0;
  }
  else
  {
    sub_3B7EC();
    *(void *)__int16 v17 = &qword_64CC40;
    char v6 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  }
  v17[8] = v6;
  (*(void (**)(BOOL, uint64_t, uint64_t))(*(void *)a1[126] + 296))(a1[126], a2, a3);
  return sub_3BCAC(v17);
}

void sub_AFA14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    sub_3BCAC(&a9);
    uint64_t v11 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v12 = v11[2];
      __cxa_end_catch();
      if (!v12) {
        JUMPOUT(0xAF7B0);
      }
    }
    else
    {
      __cxa_end_catch();
      int v12 = 2003329396;
    }
    __int16 v13 = (os_log_t *)sub_32A48(13);
    int v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3605;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theError) [error theError is an error]: \"error getting nearest start time from the active device\"", (uint8_t *)&a9, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v12;
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_AFB24(BOOL *a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)(a2 + 56) & 3) == 0)
  {
    int v8 = (os_log_t *)sub_32A48(13);
    __int16 v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v15 = 136315394;
      *(void *)&v15[4] = "VirtualAudio_Device.cpp";
      __int16 v16 = 1024;
      int v17 = 3546;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"have to have either sample time or host time valid on the input\"", v15, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }
  if (((*(uint64_t (**)(BOOL *))(*a1 + 512))(a1) & 1) == 0)
  {
    uint64_t v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v11 = &off_6414D8;
    v11[2] = 1937010544;
  }
  if (!a1[126])
  {
    int v12 = (os_log_t *)sub_32A48(13);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v15 = 136315394;
      *(void *)&v15[4] = "VirtualAudio_Device.cpp";
      __int16 v16 = 1024;
      int v17 = 3553;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"Attempt to translate time without an active device\"", v15, 0x12u);
    }
    int v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v14 = &off_6414D8;
    v14[2] = 2003329396;
  }
  if (sub_51CA0(a1[80]))
  {
    char v6 = 0;
    *(void *)__int16 v15 = 0;
  }
  else
  {
    sub_3B7EC();
    *(void *)__int16 v15 = &qword_64CC40;
    char v6 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  }
  v15[8] = v6;
  (*(void (**)(BOOL, uint64_t, uint64_t))(*(void *)a1[126] + 288))(a1[126], a2, a3);
  return sub_3BCAC(v15);
}

void sub_AFE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    sub_3BCAC(&a9);
    uint64_t v11 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v12 = v11[2];
      __cxa_end_catch();
      if (!v12) {
        JUMPOUT(0xAFC2CLL);
      }
    }
    else
    {
      __cxa_end_catch();
      int v12 = 2003329396;
    }
    __int16 v13 = (os_log_t *)sub_32A48(13);
    int v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3573;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theError) [error theError is an error]: \"error translating time by the active device\"", (uint8_t *)&a9, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v12;
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_AFF30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 600))();
}

unsigned char *sub_AFF5C(BOOL *a1, uint64_t a2)
{
  if (((*(uint64_t (**)(BOOL *))(*a1 + 512))(a1) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1937010544;
  }
  if (!a1[126])
  {
    int v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v10 = 136315394;
      *(void *)&v10[4] = "VirtualAudio_Device.cpp";
      __int16 v11 = 1024;
      int v12 = 3506;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"Attempt to get current time without an active device\"", v10, 0x12u);
    }
    __int16 v9 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v9 = &off_6414D8;
    v9[2] = 2003329396;
  }
  if (sub_51CA0(a1[80]))
  {
    char v4 = 0;
    *(void *)int v10 = 0;
  }
  else
  {
    sub_3B7EC();
    *(void *)int v10 = &qword_64CC40;
    char v4 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  }
  v10[8] = v4;
  (*(void (**)(BOOL, uint64_t))(*(void *)a1[126] + 280))(a1[126], a2);
  return sub_3BCAC(v10);
}

void sub_B0180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    sub_3BCAC(&a9);
    __int16 v11 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      int v12 = v11[2];
      __cxa_end_catch();
      if (!v12) {
        JUMPOUT(0xB004CLL);
      }
    }
    else
    {
      __cxa_end_catch();
      int v12 = 2003329396;
    }
    __int16 v13 = (os_log_t *)sub_32A48(13);
    int v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3526;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theError) [error theError is an error]: \"error getting the current time from the active device\"", (uint8_t *)&a9, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v12;
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_B0290(uint64_t a1)
{
  return *(unsigned int *)(a1 + 912);
}

uint64_t sub_B0298(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 1008))
  {
    unsigned int v33 = (os_log_t *)sub_32A48(13);
    unsigned int v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v43 = 1024;
      int v44 = 3898;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  char v4 = pthread_self();
  if (!pthread_equal(v4, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 664), memory_order_acquire)))
  {
    int v5 = pthread_self();
    if (!pthread_equal(v5, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 752), memory_order_acquire))
      && !sub_51CA0(*(void *)(a1 + 640)))
    {
      uint64_t v36 = (os_log_t *)sub_32A48(13);
      char v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v43 = 1024;
        int v44 = 3900;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      uint64_t v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v38, "Precondition failure.");
    }
  }
  uint64_t v6 = sub_32A48(1);
  uint64_t v7 = sub_32A48(31);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12)
    {
      if ((v10 & 1) == 0) {
        goto LABEL_18;
      }
      goto LABEL_13;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
  if (*(void *)(v6 + 8))
  {
LABEL_13:
    __int16 v13 = *(NSObject **)v6;
    if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512))(a1);
      __int16 v15 = "false";
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      if (v14) {
        __int16 v15 = "true";
      }
      __int16 v43 = 1024;
      int v44 = 3902;
      __int16 v45 = 2080;
      int v46 = (std::string *)v15;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d StopIOEngine: IsIOEngineRunning is currently %s", buf, 0x1Cu);
    }
  }
LABEL_18:
  sub_3B7EC();
  v40[0] = &qword_64CC40;
  v40[1] = a1;
  BOOL v41 = sub_571C(a1);
  if (*(_DWORD *)(a1 + 1076) == 1)
  {
    uint64_t v16 = sub_32A48(1);
    if (*(unsigned char *)(v16 + 8))
    {
      int v17 = *(NSObject **)v16;
      if (*(void *)v16)
      {
        if (os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG))
        {
          sub_4D60(&__p, (unsigned int *)(a1 + 576));
          __int16 v18 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          __int16 v43 = 1024;
          int v44 = 3910;
          __int16 v45 = 2080;
          int v46 = v18;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s lost 1 buffer on last start/stop cycle (this is common and not likely a bug).", buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  unsigned int v19 = *(_DWORD *)(a1 + 1076);
  if ((v19 & 0xFFFFFFFE) == 2)
  {
    long long v20 = (os_log_t *)sub_32A48(1);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEBUG))
    {
      sub_4D60(&__p, (unsigned int *)(a1 + 576));
      char v22 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      int v23 = *(_DWORD *)(a1 + 1076);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v43 = 1024;
      int v44 = 3911;
      __int16 v45 = 2080;
      int v46 = v22;
      __int16 v47 = 1024;
      int v48 = v23;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device %s lost %u buffers on last start/stop cycle (this is not necessarily a bug, but if it persists, please file a radar against \"Audio - Routing\").", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    unsigned int v19 = *(_DWORD *)(a1 + 1076);
  }
  if (v19 >= 4)
  {
    char v24 = (os_log_t *)sub_32A48(1);
    uint64_t v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        sub_4D60(&__p, (unsigned int *)(a1 + 576));
        uint64_t v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        int v27 = *(_DWORD *)(a1 + 1076);
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v43 = 1024;
        int v44 = 3912;
        __int16 v45 = 2080;
        int v46 = v26;
        __int16 v47 = 1024;
        int v48 = v27;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d %s lost %u buffers on last start/stop cycle.", buf, 0x22u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  char v28 = *(unsigned char *)(a1 + 1073);
  int v29 = std::uncaught_exceptions();
  BOOL v31 = sub_51CA0(*(void *)(a1 + 640))
     && (uint64_t v30 = *(void *)(a1 + 464), !*(_DWORD *)(v30 + 112))
     && *(_DWORD *)(v30 + 116) == 0;
  *(unsigned char *)(a1 + 1073) = v31;
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 1008) + 256))(*(void *)(a1 + 1008), a2);
  if (std::uncaught_exceptions() > v29) {
    *(unsigned char *)(a1 + 1073) = v28;
  }
  return sub_54E58((uint64_t)v40);
}

void sub_B08A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B08DC(_Unwind_Exception *a1)
{
}

void sub_B08E4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a2)
  {
    if (std::uncaught_exceptions() > v6) {
      *(unsigned char *)(v5 + 1073) = v7;
    }
    sub_54E58((uint64_t)va);
    JUMPOUT(0xB0918);
  }
  _Unwind_Resume(a1);
}

void sub_B090C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0xB0918);
  }
  _Unwind_Resume(a1);
}

void sub_B09EC(_Unwind_Exception *a1)
{
}

void sub_B09FC(_Unwind_Exception *a1)
{
}

void sub_B0A08(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0xB0A10);
  }
  sub_564E4(a1);
}

uint64_t sub_B0A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a1 + 1008))
  {
    int v14 = (os_log_t *)sub_32A48(13);
    __int16 v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3864;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  char v8 = pthread_self();
  if (!pthread_equal(v8, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 664), memory_order_acquire)))
  {
    uint64_t v9 = pthread_self();
    if (!pthread_equal(v9, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 752), memory_order_acquire)))
    {
      uint64_t v11 = (os_log_t *)sub_32A48(1);
      char v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = *(void *)(a1 + 576);
          sub_4D60(&__p, (unsigned int *)&v17);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3866;
          __int16 v20 = 2080;
          uint64_t v21 = p_p;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d The IO monitor should be held prior to calling StartIOEngine on VAD: '%s'.", buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  sub_3B7EC();
  *(void *)AudioObjectPropertyAddress buf = &qword_64CC40;
  *(void *)&buf[8] = a1;
  buf[16] = sub_571C(a1);
  *(_DWORD *)(a1 + 1076) = 0;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 1008) + 248))(*(void *)(a1 + 1008), a2, a3, a4);
  uint64_t result = sub_54E58((uint64_t)buf);
  *(_DWORD *)(a1 + 912) = 0;
  return result;
}

void sub_B0C7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_B0C8C(_Unwind_Exception *a1)
{
}

void sub_B0C94(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    sub_54E58((uint64_t)&buf);
    __cxa_begin_catch(a1);
    if (a2 == 2) {
      __cxa_rethrow();
    }
    __int16 v15 = (os_log_t *)sub_32A48(13);
    uint64_t v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 3887;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"error starting IO on the active device\"", (uint8_t *)&buf, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  _Unwind_Resume(a1);
}

void sub_B0D8C(_Unwind_Exception *a1)
{
}

void sub_B0D9C(_Unwind_Exception *a1)
{
}

void sub_B0DA8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0xB0DB0);
  }
  sub_564E4(a1);
}

void sub_B0DC0()
{
  v0 = (os_log_t *)sub_32A48(1);
  uint64_t v1 = *v0;
  if (*v0 && os_log_type_enabled(*v0, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    int v6 = "VirtualAudio_Device.cpp";
    __int16 v7 = 1024;
    int v8 = 3825;
    _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_DEFAULT, "%25s:%-5d IOBufferFrameSizeChanged not implemented. Unexpected code path.", (uint8_t *)&v5, 0x12u);
  }
  int v2 = (os_log_t *)sub_32A48(13);
  int v3 = *v2;
  if (*v2)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "VirtualAudio_Device.cpp";
      __int16 v7 = 1024;
      int v8 = 3826;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"function not implemented\"", (uint8_t *)&v5, 0x12u);
    }
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_6414D8;
  exception[2] = 1970171760;
}

uint64_t sub_B0F08(uint64_t a1)
{
  return a1 + 648;
}

uint64_t sub_B0F10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 512))();
}

unsigned char *sub_B0F3C(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 456))(a1) & 1) == 0)
  {
    int v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "VirtualAudio_Device.cpp";
      __int16 v10 = 1024;
      int v11 = 3784;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Buffer size isn't valid\"", (uint8_t *)&v8, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }

  return sub_B1098(a1, a2, 0);
}

unsigned char *sub_B1098(uint64_t a1, int a2, int a3)
{
  int v29 = a2;
  if (!*(void *)(a1 + 1008))
  {
    char v24 = (os_log_t *)sub_32A48(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v31 = 1024;
      int v32 = 3794;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"Attempt to set buffer frame size without an active device\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  uint64_t v6 = sub_32A48(1);
  uint64_t v7 = sub_32A48(31);
  char v8 = 0;
  uint64_t v9 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v10 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v11 = *(int *)&buf[4 * v9];
    char v12 = v8;
    if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
      break;
    }
    char v8 = 1;
    uint64_t v9 = 1;
    if (v12) {
      goto LABEL_8;
    }
  }
  if ((v10 & v11) == 0) {
    uint64_t v6 = v7;
  }
LABEL_8:
  __int16 v13 = *(NSObject **)v6;
  if (v13 && os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    __int16 v31 = 1024;
    int v32 = 3800;
    __int16 v33 = 1024;
    int v34 = a2;
    __int16 v35 = 1024;
    int v36 = a3 ^ 1;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_INFO, "%25s:%-5d Client request to set I/O buffer frame size to %u sample frames (quiet = %u)", buf, 0x1Eu);
  }
  if (a3)
  {
    int v14 = 1718839674;
  }
  else
  {
    if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 1008) + 88))(*(void *)(a1 + 1008), 0)
      && (*(unsigned int (**)(void))(**(void **)(a1 + 1008) + 272))(*(void *)(a1 + 1008)))
    {
      uint64_t v15 = sub_32A48(1);
      uint64_t v16 = sub_32A48(31);
      char v17 = 0;
      uint64_t v18 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v19 = *(void *)(v15 + 8);
      while (1)
      {
        uint64_t v20 = *(int *)&buf[4 * v18];
        char v21 = v17;
        if (((v19 & v20) != 0) != ((*(void *)(v16 + 8) & v20) != 0)) {
          break;
        }
        char v17 = 1;
        uint64_t v18 = 1;
        if (v21) {
          goto LABEL_21;
        }
      }
      if ((v19 & v20) == 0) {
        uint64_t v15 = v16;
      }
LABEL_21:
      char v22 = *(NSObject **)v15;
      if (v22 && os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v31 = 1024;
        int v32 = 3805;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_INFO, "%25s:%-5d Client request to quietly set I/O buffer frame size while input is active and I/O is runnning, which will likely fail", buf, 0x12u);
      }
    }
    int v14 = 1902539642;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = v14;
  *(void *)&uint8_t buf[4] = 1735159650;
  (*(void (**)(void, unsigned char *, void, void, uint64_t, int *))(**(void **)(a1 + 1008) + 48))(*(void *)(a1 + 1008), buf, 0, 0, 4, &v29);
  uint64_t result = sub_B1470(a1);
  if ((a3 & 1) == 0)
  {
    uint64_t result = *(unsigned char **)(a1 + 632);
    if (result)
    {
      uint64_t v27 = 0x676C6F626673697ALL;
      int v28 = 0;
      return sub_CFDA4((uint64_t)result, a1, &v27, a1 + 488);
    }
  }
  return result;
}

unsigned char *sub_B1470(uint64_t a1)
{
  sub_3B7EC();
  uint64_t v9 = &qword_64CC40;
  char v10 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  uint64_t v2 = *(void *)(a1 + 1008);
  if (!v2)
  {
    char v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 4097;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"Attempt to update buffer frame size without an active device\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  strcpy(buf, "zisfbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v7 = 4;
  int v8 = 0;
  (*(void (**)(uint64_t, unsigned char *, void, void, int *, int *))(*(void *)v2 + 40))(v2, buf, 0, 0, &v7, &v8);
  *(_DWORD *)(a1 + 488) = v8;
  return sub_3BCAC(&v9);
}

void sub_B1620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_B163C(uint64_t a1, int a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 456))(a1) & 1) == 0)
  {
    int v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      uint64_t v9 = "VirtualAudio_Device.cpp";
      __int16 v10 = 1024;
      int v11 = 3774;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Buffer size isn't valid\"", (uint8_t *)&v8, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }

  return sub_B1098(a1, a2, 1);
}

uint64_t sub_B1798(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1008);
  if (!v1)
  {
    int v3 = (os_log_t *)sub_32A48(13);
    char v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)__int16 v10 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v10[8] = 1024;
      *(_DWORD *)&v10[10] = 3461;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"mDevice is NULL\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  uint64_t v7 = 0x676C6F6266737A23;
  int v8 = 0;
  int v6 = 16;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, uint8_t *))(*(void *)v1 + 40))(v1, &v7, 0, 0, &v6, buf);
  if (*(double *)&v10[4] >= 0x1000) {
    return 4096;
  }
  else {
    return *(double *)&v10[4];
  }
}

uint64_t sub_B190C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1008);
  if (!v1)
  {
    int v3 = (os_log_t *)sub_32A48(13);
    char v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v10 = 1024;
      int v11 = 3449;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"mDevice is NULL\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  uint64_t v7 = 0x676C6F6266737A23;
  int v8 = 0;
  int v6 = 16;
  (*(void (**)(uint64_t, uint64_t *, void, void, int *, unsigned char *))(*(void *)v1 + 40))(v1, &v7, 0, 0, &v6, buf);
  return *(double *)buf;
}

uint64_t sub_B1A74(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1008);
  if (!v2)
  {
    int v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v11 = "VirtualAudio_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 3437;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"mDevice is NULL\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  if (a2) {
    unsigned int v3 = 1768845428;
  }
  else {
    unsigned int v3 = 1869968496;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 1935763060;
  int v11 = (const char *)v3;
  int v8 = 4;
  unsigned int v9 = 0;
  (*(void (**)(uint64_t, uint8_t *, void, void, int *, unsigned int *))(*(void *)v2 + 40))(v2, buf, 0, 0, &v8, &v9);
  return v9;
}

uint64_t sub_B1BF0(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 1008);
  if (!v2)
  {
    int v5 = (os_log_t *)sub_32A48(13);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v11 = "VirtualAudio_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 3425;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"mDevice is NULL\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  if (a2) {
    unsigned int v3 = 1768845428;
  }
  else {
    unsigned int v3 = 1869968496;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 1819569763;
  int v11 = (const char *)v3;
  int v8 = 4;
  unsigned int v9 = 0;
  (*(void (**)(uint64_t, uint8_t *, void, void, int *, unsigned int *))(*(void *)v2 + 40))(v2, buf, 0, 0, &v8, &v9);
  return v9;
}

void sub_B1D6C(uint64_t a1, uint64_t a2, int a3, unsigned int a4, int *a5)
{
  uint64_t v10 = a4;
  sub_73978(&__p, a4);
  if (a4)
  {
    int v11 = __p;
    __int16 v12 = a5;
    do
    {
      int v13 = *v12++;
      *v11++ = v13;
      --v10;
    }
    while (v10);
  }
  (*(void (**)(void, void, void **))(**(void **)(a1 + 1008) + 264))(*(void *)(a1 + 1008), a3 ^ 1u, &__p);
  sub_3610A8(a1, a2);
}

void sub_B1E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B1E5C(uint64_t a1, uint64_t a2)
{
}

void sub_B1EC4(void *a1)
{
}

void sub_B1ED0(_Unwind_Exception *a1)
{
}

uint64_t sub_B1EE4(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 472);
  for (uint64_t i = *(void *)(v8 + 8); i != *(void *)(v8 + 16); i += 8)
  {
    if (*(void *)i == a2)
    {
      if (a2)
      {
LABEL_7:
        sub_B235C(v8, a2, a3, a4);
        sub_551E4(a1);
        uint64_t v10 = **(void **)(a1 + 1008);
        if (a2)
        {
          uint64_t result = (*(uint64_t (**)(void))(v10 + 448))();
          int v12 = *(_DWORD *)(*(void *)(a1 + 464) + 112);
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(void))(v10 + 440))();
          int v12 = *(_DWORD *)(*(void *)(a1 + 464) + 116);
        }
        if (v12 == 1 && (result & 1) == 0) {
          return (*(uint64_t (**)(uint64_t, long long *, uint64_t, BOOL))(*(void *)a1 + 568))(a1, a3, a4, a2 == 0);
        }
        return result;
      }
      break;
    }
    if (*(void *)(*(void *)i + 8) == a2) {
      goto LABEL_7;
    }
  }
  uint64_t result = *(void *)(a1 + 464);
  for (uint64_t j = *(void *)(result + 8); ; j += 8)
  {
    if (j == *(void *)(result + 16))
    {
      uint64_t v14 = 0;
      goto LABEL_16;
    }
    if (*(void *)j == a2) {
      break;
    }
    if (*(void *)(*(void *)j + 8) == a2)
    {
      BOOL v15 = a2 == 0;
      goto LABEL_20;
    }
  }
  uint64_t v14 = a2;
LABEL_16:
  BOOL v15 = a2 == 0;
  if (a2 && !v14) {
    return result;
  }
LABEL_20:
  sub_B247C(result, a2, a3, a4);
  sub_551E4(a1);
  uint64_t v16 = **(void **)(a1 + 1008);
  if (v15)
  {
    uint64_t result = (*(uint64_t (**)(void))(v16 + 440))();
    int v17 = *(_DWORD *)(*(void *)(a1 + 464) + 116);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(v16 + 448))();
    int v17 = *(_DWORD *)(*(void *)(a1 + 464) + 112);
  }
  if (v17 == 1 && (result & 1) == 0) {
    return (*(uint64_t (**)(uint64_t, long long *, uint64_t, BOOL))(*(void *)a1 + 568))(a1, a3, a4, v15);
  }
  return result;
}

void sub_B2178(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9)
{
  if (a2)
  {
    int v12 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      int v13 = v12[2];
      __cxa_end_catch();
      if (!v13) {
        JUMPOUT(0xB2144);
      }
    }
    else
    {
      int v13 = 2003329396;
      __cxa_end_catch();
    }
    sub_B242C(*(void *)(v10 + 472), v9);
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    BOOL v15 = *v14;
    if (*v14)
    {
      if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 3362;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theError) [error theError is an error]: \"error starting the io engine\"", (uint8_t *)&a9, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v13;
  }
  _Unwind_Resume(a1);
}

void sub_B235C(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  if (a2)
  {
    int v5 = *(uint64_t **)(a1 + 8);
    int v6 = *(uint64_t **)(a1 + 16);
    if (v5 != v6)
    {
      while (1)
      {
        uint64_t v8 = *v5;
        if (*v5 == a2) {
          break;
        }
        if (*(void *)(v8 + 8) == a2) {
          goto LABEL_9;
        }
        if (++v5 == v6) {
          return;
        }
      }
      uint64_t v8 = a2;
LABEL_9:
      if (!*(unsigned char *)(v8 + 54))
      {
        *(unsigned char *)(v8 + 54) = 1;
        long long v9 = *a3;
        long long v10 = a3[1];
        long long v11 = a3[2];
        *(_OWORD *)(v8 + 104) = a3[3];
        *(_OWORD *)(v8 + 88) = v11;
        *(_OWORD *)(v8 + 72) = v10;
        *(_OWORD *)(v8 + 56) = v9;
        *(_DWORD *)(v8 + 120) = a4;
        ++*(_DWORD *)(a1 + 112);
        sub_B3124(a1, v8);
        sub_B31D0((_DWORD **)a1);
      }
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 116);
  }
}

void sub_B242C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
    {
      uint64_t v3 = *i;
      if (*i == a2)
      {
        uint64_t v3 = a2;
LABEL_11:
        sub_B30C8(a1, v3);
        return;
      }
      if (*(void *)(v3 + 8) == a2) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 116);
    if (v4) {
      *(_DWORD *)(a1 + 116) = v4 - 1;
    }
  }
}

void sub_B247C(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  if (a2)
  {
    int v5 = *(uint64_t **)(a1 + 8);
    int v6 = *(uint64_t **)(a1 + 16);
    if (v5 != v6)
    {
      while (1)
      {
        uint64_t v8 = *v5;
        if (*v5 == a2) {
          break;
        }
        if (*(void *)(v8 + 8) == a2) {
          goto LABEL_9;
        }
        if (++v5 == v6) {
          return;
        }
      }
      uint64_t v8 = a2;
LABEL_9:
      if (!*(unsigned char *)(v8 + 54))
      {
        *(unsigned char *)(v8 + 54) = 1;
        long long v9 = *a3;
        long long v10 = a3[1];
        long long v11 = a3[2];
        *(_OWORD *)(v8 + 104) = a3[3];
        *(_OWORD *)(v8 + 88) = v11;
        *(_OWORD *)(v8 + 72) = v10;
        *(_OWORD *)(v8 + 56) = v9;
        *(_DWORD *)(v8 + 120) = a4;
        ++*(_DWORD *)(a1 + 112);
        sub_B25F8(a1, v8);
        sub_B26A4((_DWORD **)a1);
      }
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 116);
  }
}

void sub_B254C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
    {
      uint64_t v3 = *i;
      if (*i == a2)
      {
        uint64_t v3 = a2;
LABEL_11:
        sub_B259C(a1, v3);
        return;
      }
      if (*(void *)(v3 + 8) == a2) {
        goto LABEL_11;
      }
    }
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 116);
    if (v4) {
      *(_DWORD *)(a1 + 116) = v4 - 1;
    }
  }
}

void sub_B259C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 54))
  {
    *(unsigned char *)(a2 + 54) = 0;
    --*(_DWORD *)(a1 + 112);
    sub_B25F8(a1, a2);
    sub_B26A4((_DWORD **)a1);
  }
}

void sub_B25F8(uint64_t a1, uint64_t a2)
{
  sub_B27F0(*(void *)a2, 1, *(unsigned int *)(a2 + 48), *(void **)(a2 + 200), (vm_address_t **)(a2 + 176), *(unsigned __int8 *)(a2 + 53));
  *(void *)(a2 + 200) = 0;
  if (*(_DWORD *)(a1 + 40) == 2) {
    sub_B3044((_DWORD *)a2, 1);
  }
  sub_B27F0(*(void *)a2, 0, *(unsigned int *)(a2 + 48), *(void **)(a2 + 232), (vm_address_t **)(a2 + 208), *(unsigned __int8 *)(a2 + 53));
  *(void *)(a2 + 232) = 0;
  if (*(_DWORD *)(a1 + 44) == 2)
  {
    sub_B3044((_DWORD *)a2, 0);
  }
}

void sub_B26A4(_DWORD **a1)
{
  uint64_t v2 = a1[9];
  if (v2)
  {
    sub_B27F0((uint64_t)*a1, 1, *((unsigned int *)a1 + 8), v2, (vm_address_t **)a1 + 6, *((unsigned __int8 *)a1 + 36));
    a1[9] = 0;
  }
  if (*((_DWORD *)a1 + 10) <= 1u)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_B291C((uint64_t *)a1, 1, (uint64_t)&__p);
    a1[9] = sub_B2A3C(*a1, 1, &__p, *((_DWORD *)a1 + 8), (vm_address_t **)a1 + 6, *((unsigned __int8 *)a1 + 36), *((_DWORD *)a1 + 10) == 1);
    if (__p) {
      operator delete(__p);
    }
  }
  uint64_t v3 = a1[13];
  if (v3)
  {
    sub_B27F0((uint64_t)*a1, 0, *((unsigned int *)a1 + 8), v3, (vm_address_t **)a1 + 10, *((unsigned __int8 *)a1 + 36));
    a1[13] = 0;
  }
  if (*((_DWORD *)a1 + 11) <= 1u)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_B291C((uint64_t *)a1, 0, (uint64_t)&__p);
    a1[13] = sub_B2A3C(*a1, 0, &__p, *((_DWORD *)a1 + 8), (vm_address_t **)a1 + 10, *((unsigned __int8 *)a1 + 36), *((_DWORD *)a1 + 11) == 1);
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_B27CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_B27F0(uint64_t a1, int a2, uint64_t a3, void *a4, vm_address_t **a5, int a6)
{
  if (a4) {
    free(a4);
  }
  int v12 = *a5;
  long long v11 = a5[1];
  if (*a5 != v11)
  {
    unsigned int v13 = 0;
    if (a2) {
      uint64_t v14 = 496;
    }
    else {
      uint64_t v14 = 520;
    }
    if (a2) {
      uint64_t v15 = a1 + 496;
    }
    else {
      uint64_t v15 = a1 + 520;
    }
    do
    {
      vm_address_t v16 = *v12;
      if (*v12)
      {
        uint64_t v17 = *(void *)(a1 + v14);
        if (v13 < (unint64_t)((*(void *)(v15 + 8) - v17) >> 3))
        {
          uint64_t v18 = *(void *)(v17 + 8 * v13);
          if (v18)
          {
            uint64_t v19 = *(unsigned int *)(v16 + 8);
            if (a6)
            {
              uint64_t v19 = (v19 + 16);
              uint64_t v20 = a3;
              vm_address_t v21 = *v12;
            }
            else
            {
              vm_address_t v21 = v16 + 16;
              uint64_t v20 = a3;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, vm_address_t))(*(void *)v18 + 168))(v18, v20, v19, v21);
          }
        }
        vm_deallocate(mach_task_self_, v16, *(unsigned int *)(v16 + 8) + 16);
        long long v11 = a5[1];
      }
      ++v13;
      ++v12;
    }
    while (v12 != v11);
    int v12 = *a5;
  }
  a5[1] = v12;
}

void sub_B291C(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 528;
  if (a2) {
    uint64_t v4 = 504;
  }
  uint64_t v5 = 520;
  uint64_t v6 = *(void *)(v3 + v4);
  if (a2) {
    uint64_t v5 = 496;
  }
  unint64_t v7 = v6 - *(void *)(v3 + v5);
  *(void *)(a3 + 8) = 0;
  if ((v7 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v11 = 0;
    uint64_t v12 = (v7 >> 3);
    do
    {
      LOBYTE(v13) = 0;
      uint64_t v14 = (uint64_t *)a1[1];
      do
      {
        if (v14 == (uint64_t *)a1[2]) {
          break;
        }
        uint64_t v15 = *v14;
        if (*(unsigned char *)(*v14 + 54))
        {
          uint64_t v16 = v15 + 128;
          if (a2) {
            uint64_t v17 = 128;
          }
          else {
            uint64_t v17 = 152;
          }
          if (!a2) {
            uint64_t v16 = v15 + 152;
          }
          BOOL v13 = *(void *)(v16 + 8) <= v11
             || (*(void *)(*(void *)(v15 + v17) + 8 * (v11 >> 6)) & (1 << v11)) != 0;
          BOOL v18 = v13;
        }
        else
        {
          BOOL v18 = 0;
        }
        ++v14;
      }
      while (!v18);
      BOOL v19 = v13;
      sub_B2EC0(a3, &v19);
      ++v11;
    }
    while (v11 != v12);
  }
}

_DWORD *sub_B2A3C(_DWORD *a1, int a2, void *a3, unsigned int a4, vm_address_t **a5, int a6, int a7)
{
  a5[1] = *a5;
  int v11 = a1[122];
  int v62 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 480))(a1);
  uint64_t v12 = a1 + 130;
  BOOL v13 = (uint64_t *)(a1 + 132);
  uint64_t v14 = a1 + 124;
  if (a2) {
    BOOL v13 = (uint64_t *)(a1 + 126);
  }
  uint64_t v15 = *v13;
  if (a2) {
    uint64_t v16 = (uint64_t *)(a1 + 124);
  }
  else {
    uint64_t v16 = (uint64_t *)(a1 + 130);
  }
  uint64_t v17 = *v16;
  unint64_t v18 = v15 - v17;
  unint64_t v19 = (unint64_t)(v15 - v17) >> 3;
  uint64_t v20 = malloc_type_calloc(1uLL, (2 * (v15 - v17)) | 8, 0xC517D68uLL);
  if (v20) {
    *uint64_t v20 = v19;
  }
  uint64_t v59 = v20;
  if (v19)
  {
    unint64_t v21 = 0;
    uint64_t v61 = (v18 >> 3);
    if (!a2) {
      uint64_t v14 = v12;
    }
    do
    {
      if (v21 >= (uint64_t)(v14[1] - *v14) >> 3) {
        char v22 = 0;
      }
      else {
        char v22 = *(_DWORD ***)(*v14 + 8 * v21);
      }
      int v23 = sub_1E7DD4(v22[13], v11);
      int v24 = sub_1E7DD4(v22[13], v62);
      if (a3[1] <= v21)
      {
        if (!a7) {
          goto LABEL_25;
        }
      }
      else if (((*(void *)(*a3 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v21) & 1) == 0 || (a7 & 1) == 0)
      {
LABEL_25:
        uint64_t v30 = a5[1];
        unint64_t v29 = (unint64_t)a5[2];
        if ((unint64_t)v30 >= v29)
        {
          uint64_t v32 = v30 - *a5;
          if ((unint64_t)(v32 + 1) >> 61) {
            sub_60548();
          }
          uint64_t v33 = v29 - (void)*a5;
          uint64_t v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
            uint64_t v34 = v32 + 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35) {
            unint64_t v35 = (unint64_t)sub_106EC(v35);
          }
          else {
            uint64_t v36 = 0;
          }
          __int16 v45 = (vm_address_t *)(v35 + 8 * v32);
          *__int16 v45 = 0;
          __int16 v31 = v45 + 1;
          __int16 v47 = (char *)*a5;
          int v46 = (char *)a5[1];
          if (v46 != (char *)*a5)
          {
            do
            {
              vm_address_t v48 = *((void *)v46 - 1);
              v46 -= 8;
              *--__int16 v45 = v48;
            }
            while (v46 != v47);
            int v46 = (char *)*a5;
          }
          *a5 = v45;
          a5[1] = v31;
          a5[2] = (vm_address_t *)(v35 + 8 * v36);
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *uint64_t v30 = 0;
          __int16 v31 = v30 + 1;
        }
        a5[1] = v31;
        int v49 = &v59[4 * v21];
        void v49[2] = v22[13][11];
        v49[3] = v23;
        *((void *)v49 + 2) = 0;
        goto LABEL_60;
      }
      uint64_t v25 = (v24 + v23);
      vm_address_t address = 0;
      if (vm_allocate(mach_task_self_, &address, (v25 + 16), 1))
      {
        uint64_t v26 = (os_log_t *)sub_32A48(13);
        uint64_t v27 = *v26;
        if (*v26)
        {
          if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            CFStringRef v65 = "HP_IOProcList.h";
            __int16 v66 = 1024;
            int v67 = 858;
            _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE (theKernelError): \"vm_allocate failed\"", buf, 0x12u);
          }
        }
      }
      if (address)
      {
        bzero((void *)address, (v25 + 16));
        int v28 = (_DWORD *)address;
        *(_DWORD *)vm_address_t address = v23;
        v28[1] = v11;
        v28[2] = v25;
        v28[3] = v23;
        if (a6) {
          (*((void (**)(_DWORD **, void, void))*v22 + 20))(v22, a4, (v25 + 16));
        }
        else {
          (*((void (**)(_DWORD **, void, uint64_t, _DWORD *))*v22 + 20))(v22, a4, v25, v28 + 4);
        }
        uint64_t v38 = a5[1];
        unint64_t v37 = (unint64_t)a5[2];
        if ((unint64_t)v38 >= v37)
        {
          uint64_t v40 = v38 - *a5;
          if ((unint64_t)(v40 + 1) >> 61) {
            sub_60548();
          }
          uint64_t v41 = v37 - (void)*a5;
          uint64_t v42 = v41 >> 2;
          if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
            uint64_t v42 = v40 + 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            unint64_t v43 = (unint64_t)sub_106EC(v43);
          }
          else {
            uint64_t v44 = 0;
          }
          CFIndex v50 = (vm_address_t *)(v43 + 8 * v40);
          *CFIndex v50 = address;
          uint64_t v39 = v50 + 1;
          unsigned int v52 = (char *)*a5;
          CFDictionaryRef v51 = (char *)a5[1];
          if (v51 != (char *)*a5)
          {
            do
            {
              vm_address_t v53 = *((void *)v51 - 1);
              v51 -= 8;
              *--CFIndex v50 = v53;
            }
            while (v51 != v52);
            CFDictionaryRef v51 = (char *)*a5;
          }
          *a5 = v50;
          a5[1] = v39;
          a5[2] = (vm_address_t *)(v43 + 8 * v44);
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          *uint64_t v38 = address;
          uint64_t v39 = v38 + 1;
        }
        a5[1] = v39;
        int v54 = &v59[4 * v21];
        v54[2] = v22[13][11];
        vm_address_t v55 = address + 16;
        v54[3] = *(_DWORD *)address;
        *((void *)v54 + 2) = v55;
      }
LABEL_60:
      ++v21;
    }
    while (v21 != v61);
  }
  return v59;
}

void sub_B2EC0(uint64_t a1, unsigned char *a2)
{
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v5 != v4 << 6) {
    goto LABEL_29;
  }
  if ((uint64_t)(v5 + 1) < 0) {
    goto LABEL_8;
  }
  if (v5 > 0x3FFFFFFFFFFFFFFELL)
  {
    unint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    if (v5 >= 0x7FFFFFFFFFFFFFFFLL) {
      goto LABEL_29;
    }
    goto LABEL_10;
  }
  unint64_t v6 = v4 << 7;
  if (v6 <= (v5 & 0xFFFFFFFFFFFFFFC0) + 64) {
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFC0) + 64;
  }
  if (v5 < v6)
  {
    if ((v6 & 0x8000000000000000) != 0) {
LABEL_8:
    }
      sub_60548();
LABEL_10:
    unint64_t v7 = ((v6 - 1) >> 6) + 1;
    uint64_t v8 = (uint64_t *)operator new(8 * v7);
    long long v9 = *(void **)a1;
    *(void *)&long long v10 = v5;
    *((void *)&v10 + 1) = v7;
    unint64_t v11 = (v5 - 1) >> 6;
    if (v5 < 0x41) {
      unint64_t v11 = 0;
    }
    v8[v11] = 0;
    if (v5 > 0x3F || (v5 & 0x3F) != 0)
    {
      int v12 = 0;
      int v13 = 0;
      uint64_t v14 = &v9[v5 >> 6];
      uint64_t v15 = v8;
      do
      {
        uint64_t v16 = 1 << v12;
        if ((*v9 >> v13)) {
          uint64_t v17 = *v15 | v16;
        }
        else {
          uint64_t v17 = *v15 & ~v16;
        }
        uint64_t *v15 = v17;
        v9 += v13 == 63;
        if (v13 == 63) {
          int v13 = 0;
        }
        else {
          ++v13;
        }
        v15 += v12 == 63;
        if (v12 == 63) {
          int v12 = 0;
        }
        else {
          ++v12;
        }
      }
      while (v9 != v14 || v13 != (v5 & 0x3F));
      long long v9 = *(void **)a1;
    }
    *(void *)a1 = v8;
    *(_OWORD *)(a1 + 8) = v10;
    if (v9)
    {
      operator delete(v9);
      unint64_t v5 = *(void *)(a1 + 8);
    }
  }
LABEL_29:
  *(void *)(a1 + 8) = v5 + 1;
  unint64_t v18 = *(void **)a1;
  unint64_t v19 = v5 >> 6;
  uint64_t v20 = 1 << v5;
  if (*a2) {
    uint64_t v21 = v18[v19] | v20;
  }
  else {
    uint64_t v21 = v18[v19] & ~v20;
  }
  v18[v19] = v21;
}

_DWORD *sub_B3044(_DWORD *result, int a2)
{
  if (*((unsigned char *)result + 54))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(_DWORD **)result;
    unsigned int v4 = v2[12];
    int v5 = *((unsigned __int8 *)v2 + 53);
    int v6 = *((unsigned __int8 *)v2 + 52);
    if (a2)
    {
      uint64_t result = sub_B2A3C(v3, 1, (void *)v2 + 16, v4, (vm_address_t **)v2 + 22, v5 != 0, v6 != 0);
      *((void *)v2 + 25) = result;
    }
    else
    {
      uint64_t result = sub_B2A3C(v3, 0, (void *)v2 + 19, v4, (vm_address_t **)v2 + 26, v5 != 0, v6 != 0);
      *((void *)v2 + 29) = result;
    }
  }
  return result;
}

void sub_B30C8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 54))
  {
    *(unsigned char *)(a2 + 54) = 0;
    --*(_DWORD *)(a1 + 112);
    sub_B3124(a1, a2);
    sub_B31D0((_DWORD **)a1);
  }
}

void sub_B3124(uint64_t a1, uint64_t a2)
{
  sub_B27F0(*(void *)a2, 1, *(unsigned int *)(a2 + 48), *(void **)(a2 + 200), (vm_address_t **)(a2 + 176), *(unsigned __int8 *)(a2 + 53));
  *(void *)(a2 + 200) = 0;
  if (*(_DWORD *)(a1 + 40) == 2) {
    sub_B37A8((_DWORD *)a2, 1);
  }
  sub_B27F0(*(void *)a2, 0, *(unsigned int *)(a2 + 48), *(void **)(a2 + 232), (vm_address_t **)(a2 + 208), *(unsigned __int8 *)(a2 + 53));
  *(void *)(a2 + 232) = 0;
  if (*(_DWORD *)(a1 + 44) == 2)
  {
    sub_B37A8((_DWORD *)a2, 0);
  }
}

void sub_B31D0(_DWORD **a1)
{
  uint64_t v2 = a1[9];
  if (v2)
  {
    sub_B27F0((uint64_t)*a1, 1, *((unsigned int *)a1 + 8), v2, (vm_address_t **)a1 + 6, *((unsigned __int8 *)a1 + 36));
    a1[9] = 0;
  }
  if (*((_DWORD *)a1 + 10) <= 1u)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_B291C((uint64_t *)a1, 1, (uint64_t)&__p);
    a1[9] = sub_B331C(*a1, 1, &__p, *((_DWORD *)a1 + 8), (vm_address_t **)a1 + 6, *((unsigned __int8 *)a1 + 36), *((_DWORD *)a1 + 10) == 1);
    if (__p) {
      operator delete(__p);
    }
  }
  uint64_t v3 = a1[13];
  if (v3)
  {
    sub_B27F0((uint64_t)*a1, 0, *((unsigned int *)a1 + 8), v3, (vm_address_t **)a1 + 10, *((unsigned __int8 *)a1 + 36));
    a1[13] = 0;
  }
  if (*((_DWORD *)a1 + 11) <= 1u)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    sub_B291C((uint64_t *)a1, 0, (uint64_t)&__p);
    a1[13] = sub_B331C(*a1, 0, &__p, *((_DWORD *)a1 + 8), (vm_address_t **)a1 + 10, *((unsigned __int8 *)a1 + 36), *((_DWORD *)a1 + 11) == 1);
    if (__p) {
      operator delete(__p);
    }
  }
}

void sub_B32F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_B331C(_DWORD *a1, int a2, void *a3, unsigned int a4, vm_address_t **a5, int a6, int a7)
{
  a5[1] = *a5;
  int v11 = a1[122];
  int v61 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 480))(a1);
  int v12 = a1 + 130;
  int v13 = (uint64_t *)(a1 + 132);
  uint64_t v14 = a1 + 124;
  if (a2) {
    int v13 = (uint64_t *)(a1 + 126);
  }
  uint64_t v15 = *v13;
  if (a2) {
    uint64_t v16 = a1 + 124;
  }
  else {
    uint64_t v16 = a1 + 130;
  }
  unint64_t v17 = v15 - *v16;
  unint64_t v18 = v17 >> 3;
  unint64_t v19 = malloc_type_calloc(1uLL, 24 * (v17 >> 3) + 8, 0x8CFBFBFFuLL);
  if (v19) {
    _DWORD *v19 = v18;
  }
  char v58 = v19;
  if (v18)
  {
    unint64_t v20 = 0;
    uint64_t v60 = (v17 >> 3);
    if (!a2) {
      uint64_t v14 = v12;
    }
    do
    {
      if (v20 >= (uint64_t)(v14[1] - *v14) >> 3) {
        uint64_t v21 = 0;
      }
      else {
        uint64_t v21 = *(_DWORD ***)(*v14 + 8 * v20);
      }
      int v22 = sub_1E7DD4(v21[13], v11);
      int v23 = sub_1E7DD4(v21[13], v61);
      if (a3[1] <= v20)
      {
        if (!a7) {
          goto LABEL_25;
        }
      }
      else if (((*(void *)(*a3 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v20) & 1) == 0 || (a7 & 1) == 0)
      {
LABEL_25:
        unint64_t v29 = a5[1];
        unint64_t v28 = (unint64_t)a5[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v31 = v29 - *a5;
          if ((unint64_t)(v31 + 1) >> 61) {
            sub_60548();
          }
          uint64_t v32 = v28 - (void)*a5;
          uint64_t v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1)) {
            uint64_t v33 = v31 + 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            unint64_t v34 = (unint64_t)sub_106EC(v34);
          }
          else {
            uint64_t v35 = 0;
          }
          uint64_t v44 = (vm_address_t *)(v34 + 8 * v31);
          *uint64_t v44 = 0;
          uint64_t v30 = v44 + 1;
          int v46 = (char *)*a5;
          __int16 v45 = (char *)a5[1];
          if (v45 != (char *)*a5)
          {
            do
            {
              vm_address_t v47 = *((void *)v45 - 1);
              v45 -= 8;
              *--uint64_t v44 = v47;
            }
            while (v45 != v46);
            __int16 v45 = (char *)*a5;
          }
          *a5 = v44;
          a5[1] = v30;
          a5[2] = (vm_address_t *)(v34 + 8 * v35);
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          *unint64_t v29 = 0;
          uint64_t v30 = v29 + 1;
        }
        a5[1] = v30;
        vm_address_t v48 = &v58[6 * v20];
        v48[4] = v21[13][11];
        v48[5] = v22;
        *((void *)v48 + 3) = 0;
        goto LABEL_60;
      }
      uint64_t v24 = (v23 + v22);
      vm_address_t address = 0;
      if (vm_allocate(mach_task_self_, &address, (v24 + 16), 1))
      {
        uint64_t v25 = (os_log_t *)sub_32A48(13);
        uint64_t v26 = *v25;
        if (*v25)
        {
          if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            unint64_t v64 = "HP_IOProcList.h";
            __int16 v65 = 1024;
            int v66 = 858;
            _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE (theKernelError): \"vm_allocate failed\"", buf, 0x12u);
          }
        }
      }
      if (address)
      {
        bzero((void *)address, (v24 + 16));
        uint64_t v27 = (_DWORD *)address;
        *(_DWORD *)vm_address_t address = v22;
        v27[1] = v11;
        v27[2] = v24;
        v27[3] = v22;
        if (a6) {
          (*((void (**)(_DWORD **, void, void))*v21 + 20))(v21, a4, (v24 + 16));
        }
        else {
          (*((void (**)(_DWORD **, void, uint64_t, _DWORD *))*v21 + 20))(v21, a4, v24, v27 + 4);
        }
        unint64_t v37 = a5[1];
        unint64_t v36 = (unint64_t)a5[2];
        if ((unint64_t)v37 >= v36)
        {
          uint64_t v39 = v37 - *a5;
          if ((unint64_t)(v39 + 1) >> 61) {
            sub_60548();
          }
          uint64_t v40 = v36 - (void)*a5;
          uint64_t v41 = v40 >> 2;
          if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
            uint64_t v41 = v39 + 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v41;
          }
          if (v42) {
            unint64_t v42 = (unint64_t)sub_106EC(v42);
          }
          else {
            uint64_t v43 = 0;
          }
          int v49 = (vm_address_t *)(v42 + 8 * v39);
          *int v49 = address;
          uint64_t v38 = v49 + 1;
          CFDictionaryRef v51 = (char *)*a5;
          CFIndex v50 = (char *)a5[1];
          if (v50 != (char *)*a5)
          {
            do
            {
              vm_address_t v52 = *((void *)v50 - 1);
              v50 -= 8;
              *--int v49 = v52;
            }
            while (v50 != v51);
            CFIndex v50 = (char *)*a5;
          }
          *a5 = v49;
          a5[1] = v38;
          a5[2] = (vm_address_t *)(v42 + 8 * v43);
          if (v50) {
            operator delete(v50);
          }
        }
        else
        {
          *unint64_t v37 = address;
          uint64_t v38 = v37 + 1;
        }
        a5[1] = v38;
        vm_address_t v53 = &v58[6 * v20];
        v53[4] = v21[13][11];
        vm_address_t v54 = address + 16;
        v53[5] = *(_DWORD *)address;
        *((void *)v53 + 3) = v54;
      }
LABEL_60:
      ++v20;
    }
    while (v20 != v60);
  }
  return v58;
}

_DWORD *sub_B37A8(_DWORD *result, int a2)
{
  if (*((unsigned char *)result + 54))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(_DWORD **)result;
    unsigned int v4 = v2[12];
    int v5 = *((unsigned __int8 *)v2 + 53);
    int v6 = *((unsigned __int8 *)v2 + 52);
    if (a2)
    {
      uint64_t result = sub_B331C(v3, 1, (void *)v2 + 16, v4, (vm_address_t **)v2 + 22, v5 != 0, v6 != 0);
      *((void *)v2 + 25) = result;
    }
    else
    {
      uint64_t result = sub_B331C(v3, 0, (void *)v2 + 19, v4, (vm_address_t **)v2 + 26, v5 != 0, v6 != 0);
      *((void *)v2 + 29) = result;
    }
  }
  return result;
}

void sub_B3830(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = *(uint64_t **)(a1 + 8); i != *(uint64_t **)(a1 + 16); ++i)
    {
      uint64_t v4 = *i;
      if (*i == a2)
      {
        uint64_t v4 = a2;
LABEL_9:
        if (!*(unsigned char *)(v4 + 54))
        {
          *(unsigned char *)(v4 + 54) = 1;
          *(_OWORD *)(v4 + 56) = 0u;
          *(_OWORD *)(v4 + 72) = 0u;
          *(_OWORD *)(v4 + 88) = 0u;
          *(_OWORD *)(v4 + 104) = 0u;
          *(_DWORD *)(v4 + 120) = 0;
          ++*(_DWORD *)(a1 + 112);
          sub_B3124(a1, v4);
          sub_B31D0((_DWORD **)a1);
        }
        return;
      }
      if (*(void *)(v4 + 8) == a2) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    ++*(_DWORD *)(a1 + 116);
  }
}

void sub_B38F4(uint64_t a1)
{
  if (((*(void *)(*(void *)(a1 + 464) + 16) - *(void *)(*(void *)(a1 + 464) + 8)) & 0x7FFFFFFF8) == 0)
  {
    sub_3628D4();
  }
  uint64_t v1 = (os_log_t *)sub_32A48(13);
  uint64_t v2 = *v1;
  if (*v1 && os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    int v5 = "VirtualAudio_Device.cpp";
    __int16 v6 = 1024;
    int v7 = 3237;
    _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"only a single IOProc is supported\"", (uint8_t *)&v4, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_6414D8;
  exception[2] = 1852797029;
}

void sub_B3A24(uint64_t a1, uint64_t a2)
{
  if (((*(void *)(*(void *)(a1 + 464) + 16) - *(void *)(*(void *)(a1 + 464) + 8)) & 0x7FFFFFFF8) == 0)
  {
    sub_362B18(a1, a2);
  }
  uint64_t v2 = (os_log_t *)sub_32A48(13);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    __int16 v6 = "VirtualAudio_Device.cpp";
    __int16 v7 = 1024;
    int v8 = 3230;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"only a single IOProc is supported\"", (uint8_t *)&v5, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_6414D8;
  exception[2] = 1852797029;
}

uint64_t sub_B3B50(void *a1, uint64_t a2, uint64_t a3)
{
  if (((*(void *)(a1[58] + 16) - *(void *)(a1[58] + 8)) & 0x7FFFFFFF8) != 0
    || ((*(void *)(a1[59] + 16) - *(void *)(a1[59] + 8)) & 0x7FFFFFFF8) != 0)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "VirtualAudio_Device.cpp";
      __int16 v9 = 1024;
      int v10 = 3223;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"only a single IOProc is supported\"", (uint8_t *)&v7, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }

  return sub_3634DC(a1, a2, a3);
}

uint64_t sub_B3C90(void *a1, uint64_t a2, uint64_t a3)
{
  if (((*(void *)(a1[58] + 16) - *(void *)(a1[58] + 8)) & 0x7FFFFFFF8) != 0)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "VirtualAudio_Device.cpp";
      __int16 v9 = 1024;
      int v10 = 3216;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"only a single IOProc is supported\"", (uint8_t *)&v7, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797029;
  }

  return sub_363AF4(a1, a2, a3);
}

void sub_B3DBC(atomic_ullong *a1)
{
  uint64_t v2 = pthread_self();
  uint64_t v3 = a1 + 24;
  if (pthread_equal(v2, (pthread_t)atomic_load_explicit(a1 + 24, memory_order_acquire)))
  {
    a1 += 22;
    int v4 = pthread_self();
    if (!pthread_equal(v4, (pthread_t)atomic_load_explicit(v3, memory_order_acquire)))
    {
      int v5 = (os_log_t *)sub_32A48(13);
      __int16 v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          uint64_t v14 = "IOMonitor.h";
          __int16 v15 = 1024;
          int v16 = 108;
          int v7 = "%25s:%-5d ASSERTION FAILURE: \"It is illegal to call Unlock_Normal from the io thread when it does not ow"
               "n mIOThreadCallingNormalMutex.\"";
LABEL_11:
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v13, 0x12u);
        }
      }
    }
  }
  else
  {
    int v8 = pthread_self();
    if (!pthread_equal(v8, (pthread_t)atomic_load_explicit(a1 + 13, memory_order_acquire)))
    {
      int v11 = (os_log_t *)sub_32A48(13);
      int v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          uint64_t v14 = "IOMonitor.h";
          __int16 v15 = 1024;
          int v16 = 100;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"It is illegal to call Unlock_Normal from a thread that does not own the mIOProcThreadMutex.\"", (uint8_t *)&v13, 0x12u);
        }
      }
    }
    sub_3A944((uint64_t)(a1 + 11));
    __int16 v9 = pthread_self();
    if (!pthread_equal(v9, (pthread_t)atomic_load_explicit(a1 + 2, memory_order_acquire)))
    {
      int v10 = (os_log_t *)sub_32A48(13);
      __int16 v6 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          int v13 = 136315394;
          uint64_t v14 = "IOMonitor.h";
          __int16 v15 = 1024;
          int v16 = 103;
          int v7 = "%25s:%-5d ASSERTION FAILURE: \"It is illegal to call Unlock_Normal from a thread that does not own the IO Monitor.\"";
          goto LABEL_11;
        }
      }
    }
  }
  sub_3A944((uint64_t)a1);
}

uint64_t sub_B3FB4(uint64_t a1)
{
  uint64_t v2 = pthread_self();
  if (pthread_equal(v2, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 104), memory_order_acquire)))
  {
    unsigned __int8 v12 = 0;
    uint64_t v3 = sub_AED38(a1 + 176, (char *)&v12);
    int v4 = v12;
    if (v12 != v3)
    {
      int v5 = (os_log_t *)sub_32A48(13);
      __int16 v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          uint64_t v14 = "IOMonitor.h";
          __int16 v15 = 1024;
          int v16 = 69;
          __int16 v17 = 1024;
          int v18 = (int)v3;
          __int16 v19 = 1024;
          int v20 = v4;
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"By definition, the IO thread is singular and not reentrant. As a result, it is a deep logic error if the IO thread already owns mIOThreadCallingNormalMutex. trySucceeded (%u) and outWasLocked (%u) imply this logic error.\"", buf, 0x1Eu);
        }
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 88;
    if (!sub_3B9AC(a1))
    {
      int v8 = (os_log_t *)sub_32A48(13);
      __int16 v9 = *v8;
      if (*v8)
      {
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v14 = "IOMonitor.h";
          __int16 v15 = 1024;
          int v16 = 60;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Could not take io monitor core lock in the normal thread.\"", buf, 0x12u);
        }
      }
    }
    if (sub_3B9AC(v7))
    {
      return 1;
    }
    else
    {
      int v10 = (os_log_t *)sub_32A48(13);
      uint64_t v3 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          uint64_t v14 = "IOMonitor.h";
          __int16 v15 = 1024;
          int v16 = 63;
          _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Could not take io proc lock in the normal thread.\"", buf, 0x12u);
        }
        return 0;
      }
    }
  }
  return (uint64_t)v3;
}

uint64_t sub_B41C8()
{
  return 1;
}

const void *sub_B41D0(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 592);
  CFRetain(v1);
  return v1;
}

CFStringRef sub_B41FC()
{
  return @"Apple Inc.";
}

uint64_t sub_B422C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 176))();
}

BOOL sub_B4250(uint64_t a1)
{
  return *(_DWORD *)(a1 + 584) != 1;
}

unsigned char *sub_B4260(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, uint64_t a7)
{
  sub_3B7EC();
  v225 = &qword_64CC40;
  char v226 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 32))(a1, a2) & 1) == 0)
  {
    v148 = (os_log_t *)sub_32A48(13);
    int v61 = 2003332927;
    os_log_t v149 = *v148;
    if (!*v148 || !os_log_type_enabled(*v148, OS_LOG_TYPE_ERROR)) {
      goto LABEL_385;
    }
    std::string __p = *(void **)a2;
    int v220 = a2[2];
    sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
    if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v150 = &v224;
    }
    else {
      uint64_t v150 = (std::string *)v224.__r_.__value_.__r.__words[0];
    }
    buf[0] = 136315650;
    *(void *)&buf[1] = "VirtualAudio_Device.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 2841;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v150;
    int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.";
LABEL_319:
    CFIndex v154 = v149;
    uint32_t v155 = 28;
    goto LABEL_320;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    unsigned int v151 = (os_log_t *)sub_32A48(13);
    int v61 = 561211770;
    os_log_t v152 = *v151;
    if (*v151 && os_log_type_enabled(*v151, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      int v220 = a2[2];
      sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
      if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v153 = &v224;
      }
      else {
        int v153 = (std::string *)v224.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2842;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v153;
      __int16 v228 = 1024;
      *(_DWORD *)v229 = a3;
      *(_WORD *)&v229[4] = 2048;
      *(void *)&v229[6] = a4;
      int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is N"
            "ULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).";
      CFIndex v154 = v152;
      uint32_t v155 = 44;
      goto LABEL_320;
    }
    goto LABEL_385;
  }
  if (!a6)
  {
    uint64_t v156 = (os_log_t *)sub_32A48(13);
    int v61 = 561211770;
    os_log_t v157 = *v156;
    if (*v156 && os_log_type_enabled(*v156, OS_LOG_TYPE_ERROR))
    {
      std::string __p = *(void **)a2;
      int v220 = a2[2];
      sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
      if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v158 = &v224;
      }
      else {
        uint64_t v158 = (std::string *)v224.__r_.__value_.__r.__words[0];
      }
      buf[0] = 136315906;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2843;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = "inData";
      __int16 v228 = 2080;
      *(void *)v229 = v158;
      int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.";
      CFIndex v154 = v157;
      uint32_t v155 = 38;
      goto LABEL_320;
    }
    goto LABEL_385;
  }
  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 40))(a1, a2) & 1) == 0)
  {
    int v159 = (os_log_t *)sub_32A48(13);
    int v61 = 1852797029;
    os_log_t v149 = *v159;
    if (!*v159 || !os_log_type_enabled(*v159, OS_LOG_TYPE_ERROR)) {
      goto LABEL_385;
    }
    std::string __p = *(void **)a2;
    int v220 = a2[2];
    sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
    if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFTypeRef v160 = &v224;
    }
    else {
      CFTypeRef v160 = (std::string *)v224.__r_.__value_.__r.__words[0];
    }
    buf[0] = 136315650;
    *(void *)&buf[1] = "VirtualAudio_Device.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 2844;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v160;
    int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.";
    goto LABEL_319;
  }
  int v13 = *a2;
  if (*a2 == 1836414053)
  {
    uint64_t v14 = sub_32A48(1);
    uint64_t v15 = sub_32A48(38);
    char v16 = 0;
    uint64_t v17 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v18 = *(void *)(v14 + 8);
    while (1)
    {
      uint64_t v19 = (int)buf[v17];
      char v20 = v16;
      if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
        break;
      }
      char v16 = 1;
      uint64_t v17 = 1;
      if (v20) {
        goto LABEL_12;
      }
    }
    if ((v18 & v19) == 0) {
      uint64_t v14 = v15;
    }
LABEL_12:
    uint64_t v21 = *(NSObject **)v14;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v222 = *(void **)a2;
      int v223 = a2[2];
      sub_16C9C4((uint64_t)&v224, (unsigned int *)&v222);
      int v22 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
      std::string::size_type v23 = v224.__r_.__value_.__r.__words[0];
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96))(&__p, a1);
      uint64_t v24 = &v224;
      if (v22 < 0) {
        uint64_t v24 = (std::string *)v23;
      }
      if (v221 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      unsigned int v26 = *a6;
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2848;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v24;
      __int16 v228 = 2080;
      *(void *)v229 = p_p;
      *(_WORD *)&v229[8] = 1024;
      *(_DWORD *)&v229[10] = v26;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s on VAD '%s': %u.", (uint8_t *)buf, 0x2Cu);
      if (v221 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v224.__r_.__value_.__l.__data_);
      }
    }
    int v13 = *a2;
  }
  if (v13 == 1987013741)
  {
    uint64_t v27 = sub_32A48(1);
    uint64_t v28 = sub_32A48(38);
    char v29 = 0;
    uint64_t v30 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v31 = *(void *)(v27 + 8);
    while (1)
    {
      uint64_t v32 = (int)buf[v30];
      char v33 = v29;
      if (((v31 & v32) != 0) != ((*(void *)(v28 + 8) & v32) != 0)) {
        break;
      }
      char v29 = 1;
      uint64_t v30 = 1;
      if (v33) {
        goto LABEL_31;
      }
    }
    if ((v31 & v32) == 0) {
      uint64_t v27 = v28;
    }
LABEL_31:
    unint64_t v34 = *(NSObject **)v27;
    if (v34 && os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v222 = *(void **)a2;
      int v223 = a2[2];
      sub_16C9C4((uint64_t)&v224, (unsigned int *)&v222);
      int v35 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
      std::string::size_type v36 = v224.__r_.__value_.__r.__words[0];
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96))(&__p, a1);
      unint64_t v37 = &v224;
      if (v35 < 0) {
        unint64_t v37 = (std::string *)v36;
      }
      if (v221 >= 0) {
        uint64_t v38 = &__p;
      }
      else {
        uint64_t v38 = __p;
      }
      double v39 = *(float *)a6;
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2851;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v37;
      __int16 v228 = 2080;
      *(void *)v229 = v38;
      *(_WORD *)&v229[8] = 2048;
      *(double *)&v229[10] = v39;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s on VAD '%s': %f.", (uint8_t *)buf, 0x30u);
      if (v221 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v224.__r_.__value_.__l.__data_);
      }
    }
  }
  int v40 = *a2;
  if (*a2 == 1836478308)
  {
    uint64_t v41 = sub_32A48(1);
    uint64_t v42 = sub_32A48(38);
    char v43 = 0;
    uint64_t v44 = 0;
    *(void *)AudioObjectPropertyAddress buf = 0x100000002;
    uint64_t v45 = *(void *)(v41 + 8);
    while (1)
    {
      uint64_t v46 = (int)buf[v44];
      char v47 = v43;
      if (((v45 & v46) != 0) != ((*(void *)(v42 + 8) & v46) != 0)) {
        break;
      }
      char v43 = 1;
      uint64_t v44 = 1;
      if (v47) {
        goto LABEL_49;
      }
    }
    if ((v45 & v46) == 0) {
      uint64_t v41 = v42;
    }
LABEL_49:
    vm_address_t v48 = *(NSObject **)v41;
    if (v48 && os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v222 = *(void **)a2;
      int v223 = a2[2];
      sub_16C9C4((uint64_t)&v224, (unsigned int *)&v222);
      int v49 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
      std::string::size_type v50 = v224.__r_.__value_.__r.__words[0];
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96))(&__p, a1);
      CFDictionaryRef v51 = &v224;
      if (v49 < 0) {
        CFDictionaryRef v51 = (std::string *)v50;
      }
      if (v221 >= 0) {
        vm_address_t v52 = &__p;
      }
      else {
        vm_address_t v52 = __p;
      }
      unsigned int v53 = *a6;
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Device.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 2854;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v51;
      __int16 v228 = 2080;
      *(void *)v229 = v52;
      *(_WORD *)&v229[8] = 1024;
      *(_DWORD *)&v229[10] = v53;
      _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s on VAD '%s': %u.", (uint8_t *)buf, 0x2Cu);
      if (v221 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v224.__r_.__value_.__l.__data_);
      }
    }
    int v40 = *a2;
  }
  if (v40 <= 1685287522)
  {
    if (v40 <= 1668247660)
    {
      if (v40 <= 1634755427)
      {
        if (v40 <= 1633970531)
        {
          if (v40 <= 1633906540)
          {
            if (v40 == 1633776747) {
              goto LABEL_156;
            }
            unsigned __int16 v54 = 26983;
            goto LABEL_154;
          }
          if (v40 != 1633906541)
          {
            unsigned __int16 v54 = 29554;
LABEL_154:
            int v68 = v54 | 0x61630000;
LABEL_155:
            if (v40 == v68)
            {
LABEL_156:
              if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
              {
                BOOL v77 = (os_log_t *)sub_32A48(13);
                int v61 = 561211770;
                os_log_t v62 = *v77;
                if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
                {
                  std::string __p = *(void **)a2;
                  int v220 = a2[2];
                  sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
                  int v78 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
                  std::string::size_type v79 = v224.__r_.__value_.__r.__words[0];
                  int v80 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
                  uint64_t v81 = &v224;
                  buf[0] = 136316162;
                  *(void *)&buf[1] = "VirtualAudio_Device.cpp";
                  if (v78 < 0) {
                    uint64_t v81 = (std::string *)v79;
                  }
                  LOWORD(buf[3]) = 1024;
                  *(_DWORD *)((char *)&buf[3] + 2) = 3094;
                  HIWORD(buf[4]) = 2080;
                  *(void *)&buf[5] = v81;
                  __int16 v228 = 1024;
                  *(_DWORD *)v229 = a5;
                  *(_WORD *)&v229[4] = 1024;
                  *(_DWORD *)&v229[6] = v80;
                  int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required si"
                        "ze (passed: %u; required: %u).";
LABEL_327:
                  CFIndex v154 = v62;
                  uint32_t v155 = 40;
LABEL_320:
                  _os_log_impl(&def_1E50E8, v154, OS_LOG_TYPE_ERROR, v67, (uint8_t *)buf, v155);
                  if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v224.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_385;
                }
                goto LABEL_385;
              }
              goto LABEL_185;
            }
LABEL_247:
            sub_3642DC(a1, a2, a3, a4, a5, a6);
            goto LABEL_186;
          }
LABEL_184:
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
          {
            uint64_t v161 = (os_log_t *)sub_32A48(13);
            int v61 = 561211770;
            os_log_t v62 = *v161;
            if (*v161 && os_log_type_enabled(*v161, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              int v220 = a2[2];
              sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
              int v162 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
              std::string::size_type v163 = v224.__r_.__value_.__r.__words[0];
              int v164 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
              unint64_t v165 = &v224;
              buf[0] = 136316162;
              *(void *)&buf[1] = "VirtualAudio_Device.cpp";
              if (v162 < 0) {
                unint64_t v165 = (std::string *)v163;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 3086;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v165;
              __int16 v228 = 1024;
              *(_DWORD *)v229 = a5;
              *(_WORD *)&v229[4] = 1024;
              *(_DWORD *)&v229[6] = v164;
              int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_327;
            }
LABEL_385:
            exception = __cxa_allocate_exception(0x10uLL);
            *(void *)exception = &off_6414D8;
            exception[2] = v61;
          }
          goto LABEL_185;
        }
        if (v40 <= 1634035053)
        {
          if (v40 == 1633970532) {
            goto LABEL_184;
          }
          int v55 = 1633973868;
          goto LABEL_183;
        }
        if (v40 != 1634035054)
        {
          int v55 = 1634692199;
LABEL_183:
          if (v40 != v55) {
            goto LABEL_247;
          }
          goto LABEL_184;
        }
        if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
        {
          v194 = (os_log_t *)sub_32A48(13);
          int v61 = 561211770;
          os_log_t v62 = *v194;
          if (*v194 && os_log_type_enabled(*v194, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            int v220 = a2[2];
            sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
            int v195 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
            std::string::size_type v196 = v224.__r_.__value_.__r.__words[0];
            int v197 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
            v198 = &v224;
            buf[0] = 136316162;
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            if (v195 < 0) {
              v198 = (std::string *)v196;
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2910;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v198;
            __int16 v228 = 1024;
            *(_DWORD *)v229 = a5;
            *(_WORD *)&v229[4] = 1024;
            *(_DWORD *)&v229[6] = v197;
            int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_327;
          }
          goto LABEL_385;
        }
        int v121 = a2[1];
        if (v121 == 1768845428 || v121 == 1869968496)
        {
          unsigned int v122 = *a6;
          uint64_t v123 = sub_32A48(1);
          uint64_t v124 = sub_32A48(24);
          char v125 = 0;
          uint64_t v126 = 0;
          *(void *)AudioObjectPropertyAddress buf = 0x100000002;
          uint64_t v127 = *(void *)(v123 + 8);
          while (1)
          {
            uint64_t v128 = (int)buf[v126];
            char v129 = v125;
            if (((v127 & v128) != 0) != ((*(void *)(v124 + 8) & v128) != 0)) {
              break;
            }
            char v125 = 1;
            uint64_t v126 = 1;
            if (v129) {
              goto LABEL_260;
            }
          }
          if ((v127 & v128) == 0) {
            uint64_t v123 = v124;
          }
LABEL_260:
          CFStringRef v140 = *(NSObject **)v123;
          if (v140 && os_log_type_enabled(v140, OS_LOG_TYPE_DEBUG))
          {
            v141 = "disable";
            if (v122 == 1) {
              v141 = "enable";
            }
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2916;
            buf[0] = 136315906;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v141;
            if (v121 == 1768845428) {
              v142 = "input";
            }
            else {
              v142 = "output";
            }
            __int16 v228 = 2080;
            *(void *)v229 = v142;
            _os_log_impl(&def_1E50E8, v140, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client request to %s %s audio enhancement processing", (uint8_t *)buf, 0x26u);
          }
          memset(buf, 0, 24);
          sub_B73FC(a1, v121 == 1768845428, v122 == 1, (uint64_t *)buf);
          if (*(void *)buf != *(void *)&buf[2])
          {
            sub_3B7EC();
            sub_523D8(&v224, (uint64_t)&qword_64CC40);
            sub_EE7F4(*(uint64_t *)buf, *(uint64_t *)&buf[2]);
            sub_52380(&v224);
          }
          v224.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          sub_EE3E4((void ***)&v224);
          goto LABEL_186;
        }
        uint64_t v213 = (os_log_t *)sub_32A48(13);
        int v61 = 2003332927;
        v172 = *v213;
        if (!*v213 || !os_log_type_enabled(*v213, OS_LOG_TYPE_ERROR)) {
          goto LABEL_385;
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2911;
        v173 = "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"invalid property scope for kVirtualAudioDevic"
               "ePropertyAudioEnhancementProcessingIsEnabled\"";
LABEL_384:
        _os_log_impl(&def_1E50E8, v172, OS_LOG_TYPE_ERROR, v173, (uint8_t *)buf, 0x12u);
        goto LABEL_385;
      }
      if (v40 <= 1635152992)
      {
        if (v40 != 1634755428)
        {
          int v68 = 1634890859;
          goto LABEL_155;
        }
        goto LABEL_184;
      }
      if ((v40 - 1635152993) <= 0xE && ((1 << (v40 - 97)) & 0x4015) != 0 || v40 == 1651664739) {
        goto LABEL_184;
      }
      if (v40 != 1651861092) {
        goto LABEL_247;
      }
      double v56 = *(double *)a6;
      double v57 = (*(double (**)(uint64_t))(*(void *)a1 + 632))(a1);
      char v58 = (os_log_t *)sub_32A48(1);
      LODWORD(a5) = vcvtad_u64_f64(v56 * v57);
      uint64_t v59 = *v58;
      if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136316162;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 3006;
        HIWORD(buf[4]) = 2048;
        *(double *)&buf[5] = v56;
        __int16 v228 = 1024;
        *(_DWORD *)v229 = a5;
        *(_WORD *)&v229[4] = 2048;
        *(double *)&v229[6] = v57;
        _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Client request to set buffer duration of %f seconds (equivalent to frame size of %u with sample rate of %f)", (uint8_t *)buf, 0x2Cu);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 488))(a1, a5);
      goto LABEL_186;
    }
    if (v40 > 1684500593)
    {
      if (v40 > 1685278560)
      {
        if (((v40 - 1685278561) > 0x11 || ((1 << (v40 - 97)) & 0x20003) == 0)
          && (v40 - 1685287011) >= 2)
        {
          goto LABEL_247;
        }
        goto LABEL_184;
      }
      if (v40 == 1684500594 || v40 == 1684893796) {
        goto LABEL_184;
      }
      int v55 = 1685087596;
      goto LABEL_183;
    }
    if (v40 <= 1684304755)
    {
      if (v40 > 1668705647)
      {
        if (v40 != 1668705648)
        {
          int v55 = 1684107364;
          goto LABEL_183;
        }
      }
      else
      {
        if (v40 == 1668247661)
        {
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
          {
            v189 = (os_log_t *)sub_32A48(13);
            int v61 = 561211770;
            os_log_t v62 = *v189;
            if (*v189 && os_log_type_enabled(*v189, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              int v220 = a2[2];
              sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
              int v190 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
              std::string::size_type v191 = v224.__r_.__value_.__r.__words[0];
              int v192 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
              v193 = &v224;
              buf[0] = 136316162;
              *(void *)&buf[1] = "VirtualAudio_Device.cpp";
              if (v190 < 0) {
                v193 = (std::string *)v191;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2980;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v193;
              __int16 v228 = 1024;
              *(_DWORD *)v229 = a5;
              *(_WORD *)&v229[4] = 1024;
              *(_DWORD *)&v229[6] = v192;
              int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_327;
            }
            goto LABEL_385;
          }
          (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368))(*(void *)(a1 + 1008), 1685287015, 2019976293, 0, (float)*a6);
          goto LABEL_186;
        }
        if (v40 != 1668443504) {
          goto LABEL_247;
        }
      }
      goto LABEL_164;
    }
    if (v40 > 1684370275)
    {
      if (v40 == 1684370276) {
        goto LABEL_184;
      }
      int v55 = 1684500589;
      goto LABEL_183;
    }
    if (v40 != 1684304756)
    {
      int v55 = 1684365924;
      goto LABEL_183;
    }
    goto LABEL_201;
  }
  if (v40 <= 1919774834)
  {
    if (v40 > 1869574755)
    {
      if (v40 <= 1886807153)
      {
        if (v40 > 1885631345)
        {
          if (v40 == 1885631346) {
            goto LABEL_184;
          }
          int v55 = 1886413412;
        }
        else
        {
          if (v40 == 1869574756) {
            goto LABEL_184;
          }
          int v55 = 1869575794;
        }
        goto LABEL_183;
      }
      if (v40 <= 1918987631)
      {
        if (v40 == 1886807154) {
          goto LABEL_184;
        }
        if (v40 != 1902539642) {
          goto LABEL_247;
        }
        if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
        {
          v174 = (os_log_t *)sub_32A48(13);
          int v61 = 561211770;
          os_log_t v62 = *v174;
          if (*v174 && os_log_type_enabled(*v174, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            int v220 = a2[2];
            sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
            int v175 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
            std::string::size_type v176 = v224.__r_.__value_.__r.__words[0];
            int v177 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
            char v178 = &v224;
            buf[0] = 136316162;
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            if (v175 < 0) {
              char v178 = (std::string *)v176;
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2904;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v178;
            __int16 v228 = 1024;
            *(_DWORD *)v229 = a5;
            *(_WORD *)&v229[4] = 1024;
            *(_DWORD *)&v229[6] = v177;
            int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_327;
          }
          goto LABEL_385;
        }
        (*(void (**)(uint64_t, void))(*(void *)a1 + 496))(a1, *a6);
        goto LABEL_186;
      }
      if (v40 != 1918987632)
      {
        int v55 = 1919773028;
        goto LABEL_183;
      }
      goto LABEL_164;
    }
    if (v40 <= 1718641516)
    {
      switch(v40)
      {
        case 1685287523:
LABEL_201:
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
          {
            unint64_t v100 = (os_log_t *)sub_32A48(13);
            int v61 = 561211770;
            os_log_t v62 = *v100;
            if (*v100 && os_log_type_enabled(*v100, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              int v220 = a2[2];
              sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
              int v101 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
              std::string::size_type v102 = v224.__r_.__value_.__r.__words[0];
              int v103 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
              CFTypeID v104 = &v224;
              buf[0] = 136316162;
              *(void *)&buf[1] = "VirtualAudio_Device.cpp";
              if (v101 < 0) {
                CFTypeID v104 = (std::string *)v102;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2934;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v104;
              __int16 v228 = 1024;
              *(_DWORD *)v229 = a5;
              *(_WORD *)&v229[4] = 1024;
              *(_DWORD *)&v229[6] = v103;
              int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_327;
            }
            goto LABEL_385;
          }
          goto LABEL_185;
        case 1685483630:
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
          {
            __int16 v105 = (os_log_t *)sub_32A48(13);
            int v61 = 561211770;
            os_log_t v62 = *v105;
            if (*v105 && os_log_type_enabled(*v105, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              int v220 = a2[2];
              sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
              int v106 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
              std::string::size_type v107 = v224.__r_.__value_.__r.__words[0];
              int v108 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
              uint64_t v109 = &v224;
              buf[0] = 136316162;
              *(void *)&buf[1] = "VirtualAudio_Device.cpp";
              if (v106 < 0) {
                uint64_t v109 = (std::string *)v107;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2973;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v109;
              __int16 v228 = 1024;
              *(_DWORD *)v229 = a5;
              *(_WORD *)&v229[4] = 1024;
              *(_DWORD *)&v229[6] = v108;
              int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_327;
            }
            goto LABEL_385;
          }
          break;
        case 1718383987:
          if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
          {
            char v179 = (os_log_t *)sub_32A48(13);
            int v61 = 561211770;
            os_log_t v62 = *v179;
            if (*v179 && os_log_type_enabled(*v179, OS_LOG_TYPE_ERROR))
            {
              std::string __p = *(void **)a2;
              int v220 = a2[2];
              sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
              int v180 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
              std::string::size_type v181 = v224.__r_.__value_.__r.__words[0];
              int v182 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
              v183 = &v224;
              buf[0] = 136316162;
              *(void *)&buf[1] = "VirtualAudio_Device.cpp";
              if (v180 < 0) {
                v183 = (std::string *)v181;
              }
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 2965;
              HIWORD(buf[4]) = 2080;
              *(void *)&buf[5] = v183;
              __int16 v228 = 1024;
              *(_DWORD *)v229 = a5;
              *(_WORD *)&v229[4] = 1024;
              *(_DWORD *)&v229[6] = v182;
              int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size ("
                    "passed: %u; required: %u).";
              goto LABEL_327;
            }
            goto LABEL_385;
          }
          if (((*(uint64_t (**)(void, int *))(**(void **)(a1 + 1008) + 16))(*(void *)(a1 + 1008), a2) & 1) == 0) {
            goto LABEL_186;
          }
          break;
        default:
          goto LABEL_247;
      }
    }
    else
    {
      if (v40 <= 1852012898)
      {
        if (v40 != 1718641517)
        {
          int v55 = 1818326127;
          goto LABEL_183;
        }
        if (!sub_8458(a1 + 648) && !sub_8458(a1 + 736))
        {
          __int16 v110 = (os_log_t *)sub_32A48(1);
          CFIndex v111 = *v110;
          if (*v110 && os_log_type_enabled(*v110, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v112 = "true";
            unsigned int v113 = *a6;
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            buf[0] = 136315650;
            if (!v113) {
              uint64_t v112 = "false";
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 3016;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v112;
            _os_log_impl(&def_1E50E8, v111, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client request to set force LPCM to %s", (uint8_t *)buf, 0x1Cu);
          }
          unint64_t v114 = *(void *)(a1 + 528) - *(void *)(a1 + 520);
          if ((v114 & 0x7FFFFFFF8) != 0)
          {
            sub_B77D4(&__p, a1);
            if (!sub_8458(a1 + 648) && !sub_8458(a1 + 736))
            {
              v215 = (os_log_t *)sub_32A48(13);
              v216 = *v215;
              if (*v215 && os_log_type_enabled(*v215, OS_LOG_TYPE_ERROR))
              {
                buf[0] = 136315394;
                *(void *)&buf[1] = "VirtualAudio_Device.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 3024;
                _os_log_impl(&def_1E50E8, v216, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
              }
              v217 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v217, "Invariant failure.");
            }
            unint64_t v115 = 0;
            memset(&v224, 0, sizeof(v224));
            uint64_t v116 = (v114 >> 3);
            do
            {
              uint64_t v117 = *(void *)(a1 + 520);
              if (v115 >= (*(void *)(a1 + 528) - v117) >> 3) {
                uint64_t v118 = 0;
              }
              else {
                uint64_t v118 = *(void *)(v117 + 8 * v115);
              }
              (*(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t))(*(void *)v118 + 64))(v118, a2, a3, a4, a5, a6, a7);
              uint64_t v119 = (os_log_t *)sub_32A48(1);
              unint64_t v120 = *v119;
              if (*v119 && os_log_type_enabled(*v119, OS_LOG_TYPE_DEBUG))
              {
                buf[0] = 136315650;
                *(void *)&buf[1] = "VirtualAudio_Device.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 3035;
                HIWORD(buf[4]) = 2048;
                *(void *)&buf[5] = v118;
                _os_log_impl(&def_1E50E8, v120, OS_LOG_TYPE_DEBUG, "%25s:%-5d Refreshing output stream %p for force LPCM stream preference change.", (uint8_t *)buf, 0x1Cu);
              }
              sub_ED518(v118, (uint64_t *)&v224);
              ++v115;
            }
            while (v116 != v115);
            sub_D075C(*(void *)(a1 + 632), (uint64_t *)&v224);
            sub_B7980((atomic_ullong *)a1, (uint64_t *)&v224);
            *(void *)AudioObjectPropertyAddress buf = &v224;
            sub_EE3E4((void ***)buf);
            sub_B7D50((uint64_t *)&__p);
          }
          goto LABEL_186;
        }
        uint64_t v168 = (os_log_t *)sub_32A48(13);
        uint64_t v169 = *v168;
        if (*v168 && os_log_type_enabled(*v168, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3013;
          _os_log_impl(&def_1E50E8, v169, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
        }
LABEL_335:
        uint64_t v170 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v170, "Precondition failure.");
      }
      if (v40 != 1852012899)
      {
        if (v40 != 1853059700) {
          goto LABEL_247;
        }
        kdebug_trace();
        if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
        {
          v199 = (os_log_t *)sub_32A48(13);
          int v61 = 561211770;
          os_log_t v62 = *v199;
          if (*v199 && os_log_type_enabled(*v199, OS_LOG_TYPE_ERROR))
          {
            std::string __p = *(void **)a2;
            int v220 = a2[2];
            sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
            int v200 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
            std::string::size_type v201 = v224.__r_.__value_.__r.__words[0];
            int v202 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
            v203 = &v224;
            buf[0] = 136316162;
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            if (v200 < 0) {
              v203 = (std::string *)v201;
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2871;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v203;
            __int16 v228 = 1024;
            *(_DWORD *)v229 = a5;
            *(_WORD *)&v229[4] = 1024;
            *(_DWORD *)&v229[6] = v202;
            int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pa"
                  "ssed: %u; required: %u).";
            goto LABEL_327;
          }
          goto LABEL_385;
        }
        double v69 = *(double *)a6;
        uint64_t v70 = sub_32A48(1);
        uint64_t v71 = sub_32A48(36);
        char v72 = 0;
        uint64_t v73 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v74 = *(void *)(v70 + 8);
        while (1)
        {
          uint64_t v75 = (int)buf[v73];
          char v76 = v72;
          if (((v74 & v75) != 0) != ((*(void *)(v71 + 8) & v75) != 0)) {
            break;
          }
          char v72 = 1;
          uint64_t v73 = 1;
          if (v76) {
            goto LABEL_273;
          }
        }
        if ((v74 & v75) == 0) {
          uint64_t v70 = v71;
        }
LABEL_273:
        int v143 = *(NSObject **)v70;
        if (v143 && os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
        {
          std::string __p = *(void **)(a1 + 576);
          sub_4D60(&v224, (unsigned int *)&__p);
          uint64_t v144 = (v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v224
               : (std::string *)v224.__r_.__value_.__r.__words[0];
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2875;
          HIWORD(buf[4]) = 2048;
          *(double *)&buf[5] = v69;
          __int16 v228 = 2080;
          *(void *)v229 = v144;
          _os_log_impl(&def_1E50E8, v143, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Client request to set nominal sample rate to %f on VAD: '%s'.", (uint8_t *)buf, 0x26u);
          if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v224.__r_.__value_.__l.__data_);
          }
        }
        if (sub_B70B8(*(void *)(a1 + 520), *(void *)(a1 + 528)) && sub_B7158(*(void *)(a1 + 1008))) {
          double v69 = v69 * 16.0;
        }
        if (!sub_B71CC((void *)a1, a2[1], v69))
        {
          v210 = (os_log_t *)sub_32A48(1);
          v211 = *v210;
          if (*v210 && os_log_type_enabled(*v210, OS_LOG_TYPE_DEBUG))
          {
            buf[0] = 136315650;
            *(void *)&buf[1] = "VirtualAudio_Device.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 2884;
            HIWORD(buf[4]) = 2048;
            *(double *)&buf[5] = v69;
            _os_log_impl(&def_1E50E8, v211, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempt to set unsupported value for kAudioDevicePropertyNominalSampleRate (%f). Poor form but not likely a serious issue. Quietly returning failure.", (uint8_t *)buf, 0x1Cu);
          }
          v212 = __cxa_allocate_exception(0x10uLL);
          *(void *)v212 = &off_6414D8;
          v212[2] = 560226676;
        }
        sub_B7280(a1, v69);
        kdebug_trace();
        goto LABEL_186;
      }
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
      {
        v184 = (os_log_t *)sub_32A48(13);
        int v61 = 561211770;
        os_log_t v62 = *v184;
        if (*v184 && os_log_type_enabled(*v184, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          int v220 = a2[2];
          sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
          int v185 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
          std::string::size_type v186 = v224.__r_.__value_.__r.__words[0];
          int v187 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
          v188 = &v224;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          if (v185 < 0) {
            v188 = (std::string *)v186;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2864;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v188;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = a5;
          *(_WORD *)&v229[4] = 1024;
          *(_DWORD *)&v229[6] = v187;
          int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_327;
        }
        goto LABEL_385;
      }
      a3 = 0;
      a4 = 0;
    }
    goto LABEL_185;
  }
  if (v40 <= 1953002092)
  {
    if (v40 > 1936878959)
    {
      if (v40 > 1937138531)
      {
        if (v40 == 1937138532) {
          goto LABEL_184;
        }
        int v55 = 1952997988;
        goto LABEL_183;
      }
      if (v40 == 1936878960)
      {
LABEL_164:
        uint64_t v82 = *(void *)(a1 + 928);
        if (v82)
        {
          (*(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, unsigned int *, void))(*(void *)v82 + 64))(v82, a2, a3, a4, a5, a6, 0);
          goto LABEL_186;
        }
        uint64_t v166 = (os_log_t *)sub_32A48(13);
        v167 = *v166;
        if (*v166 && os_log_type_enabled(*v166, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2993;
          _os_log_impl(&def_1E50E8, v167, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)buf, 0x12u);
        }
        goto LABEL_335;
      }
      if (v40 != 1936879204) {
        goto LABEL_247;
      }
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) > a5)
      {
        uint64_t v60 = (os_log_t *)sub_32A48(13);
        int v61 = 561211770;
        os_log_t v62 = *v60;
        if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          int v220 = a2[2];
          sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
          int v63 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
          std::string::size_type v64 = v224.__r_.__value_.__r.__words[0];
          int v65 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
          int v66 = &v224;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          if (v63 < 0) {
            int v66 = (std::string *)v64;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2899;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v66;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = a5;
          *(_WORD *)&v229[4] = 1024;
          *(_DWORD *)&v229[6] = v65;
          int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
          goto LABEL_327;
        }
        goto LABEL_385;
      }
    }
    else
    {
      if (v40 <= 1935762280)
      {
        if (v40 != 1919774835)
        {
          int v55 = 1934456180;
          goto LABEL_183;
        }
        goto LABEL_164;
      }
      if (v40 == 1935762281) {
        goto LABEL_184;
      }
      if (v40 != 1936876644) {
        goto LABEL_247;
      }
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) > a5)
      {
        CFTypeRef v83 = (os_log_t *)sub_32A48(13);
        int v61 = 561211770;
        os_log_t v62 = *v83;
        if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          int v220 = a2[2];
          sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
          int v84 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
          std::string::size_type v85 = v224.__r_.__value_.__r.__words[0];
          int v86 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
          uint64_t v87 = &v224;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          if (v84 < 0) {
            uint64_t v87 = (std::string *)v85;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2859;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v87;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = a5;
          *(_WORD *)&v229[4] = 1024;
          *(_DWORD *)&v229[6] = v86;
          int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s was too small (passed: %u; minimum: %u).";
          goto LABEL_327;
        }
        goto LABEL_385;
      }
    }
LABEL_185:
    (*(void (**)(void, int *, uint64_t, uint64_t, uint64_t, unsigned int *))(**(void **)(a1 + 1008) + 48))(*(void *)(a1 + 1008), a2, a3, a4, a5, a6);
    goto LABEL_186;
  }
  if (v40 > 1983996970)
  {
    if (v40 <= 2020111982)
    {
      if (v40 == 1983996971) {
        goto LABEL_184;
      }
      int v55 = 1986361444;
      goto LABEL_183;
    }
    if (v40 == 2020111983)
    {
      uint64_t v130 = sub_32A48(1);
      uint64_t v131 = sub_32A48(38);
      char v132 = 0;
      uint64_t v133 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v134 = *(void *)(v130 + 8);
      while (1)
      {
        uint64_t v135 = (int)buf[v133];
        char v136 = v132;
        if (((v134 & v135) != 0) != ((*(void *)(v131 + 8) & v135) != 0)) {
          break;
        }
        char v132 = 1;
        uint64_t v133 = 1;
        if (v136) {
          goto LABEL_250;
        }
      }
      if ((v134 & v135) == 0) {
        uint64_t v130 = v131;
      }
LABEL_250:
      uint64_t v137 = *(NSObject **)v130;
      if (v137 && os_log_type_enabled(v137, OS_LOG_TYPE_DEBUG))
      {
        double v138 = *(double *)a6;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 96))(&v224, a1);
        CFDictionaryRef v139 = (v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v224
             : (std::string *)v224.__r_.__value_.__r.__words[0];
        buf[0] = 136315906;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2958;
        HIWORD(buf[4]) = 2048;
        *(double *)&buf[5] = v138;
        __int16 v228 = 2080;
        *(void *)v229 = v139;
        _os_log_impl(&def_1E50E8, v137, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client registering external hardware volume handler %p on VAD '%s'.", (uint8_t *)buf, 0x26u);
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v224.__r_.__value_.__l.__data_);
        }
      }
      *(_OWORD *)sub_B776C() = *(_OWORD *)a6;
    }
    else
    {
      if (v40 != 2021027692) {
        goto LABEL_247;
      }
      if (a2[1] != 1869968496)
      {
        uint64_t v171 = (os_log_t *)sub_32A48(13);
        int v61 = 1970171760;
        v172 = *v171;
        if (!*v171 || !os_log_type_enabled(*v171, OS_LOG_TYPE_ERROR)) {
          goto LABEL_385;
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2940;
        v173 = "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"an external volume handler is only suppo"
               "rted for output\"";
        goto LABEL_384;
      }
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
      {
        v204 = (os_log_t *)sub_32A48(13);
        int v61 = 561211770;
        os_log_t v62 = *v204;
        if (*v204 && os_log_type_enabled(*v204, OS_LOG_TYPE_ERROR))
        {
          std::string __p = *(void **)a2;
          int v220 = a2[2];
          sub_16C9C4((uint64_t)&v224, (unsigned int *)&__p);
          int v205 = SHIBYTE(v224.__r_.__value_.__r.__words[2]);
          std::string::size_type v206 = v224.__r_.__value_.__r.__words[0];
          int v207 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
          v208 = &v224;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          if (v205 < 0) {
            v208 = (std::string *)v206;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 2941;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v208;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = a5;
          *(_WORD *)&v229[4] = 1024;
          *(_DWORD *)&v229[6] = v207;
          int v67 = "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (pass"
                "ed: %u; required: %u).";
          goto LABEL_327;
        }
        goto LABEL_385;
      }
      if (!*(void *)(a1 + 928))
      {
        uint64_t v209 = (os_log_t *)sub_32A48(13);
        v172 = *v209;
        int v61 = 2003329396;
        if (!*v209 || !os_log_type_enabled(*v209, OS_LOG_TYPE_ERROR)) {
          goto LABEL_385;
        }
        buf[0] = 136315394;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2942;
        v173 = "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mOutputMasterVolumeControl is NULL]: \"attempt to r"
               "egister external volume handler when output master volume control is NULL\"";
        goto LABEL_384;
      }
      uint64_t v93 = sub_32A48(1);
      uint64_t v94 = sub_32A48(38);
      char v95 = 0;
      uint64_t v96 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v97 = *(void *)(v93 + 8);
      while (1)
      {
        uint64_t v98 = (int)buf[v96];
        char v99 = v95;
        if (((v97 & v98) != 0) != ((*(void *)(v94 + 8) & v98) != 0)) {
          break;
        }
        char v95 = 1;
        uint64_t v96 = 1;
        if (v99) {
          goto LABEL_287;
        }
      }
      if ((v97 & v98) == 0) {
        uint64_t v93 = v94;
      }
LABEL_287:
      uint64_t v145 = *(NSObject **)v93;
      if (v145 && os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG))
      {
        double v146 = *(double *)a6;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 96))(&v224, a1);
        uint64_t v147 = (v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? &v224
             : (std::string *)v224.__r_.__value_.__r.__words[0];
        buf[0] = 136315906;
        *(void *)&buf[1] = "VirtualAudio_Device.cpp";
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 2947;
        HIWORD(buf[4]) = 2048;
        *(double *)&buf[5] = v146;
        __int16 v228 = 2080;
        *(void *)v229 = v147;
        _os_log_impl(&def_1E50E8, v145, OS_LOG_TYPE_DEBUG, "%25s:%-5d Client registering external volume handler %p on VAD '%s'.", (uint8_t *)buf, 0x26u);
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v224.__r_.__value_.__l.__data_);
        }
      }
      sub_ADC10(*(void *)(a1 + 928), *(void *)a6, *((void *)a6 + 1));
    }
  }
  else
  {
    if (v40 <= 1969844081)
    {
      if (v40 == 1953002093) {
        goto LABEL_184;
      }
      int v55 = 1953719148;
      goto LABEL_183;
    }
    if (v40 == 1969844082) {
      goto LABEL_184;
    }
    if (v40 != 1970303087) {
      goto LABEL_247;
    }
  }
LABEL_186:
  if (*a2 == 1987013741)
  {
    if (a2[2])
    {
      __n128 v88 = (os_log_t *)sub_32A48(1);
      __n128 v89 = *v88;
      if (*v88)
      {
        if (os_log_type_enabled(*v88, OS_LOG_TYPE_DEBUG))
        {
          double v90 = *(float *)a6;
          int v91 = a2[2];
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 3103;
          HIWORD(buf[4]) = 2048;
          *(double *)&buf[5] = v90;
          __int16 v228 = 1024;
          *(_DWORD *)v229 = v91;
          _os_log_impl(&def_1E50E8, v89, OS_LOG_TYPE_DEBUG, "%25s:%-5d Applying Individual volume %f to %u", (uint8_t *)buf, 0x22u);
        }
      }
    }
  }
  return sub_3BCAC(&v225);
}

void sub_B6ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_3BCAC(&a24);
  _Unwind_Resume(a1);
}

BOOL sub_B70B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - a1;
  if (((a2 - a1) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v3 = 0;
    unint64_t v4 = v2 >> 3;
    unint64_t v5 = ((unint64_t)v2 >> 3);
    BOOL v6 = 1;
    do
    {
      if (v4 > v3)
      {
        uint64_t v7 = *(void *)(a1 + 8 * v3);
        if (v7)
        {
          int v8 = *(_DWORD *)(*(void *)(v7 + 104) + 24);
          if (v8 > 1836343850)
          {
            if (v8 == 1836343851 || v8 == 1836344107) {
              return v6;
            }
          }
          else if (v8 == 1667443507 || v8 == 1667509043)
          {
            return v6;
          }
        }
      }
      BOOL v6 = ++v3 < v5;
    }
    while (v5 != v3);
  }
  return 0;
}

uint64_t sub_B7158(uint64_t a1)
{
  uint64_t v1 = sub_99A40(a1);
  *((void *)&v3 + 1) = v2;
  *(void *)&long long v3 = v1;
  if (((v3 >> 32) & 0xFF00000000) == 0 || HIDWORD(v1) == 0) {
    return 1;
  }
  else {
    return _os_feature_enabled_impl() ^ 1;
  }
}

BOOL sub_B71CC(void *a1, AudioObjectPropertyScope a2, double a3)
{
  sub_B9FE8(&v11, a1, a2);
  unint64_t v4 = v11;
  if (v11 != (uint64_t *)v12)
  {
    while (*((double *)v4 + 4) > a3 || *((double *)v4 + 5) < a3)
    {
      BOOL v6 = (uint64_t *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          BOOL v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          unint64_t v4 = v7;
        }
        while (!v8);
      }
      unint64_t v4 = v7;
      if (v7 == (uint64_t *)v12)
      {
        unint64_t v4 = (uint64_t *)v12;
        break;
      }
    }
  }
  BOOL v9 = v4 != (uint64_t *)v12;
  sub_463E0(v12[0]);
  return v9;
}

void sub_B7280(uint64_t a1, double a2)
{
  sub_B93BC(&v6, a1, a2);
  if (v6)
  {
    if (*(void *)(a1 + 624))
    {
      long long v3 = (os_log_t *)sub_32A48(13);
      unint64_t v4 = *v3;
      if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        BOOL v9 = "VirtualAudio_Device.cpp";
        __int16 v10 = 1024;
        int v11 = 1371;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Sample rate changes are currently blocked by policy.\"", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &off_6414D8;
      exception[2] = 1852797029;
    }
    sub_B9584(a1, (uint64_t)v7);
  }
  sub_463E0(v7[1]);
}

void sub_B73DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_B73FC(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  if (!*(void *)(a1 + 1008))
  {
    uint64_t v18 = (os_log_t *)sub_32A48(13);
    uint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v27 = 136315394;
      uint64_t v28 = "VirtualAudio_Device.cpp";
      __int16 v29 = 1024;
      int v30 = 924;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mDevice is NULL]: \"mDevice is NULL\"", (uint8_t *)&v27, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "mDevice is NULL");
  }
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 440))(a1);
  int v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 1008) + 320))();
  if (v9)
  {
    int v21 = v9;
    int v22 = (os_log_t *)sub_32A48(13);
    std::string::size_type v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = "disabling";
      uint64_t v28 = "VirtualAudio_Device.cpp";
      int v30 = 930;
      if (a3) {
        uint64_t v24 = "enabling";
      }
      __int16 v29 = 1024;
      __int16 v31 = 1024;
      int v27 = 136316162;
      int v32 = v21;
      __int16 v33 = 2080;
      unint64_t v34 = v24;
      if (a2) {
        uint64_t v25 = "input";
      }
      else {
        uint64_t v25 = "output";
      }
      __int16 v35 = 2080;
      std::string::size_type v36 = v25;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error %u %s %s enhancement processing on the active aggregate device\"", (uint8_t *)&v27, 0x2Cu);
    }
    unsigned int v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v26 = &off_6414D8;
    v26[2] = v21;
  }
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 440))(a1, a2);
  uint64_t v11 = 600;
  if (!a2) {
    uint64_t v11 = 601;
  }
  int v12 = *(unsigned __int8 *)(a1 + v11);
  *(unsigned char *)(a1 + v11) = a3;
  if (a2) {
    unsigned int v13 = 1768845428;
  }
  else {
    unsigned int v13 = 1869968496;
  }
  if (v12 != a3)
  {
    int v14 = *(_DWORD *)(a1 + 8);
    int v27 = 1634035054;
    uint64_t v28 = (const char *)v13;
    uint64_t v15 = (unint64_t *)sub_EE470(a4, v14);
    sub_74758(v15, &v27);
  }
  if (v10 != v8)
  {
    int v16 = *(_DWORD *)(a1 + 8);
    int v27 = 1819569763;
    uint64_t v28 = (const char *)v13;
    uint64_t v17 = (unint64_t *)sub_EE470(a4, v16);
    sub_74758(v17, &v27);
  }
}

void sub_B7750(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B776C()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_64CF68, memory_order_acquire) != -1)
  {
    long long v3 = &v1;
    uint64_t v2 = &v3;
    std::__call_once(&qword_64CF68, &v2, (void (__cdecl *)(void *))sub_B9380);
  }
  return qword_64CF70;
}

unsigned char *sub_B77D4(unsigned char *a1, uint64_t a2)
{
  *(void *)a1 = a2;
  unint64_t v4 = pthread_self();
  if (pthread_equal(v4, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a2 + 664), memory_order_acquire)))
  {
    BOOL v5 = 1;
  }
  else
  {
    BOOL v6 = pthread_self();
    BOOL v5 = pthread_equal(v6, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a2 + 752), memory_order_acquire)) != 0;
  }
  a1[8] = v5;
  a1[9] = *(unsigned char *)(*(void *)a1 + 1072) ^ 1;
  uint64_t v7 = sub_32A48(1);
  if (*(unsigned char *)(v7 + 8))
  {
    int v8 = *(NSObject **)v7;
    if (*(void *)v7)
    {
      if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = *(void *)a1;
        int v10 = a1[8];
        int v11 = a1[9];
        sub_3B7EC();
        int v12 = (*(uint64_t (**)(void))(qword_64CC40 + 48))();
        int v14 = 136316418;
        uint64_t v15 = "VirtualAudio_Device.cpp";
        __int16 v16 = 1024;
        int v17 = 124;
        __int16 v18 = 2048;
        uint64_t v19 = v9;
        __int16 v20 = 1024;
        int v21 = v10;
        __int16 v22 = 1024;
        int v23 = v11;
        __int16 v24 = 1024;
        int v25 = v12;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Owning device: %p; mIOMonitorWasHeld: %u; mDoConfigChange: %u; state mutex is held: %u.",
          (uint8_t *)&v14,
          0x2Eu);
      }
    }
  }
  if (a1[9]) {
    sub_B8790(*(void *)a1, a1[8] == 0, 0);
  }
  return a1;
}

uint64_t sub_B7980(atomic_ullong *a1, uint64_t *a2)
{
  sub_3B7EC();
  unint64_t v4 = pthread_self();
  if (!pthread_equal(v4, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire)))
  {
    BOOL v5 = pthread_self();
    if (!pthread_equal(v5, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire)))
    {
      int v17 = (os_log_t *)sub_32A48(13);
      __int16 v18 = *v17;
      if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        __int16 v22 = "VirtualAudio_Device.cpp";
        __int16 v23 = 1024;
        int v24 = 4905;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
  }
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    int v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v22 = "VirtualAudio_Device.cpp";
      __int16 v23 = 1024;
      int v24 = 4906;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    unsigned int v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }
  BOOL v6 = a1 + 81;
  sub_B3DBC(v6);
  (*(void (**)(uint64_t *))(qword_64CC40 + 24))(&qword_64CC40);
  sub_EE7F4(*a2, a2[1]);
  (*(void (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  uint64_t result = sub_B870C((uint64_t)v6, &v20);
  if ((result & 1) == 0)
  {
    unsigned int v8 = 20;
    do
    {
      (*(void (**)(uint64_t *))(qword_64CC40 + 24))(&qword_64CC40);
      usleep(0x1388u);
      (*(void (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
      uint64_t result = sub_B870C((uint64_t)v6, &v20);
      if (v8-- >= 2) {
        int v10 = result;
      }
      else {
        int v10 = 1;
      }
    }
    while (v10 != 1);
    if ((result & 1) == 0)
    {
      int v14 = (os_log_t *)sub_32A48(13);
      uint64_t v15 = *v14;
      if (*v14)
      {
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          __int16 v22 = "VirtualAudio_Device.cpp";
          __int16 v23 = 1024;
          int v24 = 4942;
          _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Unable to re-lock the IOMonitor. Please file a radar against \\\"Audio - Routing\\\"\"", buf, 0x12u);
        }
      }
      __int16 v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v16, "Unable to re-lock the IOMonitor. Please file a radar against \"Audio - Routing\"");
    }
  }
  return result;
}

void sub_B7D2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_B7D50(uint64_t *a1)
{
  if (*((unsigned char *)a1 + 9)) {
    sub_B7F0C(*a1, 0, 1, *((unsigned char *)a1 + 8) == 0, 1);
  }
  uint64_t v2 = sub_32A48(1);
  if (*(unsigned char *)(v2 + 8))
  {
    long long v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v4 = *a1;
        int v5 = *((unsigned __int8 *)a1 + 8);
        int v6 = *((unsigned __int8 *)a1 + 9);
        sub_3B7EC();
        int v7 = (*(uint64_t (**)(void))(qword_64CC40 + 48))();
        uint64_t v8 = *a1;
        uint64_t v9 = pthread_self();
        if (pthread_equal(v9, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v8 + 664), memory_order_acquire)))
        {
          BOOL v10 = 1;
        }
        else
        {
          int v11 = pthread_self();
          BOOL v10 = pthread_equal(v11, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v8 + 752), memory_order_acquire)) != 0;
        }
        int v13 = 136316674;
        int v14 = "VirtualAudio_Device.cpp";
        __int16 v15 = 1024;
        int v16 = 141;
        __int16 v17 = 2048;
        uint64_t v18 = v4;
        __int16 v19 = 1024;
        int v20 = v5;
        __int16 v21 = 1024;
        int v22 = v6;
        __int16 v23 = 1024;
        int v24 = v7;
        __int16 v25 = 1024;
        BOOL v26 = v10;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Owning device: %p; mIOMonitorWasHeld: %u; mDoConfigChange: %u; IO monitor is held: %u; state mutex is held: %u.",
          (uint8_t *)&v13,
          0x34u);
      }
    }
  }
  return a1;
}

void sub_B7F00(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

unsigned char *sub_B7F0C(atomic_ullong *a1, uint64_t *a2, int a3, int a4, int a5)
{
  sub_3B7EC();
  if ((*(unsigned int (**)(void))(qword_64CC40 + 48))() != a5)
  {
    uint64_t v41 = (os_log_t *)sub_32A48(13);
    uint64_t v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v49 = 1024;
      int v50 = 276;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  BOOL v10 = pthread_self();
  if (!pthread_equal(v10, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire)))
  {
    int v14 = pthread_self();
    if ((pthread_equal(v14, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire)) != 0) == a4) {
      goto LABEL_4;
    }
LABEL_10:
    __int16 v15 = (os_log_t *)sub_32A48(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v49 = 1024;
      int v50 = 278;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    __int16 v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v17, "Precondition failure.");
  }
  if ((a4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v46 = a1;
  char v47 = a4;
  if (!a3) {
    goto LABEL_43;
  }
  atomic_ullong v11 = a1[58];
  if (!v11) {
    goto LABEL_43;
  }
  int v13 = *(_DWORD *)(v11 + 112);
  int v12 = *(_DWORD *)(v11 + 116);
  if (v13)
  {
    if (!v12)
    {
LABEL_29:
      uint64_t v28 = sub_32A48(1);
      uint64_t v29 = sub_32A48(31);
      char v30 = 0;
      uint64_t v31 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v32 = *(void *)(v28 + 8);
      while (1)
      {
        uint64_t v33 = *(int *)&buf[4 * v31];
        char v34 = v30;
        if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
          break;
        }
        char v30 = 1;
        uint64_t v31 = 1;
        if (v34) {
          goto LABEL_35;
        }
      }
      if ((v32 & v33) == 0) {
        uint64_t v28 = v29;
      }
LABEL_35:
      __int16 v35 = *(NSObject **)v28;
      if (v35 && os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        int v36 = *(_DWORD *)(a1[58] + 112);
        atomic_ullong v44 = a1[72];
        sub_4D60(&__p, (unsigned int *)&v44);
        unint64_t v37 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v49 = 1024;
        int v50 = 306;
        __int16 v51 = 1024;
        int v52 = v36;
        __int16 v53 = 2080;
        unsigned __int16 v54 = v37;
        _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Internal configuration change request to restart %u normal IO proc(s) on VAD: '%s'.", buf, 0x22u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      (*(void (**)(atomic_ullong *, void))(*a1 + 560))(a1, 0);
      goto LABEL_43;
    }
  }
  else if (!v12)
  {
    goto LABEL_43;
  }
  uint64_t v18 = sub_32A48(1);
  uint64_t v19 = sub_32A48(31);
  char v20 = 0;
  uint64_t v21 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v22 = *(void *)(v18 + 8);
  while (1)
  {
    uint64_t v23 = *(int *)&buf[4 * v21];
    char v24 = v20;
    if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
      break;
    }
    char v20 = 1;
    uint64_t v21 = 1;
    if (v24) {
      goto LABEL_21;
    }
  }
  if ((v22 & v23) == 0) {
    uint64_t v18 = v19;
  }
LABEL_21:
  __int16 v25 = *(NSObject **)v18;
  if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    int v26 = *(_DWORD *)(a1[58] + 116);
    atomic_ullong v44 = a1[72];
    sub_4D60(&__p, (unsigned int *)&v44);
    int v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    __int16 v49 = 1024;
    int v50 = 297;
    __int16 v51 = 1024;
    int v52 = v26;
    __int16 v53 = 2080;
    unsigned __int16 v54 = v27;
    _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Internal configuration change request to restart %u null IO proc(s) on VAD: '%s'.", buf, 0x22u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  (*(void (**)(atomic_ullong *, uint64_t))(*a1 + 560))(a1, 1);
  if (*(_DWORD *)(a1[58] + 112)) {
    goto LABEL_29;
  }
LABEL_43:
  sub_B8680(&v46);
  if (a5) {
    operator new();
  }
  __p.__r_.__value_.__r.__words[0] = 0;
  uint64_t result = (unsigned char *)a1[79];
  if (result) {
    goto LABEL_50;
  }
  double v39 = (os_log_t *)sub_32A48(1);
  int v40 = *v39;
  if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    __int16 v49 = 1024;
    int v50 = 326;
    _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d mPropertyManager is NULL", buf, 0x12u);
  }
  uint64_t result = (unsigned char *)a1[79];
  if (result) {
LABEL_50:
  }
    uint64_t result = sub_D0424((uint64_t)result, a2);
  *((unsigned char *)a1 + 1072) = 0;
  return result;
}

void sub_B8518(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, long long buf, long long a19)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    char v20 = (os_log_t *)sub_32A48(1);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
    {
      a9 = *(void *)(v19 + 576);
      sub_4D60((std::string *)&__p, (unsigned int *)&a9);
      if (a15 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 314;
      WORD1(a19) = 2080;
      *(void *)((char *)&a19 + 4) = p_p;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Failed to restart IOProc on VAD: '%s'.", (uint8_t *)&buf, 0x1Cu);
      if (a15 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0xB8348);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_B8680(unsigned char *a1)
{
  if (a1[8]) {
    sub_B3DBC((atomic_ullong *)(*(void *)a1 + 648));
  }
  return a1;
}

unsigned char *sub_B86BC(unsigned char **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_52380(result);
    operator delete();
  }
  return result;
}

uint64_t sub_B870C(uint64_t a1, char *a2)
{
  *a2 = 0;
  uint64_t v4 = pthread_self();
  if (pthread_equal(v4, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 104), memory_order_acquire)))
  {
    char v5 = 0;
    goto LABEL_3;
  }
  uint64_t result = sub_AED38(a1, a2);
  if (result)
  {
    if ((sub_AED38(a1 + 88, a2) & 1) == 0)
    {
      sub_3A944(a1);
      char v5 = 0;
      uint64_t result = 0;
      goto LABEL_4;
    }
    char v5 = 1;
LABEL_3:
    uint64_t result = 1;
LABEL_4:
    *a2 = v5;
  }
  return result;
}

uint64_t sub_B8790(std::string::size_type a1, int a2, int a3)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    double v57 = (os_log_t *)sub_32A48(13);
    char v58 = *v57;
    if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 178;
      _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v6 = pthread_self();
  int v7 = pthread_equal(v6, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 664), memory_order_acquire));
  if (a2)
  {
    if (v7
      || (uint64_t v8 = pthread_self(),
          pthread_equal(v8, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 752), memory_order_acquire))))
    {
      uint64_t v9 = (os_log_t *)sub_32A48(13);
      BOOL v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 187;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
      }
      atomic_ullong v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v11, "Precondition failure.");
    }
  }
  else if (!v7)
  {
    int v12 = pthread_self();
    if (!pthread_equal(v12, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 752), memory_order_acquire)))
    {
      uint64_t v60 = (os_log_t *)sub_32A48(13);
      int v61 = *v60;
      if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 189;
        _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      os_log_t v62 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v62, "Precondition failure.");
    }
  }
  *(unsigned char *)(a1 + 1072) = 1;
  int v13 = std::uncaught_exceptions();
  uint64_t v14 = *(void *)(a1 + 632);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 16);
    __p.__r_.__value_.__r.__words[0] = v14 + 16;
    int v63 = v13;
    __p.__r_.__value_.__s.__data_[8] = (*(uint64_t (**)(void))(v15 + 16))();
    if (*(void *)(v14 + 256))
    {
      int v16 = (os_log_t *)sub_32A48(1);
      __int16 v17 = *v16;
      if (*v16)
      {
        if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
        {
          std::to_string(&v71, *(void *)(v14 + 256));
          uint64_t v18 = (v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v71
              : (std::string *)v71.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 420;
          __int16 v69 = 2080;
          v70[0] = v18;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Found %s stale property caches (expected 0)", buf, 0x1Cu);
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v71.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    sub_D0294(v14 + 240);
    sub_CF9AC((uint64_t *)buf, v14);
    for (uint64_t i = *(void *)&buf[8]; buf != (unsigned char *)i; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v20 = *(void *)(i + 16);
      if (!v20)
      {
        uint64_t v21 = (os_log_t *)sub_32A48(13);
        uint64_t v22 = *v21;
        if (*v21)
        {
          if (os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v71.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v71.__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_DevicePropertyManager.cpp";
            WORD2(v71.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v71.__r_.__value_.__r.__words[1] + 6) = 428;
            _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"A property cache is NULL\"", (uint8_t *)&v71, 0x12u);
          }
        }
      }
      v71.__r_.__value_.__r.__words[0] = *(void *)(v20 + 8);
      v71.__r_.__value_.__s.__data_[8] = (*(uint64_t (**)(std::string::size_type))(*(void *)v71.__r_.__value_.__l.__data_
                                                                                           + 16))(v71.__r_.__value_.__r.__words[0]);
      *(unsigned char *)(v20 + 48) = 1;
      sub_3BCAC(&v71);
    }
    sub_45F50(buf);
    sub_3BCAC(&__p);
    int v13 = v63;
  }
  int v66 = std::uncaught_exceptions();
  std::string::size_type v67 = a1;
  if (a2) {
    sub_B3FB4(a1 + 648);
  }
  LODWORD(v71.__r_.__value_.__l.__data_) = std::uncaught_exceptions();
  v71.__r_.__value_.__l.__size_ = a1;
  v71.__r_.__value_.__s.__data_[16] = a2;
  if (*(void *)(a1 + 1008))
  {
    uint64_t v23 = *(void *)(a1 + 464);
    if (a3)
    {
      if (*(_DWORD *)(v23 + 112) || *(_DWORD *)(v23 + 116))
      {
        uint64_t v24 = sub_32A48(1);
        uint64_t v25 = sub_32A48(31);
        char v26 = 0;
        uint64_t v27 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v28 = *(void *)(v24 + 8);
        while (1)
        {
          uint64_t v29 = *(int *)&buf[4 * v27];
          char v30 = v26;
          if (((v28 & v29) != 0) != ((*(void *)(v25 + 8) & v29) != 0)) {
            break;
          }
          char v26 = 1;
          uint64_t v27 = 1;
          if (v30) {
            goto LABEL_45;
          }
        }
        if ((v28 & v29) == 0) {
          uint64_t v24 = v25;
        }
LABEL_45:
        uint64_t v38 = *(NSObject **)v24;
        if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v39 = *(void *)(a1 + 464);
          uint64_t v41 = *(void *)(v39 + 8);
          uint64_t v40 = *(void *)(v39 + 16);
          uint64_t v64 = *(void *)(a1 + 576);
          sub_4D60(&__p, (unsigned int *)&v64);
          uint64_t v42 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 229;
          __int16 v69 = 1024;
          LODWORD(v70[0]) = (unint64_t)(v40 - v41) >> 3;
          WORD2(v70[0]) = 2080;
          *(void *)((char *)v70 + 6) = v42;
          _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Internal configuration change request to stop %d IO proc(s) on VAD: '%s'.", buf, 0x22u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        (*(void (**)(std::string::size_type))(*(void *)a1 + 400))(a1);
      }
    }
    else
    {
      if (*(_DWORD *)(v23 + 116))
      {
        uint64_t v31 = sub_32A48(1);
        uint64_t v32 = sub_32A48(31);
        char v33 = 0;
        uint64_t v34 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v35 = *(void *)(v31 + 8);
        while (1)
        {
          uint64_t v36 = *(int *)&buf[4 * v34];
          char v37 = v33;
          if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
            break;
          }
          char v33 = 1;
          uint64_t v34 = 1;
          if (v37) {
            goto LABEL_55;
          }
        }
        if ((v35 & v36) == 0) {
          uint64_t v31 = v32;
        }
LABEL_55:
        char v43 = *(NSObject **)v31;
        if (v43 && os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          int v44 = *(_DWORD *)(*(void *)(a1 + 464) + 116);
          uint64_t v64 = *(void *)(a1 + 576);
          sub_4D60(&__p, (unsigned int *)&v64);
          uint64_t v45 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 241;
          __int16 v69 = 1024;
          LODWORD(v70[0]) = v44;
          WORD2(v70[0]) = 2080;
          *(void *)((char *)v70 + 6) = v45;
          _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Internal configuration change request to stop %u null IO proc(s) on VAD: '%s'.", buf, 0x22u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        (*(void (**)(std::string::size_type, uint64_t))(*(void *)a1 + 576))(a1, 1);
        uint64_t v23 = *(void *)(a1 + 464);
      }
      if (*(_DWORD *)(v23 + 112))
      {
        uint64_t v46 = sub_32A48(1);
        uint64_t v47 = sub_32A48(31);
        char v48 = 0;
        uint64_t v49 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v50 = *(void *)(v46 + 8);
        while (1)
        {
          uint64_t v51 = *(int *)&buf[4 * v49];
          char v52 = v48;
          if (((v50 & v51) != 0) != ((*(void *)(v47 + 8) & v51) != 0)) {
            break;
          }
          char v48 = 1;
          uint64_t v49 = 1;
          if (v52) {
            goto LABEL_70;
          }
        }
        if ((v50 & v51) == 0) {
          uint64_t v46 = v47;
        }
LABEL_70:
        __int16 v53 = *(NSObject **)v46;
        if (v53 && os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          int v54 = *(_DWORD *)(*(void *)(a1 + 464) + 112);
          uint64_t v64 = *(void *)(a1 + 576);
          sub_4D60(&__p, (unsigned int *)&v64);
          int v55 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 250;
          __int16 v69 = 1024;
          LODWORD(v70[0]) = v54;
          WORD2(v70[0]) = 2080;
          *(void *)((char *)v70 + 6) = v55;
          _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Internal configuration change request to stop %u normal IO proc(s) on VAD: '%s'.", buf, 0x22u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        (*(void (**)(std::string::size_type, void))(*(void *)a1 + 576))(a1, 0);
      }
    }
  }
  sub_B92B4((uint64_t)&v71);
  sub_B9300((uint64_t)&v66);
  uint64_t result = std::uncaught_exceptions();
  if ((int)result > v13) {
    *(unsigned char *)(a1 + 1072) = 0;
  }
  return result;
}

void sub_B9118(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,long long buf,long long a23)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    uint64_t v24 = (os_log_t *)sub_32A48(1);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      a13 = *(void *)(v23 + 576);
      sub_4D60((std::string *)&__p, (unsigned int *)&a13);
      if (a19 >= 0) {
        p_p = (void **)&__p;
      }
      else {
        p_p = __p;
      }
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 258;
      WORD1(a23) = 2080;
      *(void *)((char *)&a23 + 4) = p_p;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Stopping IOProc on VirtualAudio_Device: VAD: '%s' FAILED.", (uint8_t *)&buf, 0x1Cu);
      if (a19 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0xB8F6CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_B92B4(uint64_t a1)
{
  if (std::uncaught_exceptions() > *(_DWORD *)a1 && *(unsigned char *)(a1 + 16)) {
    sub_B3DBC((atomic_ullong *)(*(void *)(a1 + 8) + 648));
  }
  return a1;
}

uint64_t sub_B9300(uint64_t a1)
{
  if (std::uncaught_exceptions() > *(_DWORD *)a1)
  {
    uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 632);
    if (v2)
    {
      memset(v4, 0, sizeof(v4));
      sub_D0424(v2, v4);
      char v5 = (void **)v4;
      sub_EE3E4(&v5);
    }
  }
  return a1;
}

void sub_B9368(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_EE3E4((void ***)va);
  sub_564E4(a1);
}

void sub_B9380()
{
}

void sub_B93BC(BOOL *a1, uint64_t a2, double a3)
{
  (*(void (**)(double **__return_ptr))(**(void **)(a2 + 1008) + 184))(&v17);
  double v16 = 0.0;
  sub_21FCE4(&v17, &v16);
  double v6 = v16;
  if (v16 == a3) {
    sub_B9E64((uint64_t)v15, &v17);
  }
  else {
    (*(void (**)(void *__return_ptr, double))(**(void **)(a2 + 1008) + 192))(v15, a3);
  }
  if (v6 == a3) {
    goto LABEL_27;
  }
  if (v18[1] != (void *)v15[2])
  {
    BOOL v10 = 1;
    goto LABEL_29;
  }
  int v7 = v17;
  if (v17 == (double *)v18)
  {
LABEL_27:
    BOOL v10 = 0;
  }
  else
  {
    uint64_t v8 = (double *)v15[0];
    while (1)
    {
      BOOL v9 = v7[5] == v8[5] && *((void *)v7 + 4) == *((void *)v8 + 4);
      BOOL v10 = !v9;
      if (!v9) {
        break;
      }
      atomic_ullong v11 = (double *)*((void *)v7 + 1);
      int v12 = v7;
      if (v11)
      {
        do
        {
          int v7 = v11;
          atomic_ullong v11 = *(double **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v7 = (double *)*((void *)v12 + 2);
          BOOL v9 = *(void *)v7 == (void)v12;
          int v12 = v7;
        }
        while (!v9);
      }
      int v13 = (double *)*((void *)v8 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          int v13 = *(double **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (double *)*((void *)v8 + 2);
          BOOL v9 = *(void *)v14 == (void)v8;
          uint64_t v8 = v14;
        }
        while (!v9);
      }
      uint64_t v8 = v14;
      if (v7 == (double *)v18) {
        goto LABEL_27;
      }
    }
  }
LABEL_29:
  *a1 = v10;
  sub_B9E64((uint64_t)(a1 + 8), v15);
  sub_463E0((void *)v15[1]);
  sub_463E0(v18[0]);
}

void sub_B9560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void sub_B9584(uint64_t a1, uint64_t a2)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1383;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  memset(buf, 0, sizeof(buf));
  sub_B77D4(v16, a1);
  uint64_t v4 = pthread_self();
  if (!pthread_equal(v4, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 664), memory_order_acquire)))
  {
    char v5 = pthread_self();
    if (!pthread_equal(v5, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 752), memory_order_acquire)))
    {
      int v13 = (os_log_t *)sub_32A48(13);
      uint64_t v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int16 v17 = 136315394;
        *(void *)&v17[4] = "VirtualAudio_Device.cpp";
        __int16 v18 = 1024;
        int v19 = 1391;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", v17, 0x12u);
      }
      uint64_t v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v15, "Invariant failure.");
    }
  }
  int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 1008) + 200))(*(void *)(a1 + 1008), a2);
  if (v6)
  {
    BOOL v10 = (os_log_t *)sub_32A48(13);
    atomic_ullong v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int16 v17 = 136315394;
      *(void *)&v17[4] = "VirtualAudio_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 1408;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"error setting the sample rate on the underlying device\"", v17, 0x12u);
    }
    int v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v12 = &off_6414D8;
    v12[2] = v6;
  }
  sub_B9928((uint64_t *)a1, (uint64_t *)buf);
  sub_B9CE8(a1);
  sub_D075C(*(void *)(a1 + 632), (uint64_t *)buf);
  sub_B7980((atomic_ullong *)a1, (uint64_t *)buf);
  sub_B7D50(v16);
  *(void *)__int16 v17 = buf;
  sub_EE3E4((void ***)v17);
}

void sub_B98C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  sub_B7D50(&a9);
  a11 = &a15;
  sub_EE3E4((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_B9928(uint64_t *a1, uint64_t *a2)
{
  if (((a1[63] - a1[62]) & 0x7FFFFFFF8) == 0 && ((a1[66] - a1[65]) & 0x7FFFFFFF8) == 0)
  {
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v27 = "VirtualAudio_Device.cpp";
      __int16 v28 = 1024;
      int v29 = 4327;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    __int16 v17 = (os_log_t *)sub_32A48(13);
    __int16 v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v27 = "VirtualAudio_Device.cpp";
      __int16 v28 = 1024;
      int v29 = 4328;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "Precondition failure.");
  }
  uint64_t v4 = pthread_self();
  if (!pthread_equal(v4, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire)))
  {
    char v5 = pthread_self();
    if (!pthread_equal(v5, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire)))
    {
      uint64_t v23 = (os_log_t *)sub_32A48(13);
      uint64_t v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        uint64_t v27 = "VirtualAudio_Device.cpp";
        __int16 v28 = 1024;
        int v29 = 4329;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      uint64_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v25, "Precondition failure.");
    }
  }
  char v6 = 1;
  do
  {
    char v7 = v6;
    BOOL v8 = (v6 & 1) == 0;
    if (v6) {
      uint64_t v9 = 63;
    }
    else {
      uint64_t v9 = 66;
    }
    if (v6) {
      BOOL v10 = a1 + 63;
    }
    else {
      BOOL v10 = a1 + 66;
    }
    if (v8) {
      uint64_t v11 = 65;
    }
    else {
      uint64_t v11 = 62;
    }
    if (v8) {
      int v12 = a1 + 65;
    }
    else {
      int v12 = a1 + 62;
    }
    uint64_t v13 = *v10;
    uint64_t v14 = *v12;
    if (((v13 - *v12) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v15 = 0;
      do
      {
        if (v15 >= (v12[1] - v14) >> 3) {
          uint64_t v16 = 0;
        }
        else {
          uint64_t v16 = *(void *)(v14 + 8 * v15);
        }
        sub_EC9B0(v16, a1[126], v15++, a2);
        uint64_t v14 = a1[v11];
      }
      while (v15 < ((unint64_t)(a1[v9] - v14) >> 3));
    }
    char v6 = 0;
  }
  while ((v7 & 1) != 0);
}

void sub_B9CC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_B9CE8(uint64_t a1)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    long long v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 136315394;
      *(void *)&v6[1] = "VirtualAudio_Device.cpp";
      __int16 v7 = 1024;
      int v8 = 4005;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_B1470(a1);
  uint64_t result = *(unsigned char **)(a1 + 632);
  if (result)
  {
    strcpy((char *)v6, "zisfbolg");
    BYTE1(v6[2]) = 0;
    HIWORD(v6[2]) = 0;
    return sub_CFDA4((uint64_t)result, a1, v6, a1 + 488);
  }
  return result;
}

void sub_B9E48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_B9E64(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  long long v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  char v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      char v6 = v5 + 4;
      __int16 v7 = *(uint64_t **)(a1 + 8);
      int v8 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v9 = *(void **)(a1 + 8);
      BOOL v10 = v3;
      if (v7)
      {
        do
        {
          int v8 = v9;
          uint64_t v9 = (void *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          int v8 = (void *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          BOOL v10 = v8;
        }
        while (v11);
      }
      unint64_t v12 = *v6;
      if (v8[4] < *v6)
      {
LABEL_8:
        if (v7) {
          uint64_t v13 = (uint64_t **)v8;
        }
        else {
          uint64_t v13 = (uint64_t **)v3;
        }
        if (v7) {
          uint64_t v14 = (uint64_t **)(v8 + 1);
        }
        else {
          uint64_t v14 = (uint64_t **)v3;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t **)v3;
        uint64_t v14 = (uint64_t **)v3;
        if (v7)
        {
          uint64_t v14 = (uint64_t **)v3;
          while (1)
          {
            while (1)
            {
              uint64_t v13 = (uint64_t **)v7;
              unint64_t v18 = v7[4];
              if (v12 >= v18) {
                break;
              }
              __int16 v7 = *v13;
              uint64_t v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }
            if (v18 >= v12) {
              break;
            }
            uint64_t v14 = v13 + 1;
            __int16 v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_15:
        unint64_t v15 = (uint64_t *)operator new(0x30uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)v6;
        sub_46CA8((uint64_t **)a1, (uint64_t)v13, v14, v15);
      }
      uint64_t v16 = (void *)v5[1];
      if (v16)
      {
        do
        {
          __int16 v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          __int16 v17 = (void *)v5[2];
          BOOL v11 = *v17 == (void)v5;
          char v5 = v17;
        }
        while (!v11);
      }
      char v5 = v17;
    }
    while (v17 != v4);
  }
  return a1;
}

void sub_B9FD4(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void sub_B9FE8(uint64_t **a1, void *a2, AudioObjectPropertyScope a3)
{
  if (sub_B70B8(a2[65], a2[66]))
  {
    uint64_t v6 = a2[126];
    strcpy(buf, "rrapbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v7 = sub_99A40(v6);
    *((void *)&v9 + 1) = v8;
    *(void *)&long long v9 = v7;
    BOOL v10 = ((v9 >> 32) & 0xFF00000000) == 0 || HIDWORD(v7) == 0;
    if (v10 || (_os_feature_enabled_impl() & 1) == 0)
    {
      *(int64x2_t *)AudioObjectPropertyAddress buf = vdupq_n_s64(0x40E7700000000000uLL);
      sub_BAC60((uint64_t)a1, (double *)buf, 1);
      return;
    }
  }
  if (a2[78])
  {
    *(void *)AudioObjectPropertyAddress buf = (*(double (**)(void))(*(void *)a2[126] + 104))(a2[126]);
    *(void *)&buf[8] = *(void *)buf;
    sub_BAC60((uint64_t)a1, (double *)buf, 1);
    return;
  }
  a1[1] = 0;
  BOOL v11 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  AudioObjectPropertyScope v116 = a3;
  if (a3 == 1869968496)
  {
    unint64_t v12 = operator new(1uLL);
    unsigned char *v12 = 1;
    uint64_t v13 = v12 + 1;
  }
  else
  {
    if (a3 != 1768845428)
    {
      unint64_t v12 = operator new(2uLL);
      *(_WORD *)unint64_t v12 = 256;
      uint64_t v117 = v12 + 2;
      goto LABEL_16;
    }
    unint64_t v12 = operator new(1uLL);
    unsigned char *v12 = 0;
    uint64_t v13 = v12 + 1;
  }
  uint64_t v117 = v13;
LABEL_16:
  unint64_t v120 = a1;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = a2[66];
  uint64_t v19 = a2[62];
  uint64_t v18 = a2[63];
  uint64_t v20 = a2[65];
  std::string __p = v12;
  uint64_t v118 = a1 + 1;
  do
  {
    uint64_t v119 = v12;
    int v21 = *v12;
    if (*v12) {
      uint64_t v22 = v17;
    }
    else {
      uint64_t v22 = v18;
    }
    if (*v12) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = v19;
    }
    if (((v22 - v23) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v24 = 0;
      if (*v12) {
        uint64_t v25 = a2 + 65;
      }
      else {
        uint64_t v25 = a2 + 62;
      }
      do
      {
        if (v24 < (uint64_t)(v25[1] - *v25) >> 3)
        {
          uint64_t v26 = *(void *)(*v25 + 8 * v24);
          if (v26)
          {
            if (v15 >= v16)
            {
              uint64_t v28 = (v15 - v14) >> 3;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 61) {
                sub_60548();
              }
              if ((v16 - v14) >> 2 > v29) {
                unint64_t v29 = (v16 - v14) >> 2;
              }
              if ((unint64_t)(v16 - v14) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v29;
              }
              if (v30)
              {
                if (v30 >> 61) {
                  sub_60560();
                }
                uint64_t v31 = (char *)operator new(8 * v30);
              }
              else
              {
                uint64_t v31 = 0;
              }
              uint64_t v32 = &v31[8 * v28];
              *(void *)uint64_t v32 = v26;
              uint64_t v27 = v32 + 8;
              while (v15 != v14)
              {
                uint64_t v33 = *((void *)v15 - 1);
                v15 -= 8;
                *((void *)v32 - 1) = v33;
                v32 -= 8;
              }
              uint64_t v16 = &v31[8 * v30];
              if (v14) {
                operator delete(v14);
              }
              uint64_t v14 = v32;
              BOOL v11 = v118;
            }
            else
            {
              *(void *)unint64_t v15 = v26;
              uint64_t v27 = v15 + 8;
            }
            uint64_t v17 = a2[66];
            uint64_t v19 = a2[62];
            uint64_t v18 = a2[63];
            unint64_t v15 = v27;
            uint64_t v20 = a2[65];
          }
        }
        ++v24;
        if (v21) {
          uint64_t v34 = v17;
        }
        else {
          uint64_t v34 = v18;
        }
        if (v21) {
          uint64_t v35 = v20;
        }
        else {
          uint64_t v35 = v19;
        }
      }
      while (v24 < ((unint64_t)(v34 - v35) >> 3));
    }
    unint64_t v12 = v119 + 1;
  }
  while (v119 + 1 != v117);
  operator delete(__p);
  if (v14 != v15)
  {
    uint64_t v36 = v14;
    do
    {
      unsigned int v37 = 0;
      uint64_t v38 = *(void *)v36;
      while (v37 < sub_1E4D24(*(void *)(v38 + 104)))
      {
        sub_1E4D88(*(void *)(v38 + 104), v37, outData);
        uint64_t v39 = outData[0];
        if (!sub_1E3934(*(void *)(v38 + 104), *(double *)outData))
        {
          uint64_t v40 = (os_log_t *)sub_32A48(13);
          uint64_t v41 = *v40;
          if (*v40)
          {
            if (os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4186;
              _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Stream does not support its own sample rate minimum.\"", buf, 0x12u);
            }
          }
        }
        if (!sub_1E3934(*(void *)(v38 + 104), *(double *)&outData[1]))
        {
          uint64_t v42 = (os_log_t *)sub_32A48(13);
          char v43 = *v42;
          if (*v42)
          {
            if (os_log_type_enabled(*v42, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4187;
              _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Stream does not support its own sample rate maximum.\"", buf, 0x12u);
            }
          }
        }
        int v44 = *v11;
        uint64_t v45 = v11;
        uint64_t v46 = v11;
        if (*v11)
        {
          while (1)
          {
            while (1)
            {
              uint64_t v46 = (uint64_t **)v44;
              double v47 = *((double *)v44 + 4);
              if (*(double *)&v39 >= v47) {
                break;
              }
              int v44 = (uint64_t *)*v44;
              uint64_t v45 = v46;
              if (!*v46) {
                goto LABEL_75;
              }
            }
            if (v47 >= *(double *)&v39) {
              break;
            }
            int v44 = (uint64_t *)v44[1];
            if (!v44)
            {
              uint64_t v45 = v46 + 1;
              goto LABEL_75;
            }
          }
        }
        else
        {
LABEL_75:
          char v48 = (uint64_t *)operator new(0x30uLL);
          *((_OWORD *)v48 + 2) = *(_OWORD *)outData;
          sub_46CA8(v120, (uint64_t)v46, v45, v48);
        }
        ++v37;
      }
      v36 += 8;
    }
    while (v36 != v15);
  }
  uint64_t v49 = a2[126];
  if (!v49) {
    goto LABEL_177;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 1853059619;
  *(_DWORD *)&uint8_t buf[4] = v116;
  *(_DWORD *)&buf[8] = 0;
  unsigned int v50 = (*(uint64_t (**)(uint64_t, unsigned char *, void, void))(*(void *)v49 + 32))(v49, buf, 0, 0);
  unsigned int v51 = v50;
  if (v50 >= 0x10)
  {
    unint64_t v55 = v50 >> 4;
    char v52 = (double *)sub_10724(v55);
    int v54 = (char *)&v52[2 * v56];
    bzero(v52, 16 * v55);
    __int16 v53 = &v52[2 * v55];
  }
  else
  {
    char v52 = 0;
    __int16 v53 = 0;
    int v54 = 0;
  }
  unsigned int v121 = v51 & 0xFFFFFFF0;
  uint64_t v57 = a2[126];
  *(_DWORD *)AudioObjectPropertyAddress buf = 1853059619;
  *(_DWORD *)&uint8_t buf[4] = v116;
  *(_DWORD *)&buf[8] = 0;
  (*(void (**)(uint64_t, unsigned char *, void, void, unsigned int *, double *))(*(void *)v57 + 40))(v57, buf, 0, 0, &v121, v52);
  uint64_t v58 = *(void *)(a2[126] + 312);
  if ((v58 & 0xFF00000000) != 0)
  {
    inAddress.int mSelector = 1853059619;
    inAddress.AudioObjectPropertyScope mScope = v116;
    inAddress.AudioObjectPropertyElement mElement = 0;
    if (AudioObjectHasProperty(v58, &inAddress))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 2003329396;
      buf[8] = 0;
      unsigned __int8 v128 = 0;
      UInt32 v59 = sub_26E94(v58, &inAddress, 0, 0);
      UInt32 ioDataSize = v59;
      if (v59)
      {
        sub_739F0(outData, v59 >> 4);
        *(_DWORD *)AudioObjectPropertyAddress buf = AudioObjectGetPropertyData(v58, &inAddress, 0, 0, &ioDataSize, outData[0]);
        if (*(_DWORD *)buf)
        {
          int v60 = 0;
          LOBYTE(v122) = 0;
        }
        else
        {
          os_log_t v62 = sub_A2A10((void **)&buf[8], (const void **)outData);
          LOBYTE(v122) = 0;
          if (v128)
          {
            long long v122 = *(_OWORD *)&buf[8];
            v62[1] = 0;
            v62[2] = 0;
            *os_log_t v62 = 0;
            int v60 = 1;
          }
          else
          {
            int v60 = 0;
          }
        }
        int v63 = v60;
        if (outData[0])
        {
          outData[1] = outData[0];
          operator delete(outData[0]);
          int v63 = v128;
        }
        if (v63 && *(void *)&buf[8])
        {
          *(void *)&buf[16] = *(void *)&buf[8];
          operator delete(*(void **)&buf[8]);
        }
        if (!v60) {
          goto LABEL_140;
        }
        int v61 = (char *)v122;
      }
      else
      {
        int v61 = 0;
        long long v122 = 0uLL;
      }
      uint64_t v64 = *((void *)&v122 + 1);
      int v65 = (os_log_t *)sub_32A48(17);
      int v66 = *v65;
      if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4210;
        _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_DEBUG, "%25s:%-5d VAD uses an external clock device", buf, 0x12u);
      }
      if (v64 - (uint64_t)v61 >= 1)
      {
        uint64_t v67 = (v64 - (uint64_t)v61) >> 4;
        uint64_t v68 = (char *)v53 - (char *)v52;
        __int16 v69 = (char *)v52 + (((char *)v53 - (char *)v52) & 0xFFFFFFFFFFFFFFF0);
        if (v67 > (v54 - (char *)v53) >> 4)
        {
          uint64_t v70 = v68 >> 4;
          unint64_t v71 = (v68 >> 4) + v67;
          if (v71 >> 60) {
            sub_60548();
          }
          if ((v54 - (char *)v52) >> 3 > v71) {
            unint64_t v71 = (v54 - (char *)v52) >> 3;
          }
          if ((unint64_t)(v54 - (char *)v52) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v72 = v71;
          }
          if (v72) {
            unint64_t v72 = (unint64_t)sub_10724(v72);
          }
          uint64_t v73 = (_OWORD *)(v72 + 16 * v70);
          uint64_t v74 = (char *)&v73[v67];
          uint64_t v75 = 16 * v67;
          char v76 = v73;
          BOOL v77 = (long long *)v61;
          do
          {
            long long v78 = *v77++;
            *v76++ = v78;
            v75 -= 16;
          }
          while (v75);
          if (v53 != v52)
          {
            uint64_t v79 = 2 * v70;
            do
            {
              *(_OWORD *)(v72 + v79 * 8 - 16) = *(_OWORD *)&v52[v79 - 2];
              v79 -= 2;
            }
            while (v79 * 8);
            uint64_t v73 = (_OWORD *)v72;
          }
          if (v53 != (double *)v69)
          {
            int v80 = v74;
            memmove(v74, (char *)v52 + (((char *)v53 - (char *)v52) & 0xFFFFFFFFFFFFFFF0), (char *)v53 - v69);
            uint64_t v74 = v80;
          }
          uint64_t v81 = (double *)&v74[(char *)v53 - v69];
          if (v52) {
            operator delete(v52);
          }
          char v52 = (double *)v73;
          goto LABEL_137;
        }
        uint64_t v82 = ((char *)v53 - v69) >> 4;
        if (v82 >= v67)
        {
          CFTypeRef v83 = &v61[16 * v67];
          std::string::size_type v85 = (char *)v53;
        }
        else
        {
          CFTypeRef v83 = &v61[16 * v82];
          size_t v84 = v64 - (void)v83;
          if (v84) {
            memmove(v53, &v61[16 * v82], v84);
          }
          std::string::size_type v85 = (char *)v53 + v84;
          if ((char *)v53 - v69 < 1)
          {
            uint64_t v81 = (double *)((char *)v53 + v84);
            BOOL v11 = v118;
            goto LABEL_137;
          }
        }
        BOOL v11 = v118;
        int v86 = &v69[16 * v67];
        uint64_t v87 = &v85[-16 * v67];
        uint64_t v81 = (double *)v85;
        if (v87 < (char *)v53)
        {
          uint64_t v81 = (double *)v85;
          do
          {
            long long v88 = *(_OWORD *)v87;
            v87 += 16;
            *(_OWORD *)uint64_t v81 = v88;
            v81 += 2;
          }
          while (v87 < (char *)v53);
        }
        if (v85 != v86) {
          memmove(&v85[-16 * ((v85 - v86) >> 4)], (char *)v52 + (((char *)v53 - (char *)v52) & 0xFFFFFFFFFFFFFFF0), v85 - v86);
        }
        if (v83 != v61) {
          memmove((char *)v52 + (((char *)v53 - (char *)v52) & 0xFFFFFFFFFFFFFFF0), v61, v83 - v61);
        }
        goto LABEL_137;
      }
      uint64_t v81 = v53;
LABEL_137:
      if (v61) {
        operator delete(v61);
      }
      __int16 v53 = v81;
      goto LABEL_140;
    }
    LOBYTE(v122) = 0;
  }
LABEL_140:
  outData[1] = 0;
  uint64_t v125 = 0;
  outData[0] = &outData[1];
  if (v52 == v53)
  {
    double v90 = &outData[1];
  }
  else
  {
    __n128 v89 = v52;
    do
    {
      sub_BACDC((uint64_t **)outData, (uint64_t *)&outData[1], v89, *v89);
      v89 += 2;
    }
    while (v89 != v53);
    double v90 = (void **)outData[0];
  }
  *(void *)&buf[8] = 0;
  *(void *)&buf[16] = 0;
  *(void *)AudioObjectPropertyAddress buf = &buf[8];
  int v91 = *v120;
  if (*v120 != (uint64_t *)v11 && v90 != &outData[1])
  {
    uint64_t v93 = (uint64_t *)&buf[8];
    do
    {
      double v94 = *((double *)v91 + 4);
      double v95 = *((double *)v90 + 4);
      if (v94 >= v95)
      {
        if (v95 >= v94)
        {
          uint64_t v98 = sub_BACDC((uint64_t **)buf, v93, (_OWORD *)v91 + 2, v94);
          char v99 = (uint64_t *)v98[1];
          if (v99)
          {
            do
            {
              uint64_t v93 = v99;
              char v99 = (uint64_t *)*v99;
            }
            while (v99);
          }
          else
          {
            do
            {
              uint64_t v93 = (uint64_t *)v98[2];
              BOOL v10 = *v93 == (void)v98;
              uint64_t v98 = v93;
            }
            while (!v10);
          }
          unint64_t v100 = (uint64_t *)v91[1];
          if (v100)
          {
            do
            {
              int v91 = v100;
              unint64_t v100 = (uint64_t *)*v100;
            }
            while (v100);
          }
          else
          {
            do
            {
              int v101 = v91;
              int v91 = (uint64_t *)v91[2];
            }
            while ((uint64_t *)*v91 != v101);
          }
        }
        std::string::size_type v102 = (void **)v90[1];
        if (v102)
        {
          do
          {
            double v90 = v102;
            std::string::size_type v102 = (void **)*v102;
          }
          while (v102);
        }
        else
        {
          do
          {
            int v103 = v90;
            double v90 = (void **)v90[2];
          }
          while (*v90 != v103);
        }
      }
      else
      {
        uint64_t v96 = (uint64_t *)v91[1];
        if (v96)
        {
          do
          {
            int v91 = v96;
            uint64_t v96 = (uint64_t *)*v96;
          }
          while (v96);
        }
        else
        {
          do
          {
            uint64_t v97 = v91;
            int v91 = (uint64_t *)v91[2];
          }
          while ((uint64_t *)*v91 != v97);
        }
      }
    }
    while (v91 != (uint64_t *)v11 && v90 != &outData[1]);
  }
  sub_463E0(v120[1]);
  CFTypeID v104 = *(uint64_t **)&buf[8];
  NSObject *v120 = *(uint64_t **)buf;
  v120[1] = v104;
  uint64_t v105 = *(void *)&buf[16];
  v120[2] = *(uint64_t **)&buf[16];
  if (v105)
  {
    v104[2] = (uint64_t)v11;
    *(void *)AudioObjectPropertyAddress buf = &buf[8];
    *(void *)&buf[8] = 0;
    *(void *)&buf[16] = 0;
    CFTypeID v104 = 0;
  }
  else
  {
    NSObject *v120 = (uint64_t *)v11;
  }
  sub_463E0(v104);
  sub_463E0((void *)outData[1]);
  if (v52) {
    operator delete(v52);
  }
LABEL_177:
  int v106 = *v120;
  if (*v120 != (uint64_t *)v11)
  {
    do
    {
      std::string::size_type v107 = v14;
      if (v14 == v15)
      {
LABEL_182:
        uint64_t v109 = (uint64_t *)v106[1];
        __int16 v110 = (uint64_t *)v118;
        if (v109)
        {
          do
          {
            CFIndex v111 = v109;
            uint64_t v109 = (uint64_t *)*v109;
          }
          while (v109);
        }
        else
        {
          do
          {
            CFIndex v111 = (uint64_t *)v106[2];
            BOOL v10 = *v111 == (void)v106;
            int v106 = v111;
          }
          while (!v10);
        }
      }
      else
      {
        while (1)
        {
          uint64_t v108 = *(void *)v107;
          if (!sub_1E3934(*(void *)(*(void *)v107 + 104), *((double *)v106 + 4))
            || !sub_1E3934(*(void *)(v108 + 104), *((double *)v106 + 5)))
          {
            break;
          }
          v107 += 8;
          if (v107 == v15) {
            goto LABEL_182;
          }
        }
        uint64_t v112 = (uint64_t *)v106[1];
        unsigned int v113 = v106;
        if (v112)
        {
          do
          {
            CFIndex v111 = v112;
            uint64_t v112 = (uint64_t *)*v112;
          }
          while (v112);
        }
        else
        {
          do
          {
            CFIndex v111 = (uint64_t *)v113[2];
            BOOL v10 = *v111 == (void)v113;
            unsigned int v113 = v111;
          }
          while (!v10);
        }
        __int16 v110 = (uint64_t *)v118;
        if (*v120 == v106) {
          NSObject *v120 = v111;
        }
        unint64_t v114 = v120[1];
        v120[2] = (uint64_t *)((char *)v120[2] - 1);
        sub_89144(v114, v106);
        operator delete(v106);
      }
      int v106 = v111;
    }
    while (v111 != v110);
  }
  if (v14) {
    operator delete(v14);
  }
}

void sub_BAB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (v30) {
    operator delete(v30);
  }
  if (v29) {
    operator delete(v29);
  }
  if (v28) {
    operator delete(v28);
  }
  sub_463E0(*a14);
  _Unwind_Resume(a1);
}

uint64_t sub_BAC60(uint64_t a1, double *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_BACDC((uint64_t **)a1, v4, a2, *a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_BACC8(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_BACDC(uint64_t **a1, uint64_t *a2, _OWORD *a3, double a4)
{
  char v5 = a2;
  uint64_t v7 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (double v8 = *((double *)a2 + 4), v8 > a4))
  {
    uint64_t v9 = *a2;
    if (*a1 == a2)
    {
      BOOL v11 = a2;
LABEL_16:
      if (v9) {
        uint64_t v14 = (uint64_t **)v11;
      }
      else {
        uint64_t v14 = (uint64_t **)a2;
      }
      if (v9) {
        unint64_t v12 = (void **)(v11 + 1);
      }
      else {
        unint64_t v12 = (void **)a2;
      }
      goto LABEL_22;
    }
    if (v9)
    {
      BOOL v10 = (uint64_t *)*a2;
      do
      {
        BOOL v11 = v10;
        BOOL v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      uint64_t v16 = a2;
      do
      {
        BOOL v11 = (uint64_t *)v16[2];
        BOOL v17 = *v11 == (void)v16;
        uint64_t v16 = v11;
      }
      while (v17);
    }
    if (*((double *)v11 + 4) < a4) {
      goto LABEL_16;
    }
    uint64_t v18 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v18;
          double v19 = *((double *)v18 + 4);
          if (v19 <= a4) {
            break;
          }
          uint64_t v18 = (uint64_t *)*v18;
          uint64_t v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }
        if (v19 >= a4) {
          break;
        }
        uint64_t v7 = (uint64_t **)(v18 + 1);
        uint64_t v18 = (uint64_t *)v18[1];
        if (!v18) {
          goto LABEL_44;
        }
      }
LABEL_46:
      unint64_t v12 = (void **)v7;
      goto LABEL_22;
    }
    goto LABEL_43;
  }
  if (v8 >= a4) {
    return v5;
  }
  unint64_t v12 = (void **)(a2 + 1);
  uint64_t v13 = (void **)a2[1];
  if (v13)
  {
    do
    {
      unint64_t v12 = v13;
      uint64_t v13 = (void **)*v13;
      uint64_t v14 = (uint64_t **)v12;
      unint64_t v15 = v12;
    }
    while (v13);
  }
  else
  {
    unint64_t v15 = (void **)a2;
    do
    {
      uint64_t v20 = v15;
      unint64_t v15 = (void **)v15[2];
    }
    while (*v15 != v20);
    uint64_t v14 = (uint64_t **)a2;
  }
  if (v15 != (void **)v7 && *((double *)v15 + 4) <= a4)
  {
    int v21 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (uint64_t **)v21;
          double v22 = *((double *)v21 + 4);
          if (v22 <= a4) {
            break;
          }
          int v21 = (uint64_t *)*v21;
          uint64_t v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }
        if (v22 >= a4) {
          goto LABEL_46;
        }
        uint64_t v7 = (uint64_t **)(v21 + 1);
        int v21 = (uint64_t *)v21[1];
        if (!v21) {
          goto LABEL_44;
        }
      }
    }
LABEL_43:
    uint64_t v14 = a1 + 1;
LABEL_44:
    char v5 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v5 + 2) = *a3;
    sub_46CA8(a1, (uint64_t)v14, v7, v5);
    return v5;
  }
LABEL_22:
  char v5 = (uint64_t *)*v12;
  uint64_t v7 = (uint64_t **)v12;
  if (!*v12) {
    goto LABEL_44;
  }
  return v5;
}

uint64_t sub_BAEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 1008);
  if (!v3)
  {
    double v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v16 = "VirtualAudio_Device.cpp";
      __int16 v17 = 1024;
      int v18 = 1345;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"Attempt to calculate buffer frame size without an active device\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  uint64_t v4 = a2;
  int v13 = 0;
  unsigned int v14 = a2;
  uint64_t v12 = 0x676C6F626366737ALL;
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &v12))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 4;
    (*(void (**)(void, uint64_t *, void, void, uint8_t *, unsigned int *))(**(void **)(a1 + 1008)
                                                                                         + 40))(*(void *)(a1 + 1008), &v12, 0, 0, buf, &v14);
    return v14;
  }
  else
  {
    char v5 = (os_log_t *)sub_32A48(1);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 1008) + 128))(v11);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      uint64_t v16 = "VirtualAudio_Device.cpp";
      __int16 v17 = 1024;
      int v18 = 1359;
      __int16 v19 = 2112;
      uint64_t v20 = v11[0];
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Active device with UID '%@' does not implement the property kAudioDevicePropertyCalculateBufferFrameSize", buf, 0x1Cu);
      sub_72924((uint64_t)v11);
    }
  }
  return v4;
}

void *sub_BB10C(void *result, _DWORD *a2, _OWORD *a3)
{
  unint64_t v3 = result[2];
  unint64_t v4 = *a2;
  if (v3 > v4 >> 4)
  {
    BOOL v10 = (os_log_t *)sub_32A48(13);
    BOOL v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      __int16 v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 221;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"provided vector exceeds the size of the provided array.\"", (uint8_t *)&v16, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "provided vector exceeds the size of the provided array.");
  }
  if (!v4)
  {
    int v13 = (os_log_t *)sub_32A48(13);
    unsigned int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      __int16 v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 222;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"ioDataSize is 0.\"", (uint8_t *)&v16, 0x12u);
    }
    unint64_t v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "ioDataSize is 0.");
  }
  if (v3)
  {
    *a2 = 16 * v3;
    uint64_t v6 = (void *)*result++;
    char v5 = v6;
    if (v6 != result)
    {
      do
      {
        *a3 = *((_OWORD *)v5 + 2);
        uint64_t v7 = (void *)v5[1];
        if (v7)
        {
          do
          {
            double v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            double v8 = (void *)v5[2];
            BOOL v9 = *v8 == (void)v5;
            char v5 = v8;
          }
          while (!v9);
        }
        ++a3;
        char v5 = v8;
      }
      while (v8 != result);
    }
  }
  return result;
}

void sub_BB31C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_BB33C(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_BCAD8(&v22, a3, "", 4020);
  uint64_t v7 = v23;
  if (v23 != &v22)
  {
    if (a4 == 1869968496) {
      int v8 = 44731034;
    }
    else {
      int v8 = 44731050;
    }
    if (a4 == 1768845428) {
      int v9 = 44731018;
    }
    else {
      int v9 = v8;
    }
    do
    {
      uint64_t v10 = *(void *)(a2 + 568);
      uint64_t v11 = v7[2];
      std::string __p = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
      strcpy(v16, "cwdv");
      v16[8] = 0;
      int v17 = 3;
      v19[0] = 0;
      v19[1] = 0;
      __int16 v18 = v19;
      CFTypeRef cf = 0;
      int v20 = v9;
      unsigned int v12 = sub_E00F4(*(void *)(v10 + 128), v11, (uint64_t)&__p);
      if (cf) {
        CFRelease(cf);
      }
      sub_463E0(v19[0]);
      if (__p)
      {
        unsigned int v14 = __p;
        operator delete(__p);
      }
      if (v12) {
        sub_6CB40(a1, v12, v12);
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7 != &v22);
  }
  sub_B8E4(&v22);
}

void sub_BB49C(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void *sub_BB4D4(void *result, int a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = 528;
  if (a2)
  {
    uint64_t v3 = 504;
    uint64_t v4 = 496;
  }
  else
  {
    uint64_t v4 = 520;
  }
  if (a2) {
    uint64_t v5 = *result + 496;
  }
  else {
    uint64_t v5 = *result + 520;
  }
  unint64_t v6 = *(void *)(v2 + v3) - *(void *)(v2 + v4);
  if ((v6 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v7 = result;
    unint64_t v8 = 0;
    uint64_t v9 = (v6 >> 3);
    do
    {
      uint64_t v10 = *(void *)(v2 + v4);
      if (v8 >= (*(void *)(v5 + 8) - v10) >> 3) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = *(void *)(v10 + 8 * v8);
      }
      unsigned int v12 = (int **)v7[1];
      int v13 = *v12;
      unsigned int v14 = v12[1];
      if (*v12 != v14)
      {
        while (1)
        {
          uint64_t result = (void *)sub_EBCBC(*(void *)(v11 + 120), *v13);
          if (result) {
            break;
          }
          if (++v13 == v14) {
            goto LABEL_17;
          }
        }
      }
      uint64_t result = sub_6CB40((uint64_t *)v7[2], *(_DWORD *)(v11 + 8), *(_DWORD *)(v11 + 8));
LABEL_17:
      ++v8;
    }
    while (v8 != v9);
  }
  return result;
}

CFArrayRef sub_BB5C8(CFArrayRef result, uint64_t a2, const AudioObjectPropertyAddress *a3)
{
  if (!a2)
  {
    int v44 = (os_log_t *)sub_32A48(13);
    uint64_t v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v59 = 1024;
      int v60 = 420;
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inDevice is NULL]: \"inDevice is NULL.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inDevice is NULL.");
  }
  if (a3->mScope != 1735159650) {
    goto LABEL_54;
  }
  CFArrayRef v4 = result;
  AudioObjectPropertyElement mElement = a3->mElement;
  if (a3->mSelector == 1885434722)
  {
    if (!mElement) {
      goto LABEL_5;
    }
LABEL_54:
    unint64_t v29 = (os_log_t *)sub_32A48(13);
    unint64_t v30 = *v29;
    if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v59 = 1024;
      int v60 = 423;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"inSubPortsAddress must be kVirtualAudioPortPropertyAvailableSubPorts or kVirtualAudioPortPropertyActiveSubPorts.\"", buf, 0x12u);
    }
    uint64_t v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v31, "inSubPortsAddress must be kVirtualAudioPortPropertyAvailableSubPorts or kVirtualAudioPortPropertyActiveSubPorts.");
  }
  if (a3->mSelector != 1885430643 || mElement != 0) {
    goto LABEL_54;
  }
LABEL_5:
  *(void *)uint64_t result = 0;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  uint64_t v6 = *(void *)(a2 + 496);
  uint64_t v7 = *(void *)(a2 + 504);
  if (((v7 - v6) & 0x7FFFFFFF8) != 0)
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = v8;
      if (v8 >= (v7 - v6) >> 3 || (uint64_t v10 = *(void *)(v6 + 8 * v8)) == 0)
      {
        uint64_t v41 = (os_log_t *)sub_32A48(13);
        uint64_t v42 = *v41;
        if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          __int16 v59 = 1024;
          int v60 = 429;
          __int16 v61 = 1024;
          LODWORD(v62) = v8;
          _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [theStream is NULL]: \"inDevice->GetStreamByIndex(kVAInputStream, %u) returned NULL.\"", buf, 0x18u);
        }
        char v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v43, "inDevice->GetStreamByIndex(kVAInputStream, %u) returned NULL.");
      }
      CFArrayRef theArray = 0;
      int v56 = 8;
      strcpy(buf, "spasbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      (*(void (**)(uint64_t, unsigned char *, void, void, int *, CFArrayRef *))(*(void *)v10 + 56))(v10, buf, 0, 0, &v56, &theArray);
      uint64_t result = theArray;
      if (theArray) {
        goto LABEL_14;
      }
      uint64_t v11 = (os_log_t *)sub_32A48(1);
      unsigned int v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v59 = 1024;
        int v60 = 433;
        __int16 v61 = 2048;
        uint64_t v62 = v10;
        __int16 v63 = 1024;
        int v64 = v8;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d An input stream (%p / index %u) reports having no associated ports.", buf, 0x22u);
      }
      uint64_t result = theArray;
      if (theArray)
      {
LABEL_14:
        unsigned int v13 = 0;
        CFArrayRef v54 = result;
        __int16 v55 = 1;
        if (!result) {
          goto LABEL_16;
        }
LABEL_15:
        LODWORD(result) = CFArrayGetCount(result);
LABEL_16:
        while (v13 < result)
        {
          AudioObjectID inObjectID = 0;
          if ((sub_1D1B30(&v54, v13, &inObjectID) & 1) == 0)
          {
            uint64_t v35 = (os_log_t *)sub_32A48(13);
            uint64_t v36 = *v35;
            if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              __int16 v59 = 1024;
              int v60 = 441;
              _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Associated ports CFArray contained a non-UInt32 value.\"", buf, 0x12u);
            }
            unsigned int v37 = __cxa_allocate_exception(0x10uLL);
            *(void *)unsigned int v37 = &off_6414D8;
            v37[2] = 2003329396;
          }
          if (inObjectID)
          {
            CFArrayRef outData = 0;
            UInt32 ioDataSize = 8;
            OSStatus PropertyData = AudioObjectGetPropertyData(inObjectID, a3, 0, 0, &ioDataSize, &outData);
            if (PropertyData)
            {
              uint64_t v38 = (os_log_t *)sub_32A48(13);
              uint64_t v39 = *v38;
              if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                __int16 v59 = 1024;
                int v60 = 449;
                __int16 v61 = 1024;
                LODWORD(v62) = inObjectID;
                _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Failed to get subports for port ID %u.\"", buf, 0x18u);
              }
              uint64_t v40 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v40 = &off_6414D8;
              void v40[2] = PropertyData;
            }
            CFArrayRef v15 = outData;
            if (outData)
            {
              unsigned int v16 = 0;
              CFArrayRef v49 = outData;
              __int16 v50 = 1;
LABEL_22:
              LODWORD(v15) = CFArrayGetCount(v15);
              while (v16 < v15)
              {
                int v48 = 0;
                if ((sub_1D1B30(&v49, v16, &v48) & 1) == 0)
                {
                  uint64_t v32 = (os_log_t *)sub_32A48(13);
                  uint64_t v33 = *v32;
                  if (*v32 && os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
                    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                    __int16 v59 = 1024;
                    int v60 = 457;
                    _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError): \"Sub-port CFArray contained a non-UInt32 value.\"", buf, 0x12u);
                  }
                  uint64_t v34 = __cxa_allocate_exception(0x10uLL);
                  *(void *)uint64_t v34 = &off_6414D8;
                  v34[2] = 2003329396;
                }
                __int16 v18 = (_DWORD *)*((void *)v4 + 1);
                unint64_t v17 = *((void *)v4 + 2);
                if ((unint64_t)v18 >= v17)
                {
                  int v20 = *(_DWORD **)v4;
                  uint64_t v21 = ((uint64_t)v18 - *(void *)v4) >> 2;
                  unint64_t v22 = v21 + 1;
                  if ((unint64_t)(v21 + 1) >> 62) {
                    sub_60548();
                  }
                  uint64_t v23 = v17 - (void)v20;
                  if (v23 >> 1 > v22) {
                    unint64_t v22 = v23 >> 1;
                  }
                  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v24 = v22;
                  }
                  if (v24) {
                    unint64_t v24 = (unint64_t)sub_46BF4(v24);
                  }
                  else {
                    uint64_t v25 = 0;
                  }
                  uint64_t v26 = (_DWORD *)(v24 + 4 * v21);
                  *uint64_t v26 = v48;
                  int v19 = v26 + 1;
                  while (v18 != v20)
                  {
                    int v27 = *--v18;
                    *--uint64_t v26 = v27;
                  }
                  *(void *)CFArrayRef v4 = v26;
                  *((void *)v4 + 1) = v19;
                  *((void *)v4 + 2) = v24 + 4 * v25;
                  if (v20) {
                    operator delete(v20);
                  }
                }
                else
                {
                  *__int16 v18 = v48;
                  int v19 = v18 + 1;
                }
                *((void *)v4 + 1) = v19;
                ++v16;
                CFArrayRef v15 = v49;
                if (v49) {
                  goto LABEL_22;
                }
              }
              sub_3D61C((uint64_t)&v49);
            }
            unint64_t v8 = v9;
          }
          ++v13;
          uint64_t result = v54;
          if (v54) {
            goto LABEL_15;
          }
        }
        uint64_t result = (CFArrayRef)sub_3D61C((uint64_t)&v54);
      }
      ++v8;
      uint64_t v6 = *(void *)(a2 + 496);
      uint64_t v7 = *(void *)(a2 + 504);
    }
    while (v8 < ((unint64_t)(v7 - v6) >> 3));
  }
  return result;
}

void sub_BBD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_BBE34(uint64_t a1, int a2)
{
  if (!a1)
  {
    CFArrayRef v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      uint64_t v10 = "VirtualAudio_Device.cpp";
      __int16 v11 = 1024;
      int v12 = 1333;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [mDevice is NULL]: \"mDevice is NULL\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003329396;
  }
  if (a2) {
    unsigned int v2 = 1768845428;
  }
  else {
    unsigned int v2 = 1869968496;
  }
  *(_DWORD *)AudioObjectPropertyAddress buf = 1752657012;
  uint64_t v10 = (const char *)v2;
  int v7 = 4;
  unsigned int v8 = 0;
  (*(void (**)(uint64_t, uint8_t *, void, void, int *, unsigned int *))(*(void *)a1 + 40))(a1, buf, 0, 0, &v7, &v8);
  return v8;
}

float sub_BBFAC(void **a1)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    uint64_t v34 = (os_log_t *)sub_32A48(13);
    uint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      __s[0] = 136315394;
      *(void *)&__s[1] = "VirtualAudio_Device.cpp";
      LOWORD(__s[3]) = 1024;
      *(__int32 *)((char *)&__s[3] + 2) = 2803;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__s, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  unsigned __int32 v2 = *((_DWORD *)a1[126] + 69);
  qmemcpy(__s, "gnrcpnrcmlacamecmmec", sizeof(__s));
  uint64_t v3 = wmemchr(__s, v2, 5uLL);
  if (v3) {
    CFArrayRef v4 = v3;
  }
  else {
    CFArrayRef v4 = (__int32 *)&v45;
  }
  if ((char *)v4 - (char *)__s != 20)
  {
    int v27 = (os_log_t *)sub_32A48(1);
    uint64_t v28 = *v27;
    float v22 = 1.0;
    if (!*v27 || !os_log_type_enabled(*v27, OS_LOG_TYPE_INFO)) {
      return v22;
    }
    uint64_t v42 = a1[72];
    sub_4D60(&v43, (unsigned int *)&v42);
    int v29 = SHIBYTE(v43.__r_.__value_.__r.__words[2]);
    std::string::size_type v30 = v43.__r_.__value_.__r.__words[0];
    sub_2417C(__p, v2);
    uint64_t v31 = &v43;
    if (v29 < 0) {
      uint64_t v31 = (std::string *)v30;
    }
    if (v41 >= 0) {
      *(double *)&uint64_t v32 = COERCE_DOUBLE(__p);
    }
    else {
      uint64_t v32 = (void **)__p[0];
    }
    __s[0] = 136315906;
    *(void *)&__s[1] = "VirtualAudio_Device.cpp";
    LOWORD(__s[3]) = 1024;
    *(__int32 *)((char *)&__s[3] + 2) = 2810;
    HIWORD(__s[4]) = 2080;
    uint64_t v45 = v31;
    __int16 v46 = 2080;
    double v47 = *(double *)&v32;
    _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_INFO, "%25s:%-5d Returning 1.0 for SystemSoundVolumeCap for VAD '%s' since we're in broadcast category '%s'.", (uint8_t *)__s, 0x26u);
    if (v41 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_54;
  }
  uint64_t v5 = (void **)a1[130];
  float v6 = 0.0;
  if (v5 != a1 + 131)
  {
    do
    {
      sub_3A8A8();
      uint64_t v7 = sub_33438(*((_DWORD *)v5 + 7));
      unsigned int v8 = *(std::__shared_weak_count **)(v7 + 96);
      v43.__r_.__value_.__r.__words[0] = *(void *)(v7 + 88);
      v43.__r_.__value_.__l.__size_ = (std::string::size_type)v8;
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_43F38((uint64_t *)__s, (uint64_t *)&v43, "", 2818);
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      sub_4E004();
      unint64_t v9 = (float *)qword_64C4D8;
      if (qword_64C4D8 == qword_64C4E0)
      {
        float v11 = 0.0;
      }
      else
      {
        int v10 = *(_DWORD *)(*(void *)__s + 144);
        float v11 = 0.0;
        while (1)
        {
          int v12 = *((_DWORD *)v9 + 1);
          int v13 = *((_DWORD *)v9 + 2);
          BOOL v14 = v12 == v10 && v13 == *(_DWORD *)(*(void *)__s + 264);
          if (v14) {
            break;
          }
          if (v13) {
            BOOL v15 = 0;
          }
          else {
            BOOL v15 = v12 == v10;
          }
          float v16 = *v9;
          v9 += 3;
          float v17 = v16;
          if (v15) {
            float v11 = v17;
          }
          if (v9 == (float *)qword_64C4E0) {
            goto LABEL_26;
          }
        }
        float v11 = *v9;
      }
LABEL_26:
      if (*(void *)&__s[2]) {
        sub_4636C(*(std::__shared_weak_count **)&__s[2]);
      }
      __int16 v18 = (void **)v5[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          __int16 v18 = (void **)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (void **)v5[2];
          BOOL v14 = *v19 == v5;
          uint64_t v5 = v19;
        }
        while (!v14);
      }
      float v6 = fminf(v6, v11);
      uint64_t v5 = v19;
    }
    while (v19 != a1 + 131);
  }
  float v20 = fabsf(v6);
  float v21 = 0.00000011921;
  float v22 = 1.0;
  if (v20 >= 1.0) {
    float v21 = v20 * 0.00000011921;
  }
  if (v20 > v21)
  {
    uint64_t v23 = a1[116];
    if (!v23)
    {
      unsigned int v37 = (os_log_t *)sub_32A48(13);
      uint64_t v38 = *v37;
      if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
      {
        __s[0] = 136315394;
        *(void *)&__s[1] = "VirtualAudio_Device.cpp";
        LOWORD(__s[3]) = 1024;
        *(__int32 *)((char *)&__s[3] + 2) = 2826;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)__s, 0x12u);
      }
      uint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v39, "Precondition failure.");
    }
    float v22 = (*(float (**)(void *, float))(*(void *)v23 + 264))(v23, v6);
  }
  unint64_t v24 = (os_log_t *)sub_32A48(1);
  uint64_t v25 = *v24;
  if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_INFO))
  {
    __p[0] = a1[72];
    sub_4D60(&v43, (unsigned int *)__p);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v43;
    }
    else {
      uint64_t v26 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    __s[0] = 136316162;
    *(void *)&__s[1] = "VirtualAudio_Device.cpp";
    LOWORD(__s[3]) = 1024;
    *(__int32 *)((char *)&__s[3] + 2) = 2831;
    HIWORD(__s[4]) = 2080;
    uint64_t v45 = v26;
    __int16 v46 = 2048;
    double v47 = v6;
    __int16 v48 = 2048;
    double v49 = v22;
    _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_INFO, "%25s:%-5d SystemSoundVolumeCap for VAD '%s' is %f dB, %f scalar.", (uint8_t *)__s, 0x30u);
LABEL_54:
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
  }
  return v22;
}

void sub_BC50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void sub_BC56C(_DWORD *a1, double *a2, double a3)
{
  if (*a1 <= 7u)
  {
    float v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        int v8 = 136315394;
        unint64_t v9 = "StandardUtilities.h";
        __int16 v10 = 1024;
        int v11 = 158;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"sizeof(T) <= ioDataSize\"", (uint8_t *)&v8, 0x12u);
      }
    }
  }
  *a1 = 8;
  *a2 = a3;
}

uint64_t sub_BC65C(uint64_t a1)
{
  uint64_t v2 = sub_BC8B0(a1, 0);
  sub_46A4C(v29, v2);
  uint64_t v3 = sub_BC8B0(a1, 1);
  sub_46A4C(v30, v3);
  int v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  int v7 = 0;
  while (1)
  {
    char v8 = v5;
    sub_46A4C((uint64_t *)&v25, (uint64_t)&v29[3 * v6]);
    unint64_t v9 = v25;
    if (v25 != v26) {
      break;
    }
LABEL_20:
    sub_463E0(v26[0]);
    char v5 = 1;
    uint64_t v6 = 1;
    if (v8)
    {
      int v22 = 0;
      goto LABEL_22;
    }
  }
  while (1)
  {
    unsigned int v10 = *((_DWORD *)v9 + 7);
    sub_3A8A8();
    uint64_t v11 = sub_33438(v10);
    uint64_t v27 = 0x676C6F6270767072;
    int v28 = 0;
    uint64_t v12 = sub_BCA14(v11);
    *((void *)&v14 + 1) = v13;
    *(void *)&long long v14 = v12;
    BOOL v15 = ((v14 >> 32) & 0xFF00000000) == 0 || HIDWORD(v12) == 0;
    if (!v15) {
      break;
    }
    uint64_t v27 = 0x676C6F6270747970;
    int v28 = 0;
    uint64_t v16 = sub_BCA14(v11);
    *((void *)&v19 + 1) = v17;
    *(void *)&long long v19 = v16;
    uint64_t v18 = v19 >> 32;
    if ((v18 & 0xFF00000000) == 0) {
      LODWORD(v18) = 0;
    }
    if (v18 == 1886216809)
    {
      int v4 = 1;
    }
    else if (v18 == 1886613611)
    {
      int v7 = 1;
    }
    float v20 = v9[1];
    if (v20)
    {
      do
      {
        float v21 = (void **)v20;
        float v20 = (void *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        float v21 = (void **)v9[2];
        BOOL v15 = *v21 == v9;
        unint64_t v9 = v21;
      }
      while (!v15);
    }
    unint64_t v9 = v21;
    if (v21 == v26) {
      goto LABEL_20;
    }
  }
  sub_463E0(v26[0]);
  int v22 = 1;
LABEL_22:
  for (uint64_t i = 4; i != -2; i -= 3)
    sub_463E0((void *)v29[i]);
  return (v22 | v4 & v7) & 1;
}

void sub_BC860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
}

uint64_t sub_BC8B0(uint64_t a1, int a2)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      unsigned int v10 = "VirtualAudio_Device.cpp";
      __int16 v11 = 1024;
      int v12 = 625;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = 1016;
  if (a2) {
    uint64_t v4 = 1040;
  }
  return a1 + v4;
}

void sub_BC9F8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_BCA14(uint64_t a1)
{
  if (sub_3A6F88(a1))
  {
    unsigned int v2 = 2003329396;
    if (sub_3A6FFC(a1)) {
      return sub_3A7070(a1);
    }
  }
  else
  {
    return 2003332927;
  }
  return v2;
}

void sub_BCAD8(uint64_t *a1, uint64_t a2, char *a3, int a4)
{
  uint64_t v16 = &v16;
  uint64_t v17 = (uint64_t *)&v16;
  uint64_t v18 = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 == a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    int v9 = a1 + 2;
    goto LABEL_7;
  }
  int v9 = &v18;
  do
  {
    sub_549A4((uint64_t *)&v19, (uint64_t *)(v5 + 16), a3, a4);
    unsigned int v10 = operator new(0x20uLL);
    v10[1] = v19;
    uint64_t v11 = (uint64_t)v16;
    *(void *)unsigned int v10 = v16;
    *((void *)v10 + 1) = &v16;
    *(void *)(v11 + 8) = v10;
    uint64_t v12 = v18 + 1;
    uint64_t v16 = v10;
    ++v18;
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5 != a2);
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (v12)
  {
    uint64_t v13 = v17;
    uint64_t v14 = *v17;
    *(void *)(v14 + 8) = *((void *)v10 + 1);
    **((void **)v10 + 1) = v14;
    uint64_t v15 = *a1;
    *(void *)(v15 + 8) = v13;
    *uint64_t v13 = v15;
    *a1 = (uint64_t)v10;
    *((void *)v10 + 1) = a1;
    a1[2] = v12;
LABEL_7:
    *int v9 = 0;
  }
  sub_B8E4((uint64_t *)&v16);
}

void sub_BCBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_4636C(a14);
  }
  sub_B8E4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_BCC08(void *a1, int *a2)
{
  sub_3B7EC();
  uint64_t v23 = &qword_64CC40;
  char v24 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  int v4 = *a2;
  uint64_t v5 = 1;
  if (*a2 > 1685484389)
  {
    if (v4 > 1934456179)
    {
      if (v4 > 1953002353)
      {
        if (v4 <= 1986225265)
        {
          if (v4 > 1969844081)
          {
            if (v4 <= 1983996970)
            {
              if (v4 != 1969844082)
              {
                int v6 = 1970303087;
                goto LABEL_160;
              }
              goto LABEL_155;
            }
            if (v4 != 1983996971)
            {
              int v7 = 1983997011;
              goto LABEL_154;
            }
LABEL_155:
            a1 = (void *)a1[126];
            uint64_t v17 = (uint64_t (**)(void *, int *))(*a1 + 24);
LABEL_156:
            uint64_t v18 = (*v17)(a1, a2);
LABEL_157:
            uint64_t v5 = v18;
            goto LABEL_162;
          }
          if (v4 != 1953002354)
          {
            if (v4 == 1953719148) {
              goto LABEL_155;
            }
            int v6 = 1969318244;
LABEL_160:
            if (v4 == v6) {
              goto LABEL_161;
            }
            goto LABEL_165;
          }
LABEL_161:
          uint64_t v5 = 0;
          goto LABEL_162;
        }
        if (v4 > 1986294895)
        {
          if (v4 <= 2020111982)
          {
            if (v4 != 1986294896)
            {
              int v7 = 1986361444;
              goto LABEL_154;
            }
            goto LABEL_161;
          }
          if (v4 == 2020111983) {
            goto LABEL_140;
          }
          int v16 = 2021027692;
LABEL_139:
          if (v4 != v16) {
            goto LABEL_165;
          }
LABEL_140:
          int v12 = a2[1];
          int v13 = 1869968496;
LABEL_141:
          BOOL v15 = v12 == v13;
          goto LABEL_142;
        }
        if (v4 == 1986225266 || v4 == 1986225268) {
          goto LABEL_161;
        }
        int v11 = 1986225518;
LABEL_109:
        if (v4 != v11) {
          goto LABEL_165;
        }
        goto LABEL_163;
      }
      if (v4 > 1936878959)
      {
        if (v4 > 1937138531)
        {
          if (v4 > 1952998001)
          {
            if (v4 == 1952998002) {
              goto LABEL_161;
            }
            unsigned __int16 v8 = 29293;
          }
          else
          {
            if (v4 == 1937138532) {
              goto LABEL_155;
            }
            unsigned __int16 v8 = 25188;
          }
          int v7 = v8 | 0x74680000;
          goto LABEL_154;
        }
        if (v4 != 1936878960)
        {
          if (v4 == 1936879204) {
            goto LABEL_155;
          }
          int v6 = 1936946787;
          goto LABEL_160;
        }
LABEL_163:
        a1 = (void *)a1[116];
        if (!a1)
        {
          float v20 = (os_log_t *)sub_32A48(13);
          float v21 = *v20;
          if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v26 = "VirtualAudio_Device.cpp";
            __int16 v27 = 1024;
            int v28 = 2053;
            _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Precondition failure.");
        }
        uint64_t v17 = (uint64_t (**)(void *, int *))(*a1 + 40);
        goto LABEL_156;
      }
      if (v4 > 1936744802)
      {
        if (v4 == 1936744803) {
          goto LABEL_155;
        }
        if (v4 != 1936876403)
        {
          int v7 = 1936876644;
          goto LABEL_154;
        }
        goto LABEL_161;
      }
      if (v4 == 1934456180 || v4 == 1935762281) {
        goto LABEL_155;
      }
      int v7 = 1935962992;
LABEL_154:
      if (v4 == v7) {
        goto LABEL_155;
      }
LABEL_165:
      uint64_t v18 = sub_364AF0((uint64_t)a1, a2);
      goto LABEL_157;
    }
    if (v4 > 1869575793)
    {
      if (v4 <= 1886413425)
      {
        if (v4 > 1885631345)
        {
          if (v4 == 1885631346) {
            goto LABEL_155;
          }
          if (v4 != 1886216547)
          {
            int v7 = 1886413412;
            goto LABEL_154;
          }
        }
        else
        {
          if (v4 == 1869575794) {
            goto LABEL_155;
          }
          if (v4 != 1869838183)
          {
            int v6 = 1885434482;
            goto LABEL_160;
          }
        }
        goto LABEL_161;
      }
      if (v4 <= 1918987631)
      {
        if (v4 == 1886413426) {
          goto LABEL_161;
        }
        if (v4 == 1886807154) {
          goto LABEL_155;
        }
        int v9 = 1902539642;
      }
      else
      {
        if (v4 > 1919774834)
        {
          if (v4 != 1919774835)
          {
            int v6 = 1920165219;
            goto LABEL_160;
          }
          goto LABEL_163;
        }
        if (v4 == 1918987632) {
          goto LABEL_163;
        }
        int v9 = 1919773028;
      }
    }
    else
    {
      if (v4 > 1752657011)
      {
        if (v4 <= 1852012898)
        {
          if (v4 == 1752657012 || v4 == 1769302372) {
            goto LABEL_161;
          }
          int v7 = 1818326127;
          goto LABEL_154;
        }
        if (v4 > 1853059699)
        {
          if (v4 == 1853059700)
          {
            BOOL v15 = a1[78] == 0;
LABEL_142:
            uint64_t v5 = v15;
            goto LABEL_162;
          }
          int v7 = 1869574756;
          goto LABEL_154;
        }
        if (v4 != 1852012899)
        {
          int v6 = 1853059619;
          goto LABEL_160;
        }
        goto LABEL_162;
      }
      if (v4 > 1718641516)
      {
        if (v4 != 1718641517)
        {
          if (v4 != 1719165555)
          {
            int v6 = 1735682404;
            goto LABEL_160;
          }
          goto LABEL_161;
        }
        goto LABEL_162;
      }
      if (v4 == 1685484390) {
        goto LABEL_163;
      }
      if (v4 == 1701733224) {
        goto LABEL_161;
      }
      int v9 = 1718383987;
    }
    if (v4 != v9) {
      goto LABEL_165;
    }
    goto LABEL_162;
  }
  if (v4 > 1668247660)
  {
    if (v4 > 1684500588)
    {
      if (v4 > 1685287010)
      {
        if (v4 > 1685288050)
        {
          if (v4 != 1685288051)
          {
            int v7 = 1685483630;
            goto LABEL_154;
          }
          goto LABEL_161;
        }
        if ((v4 - 1685287011) < 2) {
          goto LABEL_155;
        }
        if (v4 != 1685287523) {
          goto LABEL_165;
        }
        int v12 = a2[1];
        int v13 = 1768845428;
        goto LABEL_141;
      }
      if (v4 > 1685025632)
      {
        if ((v4 - 1685278561) <= 0x11 && ((1 << (v4 - 97)) & 0x20003) != 0) {
          goto LABEL_155;
        }
        if (v4 != 1685025633)
        {
          int v7 = 1685087596;
          goto LABEL_154;
        }
        goto LABEL_161;
      }
      if (v4 == 1684500589 || v4 == 1684500594) {
        goto LABEL_155;
      }
      int v7 = 1684893796;
    }
    else
    {
      if (v4 > 1684236337)
      {
        if (v4 > 1684365923)
        {
          if (v4 <= 1684498540)
          {
            if (v4 != 1684365924)
            {
              int v7 = 1684370276;
              goto LABEL_154;
            }
            goto LABEL_155;
          }
          if (v4 != 1684498541)
          {
            int v6 = 1684498544;
            goto LABEL_160;
          }
          goto LABEL_161;
        }
        if (v4 == 1684236338 || v4 == 1684238451) {
          goto LABEL_161;
        }
        int v16 = 1684304756;
        goto LABEL_139;
      }
      if (v4 <= 1684104047)
      {
        if (v4 == 1668247661)
        {
          uint64_t v17 = (uint64_t (**)(void *, int *))(*a1 + 32);
          goto LABEL_156;
        }
        if (v4 == 1668443504) {
          goto LABEL_163;
        }
        int v11 = 1668705648;
        goto LABEL_109;
      }
      if (v4 == 1684104048 || v4 == 1684104051) {
        goto LABEL_161;
      }
      int v7 = 1684107364;
    }
    goto LABEL_154;
  }
  if (v4 <= 1635020146)
  {
    if (v4 <= 1633970531)
    {
      if (v4 > 1633904998)
      {
        if (v4 == 1633904999 || v4 == 1633906541) {
          goto LABEL_155;
        }
        unsigned __int16 v10 = 29554;
      }
      else
      {
        if (v4 == 1165513555 || v4 == 1633776747) {
          goto LABEL_155;
        }
        unsigned __int16 v10 = 25449;
      }
      int v7 = v10 | 0x61630000;
    }
    else
    {
      if (v4 <= 1634300530)
      {
        if (v4 == 1633970532) {
          goto LABEL_162;
        }
        if (v4 == 1633973868) {
          goto LABEL_155;
        }
        if (v4 != 1634035054) {
          goto LABEL_165;
        }
        int v14 = a2[1];
        BOOL v15 = v14 == 1869968496 || v14 == 1768845428;
        goto LABEL_142;
      }
      if (v4 <= 1634755427)
      {
        if (v4 != 1634300531)
        {
          int v7 = 1634692199;
          goto LABEL_154;
        }
        goto LABEL_161;
      }
      if (v4 == 1634755428) {
        goto LABEL_155;
      }
      int v7 = 1634890859;
    }
    goto LABEL_154;
  }
  if (v4 <= 1651664738)
  {
    if (v4 <= 1635152992)
    {
      if (v4 == 1635020147) {
        goto LABEL_155;
      }
      int v6 = 1635148648;
    }
    else
    {
      if ((v4 - 1635152993) <= 0xE && ((1 << (v4 - 97)) & 0x4015) != 0) {
        goto LABEL_155;
      }
      int v6 = 1650881394;
    }
    goto LABEL_160;
  }
  if (v4 <= 1651861091)
  {
    if (v4 == 1651664739 || v4 == 1651798132) {
      goto LABEL_155;
    }
    int v7 = 1651798898;
    goto LABEL_154;
  }
  if (v4 != 1651861092)
  {
    if (v4 != 1667658618)
    {
      int v7 = 1668047203;
      goto LABEL_154;
    }
    goto LABEL_161;
  }
LABEL_162:
  sub_3BCAC(&v23);
  return v5;
}

void sub_BD6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __cxa_free_exception(v9);
  sub_3BCAC(&a9);
  _Unwind_Resume(a1);
}

void sub_BD6F0(atomic_ullong *a1)
{
  sub_BD728(a1);

  operator delete();
}

atomic_ullong *sub_BD728(atomic_ullong *a1)
{
  *a1 = (atomic_ullong)off_620058;
  unsigned int v2 = (os_log_t *)sub_32A48(1);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, atomic_ullong *))(*a1 + 96))(__p, a1);
    int v4 = v45 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    __int16 v47 = 1024;
    int v48 = 525;
    __int16 v49 = 2080;
    __int16 v50 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Destructing VirtualAudio_Device: %s.", buf, 0x1Cu);
    if (v45 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((*(unsigned int (**)(atomic_ullong *))(*a1 + 512))(a1))
  {
    uint64_t v5 = (os_log_t *)sub_32A48(1);
    int v6 = *v5;
    if (*v5)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v47 = 1024;
        int v48 = 527;
        _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d IO must not be running.", buf, 0x12u);
      }
    }
  }
  int v7 = pthread_self();
  if (pthread_equal(v7, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire))
    || (unsigned __int16 v8 = pthread_self(), pthread_equal(v8, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire))))
  {
    int v9 = (os_log_t *)sub_32A48(1);
    unsigned __int16 v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v47 = 1024;
        int v48 = 529;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d The IO monitor must not be held by this thread.", buf, 0x12u);
      }
    }
  }
  uint64_t v11 = sub_32A48(1);
  if (*(unsigned char *)(v11 + 8))
  {
    int v12 = *(NSObject **)v11;
    if (*(void *)v11)
    {
      if (os_log_type_enabled(*(os_log_t *)v11, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, atomic_ullong *))(*a1 + 96))(__p, a1);
        int v13 = v45 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v47 = 1024;
        int v48 = 531;
        __int16 v49 = 2080;
        __int16 v50 = v13;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Tearing down VirtualAudio_Device: %s.", buf, 0x1Cu);
        if (v45 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_BDE38(a1 + 133, 0);
  uint64_t v14 = a1[79];
  if (v14)
  {
    sub_CF724(v14);
    atomic_ullong v15 = a1[79];
    if (v15) {
      (*(void (**)(atomic_ullong))(*(void *)v15 + 8))(v15);
    }
    a1[79] = 0;
  }
  uint64_t v16 = a1[115];
  if (v16)
  {
    sub_3A754C((uint64_t)a1, v16);
    atomic_ullong v17 = a1[115];
    if (v17) {
      (*(void (**)(atomic_ullong))(*(void *)v17 + 8))(v17);
    }
    a1[115] = 0;
  }
  sub_BE8B8((uint64_t)a1, a1[116]);
  sub_BE8B8((uint64_t)a1, a1[120]);
  sub_BE8B8((uint64_t)a1, a1[121]);
  sub_BE8B8((uint64_t)a1, a1[122]);
  uint64_t v18 = (uint64_t *)a1[117];
  if (v18 != (uint64_t *)a1[118])
  {
    do
    {
      sub_BE8B8((uint64_t)a1, *v18);
      long long v19 = (uint64_t *)a1[118];
      int64_t v20 = (char *)v19 - (char *)(v18 + 1);
      if (v19 != v18 + 1) {
        memmove(v18, v18 + 1, (char *)v19 - (char *)(v18 + 1));
      }
      float v21 = (uint64_t *)a1[117];
      int v22 = (uint64_t *)((char *)v18 + v20);
      a1[118] = (atomic_ullong)v18 + v20;
      uint64_t v18 = v21;
    }
    while (v21 != v22);
  }
  uint64_t v23 = (uint64_t *)a1[123];
  if (v23 != (uint64_t *)a1[124])
  {
    do
    {
      sub_BE8B8((uint64_t)a1, *v23);
      char v24 = (uint64_t *)a1[124];
      int64_t v25 = (char *)v24 - (char *)(v23 + 1);
      if (v24 != v23 + 1) {
        memmove(v23, v23 + 1, (char *)v24 - (char *)(v23 + 1));
      }
      uint64_t v26 = (uint64_t *)a1[123];
      __int16 v27 = (uint64_t *)((char *)v23 + v25);
      a1[124] = (atomic_ullong)v23 + v25;
      uint64_t v23 = v26;
    }
    while (v26 != v27);
  }
  char v28 = 1;
  do
  {
    char v29 = v28;
    if (v28) {
      uint64_t v30 = 63;
    }
    else {
      uint64_t v30 = 66;
    }
    if (v28) {
      uint64_t v31 = 62;
    }
    else {
      uint64_t v31 = 65;
    }
    if (v28) {
      uint64_t v32 = a1 + 62;
    }
    else {
      uint64_t v32 = a1 + 65;
    }
    atomic_ullong v33 = a1[v31];
    if (((a1[v30] - v33) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v34 = 0;
      do
      {
        if (v34 >= (v32[1] - v33) >> 3)
        {
          sub_365214((char *)a1, 0);
        }
        else
        {
          uint64_t v35 = *(void *)(v33 + 8 * v34);
          sub_365214((char *)a1, v35);
          if (v35) {
            (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
          }
        }
        ++v34;
        atomic_ullong v33 = a1[v31];
      }
      while (v34 < ((unint64_t)(a1[v30] - v33) >> 3));
    }
    char v28 = 0;
  }
  while ((v29 & 1) != 0);
  uint64_t v36 = a1[126];
  if (v36)
  {
    __p[0] = 0;
    strcpy(buf, "gwsobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_4581B0(v36, (uint64_t)buf, 8, (uint64_t)__p);
    atomic_ullong v37 = a1[135];
    a1[135] = 0;
    if (v37) {
      (*(void (**)(atomic_ullong))(*(void *)v37 + 8))(v37);
    }
    (*(void (**)(atomic_ullong))(*(void *)a1[126] + 80))(a1[126]);
    atomic_ullong v38 = a1[126];
    if (v38) {
      (*(void (**)(atomic_ullong))(*(void *)v38 + 8))(v38);
    }
    a1[126] = 0;
  }
  sub_BE044();
  sub_BE0C0((uint64_t)a1);
  atomic_ullong v39 = a1[135];
  a1[135] = 0;
  if (v39) {
    (*(void (**)(atomic_ullong))(*(void *)v39 + 8))(v39);
  }
  sub_BDE38(a1 + 133, 0);
  sub_463E0((void *)a1[131]);
  sub_463E0((void *)a1[128]);
  uint64_t v40 = (void *)a1[123];
  if (v40)
  {
    a1[124] = (atomic_ullong)v40;
    operator delete(v40);
  }
  char v41 = (void *)a1[117];
  if (v41)
  {
    a1[118] = (atomic_ullong)v41;
    operator delete(v41);
  }
  sub_AEF0C((uint64_t)(a1 + 103));
  sub_AEF0C((uint64_t)(a1 + 92));
  sub_AEF0C((uint64_t)(a1 + 81));
  sub_463E0((void *)a1[77]);
  uint64_t v42 = (const void *)a1[74];
  if (v42) {
    CFRelease(v42);
  }
  sub_364FB0((uint64_t)a1);
  return a1;
}

void sub_BDE18(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_BDE38(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    OSStatus v3 = AudioObjectRemovePropertyListener(*(_DWORD *)v2, (const AudioObjectPropertyAddress *)(v2 + 4), (AudioObjectPropertyListenerProc)sub_BECCC, (void *)v2);
    if (v3)
    {
      int v4 = (os_log_t *)sub_32A48(13);
      uint64_t v5 = *v4;
      if (*v4)
      {
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(v15, v3);
          int v6 = v16;
          int v7 = (void **)v15[0];
          uint64_t v11 = *(void *)(v2 + 4);
          int v12 = *(_DWORD *)(v2 + 12);
          sub_16C9C4((uint64_t)__p, (unsigned int *)&v11);
          unsigned __int16 v8 = v15;
          if (v6 < 0) {
            unsigned __int16 v8 = v7;
          }
          if (v14 >= 0) {
            int v9 = __p;
          }
          else {
            int v9 = (void **)__p[0];
          }
          AudioObjectID v10 = *(_DWORD *)v2;
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316418;
          uint64_t v18 = "VirtualAudio_Device.cpp";
          __int16 v19 = 1024;
          int v20 = 374;
          __int16 v21 = 2080;
          int v22 = v8;
          __int16 v23 = 1024;
          OSStatus v24 = v3;
          __int16 v25 = 2080;
          uint64_t v26 = v9;
          __int16 v27 = 1024;
          AudioObjectID v28 = v10;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Error %s (%d) unregistering listener for property %s on object %u", buf, 0x32u);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
          if (v16 < 0) {
            operator delete(v15[0]);
          }
        }
      }
    }
    if (*(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete();
  }
  return result;
}

void sub_BE038(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_BE044()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64A4E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64A4E0))
  {
    sub_BE7F0();
    __cxa_guard_release(&qword_64A4E0);
  }
}

void sub_BE0A8(_Unwind_Exception *a1)
{
}

void sub_BE0C0(uint64_t a1)
{
  if (!a1)
  {
    char v14 = (os_log_t *)sub_32A48(13);
    atomic_ullong v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v20 = "AVHIDEventListener.h";
      __int16 v21 = 1024;
      int v22 = 191;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  std::mutex::lock((std::mutex *)&qword_64A480);
  uint64_t v2 = (uint64_t *)qword_64A4C0;
  if ((uint64_t *)qword_64A4C0 != &qword_64A4C8)
  {
    while (v2[4] != a1)
    {
      OSStatus v3 = (uint64_t *)v2[1];
      if (v3)
      {
        do
        {
          int v4 = v3;
          OSStatus v3 = (uint64_t *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          int v4 = (uint64_t *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
      if (v4 == &qword_64A4C8) {
        goto LABEL_31;
      }
    }
    int v6 = (os_log_t *)sub_32A48(41);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 96))(__p, a1);
      unsigned __int16 v8 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      int v20 = "AVHIDEventListener.h";
      __int16 v21 = 1024;
      int v22 = 200;
      __int16 v23 = 2080;
      OSStatus v24 = v8;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVHIDEventListener::UnregisterDevice() - unregistering device '%s' for updates.", buf, 0x1Cu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    int v9 = (uint64_t *)v2[1];
    if (v9)
    {
      do
      {
        AudioObjectID v10 = v9;
        int v9 = (uint64_t *)*v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v11 = v2;
      do
      {
        AudioObjectID v10 = (uint64_t *)v11[2];
        BOOL v5 = *v10 == (void)v11;
        uint64_t v11 = v10;
      }
      while (!v5);
    }
    if ((uint64_t *)qword_64A4C0 == v2) {
      qword_64A4C0 = (uint64_t)v10;
    }
    --qword_64A4D0;
    sub_89144((uint64_t *)qword_64A4C8, v2);
    operator delete(v2);
    if (!qword_64A4D0)
    {
      int v12 = (os_log_t *)sub_32A48(41);
      int v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v20 = "AVHIDEventListener.h";
        __int16 v21 = 1024;
        int v22 = 207;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVHIDEventListener::UnregisterDevice() - unregistered all devices.", buf, 0x12u);
      }
      operator new();
    }
  }
LABEL_31:
  std::mutex::unlock((std::mutex *)&qword_64A480);
}

void sub_BE430(_Unwind_Exception *a1)
{
}

void sub_BE478(uint64_t *a1)
{
  sub_BE4EC(*a1, 0);

  operator delete();
}

void sub_BE4C8()
{
}

void sub_BE4EC(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 24))
  {
    if (a2)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64A4F0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_64A4F0))
      {
        qword_64A4E8 = sub_1660B4();
        __cxa_guard_release(&qword_64A4F0);
      }
      if (BYTE4(qword_64A4E8))
      {
        if ((byte_64A4F8 & 1) == 0)
        {
          OSStatus v3 = (os_log_t *)sub_32A48(41);
          int v4 = *v3;
          if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v21 = "AVHIDEventListener.h";
            __int16 v22 = 1024;
            int v23 = 404;
            __int16 v24 = 1024;
            int v25 = qword_64A4E8;
            _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVHIDEventListener::SetPacketLoggingEnabled() - logging interval overridden to %ums", buf, 0x18u);
          }
          byte_64A4F8 = 1;
        }
        int v5 = qword_64A4E8;
      }
      else
      {
        int v5 = 50;
      }
    }
    else
    {
      int v5 = 0;
    }
    int v12 = (os_log_t *)sub_32A48(41);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      __int16 v21 = "AVHIDEventListener.h";
      __int16 v22 = 1024;
      int v23 = 415;
      __int16 v24 = 1024;
      int v25 = v5;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVHIDEventListener::SetPacketLoggingEnabled() - setting logging interval to %ums", buf, 0x18u);
    }
    uint8_t report = 2;
    int v19 = v5;
    IOReturn v14 = IOHIDDeviceSetReport(*(IOHIDDeviceRef *)(a1 + 24), kIOHIDReportTypeFeature, 2, &report, 5);
    IOReturn v15 = v14;
    if (v14 != -536870206)
    {
      if (v14)
      {
        char v16 = (os_log_t *)sub_32A48(41);
        os_log_t v17 = *v16;
        if (*v16)
        {
          if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            __int16 v21 = "AVHIDEventListener.h";
            __int16 v22 = 1024;
            int v23 = 424;
            __int16 v24 = 1024;
            int v25 = v15;
            unsigned __int16 v8 = "%25s:%-5d AVHIDEventListener::SetPacketLoggingEnabled() - Error %u setting device report";
            int v9 = v17;
            os_log_type_t v10 = OS_LOG_TYPE_ERROR;
            uint32_t v11 = 24;
            goto LABEL_24;
          }
        }
      }
    }
  }
  else
  {
    int v6 = (os_log_t *)sub_32A48(41);
    os_log_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      __int16 v21 = "AVHIDEventListener.h";
      __int16 v22 = 1024;
      int v23 = 385;
      unsigned __int16 v8 = "%25s:%-5d AVHIDEventListener::SetPacketLoggingEnabled() - no HID device, ignoring.";
      int v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
      uint32_t v11 = 18;
LABEL_24:
      _os_log_impl(&def_1E50E8, v9, v10, v8, buf, v11);
    }
  }
}

void sub_BE7D0(_Unwind_Exception *a1)
{
}

void sub_BE7F0()
{
  qword_64A440 = (uint64_t)dispatch_queue_create("AVHIDEventListenerQueue", 0);
  qword_64A448 = (uint64_t)IONotificationPortCreate(kIOMainPortDefault);
  dword_64A450 = 0;
  qword_64A458 = 0;
  qword_64A480 = 850045863;
  unk_64A488 = 0u;
  unk_64A498 = 0u;
  unk_64A4A8 = 0u;
  qword_64A4D0 = 0;
  qword_64A4C8 = 0;
  qword_64A4B8 = 0;
  qword_64A4C0 = (uint64_t)&qword_64A4C8;
  dword_64A4D8 = 0;
  v0 = qword_64A440;

  dispatch_queue_set_specific(v0, "AVHIDEventListenerQueueKey", "AVHIDEventListenerQueueKey", 0);
}

void sub_BE89C(_Unwind_Exception *exception_object)
{
  uint64_t v2 = v1;
  int v4 = *(NSObject **)(v2 + 1088);
  if (v4) {
    dispatch_release(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BE8B8(uint64_t a1, uint64_t a2)
{
  int v4 = *(char **)(a1 + 544);
  int v5 = *(char **)(a1 + 552);
  if (v4 != v5)
  {
    while (*(void *)v4 != a2)
    {
      v4 += 8;
      if (v4 == v5)
      {
        int v4 = *(char **)(a1 + 552);
        break;
      }
    }
  }
  if (v4 != v5)
  {
    int64_t v6 = v5 - (v4 + 8);
    if (v5 != v4 + 8) {
      memmove(v4, v4 + 8, v5 - (v4 + 8));
    }
    *(void *)(a1 + 552) = &v4[v6];
  }
  if (a2) {
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  uint64_t result = AudioObjectsPublishedAndDied();
  int v8 = result;
  if (result)
  {
    int v9 = (os_log_t *)sub_32A48(13);
    os_log_type_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v13 = "VirtualAudio_Device.cpp";
        __int16 v14 = 1024;
        int v15 = 4562;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theError) [error theError is an error]: \"couldn't tell the HAL about the controls\"", buf, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v8;
  }
  return result;
}

void sub_BEA7C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf, long long a17)
{
  if (a2)
  {
    if (a2 == 3)
    {
      char v18 = __cxa_begin_catch(a1);
      int v19 = (os_log_t *)sub_32A48(1);
      int v20 = *v19;
      if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(&__p, v18[2]);
        if (a15 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 4564;
        WORD1(a17) = 2080;
        *(void *)((char *)&a17 + 4) = p_p;
        _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d CAException thrown during control destruction: '%s'.", (uint8_t *)&buf, 0x1Cu);
        if (a15 < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      __int16 v22 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        int v23 = v22;
        __int16 v24 = (os_log_t *)sub_32A48(1);
        int v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
          LODWORD(buf) = 136315650;
          *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 4565;
          WORD1(a17) = 2080;
          *(void *)((char *)&a17 + 4) = v26;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d Standard Library exception thrown during control destruction: %s.", (uint8_t *)&buf, 0x1Cu);
        }
      }
      else
      {
        __int16 v27 = (os_log_t *)sub_32A48(1);
        AudioObjectID v28 = *v27;
        if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 136315394;
          *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
          WORD6(buf) = 1024;
          *(_DWORD *)((char *)&buf + 14) = 4566;
          _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Unknown exception thrown during control destruction.", (uint8_t *)&buf, 0x12u);
        }
      }
    }
    __cxa_end_catch();
    JUMPOUT(0xBE998);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_BECCC(int a1, unsigned int a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v4 = 2003329396;
  if (!a4 || (*(_DWORD *)a4 == a1 ? (BOOL v6 = a2 == 0) : (BOOL v6 = 1), v6))
  {
LABEL_16:
    int v12 = (os_log_t *)sub_32A48(31);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      char v16 = "VirtualAudio_Device.cpp";
      __int16 v17 = 1024;
      int v18 = 406;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Encountered one or more unexpected notification parameters", buf, 0x12u);
    }
    return v4;
  }
  uint64_t v8 = a2;
  do
  {
    if (!sub_668FC((int *)(a4 + 4), a3)) {
      goto LABEL_14;
    }
    int v9 = (os_log_t *)sub_32A48(31);
    os_log_type_t v10 = *v9;
    if (*v9)
    {
      uint64_t v4 = 0;
      if (!os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_14;
      }
      uint64_t v11 = a4 + 16;
      if (*(char *)(a4 + 39) < 0) {
        uint64_t v11 = *(void *)(a4 + 16);
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      char v16 = "VirtualAudio_Device.cpp";
      __int16 v17 = 1024;
      int v18 = 399;
      __int16 v19 = 2080;
      uint64_t v20 = v11;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s", buf, 0x1Cu);
    }
    uint64_t v4 = 0;
LABEL_14:
    a3 += 3;
    --v8;
  }
  while (v8);
  if (v4) {
    goto LABEL_16;
  }
  return v4;
}

void sub_BEEA0(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 1008);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 168))(v3);
    uint64_t v5 = sub_32A48(1);
    uint64_t v6 = sub_32A48(16);
    char v7 = 0;
    uint64_t v8 = 0;
    *(void *)int v15 = 0x100000002;
    uint64_t v9 = *(void *)(v5 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)&v15[4 * v8];
      char v11 = v7;
      if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
        break;
      }
      char v7 = 1;
      uint64_t v8 = 1;
      if (v11)
      {
        if ((v9 & 1) == 0) {
          return;
        }
        goto LABEL_10;
      }
    }
    if ((v9 & v10) == 0) {
      uint64_t v5 = v6;
    }
    if (*(void *)(v5 + 8))
    {
LABEL_10:
      int v12 = *(NSObject **)v5;
      if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        int v13 = "false";
        uint64_t v14 = *(void *)(a1 + 1008);
        *(void *)&v15[4] = "VirtualAudio_Device.cpp";
        *(_DWORD *)int v15 = 136315906;
        __int16 v16 = 1024;
        if (a2) {
          int v13 = "true";
        }
        int v17 = 611;
        __int16 v18 = 2080;
        __int16 v19 = v13;
        __int16 v20 = 2048;
        uint64_t v21 = v14;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d SetAggregateIsTrustworthy: %s on device at %p", v15, 0x26u);
      }
    }
  }
}

uint64_t sub_BF03C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1008);
  if (v1)
  {
    int v2 = *(_DWORD *)(v1 + 280);
    BOOL v3 = v2 == 1986556788 || v2 == 1987211117;
    if (v3 || v2 == 1987208039)
    {
      uint64_t v5 = result;
      uint64_t v6 = (os_log_t *)sub_32A48(1);
      char v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
      {
        sub_4F64((uint64_t)__p, (os_unfair_lock_t)(*(void *)(v5 + 1008) + 8));
        if (v10 >= 0) {
          uint64_t v8 = __p;
        }
        else {
          uint64_t v8 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v12 = 1024;
        int v13 = 4788;
        __int16 v14 = 2080;
        int v15 = v8;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Identifying speech detection VAD (%s) for the HAL.", buf, 0x1Cu);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      LODWORD(__p[0]) = 1;
      strcpy(buf, "rddsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      return (*(uint64_t (**)(void, unsigned char *, void, void, uint64_t, void **))(**(void **)(v5 + 1008)
                                                                                          + 48))(*(void *)(v5 + 1008), buf, 0, 0, 4, __p);
    }
  }
  return result;
}

void sub_BF1D0(uint64_t a1)
{
  memset(&v58, 0, sizeof(v58));
  sub_2417C(&v62, *(_DWORD *)(a1 + 576));
  uint64_t v1 = std::string::insert(&v62, 0, "[ type: ", 8uLL);
  long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  int64_t v64 = v1->__r_.__value_.__r.__words[2];
  long long __p = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  if (v64 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v64 >= 0) {
    std::string::size_type v4 = HIBYTE(v64);
  }
  else {
    std::string::size_type v4 = *((void *)&__p + 1);
  }
  std::string::append(&v58, p_p, v4);
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  std::to_string(&v62, *(_DWORD *)(a1 + 8));
  uint64_t v5 = std::string::insert(&v62, 0, "; id: ", 6uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  int64_t v64 = v5->__r_.__value_.__r.__words[2];
  long long __p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (v64 >= 0) {
    char v7 = (const std::string::value_type *)&__p;
  }
  else {
    char v7 = (const std::string::value_type *)__p;
  }
  if (v64 >= 0) {
    std::string::size_type v8 = HIBYTE(v64);
  }
  else {
    std::string::size_type v8 = *((void *)&__p + 1);
  }
  std::string::append(&v58, v7, v8);
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  snprintf((char *)&__str, 0x13uLL, "%p", (const void *)a1);
  sub_21C8C(&v62, (char *)&__str);
  uint64_t v9 = std::string::insert(&v62, 0, "; addr: ", 8uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v64 = v9->__r_.__value_.__r.__words[2];
  long long __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v64 >= 0) {
    char v11 = (const std::string::value_type *)&__p;
  }
  else {
    char v11 = (const std::string::value_type *)__p;
  }
  if (v64 >= 0) {
    std::string::size_type v12 = HIBYTE(v64);
  }
  else {
    std::string::size_type v12 = *((void *)&__p + 1);
  }
  std::string::append(&v58, v11, v12);
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  std::to_string(&v62, *(_DWORD *)(a1 + 580));
  int v13 = std::string::insert(&v62, 0, "; context id: ", 0xEuLL);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  int64_t v64 = v13->__r_.__value_.__r.__words[2];
  long long __p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v64 >= 0) {
    int v15 = (const std::string::value_type *)&__p;
  }
  else {
    int v15 = (const std::string::value_type *)__p;
  }
  if (v64 >= 0) {
    std::string::size_type v16 = HIBYTE(v64);
  }
  else {
    std::string::size_type v16 = *((void *)&__p + 1);
  }
  std::string::append(&v58, v15, v16);
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  sub_2417C(&v62, v17);
  __int16 v18 = std::string::insert(&v62, 0, "; hidden: ", 0xAuLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v64 = v18->__r_.__value_.__r.__words[2];
  long long __p = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v64 >= 0) {
    __int16 v20 = (const std::string::value_type *)&__p;
  }
  else {
    __int16 v20 = (const std::string::value_type *)__p;
  }
  if (v64 >= 0) {
    std::string::size_type v21 = HIBYTE(v64);
  }
  else {
    std::string::size_type v21 = *((void *)&__p + 1);
  }
  std::string::append(&v58, v20, v21);
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  sub_21C8C(&v55, "{ ");
  char v22 = 0;
  uint64_t v23 = 0;
  __int16 v65 = 1;
  do
  {
    char v53 = v22;
    int v24 = *((unsigned __int8 *)&v65 + v23);
    uint64_t v25 = 528;
    if (*((unsigned char *)&v65 + v23))
    {
      uint64_t v25 = 504;
      uint64_t v26 = 496;
    }
    else
    {
      uint64_t v26 = 520;
    }
    if (*((unsigned char *)&v65 + v23)) {
      uint64_t v27 = a1 + 496;
    }
    else {
      uint64_t v27 = a1 + 520;
    }
    unint64_t v28 = *(void *)(a1 + v25) - *(void *)(a1 + v26);
    if ((v28 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v29 = 0;
      if (*((unsigned char *)&v65 + v23)) {
        uint64_t v30 = "i/";
      }
      else {
        uint64_t v30 = "o/";
      }
      unint64_t v31 = (v28 >> 3);
      do
      {
        uint64_t v32 = *(void *)(a1 + v26);
        if (v29 >= (*(void *)(v27 + 8) - v32) >> 3) {
          atomic_ullong v33 = 0;
        }
        else {
          atomic_ullong v33 = *(unsigned int **)(v32 + 8 * v29);
        }
        std::to_string(&v61, v33[2]);
        unint64_t v34 = std::string::insert(&v61, 0, v30, 2uLL);
        long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        uint64_t v36 = std::string::append(&__str, "/", 1uLL);
        long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v62.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        snprintf(__s, 0x13uLL, "%p", v33);
        sub_21C8C(v59, __s);
        if ((v60 & 0x80u) == 0) {
          atomic_ullong v38 = v59;
        }
        else {
          atomic_ullong v38 = (void **)v59[0];
        }
        if ((v60 & 0x80u) == 0) {
          std::string::size_type v39 = v60;
        }
        else {
          std::string::size_type v39 = (std::string::size_type)v59[1];
        }
        uint64_t v40 = std::string::append(&v62, (const std::string::value_type *)v38, v39);
        long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        int64_t v64 = v40->__r_.__value_.__r.__words[2];
        long long __p = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        if (v64 >= 0) {
          uint64_t v42 = (const std::string::value_type *)&__p;
        }
        else {
          uint64_t v42 = (const std::string::value_type *)__p;
        }
        if (v64 >= 0) {
          std::string::size_type v43 = HIBYTE(v64);
        }
        else {
          std::string::size_type v43 = *((void *)&__p + 1);
        }
        std::string::append(&v55, v42, v43);
        if (SHIBYTE(v64) < 0) {
          operator delete((void *)__p);
        }
        if ((char)v60 < 0) {
          operator delete(v59[0]);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        ++v29;
        if (v24 || v29 < v31) {
          std::string::append(&v55, ", ", 2uLL);
        }
      }
      while (v31 != v29);
    }
    char v22 = 1;
    uint64_t v23 = 1;
  }
  while ((v53 & 1) == 0);
  std::string::append(&v55, " }", 2uLL);
  int v44 = std::string::insert(&v55, 0, "; VA strms: ", 0xCuLL);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  int64_t v57 = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)int v56 = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (v57 >= 0) {
    __int16 v46 = v56;
  }
  else {
    __int16 v46 = (void **)v56[0];
  }
  if (v57 >= 0) {
    std::string::size_type v47 = HIBYTE(v57);
  }
  else {
    std::string::size_type v47 = (std::string::size_type)v56[1];
  }
  std::string::append(&v58, (const std::string::value_type *)v46, v47);
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  int v48 = *(os_unfair_lock_s **)(a1 + 1008);
  if (v48) {
    sub_4F64((uint64_t)&v62, v48 + 2);
  }
  else {
    sub_21C8C(&v62, "null");
  }
  __int16 v49 = std::string::insert(&v62, 0, "; agg dev: ", 0xBuLL);
  long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  int64_t v64 = v49->__r_.__value_.__r.__words[2];
  long long __p = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  if (v64 >= 0) {
    unsigned int v51 = (const std::string::value_type *)&__p;
  }
  else {
    unsigned int v51 = (const std::string::value_type *)__p;
  }
  if (v64 >= 0) {
    std::string::size_type v52 = HIBYTE(v64);
  }
  else {
    std::string::size_type v52 = *((void *)&__p + 1);
  }
  std::string::append(&v58, v51, v52);
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  std::string::append(&v58, " ]", 2uLL);
  sub_BFA04(a1 + 24, &v58);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
}

void sub_BF8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_BFA04(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 8), a2);
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  return a1;
}

void sub_BFA44(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_BFA58(uint64_t a1, unsigned int a2)
{
  int v10 = 0;
  if (!AudioObjectCreate())
  {
    if (a2 != 1836414053)
    {
      if (a2 == 1986817381) {
        operator new();
      }
      std::string::size_type v4 = (os_log_t *)sub_32A48(13);
      uint64_t v5 = *v4;
      if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(__p, a2);
        if (v9 >= 0) {
          long long v6 = __p;
        }
        else {
          long long v6 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        std::string::size_type v12 = "VirtualAudio_Device.cpp";
        __int16 v13 = 1024;
        int v14 = 4500;
        __int16 v15 = 2080;
        std::string::size_type v16 = v6;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unhandled control class %s.\"", buf, 0x1Cu);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Unhandled control class %s.");
    }
    operator new();
  }
  return 0;
}

void sub_BFE5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_BFEAC(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 632);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    uint64_t v20 = v2 + 16;
    uint64_t v4 = 0;
    char v21 = (*(uint64_t (**)(uint64_t))(v3 + 16))(v2 + 16);
    long long v5 = *(_OWORD *)(v2 + 120);
    v26[0] = *(_OWORD *)(v2 + 104);
    v26[1] = v5;
    uint64_t v27 = *(void *)(v2 + 136);
    do
    {
      uint64_t v6 = *(void *)((char *)v26 + v4);
      if (!v6)
      {
        char v7 = (os_log_t *)sub_32A48(13);
        std::string::size_type v8 = *v7;
        if (*v7)
        {
          if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
            uint64_t v23 = "VirtualAudio_DevicePropertyManager.cpp";
            __int16 v24 = 1024;
            int v25 = 382;
            _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"PropertyCache is NULL\"", buf, 0x12u);
          }
        }
      }
      sub_27C1F4(v6);
      v4 += 8;
    }
    while (v4 != 40);
    for (uint64_t i = *(void *)(v2 + 152); i != v2 + 144; uint64_t i = *(void *)(i + 8))
    {
      unint64_t v10 = *(void *)(i + 16);
      sub_CFB84((uint64_t *)(v2 + 240), v10, v10);
      sub_27C1F4(v10);
    }
    sub_45F50((void *)(v2 + 144));
    for (uint64_t j = *(void *)(v2 + 176); j != v2 + 168; uint64_t j = *(void *)(j + 8))
    {
      unint64_t v12 = *(void *)(j + 16);
      sub_CFB84((uint64_t *)(v2 + 240), v12, v12);
      sub_27C1F4(v12);
    }
    sub_45F50((void *)(v2 + 168));
    for (uint64_t k = *(void *)(v2 + 200); k != v2 + 192; uint64_t k = *(void *)(k + 8))
    {
      unint64_t v14 = *(void *)(k + 16);
      sub_CFB84((uint64_t *)(v2 + 240), v14, v14);
      sub_27C1F4(v14);
    }
    sub_45F50((void *)(v2 + 192));
    for (uint64_t m = *(void *)(v2 + 224); m != v2 + 216; uint64_t m = *(void *)(m + 8))
    {
      unint64_t v16 = *(void *)(m + 16);
      sub_CFB84((uint64_t *)(v2 + 240), v16, v16);
      sub_27C1F4(v16);
    }
    sub_45F50((void *)(v2 + 216));
    sub_3BCAC(&v20);
    uint64_t v1 = a1;
  }
  uint64_t v17 = *(void *)(v1 + 1008);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 160))(v17);
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 0x40000000;
  v19[2] = sub_C01FC;
  v19[3] = &unk_620380;
  v19[4] = v1;
  sub_61CCC((uint64_t)v19);
  sub_BE044();
  sub_BE0C0(v1);
}

void sub_C01CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_C01FC(uint64_t a1)
{
  uint64_t v1 = *(atomic_ullong **)(a1 + 32);
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    unint64_t v12 = (os_log_t *)sub_32A48(13);
    __int16 v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "VirtualAudio_Device.cpp";
      __int16 v23 = 1024;
      int v24 = 4280;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v2 = pthread_self();
  if (!pthread_equal(v2, (pthread_t)atomic_load_explicit(v1 + 83, memory_order_acquire)))
  {
    uint64_t v3 = pthread_self();
    if (!pthread_equal(v3, (pthread_t)atomic_load_explicit(v1 + 94, memory_order_acquire)))
    {
      __int16 v18 = (os_log_t *)sub_32A48(13);
      long long v19 = *v18;
      if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
      {
        int v21 = 136315394;
        char v22 = "VirtualAudio_Device.cpp";
        __int16 v23 = 1024;
        int v24 = 4281;
        _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
      }
      uint64_t v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v20, "Precondition failure.");
    }
  }
  if ((*(uint64_t (**)(atomic_ullong *))(*v1 + 512))(v1))
  {
    __int16 v15 = (os_log_t *)sub_32A48(13);
    unint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "VirtualAudio_Device.cpp";
      __int16 v23 = 1024;
      int v24 = 4282;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
    }
    uint64_t v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v17, "Precondition failure.");
  }
  char v4 = 1;
  do
  {
    char v5 = v4;
    if (v4) {
      uint64_t v6 = 63;
    }
    else {
      uint64_t v6 = 66;
    }
    if (v4) {
      uint64_t v7 = 62;
    }
    else {
      uint64_t v7 = 65;
    }
    if (v4) {
      std::string::size_type v8 = v1 + 62;
    }
    else {
      std::string::size_type v8 = v1 + 65;
    }
    atomic_ullong v9 = v1[v7];
    if (((v1[v6] - v9) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v10 = 0;
      do
      {
        if (v10 >= (v8[1] - v9) >> 3) {
          uint64_t v11 = 0;
        }
        else {
          uint64_t v11 = *(void *)(v9 + 8 * v10);
        }
        sub_EC6F4(v11);
        ++v10;
        atomic_ullong v9 = v1[v7];
      }
      while (v10 < ((unint64_t)(v1[v6] - v9) >> 3));
    }
    char v4 = 0;
  }
  while ((v5 & 1) != 0);
}

void sub_C0584(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C05A8(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = 0x676C6F6261677270;
  int v33 = 0;
  uint64_t v3 = *(void *)(a1 + 1008);
  if (!v3)
  {
    int v24 = (os_log_t *)sub_32A48(13);
    int v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      long long v35 = "VirtualAudio_Device.cpp";
      __int16 v36 = 1024;
      int v37 = 652;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!*(void *)(a2 + 1008))
  {
    uint64_t v27 = (os_log_t *)sub_32A48(13);
    unint64_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      long long v35 = "VirtualAudio_Device.cpp";
      __int16 v36 = 1024;
      int v37 = 653;
      _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    unint64_t v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v29, "Precondition failure.");
  }
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &v32);
  if ((v5 & (*(unsigned int (**)(void, uint64_t *))(**(void **)(a2 + 1008) + 16))(*(void *)(a2 + 1008), &v32)) != 1)return 0; {
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t *, void, void))(**(void **)(a1 + 1008) + 32))(*(void *)(a1 + 1008), &v32, 0, 0);
  }
  uint64_t v30 = (uint64_t)&v30;
  *(_DWORD *)AudioObjectPropertyAddress buf = v6;
  __n128 v7 = __chkstk_darwin(v6);
  atomic_ullong v9 = (char *)&v30 - v8;
  (*(void (**)(void, uint64_t *, void, void, uint8_t *, char *, __n128))(*(void *)*v10 + 40))(*v10, &v32, 0, 0, buf, (char *)&v30 - v8, v7);
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t *, void, void))(**(void **)(a2 + 1008) + 32))(*(void *)(a2 + 1008), &v32, 0, 0);
  unsigned int v31 = v11;
  __n128 v12 = __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v30 - v13;
  (*(void (**)(void, uint64_t *, void, void, unsigned int *, char *, __n128))(*(void *)*v15 + 40))(*v15, &v32, 0, 0, &v31, (char *)&v30 - v13, v12);
  if (*(_DWORD *)buf < 4u) {
    return 0;
  }
  uint64_t v17 = 0;
  unsigned int v18 = v31;
  unint64_t v19 = (unint64_t)*(unsigned int *)buf >> 2;
  if (v31 >> 2 <= 1) {
    uint64_t v20 = 1;
  }
  else {
    uint64_t v20 = v31 >> 2;
  }
  while (((*(uint64_t (**)(void, void))(**(void **)(a2 + 1008) + 456))(*(void *)(a2 + 1008), *(unsigned int *)&v9[4 * v17]) & 1) == 0)
  {
    uint64_t v21 = v20;
    char v22 = (int *)v14;
    if (v18 >= 4)
    {
      do
      {
        int v23 = *v22++;
        if (*(_DWORD *)&v9[4 * v17] == v23
          || ((*(uint64_t (**)(void))(**(void **)(a1 + 1008) + 456))(*(void *)(a1 + 1008)) & 1) != 0)
        {
          return 1;
        }
      }
      while (--v21);
    }
    if (++v17 == v19) {
      return 0;
    }
  }
  return 1;
}

void sub_C0A20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_C0A40(atomic_ullong *a1)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    __int16 v15 = (os_log_t *)sub_32A48(13);
    unint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "VirtualAudio_Device.cpp";
      __int16 v23 = 1024;
      int v24 = 716;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v2 = pthread_self();
  if (pthread_equal(v2, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire))
    || (uint64_t v3 = pthread_self(), pthread_equal(v3, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire))))
  {
    atomic_ullong v9 = (os_log_t *)sub_32A48(13);
    unint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "VirtualAudio_Device.cpp";
      __int16 v23 = 1024;
      int v24 = 717;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
    }
    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v11, "Precondition failure.");
  }
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    unsigned int v18 = (os_log_t *)sub_32A48(13);
    unint64_t v19 = *v18;
    if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "VirtualAudio_Device.cpp";
      __int16 v23 = 1024;
      int v24 = 146;
      _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
    }
    uint64_t v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "Precondition failure.");
  }
  uint64_t v4 = (*(uint64_t (**)(atomic_ullong *))(*a1 + 528))(a1);
  int v5 = pthread_self();
  if (pthread_equal(v5, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v4 + 16), memory_order_acquire))
    || (uint64_t v6 = pthread_self(),
        pthread_equal(v6, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v4 + 104), memory_order_acquire))))
  {
    __n128 v12 = (os_log_t *)sub_32A48(13);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      char v22 = "VirtualAudio_Device.cpp";
      __int16 v23 = 1024;
      int v24 = 147;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v21, 0x12u);
    }
    unint64_t v14 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v14, "Precondition failure.");
  }
  atomic_ullong v7 = a1[126];
  if (v7) {
    (*(void (**)(atomic_ullong, uint64_t))(*(void *)v7 + 176))(v7, 1);
  }
  sub_BEEA0((uint64_t)a1, 0);

  return sub_B8790((std::string::size_type)a1, 1, 1);
}

void sub_C0E78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_C0EA0(atomic_ullong *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    uint64_t v218 = (os_log_t *)sub_32A48(13);
    v219 = *v218;
    if (*v218 && os_log_type_enabled(*v218, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 725;
      _os_log_impl(&def_1E50E8, v219, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  atomic_ullong v7 = pthread_self();
  if (!pthread_equal(v7, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire)))
  {
    uint64_t v8 = pthread_self();
    if (!pthread_equal(v8, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire)))
    {
      int v248 = (os_log_t *)sub_32A48(13);
      std::string::size_type v249 = *v248;
      if (*v248 && os_log_type_enabled(*v248, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 726;
        _os_log_impl(&def_1E50E8, v249, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      int v250 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v250, "Precondition failure.");
    }
  }
  unint64_t v257 = (unint64_t)a1;
  if ((*(unsigned int (**)(atomic_ullong *))(*a1 + 512))(a1))
  {
    char v221 = (os_log_t *)sub_32A48(13);
    uint64_t v222 = *v221;
    if (*v221 && os_log_type_enabled(*v221, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 727;
      _os_log_impl(&def_1E50E8, v222, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v223 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v223, "Precondition failure.");
  }
  if (!*(void *)(a2 + 16))
  {
    std::string v224 = (os_log_t *)sub_32A48(13);
    v225 = *v224;
    if (*v224 && os_log_type_enabled(*v224, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 728;
      _os_log_impl(&def_1E50E8, v225, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    char v226 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v226, "Precondition failure.");
  }
  if (!*(void *)(a2 + 32))
  {
    v227 = (os_log_t *)sub_32A48(13);
    __int16 v228 = *v227;
    if (*v227 && os_log_type_enabled(*v227, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 732;
      _os_log_impl(&def_1E50E8, v228, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"DeviceState output volume control is NULL\"", buf, 0x12u);
    }
    v229 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v229, "DeviceState output volume control is NULL");
  }
  if (!*(void *)(a2 + 40))
  {
    v230 = (os_log_t *)sub_32A48(13);
    v231 = *v230;
    if (*v230 && os_log_type_enabled(*v230, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 733;
      _os_log_impl(&def_1E50E8, v231, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"DeviceState output mute control is NULL\"", buf, 0x12u);
    }
    v232 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v232, "DeviceState output mute control is NULL");
  }
  if (!*(void *)(a2 + 48))
  {
    v233 = (os_log_t *)sub_32A48(13);
    int v234 = *v233;
    if (*v233 && os_log_type_enabled(*v233, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 734;
      _os_log_impl(&def_1E50E8, v234, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"DeviceState input volume control is NULL\"", buf, 0x12u);
    }
    std::string::size_type v235 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v235, "DeviceState input volume control is NULL");
  }
  if (!*(void *)(a2 + 56))
  {
    int v236 = (os_log_t *)sub_32A48(13);
    v237 = *v236;
    if (*v236 && os_log_type_enabled(*v236, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 735;
      _os_log_impl(&def_1E50E8, v237, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"DeviceState input mute control is NULL\"", buf, 0x12u);
    }
    v238 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v238, "DeviceState input mute control is NULL");
  }
  sub_3B7EC();
  if (((*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40) & 1) == 0)
  {
    v239 = (os_log_t *)sub_32A48(13);
    v240 = *v239;
    if (*v239 && os_log_type_enabled(*v239, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3935;
      _os_log_impl(&def_1E50E8, v240, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    v241 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v241, "Precondition failure.");
  }
  atomic_ullong v9 = pthread_self();
  if (!pthread_equal(v9, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire)))
  {
    unint64_t v10 = pthread_self();
    if (!pthread_equal(v10, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire)))
    {
      v251 = (os_log_t *)sub_32A48(13);
      v252 = *v251;
      if (*v251 && os_log_type_enabled(*v251, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3936;
        _os_log_impl(&def_1E50E8, v252, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      v253 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v253, "Precondition failure.");
    }
  }
  if ((*(unsigned int (**)(atomic_ullong *))(*a1 + 512))(a1))
  {
    v242 = (os_log_t *)sub_32A48(13);
    v243 = *v242;
    if (*v242 && os_log_type_enabled(*v242, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3937;
      _os_log_impl(&def_1E50E8, v243, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    v244 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v244, "Precondition failure.");
  }
  if (a1[126] != *(void *)(a2 + 16)) {
    operator new();
  }
  uint64_t v11 = (void *)a1[116];
  uint64_t v12 = v11[12];
  if (v12 != *(void *)(a2 + 32)) {
    operator new();
  }
  v11[12] = v12;
  v11[14] = 0;
  v11[15] = 0;
  sub_AD7F0((uint64_t)v11);
  uint64_t v13 = *(void *)(v257 + 960);
  uint64_t v14 = *(void *)(v13 + 96);
  if (v14 != *(void *)(a2 + 40)) {
    operator new();
  }
  *(void *)(v13 + 96) = v14;
  __int16 v15 = *(void **)(v257 + 968);
  uint64_t v16 = v15[12];
  if (v16 != *(void *)(a2 + 48)) {
    operator new();
  }
  unsigned char v15[12] = v16;
  v15[14] = 0;
  v15[15] = 0;
  sub_AD7F0((uint64_t)v15);
  uint64_t v17 = *(void *)(v257 + 976);
  uint64_t v18 = *(void *)(v17 + 96);
  if (v18 != *(void *)(a2 + 56)) {
    operator new();
  }
  *(void *)(v17 + 96) = v18;
  unint64_t v19 = v257;
  uint64_t v20 = *(void *)(v257 + 1008);
  uint64_t v21 = *(void *)(a2 + 16);
  *(void *)(v257 + 1008) = v21;
  sub_C564C(v257, v21, a4);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v266 = 0;
  if (v20)
  {
    memset(buf, 0, 24);
    sub_4CAB0(buf, *(const void **)(v20 + 144), *(void *)(v20 + 152), (uint64_t)(*(void *)(v20 + 152) - *(void *)(v20 + 144)) >> 3);
    *(_OWORD *)long long __p = *(_OWORD *)buf;
    uint64_t v266 = *(void *)&buf[16];
    (*(void (**)(uint64_t))(*(void *)v20 + 160))(v20);
    unint64_t v19 = v257;
    (*(void (**)(uint64_t, void, void))(*(void *)v20 + 208))(v20, 0, 0);
  }
  if (*(void *)(v19 + 1080))
  {
    char v22 = (os_log_t *)sub_32A48(1);
    __int16 v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void *)(*(void *)(v257 + 1080) + 8);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(v257 + 1008) + 128))(inAddress);
      int v25 = *(std::string **)inAddress;
      sub_4D60(&v276, (unsigned int *)(v257 + 576));
      if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v26 = &v276;
      }
      else {
        uint64_t v26 = (std::string *)v276.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4814;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v24;
      __int16 v271 = 2112;
      v272 = v25;
      __int16 v273 = 2080;
      v274 = v26;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting work group interval handle %p on AggregateDevice %@, VAD %s", buf, 0x30u);
      if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v276.__r_.__value_.__l.__data_);
      }
      sub_72924((uint64_t)inAddress);
    }
    v276.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(v257 + 1080) + 8);
    uint64_t v27 = *(void *)(v257 + 1008);
    strcpy(buf, "gwsobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_4581B0(v27, (uint64_t)buf, 8, (uint64_t)&v276);
  }
  (*(void (**)(void, void (*)(uint64_t, uint64_t, void *, double *, unsigned int *, double *, uint64_t), unint64_t))(**(void **)(v257 + 1008) + 208))(*(void *)(v257 + 1008), sub_CAF48, v257);
  sub_C654C((uint64_t *)v257, *(_DWORD *)(a2 + 8), a4 + 32);
  *(unsigned char *)(v257 + 1074) = *(_DWORD *)(a2 + 12) == 1;
  unint64_t v28 = (os_log_t *)sub_32A48(1);
  unint64_t v29 = *v28;
  if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(v257 + 1008) + 128))(inAddress);
    uint64_t v30 = *(void *)inAddress;
    sub_4D60(&v276, (unsigned int *)(v257 + 576));
    if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v31 = &v276;
    }
    else {
      unsigned int v31 = (std::string *)v276.__r_.__value_.__r.__words[0];
    }
    if (*(unsigned char *)(v257 + 1074)) {
      uint64_t v32 = "on";
    }
    else {
      uint64_t v32 = "off";
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 771;
    *(_WORD *)&unsigned char buf[18] = 2112;
    *(void *)&buf[20] = v30;
    __int16 v271 = 2080;
    v272 = v31;
    __int16 v273 = 2080;
    v274 = (std::string *)v32;
    _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AggregateDevice %@, VAD %s, configuration: sharing %s", buf, 0x30u);
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v276.__r_.__value_.__l.__data_);
    }
    sub_72924((uint64_t)inAddress);
  }
  sub_B73FC(v257, 1, *(unsigned __int8 *)(v257 + 600), (uint64_t *)(a4 + 8));
  sub_B73FC(v257, 0, *(unsigned __int8 *)(v257 + 601), (uint64_t *)(a4 + 8));
  v258 = (uint64_t *)(a4 + 8);
  sub_BB33C((uint64_t *)&v263, v257, a3, 1768845428);
  sub_BB33C((uint64_t *)&v261, v257, a3, 1869968496);
  int v33 = (uint64_t *)(a4 + 8);
  if (*(void **)(v257 + 1032) == v264[1])
  {
    unint64_t v34 = *(void **)(v257 + 1016);
    if (v34 == (void *)(v257 + 1024))
    {
LABEL_62:
      int v40 = 0;
      goto LABEL_66;
    }
    long long v35 = v263;
    while (*((_DWORD *)v34 + 7) == *((_DWORD *)v35 + 7))
    {
      __int16 v36 = (void *)v34[1];
      int v37 = v34;
      if (v36)
      {
        do
        {
          unint64_t v34 = v36;
          __int16 v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          unint64_t v34 = (void *)v37[2];
          BOOL v170 = *v34 == (void)v37;
          int v37 = v34;
        }
        while (!v170);
      }
      atomic_ullong v38 = (void *)v35[1];
      if (v38)
      {
        do
        {
          std::string::size_type v39 = v38;
          atomic_ullong v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          std::string::size_type v39 = (void *)v35[2];
          BOOL v170 = *v39 == (void)v35;
          long long v35 = v39;
        }
        while (!v170);
      }
      long long v35 = v39;
      if (v34 == (void *)(v257 + 1024)) {
        goto LABEL_62;
      }
    }
  }
  if ((void **)(v257 + 1016) != &v263) {
    sub_C6650((uint64_t **)(v257 + 1016), v263, v264);
  }
  int v41 = *(_DWORD *)(v257 + 8);
  strcpy(buf, "pcadtpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v42 = (unint64_t *)sub_EE470(v33, v41);
  sub_74758(v42, (int *)buf);
  int v43 = *(_DWORD *)(v257 + 8);
  strcpy(buf, "cfpatpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v44 = (unint64_t *)sub_EE470(v33, v43);
  sub_74758(v44, (int *)buf);
  int v40 = 1;
LABEL_66:
  if (*(void **)(v257 + 1056) == v262[1])
  {
    long long v45 = *(void **)(v257 + 1040);
    if (v45 == (void *)(v257 + 1048))
    {
LABEL_81:
      if (!v40) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
    __int16 v46 = v261;
    while (*((_DWORD *)v45 + 7) == *((_DWORD *)v46 + 7))
    {
      std::string::size_type v47 = (void *)v45[1];
      int v48 = v45;
      if (v47)
      {
        do
        {
          long long v45 = v47;
          std::string::size_type v47 = (void *)*v47;
        }
        while (v47);
      }
      else
      {
        do
        {
          long long v45 = (void *)v48[2];
          BOOL v170 = *v45 == (void)v48;
          int v48 = v45;
        }
        while (!v170);
      }
      __int16 v49 = (void *)v46[1];
      if (v49)
      {
        do
        {
          long long v50 = v49;
          __int16 v49 = (void *)*v49;
        }
        while (v49);
      }
      else
      {
        do
        {
          long long v50 = (void *)v46[2];
          BOOL v170 = *v50 == (void)v46;
          __int16 v46 = v50;
        }
        while (!v170);
      }
      __int16 v46 = v50;
      if (v45 == (void *)(v257 + 1048)) {
        goto LABEL_81;
      }
    }
  }
  if ((void **)(v257 + 1040) != &v261) {
    sub_C6650((uint64_t **)(v257 + 1040), v261, v262);
  }
  int v51 = *(_DWORD *)(v257 + 8);
  strcpy(buf, "pcadptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v33 = (uint64_t *)(a4 + 8);
  std::string::size_type v52 = (unint64_t *)sub_EE470(v258, v51);
  sub_74758(v52, (int *)buf);
  int v53 = *(_DWORD *)(v257 + 8);
  strcpy(buf, "cfpaptuo");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  CFArrayRef v54 = (unint64_t *)sub_EE470(v258, v53);
  sub_74758(v54, (int *)buf);
LABEL_86:
  int v55 = *(_DWORD *)(v257 + 8);
  strcpy(buf, "pcadbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  int v56 = (unint64_t *)sub_EE470(v33, v55);
  sub_74758(v56, (int *)buf);
  int v57 = *(_DWORD *)(v257 + 8);
  strcpy(buf, "cfpabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  std::string v58 = (unint64_t *)sub_EE470(v33, v57);
  sub_74758(v58, (int *)buf);
LABEL_87:
  int v59 = *(_DWORD *)(v257 + 8);
  strcpy(buf, "hcvatpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unsigned __int8 v60 = (unint64_t *)sub_EE470(v33, v59);
  sub_74758(v60, (int *)buf);
  int v61 = *(_DWORD *)(v257 + 8);
  strcpy(buf, "hcnetpni");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  std::string v62 = (unint64_t *)sub_EE470(v33, v61);
  sub_74758(v62, (int *)buf);
  __int16 v63 = *(uint64_t **)(v257 + 936);
  if (v63 != *(uint64_t **)(v257 + 944))
  {
    do
    {
      sub_BE8B8(v257, *v63);
      int64_t v64 = *(uint64_t **)(v257 + 944);
      int64_t v65 = (char *)v64 - (char *)(v63 + 1);
      if (v64 != v63 + 1) {
        memmove(v63, v63 + 1, (char *)v64 - (char *)(v63 + 1));
      }
      int v66 = *(uint64_t **)(v257 + 936);
      uint64_t v67 = (uint64_t *)((char *)v63 + v65);
      *(void *)(v257 + 944) = (char *)v63 + v65;
      __int16 v63 = v66;
    }
    while (v66 != v67);
  }
  if (*(_DWORD *)(a2 + 12) == 1)
  {
    uint64_t v68 = *(void **)(v257 + 1040);
    if (v68 != (void *)(v257 + 1048))
    {
      __int16 v69 = (uint64_t *)(a2 + 72);
      do
      {
        sub_3A8A8();
        uint64_t v70 = sub_33438(*((_DWORD *)v68 + 7));
        unint64_t v71 = *(std::__shared_weak_count **)(v70 + 96);
        v276.__r_.__value_.__r.__words[0] = *(void *)(v70 + 88);
        v276.__r_.__value_.__l.__size_ = (std::string::size_type)v71;
        if (v71) {
          atomic_fetch_add_explicit(&v71->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_43F38((uint64_t *)buf, (uint64_t *)&v276, "", 4612);
        unsigned int v72 = (*(uint64_t (**)(void))(**(void **)(*(void *)buf + 192) + 120))(*(void *)(*(void *)buf + 192));
        uint64_t v73 = *v69;
        if (!*v69) {
          goto LABEL_107;
        }
        uint64_t v74 = a2 + 72;
        do
        {
          unsigned int v75 = *(_DWORD *)(v73 + 32);
          BOOL v76 = v75 >= v72;
          if (v75 >= v72) {
            BOOL v77 = (uint64_t *)v73;
          }
          else {
            BOOL v77 = (uint64_t *)(v73 + 8);
          }
          if (v76) {
            uint64_t v74 = v73;
          }
          uint64_t v73 = *v77;
        }
        while (*v77);
        if ((uint64_t *)v74 == v69 || v72 < *(_DWORD *)(v74 + 32)) {
LABEL_107:
        }
          uint64_t v74 = a2 + 72;
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v71) {
          std::__shared_weak_count::__release_weak(v71);
        }
        if ((uint64_t *)v74 != v69)
        {
          long long v78 = (os_log_t *)sub_32A48(17);
          uint64_t v79 = *v78;
          if (*v78 && os_log_type_enabled(*v78, OS_LOG_TYPE_DEFAULT))
          {
            sub_4D60(&v276, (unsigned int *)(v257 + 576));
            int v80 = &v276;
            if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v80 = (std::string *)v276.__r_.__value_.__r.__words[0];
            }
            int v81 = *((_DWORD *)v68 + 7);
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4616;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v80;
            __int16 v271 = 1024;
            LODWORD(v272) = v81;
            _os_log_impl(&def_1E50E8, v79, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s creating volume control with element %u", buf, 0x22u);
            if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v276.__r_.__value_.__l.__data_);
            }
          }
          uint64_t v82 = (void *)sub_BFA58(v257, 0x766C6D65u);
          v82[12] = *(void *)(v74 + 40);
          v82[14] = 0;
          v82[15] = 0;
          sub_AD7F0((uint64_t)v82);
          CFTypeRef v83 = *(void **)(v257 + 944);
          unint64_t v84 = *(void *)(v257 + 952);
          if ((unint64_t)v83 >= v84)
          {
            uint64_t v86 = *(void *)(v257 + 936);
            uint64_t v87 = ((uint64_t)v83 - v86) >> 3;
            if ((unint64_t)(v87 + 1) >> 61) {
LABEL_325:
            }
              sub_60548();
            uint64_t v88 = v84 - v86;
            uint64_t v89 = v88 >> 2;
            if (v88 >> 2 <= (unint64_t)(v87 + 1)) {
              uint64_t v89 = v87 + 1;
            }
            if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v90 = v89;
            }
            if (v90) {
              unint64_t v90 = (unint64_t)sub_106EC(v90);
            }
            else {
              uint64_t v91 = 0;
            }
            uint64_t v92 = (void *)(v90 + 8 * v87);
            *uint64_t v92 = v82;
            std::string::size_type v85 = v92 + 1;
            uint64_t v93 = *(char **)(v257 + 944);
            double v94 = *(char **)(v257 + 936);
            if (v93 == v94)
            {
              uint64_t v96 = (void *)v257;
            }
            else
            {
              do
              {
                uint64_t v95 = *((void *)v93 - 1);
                v93 -= 8;
                *--uint64_t v92 = v95;
              }
              while (v93 != v94);
              uint64_t v96 = (void *)v257;
              uint64_t v93 = *(char **)(v257 + 936);
            }
            v96[117] = v92;
            v96[118] = v85;
            v96[119] = v90 + 8 * v91;
            if (v93) {
              operator delete(v93);
            }
          }
          else
          {
            *CFTypeRef v83 = v82;
            std::string::size_type v85 = v83 + 1;
          }
          *(void *)(v257 + 944) = v85;
        }
        uint64_t v97 = (void *)v68[1];
        if (v97)
        {
          do
          {
            uint64_t v98 = v97;
            uint64_t v97 = (void *)*v97;
          }
          while (v97);
        }
        else
        {
          do
          {
            uint64_t v98 = (void *)v68[2];
            BOOL v170 = *v98 == (void)v68;
            uint64_t v68 = v98;
          }
          while (!v170);
        }
        uint64_t v68 = v98;
      }
      while (v98 != (void *)(v257 + 1048));
    }
  }
  char v99 = *(uint64_t **)(v257 + 984);
  if (v99 != *(uint64_t **)(v257 + 992))
  {
    while (1)
    {
      sub_BE8B8(v257, *v99);
      unint64_t v100 = *(uint64_t **)(v257 + 992);
      int64_t v101 = (char *)v100 - (char *)(v99 + 1);
      if (v100 == v99 + 1) {
        break;
      }
      memmove(v99, v99 + 1, (char *)v100 - (char *)(v99 + 1));
      *(void *)(v257 + 992) = (char *)v99 + v101;
    }
    *(void *)(v257 + 992) = v100 - 1;
  }
  std::string::size_type v102 = *(unsigned int **)(a2 + 88);
  for (uint64_t i = *(unsigned int **)(a2 + 96); v102 != i; v102 += 4)
  {
    CFTypeID v104 = (os_log_t *)sub_32A48(17);
    uint64_t v105 = *v104;
    if (*v104 && os_log_type_enabled(*v104, OS_LOG_TYPE_DEFAULT))
    {
      sub_4D60(&v276, (unsigned int *)(v257 + 576));
      int v106 = &v276;
      if ((v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v106 = (std::string *)v276.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v107 = (std::string *)*v102;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4638;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v106;
      __int16 v271 = 2048;
      v272 = v107;
      _os_log_impl(&def_1E50E8, v105, OS_LOG_TYPE_DEFAULT, "%25s:%-5d %s creating input channel volume control with element %lu", buf, 0x26u);
      if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v276.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v108 = (void *)sub_BFA58(v257, 0x766C6D65u);
    v108[12] = *((void *)v102 + 1);
    v108[14] = 0;
    v108[15] = 0;
    sub_AD7F0((uint64_t)v108);
    uint64_t v109 = *(void **)(v257 + 992);
    unint64_t v110 = *(void *)(v257 + 1000);
    if ((unint64_t)v109 >= v110)
    {
      uint64_t v112 = *(void *)(v257 + 984);
      uint64_t v113 = ((uint64_t)v109 - v112) >> 3;
      if ((unint64_t)(v113 + 1) >> 61) {
        goto LABEL_325;
      }
      uint64_t v114 = v110 - v112;
      uint64_t v115 = v114 >> 2;
      if (v114 >> 2 <= (unint64_t)(v113 + 1)) {
        uint64_t v115 = v113 + 1;
      }
      if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v116 = v115;
      }
      if (v116) {
        unint64_t v116 = (unint64_t)sub_106EC(v116);
      }
      else {
        uint64_t v117 = 0;
      }
      uint64_t v118 = (void *)(v116 + 8 * v113);
      *uint64_t v118 = v108;
      CFIndex v111 = v118 + 1;
      uint64_t v119 = *(char **)(v257 + 992);
      unint64_t v120 = *(char **)(v257 + 984);
      if (v119 == v120)
      {
        long long v122 = (void *)v257;
      }
      else
      {
        do
        {
          uint64_t v121 = *((void *)v119 - 1);
          v119 -= 8;
          *--uint64_t v118 = v121;
        }
        while (v119 != v120);
        long long v122 = (void *)v257;
        uint64_t v119 = *(char **)(v257 + 984);
      }
      v122[123] = v118;
      v122[124] = v111;
      v122[125] = v116 + 8 * v117;
      if (v119) {
        operator delete(v119);
      }
    }
    else
    {
      *uint64_t v109 = v108;
      CFIndex v111 = v109 + 1;
    }
    *(void *)(v257 + 992) = v111;
  }
  uint64_t v123 = *(uint64_t **)(v257 + 632);
  if (!v123) {
    operator new();
  }
  uint64_t v124 = v123[2];
  v268 = v123 + 2;
  char v269 = (*(uint64_t (**)(void))(v124 + 16))();
  if (!v123[13])
  {
    std::string::size_type v201 = (os_log_t *)sub_32A48(13);
    int v202 = *v201;
    if (*v201)
    {
      if (os_log_type_enabled(*v201, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 217;
        _os_log_impl(&def_1E50E8, v202, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mDevicePropertyCache is NULL\"", buf, 0x12u);
      }
    }
  }
  sub_27C5AC(v123[13], *(void *)(a2 + 16), v258);
  if (!v123[14])
  {
    v203 = (os_log_t *)sub_32A48(13);
    v204 = *v203;
    if (*v203)
    {
      if (os_log_type_enabled(*v203, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 221;
        _os_log_impl(&def_1E50E8, v204, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mInputVolumeControlPropertyCache is NULL\"", buf, 0x12u);
      }
    }
  }
  sub_27C5AC(v123[14], *(void *)(a2 + 48), v258);
  if (!v123[15])
  {
    int v205 = (os_log_t *)sub_32A48(13);
    std::string::size_type v206 = *v205;
    if (*v205)
    {
      if (os_log_type_enabled(*v205, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 225;
        _os_log_impl(&def_1E50E8, v206, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mOutputVolumeControlPropertyCache is NULL\"", buf, 0x12u);
      }
    }
  }
  sub_27C5AC(v123[15], *(void *)(a2 + 32), v258);
  if (!v123[16])
  {
    int v207 = (os_log_t *)sub_32A48(13);
    v208 = *v207;
    if (*v207)
    {
      if (os_log_type_enabled(*v207, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 229;
        _os_log_impl(&def_1E50E8, v208, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mInputMutePropertyCache is NULL\"", buf, 0x12u);
      }
    }
  }
  sub_27C5AC(v123[16], *(void *)(a2 + 56), v258);
  if (!v123[17])
  {
    uint64_t v209 = (os_log_t *)sub_32A48(13);
    v210 = *v209;
    if (*v209)
    {
      if (os_log_type_enabled(*v209, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 233;
        _os_log_impl(&def_1E50E8, v210, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mOutputMutePropertyCache is NULL\"", buf, 0x12u);
      }
    }
  }
  sub_27C5AC(v123[17], *(void *)(a2 + 40), v258);
  uint64_t v125 = v123 + 18;
  uint64_t v126 = (uint64_t *)v123[19];
  if (v126 != v123 + 18)
  {
    do
    {
      sub_CFB84(v123 + 30, v126[2], v126[2]);
      sub_27C1F4(v126[2]);
      uint64_t v126 = (uint64_t *)v126[1];
    }
    while (v126 != v125);
  }
  *(void *)AudioObjectPropertyAddress buf = buf;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0;
  uint64_t v127 = sub_BC8B0(v123[1], 1);
  sub_46A4C((uint64_t *)&v276, v127);
  std::string::size_type v128 = v276.__r_.__value_.__r.__words[0];
  v260 = v123;
  if ((std::string::size_type *)v276.__r_.__value_.__l.__data_ != &v276.__r_.__value_.__r.__words[1])
  {
    char v129 = (uint64_t *)(a2 + 72);
    do
    {
      sub_3A8A8();
      uint64_t v130 = sub_33438(*(_DWORD *)(v128 + 28));
      uint64_t v131 = *(std::__shared_weak_count **)(v130 + 96);
      v267[0] = *(void *)(v130 + 88);
      v267[1] = (uint64_t)v131;
      if (v131) {
        atomic_fetch_add_explicit(&v131->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_43F38((uint64_t *)inAddress, v267, "", 251);
      unsigned int v132 = (*(uint64_t (**)(void))(**(void **)(*(void *)inAddress + 192) + 120))(*(void *)(*(void *)inAddress + 192));
      uint64_t v133 = *v129;
      if (!*v129) {
        goto LABEL_195;
      }
      uint64_t v134 = a2 + 72;
      do
      {
        unsigned int v135 = *(_DWORD *)(v133 + 32);
        BOOL v136 = v135 >= v132;
        if (v135 >= v132) {
          uint64_t v137 = (uint64_t *)v133;
        }
        else {
          uint64_t v137 = (uint64_t *)(v133 + 8);
        }
        if (v136) {
          uint64_t v134 = v133;
        }
        uint64_t v133 = *v137;
      }
      while (*v137);
      if ((uint64_t *)v134 == v129 || v132 < *(_DWORD *)(v134 + 32)) {
LABEL_195:
      }
        uint64_t v134 = a2 + 72;
      if (*(void *)&inAddress[8]) {
        sub_4636C(*(std::__shared_weak_count **)&inAddress[8]);
      }
      if (v131) {
        std::__shared_weak_count::__release_weak(v131);
      }
      if ((uint64_t *)v134 != v129)
      {
        if (sub_CD7F4(v260[1], *(_DWORD *)(v128 + 28))) {
          operator new();
        }
        v215 = (os_log_t *)sub_32A48(13);
        v216 = *v215;
        if (*v215)
        {
          if (os_log_type_enabled(*v215, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioObjectPropertyAddress inAddress = 136315394;
            *(void *)&inAddress[4] = "VirtualAudio_DevicePropertyManager.cpp";
            *(_WORD *)&inAddress[12] = 1024;
            *(_DWORD *)&inAddress[14] = 255;
            _os_log_impl(&def_1E50E8, v216, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [theVolumeControl is NULL]: \"couldn't get a volume control from device.\"", inAddress, 0x12u);
          }
        }
        v217 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v217, "couldn't get a volume control from device.");
      }
      double v138 = *(std::string **)(v128 + 8);
      if (v138)
      {
        do
        {
          CFDictionaryRef v139 = v138;
          double v138 = (std::string *)v138->__r_.__value_.__r.__words[0];
        }
        while (v138);
      }
      else
      {
        do
        {
          CFDictionaryRef v139 = *(std::string **)(v128 + 16);
          BOOL v170 = v139->__r_.__value_.__r.__words[0] == v128;
          std::string::size_type v128 = (std::string::size_type)v139;
        }
        while (!v170);
      }
      std::string::size_type v128 = (std::string::size_type)v139;
      uint64_t v123 = v260;
    }
    while (v139 != (std::string *)&v276.__r_.__value_.__r.__words[1]);
  }
  if (v125 != (uint64_t *)buf) {
    sub_CFC3C(v125, *(uint64_t *)&buf[8], (uint64_t)buf);
  }
  sub_463E0((void *)v276.__r_.__value_.__l.__size_);
  sub_45F50(buf);
  CFStringRef v140 = v123 + 21;
  uint64_t v141 = v123[22];
  if ((uint64_t *)v141 != v123 + 21)
  {
    do
    {
      sub_CFB84(v123 + 30, *(void *)(v141 + 16), *(void *)(v141 + 16));
      sub_27C1F4(*(void *)(v141 + 16));
      uint64_t v141 = *(void *)(v141 + 8);
    }
    while ((unsigned char *)v141 != v140);
  }
  *(void *)AudioObjectPropertyAddress buf = buf;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0;
  v142 = *(int **)(a2 + 88);
  if (v142 != *(int **)(a2 + 96))
  {
    if (sub_CD888(v123[1], *v142)) {
      operator new();
    }
    v212 = (os_log_t *)sub_32A48(13);
    uint64_t v213 = *v212;
    if (*v212 && os_log_type_enabled(*v212, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v276.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v276.__r_.__value_.__r.__words + 4) = (std::string::size_type)"VirtualAudio_DevicePropertyManager.cpp";
      WORD2(v276.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&v276.__r_.__value_.__r.__words[1] + 6) = 293;
      _os_log_impl(&def_1E50E8, v213, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [theVolumeControl is NULL]: \"couldn't get a volume control from device.\"", (uint8_t *)&v276, 0x12u);
    }
    v214 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v214, "couldn't get a volume control from device.");
  }
  if (v140 != buf) {
    sub_CFC3C(v123 + 21, *(uint64_t *)&buf[8], (uint64_t)buf);
  }
  sub_45F50(buf);
  char v143 = 0;
  uint64_t v144 = 0;
  LOWORD(v267[0]) = 256;
  v254 = v123 + 27;
  int v255 = v123 + 24;
  uint64_t v145 = v123 + 30;
  do
  {
    char v256 = v143;
    int v146 = *((unsigned __int8 *)v267 + v144);
    if (*((unsigned char *)v267 + v144)) {
      uint64_t v147 = v254;
    }
    else {
      uint64_t v147 = v255;
    }
    *(void *)AudioObjectPropertyAddress buf = buf;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0;
    uint64_t v148 = v260[1];
    uint64_t v149 = 504;
    if (v146)
    {
      uint64_t v149 = 528;
      uint64_t v150 = 520;
    }
    else
    {
      uint64_t v150 = 496;
    }
    if (((*(void *)(v148 + v149) - *(void *)(v148 + v150)) & 0x7FFFFFFF8) != 0)
    {
      unint64_t v151 = 0;
      do
      {
        uint64_t v152 = v148 + 496;
        if (v146) {
          uint64_t v153 = 520;
        }
        else {
          uint64_t v153 = 496;
        }
        if (v146) {
          uint64_t v152 = v148 + 520;
        }
        uint64_t v154 = *(void *)(v148 + v153);
        unint64_t v155 = (*(void *)(v152 + 8) - v154) >> 3;
        uint64_t v156 = v147;
        do
        {
          uint64_t v156 = (uint64_t *)v156[1];
          if (v156 == v147) {
            operator new();
          }
          if (v155 <= v151) {
            uint64_t v157 = 0;
          }
          else {
            uint64_t v157 = *(void *)(v154 + 8 * v151);
          }
          uint64_t v158 = (void *)v156[2];
        }
        while (*v158 != v157);
        uint64_t v159 = *(void *)(a2 + 16);
        if (v159) {
          uint64_t v160 = (*(uint64_t (**)(uint64_t, BOOL, unint64_t))(*(void *)v159 + 96))(v159, v146 != 0, v151);
        }
        else {
          uint64_t v160 = 0;
        }
        sub_27C5AC((uint64_t)v158, v160, v258);
        if (buf != (unsigned char *)v156)
        {
          uint64_t v161 = (unsigned char *)v156[1];
          if (v161 != buf)
          {
            uint64_t v162 = *v156;
            *(void *)(v162 + 8) = v161;
            *(void *)v156[1] = v162;
            uint64_t v163 = *(void *)buf;
            *(void *)(*(void *)buf + 8) = v156;
            uint64_t *v156 = v163;
            v156[1] = (uint64_t)buf;
            --v147[2];
            *(void *)AudioObjectPropertyAddress buf = v156;
            ++*(void *)&buf[16];
          }
        }
        ++v151;
        uint64_t v148 = v260[1];
        uint64_t v164 = 504;
        if (v146) {
          uint64_t v164 = 528;
        }
        uint64_t v165 = *(void *)(v148 + v164);
        if (v146) {
          uint64_t v166 = 520;
        }
        else {
          uint64_t v166 = 496;
        }
      }
      while (v151 < ((unint64_t)(v165 - *(void *)(v148 + v166)) >> 3));
    }
    for (uint64_t j = v147; ; sub_27C1F4(j[2]))
    {
      uint64_t j = (uint64_t *)j[1];
      if (j == v147) {
        break;
      }
      sub_CFB84(v145, j[2], j[2]);
    }
    if (v147 != (uint64_t *)buf) {
      sub_CFC3C(v147, *(uint64_t *)&buf[8], (uint64_t)buf);
    }
    sub_45F50(buf);
    char v143 = 1;
    uint64_t v144 = 1;
  }
  while ((v256 & 1) == 0);
  sub_3BCAC(&v268);
  (*(void (**)(void, void **))(**(void **)(v257 + 1008) + 496))(*(void *)(v257 + 1008), __p);
  sub_B9CE8(v257);
  sub_C683C(v257);
  char v168 = 0;
  char v169 = 1;
  while (1)
  {
    BOOL v170 = (v169 & 1) == 0;
    uint64_t v171 = (v169 & 1) != 0 ? 504 : 528;
    uint64_t v172 = v170 ? 520 : 496;
    uint64_t v173 = v170 ? v257 + 520 : v257 + 496;
    unint64_t v174 = *(void *)(v257 + v171) - *(void *)(v257 + v172);
    if ((v174 & 0x7FFFFFFF8) != 0) {
      break;
    }
    int v180 = 0;
LABEL_280:
    char v169 = 0;
    char v182 = v180 | v168;
    char v168 = 1;
    if (v182) {
      goto LABEL_283;
    }
  }
  unint64_t v175 = 0;
  unint64_t v176 = (v174 >> 3);
  while (1)
  {
    uint64_t v177 = *(void *)(v257 + v172);
    uint64_t v178 = v175 >= (*(void *)(v173 + 8) - v177) >> 3 ? 0 : *(void *)(v177 + 8 * v175);
    if (sub_EBCBC(*(void *)(v178 + 120), 1885629550)) {
      break;
    }
    int v179 = sub_EBCBC(*(void *)(v178 + 120), 1886743662);
    int v180 = v179;
    if (++v175 >= v176) {
      char v181 = 1;
    }
    else {
      char v181 = v179;
    }
    if (v181) {
      goto LABEL_280;
    }
  }
  int v180 = 1;
LABEL_283:
  sub_C6FD8((void *)v257, v180, 1);
  sub_C7754(v257);
  sub_C8674(v257);
  sub_BF03C(v257);
  sub_D075C(*(void *)(v257 + 632), v258);
  sub_BF1D0(v257);
  inAddress[9] = 0;
  *(_WORD *)&inAddress[10] = 0;
  strcpy(inAddress, "tptbbolg");
  uint64_t v183 = *(void *)(v257 + 1008);
  v184 = (void *)(v183 + 184);
  for (uint64_t k = *(void **)(v183 + 192); ; uint64_t k = (void *)k[1])
  {
    if (k == v184)
    {
      uint64_t v190 = 0;
      uint64_t v191 = 0;
      goto LABEL_292;
    }
    std::string::size_type v186 = (std::__shared_weak_count *)k[3];
    if (v186)
    {
      int v187 = std::__shared_weak_count::lock(v186);
      if (v187) {
        break;
      }
    }
LABEL_290:
    ;
  }
  v188 = v187;
  uint64_t v189 = k[2];
  if (!v189 || !(*(unsigned int (**)(void, unsigned char *))(*(void *)v189 + 16))(k[2], inAddress))
  {
    sub_4636C(v188);
    goto LABEL_290;
  }
  unsigned int v211 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 120))(v189);
  sub_4636C(v188);
  uint64_t v191 = v211;
  uint64_t v190 = 0x100000000;
LABEL_292:
  unint64_t v192 = v191 | v190;
  if (v192 <= 0x100000000) {
    LODWORD(v192) = 0;
  }
  v193 = (unsigned int *)(v257 + 1088);
  atomic_store(v192, (unsigned int *)(v257 + 1088));
  AudioObjectID v194 = atomic_load(v193);
  int v195 = (os_log_t *)sub_32A48(1);
  std::string::size_type v196 = *v195;
  if (*v195 && os_log_type_enabled(*v195, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 871;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v194;
    _os_log_impl(&def_1E50E8, v196, OS_LOG_TYPE_INFO, "%25s:%-5d Set timestamp object ID to %u", buf, 0x18u);
  }
  if (v194)
  {
    OSStatus PropertyDataSize = AudioObjectGetPropertyDataSize(v194, (const AudioObjectPropertyAddress *)inAddress, 0, 0, (UInt32 *)(v257 + 1092));
    if (PropertyDataSize)
    {
      v245 = (os_log_t *)sub_32A48(13);
      v246 = *v245;
      if (*v245 && os_log_type_enabled(*v245, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 877;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = PropertyDataSize;
        _os_log_impl(&def_1E50E8, v246, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (result) [error result is an error]: \"Error %u Get timestamp object ID Property data size\"", buf, 0x18u);
      }
      v247 = __cxa_allocate_exception(0x10uLL);
      *(void *)v247 = &off_6414D8;
      v247[2] = PropertyDataSize;
    }
  }
  v198 = (os_log_t *)sub_32A48(1);
  v199 = *v198;
  if (*v198 && os_log_type_enabled(*v198, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(std::string *__return_ptr))(*(void *)v257 + 96))(&v276);
    int v200 = (v276.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v276
         : (std::string *)v276.__r_.__value_.__r.__words[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 880;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v200;
    _os_log_impl(&def_1E50E8, v199, OS_LOG_TYPE_DEBUG, "%25s:%-5d Reconfigured VirtualAudio_Device: %s.", buf, 0x1Cu);
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v276.__r_.__value_.__l.__data_);
    }
  }
  sub_463E0(v262[0]);
  sub_463E0(v264[0]);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_C459C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,int buf,uint64_t a34,__int16 a35,__int16 a36,int a37,__int16 a38,__int16 a39,__int16 a40,__int16 a41,__int16 a42,__int16 a43,int a44,int a45)
{
  __cxa_free_exception(v45);
  std::string::size_type v47 = *(uint64_t **)(v46 + 112);
  *(void *)(v46 + 112) = 0;
  if (v47) {
    sub_CF0A4(v47);
  }
  int v48 = *(uint64_t **)(v46 + 104);
  *(void *)(v46 + 104) = 0;
  if (v48) {
    sub_CF0A4(v48);
  }
  sub_AEF0C(a17);
  operator delete();
}

void sub_C564C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v86 = a3;
  if (!a2)
  {
    unint64_t v71 = (os_log_t *)sub_32A48(13);
    unsigned int v72 = *v71;
    if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v91 = 1024;
      int v92 = 4358;
      _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v5 = sub_32A48(1);
  uint64_t v6 = sub_32A48(4);
  char v7 = 0;
  uint64_t v8 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v9 = *(void *)(v5 + 8);
  while (1)
  {
    uint64_t v10 = *(int *)&buf[4 * v8];
    char v11 = v7;
    if (((v9 & v10) != 0) != ((*(void *)(v6 + 8) & v10) != 0)) {
      break;
    }
    char v7 = 1;
    uint64_t v8 = 1;
    if (v11)
    {
      if ((v9 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }
  }
  if ((v9 & v10) == 0) {
    uint64_t v5 = v6;
  }
  if (*(void *)(v5 + 8))
  {
LABEL_10:
    uint64_t v12 = *(NSObject **)v5;
    if (v12 && os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v13 = (*(void *)(a1 + 504) - *(void *)(a1 + 496)) >> 3;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v91 = 1024;
      int v92 = 4360;
      __int16 v93 = 1024;
      LODWORD(v94) = v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Previous input stream count: %u", buf, 0x18u);
    }
  }
LABEL_13:
  uint64_t v14 = sub_32A48(1);
  uint64_t v15 = sub_32A48(4);
  char v16 = 0;
  uint64_t v17 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v18 = *(void *)(v14 + 8);
  while (1)
  {
    uint64_t v19 = *(int *)&buf[4 * v17];
    char v20 = v16;
    if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
      break;
    }
    char v16 = 1;
    uint64_t v17 = 1;
    if (v20)
    {
      if ((v18 & 1) == 0) {
        goto LABEL_24;
      }
      goto LABEL_21;
    }
  }
  if ((v18 & v19) == 0) {
    uint64_t v14 = v15;
  }
  if (*(void *)(v14 + 8))
  {
LABEL_21:
    uint64_t v21 = *(NSObject **)v14;
    if (v21 && os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v22 = (*(void *)(a1 + 528) - *(void *)(a1 + 520)) >> 3;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v91 = 1024;
      int v92 = 4361;
      __int16 v93 = 1024;
      LODWORD(v94) = v22;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Previous output stream count: %u", buf, 0x18u);
    }
  }
LABEL_24:
  uint64_t v23 = sub_32A48(1);
  uint64_t v24 = sub_32A48(4);
  char v25 = 0;
  uint64_t v26 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v27 = *(void *)(v23 + 8);
  while (1)
  {
    uint64_t v28 = *(int *)&buf[4 * v26];
    char v29 = v25;
    if (((v27 & v28) != 0) != ((*(void *)(v24 + 8) & v28) != 0)) {
      break;
    }
    char v25 = 1;
    uint64_t v26 = 1;
    if (v29)
    {
      if ((v27 & 1) == 0) {
        goto LABEL_35;
      }
      goto LABEL_32;
    }
  }
  if ((v27 & v28) == 0) {
    uint64_t v23 = v24;
  }
  if (*(void *)(v23 + 8))
  {
LABEL_32:
    uint64_t v30 = *(NSObject **)v23;
    if (v30 && os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      int v31 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v91 = 1024;
      int v92 = 4362;
      __int16 v93 = 1024;
      LODWORD(v94) = v31;
      _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d New core device input stream count: %u", buf, 0x18u);
    }
  }
LABEL_35:
  uint64_t v32 = sub_32A48(1);
  uint64_t v33 = sub_32A48(4);
  char v34 = 0;
  uint64_t v35 = 0;
  *(void *)AudioObjectPropertyAddress buf = 0x100000002;
  uint64_t v36 = *(void *)(v32 + 8);
  while (1)
  {
    uint64_t v37 = *(int *)&buf[4 * v35];
    char v38 = v34;
    if (((v36 & v37) != 0) != ((*(void *)(v33 + 8) & v37) != 0)) {
      break;
    }
    char v34 = 1;
    uint64_t v35 = 1;
    if (v38)
    {
      if ((v36 & 1) == 0) {
        goto LABEL_46;
      }
      goto LABEL_43;
    }
  }
  if ((v36 & v37) == 0) {
    uint64_t v32 = v33;
  }
  if (*(void *)(v32 + 8))
  {
LABEL_43:
    std::string::size_type v39 = *(NSObject **)v32;
    if (v39 && os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      int v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, 1);
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v91 = 1024;
      int v92 = 4363;
      __int16 v93 = 1024;
      LODWORD(v94) = v40;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d New core device output stream count: %u", buf, 0x18u);
    }
  }
LABEL_46:
  uint64_t v42 = *(void *)(a1 + 496);
  uint64_t v41 = *(void *)(a1 + 504);
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 88))(a2, 0) == ((unint64_t)(v41 - v42) >> 3))
  {
    uint64_t v44 = *(void *)(a1 + 528);
    uint64_t v45 = *(void *)(a1 + 520);
    BOOL v46 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 88))(a2, 1) != (unint64_t)(v44 - v45) >> 3;
  }
  else
  {
    BOOL v46 = 1;
  }
  BOOL v75 = v46;
  std::string::size_type v85 = (void *)(a1 + 496);
  BOOL v77 = (void *)(a1 + 504);
  unint64_t v84 = (void *)(a1 + 520);
  BOOL v76 = (void *)(a1 + 528);
  uint64_t v88 = v86 + 32;
  int v81 = (uint64_t *)(v86 + 8);
  int v47 = 1;
  *(void *)&long long v43 = 136315906;
  long long v83 = v43;
  do
  {
    int v79 = v47;
    BOOL v48 = (v47 & 1) == 0;
    __int16 v49 = v77;
    if (v48) {
      __int16 v49 = v76;
    }
    if (v48) {
      long long v50 = v84;
    }
    else {
      long long v50 = v85;
    }
    unint64_t v51 = *v49 - *v50;
    if ((v51 & 0x7FFFFFFF8) != 0)
    {
      uint64_t v52 = *(void *)(*v50 + 8 * ((v51 >> 3) - 1));
      sub_365214((char *)a1, v52);
      sub_EC6F4(v52);
      operator new();
    }
    uint64_t v53 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, (v79 ^ 1) & 1);
    if (v53)
    {
      unsigned int v54 = 0;
      int v82 = v79 & 1;
      int v55 = "output";
      if (v79) {
        int v55 = "input";
      }
      long long v78 = v55;
      int v87 = 1;
      int v80 = v79 ^ 1;
      do
      {
        int v89 = 0;
        if (!AudioObjectCreate()) {
          operator new();
        }
        uint64_t v53 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 88))(a2, (v79 ^ 1) & 1);
        ++v54;
      }
      while (v54 < v53);
    }
    int v47 = 0;
  }
  while ((v79 & 1) != 0);
  if (v75)
  {
    if (((*(void *)(*(void *)(a1 + 464) + 16) - *(void *)(*(void *)(a1 + 464) + 8)) & 0x7FFFFFFF0) != 0)
    {
      uint64_t v53 = sub_32A48(1);
      int v56 = *(NSObject **)v53;
      if (*(void *)v53)
      {
        uint64_t v53 = os_log_type_enabled(*(os_log_t *)v53, OS_LOG_TYPE_ERROR);
        if (v53)
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          __int16 v91 = 1024;
          int v92 = 4413;
          _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d there is more than 1 IOProc", buf, 0x12u);
        }
      }
    }
    int v57 = *(uint64_t **)(*(void *)(a1 + 464) + 8);
    if (*(uint64_t **)(*(void *)(a1 + 464) + 16) == v57) {
      uint64_t v58 = 0;
    }
    else {
      uint64_t v58 = *v57;
    }
    char v59 = 1;
    do
    {
      char v60 = v59;
      BOOL v61 = (v59 & 1) == 0;
      std::string v62 = v77;
      if (v61) {
        std::string v62 = v76;
      }
      __int16 v63 = v85;
      if (v61) {
        __int16 v63 = v84;
      }
      uint64_t v64 = (*v62 - *v63) >> 3;
      __chkstk_darwin(v53);
      uint64_t v67 = &v74[-v66];
      if (v64) {
        memset(&v74[-v66], 1, v65);
      }
      sub_CB59C(*(void *)(a1 + 464), v58, v60 & 1, v64, v67);
      int v68 = *(_DWORD *)(a1 + 8);
      if (v60) {
        int v69 = 1768845428;
      }
      else {
        int v69 = 1869968496;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 1937077093;
      *(_DWORD *)&uint8_t buf[4] = v69;
      *(_DWORD *)&buf[8] = 0;
      uint64_t v70 = (unint64_t *)sub_EE470(v81, v68);
      sub_74758(v70, (int *)buf);
      char v59 = 0;
    }
    while ((v60 & 1) != 0);
  }
}

void sub_C647C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_C654C(uint64_t *result, int a2, uint64_t a3)
{
  if (*((_DWORD *)result + 146) != a2)
  {
    uint64_t v4 = result;
    *((_DWORD *)result + 146) = a2;
    sub_BF1D0((uint64_t)result);
    unsigned int v5 = *((_DWORD *)v4 + 2);
    uint64_t v6 = sub_32A48(2);
    if (*(unsigned char *)(v6 + 8))
    {
      char v7 = *(NSObject **)v6;
      if (*(void *)v6)
      {
        if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
        {
          int v8 = 136315650;
          uint64_t v9 = "VirtualAudio_Utilities.cpp";
          __int16 v10 = 1024;
          int v11 = 345;
          __int16 v12 = 1024;
          unsigned int v13 = v5;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device ID: %u", (uint8_t *)&v8, 0x18u);
        }
      }
    }
    return sub_6CB40((uint64_t *)(a3 + 32), v5, v5);
  }
  return result;
}

uint64_t **sub_C6650(uint64_t **result, void *a2, void *a3)
{
  unsigned int v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v8 = result + 1;
    char v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    double v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v9 = v6[1];
    }
    else {
      uint64_t v9 = (uint64_t)v6;
    }
    uint64_t v27 = result;
    uint64_t v28 = (void *)v9;
    uint64_t v29 = v9;
    if (v9)
    {
      __int16 v10 = sub_6CA9C(v9);
      uint64_t v28 = v10;
      if (a2 != a3)
      {
        int v11 = a2;
        do
        {
          uint64_t v12 = (uint64_t)v10;
          unsigned int v13 = *((_DWORD *)v11 + 7);
          *(_DWORD *)(v9 + 28) = v13;
          uint64_t v14 = *v8;
          uint64_t v15 = v5 + 1;
          char v16 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                uint64_t v15 = (uint64_t **)v14;
                if (v13 >= *((_DWORD *)v14 + 7)) {
                  break;
                }
                uint64_t v14 = (uint64_t *)*v14;
                char v16 = v15;
                if (!*v15) {
                  goto LABEL_14;
                }
              }
              uint64_t v14 = (uint64_t *)v14[1];
            }
            while (v14);
            char v16 = v15 + 1;
          }
LABEL_14:
          sub_46CA8(v5, (uint64_t)v15, v16, (uint64_t *)v9);
          if (v12) {
            __int16 v10 = sub_6CA9C(v12);
          }
          else {
            __int16 v10 = 0;
          }
          uint64_t v17 = (void *)v11[1];
          if (v17)
          {
            do
            {
              a2 = v17;
              uint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              a2 = (void *)v11[2];
              BOOL v18 = *a2 == (void)v11;
              int v11 = a2;
            }
            while (!v18);
          }
          if (!v12) {
            break;
          }
          uint64_t v9 = v12;
          int v11 = a2;
        }
        while (a2 != a3);
        uint64_t v28 = v10;
        uint64_t v29 = v12;
      }
    }
    uint64_t result = (uint64_t **)sub_6CAF0((uint64_t)&v27);
  }
  if (a2 != a3)
  {
    uint64_t v19 = v5 + 1;
    do
    {
      char v20 = (uint64_t *)operator new(0x20uLL);
      unsigned int v21 = *((_DWORD *)a2 + 7);
      *((_DWORD *)v20 + 7) = v21;
      uint64_t v22 = *v19;
      uint64_t v23 = v5 + 1;
      uint64_t v24 = v5 + 1;
      if (*v19)
      {
        do
        {
          while (1)
          {
            uint64_t v23 = (uint64_t **)v22;
            if (v21 >= *((_DWORD *)v22 + 7)) {
              break;
            }
            uint64_t v22 = (uint64_t *)*v22;
            uint64_t v24 = v23;
            if (!*v23) {
              goto LABEL_34;
            }
          }
          uint64_t v22 = (uint64_t *)v22[1];
        }
        while (v22);
        uint64_t v24 = v23 + 1;
      }
LABEL_34:
      uint64_t result = (uint64_t **)sub_46CA8(v5, (uint64_t)v23, v24, v20);
      char v25 = (void *)a2[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          char v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void *)a2[2];
          BOOL v18 = *v26 == (void)a2;
          a2 = v26;
        }
        while (!v18);
      }
      a2 = v26;
    }
    while (v26 != a3);
  }
  return result;
}

unsigned char *sub_C683C(uint64_t a1)
{
  uint64_t v60 = 0x676C6F6274687372;
  int v61 = 0;
  uint64_t v58 = 0x676C6F6276636474;
  int v59 = 0;
  uint64_t v56 = 0x676C6F6276636472;
  int v57 = 0;
  sub_3B7EC();
  unsigned int v54 = &qword_64CC40;
  char v55 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  uint64_t v2 = *(void *)(a1 + 1008);
  strcpy((char *)buf, "tdcvbolg");
  BYTE1(buf[2]) = 0;
  HIWORD(buf[2]) = 0;
  uint64_t v3 = sub_99A40(v2);
  *((void *)&v6 + 1) = v4;
  *(void *)&long long v6 = v3;
  uint64_t v5 = v6 >> 32;
  if ((v5 & 0xFF00000000) != 0) {
    unsigned int v7 = v5;
  }
  else {
    unsigned int v7 = 0;
  }
  if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 1008) + 16))(*(void *)(a1 + 1008), &v60))
  {
    int v8 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(a1 + 1008) + 16))(*(void *)(a1 + 1008), &v58);
    int v9 = v7 ? v8 : 0;
    if (v9 == 1)
    {
      double v53 = 0.0;
      int v52 = 8;
      (*(void (**)(void, uint64_t *, void, void, int *, double *))(**(void **)(a1 + 1008) + 40))(*(void *)(a1 + 1008), &v60, 0, 0, &v52, &v53);
      double v51 = 0.0;
      int v52 = 8;
      (*(void (**)(void, uint64_t *, void, void, int *, double *))(**(void **)(a1 + 1008) + 40))(*(void *)(a1 + 1008), &v56, 0, 0, &v52, &v51);
      uint64_t v10 = sub_32A48(1);
      uint64_t v11 = sub_32A48(39);
      char v12 = 0;
      uint64_t v13 = 0;
      *(void *)AudioObjectPropertyAddress buf = 0x100000002;
      uint64_t v14 = *(void *)(v10 + 8);
      while (1)
      {
        uint64_t v15 = (int)buf[v13];
        char v16 = v12;
        if (((v14 & v15) != 0) != ((*(void *)(v11 + 8) & v15) != 0)) {
          break;
        }
        char v12 = 1;
        uint64_t v13 = 1;
        if (v16)
        {
          if ((v14 & 1) == 0) {
            goto LABEL_20;
          }
          goto LABEL_17;
        }
      }
      if ((v14 & v15) == 0) {
        uint64_t v10 = v11;
      }
      if (*(void *)(v10 + 8))
      {
LABEL_17:
        uint64_t v17 = *(NSObject **)v10;
        if (v17 && os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          __int16 v68 = 1024;
          int v69 = 1055;
          __int16 v70 = 2048;
          double v71 = v53;
          __int16 v72 = 2048;
          uint64_t v73 = *(std::string **)&v51;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Telephony hardware sample rate is %f, vocoder sample rate %f", (uint8_t *)buf, 0x26u);
        }
      }
LABEL_20:
      int v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 1008) + 464))(*(void *)(a1 + 1008));
      uint64_t v19 = &v53;
      if (v18) {
        uint64_t v19 = &v51;
      }
      double v20 = *v19;
      sub_B93BC(&v49, a1, *v19);
      if (v49)
      {
        uint64_t v21 = sub_32A48(1);
        uint64_t v22 = sub_32A48(39);
        char v23 = 0;
        uint64_t v24 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v25 = *(void *)(v21 + 8);
        while (1)
        {
          uint64_t v26 = (int)buf[v24];
          char v27 = v23;
          if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
            break;
          }
          char v23 = 1;
          uint64_t v24 = 1;
          if (v27) {
            goto LABEL_29;
          }
        }
        if ((v25 & v26) == 0) {
          uint64_t v21 = v22;
        }
LABEL_29:
        uint64_t v28 = *(NSObject **)v21;
        if (v28 && os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          CFMutableDictionaryRef Mutable = *(CFMutableDictionaryRef *)(a1 + 576);
          sub_4D60(&__p, (unsigned int *)&Mutable);
          uint64_t v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          __int16 v68 = 1024;
          int v69 = 1065;
          __int16 v70 = 2048;
          double v71 = v20;
          __int16 v72 = 2080;
          uint64_t v73 = v29;
          _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d In response to telephony hardware sample rate change, updating sample rate to %f on VAD: '%s'.", (uint8_t *)buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        sub_B9584(a1, (uint64_t)v50);
      }
      double v30 = v51;
      uint64_t v65 = 0x676C6F6273766364;
      int v66 = 0;
      if ((*(unsigned int (**)(void, uint64_t *))(**(void **)(a1 + 1008) + 16))(*(void *)(a1 + 1008), &v65))
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        __int16 v64 = 257;
        sub_1D4C04((uint64_t)&Mutable, @"vocoder sample rate", v30);
        sub_1D4AF4((uint64_t)&Mutable, @"vocoder type", v7);
        uint64_t v31 = sub_32A48(1);
        uint64_t v32 = sub_32A48(39);
        char v33 = 0;
        uint64_t v34 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v35 = *(void *)(v31 + 8);
        while (1)
        {
          uint64_t v36 = (int)buf[v34];
          char v37 = v33;
          if (((v35 & v36) != 0) != ((*(void *)(v32 + 8) & v36) != 0)) {
            break;
          }
          char v33 = 1;
          uint64_t v34 = 1;
          if (v37) {
            goto LABEL_53;
          }
        }
        if ((v35 & v36) == 0) {
          uint64_t v31 = v32;
        }
LABEL_53:
        BOOL v46 = *(NSObject **)v31;
        if (v46 && os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
        {
          sub_2417C(&__p, v7);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          buf[0] = 136315906;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          __int16 v68 = 1024;
          int v69 = 1085;
          __int16 v70 = 2048;
          double v71 = v30;
          __int16 v72 = 2080;
          uint64_t v73 = p_p;
          _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_INFO, "%25s:%-5d Setting vocoder sample rate to %f, vocoder type %s", (uint8_t *)buf, 0x26u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        (*(void (**)(void, uint64_t *, void, void, uint64_t, CFMutableDictionaryRef *))(**(void **)(a1 + 1008) + 48))(*(void *)(a1 + 1008), &v65, 0, 0, 8, &Mutable);
        sub_80594((uint64_t)&Mutable);
      }
      else
      {
        uint64_t v38 = sub_32A48(1);
        uint64_t v39 = sub_32A48(39);
        char v40 = 0;
        uint64_t v41 = 0;
        *(void *)AudioObjectPropertyAddress buf = 0x100000002;
        uint64_t v42 = *(void *)(v38 + 8);
        while (1)
        {
          uint64_t v43 = (int)buf[v41];
          char v44 = v40;
          if (((v42 & v43) != 0) != ((*(void *)(v39 + 8) & v43) != 0)) {
            break;
          }
          char v40 = 1;
          uint64_t v41 = 1;
          if (v44) {
            goto LABEL_48;
          }
        }
        if ((v42 & v43) == 0) {
          uint64_t v38 = v39;
        }
LABEL_48:
        uint64_t v45 = *(NSObject **)v38;
        if (v45 && os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "VirtualAudio_Device.cpp";
          __int16 v68 = 1024;
          int v69 = 1090;
          _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_INFO, "%25s:%-5d device does not support telephony vocoder data", (uint8_t *)buf, 0x12u);
        }
      }
      sub_463E0(v50[1]);
    }
  }
  return sub_3BCAC(&v54);
}

void sub_C6F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

unsigned char *sub_C6FD8(void *a1, int a2, int a3)
{
  sub_3B7EC();
  uint64_t v67 = &qword_64CC40;
  char v68 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  uint64_t v6 = a1[78];
  uint64_t v7 = sub_32A48(1);
  if (*(unsigned char *)(v7 + 8))
  {
    int v8 = *(NSObject **)v7;
    if (*(void *)v7)
    {
      if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
      {
        int v9 = "not ";
        uint64_t v73 = "VirtualAudio_Device.cpp";
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        if (v6) {
          int v9 = "";
        }
        __int16 v74 = 1024;
        int v75 = 1618;
        __int16 v76 = 2080;
        BOOL v77 = (std::string *)v9;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Currently sample rate changes are %sblocked", buf, 0x1Cu);
      }
    }
  }
  if (!v6)
  {
    uint64_t v10 = sub_32A48(1);
    if (*(unsigned char *)(v10 + 8))
    {
      uint64_t v11 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
        {
          memset(&v66, 0, sizeof(v66));
          std::string::append(&v66, "[ ", 2uLL);
          char v12 = (void *)a1[76];
          uint64_t v13 = a1 + 77;
          if (v12 != a1 + 77)
          {
            do
            {
              uint64_t v14 = (void *)v12[1];
              uint64_t v15 = v12;
              if (v14)
              {
                do
                {
                  char v16 = v14;
                  uint64_t v14 = (void *)*v14;
                }
                while (v14);
              }
              else
              {
                do
                {
                  char v16 = (void *)v15[2];
                  BOOL v57 = *v16 == (void)v15;
                  uint64_t v15 = v16;
                }
                while (!v57);
              }
              int v17 = *((_DWORD *)v12 + 7);
              int v18 = "????";
              if (v17 == 1) {
                int v18 = "Telephony Route";
              }
              if (v17) {
                uint64_t v19 = (char *)v18;
              }
              else {
                uint64_t v19 = "Shared Hardware";
              }
              sub_21C8C(&v69, v19);
              if (v16 == v13) {
                double v20 = "";
              }
              else {
                double v20 = ", ";
              }
              uint64_t v21 = std::string::append(&v69, v20, 2 * (v16 != v13));
              long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
              int64_t v71 = v21->__r_.__value_.__r.__words[2];
              *(_OWORD *)std::string __p = v22;
              v21->__r_.__value_.__l.__size_ = 0;
              v21->__r_.__value_.__r.__words[2] = 0;
              v21->__r_.__value_.__r.__words[0] = 0;
              if (v71 >= 0) {
                char v23 = __p;
              }
              else {
                char v23 = (void **)__p[0];
              }
              if (v71 >= 0) {
                std::string::size_type v24 = HIBYTE(v71);
              }
              else {
                std::string::size_type v24 = (std::string::size_type)__p[1];
              }
              std::string::append(&v66, (const std::string::value_type *)v23, v24);
              if (SHIBYTE(v71) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v69.__r_.__value_.__l.__data_);
              }
              char v12 = v16;
            }
            while (v16 != v13);
          }
          std::string::append(&v66, " ]", 2uLL);
          if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v25 = &v66;
          }
          else {
            uint64_t v25 = (std::string *)v66.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v73 = "VirtualAudio_Device.cpp";
          __int16 v74 = 1024;
          int v75 = 1620;
          __int16 v76 = 2080;
          BOOL v77 = v25;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Current Assertions: %s", buf, 0x1Cu);
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  uint64_t v26 = a1 + 77;
  uint64_t v27 = a1[77];
  if (a2)
  {
    uint64_t v28 = a1 + 77;
    if (v27)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v28 = (void *)v27;
          int v29 = *(_DWORD *)(v27 + 28);
          if (v29 <= a3) {
            break;
          }
          uint64_t v27 = *(void *)v27;
          uint64_t v26 = v28;
          if (!*v28) {
            goto LABEL_50;
          }
        }
        if (v29 >= a3) {
          break;
        }
        uint64_t v27 = *(void *)(v27 + 8);
        if (!v27)
        {
          uint64_t v26 = v28 + 1;
          goto LABEL_50;
        }
      }
      uint64_t v43 = sub_32A48(1);
      if (*(unsigned char *)(v43 + 8))
      {
        uint64_t v38 = *(NSObject **)v43;
        if (*(void *)v43)
        {
          if (os_log_type_enabled(*(os_log_t *)v43, OS_LOG_TYPE_DEBUG))
          {
            char v44 = "????";
            if (a3 == 1) {
              char v44 = "Telephony Route";
            }
            if (a3) {
              uint64_t v45 = (char *)v44;
            }
            else {
              uint64_t v45 = "Shared Hardware";
            }
            sub_21C8C(__p, v45);
            if (v71 >= 0) {
              BOOL v46 = __p;
            }
            else {
              BOOL v46 = (void **)__p[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            uint64_t v73 = "VirtualAudio_Device.cpp";
            __int16 v74 = 1024;
            int v75 = 1625;
            __int16 v76 = 2080;
            BOOL v77 = (std::string *)v46;
            uint64_t v42 = "%25s:%-5d %s already exists within mSampleRateAssertions";
LABEL_87:
            _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, v42, buf, 0x1Cu);
            if ((SHIBYTE(v71) & 0x80000000) == 0) {
              goto LABEL_99;
            }
            int v47 = __p[0];
            goto LABEL_98;
          }
        }
      }
    }
    else
    {
LABEL_50:
      double v30 = operator new(0x20uLL);
      v30[7] = a3;
      *(void *)double v30 = 0;
      *((void *)v30 + 1) = 0;
      *((void *)v30 + 2) = v28;
      *uint64_t v26 = v30;
      uint64_t v31 = *(void *)a1[76];
      if (v31)
      {
        a1[76] = v31;
        double v30 = (_DWORD *)*v26;
      }
      sub_46D00((uint64_t *)a1[77], (uint64_t *)v30);
      ++a1[78];
    }
  }
  else
  {
    if (v27)
    {
      uint64_t v32 = a1 + 77;
      uint64_t v33 = a1[77];
      do
      {
        int v34 = *(_DWORD *)(v33 + 28);
        BOOL v35 = v34 < a3;
        if (v34 >= a3) {
          uint64_t v36 = (uint64_t *)v33;
        }
        else {
          uint64_t v36 = (uint64_t *)(v33 + 8);
        }
        if (!v35) {
          uint64_t v32 = (void *)v33;
        }
        uint64_t v33 = *v36;
      }
      while (*v36);
      if (v32 != v26 && *((_DWORD *)v32 + 7) <= a3)
      {
        BOOL v48 = (void *)v32[1];
        if (v48)
        {
          do
          {
            BOOL v49 = v48;
            BOOL v48 = (void *)*v48;
          }
          while (v48);
        }
        else
        {
          long long v50 = v32;
          do
          {
            BOOL v49 = (void *)v50[2];
            BOOL v57 = *v49 == (void)v50;
            long long v50 = v49;
          }
          while (!v57);
        }
        if ((void *)a1[76] == v32) {
          a1[76] = v49;
        }
        --a1[78];
        sub_89144((uint64_t *)v27, v32);
        int v47 = v32;
LABEL_98:
        operator delete(v47);
        goto LABEL_99;
      }
    }
    uint64_t v37 = sub_32A48(1);
    if (*(unsigned char *)(v37 + 8))
    {
      uint64_t v38 = *(NSObject **)v37;
      if (*(void *)v37)
      {
        if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v39 = "????";
          if (a3 == 1) {
            uint64_t v39 = "Telephony Route";
          }
          if (a3) {
            char v40 = (char *)v39;
          }
          else {
            char v40 = "Shared Hardware";
          }
          sub_21C8C(__p, v40);
          if (v71 >= 0) {
            uint64_t v41 = __p;
          }
          else {
            uint64_t v41 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          uint64_t v73 = "VirtualAudio_Device.cpp";
          __int16 v74 = 1024;
          int v75 = 1635;
          __int16 v76 = 2080;
          BOOL v77 = (std::string *)v41;
          uint64_t v42 = "%25s:%-5d Unable to find assertion %s within mSampleRateAssertions";
          goto LABEL_87;
        }
      }
    }
  }
LABEL_99:
  uint64_t v51 = a1[78];
  if ((v6 != 0) != (v51 != 0))
  {
    uint64_t v52 = sub_32A48(1);
    if (*(unsigned char *)(v52 + 8))
    {
      double v53 = *(NSObject **)v52;
      if (*(void *)v52)
      {
        if (os_log_type_enabled(*(os_log_t *)v52, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v54 = "un";
          uint64_t v73 = "VirtualAudio_Device.cpp";
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          if (v51) {
            unsigned int v54 = "";
          }
          __int16 v74 = 1024;
          int v75 = 1642;
          __int16 v76 = 2080;
          BOOL v77 = (std::string *)v54;
          _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEBUG, "%25s:%-5d Updating streams to %sblock sample rate changes", buf, 0x1Cu);
        }
      }
    }
    char v55 = 1;
    do
    {
      char v56 = v55;
      BOOL v57 = (v55 & 1) == 0;
      if (v55) {
        uint64_t v58 = 63;
      }
      else {
        uint64_t v58 = 66;
      }
      if (v57) {
        uint64_t v59 = 65;
      }
      else {
        uint64_t v59 = 62;
      }
      uint64_t v60 = a1[v58];
      uint64_t v61 = a1[v59];
      unint64_t v62 = v60 - v61;
      if ((v62 & 0x7FFFFFFF8) != 0)
      {
        uint64_t v63 = 0;
        uint64_t v64 = v62 >> 3;
        if (v64 <= 1) {
          uint64_t v64 = 1;
        }
        else {
          uint64_t v64 = v64;
        }
        do
          *(unsigned char *)(*(void *)(v61 + 8 * v63++) + 129) = v51 != 0;
        while (v64 != v63);
      }
      char v55 = 0;
    }
    while ((v56 & 1) != 0);
  }
  return sub_3BCAC(&v67);
}

void sub_C76D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

unsigned char *sub_C7754(uint64_t a1)
{
  sub_3B7EC();
  char v55 = &qword_64CC40;
  char v56 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  if (!*(void *)(a1 + 1008))
  {
    long long v50 = (os_log_t *)sub_32A48(13);
    uint64_t v51 = *v50;
    if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)long long v78 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v78[8] = 1024;
      *(_DWORD *)&v78[10] = 1208;
      _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (sub_89FA8() == 2 || sub_89FA8() == 3 || sub_89FA8() == 5)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(2);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
    {
      sub_2417C(&__p, *(_DWORD *)(a1 + 576));
      uint64_t v4 = SHIBYTE(v59[1]) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)long long v78 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v78[8] = 1024;
      *(_DWORD *)&v78[10] = 1107;
      *(_WORD *)&v78[14] = 2080;
      *(void *)&v78[16] = v4;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_INFO, "%25s:%-5d UpdateSoundAutoConfig for device %s", buf, 0x1Cu);
      if (SHIBYTE(v59[1]) < 0) {
        operator delete(__p);
      }
    }
    LODWORD(v74) = *(_DWORD *)(a1 + 8);
    std::string __p = (void *)0x676C6F6273616369;
    LODWORD(v59[0]) = 0;
    sub_CAD1C((uint64_t)buf, (AudioObjectID *)&v74, (AudioObjectPropertyAddress *)&__p);
    if (v78[20])
    {
      uint64_t v5 = *(const void **)&v78[12];
      *(void *)&v78[12] = 0;
      std::string v66 = &off_6412B0;
      CFTypeRef cf = v5;
      char v68 = 1;
      sub_49A90(&v78[4]);
      if (v68)
      {
        CFTypeRef v6 = cf;
        if (cf) {
          CFRetain(cf);
        }
        sub_22084(&v57, v6);
        LODWORD(__p) = *(_DWORD *)(*(void *)(a1 + 1008) + 280);
        BYTE4(__p) = 1;
        if (!v57)
        {
          double v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not construct");
        }
        sub_402388(v59, (const __CFDictionary *)v57, (const UInt8 *)"position");
        if (!v57)
        {
          unsigned int v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v54, "Could not construct");
        }
        sub_402388(v62, (const __CFDictionary *)v57, (const UInt8 *)"role");
        __int16 v65 = sub_402814((const __CFDictionary **)&v57);
        id v7 = *(id *)sub_32A48(24);
        int v8 = v7;
        if (v7)
        {
          int v9 = v7;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            sub_21C8C(&v69, "{ ");
            uint64_t v73 = &v69;
            sub_21C8C(&v70, "calibration");
            if ((v72 & 0x80u) == 0) {
              size_t v10 = v72;
            }
            else {
              size_t v10 = v71;
            }
            uint64_t v11 = &v74;
            sub_5E220((uint64_t)&v74, v10 + 2);
            if ((v76 & 0x80u) != 0) {
              uint64_t v11 = v74;
            }
            if (v10)
            {
              if ((v72 & 0x80u) == 0) {
                char v12 = &v70;
              }
              else {
                char v12 = v70;
              }
              memmove(v11, v12, v10);
            }
            strcpy((char *)v11 + v10, ": ");
            if ((v76 & 0x80u) == 0) {
              uint64_t v13 = (const std::string::value_type *)&v74;
            }
            else {
              uint64_t v13 = (const std::string::value_type *)v74;
            }
            if ((v76 & 0x80u) == 0) {
              std::string::size_type v14 = v76;
            }
            else {
              std::string::size_type v14 = v75;
            }
            std::string::append(&v69, v13, v14);
            if ((char)v76 < 0) {
              operator delete(v74);
            }
            if ((_BYTE)v65) {
              uint64_t v15 = "true";
            }
            else {
              uint64_t v15 = "false";
            }
            uint64_t v16 = 4;
            if (!(_BYTE)v65) {
              uint64_t v16 = 5;
            }
            if (HIBYTE(v65)) {
              int v17 = v15;
            }
            else {
              int v17 = "unspecified";
            }
            if (HIBYTE(v65)) {
              std::string::size_type v18 = v16;
            }
            else {
              std::string::size_type v18 = 11;
            }
            std::string::append(&v69, v17, v18);
            if ((char)v72 < 0) {
              operator delete(v70);
            }
            std::string::append(&v69, ", ", 2uLL);
            sub_21C8C(&v74, "position");
            sub_27E7A0(&v73, (const void **)&v74, (uint64_t)v59);
            if ((char)v76 < 0) {
              operator delete(v74);
            }
            std::string::append(&v69, ", ", 2uLL);
            sub_21C8C(&v74, "role");
            sub_27E7A0(&v73, (const void **)&v74, (uint64_t)v62);
            if ((char)v76 < 0) {
              operator delete(v74);
            }
            std::string::append(&v69, ", ", 2uLL);
            sub_21C8C(&v70, "mode");
            if ((v72 & 0x80u) == 0) {
              size_t v19 = v72;
            }
            else {
              size_t v19 = v71;
            }
            double v20 = &v74;
            sub_5E220((uint64_t)&v74, v19 + 2);
            if ((v76 & 0x80u) != 0) {
              double v20 = v74;
            }
            if (v19)
            {
              if ((v72 & 0x80u) == 0) {
                uint64_t v21 = &v70;
              }
              else {
                uint64_t v21 = v70;
              }
              memmove(v20, v21, v19);
            }
            strcpy((char *)v20 + v19, ": ");
            if ((v76 & 0x80u) == 0) {
              long long v22 = (const std::string::value_type *)&v74;
            }
            else {
              long long v22 = (const std::string::value_type *)v74;
            }
            if ((v76 & 0x80u) == 0) {
              std::string::size_type v23 = v76;
            }
            else {
              std::string::size_type v23 = v75;
            }
            std::string::append(&v69, v22, v23);
            if ((char)v76 < 0) {
              operator delete(v74);
            }
            if (BYTE4(__p))
            {
              sub_2417C(&v74, __p);
              if ((v76 & 0x80u) == 0) {
                std::string::size_type v24 = (const std::string::value_type *)&v74;
              }
              else {
                std::string::size_type v24 = (const std::string::value_type *)v74;
              }
              if ((v76 & 0x80u) == 0) {
                std::string::size_type v25 = v76;
              }
              else {
                std::string::size_type v25 = v75;
              }
              std::string::append(&v69, v24, v25);
              if ((char)v76 < 0) {
                operator delete(v74);
              }
            }
            else
            {
              std::string::append(&v69, "unspecified", 0xBuLL);
            }
            if ((char)v72 < 0) {
              operator delete(v70);
            }
            std::string::append(&v69, " }", 2uLL);
            if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v26 = &v69;
            }
            else {
              uint64_t v26 = (std::string *)v69.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)long long v78 = "SoundAutoConfigUtilities.mm";
            *(_WORD *)&v78[8] = 1024;
            *(_DWORD *)&v78[10] = 160;
            *(_WORD *)&v78[14] = 2080;
            *(void *)&v78[16] = v26;
            _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Parsed SoundAutoConfig dictionary into ConcreteSoundAutoConfigCondition %s.", buf, 0x1Cu);
            if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v69.__r_.__value_.__l.__data_);
            }
          }
        }
        if (v57) {
          CFRelease(v57);
        }
        uint64_t v27 = *(void *)(a1 + 1008);
        __int16 v74 = &dword_4;
        *(void *)&v78[4] = __p;
        sub_CAE80(&v78[12], (long long *)v59);
        sub_CAE80(v81, (long long *)v62);
        __int16 v82 = v65;
        int v83 = 1;
        (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v27 + 424))(v27, &v74, buf, 1869968496);
        sub_8C710((uint64_t)&v78[4]);
        if (v64 && v63 < 0) {
          operator delete(v62[0]);
        }
        if (v61 && v60 < 0) {
          operator delete(v59[0]);
        }
        if (v68) {
          sub_49A90(&v66);
        }
      }
    }
  }
  char v28 = *(unsigned char *)sub_3AEEEC();
  int v29 = (os_log_t *)sub_32A48(2);
  double v30 = *v29;
  if (*v29 && os_log_type_enabled(*v29, OS_LOG_TYPE_INFO))
  {
    sub_2417C(&__p, *(_DWORD *)(a1 + 576));
    uint64_t v31 = SHIBYTE(v59[1]) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)long long v78 = "VirtualAudio_Device.cpp";
    *(_WORD *)&v78[8] = 1024;
    *(_DWORD *)&v78[10] = 1121;
    *(_WORD *)&v78[14] = 2080;
    *(void *)&v78[16] = v31;
    _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_INFO, "%25s:%-5d UpdateLateNightMode for device %s", buf, 0x1Cu);
    if (SHIBYTE(v59[1]) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v32 = *(void *)(a1 + 1008);
  std::string __p = &def_1E50E8 + 1;
  v78[4] = v28 & 1;
  int v83 = 0;
  (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v32 + 424))(v32, &__p, buf, 1869968496);
  sub_8C710((uint64_t)&v78[4]);
  char v33 = *(unsigned char *)sub_3AEEEC();
  int v34 = (os_log_t *)sub_32A48(2);
  BOOL v35 = *v34;
  if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_INFO))
  {
    sub_2417C(&__p, *(_DWORD *)(a1 + 576));
    uint64_t v36 = SHIBYTE(v59[1]) >= 0 ? &__p : (void **)__p;
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)long long v78 = "VirtualAudio_Device.cpp";
    *(_WORD *)&v78[8] = 1024;
    *(_DWORD *)&v78[10] = 1128;
    *(_WORD *)&v78[14] = 2080;
    *(void *)&v78[16] = v36;
    _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_INFO, "%25s:%-5d UpdateEnhanceDialog for device %s", buf, 0x1Cu);
    if (SHIBYTE(v59[1]) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v37 = *(void *)(a1 + 1008);
  std::string __p = &def_1E50E8 + 2;
  v78[4] = (v33 & 4) != 0;
  int v83 = 0;
  (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v37 + 424))(v37, &__p, buf, 1869968496);
  sub_8C710((uint64_t)&v78[4]);
  if (sub_20ADA4())
  {
    uint64_t v38 = sub_298DA4();
    unsigned int v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 288))(v38);
    if (v39 >= 4)
    {
      char v40 = (os_log_t *)sub_32A48(10);
      uint64_t v41 = *v40;
      if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)long long v78 = "VirtualAudio_Device.cpp";
        *(_WORD *)&v78[8] = 1024;
        *(_DWORD *)&v78[10] = 1193;
        *(_WORD *)&v78[14] = 1024;
        *(_DWORD *)&v78[16] = v39;
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d EnhanceDialogLevel [%u] is out-of-range", buf, 0x18u);
      }
      unsigned int v39 = 0;
    }
    uint64_t v42 = (os_log_t *)sub_32A48(2);
    uint64_t v43 = *v42;
    if (*v42 && os_log_type_enabled(*v42, OS_LOG_TYPE_INFO))
    {
      sub_2417C(&__p, *(_DWORD *)(a1 + 576));
      char v44 = SHIBYTE(v59[1]) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)long long v78 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v78[8] = 1024;
      *(_DWORD *)&v78[10] = 1135;
      *(_WORD *)&v78[14] = 2080;
      *(void *)&v78[16] = v44;
      _os_log_impl(&def_1E50E8, v43, OS_LOG_TYPE_INFO, "%25s:%-5d UpdateEnhanceDialogLevel for device %s", buf, 0x1Cu);
      if (SHIBYTE(v59[1]) < 0) {
        operator delete(__p);
      }
    }
    if ((*(unsigned int (**)(void, uint64_t, uint64_t, void, uint64_t))(**(void **)(a1 + 1008) + 376))(*(void *)(a1 + 1008), 1685287015, 1936289907, 0, 1))
    {
      LODWORD(v74) = v39 == 0;
      (*(void (**)(void, uint64_t, uint64_t, void **, uint64_t, uint64_t, void))(**(void **)(a1 + 1008)
                                                                                          + 400))(*(void *)(a1 + 1008), 1685287015, 1936289907, &v74, 4, 1, 0);
      uint64_t v45 = (os_log_t *)sub_32A48(2);
      BOOL v46 = *v45;
      if (*v45)
      {
        if (os_log_type_enabled(*v45, OS_LOG_TYPE_INFO))
        {
          sub_2417C(&__p, 0x73697073u);
          if (SHIBYTE(v59[1]) >= 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)long long v78 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v78[8] = 1024;
          *(_DWORD *)&v78[10] = 1147;
          *(_WORD *)&v78[14] = 2080;
          *(void *)&v78[16] = p_p;
          __int16 v79 = 1024;
          int v80 = (int)v74;
          _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_INFO, "%25s:%-5d set property %s to %u on the graph", buf, 0x22u);
          if (SHIBYTE(v59[1]) < 0) {
            operator delete(__p);
          }
        }
      }
    }
    uint64_t v48 = *(void *)(a1 + 1008);
    std::string __p = &dword_4 + 3;
    *(_DWORD *)&v78[4] = v39;
    int v83 = 4;
    (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v48 + 424))(v48, &__p, buf, 1869968496);
    sub_8C710((uint64_t)&v78[4]);
  }
  return sub_3BCAC(&v55);
}

void sub_C84AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (a38 < 0) {
    operator delete(a33);
  }

  sub_CAE2C((uint64_t)&a12);
  sub_60394(&a11);
  if (a32) {
    sub_49A90(&a30);
  }
  sub_3BCAC(&a9);
  _Unwind_Resume(a1);
}

unsigned char *sub_C8674(unint64_t a1)
{
  if (!*(void *)(a1 + 1008))
  {
    char v68 = (os_log_t *)sub_32A48(13);
    std::string v69 = *v68;
    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1295;
      _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_3B7EC();
  long long v78 = &qword_64CC40;
  char v79 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  unsigned int v2 = *(_DWORD *)(a1 + 576);
  sub_2F6834(buf, *(void *)(a1 + 568));
  unint64_t v3 = (unint64_t)*(unsigned int *)&buf[4] << 32;
  sub_2E9FD8((uint64_t)buf);
  if ((v2 == 1987277417 || v2 == 1986291046) && v3 == 0x7261772000000000)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(41);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, v2);
        CFTypeRef v6 = v84 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1309;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v6;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disabling DRC in kVirtualAudioPlugInMode_Raw for device %s", buf, 0x1Cu);
        if (v84 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  if (!sub_C9B28(*(void *)(a1 + 1008), 1)) {
    goto LABEL_52;
  }
  uint64_t v7 = *(void *)(a1 + 1008);
  strcpy(buf, "newsbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v8 = sub_99A40(v7);
  *((void *)&v11 + 1) = v9;
  *(void *)&long long v11 = v8;
  uint64_t v10 = v11 >> 32;
  if ((v10 & 0xFF00000000) == 0 || !v10)
  {
    long long v22 = (os_log_t *)sub_32A48(41);
    std::string::size_type v23 = *v22;
    if (*v22)
    {
      uint64_t v17 = 0;
      std::string::size_type v18 = 0;
      if (!os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_53;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1227;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VirtualAudio_Device::IsAdaptiveVolumeEnabled() - software volume is disabled.", buf, 0x12u);
    }
LABEL_52:
    uint64_t v17 = 0;
    std::string::size_type v18 = 0;
    goto LABEL_53;
  }
  LODWORD(__p[0]) = *(_DWORD *)(a1 + 8);
  strcpy(buf, "lvdabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t v12 = sub_26DAC((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0);
  unsigned int v14 = v12;
  if (!v12)
  {
    std::string::size_type v18 = 0;
    if (v13) {
      BOOL v24 = HIDWORD(v12) == 0;
    }
    else {
      BOOL v24 = 1;
    }
    uint64_t v17 = !v24;
    if (v24 || v3 == 0x7261772000000000) {
      goto LABEL_53;
    }
    if (!sub_C9B28(*(void *)(a1 + 1008), 2) || !_os_feature_enabled_impl()) {
      goto LABEL_39;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D308, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64D308))
    {
      byte_64D300 = sub_207A20() != 125;
      __cxa_guard_release(&qword_64D308);
    }
    if (!byte_64D300) {
      goto LABEL_39;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64BDA8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_64BDA8))
    {
      buf[0] = 0;
      AppBooleanint Value = CFPreferencesGetAppBooleanValue(@"BypassAutoDRC", @"com.apple.audio.virtualaudio", buf);
      BOOL v75 = AppBooleanValue != 0;
      if (buf[0])
      {
        unsigned __int8 v76 = (os_log_t *)sub_32A48(13);
        BOOL v77 = *v76;
        if (*v76 && os_log_type_enabled(*v76, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
          *(void *)&uint8_t buf[4] = "RunTimeDefaults.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 2147;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = "BypassAutoDRC";
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)&buf[30] = AppBooleanValue != 0;
          _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Defaults key %s was defined to %u", buf, 0x22u);
        }
      }
      else
      {
        BOOL v75 = 0;
      }
      byte_64BDA0 = v75;
      __cxa_guard_release(&qword_64BDA8);
    }
    if (byte_64BDA0) {
      goto LABEL_39;
    }
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 8);
    strcpy(buf, "rdvpbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v55 = sub_26DAC((AudioObjectID *)__p, (const AudioObjectPropertyAddress *)buf, 0, 0);
    unsigned int v57 = v55;
    if (v55 == 2003332927)
    {
      uint64_t v59 = (os_log_t *)sub_32A48(41);
      std::string::size_type v18 = *v59;
      if (!*v59) {
        goto LABEL_40;
      }
      if (!os_log_type_enabled(*v59, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_39;
      }
      sub_2417C(__p, 0x70766472u);
      int v60 = v84;
      char v61 = (void **)__p[0];
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 1008) + 128))(v81);
      unint64_t v62 = __p;
      if (v60 < 0) {
        unint64_t v62 = v61;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1281;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v62;
      *(_WORD *)&unsigned char buf[28] = 2112;
      *(void **)&buf[30] = v81[0];
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VirtualAudio_Device::IsAutoDRCEnabled() - property %s not supported on device %@.", buf, 0x26u);
      sub_72924((uint64_t)v81);
    }
    else
    {
      if (!v55)
      {
        if (v56) {
          BOOL v58 = HIDWORD(v55) == 0;
        }
        else {
          BOOL v58 = 1;
        }
        std::string::size_type v18 = !v58;
        goto LABEL_40;
      }
      char v63 = (os_log_t *)sub_32A48(41);
      std::string::size_type v18 = *v63;
      if (!*v63)
      {
LABEL_40:
        uint64_t v17 = 1;
        goto LABEL_53;
      }
      if (!os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
      {
LABEL_39:
        std::string::size_type v18 = 0;
        goto LABEL_40;
      }
      sub_2417C(__p, v57);
      if (v84 >= 0) {
        char v64 = __p;
      }
      else {
        char v64 = (void **)__p[0];
      }
      sub_2417C(v81, 0x70766472u);
      int v65 = v82;
      std::string v66 = (void **)v81[0];
      (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 1008) + 128))(cf);
      uint64_t v67 = v81;
      if (v65 < 0) {
        uint64_t v67 = v66;
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1287;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v64;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&buf[30] = v67;
      *(_WORD *)&unsigned char buf[38] = 2112;
      int v89 = (void **)cf[0];
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d VirtualAudio_Device::IsAutoDRCEnabled() - error %s retrieving property %s on device %@.", buf, 0x30u);
      sub_72924((uint64_t)cf);
      if (v82 < 0) {
        operator delete(v81[0]);
      }
    }
    if (v84 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_39;
  }
  if (v12 != 2003332927)
  {
    std::string::size_type v25 = (os_log_t *)sub_32A48(41);
    std::string::size_type v18 = *v25;
    if (!*v25)
    {
      uint64_t v17 = 0;
      goto LABEL_53;
    }
    if (!os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_52;
    }
    sub_2417C(__p, v14);
    if (v84 >= 0) {
      uint64_t v26 = __p;
    }
    else {
      uint64_t v26 = (void **)__p[0];
    }
    sub_2417C(v81, 0x6164766Cu);
    int v27 = v82;
    char v28 = (void **)v81[0];
    (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 1008) + 128))(cf);
    int v29 = v81;
    if (v27 < 0) {
      int v29 = v28;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1252;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v26;
    *(_WORD *)&unsigned char buf[28] = 2080;
    *(void *)&buf[30] = v29;
    *(_WORD *)&unsigned char buf[38] = 2112;
    int v89 = (void **)cf[0];
    _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d VirtualAudio_Device::IsAdaptiveVolumeEnabled() - error %s retrieving property %s on device %@.", buf, 0x30u);
    sub_72924((uint64_t)cf);
    if (v82 < 0) {
      operator delete(v81[0]);
    }
    goto LABEL_50;
  }
  uint64_t v15 = (os_log_t *)sub_32A48(41);
  uint64_t v16 = *v15;
  if (!*v15) {
    goto LABEL_52;
  }
  uint64_t v17 = 0;
  std::string::size_type v18 = 0;
  if (os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(__p, 0x6164766Cu);
    int v19 = v84;
    double v20 = (void **)__p[0];
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 1008) + 128))(v81);
    uint64_t v21 = __p;
    if (v19 < 0) {
      uint64_t v21 = v20;
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1245;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v21;
    *(_WORD *)&unsigned char buf[28] = 2112;
    *(void **)&buf[30] = v81[0];
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d VirtualAudio_Device::IsAdaptiveVolumeEnabled() - property %s not supported on device %@.", buf, 0x26u);
    sub_72924((uint64_t)v81);
LABEL_50:
    if (v84 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_52;
  }
LABEL_53:
  if (v2 == 1987277417 || v2 == 1986291046)
  {
    double v30 = (os_log_t *)sub_32A48(41);
    uint64_t v31 = *v30;
    if (*v30)
    {
      if (os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
      {
        sub_2417C(__p, v2);
        uint64_t v32 = "disabled";
        if (v18) {
          char v33 = "enabled";
        }
        else {
          char v33 = "disabled";
        }
        if (v17) {
          uint64_t v32 = "enabled";
        }
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1317;
        int v34 = (void **)__p[0];
        *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
        *(_WORD *)&unsigned char buf[18] = 2080;
        if (v84 >= 0) {
          int v34 = __p;
        }
        *(void *)&buf[20] = v32;
        *(_WORD *)&unsigned char buf[28] = 2080;
        *(void *)&buf[30] = v33;
        *(_WORD *)&unsigned char buf[38] = 2080;
        int v89 = v34;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adaptive volume is %s auto-DRC is %s for device %s", buf, 0x30u);
        if (v84 < 0)
        {
          operator delete(__p[0]);
          if (v18) {
            goto LABEL_66;
          }
LABEL_93:
          sub_BE044();
          sub_BE0C0(a1);
          goto LABEL_114;
        }
      }
    }
  }
  if (!v18) {
    goto LABEL_93;
  }
LABEL_66:
  sub_BE044();
  BOOL v35 = (os_log_t *)sub_32A48(41);
  uint64_t v36 = *v35;
  if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, unint64_t))(*(void *)a1 + 96))(__p, a1);
    uint64_t v37 = v84 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 170;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v37;
    _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVHIDEventListener::RegisterDevice() - registering device '%s' for updates.", buf, 0x1Cu);
    if (v84 < 0) {
      operator delete(__p[0]);
    }
  }
  if (!qword_64A458)
  {
    uint64_t v38 = (os_log_t *)sub_32A48(41);
    unsigned int v39 = *v38;
    if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 237;
      _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVHIDEventListener::OpenDevice().", buf, 0x12u);
    }
    IONotificationPortSetDispatchQueue((IONotificationPortRef)qword_64A448, (dispatch_queue_t)qword_64A440);
    cf[0] = CFStringCreateWithBytes(0, (const UInt8 *)"IOHIDDevice", 11, 0x8000100u, 0);
    if (!cf[0])
    {
      size_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v71, "Could not construct");
    }
    sub_C9C50((uint64_t)buf, "IOProviderClass", cf);
    LODWORD(valuePtr) = 65333;
    CFNumberRef v40 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFNumberRef v86 = v40;
    if (!v40)
    {
      unsigned __int8 v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v72, "Could not construct");
    }
    sub_C9C94((uint64_t)&buf[16], "PrimaryUsagePage", (const void **)&v86);
    int v87 = 1;
    CFNumberRef v41 = CFNumberCreate(0, kCFNumberIntType, &v87);
    CFNumberRef valuePtr = v41;
    if (!v41)
    {
      uint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v73, "Could not construct");
    }
    sub_C9CD8((uint64_t)&buf[32], "PrimaryUsage", (const void **)&valuePtr);
    __p[0] = buf;
    __p[1] = &def_1E50E8 + 3;
    CFDictionaryRef v42 = sub_4D3D8((uint64_t)__p);
    uint64_t v43 = 0;
    v81[0] = v42;
    do
    {
      char v44 = *(const void **)&buf[v43 + 40];
      if (v44) {
        CFRelease(v44);
      }
      uint64_t v45 = *(const void **)&buf[v43 + 32];
      if (v45) {
        CFRelease(v45);
      }
      v43 -= 16;
    }
    while (v43 != -48);
    CFRelease(v41);
    CFRelease(v40);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (dword_64A450)
    {
      IOObjectRelease(dword_64A450);
      dword_64A450 = 0;
    }
    v81[0] = 0;
    IOServiceAddMatchingNotification((IONotificationPortRef)qword_64A448, "IOServiceMatched", v42, (IOServiceMatchingCallback)sub_CAD18, &qword_64A440, (io_iterator_t *)&dword_64A450);
    cf[0] = &qword_64A440;
    if (dispatch_get_specific("AVHIDEventListenerQueueKey") == "AVHIDEventListenerQueueKey")
    {
      sub_C9D50((uint64_t)&qword_64A440, dword_64A450);
    }
    else
    {
      __p[0] = cf;
      *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_CA24C;
      *(void *)&unsigned char buf[24] = &unk_6203C0;
      *(void *)&unsigned char buf[32] = __p;
      dispatch_sync((dispatch_queue_t)qword_64A440, buf);
    }
    dword_64A4D8 = 0;
  }
  std::mutex::lock((std::mutex *)&qword_64A480);
  uint64_t v46 = qword_64A4C8;
  if (qword_64A4C8)
  {
    while (1)
    {
      while (1)
      {
        int v47 = (uint64_t *)v46;
        unint64_t v48 = *(void *)(v46 + 32);
        if (v48 <= a1) {
          break;
        }
        uint64_t v46 = *v47;
        BOOL v49 = v47;
        if (!*v47) {
          goto LABEL_104;
        }
      }
      if (v48 >= a1) {
        break;
      }
      uint64_t v46 = v47[1];
      if (!v46)
      {
        BOOL v49 = v47 + 1;
        goto LABEL_104;
      }
    }
    uint64_t v51 = qword_64A4D0;
  }
  else
  {
    BOOL v49 = &qword_64A4C8;
    int v47 = &qword_64A4C8;
LABEL_104:
    long long v50 = (uint64_t *)operator new(0x28uLL);
    v50[4] = a1;
    *long long v50 = 0;
    v50[1] = 0;
    v50[2] = (uint64_t)v47;
    *BOOL v49 = (uint64_t)v50;
    if (*(void *)qword_64A4C0)
    {
      qword_64A4C0 = *(void *)qword_64A4C0;
      long long v50 = (uint64_t *)*v49;
    }
    sub_46D00((uint64_t *)qword_64A4C8, v50);
    uint64_t v51 = ++qword_64A4D0;
  }
  if (v51 == 1)
  {
    uint64_t v52 = (os_log_t *)sub_32A48(41);
    double v53 = *v52;
    if (*v52)
    {
      if (os_log_type_enabled(*v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 183;
        _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVHIDEventListener::RegisterDevice() - registered first device.", buf, 0x12u);
      }
    }
    operator new();
  }
  std::mutex::unlock((std::mutex *)&qword_64A480);
LABEL_114:
  (*(void (**)(void, uint64_t, NSObject *))(**(void **)(a1 + 1008) + 432))(*(void *)(a1 + 1008), v17, v18);
  return sub_3BCAC(&v78);
}

void sub_C96E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_guard_abort(&qword_64D308);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_C9B28(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 416))(v5);
  if (!v6) {
    return 0;
  }
  uint64_t v3 = sub_A5E54(v5, a2);
  if (v6) {
    sub_6C954((uint64_t)v5);
  }
  return v3;
}

void sub_C9BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    sub_6C954((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_C9BDC(uint64_t *a1)
{
  sub_BE4EC(*a1, 1);

  operator delete();
}

void sub_C9C2C()
{
}

uint64_t sub_C9C50(uint64_t a1, char *a2, const void **a3)
{
  sub_22210((CFStringRef *)a1, a2);
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_C9C94(uint64_t a1, char *a2, const void **a3)
{
  sub_22210((CFStringRef *)a1, a2);
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_C9CD8(uint64_t a1, char *a2, const void **a3)
{
  sub_22210((CFStringRef *)a1, a2);
  uint64_t v5 = *a3;
  if (v5) {
    CFRetain(v5);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

const void **sub_C9D1C(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_C9D50(uint64_t a1, io_iterator_t iterator)
{
  io_service_t MatchingService = 0;
  while (1)
  {
    uint64_t result = IOIteratorNext(iterator);
    io_object_t v5 = result;
    if (!result) {
      break;
    }
    if (MatchingService)
    {
      char v6 = (os_log_t *)sub_32A48(41);
      os_log_t v7 = *v6;
      if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 277;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = MatchingService;
        uint64_t v8 = v7;
        os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
        uint64_t v10 = "%25s:%-5d AVHIDEventListener::Match() - found multiple matched services. Ignoring matched service %u.";
LABEL_10:
        _os_log_impl(&def_1E50E8, v8, v9, v10, buf, 0x18u);
      }
    }
    else
    {
      *(void *)entryID = 0;
      IORegistryEntryGetRegistryEntryID(result, (uint64_t *)entryID);
      CFDictionaryRef v11 = IORegistryEntryIDMatching(*(uint64_t *)entryID);
      io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v11);
      unint64_t v12 = (os_log_t *)sub_32A48(41);
      os_log_t v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 272;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = MatchingService;
        uint64_t v8 = v13;
        os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
        uint64_t v10 = "%25s:%-5d AVHIDEventListener::Match() - found matched service %u.";
        goto LABEL_10;
      }
    }
    IOObjectRelease(v5);
  }
  if (MatchingService)
  {
    unsigned int v14 = IOHIDDeviceCreate(kCFAllocatorDefault, MatchingService);
    uint64_t v15 = (os_log_t *)sub_32A48(41);
    uint64_t v16 = *v15;
    if (v14)
    {
      if (v16 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 308;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVHIDEventListener::SetupMatchedServiceInputHandler() - created device.", buf, 0x12u);
      }
      uint64_t v17 = (uint8_t *)a1;
      if (*(void *)(a1 + 24))
      {
        std::string::size_type v18 = (os_log_t *)sub_32A48(41);
        int v19 = *v18;
        if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 294;
          _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVHIDEventListener::CloseDevice() - closing device.", buf, 0x12u);
        }
        sub_BE4EC(a1, 0);
        IOHIDDeviceClose(*(IOHIDDeviceRef *)(a1 + 24), 0);
        IOHIDDeviceCancel(*(IOHIDDeviceRef *)(a1 + 24));
        double v20 = *(const void **)(a1 + 24);
        *(void *)(a1 + 24) = v14;
        uint64_t v17 = (uint8_t *)a1;
        if (v20)
        {
          CFRelease(v20);
          unsigned int v14 = *(__IOHIDDevice **)(a1 + 24);
        }
      }
      else
      {
        *(void *)(a1 + 24) = v14;
      }
      IOHIDDeviceRegisterInputReportCallback(v14, v17 + 32, 26, (IOHIDReportCallback)sub_CA53C, v17);
      uint64_t v21 = *(__IOHIDDevice **)(a1 + 24);
      *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 0x40000000;
      *(void *)&buf[16] = sub_CA510;
      uint64_t v32 = &unk_6203A0;
      uint64_t v33 = a1;
      IOHIDDeviceSetCancelHandler(v21, buf);
      IOHIDDeviceSetDispatchQueue(*(IOHIDDeviceRef *)(a1 + 24), *(dispatch_queue_t *)a1);
      IOHIDDeviceActivate(*(IOHIDDeviceRef *)(a1 + 24));
      IOReturn v22 = IOHIDDeviceOpen(*(IOHIDDeviceRef *)(a1 + 24), 0);
      if (v22)
      {
        std::string::size_type v23 = (os_log_t *)sub_32A48(41);
        BOOL v24 = *v23;
        if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)entryID = 136315650;
          *(void *)&entryID[4] = "AVHIDEventListener.h";
          __int16 v27 = 1024;
          int v28 = 324;
          __int16 v29 = 1024;
          IOReturn v30 = v22;
          _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d AVHIDEventListener::SetupMatchedServiceInputHandler() - error %u opening device.", entryID, 0x18u);
        }
        IOHIDDeviceCancel(*(IOHIDDeviceRef *)(a1 + 24));
      }
      else
      {
        std::mutex::lock((std::mutex *)(a1 + 64));
        sub_BE4EC(a1, *(void *)(a1 + 144) != 0);
        std::mutex::unlock((std::mutex *)(a1 + 64));
      }
    }
    else if (v16 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "AVHIDEventListener.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 335;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d AVHIDEventListener::SetupMatchedServiceInputHandler() - failed to create device.", buf, 0x12u);
    }
    return IOObjectRelease(MatchingService);
  }
  return result;
}

void sub_CA220(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_CA24C(uint64_t a1)
{
  return sub_C9D50(***(void ***)(a1 + 32), *(_DWORD *)(***(void ***)(a1 + 32) + 16));
}

void sub_CA2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    uint64_t v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      int v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      double v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    IOReturn v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      std::string::size_type v23 = v22;
      BOOL v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        int v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        double v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      __int16 v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        int v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        double v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0xCA288);
}

void sub_CA510(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = *(const void **)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void sub_CA53C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  if (a2)
  {
    os_log_t v7 = (os_log_t *)sub_32A48(41);
    os_log_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v42 = 136315650;
      uint64_t v43 = "AVHIDEventListener.h";
      __int16 v44 = 1024;
      int v45 = 431;
      __int16 v46 = 1024;
      LODWORD(v47) = a2;
      os_log_type_t v9 = "%25s:%-5d AVHIDEventListener - input report I/O error: %d";
      uint64_t v10 = v8;
      os_log_type_t v11 = OS_LOG_TYPE_ERROR;
LABEL_5:
      uint32_t v12 = 24;
LABEL_6:
      _os_log_impl(&def_1E50E8, v10, v11, v9, (uint8_t *)&v42, v12);
    }
  }
  else if (a1)
  {
    int v16 = *(_DWORD *)(a1 + 152);
    std::mutex::lock((std::mutex *)(a1 + 64));
    uint64_t v17 = *(void *)(a1 + 144);
    std::mutex::unlock((std::mutex *)(a1 + 64));
    if (v17)
    {
      if (a5 == 3)
      {
        if (!v16)
        {
          int v34 = (os_log_t *)sub_32A48(41);
          BOOL v35 = *v34;
          if (*v34)
          {
            if (os_log_type_enabled(*v34, OS_LOG_TYPE_DEBUG))
            {
              int v42 = 136315394;
              uint64_t v43 = "AVHIDEventListener.h";
              __int16 v44 = 1024;
              int v45 = 461;
              _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVHIDEventListener::OnInputReport() - received DRC data input report.", (uint8_t *)&v42, 0x12u);
            }
          }
        }
        int v23 = *(_DWORD *)(a1 + 152);
        if (!v23)
        {
          uint64_t v36 = (os_log_t *)sub_32A48(41);
          uint64_t v37 = *v36;
          if (*v36)
          {
            if (os_log_type_enabled(*v36, OS_LOG_TYPE_DEBUG))
            {
              int v42 = 136315394;
              uint64_t v43 = "AVHIDEventListener.h";
              __int16 v44 = 1024;
              int v45 = 344;
              _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVHIDEventListener::ForwardPayloadDataToDevices() - received AVClient DRC payload.", (uint8_t *)&v42, 0x12u);
            }
          }
        }
        unsigned int v24 = *(unsigned __int8 *)(a6 + 1);
        char v25 = *(unsigned char *)(a6 + 2);
        if ((v25 & 2) != 0) {
          float v26 = 1.0;
        }
        else {
          float v26 = 0.0;
        }
        if (!v23)
        {
          uint64_t v38 = (os_log_t *)sub_32A48(41);
          unsigned int v39 = *v38;
          if (*v38)
          {
            if (os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
            {
              CFNumberRef v40 = "1";
              uint64_t v43 = "AVHIDEventListener.h";
              __int16 v44 = 1024;
              int v45 = 352;
              __int16 v46 = 2048;
              if (v25) {
                CFNumberRef v41 = "1";
              }
              else {
                CFNumberRef v41 = "0";
              }
              int v42 = 136316162;
              if ((v25 & 2) == 0) {
                CFNumberRef v40 = "0";
              }
              double v47 = (double)v24;
              __int16 v48 = 2080;
              BOOL v49 = v41;
              __int16 v50 = 2080;
              uint64_t v51 = v40;
              _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVHIDEventListener::ForwardPayloadDataToDevices() - dBA estimate: %.2f, wind flag: %s, self voice: %s", (uint8_t *)&v42, 0x30u);
            }
          }
        }
        LOBYTE(v42) = v23 == 0;
        std::mutex::lock((std::mutex *)(a1 + 64));
        __int16 v27 = *(void **)(a1 + 128);
        if (v27 != (void *)(a1 + 136))
        {
          do
          {
            os_log_t v28 = (void **)v27[4];
            sub_CA9D8(&v42, v28, 1701735534, (float)v24);
            sub_CA9D8(&v42, v28, 1937140846, v26);
            __int16 v29 = (void *)v27[1];
            if (v29)
            {
              do
              {
                IOReturn v30 = v29;
                __int16 v29 = (void *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                IOReturn v30 = (void *)v27[2];
                BOOL v31 = *v30 == (void)v27;
                __int16 v27 = v30;
              }
              while (!v31);
            }
            __int16 v27 = v30;
          }
          while (v30 != (void *)(a1 + 136));
        }
        std::mutex::unlock((std::mutex *)(a1 + 64));
        int v32 = *(_DWORD *)(a1 + 152);
        if (v32 == 19) {
          int v33 = 0;
        }
        else {
          int v33 = v32 + 1;
        }
        *(_DWORD *)(a1 + 152) = v33;
      }
      else if (a5 == 2)
      {
        int v18 = (os_log_t *)sub_32A48(41);
        os_log_t v19 = *v18;
        if (*v18)
        {
          if (os_log_type_enabled(*v18, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = *(unsigned __int8 *)(a6 + 1);
            int v42 = 136315650;
            uint64_t v43 = "AVHIDEventListener.h";
            __int16 v44 = 1024;
            int v45 = 456;
            __int16 v46 = 1024;
            LODWORD(v47) = v20;
            os_log_type_t v9 = "%25s:%-5d AVHIDEventListener::OnInputReport() - received error status input report %d.";
            uint64_t v10 = v19;
            os_log_type_t v11 = OS_LOG_TYPE_DEFAULT;
            goto LABEL_5;
          }
        }
      }
    }
    else if (!v16)
    {
      uint32_t v21 = (os_log_t *)sub_32A48(41);
      os_log_t v22 = *v21;
      if (*v21)
      {
        if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEBUG))
        {
          int v42 = 136315394;
          uint64_t v43 = "AVHIDEventListener.h";
          __int16 v44 = 1024;
          int v45 = 447;
          os_log_type_t v9 = "%25s:%-5d AVHIDEventListener::OnInputReport() - received input report but no devices registered. Ignoring.";
          uint64_t v10 = v22;
          os_log_type_t v11 = OS_LOG_TYPE_DEBUG;
          uint32_t v12 = 18;
          goto LABEL_6;
        }
      }
    }
  }
}

void sub_CA9BC(_Unwind_Exception *exception_object)
{
}

void sub_CA9D8(unsigned char *a1, void **a2, uint64_t a3, float a4)
{
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t, void))(*a2[126] + 352))(a2[126], 1685287015, a3, 0))
  {
    if (*a1)
    {
      os_log_t v8 = (os_log_t *)sub_32A48(41);
      os_log_type_t v9 = *v8;
      if (*v8)
      {
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(v22, a3);
          int v10 = v23;
          os_log_type_t v11 = (void **)v22[0];
          ((void (*)(void **__return_ptr, void **))(*a2)[12])(__p, a2);
          uint32_t v12 = v22;
          if (v10 < 0) {
            uint32_t v12 = v11;
          }
          if (v21 >= 0) {
            os_log_t v13 = __p;
          }
          else {
            os_log_t v13 = (void **)__p[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          char v25 = "AVHIDEventListener.h";
          __int16 v26 = 1024;
          int v27 = 359;
          __int16 v28 = 2080;
          __int16 v29 = v12;
          __int16 v30 = 2048;
          double v31 = a4;
          __int16 v32 = 2080;
          int v33 = v13;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d AVHIDEventListener::ForwardPayloadDataToDevices() - setting param '%s' to '%.2f' on device '%s'.", buf, 0x30u);
          if (v21 < 0) {
            operator delete(__p[0]);
          }
          if (v23 < 0) {
            operator delete(v22[0]);
          }
        }
      }
    }
    (*(void (**)(void *, uint64_t, uint64_t, void, float))(*a2[126] + 368))(a2[126], 1685287015, a3, 0, a4);
  }
  else
  {
    unsigned int v14 = (os_log_t *)sub_32A48(41);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      ((void (*)(void **__return_ptr, void **))(*a2)[12])(v22, a2);
      int v16 = v23;
      uint64_t v17 = (void **)v22[0];
      sub_2417C(__p, a3);
      int v18 = v22;
      if (v16 < 0) {
        int v18 = v17;
      }
      if (v21 >= 0) {
        os_log_t v19 = __p;
      }
      else {
        os_log_t v19 = (void **)__p[0];
      }
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
      char v25 = "AVHIDEventListener.h";
      __int16 v26 = 1024;
      int v27 = 367;
      __int16 v28 = 2080;
      __int16 v29 = v18;
      __int16 v30 = 2080;
      double v31 = *(double *)&v19;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d AVHIDEventListener::ForwardPayloadDataToDevices() - device '%s' does not support param '%s'", buf, 0x26u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
  }
}

void sub_CACF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CAD1C(uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress)
{
  uint64_t result = AudioObjectHasProperty(*a2, inAddress);
  if (result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t result = sub_26E94(*a2, inAddress, 0, 0);
    UInt32 ioDataSize = result;
    if (result)
    {
      uint64_t outData = 0;
      uint64_t result = AudioObjectGetPropertyData(*a2, inAddress, 0, 0, &ioDataSize, &outData);
      *(_DWORD *)a1 = result;
      if (!result)
      {
        uint64_t v7 = outData;
        v8[0] = &off_6412B0;
        v8[1] = 0;
        *(void *)(a1 + 8) = &off_6412B0;
        *(void *)(a1 + 16) = v7;
        *(unsigned char *)(a1 + 24) = 1;
        return (uint64_t)sub_49A90(v8);
      }
    }
  }
  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t sub_CAE2C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64) && *(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(unsigned char *)(a1 + 32) && *(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

unsigned char *sub_CAE80(unsigned char *__dst, long long *a2)
{
  *__dst = 0;
  __dst[24] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_21E8C(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *(_OWORD *)__dst = v3;
    }
    __dst[24] = 1;
  }
  return __dst;
}

void sub_CAEE8(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_CAF0C(void *a1)
{
  sub_49A90(a1);

  operator delete();
}

void sub_CAF48(uint64_t a1, uint64_t a2, void *a3, double *a4, unsigned int *a5, double *a6, uint64_t a7)
{
  int v34 = (void *)a7;
  unsigned __int8 v33 = 0;
  int v13 = sub_AED38(a7 + 736, (char *)&v33);
  int v14 = v33;
  if (v33 != v13)
  {
    uint64_t v15 = (os_log_t *)sub_32A48(13);
    int v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)&uint8_t buf[4] = "IOMonitor.h";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 173;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v13;
        LOWORD(v36) = 1024;
        *(_DWORD *)((char *)&v36 + 2) = v14;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"By definition, the IO thread is singular and not reentrant. As a result, it is a deep logic error if the IO thread already owns mIOProcThreadMutex. trySucceeded (%u) and outWasLocked (%u) imply this logic error.\"", buf, 0x1Eu);
      }
    }
  }
  if (v13)
  {
    v32[0] = &v33;
    v32[1] = &v34;
    pthread_t v17 = pthread_self();
    int v18 = v34;
    v34[80] = v17;
    ++*((_DWORD *)v18 + 228);
    uint64_t v20 = v18[58] + 8;
    os_log_t v19 = *(uint64_t **)v20;
    if (*(void *)(v20 + 8) == *(void *)v20)
    {
      uint64_t v21 = 0;
      if (a3) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v21 = *v19;
      if (a3) {
        goto LABEL_19;
      }
    }
    uint64_t v25 = *(void *)(v21 + 200);
    if (!v25)
    {
      a3 = &unk_65DD00;
      if (a5) {
        goto LABEL_25;
      }
      goto LABEL_20;
    }
    sub_CB448(*(void *)v21, 1, v25, (void *)(v21 + 176));
    a3 = *(void **)(v21 + 200);
LABEL_19:
    if (a5) {
      goto LABEL_25;
    }
LABEL_20:
    uint64_t v26 = *(void *)(v21 + 232);
    if (v26)
    {
      sub_CB448(*(void *)v21, 0, v26, (void *)(v21 + 208));
      a5 = *(unsigned int **)(v21 + 232);
    }
    else
    {
      a5 = (unsigned int *)&unk_65DD00;
    }
LABEL_25:
    if (*(unsigned char *)(v21 + 54))
    {
      int v27 = *(_DWORD *)(v21 + 120);
      if (!v27 || ((v27 & 1) != 0 ? (double v28 = *a4) : (double v28 = *a6), v28 >= *(double *)(v21 + 56)))
      {
        __int16 v29 = *(void (**)(void, uint64_t, void *, double *, unsigned int *, double *, void))(v21 + 8);
        if (v29)
        {
          v29(*(unsigned int *)(*(void *)v21 + 8), a2, a3, a4, a5, a6, *(void *)(v21 + 16));
        }
        else
        {
          uint64_t v30 = *(void *)(v21 + 40);
          if (v30)
          {
            double v31 = *(NSObject **)(v21 + 32);
            if (v31)
            {
              *(void *)AudioObjectPropertyAddress buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 0x40000000;
              *(void *)&buf[16] = sub_CB57C;
              uint64_t v36 = &unk_620450;
              uint64_t v37 = v21;
              uint64_t v38 = a2;
              unsigned int v39 = a3;
              CFNumberRef v40 = a4;
              CFNumberRef v41 = a5;
              int v42 = a6;
              dispatch_sync(v31, buf);
            }
            else
            {
              (*(void (**)(void, uint64_t, void *, double *, unsigned int *, double *))(v30 + 16))(*(void *)(v21 + 40), a2, a3, a4, a5, a6);
            }
          }
        }
      }
    }
    (*(void (**)(void *))(*v34 + 240))(v34);
    v34[80] = 0;
    sub_CB33C((uint64_t)v32);
    return;
  }
  ++*(_DWORD *)(a7 + 1076);
  if (a5)
  {
    unint64_t v22 = *a5;
    if (v22)
    {
      unint64_t v23 = 0;
      unsigned int v24 = (void **)(a5 + 4);
      do
      {
        if (*v24)
        {
          bzero(*v24, *((unsigned int *)v24 - 1));
          unint64_t v22 = *a5;
        }
        ++v23;
        v24 += 2;
      }
      while (v23 < v22);
    }
  }
}

void sub_CB280(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    int v13 = (os_log_t *)sub_32A48(1);
    int v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "VirtualAudio_Device.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 4067;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_INFO, "%25s:%-5d swallowing an exception thrown during the IOProc", (uint8_t *)&buf, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0xCB1A0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_CB33C(uint64_t a1)
{
  if (**(unsigned char **)a1)
  {
    uint64_t v2 = **(void **)(a1 + 8);
    long long v3 = pthread_self();
    if (!pthread_equal(v3, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(v2 + 752), memory_order_acquire)))
    {
      io_object_t v5 = (os_log_t *)sub_32A48(13);
      char v6 = *v5;
      if (*v5)
      {
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
        {
          int v7 = 136315394;
          os_log_t v8 = "IOMonitor.h";
          __int16 v9 = 1024;
          int v10 = 125;
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"It is illegal to call Unlock_FromIOThread from a thread that does not own the mIOProcThreadMutex.\"", (uint8_t *)&v7, 0x12u);
        }
      }
    }
    sub_3A944(v2 + 736);
  }
  return a1;
}

void sub_CB43C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_CB448(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v4 = (uint64_t *)(a1 + 528);
  if (a2) {
    uint64_t v4 = (uint64_t *)(a1 + 504);
  }
  uint64_t v5 = *v4;
  if (a2) {
    char v6 = (void *)(a1 + 496);
  }
  else {
    char v6 = (void *)(a1 + 520);
  }
  unint64_t v7 = v5 - *v6;
  if ((v7 & 0x7FFFFFFF8) != 0)
  {
    unint64_t v11 = 0;
    uint64_t v12 = (v7 >> 3);
    if (a2) {
      int v13 = (void *)(a1 + 496);
    }
    else {
      int v13 = (void *)(a1 + 520);
    }
    uint64_t v14 = a3 + 8;
    do
    {
      if (v11 >= (unint64_t)((uint64_t)(v13[1] - *v13) >> 3)) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = *(void *)(*v13 + 8 * v11);
      }
      if (v11 < (uint64_t)(a4[1] - *a4) >> 3 && (int v16 = *(unsigned int **)(*a4 + 8 * v11)) != 0)
      {
        if (!a2 || !byte_648A3C || !byte_648A3D) {
          bzero(v16 + 4, v16[2]);
        }
        unsigned int v17 = v16[3];
        *(_DWORD *)uint64_t v14 = *(_DWORD *)(*(void *)(v15 + 104) + 44);
        *(_DWORD *)(v14 + 4) = v17;
        int v18 = v16 + 4;
      }
      else
      {
        os_log_t v19 = *(_DWORD **)(v15 + 104);
        *(_DWORD *)uint64_t v14 = v19[11];
        int v20 = sub_1E7DD4(v19, *(_DWORD *)(a1 + 488));
        int v18 = 0;
        *(_DWORD *)(v14 + 4) = v20;
      }
      *(void *)(v14 + 8) = v18;
      ++v11;
      v14 += 16;
    }
    while (v12 != v11);
  }
}

uint64_t sub_CB57C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(*(void *)(a1[4] + 40) + 16))(*(void *)(a1[4] + 40), a1[5], a1[6], a1[7], a1[8], a1[9]);
}

void sub_CB59C(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unsigned char *a5)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  char v6 = *(uint64_t **)(a1 + 16);
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v9 = *v5;
      if (*v5 == a2) {
        break;
      }
      if (*(void *)(v9 + 8) == a2) {
        goto LABEL_7;
      }
      if (++v5 == v6) {
        return;
      }
    }
    uint64_t v9 = a2;
    if (!a2) {
      return;
    }
LABEL_7:
    uint64_t v10 = *(void *)v9;
    if (a3) {
      uint64_t v11 = v9 + 128;
    }
    else {
      uint64_t v11 = v9 + 152;
    }
    *(void *)(v11 + 8) = 0;
    uint64_t v12 = 528;
    if (a3) {
      uint64_t v12 = 504;
    }
    uint64_t v13 = 520;
    if (a3) {
      uint64_t v13 = 496;
    }
    uint64_t v14 = (*(void *)(v10 + v12) - *(void *)(v10 + v13)) >> 3;
    if (v14 >= a4) {
      uint64_t v15 = a4;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v15)
    {
      do
      {
        sub_B2EC0(v11, a5++);
        --v15;
      }
      while (v15);
    }
    if (*(unsigned char *)(v9 + 54))
    {
      sub_B25F8(a1, v9);
      sub_B26A4((_DWORD **)a1);
    }
  }
}

uint64_t sub_CB6AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

void sub_CB6FC(void *a1)
{
  sub_CB734(a1);

  operator delete();
}

void *sub_CB734(void *a1)
{
  *a1 = off_620438;
  if (a1[1])
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    long long v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        char v6 = "VirtualAudio_Device.cpp";
        __int16 v7 = 1024;
        int v8 = 3943;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to execute command prior to destruction.", (uint8_t *)&v5, 0x12u);
      }
    }
  }
  return a1;
}

void sub_CB81C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

unsigned char *sub_CB828(atomic_ullong *a1, uint64_t *a2)
{
  sub_3B7EC();
  if ((*(unsigned int (**)(void))(qword_64CC40 + 48))())
  {
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "VirtualAudio_Device.cpp";
      __int16 v15 = 1024;
      int v16 = 888;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = pthread_self();
  if (pthread_equal(v4, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire))
    || (int v5 = pthread_self(), pthread_equal(v5, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire))))
  {
    __int16 v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "VirtualAudio_Device.cpp";
      __int16 v15 = 1024;
      int v16 = 889;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }
    uint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v9, "Precondition failure.");
  }
  sub_BEEA0((uint64_t)a1, 1);

  return sub_B7F0C(a1, a2, 0, 0, 0);
}

void sub_CBA5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_CBA7C(atomic_ullong *a1, uint64_t *a2)
{
  sub_3B7EC();
  if ((*(unsigned int (**)(void))(qword_64CC40 + 48))())
  {
    __int16 v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "VirtualAudio_Device.cpp";
      __int16 v15 = 1024;
      int v16 = 900;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = pthread_self();
  if (!pthread_equal(v4, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire)))
  {
    int v5 = pthread_self();
    if (!pthread_equal(v5, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire)))
    {
      uint64_t v10 = (os_log_t *)sub_32A48(13);
      uint64_t v11 = *v10;
      if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint64_t v14 = "VirtualAudio_Device.cpp";
        __int16 v15 = 1024;
        int v16 = 901;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v13, 0x12u);
      }
      uint64_t v12 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v12, "Precondition failure.");
    }
  }
  sub_BEEA0((uint64_t)a1, 1);

  return sub_B7F0C(a1, a2, 0, 1, 0);
}

void sub_CBCB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_CBCD0(atomic_ullong *a1)
{
  uint64_t v2 = pthread_self();
  if (pthread_equal(v2, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire))
    || (long long v3 = pthread_self(), pthread_equal(v3, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire))))
  {
    uint64_t v21 = (os_log_t *)sub_32A48(13);
    unint64_t v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      __int16 v32 = 1024;
      int v33 = 978;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v4 = (os_log_t *)sub_32A48(1);
  int v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    __int16 v32 = 1024;
    int v33 = 980;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Stream preference state change begun.", buf, 0x12u);
  }
  sub_3B7EC();
  __int16 v29 = &qword_64CC40;
  char v30 = 0;
  char v30 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  unint64_t v6 = a1[66] - a1[65];
  if ((v6 & 0x7FFFFFFF8) != 0)
  {
    sub_B77D4(v28, (uint64_t)a1);
    __int16 v7 = pthread_self();
    if (!pthread_equal(v7, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire)))
    {
      int v8 = pthread_self();
      if (!pthread_equal(v8, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire)))
      {
        unsigned int v24 = (os_log_t *)sub_32A48(13);
        uint64_t v25 = *v24;
        if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
          __int16 v32 = 1024;
          int v33 = 992;
          _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", buf, 0x12u);
        }
        uint64_t v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v26, "Invariant failure.");
      }
    }
    unint64_t v9 = 0;
    memset(v27, 0, sizeof(v27));
    do
    {
      atomic_ullong v10 = a1[65];
      if (v9 >= (a1[66] - v10) >> 3) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = *(void *)(v10 + 8 * v9);
      }
      uint64_t v12 = (os_log_t *)sub_32A48(1);
      int v13 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
        __int16 v32 = 1024;
        int v33 = 1000;
        __int16 v34 = 2048;
        uint64_t v35 = v11;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Refreshing output stream %p for stream format preference change.", buf, 0x1Cu);
      }
      sub_ED518(v11, v27);
      ++v9;
    }
    while ((v6 >> 3) != v9);
    if (sub_21EF80((_DWORD *)(a1[126] + 264)))
    {
      atomic_ullong v14 = a1[62];
      atomic_ullong v15 = a1[63];
      if (((v15 - v14) & 0x7FFFFFFF8) != 0)
      {
        unint64_t v16 = 0;
        do
        {
          if (v16 >= (v15 - v14) >> 3) {
            uint64_t v17 = 0;
          }
          else {
            uint64_t v17 = *(void *)(v14 + 8 * v16);
          }
          int v18 = (os_log_t *)sub_32A48(1);
          os_log_t v19 = *v18;
          if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            __int16 v32 = 1024;
            int v33 = 1014;
            __int16 v34 = 2048;
            uint64_t v35 = v17;
            _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d Refreshing input stream %p for stream format preference change.", buf, 0x1Cu);
          }
          sub_ED518(v17, v27);
          ++v16;
          atomic_ullong v14 = a1[62];
          atomic_ullong v15 = a1[63];
        }
        while (v16 < ((unint64_t)(v15 - v14) >> 3));
      }
    }
    sub_D075C(a1[79], v27);
    sub_B7980(a1, v27);
    *(void *)AudioObjectPropertyAddress buf = v27;
    sub_EE3E4((void ***)buf);
    sub_B7D50(v28);
  }
  return sub_3BCAC(&v29);
}

void sub_CC194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t buf, int a20,__int16 a21,int a22,__int16 a23,uint64_t a24,__int16 a25,uint64_t a26,int a27)
{
  __cxa_free_exception(v27);
  sub_B7D50(&a15);
  sub_3BCAC(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_CC45C(uint64_t a1, char a2)
{
  uint64_t v3 = 0;
  v5[0] = a2;
  int v6 = 0;
  (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t))(*(void *)a1 + 424))(a1, &v3, v4, 1869968496);
  return sub_8C710((uint64_t)v5);
}

void sub_CC504(_Unwind_Exception *a1)
{
  sub_8C710(v1);
  _Unwind_Resume(a1);
}

void sub_CC518(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    atomic_ullong v14 = (os_log_t *)sub_32A48(13);
    atomic_ullong v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1454;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  int v6 = pthread_self();
  if (pthread_equal(v6, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire))
    || (__int16 v7 = pthread_self(), pthread_equal(v7, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire))))
  {
    uint64_t v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1455;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v13, "Precondition failure.");
  }
  memset(buf, 0, sizeof(buf));
  sub_B77D4(v23, (uint64_t)a1);
  int v8 = pthread_self();
  if (!pthread_equal(v8, (pthread_t)atomic_load_explicit(a1 + 83, memory_order_acquire)))
  {
    unint64_t v9 = pthread_self();
    if (!pthread_equal(v9, (pthread_t)atomic_load_explicit(a1 + 94, memory_order_acquire)))
    {
      int v20 = (os_log_t *)sub_32A48(13);
      uint64_t v21 = *v20;
      if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unsigned int v24 = 136315394;
        *(void *)&v24[4] = "VirtualAudio_Device.cpp";
        __int16 v25 = 1024;
        int v26 = 1463;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", v24, 0x12u);
      }
      unint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v22, "Invariant failure.");
    }
  }
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 144))(a3, a2);
  if (v10)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(13);
    int v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unsigned int v24 = 136315394;
      *(void *)&v24[4] = "VirtualAudio_Device.cpp";
      __int16 v25 = 1024;
      int v26 = 1480;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (theResult) [error theResult is an error]: \"error setting the format on the hardware stream\"", v24, 0x12u);
    }
    os_log_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)os_log_t v19 = &off_6414D8;
    v19[2] = v10;
  }
  sub_B9928(a1, (uint64_t *)buf);
  sub_B9CE8((uint64_t)a1);
  sub_D075C(a1[79], (uint64_t *)buf);
  sub_B7980(a1, (uint64_t *)buf);
  sub_B7D50(v23);
  *(void *)unsigned int v24 = buf;
  sub_EE3E4((void ***)v24);
}

void sub_CC938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  sub_B7D50(&a9);
  a11 = &a15;
  sub_EE3E4((void ***)&a11);
  _Unwind_Resume(a1);
}

void sub_CC99C(uint64_t a1, const __CFDictionary *a2, int a3)
{
  if (*(double *)&a2 == 0.0)
  {
    BOOL v77 = (os_log_t *)sub_32A48(13);
    long long v78 = *v77;
    if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      *(void *)int v87 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v87[8] = 1024;
      *(_DWORD *)&v87[10] = 1496;
      _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (a3 > 1936749156)
  {
    if (a3 == 1937007472) {
      goto LABEL_8;
    }
    unsigned __int16 v6 = 29285;
  }
  else
  {
    if (a3 == 1835229549) {
      goto LABEL_8;
    }
    unsigned __int16 v6 = 25456;
  }
  if (a3 != (v6 | 0x73700000)) {
    return;
  }
LABEL_8:
  __int16 v7 = operator new(8uLL);
  char v8 = 0;
  uint64_t v9 = 0;
  *__int16 v7 = 0x63666F7663646972;
  int v10 = 1;
  do
  {
    char v11 = v8;
    v10 &= (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 1008) + 352))(*(void *)(a1 + 1008), 1685287015, *((unsigned int *)v7 + v9), 0);
    char v8 = 1;
    uint64_t v9 = 1;
  }
  while ((v11 & 1) == 0);
  operator delete(v7);
  if ((v10 & 1) == 0)
  {
    uint64_t v12 = (os_log_t *)sub_32A48(1);
    int v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v84, 0x63646972u);
        int v14 = v85;
        atomic_ullong v15 = (void **)v84[0];
        sub_2417C(__p, 0x63666F76u);
        *(double *)&unint64_t v16 = COERCE_DOUBLE(v84);
        if (v14 < 0) {
          unint64_t v16 = v15;
        }
        if (v83 >= 0) {
          uint64_t v17 = __p;
        }
        else {
          uint64_t v17 = (void **)__p[0];
        }
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
        *(void *)int v87 = "VirtualAudio_Device.cpp";
        *(_WORD *)&v87[8] = 1024;
        *(_DWORD *)&v87[10] = 1520;
        __int16 v88 = 2080;
        double v89 = *(double *)&v16;
        __int16 v90 = 2080;
        __int16 v91 = v17;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Camera parameters [%s %s] not supported by DSP chain", buf, 0x26u);
        if (v83 < 0) {
          operator delete(__p[0]);
        }
        if (v85 < 0) {
          operator delete(v84[0]);
        }
      }
    }
  }
  if (a3 > 1936749156)
  {
    if (a3 != 1937007472)
    {
      unsigned __int16 v18 = 29285;
LABEL_27:
      if (a3 != (v18 | 0x73700000)) {
        return;
      }
    }
  }
  else if (a3 != 1835229549)
  {
    unsigned __int16 v18 = 25456;
    goto LABEL_27;
  }
  os_log_t v19 = operator new(8uLL);
  char v20 = 0;
  uint64_t v21 = 0;
  void *v19 = 0x63666F7663646972;
  int v22 = 1;
  do
  {
    char v23 = v20;
    v22 &= (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 1008) + 352))(*(void *)(a1 + 1008), 1685287015, *((unsigned int *)v19 + v21), 0);
    char v20 = 1;
    uint64_t v21 = 1;
  }
  while ((v23 & 1) == 0);
  operator delete(v19);
  if (v22)
  {
    unsigned int v24 = (os_log_t *)sub_32A48(1);
    __int16 v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)int v87 = "VirtualAudio_Device.cpp";
      *(_WORD *)&v87[8] = 1024;
      *(_DWORD *)&v87[10] = 1525;
      __int16 v88 = 2112;
      double v89 = *(double *)&a2;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting camera parameters on input DSP: %@", buf, 0x1Cu);
    }
    CFNumberRef v26 = (const __CFNumber *)sub_21F8C(a2, "camera wind suppression");
    if (v26) {
      CFNumberRef v27 = sub_22314(v26);
    }
    else {
      CFNumberRef v27 = 0;
    }
    CFNumberRef v28 = (const __CFNumber *)sub_689AC(a2, "camera real time dynamics");
    if (v28) {
      CFNumberRef v29 = sub_22314(v28);
    }
    else {
      CFNumberRef v29 = 0;
    }
    if ((unint64_t)v27 >> 32)
    {
      char v30 = (os_log_t *)sub_32A48(1);
      double v31 = *v30;
      if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
        *(void *)int v87 = "VirtualAudio_Device.cpp";
        *(_WORD *)&v87[8] = 1024;
        *(_DWORD *)&v87[10] = 1533;
        __int16 v88 = 1024;
        LODWORD(v89) = v27;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting wind suppression overlay tuning to %u", buf, 0x18u);
      }
      uint64_t v32 = *(void *)(a1 + 1008);
      v84[0] = &dword_4 + 1;
      v87[4] = v27 != 0;
      int v94 = 0;
      (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v32 + 424))(v32, v84, buf, 1768845428);
      sub_8C710((uint64_t)&v87[4]);
      if ((unint64_t)v29 >> 32)
      {
        int v33 = (os_log_t *)sub_32A48(1);
        unint64_t v34 = (v29 != 0) | (2 * (v27 != 0));
        uint64_t v35 = *v33;
        if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_DEFAULT))
        {
          char v36 = 0;
          uint64_t v37 = 0;
          char v85 = 2;
          strcpy((char *)v84, "00");
          do
          {
            char v38 = v36;
            if ((v34 >> v37))
            {
              uint64_t v39 = v37 ^ 1;
              if (v85 >= 0) {
                CFNumberRef v40 = v84;
              }
              else {
                CFNumberRef v40 = (void **)v84[0];
              }
              *((unsigned char *)v40 + v39) = 49;
            }
            char v36 = 1;
            uint64_t v37 = 1;
          }
          while ((v38 & 1) == 0);
          *(double *)&CFNumberRef v41 = COERCE_DOUBLE(v84);
          if (v85 < 0) {
            CFNumberRef v41 = (void **)v84[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)int v87 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 1546;
          __int16 v88 = 2080;
          double v89 = *(double *)&v41;
          _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting wind and dynamics processing overlay tuning to %s", buf, 0x1Cu);
          if (v85 < 0) {
            operator delete(v84[0]);
          }
        }
        uint64_t v42 = *(void *)(a1 + 1008);
        v84[0] = &dword_4 + 2;
        *(void *)&v87[4] = v34;
        int v94 = 3;
        (*(void (**)(uint64_t, void **, uint8_t *, uint64_t))(*(void *)v42 + 424))(v42, v84, buf, 1768845428);
        sub_8C710((uint64_t)&v87[4]);
      }
    }
    CFNumberRef v43 = (const __CFNumber *)sub_7E8C8(a2, "camera dir");
    if (v43)
    {
      CFNumberRef v44 = sub_22314(v43);
      if ((unint64_t)v44 >> 32)
      {
        unsigned int v45 = v44;
        __int16 v46 = (os_log_t *)sub_32A48(16);
        double v47 = *v46;
        if (*v46 && os_log_type_enabled(*v46, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)int v87 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 1555;
          __int16 v88 = 1024;
          LODWORD(v89) = v45;
          _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting camera direction %d on DSP", buf, 0x18u);
        }
        (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368))(*(void *)(a1 + 1008), 1685287015, 1667524978, 0, (float)v45);
      }
    }
    __int16 v48 = sub_7E8C8(a2, "camera fov");
    if (v48)
    {
      unint64_t v49 = sub_9976C((uint64_t)v48);
      if (HIDWORD(v49))
      {
        float v50 = *(float *)&v49;
        uint64_t v51 = (os_log_t *)sub_32A48(16);
        float v52 = v50;
        double v53 = *v51;
        if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
          *(void *)int v87 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 1561;
          __int16 v88 = 2048;
          double v89 = v52;
          _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting camera fov %f on DSP", buf, 0x1Cu);
        }
        (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368))(*(void *)(a1 + 1008), 1685287015, 1667657590, 0, v52);
      }
    }
  }
  if (a3 == 1835229549)
  {
    unsigned int v54 = (char *)operator new(0xCuLL);
    uint64_t v55 = 0;
    qmemcpy(v54, "tnfmkcbmnmom", 12);
    int v56 = 1;
    do
    {
      v56 &= (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 1008) + 384))(*(void *)(a1 + 1008), 1685287015, *(unsigned int *)&v54[v55], 0);
      v55 += 4;
    }
    while (v55 != 12);
    operator delete(v54);
    if ((v56 & 1) == 0)
    {
      unsigned int v57 = (os_log_t *)sub_32A48(1);
      BOOL v58 = *v57;
      if (*v57)
      {
        if (os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
        {
          *(double *)&uint64_t v59 = COERCE_DOUBLE(v84);
          sub_2417C(v84, 0x6D666E74u);
          if (v85 < 0) {
            uint64_t v59 = (void **)v84[0];
          }
          sub_2417C(__p, 0x6D62636Bu);
          int v60 = v83;
          char v61 = (void **)__p[0];
          sub_2417C(v80, 0x6D6F6D6Eu);
          unint64_t v62 = __p;
          if (v60 < 0) {
            unint64_t v62 = v61;
          }
          if (v81 >= 0) {
            char v63 = v80;
          }
          else {
            char v63 = (void **)v80[0];
          }
          *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
          *(void *)int v87 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 1569;
          __int16 v88 = 2080;
          double v89 = *(double *)&v59;
          __int16 v90 = 2080;
          __int16 v91 = v62;
          __int16 v92 = 2080;
          __int16 v93 = v63;
          _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d Camera properties [%s %s %s] not supported by DSP chain", buf, 0x30u);
          if (v81 < 0) {
            operator delete(v80[0]);
          }
          if (v83 < 0) {
            operator delete(__p[0]);
          }
          if (v85 < 0) {
            operator delete(v84[0]);
          }
        }
      }
    }
    char v64 = (char *)operator new(0xCuLL);
    uint64_t v65 = 0;
    qmemcpy(v64, "tnfmkcbmnmom", 12);
    int v66 = 1;
    do
    {
      v66 &= (*(uint64_t (**)(void, uint64_t, void, void))(**(void **)(a1 + 1008) + 384))(*(void *)(a1 + 1008), 1685287015, *(unsigned int *)&v64[v65], 0);
      v65 += 4;
    }
    while (v65 != 12);
    operator delete(v64);
    if (v66)
    {
      CFNumberRef v67 = (const __CFNumber *)sub_CD6FC(a2, "camera mics");
      if (v67 && (CFNumberRef v68 = sub_22314(v67), (unint64_t)v68 >> 32))
      {
        int v74 = (int)v68;
        LODWORD(v84[0]) = 1;
        if ((v68 & 4) != 0) {
          (*(void (**)(void, uint64_t, uint64_t, void **, uint64_t, void, void))(**(void **)(a1 + 1008)
        }
                                                                                             + 400))(*(void *)(a1 + 1008), 1685287015, 1835429492, v84, 4, 0, 0);
        if ((v74 & 2) != 0) {
          (*(void (**)(void, uint64_t, uint64_t, void **, uint64_t, void, void))(**(void **)(a1 + 1008)
        }
                                                                                             + 400))(*(void *)(a1 + 1008), 1685287015, 1835164523, v84, 4, 0, 0);
        if (v74)
        {
          (*(void (**)(void, uint64_t, uint64_t, void **, uint64_t, void, void))(**(void **)(a1 + 1008)
                                                                                             + 400))(*(void *)(a1 + 1008), 1685287015, 1836019054, v84, 4, 0, 0);
        }
        else if (!v74)
        {
          BOOL v75 = (os_log_t *)sub_32A48(16);
          os_log_t v76 = *v75;
          if (*v75)
          {
            if (os_log_type_enabled(*v75, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
              *(void *)int v87 = "VirtualAudio_Device.cpp";
              *(_WORD *)&v87[8] = 1024;
              *(_DWORD *)&v87[10] = 1595;
              __int16 v88 = 1024;
              LODWORD(v89) = 0;
              size_t v71 = "%25s:%-5d Invalid value %u for kVirtualAudioDeviceCameraMicsKey";
              unsigned __int8 v72 = v76;
              uint32_t v73 = 24;
              goto LABEL_98;
            }
          }
        }
      }
      else
      {
        std::string v69 = (os_log_t *)sub_32A48(16);
        os_log_t v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
          *(void *)int v87 = "VirtualAudio_Device.cpp";
          *(_WORD *)&v87[8] = 1024;
          *(_DWORD *)&v87[10] = 1601;
          size_t v71 = "%25s:%-5d No value set for kVirtualAudioDeviceCameraMicsKey";
          unsigned __int8 v72 = v70;
          uint32_t v73 = 18;
LABEL_98:
          _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_ERROR, v71, buf, v73);
        }
      }
    }
  }
}

void sub_CD670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

const void *sub_CD6FC(const __CFDictionary *a1, char *__s)
{
  size_t v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_CD7B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_CD7F4(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 936);
  uint64_t v3 = *(void *)(a1 + 944);
  if (v2 == v3) {
    return 0;
  }
  while ((*(unsigned int (**)(void))(**(void **)v2 + 136))() != a2)
  {
    v2 += 8;
    if (v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == *(void *)(a1 + 944)) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t sub_CD888(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 984);
  uint64_t v3 = *(void *)(a1 + 992);
  if (v2 == v3) {
    return 0;
  }
  while ((*(unsigned int (**)(void))(**(void **)v2 + 136))() != a2)
  {
    v2 += 8;
    if (v2 == v3)
    {
      uint64_t v2 = v3;
      break;
    }
  }
  if (v2 == *(void *)(a1 + 992)) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

__n128 sub_CD920(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_6203F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_CD96C()
{
}

void sub_CD984(uint64_t a1, int a2)
{
  if ((a1 & 0xFF00000000) != 0)
  {
    AudioObjectID v3 = a1;
    AudioObjectID v35 = a1;
    std::string __p = (void *)0x676C6F6263756964;
    LODWORD(v30) = 0;
    sub_CDE9C((uint64_t)buf, &v35, (AudioObjectPropertyAddress *)&__p, 0, 0);
    if (*(_DWORD *)buf || !(_BYTE)v37)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      int v28 = *(_DWORD *)buf;
      *(void *)exception = &off_6414D8;
      exception[2] = v28;
    }
    sub_5505C(&__p, *(CFTypeRef *)&buf[16]);
    std::string __p = off_63E5A8;
    if ((_BYTE)v37) {
      sub_49A90(&buf[8]);
    }
    CFStringRef v4 = v30;
    CFStringRef v30 = 0;
    uint64_t v32 = off_63E5A8;
    CFStringRef theString = v4;
    char v34 = 1;
    sub_49A90(&__p);
    if (!v34) {
      goto LABEL_43;
    }
    sub_21B7C(buf, theString);
    sub_21C8C(&__p, "NetworkUplinkClock_UID");
    char v5 = buf[23];
    if (buf[23] >= 0) {
      CFStringRef v6 = (const __CFString *)buf[23];
    }
    else {
      CFStringRef v6 = *(const __CFString **)&buf[8];
    }
    CFStringRef v7 = (const __CFString *)v31;
    int v8 = (char)v31;
    if ((v31 & 0x80u) != 0) {
      CFStringRef v7 = v30;
    }
    if (v6 == v7)
    {
      if ((v31 & 0x80u) == 0) {
        p_p = (unsigned __int8 *)&__p;
      }
      else {
        p_p = (unsigned __int8 *)__p;
      }
      if ((buf[23] & 0x80000000) != 0)
      {
        BOOL v22 = memcmp(*(const void **)buf, p_p, *(size_t *)&buf[8]) == 0;
      }
      else
      {
        if (buf[23])
        {
          uint64_t v10 = buf[23] - 1;
          char v11 = buf;
          do
          {
            int v13 = *v11++;
            int v12 = v13;
            int v14 = *p_p++;
            int v15 = v12 != v14;
          }
          while (v12 == v14 && v10-- != 0);
          if (((char)v31 & 0x80000000) == 0)
          {
LABEL_25:
            if ((v5 & 0x80) == 0) {
              goto LABEL_26;
            }
            goto LABEL_42;
          }
LABEL_41:
          operator delete(__p);
          if ((buf[23] & 0x80) == 0)
          {
LABEL_26:
            if (v15)
            {
LABEL_27:
              uint64_t v17 = (os_log_t *)sub_32A48(17);
              unsigned __int16 v18 = *v17;
              if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
              {
                sub_21B7C(&__p, theString);
                if ((v31 & 0x80u) == 0) {
                  os_log_t v19 = &__p;
                }
                else {
                  os_log_t v19 = __p;
                }
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315906;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4243;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v3;
                __int16 v37 = 2080;
                char v38 = v19;
                _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Request to select a custom property time for the NetworkUplinkClock but the dedicated clock device is ID: %d, UID %s", buf, 0x22u);
                if ((char)v31 < 0) {
                  operator delete(__p);
                }
              }
LABEL_52:
              if (v34) {
                sub_49A90(&v32);
              }
              return;
            }
LABEL_43:
            if (a2)
            {
              char v23 = (os_log_t *)sub_32A48(17);
              unsigned int v24 = *v23;
              if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4250;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v3;
                _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Network Uplink Clock UID %d Timing information is derived from cellular baseband", buf, 0x18u);
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 1128614988;
              sub_CDFBC(v3, buf, COERCE_DOUBLE(1735159650));
            }
            else
            {
              __int16 v25 = (os_log_t *)sub_32A48(17);
              CFNumberRef v26 = *v25;
              if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
                *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4257;
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&buf[20] = v3;
                _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Network Uplink Clock UID %d Timing information is synthesized from local device clock", buf, 0x18u);
              }
              *(_DWORD *)AudioObjectPropertyAddress buf = 1280262988;
              sub_CDFBC(v3, buf, COERCE_DOUBLE(1735159650));
            }
            goto LABEL_52;
          }
LABEL_42:
          operator delete(*(void **)buf);
          if (v15) {
            goto LABEL_27;
          }
          goto LABEL_43;
        }
        BOOL v22 = 1;
      }
    }
    else
    {
      BOOL v22 = 0;
    }
    int v15 = !v22;
    if ((v8 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_41;
  }
  char v20 = (os_log_t *)sub_32A48(17);
  uint64_t v21 = *v20;
  if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4232;
    _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d Request to select a custom property time for the NetworkUplinkClock but no dedicated clock was found.", buf, 0x12u);
  }
}

void sub_CDE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a15) {
    sub_49A90(&a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_CDE9C(uint64_t a1, AudioObjectID *a2, AudioObjectPropertyAddress *inAddress, UInt32 a4, const void *a5)
{
  uint64_t result = AudioObjectHasProperty(*a2, inAddress);
  if (result)
  {
    *(_DWORD *)a1 = 2003329396;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t result = sub_26E94(*a2, inAddress, a4, a5);
    UInt32 ioDataSize = result;
    if (result)
    {
      uint64_t outData = 0;
      uint64_t result = AudioObjectGetPropertyData(*a2, inAddress, a4, a5, &ioDataSize, &outData);
      *(_DWORD *)a1 = result;
      if (!result)
      {
        uint64_t v11 = outData;
        v12[0] = off_63E5A8;
        v12[1] = 0;
        *(void *)(a1 + 8) = off_63E5A8;
        *(void *)(a1 + 16) = v11;
        *(unsigned char *)(a1 + 24) = 1;
        return (uint64_t)sub_49A90(v12);
      }
    }
  }
  else
  {
    *(_DWORD *)a1 = 2003332927;
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t sub_CDFBC(AudioObjectID a1, void *inData, double a3)
{
  inAddress.int mSelector = 1414746691;
  *(double *)&inAddress.AudioObjectPropertyScope mScope = a3;
  uint64_t result = AudioObjectSetPropertyData(a1, &inAddress, 0, 0, 4u, inData);
  if (result)
  {
    int v4 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v4;
  }
  return result;
}

void sub_CE058(void *a1)
{
  sub_49A90(a1);

  operator delete();
}

void sub_CE094(uint64_t a1, int a2, int a3, int a4)
{
  if (*(unsigned char *)(a1 + 1074) || !sub_C9B28(*(void *)(a1 + 1008), 0)) {
    return;
  }
  if (!a2)
  {
LABEL_95:
    LODWORD(cf) = a2 ^ 1;
    (*(void (**)(void, uint64_t, uint64_t, CFTypeRef *, uint64_t, uint64_t, void))(**(void **)(a1 + 1008)
                                                                                            + 400))(*(void *)(a1 + 1008), 1685287015, 1652123756, &cf, 4, 1, 0);
    unsigned int v45 = (os_log_t *)sub_32A48(2);
    os_log_t v46 = *v45;
    if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4776;
      __int16 v53 = 1024;
      LODWORD(v54) = cf;
      CFNumberRef v26 = "%25s:%-5d PME Bypass state change %u";
      CFNumberRef v27 = v46;
      uint32_t v28 = 24;
      goto LABEL_98;
    }
    return;
  }
  int v47 = a2;
  uint64_t v51 = 0;
  int v8 = *(void **)(a1 + 1040);
  if (v8 != (void *)(a1 + 1048))
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
    do
    {
      sub_3A8A8();
      uint64_t v11 = sub_33438(*((_DWORD *)v8 + 7));
      int v12 = *(std::__shared_weak_count **)(v11 + 96);
      CFTypeRef cf = *(CFTypeRef *)(v11 + 88);
      float v50 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_43F38((uint64_t *)buf, (uint64_t *)&cf, "", 4689);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      uint64_t v13 = *(void *)buf;
      if (*(void *)buf)
      {
        CFTypeRef v14 = *(CFTypeRef *)(*(void *)buf + 248);
        CFTypeRef cf = v14;
        LOBYTE(v50) = *(unsigned char *)(*(void *)buf + 256);
        if ((_BYTE)v50) {
          BOOL v15 = v14 == 0;
        }
        else {
          BOOL v15 = 1;
        }
        if (!v15)
        {
          CFRetain(v14);
          CFTypeRef v14 = cf;
        }
        sub_170B38(&v48, v14);
        unint64_t v16 = v48;
        uint64_t v51 = v48;
        __int16 v48 = v9;
        uint64_t v17 = v13;
        if (v9)
        {
          CFRelease(v9);
          uint64_t v17 = *(void *)buf;
        }
        sub_72924((uint64_t)&cf);
        BOOL v10 = *(_DWORD *)(v17 + 144) == 1885892706;
        uint64_t v9 = v16;
      }
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v13) {
        break;
      }
      unsigned __int16 v18 = (void *)v8[1];
      if (v18)
      {
        do
        {
          os_log_t v19 = v18;
          unsigned __int16 v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          os_log_t v19 = (void *)v8[2];
          BOOL v15 = *v19 == (void)v8;
          int v8 = v19;
        }
        while (!v15);
      }
      int v8 = v19;
    }
    while (v19 != (void *)(a1 + 1048));
    char v20 = v51;
    if (v51)
    {
      BOOL v21 = a3 == 1668309362 && a4 == 1751212899;
      int v22 = v21;
      if (!v21)
      {
        int v23 = 2;
        if (a4 > 1919776354)
        {
          if (a4 > 1987081832)
          {
            if (a4 == 1987081833) {
              goto LABEL_54;
            }
            unsigned __int16 v30 = 30319;
          }
          else
          {
            if (a4 == 1919776355) {
              goto LABEL_54;
            }
            unsigned __int16 v30 = 26467;
          }
          int v29 = v30 | 0x76700000;
        }
        else if (a4 > 1768779618)
        {
          if (a4 == 1768779619) {
            goto LABEL_54;
          }
          int v29 = 1768781411;
        }
        else
        {
          if (a4 == 1735222132) {
            goto LABEL_54;
          }
          int v29 = 1768057203;
        }
        if (a4 == v29 || v10)
        {
LABEL_54:
          BOOL v31 = sub_3DE70C(&v51, v23);
          int v32 = 1;
          if ((v10 | v22))
          {
            a2 = v47;
          }
          else
          {
            a2 = v47;
            if (a4 > 1919776354)
            {
              if (a4 > 1987081832)
              {
                if (a4 == 1987081833) {
                  goto LABEL_70;
                }
                unsigned __int16 v34 = 30319;
              }
              else
              {
                if (a4 == 1919776355) {
                  goto LABEL_70;
                }
                unsigned __int16 v34 = 26467;
              }
              int v33 = v34 | 0x76700000;
            }
            else if (a4 > 1768779618)
            {
              if (a4 == 1768779619) {
                goto LABEL_70;
              }
              int v33 = 1768781411;
            }
            else
            {
              if (a4 == 1735222132) {
                goto LABEL_70;
              }
              int v33 = 1768057203;
            }
            if (a4 != v33) {
              int v32 = 0;
            }
          }
LABEL_70:
          AudioObjectID v35 = (os_log_t *)sub_32A48(17);
          char v36 = *v35;
          if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v37 = *(void *)(a1 + 592);
            char v38 = "media";
            *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            if (v32) {
              char v38 = "speech";
            }
            uint64_t v39 = "global";
            *(_DWORD *)&buf[14] = 4725;
            __int16 v53 = 2112;
            *(_DWORD *)AudioObjectPropertyAddress buf = 136316162;
            uint64_t v54 = v37;
            __int16 v55 = 2080;
            if (v31) {
              uint64_t v39 = "device specific";
            }
            int v56 = v38;
            __int16 v57 = 2080;
            BOOL v58 = v39;
            _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Device %@ using %s PME preset which is %s", buf, 0x30u);
          }
          if (v32)
          {
            if (v31) {
              CFNumberRef v40 = sub_3DE99C(&v51);
            }
            else {
              CFNumberRef v40 = sub_3DE84C();
            }
          }
          else if (v31)
          {
            CFNumberRef v40 = sub_3DE904(&v51);
          }
          else
          {
            CFNumberRef v40 = sub_3DE7BC();
          }
          CFTypeRef cf = v40;
          if (v40)
          {
            (*(void (**)(void, uint64_t, uint64_t, CFTypeRef *, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 400))(*(void *)(a1 + 1008), 1685287015, 1601203557, &cf, 8, 1, 0);
            v41.n128_u32[0] = 2.0;
            if (v22) {
              v41.n128_f32[0] = 1.0;
            }
            if (!v32) {
              v41.n128_f32[0] = 1.0;
            }
            (*(void (**)(void, uint64_t, uint64_t, void, __n128))(**(void **)(a1 + 1008) + 368))(*(void *)(a1 + 1008), 1685287015, 1751937133, 0, v41);
            int v42 = 0;
          }
          else
          {
            CFNumberRef v43 = (os_log_t *)sub_32A48(2);
            CFNumberRef v44 = *v43;
            if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
              *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4757;
              _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d HandlePMEEnableStateChange: Preset Configuration is not available", buf, 0x12u);
            }
            int v42 = 1;
          }
          CFRelease(v20);
          if (v42) {
            return;
          }
          goto LABEL_95;
        }
      }
      int v23 = 4;
      goto LABEL_54;
    }
  }
  unsigned int v24 = (os_log_t *)sub_32A48(1);
  os_log_t v25 = *v24;
  if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 4700;
    CFNumberRef v26 = "%25s:%-5d Unable to retrieve output port UID for output chain";
    CFNumberRef v27 = v25;
    uint32_t v28 = 18;
LABEL_98:
    _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEFAULT, v26, buf, v28);
  }
}

void sub_CE768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_6393C((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_CE7E8(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5, unsigned int a6, uint64_t *a7)
{
  if (*(unsigned char *)(result + 448))
  {
    uint64_t v7 = result;
    WORD1(v31) = *(_WORD *)(result + 682);
    LOWORD(v31) = *(_WORD *)(result + 682);
    WORD1(v30) = *(_WORD *)(result + 682) == 0;
    LOWORD(v30) = *(_WORD *)(result + 682);
    int v8 = v31;
    atomic_compare_exchange_strong((atomic_uint *volatile)(result + 680), (unsigned int *)&v8, v30);
    uint64_t v9 = 424;
    if (*(_WORD *)(result + 682))
    {
      uint64_t v9 = 400;
      uint64_t v10 = result + 400;
    }
    else
    {
      uint64_t v10 = result + 424;
    }
    uint64_t v28 = v9;
    uint64_t v11 = *(void *)(v10 + 8) - *(void *)(result + v9);
    if (v11)
    {
      uint64_t v13 = 0;
      unint64_t v14 = v11 / 24;
      unint64_t v15 = v14 - 1;
      if (v14 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v14;
      }
      uint64_t v17 = 16;
      uint64_t v18 = 8;
      do
      {
        os_log_t v19 = a5;
        if (v13) {
          os_log_t v19 = (uint64_t *)(*(void *)(v7 + 976) + v17 - 16);
        }
        uint64_t v20 = *v19;
        uint64_t v30 = 0;
        BOOL v21 = a7;
        if (v15 != v13) {
          BOOL v21 = (uint64_t *)(*(void *)(v7 + 976) + v17);
        }
        uint64_t v30 = *v21;
        uint64_t v22 = *(void *)(v7 + v28);
        uint64_t result = (*(uint64_t (**)(void))(**(void **)(v22 + v18) + 216))(*(void *)(v22 + v18));
        if (result)
        {
          uint64_t v31 = v20;
          uint64_t v32 = 0;
          if (((a4 > 1) & sub_3F3DB4(*(void *)(v22 + v18))) == 1)
          {
            uint64_t v32 = a5[1];
            uint64_t v23 = a4;
          }
          else
          {
            uint64_t v23 = 1;
          }
          uint64_t result = (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t *, void, uint64_t *))(**(void **)(v22 + v18) + 112))(*(void *)(v22 + v18), a2, a3, v23, &v31, a6, &v30);
        }
        else if (v30)
        {
          uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v22 + v18) + 104))(*(void *)(v22 + v18), a2, a3);
        }
        ++v13;
        v17 += 32;
        v18 += 24;
      }
      while (v16 != v13);
    }
  }
  return result;
}

void sub_CEA44(unint64_t a1)
{
  sub_CEA7C(a1);

  operator delete();
}

unint64_t sub_CEA7C(unint64_t a1)
{
  *(void *)a1 = off_620480;
  uint64_t v2 = (os_log_t *)sub_32A48(24);
  AudioObjectID v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 735) < 0)
    {
      sub_21E8C(__p, *(void **)(a1 + 712), *(void *)(a1 + 720));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 712);
      uint64_t v7 = *(void *)(a1 + 728);
    }
    int v4 = __p;
    if (v7 < 0) {
      int v4 = (void **)__p[0];
    }
    *(_DWORD *)AudioObjectPropertyAddress buf = 136315650;
    uint64_t v9 = "DSPGraphChain_SpeakerProtection.cpp";
    __int16 v10 = 1024;
    int v11 = 90;
    __int16 v12 = 2080;
    uint64_t v13 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Deleting DSPGraphChain_SpeakerProtection %s", buf, 0x1Cu);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_6A648(a1);
  return a1;
}

void sub_CEBC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_CEBD4(uint64_t a1)
{
  sub_CEC0C(a1);

  operator delete();
}

uint64_t sub_CEC0C(uint64_t a1)
{
  *(void *)a1 = off_620558;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v30 = a1 + 16;
  char v31 = (*(uint64_t (**)(uint64_t))(v2 + 16))(a1 + 16);
  if (*(void *)(a1 + 256))
  {
    int v4 = (os_log_t *)sub_32A48(13);
    char v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
      int v33 = "VirtualAudio_DevicePropertyManager.cpp";
      __int16 v34 = 1024;
      int v35 = 132;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Stale property caches were not cleared before property manager destruction\"", buf, 0x12u);
    }
    if (*(void *)(a1 + 256))
    {
      CFStringRef v6 = *(uint64_t **)(a1 + 240);
      uint64_t v7 = (uint64_t *)v6[4];
      sub_CF110((uint64_t **)(a1 + 240), v6);
      operator delete(v6);
      if (v7)
      {
        sub_8108(v7 + 11);
        int v8 = (void *)v7[7];
        if (v8)
        {
          v7[8] = (uint64_t)v8;
          operator delete(v8);
        }
        sub_B8E4(v7 + 3);
        operator delete();
      }
      CFNumberRef v27 = (os_log_t *)sub_32A48(13);
      uint64_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioObjectPropertyAddress buf = 136315394;
        int v33 = "VirtualAudio_DevicePropertyManager.cpp";
        __int16 v34 = 1024;
        int v35 = 137;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [cachePtr is NULL]: \"Encountered null cache pointer\"", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Encountered null cache pointer");
    }
  }
  for (uint64_t i = *(void *)(a1 + 152); a1 + 144 != i; uint64_t i = *(void *)(i + 8))
  {
    __int16 v10 = *(uint64_t **)(i + 16);
    if (v10)
    {
      sub_8108(v10 + 11);
      int v11 = (void *)v10[7];
      if (v11)
      {
        v10[8] = (uint64_t)v11;
        operator delete(v11);
      }
      sub_B8E4(v10 + 3);
      operator delete();
    }
  }
  for (uint64_t j = *(void *)(a1 + 176); a1 + 168 != j; uint64_t j = *(void *)(j + 8))
  {
    uint64_t v13 = *(uint64_t **)(j + 16);
    if (v13)
    {
      sub_8108(v13 + 11);
      unint64_t v14 = (void *)v13[7];
      if (v14)
      {
        v13[8] = (uint64_t)v14;
        operator delete(v14);
      }
      sub_B8E4(v13 + 3);
      operator delete();
    }
  }
  for (uint64_t k = *(void *)(a1 + 200); a1 + 192 != k; uint64_t k = *(void *)(k + 8))
  {
    uint64_t v16 = *(uint64_t **)(k + 16);
    if (v16)
    {
      sub_8108(v16 + 11);
      uint64_t v17 = (void *)v16[7];
      if (v17)
      {
        v16[8] = (uint64_t)v17;
        operator delete(v17);
      }
      sub_B8E4(v16 + 3);
      operator delete();
    }
  }
  for (uint64_t m = *(void *)(a1 + 224); a1 + 216 != m; uint64_t m = *(void *)(m + 8))
  {
    os_log_t v19 = *(uint64_t **)(m + 16);
    if (v19)
    {
      sub_8108(v19 + 11);
      uint64_t v20 = (void *)v19[7];
      if (v20)
      {
        v19[8] = (uint64_t)v20;
        operator delete(v20);
      }
      sub_B8E4(v19 + 3);
      operator delete();
    }
  }
  sub_45F50((void *)(a1 + 144));
  sub_45F50((void *)(a1 + 168));
  sub_45F50((void *)(a1 + 192));
  sub_45F50((void *)(a1 + 216));
  sub_3BCAC(&v30);
  sub_463E0(*(void **)(a1 + 248));
  sub_45F50((void *)(a1 + 216));
  sub_45F50((void *)(a1 + 192));
  sub_45F50((void *)(a1 + 168));
  sub_45F50((void *)(a1 + 144));
  BOOL v21 = *(uint64_t **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v21) {
    sub_CF0A4(v21);
  }
  uint64_t v22 = *(uint64_t **)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v22) {
    sub_CF0A4(v22);
  }
  uint64_t v23 = *(uint64_t **)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v23) {
    sub_CF0A4(v23);
  }
  unsigned int v24 = *(uint64_t **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v24) {
    sub_CF0A4(v24);
  }
  os_log_t v25 = *(uint64_t **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v25) {
    sub_CF0A4(v25);
  }
  sub_AEF0C(v3);
  return a1;
}

void sub_CF05C(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_3BCAC(va);
  sub_564E4(exception_object);
}

uint64_t *sub_CF0A4(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_8108(result + 11);
    uint64_t v2 = (void *)v1[7];
    if (v2)
    {
      v1[8] = (uint64_t)v2;
      operator delete(v2);
    }
    sub_B8E4(v1 + 3);
    operator delete();
  }
  return result;
}

uint64_t *sub_CF110(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    int v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      int v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  CFStringRef v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_89144(v6, a2);
}

void sub_CF168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5) {
    unsigned int v5 = 1869968496;
  }
  else {
    unsigned int v5 = 1768845428;
  }
  int buf = 1836414053;
  *(void *)buf_4 = v5;
  if ((*(uint64_t (**)(uint64_t, int *))(*(void *)a2 + 680))(a2, &buf)) {
    operator new();
  }
  CFStringRef v6 = (os_log_t *)sub_32A48(13);
  uint64_t v7 = *v6;
  if (*v6)
  {
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      *(void *)buf_4 = "VirtualAudio_DevicePropertyManager.cpp";
      __int16 v11 = 1024;
      int v12 = 587;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [theMuteControl is NULL]: \"couldn't get a mute control from device\"", (uint8_t *)&buf, 0x12u);
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "couldn't get a mute control from device");
}

void sub_CF390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_CF3D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5) {
    uint64_t v7 = 528;
  }
  else {
    uint64_t v7 = 504;
  }
  if (a5) {
    uint64_t v8 = 520;
  }
  else {
    uint64_t v8 = 496;
  }
  uint64_t v9 = (*(void *)(a2 + v7) - *(void *)(a2 + v8)) >> 3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3 + 88))(a3, a5);
  if (result != v9)
  {
    __int16 v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      int buf = 136315394;
      buf_4 = "VirtualAudio_DevicePropertyManager.cpp";
      __int16 v16 = 1024;
      int v17 = 610;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"The Plugin Device and the Core Device do not have the same number of streams.\"", (uint8_t *)&buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "The Plugin Device and the Core Device do not have the same number of streams.");
  }
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (((*(void *)(a2 + v7) - *(void *)(a2 + v8)) & 0x7FFFFFFF8) != 0) {
    operator new();
  }
  return result;
}

void sub_CF6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

unsigned char *sub_CF724(uint64_t a1)
{
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v16 = a1 + 16;
  char v17 = (*(uint64_t (**)(uint64_t))(v2 + 16))(a1 + 16);
  if (*(void *)(v3 + 240))
  {
    int v4 = (os_log_t *)sub_32A48(13);
    unsigned int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)os_log_t v19 = "VirtualAudio_DevicePropertyManager.cpp";
        *(_WORD *)&v19[8] = 1024;
        *(_DWORD *)&v19[10] = 104;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Stale property caches were not cleared before property manager teardown\"", buf, 0x12u);
      }
    }
  }
  CFStringRef v6 = *(void **)(a1 + 240);
  if (v6 != (void *)(a1 + 248))
  {
    do
    {
      uint64_t v7 = (uint64_t *)v6[4];
      if (!v7)
      {
        uint64_t v13 = (os_log_t *)sub_32A48(13);
        unint64_t v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)os_log_t v19 = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&v19[8] = 1024;
          *(_DWORD *)&v19[10] = 107;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [cachePtr is NULL]: \"Encountered null cache pointer\"", buf, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Encountered null cache pointer");
      }
      sub_27C010(v7);
      uint64_t v8 = (void *)v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v6[2];
          BOOL v10 = *v9 == (void)v6;
          CFStringRef v6 = v9;
        }
        while (!v10);
      }
      CFStringRef v6 = v9;
    }
    while (v9 != (void *)(a1 + 248));
  }
  sub_CF9AC((uint64_t *)buf, a1);
  for (uint64_t i = *(void *)&v19[4]; (uint8_t *)i != buf; uint64_t i = *(void *)(i + 8))
    sub_27C010(*(uint64_t **)(i + 16));
  sub_45F50(buf);
  return sub_3BCAC(&v16);
}

void sub_CF968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void *sub_CF9AC(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 104);
  unsigned int v5 = operator new(0x18uLL);
  v5[1] = a1;
  v5[2] = v4;
  *unsigned int v5 = a1;
  *a1 = (uint64_t)v5;
  a1[1] = (uint64_t)v5;
  a1[2] = 1;
  uint64_t v6 = *(void *)(a2 + 112);
  uint64_t v7 = operator new(0x18uLL);
  v7[1] = a1;
  double v7[2] = v6;
  *uint64_t v7 = v5;
  v5[1] = v7;
  *a1 = (uint64_t)v7;
  a1[2] = 2;
  uint64_t v8 = *(void *)(a2 + 120);
  uint64_t v9 = operator new(0x18uLL);
  v9[1] = a1;
  v9[2] = v8;
  *uint64_t v9 = v7;
  v7[1] = v9;
  *a1 = (uint64_t)v9;
  a1[2] = 3;
  uint64_t v10 = *(void *)(a2 + 128);
  __int16 v11 = operator new(0x18uLL);
  v11[1] = a1;
  void v11[2] = v10;
  void *v11 = v9;
  v9[1] = v11;
  *a1 = (uint64_t)v11;
  a1[2] = 4;
  uint64_t v12 = *(void *)(a2 + 136);
  uint64_t v13 = operator new(0x18uLL);
  v13[1] = a1;
  v13[2] = v12;
  *uint64_t v13 = v11;
  v11[1] = v13;
  *a1 = (uint64_t)v13;
  a1[2] = 5;
  sub_CFB10(*(void **)(a2 + 152), (void *)(a2 + 144), a1);
  sub_CFB10(*(void **)(a2 + 176), (void *)(a2 + 168), a1);
  sub_CFB10(*(void **)(a2 + 200), (void *)(a2 + 192), a1);
  return sub_CFB10(*(void **)(a2 + 224), (void *)(a2 + 216), a1);
}

void sub_CFAE8(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

void *sub_CFB10(void *result, void *a2, uint64_t *a3)
{
  if (result != a2)
  {
    unsigned int v5 = result;
    do
    {
      uint64_t result = operator new(0x18uLL);
      result[2] = v5[2];
      uint64_t v6 = *a3;
      *uint64_t result = *a3;
      result[1] = a3;
      *(void *)(v6 + 8) = result;
      *a3 = (uint64_t)result;
      ++a3[2];
      unsigned int v5 = (void *)v5[1];
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t *sub_CFB84(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  unsigned int v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unsigned int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unsigned int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *uint64_t v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *uint64_t v4 = v10;
      __int16 v11 = *v6;
    }
    else
    {
      __int16 v11 = v9;
    }
    uint64_t result = sub_46D00((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void *sub_CFC3C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t result = (void *)a1[1];
  if (a2 != a3 && result != a1)
  {
    do
    {
      result[2] = *(void *)(v4 + 16);
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t result = (void *)result[1];
    }
    while (v4 != a3 && result != a1);
  }
  if (result == a1)
  {
    if (v4 != a3)
    {
      uint64_t result = operator new(0x18uLL);
      __int16 v11 = result;
      *uint64_t result = 0;
      result[1] = 0;
      result[2] = *(void *)(v4 + 16);
      uint64_t v12 = *(void *)(v4 + 8);
      uint64_t v13 = 1;
      if (v12 != a3)
      {
        unint64_t v14 = result;
        do
        {
          uint64_t result = operator new(0x18uLL);
          *uint64_t result = v14;
          result[1] = 0;
          result[2] = *(void *)(v12 + 16);
          v14[1] = result;
          ++v13;
          uint64_t v12 = *(void *)(v12 + 8);
          unint64_t v14 = result;
        }
        while (v12 != a3);
      }
      uint64_t v15 = *a1;
      *(void *)(v15 + 8) = v11;
      void *v11 = v15;
      *a1 = result;
      result[1] = a1;
      a1[2] += v13;
    }
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *result;
    *(void *)(v9 + 8) = *(void *)(*a1 + 8);
    **(void **)(v8 + 8) = v9;
    do
    {
      uint64_t v10 = (void *)result[1];
      --a1[2];
      operator delete(result);
      uint64_t result = v10;
    }
    while (v10 != a1);
  }
  return result;
}

void sub_CFD70(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_CFD90(_Unwind_Exception *a1)
{
}

unsigned char *sub_CFDA4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v30 = a1 + 16;
  char v31 = (*(uint64_t (**)(void))(v7 + 16))();
  sub_CF9AC((uint64_t *)v35, a1);
  uint64_t v8 = *(void *)&v36[4];
  if (v35 == *(uint8_t **)&v36[4])
  {
    sub_45F50(v35);
    goto LABEL_40;
  }
  do
  {
    uint64_t v9 = *(void **)(v8 + 16);
    if (!v9)
    {
      __int16 v11 = (os_log_t *)sub_32A48(13);
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          __int16 v33 = 1024;
          int v34 = 199;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"A property cache is NULL\"", buf, 0x12u);
        }
      }
    }
    uint64_t v8 = *(void *)(v8 + 8);
    if (*v9 == a2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  while (!v10 && v35 != (uint8_t *)v8);
  sub_45F50(v35);
  if (!v10)
  {
LABEL_40:
    CFNumberRef v26 = (os_log_t *)sub_32A48(13);
    CFNumberRef v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v35 = 136315394;
      *(void *)char v36 = "VirtualAudio_DevicePropertyManager.cpp";
      *(_WORD *)&v36[8] = 1024;
      *(_DWORD *)&v36[10] = 408;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [thePropertyCache is NULL]: \"could not find property cache for given HP_Object\"", v35, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "could not find property cache for given HP_Object");
  }
  *(void *)int buf = v10[1];
  buf[8] = (*(uint64_t (**)(void))(**(void **)buf + 16))(*(void *)buf);
  if (((*(uint64_t (**)(void))(*(void *)v10[1] + 48))(v10[1]) & 1) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_32A48(13);
    unint64_t v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v35 = 136315394;
        *(void *)char v36 = "VirtualAudio_DevicePropertyCache.cpp";
        *(_WORD *)&v36[8] = 1024;
        *(_DWORD *)&v36[10] = 450;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Cache mutex not held by current thread.\"", v35, 0x12u);
      }
    }
  }
  uint64_t v15 = v10 + 3;
  uint64_t v16 = (void *)v10[4];
  if (v16 == v10 + 3)
  {
LABEL_28:
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    BOOL v21 = *v20;
    if (*v20)
    {
      if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v35 = 136315394;
        *(void *)char v36 = "VirtualAudio_DevicePropertyCache.cpp";
        *(_WORD *)&v36[8] = 1024;
        *(_DWORD *)&v36[10] = 382;
        _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not find property for given address.\"", v35, 0x12u);
      }
    }
    uint64_t v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v22, "Could not find property for given address.");
  }
  while (1)
  {
    uint64_t v18 = (_DWORD *)v16[2];
    char v17 = (std::__shared_weak_count *)v16[3];
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v18[9] != a3[1] || v18[8] != *a3)
    {
      BOOL v19 = 0;
      if (!v17) {
        goto LABEL_26;
      }
LABEL_25:
      sub_4636C(v17);
      goto LABEL_26;
    }
    BOOL v19 = v18[10] == a3[2];
    if (v17) {
      goto LABEL_25;
    }
LABEL_26:
    if (v19) {
      break;
    }
    uint64_t v16 = (void *)v16[1];
    if (v16 == v15) {
      goto LABEL_28;
    }
  }
  if (v16 == v15) {
    goto LABEL_28;
  }
  uint64_t v23 = v16[2];
  unsigned int v24 = (std::__shared_weak_count *)v16[3];
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v23) {
    goto LABEL_28;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23 + 16))(v23, 4, a4);
  if (v24) {
    sub_4636C(v24);
  }
  sub_3BCAC(buf);
  return sub_3BCAC(&v30);
}

void sub_D0224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v19);
  sub_3BCAC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_D0294(uint64_t result)
{
  if (*(void *)(result + 16))
  {
    uint64_t v1 = *(void **)result;
    uint64_t v2 = *(uint64_t **)(*(void *)result + 32);
    sub_CF110((uint64_t **)result, *(uint64_t **)result);
    operator delete(v1);
    if (v2)
    {
      sub_27C010(v2);
      sub_8108(v2 + 11);
      uint64_t v3 = (void *)v2[7];
      if (v3)
      {
        v2[8] = (uint64_t)v3;
        operator delete(v3);
      }
      sub_B8E4(v2 + 3);
      operator delete();
    }
    uint64_t v4 = (os_log_t *)sub_32A48(13);
    unsigned int v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      uint64_t v8 = "VirtualAudio_DevicePropertyManager.cpp";
      __int16 v9 = 1024;
      int v10 = 64;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [cachePtr is NULL]: \"Encountered a NULL stream property cache pointer\"", (uint8_t *)&v7, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Encountered a NULL stream property cache pointer");
  }
  return result;
}

void sub_D0408(_Unwind_Exception *exception_object)
{
}

unsigned char *sub_D0424(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = a1 + 16;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v16 = a1 + 16;
  char v17 = (*(uint64_t (**)(uint64_t))(v4 + 16))(a1 + 16);
  sub_D0294(v5 + 224);
  sub_CF9AC(&v14, a1);
  for (uint64_t i = v15; &v14 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v7 = i[2];
    if (!v7)
    {
      uint64_t v8 = (os_log_t *)sub_32A48(13);
      __int16 v9 = *v8;
      if (*v8)
      {
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 446;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"A property cache is NULL\"", buf, 0x12u);
        }
      }
    }
    uint64_t v18 = *(void *)(v7 + 8);
    char v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    sub_27C2AC((uint64_t *)v7);
    *(unsigned char *)(v7 + 48) = 0;
    if (a2)
    {
      sub_27CA6C(v7, a2);
    }
    else
    {
      if (((*(uint64_t (**)(void))(**(void **)(v7 + 8) + 48))(*(void *)(v7 + 8)) & 1) == 0)
      {
        int v10 = (os_log_t *)sub_32A48(13);
        __int16 v11 = *v10;
        if (*v10)
        {
          if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315394;
            *(void *)&uint8_t buf[4] = "VirtualAudio_DevicePropertyCache.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 488;
            _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Cache mutex not held by current thread.\"", buf, 0x12u);
          }
        }
      }
      memset(buf, 0, 24);
      sub_74550((char *)buf, *(uint64_t **)(v7 + 56), *(uint64_t **)(v7 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56)) >> 2));
      *(void *)(v7 + 64) = *(void *)(v7 + 56);
      sub_523D8(v20, *(void *)(v7 + 8));
      uint64_t v12 = *(void **)buf;
      sub_8490((atomic_ullong **)v7, -1431655765 * ((*(void *)&buf[8] - *(void *)buf) >> 2), *(int **)buf, 1);
      sub_52380(v20);
      if (v12) {
        operator delete(v12);
      }
    }
    sub_3BCAC(&v18);
  }
  sub_45F50(&v14);
  return sub_3BCAC(&v16);
}

void sub_D06F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_D075C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v12 = a1 + 16;
  char v13 = (*(uint64_t (**)(void))(v4 + 16))();
  sub_CF9AC(&v10, a1);
  for (uint64_t i = v11; &v10 != i; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v6 = i[2];
    if (!v6)
    {
      uint64_t v7 = (os_log_t *)sub_32A48(13);
      uint64_t v8 = *v7;
      if (*v7)
      {
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          uint64_t v15 = "VirtualAudio_DevicePropertyManager.cpp";
          __int16 v16 = 1024;
          int v17 = 461;
          _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"A property cache is NULL\"", buf, 0x12u);
        }
      }
    }
    sub_27CA6C(v6, a2);
  }
  sub_45F50(&v10);
  return sub_3BCAC(&v12);
}

void sub_D08D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

void sub_D08FC(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

void sub_D0910(uint64_t a1, int *a2)
{
  uint64_t v3 = *(uint64_t **)(*(void *)a2 + 24);
  sub_43F38(&v19, v3 + 2, "", 50);
  sub_43F38(&v18, v3 + 4, "", 51);
  uint64_t v4 = v19;
  unsigned int v5 = *(_DWORD *)(v19 + 144);
  uint64_t v6 = *(os_unfair_lock_s **)(v19 + 192);
  if (v6)
  {
    sub_1EE03C((uint64_t)&buf, *(void *)(v19 + 192), v19, (uint64_t)a2, v3[9], a2[3]);
    sub_1F3044((unsigned int **)&buf, v3 + 2, v6);
    memset(v20, 0, 16);
    uint64_t v7 = (std::__shared_weak_count *)v3[3];
    if (v7)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      __int16 v9 = v8;
      if (v8)
      {
        uint64_t v10 = v3[2];
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v20[0] = v10;
        v20[1] = (uint64_t)v8;
        sub_4636C(v8);
      }
      else
      {
        memset(v20, 0, 16);
      }
    }
    else
    {
      __int16 v9 = 0;
    }
    sub_1F4188((uint64_t)&__p, (uint64_t)&buf, v20);
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    operator new();
  }
  __int16 v11 = (os_log_t *)sub_32A48(13);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v4 + 144))(v20, v4);
    uint64_t v13 = v20[0];
    sub_2417C(&__p, v5);
    if (v17 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    int buf = 136315906;
    buf_4 = "RoutingHandler_Record_Unk.cpp";
    __int16 v23 = 1024;
    int v24 = 56;
    __int16 v25 = 2112;
    uint64_t v26 = v13;
    __int16 v27 = 2080;
    uint64_t v28 = p_p;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [device is NULL]: \"could not get device for port \\\"%@\\\" (type: '%s').\"", (uint8_t *)&buf, 0x26u);
    if (v17 < 0) {
      operator delete(__p);
    }
    sub_72924((uint64_t)v20);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_6414D8;
  exception[2] = 2003329396;
}

void sub_D1038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  sub_72924(v34 - 176);
  if (a34) {
    sub_4636C(a34);
  }
  char v36 = *(std::__shared_weak_count **)(v34 - 184);
  if (v36) {
    sub_4636C(v36);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_D1200(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v4 = a2;
    unsigned int v5 = &a2[2 * a3];
    do
    {
      sub_3590(a1, *v4, v4[1]);
      v4 += 2;
    }
    while (v4 != v5);
  }
  return a1;
}

void sub_D1258(_Unwind_Exception *a1)
{
  sub_8108(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D126C(uint64_t *a1)
{
  uint64_t v2 = operator new(0x80uLL);
  v2[1] = 0;
  uint64_t v2[2] = 0;
  void *v2 = off_63F188;
  uint64_t result = sub_F9D84((uint64_t)(v2 + 3), 0);
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_D12C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_D12DC(uint64_t a1, long long *a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = off_63F128;
  *(void *)(a1 + 80) = 0;
  uint64_t v3 = (void *)(a1 + 80);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (*(void *)a2)
  {
    uint64_t v26 = a1 + 96;
    unsigned int v5 = sub_10724(1uLL);
    uint64_t v22 = (char *)v5;
    __int16 v23 = (char *)v5;
    __int16 v25 = (char *)&v5[v6];
    long long v7 = *a2;
    *unsigned int v5 = *a2;
    if (*((void *)&v7 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v7 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v5 + 1;
LABEL_14:
    int v24 = v8;
    sub_D2658(v3, &v22);
    __int16 v11 = *(_OWORD **)(a1 + 88);
    sub_98E24((uint64_t)&v22);
    goto LABEL_15;
  }
  sub_D126C((uint64_t *)&v21);
  unint64_t v9 = *(void *)(a1 + 96);
  uint64_t v10 = *(_OWORD **)(a1 + 88);
  if ((unint64_t)v10 >= v9)
  {
    long long v20 = v21;
    uint64_t v12 = ((uint64_t)v10 - *v3) >> 4;
    if ((unint64_t)(v12 + 1) >> 60) {
      sub_60548();
    }
    uint64_t v13 = v9 - *v3;
    uint64_t v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v26 = a1 + 96;
    __int16 v16 = (char *)sub_10724(v15);
    char v17 = &v16[16 * v12];
    uint64_t v22 = v16;
    __int16 v23 = v17;
    __int16 v25 = &v16[16 * v18];
    *(_OWORD *)char v17 = v20;
    uint64_t v8 = v17 + 16;
    goto LABEL_14;
  }
  _OWORD *v10 = v21;
  __int16 v11 = v10 + 1;
LABEL_15:
  *(void *)(a1 + 88) = v11;
  sub_D26B4(a1);
  return a1;
}

void sub_D1454(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_4636C(a3);
  }
  sub_638B4((void ***)va);
  sub_FE920(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_D1490(uint64_t *a1)
{
  uint64_t v2 = operator new(0x68uLL);
  v2[1] = 0;
  uint64_t v2[2] = 0;
  void *v2 = off_63F368;
  uint64_t result = sub_F9D10((uint64_t)(v2 + 3));
  *a1 = result;
  a1[1] = (uint64_t)v2;
  return result;
}

void sub_D14E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_D14FC(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  uint64_t v6 = operator new(0x88uLL);
  long long v7 = v6;
  v6[1] = 0;
  void v6[2] = 0;
  *uint64_t v6 = off_63F1F8;
  uint64_t v8 = v6 + 3;
  v9[0] = a2;
  v9[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_D15C0((uint64_t)(v6 + 3), v9);
  if (a3) {
    std::__shared_weak_count::__release_weak(a3);
  }
  *a1 = v8;
  a1[1] = v7;
}

void sub_D159C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_D15C0(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)sub_35BAC4(a1);
  *uint64_t v4 = off_63F230;
  v4[10] = off_63F2F8;
  v4[12] = *a2;
  uint64_t v5 = a2[1];
  v4[13] = v5;
  if (!v5
    || (atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed),
        (uint64_t v6 = *(void *)(a1 + 104)) == 0)
    || *(void *)(v6 + 8) == -1)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    unint64_t v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      uint64_t v12 = "HardwareVolumeControl.h";
      __int16 v13 = 1024;
      int v14 = 39;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"inPhysicalDeviceOwnedVolumeControl has expired\"", (uint8_t *)&v11, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "inPhysicalDeviceOwnedVolumeControl has expired");
  }
  return a1;
}

void sub_D1740(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 104);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_FE920(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D1774(uint64_t a1)
{
  return sub_D177C(a1 - 80);
}

uint64_t sub_D177C(uint64_t a1)
{
  sub_D180C(&v3, (uint64_t *)(a1 + 96), "", 131);
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(v3 + 80) + 32))();
  if (v4) {
    sub_4636C(v4);
  }
  return v1;
}

void sub_D17F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_D180C(uint64_t *a1, uint64_t *a2, char *a3, int a4)
{
  *a1 = 0;
  a1[1] = 0;
  long long v7 = (std::__shared_weak_count *)a2[1];
  if (!v7
    || (uint64_t result = std::__shared_weak_count::lock(v7), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v10 = *a2, *a1 = *a2, !v10))
  {
    int v11 = (os_log_t *)sub_32A48(13);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      if (a3)
      {
        int v14 = strrchr(a3, 47);
        if (v14) {
          __int16 v13 = v14 + 1;
        }
        else {
          __int16 v13 = a3;
        }
      }
      else
      {
        __int16 v13 = 0;
      }
      *(_DWORD *)int buf = 136315906;
      char v17 = "StandardUtilities.h";
      __int16 v18 = 1024;
      int v19 = 267;
      __int16 v20 = 2080;
      long long v21 = v13;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not lock weak ptr (%s:%d).\"", buf, 0x22u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }
  return result;
}

void sub_D1980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_D19B0(uint64_t a1)
{
}

void sub_D19B8(uint64_t a1)
{
  sub_D180C(&v2, (uint64_t *)(a1 + 96), "", 127);
  (*(void (**)(void))(*(void *)(v2 + 80) + 24))();
  uint64_t v1 = v3;
  if (v3)
  {
    sub_4636C(v1);
  }
}

void sub_D1A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_D1A5C(uint64_t a1)
{
}

void sub_D1A64(uint64_t a1)
{
  sub_D180C(&v2, (uint64_t *)(a1 + 96), "", 123);
  (*(void (**)(void))(*(void *)(v2 + 80) + 16))();
  uint64_t v1 = v3;
  if (v3)
  {
    sub_4636C(v1);
  }
}

void sub_D1AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_D1B08(uint64_t a1)
{
  sub_D1B44((void *)(a1 - 80));

  operator delete();
}

uint64_t sub_D1B44(void *a1)
{
  *a1 = off_63F230;
  a1[10] = off_63F2F8;
  uint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  return sub_FE920((uint64_t)a1);
}

uint64_t sub_D1BC0(uint64_t a1)
{
  return sub_D1B44((void *)(a1 - 80));
}

uint64_t sub_D1BC8()
{
  return 0;
}

void sub_D1BD0(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_D1BDC()
{
  v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "VolumeControl.h";
      __int16 v5 = 1024;
      int v6 = 191;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempting to add sub volume control to an unsupported VolumeControl object.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Attempting to add sub volume control to an unsupported VolumeControl object.");
}

void sub_D1CA8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_D1CC4()
{
  return 0;
}

uint64_t sub_D1CD4()
{
  return 0;
}

double sub_D1CDC(uint64_t a1)
{
  sub_D180C(&v3, (uint64_t *)(a1 + 96), "", 115);
  double v1 = (*(double (**)(uint64_t))(*(void *)v3 + 104))(v3);
  if (v4) {
    sub_4636C(v4);
  }
  return v1;
}

void sub_D1D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_D1D7C(uint64_t a1)
{
  sub_D180C(&v3, (uint64_t *)(a1 + 96), "", 111);
  double v1 = (*(double (**)(uint64_t))(*(void *)v3 + 96))(v3);
  if (v4) {
    sub_4636C(v4);
  }
  return v1;
}

void sub_D1E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_D1E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_D180C(&v11, (uint64_t *)(a1 + 96), "", 106);
  uint64_t v7 = v11;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  std::string __p = 0;
  sub_A2B64(&__p, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)v7 + 88))(v7, &__p, a3, a4);
  if (__p)
  {
    unint64_t v9 = __p;
    operator delete(__p);
  }
  if (v12) {
    sub_4636C(v12);
  }
}

void sub_D1EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    sub_4636C(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_D1F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_D180C(&v10, (uint64_t *)(a1 + 96), "", 98);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 80))(v10, a2, a3, a4, a5);
  unint64_t v9 = v11;
  if (v11)
  {
    sub_4636C(v9);
  }
}

void sub_D1FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D1FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_D180C(&v9, (uint64_t *)(a1 + 96), "", 146);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 72))(v9, a2, a3, a4);
  if (v10) {
    sub_4636C(v10);
  }
  return v7;
}

void sub_D2074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D208C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_D180C(&v9, (uint64_t *)(a1 + 96), "", 140);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 64))(v9, a2, a3, a4);
  if (v10) {
    sub_4636C(v10);
  }
  return v7;
}

void sub_D2124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_D213C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_D180C(&v12, (uint64_t *)(a1 + 96), "", 84);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 48))(v12, a2, a3, a4, a5, a6);
  uint64_t v11 = v13;
  if (v13)
  {
    sub_4636C(v11);
  }
}

void sub_D2208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_D2220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_D180C(&v12, (uint64_t *)(a1 + 96), "", 75);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 40))(v12, a2, a3, a4, a5, a6);
  uint64_t v11 = v13;
  if (v13)
  {
    sub_4636C(v11);
  }
}

void sub_D22EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D2304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_D180C(&v9, (uint64_t *)(a1 + 96), "", 67);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2, a3, a4);
  if (v10) {
    sub_4636C(v10);
  }
  return v7;
}

void sub_D239C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D23B4(uint64_t a1, uint64_t a2)
{
  sub_D180C(&v5, (uint64_t *)(a1 + 96), "", 61);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 24))(v5, a2);
  if (v6) {
    sub_4636C(v6);
  }
  return v3;
}

void sub_D2434(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D244C(uint64_t a1, uint64_t a2)
{
  sub_D180C(&v5, (uint64_t *)(a1 + 96), "", 57);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a2);
  if (v6) {
    sub_4636C(v6);
  }
  return v3;
}

void sub_D24CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_D24E4(void *a1)
{
  sub_D1B44(a1);

  operator delete();
}

uint64_t sub_D2524(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_D2548(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63F1F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_D259C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63F1F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_D25C0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_D25E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63F368;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_D2638(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63F368;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *sub_D2658(void *result, void *a2)
{
  uint64_t v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    void *v2 = 0;
    v2[1] = 0;
  }
  a2[1] = v4;
  int v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void sub_D26B4(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 56))(__p);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  uint64_t v2 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v2);
  }
  *(_OWORD *)uint64_t v2 = *(_OWORD *)__p;
  *(void *)(a1 + 32) = v4;
  HIBYTE(v4) = 0;
  LOBYTE(__p[0]) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

uint64_t sub_D275C(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  sub_D2A04(a1[10], a1[11]);
  if (((*(uint64_t (**)(uint64_t *, unsigned int *))(*a1 + 16))(a1, a2) & 1) == 0)
  {
    unint64_t v15 = (os_log_t *)sub_32A48(13);
    __int16 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      long long v21 = "ControlSet.h";
      __int16 v22 = 1024;
      int v23 = 200;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported property.\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  uint64_t v8 = (void *)a1[10];
  for (LOBYTE(v9) = 1; v8 != (void *)a1[11]; v8 += 2)
  {
    if (((*(uint64_t (**)(void, unsigned int *, uint64_t, uint64_t))(*(void *)*v8 + 72))(*v8, a2, a3, a4) & 1) == 0)
    {
      uint64_t v10 = (os_log_t *)sub_32A48(18);
      uint64_t v9 = *v10;
      if (*v10)
      {
        if (os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, *a2);
          uint64_t v11 = __p;
          if (v19 < 0) {
            uint64_t v11 = (void **)__p[0];
          }
          unsigned int v12 = a2[1];
          unsigned int v13 = a2[2];
          *(_DWORD *)int buf = 136316162;
          long long v21 = "ControlSet.h";
          __int16 v22 = 1024;
          int v23 = 206;
          __int16 v24 = 2080;
          __int16 v25 = v11;
          __int16 v26 = 1024;
          unsigned int v27 = v12;
          __int16 v28 = 1024;
          unsigned int v29 = v13;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d UnregisterRelayedListener() failed. selector: '%s'; scope: %u; element: %u.",
            buf,
            0x28u);
          if (v19 < 0) {
            operator delete(__p[0]);
          }
        }
        LOBYTE(v9) = 0;
      }
    }
  }
  return v9 & 1;
}

uint64_t sub_D2A04(uint64_t result, uint64_t a2)
{
  if (result == a2)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        int v6 = "ControlSet.h";
        __int16 v7 = 1024;
        int v8 = 218;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT FAILURE (std::logic_error).", (uint8_t *)&v5, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invariant failure.");
  }
  return result;
}

void sub_D2B04(_Unwind_Exception *exception_object)
{
}

uint64_t sub_D2B20(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  sub_D2A04(a1[10], a1[11]);
  if (((*(uint64_t (**)(uint64_t *, unsigned int *))(*a1 + 16))(a1, a2) & 1) == 0)
  {
    unint64_t v15 = (os_log_t *)sub_32A48(13);
    __int16 v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      long long v21 = "ControlSet.h";
      __int16 v22 = 1024;
      int v23 = 177;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unsupported property.\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v8 = (void *)a1[10];
  if (v8 != (void *)a1[11])
  {
    while (((*(uint64_t (**)(void, unsigned int *, uint64_t, uint64_t))(*(void *)*v8 + 64))(*v8, a2, a3, a4) & 1) != 0)
    {
      v8 += 2;
      if (v8 == (void *)a1[11]) {
        return 1;
      }
    }
    uint64_t v10 = (os_log_t *)sub_32A48(18);
    uint64_t v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, *a2);
      if (v19 >= 0) {
        unsigned int v12 = __p;
      }
      else {
        unsigned int v12 = (void **)__p[0];
      }
      unsigned int v13 = a2[1];
      unsigned int v14 = a2[2];
      *(_DWORD *)int buf = 136316162;
      long long v21 = "ControlSet.h";
      __int16 v22 = 1024;
      int v23 = 183;
      __int16 v24 = 2080;
      __int16 v25 = v12;
      __int16 v26 = 1024;
      unsigned int v27 = v13;
      __int16 v28 = 1024;
      unsigned int v29 = v14;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d RegisterRelayedListener() failed. selector: '%s'; scope: %u; element: %u.",
        buf,
        0x28u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    while (v8 != (void *)a1[10])
    {
      (*(void (**)(void, unsigned int *, uint64_t, uint64_t))(*(void *)*v8 + 72))(*v8, a2, a3, a4);
      v8 -= 2;
    }
  }
  return 0;
}

std::string *sub_D2DF8@<X0>(void *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  snprintf(__str, 0x13uLL, "%p", a1);
  sub_21C8C(&v14, __str);
  uint64_t v4 = std::string::insert(&v14, 0, "addr: ", 6uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int v6 = std::string::append(&v15, "; ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v17 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v17 >= 0) {
    int v8 = __p;
  }
  else {
    int v8 = (void **)__p[0];
  }
  if (v17 >= 0) {
    std::string::size_type v9 = HIBYTE(v17);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, "controls: { ", 0xCuLL);
  uint64_t v10 = (os_unfair_lock_s **)a1[10];
  while (v10 != (os_unfair_lock_s **)a1[11])
  {
    sub_4F64((uint64_t)__p, *v10 + 2);
    if (v17 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    if (v17 >= 0) {
      std::string::size_type v12 = HIBYTE(v17);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v11, v12);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    v10 += 2;
    if (v10 == (os_unfair_lock_s **)a1[11]) {
      break;
    }
    std::string::append(a2, ", ", 2uLL);
  }
  return std::string::append(a2, " } ]", 4uLL);
}

void sub_D2FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D3080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = sub_D2A04(*(void *)(a1 + 80), *(void *)(a1 + 88));
  std::string v14 = *(uint64_t **)(a1 + 80);
  unsigned int v13 = *(uint64_t **)(a1 + 88);
  while (v14 != v13)
  {
    uint64_t v15 = *v14;
    v14 += 2;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 48))(v15, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t sub_D3124(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t result = sub_D2A04(*(void *)(a1 + 80), *(void *)(a1 + 88));
  if (*a2 == 1986225518)
  {
    *a5 = 4;
    uint64_t v11 = *(uint64_t **)(a1 + 80);
    std::string::size_type v12 = *(uint64_t **)(a1 + 88);
    while (1)
    {
      if (v11 == v12)
      {
        *a6 = 0;
        return result;
      }
      uint64_t result = sub_99A40(*v11);
      *((void *)&v15 + 1) = v13;
      *(void *)&long long v15 = result;
      uint64_t v14 = v15 >> 32;
      if ((v14 & 0xFF00000000) == 0) {
        LODWORD(v14) = 1;
      }
      if (v14) {
        break;
      }
      v11 += 2;
    }
    *a6 = v14;
  }
  else
  {
    __int16 v16 = *(uint64_t (**)(void))(***(void ***)(a1 + 80) + 40);
    return v16();
  }
  return result;
}

uint64_t sub_D3258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_D2A04(*(void *)(a1 + 80), *(void *)(a1 + 88));
  uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(***(void ***)(a1 + 80) + 32))(**(void **)(a1 + 80), a2, a3, a4);
  uint64_t v10 = *(void **)(a1 + 80);
  std::string::size_type v9 = *(void **)(a1 + 88);
  while (v10 != v9)
  {
    if (v8 != (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*v10 + 32))(*v10, a2, a3, a4))
    {
      std::string::size_type v12 = (os_log_t *)sub_32A48(13);
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
        {
          int v15 = 136315394;
          __int16 v16 = "ControlSet.h";
          __int16 v17 = 1024;
          int v18 = 112;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Internal state failure. Differing responses to GetPropertyDataSize in the contained control list\"", (uint8_t *)&v15, 0x12u);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Internal state failure. Differing responses to GetPropertyDataSize in the contained control list");
    }
    v10 += 2;
  }
  return v8;
}

void sub_D340C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_D3428(uint64_t a1, uint64_t a2)
{
  sub_D2A04(*(void *)(a1 + 80), *(void *)(a1 + 88));
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 80) + 24))(**(void **)(a1 + 80), a2);
  int v6 = *(void **)(a1 + 80);
  long long v5 = *(void **)(a1 + 88);
  while (v6 != v5)
  {
    if (v4 != (*(unsigned int (**)(void, uint64_t))(*(void *)*v6 + 24))(*v6, a2))
    {
      uint64_t v8 = (os_log_t *)sub_32A48(13);
      std::string::size_type v9 = *v8;
      if (*v8)
      {
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
        {
          int v11 = 136315394;
          std::string::size_type v12 = "ControlSet.h";
          __int16 v13 = 1024;
          int v14 = 100;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Internal state failure. Differing responses to IsPropertySettable in the contained control list\"", (uint8_t *)&v11, 0x12u);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Internal state failure. Differing responses to IsPropertySettable in the contained control list");
    }
    v6 += 2;
  }
  return v4;
}

void sub_D35BC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_D35D8(uint64_t a1, uint64_t *a2)
{
  sub_D2A04(*(void *)(a1 + 80), *(void *)(a1 + 88));
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t *))(***(void ***)(a1 + 80) + 16))(**(void **)(a1 + 80), a2);
  int v6 = *(os_unfair_lock_s ***)(a1 + 80);
  long long v5 = *(os_unfair_lock_s ***)(a1 + 88);
  while (v6 != v5)
  {
    if (v4 != (*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&(*v6)->_os_unfair_lock_opaque
                                                                                     + 16))(*v6, a2))
    {
      uint64_t v8 = a2;
      std::string::size_type v9 = (os_log_t *)sub_32A48(13);
      uint64_t v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *v8;
        int v19 = *((_DWORD *)v8 + 2);
        sub_16C9C4((uint64_t)v20, (unsigned int *)&v18);
        int v11 = v21;
        std::string::size_type v12 = (void **)v20[0];
        sub_4F64((uint64_t)__p, *v6 + 2);
        __int16 v13 = v20;
        if (v11 < 0) {
          __int16 v13 = v12;
        }
        if (v17 >= 0) {
          int v14 = __p;
        }
        else {
          int v14 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136316162;
        int v23 = "ControlSet.h";
        __int16 v24 = 1024;
        int v25 = 87;
        __int16 v26 = 2080;
        unsigned int v27 = v13;
        __int16 v28 = 2080;
        unsigned int v29 = v14;
        __int16 v30 = 1024;
        int v31 = v4;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Internal state failure. Differing responses to HasProperty(%s) in the contained control list (control = %s, uint64_t result = %d)\"", buf, 0x2Cu);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Internal state failure. Differing responses to HasProperty(%s) in the contained control list (control = %s, uint64_t result = %d)");
    }
    v6 += 2;
  }
  return v4;
}

void sub_D3808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_D383C(uint64_t a1)
{
  *(void *)a1 = off_63F128;
  uint64_t v2 = (void **)(a1 + 80);
  sub_638B4(&v2);
  sub_FE920(a1);

  operator delete();
}

uint64_t sub_D38B8(uint64_t a1)
{
  *(void *)a1 = off_63F128;
  uint64_t v3 = (void **)(a1 + 80);
  sub_638B4(&v3);

  return sub_FE920(a1);
}

uint64_t sub_D3924(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_D3948(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63F188;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_D399C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63F188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_D39BC(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    *uint64_t v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void sub_D3A04(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void *sub_D3A10(uint64_t a1)
{
  uint64_t v1 = a1;
  v5[0] = off_63F0E0;
  v5[1] = a1;
  v5[3] = v5;
  uint64_t v2 = sub_F820C();
  LODWORD(v1) = *(_DWORD *)(v1 + 8);
  sub_D3AE4((uint64_t)v4, (uint64_t)v5);
  sub_F8498(v2, v1, (uint64_t)v4);
  sub_87864(v4);
  return sub_87864(v5);
}

void sub_D3AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_87864((uint64_t *)va);
  sub_87864((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_D3AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_D3B7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  v5[0] = (uint64_t)v5;
  v5[1] = (uint64_t)v5;
  v5[2] = 0;
  (*(void (**)(uint64_t, uint64_t *, void, void))(*(void *)v2 + 272))(v2, v5, *(unsigned int *)(v3 + 40), *(unsigned __int8 *)(v3 + 44));
  sub_8108(v5);
  return 1;
}

void sub_D3BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D3C18(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_63F0E0;
  a2[1] = v2;
  return result;
}

void *sub_D3C3C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_63F0E0;
  result[1] = v3;
  return result;
}

void sub_D3C84()
{
}

void *sub_D3C9C(uint64_t a1)
{
  uint64_t v1 = a1;
  v5[0] = off_63F098;
  v5[1] = a1;
  uint64_t v5[3] = v5;
  uint64_t v2 = sub_F820C();
  LODWORD(v1) = *(_DWORD *)(v1 + 8);
  sub_D3AE4((uint64_t)v4, (uint64_t)v5);
  sub_F8498(v2, v1, (uint64_t)v4);
  sub_87864(v4);
  return sub_87864(v5);
}

void sub_D3D4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_87864((uint64_t *)va);
  sub_87864((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_D3D70(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t sub_D3DD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_63F098;
  a2[1] = v2;
  return result;
}

void *sub_D3DF8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_63F098;
  result[1] = v3;
  return result;
}

void sub_D3E40()
{
}

void sub_D3E58(void *a1)
{
  *a1 = off_63F060;
  sub_8108(a1 + 2);

  operator delete();
}

void *sub_D3EBC(void *a1)
{
  *a1 = off_63F060;
  sub_8108(a1 + 2);
  return a1;
}

void sub_D3F00()
{
}

void sub_D3F18(uint64_t a1, __int32 **a2, int a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if ((unint64_t)((char *)v4 - (char *)*a2) >= 8)
  {
    __int16 v22 = (os_log_t *)sub_32A48(13);
    int v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      char v36 = "Device_Thunderbolt_Aspen.cpp";
      __int16 v37 = 1024;
      int v38 = 240;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (v3 != v4)
  {
    __int32 v7 = *v3;
    __int32 __c = *v3;
    uint64_t v8 = sub_32A48(17);
    if (*(unsigned char *)(v8 + 8))
    {
      std::string::size_type v9 = *(NSObject **)v8;
      if (*(void *)v8)
      {
        if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136315650;
          char v36 = "Device_Thunderbolt_Aspen.cpp";
          __int16 v37 = 1024;
          int v38 = 247;
          __int16 v39 = 1024;
          LODWORD(v40) = v7;
          _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempting to activate sub-port with ID %u", buf, 0x18u);
        }
      }
    }
    sub_4361E4((uint64_t *)buf, a1);
    sub_8E4B8(&v32, buf);
    sub_8108((uint64_t *)buf);
    uint64_t v10 = v33;
    if (v33 == &v32)
    {
      sub_B8E4(&v32);
    }
    else
    {
      char v11 = 0;
      do
      {
        (*(void (**)(void **__return_ptr))(*(void *)v10[2] + 168))(&__p);
        std::string::size_type v12 = v31;
        __int16 v13 = wmemchr((__int32 *)__p, __c, ((char *)v31 - (unsigned char *)__p) >> 2);
        if (v13) {
          int v14 = v13;
        }
        else {
          int v14 = v12;
        }
        int v15 = v31;
        if (v14 != v31)
        {
          int v16 = *(_DWORD *)(v10[2] + 144);
          if ((((v16 != 1886675561) ^ a3) & 1) == 0)
          {
            uint64_t v18 = (os_log_t *)sub_32A48(13);
            int v19 = *v18;
            if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_ERROR))
            {
              sub_4F64((uint64_t)v28, (os_unfair_lock_t)(v10[2] + 8));
              __int16 v20 = v29 >= 0 ? v28 : (void **)v28[0];
              *(_DWORD *)int buf = 136315650;
              char v36 = "Device_Thunderbolt_Aspen.cpp";
              __int16 v37 = 1024;
              int v38 = 261;
              __int16 v39 = 2080;
              CFNumberRef v40 = v20;
              _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Scope of Port (%s) does not match scope of input parameter\"", buf, 0x1Cu);
              if (v29 < 0) {
                operator delete(v28[0]);
              }
            }
            char v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v21, "Scope of Port (%s) does not match scope of input parameter");
          }
          if (v16 == 1886675561) {
            unsigned int v17 = 1768845428;
          }
          else {
            unsigned int v17 = 1869968496;
          }
          *(_DWORD *)int buf = 1936945763;
          char v36 = (const char *)v17;
          (*(void (**)(uint64_t, uint8_t *, void, void, uint64_t, __int32 *))(*(void *)a1 + 48))(a1, buf, 0, 0, 4, &__c);
          char v11 = 1;
        }
        if (__p)
        {
          int v31 = (__int32 *)__p;
          operator delete(__p);
        }
        if (v14 != v15) {
          break;
        }
        uint64_t v10 = (uint64_t *)v10[1];
      }
      while (v10 != &v32);
      sub_B8E4(&v32);
      if (v11) {
        return;
      }
    }
    int v25 = (os_log_t *)sub_32A48(13);
    __int16 v26 = *v25;
    if (*v25)
    {
      if (os_log_type_enabled(*v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315650;
        char v36 = "Device_Thunderbolt_Aspen.cpp";
        __int16 v37 = 1024;
        int v38 = 271;
        __int16 v39 = 1024;
        LODWORD(v40) = __c;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not locate sub-port with ID: %u in order to activate it.\"", buf, 0x18u);
      }
    }
    unsigned int v27 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v27, "Could not locate sub-port with ID: %u in order to activate it.");
  }
}

void sub_D43C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_D4434()
{
  return 1;
}

uint64_t sub_D443C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886675567 && a2 != 1886675561)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(17);
    uint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      int v14 = "Device_Thunderbolt_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 231;
      __int16 v17 = 2080;
      uint64_t v18 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    __int32 v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        int v14 = "Device_Thunderbolt_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 232;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_D4600(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D461C(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  uint64_t v2 = (os_log_t *)sub_32A48(17);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 136315394;
    uint64_t v6 = "Device_Thunderbolt_Aspen.cpp";
    __int16 v7 = 1024;
    int v8 = 115;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_INFO, "%25s:%-5d Creating controls and ports", buf, 0x12u);
  }
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 1))
  {
    (*(void (**)(os_unfair_lock_s *, uint64_t))(*(void *)&a1->_os_unfair_lock_opaque + 440))(a1, 1);
    sub_439750();
  }
  if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 88))(a1, 0))
  {
    (*(void (**)(os_unfair_lock_s *, void))(*(void *)&a1->_os_unfair_lock_opaque + 440))(a1, 0);
    sub_43A330();
  }
  return 1;
}

void sub_D51CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_72924(v32 - 96);
  sub_72924(v32 - 112);
  sub_72924(v32 - 128);
  _Unwind_Resume(a1);
}

void sub_D53B0(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = operator new(0x228uLL);
  v14[1] = 0;
  v14[2] = 0;
  void *v14 = off_640AB8;
  sub_21C8C(__p, "");
  sub_105158((uint64_t)(v14 + 3), a2, a3, a4, a5, a6, a7, (long long *)__p);
  v14[3] = &off_621AD0;
  *((_WORD *)v14 + 272) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v14 + 3;
  a1[1] = v14;

  sub_56E64((uint64_t)a1, v14 + 13, (uint64_t)(v14 + 3));
}

void sub_D54C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_D54F4(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

uint64_t sub_D5530(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_433710(a1, a2, a3, a3, 0) = &off_6205B0;
  uint64_t v4 = (os_log_t *)sub_32A48(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
  {
    int v7 = 136315394;
    int v8 = "Device_Thunderbolt_Aspen.cpp";
    __int16 v9 = 1024;
    int v10 = 85;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Created DriverKit device", (uint8_t *)&v7, 0x12u);
  }
  return a1;
}

void sub_D561C(_Unwind_Exception *a1)
{
  sub_43456C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D5630(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885430644)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      __int16 v13 = "Device_Actuator_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 151;
      __int16 v16 = 2080;
      __int16 v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      __int16 v13 = "Device_Actuator_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 152;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_D57E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_D5804(os_unfair_lock_s *a1)
{
  sub_42E5FC(a1);
  uint64_t v4 = 0x6F7574706D757465;
  int v5 = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v4))
  {
    *(_DWORD *)int buf = 0;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, uint8_t *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                              + 48))(a1, &v4, 0, 0, 4, buf);
  }
  uint64_t v2 = 0x6F757470766F6C64;
  int v3 = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, uint64_t *))(*(void *)&a1->_os_unfair_lock_opaque + 16))(a1, &v2))
  {
    *(_DWORD *)int buf = 0;
    (*(void (**)(os_unfair_lock_s *, uint64_t *, void, void, uint64_t, uint8_t *))(*(void *)&a1->_os_unfair_lock_opaque
                                                                                              + 48))(a1, &v2, 0, 0, 4, buf);
  }
  operator new();
}

void sub_D69B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *__p)
{
  sub_6651C((uint64_t)&a49);
  std::condition_variable::~condition_variable((std::condition_variable *)(v61 - 216));
  std::mutex::~mutex((std::mutex *)(v61 - 168));
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_D6C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a2 + 4);
  *(void *)&buf[0].int mSelector = *(void *)(a2 + 4);
  UInt32 v5 = *(_DWORD *)(a2 + 16);
  buf[0].AudioObjectPropertyElement mElement = *(_DWORD *)(a2 + 12);
  sub_869C8((uint64_t)&v21, (AudioObjectID *)a2, buf, v5, *(const void **)(a2 + 24));
  unsigned int v6 = v21;
  if (v21)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        sub_2417C(v19, v6);
        int v9 = v20;
        int v10 = (void **)v19[0];
        uint64_t v15 = *v4;
        int v16 = *((_DWORD *)v4 + 2);
        sub_16C9C4((uint64_t)__p, (unsigned int *)&v15);
        char v11 = v19;
        if (v9 < 0) {
          char v11 = v10;
        }
        char v12 = (void **)__p[0];
        AudioObjectID v13 = *(_DWORD *)a2;
        if (v18 >= 0) {
          char v12 = __p;
        }
        buf[0].int mSelector = 136316418;
        *(void *)&buf[0].AudioObjectPropertyScope mScope = "HALPropertySynchronizer.h";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 176;
        HIWORD(buf[1].mScope) = 1024;
        buf[1].AudioObjectPropertyElement mElement = v6;
        __int16 v26 = 2080;
        unsigned int v27 = v11;
        __int16 v28 = 2080;
        char v29 = v12;
        __int16 v30 = 1024;
        AudioObjectID v31 = v13;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d error %d (%s) reading property data for property %s on id %u.", (uint8_t *)buf, 0x32u);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        if (v20 < 0) {
          operator delete(v19[0]);
        }
      }
    }
  }
  if (v24)
  {
    memset(buf, 0, sizeof(buf));
    sub_46B38(buf, v22, v23, (v23 - (uint64_t)v22) >> 2);
    uint64_t v14 = *(void *)&buf[1].mScope;
    *(_OWORD *)a1 = *(_OWORD *)&buf[0].mSelector;
    *(void *)(a1 + 16) = v14;
    *(_DWORD *)(a1 + 24) = v6;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = v6;
  }
}

void sub_D6E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    if (a22) {
      operator delete(a22);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D6E8C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_D6EB0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_620980;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_D6F04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_620980;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_D6F24(uint64_t a1)
{
  sub_43456C(a1);

  operator delete();
}

BOOL sub_D6F60(uint64_t a1)
{
  (*(void (**)(CFStringRef *__return_ptr))(*(void *)a1 + 128))(theString1);
  BOOL v1 = CFEqual(theString1[0], @"Actuator");
  sub_72924((uint64_t)theString1);
  return v1;
}

void sub_D6FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t **sub_D6FE8(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  uint64_t v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    UInt32 v5 = a2;
    unsigned int v6 = 0;
    int v7 = &a2[3 * a3];
    int v8 = a1 + 1;
    while (1)
    {
      int v9 = v4;
      if (v8 == (uint64_t **)v4) {
        goto LABEL_9;
      }
      int v10 = v6;
      char v11 = v4;
      if (v6)
      {
        do
        {
          int v9 = v10;
          int v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          int v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          char v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = *((_DWORD *)v9 + 7);
      unsigned int v14 = *v5;
      if (v13 < *v5 || v13 == v14 && *((_DWORD *)v9 + 8) < v5[1])
      {
LABEL_9:
        if (v6) {
          uint64_t v15 = v9;
        }
        else {
          uint64_t v15 = v4;
        }
        if (v6) {
          int v16 = (char **)(v9 + 1);
        }
        else {
          int v16 = (char **)v4;
        }
      }
      else
      {
        uint64_t v15 = v4;
        int v16 = (char **)v4;
        if (v6)
        {
          unsigned int v20 = v5[1];
          int v16 = (char **)v4;
          while (1)
          {
            while (1)
            {
              uint64_t v15 = v6;
              unsigned int v21 = *((_DWORD *)v6 + 7);
              if (v14 >= v21) {
                break;
              }
LABEL_26:
              unsigned int v6 = (uint64_t *)*v15;
              int v16 = (char **)v15;
              if (!*v15) {
                goto LABEL_16;
              }
            }
            if (v14 == v21)
            {
              unsigned int v22 = *((_DWORD *)v15 + 8);
              if (v20 < v22) {
                goto LABEL_26;
              }
              if (v22 >= v20) {
                break;
              }
            }
            else if (v21 >= v14)
            {
              break;
            }
            int v16 = (char **)(v15 + 1);
            unsigned int v6 = (uint64_t *)v15[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v16)
      {
LABEL_16:
        __int16 v17 = (char *)operator new(0x28uLL);
        uint64_t v18 = *(void *)v5;
        *((_DWORD *)v17 + 9) = v5[2];
        *(void *)(v17 + 28) = v18;
        *(void *)__int16 v17 = 0;
        *((void *)v17 + 1) = 0;
        *((void *)v17 + 2) = v15;
        const char *v16 = v17;
        int v19 = (uint64_t *)**a1;
        if (v19)
        {
          *a1 = v19;
          __int16 v17 = *v16;
        }
        sub_46D00(a1[1], (uint64_t *)v17);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 3;
      if (v5 == v7) {
        return a1;
      }
      int v8 = (uint64_t **)*a1;
      unsigned int v6 = a1[1];
    }
  }
  return a1;
}

void sub_D7188(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_D719C(void *a1, void *a2)
{
  if (a1 == a2)
  {
    int v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "DSPChainUtilities.cpp";
      __int16 v11 = 1024;
      int v12 = 36;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (*a1 == a1[1])
  {
    unsigned int v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      int v10 = "DSPChainUtilities.cpp";
      __int16 v11 = 1024;
      int v12 = 40;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v9, 0x12u);
    }
    int v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v8, "Precondition failure.");
  }
  return *(void *)*a1;
}

void sub_D7354(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_D7374(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  UInt32 v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

long long *sub_D7428(void *a1, void *a2)
{
  unint64_t v2 = (void *)sub_D719C(a1, a2);
  uint8x8_t v3 = sub_D7374(v2, 1685090928);
  if (!v3) {
    return &xmmword_64A760;
  }
  int v5 = *((_DWORD *)v3 + 6);
  unint64_t v4 = (int *)(v3 + 3);
  if (v5 != 15)
  {
    unint64_t v7 = (os_log_t *)sub_32A48(13);
    int v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      __int16 v11 = "DSPChainUtilities.cpp";
      __int16 v12 = 1024;
      int v13 = 99;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }

  return (long long *)sub_3855E4(v4);
}

void sub_D7580(_Unwind_Exception *exception_object)
{
}

void sub_D759C(void *a1, void *a2, void *a3)
{
  unint64_t v4 = sub_D7428(a2, a3);
  int v5 = sub_D7374(v4, 1685287015);
  if (v5 && (unsigned int v6 = (const void *)sub_3854DC((int *)v5 + 6)) != 0)
  {
    unint64_t v7 = v6;
    CFRetain(v6);
    sub_14E44(&cf, v7);
    CFStringRef v8 = (const __CFString *)cf;
  }
  else
  {
    CFStringRef v8 = 0;
    CFTypeRef cf = 0;
  }
  sub_20C54((uint64_t)__p, v8);
  sub_D7930(&theData, (uint64_t)__p);
  CFDataRef v9 = theData;
  if (!theData)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  BytePtr = CFDataGetBytePtr(theData);
  CFIndex Length = CFDataGetLength(v9);
  CFStringRef v12 = CFStringCreateWithBytes(0, BytePtr, Length, 0x8000100u, 0);
  if (!v12)
  {
    unsigned int v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v14, "Could not construct");
  }
  sub_14E44(a1, v12);
  CFRelease(v9);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_D773C(_Unwind_Exception *exception_object)
{
}

void sub_D7748(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15, long long buf, long long a17)
{
  __cxa_free_exception(v17);
  sub_D7B54((const void **)&buf);
  if (a2 == 2)
  {
    unsigned int v20 = __cxa_begin_catch(a1);
    unsigned int v21 = (os_log_t *)sub_32A48(24);
    unsigned int v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      if (a14 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      uint64_t v24 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "DSPChainUtilities.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 209;
      WORD1(a17) = 2080;
      *(void *)((char *)&a17 + 4) = p_p;
      WORD6(a17) = 2080;
      *(void *)((char *)&a17 + 14) = v24;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d Exception reading DSP graph from path %s : %s", (uint8_t *)&buf, 0x26u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)&buf);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_6393C(&a15);
  _Unwind_Resume(a1);
}

void sub_D78C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v19)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0xD78FCLL);
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_D7918(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0xD7920);
  }
  sub_564E4(a1);
}

void *sub_D7930(CFDataRef *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint8x8_t v3 = (const char *)a2;
  }
  else {
    uint8x8_t v3 = *(const char **)a2;
  }
  std::string __p = off_640680;
  int v10 = &_fclose;
  p_p = &__p;
  __streauint64_t m = fopen(v3, "rb");
  v13[3] = v13;
  sub_D7D3C((uint64_t)&__p, v13);
  sub_D7B88(&__p);
  if (!__stream)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  fseek(__stream, 0, 2);
  size_t v4 = ftell(__stream);
  sub_D7C0C(&__p, v4);
  fseek(__stream, 0, 0);
  fread(__p, 1uLL, v10 - (unsigned char *)__p, __stream);
  CFDataRef v5 = CFDataCreate(0, (const UInt8 *)__p, v10 - (unsigned char *)__p);
  *a1 = v5;
  if (!v5)
  {
    CFStringRef v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
  }
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
  sub_D7C80((uint64_t *)&__stream);
  return sub_D7B88(v13);
}

void sub_D7AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_D7C80(&a13);
  sub_D7B88(v13);
  _Unwind_Resume(a1);
}

const void **sub_D7B54(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *sub_D7B88(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_D7C0C(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_D7CE8(a1, a2);
    size_t v4 = (char *)a1[1];
    CFDataRef v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_D7C64(_Unwind_Exception *exception_object)
{
  uint8x8_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_D7C80(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v2 = result[4];
    if (!v2) {
      sub_56964();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v3);
  }
  return result;
}

char *sub_D7CE8(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_60548();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t sub_D7D28(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t sub_D7D3C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_640680;
  a2[1] = v2;
  return result;
}

void *sub_D7D60(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_640680;
  result[1] = v3;
  return result;
}

void sub_D7DA8()
{
}

void sub_D7DC0(void *a1, void *a2, uint64_t a3)
{
  CFDataRef v5 = sub_D7374(a2, a3);
  if (!v5) {
    goto LABEL_10;
  }
  int v7 = *((_DWORD *)v5 + 6);
  unsigned int v6 = (int *)(v5 + 3);
  if (v7 == 18)
  {
    uint64_t v8 = *(void *)(sub_3846B0(v6) + 24);
    if (!v8) {
      sub_56964();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v8 + 48))(__p);
    sub_D7DC0(a1, __p, a3);
    sub_D7EFC((void *)__p[2]);
    CFDataRef v9 = __p[0];
    __p[0] = 0;
    if (v9) {
      operator delete(v9);
    }
    return;
  }
  int v10 = (const void *)sub_3853D4(v6);
  if (!v10)
  {
LABEL_10:
    *a1 = 0;
    return;
  }
  __int16 v11 = v10;
  CFRetain(v10);

  sub_22084(a1, v11);
}

void sub_D7EAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_D7EC0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_D7EC0(uint64_t a1)
{
  sub_D7EFC(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_D7EFC(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = (void *)*v1;
      sub_3840C4((uint64_t)(v1 + 3));
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_D7F40(CFArrayRef *a1, void **a2)
{
  size_t v4 = (os_log_t *)sub_32A48(24);
  CFDataRef v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_375514(&__p, (uint64_t)a2);
    unsigned int v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "DSPChainUtilities.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 241;
    __int16 v14 = 2080;
    uint64_t v15 = v6;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d DSPChain config is %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  int v7 = (void *)sub_D719C(*a2, a2[1]);
  uint64_t v8 = sub_D7374(v7, 1685090928);
  if (!v8)
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    __p.__r_.__value_.__s.__data_[16] = 0;
    goto LABEL_16;
  }
  sub_3847B8((uint64_t)&__p, (int *)v8 + 6);
  __p.__r_.__value_.__s.__data_[16] = 1;
  sub_D8178(buf, (int *)&__p, 1735553138);
  CFDataRef v9 = *(const void **)buf;
  if (!*(void *)buf)
  {
LABEL_16:
    *a1 = 0;
    goto LABEL_17;
  }
  CFRetain(*(CFTypeRef *)buf);
  CFTypeRef cf = v9;
  sub_4ECEC(buf, 1uLL);
  **(void **)int buf = cf;
  CFArrayRef v10 = sub_55EFC(*(const void ***)buf, *(uint64_t *)&buf[8]);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  *a1 = v10;
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v9);
LABEL_17:
  if (__p.__r_.__value_.__s.__data_[16]) {
    sub_3840C4((uint64_t)&__p);
  }
}

void sub_D810C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8178(void *a1, int *a2, uint64_t a3)
{
  int v4 = *a2;
  if (*a2 != 13)
  {
    if (v4 == 16)
    {
      uint64_t v8 = sub_3857F4(a2);
      uint64_t v9 = v8;
      while (1)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        if (v9 == v8) {
          break;
        }
        if (*(_DWORD *)(v9 + 16) != 15)
        {
          char v16 = (os_log_t *)sub_32A48(13);
          __int16 v17 = *v16;
          if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "DSPChainUtilities.cpp";
            __int16 v25 = 1024;
            *(_DWORD *)__int16 v26 = 147;
            _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "Precondition failure.");
        }
        sub_D8178(a1, v9 + 16, a3);
        if (*a1) {
          return;
        }
      }
    }
    else if (v4 == 15)
    {
      uint64_t v6 = sub_3855E4(a2);
      sub_D854C((uint64_t)__p, v6);
      int v7 = sub_D7374(__p, a3);
      if (v7) {
        sub_D8178(a1, v7 + 3, a3);
      }
      else {
        *a1 = 0;
      }
      sub_D7EFC(*(void **)&v26[2]);
      uint64_t v15 = *(void **)__p;
      *(void *)std::string __p = 0;
      if (v15) {
        operator delete(v15);
      }
      return;
    }
LABEL_19:
    *a1 = 0;
    return;
  }
  CFArrayRef v10 = (const void *)sub_3853D4(a2);
  if (!v10)
  {
    CFTypeRef cf = 0;
    goto LABEL_32;
  }
  __int16 v11 = v10;
  CFRetain(v10);
  sub_22084(&cf, v11);
  if (!cf)
  {
LABEL_32:
    int v19 = (os_log_t *)sub_32A48(13);
    unsigned int v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "DSPChainUtilities.cpp";
      __int16 v25 = 1024;
      *(_DWORD *)__int16 v26 = 160;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", __p, 0x12u);
    }
    unsigned int v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "Precondition failure.");
  }
  if (!sub_D85C4((const __CFDictionary *)cf, (const UInt8 *)"ID"))
  {
LABEL_20:
    CFTypeRef v13 = 0;
    *a1 = 0;
    goto LABEL_21;
  }
  if (!cf)
  {
    unsigned int v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not construct");
    goto LABEL_38;
  }
  CFNumberRef v12 = (const __CFNumber *)sub_D86AC((const __CFDictionary *)cf, (const UInt8 *)"ID");
  if (!v12)
  {
    unsigned int v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "Could not find item");
LABEL_38:
  }
  if (sub_7E85C(v12) != 1936749683) {
    goto LABEL_20;
  }
  CFTypeRef v13 = cf;
  if (!cf) {
    goto LABEL_19;
  }
  CFRetain(cf);
LABEL_21:
  CFTypeRef v14 = cf;
  *a1 = v13;
  if (v14) {
    CFRelease(v14);
  }
}

void sub_D84D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_D854C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_6DEC4(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(uint64_t **)(a2 + 16); i; uint64_t i = (uint64_t *)*i)
    sub_D87CC(a1, *((_DWORD *)i + 4), (_DWORD *)i + 4);
  return a1;
}

void sub_D85AC(_Unwind_Exception *a1)
{
  sub_D7EC0(v1);
  _Unwind_Resume(a1);
}

BOOL sub_D85C4(const __CFDictionary *a1, const UInt8 *__s)
{
  uint64_t v2 = __s;
  size_t v4 = strlen((const char *)__s);
  if (v2)
  {
    uint64_t v2 = (const UInt8 *)CFStringCreateWithBytes(0, v2, v4, 0x8000100u, 0);
    if (!v2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  int v6 = CFDictionaryContainsKey(a1, v2);
  if (v2) {
    CFRelease(v2);
  }
  return v6 != 0;
}

void sub_D8684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

const void *sub_D86AC(const __CFDictionary *a1, const UInt8 *__s)
{
  uint64_t v3 = __s;
  size_t v5 = strlen((const char *)__s);
  if (!v3)
  {
    if (a1) {
      goto LABEL_4;
    }
LABEL_7:
    if (!v3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v3 = (const UInt8 *)CFStringCreateWithBytes(0, v3, v5, 0x8000100u, 0);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (!a1) {
    goto LABEL_7;
  }
LABEL_4:
  int Value = CFDictionaryGetValue(a1, v3);
  if (v3) {
LABEL_8:
  }
    CFRelease(v3);
LABEL_9:
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_D878C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_D87CC(uint64_t a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  CFNumberRef v12 = (void *)(a1 + 16);
  CFTypeRef v13 = operator new(0x28uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  char v24 = 0;
  *CFTypeRef v13 = 0;
  v13[1] = v6;
  *((_DWORD *)v13 + 4) = *a3;
  sub_3847B8((uint64_t)(v13 + 3), a3 + 2);
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_6DEC4(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v20 = *(void *)a1;
  unsigned int v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *CFTypeRef v13 = *v21;
LABEL_38:
    void *v21 = v13;
    goto LABEL_39;
  }
  *CFTypeRef v13 = *v12;
  void *v12 = v13;
  *(void *)(v20 + 8 * v3) = v12;
  if (*v13)
  {
    unint64_t v22 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v22 >= v7) {
        v22 %= v7;
      }
    }
    else
    {
      v22 &= v7 - 1;
    }
    unsigned int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_D8A14((uint64_t)v23);
}

void sub_D89FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_D8A14((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_D8A14(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_3840C4((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

uint64_t sub_D8A6C(int a1)
{
  if (a1 <= 1936745080)
  {
    if (a1 == 1634625388) {
      return sub_23AC0();
    }
    int v1 = 1668312435;
  }
  else
  {
    if (a1 == 1936745081 || a1 == 1936749683) {
      return sub_23AC0();
    }
    int v1 = 1936748645;
  }
  if (a1 == v1) {
    return sub_23AC0();
  }
  return 0;
}

uint64_t *sub_D8AD4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  size_t v5 = *(uint64_t **)(a1 + 8);
  unint64_t v3 = (uint64_t *)(a1 + 8);
  size_t v4 = v5;
  if (!v5) {
    return v3;
  }
  unint64_t v6 = v3;
  do
  {
    unsigned int v7 = *((_DWORD *)v4 + 7);
    if (v7 < a2 || v7 == a2 && *((_DWORD *)v4 + 8) < a3) {
      ++v4;
    }
    else {
      unint64_t v6 = v4;
    }
    size_t v4 = (uint64_t *)*v4;
  }
  while (v4);
  if (v6 == v3) {
    return v3;
  }
  unsigned int v8 = *((_DWORD *)v6 + 7);
  if (v8 > a2 || v8 == a2 && *((_DWORD *)v6 + 8) > a3) {
    return v3;
  }
  return v6;
}

uint64_t sub_D8B40(unsigned int a1, unsigned int a2)
{
  LOBYTE(v2) = a2;
  if (a1 == 1685287015)
  {
    unsigned int v3 = a2 & 0xFFFFFF00;
    uint64_t v4 = 0x100000000;
  }
  else
  {
    size_t v5 = sub_D8AD4((uint64_t)&unk_64A7B8, a1, a2);
    if (v5 == (uint64_t *)&unk_64A7C0)
    {
      uint64_t v4 = 0;
      LOBYTE(v2) = 0;
      unsigned int v3 = 0;
    }
    else
    {
      int v2 = *((_DWORD *)v5 + 9);
      unsigned int v3 = v2 & 0xFFFFFF00;
      uint64_t v4 = 0x100000000;
    }
  }
  return v4 | v3 | v2;
}

void sub_D8BC8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_549A4(&v12, a2, "", 22);
  sub_549A4(&v11, a3, "", 23);
  uint64_t v4 = v12;
  uint64_t v5 = *(void *)(v12 + 192);
  strcpy(buf, "essaurtp");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  LODWORD(a3) = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v5 + 16))(v5, buf);
  uint64_t v6 = *(void *)(v4 + 192);
  strcpy(buf, "edqsurtp");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if (a3 | (*(unsigned int (**)(uint64_t, unsigned char *))(*(void *)v6 + 16))(v6, buf)) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = v11;
  }
  if (*(void *)(v7 + 192)) {
    operator new();
  }
  unsigned int v8 = (os_log_t *)sub_32A48(13);
  uint64_t v9 = *v8;
  if (*v8)
  {
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler_Utilities_N51.cpp";
      __int16 v14 = 1024;
      int v15 = 34;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [sidetoneDevice is NULL]: \"could not get sidetone device\"", buf, 0x12u);
    }
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &off_6414D8;
  exception[2] = 2003329396;
}

void sub_D8DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_4636C(a10);
  }
  if (a12) {
    sub_4636C(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8E50()
{
}

uint64_t sub_D8E68(uint64_t a1)
{
  sub_43F38(&v3, (uint64_t *)(a1 + 88), "", 169);
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 200))(v3);
  if (v4) {
    sub_4636C(v4);
  }
  return v1;
}

void sub_D8EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_D8EF8(uint64_t a1)
{
  sub_43F38((uint64_t *)&v14, (uint64_t *)(a1 + 88), "", 110);
  uint64_t v2 = sub_32A48(3);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v4 = *(_DWORD *)(a1 + 8);
        sub_4F64((uint64_t)__p, v14 + 2);
        uint64_t v5 = v13 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
        __int16 v17 = 1024;
        int v18 = 113;
        __int16 v19 = 1024;
        int v20 = v4;
        __int16 v21 = 2048;
        uint64_t v22 = a1;
        __int16 v23 = 2080;
        char v24 = v5;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Tearing down VirtualAudio_Port with ID %u at address %p (underlying port: %s).", buf, 0x2Cu);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
        __int16 v17 = 1024;
        int v18 = 114;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"routing mutex not held\"", buf, 0x12u);
      }
    }
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 104));
  unsigned int v8 = v14;
  strcpy(buf, "ofnpbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_FEEF8((uint64_t)v14, buf, (uint64_t)sub_D9968, a1);
  strcpy(buf, "manpbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
  strcpy(buf, "mnspbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
  strcpy(buf, "wsppbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
  strcpy(buf, "atspbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
  if ((v8[46]._os_unfair_lock_opaque & 0x40) != 0)
  {
    strcpy(buf, "rsipbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D94A8, a1);
  }
  if ((*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&v8->_os_unfair_lock_opaque + 392))(v8))
  {
    strcpy(buf, "eitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
    strcpy(buf, "pitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
    strcpy(buf, "sitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
    strcpy(buf, "sptbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
  }
  strcpy(buf, "casobolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned char *))(*(void *)&v8->_os_unfair_lock_opaque + 16))(v8, buf))
  {
    strcpy(buf, "fcasbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
    strcpy(buf, "casobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
  }
  uint64_t v9 = (int *)qword_64A860;
  for (uint64_t i = qword_64A868; v9 != (int *)i; ++v9)
  {
    int v11 = *v9;
    *(_DWORD *)int buf = *v9;
    *(void *)&uint8_t buf[4] = 1735159650;
    if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned char *))(*(void *)&v8->_os_unfair_lock_opaque + 16))(v8, buf))
    {
      *(_DWORD *)int buf = v11;
      *(void *)&uint8_t buf[4] = 1735159650;
      sub_FEEF8((uint64_t)v8, buf, (uint64_t)sub_D9968, a1);
    }
  }
  if (v15) {
    sub_4636C(v15);
  }
}

void sub_D9440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_4636C(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_D94A8(uint64_t a1, unsigned int a2, int *a3, unsigned int *a4)
{
  if (a2)
  {
    uint64_t v5 = a2;
    while (1)
    {
      int v6 = *a3;
      a3 += 3;
      if (v6 == 1885959026) {
        break;
      }
      if (!--v5) {
        return;
      }
    }
    uint64_t v10 = 0x676C6F6270697372;
    int v11 = 0;
    (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t))(*(void *)a4 + 72))(a4, 1, &v10, 1);
    sub_3B7EC();
    int v7 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40);
    if (v7)
    {
      sub_3B7EC();
      (*(void (**)(uint64_t *))(qword_64CC40 + 24))(&qword_64CC40);
    }
    uint64_t v8 = 0x676C6F6270727473;
    int v9 = 0;
    (*(void (**)(void, uint64_t, uint64_t *, uint64_t))(**((void **)a4 + 2) + 72))(*((void *)a4 + 2), 1, &v8, 1);
    if (v7)
    {
      sub_3B7EC();
      (*(void (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
    }
    sub_D962C(a4);
  }
}

void sub_D962C(unsigned int *a1)
{
  memset(&v17, 0, sizeof(v17));
  std::to_string(&v14, a1[2]);
  uint64_t v2 = std::string::insert(&v14, 0, "[ id: ", 6uLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  int64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (v16 >= 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  if (v16 >= 0) {
    std::string::size_type v5 = HIBYTE(v16);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(&v17, (const std::string::value_type *)v4, v5);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  snprintf(__str, 0x13uLL, "%p", a1);
  sub_21C8C(&v14, __str);
  int v6 = std::string::insert(&v14, 0, "; addr: ", 8uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v16 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v16 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (v16 >= 0) {
    std::string::size_type v9 = HIBYTE(v16);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(&v17, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  sub_D98B8(&v14, (uint64_t)(a1 + 22));
  uint64_t v10 = std::string::insert(&v14, 0, "; core port: ", 0xDuLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  int64_t v16 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v16 >= 0) {
    uint64_t v12 = __p;
  }
  else {
    uint64_t v12 = (void **)__p[0];
  }
  if (v16 >= 0) {
    std::string::size_type v13 = HIBYTE(v16);
  }
  else {
    std::string::size_type v13 = (std::string::size_type)__p[1];
  }
  std::string::append(&v17, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::string::append(&v17, " ]", 2uLL);
  sub_BFA04((uint64_t)(a1 + 6), &v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_D9850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_D98B8(void *a1, uint64_t a2)
{
  long long v3 = *(std::__shared_weak_count **)(a2 + 8);
  if (v3)
  {
    std::string::size_type v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      if (*(void *)a2)
      {
        sub_4F64((uint64_t)a1, (os_unfair_lock_t)(*(void *)a2 + 8));
        sub_4636C(v6);
        return;
      }
      sub_4636C(v5);
    }
  }

  sub_21C8C(a1, "expired");
}

void sub_D9954(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_D9968(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    return;
  }
  std::string::size_type v5 = 0;
  int v6 = 0;
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = a2;
  do
  {
    int v10 = *(_DWORD *)(a3 + 12 * v8);
    if (v10 > 1886417782)
    {
      if (v10 > 1936745837)
      {
        if (v10 > 1936747875)
        {
          if ((v10 - 1936747876) >= 2 && v10 != 2004050279) {
            goto LABEL_55;
          }
          goto LABEL_38;
        }
        BOOL v12 = v10 == 1936745838;
        unsigned __int16 v14 = 26739;
      }
      else
      {
        if (v10 <= 1886614624)
        {
          BOOL v12 = v10 == 1886417783;
          int v13 = 1886613101;
          goto LABEL_33;
        }
        BOOL v12 = v10 == 1886614625 || v10 == 1935762278;
        unsigned __int16 v14 = 25446;
      }
      int v13 = v14 | 0x73700000;
    }
    else if (v10 > 1752327776)
    {
      if (v10 <= 1869832546)
      {
        BOOL v12 = v10 == 1752327777;
        int v13 = 1819505773;
      }
      else
      {
        BOOL v12 = v10 == 1869832547 || v10 == 1886282093;
        int v13 = 1886283375;
      }
    }
    else
    {
      BOOL v12 = (v10 - 1651796325) <= 0xE && ((1 << (v10 - 101)) & 0x4801) != 0 || v10 == 1651798131;
      int v13 = 1668051827;
    }
LABEL_33:
    if (!v12 && v10 != v13) {
      goto LABEL_55;
    }
LABEL_38:
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (v6 - v5) + 1;
      if (v17 > 0x1555555555555555) {
        sub_60548();
      }
      if (0x5555555555555556 * ((uint64_t)(v7 - (void)v5) >> 2) > v17) {
        unint64_t v17 = 0x5555555555555556 * ((uint64_t)(v7 - (void)v5) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v5) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x1555555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18) {
        unint64_t v18 = (unint64_t)sub_564C(v18);
      }
      else {
        uint64_t v19 = 0;
      }
      unint64_t v20 = v18 + 4 * (v6 - v5);
      *(_DWORD *)unint64_t v20 = v10;
      *(void *)(v20 + 4) = 1735159650;
      __int16 v21 = (int *)v20;
      while (v6 != v5)
      {
        uint64_t v22 = *(void *)(v6 - 3);
        v6 -= 3;
        int v23 = v6[2];
        *(void *)(v21 - 3) = v22;
        v21 -= 3;
        v21[2] = v23;
      }
      unint64_t v7 = v18 + 12 * v19;
      int v6 = (int *)(v20 + 12);
      if (v5) {
        operator delete(v5);
      }
      std::string::size_type v5 = v21;
    }
    else
    {
      *int v6 = v10;
      *(void *)(v6 + 1) = 1735159650;
      v6 += 3;
    }
LABEL_55:
    ++v8;
  }
  while (v8 != v9);
  if (v5 != v6) {
    (*(void (**)(uint64_t, void, int *, uint64_t))(*(void *)a4 + 72))(a4, -1431655765 * ((unint64_t)((char *)v6 - (char *)v5) >> 2), v5, 1);
  }
  if (v5)
  {
    operator delete(v5);
  }
}

void sub_D9CA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_D9CC8(os_unfair_lock_s *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_D9CD4(uint64_t a1, int *a2, uint64_t a3, unsigned int *a4, uint64_t a5, float *a6)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v6 & 1) == 0)
  {
    __n128 v41 = (os_log_t *)sub_32A48(13);
    int v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1007;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Underlying Port is not valid\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) == 0)
  {
    CFNumberRef v44 = (os_log_t *)sub_32A48(13);
    unsigned int v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_ERROR))
    {
      uint64_t v85 = *(void *)a2;
      int v86 = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v85);
      os_log_t v46 = v89 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1009;
      __int16 v91 = 2080;
      __int16 v92 = (const char *)v46;
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v89 < 0) {
        operator delete(__p);
      }
    }
    int v47 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v47 = &off_6414D8;
    v47[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    __int16 v48 = (os_log_t *)sub_32A48(13);
    unint64_t v49 = *v48;
    if (*v48 && os_log_type_enabled(*v48, OS_LOG_TYPE_ERROR))
    {
      uint64_t v85 = *(void *)a2;
      int v86 = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v85);
      float v50 = v89 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1010;
      __int16 v91 = 2080;
      __int16 v92 = (const char *)v50;
      __int16 v93 = 1024;
      *(_DWORD *)int v94 = a3;
      *(_WORD *)&v94[4] = 2048;
      *(void *)&v94[6] = a4;
      _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v89 < 0) {
        operator delete(__p);
      }
    }
    uint64_t v51 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v51 = &off_6414D8;
    v51[2] = 561211770;
  }
  if (!a6)
  {
    float v52 = (os_log_t *)sub_32A48(13);
    __int16 v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      uint64_t v85 = *(void *)a2;
      int v86 = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v85);
      uint64_t v54 = v89 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1011;
      __int16 v91 = 2080;
      __int16 v92 = "inData";
      __int16 v93 = 2080;
      *(void *)int v94 = v54;
      _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v89 < 0) {
        operator delete(__p);
      }
    }
    __int16 v55 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v55 = &off_6414D8;
    v55[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 40))(a1, a2) & 1) == 0)
  {
    int v56 = (os_log_t *)sub_32A48(13);
    __int16 v57 = *v56;
    if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_ERROR))
    {
      uint64_t v85 = *(void *)a2;
      int v86 = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v85);
      BOOL v58 = v89 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1012;
      __int16 v91 = 2080;
      __int16 v92 = (const char *)v58;
      _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v89 < 0) {
        operator delete(__p);
      }
    }
    uint64_t v59 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v59 = &off_6414D8;
    v59[2] = 1852797029;
  }
  int v13 = *a2;
  if (*a2 > 1886614380)
  {
    if (v13 <= 1936747875)
    {
      if (v13 > 1936745317)
      {
        if (v13 == 1936745318 || v13 == 1936745838) {
          goto LABEL_68;
        }
        unsigned __int16 v14 = 26739;
      }
      else
      {
        if (v13 == 1886614381 || v13 == 1936221550) {
          goto LABEL_68;
        }
        unsigned __int16 v14 = 24944;
      }
      int v15 = v14 | 0x73700000;
LABEL_67:
      if (v13 == v15) {
        goto LABEL_68;
      }
      goto LABEL_74;
    }
    if (v13 <= 1986164322)
    {
      if (v13 == 1936747876 || v13 == 1937204590) {
        goto LABEL_68;
      }
      int v15 = 1952609377;
      goto LABEL_67;
    }
    if (v13 == 1986164323)
    {
      sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 1058);
      (*(void (**)(void, int *, uint64_t, unsigned int *, uint64_t, float *))(**(void **)buf + 48))(*(void *)buf, a2, a3, a4, a5, a6);
LABEL_70:
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
      return;
    }
    if (v13 != 1986814563)
    {
      int v15 = 2004050279;
      goto LABEL_67;
    }
LABEL_68:
    if ((*(unsigned int (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
    {
      int v60 = (os_log_t *)sub_32A48(13);
      uint64_t v61 = *v60;
      if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
      {
        uint64_t v85 = *(void *)a2;
        int v86 = a2[2];
        sub_16C9C4((uint64_t)&__p, (unsigned int *)&v85);
        int v62 = v89;
        char v63 = (void **)__p;
        int v64 = (*(uint64_t (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
        p_p = &__p;
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
        if (v62 < 0) {
          p_p = v63;
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1053;
        __int16 v91 = 2080;
        __int16 v92 = (const char *)p_p;
        __int16 v93 = 1024;
        *(_DWORD *)int v94 = a5;
        *(_WORD *)&v94[4] = 1024;
        *(_DWORD *)&v94[6] = v64;
        _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (v89 < 0) {
          operator delete(__p);
        }
      }
      int v66 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v66 = &off_6414D8;
      void v66[2] = 561211770;
    }
    sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 1054);
    (*(void (**)(void, int *, uint64_t, unsigned int *, uint64_t, float *))(**(void **)buf + 48))(*(void *)buf, a2, a3, a4, a5, a6);
    goto LABEL_70;
  }
  if (v13 > 1752327776)
  {
    if (v13 <= 1819505772)
    {
      if (v13 == 1752327777 || v13 == 1752462195) {
        goto LABEL_68;
      }
      int v15 = 1767989616;
      goto LABEL_67;
    }
    if (v13 == 1819505773 || v13 == 1869832547) {
      goto LABEL_68;
    }
    if (v13 == 1886417783)
    {
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
      {
        int v74 = (os_log_t *)sub_32A48(13);
        BOOL v75 = *v74;
        if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
        {
          uint64_t v85 = *(void *)a2;
          int v86 = a2[2];
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v85);
          int v76 = v89;
          BOOL v77 = (void **)__p;
          int v78 = (*(uint64_t (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          char v79 = &__p;
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
          if (v76 < 0) {
            char v79 = v77;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 1017;
          __int16 v91 = 2080;
          __int16 v92 = (const char *)v79;
          __int16 v93 = 1024;
          *(_DWORD *)int v94 = a5;
          *(_WORD *)&v94[4] = 1024;
          *(_DWORD *)&v94[6] = v78;
          _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (v89 < 0) {
            operator delete(__p);
          }
        }
        int v80 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v80 = &off_6414D8;
        v80[2] = 561211770;
      }
      sub_43F38((uint64_t *)buf, (uint64_t *)(a1 + 88), "", 1018);
      std::string __p = a6;
      char v88 = 0;
      (*(void (**)(void, void **))(**(void **)buf + 336))(*(void *)buf, &__p);
      sub_72924((uint64_t)&__p);
      goto LABEL_70;
    }
    goto LABEL_74;
  }
  if (v13 <= 1651798885)
  {
    if (v13 != 1651271025)
    {
      int v15 = 1651797100;
      goto LABEL_67;
    }
    goto LABEL_68;
  }
  if (v13 == 1651798886 || v13 == 1668051827) {
    goto LABEL_68;
  }
  if (v13 != 1685287026)
  {
LABEL_74:
    sub_3A60D0(a1, a2, a3, (uint64_t)a4, a5, (uint64_t)a6);
    return;
  }
  if ((*(unsigned int (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
  {
    CFNumberRef v67 = (os_log_t *)sub_32A48(13);
    CFNumberRef v68 = *v67;
    if (*v67 && os_log_type_enabled(*v67, OS_LOG_TYPE_ERROR))
    {
      uint64_t v85 = *(void *)a2;
      int v86 = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v85);
      int v69 = v89;
      os_log_t v70 = (void **)__p;
      int v71 = (*(uint64_t (**)(uint64_t, int *, uint64_t, unsigned int *))(*(void *)a1 + 48))(a1, a2, a3, a4);
      unsigned __int8 v72 = &__p;
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      if (v69 < 0) {
        unsigned __int8 v72 = v70;
      }
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1023;
      __int16 v91 = 2080;
      __int16 v92 = (const char *)v72;
      __int16 v93 = 1024;
      *(_DWORD *)int v94 = a5;
      *(_WORD *)&v94[4] = 1024;
      *(_DWORD *)&v94[6] = v71;
      _os_log_impl(&def_1E50E8, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
        buf,
        0x28u);
      if (v89 < 0) {
        operator delete(__p);
      }
    }
    uint32_t v73 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint32_t v73 = &off_6414D8;
    v73[2] = 561211770;
  }
  if (a3 != 8 || !a4)
  {
    char v81 = (os_log_t *)sub_32A48(13);
    char v82 = *v81;
    if (*v81 && os_log_type_enabled(*v81, OS_LOG_TYPE_ERROR))
    {
      uint64_t v85 = *(void *)a2;
      int v86 = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v85);
      char v83 = v89 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int buf = 136316674;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1025;
      __int16 v91 = 2080;
      __int16 v92 = (const char *)v83;
      __int16 v93 = 1024;
      *(_DWORD *)int v94 = 8;
      *(_WORD *)&v94[4] = 2080;
      *(void *)&v94[6] = "non-";
      __int16 v95 = 1024;
      int v96 = a3;
      __int16 v97 = 2048;
      uint64_t v98 = a4;
      _os_log_impl(&def_1E50E8, v82, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that qualifier size is %u and that qualifier data is %sNULL (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x3Cu);
      if (v89 < 0) {
        operator delete(__p);
      }
    }
    char v84 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v84 = &off_6414D8;
    v84[2] = 561211770;
  }
  int64_t v16 = *(void **)(a1 + 80);
  unsigned int v17 = *(_DWORD *)(a1 + 8);
  uint64_t v19 = *a4;
  uint64_t v18 = a4[1];
  float v20 = *a6;
  sub_3B7EC();
  std::string __p = &qword_64CC40;
  char v88 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  if (__PAIR64__(v18, v19) == 1650814258) {
    sub_30DCD0(v16[27], v20);
  }
  uint64_t v21 = v16[27];
  if (!*(unsigned char *)v21 || !*(void *)(v21 + 32))
  {
    uint64_t v22 = v16[18];
    if (v16[19] == v22)
    {
LABEL_49:
      uint64_t v37 = sub_32A48(13);
      int v38 = sub_7D5E8(1, *(void **)v37, *(void *)(v37 + 8));
      __int16 v39 = v38;
      if (v38 && os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PlugIn.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 1611;
        __int16 v91 = 1024;
        LODWORD(v92) = v17;
        _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Unable to locate a VirtualAudio_Device that uses VirtualAudioPortID %u.\"", buf, 0x18u);
      }

      CFNumberRef v40 = __cxa_allocate_exception(0x10uLL);
      *(void *)CFNumberRef v40 = &off_6414D8;
      void v40[2] = 1852797029;
    }
    uint64_t v23 = 0;
    unsigned int v24 = 0;
LABEL_34:
    char v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = *(void *)(v22 + 8 * v23);
    *(_WORD *)int buf = 256;
    while (1)
    {
      char v28 = v25;
      uint64_t v29 = sub_BC8B0(v27, buf[v26]);
      uint64_t v32 = *(void *)(v29 + 8);
      uint64_t v30 = v29 + 8;
      uint64_t v31 = v32;
      if (v32)
      {
        uint64_t v33 = v30;
        do
        {
          unsigned int v34 = *(_DWORD *)(v31 + 28);
          BOOL v35 = v34 >= v17;
          if (v34 >= v17) {
            char v36 = (uint64_t *)v31;
          }
          else {
            char v36 = (uint64_t *)(v31 + 8);
          }
          if (v35) {
            uint64_t v33 = v31;
          }
          uint64_t v31 = *v36;
        }
        while (*v36);
        if (v33 != v30
          && *(_DWORD *)(v33 + 28) <= v17
          && (*(unsigned int (**)(void, uint64_t, uint64_t, void))(**(void **)(v27 + 1008) + 352))(*(void *)(v27 + 1008), v19, v18, 0))
        {
          break;
        }
      }
      char v25 = 1;
      uint64_t v26 = 1;
      if (v28)
      {
        uint64_t v22 = v16[18];
        uint64_t v23 = ++v24;
        if (v24 >= (unint64_t)((v16[19] - v22) >> 3)) {
          goto LABEL_49;
        }
        goto LABEL_34;
      }
    }
    (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(v27 + 1008) + 368))(*(void *)(v27 + 1008), v19, v18, 0, v20);
  }
  sub_3BCAC(&__p);
}

void sub_DAE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DAEFC(void *a1, uint64_t a2, int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_43F38(&v23, (uint64_t *)(a2 + 88), "", 1082);
  uint64_t v6 = v23;
  std::string __p = (void *)(v23 + 320);
  LOBYTE(v11) = (*(uint64_t (**)(void))(*(void *)(v23 + 320) + 16))();
  uint64_t v7 = *(void *)(v6 + 288);
  sub_3BCAC(&__p);
  if (v7)
  {
    sub_105F14(v19, v6);
    std::string __p = 0;
    long long v11 = 0;
    uint64_t v12 = 0;
    strcpy(v13, "cwdv");
    v13[8] = 0;
    int v14 = 3;
    int v15 = v16;
    v16[0] = 0;
    v16[1] = 0;
    if (a3 == 1869968496) {
      int v8 = 44731034;
    }
    else {
      int v8 = 44731050;
    }
    CFTypeRef cf = 0;
    if (a3 == 1768845428) {
      int v8 = 44731018;
    }
    int v17 = v8;
    sub_3F33D0(v20, v19, (uint64_t)&__p);
    sub_DBFC4(&v21, *(void *)(a2 + 80), (uint64_t)v20);
    uint64_t v9 = v22;
    *(_OWORD *)a1 = v21;
    a1[2] = v9;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    sub_8108(v20);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v16[0]);
    if (__p)
    {
      long long v11 = __p;
      operator delete(__p);
    }
    sub_8108(v19);
  }
  if (v24) {
    sub_4636C(v24);
  }
}

void sub_DB094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  sub_8108((uint64_t *)va2);
  sub_470A4((uint64_t)va);
  sub_8108((uint64_t *)va1);
  int v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_4636C(v4);
  }
  _Unwind_Resume(a1);
}

void sub_DB0D8(void *a1, uint64_t a2, int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_43F38(&v23, (uint64_t *)(a2 + 88), "", 1105);
  uint64_t v6 = v23;
  std::string __p = (void *)(v23 + 320);
  LOBYTE(v11) = (*(uint64_t (**)(void))(*(void *)(v23 + 320) + 16))();
  uint64_t v7 = *(void *)(v6 + 312);
  sub_3BCAC(&__p);
  if (v7)
  {
    sub_10653C(v19, v6);
    std::string __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    strcpy(v13, "cwdv");
    v13[8] = 0;
    int v14 = 3;
    uint64_t v15 = v16;
    v16[0] = 0;
    v16[1] = 0;
    if (a3 == 1869968496) {
      int v8 = 44731034;
    }
    else {
      int v8 = 44731050;
    }
    CFTypeRef cf = 0;
    if (a3 == 1768845428) {
      int v8 = 44731018;
    }
    int v17 = v8;
    sub_3F33D0(v20, v19, (uint64_t)&__p);
    sub_DBFC4(&v21, *(void *)(a2 + 80), (uint64_t)v20);
    uint64_t v9 = v22;
    *(_OWORD *)a1 = v21;
    a1[2] = v9;
    uint64_t v22 = 0;
    long long v21 = 0uLL;
    sub_8108(v20);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v16[0]);
    if (__p)
    {
      uint64_t v11 = __p;
      operator delete(__p);
    }
    sub_8108(v19);
  }
  if (v24) {
    sub_4636C(v24);
  }
}

void sub_DB270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v19 = va_arg(va2, void);
  uint64_t v20 = va_arg(va2, void);
  sub_8108((uint64_t *)va2);
  sub_470A4((uint64_t)va);
  sub_8108((uint64_t *)va1);
  int v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_4636C(v4);
  }
  _Unwind_Resume(a1);
}

void sub_DB2B4(uint64_t a1, uint64_t a2)
{
  sub_43F38(&v6, (uint64_t *)(a2 + 88), "", 1148);
  (*(void (**)(void **__return_ptr))(*(void *)v6 + 176))(&__p);
  if (v7) {
    sub_4636C(v7);
  }
  long long v3 = (int *)__p;
  int v4 = v9;
  *(void *)a1 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  *(_WORD *)(a1 + 8) = 257;
  while (v3 != v4)
  {
    int v5 = *v3++;
    sub_451D0(a1, v5);
  }
  if (__p)
  {
    uint64_t v9 = (int *)__p;
    operator delete(__p);
  }
}

void sub_DB388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_DB3C8(uint64_t a1, uint64_t a2, int a3)
{
  sub_43F38(&v12, (uint64_t *)(a2 + 88), "", 1203);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  int v5 = *(uint64_t **)(v12 + 96);
  for (uint64_t i = *(uint64_t **)(v12 + 104); v5 != i; v5 += 2)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = (std::__shared_weak_count *)v5[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(_DWORD *)(v7 + 8) == 1)
    {
      uint64_t v9 = *(void *)(v7 + 32);
LABEL_6:
      if (v9 != *(void *)(v7 + 40))
      {
        for (uint64_t j = *(_DWORD **)(v9 + 40); j != *(_DWORD **)(v9 + 48); ++j)
        {
          if (*j == a3)
          {
            v9 += 64;
            goto LABEL_6;
          }
        }
        __int32 v17 = *(_DWORD *)v7;
        sub_72D08((uint64_t)&v14, &v17);
      }
    }
    if (v8) {
      sub_4636C(v8);
    }
  }
  if (v13) {
    sub_4636C(v13);
  }
  uint64_t v11 = v14;
  sub_DBF48(a1, v14, v15);
  if (v11)
  {
    operator delete(v11);
  }
}

void sub_DB500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (v11) {
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_DB544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_43F38(&v26, (uint64_t *)(a2 + 88), "", 1154);
  uint64_t v6 = v26;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v26 + 176))(&v24, v26, a3);
  if (v24 == v25)
  {
    *(void *)a1 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    *(_WORD *)(a1 + 8) = 257;
    goto LABEL_30;
  }
  long long v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 200))(v6) & 0xFF00000000) != 0) {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 200))(v6);
  }
  else {
    uint64_t v7 = sub_DBA60(a2);
  }
  float v8 = *(float *)&v7;
  if ((v7 & 0xFF00000000) != 0)
  {
    uint64_t v9 = sub_32A48(3);
    float v10 = v8;
    if (*(unsigned char *)(v9 + 8))
    {
      uint64_t v11 = *(NSObject **)v9;
      if (*(void *)v9)
      {
        if (os_log_type_enabled(*(os_log_t *)v9, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
          __int16 v29 = 1024;
          int v30 = 1169;
          __int16 v31 = 2048;
          double v32 = v10;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Looking up active sub-port for beam direction: %f", buf, 0x1Cu);
        }
      }
    }
    *(void *)int buf = (*(uint64_t (**)(uint64_t, void, float))(*(void *)v6 + 192))(v6, *(unsigned int *)(a3 + 4), v10);
    if ((*(void *)buf & 0xFF00000000) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v12 = sub_32A48(3);
    if (*(unsigned char *)(v12 + 8))
    {
      uint64_t v13 = *(NSObject **)v12;
      if (*(void *)v12)
      {
        if (os_log_type_enabled(*(os_log_t *)v12, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
          __int16 v29 = 1024;
          int v30 = 1178;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d Looking up active sub-port. (No beam)", buf, 0x12u);
        }
      }
    }
    *(void *)int buf = (*(uint64_t (**)(uint64_t, void))(*(void *)v6 + 184))(v6, *(unsigned int *)(a3 + 4));
    if ((*(void *)buf & 0xFF00000000) == 0) {
      goto LABEL_19;
    }
  }
  sub_72D08((uint64_t)&v21, (__int32 *)buf);
LABEL_19:
  uint64_t v14 = v21;
  uint64_t v15 = v22;
  if (v21 != (unsigned int *)v22)
  {
    uint64_t v16 = sub_32A48(3);
    if (*(unsigned char *)(v16 + 8))
    {
      __int32 v17 = *(NSObject **)v16;
      if (*(void *)v16)
      {
        if (os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG))
        {
          sub_2417C(__p, *v14);
          if (v20 >= 0) {
            *(double *)&uint64_t v18 = COERCE_DOUBLE(__p);
          }
          else {
            uint64_t v18 = (void **)__p[0];
          }
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
          __int16 v29 = 1024;
          int v30 = 1186;
          __int16 v31 = 2080;
          double v32 = *(double *)&v18;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d Active sub-port is %s", buf, 0x1Cu);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  sub_DBF48(a1, (int *)v14, v15);
  if (v14) {
    operator delete(v14);
  }
LABEL_30:
  if (v24)
  {
    char v25 = v24;
    operator delete(v24);
  }
  if (v27) {
    sub_4636C(v27);
  }
}

void sub_DB92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a20) {
    sub_4636C(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_DB994(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  float v10 = 0;
  uint64_t v11 = 0;
  sub_43F38(&v6, (uint64_t *)(a2 + 88), "", 1193);
  uint64_t v3 = *(void *)(v6 + 128);
  uint64_t v8 = v3;
  if (v7) {
    sub_4636C(v7);
  }
  if ((v3 & 0xFF00000000) != 0)
  {
    sub_72D08((uint64_t)&v9, (__int32 *)&v8);
    int v5 = v9;
    int v4 = v10;
  }
  else
  {
    int v5 = 0;
    int v4 = 0;
  }
  sub_DBF48(a1, v5, v4);
  if (v5)
  {
    operator delete(v5);
  }
}

void sub_DBA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DBA60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  unsigned int v3 = *(_DWORD *)(a1 + 8);
  sub_3B7EC();
  uint64_t v27 = &qword_64CC40;
  char v28 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  int v4 = *(uint64_t **)(v2 + 144);
  int v5 = *(uint64_t **)(v2 + 152);
  if (v4 == v5)
  {
LABEL_16:
    sub_3BCAC(&v27);
  }
  else
  {
LABEL_2:
    char v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *v4;
    __int16 v26 = 256;
    while (1)
    {
      char v9 = v6;
      uint64_t v10 = sub_BC8B0(v8, *((unsigned __int8 *)&v26 + v7));
      uint64_t v13 = *(void *)(v10 + 8);
      uint64_t v11 = v10 + 8;
      uint64_t v12 = v13;
      if (v13)
      {
        uint64_t v14 = v11;
        do
        {
          unsigned int v15 = *(_DWORD *)(v12 + 28);
          BOOL v16 = v15 >= v3;
          if (v15 >= v3) {
            __int32 v17 = (uint64_t *)v12;
          }
          else {
            __int32 v17 = (uint64_t *)(v12 + 8);
          }
          if (v16) {
            uint64_t v14 = v12;
          }
          uint64_t v12 = *v17;
        }
        while (*v17);
        if (v14 != v11 && *(_DWORD *)(v14 + 28) <= v3) {
          break;
        }
      }
      char v6 = 1;
      uint64_t v7 = 1;
      if (v9)
      {
        if (++v4 != v5) {
          goto LABEL_2;
        }
        goto LABEL_16;
      }
    }
    int v18 = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(v8 + 1008) + 384))(*(void *)(v8 + 1008), 1685287015, 1818980210, 0);
    sub_3BCAC(&v27);
    if (v18 && sub_314E24(*(void **)(a1 + 80), *(_DWORD *)(a1 + 8), 1685287015, 1667524978))
    {
      uint64_t v19 = *(void **)(a1 + 80);
      unsigned int v20 = *(_DWORD *)(a1 + 8);
      uint64_t v21 = 1685287015;
      uint64_t v22 = 1667524978;
      goto LABEL_22;
    }
  }
  if (sub_314E24(*(void **)(a1 + 80), *(_DWORD *)(a1 + 8), 1650814258, 0))
  {
    uint64_t v19 = *(void **)(a1 + 80);
    unsigned int v20 = *(_DWORD *)(a1 + 8);
    uint64_t v21 = 1650814258;
    uint64_t v22 = 0;
LABEL_22:
    float v23 = sub_314FE8(v19, v20, v21, v22);
    uint64_t v24 = 0x100000000;
  }
  else
  {
    uint64_t v24 = 0;
    float v23 = 0.0;
  }
  return v24 | LODWORD(v23);
}

void sub_DBC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

void sub_DBC68(uint64_t a1, _DWORD *a2, void *a3)
{
  sub_43F38(&v8, (uint64_t *)(a1 + 88), "", 1133);
  (*(void (**)(void **__return_ptr))(**(void **)(v8 + 192) + 288))(&v10);
  if (v9) {
    sub_4636C(v9);
  }
  int v5 = v10;
  unint64_t v6 = (v11 - (unsigned char *)v10) >> 2;
  if (v6 >= (unint64_t)*a2 >> 2) {
    unint64_t v6 = (unint64_t)*a2 >> 2;
  }
  size_t v7 = (4 * v6);
  *a2 = v7;
  if (v6) {
    memcpy(a3, v5, v7);
  }
  if (v5)
  {
    uint64_t v11 = v5;
    operator delete(v5);
  }
}

void sub_DBD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_4636C(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_DBD60(uint64_t *a1, uint64_t a2, char *a3, int a4)
{
  BOOL v16 = &v16;
  __int32 v17 = (uint64_t *)&v16;
  uint64_t v18 = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 == a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    char v9 = a1 + 2;
    goto LABEL_7;
  }
  char v9 = &v18;
  do
  {
    sub_43F38((uint64_t *)&v19, (uint64_t *)(v5 + 16), a3, a4);
    uint64_t v10 = operator new(0x20uLL);
    v10[1] = v19;
    uint64_t v11 = (uint64_t)v16;
    *(void *)uint64_t v10 = v16;
    *((void *)v10 + 1) = &v16;
    *(void *)(v11 + 8) = v10;
    uint64_t v12 = v18 + 1;
    BOOL v16 = v10;
    ++v18;
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5 != a2);
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (v12)
  {
    uint64_t v13 = v17;
    uint64_t v14 = *v17;
    *(void *)(v14 + 8) = *((void *)v10 + 1);
    **((void **)v10 + 1) = v14;
    uint64_t v15 = *a1;
    *(void *)(v15 + 8) = v13;
    *uint64_t v13 = v15;
    *a1 = (uint64_t)v10;
    *((void *)v10 + 1) = a1;
    a1[2] = v12;
LABEL_7:
    *char v9 = 0;
  }
  sub_B8E4((uint64_t *)&v16);
}

void sub_DBE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_4636C(a14);
  }
  sub_B8E4(&a10);
  _Unwind_Resume(a1);
}

CFStringRef *sub_DBE90(CFStringRef *a1, const UInt8 *a2, CFIndex a3)
{
  if (a2)
  {
    CFStringRef v4 = CFStringCreateWithBytes(0, a2, a3, 0x8000100u, 0);
    *a1 = v4;
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

void sub_DBF1C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DBF48(uint64_t a1, int *a2, int *a3)
{
  uint64_t result = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 257;
  while (a2 != a3)
  {
    int v7 = *a2++;
    uint64_t result = sub_451D0(a1, v7);
  }
  return result;
}

void sub_DBFB0(_Unwind_Exception *a1)
{
  sub_3D61C(v1);
  _Unwind_Resume(a1);
}

void sub_DBFC4(void *a1, uint64_t a2, uint64_t a3)
{
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  strcpy(v16, "cwdv");
  v16[8] = 0;
  int v17 = 3;
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v18 = v19;
  CFTypeRef cf = 0;
  int v20 = 44731050;
  sub_2E3690(&v22, a2, a3, (uint64_t)&__p);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v19[0]);
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  uint64_t v4 = v22;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if ((void **)v4 != v23)
  {
    unint64_t v5 = 0;
    unint64_t v6 = (void **)v4;
    do
    {
      int v7 = v6[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (void **)v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v6[2];
          BOOL v9 = *v8 == v6;
          unint64_t v6 = v8;
        }
        while (!v9);
      }
      ++v5;
      unint64_t v6 = v8;
    }
    while (v8 != v23);
    sub_46BB4(a1, v5);
    uint64_t v10 = (_DWORD *)a1[1];
    do
    {
      _DWORD *v10 = *(_DWORD *)(v4 + 28);
      uint64_t v11 = *(void **)(v4 + 8);
      if (v11)
      {
        do
        {
          uint64_t v12 = (void **)v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = *(void ***)(v4 + 16);
          BOOL v9 = *v12 == (void *)v4;
          uint64_t v4 = (uint64_t)v12;
        }
        while (!v9);
      }
      ++v10;
      uint64_t v4 = (uint64_t)v12;
    }
    while (v12 != v23);
    a1[1] = v10;
  }
  sub_463E0(v23[0]);
}

void sub_DC124(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  sub_463E0(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_DC15C(uint64_t a1, int a2)
{
  sub_43F38(&v20, (uint64_t *)(a1 + 88), "", 1071);
  uint64_t v4 = v20;
  std::string __p = (void *)(v20 + 320);
  LOBYTE(v10) = (*(uint64_t (**)(void))(*(void *)(v20 + 320) + 16))();
  uint64_t v5 = *(void *)(v4 + 288);
  sub_3BCAC(&__p);
  if (v5)
  {
    sub_105F14(v18, v4);
    std::string __p = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    strcpy(v12, "cwdv");
    v12[8] = 0;
    int v13 = 3;
    uint64_t v14 = v15;
    v15[0] = 0;
    v15[1] = 0;
    if (a2 == 1869968496) {
      int v6 = 44731034;
    }
    else {
      int v6 = 44731050;
    }
    CFTypeRef cf = 0;
    if (a2 == 1768845428) {
      int v6 = 44731018;
    }
    int v16 = v6;
    sub_3F33D0(v19, v18, (uint64_t)&__p);
    uint64_t v7 = sub_DC4D4(a1, (uint64_t)v19);
    sub_8108(v19);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v15[0]);
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
    sub_8108(v18);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v21) {
    sub_4636C(v21);
  }
  return v7;
}

void sub_DC2D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_8108((uint64_t *)(v2 - 72));
  sub_470A4((uint64_t)va);
  sub_8108((uint64_t *)va1);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 40);
  if (v4) {
    sub_4636C(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_DC318(uint64_t a1, int a2)
{
  sub_43F38(&v20, (uint64_t *)(a1 + 88), "", 1094);
  uint64_t v4 = v20;
  std::string __p = (void *)(v20 + 320);
  LOBYTE(v10) = (*(uint64_t (**)(void))(*(void *)(v20 + 320) + 16))();
  uint64_t v5 = *(void *)(v4 + 312);
  sub_3BCAC(&__p);
  if (v5)
  {
    sub_10653C(v18, v4);
    std::string __p = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    strcpy(v12, "cwdv");
    v12[8] = 0;
    int v13 = 3;
    uint64_t v14 = v15;
    v15[0] = 0;
    v15[1] = 0;
    if (a2 == 1869968496) {
      int v6 = 44731034;
    }
    else {
      int v6 = 44731050;
    }
    CFTypeRef cf = 0;
    if (a2 == 1768845428) {
      int v6 = 44731018;
    }
    int v16 = v6;
    sub_3F33D0(v19, v18, (uint64_t)&__p);
    uint64_t v7 = sub_DC4D4(a1, (uint64_t)v19);
    sub_8108(v19);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v15[0]);
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
    sub_8108(v18);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v21) {
    sub_4636C(v21);
  }
  return v7;
}

void sub_DC490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_8108((uint64_t *)(v2 - 72));
  sub_470A4((uint64_t)va);
  sub_8108((uint64_t *)va1);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 40);
  if (v4) {
    sub_4636C(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_DC4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2 == a2) {
    return 0;
  }
  LODWORD(v5) = 0;
  do
  {
    std::string __p = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    strcpy(v14, "cwdv");
    v14[8] = 0;
    int v15 = 3;
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v16 = v17;
    CFTypeRef cf = 0;
    int v18 = 44731048;
    uint64_t v6 = *(void *)(a1 + 80);
    sub_549A4(&v9, (uint64_t *)(v2 + 16), "", 1119);
    int v7 = sub_E00F4(*(void *)(v6 + 128), v9, (uint64_t)&__p);
    if (v10) {
      sub_4636C(v10);
    }
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v17[0]);
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    if (v7) {
      uint64_t v5 = (v5 + 1);
    }
    else {
      uint64_t v5 = v5;
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2 != a2);
  return v5;
}

void sub_DC5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(a19);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_DC644(uint64_t a1, int *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v2 & 1) == 0)
  {
    uint64_t v12 = (os_log_t *)sub_32A48(13);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v15 = 136315394;
      *(void *)&v15[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char v15[12] = 1024;
      *(_DWORD *)&v15[14] = 360;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Underlying Port is not valid\"", v15, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }
  uint64_t v4 = 0;
  int v5 = *a2;
  if (*a2 > 1886417761)
  {
    if (v5 > 1936746610)
    {
      if (v5 > 1953653605)
      {
        if (v5 <= 1986164322)
        {
          if (v5 > 1953719141)
          {
            if (v5 == 1953719142 || v5 == 1970040164) {
              return v4;
            }
            int v6 = 1970496630;
            goto LABEL_118;
          }
          if (v5 != 1953653606)
          {
            int v6 = 1953655149;
            goto LABEL_118;
          }
          return v4;
        }
        if (v5 > 1986947427)
        {
          if (v5 != 1986947428 && v5 != 2004050279)
          {
            int v6 = 2004054901;
            goto LABEL_118;
          }
          goto LABEL_113;
        }
        if (v5 == 1986164323) {
          goto LABEL_113;
        }
        if (v5 != 1986814563) {
          goto LABEL_123;
        }
        return 1;
      }
      if (v5 > 1936749679)
      {
        if (v5 > 1937204589)
        {
          if (v5 != 1937204590 && v5 != 1952609377)
          {
            int v6 = 1952740208;
            goto LABEL_118;
          }
          goto LABEL_113;
        }
        if (v5 == 1936749680) {
          return v4;
        }
        int v8 = 1936945763;
        goto LABEL_112;
      }
      if (v5 > 1936748140)
      {
        if (v5 != 1936748141)
        {
          int v6 = 1936748656;
          goto LABEL_118;
        }
        return v4;
      }
      if ((v5 - 1936747876) < 2) {
        goto LABEL_113;
      }
      unsigned __int16 v7 = 26739;
    }
    else
    {
      if (v5 <= 1886742883)
      {
        if (v5 <= 1886613618)
        {
          if (v5 > 1886484337)
          {
            if (v5 == 1886484338 || v5 == 1886611810) {
              return v4;
            }
            int v6 = 1886613101;
            goto LABEL_118;
          }
          if (v5 == 1886417762) {
            return v4;
          }
          if (v5 != 1886417783) {
            goto LABEL_123;
          }
          sub_43F38((uint64_t *)v15, (uint64_t *)(a1 + 88), "", 427);
          uint64_t v10 = (*(uint64_t (**)(void))(**(void **)v15 + 328))(*(void *)v15);
LABEL_114:
          uint64_t v4 = v10;
          if (*(void *)&v15[8]) {
            sub_4636C(*(std::__shared_weak_count **)&v15[8]);
          }
          return v4;
        }
        if (v5 > 1886614624)
        {
          if (v5 == 1886614625 || v5 == 1886614882) {
            return v4;
          }
          int v6 = 1886681456;
          goto LABEL_118;
        }
        if (v5 == 1886613619) {
          return v4;
        }
        int v8 = 1886614381;
        goto LABEL_112;
      }
      if (v5 <= 1936221549)
      {
        if (v5 > 1886810225)
        {
          if (v5 == 1886810226 || v5 == 1935762278) {
            return v4;
          }
          int v6 = 1935895923;
          goto LABEL_118;
        }
        if (v5 != 1886742884)
        {
          int v6 = 1886808435;
          goto LABEL_118;
        }
        return v4;
      }
      if (v5 > 1936745317)
      {
        if (v5 == 1936745318) {
          goto LABEL_113;
        }
        if (v5 == 1936745586) {
          return v4;
        }
        unsigned __int16 v7 = 25966;
      }
      else
      {
        if (v5 == 1936221550 || v5 == 1936225136) {
          goto LABEL_113;
        }
        unsigned __int16 v7 = 24944;
      }
    }
    int v8 = v7 | 0x73700000;
    goto LABEL_112;
  }
  if (v5 <= 1819046767)
  {
    if (v5 <= 1684826731)
    {
      if (v5 <= 1651797099)
      {
        if (v5 > 1651796324)
        {
          unsigned int v9 = v5 - 1651796325;
          if (v9 <= 0xE && ((1 << v9) & 0x4801) != 0) {
            return v4;
          }
          goto LABEL_123;
        }
        if (v5 == 1650551140 || v5 == 1651271025) {
          goto LABEL_113;
        }
        int v8 = 1651794290;
        goto LABEL_112;
      }
      if (v5 <= 1651798885)
      {
        if (v5 != 1651797100)
        {
          int v6 = 1651798131;
          goto LABEL_118;
        }
        goto LABEL_113;
      }
      if (v5 != 1651798886)
      {
        int v8 = 1668051827;
LABEL_112:
        if (v5 != v8) {
          goto LABEL_123;
        }
      }
LABEL_113:
      sub_43F38((uint64_t *)v15, (uint64_t *)(a1 + 88), "", 457);
      uint64_t v10 = (*(uint64_t (**)(void, int *))(**(void **)v15 + 24))(*(void *)v15, a2);
      goto LABEL_114;
    }
    if (v5 > 1685484389)
    {
      if (v5 <= 1752462194)
      {
        if (v5 != 1685484390)
        {
          int v6 = 1752327777;
          goto LABEL_118;
        }
        return v4;
      }
      if (v5 != 1752462195 && v5 != 1767989616)
      {
        int v6 = 1768382832;
        goto LABEL_118;
      }
      goto LABEL_113;
    }
    if (v5 <= 1685088611)
    {
      if (v5 != 1684826732)
      {
        int v6 = 1685021040;
        goto LABEL_118;
      }
      goto LABEL_113;
    }
    if (v5 == 1685088612) {
      return v4;
    }
    if (v5 != 1685287026)
    {
      int v6 = 1685287027;
      goto LABEL_118;
    }
    return 1;
  }
  if (v5 <= 1885890928)
  {
    if (v5 > 1885434721)
    {
      if (v5 > 1885561195)
      {
        if (v5 == 1885561196 || v5 == 1885566064) {
          return v4;
        }
        int v6 = 1885696116;
        goto LABEL_118;
      }
      if (v5 != 1885434722)
      {
        int v6 = 1885497710;
        goto LABEL_118;
      }
      return v4;
    }
    if (v5 > 1819505772)
    {
      if (v5 != 1819505773 && v5 != 1869832547)
      {
        int v6 = 1885430643;
        goto LABEL_118;
      }
      goto LABEL_113;
    }
    if (v5 == 1819046768) {
      return v4;
    }
    int v8 = 1819503987;
    goto LABEL_112;
  }
  if (v5 <= 1886282092)
  {
    if (v5 > 1885956207)
    {
      if (v5 == 1885956208 || v5 == 1885959026) {
        return v4;
      }
      int v6 = 1886218596;
      goto LABEL_118;
    }
    if (v5 != 1885890929)
    {
      int v6 = 1885955428;
      goto LABEL_118;
    }
    return v4;
  }
  if (v5 > 1886353261)
  {
    if (v5 == 1886353262 || v5 == 1886415204) {
      return v4;
    }
    int v6 = 1886417524;
  }
  else
  {
    if (v5 == 1886282093 || v5 == 1886282099) {
      return v4;
    }
    int v6 = 1886283375;
  }
LABEL_118:
  if (v5 == v6) {
    return v4;
  }
LABEL_123:

  return sub_3A6BA8(a1, a2);
}

void sub_DCECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_DCF00(uint64_t a1)
{
  sub_DCF38(a1);

  operator delete();
}

uint64_t sub_DCF38(uint64_t a1)
{
  *(void *)a1 = off_6209F8;
  unsigned __int8 v2 = (os_log_t *)sub_32A48(3);
  unsigned int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 8);
    int v7 = 136315906;
    int v8 = "VirtualAudio_Port.cpp";
    __int16 v9 = 1024;
    int v10 = 105;
    __int16 v11 = 1024;
    int v12 = v4;
    __int16 v13 = 2048;
    uint64_t v14 = a1;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Destroying VirtualAudio_Port with ID %u at address %p.", (uint8_t *)&v7, 0x22u);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 96);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_3A6F14(a1);
  return a1;
}

void sub_DD044(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

uint64_t sub_DD054(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  int v8 = (void *)sub_3A7164(a1, a2, 1886549091, a3);
  void *v8 = off_6209F8;
  void v8[10] = a3;
  v8[11] = *a4;
  uint64_t v9 = a4[1];
  v8[12] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 104) = 0;
  sub_43F38((uint64_t *)&v20, v8 + 11, "", 59);
  atomic_store(1u, (unsigned __int8 *)(a1 + 104));
  int v10 = v20;
  *(unsigned char *)(a1 + 105) = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v20->_os_unfair_lock_opaque + 208))(v20);
  if ((v10[46]._os_unfair_lock_opaque & 0x40) != 0)
  {
    strcpy(buf, "rsipbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D94A8, a1);
  }
  strcpy(buf, "ofnpbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
  strcpy(buf, "manpbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
  strcpy(buf, "mnspbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
  strcpy(buf, "wsppbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
  strcpy(buf, "atspbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
  if ((*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&v10->_os_unfair_lock_opaque + 392))(v10))
  {
    strcpy(buf, "eitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
    strcpy(buf, "pitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
    strcpy(buf, "sitbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
    strcpy(buf, "sptbbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
  }
  strcpy(buf, "casobolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned char *))(*(void *)&v10->_os_unfair_lock_opaque + 16))(v10, buf))
  {
    strcpy(buf, "fcasbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
    strcpy(buf, "casobolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
  }
  __int16 v11 = (int *)qword_64A860;
  for (uint64_t i = qword_64A868; v11 != (int *)i; ++v11)
  {
    int v13 = *v11;
    *(_DWORD *)int buf = *v11;
    *(void *)&uint8_t buf[4] = 1735159650;
    if ((*(unsigned int (**)(os_unfair_lock_s *, unsigned char *))(*(void *)&v10->_os_unfair_lock_opaque + 16))(v10, buf))
    {
      *(_DWORD *)int buf = v13;
      *(void *)&uint8_t buf[4] = 1735159650;
      sub_FEAC0((uint64_t)v10, buf, (uint64_t)sub_D9968, a1);
    }
  }
  sub_D962C((unsigned int *)a1);
  uint64_t v14 = (os_log_t *)sub_32A48(3);
  int v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEBUG))
  {
    sub_4F64((uint64_t)__p, v10 + 2);
    uint64_t v16 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
    __int16 v23 = 1024;
    int v24 = 100;
    __int16 v25 = 1024;
    int v26 = a2;
    __int16 v27 = 2048;
    uint64_t v28 = a1;
    __int16 v29 = 2080;
    int v30 = v16;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating VirtualAudio_Port with ID %u at address %p (underlying port: %s).", buf, 0x2Cu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v21) {
    sub_4636C(v21);
  }
  return a1;
}

void sub_DD5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_4636C(a14);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 96);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  sub_3A6F14(v14);
  _Unwind_Resume(a1);
}

unsigned char *sub_DD634(uint64_t a1, uint64_t a2)
{
  sub_3B7EC();
  int v26 = &qword_64CC40;
  char v27 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 104));
  if ((v4 & 1) == 0)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(13);
    int v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 180;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Underlying Port is not valid\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Underlying Port is not valid");
  }
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  int v7 = (uint64_t *)(a1 + 88);
  *(void *)int buf = v6;
  *(void *)&uint8_t buf[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  sub_DD9D0(v25, (uint64_t *)buf, 1);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  int v8 = (os_log_t *)sub_32A48(3);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_INFO))
  {
    sub_43F38(&v21, v7, "", 189);
    int v10 = __p;
    sub_2417C(__p, *(_DWORD *)(v21 + 144));
    if (v24 < 0) {
      int v10 = (void **)__p[0];
    }
    sub_43F38(&v17, v7, "", 189);
    __int16 v11 = *(const void **)(v17 + 248);
    char v19 = v11;
    char v20 = *(unsigned char *)(v17 + 256);
    if (v20 && v11) {
      CFRetain(v11);
    }
    *(_DWORD *)int buf = 136316162;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Port.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 189;
    __int16 v29 = 1024;
    int v30 = a2;
    __int16 v31 = 2080;
    double v32 = v10;
    __int16 v33 = 2112;
    unsigned int v34 = v11;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_INFO, "%25s:%-5d Request to set port routability to %u for port with type '%s' and UID \"%@\"", buf, 0x2Cu);
    sub_72924((uint64_t)&v19);
    if (v18) {
      sub_4636C(v18);
    }
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v22) {
      sub_4636C(v22);
    }
  }
  sub_3B7EC();
  sub_523D8(buf, (uint64_t)&qword_64CC40);
  int v12 = (_DWORD *)sub_10FBF0();
  sub_112F90(v12, (uint64_t)v25, a2, 0);
  sub_52380(buf);
  sub_8108(v25);
  return sub_3BCAC(&v26);
}

void sub_DD92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a10) {
    sub_4636C(a10);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14) {
    sub_4636C(a14);
  }
  sub_8108(&a21);
  sub_3BCAC(&a24);
  _Unwind_Resume(a1);
}

uint64_t *sub_DD9D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    unsigned __int8 v4 = a2;
    uint64_t v5 = &a2[2 * a3];
    do
    {
      sub_3590(a1, *v4, v4[1]);
      v4 += 2;
    }
    while (v4 != v5);
  }
  return a1;
}

void sub_DDA28(_Unwind_Exception *a1)
{
  sub_8108(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_DDA3C()
{
  return 0;
}

BOOL sub_DDA44(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  int v4 = 4;
  if (sub_3D3FC8(*(uint64_t **)(a1 + 8), 0x63647370u, 0, 0, &v4, (float *)&v5, a2)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5 == 0;
  }
  return !v2;
}

uint64_t sub_DDAA0(uint64_t a1, int a2, uint64_t a3)
{
  int v4 = a2;
  return sub_3D3C98(*(uint64_t **)(a1 + 8), 0x63647370u, 0, 0, 4, (float *)&v4, a3);
}

BOOL sub_DDAE4(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  int v4 = 4;
  if (sub_3D3FC8(*(uint64_t **)(a1 + 8), 0x45616E63u, 0, 0, &v4, (float *)&v5, a2)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = v5 == 0;
  }
  return !v2;
}

uint64_t sub_DDB40(uint64_t **a1, int a2, uint64_t a3)
{
  int v10 = a2;
  uint64_t result = sub_3D3C98(a1[1], 0x45616E63u, 0, 0, 4, (float *)&v10, a3);
  if (a2 && !result)
  {
    int v7 = -11;
    while (!__CFADD__(v7++, 1))
    {
      usleep(0xBB8u);
      char v9 = 0;
      ((void (*)(uint64_t **, uint64_t *, uint64_t **, uint64_t, uint64_t, uint64_t, char *, uint64_t))(*a1)[6])(a1, a1[1], a1 + 3, 196621, 1, 1, &v9, a3);
      if ((v9 & 2) != 0) {
        return 0;
      }
    }
    return 5;
  }
  return result;
}

uint64_t sub_DDC1C(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (!a3)
  {
    uint64_t v9 = *a2;
    uint64_t v8 = a2[1];
    if (v8 != *a2) {
      goto LABEL_6;
    }
    return 0;
  }
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8 == *a2)
  {
    if (*(unsigned char *)(a3 + 3))
    {
      uint64_t v21 = 0;
      *(_DWORD *)(a3 + 4) = 0;
      return v21;
    }
    return 0;
  }
  if (!*(unsigned char *)(a3 + 3))
  {
LABEL_6:
    int v33 = 0;
    uint64_t v32 = 0;
    goto LABEL_7;
  }
  uint64_t v32 = mach_absolute_time();
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  int v33 = 1;
LABEL_7:
  std::string __p = 0;
  BOOL v35 = 0;
  unint64_t v36 = 0;
  if (v8 != v9)
  {
    unint64_t v10 = 0;
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    char v14 = 1;
    do
    {
      unsigned __int8 v15 = atomic_load(a1 + 40);
      if ((v15 & 1) == 0) {
        break;
      }
      uint64_t v16 = (unsigned int *)(*a2 + 8 * v10);
      uint64_t v18 = *v16;
      unsigned int v17 = v16[1];
      if (v14)
      {
        if (v35 != __p) {
          BOOL v35 = (char *)__p;
        }
        uint64_t v12 = (v18 - 1);
        uint64_t v13 = v18;
      }
      if (v18 - v12 == 1)
      {
        char v19 = v35;
        if ((unint64_t)v35 >= v36)
        {
          uint64_t v22 = (char *)__p;
          uint64_t v23 = (v35 - (unsigned char *)__p) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            sub_60548();
          }
          uint64_t v25 = v36 - (void)__p;
          if ((uint64_t)(v36 - (void)__p) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          BOOL v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v26) {
            unint64_t v27 = v24;
          }
          if (v27)
          {
            unint64_t v27 = (unint64_t)sub_46BF4(v27);
            uint64_t v22 = (char *)__p;
            char v19 = v35;
          }
          else
          {
            uint64_t v28 = 0;
          }
          __int16 v29 = (unsigned int *)(v27 + 4 * v23);
          *__int16 v29 = v17;
          char v20 = (char *)(v29 + 1);
          while (v19 != v22)
          {
            unsigned int v30 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *--__int16 v29 = v30;
          }
          std::string __p = v29;
          BOOL v35 = v20;
          unint64_t v36 = v27 + 4 * v28;
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)BOOL v35 = v17;
          char v20 = v19 + 4;
        }
        BOOL v35 = v20;
        unint64_t v10 = ++v11;
        if (v11 == (a2[1] - *a2) >> 3)
        {
          uint64_t v21 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v13, &__p, a3, a4);
          if (v21) {
            goto LABEL_38;
          }
          char v14 = 1;
        }
        else
        {
          char v14 = 0;
        }
      }
      else
      {
        uint64_t v21 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v13, &__p, a3, a4);
        if (v21) {
          goto LABEL_38;
        }
        unint64_t v10 = v11;
        char v14 = 1;
        uint64_t v18 = v12;
      }
      uint64_t v12 = v18;
    }
    while (v10 < (a2[1] - *a2) >> 3);
  }
  uint64_t v21 = 0;
LABEL_38:
  if (v33) {
    *(_DWORD *)(a3 + 4) = sub_2969F8(v32);
  }
  if (__p)
  {
    BOOL v35 = (char *)__p;
    operator delete(__p);
  }
  return v21;
}

void sub_DDED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_DDEF4(uint64_t a1, int a2, int **a3, uint64_t a4, uint64_t a5)
{
  int v87 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (a4)
  {
    BOOL v84 = *(unsigned char *)a4 == 0;
    BOOL v9 = *(unsigned char *)(a4 + 3) != 0;
    BOOL v78 = *(unsigned char *)(a4 + 1) != 0;
  }
  else
  {
    BOOL v9 = 0;
    BOOL v78 = 0;
    BOOL v84 = 1;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (!v10)
  {
    unsigned int v10 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 64))(a1, *(void *)(a1 + 8), a5);
    *(_DWORD *)(a1 + 16) = v10;
  }
  if (!v84 && v78)
  {
    unsigned int v11 = (os_log_t *)sub_32A48(25);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315650;
      char v89 = "L71Device.cpp";
      __int16 v90 = 1024;
      int v91 = 274;
      __int16 v92 = 2080;
      __int16 v93 = "SetDataBlockWithOptions";
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d L71Device::%s cannot write memory asynchronously with verifyWrite enabled.", buf, 0x1Cu);
    }
    return 5;
  }
  if (a3[1] == *a3)
  {
    uint64_t v13 = 0;
    if (v9) {
      *(_DWORD *)(a4 + 4) = 0;
    }
    return v13;
  }
  if (a4 && *(unsigned char *)(a4 + 3))
  {
    uint64_t v71 = mach_absolute_time();
    unsigned int v10 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    uint64_t v71 = 0;
  }
  if (v87) {
    char v14 = 2;
  }
  else {
    char v14 = 0;
  }
  char v74 = v14;
  BOOL v72 = v9;
  if (v78) {
    int v86 = malloc_type_calloc(v10, 4uLL, 0x100004052888210uLL);
  }
  else {
    int v86 = 0;
  }
  uint64_t v16 = *a3;
  unsigned __int8 v15 = a3[1];
  BOOL v75 = a3;
  uint64_t v76 = a4;
  if (v87)
  {
    int v73 = a2;
    unint64_t v17 = 0;
  }
  else
  {
    if (v16 == v15)
    {
      unint64_t v17 = 0;
      goto LABEL_121;
    }
    int v73 = a2;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    char v19 = 0;
    do
    {
      int v20 = *v16;
      if (v19 >= v18)
      {
        uint64_t v22 = &v19[-v17];
        uint64_t v23 = (uint64_t)&v19[-v17 + 1];
        if (v23 < 0) {
          sub_60548();
        }
        if (2 * (uint64_t)&v18[-v17] > (unint64_t)v23) {
          uint64_t v23 = 2 * (void)&v18[-v17];
        }
        if ((unint64_t)&v18[-v17] >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)operator new(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        BOOL v26 = &v22[(void)v25];
        unint64_t v27 = &v22[(void)v25];
        char *v27 = v20;
        uint64_t v21 = v27 + 1;
        if (v19 != (char *)v17)
        {
          uint64_t v28 = &v19[~v17];
          do
          {
            char v29 = *--v19;
            (v28--)[(void)v25] = v29;
          }
          while (v19 != (char *)v17);
          BOOL v26 = v25;
        }
        uint64_t v18 = &v25[v24];
        if (v17) {
          operator delete((void *)v17);
        }
        unint64_t v17 = (unint64_t)v26;
      }
      else
      {
        char *v19 = v20;
        uint64_t v21 = v19 + 1;
      }
      ++v16;
      char v19 = v21;
    }
    while (v16 != v15);
    a3 = v75;
    uint64_t v16 = *v75;
    unsigned __int8 v15 = v75[1];
  }
  if (v15 == v16)
  {
LABEL_121:
    uint64_t v13 = 0;
    BOOL v62 = v72;
    goto LABEL_122;
  }
  int v30 = 0;
  unint64_t v31 = 0;
  unsigned int v32 = 0;
  unint64_t v79 = v10 >> v74;
  uint64_t v81 = a1 + 24;
  while (1)
  {
    unsigned __int8 v33 = atomic_load((unsigned __int8 *)(a1 + 40));
    if ((v33 & 1) == 0) {
      goto LABEL_121;
    }
    unsigned int v34 = *a3;
    unint64_t v35 = (unint64_t)((char *)a3[1] - (char *)*a3) >> 2;
    if (v79 >= v35 - v32) {
      uint64_t v36 = v35 - v32;
    }
    else {
      uint64_t v36 = v79;
    }
    uint64_t v37 = (unsigned __int8 *)(v17 + v31);
    int v38 = &v34[v31];
    if (v87) {
      __int16 v39 = v38;
    }
    else {
      __int16 v39 = (int *)v37;
    }
    char v83 = v39;
    if (v87) {
      CFNumberRef v40 = (unsigned int *)v38;
    }
    else {
      CFNumberRef v40 = 0;
    }
    if (v87) {
      __n128 v41 = 0;
    }
    else {
      __n128 v41 = v37;
    }
    if (!*(_DWORD *)(a1 + 16)) {
      *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 64))(a1, *(void *)(a1 + 8), a5);
    }
    unsigned int v77 = v32;
    if (!v76 || !*(unsigned char *)(v76 + 2)) {
      break;
    }
    if (v87)
    {
      if (!v36) {
        goto LABEL_118;
      }
      uint64_t v42 = 0;
      unint64_t v43 = (v30 + v35);
      if (v79 < v43) {
        unint64_t v43 = v79;
      }
      do
      {
        unsigned int v44 = *v40++;
        v42 |= v44;
        --v43;
      }
      while (v43);
    }
    else
    {
      if (!v36) {
        goto LABEL_118;
      }
      uint64_t v42 = 0;
      unint64_t v45 = (v30 + v35);
      if (v79 < v45) {
        unint64_t v45 = v79;
      }
      do
      {
        unsigned int v46 = *v41++;
        v42 |= v46;
        --v45;
      }
      while (v45);
    }
    if (v42) {
      break;
    }
LABEL_118:
    unint64_t v31 = v77 + v79;
    a3 = v75;
    v30 -= v79;
    unsigned int v32 = v77 + v79;
    if (v31 >= v75[1] - *v75) {
      goto LABEL_121;
    }
  }
  unsigned __int8 v47 = atomic_load((unsigned __int8 *)(a1 + 40));
  if ((v47 & 1) == 0) {
    goto LABEL_118;
  }
  uint64_t v48 = v32 + v73;
  unsigned int v82 = v36 << v74;
  if (v79 >= (v30 + v35)) {
    unint64_t v49 = (v30 + v35);
  }
  else {
    unint64_t v49 = v79;
  }
  int v80 = &v34[v77];
  int v50 = 5;
  char v51 = 1;
  while (2)
  {
    uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t, BOOL, uint64_t, uint64_t, void, int *, uint64_t))(*(void *)a1 + 56))(a1, *(void *)(a1 + 8), v81, v84, v48, v36, v82, v83, a5);
    if (!v13)
    {
      if (v78 && !sub_DE89C(a1, v48))
      {
        uint64_t v13 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void, _DWORD *, uint64_t))(*(void *)a1 + 48))(a1, *(void *)(a1 + 8), v81, v48, v36, v82, v86, a5);
        if (v13)
        {
          int v64 = (os_log_t *)sub_32A48(25);
          uint64_t v65 = *v64;
          if (*v64 && os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316418;
            char v89 = "L71Device.cpp";
            __int16 v90 = 1024;
            int v91 = 347;
            __int16 v92 = 2080;
            __int16 v93 = "SetDataBlockWithOptions";
            __int16 v94 = 1024;
            int v95 = v48;
            __int16 v96 = 1024;
            unsigned int v97 = v36;
            __int16 v98 = 1024;
            int v99 = v13;
            _os_log_impl(&def_1E50E8, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d L71Device::%s _GetRegister( addr=0x%x, len=%d) failed, status = %d", buf, 0x2Eu);
          }
          goto LABEL_132;
        }
        if (!v36) {
          goto LABEL_118;
        }
        uint64_t v55 = 0;
        BOOL v56 = 1;
        while (1)
        {
          if (v87)
          {
            int v57 = v80[v55];
            unsigned int v58 = v86[v55];
          }
          else
          {
            int v57 = *(unsigned __int8 *)(v17 + v77 + v55);
            unsigned int v58 = *((unsigned __int8 *)v86 + v55);
          }
          if (v57 != v58) {
            BOOL v56 = ((v58 ^ v57) & 0xFFFFFF) == 0 && (v57 & 0xFF800000) == 0x800000 && HIBYTE(v58) == 255;
          }
          if (!v56) {
            break;
          }
          if (v49 == ++v55) {
            goto LABEL_118;
          }
        }
        uint64_t v61 = *(NSObject **)sub_32A48(25);
        if (v61)
        {
          log = v61;
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136316674;
            char v89 = "L71Device.cpp";
            __int16 v90 = 1024;
            int v91 = 371;
            __int16 v92 = 2080;
            __int16 v93 = "SetDataBlockWithOptions";
            __int16 v94 = 1024;
            int v95 = v57;
            __int16 v96 = 1024;
            unsigned int v97 = v58;
            __int16 v98 = 1024;
            int v99 = v48 + v55;
            __int16 v100 = 1024;
            int v101 = v50;
            _os_log_impl(&def_1E50E8, log, OS_LOG_TYPE_ERROR, "%25s:%-5d L71Device::%s verify failed (0x%x != 0x%x), addr=0x%x. Tries remaining = %u", buf, 0x34u);
          }
        }
      }
      else if (v51)
      {
        goto LABEL_118;
      }
      uint64_t v13 = 0;
      char v51 = 0;
      goto LABEL_91;
    }
    float v52 = (os_log_t *)sub_32A48(25);
    __int16 v53 = *v52;
    if (*v52 && os_log_type_enabled(*v52, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136316674;
      char v89 = "L71Device.cpp";
      __int16 v90 = 1024;
      int v91 = 340;
      __int16 v92 = 2080;
      __int16 v93 = "SetDataBlockWithOptions";
      __int16 v94 = 1024;
      int v95 = v48;
      __int16 v96 = 1024;
      unsigned int v97 = v36;
      __int16 v98 = 1024;
      int v99 = v13;
      __int16 v100 = 1024;
      int v101 = v50 - 1;
      _os_log_impl(&def_1E50E8, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d L71Device::%s _SetRegister( addr=0x%x, len=%d) failed, status = %d. Tries remaining = %d", buf, 0x34u);
    }
LABEL_91:
    if (--v50)
    {
      unsigned __int8 v54 = atomic_load((unsigned __int8 *)(a1 + 40));
      if (v54) {
        continue;
      }
    }
    break;
  }
  if (v13)
  {
LABEL_132:
    int v66 = (os_log_t *)sub_32A48(25);
    CFNumberRef v67 = *v66;
    BOOL v62 = v72;
    if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315650;
      char v89 = "L71Device.cpp";
      __int16 v90 = 1024;
      int v91 = 381;
      __int16 v92 = 2080;
      __int16 v93 = "SetDataBlockWithOptions";
      _os_log_impl(&def_1E50E8, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d L71Device::%s Failed", buf, 0x1Cu);
    }
    goto LABEL_122;
  }
  if (v51) {
    goto LABEL_118;
  }
  CFNumberRef v68 = (os_log_t *)sub_32A48(25);
  int v69 = *v68;
  BOOL v62 = v72;
  if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315650;
    char v89 = "L71Device.cpp";
    __int16 v90 = 1024;
    int v91 = 386;
    __int16 v92 = 2080;
    __int16 v93 = "SetDataBlockWithOptions";
    _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d L71Device::%s verification failed", buf, 0x1Cu);
  }
  uint64_t v13 = 0xFFFFFFFFLL;
LABEL_122:
  if (v78) {
    free(v86);
  }
  if (v62) {
    *(_DWORD *)(v76 + 4) = sub_2969F8(v71);
  }
  if (v17) {
    operator delete((void *)v17);
  }
  return v13;
}

void sub_DE860(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_DE89C(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 5) <= a2
      && *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 5) + 4) >= a2
      || *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 4) <= a2
      && *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, 4) + 4) >= a2;
}

uint64_t sub_DE9A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "context is null");
  }
  int v5 = sub_3D42D8(a2, 1935831628, (uint64_t)v27, a3);
  if (v5 || (int v5 = sub_3D42D8(a2, 1935832908, (uint64_t)v25, a3)) != 0)
  {
    BOOL v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_21C8C(&v19, "GetPropertyRange failed, status=");
    std::to_string(&v18, v5);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v18;
    }
    else {
      unsigned int v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    uint64_t v12 = std::string::append(&v19, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(void *)&unsigned char v20[16] = *((void *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)int v20 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v9, (const std::string *)v20);
  }
  unsigned int v6 = v28;
  int v7 = v26;
  if (!v28 || v28 != v26)
  {
    unsigned __int8 v15 = (os_log_t *)sub_32A48(25);
    uint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int v20 = 136316162;
      *(void *)&uint64_t v20[4] = "L71Device.cpp";
      *(_DWORD *)&v20[14] = 51;
      *(_WORD *)&v20[18] = 2080;
      *(_WORD *)&v20[12] = 1024;
      *(void *)&v20[20] = "GetBufferSize";
      __int16 v21 = 1024;
      unsigned int v22 = v6;
      __int16 v23 = 1024;
      int v24 = v7;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d L71Device::%s ERROR: Audio driver returned invalid buffer lengths (read=%u, write=%u)", v20, 0x28u);
    }
    unint64_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v17, "Audio driver returned invalid buffer lengths");
  }
  return v28;
}

void sub_DEC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_DEC8C(int a1, uint64_t a2, NSObject **a3, uint64_t a4, int a5, int a6, size_t size, void *buffer, uint64_t a9)
{
  uint64_t v19 = 0;
  int v20 = &v19;
  uint64_t v21 = 0x2000000000;
  int v22 = -1;
  if (!a9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "context is null");
  }
  if (a6)
  {
    uint64_t v9 = a4;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 0x40000000;
    v14[2] = sub_DEE1C;
    v14[3] = &unk_620A78;
    int v15 = size;
    int v16 = a5;
    v14[6] = a2;
    v14[7] = a9;
    int v17 = a6;
    char v18 = a4;
    v14[4] = &v19;
    v14[5] = dispatch_data_create(buffer, size, 0, 0);
    unsigned int v11 = *a3;
    if (v9)
    {
      dispatch_sync(v11, v14);
      uint64_t v9 = *((unsigned int *)v20 + 6);
    }
    else
    {
      dispatch_async(v11, v14);
      *((_DWORD *)v20 + 6) = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  _Block_object_dispose(&v19, 8);
  return v9;
}

void sub_DEDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_DEE1C(uint64_t a1)
{
  size_t v11 = 0;
  buffer_ptr = 0;
  BOOL v2 = dispatch_data_create_map(*(dispatch_data_t *)(a1 + 40), (const void **)&buffer_ptr, &v11);
  if (v11 >= *(unsigned int *)(a1 + 64))
  {
    int v6 = sub_3D3C98(*(uint64_t **)(a1 + 48), 0x73627761u, 0, 0, 4, (float *)(a1 + 68), *(void *)(a1 + 56));
    if (!v6)
    {
      int v6 = sub_3D3C98(*(uint64_t **)(a1 + 48), 0x7362776Cu, 0, 0, 4, (float *)(a1 + 72), *(void *)(a1 + 56));
      if (!v6)
      {
        *(_DWORD *)int buf = 0;
        int v6 = sub_3D3C98(*(uint64_t **)(a1 + 48), 0x63616E63u, 4, (uint64_t)buf, *(unsigned int *)(a1 + 64), (float *)buffer_ptr, *(void *)(a1 + 56));
      }
    }
  }
  else
  {
    unsigned int v3 = (os_log_t *)sub_32A48(25);
    int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)int buf = 136316162;
      char v14 = "L71Device.cpp";
      __int16 v15 = 1024;
      int v16 = 75;
      __int16 v17 = 2080;
      char v18 = "SetRegister_block_invoke";
      __int16 v19 = 2048;
      *(void *)int v20 = v11;
      *(_WORD *)&v20[8] = 1024;
      v21[0] = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d L71Device::%s Invalid data buffer size (%lu != %u)", buf, 0x2Cu);
    }
    int v6 = -2;
  }
  dispatch_release(v2);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  if (v6)
  {
    int v7 = (os_log_t *)sub_32A48(25);
    uint64_t v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        int v9 = *(_DWORD *)(a1 + 68);
        int v10 = *(_DWORD *)(a1 + 72);
        *(_DWORD *)int buf = 136316418;
        char v14 = "L71Device.cpp";
        __int16 v15 = 1024;
        int v16 = 89;
        __int16 v17 = 2080;
        char v18 = "SetRegister_block_invoke";
        __int16 v19 = 1024;
        *(_DWORD *)int v20 = v9;
        *(_WORD *)&uint64_t v20[4] = 1024;
        *(_DWORD *)&v20[6] = v10;
        LOWORD(v21[0]) = 1024;
        *(_DWORD *)((char *)v21 + 2) = v6;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d L71Device::%s failed, addr=0x%x, length=0x%x, status = 0x%x", buf, 0x2Eu);
      }
    }
  }
  if (*(unsigned char *)(a1 + 76)) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
  }
}

uint64_t sub_DF084(uint64_t a1, uint64_t a2, NSObject **a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v20 = 0;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2000000000;
  int v23 = -1;
  if (!a8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "context is null");
  }
  uint64_t v8 = a5;
  if (a5)
  {
    int v10 = *a3;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 0x40000000;
    uint64_t v16[2] = sub_DF29C;
    v16[3] = &unk_620AC8;
    v16[4] = &v20;
    v16[5] = a2;
    int v17 = a4;
    int v18 = a5;
    int v19 = a6;
    v16[6] = a8;
    v16[7] = a7;
    dispatch_sync(v10, v16);
    if (*((_DWORD *)v21 + 6))
    {
      size_t v11 = (os_log_t *)sub_32A48(25);
      uint64_t v12 = *v11;
      if (*v11)
      {
        if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
        {
          int v13 = *((_DWORD *)v21 + 6);
          *(_DWORD *)int buf = 136316418;
          uint64_t v25 = "L71Device.cpp";
          __int16 v26 = 1024;
          int v27 = 128;
          __int16 v28 = 2080;
          char v29 = "GetRegister";
          __int16 v30 = 1024;
          int v31 = a4;
          __int16 v32 = 1024;
          int v33 = v8;
          __int16 v34 = 1024;
          int v35 = v13;
          _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d L71Device::%s failed, addr=0x%x, length=0x%x, status = 0x%x", buf, 0x2Eu);
        }
      }
    }
    uint64_t v8 = *((unsigned int *)v21 + 6);
  }
  _Block_object_dispose(&v20, 8);
  return v8;
}

void sub_DF270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_DF29C(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_DF328;
  v3[3] = &unk_620AA0;
  uint64_t v6 = *(void *)(a1 + 64);
  int v7 = *(_DWORD *)(a1 + 72);
  long long v1 = *(_OWORD *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = v1;
  return sub_61CCC((uint64_t)v3);
}

uint64_t sub_DF328(uint64_t a1)
{
  uint64_t result = sub_3D3C98(*(uint64_t **)(a1 + 40), 0x73627261u, 0, 0, 4, (float *)(a1 + 64), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!result)
  {
    uint64_t result = sub_3D3C98(*(uint64_t **)(a1 + 40), 0x7362726Cu, 0, 0, 4, (float *)(a1 + 68), *(void *)(a1 + 48));
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    if (!result)
    {
      int v3 = *(_DWORD *)(a1 + 72);
      int v4 = 0;
      uint64_t result = sub_3D3FC8(*(uint64_t **)(a1 + 40), 0x63616E63u, 4, (uint64_t)&v4, &v3, *(float **)(a1 + 56), *(void *)(a1 + 48));
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
    }
  }
  return result;
}

uint64_t sub_DF3EC(uint64_t result, unsigned __int8 a2)
{
  return result;
}

BOOL sub_DF3F8(uint64_t a1, int a2)
{
  return (a2 & 0xFFF00000) == 0x800000;
}

char *sub_DF408(uint64_t a1, int a2)
{
  return &aMtslgaswnepsne[8 * a2 + 48];
}

void sub_DF418(uint64_t a1)
{
  sub_633DC(a1);

  operator delete();
}

void sub_DF454(uint64_t a1)
{
  *(void *)a1 = off_620CA8;
  sub_DF4C4(*(void **)(a1 + 48));
  sub_DF518((void *)(a1 + 8));

  operator delete();
}

void sub_DF4C4(void *a1)
{
  if (a1)
  {
    sub_DF4C4(*a1);
    sub_DF4C4(a1[1]);
    sub_DF5E0((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void *sub_DF518(void *result)
{
  if (result[2])
  {
    long long v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    while (result != v1)
    {
      int v4 = (void *)result[1];
      sub_DF57C(result);
      uint64_t result = v4;
    }
  }
  return result;
}

void sub_DF57C(void *__p)
{
  uint64_t v2 = __p[2];
  __p[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete(__p);
}

void sub_DF5E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t sub_DF654(uint64_t a1)
{
  *(void *)a1 = off_620CA8;
  sub_DF4C4(*(void **)(a1 + 48));
  sub_DF518((void *)(a1 + 8));
  return a1;
}

uint64_t sub_DF6A4(uint64_t a1, void *a2)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    int v4 = (os_log_t *)sub_32A48(13);
    long long v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 262;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"routing mutex not held\"", buf, 0x12u);
      }
    }
  }
  if (((*(uint64_t (**)(void *))(*a2 + 152))(a2) & 1) == 0)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    int v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 264;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"specified port is not connected\"", buf, 0x12u);
      }
    }
  }
  memset(buf, 0, sizeof(buf));
  strcpy(v20, "cwdv");
  v20[8] = 0;
  int v21 = 3;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v22 = v23;
  CFTypeRef cf = 0;
  int v24 = 44739240;
  if (sub_E00F4(a1, (uint64_t)a2, (uint64_t)buf))
  {
    uint64_t v12 = (os_log_t *)sub_32A48(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      int v16 = "VirtualAudio_PortManager.cpp";
      __int16 v17 = 1024;
      int v18 = 270;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v15, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if ((*(unsigned int (**)(void *))(*a2 + 152))(a2))
  {
    if (!AudioObjectCreate())
    {
      uint64_t v11 = a2[11];
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
      }
      operator new();
    }
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    int v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      int v15 = 136315394;
      int v16 = "VirtualAudio_PortManager.cpp";
      __int16 v17 = 1024;
      int v18 = 284;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE (theResult): \"error creating virtual audio port object\"", (uint8_t *)&v15, 0x12u);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v23[0]);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  return 0;
}

void sub_DFF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  sub_470A4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_E00F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_3B7EC();
  __int16 v17 = &qword_64CC40;
  char v18 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 88);
  if (!v6 || (unint64_t v7 = *(void *)(a2 + 80), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    sub_5CABC();
  }
  int v9 = v8;
  unint64_t v15 = v7;
  int v16 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v10 = *(void **)(a1 + 48);
  if (!v10)
  {
LABEL_9:
    std::__shared_weak_count::__release_weak(v9);
    uint64_t v12 = 0;
    goto LABEL_10;
  }
  uint64_t v11 = a1 + 40;
  while (sub_E0404(&v15, v10 + 4))
  {
LABEL_8:
    int v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_9;
    }
  }
  if (sub_E0404(v10 + 4, &v15))
  {
    ++v10;
    goto LABEL_8;
  }
  uint64_t v12 = sub_4642C(a2, a3);
  std::__shared_weak_count::__release_weak(v9);
  if (v12)
  {
    unint64_t v15 = v7;
    int v16 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = *sub_E0490(v11, &v19, &v15);
    if (!v14) {
      sub_8251C("map::at:  key not found");
    }
    uint64_t v12 = *(unsigned int *)(*(void *)(v14 + 48) + 8);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_10:
  sub_4636C(v9);
  sub_3BCAC(&v17);
  return v12;
}

void sub_E0268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  std::__shared_weak_count::__release_weak(v12);
  sub_4636C(v12);
  sub_3BCAC(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_E0298(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *sub_E0490(a1, &v4, a2);
  if (!v2) {
    sub_8251C("map::at:  key not found");
  }
  return v2 + 48;
}

void sub_E02D8(uint64_t **a1, unint64_t *a2)
{
  uint64_t v3 = sub_E0388((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    uint64_t v4 = v3;
    long long v5 = (uint64_t *)v3[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        long long v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      unint64_t v7 = v3;
      do
      {
        uint64_t v6 = (uint64_t *)v7[2];
        BOOL v8 = *v6 == (void)v7;
        unint64_t v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3) {
      *a1 = v6;
    }
    int v9 = a1[1];
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    sub_89144(v9, v4);
    sub_DF5E0((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void *sub_E0388(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  long long v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_E0404(v3 + 4, a2);
    unint64_t v7 = v3 + 1;
    if (!v6)
    {
      unint64_t v7 = v3;
      long long v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_E0404(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

BOOL sub_E0404(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      unint64_t v6 = *a1;
    }
    else {
      unint64_t v6 = 0;
    }
  }
  else
  {
    unint64_t v6 = 0;
    long long v5 = 0;
  }
  unint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    BOOL v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      unint64_t v9 = *a2;
      sub_4636C(v8);
      if (!v5) {
        return v6 < v9;
      }
      goto LABEL_11;
    }
  }
  unint64_t v9 = 0;
  if (v5) {
LABEL_11:
  }
    sub_4636C(v5);
  return v6 < v9;
}

void *sub_E0490(uint64_t a1, void *a2, unint64_t *a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        BOOL v8 = v4 + 4;
        if (!sub_E0404(a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_E0404(v8, a3)) {
        break;
      }
      long long v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_E0524()
{
  return 1;
}

void sub_E0534(uint64_t a1, void *a2)
{
  *a2 = off_620CF8;
}

void *sub_E0554()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_620CF8;
  return result;
}

void sub_E058C()
{
}

void sub_E05A4(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v7 = (os_log_t *)sub_32A48(13);
    BOOL v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "VirtualAudio_PortManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 404;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"handed empty port list\"", (uint8_t *)__p, 0x12u);
      }
    }
  }
  if (!a2)
  {
    unint64_t v9 = (os_log_t *)sub_32A48(13);
    int v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = "VirtualAudio_PortManager.cpp";
        WORD2(__p[1]) = 1024;
        *(_DWORD *)((char *)&__p[1] + 6) = 405;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"handed NULL client data\"", (uint8_t *)__p, 0x12u);
      }
    }
  }
  unint64_t v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  sub_3B7EC();
  int v13 = &qword_64CC40;
  char v14 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  sub_DBD60(&v11, a1, "", 421);
  uint64_t v4 = v12;
  if (v12 == &v11)
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v4[2] + 152))(v4[2]))
      {
        memset(__p, 0, sizeof(__p));
        strcpy(v19, "cwdv");
        v19[8] = 0;
        int v20 = 3;
        v22[0] = 0;
        v22[1] = 0;
        int v21 = v22;
        CFTypeRef cf = 0;
        int v23 = 44739240;
        if (sub_E00F4(a2, v4[2], (uint64_t)__p)) {
          unsigned int v6 = 0;
        }
        else {
          unsigned int v6 = sub_DF6A4(a2, (void *)v4[2]);
        }
        if (cf) {
          CFRelease(cf);
        }
        sub_463E0(v22[0]);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      else
      {
        unsigned int v6 = sub_E0A8C(a2, v4[2], &v15);
      }
      v5 |= v6 != 0;
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4 != &v11);
  }
  sub_B8E4(&v11);
  if (v16 != v15)
  {
    sub_298DA4();
    operator new();
  }
  sub_3BCAC(&v13);
  __p[0] = &v15;
  sub_E1328((void ***)__p);
  if (v5)
  {
    sub_3B7EC();
    if ((*(unsigned int (**)(uint64_t *))(qword_64CC40 + 48))(&qword_64CC40)) {
      operator new();
    }
    unint64_t v15 = 0;
    strcpy((char *)__p, "strpbolg");
    BYTE1(__p[1]) = 0;
    WORD1(__p[1]) = 0;
    (*(void (**)(void, uint64_t, void **, uint64_t))(**(void **)(a2 + 32) + 72))(*(void *)(a2 + 32), 1, __p, 1);
  }
}

void sub_E09D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_E13D0((unsigned char **)va);
  _Unwind_Resume(a1);
}

NSObject *sub_E0A8C(uint64_t a1, uint64_t a2, char **a3)
{
  sub_3B7EC();
  if (((*(uint64_t (**)(void))(qword_64CC40 + 48))() & 1) == 0)
  {
    unsigned int v6 = (os_log_t *)sub_32A48(13);
    unint64_t v7 = *v6;
    if (*v6)
    {
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
        __int16 v57 = 1024;
        int v58 = 336;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"routing mutex not held\"", buf, 0x12u);
      }
    }
  }
  sub_E18E0(&v54, (uint64_t *)(a2 + 80));
  BOOL v8 = sub_E0388(a1 + 40, &v54);
  if ((void *)(a1 + 48) == v8)
  {
    uint64_t v12 = (os_log_t *)sub_32A48(3);
    int v13 = *v12;
    if (*v12)
    {
      if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
        __int16 v57 = 1024;
        int v58 = 345;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d could not find virtual audio port for specified port", buf, 0x12u);
      }
      int v13 = 0;
    }
  }
  else
  {
    unint64_t v9 = (void *)v8[6];
    v8[6] = 0;
    unsigned int v53 = *((_DWORD *)v9 + 2);
    sub_E02D8((uint64_t **)(a1 + 40), &v54);
    if (sub_20ACA4())
    {
      int v10 = (uint64_t *)(a1 + 8);
      uint64_t v11 = *(uint64_t **)(a1 + 16);
      if (v11 != (uint64_t *)(a1 + 8))
      {
        while (*(_DWORD *)(v11[2] + 8) != v53)
        {
          uint64_t v11 = (uint64_t *)v11[1];
          if (v11 == v10) {
            goto LABEL_17;
          }
        }
        if (v11 != v10)
        {
          uint64_t v14 = *v11;
          *(void *)(v14 + 8) = v11[1];
          *(void *)v11[1] = v14;
          --*(void *)(a1 + 24);
          sub_DF57C(v11);
        }
      }
    }
LABEL_17:
    (*(void (**)(void *))(*v9 + 104))(v9);
    sub_3B7EC();
    sub_523D8(buf, (uint64_t)&qword_64CC40);
    int v15 = AudioObjectsPublishedAndDied();
    sub_52380(buf);
    if (v15)
    {
      int v16 = (os_log_t *)sub_32A48(13);
      uint64_t v17 = *v16;
      if (*v16)
      {
        if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
          __int16 v57 = 1024;
          int v58 = 379;
          _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE (theResult): \"got an error telling the HAL that a port went away\"", buf, 0x12u);
        }
      }
    }
    (*(void (**)(void **__return_ptr, void *))(*v9 + 96))(v51, v9);
    uint64_t v18 = sub_32A48(3);
    uint64_t v19 = sub_32A48(15);
    char v20 = 0;
    uint64_t v21 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&buf[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1;
      if (v24)
      {
        if ((v22 & 1) == 0) {
          goto LABEL_40;
        }
        goto LABEL_29;
      }
    }
    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
    if (*(void *)(v18 + 8))
    {
LABEL_29:
      uint64_t v25 = *(NSObject **)v18;
      if (*(void *)v18 && os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
      {
        __int16 v26 = (std::__shared_weak_count *)v9[12];
        v48[0] = v9[11];
        v48[1] = v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_D98B8(__p, (uint64_t)v48);
        if (v50 >= 0) {
          int v27 = __p;
        }
        else {
          int v27 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
        __int16 v57 = 1024;
        int v58 = 385;
        __int16 v59 = 2048;
        int v60 = (void **)v9;
        __int16 v61 = 2080;
        BOOL v62 = v27;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEBUG, "%25s:%-5d Queueing VirtualAudio_Port %p (%s) for deletion.", buf, 0x26u);
        if (v50 < 0) {
          operator delete(__p[0]);
        }
        if (v26) {
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
LABEL_40:
    char v29 = a3[1];
    unint64_t v28 = (unint64_t)a3[2];
    if ((unint64_t)v29 >= v28)
    {
      __int16 v32 = *a3;
      uint64_t v33 = (v29 - *a3) >> 3;
      unint64_t v34 = v33 + 1;
      if ((unint64_t)(v33 + 1) >> 61) {
        sub_60548();
      }
      uint64_t v35 = v28 - (void)v32;
      if (v35 >> 2 > v34) {
        unint64_t v34 = v35 >> 2;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v34;
      }
      if (v36)
      {
        if (v36 >> 61) {
          sub_60560();
        }
        uint64_t v37 = (char *)operator new(8 * v36);
      }
      else
      {
        uint64_t v37 = 0;
      }
      int v38 = &v37[8 * v33];
      __int16 v39 = &v37[8 * v36];
      *(void *)int v38 = v9;
      int v31 = v38 + 8;
      if (v29 == v32)
      {
        *a3 = v38;
        a3[1] = v31;
        a3[2] = v39;
      }
      else
      {
        do
        {
          uint64_t v40 = *((void *)v29 - 1);
          v29 -= 8;
          *(void *)char v29 = 0;
          *((void *)v38 - 1) = v40;
          v38 -= 8;
        }
        while (v29 != v32);
        char v29 = *a3;
        __n128 v41 = a3[1];
        *a3 = v38;
        a3[1] = v31;
        a3[2] = v39;
        while (v41 != v29)
        {
          uint64_t v43 = *((void *)v41 - 1);
          v41 -= 8;
          uint64_t v42 = v43;
          *(void *)__n128 v41 = 0;
          if (v43) {
            (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
          }
        }
      }
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      *(void *)char v29 = v9;
      __int16 v30 = v29 + 8;
      a3[1] = v30;
      int v31 = v30;
    }
    a3[1] = v31;
    if (v15) {
      int v13 = 0;
    }
    else {
      int v13 = v53;
    }
    unsigned int v44 = (os_log_t *)sub_32A48(3);
    unint64_t v45 = *v44;
    if (*v44 && os_log_type_enabled(*v44, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v46 = v51;
      if (v52 < 0) {
        unsigned int v46 = (void **)v51[0];
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_PortManager.cpp";
      __int16 v57 = 1024;
      int v58 = 396;
      __int16 v59 = 2080;
      int v60 = v46;
      _os_log_impl(&def_1E50E8, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Queued for deletion and unpublished port: %s.", buf, 0x1Cu);
    }
    if (v52 < 0) {
      operator delete(v51[0]);
    }
  }
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  return v13;
}

void sub_E10CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24)
{
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_E11A4(uint64_t a1, __n128 *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = off_620CC8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 16) = *a2;
  *(void *)(a1 + 32) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16))
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        unint64_t v7 = "VirtualAudio_PortManager.cpp";
        __int16 v8 = 1024;
        int v9 = 48;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return result;
}

void sub_E12F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  a11 = a10;
  sub_E1328(&a11);
  _Unwind_Resume(a1);
}

void sub_E1328(void ***a1)
{
  long long v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    char v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned char *sub_E13D0(unsigned char **a1)
{
  __n128 result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_AF1B0(result);
    operator delete();
  }
  return result;
}

void sub_E1420(uint64_t a1)
{
  memset(&v9, 0, sizeof(v9));
  std::string::append(&v9, "{ ", 2uLL);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != *(void *)(a1 + 24))
  {
    (*(void (**)(std::string *__return_ptr))(**(void **)v2 + 96))(&v10);
    uint64_t v3 = std::string::insert(&v10, 0, "'", 1uLL);
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    char v5 = std::string::append(&v11, "'", 1uLL);
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v13 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (v13 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if (v13 >= 0) {
      std::string::size_type v8 = HIBYTE(v13);
    }
    else {
      std::string::size_type v8 = (std::string::size_type)__p[1];
    }
    std::string::append(&v9, (const std::string::value_type *)v7, v8);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    v2 += 8;
    if (v2 == *(void *)(a1 + 24)) {
      break;
    }
    std::string::append(&v9, ", ", 2uLL);
  }
  std::string::append(&v9, " }", 2uLL);
  std::operator+<char>();
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_E15CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_E163C@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_3B7EC();
  if ((*(unsigned int (**)(void))(qword_64CC40 + 48))()) {
    operator new();
  }
  uint64_t v3 = *(uint64_t **)(a1 + 16);
  for (uint64_t i = *(uint64_t **)(a1 + 24); v3 != i; ++v3)
  {
    uint64_t v5 = sub_32A48(3);
    if (*(unsigned char *)(v5 + 8))
    {
      long long v6 = *(NSObject **)v5;
      if (*(void *)v5)
      {
        if (os_log_type_enabled(*(os_log_t *)v5, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v7 = *v3;
          *(_DWORD *)int buf = 136315650;
          std::string v11 = "VirtualAudio_PortManager.cpp";
          __int16 v12 = 1024;
          int v13 = 59;
          __int16 v14 = 2048;
          uint64_t v15 = v7;
          _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Destroying HP object at address %p.", buf, 0x1Cu);
        }
      }
    }
    sub_3A8A8();
    sub_32EA50(v3);
  }
  return sub_12053C(a2, 1920099684);
}

void sub_E180C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_E13D0((unsigned char **)va);
  _Unwind_Resume(a1);
}

void sub_E1848(uint64_t a1)
{
  long long v1 = (void **)(a1 + 16);
  sub_E1328(&v1);

  operator delete();
}

uint64_t sub_E18A4(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  sub_E1328(&v3);
  return a1;
}

void sub_E18E0(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = *a2;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *a1 = v6;
      a1[1] = v5;
      sub_4636C(v5);
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
  }
}

uint64_t sub_E194C(uint64_t a1, uint64_t a2)
{
  sub_3B7EC();
  int v13 = &qword_64CC40;
  char v14 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  long long v4 = *(void **)(a1 + 40);
  uint64_t v5 = (void *)(a1 + 48);
  if (v4 == (void *)(a1 + 48))
  {
    uint64_t v6 = 0;
  }
  else
  {
    LODWORD(v6) = 0;
    do
    {
      sub_549A4(&v17, v4 + 4, "", 195);
      uint64_t v7 = v17;
      sub_469A0((uint64_t)__p, a2);
      int v8 = sub_4642C(v7, (uint64_t)__p);
      if (cf) {
        CFRelease(cf);
      }
      sub_463E0((void *)__p[7]);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v18) {
        sub_4636C(v18);
      }
      std::string v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          std::string v10 = v9;
          std::string v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          std::string v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          long long v4 = v10;
        }
        while (!v11);
      }
      uint64_t v6 = (v6 + v8);
      long long v4 = v10;
    }
    while (v10 != v5);
  }
  sub_3BCAC(&v13);
  return v6;
}

void sub_E1A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,CFTypeRef cf)
{
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 56);
  if (v24) {
    sub_4636C(v24);
  }
  sub_3BCAC(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_E1AEC(uint64_t a1)
{
  sub_3B7EC();
  uint64_t v5 = &qword_64CC40;
  char v6 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  if (*(void *)(a1 + 24) && (uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 16)) != 0) {
    uint64_t v3 = *(unsigned int *)(v2 + 8);
  }
  else {
    uint64_t v3 = 0;
  }
  sub_3BCAC(&v5);
  return v3;
}

uint64_t sub_E1B78(uint64_t a1, int a2)
{
  sub_3B7EC();
  int v16 = &qword_64CC40;
  char v17 = (*(uint64_t (**)(uint64_t *))(qword_64CC40 + 16))(&qword_64CC40);
  long long v4 = *(void **)(a1 + 40);
  uint64_t v5 = (void *)(a1 + 48);
  if (v4 != (void *)(a1 + 48))
  {
    while (1)
    {
      uint64_t v6 = v4[6];
      if (!v6)
      {
        int v13 = (os_log_t *)sub_32A48(13);
        char v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          uint64_t v19 = "VirtualAudio_PortManager.cpp";
          __int16 v20 = 1024;
          int v21 = 248;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
      if (*(_DWORD *)(v6 + 8) == a2) {
        break;
      }
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
      if (v8 == v5) {
        goto LABEL_15;
      }
    }
  }
  if (v4 == v5 || (uint64_t v10 = v4[5]) == 0 || *(void *)(v10 + 8) == -1) {
LABEL_15:
  }
    uint64_t v11 = 0;
  else {
    uint64_t v11 = v4[6];
  }
  sub_3BCAC(&v16);
  return v11;
}

void sub_E1D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  __cxa_free_exception(v9);
  sub_3BCAC(&a9);
  _Unwind_Resume(a1);
}

double sub_E1D68(double a1, double a2)
{
  double v2 = 44100.0;
  if (a1 > 44100.0 || a2 < 44100.0)
  {
    double v2 = 48000.0;
    if (a1 > 48000.0 || a2 < 48000.0)
    {
      double v2 = 96000.0;
      if (a1 > 96000.0 || a2 < 96000.0)
      {
        double v2 = 88200.0;
        if (a1 > 88200.0 || a2 < 88200.0)
        {
          double v2 = 64000.0;
          if (a1 > 64000.0 || a2 < 64000.0)
          {
            double v2 = 32000.0;
            if (a1 > 32000.0 || a2 < 32000.0)
            {
              double v2 = 24000.0;
              if (a1 > 24000.0 || a2 < 24000.0)
              {
                double v2 = 22050.0;
                if (a1 > 22050.0 || a2 < 22050.0)
                {
                  double v2 = 16000.0;
                  if (a1 > 16000.0 || a2 < 16000.0)
                  {
                    double v2 = 12000.0;
                    if (a1 > 12000.0 || a2 < 12000.0)
                    {
                      double v2 = 11025.0;
                      if (a1 > 11025.0 || a2 < 11025.0)
                      {
                        double v2 = 8000.0;
                        if (a2 < 8000.0 || a1 > 8000.0) {
                          return a2;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

void sub_E1EB8(uint64_t a1, unsigned int **a2, int a3)
{
}

void *sub_E1EC0@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (a2 == 1886216809)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 504) + 24);
    if (!v3)
    {
      uint64_t v11 = (os_log_t *)sub_32A48(13);
      __int16 v12 = *v11;
      if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
      {
        __int32 v14 = 136315394;
        uint64_t v15 = "Device_DigitalMic_Aspen.cpp";
        __int16 v16 = 1024;
        int v17 = 231;
        _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [mTransducerDatabase.mBuiltInMicDefaultSubPort is NULL]: \"No default sub-port specified for built-in mic.\"", (uint8_t *)&v14, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "No default sub-port specified for built-in mic.");
    }
    long long v4 = *(__int32 **)(v3 + 32);
    uint64_t v5 = *(__int32 **)(v3 + 40);
    if ((unint64_t)((char *)v5 - (char *)v4) >= 0x41 && v4 != v5)
    {
      uint64_t v7 = v4;
      while (v7[8] != 1869442665)
      {
        v7 += 16;
        if (v7 == v5) {
          goto LABEL_15;
        }
      }
      long long v4 = v7;
    }
LABEL_15:
    __int32 v14 = *v4;
    return sub_72300(a3, &v14, 1);
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 496);
    return sub_3921D0(a3, v9, a2);
  }
}

void sub_E2070(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_E208C(uint64_t a1, unsigned int a2)
{
  if (a2 != 1886216809)
  {
    uint64_t v3 = (os_log_t *)sub_32A48(17);
    long long v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      int v13 = "Device_DigitalMic_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 214;
      __int16 v16 = 2080;
      int v17 = v5;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      int v13 = "Device_DigitalMic_Aspen.cpp";
      __int16 v14 = 1024;
      int v15 = 215;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType.\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType.");
  }
  return 0;
}

void sub_E2244(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_E2260(os_unfair_lock_s *a1)
{
  double v2 = (os_log_t *)sub_32A48(17);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315394;
    buf_4 = "Device_DigitalMic_Aspen.cpp";
    __int16 v10 = 1024;
    *(_DWORD *)char v11 = 159;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d initializing Device_HAL_Common", (uint8_t *)&buf, 0x12u);
  }
  sub_42E5FC(a1);
  long long v4 = (os_log_t *)sub_32A48(17);
  uint64_t v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEBUG))
  {
    int buf = 136315650;
    buf_4 = "Device_DigitalMic_Aspen.cpp";
    __int16 v10 = 1024;
    *(_DWORD *)char v11 = 163;
    *(_WORD *)&v11[4] = 1024;
    *(_DWORD *)&v11[6] = 1;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d initialized Device_HAL_Common: %u", (uint8_t *)&buf, 0x18u);
  }
  uint64_t v6 = (os_log_t *)sub_32A48(17);
  uint64_t v7 = *v6;
  if (*v6)
  {
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
    {
      int buf = 136315394;
      buf_4 = "Device_DigitalMic_Aspen.cpp";
      __int16 v10 = 1024;
      *(_DWORD *)char v11 = 167;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d creating controls and ports", (uint8_t *)&buf, 0x12u);
    }
  }
  operator new();
}

void sub_E2840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  sub_E2A90((uint64_t)va);
  sub_E2A54((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_E2930(uint64_t a1)
{
  int v7 = 0;
  double v2 = (const void *)MGCopyAnswerWithError();
  uint64_t v3 = v2;
  CFTypeRef v6 = v2;
  if (v2)
  {
    CFTypeID v4 = CFGetTypeID(v2);
    if (v4 == CFStringGetTypeID())
    {
      sub_E2B68(&v5, &v6);
      *(void *)a1 = v5;
      *(unsigned char *)(a1 + 8) = 1;
    }
    else
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 8) = 0;
    }
    CFRelease(v3);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
}

uint64_t sub_E29F8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    CFTypeID v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
  }
  uint64_t v5 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    CFRetain(v5);
  }
  return a1;
}

uint64_t sub_E2A54(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    double v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t sub_E2A90(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    double v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t sub_E2AD0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_E2AF4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_627CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_E2B48(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_627CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *sub_E2B68(void *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      sub_66F3C(exception);
    }
    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
  }
  else
  {
    CFTypeRef v5 = 0;
  }

  return sub_14E44(a1, v5);
}

void sub_E2C10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_E2C2C(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4, UInt32 *a5, float *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v12 = (os_log_t *)sub_32A48(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v24);
      __int16 v14 = v27 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      char v29 = "Device_DigitalMic_Aspen.cpp";
      __int16 v30 = 1024;
      int v31 = 137;
      __int16 v32 = 2080;
      uint64_t v33 = (const char *)v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    __int16 v16 = (os_log_t *)sub_32A48(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v24);
      uint64_t v18 = v27 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      char v29 = "Device_DigitalMic_Aspen.cpp";
      __int16 v30 = 1024;
      int v31 = 138;
      __int16 v32 = 2080;
      uint64_t v33 = (const char *)v18;
      __int16 v34 = 1024;
      LODWORD(v35[0]) = a3;
      WORD2(v35[0]) = 2048;
      *(void *)((char *)v35 + 6) = a4;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = &off_6414D8;
    v19[2] = 561211770;
  }
  if (!a6)
  {
    __int16 v20 = (os_log_t *)sub_32A48(13);
    int v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v24);
      uint64_t v22 = v27 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315906;
      char v29 = "Device_DigitalMic_Aspen.cpp";
      __int16 v30 = 1024;
      int v31 = 139;
      __int16 v32 = 2080;
      uint64_t v33 = "outData";
      __int16 v34 = 2080;
      v35[0] = v22;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v23 = &off_6414D8;
    void v23[2] = 561211770;
  }
  if (a2->mSelector == 1668049764)
  {
    sub_437550(a1, a5, a6);
  }
  else
  {
    sub_432AE8(a1, a2, a3, a4, a5, a6);
  }
}

uint64_t sub_E30B0(uint64_t a1, const AudioObjectPropertyAddress *a2, UInt32 a3, const void *a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
      char v11 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v22 = "Device_DigitalMic_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 115;
      __int16 v25 = 2080;
      __int16 v26 = v11;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v13 = (os_log_t *)sub_32A48(13);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = *(void *)&a2->mSelector;
      AudioObjectPropertyElement mElement = a2->mElement;
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v17);
      int v15 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      uint64_t v22 = "Device_DigitalMic_Aspen.cpp";
      __int16 v23 = 1024;
      int v24 = 116;
      __int16 v25 = 2080;
      __int16 v26 = v15;
      __int16 v27 = 1024;
      UInt32 v28 = a3;
      __int16 v29 = 2048;
      __int16 v30 = a4;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v16 = &off_6414D8;
    uint64_t v16[2] = 561211770;
  }
  if (a2->mSelector == 1668049764) {
    return 4;
  }

  return sub_433254(a1, a2, a3, a4);
}

BOOL sub_E33E4(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  return a2->mSelector != 1668049764 && sub_43356C(a1, a2);
}

BOOL sub_E3404(uint64_t a1, const AudioObjectPropertyAddress *a2)
{
  if (a2->mSelector == 1668049764) {
    return 1;
  }
  sub_50848((std::mutex *)a1);
  return AudioObjectHasProperty(*(_DWORD *)(a1 + 268), a2) != 0;
}

void sub_E345C(void *a1)
{
  sub_E3494(a1);

  operator delete();
}

uint64_t sub_E3494(void *a1)
{
  *a1 = off_620D40;
  uint64_t v2 = a1[62];
  a1[62] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_43456C((uint64_t)a1);
}

void sub_E3518(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_433710(a1, a2, a3, a3, 0) = off_620D40;
  uint64_t v3 = v4;
  v4[0] = 0;
  v5[0] = 0;
  v5[1] = 0;
  v4[1] = 0;
  v4[2] = v5;
  sub_38DB90((uint64_t *)&v3, 0x706D6269u, 1768778083);
  sub_38DB90((uint64_t *)&v3, 0x706D6269u, 1768778033);
  sub_38DD5C((uint64_t)&v3, 0x696D6963u, 1886216809);
  sub_38DD5C((uint64_t)&v3, 0x696D6931u, 1886216809);
  sub_38DD5C((uint64_t)&v3, 0x736D6963u, 1886216809);
  sub_38DD5C((uint64_t)&v3, 0x696D6932u, 1886216809);
  sub_38DD5C((uint64_t)&v3, 0x6C6D6963u, 1886216809);
  sub_38DD5C((uint64_t)&v3, 0x666D6963u, 1886216809);
  sub_38DD5C((uint64_t)&v3, 0x6265616Du, 1886216809);
  operator new();
}

void sub_E3744(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 496);
  *(void *)(v1 + 496) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_43456C(v1);
  _Unwind_Resume(a1);
}

void sub_E37C8()
{
  v0[0] = 0;
  v0[4] = 0;
  v0[8] = 0;
  v0[12] = 0;
  sub_20A0D0();
  char v2 = 1;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)CFTypeID v4 = 0u;
  long long v5 = 0u;
  sub_6CBEC();
  uint64_t v8 = 0x101010101010000;
  __int16 v9 = 0;
  int v10 = 16777473;
  v12[0] = 0;
  v12[1] = 0;
  char v11 = v12;
  __int16 v13 = 0;
  char v14 = 0;
  int v15 = -1044381696;
  char v16 = 1;
  int v17 = -1044381696;
  char v18 = 1;
  int v19 = 0;
  char v20 = 1;
  int v21 = -1056964608;
  char v22 = 1;
  int v23 = -1033371648;
  char v24 = 1;
  int v25 = 0;
  char v26 = 1;
  int v27 = -1033371648;
  char v28 = 1;
  int v29 = 0;
  char v30 = 1;
  int v31 = -1044381696;
  char v32 = 1;
  int v33 = 0;
  char v34 = 1;
  int v35 = -1033371648;
  char v36 = 1;
  int v37 = 0;
  char v38 = 1;
  int v39 = -1033371648;
  char v40 = 1;
  int v41 = -1055916032;
  char v42 = 1;
  int v43 = -1033371648;
  char v44 = 1;
  int v45 = 0;
  char v46 = 1;
  int v47 = -1055916032;
  char v48 = 1;
  int v49 = -1033371648;
  char v50 = 1;
  int v51 = -1055916032;
  char v52 = 1;
  int v53 = -1033371648;
  char v54 = 1;
  int v55 = 0;
  char v56 = 1;
  int v57 = -1055916032;
  char v58 = 1;
  int v59 = -1043333120;
  char v60 = 1;
  int v61 = 0x40000000;
  char v62 = 1;
  int v63 = 16777472;
  int v64 = 0;
  char v65 = 1;
  int v66 = 0;
  char v67 = 1;
  int v68 = 1103626240;
  char v69 = 1;
  int v70 = 0;
  char v71 = 1;
  int v72 = 1094713344;
  char v73 = 1;
  int v74 = 1094713344;
  char v75 = 1;
  int v76 = 1094713344;
  char v77 = 1;
  int v78 = -1061158912;
  char v79 = 1;
  int v80 = 1107296256;
  char v81 = 1;
  int v82 = 1107296256;
  char v83 = 1;
  int v84 = 1092616192;
  char v85 = 1;
  int v86 = 0;
  char v87 = 1;
  int v88 = 0;
  char v89 = 1;
  int v90 = 16777472;
  v91[0] = 0;
  v91[72] = 0;
  v91[80] = 0;
  v91[120] = 0;
  v91[128] = 0;
  v91[200] = 0;
  v91[208] = 0;
  v91[248] = 0;
  v91[256] = 0;
  v91[260] = 0;
  v91[264] = 0;
  v91[268] = 0;
  LOBYTE(v92) = 0;
  char v93 = 0;
  char v94 = 0;
  char v95 = 0;
  char v96 = 0;
  char v97 = 0;
  LOBYTE(v98) = 0;
  char v99 = 0;
  LOBYTE(v100) = 0;
  char v101 = 0;
  LOBYTE(v102) = 0;
  char v103 = 0;
  LOBYTE(v104) = 0;
  char v105 = 0;
  LOBYTE(v106) = 0;
  char v107 = 0;
  char v108 = 0;
  char v109 = 0;
  LOBYTE(v110) = 0;
  char v111 = 0;
  char v112 = 0;
  char v113 = 0;
  char v114 = 0;
  char v115 = 0;
  char v116 = 0;
  char v117 = 0;
  char v118 = 0;
  char v119 = 0;
  char v120 = 0;
  char v121 = 0;
  char v122 = 1;
  char v123 = 0;
  char v124 = 0;
  LOBYTE(v125) = 0;
  char v126 = 0;
  char v127 = 0;
  char v128 = 0;
  char v129 = 0;
  char v130 = 0;
  char v131 = 0;
  char v132 = 0;
  __int16 v133 = 0;
  char v134 = 0;
  char v135 = 0;
  char v136 = 0;
  char v137 = 0;
  char v138 = 0;
  char v139 = 0;
  char v140 = 0;
  char v141 = 0;
  char v142 = 0;
  char v143 = 0;
  LOBYTE(v144) = 0;
  char v145 = 0;
  LOBYTE(v146) = 0;
  char v147 = 0;
  char v148 = 0;
  char v149 = 0;
  char v150 = 0;
  char v151 = 0;
  char v152 = 0;
  char v153 = 0;
  LOBYTE(v154) = 0;
  char v155 = 0;
  LOBYTE(__p) = 0;
  char v158 = 0;
  char v159 = 0;
  char v160 = 0;
  char v161 = 0;
  char v162 = 0;
  char v163 = 0;
  char v164 = 0;
  int v165 = 256;
  char v166 = 0;
  char v167 = 0;
  char v168 = 0;
  char v169 = 0;
  char v170 = 0;
  char v171 = 0;
  __int16 v172 = 0;
  int v6 = 16843009;
  __int16 v7 = 257;
  int v1 = 4;
  *(void *)&long long __src = 0x300000002;
  sub_8732C((char *)&v4[1], (char *)&__src, (uint64_t)&__src + 8, 2uLL);
  LODWORD(__src) = 4;
  sub_8732C((char *)v3, (char *)&__src, (uint64_t)&__src + 4, 1uLL);
  int v88 = 1090519040;
  char v89 = 1;
  int v84 = 1077936128;
  char v85 = 1;
  HIWORD(v63) = 257;
  int v146 = 39;
  char v147 = 1;
  int v125 = 36;
  char v126 = 1;
  int v144 = 14;
  char v145 = 1;
  int v98 = 7;
  char v99 = 1;
  int v100 = 25;
  char v101 = 1;
  int v102 = 32;
  char v103 = 1;
  int v104 = 7;
  char v105 = 1;
  int v106 = 5;
  char v107 = 1;
  int v110 = 5;
  char v111 = 1;
  if (!v155) {
    char v155 = 1;
  }
  int v154 = 2;
  if (!v93) {
    char v93 = 1;
  }
  int v92 = 2;
  sub_208140(&__src, 125);
  if (v158)
  {
    if (SHIBYTE(v157) < 0) {
      operator delete((void *)__p);
    }
    long long __p = __src;
    uint64_t v157 = v174;
  }
  else
  {
    long long __p = __src;
    uint64_t v157 = v174;
    char v158 = 1;
  }
  sub_2A8EDC(v0);
  sub_6C690((uint64_t)v91);
  sub_463E0(v12[0]);
  if (v4[1])
  {
    *(void **)&long long v5 = v4[1];
    operator delete(v4[1]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
}

void sub_E3D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_E3D3C(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ ", 2uLL);
  std::string::append(a1, "Volume Properties: ", 0x13uLL);
  sub_E3E20(&__p, a2 + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_E3DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_E3E20(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ ", 2uLL);
  if (*(unsigned char *)(a2 + 4))
  {
    std::string::append(a1, "Min: ", 5uLL);
    if (!*(unsigned char *)(a2 + 4)) {
      sub_7F218();
    }
    std::to_string(&v15, *(float *)a2);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFTypeID v4 = &v15;
    }
    else {
      CFTypeID v4 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v15.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v4, size);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a2 + 12))
  {
    std::string::append(a1, "; Max: ", 7uLL);
    if (!*(unsigned char *)(a2 + 12)) {
      sub_7F218();
    }
    std::to_string(&v15, *(float *)(a2 + 8));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v6 = &v15;
    }
    else {
      int v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v7 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v7 = v15.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v6, v7);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a2 + 20))
  {
    std::string::append(a1, "; Default: ", 0xBuLL);
    if (!*(unsigned char *)(a2 + 20)) {
      sub_7F218();
    }
    std::to_string(&v15, *(float *)(a2 + 16));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &v15;
    }
    else {
      uint64_t v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = v15.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a2 + 32))
  {
    std::string::append(a1, "; Ext: ", 7uLL);
    if (!*(unsigned char *)(a2 + 32)) {
      sub_7F218();
    }
    sub_375244(&v15, *(unsigned int **)(a2 + 24));
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v10 = &v15;
    }
    else {
      int v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v11 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v11 = v15.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v10, v11);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  if (*(unsigned char *)(a2 + 44))
  {
    std::string::append(a1, "Curve: ", 7uLL);
    if (*(unsigned char *)(a2 + 44)) {
      std::to_string(&v15, *(_DWORD *)(a2 + 40));
    }
    else {
      sub_21C8C(&v15, "no value assigned");
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v15;
    }
    else {
      uint64_t v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v13 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v13 = v15.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_E40A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_E4100(uint64_t a1, uint64_t a2)
{
  return sub_E410C(a1 + 72, a2 + 72);
}

BOOL sub_E410C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v2 = *(unsigned char *)(a2 + 24) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*(unsigned char *)(a1 + 24) != 0) == (*(unsigned char *)(a2 + 24) != 0);
  }
  CFTypeID v4 = *(const void **)a1;
  size_t v6 = *(void *)(a1 + 8) - (void)v4;
  std::string::size_type v7 = *(const void **)a2;
  return v6 == *(void *)(a2 + 8) - (void)v7 && memcmp(v4, v7, v6) == 0;
}

std::string *sub_E417C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  sub_E3D3C(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, "; DSP ChainConfig: ", 0x13uLL);
  if (*(unsigned char *)(a1 + 96)) {
    sub_379210(&__p, (uint64_t **)(a1 + 72));
  }
  else {
    sub_21C8C(&__p, "no value assigned");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v6 = &__p;
  }
  else {
    size_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return std::string::append(a2, " ]", 2uLL);
}

void sub_E4290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_E42D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    BOOL v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }
  }

  operator delete();
}

uint64_t sub_E432C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    BOOL v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t *sub_E4368(uint64_t a1, uint64_t a2)
{
  __n128 result = (uint64_t *)sub_E410C(a1 + 72, a2 + 72);
  if (result)
  {
    if (*(unsigned char *)(a1 + 144)) {
      BOOL v5 = *(unsigned char *)(a2 + 144) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      return (uint64_t *)((*(unsigned char *)(a1 + 144) != 0) == (*(unsigned char *)(a2 + 144) != 0));
    }
    else
    {
      return sub_E43EC(a1 + 104, (void *)(a2 + 104));
    }
  }
  return result;
}

uint64_t *sub_E43EC(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(a1 + 16);
  while (1)
  {
    uint64_t v3 = (uint64_t *)*v3;
    __n128 result = (uint64_t *)(v3 == 0);
    if (!v3) {
      break;
    }
    int v5 = *((_DWORD *)v3 + 4);
    __n128 result = sub_D7374(a2, v5);
    if (!result) {
      break;
    }
    if (v5 != *((_DWORD *)result + 4) || (sub_384B48((uint64_t)(v3 + 3), (int *)result + 6) & 1) == 0) {
      return 0;
    }
  }
  return result;
}

std::string *sub_E4470@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a2, "[ ", 2uLL);
  sub_E3D3C(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, "; ", 2uLL);
  if (*(unsigned char *)(a1 + 96)) {
    sub_379210(&__p, (uint64_t **)(a1 + 72));
  }
  else {
    sub_21C8C(&__p, "no value assigned");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v6 = &__p;
  }
  else {
    size_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, "; ", 2uLL);
  return std::string::append(a2, " ]", 2uLL);
}

void sub_E4598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_E45D8(uint64_t a1)
{
  sub_E4610(a1);

  operator delete();
}

uint64_t sub_E4610(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144)) {
    sub_D7EC0(a1 + 104);
  }
  if (*(unsigned char *)(a1 + 96))
  {
    BOOL v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t sub_E4660(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    sub_E46E0((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_E46BC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_E46E0(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    __n128 result = sub_66F48(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_E4740(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_E475C(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[40] = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    sub_D854C((uint64_t)a1, a2);
    a1[40] = 1;
  }
  return a1;
}

void sub_E47A0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40)) {
    sub_D7EC0(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E47BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, int a7, char a8)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 16), 1uLL, memory_order_relaxed);
  }
  sub_549A4(&v17, (uint64_t *)a1, "", 295);
  int v14 = *(_DWORD *)(v17 + 264);
  if (v18) {
    sub_4636C(v18);
  }
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = v14;
  *(_DWORD *)(a1 + 20) = a4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_46B38((void *)(a1 + 24), *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  uint64_t v15 = *a6;
  *a6 = 0;
  *(void *)(a1 + 48) = v15;
  *(_DWORD *)(a1 + 56) = a7;
  *(unsigned char *)(a1 + 60) = a8;
  return a1;
}

void sub_E4884(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_E48A0(void *__s2, uint64_t a2, void *__s1, uint64_t a4)
{
  return a4 - (void)__s1 == a2 - (void)__s2 && memcmp(__s1, __s2, a4 - (void)__s1) == 0;
}

void sub_E48EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a3 + 56))
  {
    sub_43F38(&v37, a2, "", 59);
    sub_43F38(&v36, (uint64_t *)(a3 + 16), "", 60);
    uint64_t v7 = v37;
    uint64_t v8 = *(void *)(v37 + 192);
    uint64_t v9 = *(void *)(a3 + 56);
    int v10 = *(_DWORD *)(a4 + 12);
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    if (v8)
    {
      sub_43F38((uint64_t *)v33, a2, "", 36);
      std::string::size_type v11 = (void *)sub_F820C();
      *(void *)int buf = CFStringCreateWithCString(0, "Codec", 0x600u);
      uint8_t buf[8] = 1;
      uint64_t v12 = sub_F832C(v11, (CFStringRef *)buf);
      std::string::size_type v13 = (void *)sub_72924((uint64_t)buf);
      if (v12 == v8 || *(_DWORD *)(*(void *)&v33[0] + 144) == 1885433443) {
        sub_1ED40C(v13, *(uint64_t *)&v33[0], a4, v9, v10);
      }
      else {
        sub_1EE03C((uint64_t)v13, v8, *(uint64_t *)&v33[0], a4, v9, v10);
      }
      char v16 = *(const void **)buf;
      long long v34 = *(_OWORD *)buf;
      uint64_t v35 = *(void *)&buf[16];
      long long v29 = *(_OWORD *)buf;
      if (*((void *)&v33[0] + 1))
      {
        sub_4636C(*((std::__shared_weak_count **)&v33[0] + 1));
        char v16 = (const void *)v29;
      }
      int v14 = v16;
      int v17 = sub_21EF80((_DWORD *)(a4 + 120));
      uint64_t v15 = v36;
      sub_1EAD34((unint64_t *)v33, v17, v7, *(_DWORD *)(v36 + 144), (uint64_t)&v34, v9, *(_DWORD *)(a4 + 12), *(void *)(a4 + 104));
      uint64_t v8 = *((void *)&v29 + 1);
    }
    else
    {
      int v14 = 0;
      memset(v33, 0, sizeof(v33));
      uint64_t v15 = v36;
    }
    if (*(_DWORD *)(v15 + 144) == 1885892706) {
      sub_1F2704(v10);
    }
    char v18 = (std::__shared_weak_count *)a2[1];
    if (v18)
    {
      int v19 = std::__shared_weak_count::lock(v18);
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v19);
      }
    }
    memset(v32, 0, sizeof(v32));
    sub_46B38(v32, v14, v8, (v8 - (uint64_t)v14) >> 2);
    *(_DWORD *)int buf = 0;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)sub_3AEE60();
    int v41 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    uint64_t v42 = 0;
    sub_3812EC(v9, (uint64_t)buf);
    uint64_t v38 = 0;
    int v39 = 0;
    char v20 = (std::__shared_weak_count *)a2[1];
    if (v20)
    {
      int v21 = std::__shared_weak_count::lock(v20);
      if (v21)
      {
        char v22 = v21;
        uint64_t v23 = *a2;
        atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        char v24 = v39;
        uint64_t v38 = v23;
        int v39 = v22;
        if (v24) {
          std::__shared_weak_count::__release_weak(v24);
        }
        sub_4636C(v22);
      }
      else
      {
        int v25 = v39;
        uint64_t v38 = 0;
        int v39 = 0;
        if (v25) {
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    sub_D1200(v30, &v38, 1);
    sub_24A4F8(__p, v10, (_OWORD *)(a4 + 24), v9, v30[1], v30[2], (uint64_t)&v34);
    operator new();
  }
  char v26 = (os_log_t *)sub_32A48(13);
  int v27 = *v26;
  if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "RouteCache.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 57;
    _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Precondition failure.");
}

void sub_E4EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a24) {
    sub_4636C(a24);
  }
  if (a34) {
    sub_4636C(a34);
  }
  if (a36) {
    sub_4636C(a36);
  }
  _Unwind_Resume(exception_object);
}

void sub_E5044()
{
}

void sub_E504C()
{
}

uint64_t sub_E5054(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v5 = *(void *)(a3 + 16);
  *(void *)(a1 + 32) = 0;
  size_t v6 = (void *)(a1 + 32);
  *(v6 - 1) = v5;
  v6[1] = 0;
  void v6[2] = 0;
  sub_46B38(v6, *(const void **)(a3 + 24), *(void *)(a3 + 32), (uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 2);
  uint64_t v7 = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = 0;
  *(void *)(a1 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(a3 + 56);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a3 + 60);
  *(_DWORD *)(a1 + 64) = v7;
  return a1;
}

void sub_E50C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_E50E0(uint64_t **a1, int a2, uint64_t a3)
{
  size_t v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  uint64_t v7 = (char **)(a1 + 1);
  uint64_t v8 = (char **)(a1 + 1);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (char **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    int v10 = (char *)operator new(0x68uLL);
    v15[0] = v10;
    v15[1] = v6;
    char v16 = 0;
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::string::size_type v11 = *(const void **)(a3 + 32);
    *((void *)v10 + 7) = *(void *)(a3 + 24);
    *((void *)v10 + 9) = 0;
    *((void *)v10 + 10) = 0;
    uint64_t v12 = *(void *)(a3 + 40);
    *((void *)v10 + 8) = 0;
    sub_46B38((void *)v10 + 8, v11, v12, (v12 - (uint64_t)v11) >> 2);
    uint64_t v13 = *(void *)(a3 + 56);
    *(void *)(a3 + 56) = 0;
    *((void *)v10 + 11) = v13;
    *((_DWORD *)v10 + 24) = *(_DWORD *)(a3 + 64);
    v10[100] = *(unsigned char *)(a3 + 68);
    char v16 = 1;
    *(void *)int v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v8;
    *uint64_t v7 = v10;
    int v14 = (uint64_t *)**a1;
    if (v14)
    {
      *a1 = v14;
      int v10 = *v7;
    }
    sub_46D00(a1[1], (uint64_t *)v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v15[0] = 0;
    sub_E54A8((uint64_t)v15);
  }
}

void sub_E5210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CFTypeID v4 = *(std::__shared_weak_count **)(v2 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_E54A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_E5230(void *a1)
{
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  CFTypeID v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *sub_E52A0(void *a1)
{
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  CFTypeID v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_E5310(uint64_t a1, int a2, int a3, int a4)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)sub_3AEE60();
  *(_DWORD *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_374BB4((_DWORD *)a1);
  return a1;
}

void sub_E5360(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E5380(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_E4610(result);
    operator delete();
  }
  return result;
}

void sub_E53D0(void *a1)
{
  if (a1)
  {
    sub_E53D0(*a1);
    sub_E53D0(a1[1]);
    sub_E5424(a1 + 4);
    operator delete(a1);
  }
}

void sub_E5424(void *a1)
{
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  CFTypeID v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_E54A8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_E5424(v1 + 4);
    }
    operator delete(v1);
  }
}

std::string *sub_E5500(std::string *a1, unsigned __int8 *a2)
{
  sub_21C8C(a1, "[ Connection Snapshot:");
  memset(&v43, 0, sizeof(v43));
  std::string::append(&v43, "{ ", 2uLL);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v43.__r_.__value_.__l.__size_;
  }
  CFTypeID v4 = (unsigned __int8 *)*((void *)a2 + 1);
  uint64_t v5 = a2 + 16;
  if (v4 != a2 + 16)
  {
    do
    {
      uint64_t v6 = *((unsigned int *)v4 + 8);
      std::string::size_type v7 = size;
      if (v6)
      {
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          std::string::size_type v7 = v43.__r_.__value_.__l.__size_;
        }
        else {
          std::string::size_type v7 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
        }
      }
      uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 1);
      int v9 = v4;
      if (v8)
      {
        do
        {
          int v10 = v8;
          uint64_t v8 = *(unsigned __int8 **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v10 = (unsigned __int8 *)*((void *)v9 + 2);
          BOOL v11 = *(void *)v10 == (void)v9;
          int v9 = v10;
        }
        while (!v11);
      }
      uint64_t v12 = "????";
      if (v6 <= 2) {
        uint64_t v12 = off_620F78[v6];
      }
      sub_21C8C(&v45, v12);
      uint64_t v13 = std::string::insert(&v45, 0, "[ Port Type: ", 0xDuLL);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      uint64_t v15 = std::string::append(&v46, "; ", 2uLL);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v47.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      memset(&v44, 0, sizeof(v44));
      std::string::append(&v44, "[ Port: ", 8uLL);
      sub_549A4((uint64_t *)&v51, (uint64_t *)v4 + 5, "", 335);
      sub_4F64((uint64_t)&v53, v51 + 2);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v17 = &v53;
      }
      else {
        int v17 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v18 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v18 = v53.__r_.__value_.__l.__size_;
      }
      std::string::append(&v44, (const std::string::value_type *)v17, v18);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      if (v52) {
        sub_4636C(v52);
      }
      std::string::append(&v44, "; SubPorts: ", 0xCuLL);
      sub_29353C(&v53, (unsigned int **)v4 + 8);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v19 = &v53;
      }
      else {
        int v19 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v20 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v20 = v53.__r_.__value_.__l.__size_;
      }
      std::string::append(&v44, (const std::string::value_type *)v19, v20);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      std::string::append(&v44, "; Properties: ", 0xEuLL);
      (*(void (**)(std::string *__return_ptr))(**((void **)v4 + 11) + 16))(&v53);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v21 = &v53;
      }
      else {
        int v21 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v53.__r_.__value_.__l.__size_;
      }
      std::string::append(&v44, (const std::string::value_type *)v21, v22);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      std::string::append(&v44, "; Enable reason: ", 0x11uLL);
      sub_2417C(&v53, *((_DWORD *)v4 + 24));
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v23 = &v53;
      }
      else {
        uint64_t v23 = (std::string *)v53.__r_.__value_.__r.__words[0];
      }
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = v53.__r_.__value_.__l.__size_;
      }
      std::string::append(&v44, (const std::string::value_type *)v23, v24);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v53.__r_.__value_.__l.__data_);
      }
      std::string::append(&v44, "; BuiltInMicThroughAOP: ", 0x18uLL);
      if (v4[100]) {
        int v25 = "yes";
      }
      else {
        int v25 = "no";
      }
      if (v4[100]) {
        std::string::size_type v26 = 3;
      }
      else {
        std::string::size_type v26 = 2;
      }
      std::string::append(&v44, v25, v26);
      std::string::append(&v44, " ]", 2uLL);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v27 = &v44;
      }
      else {
        int v27 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v28 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v28 = v44.__r_.__value_.__l.__size_;
      }
      long long v29 = std::string::append(&v47, (const std::string::value_type *)v27, v28);
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      if (v10 == v5) {
        int v31 = " ]";
      }
      else {
        int v31 = " ]; ";
      }
      if (v10 == v5) {
        std::string::size_type v32 = 2;
      }
      else {
        std::string::size_type v32 = 4;
      }
      int v33 = std::string::append(&v48, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v50 = v33->__r_.__value_.__r.__words[2];
      long long v49 = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (v50 >= 0) {
        uint64_t v35 = (const std::string::value_type *)&v49;
      }
      else {
        uint64_t v35 = (const std::string::value_type *)v49;
      }
      if (v50 >= 0) {
        std::string::size_type v36 = HIBYTE(v50);
      }
      else {
        std::string::size_type v36 = *((void *)&v49 + 1);
      }
      std::string::insert(&v43, v7, v35, v36);
      if (SHIBYTE(v50) < 0) {
        operator delete((void *)v49);
      }
      CFTypeID v4 = v10;
    }
    while (v10 != v5);
  }
  std::string::append(&v43, " }", 2uLL);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v37 = &v43;
  }
  else {
    uint64_t v37 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v38 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v38 = v43.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v37, v38);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; Optional: ", 0xCuLL);
  std::to_string(&v53, *a2);
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v39 = &v53;
  }
  else {
    int v39 = (std::string *)v53.__r_.__value_.__r.__words[0];
  }
  if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v40 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v40 = v53.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v39, v40);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_E5A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (*(char *)(v49 - 97) < 0) {
    operator delete(*(void **)(v49 - 120));
  }
  if (*(char *)(a11 + 23) < 0) {
    operator delete(*(void **)a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_E5B68(uint64_t a1, unsigned int **a2)
{
  uint64_t v4 = a1 + 8;
  *(void *)a1 = *(void *)*a2;
  *(void *)(a1 + 8) = a1 + 8;
  *(void *)(a1 + 16) = a1 + 8;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = v5 + 2;
  uint64_t v7 = v5[3];
  if ((void *)v7 != v5 + 2)
  {
    do
    {
      uint64_t v8 = operator new(0x60uLL);
      void *v8 = 0;
      v8[1] = 0;
      char v9 = *(unsigned char *)(v7 + 64);
      v8[4] = 0;
      int v10 = (int *)(v8 + 4);
      *((unsigned char *)v8 + 16) = v9;
      v8[5] = 0;
      v8[3] = v8 + 4;
      if (*(void *)(v7 + 72))
      {
        uint64_t v11 = v7 + 16;
        uint64_t v12 = *(std::__shared_weak_count **)(v7 + 24);
        if (v12)
        {
          uint64_t v13 = std::__shared_weak_count::lock(v12);
          if (v13 && *(void *)v11 && *(_DWORD *)(*(void *)v11 + 144) != 1885433888)
          {
            long long v14 = *(char **)v10;
            if (*(void *)v10)
            {
              uint64_t v15 = (int *)(v8 + 4);
              do
              {
                int v16 = *((_DWORD *)v14 + 8);
                BOOL v17 = v16 < 0;
                if (v16 >= 0) {
                  std::string::size_type v18 = (char **)v14;
                }
                else {
                  std::string::size_type v18 = (char **)(v14 + 8);
                }
                if (!v17) {
                  uint64_t v15 = (int *)v14;
                }
                long long v14 = *v18;
              }
              while (*v18);
              if (v15 != v10 && v15[8] <= 0)
              {
                char v65 = (os_log_t *)sub_32A48(13);
                int v66 = *v65;
                if (*v65)
                {
                  if (os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)char v96 = 136315394;
                    char v97 = "RouteCache.cpp";
                    __int16 v98 = 1024;
                    int v99 = 164;
                    _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v96, 0x12u);
                  }
                }
                exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(exception, "Precondition failure.");
              }
            }
            sub_E48EC((uint64_t)v82, (uint64_t *)(v7 + 16), v7 + 16, (uint64_t)a2);
          }
        }
        else
        {
          uint64_t v13 = 0;
        }
        int v19 = *(std::__shared_weak_count **)(v7 + 40);
        if (v19)
        {
          std::string::size_type v20 = std::__shared_weak_count::lock(v19);
          if (v20)
          {
            uint64_t v21 = *(void *)(v7 + 32);
            if (v21)
            {
              if (*(_DWORD *)(v21 + 144) != 1885433888)
              {
                std::string::size_type v22 = *(char **)v10;
                if (*(void *)v10)
                {
                  uint64_t v23 = (int *)(v8 + 4);
                  do
                  {
                    int v24 = *((_DWORD *)v22 + 8);
                    BOOL v25 = v24 < 1;
                    if (v24 >= 1) {
                      std::string::size_type v26 = (char **)v22;
                    }
                    else {
                      std::string::size_type v26 = (char **)(v22 + 8);
                    }
                    if (!v25) {
                      uint64_t v23 = (int *)v22;
                    }
                    std::string::size_type v22 = *v26;
                  }
                  while (*v26);
                  if (v23 != v10 && v23[8] <= 1)
                  {
                    int v68 = (os_log_t *)sub_32A48(13);
                    char v69 = *v68;
                    if (*v68 && os_log_type_enabled(*v68, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)char v96 = 136315394;
                      char v97 = "RouteCache.cpp";
                      __int16 v98 = 1024;
                      int v99 = 172;
                      _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v96, 0x12u);
                    }
                    int v70 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v70, "Precondition failure.");
                  }
                }
                if (*(void *)(v7 + 72))
                {
                  if (*((void *)*a2 + 5))
                  {
                    sub_43F38(&v94, (uint64_t *)(v7 + 32), "", 127);
                    uint64_t v79 = *(void *)(v7 + 72);
                    if (*((unsigned char *)a2 + 20)) {
                      int v27 = (unsigned int *)(a2 + 2);
                    }
                    else {
                      int v27 = (unsigned int *)a2 + 3;
                    }
                    unsigned int v28 = *v27;
                    long long v29 = *a2;
                    uint64_t v78 = *((void *)*a2 + 5);
                    uint64_t v31 = v94;
                    long long v30 = v95;
                    uint64_t v80 = v94;
                    char v81 = v95;
                    if (v95)
                    {
                      atomic_fetch_add_explicit(&v95->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                      int v91 = &v91;
                      int v92 = &v91;
                      uint64_t v93 = 0;
                      if (*a2[14] == 1667396196)
                      {
                        unsigned int v77 = v28;
                        long long v29 = *a2;
LABEL_65:
                        int v41 = v29 + 2;
                        for (uint64_t i = (void *)v29[3]; i != v41; uint64_t i = (void *)i[1])
                        {
                          std::string v43 = (std::__shared_weak_count *)i[5];
                          if (!v43 || v43->__shared_owners_ == -1)
                          {
                            int v57 = (os_log_t *)sub_32A48(13);
                            char v58 = *v57;
                            if (*v57 && os_log_type_enabled(*v57, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)int buf = 136315394;
                              *(void *)&uint8_t buf[4] = "RouteCache.cpp";
                              *(_WORD *)&unsigned char buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 104;
                              _os_log_impl(&def_1E50E8, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
                            }
                            int v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v59, "Precondition failure.");
                          }
                          std::string v44 = std::__shared_weak_count::lock(v43);
                          std::string v45 = v44;
                          if (v44)
                          {
                            uint64_t v46 = i[4];
                            atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                            sub_4636C(v44);
                          }
                          else
                          {
                            uint64_t v46 = 0;
                          }
                          std::string v47 = operator new(0x20uLL);
                          v47[2] = v46;
                          void v47[3] = v45;
                          std::string v48 = v91;
                          *std::string v47 = v91;
                          v47[1] = &v91;
                          v48[1] = v47;
                          int v91 = v47;
                          ++v93;
                        }
                        uint64_t v31 = v80;
                        long long v30 = v81;
                        uint64_t v49 = v79;
                        unsigned int v28 = v77;
                        if (!v81)
                        {
LABEL_78:
                          if (*(void *)(v31 + 192))
                          {
                            sub_1ED500(&v88, v31, (uint64_t)a2, v49, v28, 0);
                            uint64_t v51 = *(void *)(v31 + 192);
                            if (v51)
                            {
                              strcpy(buf, "pshsbolg");
                              buf[9] = 0;
                              *(_WORD *)&buf[10] = 0;
                              sub_99A40(v51);
                            }
                          }
                          else
                          {
                            int v88 = 0;
                            uint64_t v89 = 0;
                            uint64_t v90 = 0;
                          }
                          if (*(_DWORD *)(v31 + 144) == 1885892706) {
                            sub_1F2704(v28);
                          }
                          if (v30) {
                            atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                          }
                          memset(v87, 0, sizeof(v87));
                          sub_46B38(v87, v88, v89, (v89 - (uint64_t)v88) >> 2);
                          sub_1E8930(v86, v31, v49, (uint64_t)a2, 0);
                          *(_DWORD *)int buf = 1;
                          *(_DWORD *)&uint8_t buf[4] = v28;
                          *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)sub_3AEE60();
                          int v101 = 0;
                          uint64_t v103 = 0;
                          uint64_t v104 = 0;
                          uint64_t v102 = 0;
                          sub_3812EC(v49, (uint64_t)buf);
                          sub_242788((uint64_t)&v85, v28, a2 + 3, (uint64_t)v92, v93, v49, v78);
                          sub_E5310((uint64_t)v83, 1, 1768776806, *(_DWORD *)(v80 + 264));
                          sub_381558(&v84, v49, (uint64_t)v83);
                          operator new();
                        }
LABEL_77:
                        std::__shared_weak_count::__release_weak(v30);
                        goto LABEL_78;
                      }
                      if (v30->__shared_owners_ != -1)
                      {
                        int64_t v50 = operator new(0x20uLL);
                        uint64_t v49 = v79;
                        v50[2] = v31;
                        void v50[3] = v30;
                        atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                        *int64_t v50 = &v91;
                        v50[1] = &v91;
                        int v91 = v50;
                        int v92 = v50;
                        ++v93;
                        goto LABEL_77;
                      }
                    }
                    else
                    {
                      unsigned int v77 = v28;
                      int v91 = &v91;
                      int v92 = &v91;
                      uint64_t v93 = 0;
                      if (*a2[14] == 1667396196) {
                        goto LABEL_65;
                      }
                    }
                    int v74 = (os_log_t *)sub_32A48(13);
                    char v75 = *v74;
                    if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)int buf = 136315394;
                      *(void *)&uint8_t buf[4] = "RouteCache.cpp";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = 104;
                      _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
                    }
                    int v76 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                    std::logic_error::logic_error(v76, "Precondition failure.");
                  }
                  char v60 = (os_log_t *)sub_32A48(13);
                  int v61 = *v60;
                  if (*v60 && os_log_type_enabled(*v60, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 136315394;
                    *(void *)&uint8_t buf[4] = "RouteCache.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 125;
                    _os_log_impl(&def_1E50E8, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
                  }
                }
                else
                {
                  char v62 = (os_log_t *)sub_32A48(13);
                  int v63 = *v62;
                  if (*v62 && os_log_type_enabled(*v62, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)int buf = 136315394;
                    *(void *)&uint8_t buf[4] = "RouteCache.cpp";
                    *(_WORD *)&unsigned char buf[12] = 1024;
                    *(_DWORD *)&buf[14] = 124;
                    _os_log_impl(&def_1E50E8, v63, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
                  }
                }
                int v64 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                std::logic_error::logic_error(v64, "Precondition failure.");
              }
            }
          }
        }
        else
        {
          std::string::size_type v20 = 0;
        }
        std::string::size_type v32 = *(std::__shared_weak_count **)(v7 + 56);
        if (v32)
        {
          int v33 = std::__shared_weak_count::lock(v32);
          if (v33)
          {
            uint64_t v34 = *(void *)(v7 + 48);
            if (v34 && *(_DWORD *)(v34 + 144) != 1885433888)
            {
              uint64_t v35 = *(char **)v10;
              if (*(void *)v10)
              {
                std::string::size_type v36 = (int *)(v8 + 4);
                do
                {
                  int v37 = *((_DWORD *)v35 + 8);
                  BOOL v38 = v37 < 2;
                  if (v37 >= 2) {
                    int v39 = (char **)v35;
                  }
                  else {
                    int v39 = (char **)(v35 + 8);
                  }
                  if (!v38) {
                    std::string::size_type v36 = (int *)v35;
                  }
                  uint64_t v35 = *v39;
                }
                while (*v39);
                if (v36 != v10 && v36[8] <= 2)
                {
                  char v71 = (os_log_t *)sub_32A48(13);
                  int v72 = *v71;
                  if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)char v96 = 136315394;
                    char v97 = "RouteCache.cpp";
                    __int16 v98 = 1024;
                    int v99 = 180;
                    _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", v96, 0x12u);
                  }
                  char v73 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                  std::logic_error::logic_error(v73, "Precondition failure.");
                }
              }
              sub_E48EC((uint64_t)v82, (uint64_t *)(v7 + 48), v7 + 16, (uint64_t)a2);
            }
            sub_4636C(v33);
          }
        }
        if (v20) {
          sub_4636C(v20);
        }
        if (v13) {
          sub_4636C(v13);
        }
      }
      sub_3201FC((uint64_t)(v8 + 6), *(void *)(v7 + 72), *((void *)*a2 + 5), **a2, 0x696D6466u);
      uint64_t v40 = *(void *)(a1 + 8);
      void *v8 = v40;
      v8[1] = v4;
      *(void *)(v40 + 8) = v8;
      *(void *)(a1 + 8) = v8;
      ++*(void *)(a1 + 24);
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while ((void *)v7 != v6);
    uint64_t v5 = *a2;
  }
  int v52 = *((_DWORD *)a2 + 3);
  BOOL v55 = v52 == 1986556788 || v52 == 1987208039 || v52 == 1987211117;
  sub_E6F1C((uint64_t *)(a1 + 32), (uint64_t)v5, v55);
  *(_DWORD *)(a1 + 80) = (*a2)[2];
  sub_CAE80((unsigned char *)(a1 + 88), (long long *)a2 + 11);
  *(_DWORD *)(a1 + 120) = *((_DWORD *)a2 + 3);
  *(unsigned char *)(a1 + 124) = *((unsigned char *)a2 + 156);
  return a1;
}

void sub_E6B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,std::__shared_weak_count *a21)
{
  sub_4636C(v21);
  if (a20) {
    sub_4636C(a20);
  }
  if (a21) {
    sub_4636C(a21);
  }
  sub_E53D0(v22[4]);
  operator delete(v22);
  sub_E6EA8(a17);
  _Unwind_Resume(a1);
}

void sub_E6EA8(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_E53D0((void *)v3[4]);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_E6F1C(uint64_t *a1, uint64_t a2, int a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  a1[4] = 0;
  a1[3] = (uint64_t)(a1 + 4);
  uint64_t v3 = a1 + 3;
  a1[5] = 0;
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(void **)(a2 + 24);
  if (v5 != (void *)(a2 + 16))
  {
    uint64_t v7 = a1;
    uint64_t v31 = (void *)(a2 + 16);
    do
    {
      v34[0] = 0;
      v34[1] = 0;
      v36[0] = 0;
      v36[1] = 0;
      int v33 = v34;
      uint64_t v35 = v36;
      uint64_t v8 = (std::__shared_weak_count *)v5[3];
      if (v8)
      {
        char v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          int v10 = v9;
          uint64_t v11 = v5[2];
          if (v11)
          {
            uint64_t v12 = sub_250724(v11, a3);
            if (v12) {
              sub_E7404((uint64_t *)&v33, v12, v12);
            }
          }
          sub_4636C(v10);
        }
      }
      uint64_t v13 = (std::__shared_weak_count *)v5[5];
      if (v13)
      {
        long long v14 = std::__shared_weak_count::lock(v13);
        if (v14)
        {
          uint64_t v15 = v14;
          uint64_t v16 = v5[4];
          if (v16)
          {
            uint64_t v17 = sub_250724(v16, a3);
            if (v17) {
              sub_E7404((uint64_t *)&v35, v17, v17);
            }
          }
          sub_4636C(v15);
        }
      }
      std::string::size_type v18 = (std::__shared_weak_count *)v5[7];
      if (v18)
      {
        int v19 = std::__shared_weak_count::lock(v18);
        if (v19)
        {
          std::string::size_type v20 = v19;
          uint64_t v21 = v5[6];
          if (v21)
          {
            unint64_t v22 = *(void *)(v21 + 192);
            if (v22)
            {
              __int16 v23 = *(_WORD *)(v21 + 184);
              if (v23) {
                int v24 = &v33;
              }
              else {
                int v24 = &v35;
              }
              BOOL v25 = operator new(0x28uLL);
              unsigned char v25[4] = v22;
              uint64_t v26 = 1;
              if (v23)
              {
                int v27 = v34;
              }
              else
              {
                uint64_t v26 = 4;
                int v27 = v36;
              }
              unsigned int v28 = v34[v26 - 1];
              if (v28)
              {
                while (1)
                {
                  while (1)
                  {
                    long long v29 = (uint64_t **)v28;
                    unint64_t v30 = v28[4];
                    if (v22 >= v30) {
                      break;
                    }
                    unsigned int v28 = *v29;
                    int v27 = v29;
                    if (!*v29) {
                      goto LABEL_33;
                    }
                  }
                  if (v30 >= v22) {
                    break;
                  }
                  unsigned int v28 = v29[1];
                  if (!v28)
                  {
                    int v27 = v29 + 1;
                    goto LABEL_33;
                  }
                }
                operator delete(v25);
              }
              else
              {
                long long v29 = v27;
LABEL_33:
                sub_46CA8(v24, (uint64_t)v29, v27, v25);
              }
              uint64_t v4 = v31;
              uint64_t v7 = a1;
            }
          }
          sub_4636C(v20);
        }
      }
      sub_E71B0(v7, v33, v34);
      sub_E71B0(v3, v35, v36);
      sub_463E0(v36[0]);
      sub_463E0(v34[0]);
      uint64_t v5 = (void *)v5[1];
    }
    while (v5 != v4);
  }
}

void sub_E7140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17)
{
  sub_4636C(v17);
  sub_463E0(a17);
  sub_463E0(a14);
  sub_E717C(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_E717C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_E71B0(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_E723C(v5, v6, v4[4], v4[4]);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_E723C(uint64_t **a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  uint64_t v7 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (unint64_t v8 = a2[4], v8 > a3))
  {
    uint64_t v9 = *a2;
    if (*a1 == a2)
    {
      uint64_t v11 = (uint64_t **)a2;
LABEL_16:
      if (v9) {
        long long v14 = v11;
      }
      else {
        long long v14 = (uint64_t **)a2;
      }
      if (v9) {
        uint64_t v12 = v11 + 1;
      }
      else {
        uint64_t v12 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v9)
    {
      int v10 = (uint64_t **)*a2;
      do
      {
        uint64_t v11 = v10;
        int v10 = (uint64_t **)v10[1];
      }
      while (v10);
    }
    else
    {
      uint64_t v16 = a2;
      do
      {
        uint64_t v11 = (uint64_t **)v16[2];
        BOOL v17 = *v11 == v16;
        uint64_t v16 = (uint64_t *)v11;
      }
      while (v17);
    }
    if ((unint64_t)v11[4] < a3) {
      goto LABEL_16;
    }
    std::string::size_type v18 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          long long v14 = (uint64_t **)v18;
          unint64_t v19 = v18[4];
          if (v19 <= a3) {
            break;
          }
          std::string::size_type v18 = *v14;
          uint64_t v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }
        if (v19 >= a3) {
          break;
        }
        uint64_t v7 = v14 + 1;
        std::string::size_type v18 = v14[1];
        if (!v18) {
          goto LABEL_44;
        }
      }
LABEL_46:
      uint64_t v12 = v7;
      goto LABEL_22;
    }
    goto LABEL_43;
  }
  if (v8 >= a3) {
    return v5;
  }
  uint64_t v12 = (uint64_t **)(a2 + 1);
  uint64_t v13 = (uint64_t *)a2[1];
  if (v13)
  {
    do
    {
      uint64_t v12 = (uint64_t **)v13;
      uint64_t v13 = (uint64_t *)*v13;
      long long v14 = v12;
      uint64_t v15 = v12;
    }
    while (v13);
  }
  else
  {
    uint64_t v15 = (uint64_t **)a2;
    do
    {
      std::string::size_type v20 = v15;
      uint64_t v15 = (uint64_t **)v15[2];
    }
    while (*v15 != (uint64_t *)v20);
    long long v14 = (uint64_t **)a2;
  }
  if (v15 != v7 && (unint64_t)v15[4] <= a3)
  {
    uint64_t v21 = *v7;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          long long v14 = (uint64_t **)v21;
          unint64_t v22 = v21[4];
          if (v22 <= a3) {
            break;
          }
          uint64_t v21 = *v14;
          uint64_t v7 = v14;
          if (!*v14) {
            goto LABEL_44;
          }
        }
        if (v22 >= a3) {
          goto LABEL_46;
        }
        uint64_t v7 = v14 + 1;
        uint64_t v21 = v14[1];
        if (!v21) {
          goto LABEL_44;
        }
      }
    }
LABEL_43:
    long long v14 = a1 + 1;
LABEL_44:
    uint64_t v5 = (uint64_t *)operator new(0x28uLL);
    void v5[4] = a4;
    sub_46CA8(a1, (uint64_t)v14, v7, v5);
    return v5;
  }
LABEL_22:
  uint64_t v5 = *v12;
  uint64_t v7 = v12;
  if (!*v12) {
    goto LABEL_44;
  }
  return v5;
}

uint64_t *sub_E7404(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return sub_46CA8(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void sub_E74B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 16);
  uint64_t v53 = (uint64_t)&v53;
  char v54 = &v53;
  uint64_t v55 = 0;
  uint64_t v51 = (void *)(a2 + 8);
  if (v2 != (void *)(a2 + 8))
  {
    while (1)
    {
      uint64_t v3 = (void *)v2[3];
      int v52 = v2;
      uint64_t v4 = v2 + 4;
      uint64_t v59 = (uint64_t)&v59;
      char v60 = &v59;
      uint64_t v61 = 0;
      if (v3 == v2 + 4)
      {
        uint64_t v56 = (uint64_t)&v56;
        int v57 = &v56;
        unsigned int v28 = &v58;
      }
      else
      {
        do
        {
          sub_3524((uint64_t *)&v62, &v59);
          uint64_t v5 = v3[6];
          if (!v5 || *(void *)(v5 + 8) == -1)
          {
            std::string v47 = (os_log_t *)sub_32A48(13);
            std::string v48 = *v47;
            if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)int buf = 136315394;
              *(void *)&uint8_t buf[4] = "RouteCache.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 316;
              _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Precondition failure.");
          }
          uint64_t v6 = v3[5];
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
          uint64_t v7 = operator new(0x20uLL);
          *(void *)&long long v8 = v6;
          *((void *)&v8 + 1) = v5;
          v7[1] = v8;
          uint64_t v9 = (uint64_t)v62;
          *(void *)uint64_t v7 = v62;
          *((void *)v7 + 1) = &v62;
          *(void *)(v9 + 8) = v7;
          *(void *)int buf = buf;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0;
          BOOL v10 = __CFADD__(v64, 1);
          uint64_t v11 = v64 + 1;
          char v62 = v7;
          ++v64;
          if (!v10)
          {
            uint64_t v12 = v63;
            uint64_t v13 = *v63;
            *(void *)(v13 + 8) = &v62;
            **((void **)v7 + 1) = v13;
            uint64_t v14 = *(void *)buf;
            *(void *)(*(void *)buf + 8) = v12;
            void *v12 = v14;
            *((void *)v7 + 1) = buf;
            *(void *)int buf = v7;
            *(void *)&buf[16] = v11;
            uint64_t v64 = 0;
          }
          sub_8108((uint64_t *)&v62);
          sub_8108(&v59);
          uint64_t v15 = *(void *)&buf[16];
          if (*(void *)&buf[16])
          {
            uint64_t v17 = *(void *)buf;
            uint64_t v16 = *(uint64_t **)&buf[8];
            uint64_t v18 = **(void **)&buf[8];
            *(void *)(v18 + 8) = *(void *)(*(void *)buf + 8);
            **(void **)(v17 + 8) = v18;
            uint64_t v19 = v59;
            *(void *)(v59 + 8) = v16;
            uint64_t *v16 = v19;
            *(void *)(v17 + 8) = &v59;
            uint64_t v59 = v17;
            v61 += v15;
            *(void *)&buf[16] = 0;
          }
          sub_8108((uint64_t *)buf);
          std::string::size_type v20 = (void *)v3[1];
          if (v20)
          {
            do
            {
              uint64_t v21 = v20;
              std::string::size_type v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              uint64_t v21 = (void *)v3[2];
              BOOL v22 = *v21 == (void)v3;
              uint64_t v3 = v21;
            }
            while (!v22);
          }
          uint64_t v3 = v21;
        }
        while (v21 != v4);
        uint64_t v23 = v61;
        uint64_t v56 = (uint64_t)&v56;
        int v57 = &v56;
        uint64_t v58 = 0;
        uint64_t v2 = v52;
        if (!v61) {
          goto LABEL_19;
        }
        uint64_t v25 = v59;
        int v24 = v60;
        uint64_t v26 = *v60;
        *(void *)(v26 + 8) = *(void *)(v59 + 8);
        **(void **)(v25 + 8) = v26;
        uint64_t v27 = v56;
        *(void *)(v56 + 8) = v24;
        uint64_t *v24 = v27;
        *(void *)(v25 + 8) = &v56;
        uint64_t v56 = v25;
        uint64_t v58 = v23;
        unsigned int v28 = &v61;
      }
      *unsigned int v28 = 0;
LABEL_19:
      sub_8108(&v59);
      sub_3524((uint64_t *)&v62, &v53);
      for (uint64_t i = v57; i != &v56; uint64_t i = (uint64_t *)i[1])
      {
        sub_549A4((uint64_t *)buf, i + 2, "", 449);
        int v30 = *(_DWORD *)(*(void *)buf + 144);
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v30 != 1885433888) {
          sub_3590((uint64_t *)&v62, i[2], i[3]);
        }
      }
      *(void *)int buf = buf;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0;
      uint64_t v31 = v64;
      if (v64)
      {
        uint64_t v33 = (uint64_t)v62;
        std::string::size_type v32 = v63;
        uint64_t v34 = *v63;
        *(void *)(v34 + 8) = v62[1];
        **(void **)(v33 + 8) = v34;
        uint64_t v35 = *(void *)buf;
        *(void *)(*(void *)buf + 8) = v32;
        *std::string::size_type v32 = v35;
        *(void *)(v33 + 8) = buf;
        *(void *)int buf = v33;
        *(void *)&buf[16] = v31;
        uint64_t v64 = 0;
      }
      sub_8108((uint64_t *)&v62);
      sub_8108(&v56);
      sub_8108(&v53);
      uint64_t v36 = *(void *)&buf[16];
      if (*(void *)&buf[16])
      {
        uint64_t v38 = *(void *)buf;
        int v37 = *(uint64_t **)&buf[8];
        uint64_t v39 = **(void **)&buf[8];
        *(void *)(v39 + 8) = *(void *)(*(void *)buf + 8);
        **(void **)(v38 + 8) = v39;
        uint64_t v40 = v53;
        *(void *)(v53 + 8) = v37;
        *int v37 = v40;
        *(void *)(v38 + 8) = &v53;
        uint64_t v53 = v38;
        v55 += v36;
        *(void *)&buf[16] = 0;
      }
      sub_8108((uint64_t *)buf);
      uint64_t v2 = (void *)v2[1];
      if (v2 == v51)
      {
        uint64_t v41 = v55;
        *a1 = (uint64_t)a1;
        a1[1] = (uint64_t)a1;
        a1[2] = 0;
        if (v41)
        {
          uint64_t v43 = v53;
          uint64_t v42 = v54;
          uint64_t v44 = *v54;
          *(void *)(v44 + 8) = *(void *)(v53 + 8);
          **(void **)(v43 + 8) = v44;
          uint64_t v45 = *a1;
          *(void *)(v45 + 8) = v42;
          *uint64_t v42 = v45;
          *a1 = v43;
          *(void *)(v43 + 8) = a1;
          a1[2] = v41;
          uint64_t v46 = &v55;
          goto LABEL_34;
        }
        goto LABEL_35;
      }
    }
  }
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  uint64_t v46 = a1 + 2;
LABEL_34:
  uint64_t *v46 = 0;
LABEL_35:
  sub_8108(&v53);
}

void sub_E7950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_8108((uint64_t *)va1);
  sub_8108((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_E79B8(int a1)
{
  uint64_t result = 1;
  if (a1 > 1919776354)
  {
    if (a1 > 1987081832)
    {
      if (a1 == 1987081833) {
        return result;
      }
      unsigned __int16 v4 = 30319;
    }
    else
    {
      if (a1 == 1919776355) {
        return result;
      }
      unsigned __int16 v4 = 26467;
    }
    int v3 = v4 | 0x76700000;
  }
  else if (a1 > 1768779618)
  {
    if (a1 == 1768779619) {
      return result;
    }
    int v3 = 1768781411;
  }
  else
  {
    if (a1 == 1735222132) {
      return result;
    }
    int v3 = 1768057203;
  }
  if (a1 != v3) {
    return 0;
  }
  return result;
}

std::string *sub_E7A6C(std::string *a1, uint64_t a2)
{
  sub_21C8C(a1, "[ ");
  sub_4D60(&__p, (unsigned int *)a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, ";", 1uLL);
  uint64_t v6 = (void *)(a2 + 8);
  memset(&v23, 0, sizeof(v23));
  uint64_t v7 = a2 + 8;
  while (1)
  {
    uint64_t v7 = *(void *)(v7 + 8);
    if ((void *)v7 == v6) {
      break;
    }
    std::string::append(&v23, "{ ", 2uLL);
    sub_E5500(&__p, (unsigned __int8 *)(v7 + 16));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v8 = &__p;
    }
    else {
      uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(&v23, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v7 == *v6) {
      uint64_t v10 = " }";
    }
    else {
      uint64_t v10 = " },";
    }
    if (v7 == *v6) {
      std::string::size_type v11 = 2;
    }
    else {
      std::string::size_type v11 = 3;
    }
    std::string::append(&v23, v10, v11);
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v23;
  }
  else {
    uint64_t v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v13 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v13 = v23.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v12, v13);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; Source Physical Devices: ", 0x1BuLL);
  sub_382A0C(&__p, (void *)(a2 + 32));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &__p;
  }
  else {
    uint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; Destination Physical Devices: ", 0x20uLL);
  sub_382A0C(&__p, (void *)(a2 + 56));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = &__p;
  }
  else {
    uint64_t v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v16, v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(unsigned char *)(a2 + 112)) {
    std::operator+<char>();
  }
  else {
    sub_21C8C(&__p, "");
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v18 = &__p;
  }
  else {
    uint64_t v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v19 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; Mode: ", 8uLL);
  sub_2417C(&__p, *(_DWORD *)(a2 + 120));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v20 = &__p;
  }
  else {
    std::string::size_type v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v20, v21);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_E7D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_E7DF0(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_E7E64((uint64_t)(v3 + 2));
        operator delete(v3);
        int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_E7E64(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  sub_463E0(*(void **)(a1 + 64));
  sub_463E0(*(void **)(a1 + 40));

  sub_E6EA8((uint64_t *)(a1 + 8));
}

uint64_t sub_E7EC0(uint64_t a1)
{
  sub_73038(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    int v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        int v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_73038(v2);
  }
  return a1;
}

std::string *sub_E7F10(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_4D60(&__p, a2 + 7);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v8 = (unsigned int *)*((void *)a2 + 1);
      if (v8)
      {
        do
        {
          std::string::size_type v9 = v8;
          uint64_t v8 = *(unsigned int **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          std::string::size_type v9 = (unsigned int *)*((void *)a2 + 2);
          BOOL v10 = *(void *)v9 == (void)a2;
          a2 = v9;
        }
        while (!v10);
      }
      if (v9 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      a2 = v9;
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_E8018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_E8054(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = v5)
  {
    uint64_t v5 = *(void *)(i + 8);
    std::string::append(a1, "[ ", 2uLL);
    sub_E7A6C(&__p, i + 16);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v5 == a2) {
      uint64_t v8 = " ]";
    }
    else {
      uint64_t v8 = " ],";
    }
    if (v5 == a2) {
      std::string::size_type v9 = 2;
    }
    else {
      std::string::size_type v9 = 3;
    }
    std::string::append(a1, v8, v9);
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_E8164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_E81A4(void *a1, uint64_t a2, std::__shared_weak_count *this)
{
  uint64_t v5 = (void *)a1[1];
  if (this) {
    atomic_fetch_add_explicit(&this->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5 != a1)
  {
    while (1)
    {
      uint64_t v6 = (void *)v5[4];
      if (this) {
        atomic_fetch_add_explicit(&this->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v6 != v5 + 3) {
        break;
      }
      BOOL v12 = 0;
LABEL_36:
      if (this) {
        std::__shared_weak_count::__release_weak(this);
      }
      if (!v12)
      {
        uint64_t v5 = (void *)v5[1];
        if (v5 != a1) {
          continue;
        }
      }
      if (this) {
        goto LABEL_41;
      }
      return v12;
    }
    while (1)
    {
      uint64_t v7 = (void *)v6[3];
      if (this) {
        atomic_fetch_add_explicit(&this->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7 != v6 + 4) {
        break;
      }
      BOOL v12 = 0;
      if (this) {
LABEL_29:
      }
        std::__shared_weak_count::__release_weak(this);
LABEL_30:
      if (!v12)
      {
        uint64_t v6 = (void *)v6[1];
        if (v6 != v5 + 3) {
          continue;
        }
      }
      goto LABEL_36;
    }
    while (1)
    {
      if (this)
      {
        uint64_t v8 = std::__shared_weak_count::lock(this);
        uint64_t v9 = v8 ? a2 : 0;
      }
      else
      {
        uint64_t v9 = 0;
        uint64_t v8 = 0;
      }
      BOOL v10 = (std::__shared_weak_count *)v7[6];
      if (!v10) {
        break;
      }
      std::string::size_type v11 = std::__shared_weak_count::lock(v10);
      if (!v11) {
        break;
      }
      BOOL v12 = v9 == v7[5];
      sub_4636C(v11);
      if (v8) {
        goto LABEL_20;
      }
LABEL_21:
      if (!v12)
      {
        std::string::size_type v13 = (void *)v7[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            std::string::size_type v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v7[2];
            BOOL v15 = *v14 == (void)v7;
            uint64_t v7 = v14;
          }
          while (!v15);
        }
        uint64_t v7 = v14;
        if (v14 != v6 + 4) {
          continue;
        }
      }
      if (this) {
        goto LABEL_29;
      }
      goto LABEL_30;
    }
    BOOL v12 = v9 == 0;
    if (!v8) {
      goto LABEL_21;
    }
LABEL_20:
    sub_4636C(v8);
    goto LABEL_21;
  }
  BOOL v12 = 0;
  if (this) {
LABEL_41:
  }
    std::__shared_weak_count::__release_weak(this);
  return v12;
}

uint64_t sub_E8358(void *a1, int a2)
{
  uint64_t v2 = (void *)a1[1];
  if (v2 != a1)
  {
    while (2)
    {
      for (uint64_t i = (void *)v2[4]; i != v2 + 3; uint64_t i = (void *)i[1])
      {
        uint64_t v6 = (void *)i[3];
        if (v6 != i + 4)
        {
          do
          {
            sub_549A4(&v12, v6 + 5, "", 311);
            int v7 = *(_DWORD *)(v12 + 144);
            if (v13) {
              sub_4636C(v13);
            }
            if (v7 == a2) {
              return 1;
            }
            uint64_t v8 = (void *)v6[1];
            if (v8)
            {
              do
              {
                uint64_t v9 = v8;
                uint64_t v8 = (void *)*v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                uint64_t v9 = (void *)v6[2];
                BOOL v10 = *v9 == (void)v6;
                uint64_t v6 = v9;
              }
              while (!v10);
            }
            uint64_t v6 = v9;
          }
          while (v9 != i + 4);
        }
      }
      uint64_t v2 = (void *)v2[1];
      if (v2 != a1) {
        continue;
      }
      break;
    }
  }
  return 0;
}

void sub_E845C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    if (v4 >> 61) {
      sub_60548();
    }
    uint64_t v5 = sub_106EC(v4);
    *a1 = v5;
    a1[1] = v5;
    a1[2] = &v5[v6];
  }
  else
  {
    uint64_t v5 = 0;
  }
  for (i = *(void *)(a2 + 8); i != a2; uint64_t v5 = v10)
  {
    uint64_t v8 = i + 16;
    unint64_t v9 = a1[2];
    if ((unint64_t)v5 >= v9)
    {
      std::string::size_type v11 = (void *)*a1;
      uint64_t v12 = ((uint64_t)v5 - *a1) >> 3;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        sub_60548();
      }
      uint64_t v14 = v9 - (void)v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15) {
        unint64_t v15 = (unint64_t)sub_106EC(v15);
      }
      else {
        uint64_t v16 = 0;
      }
      std::string::size_type v17 = (void *)(v15 + 8 * v12);
      *std::string::size_type v17 = v8;
      BOOL v10 = v17 + 1;
      if (v5 != v11)
      {
        do
        {
          uint64_t v18 = *--v5;
          *--std::string::size_type v17 = v18;
        }
        while (v5 != v11);
        uint64_t v5 = (void *)*a1;
      }
      *a1 = v17;
      a1[1] = v10;
      a1[2] = v15 + 8 * v16;
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *uint64_t v5 = v8;
      BOOL v10 = v5 + 1;
    }
    a1[1] = v10;
    uint64_t i = *(void *)(i + 8);
  }
}

void sub_E85A4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_E85C4(uint64_t a1, void *a2, void *a3)
{
  if (a2 != a3)
  {
    while (1)
    {
      if (!*a2)
      {
        unint64_t v4 = (os_log_t *)sub_32A48(13);
        uint64_t v5 = *v4;
        if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
        {
          int v7 = 136315394;
          uint64_t v8 = "RouteCache.cpp";
          __int16 v9 = 1024;
          int v10 = 591;
          _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v7, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Precondition failure.");
      }
      if (*(void *)*a2 == a1) {
        break;
      }
      if (++a2 == a3) {
        return a3;
      }
    }
  }
  return a2;
}

void sub_E86EC(_Unwind_Exception *exception_object)
{
}

uint64_t sub_E8708(uint64_t a1, double *a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (!v2)
  {
    int v7 = (os_log_t *)sub_32A48(13);
    uint64_t v8 = *v7;
    if (*v7 && os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      __int16 v21 = 1024;
      int v22 = 347;
      _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadStreamError) [mStream is NULL]: \"the underlying stream is NULL\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 561214578;
  }
  uint64_t v4 = *(void *)(a1 + 112);
  int v5 = (*(uint64_t (**)(void, unsigned char *))(*(void *)v2 + 112))(*(void *)(a1 + 120), buf);
  if (v5)
  {
    int v10 = (os_log_t *)sub_32A48(13);
    std::string::size_type v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      std::string::size_type v17 = "VirtualAudio_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 1417;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"Error getting the current hardware stream format\"", (uint8_t *)&v16, 0x12u);
    }
    uint64_t v12 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v12 = &off_6414D8;
    void v12[2] = v5;
  }
  if (*(void *)(v4 + 624) && *(double *)buf != *a2)
  {
    unint64_t v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      std::string::size_type v17 = "VirtualAudio_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 1422;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareIllegalOperationError): \"Sample rate changes are currently blocked by policy.\"", (uint8_t *)&v16, 0x12u);
    }
    unint64_t v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v15 = &off_6414D8;
    void v15[2] = 1852797029;
  }
  (*(void (**)(void, double *, uint64_t))(**(void **)(v4 + 1008) + 520))(*(void *)(v4 + 1008), a2, v2);
  sub_CC518((uint64_t *)v4, (uint64_t)a2, v2);
  return 1;
}

void sub_E8A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __int16 v9 = (os_log_t *)sub_32A48(1);
    int v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315394;
        *(void *)((char *)&a9 + 4) = "VirtualAudio_Device.cpp";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 1440;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error re-setting the current stream format", (uint8_t *)&a9, 0x12u);
      }
    }
    __cxa_end_catch();
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_E8B18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  int v5 = *(char *)(a1 + 55);
  if (v5 < 0) {
    uint64_t v6 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 55);
  }
  if (!v6)
  {
    std::to_string(&v49, *(_DWORD *)(a1 + 8));
    int v7 = std::string::insert(&v49, 0, "[ id: ", 6uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v9 = &v50;
    }
    else {
      __int16 v9 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v50.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v9, size);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    snprintf((char *)&__str, 0x13uLL, "%p", (const void *)a1);
    sub_21C8C(&v49, (char *)&__str);
    std::string::size_type v11 = std::string::insert(&v49, 0, "; addr: ", 8uLL);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v13 = &v50;
    }
    else {
      unint64_t v13 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = v50.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v13, v14);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 120) + 88))(*(void *)(a1 + 120))) {
      unint64_t v15 = "out";
    }
    else {
      unint64_t v15 = "in";
    }
    sub_21C8C(&v49, v15);
    int v16 = std::string::insert(&v49, 0, "; dir: ", 7uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v18 = &v50;
    }
    else {
      __int16 v18 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v19 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v19 = v50.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v18, v19);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    uint64_t v20 = *(unsigned int **)(a1 + 112);
    std::to_string(&v48, v20[2]);
    __int16 v21 = std::string::insert(&v48, 0, "[ ", 2uLL);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::string v23 = std::string::append(&__str, "/", 1uLL);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    snprintf(__s, 0x13uLL, "%p", v20);
    sub_21C8C(__p, __s);
    if ((v47 & 0x80u) == 0) {
      uint64_t v25 = __p;
    }
    else {
      uint64_t v25 = (void **)__p[0];
    }
    if ((v47 & 0x80u) == 0) {
      std::string::size_type v26 = v47;
    }
    else {
      std::string::size_type v26 = (std::string::size_type)__p[1];
    }
    uint64_t v27 = std::string::append(&v49, (const std::string::value_type *)v25, v26);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    long long v29 = std::string::append(&v50, " ]", 2uLL);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if ((char)v47 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    uint64_t v31 = std::string::insert(&v43, 0, "; owning VAD: ", 0xEuLL);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    int64_t v45 = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v44 = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (v45 >= 0) {
      uint64_t v33 = v44;
    }
    else {
      uint64_t v33 = (void **)v44[0];
    }
    if (v45 >= 0) {
      std::string::size_type v34 = HIBYTE(v45);
    }
    else {
      std::string::size_type v34 = (std::string::size_type)v44[1];
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v33, v34);
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    sub_4F64((uint64_t)&v49, (os_unfair_lock_t)(*(void *)(a1 + 120) + 8));
    uint64_t v35 = std::string::insert(&v49, 0, "; virt strms: ", 0xEuLL);
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v37 = &v50;
    }
    else {
      int v37 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v38 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v38 = v50.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v37, v38);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 120) + 160))(&__str);
    sub_9264(&v49, (uint64_t)&__str, 1);
    uint64_t v39 = std::string::insert(&v49, 0, "; associated ports: ", 0x14uLL);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v41 = &v50;
    }
    else {
      uint64_t v41 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v42 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v42 = v50.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 32), (const std::string::value_type *)v41, v42);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    sub_8108((uint64_t *)&__str);
    std::string::append((std::string *)(a1 + 32), " ]", 2uLL);
    if ((*(unsigned char *)(a1 + 55) & 0x80) == 0) {
      goto LABEL_6;
    }
LABEL_87:
    sub_21E8C((unsigned char *)a2, *(void **)(a1 + 32), *(void *)(a1 + 40));
    goto LABEL_88;
  }
  if ((v5 & 0x80) != 0) {
    goto LABEL_87;
  }
LABEL_6:
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 16) = *(void *)(a1 + 48);
LABEL_88:
  os_unfair_lock_unlock(v4);
}

void sub_E90BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  os_unfair_lock_unlock(v42);
  _Unwind_Resume(a1);
}

double sub_E9214(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) == 0)
  {
    uint64_t v35 = (os_log_t *)sub_32A48(13);
    long long v36 = *v35;
    if (*v35 && os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
    {
      *(void *)char v97 = *(void *)a2;
      *(_DWORD *)&v97[8] = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)v97);
      int v37 = SBYTE3(v108) >= 0 ? __p : *(unsigned char **)__p;
      buf[0] = 136315650;
      *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 221;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v37;
      _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", (uint8_t *)buf, 0x1Cu);
      if (SBYTE3(v108) < 0) {
        operator delete(*(void **)__p);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    uint64_t v39 = (os_log_t *)sub_32A48(13);
    long long v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      *(void *)char v97 = *(void *)a2;
      *(_DWORD *)&v97[8] = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)v97);
      uint64_t v41 = SBYTE3(v108) >= 0 ? __p : *(unsigned char **)__p;
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 222;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v41;
      LOWORD(buf[7]) = 1024;
      *(_DWORD *)((char *)&buf[7] + 2) = a3;
      HIWORD(buf[8]) = 2048;
      *(void *)&buf[9] = a4;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        (uint8_t *)buf,
        0x2Cu);
      if (SBYTE3(v108) < 0) {
        operator delete(*(void **)__p);
      }
    }
    std::string::size_type v42 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string::size_type v42 = &off_6414D8;
    v42[2] = 561211770;
  }
  if (!a6)
  {
    std::string v43 = (os_log_t *)sub_32A48(13);
    uint64_t v44 = *v43;
    if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
    {
      *(void *)char v97 = *(void *)a2;
      *(_DWORD *)&v97[8] = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)v97);
      int64_t v45 = SBYTE3(v108) >= 0 ? __p : *(unsigned char **)__p;
      buf[0] = 136315906;
      *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 223;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = "inData";
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v45;
      _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", (uint8_t *)buf, 0x26u);
      if (SBYTE3(v108) < 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v46 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v46 = &off_6414D8;
    v46[2] = 561211770;
  }
  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 40))(a1, a2) & 1) == 0)
  {
    unsigned __int8 v47 = (os_log_t *)sub_32A48(13);
    std::string v48 = *v47;
    if (*v47 && os_log_type_enabled(*v47, OS_LOG_TYPE_ERROR))
    {
      *(void *)char v97 = *(void *)a2;
      *(_DWORD *)&v97[8] = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)v97);
      std::string v49 = SBYTE3(v108) >= 0 ? __p : *(unsigned char **)__p;
      buf[0] = 136315650;
      *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 224;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v49;
      _os_log_impl(&def_1E50E8, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", (uint8_t *)buf, 0x1Cu);
      if (SBYTE3(v108) < 0) {
        operator delete(*(void **)__p);
      }
    }
    std::string v50 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string v50 = &off_6414D8;
    v50[2] = 1852797029;
  }
  int v12 = *a2;
  if (*a2 == 1936092532 || v12 == 1885762592)
  {
    uint64_t v13 = sub_32A48(4);
    uint64_t v14 = sub_32A48(35);
    char v15 = 0;
    uint64_t v16 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v17 = *(void *)(v13 + 8);
    while (1)
    {
      uint64_t v18 = (int)buf[v16];
      char v19 = v15;
      if (((v17 & v18) != 0) != ((*(void *)(v14 + 8) & v18) != 0)) {
        break;
      }
      char v15 = 1;
      uint64_t v16 = 1;
      if (v19) {
        goto LABEL_13;
      }
    }
    if ((v17 & v18) == 0) {
      uint64_t v13 = v14;
    }
LABEL_13:
    uint64_t v20 = *(NSObject **)v13;
    if (v20 && os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v21 = *a2 == 1885762592 ? "physical" : "virtual";
      sub_259A4((std::string *)__p, a6);
      long long v22 = SBYTE3(v108) >= 0 ? __p : *(unsigned char **)__p;
      int v23 = *(_DWORD *)(a1 + 8);
      buf[0] = 136316162;
      *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
      LOWORD(buf[3]) = 1024;
      *(_DWORD *)((char *)&buf[3] + 2) = 226;
      HIWORD(buf[4]) = 2080;
      *(void *)&buf[5] = v21;
      LOWORD(buf[7]) = 2080;
      *(void *)((char *)&buf[7] + 2) = v22;
      HIWORD(buf[9]) = 1024;
      buf[10] = v23;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Client request to set %s format %s on virtual audio stream %u.", (uint8_t *)buf, 0x2Cu);
      if (SBYTE3(v108) < 0) {
        operator delete(*(void **)__p);
      }
    }
    int v12 = *a2;
  }
  if (v12 > 1936092514)
  {
    if (v12 == 1936092515)
    {
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
      {
        int v72 = (os_log_t *)sub_32A48(13);
        char v73 = *v72;
        if (*v72 && os_log_type_enabled(*v72, OS_LOG_TYPE_ERROR))
        {
          *(void *)char v97 = *(void *)a2;
          *(_DWORD *)&v97[8] = a2[2];
          sub_16C9C4((uint64_t)__p, (unsigned int *)v97);
          int v74 = SBYTE3(v108);
          char v75 = *(unsigned char **)__p;
          int v76 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
          unsigned int v77 = __p;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
          if (v74 < 0) {
            unsigned int v77 = v75;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 294;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v77;
          LOWORD(buf[7]) = 1024;
          *(_DWORD *)((char *)&buf[7] + 2) = a5;
          HIWORD(buf[8]) = 1024;
          buf[9] = v76;
          _os_log_impl(&def_1E50E8, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)buf,
            0x28u);
          if (SBYTE3(v108) < 0) {
            operator delete(*(void **)__p);
          }
        }
        uint64_t v78 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v78 = &off_6414D8;
        v78[2] = 561211770;
      }
      (*(void (**)(void, int *, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 120) + 48))(*(void *)(a1 + 120), a2, a3, a4, a5, a6);
      sub_CBCD0(*(atomic_ullong **)(a1 + 112));
    }
    else
    {
      if (v12 != 1936092532) {
        goto LABEL_52;
      }
      if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
      {
        uint64_t v58 = (os_log_t *)sub_32A48(13);
        uint64_t v59 = *v58;
        if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
        {
          *(void *)char v97 = *(void *)a2;
          *(_DWORD *)&v97[8] = a2[2];
          sub_16C9C4((uint64_t)__p, (unsigned int *)v97);
          int v60 = SBYTE3(v108);
          uint64_t v61 = *(unsigned char **)__p;
          int v62 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
          int v63 = __p;
          buf[0] = 136316162;
          *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
          if (v60 < 0) {
            int v63 = v61;
          }
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 233;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v63;
          LOWORD(buf[7]) = 1024;
          *(_DWORD *)((char *)&buf[7] + 2) = a5;
          HIWORD(buf[8]) = 1024;
          buf[9] = v62;
          _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            (uint8_t *)buf,
            0x28u);
          if (SBYTE3(v108) < 0) {
            operator delete(*(void **)__p);
          }
        }
        uint64_t v64 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v64 = &off_6414D8;
        v64[2] = 561211770;
      }
      long long v28 = *(_OWORD *)(a6 + 16);
      *(_OWORD *)int buf = *(_OWORD *)a6;
      *(_OWORD *)&uint8_t buf[4] = v28;
      *(void *)&uint8_t buf[8] = *(void *)(a6 + 32);
      if (*(unsigned char *)(a1 + 129) && !sub_EA5EC(*(void *)(a1 + 120), (double *)buf))
      {
        uint64_t v90 = (os_log_t *)sub_32A48(13);
        int v91 = *v90;
        if (*v90 && os_log_type_enabled(*v90, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = "VirtualAudio_Stream.cpp";
          __int16 v105 = 1024;
          int v106 = 239;
          _os_log_impl(&def_1E50E8, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): \"Sample rate changes are not allowed currently.\"", __p, 0x12u);
        }
        int v92 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v92 = &off_6414D8;
        v92[2] = 560226676;
      }
      if ((sub_1E3B0C(*(void *)(a1 + 104), (uint64_t)buf) & 1) == 0)
      {
        char v83 = (os_log_t *)sub_32A48(4);
        int v84 = *v83;
        if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_DEBUG))
        {
          sub_259A4((std::string *)v97, (uint64_t)buf);
          char v85 = SBYTE3(v101) >= 0 ? v97 : *(unsigned char **)v97;
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = "VirtualAudio_Stream.cpp";
          __int16 v105 = 1024;
          int v106 = 244;
          __int16 v107 = 2080;
          char v108 = v85;
          _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempt to set unsupported value for kAudioStreamPropertyVirtualFormat (%s). Poor form but not likely a serious issue. Quietly returning failure.", __p, 0x1Cu);
          if (SBYTE3(v101) < 0) {
            operator delete(*(void **)v97);
          }
        }
        int v86 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v86 = &off_6414D8;
        v86[2] = 560226676;
      }
      sub_1E3C0C((uint64_t *)(*(void *)(a1 + 104) + 80), (long long *)buf, *(double *)(*(void *)(a1 + 104) + 16));
      int v96 = 40;
      (*(void (**)(uint64_t, int *, void, void, int *, unsigned char *))(*(void *)a1 + 56))(a1, a2, 0, 0, &v96, __p);
      if (sub_A6DD8(__p, buf, 0))
      {
        uint64_t v29 = sub_32A48(4);
        if (*(unsigned char *)(v29 + 8))
        {
          long long v30 = *(NSObject **)v29;
          if (*(void *)v29)
          {
            if (os_log_type_enabled(*(os_log_t *)v29, OS_LOG_TYPE_DEBUG))
            {
              sub_259A4(&v95, (uint64_t)buf);
              int v31 = SHIBYTE(v95.__r_.__value_.__r.__words[2]);
              std::string::size_type v32 = v95.__r_.__value_.__r.__words[0];
              sub_259A4(&v94, (uint64_t)__p);
              uint64_t v33 = &v95;
              if (v31 < 0) {
                uint64_t v33 = (std::string *)v32;
              }
              if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v34 = &v94;
              }
              else {
                std::string::size_type v34 = (std::string *)v94.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)char v97 = 136315906;
              *(void *)&v97[4] = "VirtualAudio_Stream.cpp";
              __int16 v98 = 1024;
              int v99 = 258;
              __int16 v100 = 2080;
              int v101 = v33;
              __int16 v102 = 2080;
              uint64_t v103 = v34;
              _os_log_impl(&def_1E50E8, v30, OS_LOG_TYPE_DEBUG, "%25s:%-5d Requested stream format %s is equivalent to the current format %s.  Ignoring the new format request.", v97, 0x26u);
              if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v94.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v95.__r_.__value_.__l.__data_);
              }
            }
          }
        }
      }
      else
      {
        *(double *)&long long v26 = sub_1E3DAC(*(void *)(a1 + 104), (long long *)buf);
      }
    }
  }
  else
  {
    if (v12 != 1718641517)
    {
      if (v12 == 1885762592)
      {
        if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
        {
          uint64_t v51 = (os_log_t *)sub_32A48(13);
          int v52 = *v51;
          if (*v51 && os_log_type_enabled(*v51, OS_LOG_TYPE_ERROR))
          {
            *(void *)char v97 = *(void *)a2;
            *(_DWORD *)&v97[8] = a2[2];
            sub_16C9C4((uint64_t)__p, (unsigned int *)v97);
            int v53 = SBYTE3(v108);
            char v54 = *(unsigned char **)__p;
            int v55 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
            uint64_t v56 = __p;
            buf[0] = 136316162;
            *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
            if (v53 < 0) {
              uint64_t v56 = v54;
            }
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 270;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = v56;
            LOWORD(buf[7]) = 1024;
            *(_DWORD *)((char *)&buf[7] + 2) = a5;
            HIWORD(buf[8]) = 1024;
            buf[9] = v55;
            _os_log_impl(&def_1E50E8, v52, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
              (uint8_t *)buf,
              0x28u);
            if (SBYTE3(v108) < 0) {
              operator delete(*(void **)__p);
            }
          }
          int v57 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v57 = &off_6414D8;
          v57[2] = 561211770;
        }
        long long v24 = *(_OWORD *)(a6 + 16);
        *(_OWORD *)int buf = *(_OWORD *)a6;
        *(_OWORD *)&uint8_t buf[4] = v24;
        *(void *)&uint8_t buf[8] = *(void *)(a6 + 32);
        if (*(unsigned char *)(a1 + 129) && !sub_EA5EC(*(void *)(a1 + 120), (double *)buf))
        {
          char v87 = (os_log_t *)sub_32A48(13);
          int v88 = *v87;
          if (*v87 && os_log_type_enabled(*v87, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "VirtualAudio_Stream.cpp";
            __int16 v105 = 1024;
            int v106 = 276;
            _os_log_impl(&def_1E50E8, v88, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioDeviceUnsupportedFormatError): \"Sample rate changes are not allowed currently.\"", __p, 0x12u);
          }
          uint64_t v89 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v89 = &off_6414D8;
          v89[2] = 560226676;
        }
        if ((sub_1E3B0C(*(void *)(a1 + 104), (uint64_t)buf) & 1) == 0)
        {
          uint64_t v79 = (os_log_t *)sub_32A48(4);
          uint64_t v80 = *v79;
          if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_DEBUG))
          {
            sub_259A4((std::string *)v97, (uint64_t)buf);
            char v81 = SBYTE3(v101) >= 0 ? v97 : *(unsigned char **)v97;
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = "VirtualAudio_Stream.cpp";
            __int16 v105 = 1024;
            int v106 = 281;
            __int16 v107 = 2080;
            char v108 = v81;
            _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_DEBUG, "%25s:%-5d Attempt to set unsupported value for kAudioStreamPropertyPhysicalFormat (%s). Poor form but not likely a serious issue. Quietly returning failure.", __p, 0x1Cu);
            if (SBYTE3(v101) < 0) {
              operator delete(*(void **)v97);
            }
          }
          int v82 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v82 = &off_6414D8;
          void v82[2] = 560226676;
        }
        sub_1E3C0C((uint64_t *)(*(void *)(a1 + 104) + 56), (long long *)buf, *(double *)(*(void *)(a1 + 104) + 16));
        uint64_t v25 = *(void *)(a1 + 104);
        if ((*(unsigned int (**)(void, _DWORD *))(**(void **)(v25 + 8) + 176))(*(void *)(v25 + 8), buf))
        {
          uint64_t v27 = *(void *)&buf[8];
          long long v26 = *(_OWORD *)&buf[4];
          *(_OWORD *)(v25 + 16) = *(_OWORD *)buf;
          *(_OWORD *)(v25 + 32) = v26;
          *(void *)(v25 + 48) = v27;
        }
        return *(double *)&v26;
      }
LABEL_52:
      sub_3A60D0(a1, a2, a3, a4, a5, a6);
      return *(double *)&v26;
    }
    if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4) != a5)
    {
      char v65 = (os_log_t *)sub_32A48(13);
      int v66 = *v65;
      if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
      {
        *(void *)char v97 = *(void *)a2;
        *(_DWORD *)&v97[8] = a2[2];
        sub_16C9C4((uint64_t)__p, (unsigned int *)v97);
        int v67 = SBYTE3(v108);
        int v68 = *(unsigned char **)__p;
        int v69 = (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 48))(a1, a2, a3, a4);
        int v70 = __p;
        buf[0] = 136316162;
        *(void *)&buf[1] = "VirtualAudio_Stream.cpp";
        if (v67 < 0) {
          int v70 = v68;
        }
        LOWORD(buf[3]) = 1024;
        *(_DWORD *)((char *)&buf[3] + 2) = 299;
        HIWORD(buf[4]) = 2080;
        *(void *)&buf[5] = v70;
        LOWORD(buf[7]) = 1024;
        *(_DWORD *)((char *)&buf[7] + 2) = a5;
        HIWORD(buf[8]) = 1024;
        buf[9] = v69;
        _os_log_impl(&def_1E50E8, v66, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          (uint8_t *)buf,
          0x28u);
        if (SBYTE3(v108) < 0) {
          operator delete(*(void **)__p);
        }
      }
      char v71 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v71 = &off_6414D8;
      v71[2] = 561211770;
    }
    (*(void (**)(void, int *, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 120) + 48))(*(void *)(a1 + 120), a2, a3, a4, a5, a6);
  }
  return *(double *)&v26;
}

void sub_EA5A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_EA5EC(uint64_t a1, double *a2)
{
  int v3 = (*(uint64_t (**)(uint64_t, double *))(*(void *)a1 + 112))(a1, v9);
  if (v3)
  {
    int v8 = v3;
    int v5 = (os_log_t *)sub_32A48(13);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      std::string::size_type v11 = "VirtualAudio_Stream.cpp";
      __int16 v12 = 1024;
      int v13 = 579;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (status) [error status is an error]: \"mStream->GetCurrentFormat returned an error\"", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = v8;
  }
  return v9[0] == *a2;
}

void sub_EA734(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, int *a5, int *a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) == 0)
  {
    uint64_t v33 = (os_log_t *)sub_32A48(13);
    std::string::size_type v34 = *v33;
    if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v78 = *(void **)a2;
      LODWORD(v79) = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v78);
      uint64_t v35 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 149;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v35;
      _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    int v37 = (os_log_t *)sub_32A48(13);
    std::string::size_type v38 = *v37;
    if (*v37 && os_log_type_enabled(*v37, OS_LOG_TYPE_ERROR))
    {
      uint64_t v78 = *(void **)a2;
      LODWORD(v79) = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v78);
      uint64_t v39 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 150;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v39;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)int v82 = a3;
      *(_WORD *)&v82[4] = 2048;
      *(void *)&v82[6] = a4;
      _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    long long v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v40 = &off_6414D8;
    void v40[2] = 561211770;
  }
  if (!a6)
  {
    uint64_t v41 = (os_log_t *)sub_32A48(13);
    std::string::size_type v42 = *v41;
    if (*v41 && os_log_type_enabled(*v41, OS_LOG_TYPE_ERROR))
    {
      uint64_t v78 = *(void **)a2;
      LODWORD(v79) = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v78);
      std::string v43 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 151;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = "outData";
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)int v82 = v43;
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v44 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v44 = &off_6414D8;
    v44[2] = 561211770;
  }
  int v12 = *a2;
  if (*a2 > 1936092514)
  {
    if (v12 > 1936482675)
    {
      if (v12 != 1936482676)
      {
        int v13 = 1952542835;
LABEL_21:
        if (v12 == v13) {
          goto LABEL_22;
        }
LABEL_49:
        sub_167A68(a1, a2, a3, (uint64_t)a4, a5, a6);
        goto LABEL_24;
      }
LABEL_22:
      int v17 = *a5;
      if (v17 != (*(unsigned int (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        int64_t v45 = (os_log_t *)sub_32A48(13);
        uint64_t v46 = *v45;
        if (*v45 && os_log_type_enabled(*v45, OS_LOG_TYPE_ERROR))
        {
          uint64_t v78 = *(void **)a2;
          LODWORD(v79) = a2[2];
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v78);
          int v47 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v48 = __p.__r_.__value_.__r.__words[0];
          int v49 = *a5;
          int v50 = (*(uint64_t (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          p_p = &__p;
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
          if (v47 < 0) {
            p_p = (std::string *)v48;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 208;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = p_p;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)int v82 = v49;
          *(_WORD *)&v82[4] = 1024;
          *(_DWORD *)&v82[6] = v50;
          _os_log_impl(&def_1E50E8, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        int v52 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v52 = &off_6414D8;
        v52[2] = 561211770;
      }
      (*(void (**)(void, int *, uint64_t, _DWORD *, int *, int *))(**(void **)(a1 + 120) + 40))(*(void *)(a1 + 120), a2, a3, a4, a5, a6);
      goto LABEL_24;
    }
    if (v12 == 1936092515) {
      goto LABEL_22;
    }
    if (v12 != 1936222577) {
      goto LABEL_49;
    }
    int v14 = *a5;
    if (v14 != (*(unsigned int (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, a2, a3, a4))
    {
      uint64_t v61 = (os_log_t *)sub_32A48(13);
      int v62 = *v61;
      if (*v61 && os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
      {
        uint64_t v78 = *(void **)a2;
        LODWORD(v79) = a2[2];
        sub_16C9C4((uint64_t)&__p, (unsigned int *)&v78);
        int v63 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v64 = __p.__r_.__value_.__r.__words[0];
        int v65 = *a5;
        int v66 = (*(uint64_t (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, a2, a3, a4);
        int v67 = &__p;
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
        if (v63 < 0) {
          int v67 = (std::string *)v64;
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 198;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v67;
        *(_WORD *)&unsigned char buf[28] = 1024;
        *(_DWORD *)int v82 = v65;
        *(_WORD *)&v82[4] = 1024;
        *(_DWORD *)&v82[6] = v66;
        _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
          buf,
          0x28u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      int v68 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v68 = &off_6414D8;
      v68[2] = 561211770;
    }
    *a6 = *(unsigned __int8 *)(a1 + 128);
  }
  else
  {
    if (v12 <= 1935765618)
    {
      if (v12 != 1685025633)
      {
        int v13 = 1718641517;
        goto LABEL_21;
      }
      goto LABEL_22;
    }
    if (v12 == 1935765619)
    {
      int v29 = *a5;
      if (v29 != (*(unsigned int (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        int v53 = (os_log_t *)sub_32A48(13);
        char v54 = *v53;
        if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
        {
          uint64_t v78 = *(void **)a2;
          LODWORD(v79) = a2[2];
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v78);
          int v55 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v56 = __p.__r_.__value_.__r.__words[0];
          int v57 = *a5;
          int v58 = (*(uint64_t (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          uint64_t v59 = &__p;
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
          if (v55 < 0) {
            uint64_t v59 = (std::string *)v56;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 157;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v59;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)int v82 = v57;
          *(_WORD *)&v82[4] = 1024;
          *(_DWORD *)&v82[6] = v58;
          _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        int v60 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v60 = &off_6414D8;
        v60[2] = 561211770;
      }
      (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 120) + 160))(&__p);
      memset(buf, 0, 24);
      strcpy(&buf[24], "cwdv");
      void v82[2] = 0;
      *(_DWORD *)&v82[10] = 3;
      v84[0] = 0;
      v84[1] = 0;
      char v83 = v84;
      CFTypeRef v86 = 0;
      int v85 = 44739240;
      if (a4 && *a4 == 1935895670) {
        int v85 = 44731048;
      }
      sub_2E3690((uint64_t *)&v78, *(void *)(a1 + 16), (uint64_t)&__p, (uint64_t)buf);
      sub_45120((uint64_t)cf, v78, &v79);
      if (cf[0])
      {
        CFRetain(cf[0]);
        CFTypeRef v30 = cf[0];
      }
      else
      {
        CFTypeRef v30 = 0;
      }
      *(void *)a6 = v30;
      sub_3D61C((uint64_t)cf);
      sub_463E0(v79);
      if (v86) {
        CFRelease(v86);
      }
      sub_463E0(v84[0]);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      sub_8108((uint64_t *)&__p);
    }
    else
    {
      if (v12 != 1935765620) {
        goto LABEL_49;
      }
      int v15 = *a5;
      if (v15 != (*(unsigned int (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, a2, a3, a4))
      {
        int v69 = (os_log_t *)sub_32A48(13);
        int v70 = *v69;
        if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
        {
          uint64_t v78 = *(void **)a2;
          LODWORD(v79) = a2[2];
          sub_16C9C4((uint64_t)&__p, (unsigned int *)&v78);
          int v71 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v72 = __p.__r_.__value_.__r.__words[0];
          int v73 = *a5;
          int v74 = (*(uint64_t (**)(uint64_t, int *, uint64_t, _DWORD *))(*(void *)a1 + 48))(a1, a2, a3, a4);
          char v75 = &__p;
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
          if (v71 < 0) {
            char v75 = (std::string *)v72;
          }
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 173;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v75;
          *(_WORD *)&unsigned char buf[28] = 1024;
          *(_DWORD *)int v82 = v73;
          *(_WORD *)&v82[4] = 1024;
          *(_DWORD *)&v82[6] = v74;
          _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Provided data size for property %s did not match required size (passed: %u; required: %u).",
            buf,
            0x28u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        int v76 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v76 = &off_6414D8;
        v76[2] = 561211770;
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 257;
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 120) + 160))(buf);
      BOOL v16 = a4 && *a4 == 1935895670;
      for (uint64_t i = *(void *)&buf[8]; (unsigned char *)i != buf; uint64_t i = *(void *)(i + 8))
      {
        sub_549A4((uint64_t *)&v78, (uint64_t *)(i + 16), "", 187);
        if (!v16 || (v78[23] & 0x10) != 0) {
          sub_451D0((uint64_t)&__p, *((_DWORD *)v78 + 36));
        }
        if (v79) {
          sub_4636C(v79);
        }
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        CFRetain(__p.__r_.__value_.__l.__data_);
        std::string::size_type v32 = __p.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::string::size_type v32 = 0;
      }
      *(void *)a6 = v32;
      sub_8108((uint64_t *)buf);
      sub_3D61C((uint64_t)&__p);
    }
  }
LABEL_24:
  if (*a2 == 1936092532 || *a2 == 1885762592)
  {
    uint64_t v18 = sub_32A48(4);
    uint64_t v19 = sub_32A48(35);
    char v20 = 0;
    uint64_t v21 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v22 = *(void *)(v18 + 8);
    while (1)
    {
      uint64_t v23 = *(int *)&buf[4 * v21];
      char v24 = v20;
      if (((v22 & v23) != 0) != ((*(void *)(v19 + 8) & v23) != 0)) {
        break;
      }
      char v20 = 1;
      uint64_t v21 = 1;
      if (v24) {
        goto LABEL_32;
      }
    }
    if ((v22 & v23) == 0) {
      uint64_t v18 = v19;
    }
LABEL_32:
    uint64_t v25 = *(NSObject **)v18;
    if (v25 && os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      if (*a2 == 1885762592) {
        long long v26 = "physical";
      }
      else {
        long long v26 = "virtual";
      }
      sub_259A4(&__p, (uint64_t)a6);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = &__p;
      }
      else {
        uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v28 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 216;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v26;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)int v82 = v27;
      *(_WORD *)&char v82[8] = 1024;
      *(_DWORD *)&v82[10] = v28;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_INFO, "%25s:%-5d Client request to get %s format (%s) on virtual audio stream %u.", buf, 0x2Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_EB618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_EB6C8(void **a1, int *a2, int a3, uint64_t a4)
{
  if ((((uint64_t (*)(void **))(*a1)[4])(a1) & 1) == 0)
  {
    int v12 = (os_log_t *)sub_32A48(13);
    int v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)a2;
      int v21 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v20);
      int v14 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v25 = "VirtualAudio_Stream.cpp";
      __int16 v26 = 1024;
      int v27 = 117;
      __int16 v28 = 2080;
      int v29 = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    BOOL v16 = (os_log_t *)sub_32A48(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)a2;
      int v21 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v20);
      uint64_t v18 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      uint64_t v25 = "VirtualAudio_Stream.cpp";
      __int16 v26 = 1024;
      int v27 = 118;
      __int16 v28 = 2080;
      int v29 = v18;
      __int16 v30 = 1024;
      int v31 = a3;
      __int16 v32 = 2048;
      uint64_t v33 = a4;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = &off_6414D8;
    v19[2] = 561211770;
  }
  int v8 = *a2;
  if (*a2 <= 1936092514)
  {
    if ((v8 - 1935765619) < 2) {
      return 8;
    }
    if (v8 != 1685025633)
    {
      int v9 = 1718641517;
      goto LABEL_12;
    }
    return 4;
  }
  if (v8 <= 1936482675)
  {
    if (v8 != 1936092515)
    {
      int v9 = 1936222577;
      goto LABEL_12;
    }
    return 4;
  }
  if (v8 == 1952542835)
  {
    std::string::size_type v11 = *(uint64_t (**)(void))(*a1[15] + 32);
    return v11();
  }
  int v9 = 1936482676;
LABEL_12:
  if (v8 == v9) {
    return 4;
  }

  return sub_1682C4((uint64_t)a1, a2);
}

uint64_t sub_EBAEC(uint64_t a1, int *a2)
{
  uint64_t v2 = 0;
  int v3 = *a2;
  if (*a2 > 1936092514)
  {
    if (v3 > 1936482675)
    {
      if (v3 != 1936482676)
      {
        if (v3 == 1952542835) {
          return (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 24))();
        }
        return sub_168390(a1, a2);
      }
    }
    else
    {
      if (v3 == 1936092515) {
        return 1;
      }
      if (v3 != 1936222577) {
        return sub_168390(a1, a2);
      }
    }
    return v2;
  }
  if ((v3 - 1935765619) < 2 || v3 == 1685025633) {
    return v2;
  }
  if (v3 == 1718641517) {
    return 1;
  }
  return sub_168390(a1, a2);
}

uint64_t sub_EBBC4(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 <= 1936092514)
  {
    BOOL v3 = (v2 - 1935765619) < 2 || v2 == 1685025633;
    int v4 = 1718641517;
LABEL_8:
    if (!v3 && v2 != v4) {
      return sub_168440(a1, a2);
    }
    return 1;
  }
  if (v2 <= 1936482675)
  {
    BOOL v3 = v2 == 1936092515;
    int v4 = 1936222577;
    goto LABEL_8;
  }
  if (v2 == 1936482676) {
    return 1;
  }
  if (v2 == 1952542835) {
    return (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 16))();
  }
  return sub_168440(a1, a2);
}

void sub_EBC80(void *a1)
{
  sub_1687FC(a1);

  operator delete();
}

uint64_t sub_EBCBC(uint64_t a1, int a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(v9);
  for (uint64_t i = (uint64_t *)v9[1]; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == v9)
    {
      uint64_t v7 = 0;
      goto LABEL_10;
    }
    int v4 = (std::__shared_weak_count *)i[3];
    if (v4)
    {
      int v5 = std::__shared_weak_count::lock(v4);
      if (v5) {
        break;
      }
    }
LABEL_8:
    ;
  }
  uint64_t v6 = i[2];
  if (!v6 || *(_DWORD *)(v6 + 144) != a2)
  {
    sub_4636C(v5);
    goto LABEL_8;
  }
  sub_4636C(v5);
  uint64_t v7 = 1;
LABEL_10:
  sub_8108(v9);
  return v7;
}

uint64_t sub_EBD70(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  sub_3B7EC();
  char v87 = &qword_64CC40;
  char v88 = (*(uint64_t (**)(void))(qword_64CC40 + 16))();
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6)
  {
    uint64_t v86 = 0;
    long long v84 = 0u;
    long long v85 = 0u;
    unsigned int v7 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v6 + 112))(v6, &v84);
    uint64_t v8 = v7 == 0;
    if (v7)
    {
      int v9 = (os_log_t *)sub_32A48(4);
      os_log_t v10 = *v9;
      if (!*v9 || !os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_152;
      }
      sub_2417C(__p, v7);
      if ((SBYTE7(v92) & 0x80u) == 0) {
        std::string::size_type v11 = __p;
      }
      else {
        std::string::size_type v11 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 539;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v11;
      int v12 = "%25s:%-5d error '%s' getting underlying stream format";
      int v13 = v10;
      os_log_type_t v14 = OS_LOG_TYPE_ERROR;
      uint32_t v15 = 28;
      goto LABEL_150;
    }
    uint64_t v19 = *(void *)(a1 + 104);
    uint64_t v18 = *(void **)(a1 + 112);
    long long v20 = *(_OWORD *)(v19 + 32);
    long long v81 = *(_OWORD *)(v19 + 16);
    long long v82 = v20;
    uint64_t v83 = *(void *)(v19 + 48);
    double v21 = *(double *)&v81;
    if (*(double *)&v81 != 0.0 && *(double *)&v84 != 0.0 && *(double *)&v81 != *(double *)&v84
      || DWORD2(v81) && DWORD2(v84) && DWORD2(v81) != DWORD2(v84)
      || v82 && v85 && v82 != v85
      || DWORD1(v82) && DWORD1(v85) && DWORD1(v82) != DWORD1(v85)
      || DWORD2(v82) && DWORD2(v85) && DWORD2(v82) != DWORD2(v85)
      || HIDWORD(v82) && HIDWORD(v85) && HIDWORD(v82) != HIDWORD(v85)
      || v83 && v86 && v83 != v86
      || (sub_EBDC((uint64_t)&v81, (uint64_t)&v84) & 1) == 0)
    {
      long long v22 = *(_OWORD *)(v19 + 32);
      *(_OWORD *)int buf = *(_OWORD *)(v19 + 16);
      *(_OWORD *)&buf[16] = v22;
      *(void *)&unsigned char buf[32] = *(void *)(v19 + 48);
      *(_OWORD *)std::string __p = v84;
      long long v92 = v85;
      uint64_t v93 = v86;
      if (*(double *)buf != 0.0 && *(double *)__p != 0.0 && *(double *)buf != *(double *)__p
        || *(_DWORD *)&buf[8] && LODWORD(__p[1]) && *(_DWORD *)&buf[8] != LODWORD(__p[1])
        || *(_DWORD *)&buf[16] && v92 && *(_DWORD *)&buf[16] != v92
        || *(_DWORD *)&buf[20] && DWORD1(v92) && *(_DWORD *)&buf[20] != DWORD1(v92)
        || *(_DWORD *)&buf[24] && DWORD2(v92) && *(_DWORD *)&buf[24] != DWORD2(v92)
        || *(_DWORD *)&buf[28] && HIDWORD(v92) && *(_DWORD *)&buf[28] != HIDWORD(v92)
        || *(_DWORD *)&buf[32] && v93 && *(_DWORD *)&buf[32] != v93)
      {
        int v23 = 1;
      }
      else
      {
        int v23 = sub_EBDC((uint64_t)buf, (uint64_t)__p) ^ 1;
      }
      double v24 = *(double *)&v84;
      int v79 = HIDWORD(v85);
      int v80 = HIDWORD(v82);
      int v25 = *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 92);
      if (*(unsigned char *)(a1 + 88)) {
        int v26 = 1768845428;
      }
      else {
        int v26 = 1869968496;
      }
      LODWORD(v89) = 1885762592;
      HIDWORD(v89) = v26;
      int v90 = v25;
      sub_74758(a2, (int *)&v89);
      if (v25 == 1)
      {
        int v90 = 0;
        sub_74758(a2, (int *)&v89);
      }
      uint64_t v89 = 0x676C6F6270667420;
      int v90 = 0;
      sub_74758(a3, (int *)&v89);
      if (v23)
      {
        if (*(unsigned char *)(a1 + 88)) {
          int v27 = 1768845428;
        }
        else {
          int v27 = 1869968496;
        }
        LODWORD(v89) = 1936092532;
        HIDWORD(v89) = v27;
        int v90 = *(_DWORD *)(a1 + 96) + *(_DWORD *)(a1 + 92);
        sub_74758(a2, (int *)&v89);
        if (v25 == 1)
        {
          int v90 = 0;
          sub_74758(a2, (int *)&v89);
        }
        uint64_t v89 = 0x676C6F6273666D74;
        int v90 = 0;
        sub_74758(a3, (int *)&v89);
      }
      if (v21 != v24)
      {
        uint64_t v89 = 0x676C6F626E737274;
        int v90 = 0;
        sub_74758(a2, (int *)&v89);
        int v28 = *(unsigned __int8 *)(a1 + 88);
        int v29 = v18 + 65;
        __int16 v30 = v18 + 62;
        uint64_t v31 = v18[66];
        uint64_t v33 = v18[62];
        uint64_t v32 = v18[63];
        if (*(unsigned char *)(a1 + 88)) {
          uint64_t v34 = v18[63];
        }
        else {
          uint64_t v34 = v18[66];
        }
        uint64_t v35 = v18[65];
        if (*(unsigned char *)(a1 + 88)) {
          uint64_t v36 = v18[62];
        }
        else {
          uint64_t v36 = v18[65];
        }
        uint64_t v78 = a3;
        if (((v34 - v36) & 0x7FFFFFFF8) != 0)
        {
          uint64_t v89 = 0x696E70746C746E63;
          int v90 = 0;
          sub_74758(a2, (int *)&v89);
          uint64_t v89 = 0x696E707473616674;
          int v90 = 0;
          sub_74758(a2, (int *)&v89);
          int v28 = *(unsigned __int8 *)(a1 + 88);
          uint64_t v31 = v18[66];
          uint64_t v33 = v18[62];
          uint64_t v32 = v18[63];
          uint64_t v37 = *(unsigned char *)(a1 + 88) ? v18[63] : v18[66];
          uint64_t v35 = v18[65];
          uint64_t v38 = *(unsigned char *)(a1 + 88) ? v18[62] : v18[65];
          unint64_t v39 = v37 - v38;
          if ((v39 & 0x7FFFFFFF8) != 0)
          {
            unsigned int v77 = v18;
            unint64_t v40 = 0;
            uint64_t v41 = (v39 >> 3);
            do
            {
              if (*(unsigned char *)(a1 + 88)) {
                std::string::size_type v42 = v30;
              }
              else {
                std::string::size_type v42 = v29;
              }
              uint64_t v44 = v42;
              uint64_t v43 = *v42;
              if (v40 >= (v44[1] - v43) >> 3) {
                uint64_t v45 = 0;
              }
              else {
                uint64_t v45 = *(void *)(v43 + 8 * v40);
              }
              if (*(unsigned char *)(v45 + 88)) {
                int v46 = 1768845428;
              }
              else {
                int v46 = 1869968496;
              }
              LODWORD(v89) = 1885762592;
              HIDWORD(v89) = v46;
              int v90 = *(_DWORD *)(v45 + 96) + *(_DWORD *)(v45 + 92);
              int v47 = v90;
              sub_74758(a2, (int *)&v89);
              if (v47 == 1)
              {
                int v90 = 0;
                sub_74758(a2, (int *)&v89);
              }
              if (*(unsigned char *)(v45 + 88)) {
                int v48 = 1768845428;
              }
              else {
                int v48 = 1869968496;
              }
              LODWORD(v89) = 1936092532;
              HIDWORD(v89) = v48;
              int v90 = *(_DWORD *)(v45 + 96) + *(_DWORD *)(v45 + 92);
              int v49 = v90;
              sub_74758(a2, (int *)&v89);
              if (v49 == 1)
              {
                int v90 = 0;
                sub_74758(a2, (int *)&v89);
              }
              ++v40;
            }
            while (v41 != v40);
            int v28 = *(unsigned __int8 *)(a1 + 88);
            uint64_t v18 = v77;
            uint64_t v31 = v77[66];
            uint64_t v33 = v77[62];
            uint64_t v32 = v77[63];
            uint64_t v35 = v77[65];
          }
        }
        BOOL v50 = v28 == 0;
        if (v28) {
          uint64_t v51 = v31;
        }
        else {
          uint64_t v51 = v32;
        }
        if (v50) {
          uint64_t v52 = v33;
        }
        else {
          uint64_t v52 = v35;
        }
        if (((v51 - v52) & 0x7FFFFFFF8) != 0)
        {
          uint64_t v89 = 0x6F7574706C746E63;
          int v90 = 0;
          sub_74758(a2, (int *)&v89);
          uint64_t v89 = 0x6F75747073616674;
          int v90 = 0;
          sub_74758(a2, (int *)&v89);
          if (*(unsigned char *)(a1 + 88)) {
            int v53 = v18 + 66;
          }
          else {
            int v53 = v18 + 63;
          }
          uint64_t v54 = *v53;
          int v55 = v18 + 62;
          if (*(unsigned char *)(a1 + 88)) {
            int v55 = v18 + 65;
          }
          unint64_t v56 = v54 - *v55;
          if ((v56 & 0x7FFFFFFF8) != 0)
          {
            unint64_t v57 = 0;
            uint64_t v58 = (v56 >> 3);
            do
            {
              if (*(unsigned char *)(a1 + 88)) {
                uint64_t v59 = v29;
              }
              else {
                uint64_t v59 = v30;
              }
              uint64_t v61 = v59;
              uint64_t v60 = *v59;
              if (v57 >= (v61[1] - v60) >> 3) {
                uint64_t v62 = 0;
              }
              else {
                uint64_t v62 = *(void *)(v60 + 8 * v57);
              }
              if (*(unsigned char *)(v62 + 88)) {
                int v63 = 1768845428;
              }
              else {
                int v63 = 1869968496;
              }
              LODWORD(v89) = 1885762592;
              HIDWORD(v89) = v63;
              int v90 = *(_DWORD *)(v62 + 96) + *(_DWORD *)(v62 + 92);
              int v64 = v90;
              sub_74758(a2, (int *)&v89);
              if (v64 == 1)
              {
                int v90 = 0;
                sub_74758(a2, (int *)&v89);
              }
              if (*(unsigned char *)(v62 + 88)) {
                int v65 = 1768845428;
              }
              else {
                int v65 = 1869968496;
              }
              LODWORD(v89) = 1936092532;
              HIDWORD(v89) = v65;
              int v90 = *(_DWORD *)(v62 + 96) + *(_DWORD *)(v62 + 92);
              int v66 = v90;
              sub_74758(a2, (int *)&v89);
              if (v66 == 1)
              {
                int v90 = 0;
                sub_74758(a2, (int *)&v89);
              }
              ++v57;
            }
            while (v58 != v57);
          }
        }
        uint64_t v89 = 0x676C6F626E737274;
        int v90 = 0;
        sub_74758(v78, (int *)&v89);
        uint64_t v89 = 0x676C6F626C746E63;
        int v90 = 0;
        sub_74758(v78, (int *)&v89);
      }
      if (v80 != v79)
      {
        if (*(unsigned char *)(a1 + 88)) {
          int v67 = 1768845428;
        }
        else {
          int v67 = 1869968496;
        }
        LODWORD(v89) = 1936482681;
        HIDWORD(v89) = v67;
        int v90 = 0;
        sub_74758(a2, (int *)&v89);
      }
      uint64_t v19 = *(void *)(a1 + 104);
      uint64_t v8 = v8;
    }
    uint64_t v68 = v86;
    long long v69 = v85;
    *(_OWORD *)(v19 + 16) = v84;
    *(_OWORD *)(v19 + 32) = v69;
    *(void *)(v19 + 48) = v68;
    int v70 = (os_log_t *)sub_32A48(4);
    os_log_t v71 = *v70;
    if (*v70 && os_log_type_enabled(*v70, OS_LOG_TYPE_DEBUG))
    {
      int v72 = *(unsigned __int8 *)(a1 + 88);
      int v73 = *(_DWORD *)(a1 + 8);
      sub_259A4((std::string *)__p, (uint64_t)&v84);
      int v74 = "input";
      if (!v72) {
        int v74 = "output";
      }
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      char v75 = (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      *(_WORD *)&unsigned char buf[12] = 1024;
      if ((SBYTE7(v92) & 0x80u) == 0) {
        char v75 = __p;
      }
      *(_DWORD *)&_DWORD buf[14] = 556;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v74;
      *(_WORD *)&unsigned char buf[28] = 1024;
      *(_DWORD *)&unsigned char buf[30] = v73;
      *(_WORD *)&unsigned char buf[34] = 2080;
      *(void *)&buf[36] = v75;
      int v12 = "%25s:%-5d Updated %s VirtualAudio_Stream %u format: %s";
      int v13 = v71;
      os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
      uint32_t v15 = 44;
LABEL_150:
      _os_log_impl(&def_1E50E8, v13, v14, v12, buf, v15);
      if (SBYTE7(v92) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    BOOL v16 = (os_log_t *)sub_32A48(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 530;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"the underlying stream is NULL\"", buf, 0x12u);
    }
    uint64_t v8 = 0;
  }
LABEL_152:
  sub_3BCAC(&v87);
  return v8;
}

void sub_EC6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

void sub_EC6F4(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 120);
  if (v2) {
    goto LABEL_18;
  }
  BOOL v3 = (os_log_t *)sub_32A48(13);
  int v4 = *v3;
  if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    v12[0] = 136315394;
    *(void *)&v12[1] = "VirtualAudio_Stream.cpp";
    __int16 v13 = 1024;
    int v14 = 383;
    _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"underlying stream is NULL\"", (uint8_t *)v12, 0x12u);
  }
  int v2 = *(uint64_t **)(a1 + 120);
  if (v2)
  {
LABEL_18:
    if (sub_31A248(v2))
    {
      uint64_t v5 = *(void *)(a1 + 120);
      uint64_t v6 = *(std::__shared_weak_count **)(v5 + 88);
      if (v6)
      {
        uint64_t v7 = *(void *)(v5 + 80);
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v8 = std::__shared_weak_count::lock(v6);
        std::__shared_weak_count::__release_weak(v6);
        if (v8)
        {
          if (v7)
          {
            strcpy((char *)v12, "atfpbolg");
            BYTE1(v12[2]) = 0;
            HIWORD(v12[2]) = 0;
            sub_FEEF8(v7, v12, (uint64_t)sub_EC890, *(void *)(a1 + 112));
          }
          sub_4636C(v8);
        }
      }
    }
  }
  int v9 = *(void **)(a1 + 120);
  uint64_t v10 = v9[11];
  if (v10 && *(void *)(v10 + 8) != -1)
  {
    sub_31F554(v9);
    std::string::size_type v11 = (std::__shared_weak_count *)v9[11];
    v9[10] = 0;
    v9[11] = 0;
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_EC874(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_EC890(uint64_t a1, unsigned int a2, int *a3, atomic_ullong *a4)
{
  if (a2)
  {
    uint64_t v6 = a2;
    do
    {
      int v7 = *a3;
      a3 += 3;
      if (v7 == 1885762657)
      {
        uint64_t v8 = (os_log_t *)sub_32A48(4);
        int v9 = *v8;
        if (*v8)
        {
          if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315394;
            std::string::size_type v11 = "VirtualAudio_Stream.cpp";
            __int16 v12 = 1024;
            int v13 = 373;
            _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Physical formats changed! Firing the surround sound pref thingy on the VAD", buf, 0x12u);
          }
        }
        sub_CBCD0(a4);
      }
      --v6;
    }
    while (v6);
  }
}

void sub_EC9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (!a2)
  {
    std::string::size_type v11 = (os_log_t *)sub_32A48(13);
    __int16 v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      v17[0] = 136315394;
      *(void *)&v17[1] = "VirtualAudio_Stream.cpp";
      __int16 v18 = 1024;
      int v19 = 403;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inNewDevice is NULL]: \"inNewDevice is NULL.\"", (uint8_t *)v17, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "inNewDevice is NULL.");
  }
  uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, BOOL))(*(void *)a2 + 96))(a2, *(unsigned char *)(a1 + 88) == 0);
  *(void *)(a1 + 120) = v6;
  if (!v6)
  {
    int v14 = (os_log_t *)sub_32A48(13);
    uint32_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
    {
      v17[0] = 136315394;
      *(void *)&v17[1] = "VirtualAudio_Stream.cpp";
      __int16 v18 = 1024;
      int v19 = 407;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadStreamError) [mStream is NULL]: \"stream is active but underlying stream is NULL\"", (uint8_t *)v17, 0x12u);
    }
    BOOL v16 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v16 = &off_6414D8;
    uint64_t v16[2] = 561214578;
  }
  if (sub_31A248(v6))
  {
    uint64_t v7 = *(void *)(a1 + 120);
    uint64_t v8 = *(std::__shared_weak_count **)(v7 + 88);
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 80);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v10)
      {
        if (v9)
        {
          strcpy((char *)v17, "atfpbolg");
          BYTE1(v17[2]) = 0;
          HIWORD(v17[2]) = 0;
          sub_FEAC0(v9, v17, (uint64_t)sub_EC890, *(void *)(a1 + 112));
        }
        sub_4636C(v10);
      }
    }
  }
  sub_ECC74(a1, a4);
}

void sub_ECC48(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_ECC74(uint64_t a1, uint64_t *a2)
{
  std::string __p = 0;
  int v55 = 0;
  uint64_t v56 = 0;
  (*(void (**)(void, void **))(**(void **)(a1 + 120) + 96))(*(void *)(a1 + 120), &__p);
  int v53 = a2;
  uint64_t v5 = __p;
  int v4 = v55;
  unint64_t v6 = (v55 - (unsigned char *)__p) / 56;
  uint64_t v7 = *(void *)(a1 + 104);
  uint64_t v8 = *(void *)(v7 + 56);
  uint64_t v9 = *(void *)(v7 + 64);
  if (v8 == v9)
  {
    uint64_t v10 = 0;
    int v13 = 0;
    int v12 = 0;
  }
  else
  {
    LODWORD(v10) = 0;
    uint64_t v11 = v8;
    do
    {
      uint64_t v10 = v10 + ((*(void *)(v11 + 48) - *(void *)(v11 + 40)) >> 4);
      v11 += 64;
    }
    while (v11 != v9);
    if (v8 == v9)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = 0;
      do
      {
        v12 += (*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 4;
        v8 += 64;
      }
      while (v8 != v9);
    }
    int v13 = v10;
  }
  if (v6 != v12)
  {
    int v19 = (os_log_t *)sub_32A48(4);
    long long v20 = *v19;
    if (!*v19 || !os_log_type_enabled(*v19, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_30;
    }
    *(_DWORD *)uint64_t v60 = 136315394;
    *(void *)&v60[4] = "VirtualAudio_Stream.cpp";
    *(_WORD *)&v60[12] = 1024;
    *(_DWORD *)&v60[14] = 473;
    double v21 = "%25s:%-5d Number of Stream Formats Changed!";
    long long v22 = v60;
    goto LABEL_29;
  }
  if (v55 == __p)
  {
LABEL_22:
    __int16 v18 = v53;
    goto LABEL_48;
  }
  uint64_t v14 = 0;
  if (v6 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = (v55 - (unsigned char *)__p) / 56;
  }
  while (v13)
  {
    uint64_t v16 = 0;
    int v17 = (char *)__p + 56 * v14;
    while (1)
    {
      sub_1E4290(*(long long **)(*(void *)(a1 + 104) + 56), *(long long **)(*(void *)(a1 + 104) + 64), v16, (uint64_t)v60);
      if (sub_ED3E0((uint64_t)v17, (uint64_t)v60)) {
        break;
      }
      if (v10 == ++v16) {
        goto LABEL_26;
      }
    }
    if (++v14 == v15) {
      goto LABEL_22;
    }
  }
LABEL_26:
  int v23 = (os_log_t *)sub_32A48(4);
  long long v20 = *v23;
  if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "VirtualAudio_Stream.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 467;
    double v21 = "%25s:%-5d Stream Format List Changed";
    long long v22 = buf;
LABEL_29:
    _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_DEBUG, v21, v22, 0x12u);
  }
LABEL_30:
  uint64_t v24 = *(void *)(a1 + 104);
  sub_1E5ACC((uint64_t *)(v24 + 56));
  sub_1E5ACC((uint64_t *)(v24 + 80));
  int v25 = (os_log_t *)sub_32A48(4);
  int v26 = *v25;
  if (*v25 && os_log_type_enabled(*v25, OS_LOG_TYPE_DEBUG))
  {
    int v27 = *(_DWORD *)(a1 + 8);
    if (*(unsigned char *)(a1 + 88)) {
      int v28 = "input";
    }
    else {
      int v28 = "output";
    }
    *(_DWORD *)uint64_t v60 = 136316162;
    *(void *)&v60[4] = "VirtualAudio_Stream.cpp";
    *(_WORD *)&v60[12] = 1024;
    *(_DWORD *)&v60[14] = 482;
    *(_WORD *)&v60[18] = 2080;
    *(void *)&v60[20] = v28;
    *(_WORD *)&v60[28] = 1024;
    *(_DWORD *)&v60[30] = v27;
    *(_WORD *)&v60[34] = 1024;
    *(_DWORD *)&v60[36] = v6;
    _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d Refreshing %s VirtualAudio_Stream %u with %u formats...", v60, 0x28u);
  }
  if (v4 != v5)
  {
    uint64_t v29 = 0;
    unsigned int v30 = 1;
    do
    {
      uint64_t v31 = (long long *)((char *)__p + 56 * v29);
      if (*((_DWORD *)v31 + 7))
      {
        uint64_t v32 = *(void *)(a1 + 104);
        sub_1E7208((uint64_t *)(v32 + 56), v31);
        *(_OWORD *)uint64_t v60 = *v31;
        *(_OWORD *)&v60[16] = v31[1];
        *(_OWORD *)&v60[32] = v31[2];
        uint64_t v61 = *((void *)v31 + 6);
        sub_1E7208((uint64_t *)(v32 + 80), (long long *)v60);
      }
      uint64_t v33 = (os_log_t *)sub_32A48(4);
      uint64_t v34 = *v33;
      if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_DEBUG))
      {
        sub_16BC04((std::string *)buf, (uint64_t)v31);
        uint64_t v35 = buf;
        if (buf[23] < 0) {
          uint64_t v35 = *(unsigned char **)buf;
        }
        *(_DWORD *)uint64_t v60 = 136315906;
        *(void *)&v60[4] = "VirtualAudio_Stream.cpp";
        *(_WORD *)&v60[12] = 1024;
        *(_DWORD *)&v60[14] = 487;
        *(_WORD *)&v60[18] = 1024;
        *(_DWORD *)&v60[20] = v30;
        *(_WORD *)&v60[24] = 2080;
        *(void *)&v60[26] = v35;
        _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_DEBUG, "%25s:%-5d   stream format %u: %s", v60, 0x22u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t v29 = v30;
    }
    while (v6 > v30++);
  }
  int v37 = *(_DWORD *)(a1 + 8);
  strcpy(v60, "atfpbolg");
  v60[9] = 0;
  *(_WORD *)&v60[10] = 0;
  __int16 v18 = v53;
  uint64_t v38 = (unint64_t *)sub_EE470(v53, v37);
  sub_74758(v38, (int *)v60);
  int v39 = *(_DWORD *)(a1 + 8);
  strcpy(v60, "amfsbolg");
  v60[9] = 0;
  *(_WORD *)&v60[10] = 0;
  unint64_t v40 = (unint64_t *)sub_EE470(v53, v39);
  sub_74758(v40, (int *)v60);
  int v41 = *(_DWORD *)(*(void *)(a1 + 112) + 8);
  strcpy(v60, "amfsbolg");
  v60[9] = 0;
  *(_WORD *)&v60[10] = 0;
  std::string::size_type v42 = (unint64_t *)sub_EE470(v53, v41);
  sub_74758(v42, (int *)v60);
  int v43 = *(_DWORD *)(*(void *)(a1 + 112) + 8);
  strcpy(v60, "#rsnbolg");
  v60[9] = 0;
  *(_WORD *)&v60[10] = 0;
  uint64_t v44 = (unint64_t *)sub_EE470(v53, v43);
  sub_74758(v44, (int *)v60);
LABEL_48:
  memset(v60, 0, 32);
  memset(buf, 0, sizeof(buf));
  sub_EBD70(a1, (unint64_t *)v60, (unint64_t *)buf);
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 120) + 160))(v62);
  uint64_t v45 = *(void *)&v62[8];
  if (v62 == *(unsigned char **)&v62[8])
  {
    int v47 = 0;
  }
  else
  {
    do
    {
      sub_549A4(&v57, (uint64_t *)(v45 + 16), "", 568);
      unsigned int v46 = *(unsigned __int16 *)(v57 + 184);
      if (v58) {
        sub_4636C(v58);
      }
      int v47 = (v46 >> 9) & 1;
      uint64_t v45 = *(void *)(v45 + 8);
    }
    while ((v46 & 0x200) == 0 && v62 != (unsigned char *)v45);
  }
  sub_8108((uint64_t *)v62);
  if (*(unsigned __int8 *)(a1 + 128) != v47)
  {
    uint64_t v48 = sub_32A48(4);
    if (*(unsigned char *)(v48 + 8))
    {
      int v49 = *(NSObject **)v48;
      if (*(void *)v48)
      {
        if (os_log_type_enabled(*(os_log_t *)v48, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t v62 = 136315650;
          *(void *)&v62[4] = "VirtualAudio_Stream.cpp";
          *(_WORD *)&v62[12] = 1024;
          *(_DWORD *)&v62[14] = 511;
          __int16 v63 = 1024;
          int v64 = v47;
          _os_log_impl(&def_1E50E8, v49, OS_LOG_TYPE_DEBUG, "%25s:%-5d stream is associated with high quality audio port: %u", v62, 0x18u);
        }
      }
    }
    *(unsigned char *)(a1 + 128) = v47;
    strcpy(v62, "qihsbolg");
    v62[9] = 0;
    *(_WORD *)&v62[10] = 0;
    sub_74758((unint64_t *)buf, (int *)v62);
  }
  BOOL v50 = *(void **)buf;
  sub_EE798(v18, *(_DWORD *)(a1 + 8), -1431655765 * ((*(void *)&buf[8] - *(void *)buf) >> 2), *(int **)buf);
  int v51 = *(_DWORD *)(*(void *)(a1 + 112) + 8);
  uint64_t v52 = *(void **)v60;
  sub_EE798(v18, v51, -1431655765 * ((*(void *)&v60[8] - *(void *)v60) >> 2), *(int **)v60);
  if (v50) {
    operator delete(v50);
  }
  if (v52) {
    operator delete(v52);
  }
  if (__p)
  {
    int v55 = __p;
    operator delete(__p);
  }
}

void sub_ED35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ED3E0(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != 0.0 && *(double *)a2 != 0.0 && *(double *)a1 != *(double *)a2) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    int v6 = *(_DWORD *)(a2 + 8);
    if (v6 && v5 != v6) {
      return 0;
    }
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    int v9 = *(_DWORD *)(a2 + 16);
    if (v9)
    {
      if (v8 != v9) {
        return 0;
      }
    }
  }
  int v10 = *(_DWORD *)(a1 + 20);
  if (v10)
  {
    int v11 = *(_DWORD *)(a2 + 20);
    if (v11)
    {
      if (v10 != v11) {
        return 0;
      }
    }
  }
  int v12 = *(_DWORD *)(a1 + 24);
  if (v12)
  {
    int v13 = *(_DWORD *)(a2 + 24);
    if (v13)
    {
      if (v12 != v13) {
        return 0;
      }
    }
  }
  int v14 = *(_DWORD *)(a1 + 28);
  if (v14)
  {
    int v15 = *(_DWORD *)(a2 + 28);
    if (v15)
    {
      if (v14 != v15) {
        return 0;
      }
    }
  }
  int v16 = *(_DWORD *)(a1 + 32);
  if (v16)
  {
    int v17 = *(_DWORD *)(a2 + 32);
    if (v17)
    {
      if (v16 != v17) {
        return 0;
      }
    }
  }
  uint64_t result = sub_EBDC(a1, a2);
  if (!result) {
    return result;
  }
  double v19 = *(double *)(a1 + 48);
  double v20 = *(double *)(a2 + 40);
  if (v19 < v20) {
    return 0;
  }
  double v21 = *(double *)(a1 + 40);
  double v22 = *(double *)(a2 + 48);
  if (v21 < v20 && v19 <= v22) {
    return 0;
  }
  if (v21 < v20 && v19 > v22) {
    return 0;
  }
  if (v19 == v22) {
    return v21 == v20;
  }
  return 0;
}

void sub_ED518(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 120))
  {
    int v4 = (os_log_t *)sub_32A48(13);
    int v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315394;
        uint64_t v7 = "VirtualAudio_Stream.cpp";
        __int16 v8 = 1024;
        int v9 = 422;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"underlying stream is NULL\"", (uint8_t *)&v6, 0x12u);
      }
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 120) + 168))(*(void *)(a1 + 120));
  sub_ECC74(a1, a2);
}

uint64_t sub_ED624(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  BOOL v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  int v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      int v6 = (unsigned int *)(v5 + 4);
      uint64_t v7 = *(uint64_t **)(a1 + 8);
      __int16 v8 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v9 = *(void *)(a1 + 8);
      int v10 = v3;
      if (v7)
      {
        do
        {
          __int16 v8 = (uint64_t **)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          __int16 v8 = (uint64_t **)v10[2];
          BOOL v11 = *v8 == (uint64_t *)v10;
          int v10 = v8;
        }
        while (v11);
      }
      unsigned int v12 = *v6;
      if (*((_DWORD *)v8 + 8) < *v6)
      {
LABEL_8:
        if (v7) {
          int v13 = v8;
        }
        else {
          int v13 = v3;
        }
        if (v7) {
          int v14 = v8 + 1;
        }
        else {
          int v14 = v3;
        }
      }
      else
      {
        int v13 = v3;
        int v14 = v3;
        if (v7)
        {
          int v14 = v3;
          while (1)
          {
            while (1)
            {
              int v13 = (uint64_t **)v7;
              unsigned int v17 = *((_DWORD *)v7 + 8);
              if (v12 >= v17) {
                break;
              }
              uint64_t v7 = *v13;
              int v14 = v13;
              if (!*v13) {
                goto LABEL_15;
              }
            }
            if (v17 >= v12) {
              break;
            }
            int v14 = v13 + 1;
            uint64_t v7 = v13[1];
            if (!v7) {
              goto LABEL_15;
            }
          }
        }
      }
      if (!*v14)
      {
LABEL_15:
        sub_ED9A4((uint64_t)v19, a1, v6);
        sub_46CA8((uint64_t **)a1, (uint64_t)v13, v14, v19[0]);
        v19[0] = 0;
        sub_7E290((uint64_t)v19);
      }
      int v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          int v16 = v15;
          int v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          int v16 = (void *)v5[2];
          BOOL v11 = *v16 == (void)v5;
          int v5 = v16;
        }
        while (!v11);
      }
      int v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_ED79C(_Unwind_Exception *a1)
{
  sub_7DB7C(*v1);
  _Unwind_Resume(a1);
}

void sub_ED7B0(std::string *a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  if (v4 > 6) {
    int v5 = "unknown";
  }
  else {
    int v5 = off_623840[v4];
  }
  sub_21C8C(&v17, v5);
  int v6 = std::string::insert(&v17, 0, "[", 1uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  __int16 v8 = std::string::append(&v18, ", ", 2uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_806E0((uint64_t)__p, (uint64_t)(a2 + 2));
  if ((v16 & 0x80u) == 0) {
    int v10 = __p;
  }
  else {
    int v10 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    std::string::size_type v11 = v16;
  }
  else {
    std::string::size_type v11 = (std::string::size_type)__p[1];
  }
  unsigned int v12 = std::string::append(&v19, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  int v14 = std::string::append(&v20, "]", 1uLL);
  *a1 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_ED928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_ED9A4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = a2 + 8;
  int v6 = operator new(0x1C8uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  v6[8] = *a3;
  uint64_t result = sub_7EA30((uint64_t)(v6 + 10), (uint64_t)(a3 + 2));
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_EDA00(_Unwind_Exception *a1)
{
  sub_7E290(v1);
  _Unwind_Resume(a1);
}

char *sub_EDA14(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  int v6 = (char *)*a1;
  long long v7 = v5;
  if (*a1 != __src)
  {
    __int16 v8 = __src;
    long long v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  int v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    long long v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  long long v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  int v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  int v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

unsigned char *sub_EDADC(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  if (!*(void *)(a1 + 8))
  {
    BOOL v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      long long v7 = "VirtualAudio_Utilities.cpp";
      __int16 v8 = 1024;
      int v9 = 476;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  sub_3A8A8();
  return sub_32EA50(v1);
}

void sub_EDBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint8_t buf, int a17, int a18, __int16 a19, int a20,__int16 a21,uint64_t a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void sub_EE27C(void *a1)
{
  sub_EE2B4(a1);

  operator delete();
}

void *sub_EE2B4(void *a1)
{
  *a1 = off_632F30;
  if (a1[1])
  {
    int v2 = (os_log_t *)sub_32A48(13);
    BOOL v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      long long v7 = "VirtualAudio_Utilities.cpp";
      __int16 v8 = 1024;
      int v9 = 470;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to execute command prior to destruction.", (uint8_t *)&v6, 0x12u);
    }
    uint64_t v4 = a1[1];
    a1[1] = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

void sub_EE3D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_EE3E4(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = (void *)*((void *)v4 - 4);
        if (v6)
        {
          *((void *)v4 - 3) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_EE470(uint64_t *a1, int a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v6 = v5;
  while (v6 != v4)
  {
    int v7 = *(_DWORD *)(v6 - 40);
    v6 -= 40;
    if (v7 == a2)
    {
      uint64_t v8 = v6 + 40;
      return v8 - 32;
    }
  }
  unint64_t v9 = a1[2];
  if (v5 >= v9)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v4) >> 3);
    if (v10 + 1 > 0x666666666666666) {
      sub_60548();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - v4) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v29 = a1 + 2;
    if (v13)
    {
      if (v13 > 0x666666666666666) {
        sub_60560();
      }
      int v14 = operator new(40 * v13);
    }
    else
    {
      int v14 = 0;
    }
    int v15 = (char *)&v14[5 * v10];
    int v27 = v14;
    *(void *)int v28 = v15;
    *(void *)&v28[8] = v15;
    *(void *)&v28[16] = &v14[5 * v13];
    *(_DWORD *)int v15 = a2;
    *((void *)v15 + 2) = 0;
    *((void *)v15 + 3) = 0;
    *((void *)v15 + 1) = 0;
    sub_74550(v15 + 8, 0, 0, 0);
    v14[5 * v10 + 4] = 0;
    uint64_t v16 = *(void *)v28;
    *(void *)&v28[8] += 40;
    uint64_t v17 = *a1;
    uint64_t v18 = a1[1];
    *(void *)&long long v33 = *(void *)v28;
    *((void *)&v33 + 1) = *(void *)v28;
    long long v32 = v33;
    v30[0] = a1 + 2;
    v30[1] = &v32;
    v30[2] = &v33;
    char v31 = 0;
    if (v18 != v17)
    {
      uint64_t v19 = v18;
      do
      {
        int v20 = *(_DWORD *)(v19 - 40);
        v19 -= 40;
        *(void *)(v16 - 32) = 0;
        uint64_t v21 = v16 - 32;
        *(_DWORD *)(v16 - 40) = v20;
        *(void *)(v21 + 8) = 0;
        *(void *)(v21 + 16) = 0;
        sub_74550((char *)(v16 - 32), *(uint64_t **)(v19 + 8), *(uint64_t **)(v19 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v19 + 16) - *(void *)(v19 + 8)) >> 2));
        *(void *)(v16 - 8) = *(void *)(v18 - 8);
        uint64_t v16 = *((void *)&v33 + 1) - 40;
        *((void *)&v33 + 1) -= 40;
        uint64_t v18 = v19;
      }
      while (v19 != v17);
    }
    char v31 = 1;
    sub_EE738((uint64_t)v30);
    uint64_t v22 = a1[2];
    long long v23 = *(_OWORD *)&v28[8];
    uint64_t v26 = *(void *)&v28[8];
    long long v24 = *(_OWORD *)a1;
    *a1 = v16;
    *(_OWORD *)int v28 = v24;
    *(_OWORD *)(a1 + 1) = v23;
    *(void *)&v28[16] = v22;
    int v27 = (void *)v24;
    sub_EE6D4((uint64_t)&v27);
    uint64_t v8 = v26;
  }
  else
  {
    *(_DWORD *)unint64_t v5 = a2;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 8) = 0;
    sub_74550((char *)(v5 + 8), 0, 0, 0);
    *(void *)(v5 + 32) = 0;
    uint64_t v8 = v5 + 40;
    a1[1] = v5 + 40;
  }
  a1[1] = v8;
  return v8 - 32;
}

void sub_EE6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_EE6D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_EE6D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v4 = *(void **)(v2 - 32);
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_EE738(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      unint64_t v5 = *(void **)(v3 + 8);
      if (v5)
      {
        *(void *)(v3 + 16) = v5;
        operator delete(v5);
      }
      v3 += 40;
    }
  }
  return a1;
}

void sub_EE798(uint64_t *a1, int a2, unsigned int a3, int *a4)
{
  if (a3)
  {
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = (unint64_t *)sub_EE470(a1, a2);
      sub_74758(v8, a4);
      a4 += 3;
      --v7;
    }
    while (v7);
  }
}

uint64_t sub_EE7F4(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      sub_3A8A8();
      uint64_t result = sub_33438(*(_DWORD *)v3);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 72))(result, -1431655765 * ((*(void *)(v3 + 16) - *(void *)(v3 + 8)) >> 2));
      }
      v3 += 40;
    }
    while (v3 != a2);
  }
  return result;
}

void sub_EE888(uint64_t a1, __int32 a2)
{
  uint64_t v4 = *(__int32 **)(a1 + 8);
  unint64_t v5 = wmemchr(*(__int32 **)a1, a2, ((uint64_t)v4 - *(void *)a1) >> 2);
  if (v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6 == *(__int32 **)(a1 + 8))
  {
    unint64_t v7 = *(void *)(a1 + 16);
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v9 = *(__int32 **)a1;
      uint64_t v10 = ((uint64_t)v6 - *(void *)a1) >> 2;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62) {
        sub_60548();
      }
      uint64_t v12 = v7 - (void)v9;
      if (v12 >> 1 > v11) {
        unint64_t v11 = v12 >> 1;
      }
      BOOL v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v13) {
        unint64_t v14 = v11;
      }
      if (v14)
      {
        unint64_t v14 = (unint64_t)sub_46BF4(v14);
        unint64_t v9 = *(__int32 **)a1;
        unint64_t v6 = *(__int32 **)(a1 + 8);
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v16 = (__int32 *)(v14 + 4 * v10);
      unint64_t v17 = v14 + 4 * v15;
      __int32 *v16 = a2;
      uint64_t v8 = v16 + 1;
      while (v6 != v9)
      {
        __int32 v18 = *--v6;
        *--uint64_t v16 = v18;
      }
      *(void *)a1 = v16;
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v17;
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *unint64_t v6 = a2;
      uint64_t v8 = v6 + 1;
    }
    *(void *)(a1 + 8) = v8;
  }
}

void sub_EE984(void *a1, int a2, __int32 a3)
{
  uint64_t v6 = sub_32A48(2);
  if (*(unsigned char *)(v6 + 8))
  {
    unint64_t v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136315906;
        uint64_t v10 = "VirtualAudio_Utilities.cpp";
        __int16 v11 = 1024;
        int v12 = 323;
        __int16 v13 = 1024;
        __int32 v14 = a3;
        __int16 v15 = 1024;
        int v16 = a2;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device ID: %u (owner : %u)", (uint8_t *)&v9, 0x1Eu);
      }
    }
  }
  uint64_t v8 = sub_EEA84(a1, a2);
  if (v8) {
    sub_EE888(v8, a3);
  }
}

uint64_t sub_EEA84(void *a1, int a2)
{
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  while (v3 != v4)
  {
    int v5 = *(_DWORD *)(v3 - 56);
    v3 -= 56;
    uint64_t result = v3 + 8;
    if (v5 == a2 && result != 0) {
      return result;
    }
  }
  *(_OWORD *)long long v33 = 0u;
  long long v34 = 0u;
  *(_OWORD *)long long v32 = 0u;
  int v35 = a2;
  sub_EED6C(v36, (uint64_t)v32);
  unint64_t v8 = a1[3];
  unint64_t v9 = a1[2];
  if (v9 >= v8)
  {
    uint64_t v11 = a1[1];
    uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - v11) >> 3);
    if ((unint64_t)(v12 + 1) > 0x492492492492492) {
      sub_60548();
    }
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v8 - v11) >> 3);
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v12 + 1) {
      uint64_t v14 = v12 + 1;
    }
    if (v13 >= 0x249249249249249) {
      unint64_t v15 = 0x492492492492492;
    }
    else {
      unint64_t v15 = v14;
    }
    int v41 = a1 + 3;
    if (v15)
    {
      if (v15 > 0x492492492492492) {
        sub_60560();
      }
      int v16 = (char *)operator new(56 * v15);
    }
    else
    {
      int v16 = 0;
    }
    unint64_t v17 = &v16[56 * v12];
    int v39 = v16;
    *(void *)unint64_t v40 = v17;
    *(void *)&v40[8] = v17;
    *(void *)&v40[16] = &v16[56 * v15];
    *(_DWORD *)unint64_t v17 = v35;
    sub_EED6C((void *)v17 + 1, (uint64_t)v36);
    uint64_t v18 = 0;
    uint64_t v19 = *(void *)v40;
    *(void *)&v40[8] += 56;
    uint64_t v21 = a1[1];
    uint64_t v20 = a1[2];
    while (1)
    {
      uint64_t v22 = v19 + v18;
      uint64_t v23 = v20 + v18;
      if (v20 + v18 == v21) {
        break;
      }
      int v24 = *(_DWORD *)(v23 - 56);
      *(void *)(v22 - 48) = 0;
      uint64_t v25 = v22 - 48;
      *(_DWORD *)(v22 - 56) = v24;
      *(void *)(v25 + 8) = 0;
      *(void *)(v25 + 16) = 0;
      sub_46B38((void *)(v22 - 48), *(const void **)(v23 - 48), *(void *)(v23 - 40), (uint64_t)(*(void *)(v23 - 40) - *(void *)(v23 - 48)) >> 2);
      uint64_t v26 = v19 + v18;
      *(void *)(v26 - 24) = 0;
      *(void *)(v26 - 16) = 0;
      int v27 = (void *)(v19 + v18 - 24);
      v27[2] = 0;
      v18 -= 56;
      sub_46B38(v27, *(const void **)(v23 - 24), *(void *)(v23 - 16), (uint64_t)(*(void *)(v23 - 16) - *(void *)(v23 - 24)) >> 2);
    }
    uint64_t v28 = a1[3];
    unint64_t v31 = *(void *)&v40[8];
    long long v29 = *(_OWORD *)&v40[8];
    long long v30 = *(_OWORD *)(a1 + 1);
    a1[1] = v22;
    *(_OWORD *)unint64_t v40 = v30;
    *((_OWORD *)a1 + 1) = v29;
    *(void *)&v40[16] = v28;
    int v39 = (char *)v30;
    sub_EEE70((uint64_t)&v39);
    unint64_t v10 = v31;
  }
  else
  {
    *(_DWORD *)unint64_t v9 = v35;
    sub_EED6C((void *)(v9 + 8), (uint64_t)v36);
    unint64_t v10 = v9 + 56;
    a1[2] = v9 + 56;
  }
  a1[2] = v10;
  if (__p)
  {
    uint64_t v38 = __p;
    operator delete(__p);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v33[1]) {
    operator delete(v33[1]);
  }
  if (v32[0]) {
    operator delete(v32[0]);
  }
  return a1[2] - 48;
}

void sub_EECF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_EEE70(v3 - 104);
  sub_EEDE8((uint64_t *)va1);
  sub_EEE2C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_EED6C(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_46B38(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_46B38(a1 + 3, *(const void **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 2);
  return a1;
}

void sub_EEDCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_EEDE8(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_EEE2C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_EEE70(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_EEEC0((void *)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_EEEC0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
}

void sub_EEF18(void *a1, int a2, __int32 a3)
{
  uint64_t v6 = sub_32A48(2);
  if (*(unsigned char *)(v6 + 8))
  {
    uint64_t v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        int v9 = 136315906;
        uint64_t v10 = "VirtualAudio_Utilities.cpp";
        __int16 v11 = 1024;
        int v12 = 334;
        __int16 v13 = 1024;
        __int32 v14 = a3;
        __int16 v15 = 1024;
        int v16 = a2;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device ID: %u (owner : %u)", (uint8_t *)&v9, 0x1Eu);
      }
    }
  }
  uint64_t v8 = sub_EEA84(a1, a2);
  if (v8) {
    sub_EE888(v8 + 24, a3);
  }
}

uint64_t *sub_EF01C(uint64_t *a1)
{
  sub_EF058(a1);
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_EF058(uint64_t *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[1];
  if (v2 != *result)
  {
    uint64_t v3 = 0;
    unsigned int v4 = 0;
    uint64_t v2 = *result;
    do
    {
      (*(void (**)(void))(**(void **)(v2 + 8 * v3) + 16))(*(void *)(v2 + 8 * v3));
      uint64_t v5 = *v1;
      uint64_t result = *(uint64_t **)(*v1 + 8 * v3);
      if (result)
      {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
        uint64_t v5 = *v1;
      }
      *(void *)(v5 + 8 * v3) = 0;
      uint64_t v2 = *v1;
      uint64_t v3 = ++v4;
    }
    while (v4 < (unint64_t)((v1[1] - *v1) >> 3));
  }
  v1[1] = v2;
  return result;
}

void sub_EF854()
{
  _Unwind_Resume(v0);
}

void sub_EF85C()
{
  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void sub_EF868()
{
  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void sub_EF874()
{
  __cxa_end_catch();
  _Unwind_Resume(v0);
}

void sub_EF884(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0xEF88CLL);
  }
  sub_564E4(a1);
}

void sub_EF89C(char **a1, uint64_t a2)
{
  if (!a2)
  {
    __int16 v15 = (os_log_t *)sub_32A48(13);
    int v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      uint64_t v19 = "VirtualAudio_Utilities.cpp";
      __int16 v20 = 1024;
      int v21 = 431;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v18, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *a1;
    uint64_t v8 = (v5 - *a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_60548();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_60560();
      }
      int v12 = (char *)operator new(8 * v11);
    }
    else
    {
      int v12 = 0;
    }
    __int16 v13 = &v12[8 * v8];
    *(void *)__int16 v13 = a2;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v6;
    a1[2] = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v6 = v5 + 8;
  }
  a1[1] = v6;
}

void sub_EFA68(_Unwind_Exception *exception_object)
{
}

void sub_EFA84(uint64_t a1)
{
  *(void *)a1 = &off_621068;
  sub_463E0(*(void **)(a1 + 40));
  uint64_t v2 = (void **)(a1 + 8);
  sub_EFB04(&v2);

  operator delete();
}

void sub_EFB04(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 7;
        sub_EEEC0(v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_EFB88(uint64_t a1)
{
  *(void *)a1 = &off_621068;
  sub_463E0(*(void **)(a1 + 40));
  uint64_t v3 = (void **)(a1 + 8);
  sub_EFB04(&v3);
  return a1;
}

uint64_t sub_EFBE8(uint64_t a1)
{
  if (*(void *)a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)&void v5[4] = "VirtualAudio_Utilities.cpp";
      __int16 v6 = 1024;
      int v7 = 513;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d The destroyed object tracker has not been detached. Manually executing DestroyObjects, which may be unsafe.", v5, 0x12u);
    }
    sub_EF058(*(uint64_t **)a1);
    if (*(void *)a1)
    {
      sub_EF01C(*(uint64_t **)a1);
      operator delete();
    }
    *(void *)a1 = 0;
  }
  *(void *)(a1 + 32) = &off_621068;
  sub_463E0(*(void **)(a1 + 72));
  *(void *)uint64_t v5 = a1 + 40;
  sub_EFB04((void ***)v5);
  *(void *)uint64_t v5 = a1 + 8;
  sub_EE3E4((void ***)v5);
  return a1;
}

void sub_EFD28(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_EFD34(std::string *a1, const __CFDictionary **a2, int a3)
{
  if (CFDictionaryContainsKey(*a2, @"initiation device uid"))
  {
    *(void *)std::string __p = 0;
    sub_1D486C(*a2, @"initiation device uid", (const __CFDictionary **)__p);
    sub_21B7C(&v100, *(CFStringRef *)__p);
  }
  else
  {
    sub_21C8C(&v100, "");
  }
  if (CFDictionaryContainsKey(*a2, @"activation device uid"))
  {
    *(void *)std::string __p = 0;
    sub_1D486C(*a2, @"activation device uid", (const __CFDictionary **)__p);
    sub_21B7C(&v97, *(CFStringRef *)__p);
  }
  else
  {
    sub_21C8C(&v97, "");
  }
  uint64_t v6 = v101;
  if ((v102 & 0x80u) == 0) {
    uint64_t v7 = v102;
  }
  else {
    uint64_t v7 = v101;
  }
  if (v7) {
    uint64_t v8 = &v100;
  }
  else {
    uint64_t v8 = &v97;
  }
  uint64_t v9 = *((unsigned __int8 *)v8 + 23);
  int v10 = (char)v9;
  if (!v7) {
    uint64_t v6 = v98;
  }
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = v6;
  }
  if (!v9) {
    goto LABEL_174;
  }
  if (a3 > 1668047475)
  {
    if (a3 == 1751414371) {
      goto LABEL_34;
    }
    if (a3 != 1668047476)
    {
LABEL_30:
      int v12 = sub_F09C4(a3) ^ 1;
      if (a3 == 1684108899) {
        LOBYTE(v12) = 0;
      }
      if ((v12 & 1) == 0)
      {
        LOBYTE(v10) = *((unsigned char *)v8 + 23);
LABEL_34:
        if ((v10 & 0x80) != 0)
        {
          int v16 = (unint64_t *)&v98;
          if (v7) {
            int v16 = (unint64_t *)&v101;
          }
          sub_21E8C(a1, *v8, *v16);
        }
        else
        {
          *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v8;
          a1->__r_.__value_.__r.__words[2] = (std::string::size_type)v8[2];
        }
        goto LABEL_175;
      }
      uint64_t v17 = sub_32A48(2);
      uint64_t v18 = sub_32A48(34);
      char v19 = 0;
      uint64_t v20 = 0;
      *(void *)std::string __p = 0x100000002;
      uint64_t v21 = *(void *)(v17 + 8);
      while (1)
      {
        uint64_t v22 = *(int *)&__p[4 * v20];
        char v23 = v19;
        if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
          break;
        }
        char v19 = 1;
        uint64_t v20 = 1;
        if (v23) {
          goto LABEL_164;
        }
      }
      if ((v21 & v22) == 0) {
        uint64_t v17 = v18;
      }
LABEL_164:
      long long v81 = *(NSObject **)v17;
      if (v81 && os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(&v106, a3);
        long long v82 = (v108 & 0x80u) == 0 ? &v106 : (void **)v106;
        uint64_t v83 = *((char *)v8 + 23) >= 0 ? v8 : (void **)*v8;
        *(_DWORD *)std::string __p = 136315906;
        *(void *)&__p[4] = "VirtualAudio_Utilities.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 548;
        *(_WORD *)&__p[18] = 2080;
        *(void *)&__p[20] = v82;
        *(_WORD *)&__p[28] = 2080;
        char v111 = v83;
        _os_log_impl(&def_1E50E8, v81, OS_LOG_TYPE_DEBUG, "%25s:%-5d Trigger device ID specified with an unhandled trigger value '%s'. Device ID '%s' will be ignored.", __p, 0x26u);
        if ((char)v108 < 0) {
          operator delete(v106);
        }
      }
LABEL_174:
      a1->__r_.__value_.__r.__words[0] = 0;
      a1->__r_.__value_.__l.__size_ = 0;
      a1->__r_.__value_.__r.__words[2] = 0;
      goto LABEL_175;
    }
  }
  else if (a3 != 1651794544)
  {
    if (a3 == 1651795060) {
      goto LABEL_34;
    }
    goto LABEL_30;
  }
  if (v10 >= 0) {
    unint64_t v11 = (const char *)v8;
  }
  else {
    unint64_t v11 = (const char *)*v8;
  }
  if (sscanf(v11, "%02X:%02X:%02X:%02X:%02X:%02X", __p, &__p[4], &__p[8], &__p[12], &__p[16], &__p[20]) == 6)
  {
    if (*((char *)v8 + 23) < 0)
    {
      int v24 = (unint64_t *)&v98;
      if (v7) {
        int v24 = (unint64_t *)&v101;
      }
      sub_21E8C(a1, *v8, *v24);
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v8;
      a1->__r_.__value_.__r.__words[2] = (std::string::size_type)v8[2];
    }
    uint64_t v25 = (char *)&v106;
    sub_21C8C(&v106, "-tsco");
    uint64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      int v27 = a1;
    }
    else {
      int v27 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    unsigned __int8 v28 = v108;
    if ((v108 & 0x80u) == 0)
    {
      int64_t v29 = v108;
    }
    else
    {
      uint64_t v25 = (char *)v106;
      int64_t v29 = (int64_t)v107;
    }
    if (v29)
    {
      if ((size & 0x80u) != 0) {
        uint64_t size = a1->__r_.__value_.__l.__size_;
      }
      if (size >= v29)
      {
        int v53 = (char *)v27 + size;
        int v54 = *v25;
        int v55 = v27;
        do
        {
          uint64_t v56 = size - v29;
          if (v56 == -1) {
            break;
          }
          uint64_t v57 = (char *)memchr(v55, v54, v56 + 1);
          if (!v57) {
            break;
          }
          uint64_t v58 = v57;
          if (!memcmp(v57, v25, v29))
          {
            if (v58 != v53 && v58 - (char *)v27 != -1) {
              goto LABEL_160;
            }
            break;
          }
          int v55 = (std::string *)(v58 + 1);
          uint64_t size = v53 - (v58 + 1);
        }
        while (size >= v29);
      }
      uint64_t v30 = sub_32A48(2);
      uint64_t v31 = sub_32A48(34);
      char v32 = 0;
      uint64_t v33 = 0;
      *(void *)std::string __p = 0x100000002;
      uint64_t v34 = *(void *)(v30 + 8);
      while (1)
      {
        uint64_t v35 = *(int *)&__p[4 * v33];
        char v36 = v32;
        if (((v34 & v35) != 0) != ((*(void *)(v31 + 8) & v35) != 0)) {
          break;
        }
        char v32 = 1;
        uint64_t v33 = 1;
        if (v36) {
          goto LABEL_147;
        }
      }
      if ((v34 & v35) == 0) {
        uint64_t v30 = v31;
      }
      uint64_t v34 = *(void *)(v30 + 8);
LABEL_147:
      if (v34)
      {
        unsigned int v77 = *(NSObject **)v30;
        if (v77)
        {
          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v78 = &v106;
            if ((v108 & 0x80u) != 0) {
              uint64_t v78 = v106;
            }
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = "VirtualAudio_Utilities.cpp";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 48;
            *(_WORD *)&__p[18] = 2080;
            *(void *)&__p[20] = v78;
            _os_log_impl(&def_1E50E8, v77, OS_LOG_TYPE_DEBUG, "%25s:%-5d Adding \"%s\" to device UID", __p, 0x1Cu);
          }
        }
      }
      if ((v108 & 0x80u) == 0) {
        int v79 = (const std::string::value_type *)&v106;
      }
      else {
        int v79 = (const std::string::value_type *)v106;
      }
      if ((v108 & 0x80u) == 0) {
        std::string::size_type v80 = v108;
      }
      else {
        std::string::size_type v80 = (std::string::size_type)v107;
      }
      std::string::append(a1, v79, v80);
      unsigned __int8 v28 = v108;
    }
LABEL_160:
    if ((v28 & 0x80) != 0) {
      operator delete(v106);
    }
    goto LABEL_175;
  }
  uint64_t v13 = sub_10FBF0();
  uint64_t v14 = operator new(4uLL);
  _DWORD *v14 = 1885892674;
  *(void *)std::string __p = v14;
  *(void *)&__p[8] = v14 + 1;
  *(void *)&__p[16] = v14 + 1;
  strcpy(&__p[24], "cwdv");
  BYTE2(v111) = 0;
  int v112 = 3;
  v114[0] = 0;
  v114[1] = 0;
  char v113 = v114;
  int v115 = 44739242;
  CFTypeRef cf = 0;
  int v106 = off_628650;
  char v109 = &v106;
  sub_10EA24(v105, v13, __p, (uint64_t)&v106);
  sub_6AFD4(&v106);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v114[0]);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  __int16 v15 = (uint64_t *)v105[1];
  if (*((char *)v8 + 23) < 0)
  {
    int v37 = (unint64_t *)&v98;
    if (v7) {
      int v37 = (unint64_t *)&v101;
    }
    sub_21E8C(__dst, *v8, *v37);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v8;
    uint64_t v104 = v8[2];
  }
  uint64_t v38 = v105;
  if (v15 != v105)
  {
    uint64_t v38 = v15;
    while (1)
    {
      sub_549A4((uint64_t *)&v106, v38 + 2, "", 833);
      int v39 = v106;
      if (v106 && (*(unsigned int (**)(void *))(*(void *)v106 + 424))(v106))
      {
        (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v39 + 440))(__p, v39);
        if (__p[23] >= 0) {
          unint64_t v40 = (void *)__p[23];
        }
        else {
          unint64_t v40 = *(void **)&__p[8];
        }
        int v41 = (void *)HIBYTE(v104);
        if (SHIBYTE(v104) < 0) {
          int v41 = __dst[1];
        }
        if (v40 == v41)
        {
          if (SHIBYTE(v104) >= 0) {
            std::string::size_type v42 = __dst;
          }
          else {
            std::string::size_type v42 = (void **)__dst[0];
          }
          if ((__p[23] & 0x80) != 0)
          {
            uint64_t v52 = *(void **)__p;
            BOOL v51 = memcmp(*(const void **)__p, v42, *(size_t *)&__p[8]) == 0;
            goto LABEL_101;
          }
          if (!__p[23])
          {
            BOOL v51 = 1;
            goto LABEL_92;
          }
          uint64_t v43 = __p[23] - 1;
          uint64_t v44 = __p;
          do
          {
            int v46 = *v44++;
            int v45 = v46;
            int v48 = *(unsigned __int8 *)v42;
            std::string::size_type v42 = (void **)((char *)v42 + 1);
            int v47 = v48;
            BOOL v50 = v43-- != 0;
            BOOL v51 = v45 == v47;
          }
          while (v45 == v47 && v50);
        }
        else
        {
          BOOL v51 = 0;
        }
        if ((__p[23] & 0x80) != 0)
        {
          uint64_t v52 = *(void **)__p;
LABEL_101:
          operator delete(v52);
        }
      }
      else
      {
        BOOL v51 = 0;
      }
LABEL_92:
      if (v107) {
        sub_4636C(v107);
      }
      if (v51) {
        break;
      }
      uint64_t v38 = (uint64_t *)v38[1];
      if (v38 == v105)
      {
        uint64_t v38 = v105;
        break;
      }
    }
  }
  if (SHIBYTE(v104) < 0) {
    operator delete(__dst[0]);
  }
  if (v38 == v105 || (uint64_t v59 = (std::__shared_weak_count *)v38[3]) == 0)
  {
    sub_8108(v105);
LABEL_216:
    sub_21C8C(a1, "");
    goto LABEL_175;
  }
  uint64_t v60 = v38[2];
  atomic_fetch_add_explicit(&v59->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_8108(v105);
  uint64_t v61 = std::__shared_weak_count::lock(v59);
  std::__shared_weak_count::__release_weak(v59);
  if (v61) {
    BOOL v62 = v60 == 0;
  }
  else {
    BOOL v62 = 1;
  }
  char v63 = v62;
  if (!v62)
  {
    CFStringRef v64 = *(const __CFString **)(v60 + 248);
    *(void *)std::string __p = v64;
    __p[8] = *(unsigned char *)(v60 + 256);
    if (__p[8] && v64)
    {
      CFRetain(v64);
      CFStringRef v64 = *(const __CFString **)__p;
    }
    sub_21B7C(a1, v64);
    sub_72924((uint64_t)__p);
    sub_21C8C(__p, "-tacl");
    sub_21C8C(&v106, "-tsco");
    int v65 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    std::string::size_type v66 = a1->__r_.__value_.__l.__size_;
    BOOL v67 = v65 < 0;
    if (v65 >= 0) {
      uint64_t v68 = (unsigned __int8 *)a1;
    }
    else {
      uint64_t v68 = (unsigned __int8 *)a1->__r_.__value_.__r.__words[0];
    }
    if (!v67) {
      std::string::size_type v66 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    }
    uint64_t v69 = __p[23];
    int v70 = *(unsigned __int8 **)__p;
    if (__p[23] < 0) {
      uint64_t v69 = *(void *)&__p[8];
    }
    else {
      int v70 = __p;
    }
    os_log_t v71 = &v68[v66];
    if (v66 && v69)
    {
      int v72 = v68;
      int v73 = &v68[v66];
      do
      {
        if (*v72 == *v70)
        {
          uint64_t v74 = 1;
          while (v69 != v74)
          {
            if (&v72[v74] == v71) {
              goto LABEL_181;
            }
            int v75 = v72[v74];
            int v76 = v70[v74++];
            if (v75 != v76) {
              goto LABEL_135;
            }
          }
          int v73 = v72;
        }
LABEL_135:
        ++v72;
      }
      while (v72 != v71);
    }
    else
    {
      int v73 = &v68[v66];
    }
LABEL_181:
    BOOL v84 = v73 != v71 || v69 == 0;
    if (v84 && v73 - v68 != -1)
    {
      if ((v108 & 0x80u) == 0) {
        std::string::size_type v85 = v108;
      }
      else {
        std::string::size_type v85 = (std::string::size_type)v107;
      }
      if ((v108 & 0x80u) == 0) {
        uint64_t v86 = (const std::string::value_type *)&v106;
      }
      else {
        uint64_t v86 = (const std::string::value_type *)v106;
      }
      std::string::replace(a1, v73 - v68, v85, v86, v85);
    }
    if ((char)v108 < 0) {
      operator delete(v106);
    }
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v87 = sub_32A48(2);
    uint64_t v88 = sub_32A48(34);
    char v89 = 0;
    uint64_t v90 = 0;
    *(void *)std::string __p = 0x100000002;
    uint64_t v91 = *(void *)(v87 + 8);
    while (1)
    {
      uint64_t v92 = *(int *)&__p[4 * v90];
      char v93 = v89;
      if (((v91 & v92) != 0) != ((*(void *)(v88 + 8) & v92) != 0)) {
        break;
      }
      char v89 = 1;
      uint64_t v90 = 1;
      if (v93) {
        goto LABEL_204;
      }
    }
    if ((v91 & v92) == 0) {
      uint64_t v87 = v88;
    }
LABEL_204:
    std::string v94 = *(NSObject **)v87;
    if (v94 && os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v8 + 23) >= 0) {
        std::string v95 = v8;
      }
      else {
        std::string v95 = *v8;
      }
      if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_data = (void **)&a1->__r_.__value_.__l.__data_;
      }
      else {
        p_data = (void **)a1->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "VirtualAudio_Utilities.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 74;
      *(_WORD *)&__p[18] = 2080;
      *(void *)&__p[20] = v95;
      *(_WORD *)&__p[28] = 2080;
      char v111 = p_data;
      _os_log_impl(&def_1E50E8, v94, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Translated %s to %s", __p, 0x26u);
    }
  }
  if (v61) {
    sub_4636C(v61);
  }
  if (v63) {
    goto LABEL_216;
  }
LABEL_175:
  if (v99 < 0) {
    operator delete(v97);
  }
  if ((char)v102 < 0) {
    operator delete(v100);
  }
}

void sub_F087C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (*(char *)(v48 + 23) < 0) {
    operator delete(*(void **)v48);
  }
  sub_4636C(v49);
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_F09C4(int a1)
{
  if (a1 == 1668314723) {
    return 1;
  }
  if (a1 != 1986357346) {
    return 0;
  }
  uint64_t v1 = sub_10FBF0();
  uint64_t v2 = operator new(4uLL);
  std::string __p = v2;
  _DWORD *v2 = 1886609775;
  uint64_t v6 = v2 + 1;
  uint64_t v7 = v2 + 1;
  strcpy(v8, "cwdv");
  v8[8] = 0;
  int v9 = 3;
  v11[0] = 0;
  v11[1] = 0;
  int v10 = v11;
  int v12 = 44739242;
  CFTypeRef cf = 0;
  v15[0] = off_6210C8;
  void v15[3] = v15;
  sub_10EA24(v14, v1, &__p, (uint64_t)v15);
  BOOL v3 = v14[2] != 0;
  sub_8108(v14);
  sub_6AFD4(v15);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v11[0]);
  if (__p)
  {
    uint64_t v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_F0B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F0B4C()
{
  return 1;
}

void sub_F0B5C(uint64_t a1, void *a2)
{
  *a2 = off_6210C8;
}

void *sub_F0B7C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_6210C8;
  return result;
}

void sub_F0BB4()
{
}

uint64_t sub_F0BCC(unint64_t *a1, CFDictionaryRef *a2)
{
  unsigned int v32 = 1852796517;
  if (!*a2 || !CFDictionaryGetCount(*a2)) {
    return 1852796517;
  }
  int v4 = CFDictionaryContainsKey(*a2, @"initiation trigger");
  if (!(v4 | CFDictionaryContainsKey(*a2, @"activation trigger")))
  {
    int v9 = (os_log_t *)sub_32A48(2);
    int v10 = *v9;
    if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      __int16 v34 = 1024;
      int v35 = 608;
      _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Route activation description does not contain a trigger value", buf, 0x12u);
    }
    return 1852796517;
  }
  uint64_t v5 = v4 ? @"initiation trigger" : @"activation trigger";
  sub_1D4800(*a2, v5, &v32);
  uint64_t v6 = v32;
  if (v32 == 1852796517) {
    return 1852796517;
  }
  unint64_t v7 = *a1;
  if ((int)*a1 > 1668313665)
  {
    if (v7 == 1668313666) {
      goto LABEL_19;
    }
    unsigned __int16 v8 = 29299;
  }
  else
  {
    if (v7 == 1668301427) {
      goto LABEL_19;
    }
    unsigned __int16 v8 = 24946;
  }
  if (v7 != (v8 | 0x63700000))
  {
    unint64_t v12 = HIDWORD(v7);
    goto LABEL_33;
  }
LABEL_19:
  unint64_t v12 = HIDWORD(v7);
  if (HIDWORD(v7) == 1987208039 || HIDWORD(v7) == 1986098036) && (sub_F104C(v32)) {
    return v6;
  }
  if ((int)v7 > 1668313665)
  {
    if (v7 != 1668313715)
    {
      unsigned __int16 v13 = 29250;
LABEL_27:
      if (v7 == (v13 | 0x63700000)) {
        goto LABEL_28;
      }
LABEL_33:
      BOOL v14 = v7 == 1668576377 || v7 == 1668703084;
      if (v14 && v12 == 1768776806) {
        goto LABEL_51;
      }
      if ((int)v7 > 1668313665)
      {
        if (v7 != 1668313715)
        {
          unsigned __int16 v15 = 29250;
LABEL_44:
          if (v7 != (v15 | 0x63700000)) {
            goto LABEL_52;
          }
        }
      }
      else if (v7 != 1668301427)
      {
        unsigned __int16 v15 = 24946;
        goto LABEL_44;
      }
      if ((int)v12 > 1768781410)
      {
        if (v12 == 1919776355) {
          goto LABEL_51;
        }
        unsigned __int16 v16 = 30307;
      }
      else
      {
        if (v12 == 1735222132) {
          goto LABEL_51;
        }
        unsigned __int16 v16 = 28515;
      }
      if (v12 == (v16 | 0x696D0000))
      {
LABEL_51:
        if (sub_F11C4(v6)) {
          return v6;
        }
      }
LABEL_52:
      uint64_t v17 = sub_32A48(2);
      uint64_t v18 = sub_32A48(34);
      char v19 = 0;
      uint64_t v20 = 0;
      *(void *)int buf = 0x100000002;
      uint64_t v21 = *(void *)(v17 + 8);
      while (1)
      {
        uint64_t v22 = *(int *)&buf[4 * v20];
        char v23 = v19;
        if (((v21 & v22) != 0) != ((*(void *)(v18 + 8) & v22) != 0)) {
          break;
        }
        char v19 = 1;
        uint64_t v20 = 1;
        if (v23) {
          goto LABEL_58;
        }
      }
      if ((v21 & v22) == 0) {
        uint64_t v17 = v18;
      }
LABEL_58:
      int v24 = *(NSObject **)v17;
      if (v24 && os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(v30, v32);
        int v25 = v31;
        uint64_t v26 = (void **)v30[0];
        sub_383858(&__p, (uint64_t)a1);
        int v27 = v30;
        if (v25 < 0) {
          int v27 = v26;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
        __int16 v34 = 1024;
        int v35 = 622;
        __int16 v36 = 2080;
        int v37 = v27;
        __int16 v38 = 2080;
        int v39 = p_p;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEBUG, "%25s:%-5d Resetting the trigger (%s) to None because it is not valid for the specified category and mode: %s", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v31 < 0) {
          operator delete(v30[0]);
        }
      }
      return 1852796517;
    }
  }
  else if (v7 != 1668301427)
  {
    unsigned __int16 v13 = 24946;
    goto LABEL_27;
  }
LABEL_28:
  if (HIDWORD(v7) != 1986884455 || v6 != 1768764005 && v6 != 1768780647) {
    goto LABEL_33;
  }
  return v6;
}

void sub_F1028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F104C(int a1)
{
  uint64_t result = 1;
  if (a1 <= 1751414370)
  {
    if (a1 > 1651795059)
    {
      if (a1 > 1684108898)
      {
        if (a1 == 1684108899) {
          return result;
        }
        int v3 = 1684628340;
      }
      else
      {
        if (a1 == 1651795060) {
          return result;
        }
        int v3 = 1668314723;
      }
    }
    else if (a1 > 1635213688)
    {
      if (a1 == 1635213689) {
        return result;
      }
      int v3 = 1651794544;
    }
    else
    {
      if (a1 == 845504882) {
        return result;
      }
      int v3 = 1635087471;
    }
    goto LABEL_25;
  }
  if (a1 <= 1918986610)
  {
    if (a1 > 1752396913)
    {
      if (a1 == 1752396914) {
        return result;
      }
      int v3 = 1886352244;
    }
    else
    {
      if (a1 == 1751414371) {
        return result;
      }
      int v3 = 1752132965;
    }
    goto LABEL_25;
  }
  if (a1 <= 1986357345)
  {
    if (a1 == 1918986611) {
      return result;
    }
    int v3 = 1969840752;
    goto LABEL_25;
  }
  if (a1 != 1986357346 && a1 != 1987012963)
  {
    int v3 = 2003329648;
LABEL_25:
    if (a1 != v3) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_F11C4(int a1)
{
  uint64_t result = 1;
  if (a1 > 1668049006)
  {
    if (a1 > 1668051816)
    {
      if (a1 == 1668051817) {
        return result;
      }
      unsigned __int16 v3 = 29552;
    }
    else
    {
      if (a1 == 1668049007) {
        return result;
      }
      unsigned __int16 v3 = 28011;
    }
    goto LABEL_10;
  }
  if (a1 != 1668047476 && a1 != 1668047728)
  {
    unsigned __int16 v3 = 25702;
LABEL_10:
    if (a1 != (v3 | 0x636C0000)) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_F1258(uint64_t a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 1008) + 352))(*(void *)(a1 + 1008), 1650814258, 2, 4);
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(__n128))(**(void **)(a1 + 1008) + 368);
    v5.n128_f32[0] = (float)a2;
    return v6(v5);
  }
  return result;
}

uint64_t sub_F131C(uint64_t a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 352))(*(void *)(a1 + 1008), 1685287015, 1651797616, 0);
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(__n128))(**(void **)(a1 + 1008) + 368);
    v5.n128_f32[0] = (float)a2;
    return v6(v5);
  }
  return result;
}

uint64_t sub_F13E8(uint64_t a1)
{
  uint64_t v2 = sub_298DA4();
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 344))(v2);
  uint64_t result = sub_C9B28(*(void *)(a1 + 1008), 0);
  if (result)
  {
    int v5 = v3 == 0;
    int v23 = v5;
    uint64_t v6 = *(void *)sub_3AEEEC();
    int v7 = sub_C9B28(*(void *)(a1 + 1008), 2);
    if ((v6 & 1) != 0 || v7)
    {
      int v5 = 0;
      int v23 = 0;
    }
    if (v3)
    {
      unsigned __int16 v8 = (os_log_t *)sub_32A48(2);
      int v9 = *v8;
      if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315650;
        int v25 = "VirtualAudio_Utilities.cpp";
        __int16 v26 = 1024;
        int v27 = 803;
        __int16 v28 = 1024;
        LODWORD(v29) = v3;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [VolumeLimit] SPLTarget update %u", buf, 0x18u);
      }
      float v10 = (*(float (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 360))(*(void *)(a1 + 1008), 1685287015, 1936749423, 0);
      float v11 = (*(float (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 360))(*(void *)(a1 + 1008), 1685287015, 1819176045, 0);
      unint64_t v12 = (os_log_t *)sub_32A48(2);
      float v13 = (float)((float)v3 - (float)(v10 + 13.0)) - v11;
      BOOL v14 = *v12;
      if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315650;
        int v25 = "VirtualAudio_Utilities.cpp";
        __int16 v26 = 1024;
        int v27 = 808;
        __int16 v28 = 2048;
        double v29 = v13;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d [VolumeLimit] Updating kGraphParameter_VolumeLimit_TargetLoudnessLKFS  to %f", buf, 0x1Cu);
      }
      (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368))(*(void *)(a1 + 1008), 1685287015, 1818977907, 0, v13);
    }
    *(_DWORD *)int buf = 0;
    int v22 = 4;
    (*(void (**)(void, uint64_t, uint64_t, uint8_t *, int *, uint64_t, void))(**(void **)(a1 + 1008)
                                                                                        + 408))(*(void *)(a1 + 1008), 1685287015, 1652124782, buf, &v22, 1, 0);
    if (v5 != *(_DWORD *)buf) {
      (*(void (**)(void, uint64_t, uint64_t, int *, uint64_t, uint64_t, void))(**(void **)(a1 + 1008)
    }
                                                                                        + 400))(*(void *)(a1 + 1008), 1685287015, 1652124782, &v23, 4, 1, 0);
    if (v3 - 1 >= 0x4F)
    {
      if (v3 - 80 >= 5)
      {
        v15.n128_u32[0] = -1.5;
        if (v3 - 85 < 5) {
          v15.n128_f32[0] = -6.5;
        }
        (*(void (**)(void, uint64_t, uint64_t, void, __n128))(**(void **)(a1 + 1008) + 368))(*(void *)(a1 + 1008), 1685287015, 1751934580, 0, v15);
        if (!v3)
        {
          (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 360))(*(void *)(a1 + 1008), 1685287015, 1819160624, 0);
          uint64_t v21 = (void *)(a1 + 1008);
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)*v21 + 368))(*v21, 1685287015, 1819176295, 0);
          return (*(uint64_t (**)(void, uint64_t, uint64_t, void, double))(*(void *)*v21 + 368))(*v21, 1685287015, 1818977907, 0, 0.0);
        }
        unsigned int v16 = 1819162677;
        unsigned int v17 = 1819162928;
        int v19 = 1819162933;
        if (v3 >= 0x60) {
          int v19 = 1819160624;
        }
        if (v3 >= 0x5B) {
          unsigned int v17 = v19;
        }
        BOOL v18 = v3 >= 0x56;
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368))(*(void *)(a1 + 1008), 1685287015, 1751934580, 0, -11.5);
        unsigned int v16 = 1819162672;
        unsigned int v17 = 1819162677;
        BOOL v18 = v3 >= 0x51;
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void, float))(**(void **)(a1 + 1008) + 368))(*(void *)(a1 + 1008), 1685287015, 1751934580, 0, -16.5);
      unsigned int v16 = 1819162421;
      unsigned int v17 = 1819162672;
      BOOL v18 = v3 >= 0x4C;
    }
    if (v18) {
      uint64_t v20 = v17;
    }
    else {
      uint64_t v20 = v16;
    }
    (*(void (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 360))(*(void *)(a1 + 1008), 1685287015, v20, 0);
    return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 1008) + 368))(*(void *)(a1 + 1008), 1685287015, 1819176295, 0);
  }
  return result;
}

void *sub_F1A24(void *a1)
{
  uint64_t v1 = (void *)a1[3];
  if (!v1)
  {
    uint64_t v6 = 0;
    uint64_t v3 = qword_64EA58;
    if ((uint64_t *)qword_64EA58 != qword_64EA40)
    {
      uint64_t v2 = 0;
LABEL_9:
      uint64_t v6 = (void *)v3;
      qword_64EA58 = (uint64_t)v2;
      return sub_F1D4C(v5);
    }
LABEL_10:
    (*(void (**)(void))(qword_64EA40[0] + 24))();
    (*(void (**)(uint64_t))(*(void *)qword_64EA58 + 32))(qword_64EA58);
    qword_64EA58 = (uint64_t)v6;
    uint64_t v6 = v5;
    return sub_F1D4C(v5);
  }
  if (v1 == a1)
  {
    uint64_t v6 = v5;
    (*(void (**)(void *, void *))(*a1 + 24))(a1, v5);
    uint64_t v2 = v6;
  }
  else
  {
    uint64_t v2 = (void *)(*(uint64_t (**)(void))(*v1 + 16))(a1[3]);
    uint64_t v6 = v2;
  }
  uint64_t v3 = qword_64EA58;
  if (v2 != v5)
  {
    if ((uint64_t *)qword_64EA58 != qword_64EA40) {
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  if ((uint64_t *)qword_64EA58 == qword_64EA40)
  {
    (*(void (**)(void *, void *))(v5[0] + 24))(v5, v7);
    (*(void (**)(void *))(*v6 + 32))(v6);
    uint64_t v6 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)qword_64EA58 + 24))(qword_64EA58, v5);
    (*(void (**)(uint64_t))(*(void *)qword_64EA58 + 32))(qword_64EA58);
    qword_64EA58 = 0;
    uint64_t v6 = v5;
    (*(void (**)(void *, uint64_t *))(v7[0] + 24))(v7, qword_64EA40);
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else
  {
    (*(void (**)(void *, uint64_t *))(v5[0] + 24))(v5, qword_64EA40);
    (*(void (**)(void *))(*v6 + 32))(v6);
    uint64_t v6 = (void *)qword_64EA58;
  }
  qword_64EA58 = (uint64_t)qword_64EA40;
  return sub_F1D4C(v5);
}

void sub_F1D40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void *sub_F1D4C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_F1DD0(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = sub_32A48(13);
  if (*(unsigned char *)(v3 + 8))
  {
    int v4 = *(NSObject **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        if (v2)
        {
          memset(&v17, 0, sizeof(v17));
          if (v2) {
            std::string::append(&v17, "Open", 4uLL);
          }
          if ((v2 & 2) != 0) {
            std::string::append(&v17, " | Flap1", 8uLL);
          }
          if ((v2 & 4) != 0) {
            std::string::append(&v17, " | Flap2", 8uLL);
          }
          if ((v2 & 8) != 0) {
            std::string::append(&v17, " | Flap3", 8uLL);
          }
          if ((v2 & 0x10) != 0) {
            std::string::append(&v17, " | Attach", 9uLL);
          }
          if ((v2 & 0x20) != 0) {
            std::string::append(&v17, " | StateUnknown", 0xFuLL);
          }
        }
        else
        {
          sub_21C8C(&v17, "None");
        }
        int v5 = &v17;
        if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v5 = (std::string *)v17.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 876;
        __int16 v21 = 2080;
        int v22 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d HallEffectSensorListener state = %s", buf, 0x1Cu);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  int v6 = v2 & 3;
  if (dword_64AC08 != (v6 == 3))
  {
    if (v6 == 3) {
      int v7 = "Closed";
    }
    else {
      int v7 = "Open";
    }
    sub_21C8C(&v17, v7);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int16 v8 = &v17;
    }
    else {
      unsigned __int16 v8 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v17.__r_.__value_.__l.__size_;
      }
      CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)v8, size, 0x8000100u, 0);
      CFStringRef v16 = v10;
      if (!v10)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
      }
    }
    else
    {
      CFStringRef v10 = 0;
      CFStringRef v16 = 0;
    }
    sub_C9C50((uint64_t)&v18, "SmartCoverState", (const void **)&v16);
    *(void *)int buf = &v18;
    *(void *)&uint8_t buf[8] = 1;
    CFDictionaryRef v12 = sub_4D3D8((uint64_t)buf);
    sub_F2254((uint64_t)v12, 1, 5);
    CFRelease(v12);
    if (cf) {
      CFRelease(cf);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (v10) {
      CFRelease(v10);
    }
    float v13 = (os_log_t *)sub_32A48(13);
    BOOL v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
    {
      __n128 v15 = &v17;
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __n128 v15 = (std::string *)v17.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 888;
      __int16 v21 = 2080;
      int v22 = v15;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d SmartCoverState::%s", buf, 0x1Cu);
    }
    if (qword_65D920 != -1) {
      dispatch_once(&qword_65D920, &stru_621168);
    }
    if (off_65D988) {
      off_65D988(v6 == 3);
    }
    dword_64AC08 = v6 == 3;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
}

void sub_F219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, CFTypeRef a16, CFTypeRef cf)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_F2254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_64AB90 != -1) {
    dispatch_once(&qword_64AB90, &stru_621098);
  }
  if (off_64ABF0)
  {
    int v6 = (void (*)(uint64_t, uint64_t, uint64_t))off_64ABF0;
    v6(a1, a2, a3);
  }
}

void sub_F22E8(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v1 || (uint64_t v1 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    off_65D928 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorCreate");
    off_65D930 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorInitialize");
    off_65D938 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorDispose");
    qword_65D940 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetNodeFormat");
    off_65D948 = (uint64_t (*)(void, void, void, void, void, void))dlsym(v1, "AudioIssueDetectorSetNodeFormatWithDirection");
    qword_65D950 = (uint64_t)dlsym(v1, "AudioIssueDetectorReset");
    off_65D958 = dlsym(v1, "AudioIssueDetectorAnalyzeBuffer");
    off_65D960 = (uint64_t (*)(void, void))dlsym(v1, "AudioIssueDetectorUpdateReportingSessions");
    qword_65D968 = (uint64_t)dlsym(v1, "AudioIssueDetectorRemoveNode");
    qword_65D970 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetUplinkMute");
    qword_65D978 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetDownlinkVolume");
    qword_65D980 = (uint64_t)dlsym(v1, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    off_65D988 = (uint64_t (*)(void))dlsym(v1, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  int v2 = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (v2)
  {
    uint64_t v3 = (void (*)(void))dlsym(v2, "RegisterAudioUnits_Analyzer");
    if (v3)
    {
      v3();
    }
  }
}

void sub_F24AC(id a1)
{
  uint64_t v1 = dlopen("/usr/lib/libAudioStatistics.dylib", 1);
  if (v1)
  {
    int v2 = v1;
    qword_64AB98 = (uint64_t)dlsym(v1, "CreateSharedCAReportingClient");
    qword_64ABA0 = (uint64_t)dlsym(v2, "CAReportingClientCreateReporterID");
    qword_64ABA8 = (uint64_t)dlsym(v2, "CAReportingClientCreateReporterIDFromSessionID");
    qword_64ABB0 = (uint64_t)dlsym(v2, "CAReportingClientCreatePerformanceReporterID");
    qword_64ABB8 = (uint64_t)dlsym(v2, "CAReportingClientStartReporter");
    qword_64ABC0 = (uint64_t)dlsym(v2, "CAReportingClientStopReporter");
    qword_64ABC8 = (uint64_t)dlsym(v2, "CAReportingClientSetAudioServiceType");
    qword_64ABD0 = (uint64_t)dlsym(v2, "CAReportingClientGetAudioServiceType");
    qword_64ABD8 = (uint64_t)dlsym(v2, "CAReportingClientSetConfiguration");
    qword_64ABE0 = (uint64_t)dlsym(v2, "CAReportingClientCopyConfiguration");
    off_64ABE8 = (uint64_t (*)(void, void, void, void))dlsym(v2, "CAReportingClientSendMessage");
    off_64ABF0 = dlsym(v2, "CAReportingClientSendSingleMessage");
    qword_64ABF8 = (uint64_t)dlsym(v2, "CAReportingClientDestroyReporterID");
    qword_64AC00 = (uint64_t)dlsym(v2, "CAReportingClientRequestMessage");
  }
}

void sub_F2634(uint64_t a1, void *a2)
{
  *a2 = off_621110;
}

void *sub_F2654()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_621110;
  return result;
}

void sub_F268C()
{
}

void sub_F26A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_F2720(v5, a3);
  sub_F2778(a1, a2, (uint64_t)v5, 0, (uint64_t)v6);
  if (v5[16]) {
    sub_80594((uint64_t)v5);
  }
}

void sub_F2704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11) {
    sub_80594((uint64_t)&a9);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_F2720(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[16] = 0;
  if (*(unsigned char *)(a2 + 16)) {
    sub_F36C0((uint64_t)a1, a2);
  }
  return a1;
}

void sub_F275C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 16)) {
    sub_80594(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_F2778(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  BOOL v10 = *(unsigned char *)(a3 + 16) && *(void *)a3 && CFDictionaryGetCount(*(CFDictionaryRef *)a3) != 0;
  int v11 = *(_DWORD *)a2;
  if (!*(_DWORD *)a2)
  {
    uint64_t v74 = (os_log_t *)sub_32A48(13);
    int v75 = *v74;
    if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      __int16 v88 = 1024;
      int v89 = 915;
      _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  uint64_t v12 = *(unsigned int *)(a2 + 4);
  if (!v12)
  {
    unsigned int v77 = (os_log_t *)sub_32A48(13);
    uint64_t v78 = *v77;
    if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      __int16 v88 = 1024;
      int v89 = 916;
      _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v79 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v79, "Precondition failure.");
  }
  if (v11 == 1668706147)
  {
    std::string::size_type v80 = (os_log_t *)sub_32A48(13);
    long long v81 = *v80;
    if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      __int16 v88 = 1024;
      int v89 = 918;
      _os_log_impl(&def_1E50E8, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"kVirtualAudioPlugInRoutingCategoryVoiceChat is obsolete. Please use kVirtualAudioPlugInRoutingCategoryPlayAndRecord + kVirtualAudioPlugInMode_VoiceChat.\"", buf, 0x12u);
    }
    long long v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v82, "kVirtualAudioPlugInRoutingCategoryVoiceChat is obsolete. Please use kVirtualAudioPlugInRoutingCategoryPlayAndRecord + kVirtualAudioPlugInMode_VoiceChat.");
  }
  LODWORD(v13) = 1668309362;
  v84[0] = 0;
  v84[1] = 0;
  uint64_t v83 = v84;
  if (v11 <= 1668313714)
  {
    switch(v11)
    {
      case 1668301427:
        if (v12 != 1751212899)
        {
          sub_6CB40((uint64_t *)&v83, 0x706D6274u, 1886216820);
          sub_6CB40((uint64_t *)&v83, 0x70687062u, 1885892706);
        }
        sub_6CB40((uint64_t *)&v83, 0x70726563u, 1886545251);
        uint64_t v21 = sub_32A48(2);
        uint64_t v22 = sub_32A48(34);
        char v23 = 0;
        uint64_t v24 = 0;
        *(void *)int buf = 0x100000002;
        uint64_t v25 = *(void *)(v21 + 8);
        while (1)
        {
          uint64_t v26 = *(int *)&buf[4 * v24];
          char v27 = v23;
          if (((v25 & v26) != 0) != ((*(void *)(v22 + 8) & v26) != 0)) {
            break;
          }
          char v23 = 1;
          uint64_t v24 = 1;
          if (v27)
          {
            if ((v25 & 1) == 0) {
              goto LABEL_66;
            }
            goto LABEL_62;
          }
        }
        if ((v25 & v26) == 0) {
          uint64_t v21 = v22;
        }
        if ((*(void *)(v21 + 8) & 1) == 0) {
          goto LABEL_66;
        }
LABEL_62:
        std::string::size_type v42 = *(NSObject **)v21;
        if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
          __int16 v88 = 1024;
          int v89 = 953;
          uint64_t v43 = "%25s:%-5d kVirtualAudioPlugInRoutingCategoryPlayAndRecordDefaultToSpeakerNoBT is now obsolete.";
          goto LABEL_65;
        }
        goto LABEL_66;
      case 1668309362:
LABEL_66:
        if (v12 == 1987208039 || v12 == 1986098036)
        {
          if (_os_feature_enabled_impl()) {
            uint64_t v12 = 1987208039;
          }
          else {
            uint64_t v12 = v12;
          }
          LODWORD(v13) = 1668509810;
        }
        goto LABEL_72;
      case 1668313666:
        if (v12 != 1751212899)
        {
          sub_6CB40((uint64_t *)&v83, 0x706D6274u, 1886216820);
          sub_6CB40((uint64_t *)&v83, 0x70687062u, 1885892706);
        }
        uint64_t v14 = sub_32A48(2);
        uint64_t v15 = sub_32A48(34);
        char v16 = 0;
        uint64_t v17 = 0;
        *(void *)int buf = 0x100000002;
        uint64_t v18 = *(void *)(v14 + 8);
        while (1)
        {
          uint64_t v19 = *(int *)&buf[4 * v17];
          char v20 = v16;
          if (((v18 & v19) != 0) != ((*(void *)(v15 + 8) & v19) != 0)) {
            break;
          }
          char v16 = 1;
          uint64_t v17 = 1;
          if (v20)
          {
            if ((v18 & 1) == 0) {
              goto LABEL_66;
            }
            goto LABEL_49;
          }
        }
        if ((v18 & v19) == 0) {
          uint64_t v14 = v15;
        }
        if ((*(void *)(v14 + 8) & 1) == 0) {
          goto LABEL_66;
        }
LABEL_49:
        std::string::size_type v42 = *(NSObject **)v14;
        if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
          __int16 v88 = 1024;
          int v89 = 935;
          uint64_t v43 = "%25s:%-5d kVirtualAudioPlugInRoutingCategoryPlayAndRecordNoBT is now obsolete.";
          goto LABEL_65;
        }
        goto LABEL_66;
    }
LABEL_35:
    LODWORD(v13) = v11;
    goto LABEL_72;
  }
  if (v11 == 1668313715)
  {
    sub_6CB40((uint64_t *)&v83, 0x70726563u, 1886545251);
    uint64_t v28 = sub_32A48(2);
    uint64_t v29 = sub_32A48(34);
    char v30 = 0;
    uint64_t v31 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v32 = *(void *)(v28 + 8);
    while (1)
    {
      uint64_t v33 = *(int *)&buf[4 * v31];
      char v34 = v30;
      if (((v32 & v33) != 0) != ((*(void *)(v29 + 8) & v33) != 0)) {
        break;
      }
      char v30 = 1;
      uint64_t v31 = 1;
      if (v34)
      {
        if ((v32 & 1) == 0) {
          goto LABEL_66;
        }
        goto LABEL_43;
      }
    }
    if ((v32 & v33) == 0) {
      uint64_t v28 = v29;
    }
    if ((*(void *)(v28 + 8) & 1) == 0) {
      goto LABEL_66;
    }
LABEL_43:
    std::string::size_type v42 = *(NSObject **)v28;
    if (v42 && os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      __int16 v88 = 1024;
      int v89 = 941;
      uint64_t v43 = "%25s:%-5d kVirtualAudioPlugInRoutingCategoryPlayAndRecordDefaultToSpeaker is now obsolete.";
LABEL_65:
      _os_log_impl(&def_1E50E8, v42, OS_LOG_TYPE_DEBUG, v43, buf, 0x12u);
    }
    goto LABEL_66;
  }
  if (v11 != 1668440898)
  {
    if (v11 == 1668703092)
    {
      uint64_t v12 = 1768781411;
      goto LABEL_72;
    }
    goto LABEL_35;
  }
  sub_6CB40((uint64_t *)&v83, 0x706D6274u, 1886216820);
  uint64_t v35 = sub_32A48(2);
  uint64_t v36 = sub_32A48(34);
  char v37 = 0;
  uint64_t v38 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v39 = *(void *)(v35 + 8);
  while (1)
  {
    uint64_t v40 = *(int *)&buf[4 * v38];
    char v41 = v37;
    if (((v39 & v40) != 0) != ((*(void *)(v36 + 8) & v40) != 0)) {
      break;
    }
    char v37 = 1;
    uint64_t v38 = 1;
    if (v41) {
      goto LABEL_55;
    }
  }
  if ((v39 & v40) == 0) {
    uint64_t v35 = v36;
  }
  uint64_t v39 = *(void *)(v35 + 8);
LABEL_55:
  LODWORD(v13) = 1668441443;
  if (v39)
  {
    uint64_t v44 = *(NSObject **)v35;
    if (v44)
    {
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
        __int16 v88 = 1024;
        int v89 = 959;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_DEBUG, "%25s:%-5d kVirtualAudioPlugInRoutingCategoryRecordNoBT is now obsolete.", buf, 0x12u);
      }
    }
  }
LABEL_72:
  if (v10)
  {
    if (!*(unsigned char *)(a3 + 16)) {
      sub_7F218();
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_1D4750(*(const __CFDictionary **)a3, @"vp client stereo chat enabled", (char *)&__p);
    if (__p.__r_.__value_.__s.__data_[0])
    {
      *(_DWORD *)a5 = 1936090482;
      *(unsigned char *)(a5 + 4) = 1;
    }
    if ((int)v12 > 1919776354)
    {
      if ((int)v12 > 1987081832)
      {
        if (v12 == 1987081833) {
          goto LABEL_113;
        }
        unsigned __int16 v48 = 30319;
      }
      else
      {
        if (v12 == 1919776355) {
          goto LABEL_113;
        }
        unsigned __int16 v48 = 26467;
      }
      int v45 = v48 | 0x76700000;
    }
    else
    {
      if ((int)v12 > 1768779618)
      {
        if (v12 == 1768779619)
        {
LABEL_112:
          uint64_t v12 = 1987081839;
          goto LABEL_113;
        }
        if (v12 == 1768781411)
        {
          uint64_t v12 = 1987081833;
          goto LABEL_113;
        }
LABEL_101:
        if (!sub_20A7E8()) {
          goto LABEL_144;
        }
        int v54 = *(_DWORD *)a2;
        if (*(int *)a2 > 1668313665)
        {
          if (v54 != 1668313715)
          {
            unsigned __int16 v55 = 29250;
LABEL_108:
            if (v54 == (v55 | 0x63700000)) {
              goto LABEL_109;
            }
LABEL_144:
            if ((sub_20A7E8() & 1) == 0)
            {
              uint64_t v68 = (os_log_t *)sub_32A48(2);
              uint64_t v69 = *v68;
              if (*v68)
              {
                if (os_log_type_enabled(*v68, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)int buf = 136315394;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
                  __int16 v88 = 1024;
                  int v89 = 1012;
                  _os_log_impl(&def_1E50E8, v69, OS_LOG_TYPE_DEBUG, "%25s:%-5d Not a VP vX device, so using the original behavior", buf, 0x12u);
                }
              }
            }
            int v70 = *(_DWORD *)a2;
            if (*(int *)a2 > 1668313665)
            {
              if (v70 == 1668313666) {
                goto LABEL_113;
              }
              unsigned __int16 v71 = 29299;
            }
            else
            {
              if (v70 == 1668301427) {
                goto LABEL_113;
              }
              unsigned __int16 v71 = 24946;
            }
            if (v70 != (v71 | 0x63700000))
            {
              int v72 = (os_log_t *)sub_32A48(2);
              os_log_t v73 = *v72;
              if (*v72)
              {
                if (os_log_type_enabled(*v72, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)int buf = 136315394;
                  *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
                  __int16 v88 = 1024;
                  int v89 = 1014;
                  BOOL v51 = "%25s:%-5d Not in a play & record category, so using the original behavior";
                  uint64_t v52 = v73;
                  os_log_type_t v53 = OS_LOG_TYPE_DEBUG;
                  goto LABEL_93;
                }
              }
            }
            goto LABEL_113;
          }
        }
        else if (v54 != 1668301427)
        {
          unsigned __int16 v55 = 24946;
          goto LABEL_108;
        }
LABEL_109:
        uint64_t v56 = (os_log_t *)sub_32A48(2);
        uint64_t v57 = *v56;
        if (*v56 && os_log_type_enabled(*v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
          __int16 v88 = 1024;
          int v89 = 1006;
          _os_log_impl(&def_1E50E8, v57, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Is VP vX device, so we will turn this non chat mode into voice chat for now.", buf, 0x12u);
        }
        goto LABEL_112;
      }
      if (v12 == 1735222132)
      {
        uint64_t v12 = 1987077987;
        goto LABEL_113;
      }
      int v45 = 1768057203;
    }
    if (v12 == v45) {
      goto LABEL_113;
    }
    goto LABEL_101;
  }
  if (v12 == 1936749157)
  {
    int v49 = (os_log_t *)sub_32A48(2);
    uint64_t v12 = 1937007472;
    os_log_t v50 = *v49;
    if (*v49 && os_log_type_enabled(*v49, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      __int16 v88 = 1024;
      int v89 = 1028;
      BOOL v51 = "%25s:%-5d Converting SpatialRecording to StereoCapture";
      uint64_t v52 = v50;
      os_log_type_t v53 = OS_LOG_TYPE_INFO;
LABEL_93:
      _os_log_impl(&def_1E50E8, v52, v53, v51, buf, 0x12u);
    }
  }
  else if (v12 == 1919776355)
  {
    uint64_t v46 = sub_32A48(2);
    if (*(unsigned char *)(v46 + 8))
    {
      int v47 = *(NSObject **)v46;
      if (*(void *)v46)
      {
        if (os_log_type_enabled(*(os_log_t *)v46, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
          __int16 v88 = 1024;
          int v89 = 1024;
          _os_log_impl(&def_1E50E8, v47, OS_LOG_TYPE_DEBUG, "%25s:%-5d Converting RemoteVoiceChat mode to VoiceChat mode since the VP is not (yet) in use", buf, 0x12u);
        }
      }
    }
    uint64_t v12 = 1768779619;
  }
LABEL_113:
  if (a4 && sub_20ADDC())
  {
    unint64_t v13 = v13 | (unint64_t)(v12 << 32);
    v86[0] = v13;
    v86[1] = 0;
    if (v13 == 0x696D646663706172)
    {
      v86[0] = 0x6563696D63706172;
      unint64_t v13 = 0x6563696D63706172;
    }
    else
    {
      uint64_t v58 = (os_log_t *)sub_32A48(20);
      uint64_t v59 = *v58;
      if (*v58 && os_log_type_enabled(*v58, OS_LOG_TYPE_ERROR))
      {
        sub_383858(&__p, (uint64_t)v86);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
        __int16 v88 = 1024;
        int v89 = 194;
        __int16 v90 = 2080;
        uint64_t v91 = p_p;
        _os_log_impl(&def_1E50E8, v59, OS_LOG_TYPE_ERROR, "%25s:%-5d Incorrect category/mode (%s). Echo Cancelled Input supported only for PlayAndRecord/Default routes", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
    uint64_t v12 = HIDWORD(v13);
  }
  if ((int)v13 > 1668313714)
  {
    if (v13 == 1668313715)
    {
      std::string::size_type v66 = (os_log_t *)sub_32A48(13);
      BOOL v62 = *v66;
      if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
        __int16 v88 = 1024;
        int v89 = 1042;
        char v63 = "%25s:%-5d ASSERTION FAILURE: \"outCategory == kVirtualAudioPlugInRoutingCategoryPlayAndRecordDefaultToSpea"
              "ker is illegal here.\"";
        goto LABEL_142;
      }
    }
    else if (v13 == 1668440898)
    {
      CFStringRef v64 = (os_log_t *)sub_32A48(13);
      BOOL v62 = *v64;
      if (*v64)
      {
        if (os_log_type_enabled(*v64, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
          __int16 v88 = 1024;
          int v89 = 1044;
          char v63 = "%25s:%-5d ASSERTION FAILURE: \"outCategory == kVirtualAudioPlugInRoutingCategoryRecordNoBT is illegal here.\"";
          goto LABEL_142;
        }
      }
    }
  }
  else if (v13 == 1668301427)
  {
    int v65 = (os_log_t *)sub_32A48(13);
    BOOL v62 = *v65;
    if (*v65 && os_log_type_enabled(*v65, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
      __int16 v88 = 1024;
      int v89 = 1043;
      char v63 = "%25s:%-5d ASSERTION FAILURE: \"outCategory == kVirtualAudioPlugInRoutingCategoryPlayAndRecordDefaultToSpeake"
            "rNoBT is illegal here.\"";
      goto LABEL_142;
    }
  }
  else if (v13 == 1668313666)
  {
    uint64_t v61 = (os_log_t *)sub_32A48(13);
    BOOL v62 = *v61;
    if (*v61)
    {
      if (os_log_type_enabled(*v61, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "VirtualAudio_Utilities.cpp";
        __int16 v88 = 1024;
        int v89 = 1041;
        char v63 = "%25s:%-5d ASSERTION FAILURE: \"outCategory == kVirtualAudioPlugInRoutingCategoryPlayAndRecordNoBT is illegal here.\"";
LABEL_142:
        _os_log_impl(&def_1E50E8, v62, OS_LOG_TYPE_ERROR, v63, buf, 0x12u);
      }
    }
  }
  uint64_t v67 = *(void *)(a2 + 8);
  *(_DWORD *)a1 = v13;
  *(_DWORD *)(a1 + 4) = v12;
  *(void *)(a1 + 8) = v67;
  sub_46A4C((uint64_t *)(a1 + 16), (uint64_t)&v83);
  sub_463E0(v84[0]);
}

void sub_F362C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_F36B8()
{
}

CFTypeRef sub_F36C0(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)a2;
  *(void *)a1 = *(void *)a2;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  if (v4) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    CFTypeRef result = CFRetain(result);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_F3710(uint64_t a1, const __CFDictionary **a2)
{
  if (!*a2)
  {
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(void *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_DWORD *)(a1 + 80) = 1065353216;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_DWORD *)(a1 + 120) = 1065353216;
    *(_DWORD *)(a1 + 160) = 1065353216;
    return;
  }
  int v4 = sub_F3EE4(*a2, "input port UIDs");
  if (!v4) {
    goto LABEL_10;
  }
  BOOL v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_10:
    LOBYTE(buf[0]) = 0;
    LOBYTE(buf[2]) = 0;
    CFArrayRef v32 = 0;
    sub_206D8((uint64_t)buf);
    BOOL v5 = 0;
    char v14 = 1;
    goto LABEL_21;
  }
  *(void *)int buf = v5;
  LOBYTE(buf[2]) = 1;
  CFRetain(v5);
  CFArrayRef v32 = (CFArrayRef)v5;
  sub_206D8((uint64_t)buf);
  uint64_t v7 = sub_32A48(2);
  uint64_t v8 = sub_32A48(34);
  char v9 = 0;
  uint64_t v10 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v11 = *(void *)(v7 + 8);
  while (1)
  {
    uint64_t v12 = (int)buf[v10];
    char v13 = v9;
    if (((v11 & v12) != 0) != ((*(void *)(v8 + 8) & v12) != 0)) {
      break;
    }
    char v9 = 1;
    uint64_t v10 = 1;
    if (v13) {
      goto LABEL_13;
    }
  }
  if ((v11 & v12) == 0) {
    uint64_t v7 = v8;
  }
LABEL_13:
  uint64_t v15 = *(NSObject **)v7;
  if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    sub_168B00(&__p, (const __CFArray *)v5);
    char v16 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    buf[0] = 136315650;
    *(void *)&buf[1] = "VirtualAudio_Utilities.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 1096;
    HIWORD(buf[4]) = 2080;
    *(void *)&buf[5] = v16;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Persistent input port UIDs: %s.", (uint8_t *)buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  char v14 = 0;
LABEL_21:
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  uint64_t v17 = sub_68AB8(*a2, "output port UIDs");
  if (v17)
  {
    uint64_t v18 = v17;
    CFRetain(v17);
    CFTypeID v19 = CFGetTypeID(v18);
    if (v19 == CFArrayGetTypeID())
    {
      *(void *)int buf = v18;
      LOBYTE(buf[2]) = 1;
      CFRetain(v18);
      CFArrayRef v30 = (CFArrayRef)v18;
      sub_206D8((uint64_t)buf);
      uint64_t v20 = sub_32A48(2);
      uint64_t v21 = sub_32A48(34);
      char v22 = 0;
      uint64_t v23 = 0;
      *(void *)int buf = 0x100000002;
      uint64_t v24 = *(void *)(v20 + 8);
      while (1)
      {
        uint64_t v25 = (int)buf[v23];
        char v26 = v22;
        if (((v24 & v25) != 0) != ((*(void *)(v21 + 8) & v25) != 0)) {
          break;
        }
        char v22 = 1;
        uint64_t v23 = 1;
        if (v26) {
          goto LABEL_32;
        }
      }
      if ((v24 & v25) == 0) {
        uint64_t v20 = v21;
      }
LABEL_32:
      char v27 = *(NSObject **)v20;
      if (v27)
      {
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          sub_168B00(&__p, (const __CFArray *)v18);
          uint64_t v28 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          buf[0] = 136315650;
          *(void *)&buf[1] = "VirtualAudio_Utilities.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 1101;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v28;
          _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEBUG, "%25s:%-5d - Persistent output port UIDs: %s.", (uint8_t *)buf, 0x1Cu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        LOBYTE(v27) = 0;
      }
      goto LABEL_40;
    }
    CFRelease(v18);
  }
  LOBYTE(buf[0]) = 0;
  LOBYTE(buf[2]) = 0;
  CFArrayRef v30 = 0;
  sub_206D8((uint64_t)buf);
  uint64_t v18 = 0;
  LOBYTE(v27) = 1;
LABEL_40:
  memset(buf, 0, 24);
  memset(&__p, 0, sizeof(__p));
  sub_F3C80((CFTypeRef **)buf, &v32);
  sub_F3C80((CFTypeRef **)&__p, &v30);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_7E0DC((void *)a1, *(const void ***)buf, *(const void ***)&buf[2], (uint64_t)(*(void *)&buf[2] - *(void *)buf) >> 3);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_7E0DC((void *)(a1 + 24), (const void **)__p.__r_.__value_.__l.__data_, (const void **)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  p_p = &__p;
  sub_4EDB8((void ***)&p_p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  sub_4EDB8((void ***)&__p);
  if ((v27 & 1) == 0) {
    CFRelease(v18);
  }
  if ((v14 & 1) == 0) {
    CFRelease(v5);
  }
}

void sub_F3BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13)
{
}

void sub_F3C80(CFTypeRef **a1, CFArrayRef *a2)
{
  CFArrayRef v2 = *a2;
  if (*a2)
  {
    CFIndex Count = CFArrayGetCount(*a2);
    CFIndex v6 = Count;
    CFArrayRef v7 = *a2;
    if (v7)
    {
      CFIndex v8 = CFArrayGetCount(v7);
      if (!v6) {
        return;
      }
    }
    else
    {
      CFIndex v8 = 0;
      if (!Count) {
        return;
      }
    }
    unint64_t v9 = 0;
    do
    {
      if (v2 == v7 && v9 == v8) {
        break;
      }
      sub_68838(&cf, v2, v9);
      CFTypeRef v10 = cf;
      if (cf)
      {
        CFTypeID v11 = CFGetTypeID(cf);
        if (v11 == CFStringGetTypeID())
        {
          sub_E2B68(&v27, &cf);
          uint64_t v12 = a1[1];
          unint64_t v13 = (unint64_t)a1[2];
          if ((unint64_t)v12 >= v13)
          {
            char v14 = *a1;
            uint64_t v15 = v12 - *a1;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 61) {
              sub_60548();
            }
            uint64_t v17 = v13 - (void)v14;
            if (v17 >> 2 > v16) {
              unint64_t v16 = v17 >> 2;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            CFArrayRef v32 = a1 + 2;
            if (v18)
            {
              unint64_t v18 = (unint64_t)sub_106EC(v18);
              char v14 = *a1;
              uint64_t v12 = a1[1];
            }
            else
            {
              uint64_t v19 = 0;
            }
            uint64_t v20 = (CFTypeRef *)(v18 + 8 * v15);
            unint64_t v21 = v18 + 8 * v19;
            unint64_t v31 = v21;
            *uint64_t v20 = v27;
            char v22 = v20 + 1;
            CFTypeRef v27 = 0;
            *((void *)&v30 + 1) = v20 + 1;
            if (v12 != v14)
            {
              do
              {
                uint64_t v23 = *--v12;
                *--uint64_t v20 = v23;
                CFTypeRef *v12 = 0;
              }
              while (v12 != v14);
              char v22 = (CFTypeRef *)*((void *)&v30 + 1);
              unint64_t v21 = v31;
            }
            long long v24 = *(_OWORD *)a1;
            *a1 = v20;
            a1[1] = v22;
            long long v30 = v24;
            uint64_t v25 = a1[2];
            a1[2] = (CFTypeRef *)v21;
            unint64_t v31 = (unint64_t)v25;
            uint64_t v29 = v24;
            sub_F3E94((uint64_t)&v29);
            CFTypeRef v26 = v27;
            a1[1] = v22;
            if (v26) {
              CFRelease(v26);
            }
          }
          else
          {
            CFTypeRef *v12 = v27;
            a1[1] = v12 + 1;
          }
        }
        CFRelease(v10);
      }
      ++v9;
    }
    while (v9 != v6);
  }
}

void sub_F3E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  sub_6393C((const void **)va);
  sub_60594((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_F3E94(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    int v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    sub_7E20C(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void *sub_F3EE4(const __CFDictionary *a1, char *__s)
{
  size_t v5 = strlen(__s);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (a1) {
    int Value = CFDictionaryGetValue(a1, v6);
  }
  CFRelease(v6);
  if (!a1) {
    return 0;
  }
  return Value;
}

void sub_F3FB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_F3FF0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (a2 != a3)
  {
    CFIndex v8 = a2;
    uint64_t v10 = qword_64AB90;
    do
    {
      uint64_t v11 = *v8;
      uint64_t v12 = *a1;
      if (v10 != -1) {
        dispatch_once(&qword_64AB90, &stru_621098);
      }
      if (off_64ABE8)
      {
        off_64ABE8(v11, v12, a4, a5);
        uint64_t v10 = qword_64AB90;
      }
      else
      {
        uint64_t v10 = -1;
      }
      ++v8;
    }
    while (v8 != a3);
  }
}

BOOL sub_F40C0()
{
  if (!byte_64AB8C)
  {
    v0 = (void *)sub_F820C();
    std::string __p = (void *)CFStringCreateWithCString(0, "AOP Audio-1", 0x600u);
    LOBYTE(v6) = 1;
    byte_64AB8C = sub_F832C(v0, (CFStringRef *)&__p) != 0;
    sub_72924((uint64_t)&__p);
  }
  if (byte_64AB8D)
  {
    BOOL v1 = 1;
  }
  else
  {
    uint64_t v2 = sub_10FBF0();
    uint64_t v3 = operator new(4uLL);
    _DWORD *v3 = 1886216809;
    std::string __p = v3;
    CFStringRef v6 = v3 + 1;
    CFArrayRef v7 = v3 + 1;
    strcpy(v8, "cwdv");
    v8[8] = 0;
    int v9 = 3;
    v11[0] = 0;
    v11[1] = 0;
    uint64_t v10 = v11;
    int v12 = 44739242;
    CFTypeRef cf = 0;
    v15[0] = off_6210C8;
    void v15[3] = v15;
    sub_10E1E8(v14, v2, &__p, (uint64_t)v15);
    sub_6AFD4(v15);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(v11[0]);
    if (__p)
    {
      CFStringRef v6 = __p;
      operator delete(__p);
    }
    byte_64AB8D = v14[2] != 0;
    sub_8108(v14);
    BOOL v1 = byte_64AB8D != 0;
  }
  return byte_64AB8C && v1;
}

void sub_F4278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F42BC(uint64_t result, uint64_t a2, void **a3, uint64_t a4)
{
  CFStringRef v6 = (uint64_t *)a2;
  CFArrayRef v7 = (uint64_t **)result;
  CFIndex v8 = (void **)(result + 8);
  if (result + 8 == a2 || (CFTypeRef result = sub_15E8C(a3, (void **)(a2 + 32)), (result & 0x80) != 0))
  {
    uint64_t v10 = *v6;
    if (*v7 == v6)
    {
      int v12 = v6;
    }
    else
    {
      if (v10)
      {
        uint64_t v11 = (uint64_t *)*v6;
        do
        {
          int v12 = v11;
          uint64_t v11 = (uint64_t *)v11[1];
        }
        while (v11);
      }
      else
      {
        uint64_t v15 = v6;
        do
        {
          int v12 = (uint64_t *)v15[2];
          BOOL v16 = *v12 == (void)v15;
          uint64_t v15 = v12;
        }
        while (v16);
      }
      CFTypeRef result = sub_15E8C(v12 + 4, a3);
      if ((result & 0x80) == 0) {
        goto LABEL_19;
      }
    }
    if (!v10)
    {
      uint64_t v20 = v6;
      int v9 = (void **)v6;
      goto LABEL_25;
    }
    uint64_t v20 = v12;
    int v9 = (void **)(v12 + 1);
    goto LABEL_22;
  }
  CFTypeRef result = sub_15E8C(v6 + 4, a3);
  if ((result & 0x80) != 0)
  {
    uint64_t v13 = v6[1];
    if (v13)
    {
      char v14 = (void **)v6[1];
      do
      {
        int v9 = v14;
        char v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v17 = (void **)v6;
      do
      {
        int v9 = (void **)v17[2];
        BOOL v16 = *v9 == v17;
        uint64_t v17 = v9;
      }
      while (!v16);
    }
    if (v9 == v8 || (CFTypeRef result = sub_15E8C(a3, v9 + 4), (result & 0x80) != 0))
    {
      if (v13)
      {
        uint64_t v20 = (uint64_t *)v9;
      }
      else
      {
        uint64_t v20 = v6;
        int v9 = (void **)(v6 + 1);
      }
LABEL_22:
      if (*v9) {
        return result;
      }
      goto LABEL_23;
    }
LABEL_19:
    CFTypeRef result = (uint64_t)sub_15DF8((uint64_t)v7, &v20, a3);
    int v9 = (void **)result;
    goto LABEL_22;
  }
  uint64_t v19 = v6;
  uint64_t v20 = v6;
  int v9 = (void **)&v19;
  if (v6) {
    return result;
  }
LABEL_23:
  CFStringRef v6 = v20;
LABEL_25:
  sub_F4468((uint64_t)&v18, (uint64_t)v7, a4);
  return (uint64_t)sub_46CA8(v7, (uint64_t)v6, (uint64_t **)v9, v18);
}

void *sub_F4468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  CFStringRef v6 = (char *)operator new(0x38uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  CFTypeRef result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    CFTypeRef result = sub_21E8C(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)CFTypeRef result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_F44DC(_Unwind_Exception *a1)
{
  *BOOL v1 = 0;
  sub_79970(0, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_F44F8(uint64_t result, uint64_t a2)
{
  qword_659458 = 0;
  qword_659450 = 0;
  qword_659448 = (uint64_t)&qword_659450;
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = result + 16 * a2;
    for (uint64_t i = &qword_659450; i != &qword_659450; uint64_t i = (uint64_t *)qword_659448)
    {
      CFStringRef v6 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          CFArrayRef v7 = v6;
          CFStringRef v6 = (uint64_t *)v6[1];
        }
        while (v6);
      }
      else
      {
        CFIndex v8 = &qword_659450;
        do
        {
          CFArrayRef v7 = (uint64_t *)v8[2];
          BOOL v9 = *v7 == (void)v8;
          CFIndex v8 = v7;
        }
        while (v9);
      }
      uint64_t v10 = *(void **)v2;
      size_t v11 = *(void *)(v2 + 8);
      CFTypeRef result = sub_15EC4((const void *)v7[4], v7[5], *(void **)v2, v11);
      if ((result & 0x80) != 0) {
        goto LABEL_19;
      }
      if (v3)
      {
        int v12 = (uint64_t *)v3;
        do
        {
          while (1)
          {
            CFArrayRef v7 = v12;
            uint64_t v13 = (void *)v12[4];
            size_t v14 = v12[5];
            if ((sub_15EC4(v10, v11, v13, v14) & 0x80) == 0) {
              break;
            }
            int v12 = (uint64_t *)*v7;
            uint64_t v15 = v7;
            if (!*v7) {
              goto LABEL_23;
            }
          }
          CFTypeRef result = sub_15EC4(v13, v14, v10, v11);
          if ((result & 0x80) == 0) {
            goto LABEL_26;
          }
          uint64_t v15 = v7 + 1;
          int v12 = (uint64_t *)v7[1];
        }
        while (v12);
        goto LABEL_23;
      }
LABEL_22:
      CFArrayRef v7 = &qword_659450;
      uint64_t v15 = &qword_659450;
LABEL_23:
      BOOL v16 = operator new(0x30uLL);
      uint64_t v16[2] = *(_OWORD *)v2;
      *(void *)BOOL v16 = 0;
      *((void *)v16 + 1) = 0;
      *((void *)v16 + 2) = v7;
      uint64_t *v15 = (uint64_t)v16;
      if (*(void *)qword_659448)
      {
        qword_659448 = *(void *)qword_659448;
        BOOL v16 = (_OWORD *)*v15;
      }
      CFTypeRef result = (uint64_t)sub_46D00((uint64_t *)qword_659450, (uint64_t *)v16);
      uint64_t v3 = qword_659450;
      ++qword_659458;
LABEL_26:
      v2 += 16;
      if (v2 == v4) {
        return result;
      }
    }
    CFArrayRef v7 = &qword_659450;
LABEL_19:
    if (v3)
    {
      uint64_t v15 = v7 + 1;
      if (v7[1]) {
        goto LABEL_26;
      }
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  return result;
}

void sub_F469C(_Unwind_Exception *a1)
{
  sub_463E0(v1);
  _Unwind_Resume(a1);
}

void sub_F46B0(void *a1, int a2, void *a3)
{
  uint64_t v6 = a1[1];
  if (a1[2] != v6)
  {
    unint64_t v7 = a1[4];
    CFIndex v8 = (char **)(v6 + 8 * (v7 >> 8));
    BOOL v9 = *v8;
    uint64_t v10 = &(*v8)[16 * v7];
    uint64_t v11 = *(void *)(v6 + (((a1[5] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a1 + 40) + v7);
    while (v10 != (char *)v11)
    {
      if (!*(_DWORD *)v10)
      {
        uint64_t v13 = (os_log_t *)sub_32A48(7);
        size_t v14 = *v13;
        if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
        {
          buf[0] = 136315394;
          *(void *)&buf[1] = "DeviceManager.cpp";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = 253;
          _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d invalid AudioObjectID", (uint8_t *)buf, 0x12u);
        }
        break;
      }
      v10 += 16;
      if (v10 - v9 == 4096)
      {
        int v12 = v8[1];
        ++v8;
        BOOL v9 = v12;
        uint64_t v10 = v12;
      }
    }
  }
  uint64_t v15 = a1[1];
  if (a1[2] != v15)
  {
    unint64_t v16 = a1[4];
    uint64_t v17 = (uint64_t *)(v15 + 8 * (v16 >> 8));
    uint64_t v18 = *v17;
    uint64_t v19 = *v17 + 16 * v16;
    uint64_t v20 = *(void *)(v15 + (((a1[5] + v16) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a1 + 40) + v16);
    while (v19 != v20)
    {
      if (!*(void *)(v19 + 8))
      {
        if (!a2)
        {
          char v99 = (os_log_t *)sub_32A48(7);
          __int16 v100 = *v99;
          if (*v99)
          {
            if (os_log_type_enabled(*v99, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "DeviceManager.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 254;
              _os_log_impl(&def_1E50E8, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d uid is NULL for a new PhysicalDevice", (uint8_t *)buf, 0x12u);
            }
          }
        }
        break;
      }
      v19 += 16;
      if (v19 - v18 == 4096)
      {
        uint64_t v21 = v17[1];
        ++v17;
        uint64_t v18 = v21;
        uint64_t v19 = v21;
      }
    }
  }
  if (a3)
  {
    __int16 v105 = a3;
    char v106 = (*(uint64_t (**)(void *))(*a3 + 16))(a3);
    char v22 = a3 + 13;
    *(void *)int buf = buf;
    *(void *)&AudioObjectPropertyAddress buf[2] = buf;
    *(void *)&uint8_t buf[4] = 0;
    for (uint64_t i = a3 + 13; ; sub_F81A4((uint64_t *)buf, i[2], i[3]))
    {
      uint64_t i = (void *)i[1];
      if (i == v22) {
        break;
      }
    }
    std::uncaught_exceptions();
    v103[0] = v103;
    v103[1] = v103;
    uint64_t v104 = 0;
    uint64_t v24 = *(void *)&buf[4];
    if (*(void *)&buf[4])
    {
      uint64_t v26 = *(void *)buf;
      uint64_t v25 = *(void **)&buf[2];
      uint64_t v27 = **(void **)&buf[2];
      *(void *)(v27 + 8) = *(void *)(*(void *)buf + 8);
      **(void **)(v26 + 8) = v27;
      uint64_t v28 = v103[0];
      *(void *)(v103[0] + 8) = v25;
      *uint64_t v25 = v28;
      v103[0] = v26;
      *(void *)(v26 + 8) = v103;
      uint64_t v104 = v24;
      *(void *)&uint8_t buf[4] = 0;
    }
    sub_B8E4((uint64_t *)buf);
    if (!a2)
    {
      memset(v118, 0, 48);
      LOBYTE(v112) = 1;
      char v113 = a3;
      if (((*(uint64_t (**)(void *))(*a3 + 48))(a3) & 1) == 0)
      {
        unsigned __int16 v55 = (os_log_t *)sub_32A48(13);
        uint64_t v56 = *v55;
        if (*v55)
        {
          if (os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "PortManager.h";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 202;
            _os_log_impl(&def_1E50E8, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Client mutex is not owned by the current thread\"", (uint8_t *)buf, 0x12u);
          }
        }
      }
      uint64_t v57 = (_DWORD *)sub_10FBF0();
      *(void *)int buf = v57;
      LOBYTE(buf[2]) = (*(uint64_t (**)(_DWORD *))(*(void *)v57 + 16))(v57);
      ++v57[114];
      sub_3BCAC(buf);
      uint64_t v58 = a1[1];
      if (a1[2] != v58)
      {
        unint64_t v59 = a1[4];
        uint64_t v60 = a1[5];
        uint64_t v61 = (void *)(v58 + 8 * (v59 >> 8));
        uint64_t v62 = *v61 + 16 * v59;
        uint64_t v102 = *(void *)(v58 + (((v60 + v59) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v60 + v59);
        while (v62 != v102)
        {
          char v63 = (os_log_t *)sub_32A48(7);
          CFStringRef v64 = *v63;
          if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_DEFAULT))
          {
            AudioObjectID v65 = *(_DWORD *)v62;
            uint64_t v66 = *(void *)(v62 + 8);
            buf[0] = 136316162;
            *(void *)&buf[1] = "DeviceManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 319;
            HIWORD(buf[4]) = 2080;
            *(void *)&buf[5] = "Added";
            LOWORD(buf[7]) = 1024;
            *(_DWORD *)((char *)&buf[7] + 2) = v65;
            HIWORD(buf[8]) = 2112;
            *(void *)&buf[9] = v66;
            _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Handling device state [%s] for Device ID: %u for UID: %@", (uint8_t *)buf, 0x2Cu);
          }
          if ((sub_166230() & 1) == 0 && sub_F7F68("VA_HandleDeviceArrival", 0x16uLL) == &qword_659450)
          {
            os_signpost_id_t v67 = 0;
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_659478))
            {
              qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_659478);
            }
            os_signpost_id_t v67 = os_signpost_id_generate((os_log_t)qword_659470);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_659478))
            {
              qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_659478);
            }
            if (v67 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              uint64_t v68 = qword_659470;
              if (os_signpost_enabled((os_log_t)qword_659470))
              {
                AudioObjectID v69 = *(_DWORD *)v62;
                uint64_t v70 = *(void *)(v62 + 8);
                buf[0] = 67109378;
                buf[1] = v69;
                LOWORD(buf[2]) = 2112;
                *(void *)((char *)&buf[2] + 2) = v70;
                _os_signpost_emit_with_name_impl(&def_1E50E8, v68, OS_SIGNPOST_INTERVAL_BEGIN, v67, "VA_HandleDeviceArrival", "Adding device, ID: %u for UID: %@", (uint8_t *)buf, 0x12u);
              }
            }
          }
          os_signpost_id_t v107 = v67;
          uint64_t v71 = sub_32A48(42);
          if (*(unsigned char *)(v71 + 8))
          {
            int v72 = *(NSObject **)v71;
            if (*(void *)v71)
            {
              if (os_log_type_enabled(*(os_log_t *)v71, OS_LOG_TYPE_DEBUG))
              {
                buf[0] = 136315650;
                *(void *)&buf[1] = "SignpostUtilities.h";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 97;
                HIWORD(buf[4]) = 2080;
                *(void *)&buf[5] = "kHandleDeviceArrival";
                _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", (uint8_t *)buf, 0x1Cu);
              }
            }
          }
          os_log_t v73 = (os_log_t *)sub_32A48(7);
          uint64_t v74 = *v73;
          if (*v73 && os_log_type_enabled(*v73, OS_LOG_TYPE_INFO))
          {
            AudioObjectID v75 = *(_DWORD *)v62;
            uint64_t v76 = *(void *)(v62 + 8);
            buf[0] = 136315906;
            *(void *)&buf[1] = "DeviceManager.cpp";
            LOWORD(buf[3]) = 1024;
            *(_DWORD *)((char *)&buf[3] + 2) = 266;
            HIWORD(buf[4]) = 1024;
            buf[5] = v75;
            LOWORD(buf[6]) = 2112;
            *(void *)((char *)&buf[6] + 2) = v76;
            _os_log_impl(&def_1E50E8, v74, OS_LOG_TYPE_INFO, "%25s:%-5d Creating Device ID: %u with UID: %@", (uint8_t *)buf, 0x22u);
          }
          uint64_t v77 = a3[14];
          if ((void *)v77 == v22) {
            goto LABEL_90;
          }
          AudioObjectID v78 = *(_DWORD *)v62;
          while ((*(unsigned int (**)(void))(**(void **)(v77 + 16) + 120))(*(void *)(v77 + 16)) != v78)
          {
            uint64_t v77 = *(void *)(v77 + 8);
            if ((void *)v77 == v22) {
              goto LABEL_90;
            }
          }
          if ((void *)v77 == v22)
          {
LABEL_90:
            AudioObjectID v81 = *(_DWORD *)v62;
            long long v82 = *(const void **)(v62 + 8);
            if (v82) {
              CFRetain(*(CFTypeRef *)(v62 + 8));
            }
            CFTypeRef cf = v82;
            sub_17D798(&__p, v81, &cf);
            if (cf) {
              CFRelease(cf);
            }
            uint64_t v83 = __p;
            if (__p)
            {
              sub_F81A4(a3 + 13, (uint64_t)__p, (uint64_t)v116);
              (*(void (**)(void *))(*(void *)v83 + 136))(v83);
              uint64_t v110 = 0x676C6F6264736473;
              LODWORD(v111) = 0;
              if (!*((unsigned char *)a3 + 128)
                || !(*(unsigned int (**)(void *, uint64_t *))(*(void *)v83 + 16))(v83, &v110))
              {
                goto LABEL_111;
              }
              int v108 = 1;
              (*(void (**)(void *, uint64_t *, void, void, uint64_t, int *))(*(void *)v83 + 48))(v83, &v110, 0, 0, 4, &v108);
              uint64_t v84 = sub_32A48(7);
              uint64_t v85 = sub_32A48(27);
              char v86 = 0;
              uint64_t v87 = 0;
              *(void *)int buf = 0x100000002;
              uint64_t v88 = *(void *)(v84 + 8);
              do
              {
                uint64_t v89 = (int)buf[v87];
                char v90 = v86;
                if (((v88 & v89) != 0) != ((*(void *)(v85 + 8) & v89) != 0))
                {
                  if ((v88 & v89) == 0) {
                    uint64_t v84 = v85;
                  }
                  if (*(void *)(v84 + 8)) {
                    goto LABEL_108;
                  }
                  goto LABEL_111;
                }
                char v86 = 1;
                uint64_t v87 = 1;
              }
              while ((v90 & 1) == 0);
              if ((v88 & 1) == 0) {
                goto LABEL_111;
              }
LABEL_108:
              std::string v95 = *(NSObject **)v84;
              if (v95 && os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
              {
                AudioObjectID v96 = *(_DWORD *)v62;
                uint64_t v97 = *(void *)(v62 + 8);
                buf[0] = 136315906;
                *(void *)&buf[1] = "DeviceManager.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 297;
                HIWORD(buf[4]) = 1024;
                buf[5] = v96;
                LOWORD(buf[6]) = 2112;
                *(void *)((char *)&buf[6] + 2) = v97;
                _os_log_impl(&def_1E50E8, v95, OS_LOG_TYPE_DEBUG, "%25s:%-5d Enabled port discovery on device ID %u (uid '%@').", (uint8_t *)buf, 0x22u);
              }
LABEL_111:
              sub_D26B4((uint64_t)v83);
            }
            else
            {
              uint64_t v91 = (os_log_t *)sub_32A48(7);
              uint64_t v92 = *v91;
              if (*v91 && os_log_type_enabled(*v91, OS_LOG_TYPE_INFO))
              {
                AudioObjectID v93 = *(_DWORD *)v62;
                uint64_t v94 = *(void *)(v62 + 8);
                buf[0] = 136315906;
                *(void *)&buf[1] = "DeviceManager.cpp";
                LOWORD(buf[3]) = 1024;
                *(_DWORD *)((char *)&buf[3] + 2) = 304;
                HIWORD(buf[4]) = 1024;
                buf[5] = v93;
                LOWORD(buf[6]) = 2112;
                *(void *)((char *)&buf[6] + 2) = v94;
                _os_log_impl(&def_1E50E8, v92, OS_LOG_TYPE_INFO, "%25s:%-5d PhysicalDevice to add could not be created. Skipping. ID: %u; UID: %@.",
                  (uint8_t *)buf,
                  0x22u);
              }
            }
            if (v116) {
              sub_4636C(v116);
            }
          }
          else
          {
            int v79 = (os_log_t *)sub_32A48(7);
            std::string::size_type v80 = *v79;
            if (*v79 && os_log_type_enabled(*v79, OS_LOG_TYPE_ERROR))
            {
              buf[0] = 136315394;
              *(void *)&buf[1] = "DeviceManager.cpp";
              LOWORD(buf[3]) = 1024;
              *(_DWORD *)((char *)&buf[3] + 2) = 274;
              _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d PhysicalDevice to add already exists in the DeviceManager database", (uint8_t *)buf, 0x12u);
            }
          }
          sub_F8008(&v107);
          v62 += 16;
          if (v62 - *v61 == 4096)
          {
            uint64_t v98 = v61[1];
            ++v61;
            uint64_t v62 = v98;
          }
        }
      }
      if (!*(void *)&v118[40])
      {
        if (v113) {
          operator new();
        }
        *(void *)int buf = 0;
        sub_10FBF0();
        sub_10BA10();
      }
      exception = __cxa_allocate_exception(0x58uLL);
      sub_F6A90((uint64_t)buf, v118);
      sub_F6D64((uint64_t)exception, buf);
    }
    memset(buf, 0, 48);
    int v112 = &v112;
    char v113 = &v112;
    uint64_t v114 = 0;
    LOBYTE(__p) = 0;
    char v116 = 0;
    uint64_t v29 = (_DWORD *)sub_10FBF0();
    *(void *)char v118 = v29;
    v118[8] = (*(uint64_t (**)(_DWORD *))(*(void *)v29 + 16))(v29);
    ++v29[114];
    sub_3BCAC(v118);
    uint64_t v30 = a1[1];
    if (a1[2] == v30) {
      goto LABEL_127;
    }
    unint64_t v31 = a1[4];
    uint64_t v32 = a1[5];
    uint64_t v33 = (void *)(v30 + 8 * (v31 >> 8));
    uint64_t v34 = *v33 + 16 * v31;
    uint64_t v35 = *(void *)(v30 + (((v32 + v31) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v32 + v31);
    if (v34 == v35) {
      goto LABEL_127;
    }
    while (1)
    {
      uint64_t v36 = (os_log_t *)sub_32A48(7);
      char v37 = *v36;
      if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_DEFAULT))
      {
        int v38 = *(_DWORD *)v34;
        uint64_t v39 = *(void *)(v34 + 8);
        *(_DWORD *)char v118 = 136316162;
        *(void *)&v118[4] = "DeviceManager.cpp";
        *(_WORD *)&v118[12] = 1024;
        *(_DWORD *)&v118[14] = 365;
        *(_WORD *)&v118[18] = 2080;
        *(void *)&v118[20] = "Removed";
        *(_WORD *)&v118[28] = 1024;
        *(_DWORD *)&v118[30] = v38;
        *(_WORD *)&v118[34] = 2112;
        *(void *)&v118[36] = v39;
        _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Handling device state [%s] for Device ID: %u for UID: %@", v118, 0x2Cu);
      }
      uint64_t v40 = (os_log_t *)sub_32A48(7);
      char v41 = *v40;
      if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_INFO))
      {
        int v42 = *(_DWORD *)v34;
        uint64_t v43 = *(void *)(v34 + 8);
        *(_DWORD *)char v118 = 136315906;
        *(void *)&v118[4] = "DeviceManager.cpp";
        *(_WORD *)&v118[12] = 1024;
        *(_DWORD *)&v118[14] = 402;
        *(_WORD *)&v118[18] = 1024;
        *(_DWORD *)&v118[20] = v42;
        *(_WORD *)&v118[24] = 2112;
        *(void *)&v118[26] = v43;
        _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_INFO, "%25s:%-5d Deleting Device ID: %u with UID: %@", v118, 0x22u);
      }
      uint64_t v44 = a3[14];
      if ((void *)v44 == v22) {
        goto LABEL_44;
      }
      int v45 = *(_DWORD *)v34;
      while ((*(unsigned int (**)(void))(**(void **)(v44 + 16) + 120))(*(void *)(v44 + 16)) != v45)
      {
        uint64_t v44 = *(void *)(v44 + 8);
        if ((void *)v44 == v22) {
          goto LABEL_44;
        }
      }
      if ((void *)v44 == v22)
      {
LABEL_44:
        int v47 = 0;
      }
      else
      {
        uint64_t v46 = *(void *)(v44 + 16);
        int v47 = *(std::__shared_weak_count **)(v44 + 24);
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v46)
        {
          sub_F7364((uint64_t)(a3 + 13), (uint64_t *)v44);
          (*(void (**)(uint64_t))(*(void *)v46 + 80))(v46);
          unsigned __int16 v48 = operator new(0x20uLL);
          void v48[2] = v46;
          v48[3] = v47;
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v49 = v112;
          *unsigned __int16 v48 = v112;
          v48[1] = &v112;
          v49[1] = v48;
          int v112 = v48;
          ++v114;
          goto LABEL_48;
        }
      }
      os_log_t v50 = (os_log_t *)sub_32A48(7);
      BOOL v51 = *v50;
      if (*v50 && os_log_type_enabled(*v50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)char v118 = 136315394;
        *(void *)&v118[4] = "DeviceManager.cpp";
        *(_WORD *)&v118[12] = 1024;
        *(_DWORD *)&v118[14] = 410;
        _os_log_impl(&def_1E50E8, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d PhysicalDevice to remove does not exist in the DeviceManager database", v118, 0x12u);
      }
LABEL_48:
      if (v47) {
        sub_4636C(v47);
      }
      v34 += 16;
      if (v34 - *v33 == 4096)
      {
        uint64_t v52 = v33[1];
        ++v33;
        uint64_t v34 = v52;
      }
      if (v34 == v35)
      {
        if (v116) {
          operator new();
        }
LABEL_127:
        *(void *)char v118 = 0;
        sub_10FBF0();
        sub_10BA10();
      }
    }
  }
  os_log_type_t v53 = (os_log_t *)sub_32A48(7);
  int v54 = *v53;
  if (*v53 && os_log_type_enabled(*v53, OS_LOG_TYPE_ERROR))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "DeviceManager.cpp";
    LOWORD(buf[3]) = 1024;
    *(_DWORD *)((char *)&buf[3] + 2) = 255;
    _os_log_impl(&def_1E50E8, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d clientData is NULL", (uint8_t *)buf, 0x12u);
  }
}

void sub_F5FFC()
{
  sub_F69B4(&v0);
  JUMPOUT(0xF6124);
}

void sub_F6018()
{
  __cxa_end_catch();
  sub_F69B4(&v0);
  JUMPOUT(0xF6124);
}

void sub_F602C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

void sub_F6058()
{
  sub_F619C((void *)(v0 - 240));
  sub_F69B4((uint64_t)&v1);
}

void sub_F6068()
{
  sub_F619C((void *)(v1 - 240));
  __cxa_free_exception(v0);
  JUMPOUT(0xF60ACLL);
}

void sub_F60F4(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_E13D0((unsigned char **)(v2 - 240));
    JUMPOUT(0xF6144);
  }
  JUMPOUT(0xF6194);
}

void sub_F6118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
}

void sub_F6130()
{
}

void sub_F613C(void *a1, int a2)
{
  if (a2) {
    sub_564E4(a1);
  }
  JUMPOUT(0xF6194);
}

void sub_F6150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
}

void sub_F6180()
{
  sub_B8E4((uint64_t *)(v0 - 240));
  JUMPOUT(0xF618CLL);
}

uint64_t sub_F619C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_F70E8((uint64_t)a1);
}

uint64_t sub_F6244(uint64_t a1)
{
  if (std::uncaught_exceptions() > *(_DWORD *)a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(7);
    uint64_t v3 = *v2;
    if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      uint64_t v10 = "DeviceManager.cpp";
      __int16 v11 = 1024;
      int v12 = 430;
      _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d Error Occured handling a Device Update", buf, 0x12u);
    }
    unint64_t v4 = (os_log_t *)sub_32A48(7);
    unint64_t v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
    {
      sub_F7814(&__p, *(void **)(a1 + 16), (void *)(a1 + 8));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315650;
      uint64_t v10 = "DeviceManager.cpp";
      __int16 v11 = 1024;
      int v12 = 431;
      __int16 v13 = 2080;
      size_t v14 = p_p;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_INFO, "%25s:%-5d Cached Device List: %s", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  sub_B8E4((uint64_t *)(a1 + 8));
  return a1;
}

void sub_F63D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_F63E0(unint64_t *a1, void *a2, int a3)
{
  if (a2[2])
  {
    if (a3)
    {
      sub_13910();
      *(void *)int v12 = v12;
      *(void *)&v12[8] = v12;
      *(void *)&char v12[16] = 0;
      uint64_t v4 = a2[2];
      if (v4)
      {
        uint64_t v6 = *a2;
        unint64_t v5 = (uint64_t *)a2[1];
        uint64_t v7 = *v5;
        *(void *)(v7 + 8) = *(void *)(*a2 + 8);
        **(void **)(v6 + 8) = v7;
        uint64_t v8 = *(void *)v12;
        *(void *)(*(void *)v12 + 8) = v5;
        *unint64_t v5 = v8;
        *(void *)(v6 + 8) = v12;
        *(void *)int v12 = v6;
        *(void *)&char v12[16] = v4;
        a2[2] = 0;
      }
      operator new();
    }
    if ((sub_46FF9C(a1) & 1) == 0)
    {
      BOOL v9 = (os_log_t *)sub_32A48(13);
      uint64_t v10 = *v9;
      if (*v9)
      {
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int v12 = 136315394;
          *(void *)&v12[4] = "ObjectDestructionManager.h";
          *(_WORD *)&v12[12] = 1024;
          *(_DWORD *)&v12[14] = 72;
          _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Synchronously deleting objects from outside of a managed ObjectDestruction event", v12, 0x12u);
        }
      }
    }
    while (a2[2])
    {
      uint64_t v11 = a2[1];
      *(_OWORD *)int v12 = *(_OWORD *)(v11 + 16);
      *(void *)(v11 + 16) = 0;
      *(void *)(v11 + 24) = 0;
      sub_F73C0(v12);
      if (*(void *)&v12[8]) {
        sub_4636C(*(std::__shared_weak_count **)&v12[8]);
      }
      sub_F7364((uint64_t)a2, (uint64_t *)v11);
    }
  }
}

void sub_F6638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_F6668(void *a1, _DWORD *a2)
{
  uint64_t v4 = (char *)a1[2];
  unint64_t v5 = (char *)a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  unint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  unint64_t v9 = v7 + v8;
  if (v6 == v7 + v8)
  {
    if (v8 < 0x400)
    {
      unint64_t v23 = (v4 - v5) >> 3;
      uint64_t v24 = (char *)a1[3];
      uint64_t v25 = (uint64_t)&v24[-*a1];
      if (v23 >= v25 >> 3)
      {
        if (v24 == (char *)*a1) {
          unint64_t v26 = 1;
        }
        else {
          unint64_t v26 = v25 >> 2;
        }
        AudioObjectID v65 = a1 + 3;
        *(void *)&long long v63 = sub_106EC(v26);
        *((void *)&v63 + 1) = v63 + 8 * v23;
        *(void *)&long long v64 = *((void *)&v63 + 1);
        *((void *)&v64 + 1) = v63 + 8 * v27;
        uint64_t v62 = operator new(0x1000uLL);
        sub_F7138(&v63, &v62);
        for (uint64_t i = (void *)a1[2]; i != (void *)a1[1]; sub_F724C((uint64_t)&v63, i))
          --i;
        long long v30 = v63;
        long long v31 = v64;
        *(void *)&long long v63 = *a1;
        uint64_t v29 = (void *)v63;
        *((void *)&v63 + 1) = i;
        *(_OWORD *)a1 = v30;
        *((_OWORD *)a1 + 1) = v31;
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_44;
      }
      if (v24 != v4)
      {
        *(void *)&long long v63 = operator new(0x1000uLL);
        sub_F7138(a1, &v63);
LABEL_44:
        unint64_t v5 = (char *)a1[1];
        uint64_t v7 = a1[5];
        unint64_t v9 = a1[4] + v7;
        goto LABEL_45;
      }
      *(void *)&long long v63 = operator new(0x1000uLL);
      sub_F724C((uint64_t)a1, &v63);
      uint64_t v43 = (void *)a1[1];
      uint64_t v4 = (char *)a1[2];
      uint64_t v45 = *v43;
      uint64_t v44 = (char *)(v43 + 1);
      uint64_t v11 = v45;
      a1[1] = v44;
      if (v4 == (char *)a1[3])
      {
        uint64_t v46 = (uint64_t)&v44[-*a1];
        if ((unint64_t)v44 > *a1)
        {
          uint64_t v47 = v46 >> 3;
          BOOL v15 = v46 >> 3 < -1;
          uint64_t v48 = (v46 >> 3) + 2;
          if (v15) {
            uint64_t v49 = v48;
          }
          else {
            uint64_t v49 = v47 + 1;
          }
          uint64_t v50 = -(v49 >> 1);
          uint64_t v51 = v49 >> 1;
          uint64_t v52 = &v44[-8 * v51];
          int64_t v53 = v4 - v44;
          if (v4 != v44)
          {
            memmove(&v44[-8 * v51], v44, v4 - v44);
            uint64_t v44 = (char *)a1[1];
          }
          uint64_t v4 = &v52[v53];
          int v54 = &v44[8 * v50];
          goto LABEL_42;
        }
        if (v4 == (char *)*a1) {
          unint64_t v55 = 1;
        }
        else {
          unint64_t v55 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v33 = (char *)sub_106EC(v55);
        uint64_t v34 = &v33[8 * (v55 >> 2)];
        uint64_t v36 = &v33[8 * v56];
        uint64_t v57 = (uint64_t *)a1[1];
        uint64_t v4 = v34;
        uint64_t v58 = a1[2] - (void)v57;
        if (v58)
        {
          uint64_t v4 = &v34[v58 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v59 = 8 * (v58 >> 3);
          uint64_t v60 = &v33[8 * (v55 >> 2)];
          do
          {
            uint64_t v61 = *v57++;
            *(void *)uint64_t v60 = v61;
            v60 += 8;
            v59 -= 8;
          }
          while (v59);
        }
LABEL_30:
        int v42 = (void *)*a1;
        *a1 = v33;
        a1[1] = v34;
        a1[2] = v4;
        a1[3] = v36;
        if (v42)
        {
          operator delete(v42);
          uint64_t v4 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 1024;
      uint64_t v12 = *(void *)v5;
      uint64_t v10 = v5 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if ((char *)a1[3] == v4)
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          uint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v4 - v10;
          if (v4 == v10)
          {
            char v22 = v4;
          }
          else
          {
            memmove(&v10[-8 * v19], v10, v4 - v10);
            char v22 = (char *)a1[1];
          }
          uint64_t v4 = &v20[v21];
          int v54 = &v22[8 * v18];
LABEL_42:
          a1[1] = v54;
          a1[2] = v4;
          goto LABEL_43;
        }
        if (v4 == (char *)*a1) {
          unint64_t v32 = 1;
        }
        else {
          unint64_t v32 = (uint64_t)&v4[-*a1] >> 2;
        }
        uint64_t v33 = (char *)sub_106EC(v32);
        uint64_t v34 = &v33[8 * (v32 >> 2)];
        uint64_t v36 = &v33[8 * v35];
        char v37 = (uint64_t *)a1[1];
        uint64_t v4 = v34;
        uint64_t v38 = a1[2] - (void)v37;
        if (v38)
        {
          uint64_t v4 = &v34[v38 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v39 = 8 * (v38 >> 3);
          uint64_t v40 = &v33[8 * (v32 >> 2)];
          do
          {
            uint64_t v41 = *v37++;
            *(void *)uint64_t v40 = v41;
            v40 += 8;
            v39 -= 8;
          }
          while (v39);
        }
        goto LABEL_30;
      }
    }
LABEL_43:
    *(void *)uint64_t v4 = v11;
    a1[2] += 8;
    goto LABEL_44;
  }
LABEL_45:
  *(_DWORD *)(*(void *)&v5[(v9 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v9 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_F6988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_F69B4(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    operator new();
  }
  sub_10FBF0();
  sub_10BA10();
}

void sub_F6A5C()
{
}

uint64_t sub_F6A90(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v3 = a2[4];
  uint64_t v4 = a2[1];
  unint64_t v5 = (char *)(v4 + 8 * (v3 >> 10));
  if (a2[2] == v4)
  {
    uint64_t v6 = 0;
    uint64_t v9 = 0;
    unint64_t v8 = (char *)(v4 + 8 * ((a2[5] + v3) >> 10));
  }
  else
  {
    uint64_t v6 = (char *)(*(void *)v5 + 4 * (a2[4] & 0x3FFLL));
    unint64_t v7 = a2[5] + v3;
    unint64_t v8 = (char *)(v4 + 8 * (v7 >> 10));
    uint64_t v9 = *(void *)v8 + 4 * (v7 & 0x3FF);
  }
  if ((char *)v9 == v6) {
    return a1;
  }
  uint64_t v10 = ((v9 - *(void *)v8) >> 2) + ((v8 - v5) << 7);
  uint64_t v11 = (uint64_t)&v6[-*(void *)v5];
  uint64_t v12 = v10 - (v11 >> 2);
  if (v10 == v11 >> 2) {
    return a1;
  }
  if (((v12 + 1) & 0x3FF) != 0) {
    unint64_t v13 = ((unint64_t)(v12 + 1) >> 10) + 1;
  }
  else {
    unint64_t v13 = (unint64_t)(v12 + 1) >> 10;
  }
  if (v13)
  {
    uint64_t v41 = a1 + 24;
    *(void *)&long long v39 = sub_106EC(v13);
    *((void *)&v39 + 1) = v39;
    *(void *)&long long v40 = v39;
    *((void *)&v40 + 1) = v39 + 8 * v14;
    uint64_t v15 = -(uint64_t)v13;
    do
    {
      uint64_t v38 = operator new(0x1000uLL);
      sub_F7138(&v39, &v38);
    }
    while (!__CFADD__(v15++, 1));
    for (uint64_t i = *(void **)(a1 + 16); i != *(void **)(a1 + 8); sub_F724C((uint64_t)&v39, i))
      --i;
    long long v19 = v39;
    long long v20 = v40;
    *(void *)&long long v39 = *(void *)a1;
    uint64_t v18 = (void *)v39;
    *((void *)&v39 + 1) = i;
    *(_OWORD *)a1 = v19;
    *(_OWORD *)(a1 + 16) = v20;
    if (v18)
    {
      operator delete(v18);
      uint64_t v21 = *(void *)(a1 + 8);
      uint64_t v22 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v21 = *((void *)&v19 + 1);
      uint64_t v22 = v20;
    }
    uint64_t v24 = *(void *)(a1 + 40);
    unint64_t v26 = *(void *)(a1 + 32) + v24;
    uint64_t v25 = (void *)(v21 + 8 * (v26 >> 10));
    if (v22 == v21)
    {
      uint64_t v23 = 0;
      if (!v12)
      {
        uint64_t v30 = 0;
        uint64_t v28 = v25;
        goto LABEL_28;
      }
    }
    else
    {
      if (!v12) {
        return a1;
      }
      uint64_t v23 = *v25 + 4 * (v26 & 0x3FF);
    }
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  uint64_t v27 = v12 + ((v23 - *v25) >> 2);
  if (v27 < 1)
  {
    unint64_t v29 = 1023 - v27;
    LOWORD(v27) = ~(1023 - v27);
    uint64_t v28 = &v25[-(v29 >> 10)];
  }
  else
  {
    uint64_t v28 = &v25[(unint64_t)v27 >> 10];
  }
  uint64_t v30 = *v28 + 4 * (v27 & 0x3FF);
LABEL_28:
  if (v23 != v30)
  {
    do
    {
      uint64_t v31 = v30;
      if (v25 != v28) {
        uint64_t v31 = *v25 + 4096;
      }
      if (v23 == v31)
      {
        uint64_t v31 = v23;
      }
      else
      {
        unint64_t v32 = *(char **)v5;
        uint64_t v33 = (_DWORD *)v23;
        do
        {
          int v34 = *(_DWORD *)v6;
          v6 += 4;
          *v33++ = v34;
          if (v6 - v32 == 4096)
          {
            uint64_t v35 = (char *)*((void *)v5 + 1);
            v5 += 8;
            unint64_t v32 = v35;
            uint64_t v6 = v35;
          }
        }
        while (v33 != (_DWORD *)v31);
      }
      v24 += (v31 - v23) >> 2;
      if (v25 == v28) {
        break;
      }
      uint64_t v36 = v25[1];
      ++v25;
      uint64_t v23 = v36;
    }
    while (v36 != v30);
    *(void *)(a1 + 40) = v24;
  }
  return a1;
}

void sub_F6D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  sub_F70E8(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_F6D64(uint64_t a1, void *a2)
{
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, "DeviceUpdate failed");
  v4->__vftable = (std::runtime_error_vtbl *)off_621198;
  unint64_t v5 = v4 + 1;
  sub_21C8C(&v4[1].__vftable, "DeviceUpdate failed");
  sub_F6A90(a1 + 40, a2);
  sub_3D04((uint64_t)&v15);
  uint64_t v6 = a2[1];
  if (a2[2] != v6)
  {
    unint64_t v7 = a2[4];
    unint64_t v8 = (void *)(v6 + 8 * (v7 >> 10));
    uint64_t v9 = *v8 + 4 * (v7 & 0x3FF);
    uint64_t v10 = *(void *)(v6 + (((a2[5] + v7) >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * ((a2[5] + v7) & 0x3FF);
    while (v9 != v10)
    {
      sub_256E4(&v15, (uint64_t)" ", 1);
      std::ostream::operator<<();
      v9 += 4;
      if (v9 - *v8 == 4096)
      {
        uint64_t v11 = v8[1];
        ++v8;
        uint64_t v9 = v11;
      }
    }
  }
  sub_246E4(&v13, (uint64_t)v16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(v5->__vftable);
  }
  *unint64_t v5 = v13;
  v5[1].__vftable = v14;
  if (v17 < 0) {
    operator delete((void *)v16[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return a1;
}

void sub_F6FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_6B798((uint64_t)va);
  sub_F619C(v6);
  if (*(char *)(v4 + 39) < 0) {
    operator delete(*v5);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v4);
  _Unwind_Resume(a1);
}

void sub_F6FF0(uint64_t a1)
{
  *(void *)a1 = off_621198;
  sub_F619C((void *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

uint64_t sub_F7054(uint64_t a1)
{
  uint64_t result = a1 + 16;
  if (*(char *)(a1 + 39) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_F7070(uint64_t a1)
{
  *(void *)a1 = off_621198;
  sub_F619C((void *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  operator delete();
}

uint64_t sub_F70E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_F7138(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      char v17 = (char *)sub_106EC(v16);
      long long v19 = &v17[8 * (v16 >> 2)];
      long long v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      std::runtime_error v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_F724C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      std::runtime_error v13 = (char *)sub_106EC(v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        long long v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)long long v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_F7364(uint64_t a1, uint64_t *__p)
{
  uint64_t v3 = *__p;
  *(void *)(v3 + 8) = __p[1];
  *(void *)__p[1] = v3;
  --*(void *)(a1 + 16);
  uint64_t v4 = (std::__shared_weak_count *)__p[3];
  if (v4) {
    sub_4636C(v4);
  }

  operator delete(__p);
}

void sub_F73C0(void *a1)
{
  if (!*a1)
  {
    uint64_t v6 = (os_log_t *)sub_32A48(13);
    uint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      uint64_t v10 = "ObjectDestructionManager.h";
      __int16 v11 = 1024;
      int v12 = 156;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inObject.get() is NULL]: \"Null object\"", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Null object");
  }
  uint64_t v2 = a1[1];
  if (!v2 || *(void *)(v2 + 8))
  {
    uint64_t v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        uint64_t v10 = "ObjectDestructionManager.h";
        __int16 v11 = 1024;
        int v12 = 157;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Shared object has other references!\"", (uint8_t *)&v9, 0x12u);
      }
    }
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v5) {
    sub_4636C(v5);
  }
}

void sub_F7550(_Unwind_Exception *exception_object)
{
}

void sub_F756C()
{
}

void sub_F7718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_B8E4((uint64_t *)va);
  if (v2)
  {
    sub_B8E4(v2);
    operator delete();
  }
  _Unwind_Resume(a1);
}

void sub_F7780(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_F7814(&v4, *(void **)(a1 + 24), (void *)(a1 + 16));
  uint64_t v3 = std::string::insert(&v4, 0, "Destroying core object(s): ", 0x1BuLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_F77F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_F7814(std::string *a1, void *a2, void *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      uint64_t v6 = (os_unfair_lock_s *)a2[2];
      uint64_t v7 = (std::__shared_weak_count *)a2[3];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_4F64((uint64_t)__p, v6 + 2);
      uint64_t v8 = (v12 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      int v9 = (v12 & 0x80u) == 0 ? (void *)v12 : __p[1];
      std::string::append(a1, v8, (std::string::size_type)v9);
      if (((char)v12 & 0x80000000) == 0) {
        break;
      }
      operator delete(__p[0]);
      if (v7) {
        goto LABEL_12;
      }
LABEL_13:
      a2 = (void *)a2[1];
      if (a2 == a3) {
        return std::string::append(a1, " }", 2uLL);
      }
      std::string::append(a1, ", ", 2uLL);
    }
    if (!v7) {
      goto LABEL_13;
    }
LABEL_12:
    sub_4636C(v7);
    goto LABEL_13;
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_F7920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F796C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string v4 = (unint64_t *)qword_669B38;
  if (atomic_load((unint64_t *)qword_669B38))
  {
    if ((sub_46FF9C((unint64_t *)qword_669B38) & 1) == 0)
    {
      uint64_t v6 = (os_log_t *)sub_32A48(13);
      uint64_t v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
          __int16 v19 = 1024;
          int v20 = 124;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mExecutionThread has been set outside of this command's execution\"", buf, 0x12u);
        }
      }
    }
  }
  if (sub_46FF9C(v4))
  {
    uint64_t v8 = sub_32A48(13);
    uint64_t v9 = sub_32A48(15);
    char v10 = 0;
    uint64_t v11 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v12 = *(void *)(v8 + 8);
    while (1)
    {
      uint64_t v13 = *(int *)&buf[4 * v11];
      char v14 = v10;
      if (((v12 & v13) != 0) != ((*(void *)(v9 + 8) & v13) != 0)) {
        break;
      }
      char v10 = 1;
      uint64_t v11 = 1;
      if (v14) {
        goto LABEL_13;
      }
    }
    if ((v12 & v13) == 0) {
      uint64_t v8 = v9;
    }
LABEL_13:
    uint64_t v15 = *(NSObject **)v8;
    if (v15 && os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "ObjectDestructionManager.h";
      __int16 v19 = 1024;
      int v20 = 127;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Called recursively", buf, 0x12u);
    }
  }
  v17[0] = off_6211F0;
  v17[1] = v4;
  _DWORD v17[3] = v17;
  sub_528DC(buf, 0, (uint64_t)v17);
  sub_4F750(v17);
  atomic_store((unint64_t)pthread_self(), v4);
  sub_F63E0(v4, (void *)(a1 + 16), 0);
  sub_12053C(a2, 1920099684);
  return sub_52588((uint64_t)buf);
}

void sub_F7B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F7BD8(uint64_t result)
{
  return result;
}

uint64_t sub_F7BEC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_6211F0;
  a2[1] = v2;
  return result;
}

void *sub_F7C10(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_6211F0;
  result[1] = v3;
  return result;
}

void sub_F7C58()
{
}

void sub_F7C70(uint64_t *a1)
{
  sub_F7CA8(a1);

  operator delete();
}

uint64_t *sub_F7CA8(uint64_t *a1)
{
  uint64_t v2 = a1 + 2;
  if (a1[4])
  {
    uint64_t v3 = sub_32A48(13);
    uint64_t v4 = sub_32A48(15);
    char v5 = 0;
    uint64_t v6 = 0;
    *(void *)std::string __p = 0x100000002;
    uint64_t v7 = *(void *)(v3 + 8);
    while (1)
    {
      uint64_t v8 = *(int *)&__p[4 * v6];
      char v9 = v5;
      if (((v7 & v8) != 0) != ((*(void *)(v4 + 8) & v8) != 0)) {
        break;
      }
      char v5 = 1;
      uint64_t v6 = 1;
      if (v9) {
        goto LABEL_8;
      }
    }
    if ((v7 & v8) == 0) {
      uint64_t v3 = v4;
    }
LABEL_8:
    char v10 = *(NSObject **)v3;
    if (v10)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = (uint64_t *)a1[3];
        memset(&v18, 0, sizeof(v18));
        std::string::append(&v18, "{ ", 2uLL);
        if (v11 != v2)
        {
          while (1)
          {
            uint64_t v12 = (os_unfair_lock_s *)v11[2];
            uint64_t v13 = (std::__shared_weak_count *)v11[3];
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_4F64((uint64_t)__p, v12 + 2);
            char v14 = SBYTE3(v21) >= 0 ? __p : *(const std::string::value_type **)__p;
            std::string::size_type v15 = SBYTE3(v21) >= 0 ? BYTE3(v21) : *(void *)&__p[8];
            std::string::append(&v18, v14, v15);
            if ((SBYTE3(v21) & 0x80000000) == 0) {
              break;
            }
            operator delete(*(void **)__p);
            if (v13) {
              goto LABEL_21;
            }
LABEL_22:
            uint64_t v11 = (uint64_t *)v11[1];
            if (v11 == v2) {
              goto LABEL_26;
            }
            std::string::append(&v18, ", ", 2uLL);
          }
          if (!v13) {
            goto LABEL_22;
          }
LABEL_21:
          sub_4636C(v13);
          goto LABEL_22;
        }
LABEL_26:
        std::string::append(&v18, " }", 2uLL);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v16 = &v18;
        }
        else {
          unint64_t v16 = (std::string *)v18.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = "ObjectDestructionManager.h";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 115;
        __int16 v20 = 2080;
        uint64_t v21 = v16;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Destructor called without an intervening call to Execute. Contained objects (%s) will be leaked!.", __p, 0x1Cu);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  sub_B8E4(v2);
  return a1;
}

void sub_F7EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_564E4(exception_object);
}

uint64_t *sub_F7F68(void *__s2, size_t a2)
{
  uint64_t v2 = qword_659450;
  if (!qword_659450) {
    return &qword_659450;
  }
  char v5 = &qword_659450;
  do
  {
    char v6 = sub_15EC4(*(const void **)(v2 + 32), *(void *)(v2 + 40), __s2, a2);
    if (v6 >= 0) {
      uint64_t v7 = (uint64_t *)v2;
    }
    else {
      uint64_t v7 = (uint64_t *)(v2 + 8);
    }
    if (v6 >= 0) {
      char v5 = (uint64_t *)v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v5 == &qword_659450 || (sub_15EC4(__s2, a2, (void *)v5[4], v5[5]) & 0x80) != 0) {
    return &qword_659450;
  }
  return v5;
}

os_signpost_id_t *sub_F8008(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    uint64_t v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        uint64_t v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 97;
        __int16 v11 = 2080;
        uint64_t v12 = "kHandleDeviceArrival";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      char v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_HandleDeviceArrival", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_F8198(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void *sub_F81A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v7 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

uint64_t sub_F820C()
{
  uint64_t result = qword_64AC58;
  if (!qword_64AC58)
  {
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    uint64_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        char v5 = "DeviceManager.cpp";
        __int16 v6 = 1024;
        int v7 = 114;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [sDeviceManager is NULL]: \"sDeviceManager is NULL!\"", (uint8_t *)&v4, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sDeviceManager is NULL!");
  }
  return result;
}

void sub_F8310(_Unwind_Exception *exception_object)
{
}

uint64_t sub_F832C(void *a1, CFStringRef *a2)
{
  __int16 v9 = a1;
  char v10 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  int v4 = a1 + 13;
  for (uint64_t i = a1[14]; (void *)i != v4; uint64_t i = *(void *)(i + 8))
  {
    (*(void (**)(CFStringRef *__return_ptr))(**(void **)(i + 16) + 128))(theString2);
    CFComparisonResult v6 = CFStringCompare(*a2, theString2[0], 0);
    sub_72924((uint64_t)theString2);
    if (v6 == kCFCompareEqualTo)
    {
      if ((void *)i != v4)
      {
        uint64_t v7 = *(void *)(i + 16);
        goto LABEL_8;
      }
      break;
    }
  }
  uint64_t v7 = 0;
LABEL_8:
  sub_3BCAC(&v9);
  return v7;
}

void sub_F8410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, char a11)
{
}

uint64_t sub_F8434(unsigned __int8 *a1)
{
  int v4 = a1;
  char v5 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 16))(a1);
  uint64_t v2 = a1[128];
  sub_3BCAC(&v4);
  return v2;
}

uint64_t sub_F8498(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v10 = a1;
  char v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v12 = (void *)sub_F820C();
  char v13 = (*(uint64_t (**)(void *))(*v12 + 16))(v12);
  char v5 = v12 + 13;
  for (uint64_t i = (void *)v12[14]; ; uint64_t i = (void *)i[1])
  {
    if (i == v5) {
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(void))(*(void *)i[2] + 120))(i[2]) == a2) {
      break;
    }
  }
  if (i == v5)
  {
LABEL_8:
    sub_3BCAC(&v12);
    goto LABEL_9;
  }
  uint64_t v7 = i[2];
  sub_3BCAC(&v12);
  if (v7)
  {
    uint64_t v8 = sub_F85DC(*(void *)(a3 + 24), v7);
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v8 = 0;
LABEL_10:
  sub_3BCAC(&v10);
  return v8;
}

void sub_F85B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_F85DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    sub_56964();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

void sub_F862C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_72924((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::string *sub_F8684(std::string *a1, unsigned int *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ Device Type: ", 0xFuLL);
  sub_2417C(&__p, *a2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "[ Context ID: ", 0xEuLL);
  std::to_string(&__p, a2[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFComparisonResult v6 = &__p;
  }
  else {
    CFComparisonResult v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a1, "; Reconfiguration Context: ", 0x1BuLL);
  uint64_t v8 = a2[28];
  if (v8 > 4) {
    __int16 v9 = "????";
  }
  else {
    __int16 v9 = off_621228[v8];
  }
  sub_21C8C(&__p, v9);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &__p;
  }
  else {
    uint64_t v10 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_F87EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_F8834(std::string *a1, unsigned int **a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  int v4 = *a2;
  for (uint64_t i = a2[1]; v4 != i; v4 += 30)
  {
    sub_F8684(&__p, v4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_F88EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F8924()
{
  return 1;
}

uint64_t sub_F892C()
{
  return 1;
}

std::string *sub_F8934@<X0>(const void *a1@<X0>, std::string *a2@<X8>)
{
  return sub_F8940(a2, a1);
}

std::string *sub_F8940(std::string *a1, const void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[ ", 2uLL);
  snprintf(__str, 0x13uLL, "%p", a2);
  sub_21C8C(&v11, __str);
  int v4 = std::string::insert(&v11, 0, "addr: ", 6uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  CFComparisonResult v6 = std::string::append(&v12, "; ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v14 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if (v14 >= 0) {
    std::string::size_type v9 = HIBYTE(v14);
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_F8A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_F8B08()
{
  return 0;
}

uint64_t sub_F8B10()
{
  return 1;
}

uint64_t sub_F8B18()
{
  return 1;
}

void sub_F8B20(uint64_t a1)
{
  sub_FE920(a1);

  operator delete();
}

uint64_t sub_F8B5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 21);
}

uint64_t sub_F8B64(uint64_t result)
{
  *(unsigned char *)(result + 21) = 0;
  return result;
}

uint64_t sub_F8B6C(uint64_t result)
{
  *(unsigned char *)(result + 21) = 1;
  return result;
}

void sub_F8B78(uint64_t a1)
{
  sub_FE920(a1 - 80);

  operator delete();
}

uint64_t sub_F8BB4(uint64_t a1)
{
  return sub_FE920(a1 - 80);
}

uint64_t sub_F8BBC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 101);
}

uint64_t sub_F8BC4(uint64_t result)
{
  *(unsigned char *)(result + 101) = 0;
  return result;
}

uint64_t sub_F8BCC(uint64_t result)
{
  *(unsigned char *)(result + 101) = 1;
  return result;
}

double sub_F8BD8()
{
  return 0.0;
}

double sub_F8BE4()
{
  return 0.0;
}

uint64_t sub_F8BF8()
{
  return 1;
}

uint64_t sub_F8C00()
{
  return 1;
}

std::string *sub_F8C08@<X0>(const void *a1@<X0>, std::string *a2@<X8>)
{
  return sub_F8940(a2, a1);
}

float sub_F8C14(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, float *a6)
{
  if (((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    uint64_t v15 = (os_log_t *)sub_32A48(13);
    unint64_t v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *a2;
      int v28 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v27);
      uint64_t v17 = v30 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      unint64_t v32 = "NullControl.cpp";
      __int16 v33 = 1024;
      int v34 = 264;
      __int16 v35 = 2080;
      uint64_t v36 = v17;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unknown property: %s.\"", buf, 0x1Cu);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (((*(uint64_t (**)(_DWORD *, uint64_t *))(*(void *)a1 + 24))(a1, a2) & 1) == 0)
  {
    __int16 v19 = (os_log_t *)sub_32A48(13);
    __int16 v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *a2;
      int v28 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v27);
      uint64_t v21 = v30 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      unint64_t v32 = "NullControl.cpp";
      __int16 v33 = 1024;
      int v34 = 265;
      __int16 v35 = 2080;
      uint64_t v36 = v21;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnsupportedOperationError): \"Property %s is not settable.\"", buf, 0x1Cu);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v22 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v22 = &off_6414D8;
    v22[2] = 1970171760;
  }
  if ((*(unsigned int (**)(_DWORD *, uint64_t *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4) != a5)
  {
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    uint64_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *a2;
      int v28 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v27);
      uint64_t v25 = v30 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      unint64_t v32 = "NullControl.cpp";
      __int16 v33 = 1024;
      int v34 = 266;
      __int16 v35 = 2080;
      uint64_t v36 = v25;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for property %s.\"", buf, 0x1Cu);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v26 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v26 = &off_6414D8;
    _OWORD v26[2] = 561211770;
  }
  int v13 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1986817377 || v13 == 1987013741)
  {
    float result = *a6;
    a1[24] = *(_DWORD *)a6;
  }
  else if (v13 == 1987013732)
  {
    float result = *a6;
    a1[23] = *(_DWORD *)a6;
  }
  return result;
}

void sub_F9080(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  if (*a2 == 1836414053)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    unint64_t v26 = (os_log_t *)sub_32A48(13);
    uint64_t v27 = *v26;
    if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)a2;
      int v35 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v34);
      int v28 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      long long v39 = "NullControl.cpp";
      __int16 v40 = 1024;
      int v41 = 208;
      __int16 v42 = 2080;
      uint64_t v43 = v28;
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unknown property: %s.\"", buf, 0x1Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v29 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v29 = &off_6414D8;
    v29[2] = 2003332927;
  }
  int v12 = *a5;
  if (v12 != (*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, a4))
  {
    char v30 = (os_log_t *)sub_32A48(13);
    uint64_t v31 = *v30;
    if (*v30 && os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = *(void *)a2;
      int v35 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v34);
      unint64_t v32 = v37 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      long long v39 = "NullControl.cpp";
      __int16 v40 = 1024;
      int v41 = 209;
      __int16 v42 = 2080;
      uint64_t v43 = v32;
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareBadPropertySizeError): \"wrong data size for property %s.\"", buf, 0x1Cu);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v33 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v33 = &off_6414D8;
    v33[2] = 561211770;
  }
  int v13 = *a2;
  if (*a2 <= 1986225517)
  {
    if (v13 > 1684633186)
    {
      if (v13 != 1684633187 && v13 != 1983013986)
      {
        if (v13 == 1836478308)
        {
          uint64_t v17 = (os_log_t *)sub_32A48(13);
          std::string v18 = *v17;
          if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
          {
            uint64_t v34 = *(void *)a2;
            int v35 = a2[2];
            sub_16C9C4((uint64_t)__p, (unsigned int *)&v34);
            __int16 v19 = v37 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)int buf = 136315650;
            long long v39 = "NullControl.cpp";
            __int16 v40 = 1024;
            int v41 = 247;
            __int16 v42 = 2080;
            uint64_t v43 = v19;
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Attempt to GetPropertyData for %s.  This property is write-only.\"", buf, 0x1Cu);
            if (v37 < 0) {
              operator delete(__p[0]);
            }
          }
          __int16 v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v20, "Attempt to GetPropertyData for %s.  This property is write-only.");
        }
        return;
      }
    }
    else if (v13 != 1064725619 && v13 != 1668705648)
    {
      if (v13 != 1684157046) {
        return;
      }
      int v15 = 1065353216;
      goto LABEL_27;
    }
    *(_DWORD *)a6 = 0;
    return;
  }
  if (v13 <= 1986817376)
  {
    if (v13 == 1986225518)
    {
      int v15 = 1;
    }
    else
    {
      if (v13 != 1986229104)
      {
        if (v13 == 1986290211)
        {
          *(double *)a6 = (*(double (**)(uint64_t))(*(void *)a1 + 104))(a1);
          *(void *)(a6 + 8) = v16;
        }
        return;
      }
      int v15 = *(unsigned __int8 *)(a1 + 100);
    }
LABEL_27:
    *(_DWORD *)a6 = v15;
    return;
  }
  if (v13 > 1987013740)
  {
    if (v13 != 1987013741)
    {
      if (v13 == 2021027692)
      {
        uint64_t v21 = (os_log_t *)sub_32A48(13);
        uint64_t v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v34 = *(void *)a2;
          int v35 = a2[2];
          sub_16C9C4((uint64_t)__p, (unsigned int *)&v34);
          if (v37 >= 0) {
            uint64_t v23 = __p;
          }
          else {
            uint64_t v23 = (void **)__p[0];
          }
          *(_DWORD *)int buf = 136315650;
          long long v39 = "NullControl.cpp";
          __int16 v40 = 1024;
          int v41 = 251;
          __int16 v42 = 2080;
          uint64_t v43 = v23;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Attempt to GetPropertyData for %s.  This property is write-only.\"", buf, 0x1Cu);
          if (v37 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v24, "Attempt to GetPropertyData for %s.  This property is write-only.");
      }
      return;
    }
LABEL_23:
    int v14 = *(_DWORD *)(a1 + 96);
    goto LABEL_24;
  }
  if (v13 == 1986817377) {
    goto LABEL_23;
  }
  if (v13 == 1987013732)
  {
    int v14 = *(_DWORD *)(a1 + 92);
LABEL_24:
    *(_DWORD *)a6 = v14;
  }
}

void sub_F9730(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F9750(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v14 = a2;
    uint64_t v10 = (os_log_t *)sub_32A48(13);
    std::string v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)v14;
      int v16 = v14[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v15);
      int v12 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      __int16 v20 = "NullControl.cpp";
      __int16 v21 = 1024;
      int v22 = 169;
      __int16 v23 = 2080;
      uint64_t v24 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unknown property: %s.\"", buf, 0x1Cu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  int v3 = *a2;
  if (*a2 <= 1986225517)
  {
    if (v3 > 1684633186)
    {
      if (v3 != 1684633187 && v3 != 1836478308)
      {
        uint64_t result = 0;
        int v7 = 1983013986;
        goto LABEL_28;
      }
    }
    else if (v3 != 1064725619 && v3 != 1668705648)
    {
      uint64_t result = 0;
      int v7 = 1684157046;
      goto LABEL_28;
    }
    return 4;
  }
  if (v3 > 1986817376)
  {
    if (v3 > 1987013740)
    {
      if (v3 == 2021027692) {
        return 16;
      }
      uint64_t result = 0;
      unsigned __int16 v5 = 27757;
      goto LABEL_27;
    }
    if (v3 != 1986817377)
    {
      uint64_t result = 0;
      unsigned __int16 v5 = 27748;
LABEL_27:
      int v7 = v5 | 0x766F0000;
LABEL_28:
      if (v3 != v7) {
        return result;
      }
    }
    return 4;
  }
  if (v3 == 1986225518 || v3 == 1986229104) {
    return 4;
  }
  if (v3 == 1986290211) {
    return 16;
  }
  else {
    return 0;
  }
}

uint64_t sub_F99FC(uint64_t a1, int *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    int v12 = a2;
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    std::string::size_type v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)v12;
      int v14 = v12[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v13);
      uint64_t v10 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      char v18 = "NullControl.cpp";
      __int16 v19 = 1024;
      int v20 = 137;
      __int16 v21 = 2080;
      int v22 = v10;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnknownPropertyError): \"Unknown property: %s.\"", buf, 0x1Cu);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  uint64_t result = 0;
  int v4 = *a2;
  if (*a2 <= 1987013731)
  {
    BOOL v5 = v4 == 1836478308;
    int v6 = 1986817377;
  }
  else
  {
    BOOL v5 = v4 == 1987013732 || v4 == 2021027692;
    int v6 = 1987013741;
  }
  if (v5 || v4 == v6) {
    return 1;
  }
  return result;
}

uint64_t sub_F9BE8(uint64_t a1, int *a2)
{
  uint64_t result = 0;
  int v3 = *a2;
  if (*a2 <= 1986225517)
  {
    if (v3 > 1684633186)
    {
      BOOL v4 = v3 == 1684633187 || v3 == 1836478308;
      int v6 = 1983013986;
    }
    else
    {
      BOOL v4 = v3 == 1064725619 || v3 == 1668705648;
      int v6 = 1684157046;
    }
  }
  else if (v3 <= 1986817376)
  {
    BOOL v4 = v3 == 1986225518 || v3 == 1986229104;
    int v6 = 1986290211;
  }
  else
  {
    if (v3 > 1987013740)
    {
      BOOL v4 = v3 == 2021027692;
      unsigned __int16 v5 = 27757;
    }
    else
    {
      BOOL v4 = v3 == 1986817377;
      unsigned __int16 v5 = 27748;
    }
    int v6 = v5 | 0x766F0000;
  }
  if (v4 || v3 == v6) {
    return 1;
  }
  return result;
}

void sub_F9CD4(uint64_t a1)
{
  sub_FE920(a1);

  operator delete();
}

uint64_t sub_F9D10(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)a1 = &off_621260;
  sub_D26B4(a1);
  return a1;
}

void sub_F9D70(_Unwind_Exception *a1)
{
  sub_FE920(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_F9D84(uint64_t a1, char a2)
{
  uint64_t v4 = sub_35BAC4(a1);
  *(void *)uint64_t v4 = &off_6212C0;
  *(void *)(v4 + 80) = off_621388;
  *(void *)(v4 + 92) = 0x3F80000000000000;
  *(unsigned char *)(v4 + 100) = a2;
  *(unsigned char *)(v4 + 101) = 0;
  sub_D26B4(v4);
  return a1;
}

void sub_F9E04(_Unwind_Exception *a1)
{
  sub_FE920(v1);
  _Unwind_Resume(a1);
}

void sub_F9E18()
{
  if (qword_64A238 != -1) {
    dispatch_once(&qword_64A238, &stru_61F710);
  }
  if (byte_64A228 || byte_64A229)
  {
    uint64_t v0 = (void *)sub_F820C();
    CFStringRef v12 = CFStringCreateWithCString(0, "DSP Debug1", 0x600u);
    LOBYTE(v13) = 1;
    uint64_t v1 = sub_F832C(v0, &v12);
    sub_72924((uint64_t)&v12);
    uint64_t v2 = (void *)sub_F820C();
    CFStringRef v12 = CFStringCreateWithCString(0, "DSP Debug2", 0x600u);
    LOBYTE(v13) = 1;
    uint64_t v3 = sub_F832C(v2, &v12);
    sub_72924((uint64_t)&v12);
    if (v1)
    {
      if (v3)
      {
        CFStringRef v4 = (CFStringRef)qword_660488;
        if (qword_660488)
        {
          uint64_t v13 = (std::__shared_weak_count *)qword_660490;
          if (qword_660490) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_660490 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          sub_3EA704(&v12);
          CFStringRef v4 = v12;
        }
        unsigned __int16 v5 = operator new(0x18uLL);
        v5[2] = v1;
        isa = v4[1].isa;
        int v6 = (__CFString *)&v4[1];
        *unsigned __int16 v5 = isa;
        v5[1] = v6;
        isa[1] = v5;
        v6->isa = v5;
        ++v6->data;
        if (v13) {
          sub_4636C(v13);
        }
        CFStringRef v8 = (CFStringRef)qword_660488;
        if (qword_660488)
        {
          uint64_t v13 = (std::__shared_weak_count *)qword_660490;
          if (qword_660490) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_660490 + 8), 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          sub_3EA704(&v12);
          CFStringRef v8 = v12;
        }
        std::string::size_type v9 = operator new(0x18uLL);
        void v9[2] = v3;
        std::string v11 = v8[1].isa;
        uint64_t v10 = (__CFString *)&v8[1];
        *std::string::size_type v9 = v11;
        v9[1] = v10;
        v11[1] = v9;
        v10->isa = v9;
        ++v10->data;
        if (v13) {
          sub_4636C(v13);
        }
      }
    }
  }
}

void sub_F9FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_FA010(uint64_t a1)
{
  uint64_t v1 = a1;
  CFStringRef v2 = *(const __CFString **)(a1 + 448);
  CFStringRef theString1 = v2;
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 456);
  char v9 = v1;
  if (v1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    CFRetain(v2);
  }
  CFStringRef v6 = CFStringCreateWithCString(0, "DSP Debug1", 0x600u);
  char v7 = 1;
  BOOL v4 = CFEqual(theString1, v6);
  sub_72924((uint64_t)&v6);
  sub_72924((uint64_t)&theString1);
  return v4;
}

void sub_FA0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_FA0C8(uint64_t a1, unsigned int **a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 520);
  if (v3) {
    sub_3901F4(v3, a2, a3);
  }
  else {
    sub_20EA18(0, a2);
  }
}

uint64_t sub_FA0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  CFStringRef v6 = *(const void **)(a1 + 448);
  *(void *)CFStringRef theString1 = v6;
  theString1[8] = *(unsigned char *)(a1 + 456);
  if (theString1[8]) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    CFRetain(v6);
  }
  CFStringRef v20 = CFStringCreateWithCString(0, "DSP Debug1", 0x600u);
  char v21 = 1;
  CFComparisonResult v8 = CFStringCompare(*(CFStringRef *)theString1, v20, 0);
  sub_72924((uint64_t)&v20);
  uint64_t result = sub_72924((uint64_t)theString1);
  if (v8)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    int v10 = *(_DWORD *)(a2 + 144);
    if (v10 != 1886216809 && v10 != 1886545251)
    {
      int v14 = (os_log_t *)sub_32A48(13);
      uint64_t v15 = *v14;
      if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)CFStringRef theString1 = 136315394;
        *(void *)&theString1[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
        __int16 v23 = 1024;
        int v24 = 179;
        _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to get trim gains on port that is not internal mic or receiver\"", theString1, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Attempt to get trim gains on port that is not internal mic or receiver");
    }
    std::string v11 = (void *)sub_F820C();
    *(void *)CFStringRef theString1 = CFStringCreateWithCString(0, "Codec", 0x600u);
    theString1[8] = 1;
    uint64_t v12 = sub_F832C(v11, (CFStringRef *)theString1);
    sub_72924((uint64_t)theString1);
    if (!v12)
    {
      uint64_t v13 = (void *)sub_F820C();
      *(void *)CFStringRef theString1 = CFStringCreateWithCString(0, "Receiver", 0x600u);
      theString1[8] = 1;
      uint64_t v12 = sub_F832C(v13, (CFStringRef *)theString1);
      sub_72924((uint64_t)theString1);
      if (!v12)
      {
        uint64_t v17 = (os_log_t *)sub_32A48(13);
        char v18 = *v17;
        if (*v17)
        {
          if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFStringRef theString1 = 136315394;
            *(void *)&theString1[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
            __int16 v23 = 1024;
            int v24 = 184;
            _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kAudioHardwareUnspecifiedError) [ioDevice is NULL]: \"could not get io device\"", theString1, 0x12u);
          }
        }
        __int16 v19 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v19 = &off_6414D8;
        v19[2] = 2003329396;
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 288))(v12, a2);
  }
  return result;
}

void sub_FA3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void *sub_FA440@<X0>(void *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = result[65];
  if (v4) {
    return sub_3921D0(a3, v4, a2);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t sub_FA460(uint64_t a1, unsigned int a2)
{
  if (a2 != 1885433443 && a2 != 1751409257)
  {
    uint64_t v4 = (os_log_t *)sub_32A48(17);
    unsigned __int16 v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      CFStringRef v6 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      int v14 = "Device_ExtendedHapticDebug_Aspen.cpp";
      __int16 v15 = 1024;
      int v16 = 149;
      __int16 v17 = 2080;
      char v18 = v6;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d Cannot locate AudioObjectPropertyElement for the given VirtualAudioPortType (%s).", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    BOOL v7 = (os_log_t *)sub_32A48(13);
    CFComparisonResult v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        int v14 = "Device_ExtendedHapticDebug_Aspen.cpp";
        __int16 v15 = 1024;
        int v16 = 150;
        _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Unsupported VirtualAudioPortType\"", buf, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported VirtualAudioPortType");
  }
  return 0;
}

void sub_FA624(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_FA640(os_unfair_lock_s *a1)
{
}

void sub_FAC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,uint64_t a33,char *a34)
{
  a34 = &a22;
  sub_74004((void ***)&a34);
  _Unwind_Resume(a1);
}

void sub_FAD08(os_unfair_lock_s *a1)
{
  uint64_t v2 = sub_298DA4();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *), os_unfair_lock_s *))(*(void *)v2 + 72))(v2, sub_FB78C, a1);
  uint64_t v3 = sub_298DA4();
  (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *), os_unfair_lock_s *))(*(void *)v3 + 48))(v3, sub_FB78C, a1);

  sub_FADAC(a1);
}

void sub_FADAC(os_unfair_lock_s *a1)
{
  uint64_t v2 = operator new(4uLL);
  *(void *)std::string __p = v2;
  _DWORD *v2 = 1885433443;
  *(void *)&__p[8] = v2 + 1;
  *(void *)&__p[16] = v2 + 1;
  strcpy(&__p[24], "cwdv");
  char v30 = 0;
  int v31 = 3;
  v33[0] = 0;
  v33[1] = 0;
  unint64_t v32 = v33;
  int v34 = 44739242;
  CFTypeRef cf = 0;
  sub_43637C((uint64_t *)v22, (uint64_t)a1, (uint64_t)__p);
  sub_FB288(&v24, v22);
  sub_8108((uint64_t *)v22);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v33[0]);
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if (v26 >= 2)
  {
    char v12 = (os_log_t *)sub_32A48(13);
    uint64_t v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      sub_4F64((uint64_t)v22, a1 + 2);
      int v14 = v23 >= 0 ? v22 : (void **)v22[0];
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&__p[14] = 245;
      *(_WORD *)&unsigned char __p[18] = 2080;
      *(void *)&__p[20] = v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Encountered more than one ANC port in device %s\"", __p, 0x1Cu);
      if (v23 < 0) {
        operator delete(v22[0]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Encountered more than one ANC port in device %s");
  }
  if (v26)
  {
    uint64_t v4 = *(void *)(v25 + 16);
    uint64_t v3 = *(std::__shared_weak_count **)(v25 + 24);
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v4)
    {
      int v16 = (os_log_t *)sub_32A48(13);
      __int16 v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "Device_ExtendedHapticDebug_Aspen.cpp";
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = 263;
        _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Encountered a NULL ANC port\"", __p, 0x12u);
      }
      char v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v18, "Encountered a NULL ANC port");
    }
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 152))(v4);
    (*(void (**)(uint64_t))(*(void *)v4 + 544))(v4);
    if (v5 != (*(unsigned int (**)(uint64_t))(*(void *)v4 + 152))(v4))
    {
      uint64_t v27 = v4;
      int v28 = v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      sub_DD9D0(&v19, &v27, 1);
      *(_DWORD *)std::string __p = 1852011125;
      *(void *)&__p[8] = &__p[8];
      *(void *)&__p[16] = &__p[8];
      *(void *)&__p[24] = 0;
      uint64_t v6 = v21;
      if (v21)
      {
        uint64_t v8 = v19;
        BOOL v7 = v20;
        uint64_t v9 = *v20;
        *(void *)(v9 + 8) = *(void *)(v19 + 8);
        **(void **)(v8 + 8) = v9;
        uint64_t v10 = *(void *)&__p[8];
        *(void *)(*(void *)&__p[8] + 8) = v7;
        *BOOL v7 = v10;
        *(void *)&__p[8] = v8;
        *(void *)(v8 + 8) = &__p[8];
        *(void *)&__p[24] = v6;
        uint64_t v21 = 0;
      }
      sub_FB3C0((uint64_t)v22, (unsigned int *)__p, 1);
      sub_8108((uint64_t *)&__p[8]);
      sub_8108(&v19);
      if (v28) {
        std::__shared_weak_count::__release_weak(v28);
      }
      std::string v11 = (_DWORD *)sub_10FBF0();
      sub_110B44(v11, v22, 0);
      sub_FB43C((void *)v22[1]);
    }
    if (v3) {
      sub_4636C(v3);
    }
  }
  sub_B8E4(&v24);
}

void sub_FB1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,char a21)
{
}

void sub_FB288(uint64_t *a1, void *a2)
{
  __int16 v17 = &v17;
  char v18 = (uint64_t *)&v17;
  uint64_t v19 = 0;
  uint64_t v3 = (void *)a2[1];
  if (v3 == a2)
  {
    *a1 = (uint64_t)a1;
    a1[1] = (uint64_t)a1;
    int v5 = a1 + 2;
    goto LABEL_12;
  }
  int v5 = &v19;
  do
  {
    uint64_t v6 = (std::__shared_weak_count *)v3[3];
    if (v6)
    {
      BOOL v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = v3[2];
        if (v9)
        {
          uint64_t v10 = operator new(0x20uLL);
          void v10[2] = v9;
          uint64_t v10[3] = v8;
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = (uint64_t)v17;
          v17[1] = v10;
          void *v10 = v11;
          v10[1] = &v17;
          __int16 v17 = v10;
          ++v19;
        }
        sub_4636C(v8);
      }
    }
    uint64_t v3 = (void *)v3[1];
  }
  while (v3 != a2);
  uint64_t v12 = v19;
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (v12)
  {
    uint64_t v14 = (uint64_t)v17;
    uint64_t v13 = v18;
    uint64_t v15 = *v18;
    *(void *)(v15 + 8) = v17[1];
    **(void **)(v14 + 8) = v15;
    uint64_t v16 = *a1;
    *(void *)(v16 + 8) = v13;
    *uint64_t v13 = v16;
    *a1 = v14;
    *(void *)(v14 + 8) = a1;
    a1[2] = v12;
LABEL_12:
    *int v5 = 0;
  }
  sub_B8E4((uint64_t *)&v17);
}

void sub_FB3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_4636C(v2);
  sub_B8E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_FB3C0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 32 * a3;
    do
    {
      sub_FB490((uint64_t **)a1, v4, *a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_FB428(_Unwind_Exception *a1)
{
  sub_FB43C(*v1);
  _Unwind_Resume(a1);
}

void sub_FB43C(void *a1)
{
  if (a1)
  {
    sub_FB43C(*a1);
    sub_FB43C(a1[1]);
    sub_8108(a1 + 5);
    operator delete(a1);
  }
}

void sub_FB490(uint64_t **a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  int v5 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2 || (unsigned int v6 = *((_DWORD *)a2 + 8), v6 > a3))
  {
    BOOL v7 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v9 = a2;
LABEL_16:
      if (v7) {
        uint64_t v12 = (uint64_t **)v9;
      }
      else {
        uint64_t v12 = (uint64_t **)a2;
      }
      if (v7) {
        uint64_t v10 = (uint64_t **)(v9 + 1);
      }
      else {
        uint64_t v10 = (uint64_t **)a2;
      }
      goto LABEL_22;
    }
    if (v7)
    {
      uint64_t v8 = (uint64_t *)*a2;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v9 = (uint64_t *)v14[2];
        BOOL v15 = *v9 == (void)v14;
        uint64_t v14 = v9;
      }
      while (v15);
    }
    if (*((_DWORD *)v9 + 8) < a3) {
      goto LABEL_16;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = (uint64_t **)v16;
          unsigned int v17 = *((_DWORD *)v16 + 8);
          if (v17 <= a3) {
            break;
          }
          uint64_t v16 = *v12;
          int v5 = v12;
          if (!*v12) {
            goto LABEL_44;
          }
        }
        if (v17 >= a3) {
          break;
        }
        int v5 = v12 + 1;
        uint64_t v16 = v12[1];
        if (!v16) {
          goto LABEL_44;
        }
      }
LABEL_46:
      uint64_t v10 = v5;
      goto LABEL_22;
    }
  }
  else
  {
    if (v6 >= a3) {
      return;
    }
    uint64_t v10 = (uint64_t **)(a2 + 1);
    uint64_t v11 = (uint64_t *)a2[1];
    if (v11)
    {
      do
      {
        uint64_t v10 = (uint64_t **)v11;
        uint64_t v11 = (uint64_t *)*v11;
        uint64_t v12 = v10;
        uint64_t v13 = v10;
      }
      while (v11);
    }
    else
    {
      uint64_t v13 = (uint64_t **)a2;
      do
      {
        char v18 = (uint64_t *)v13;
        uint64_t v13 = (uint64_t **)v13[2];
      }
      while (*v13 != v18);
      uint64_t v12 = (uint64_t **)a2;
    }
    if (v13 == v5 || *((_DWORD *)v13 + 8) > a3)
    {
LABEL_22:
      int v5 = v10;
      if (*v10) {
        return;
      }
      goto LABEL_44;
    }
    uint64_t v19 = *v5;
    if (*v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v12 = (uint64_t **)v19;
          unsigned int v20 = *((_DWORD *)v19 + 8);
          if (v20 <= a3) {
            break;
          }
          uint64_t v19 = *v12;
          int v5 = v12;
          if (!*v12) {
            goto LABEL_44;
          }
        }
        if (v20 >= a3) {
          goto LABEL_46;
        }
        int v5 = v12 + 1;
        uint64_t v19 = v12[1];
        if (!v19) {
          goto LABEL_44;
        }
      }
    }
  }
  uint64_t v12 = a1 + 1;
LABEL_44:
  sub_FB658((uint64_t)v21, (uint64_t)a1, a4);
  sub_46CA8(a1, (uint64_t)v12, v5, v21[0]);
  v21[0] = 0;
  sub_FB6C8((uint64_t)v21);
}

uint64_t *sub_FB658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  unsigned int v6 = operator new(0x40uLL);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a3;
  uint64_t result = sub_FB720((uint64_t *)v6 + 5, (void *)(a3 + 8));
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_FB6B4(_Unwind_Exception *a1)
{
  sub_FB6C8(v1);
  _Unwind_Resume(a1);
}

void sub_FB6C8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_8108(v1 + 5);
    }
    operator delete(v1);
  }
}

uint64_t *sub_FB720(uint64_t *a1, void *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = a2; ; sub_3590(a1, i[2], i[3]))
  {
    uint64_t i = (void *)i[1];
    if (i == a2) {
      break;
    }
  }
  return a1;
}

void sub_FB778(_Unwind_Exception *a1)
{
  sub_8108(v1);
  _Unwind_Resume(a1);
}

void sub_FB78C(os_unfair_lock_s *a1)
{
  if (!a1)
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "Device_ExtendedHapticDebug_Aspen.cpp";
        __int16 v6 = 1024;
        int v7 = 236;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"SystemSettingsManager passed clientData as NULL.\"", (uint8_t *)&v4, 0x12u);
      }
    }
  }
  sub_FADAC(a1);
}

void sub_FB85C(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x60uLL);
  *(_OWORD *)(v4 + 8) = 0u;
  *(void *)int v4 = off_640120;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)a2;
  long long v5 = *(_OWORD *)(a2 + 9);
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 33) = v5;
  *((_OWORD *)v4 + 4) = 0u;
  sub_729F4((void *)v4 + 7, *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 6);
  sub_23B86C((uint64_t)(v4 + 80), *((_DWORD *)v4 + 7));
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_FB904(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_72620((void ***)va);
  std::__shared_weak_count::~__shared_weak_count(v2);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void *sub_FB930(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_FB9B4()
{
  uint64_t v0 = sub_298DA4();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v0 + 64))(v0)) {
    return 0;
  }
  uint64_t v2 = sub_298DA4();
  return (*(unsigned int (**)(uint64_t))(*(void *)v2 + 40))(v2) == 560488803;
}

void sub_FBA3C(uint64_t a1, void *a2)
{
  *a2 = off_6215C8;
}

void *sub_FBA5C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_6215C8;
  return result;
}

void sub_FBA94()
{
}

uint64_t sub_FBAB0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_FBAD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_63F9F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_FBB28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_63F9F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_FBB48(uint64_t *a1, void *a2)
{
  uint64_t result = sub_98E84((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

void sub_FBBC4(uint64_t a1)
{
  sub_72924(a1 + 80);
  uint64_t v2 = (void **)(a1 + 56);
  sub_72620(&v2);
}

void sub_FBC04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_640120;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_FBC58(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_640120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_FBC78(uint64_t a1)
{
  if (*(void *)(a1 + 520))
  {
    uint64_t v2 = sub_298DA4();
    (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *)))(*(void *)v2 + 80))(v2, sub_FB78C);
    uint64_t v3 = sub_298DA4();
    (*(void (**)(uint64_t, void (*)(os_unfair_lock_s *)))(*(void *)v3 + 56))(v3, sub_FB78C);
  }

  sub_430D98(a1);
}

void sub_FBD1C(void *a1)
{
  sub_FBD54(a1);

  operator delete();
}

uint64_t sub_FBD54(void *a1)
{
  uint64_t v2 = a1[65];
  a1[65] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_FBDB8(a1);
}

uint64_t sub_FBDB8(void *a1)
{
  *a1 = off_626590;
  uint64_t v2 = (void *)a1[62];
  if (v2)
  {
    a1[63] = v2;
    operator delete(v2);
  }

  return sub_43456C((uint64_t)a1);
}

uint64_t sub_FBE1C(uint64_t a1, AudioObjectPropertySelector a2, const __CFString *a3)
{
  *(void *)sub_1D3108(a1, a2, a3) = &off_6213C0;
  AudioObjectID v13 = a2;
  *(void *)&inAddress.int mSelector = 0x696E707473736323;
  inAddress.AudioObjectPropertyElement mElement = 0;
  sub_869C8((uint64_t)&v7, &v13, &inAddress, 0, 0);
  if (LOBYTE(v11[0]))
  {
    if (v8 != v9)
    {
      uint64_t v5 = v8;
      do
      {
        if (*v5 == 1095648109)
        {
          if (v8) {
            operator delete(v8);
          }
          uint64_t v7 = (void **)&v8;
          uint64_t v8 = 0;
          v11[0] = 0;
          v11[1] = 0;
          uint64_t v9 = 0;
          uint64_t v10 = v11;
          sub_38DB90((uint64_t *)&v7, 0x70616E63u, 1095648109);
          sub_38DB90((uint64_t *)&v7, 0x70616E63u, 1095648112);
          sub_38DD5C((uint64_t)&v7, 0x696D6963u, 1885433443);
          sub_38DD5C((uint64_t)&v7, 0x736D6963u, 1885433443);
          sub_38DD5C((uint64_t)&v7, 0x666D6963u, 1885433443);
          sub_38DD5C((uint64_t)&v7, 0x414E436Du, 1885433443);
          sub_38DD5C((uint64_t)&v7, 0x414E434Du, 1885433443);
          sub_38DD5C((uint64_t)&v7, 0x414E4370u, 1885433443);
          operator new();
        }
        ++v5;
      }
      while (v5 != v9);
    }
    if (v8) {
      operator delete(v8);
    }
  }
  *(void *)(a1 + 520) = 0;
  return a1;
}

void sub_FC004()
{
}

BOOL sub_FC04C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1214539380;
}

void sub_FC06C(uint64_t a1, void *a2)
{
  *a2 = off_6217C0;
}

void *sub_FC08C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_6217C0;
  return result;
}

void sub_FC0C4()
{
}

BOOL sub_FC0DC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 264) != 1970496068;
}

void sub_FC0FC(uint64_t a1, void *a2)
{
  *a2 = off_621778;
}

void *sub_FC11C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_621778;
  return result;
}

void sub_FC154()
{
}

uint64_t sub_FC16C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 264) != 1781740087) {
    return 0;
  }
  if (sub_207DFC()) {
    return 1;
  }
  uint64_t result = MGGetBoolAnswer();
  if (result)
  {
    return MGGetBoolAnswer();
  }
  return result;
}

void sub_FC1E0(uint64_t a1, void *a2)
{
  *a2 = off_621730;
}

void *sub_FC200()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_621730;
  return result;
}

void sub_FC238()
{
}

uint64_t sub_FC250(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_FC288(uint64_t a1, void *a2)
{
  *a2 = off_6216E8;
}

void *sub_FC2A8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_6216E8;
  return result;
}

void sub_FC2E0()
{
}

uint64_t sub_FC2F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 504))(a2);
}

void sub_FC330(uint64_t a1, void *a2)
{
  *a2 = off_6216A0;
}

void *sub_FC350()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_6216A0;
  return result;
}

void sub_FC388()
{
}

BOOL sub_FC3A0(uint64_t a1, uint64_t a2)
{
  return !sub_24EC98(a2);
}

void sub_FC3C8(uint64_t a1, void *a2)
{
  *a2 = off_621658;
}

void *sub_FC3E8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_621658;
  return result;
}

void sub_FC420()
{
}

uint64_t sub_FC438(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 424))(a2);
}

void sub_FC470(uint64_t a1, void *a2)
{
  *a2 = off_621610;
}

void *sub_FC490()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_621610;
  return result;
}

void sub_FC4C8()
{
}

uint64_t sub_FC4E0(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v5 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v5;
  sub_3847B8(a1 + 16, a3);
  *(_WORD *)(a1 + 32) = 0;
  if ((*a3 - 9) >= 2 && *a3 != 7)
  {
    uint64_t v8 = (os_log_t *)sub_32A48(13);
    uint64_t v9 = *v8;
    if (*v8)
    {
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
      {
        int v11 = 136315394;
        uint64_t v12 = "RoutingTypes.h";
        __int16 v13 = 1024;
        int v14 = 906;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", (uint8_t *)&v11, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  return a1;
}

void sub_FC624(_Unwind_Exception *a1)
{
  sub_3840C4(v1);
  _Unwind_Resume(a1);
}

void *sub_FC64C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_46BB4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_FC6AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FC6C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    sub_463E0(*(void **)(a1 + 104));
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(void *)(a1 + 56) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

void *sub_FC71C(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_46BB4(a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_FC784(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_FC7A0(uint64_t a1)
{
  uint64_t v2 = operator new(0x88uLL);
  void *v2 = 0;
  v2[1] = 0;
  sub_FDA78(v2 + 2, a1);
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 24);
  sub_46A4C(v2 + 6, a1 + 32);
  *((_DWORD *)v2 + 18) = *(_DWORD *)(a1 + 56);
  sub_FDB1C(v2 + 10, (void *)(a1 + 64));
  v2[13] = *(void *)(a1 + 88);
  sub_FDBC8(v2 + 14, (void *)(a1 + 96));
  return v2;
}

void sub_FC828(_Unwind_Exception *a1)
{
  sub_463E0(v1[11]);
  sub_463E0(v1[7]);
  sub_45F50(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_FC86C(uint64_t a1)
{
  sub_45F50((void *)a1);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v3 = a1 + 40;
  uint64_t v2 = *(void **)(a1 + 40);
  *(_DWORD *)(a1 + 24) = 3;
  sub_463E0(v2);
  int v4 = v12;
  *(void *)(a1 + 32) = &v12;
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = v13;
  *(void *)(a1 + 48) = v13;
  if (v5)
  {
    v4[2] = v3;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v4 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v3;
  }
  sub_463E0(v4);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v7 = a1 + 72;
  uint64_t v6 = *(void **)(a1 + 72);
  *(_DWORD *)(a1 + 56) = 3;
  sub_463E0(v6);
  size_t v8 = v12;
  *(void *)(a1 + 64) = &v12;
  *(void *)(a1 + 72) = v8;
  uint64_t v9 = v13;
  *(void *)(a1 + 80) = v13;
  if (v9)
  {
    void v8[2] = v7;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    size_t v8 = 0;
  }
  else
  {
    *(void *)(a1 + 64) = v7;
  }
  sub_463E0(v8);
  int v11 = *(void **)(a1 + 104);
  uint64_t v10 = (void *)(a1 + 104);
  *(v10 - 2) = 0;
  sub_FD694(v11);
  *(v10 - 1) = v10;
  void *v10 = 0;
  v10[1] = 0;
}

uint64_t **sub_FC964(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  a1[1] = 0;
  int v4 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  *a1 = (uint64_t *)(a1 + 1);
  if (a3)
  {
    uint64_t v5 = a2;
    uint64_t v6 = 0;
    uint64_t v7 = &a2[2 * a3];
    size_t v8 = (uint64_t *)(a1 + 1);
    while (1)
    {
      uint64_t v9 = v4;
      if (v8 == v4) {
        goto LABEL_9;
      }
      uint64_t v10 = v6;
      int v11 = v4;
      if (v6)
      {
        do
        {
          uint64_t v9 = v10;
          uint64_t v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          int v11 = v9;
        }
        while (v12);
      }
      unsigned int v13 = *v5;
      if (*((_DWORD *)v9 + 7) < *v5)
      {
LABEL_9:
        int v14 = (uint64_t **)(v6 ? v9 : v4);
        BOOL v15 = (uint64_t **)(v6 ? v9 + 1 : v4);
      }
      else
      {
        int v14 = (uint64_t **)v4;
        BOOL v15 = (uint64_t **)v4;
        if (v6)
        {
          BOOL v15 = (uint64_t **)v4;
          while (1)
          {
            while (1)
            {
              int v14 = (uint64_t **)v6;
              unsigned int v18 = *((_DWORD *)v6 + 7);
              if (v13 >= v18) {
                break;
              }
              uint64_t v6 = *v14;
              BOOL v15 = v14;
              if (!*v14) {
                goto LABEL_16;
              }
            }
            if (v18 >= v13) {
              break;
            }
            BOOL v15 = v14 + 1;
            uint64_t v6 = v14[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v15)
      {
LABEL_16:
        uint64_t v16 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v16 + 28) = *(void *)v5;
        uint64_t *v16 = 0;
        v16[1] = 0;
        uint64_t v16[2] = (uint64_t)v14;
        NSObject *v15 = v16;
        unsigned int v17 = (uint64_t *)**a1;
        if (v17)
        {
          *a1 = v17;
          uint64_t v16 = *v15;
        }
        sub_46D00(a1[1], v16);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
      }
      v5 += 2;
      if (v5 == v7) {
        break;
      }
      size_t v8 = *a1;
      uint64_t v6 = a1[1];
    }
  }
  return a1;
}

void sub_FCAC4(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

void sub_FCAD8(unsigned int a1, int a2, uint64_t a3)
{
  uint64_t v5 = qword_64C4C8;
  if (qword_64C4C8)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t *)v5;
        unsigned int v7 = *(_DWORD *)(v5 + 32);
        if (v7 <= a1) {
          break;
        }
        uint64_t v5 = *v6;
        size_t v8 = (uint64_t **)v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a1) {
        break;
      }
      uint64_t v5 = v6[1];
      if (!v5)
      {
        size_t v8 = (uint64_t **)(v6 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    size_t v8 = (uint64_t **)&qword_64C4C8;
    uint64_t v6 = &qword_64C4C8;
LABEL_9:
    uint64_t v9 = (char *)operator new(0x88uLL);
    v19[1] = &qword_64C4C8;
    *((_DWORD *)v9 + 8) = a2;
    *((void *)v9 + 5) = v9 + 40;
    *((void *)v9 + 6) = v9 + 40;
    *((void *)v9 + 7) = 0;
    sub_D39BC((uint64_t)(v9 + 40), (uint64_t *)v9 + 5, (void *)a3);
    uint64_t v10 = (void *)(a3 + 48);
    uint64_t v11 = *(void *)(a3 + 48);
    v9[64] = *(unsigned char *)(a3 + 24);
    *((_DWORD *)v9 + 18) = *(_DWORD *)(a3 + 32);
    *(_DWORD *)(v9 + 75) = *(_DWORD *)(a3 + 35);
    *((void *)v9 + 10) = *(void *)(a3 + 40);
    *((void *)v9 + 11) = v11;
    BOOL v12 = v9 + 88;
    uint64_t v13 = *(void *)(a3 + 56);
    *((void *)v9 + 12) = v13;
    if (v13)
    {
      *(void *)(v11 + 16) = v12;
      *(void *)(a3 + 40) = v10;
      void *v10 = 0;
      *(void *)(a3 + 56) = 0;
    }
    else
    {
      *((void *)v9 + 10) = v12;
    }
    int v14 = (void *)(a3 + 72);
    uint64_t v15 = *(void *)(a3 + 72);
    uint64_t v16 = *(void *)(a3 + 64);
    *((void *)v9 + 14) = v15;
    unsigned int v17 = v9 + 112;
    *((void *)v9 + 13) = v16;
    uint64_t v18 = *(void *)(a3 + 80);
    *((void *)v9 + 15) = v18;
    if (v18)
    {
      *(void *)(v15 + 16) = v17;
      *(void *)(a3 + 64) = v14;
      void *v14 = 0;
      *(void *)(a3 + 80) = 0;
    }
    else
    {
      *((void *)v9 + 13) = v17;
    }
    v9[128] = *(unsigned char *)(a3 + 88);
    char v20 = 1;
    sub_FD948((uint64_t)v6, v8, (uint64_t *)v9);
    v19[0] = 0;
    sub_FD9A8((uint64_t)v19);
  }
}

void sub_FCC40(void *a1)
{
  if (a1)
  {
    sub_FCC40(*a1);
    sub_FCC40(a1[1]);
    sub_463E0((void *)a1[6]);
    operator delete(a1);
  }
}

void sub_FCC94(void *a1)
{
  if (a1)
  {
    sub_FCC94(*a1);
    sub_FCC94(a1[1]);
    sub_FDA00((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_FCCE8(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_FD694((void *)v3[15]);
        sub_463E0((void *)v3[11]);
        sub_463E0((void *)v3[7]);
        sub_45F50(v3 + 2);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_FCD78(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  uint64_t v5 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = 0;
  sub_D39BC((uint64_t)v5, v5, (void *)a3);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a3 + 24);
  int v6 = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a1 + 43) = *(_DWORD *)(a3 + 35);
  *(_DWORD *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = *(void *)(a3 + 40);
  unsigned int v7 = (void *)(a3 + 48);
  uint64_t v8 = *(void *)(a3 + 48);
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = a1 + 56;
  uint64_t v10 = *(void *)(a3 + 56);
  *(void *)(a1 + 64) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a3 + 40) = v7;
    *unsigned int v7 = 0;
    *(void *)(a3 + 56) = 0;
  }
  else
  {
    *(void *)(a1 + 48) = v9;
  }
  *(void *)(a1 + 72) = *(void *)(a3 + 64);
  uint64_t v11 = (void *)(a3 + 72);
  uint64_t v12 = *(void *)(a3 + 72);
  *(void *)(a1 + 80) = v12;
  uint64_t v13 = a1 + 80;
  uint64_t v14 = *(void *)(a3 + 80);
  *(void *)(a1 + 88) = v14;
  if (v14)
  {
    *(void *)(v12 + 16) = v13;
    *(void *)(a3 + 64) = v11;
    void *v11 = 0;
    *(void *)(a3 + 80) = 0;
  }
  else
  {
    *(void *)(a1 + 72) = v13;
  }
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a3 + 88);
  return a1;
}

void sub_FCE44(unsigned int a1, int *a2)
{
  uint64_t v3 = qword_64C4C8;
  if (qword_64C4C8)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (uint64_t *)v3;
        unsigned int v5 = *(_DWORD *)(v3 + 32);
        if (v5 <= a1) {
          break;
        }
        uint64_t v3 = *v4;
        int v6 = (uint64_t **)v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }
      if (v5 >= a1) {
        break;
      }
      uint64_t v3 = v4[1];
      if (!v3)
      {
        int v6 = (uint64_t **)(v4 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v6 = (uint64_t **)&qword_64C4C8;
    uint64_t v4 = &qword_64C4C8;
LABEL_9:
    unsigned int v7 = (char *)operator new(0x88uLL);
    int v8 = *a2;
    v18[1] = &qword_64C4C8;
    *((_DWORD *)v7 + 8) = v8;
    *((void *)v7 + 5) = v7 + 40;
    *((void *)v7 + 6) = v7 + 40;
    *((void *)v7 + 7) = 0;
    sub_D39BC((uint64_t)(v7 + 40), (uint64_t *)v7 + 5, (void *)a2 + 1);
    uint64_t v9 = a2 + 14;
    uint64_t v10 = *((void *)a2 + 7);
    v7[64] = *((unsigned char *)a2 + 32);
    *((_DWORD *)v7 + 18) = a2[10];
    *(_DWORD *)(v7 + 75) = *(int *)((char *)a2 + 43);
    *((void *)v7 + 10) = *((void *)a2 + 6);
    *((void *)v7 + 11) = v10;
    uint64_t v11 = v7 + 88;
    uint64_t v12 = *((void *)a2 + 8);
    *((void *)v7 + 12) = v12;
    if (v12)
    {
      *(void *)(v10 + 16) = v11;
      *((void *)a2 + 6) = v9;
      *uint64_t v9 = 0;
      *((void *)a2 + 8) = 0;
    }
    else
    {
      *((void *)v7 + 10) = v11;
    }
    uint64_t v13 = a2 + 20;
    uint64_t v14 = *((void *)a2 + 10);
    uint64_t v15 = *((void *)a2 + 9);
    *((void *)v7 + 14) = v14;
    uint64_t v16 = v7 + 112;
    *((void *)v7 + 13) = v15;
    uint64_t v17 = *((void *)a2 + 11);
    *((void *)v7 + 15) = v17;
    if (v17)
    {
      *(void *)(v14 + 16) = v16;
      *((void *)a2 + 9) = v13;
      *uint64_t v13 = 0;
      *((void *)a2 + 11) = 0;
    }
    else
    {
      *((void *)v7 + 13) = v16;
    }
    v7[128] = *((unsigned char *)a2 + 96);
    char v19 = 1;
    sub_FD948((uint64_t)v4, v6, (uint64_t *)v7);
    v18[0] = 0;
    sub_FD9A8((uint64_t)v18);
  }
}

void sub_FCFAC()
{
  uint64_t v0 = qword_64C4C0;
  if ((uint64_t *)qword_64C4C0 != &qword_64C4C8)
  {
    while (1)
    {
      uint64_t v1 = sub_32A48(20);
      if (*(unsigned char *)(v1 + 8))
      {
        uint64_t v2 = *(NSObject **)v1;
        if (*(void *)v1)
        {
          if (os_log_type_enabled(*(os_log_t *)v1, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, *(_DWORD *)(v0 + 32));
            uint64_t v3 = __p;
            if (v39 < 0) {
              uint64_t v3 = (void **)__p[0];
            }
            *(_DWORD *)int buf = 136315650;
            int v41 = "RoutingTypes.h";
            __int16 v42 = 1024;
            int v43 = 2180;
            __int16 v44 = 2080;
            *(void *)uint64_t v45 = v3;
            _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_DEBUG, "%25s:%-5d Located Category for category '%s'.", buf, 0x1Cu);
            if (v39 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      uint64_t v4 = sub_32A48(20);
      if (*(unsigned char *)(v4 + 8))
      {
        unsigned int v5 = *(NSObject **)v4;
        if (*(void *)v4)
        {
          if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, *(_DWORD *)(v0 + 72));
            int v6 = __p;
            if (v39 < 0) {
              int v6 = (void **)__p[0];
            }
            *(_DWORD *)int buf = 136315650;
            int v41 = "RoutingTypes.h";
            __int16 v42 = 1024;
            int v43 = 2181;
            __int16 v44 = 2080;
            *(void *)uint64_t v45 = v6;
            _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Category type: '%s'.", buf, 0x1Cu);
            if (v39 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      uint64_t v7 = sub_32A48(20);
      if (*(unsigned char *)(v7 + 8))
      {
        int v8 = *(NSObject **)v7;
        if (*(void *)v7)
        {
          if (os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, *(_DWORD *)(v0 + 32));
            uint64_t v9 = __p;
            if (v39 < 0) {
              uint64_t v9 = (void **)__p[0];
            }
            uint64_t v10 = "obeys";
            if (!*(unsigned char *)(v0 + 76)) {
              uint64_t v10 = "does not obey";
            }
            *(_DWORD *)int buf = 136315906;
            int v41 = "RoutingTypes.h";
            __int16 v42 = 1024;
            int v43 = 2183;
            __int16 v44 = 2080;
            *(void *)uint64_t v45 = v9;
            *(_WORD *)&v45[8] = 2080;
            *(void *)&v45[10] = v10;
            _os_log_impl(&def_1E50E8, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Category '%s' %s silent mode.", buf, 0x26u);
            if (v39 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      if (!*(void *)(v0 + 56))
      {
        __int16 v33 = (os_log_t *)sub_32A48(20);
        os_log_t v34 = *v33;
        if (!*v33 || !os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR)) {
          return;
        }
        sub_2417C(__p, *(_DWORD *)(v0 + 32));
        if (v39 >= 0) {
          int v35 = __p;
        }
        else {
          int v35 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315650;
        int v41 = "RoutingTypes.h";
        __int16 v42 = 1024;
        int v43 = 2187;
        __int16 v44 = 2080;
        *(void *)uint64_t v45 = v35;
        char v30 = "%25s:%-5d !!!!! Category '%s' has an empty PrioritizedRouteList !!!!!";
        int v31 = v34;
        uint32_t v32 = 28;
        goto LABEL_64;
      }
      uint64_t v11 = *(void **)(v0 + 48);
      if (v11 != (void *)(v0 + 40)) {
        break;
      }
LABEL_51:
      uint64_t v24 = *(uint64_t **)(v0 + 8);
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          uint64_t v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = *(uint64_t **)(v0 + 16);
          BOOL v26 = *v25 == v0;
          uint64_t v0 = (uint64_t)v25;
        }
        while (!v26);
      }
      uint64_t v0 = (uint64_t)v25;
      if (v25 == &qword_64C4C8) {
        return;
      }
    }
    int v12 = 0;
    while (1)
    {
      uint64_t v13 = sub_32A48(20);
      if (*(unsigned char *)(v13 + 8))
      {
        uint64_t v14 = *(NSObject **)v13;
        if (*(void *)v13)
        {
          if (os_log_type_enabled(*(os_log_t *)v13, OS_LOG_TYPE_DEBUG))
          {
            sub_2417C(__p, *(_DWORD *)(v0 + 32));
            uint64_t v15 = __p;
            if (v39 < 0) {
              uint64_t v15 = (void **)__p[0];
            }
            *(_DWORD *)int buf = 136315906;
            int v41 = "RoutingTypes.h";
            __int16 v42 = 1024;
            int v43 = 2193;
            __int16 v44 = 1024;
            *(_DWORD *)uint64_t v45 = v12;
            *(_WORD *)&v45[4] = 2080;
            *(void *)&v45[6] = v15;
            _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d --> Searching AbstractRoute #%d of the PrioritizedRouteList for category '%s'.", buf, 0x22u);
            if (v39 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
      if (!v11[4]) {
        break;
      }
      uint64_t v16 = v11[3];
      if ((void *)v16 != v11 + 2)
      {
        int v17 = 0;
        do
        {
          uint64_t v18 = sub_32A48(20);
          if (*(unsigned char *)(v18 + 8))
          {
            char v19 = *(NSObject **)v18;
            if (*(void *)v18)
            {
              if (os_log_type_enabled(*(os_log_t *)v18, OS_LOG_TYPE_DEBUG))
              {
                sub_2417C(__p, *(_DWORD *)(v16 + 16));
                int v20 = v39;
                uint64_t v21 = (void **)__p[0];
                sub_2417C(v36, *(_DWORD *)(v16 + 20));
                int v22 = __p;
                if (v20 < 0) {
                  int v22 = v21;
                }
                char v23 = v36;
                if (v37 < 0) {
                  char v23 = (void **)v36[0];
                }
                *(_DWORD *)int buf = 136316162;
                int v41 = "RoutingTypes.h";
                __int16 v42 = 1024;
                int v43 = 2202;
                __int16 v44 = 1024;
                *(_DWORD *)uint64_t v45 = v17;
                *(_WORD *)&v45[4] = 2080;
                *(void *)&v45[6] = v22;
                *(_WORD *)&v45[14] = 2080;
                *(void *)&v45[16] = v23;
                _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_DEBUG, "%25s:%-5d ----> AbstractRoute #%d contains Connection ('%s' / '%s')", buf, 0x2Cu);
                if (v37 < 0) {
                  operator delete(v36[0]);
                }
                if (v39 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
          ++v17;
          uint64_t v16 = *(void *)(v16 + 8);
        }
        while ((void *)v16 != v11 + 2);
      }
      ++v12;
      uint64_t v11 = (void *)v11[1];
      if (v11 == (void *)(v0 + 40)) {
        goto LABEL_51;
      }
    }
    uint64_t v27 = (os_log_t *)sub_32A48(20);
    os_log_t v28 = *v27;
    if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, *(_DWORD *)(v0 + 32));
      if (v39 >= 0) {
        unint64_t v29 = __p;
      }
      else {
        unint64_t v29 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315906;
      int v41 = "RoutingTypes.h";
      __int16 v42 = 1024;
      int v43 = 2196;
      __int16 v44 = 1024;
      *(_DWORD *)uint64_t v45 = v12;
      *(_WORD *)&v45[4] = 2080;
      *(void *)&v45[6] = v29;
      char v30 = "%25s:%-5d !!!!! AbstractRoute #%d of the PrioritizedRouteList for category '%s' is empty !!!!!";
      int v31 = v28;
      uint32_t v32 = 34;
LABEL_64:
      _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, v30, buf, v32);
      if (v39 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_FD5F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FD618(uint64_t a1)
{
  return a1;
}

uint64_t sub_FD654(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_FCC40(*(void **)(a1 + 80));
  sub_FCC94(*(void **)(a1 + 56));
  sub_FCCE8(v2);
  return a1;
}

void sub_FD694(void *a1)
{
  if (a1)
  {
    sub_FD694(*a1);
    sub_FD694(a1[1]);
    sub_FD8E8((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_FD6E8()
{
  sub_FD7F0((void *)qword_64C560);
  sub_463E0((void *)qword_64C540);
  sub_463E0((void *)qword_64C528);
  sub_463E0((void *)qword_64C510);
  sub_463E0((void *)qword_64C4F8);
  if (qword_64C4D8)
  {
    qword_64C4E0 = qword_64C4D8;
    operator delete((void *)qword_64C4D8);
  }
  uint64_t v0 = (void *)qword_64C4C8;

  sub_FD84C(v0);
}

uint64_t sub_FD760(uint64_t a1)
{
  sub_463E0(*(void **)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_FD7AC(uint64_t a1)
{
  return a1;
}

void sub_FD7F0(void *a1)
{
  if (a1)
  {
    sub_FD7F0(*a1);
    sub_FD7F0(a1[1]);
    uint64_t v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

void sub_FD84C(void *a1)
{
  if (a1)
  {
    sub_FD84C(*a1);
    sub_FD84C(a1[1]);
    sub_FD8A0((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_FD8A0(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_FCC40(*(void **)(a1 + 80));
  sub_FCC94(*(void **)(a1 + 56));

  sub_FCCE8(v2);
}

void sub_FD8E8(uint64_t a1)
{
  sub_463E0(*(void **)(a1 + 112));
  sub_463E0(*(void **)(a1 + 88));
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = *(void **)(a1 + 16);
    if (v2)
    {
      *(void *)(a1 + 24) = v2;
      operator delete(v2);
    }
  }
}

uint64_t *sub_FD948(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)qword_64C4C0)
  {
    qword_64C4C0 = *(void *)qword_64C4C0;
    a3 = *a2;
  }
  uint64_t result = sub_46D00((uint64_t *)qword_64C4C8, a3);
  ++qword_64C4D0;
  return result;
}

void sub_FD9A8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_FD8A0((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_FDA00(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136)) {
    sub_FCC40(*(void **)(a1 + 120));
  }
  sub_463E0(*(void **)(a1 + 96));
  if (*(unsigned char *)(a1 + 80)) {
    sub_463E0(*(void **)(a1 + 64));
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(void *)(a1 + 16) = v2;
      operator delete(v2);
    }
  }
}

void *sub_FDA78(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    int v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x38uLL);
      long long v8 = *(_OWORD *)(v3 + 16);
      long long v9 = *(_OWORD *)(v3 + 32);
      v7[6] = *(void *)(v3 + 48);
      *((_OWORD *)v7 + 1) = v8;
      *((_OWORD *)v7 + 2) = v9;
      *uint64_t v7 = v6;
      v7[1] = a1;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_FDB08(_Unwind_Exception *a1)
{
  sub_45F50(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_FDB1C(uint64_t *a1, void *a2)
{
  a1[1] = 0;
  uint64_t v3 = a1 + 1;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_6BE90(a1, v3, *((_DWORD *)v5 + 7), *((_DWORD *)v5 + 7));
      int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_FDBB4(_Unwind_Exception *a1)
{
  sub_463E0(*v1);
  _Unwind_Resume(a1);
}

uint64_t ***sub_FDBC8(void *a1, void *a2)
{
  uint64_t v2 = (uint64_t ***)a1;
  a1[1] = 0;
  uint64_t v3 = (uint64_t **)(a1 + 1);
  a1[2] = 0;
  *a1 = a1 + 1;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v57 = (uint64_t **)(a1 + 1);
    unint64_t v55 = a2 + 1;
    do
    {
      int v6 = (uint64_t *)v2[1];
      uint64_t v7 = v3;
      if (*v2 == v3) {
        goto LABEL_9;
      }
      BOOL v8 = v2[1];
      long long v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = v8;
          BOOL v8 = (uint64_t **)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          long long v9 = v7;
        }
        while (v10);
      }
      unsigned int v11 = *((_DWORD *)v5 + 8);
      if (*((_DWORD *)v7 + 8) < v11)
      {
LABEL_9:
        if (v6) {
          int v12 = v7;
        }
        else {
          int v12 = v3;
        }
        if (v6) {
          uint64_t v13 = v7 + 1;
        }
        else {
          uint64_t v13 = v3;
        }
      }
      else
      {
        int v12 = v3;
        uint64_t v13 = v3;
        if (v6)
        {
          uint64_t v13 = v3;
          while (1)
          {
            while (1)
            {
              int v12 = (uint64_t **)v6;
              unsigned int v53 = *((_DWORD *)v6 + 8);
              if (v11 >= v53) {
                break;
              }
              int v6 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_16;
              }
            }
            if (v53 >= v11) {
              break;
            }
            uint64_t v13 = v12 + 1;
            int v6 = v12[1];
            if (!v6) {
              goto LABEL_16;
            }
          }
        }
      }
      if (!*v13)
      {
LABEL_16:
        uint64_t v14 = (char *)operator new(0xB0uLL);
        uint64_t v58 = (uint64_t)v12;
        v60[0] = v14;
        v60[1] = v3;
        char v61 = 0;
        *((_DWORD *)v14 + 8) = *((_DWORD *)v5 + 8);
        *((void *)v14 + 5) = v5[5];
        sub_E4660((uint64_t)(v14 + 48), (uint64_t)(v5 + 6));
        long long v15 = *((_OWORD *)v5 + 5);
        long long v16 = *(_OWORD *)((char *)v5 + 93);
        *((void *)v14 + 15) = 0;
        int v17 = v14 + 120;
        uint64_t v59 = v14;
        *((void *)v14 + 14) = v14 + 120;
        uint64_t v18 = v14 + 112;
        *(_OWORD *)(v18 - 19) = v16;
        *((_OWORD *)v18 - 2) = v15;
        *((void *)v18 + 2) = 0;
        char v19 = (void *)v5[14];
        if (v19 != v5 + 15)
        {
          do
          {
            int v20 = (unsigned int *)v19 + 7;
            uint64_t v21 = *v17;
            int v22 = v17;
            if (*(void **)v18 == v17) {
              goto LABEL_23;
            }
            char v23 = (void *)*v17;
            uint64_t v24 = v17;
            if (v21)
            {
              do
              {
                int v22 = v23;
                char v23 = (void *)v23[1];
              }
              while (v23);
            }
            else
            {
              do
              {
                int v22 = (void *)v24[2];
                BOOL v10 = *v22 == (void)v24;
                uint64_t v24 = v22;
              }
              while (v10);
            }
            unsigned int v25 = *v20;
            if (*((_DWORD *)v22 + 7) < *v20)
            {
LABEL_23:
              if (v21) {
                BOOL v26 = (uint64_t **)v22;
              }
              else {
                BOOL v26 = (uint64_t **)v17;
              }
              if (v21) {
                uint64_t v27 = (uint64_t **)(v22 + 1);
              }
              else {
                uint64_t v27 = (uint64_t **)v17;
              }
            }
            else
            {
              BOOL v26 = (uint64_t **)v17;
              uint64_t v27 = (uint64_t **)v17;
              if (v21)
              {
                uint32_t v32 = (uint64_t *)*v17;
                uint64_t v27 = (uint64_t **)v17;
                while (1)
                {
                  while (1)
                  {
                    BOOL v26 = (uint64_t **)v32;
                    unsigned int v33 = *((_DWORD *)v32 + 7);
                    if (v25 >= v33) {
                      break;
                    }
                    uint32_t v32 = *v26;
                    uint64_t v27 = v26;
                    if (!*v26) {
                      goto LABEL_30;
                    }
                  }
                  if (v33 >= v25) {
                    break;
                  }
                  uint64_t v27 = v26 + 1;
                  uint32_t v32 = v26[1];
                  if (!v32) {
                    goto LABEL_30;
                  }
                }
              }
            }
            if (!*v27)
            {
LABEL_30:
              os_log_t v28 = (char *)operator new(0x28uLL);
              uint64_t v29 = *(void *)v20;
              *((_DWORD *)v28 + 9) = *((_DWORD *)v19 + 9);
              *(void *)(v28 + 28) = v29;
              sub_46CA8((uint64_t **)v18, (uint64_t)v26, v27, (uint64_t *)v28);
            }
            char v30 = (void *)v19[1];
            if (v30)
            {
              do
              {
                int v31 = v30;
                char v30 = (void *)*v30;
              }
              while (v30);
            }
            else
            {
              do
              {
                int v31 = (void *)v19[2];
                BOOL v10 = *v31 == (void)v19;
                char v19 = v31;
              }
              while (!v10);
            }
            char v19 = v31;
          }
          while (v31 != v5 + 15);
        }
        *((void *)v59 + 18) = 0;
        *((void *)v59 + 19) = 0;
        os_log_t v34 = (uint64_t **)(v59 + 144);
        *((void *)v59 + 17) = v59 + 144;
        int v35 = (void *)v5[17];
        if (v35 != v5 + 18)
        {
          do
          {
            uint64_t v36 = (unsigned int *)v35 + 7;
            char v37 = *v34;
            uint64_t v38 = v59 + 144;
            if (*((char **)v59 + 17) == v59 + 144) {
              goto LABEL_53;
            }
            char v39 = *v34;
            __int16 v40 = v59 + 144;
            if (v37)
            {
              do
              {
                uint64_t v38 = (char *)v39;
                char v39 = (uint64_t *)v39[1];
              }
              while (v39);
            }
            else
            {
              do
              {
                uint64_t v38 = (char *)*((void *)v40 + 2);
                BOOL v10 = *(void *)v38 == (void)v40;
                __int16 v40 = v38;
              }
              while (v10);
            }
            unsigned int v41 = *v36;
            if (*((_DWORD *)v38 + 7) < *v36)
            {
LABEL_53:
              if (v37) {
                __int16 v42 = (uint64_t **)v38;
              }
              else {
                __int16 v42 = (uint64_t **)(v59 + 144);
              }
              if (v37) {
                int v43 = (uint64_t **)(v38 + 8);
              }
              else {
                int v43 = (uint64_t **)(v59 + 144);
              }
            }
            else
            {
              __int16 v42 = (uint64_t **)(v59 + 144);
              int v43 = (uint64_t **)(v59 + 144);
              if (v37)
              {
                uint64_t v48 = *v34;
                int v43 = (uint64_t **)(v59 + 144);
                while (1)
                {
                  while (1)
                  {
                    __int16 v42 = (uint64_t **)v48;
                    unsigned int v49 = *((_DWORD *)v48 + 7);
                    if (v41 >= v49) {
                      break;
                    }
                    uint64_t v48 = *v42;
                    int v43 = v42;
                    if (!*v42) {
                      goto LABEL_60;
                    }
                  }
                  if (v49 >= v41) {
                    break;
                  }
                  int v43 = v42 + 1;
                  uint64_t v48 = v42[1];
                  if (!v48) {
                    goto LABEL_60;
                  }
                }
              }
            }
            if (!*v43)
            {
LABEL_60:
              __int16 v44 = (char *)operator new(0x28uLL);
              uint64_t v45 = *(void *)v36;
              *((_DWORD *)v44 + 9) = *((_DWORD *)v35 + 9);
              *(void *)(v44 + 28) = v45;
              sub_46CA8((uint64_t **)v59 + 17, (uint64_t)v42, v43, (uint64_t *)v44);
            }
            uint64_t v46 = (void *)v35[1];
            if (v46)
            {
              do
              {
                uint64_t v47 = v46;
                uint64_t v46 = (void *)*v46;
              }
              while (v46);
            }
            else
            {
              do
              {
                uint64_t v47 = (void *)v35[2];
                BOOL v10 = *v47 == (void)v35;
                int v35 = v47;
              }
              while (!v10);
            }
            int v35 = v47;
          }
          while (v47 != v5 + 18);
        }
        uint64_t v50 = v5[20];
        v59[168] = *((unsigned char *)v5 + 168);
        *((void *)v59 + 20) = v50;
        char v61 = 1;
        uint64_t v2 = (uint64_t ***)a1;
        sub_46CA8((uint64_t **)a1, v58, v13, (uint64_t *)v59);
        v60[0] = 0;
        sub_FE0B4((uint64_t)v60);
        uint64_t v3 = v57;
        uint64_t v4 = v55;
      }
      uint64_t v51 = (void *)v5[1];
      if (v51)
      {
        do
        {
          uint64_t v52 = v51;
          uint64_t v51 = (void *)*v51;
        }
        while (v51);
      }
      else
      {
        do
        {
          uint64_t v52 = (void *)v5[2];
          BOOL v10 = *v52 == (void)v5;
          uint64_t v5 = v52;
        }
        while (!v10);
      }
      uint64_t v5 = v52;
    }
    while (v52 != v4);
  }
  return v2;
}

void sub_FE044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_FE0B4((uint64_t)va);
  sub_FD694(*a5);
  _Unwind_Resume(a1);
}

void sub_FE0B4(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_FD8E8((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void **sub_FE10C(void **a1)
{
  return a1;
}

void sub_FE148(void *a1)
{
  if (a1)
  {
    sub_FE148(*a1);
    sub_FE148(a1[1]);
    sub_FE1AC((void *)a1[13]);
    uint64_t v2 = (void *)a1[9];
    a1[9] = 0;
    if (v2) {
      free(v2);
    }
    operator delete(a1);
  }
}

void sub_FE1AC(void *a1)
{
  if (a1)
  {
    sub_FE1AC(*a1);
    sub_FE1AC(a1[1]);
    sub_FE200((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_FE200(uint64_t a1)
{
  sub_463E0(*(void **)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
}

void sub_FE260(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 40;
        sub_3840C4((uint64_t)(v4 - 24));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_FE2E8(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    while (v3 != a1)
    {
      int v6 = (uint64_t *)v3[1];
      uint64_t v5 = v3[2];
      v3[2] = 0;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      operator delete(v3);
      uint64_t v3 = v6;
    }
  }
}

std::string *sub_FE37C(uint64_t a1)
{
  if (!*(unsigned char *)(sub_6C174(a1) + 4)) {
    *(unsigned char *)(a1 + 4) = 1;
  }
  *(_DWORD *)a1 = 1953460273;
  if (!*(unsigned char *)(a1 + 12)) {
    *(unsigned char *)(a1 + 12) = 1;
  }
  *(_DWORD *)(a1 + 8) = 2;
  if (!*(unsigned char *)(a1 + 20)) {
    *(unsigned char *)(a1 + 20) = 1;
  }
  *(_DWORD *)(a1 + 16) = 5;
  LODWORD(__p[0]) = 1;
  sub_8732C((char *)(a1 + 24), (char *)__p, (uint64_t)__p + 4, 1uLL);
  __p[0] = (void *)0x400000003;
  sub_8732C((char *)(a1 + 48), (char *)__p, (uint64_t)&__p[1], 2uLL);
  *(_DWORD *)(a1 + 72) = 16843009;
  *(_WORD *)(a1 + 78) = 257;
  *(_WORD *)(a1 + 84) = 257;
  *(_WORD *)(a1 + 88) = 256;
  *(_DWORD *)(a1 + 304) = -1047527424;
  *(unsigned char *)(a1 + 308) = 1;
  *(_DWORD *)(a1 + 340) = 1103101952;
  *(unsigned char *)(a1 + 344) = 1;
  *(_DWORD *)(a1 + 364) = 0;
  *(unsigned char *)(a1 + 368) = 1;
  *(_DWORD *)(a1 + 372) = 0;
  *(unsigned char *)(a1 + 376) = 1;
  *(_DWORD *)(a1 + 356) = 0;
  *(unsigned char *)(a1 + 360) = 1;
  *(_DWORD *)(a1 + 420) = 1090519040;
  *(unsigned char *)(a1 + 424) = 1;
  *(_DWORD *)(a1 + 380) = -1040187392;
  *(unsigned char *)(a1 + 384) = 1;
  *(_WORD *)(a1 + 430) = 257;
  *(_DWORD *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 316) = 1;
  *(_WORD *)(a1 + 320) = 257;
  *(_WORD *)(a1 + 428) = 257;
  if (!*(unsigned char *)(a1 + 692)) {
    *(unsigned char *)(a1 + 692) = 1;
  }
  *(_DWORD *)(a1 + 688) = 1836282987;
  if (!*(unsigned char *)(a1 + 700)) {
    *(unsigned char *)(a1 + 700) = 1;
  }
  *(_DWORD *)(a1 + 696) = 2;
  if (!*(unsigned char *)(a1 + 708)) {
    *(unsigned char *)(a1 + 708) = 1;
  }
  *(_DWORD *)(a1 + 704) = 8;
  if (!*(unsigned char *)(a1 + 716)) {
    *(unsigned char *)(a1 + 716) = 1;
  }
  *(_DWORD *)(a1 + 712) = 8;
  *(_DWORD *)(a1 + 728) = 36;
  *(unsigned char *)(a1 + 732) = 1;
  *(_DWORD *)(a1 + 736) = 36;
  *(unsigned char *)(a1 + 740) = 1;
  *(_DWORD *)(a1 + 744) = 36;
  *(unsigned char *)(a1 + 748) = 1;
  *(_DWORD *)(a1 + 768) = 36;
  *(unsigned char *)(a1 + 772) = 1;
  *(_DWORD *)(a1 + 836) = 40;
  *(unsigned char *)(a1 + 840) = 1;
  *(_DWORD *)(a1 + 844) = 3;
  *(unsigned char *)(a1 + 848) = 1;
  *(_DWORD *)(a1 + 852) = 25;
  *(unsigned char *)(a1 + 856) = 1;
  *(_DWORD *)(a1 + 860) = 40;
  *(unsigned char *)(a1 + 864) = 1;
  *(_DWORD *)(a1 + 912) = 13;
  *(unsigned char *)(a1 + 916) = 1;
  *(_DWORD *)(a1 + 920) = 40;
  *(unsigned char *)(a1 + 924) = 1;
  *(_DWORD *)(a1 + 928) = 23;
  *(unsigned char *)(a1 + 932) = 1;
  *(_DWORD *)(a1 + 936) = 7;
  *(unsigned char *)(a1 + 940) = 1;
  *(_WORD *)(a1 + 868) = 257;
  sub_208140(__p, 87);
  sub_FE638(a1 + 960, (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  sub_87428((std::string *)(a1 + 992), "_top_mic_general");
  sub_87428((std::string *)(a1 + 1024), "_top_mic_measurement");
  return sub_87428((std::string *)(a1 + 1056), "_top_mic_hearing_accessibility");
}

void sub_FE618(_Unwind_Exception *a1)
{
  sub_6C63C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FE638(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_FE6B4()
{
  sub_FE37C((uint64_t)v0);
  sub_402E04(v0);
  sub_6C690((uint64_t)&v6);
  sub_463E0(v5);
  if (__p)
  {
    long long v4 = __p;
    operator delete(__p);
  }
  if (v1)
  {
    uint64_t v2 = v1;
    operator delete(v1);
  }
}

void sub_FE71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_6C63C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_FE730()
{
  return 0;
}

uint64_t sub_FE738()
{
  return 0;
}

uint64_t sub_FE748(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
}

void sub_FE788(void *a1)
{
}

uint64_t sub_FE7BC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
}

void sub_FE7FC(void *a1)
{
}

uint64_t sub_FE830(uint64_t a1)
{
  return 0;
}

void sub_FE874(void *a1)
{
}

uint64_t sub_FE8A8(uint64_t a1)
{
  return 0;
}

void sub_FE8EC(void *a1)
{
}

uint64_t sub_FE920(uint64_t a1)
{
  *(void *)a1 = off_621808;
  sub_54618();
  long long v16 = &qword_65D7F8;
  char v17 = (*(uint64_t (**)(void))(qword_65D7F8 + 16))();
  uint64_t v13 = &v13;
  uint64_t v14 = &v13;
  uint64_t v15 = 0;
  uint64_t v2 = (uint64_t *)qword_65D7E8;
  if ((uint64_t *)qword_65D7E8 != &qword_65D7E0)
  {
    uint64_t v3 = 0;
    long long v4 = &v13;
    do
    {
      uint64_t v5 = v2[2];
      if (*(void *)(v5 + 16) == a1)
      {
        uint64_t v6 = operator new(0x18uLL);
        v6[1] = &v13;
        void v6[2] = v5;
        *uint64_t v6 = v4;
        v4[1] = v6;
        ++v3;
        long long v4 = v6;
        uint64_t v13 = v6;
        uint64_t v15 = v3;
      }
      uint64_t v2 = (uint64_t *)v2[1];
    }
    while (v2 != &qword_65D7E0);
    for (uint64_t i = v14; i != &v13; uint64_t i = (void *)i[1])
      sub_39BB8C(i[2]);
  }
  sub_45F50(&v13);
  sub_3BCAC(&v16);
  BOOL v8 = *(void **)(a1 + 56);
  if (v8)
  {
    do
    {
      long long v9 = (void *)*v8;
      BOOL v10 = (std::__shared_weak_count *)v8[5];
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      operator delete(v8);
      BOOL v8 = v9;
    }
    while (v9);
  }
  unsigned int v11 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v11) {
    operator delete(v11);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_FEA98(void *a1)
{
}

uint64_t sub_FEAC0(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = 0;
  sub_54618();
  *(void *)int buf = &qword_65D7F8;
  uint8_t buf[8] = (*(uint64_t (**)(void))(qword_65D7F8 + 16))();
  sub_39B8D8((uint64_t *)&__p, a1, a2, a3, a4);
  long long v9 = __p;
  if (__p)
  {
    uint64_t v10 = *(void *)__p;
    uint64_t v25 = *(void *)__p;
    int v4 = *((_DWORD *)__p + 2) + 1;
    *((_DWORD *)__p + 2) = v4;
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (v23) {
    sub_4636C(v23);
  }
  if (!v9)
  {
    uint64_t v25 = qword_65D850;
    if (__CFADD__(qword_65D850++, 1)) {
      qword_65D850 = 1;
    }
    operator new();
  }
  sub_3BCAC(buf);
  if (v10)
  {
    if (v4 == 1
      && ((*(uint64_t (**)(uint64_t, _DWORD *, void, uint64_t))(*(void *)a1 + 64))(a1, a2, sub_3E9C, v10) & 1) == 0)
    {
      long long v16 = (os_log_t *)sub_32A48(14);
      char v17 = *v16;
      if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)a2;
        int v21 = a2[2];
        sub_16C9C4((uint64_t)&__p, (unsigned int *)&v20);
        if (v24 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = (void **)__p;
        }
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "Object.cpp";
        __int16 v27 = 1024;
        int v28 = 94;
        __int16 v29 = 2080;
        char v30 = p_p;
        _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d Error registering relayed listener for property \"%s\"", buf, 0x1Cu);
        if (v24 < 0) {
          operator delete(__p);
        }
      }
      sub_54618();
      sub_39BA5C(a1, a2, a3, a4, &v25);
      return 2003329396;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v13 = (os_log_t *)sub_32A48(14);
    uint64_t v12 = 2003329396;
    uint64_t v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)a2;
      int v21 = a2[2];
      sub_16C9C4((uint64_t)&__p, (unsigned int *)&v20);
      uint64_t v15 = v24 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "Object.cpp";
      __int16 v27 = 1024;
      int v28 = 83;
      __int16 v29 = 2080;
      char v30 = v15;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Error adding ListenerRelay for property \"%s\"", buf, 0x1Cu);
      if (v24 < 0) {
        operator delete(__p);
      }
    }
  }
  return v12;
}

void sub_FEEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_4636C(v7);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_FEEF8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = 0;
  sub_54618();
  uint64_t v8 = sub_39BA5C(a1, a2, a3, a4, &v18);
  if ((v8 & 0xFF00000000) != 0)
  {
    if (v8
      || (*(unsigned int (**)(uint64_t, _DWORD *, void, uint64_t))(*(void *)a1 + 72))(a1, a2, sub_3E9C, v18))
    {
      return 0;
    }
    else
    {
      return 2003329396;
    }
  }
  else
  {
    uint64_t v9 = 2003329396;
    uint64_t v10 = (os_log_t *)sub_32A48(14);
    unsigned int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)a2;
      int v15 = a2[2];
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v14);
      uint64_t v12 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v20 = "Object.cpp";
      __int16 v21 = 1024;
      int v22 = 118;
      __int16 v23 = 2080;
      char v24 = v12;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Could not find listener relay for property \"%s\", or its ref count was already zero.", buf, 0x1Cu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return v9;
}

void sub_FF0AC(void *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (uint64_t *)(a2 + 40);
  int8x8_t v10 = *(int8x8_t *)(a2 + 48);
  if (!*(void *)&v10) {
    goto LABEL_19;
  }
  int v11 = *a3;
  int v12 = a3[1];
  int v13 = a3[2];
  unint64_t v14 = v12 ^ *a3 ^ v13;
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v10);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v16 = v12 ^ v11 ^ v13;
    if (*(void *)&v10 <= v14) {
      unint64_t v16 = v14 % *(void *)&v10;
    }
  }
  else
  {
    unint64_t v16 = (v10.i32[0] - 1) & v14;
  }
  char v17 = *(uint64_t ***)(*v9 + 8 * v16);
  if (!v17) {
    goto LABEL_19;
  }
  uint64_t v18 = *v17;
  if (!v18) {
    goto LABEL_19;
  }
  while (1)
  {
    unint64_t v19 = v18[1];
    if (v19 == v14) {
      break;
    }
    if (v15.u32[0] > 1uLL)
    {
      if (v19 >= *(void *)&v10) {
        v19 %= *(void *)&v10;
      }
    }
    else
    {
      v19 &= *(void *)&v10 - 1;
    }
    if (v19 != v16) {
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v18 = (uint64_t *)*v18;
    if (!v18) {
      goto LABEL_19;
    }
  }
  if (*((_DWORD *)v18 + 5) != v12 || *((_DWORD *)v18 + 4) != v11 || *((_DWORD *)v18 + 6) != v13) {
    goto LABEL_18;
  }
  uint64_t v25 = sub_FF358((uint64_t *)(a2 + 40), a3, (uint64_t)a3);
  BOOL v26 = v25;
  *a1 = 0;
  a1[1] = 0;
  __int16 v27 = (std::__shared_weak_count *)v25[5];
  if (!v27 || (int v28 = std::__shared_weak_count::lock(v27), (a1[1] = v28) == 0))
  {
LABEL_19:
    uint64_t v20 = operator new(0x58uLL);
    v20[1] = 0;
    v20[2] = 0;
    *uint64_t v20 = off_621868;
    sub_4F7D4((uint64_t)v31, a4);
    sub_4F7D4((uint64_t)v30, a5);
    __int16 v21 = v20 + 3;
    sub_FF780((uint64_t)(v20 + 3), (uint64_t)v31);
    sub_FF780((uint64_t)(v20 + 7), (uint64_t)v30);
    uint64_t v22 = v20[6];
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 48))(v22);
    }
    sub_4F750(v30);
    sub_4F750(v31);
    *a1 = v21;
    a1[1] = v20;
    __int16 v23 = sub_FF358(v9, a3, (uint64_t)a3);
    atomic_fetch_add_explicit(v20 + 2, 1uLL, memory_order_relaxed);
    char v24 = (std::__shared_weak_count *)v23[5];
    v23[4] = v21;
    v23[5] = v20;
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    return;
  }
  uint64_t v29 = v26[4];
  *a1 = v29;
  if (!v29)
  {
    sub_4636C(v28);
    goto LABEL_19;
  }
}

void sub_FF300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  sub_4F750(v3);
  sub_4F750(v2);
  sub_4F750((uint64_t *)va);
  sub_4F750((uint64_t *)va1);
  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void *sub_FF358(uint64_t *a1, int *a2, uint64_t a3)
{
  int v6 = *a2;
  int v7 = a2[1];
  unsigned int v8 = a2[2];
  unint64_t v9 = v7 ^ *a2 ^ v8;
  unint64_t v10 = a1[1];
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v7 ^ v6 ^ v8;
      if (v10 <= v9) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    int v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      int v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 5) == v7 && *((_DWORD *)v13 + 4) == v6 && *((_DWORD *)v13 + 6) == v8) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          int v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint8x8_t v15 = a1 + 2;
  int v13 = operator new(0x30uLL);
  *int v13 = 0;
  v13[1] = v9;
  v13[2] = *(void *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  void v13[4] = 0;
  v13[5] = 0;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (v10 && (float)(v17 * (float)v10) >= v16)
  {
    unint64_t v9 = v3;
    goto LABEL_66;
  }
  BOOL v18 = 1;
  if (v10 >= 3) {
    BOOL v18 = (v10 & (v10 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v10);
  unint64_t v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20) {
    int8x8_t prime = (int8x8_t)v20;
  }
  else {
    int8x8_t prime = (int8x8_t)v19;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v10 = a1[1];
  }
  if (*(void *)&prime <= v10)
  {
    if (*(void *)&prime >= v10) {
      goto LABEL_62;
    }
    unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v10 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      unint64_t v28 = std::__next_prime(v28);
    }
    else
    {
      uint64_t v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2) {
        unint64_t v28 = v30;
      }
    }
    if (*(void *)&prime <= v28) {
      int8x8_t prime = (int8x8_t)v28;
    }
    if (*(void *)&prime >= v10)
    {
      unint64_t v10 = a1[1];
      goto LABEL_62;
    }
    if (!*(void *)&prime)
    {
      char v37 = (void *)*a1;
      *a1 = 0;
      if (v37) {
        operator delete(v37);
      }
      unint64_t v10 = 0;
      a1[1] = 0;
      goto LABEL_62;
    }
  }
  if (*(void *)&prime >> 61) {
    sub_60560();
  }
  uint64_t v22 = operator new(8 * *(void *)&prime);
  __int16 v23 = (void *)*a1;
  *a1 = (uint64_t)v22;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v24++) = 0;
  while (*(void *)&prime != v24);
  uint64_t v25 = (void *)*v15;
  if (*v15)
  {
    unint64_t v26 = v25[1];
    uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(void *)&prime) {
        v26 %= *(void *)&prime;
      }
    }
    else
    {
      v26 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v26) = v15;
    int v31 = (void *)*v25;
    if (*v25)
    {
      do
      {
        unint64_t v32 = v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(void *)&prime) {
            v32 %= *(void *)&prime;
          }
        }
        else
        {
          v32 &= *(void *)&prime - 1;
        }
        if (v32 != v26)
        {
          if (!*(void *)(*a1 + 8 * v32))
          {
            *(void *)(*a1 + 8 * v32) = v25;
            goto LABEL_58;
          }
          *uint64_t v25 = *v31;
          void *v31 = **(void **)(*a1 + 8 * v32);
          **(void **)(*a1 + 8 * v32) = v31;
          int v31 = v25;
        }
        unint64_t v32 = v26;
LABEL_58:
        uint64_t v25 = v31;
        int v31 = (void *)*v31;
        unint64_t v26 = v32;
      }
      while (v31);
    }
  }
  unint64_t v10 = (unint64_t)prime;
LABEL_62:
  if ((v10 & (v10 - 1)) != 0)
  {
    if (v10 <= v9) {
      v9 %= v10;
    }
  }
  else
  {
    unint64_t v9 = (v10 - 1) & v9;
  }
LABEL_66:
  uint64_t v33 = *a1;
  os_log_t v34 = *(void **)(*a1 + 8 * v9);
  if (v34)
  {
    *int v13 = *v34;
LABEL_74:
    *os_log_t v34 = v13;
    goto LABEL_75;
  }
  *int v13 = *v15;
  void *v15 = v13;
  *(void *)(v33 + 8 * v9) = v15;
  if (*v13)
  {
    unint64_t v35 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v35 >= v10) {
        v35 %= v10;
      }
    }
    else
    {
      v35 &= v10 - 1;
    }
    os_log_t v34 = (void *)(*a1 + 8 * v35);
    goto LABEL_74;
  }
LABEL_75:
  ++a1[3];
  return v13;
}

void sub_FF768(_Unwind_Exception *a1)
{
  sub_FF8E8(1, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_FF780(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_FF804(void *a1)
{
  uint64_t v2 = a1[10];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  sub_4F750(a1 + 7);

  return sub_4F750(a1 + 3);
}

void sub_FF874(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_621868;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_FF8C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_621868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_FF8E8(char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_FF944(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_32A48(23);
  if (*(unsigned char *)(v4 + 8))
  {
    uint64_t v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        sub_2417C(&v22, a2);
        int v6 = v24;
        int v7 = (void **)v22;
        sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
        unsigned int v8 = &v22;
        if (v6 < 0) {
          unsigned int v8 = v7;
        }
        if (v21 >= 0) {
          unint64_t v9 = __p;
        }
        else {
          unint64_t v9 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136316162;
        unint64_t v26 = "Port.cpp";
        __int16 v27 = 1024;
        int v28 = 460;
        __int16 v29 = 1024;
        int v30 = a2;
        __int16 v31 = 2080;
        unint64_t v32 = v8;
        __int16 v33 = 2080;
        os_log_t v34 = v9;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting sub-port %u (%s) active on port %s.", buf, 0x2Cu);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
        if (v24 < 0) {
          operator delete(v22);
        }
      }
    }
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 464))(&v22, a1, a2);
  unint64_t v10 = v22;
  if (v22 == v23)
  {
    uint8x8_t v11 = (os_log_t *)sub_32A48(13);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      int v13 = v21;
      unint64_t v14 = (void **)__p[0];
      sub_4F64((uint64_t)v18, (os_unfair_lock_t)(a1 + 8));
      uint8x8_t v15 = __p;
      if (v13 < 0) {
        uint8x8_t v15 = v14;
      }
      if (v19 >= 0) {
        float v16 = v18;
      }
      else {
        float v16 = (void **)v18[0];
      }
      *(_DWORD *)int buf = 136316162;
      unint64_t v26 = "Port.cpp";
      __int16 v27 = 1024;
      int v28 = 462;
      __int16 v29 = 1024;
      int v30 = a2;
      __int16 v31 = 2080;
      unint64_t v32 = v15;
      __int16 v33 = 2080;
      os_log_t v34 = v16;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Could not find a match for sub-port %u (%s) active on port %s.\"", buf, 0x2Cu);
      if (v19 < 0) {
        operator delete(v18[0]);
      }
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Could not find a match for sub-port %u (%s) active on port %s.");
  }
  *(_DWORD *)(a1 + 120) = a2;
  *(unsigned char *)(a1 + 124) = 1;
  if (v10)
  {
    __int16 v23 = v10;
    operator delete(v10);
  }
}

void sub_FFC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_FFC84()
{
  return 1;
}

void sub_FFC8C()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "Port.cpp";
      __int16 v5 = 1024;
      int v6 = 498;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Cannot set routable state if CanSetRoutable() returns false.\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Cannot set routable state if CanSetRoutable() returns false.");
}

void sub_FFD58(_Unwind_Exception *exception_object)
{
}

void sub_FFD74(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v6 = sub_32A48(23);
  if (*(unsigned char *)(v6 + 8))
  {
    int v7 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_DEBUG))
      {
        sub_4F64((uint64_t)&v29, (os_unfair_lock_t)(a1 + 8));
        int v8 = SHIBYTE(v29.__r_.__value_.__r.__words[2]);
        std::string::size_type v9 = v29.__r_.__value_.__r.__words[0];
        sub_2417C(__p, a2);
        unint64_t v10 = &v29;
        if (v8 < 0) {
          unint64_t v10 = (std::string *)v9;
        }
        if (v28 >= 0) {
          uint8x8_t v11 = __p;
        }
        else {
          uint8x8_t v11 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136316162;
        *(void *)&uint8_t buf[4] = "Port.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 784;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v10;
        __int16 v31 = 1024;
        unsigned int v32 = a2;
        __int16 v33 = 2080;
        os_log_t v34 = v11;
        _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Port: %s; ID: %u (%s)", buf, 0x2Cu);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v13 = *(uint64_t **)(a1 + 96);
  int v12 = *(uint64_t **)(a1 + 104);
  if (v13 == v12)
  {
LABEL_32:
    __int16 v23 = (os_log_t *)sub_32A48(13);
    char v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(&v29, a2);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v29;
      }
      else {
        uint64_t v25 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 797;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v25;
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"No match found for internal sub-port ID: %s\"", buf, 0x1Cu);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "No match found for internal sub-port ID: %s");
  }
  unint64_t v14 = 0;
  char v15 = 0;
  while (1)
  {
    uint64_t v16 = *v13;
    float v17 = (std::__shared_weak_count *)v13[1];
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_457544(buf, *(void *)(v16 + 32), *(void *)(v16 + 40), a2);
    if (v14)
    {
      operator delete(v14);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    unint64_t v14 = *(unsigned int **)buf;
    *a3 = *(void *)buf;
    BOOL v18 = *(unsigned int **)&buf[8];
    *(_OWORD *)(a3 + 1) = *(_OWORD *)&buf[8];
    char v19 = v18;
    if (v14 != v18)
    {
      uint64_t v20 = sub_32A48(23);
      if (*(unsigned char *)(v20 + 8))
      {
        char v21 = *(NSObject **)v20;
        if (*(void *)v20)
        {
          if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
          {
            sub_1001A8(&v29, v14, v19);
            uint64_t v22 = &v29;
            if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v22 = (std::string *)v29.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "Port.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 792;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v22;
            _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Returning %s", buf, 0x1Cu);
            if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v29.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      char v15 = 1;
    }
    if (v17) {
      sub_4636C(v17);
    }
    if (v14 != v19) {
      break;
    }
    v13 += 2;
    if (v13 == v12) {
      goto LABEL_32;
    }
  }
  if (!(v15 & 1 | (v14 == 0)))
  {
    a3[1] = v14;
    operator delete(v14);
  }
}

void sub_10013C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1001A8(std::string *a1, unsigned int *a2, unsigned int *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_2417C(&v13, *a2);
      uint64_t v6 = std::string::insert(&v13, 0, "'", 1uLL);
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      int v8 = std::string::append(&v14, "'", 1uLL);
      long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      int64_t v16 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (v16 >= 0) {
        unint64_t v10 = __p;
      }
      else {
        unint64_t v10 = (void **)__p[0];
      }
      if (v16 >= 0) {
        std::string::size_type v11 = HIBYTE(v16);
      }
      else {
        std::string::size_type v11 = (std::string::size_type)__p[1];
      }
      std::string::append(a1, (const std::string::value_type *)v10, v11);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      if (++a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_100300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036C()
{
  return 1;
}

uint64_t sub_100374()
{
  return 0xFFFFFFFFLL;
}

CFMutableDictionaryRef sub_10037C@<X0>(uint64_t a1@<X8>)
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = 257;
  return result;
}

uint64_t sub_1003C4()
{
  return 0;
}

void sub_1003CC()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "Port.cpp";
      __int16 v5 = 1024;
      int v6 = 770;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"not implemented\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "not implemented");
}

void sub_100498(_Unwind_Exception *exception_object)
{
}

void sub_1004B4()
{
  uint64_t v0 = (os_log_t *)sub_32A48(13);
  uint64_t v1 = *v0;
  if (*v0)
  {
    if (os_log_type_enabled(*v0, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "Port.cpp";
      __int16 v5 = 1024;
      int v6 = 765;
      _os_log_impl(&def_1E50E8, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"not implemented\"", (uint8_t *)&v3, 0x12u);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "not implemented");
}

void sub_100580(_Unwind_Exception *exception_object)
{
}

void sub_10059C(void *a1@<X8>)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
}

char *sub_1005A8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[431] < 0) {
    return (char *)sub_21E8C((unsigned char *)a2, *((void **)result + 51), *((void *)result + 52));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 408);
  *(void *)(a2 + 16) = *((void *)result + 53);
  return result;
}

void sub_1005D4(os_unfair_lock_s *a1)
{
  uint64_t v2 = (os_log_t *)sub_32A48(13);
  int v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
  {
    sub_4F64((uint64_t)__p, a1 + 2);
    if (v7 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315650;
    long long v9 = "Port.cpp";
    __int16 v10 = 1024;
    int v11 = 624;
    __int16 v12 = 2080;
    std::string v13 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Port: %s does not have sub-ports with Polar patterns\"", buf, 0x1Cu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Port: %s does not have sub-ports with Polar patterns");
}

void sub_1006E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1006FC(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(int ***)(a1 + 96);
  __int16 v5 = *(int ***)(a1 + 104);
  if (v4 == v5)
  {
    float v17 = (os_log_t *)sub_32A48(13);
    BOOL v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      unsigned int v32 = "Port.cpp";
      __int16 v33 = 1024;
      int v34 = 614;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  do
  {
    long long v9 = *v4;
    int v8 = (std::__shared_weak_count *)v4[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      int v10 = *v9;
      sub_4636C(v8);
      if (v10 == a2) {
        goto LABEL_8;
      }
    }
    else if (*v9 == a2)
    {
      goto LABEL_8;
    }
    v4 += 2;
  }
  while (v4 != v5);
  uint64_t v4 = v5;
LABEL_8:
  if (v4 == *(int ***)(a1 + 104))
  {
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    char v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, a2);
      int v22 = v30;
      __int16 v23 = (void **)__p[0];
      sub_2417C(v27, *(_DWORD *)(a1 + 144));
      char v24 = __p;
      if (v22 < 0) {
        char v24 = v23;
      }
      if (v28 >= 0) {
        uint64_t v25 = v27;
      }
      else {
        uint64_t v25 = (void **)v27[0];
      }
      *(_DWORD *)int buf = 136315906;
      unsigned int v32 = "Port.cpp";
      __int16 v33 = 1024;
      int v34 = 616;
      __int16 v35 = 2080;
      uint64_t v36 = v24;
      __int16 v37 = 2080;
      uint64_t v38 = v25;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to get name for unknown sub-port (%s) type on port with type %s.\"", buf, 0x26u);
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v30 < 0) {
        operator delete(__p[0]);
      }
    }
    unint64_t v26 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v26, "Attempt to get name for unknown sub-port (%s) type on port with type %s.");
  }
  int v11 = *v4;
  CFStringRef v12 = (const __CFString *)*((void *)*v4 + 7);
  *(void *)a3 = v12;
  LODWORD(v11) = *((unsigned __int8 *)v11 + 64);
  *(unsigned char *)(a3 + 8) = (_BYTE)v11;
  if (v11) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    CFRetain(v12);
    goto LABEL_15;
  }
  if (v12)
  {
LABEL_15:
    if (CFStringGetLength(v12)) {
      return;
    }
  }
  std::string v14 = (os_log_t *)sub_32A48(23);
  char v15 = *v14;
  if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
  {
    sub_2417C(__p, a2);
    if (v30 >= 0) {
      int64_t v16 = __p;
    }
    else {
      int64_t v16 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315650;
    unsigned int v32 = "Port.cpp";
    __int16 v33 = 1024;
    int v34 = 618;
    __int16 v35 = 2080;
    uint64_t v36 = v16;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Returning empty string for sub-port name.  Sub-port ID:%s", buf, 0x1Cu);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100AC4(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(int ***)(a1 + 96);
  __int16 v5 = *(int ***)(a1 + 104);
  if (v4 == v5) {
    goto LABEL_10;
  }
  do
  {
    char v7 = *v4;
    int v6 = (std::__shared_weak_count *)v4[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      int v8 = *v7;
      sub_4636C(v6);
      if (v8 == a2) {
        goto LABEL_8;
      }
    }
    else if (*v7 == a2)
    {
      goto LABEL_8;
    }
    v4 += 2;
  }
  while (v4 != v5);
  uint64_t v4 = v5;
LABEL_8:
  if (v4 == *(int ***)(a1 + 104))
  {
LABEL_10:
    int v10 = (os_log_t *)sub_32A48(13);
    int v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v19, a2);
      int v12 = v20;
      BOOL v13 = (void **)v19[0];
      sub_2417C(__p, *(_DWORD *)(a1 + 144));
      std::string v14 = v19;
      if (v12 < 0) {
        std::string v14 = v13;
      }
      if (v18 >= 0) {
        char v15 = __p;
      }
      else {
        char v15 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315906;
      int v22 = "Port.cpp";
      __int16 v23 = 1024;
      int v24 = 608;
      __int16 v25 = 2080;
      unint64_t v26 = v14;
      __int16 v27 = 2080;
      char v28 = v15;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to get type for unknown sub-port (%s) type on port with type %s.\"", buf, 0x26u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to get type for unknown sub-port (%s) type on port with type %s.");
  }
  return (*v4)[1];
}

void sub_100CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100CE0(uint64_t result)
{
  if (*(unsigned char *)(result + 132)) {
    *(unsigned char *)(result + 132) = 0;
  }
  return result;
}

void sub_100CF0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 224))(a1);
  if (*(unsigned char *)(a4 + 4) && !sub_1013AC(a1, a3))
  {
    char v39 = (os_log_t *)sub_32A48(13);
    __int16 v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      sub_4F64((uint64_t)&__p, (os_unfair_lock_t)(a1 + 8));
      unsigned int v41 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 577;
      __int16 v52 = 2080;
      unsigned int v53 = v41;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempting to set a polar pattern on a port (%s) that does not support polar patterns.\"", buf, 0x1Cu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to set a polar pattern on a port (%s) that does not support polar patterns.");
  }
  long long v9 = (os_log_t *)sub_32A48(23);
  int v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_DEBUG))
  {
    sub_4F64((uint64_t)&__p, (os_unfair_lock_t)(a1 + 8));
    int v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "Port.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 579;
    __int16 v52 = 2080;
    unsigned int v53 = v11;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Setting preferred sub-port on port %s", buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  BOOL v13 = *(uint64_t **)(a1 + 96);
  int v12 = *(uint64_t **)(a1 + 104);
  if (v13 == v12) {
    goto LABEL_48;
  }
  do
  {
    char v15 = (int *)*v13;
    std::string v14 = (std::__shared_weak_count *)v13[1];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      int v16 = *v15;
      sub_4636C(v14);
      if (v16 == a3) {
        goto LABEL_17;
      }
    }
    else if (*v15 == a3)
    {
      goto LABEL_17;
    }
    v13 += 2;
  }
  while (v13 != v12);
  BOOL v13 = v12;
LABEL_17:
  if (v13 == *(uint64_t **)(a1 + 104))
  {
LABEL_48:
    __int16 v31 = (os_log_t *)sub_32A48(13);
    unsigned int v32 = *v31;
    if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
    {
      p_p = &__p;
      sub_2417C(&__p, a3);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      sub_2417C(v48, *(_DWORD *)(a1 + 144));
      int v34 = v49;
      __int16 v35 = (void **)v48[0];
      sub_2417C(v46, a3);
      uint64_t v36 = v48;
      if (v34 < 0) {
        uint64_t v36 = v35;
      }
      if (v47 >= 0) {
        __int16 v37 = v46;
      }
      else {
        __int16 v37 = (void **)v46[0];
      }
      *(_DWORD *)int buf = 136316162;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 586;
      __int16 v52 = 2080;
      unsigned int v53 = p_p;
      __int16 v54 = 2080;
      unint64_t v55 = v36;
      __int16 v56 = 2080;
      uint64_t v57 = v37;
      _os_log_impl(&def_1E50E8, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to set unknown sub-port (%s) preferred on port with type %s. Requested sub-port: %s\"", buf, 0x30u);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v38, "Attempt to set unknown sub-port (%s) preferred on port with type %s. Requested sub-port: %s");
  }
  uint64_t v18 = *v13;
  float v17 = (std::__shared_weak_count *)v13[1];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v19 = *(_DWORD **)(v18 + 32);
  char v20 = *(_DWORD **)(v18 + 40);
  if (v19 != v20)
  {
    char v21 = v19 + 16;
    do
    {
      int v22 = *(v21 - 8);
      BOOL v23 = v22 != 1852796517 || v21 == v20;
      v21 += 16;
    }
    while (!v23);
    if (v22 != 1852796517)
    {
      int v43 = (os_log_t *)sub_32A48(13);
      __int16 v44 = *v43;
      if (*v43 && os_log_type_enabled(*v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "SubPort.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 137;
        _os_log_impl(&def_1E50E8, v44, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      uint64_t v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v45, "Precondition failure.");
    }
  }
  *(_DWORD *)(a1 + 128) = *v19;
  *(unsigned char *)(a1 + 132) = 1;
  if (*(int *)(v18 + 8) >= 2)
  {
    int v24 = (os_log_t *)sub_32A48(23);
    __int16 v25 = *v24;
    if (*v24)
    {
      if (os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
      {
        sub_456B74(&__p, v18);
        unint64_t v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "Port.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 592;
        __int16 v52 = 2080;
        unsigned int v53 = v26;
        _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Client has set a preferred sub-port that does not have client scope: %s", buf, 0x1Cu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 124) && *(unsigned char *)(a1 + 132))
  {
    int v27 = *(_DWORD *)(a1 + 120);
    int v28 = *(_DWORD *)(a1 + 128);
  }
  else
  {
    int v28 = *(unsigned __int8 *)(a1 + 132) != 0;
    int v27 = *(unsigned __int8 *)(a1 + 124) != 0;
  }
  if (v27 != v28)
  {
    std::string v29 = (_DWORD *)sub_10FBF0();
    char v30 = *(std::__shared_weak_count **)(a1 + 88);
    *(void *)int buf = *(void *)(a1 + 80);
    *(void *)&uint8_t buf[8] = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_110788(v29, 0x70707570u, (uint64_t *)buf, a5);
    if (v30) {
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v17) {
    sub_4636C(v17);
  }
}

void sub_101318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1013AC(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(int ***)(a1 + 96);
  __int16 v5 = *(int ***)(a1 + 104);
  if (v4 == v5) {
    goto LABEL_17;
  }
  do
  {
    char v7 = *v4;
    int v6 = (std::__shared_weak_count *)v4[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      int v8 = *v7;
      sub_4636C(v6);
      if (v8 == a2) {
        goto LABEL_8;
      }
    }
    else if (*v7 == a2)
    {
      goto LABEL_8;
    }
    v4 += 2;
  }
  while (v4 != v5);
  uint64_t v4 = v5;
LABEL_8:
  if (v4 == *(int ***)(a1 + 104))
  {
LABEL_17:
    uint64_t v15 = sub_32A48(23);
    if (*(unsigned char *)(v15 + 8))
    {
      int v16 = *(NSObject **)v15;
      if (*(void *)v15)
      {
        BOOL result = os_log_type_enabled(*(os_log_t *)v15, OS_LOG_TYPE_DEBUG);
        if (!result) {
          return result;
        }
        sub_2417C(v23, a2);
        int v17 = v24;
        uint64_t v18 = (void **)v23[0];
        sub_2417C(__p, *(_DWORD *)(a1 + 144));
        char v19 = v23;
        if (v17 < 0) {
          char v19 = v18;
        }
        if (v22 >= 0) {
          char v20 = __p;
        }
        else {
          char v20 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315906;
        unint64_t v26 = "Port.cpp";
        __int16 v27 = 1024;
        int v28 = 654;
        __int16 v29 = 2080;
        char v30 = v19;
        __int16 v31 = 2080;
        unsigned int v32 = v20;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unable to locate unknown sub-port (%s) type on port with type %s.", buf, 0x26u);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        if (v24 < 0) {
          operator delete(v23[0]);
        }
      }
    }
    return 0;
  }
  uint64_t v10 = *((void *)*v4 + 4);
  uint64_t v9 = *((void *)*v4 + 5);
  if (v10 == v9) {
    return 0;
  }
  uint64_t v11 = v10 + 64;
  do
  {
    int v12 = *(_DWORD *)(v11 - 32);
    BOOL result = v12 != 1852796517;
    BOOL v14 = v12 != 1852796517 || v11 == v9;
    v11 += 64;
  }
  while (!v14);
  return result;
}

void sub_101594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015B8()
{
  return 0;
}

uint64_t sub_1015C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 184))();
}

uint64_t sub_1015E4(uint64_t a1)
{
  if (*(void *)(a1 + 96) == *(void *)(a1 + 104))
  {
    char v22 = (os_log_t *)sub_32A48(13);
    BOOL v23 = *v22;
    if (*v22 && os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      char v30 = "Port.cpp";
      __int16 v31 = 1024;
      int v32 = 528;
      _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (!*(unsigned char *)(a1 + 124)) {
    return 0;
  }
  uint64_t v2 = sub_32A48(23);
  if (*(unsigned char *)(v2 + 8))
  {
    int v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        if (!*(unsigned char *)(a1 + 124)) {
          sub_7F218();
        }
        unsigned int v4 = *(_DWORD *)(a1 + 120);
        sub_2417C(__p, v4);
        if (v28 >= 0) {
          __int16 v5 = __p;
        }
        else {
          __int16 v5 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315906;
        char v30 = "Port.cpp";
        __int16 v31 = 1024;
        int v32 = 531;
        __int16 v33 = 1024;
        unsigned int v34 = v4;
        __int16 v35 = 2080;
        uint64_t v36 = v5;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Looking up client visible port ID for %u (%s)", buf, 0x22u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  if (!*(unsigned char *)(a1 + 124)) {
    sub_7F218();
  }
  unsigned int v6 = *(_DWORD *)(a1 + 120);
  char v7 = *(unsigned int ***)(a1 + 96);
  int v8 = *(unsigned int ***)(a1 + 104);
  if (v7 == v8)
  {
LABEL_20:
    uint64_t v11 = (os_log_t *)sub_32A48(23);
    int v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__p, v6);
      int v13 = v28;
      BOOL v14 = (void **)__p[0];
      sub_4F64((uint64_t)v25, (os_unfair_lock_t)(a1 + 8));
      uint64_t v15 = __p;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v26 >= 0) {
        int v16 = v25;
      }
      else {
        int v16 = (void **)v25[0];
      }
      *(_DWORD *)int buf = 136316162;
      char v30 = "Port.cpp";
      __int16 v31 = 1024;
      int v32 = 454;
      __int16 v33 = 1024;
      unsigned int v34 = v6;
      __int16 v35 = 2080;
      uint64_t v36 = v15;
      __int16 v37 = 2080;
      uint64_t v38 = v16;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Could not find match for internal sub-port ID %u (%s) for Port %s", buf, 0x2Cu);
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_31;
  }
  while (1)
  {
    uint64_t v10 = *v7;
    uint64_t v9 = (std::__shared_weak_count *)v7[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    buf[0] = 0;
    LOBYTE(v30) = 0;
    LOBYTE(__p[0]) = 0;
    BYTE4(__p[0]) = 0;
    if (sub_457598((uint64_t)v10, v6, (int *)buf, (int *)__p)) {
      break;
    }
    if (v9) {
      sub_4636C(v9);
    }
    v7 += 2;
    if (v7 == v8) {
      goto LABEL_20;
    }
  }
  if (!v10)
  {
LABEL_31:
    int v17 = (os_log_t *)sub_32A48(13);
    uint64_t v18 = *v17;
    if (*v17)
    {
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        char v30 = "Port.cpp";
        __int16 v31 = 1024;
        int v32 = 533;
        _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
    }
    char v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "Precondition failure.");
  }
  uint64_t v20 = *v10;
  if (v9) {
    sub_4636C(v9);
  }
  return v20 | 0x100000000;
}

void sub_1019FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_101A5C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_101A6C(void *a1, int a2, __int32 **a3, __int32 **a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 != a4)
  {
    __int16 v5 = a3;
    do
    {
      int v8 = *v5;
      uint64_t v9 = *((void *)*v5 + 4);
LABEL_4:
      if (v9 != *((void *)*v5 + 5))
      {
        for (uint64_t i = *(_DWORD **)(v9 + 40); i != *(_DWORD **)(v9 + 48); ++i)
        {
          if (*i == a2)
          {
            v9 += 64;
            goto LABEL_4;
          }
        }
        if (v8[2] <= 0)
        {
          __int32 v11 = *v8;
          sub_72D08((uint64_t)a1, &v11);
        }
      }
      v5 += 2;
    }
    while (v5 != a4);
  }
}

void sub_101B1C(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101B38(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
}

uint64_t sub_101B44(_WORD *a1)
{
  if ((a1[92] & 0x40) != 0)
  {
    int v3 = (os_log_t *)sub_32A48(13);
    unsigned int v4 = *v3;
    if (*v3 && os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      char v7 = "Port.cpp";
      __int16 v8 = 1024;
      int v9 = 407;
      _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Must override if the CanSetRoutable() returns true.\"", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Must override if the CanSetRoutable() returns true.");
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 152);

  return v1();
}

void sub_101C74(_Unwind_Exception *exception_object)
{
}

uint64_t sub_101C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  uint64_t v2 = a1 + 232;
  if (!*(void *)(a1 + 232))
  {
    uint64_t v4 = *(void *)(a1 + 216);
    uint64_t v3 = a1 + 216;
    if (v4) {
      uint64_t v2 = v3;
    }
    else {
      uint64_t v2 = v3 - 16;
    }
  }
  return sub_8B9E0(a2, v2);
}

void sub_101CE0(_Unwind_Exception *a1)
{
  sub_72924(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101CF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  uint64_t v3 = *(void *)(a1 + 232);
  uint64_t v2 = a1 + 232;
  if (v3) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = v2 - 32;
  }
  return sub_8B9E0(a2, v4);
}

void sub_101D38(_Unwind_Exception *a1)
{
  sub_72924(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101D4C(uint64_t a1, uint64_t a2)
{
  sub_8B9E0(a1 + 200, a2);
  sub_8B9E0(a1 + 216, a2 + 16);

  return sub_8B9E0(a1 + 232, a2 + 32);
}

unsigned char *sub_101D9C(uint64_t a1)
{
  uint64_t v12 = a1 + 320;
  char v13 = (*(uint64_t (**)(void))(*(void *)(a1 + 320) + 16))();
  *(unsigned char *)(a1 + 432) = 1;
  sub_FB288(&v10, (void *)(a1 + 272));
  for (uint64_t i = v11; i != &v10; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v3 = i[2];
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 88);
    v9[0] = *(void *)(a1 + 80);
    v9[1] = (uint64_t)v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = v3 + 320;
    LOBYTE(v15) = (*(uint64_t (**)(void))(*(void *)(v3 + 320) + 16))();
    sub_10212C((uint64_t *)(v3 + 272), v9);
    sub_3BCAC(&v14);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  sub_B8E4(&v10);
  sub_8108((uint64_t *)(a1 + 272));
  sub_FB288(&v10, (void *)(a1 + 296));
  for (uint64_t j = v11; j != &v10; uint64_t j = (uint64_t *)j[1])
  {
    uint64_t v6 = j[2];
    char v7 = *(std::__shared_weak_count **)(a1 + 88);
    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v15 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_101F70(v6, &v14);
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_B8E4(&v10);
  sub_8108((uint64_t *)(a1 + 296));
  return sub_3BCAC(&v12);
}

void sub_101F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_101F70(uint64_t a1, uint64_t *a2)
{
  uint64_t v15 = a1 + 320;
  char v16 = (*(uint64_t (**)(void))(*(void *)(a1 + 320) + 16))();
  uint64_t v4 = (os_log_t *)sub_32A48(23);
  __int16 v5 = *v4;
  if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_D98B8(v13, (uint64_t)a2);
    int v6 = v14;
    char v7 = (void **)v13[0];
    sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
    __int16 v8 = v13;
    if (v6 < 0) {
      __int16 v8 = v7;
    }
    if (v12 >= 0) {
      int v9 = __p;
    }
    else {
      int v9 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    uint64_t v18 = "Port.cpp";
    __int16 v19 = 1024;
    int v20 = 727;
    __int16 v21 = 2080;
    char v22 = v8;
    __int16 v23 = 2080;
    char v24 = v9;
    _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d removing partner port %s from %s", buf, 0x26u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  sub_10212C((uint64_t *)(a1 + 296), a2);
  return sub_3BCAC(&v15);
}

void sub_1020FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_3BCAC(&a18);
  _Unwind_Resume(a1);
}

void sub_10212C(uint64_t *a1, uint64_t *a2)
{
  v36[0] = (uint64_t)v36;
  v36[1] = (uint64_t)v36;
  uint64_t v37 = 0;
  uint64_t v2 = (uint64_t *)a1[1];
  if (v2 == a1) {
    goto LABEL_72;
  }
  do
  {
    __int16 v5 = (std::__shared_weak_count *)v2[3];
    if (v5)
    {
      int v6 = std::__shared_weak_count::lock(v5);
      char v7 = v6;
      if (v6)
      {
        uint64_t v8 = v2[2];
        atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v6);
        goto LABEL_7;
      }
    }
    else
    {
      char v7 = 0;
    }
    uint64_t v8 = 0;
LABEL_7:
    int v9 = (std::__shared_weak_count *)a2[1];
    if (v9)
    {
      uint64_t v10 = std::__shared_weak_count::lock(v9);
      __int32 v11 = v10;
      if (v10)
      {
        uint64_t v12 = *a2;
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v10);
        if (!v7) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v12 = 0;
        if (!v7)
        {
LABEL_18:
          uint64_t v14 = 0;
          char v13 = 0;
          if (!v11) {
            goto LABEL_22;
          }
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v12 = 0;
      __int32 v11 = 0;
      if (!v7) {
        goto LABEL_18;
      }
    }
    char v13 = std::__shared_weak_count::lock(v7);
    if (v13) {
      uint64_t v14 = v8;
    }
    else {
      uint64_t v14 = 0;
    }
    if (!v11)
    {
LABEL_22:
      BOOL v16 = v14 == 0;
      if (!v13) {
        goto LABEL_24;
      }
LABEL_23:
      sub_4636C(v13);
      goto LABEL_24;
    }
LABEL_19:
    uint64_t v15 = std::__shared_weak_count::lock(v11);
    if (!v15) {
      goto LABEL_22;
    }
    BOOL v16 = v14 == v12;
    sub_4636C(v15);
    if (v13) {
      goto LABEL_23;
    }
LABEL_24:
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
    int v17 = (uint64_t *)v2[1];
    if (!v16) {
      goto LABEL_71;
    }
    while (1)
    {
      if (v17 == a1)
      {
        char v29 = 1;
        int v17 = a1;
        goto LABEL_60;
      }
      uint64_t v18 = (std::__shared_weak_count *)v17[3];
      if (v18)
      {
        __int16 v19 = std::__shared_weak_count::lock(v18);
        int v20 = v19;
        if (v19)
        {
          uint64_t v21 = v17[2];
          atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v19);
        }
        else
        {
          uint64_t v21 = 0;
        }
      }
      else
      {
        uint64_t v21 = 0;
        int v20 = 0;
      }
      char v22 = (std::__shared_weak_count *)a2[1];
      if (v22)
      {
        __int16 v23 = std::__shared_weak_count::lock(v22);
        char v24 = v23;
        if (v23)
        {
          uint64_t v25 = *a2;
          atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v23);
          if (!v20) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v25 = 0;
          if (!v20)
          {
LABEL_45:
            uint64_t v21 = 0;
            char v26 = 0;
            if (!v24) {
              goto LABEL_49;
            }
            goto LABEL_46;
          }
        }
      }
      else
      {
        uint64_t v25 = 0;
        char v24 = 0;
        if (!v20) {
          goto LABEL_45;
        }
      }
      char v26 = std::__shared_weak_count::lock(v20);
      if (!v26) {
        uint64_t v21 = 0;
      }
      if (!v24)
      {
LABEL_49:
        BOOL v28 = v21 == 0;
        if (!v26) {
          goto LABEL_51;
        }
LABEL_50:
        sub_4636C(v26);
        goto LABEL_51;
      }
LABEL_46:
      __int16 v27 = std::__shared_weak_count::lock(v24);
      if (!v27) {
        goto LABEL_49;
      }
      BOOL v28 = v21 == v25;
      sub_4636C(v27);
      if (v26) {
        goto LABEL_50;
      }
LABEL_51:
      if (v24) {
        std::__shared_weak_count::__release_weak(v24);
      }
      if (!v20) {
        break;
      }
      std::__shared_weak_count::__release_weak(v20);
      if (!v28) {
        goto LABEL_59;
      }
LABEL_57:
      int v17 = (uint64_t *)v17[1];
    }
    if (v28) {
      goto LABEL_57;
    }
LABEL_59:
    char v29 = 0;
LABEL_60:
    if (v2 != v17)
    {
      uint64_t v30 = *v17;
      if (v36 != a1)
      {
        if ((uint64_t *)v30 == v2)
        {
          uint64_t v33 = 1;
        }
        else
        {
          uint64_t v31 = -1;
          int v32 = v2;
          do
          {
            int v32 = (uint64_t *)v32[1];
            ++v31;
          }
          while (v32 != (uint64_t *)v30);
          uint64_t v33 = v31 + 2;
        }
        a1[2] -= v33;
        v37 += v33;
      }
      uint64_t v34 = *v2;
      *(void *)(v34 + 8) = *(void *)(v30 + 8);
      **(void **)(v30 + 8) = v34;
      uint64_t v35 = v36[0];
      *(void *)(v36[0] + 8) = v2;
      uint64_t *v2 = v35;
      v36[0] = v30;
      *(void *)(v30 + 8) = v36;
    }
    if ((v29 & 1) == 0) {
      int v17 = (uint64_t *)v17[1];
    }
LABEL_71:
    uint64_t v2 = v17;
  }
  while (v17 != a1);
LABEL_72:
  sub_8108(v36);
}

BOOL sub_10244C(uint64_t a1, int *a2)
{
  if (a2[1] != 1735159650) {
    return 0;
  }
  int v2 = *a2;
  int v3 = a2[2];
  if (*a2 != 1886283375)
  {
    if (v2 == 1886282093 && v3 == 0) {
      return 1;
    }
    if (v2 != 1886613101 && v2 != 1886614625 && v2 != 1886417783) {
      return 0;
    }
  }
  return !v3;
}

BOOL sub_1024C4(uint64_t a1, int *a2)
{
  if (a2[1] != 1735159650) {
    return 0;
  }
  int v2 = *a2;
  int v3 = a2[2];
  if (*a2 != 1886283375)
  {
    if (v2 == 1886282093 && v3 == 0) {
      return 1;
    }
    if (v2 != 1886613101 && v2 != 1886614625 && v2 != 1886417783) {
      return 0;
    }
  }
  return !v3;
}

void sub_10253C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_2417C(v14, *(_DWORD *)(a1 + 144));
  snprintf(__str, 0x13uLL, "%p", (const void *)a1);
  sub_21C8C(__p, __str);
  uint64_t v4 = *(const void **)(a1 + 248);
  *(void *)std::string __str = v4;
  LOBYTE(p_cf) = *(unsigned char *)(a1 + 256);
  if ((_BYTE)p_cf && v4)
  {
    CFRetain(v4);
    uint64_t v4 = *(const void **)__str;
  }
  if (v4) {
    CFRetain(v4);
  }
  sub_14E44(&cf, v4);
  sub_72924((uint64_t)__str);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(a1);
  std::to_string(&v10, v5);
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  std::to_string(&v9, v6);
  *(void *)std::string __str = v14;
  p_CFTypeRef cf = &cf;
  uint64_t v18 = __p;
  __int16 v19 = &v10;
  int v20 = &v9;
  sub_102808(a2, (uint64_t)__str, 1);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 464));
  std::string::operator=((std::string *)(a1 + 472), a2);
  sub_102808(&v8, (uint64_t)__str, 0);
  char v7 = (void **)(a1 + 496);
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)char v7 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
  *(void *)(a1 + 512) = *((void *)&v8.__r_.__value_.__l + 2);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 464));
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
}

void sub_102744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 81) < 0) {
    operator delete(*(void **)(v32 - 104));
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_102808(std::string *a1, uint64_t a2, int a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a1, 0x40uLL);
  std::operator+<char>();
  if (v22 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if (v22 >= 0) {
    std::string::size_type v7 = HIBYTE(v22);
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  CFStringRef v8 = **(const __CFString ***)(a2 + 8);
  if (v8) {
    sub_20C54((uint64_t)&v20, v8);
  }
  else {
    sub_21C8C(&v20, "");
  }
  std::string v9 = std::string::insert(&v20, 0, "; uid: ", 7uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v22 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0) {
    __int32 v11 = __p;
  }
  else {
    __int32 v11 = (void **)__p[0];
  }
  if (v22 >= 0) {
    std::string::size_type v12 = HIBYTE(v22);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v20.__r_.__value_.__l.__data_);
    if (!a3) {
      goto LABEL_32;
    }
  }
  else if (!a3)
  {
    goto LABEL_32;
  }
  std::operator+<char>();
  if (v22 >= 0) {
    char v13 = __p;
  }
  else {
    char v13 = (void **)__p[0];
  }
  if (v22 >= 0) {
    std::string::size_type v14 = HIBYTE(v22);
  }
  else {
    std::string::size_type v14 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v13, v14);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
LABEL_32:
  std::operator+<char>();
  if (v22 >= 0) {
    char v15 = __p;
  }
  else {
    char v15 = (void **)__p[0];
  }
  if (v22 >= 0) {
    std::string::size_type v16 = HIBYTE(v22);
  }
  else {
    std::string::size_type v16 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  std::operator+<char>();
  if (v22 >= 0) {
    int v17 = __p;
  }
  else {
    int v17 = (void **)__p[0];
  }
  if (v22 >= 0) {
    std::string::size_type v18 = HIBYTE(v22);
  }
  else {
    std::string::size_type v18 = (std::string::size_type)__p[1];
  }
  std::string::append(a1, (const std::string::value_type *)v17, v18);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  return std::string::append(a1, " ]", 2uLL);
}

void sub_102A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_102AAC(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    std::string::size_type v12 = (os_log_t *)sub_32A48(13);
    char v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *a2;
      int v29 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v28);
      std::string::size_type v14 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v33 = "Port.cpp";
      __int16 v34 = 1024;
      int v35 = 267;
      __int16 v36 = 2080;
      uint64_t v37 = (const char *)v14;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    std::string::size_type v16 = (os_log_t *)sub_32A48(13);
    int v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *a2;
      int v29 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v28);
      std::string::size_type v18 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      uint64_t v33 = "Port.cpp";
      __int16 v34 = 1024;
      int v35 = 268;
      __int16 v36 = 2080;
      uint64_t v37 = (const char *)v18;
      __int16 v38 = 1024;
      LODWORD(v39[0]) = a3;
      WORD2(v39[0]) = 2048;
      *(void *)((char *)v39 + 6) = a4;
      _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v19 = &off_6414D8;
    void v19[2] = 561211770;
  }
  if (!a6)
  {
    std::string v20 = (os_log_t *)sub_32A48(13);
    uint64_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *a2;
      int v29 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v28);
      int64_t v22 = v31 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315906;
      uint64_t v33 = "Port.cpp";
      __int16 v34 = 1024;
      int v35 = 269;
      __int16 v36 = 2080;
      uint64_t v37 = "inData";
      __int16 v38 = 2080;
      v39[0] = v22;
      _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v23 = &off_6414D8;
    void v23[2] = 561211770;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 24))(a1, a2);
  if ((result & 1) == 0)
  {
    char v24 = (os_log_t *)sub_32A48(13);
    uint64_t v25 = *v24;
    if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *a2;
      int v29 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v28);
      if (v31 >= 0) {
        char v26 = __p;
      }
      else {
        char v26 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315650;
      uint64_t v33 = "Port.cpp";
      __int16 v34 = 1024;
      int v35 = 270;
      __int16 v36 = 2080;
      uint64_t v37 = (const char *)v26;
      _os_log_impl(&def_1E50E8, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not settable.", buf, 0x1Cu);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    __int16 v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v27 = &off_6414D8;
    v27[2] = 1852797029;
  }
  return result;
}

uint64_t sub_102FDC(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if ((result & 1) == 0)
  {
    __int32 v11 = (os_log_t *)sub_32A48(13);
    std::string::size_type v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *a2;
      int v24 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v23);
      char v13 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v28 = "Port.cpp";
      __int16 v29 = 1024;
      int v30 = 260;
      __int16 v31 = 2080;
      uint64_t v32 = (const char *)v13;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    char v15 = (os_log_t *)sub_32A48(13);
    std::string::size_type v16 = *v15;
    if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *a2;
      int v24 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v23);
      int v17 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136316162;
      uint64_t v28 = "Port.cpp";
      __int16 v29 = 1024;
      int v30 = 261;
      __int16 v31 = 2080;
      uint64_t v32 = (const char *)v17;
      __int16 v33 = 1024;
      LODWORD(v34[0]) = a3;
      WORD2(v34[0]) = 2048;
      *(void *)((char *)v34 + 6) = a4;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    std::string::size_type v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)std::string::size_type v18 = &off_6414D8;
    void v18[2] = 561211770;
  }
  if (!a6)
  {
    __int16 v19 = (os_log_t *)sub_32A48(13);
    std::string v20 = *v19;
    if (*v19 && os_log_type_enabled(*v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *a2;
      int v24 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v23);
      if (v26 >= 0) {
        uint64_t v21 = __p;
      }
      else {
        uint64_t v21 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315906;
      uint64_t v28 = "Port.cpp";
      __int16 v29 = 1024;
      int v30 = 262;
      __int16 v31 = 2080;
      uint64_t v32 = "outData";
      __int16 v33 = 2080;
      v34[0] = v21;
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Variable %s for property %s is NULL.", buf, 0x26u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    int64_t v22 = __cxa_allocate_exception(0x10uLL);
    *(void *)int64_t v22 = &off_6414D8;
    v22[2] = 561211770;
  }
  return result;
}

uint64_t sub_1033C8(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    CFStringRef v8 = (os_log_t *)sub_32A48(13);
    std::string v9 = *v8;
    if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *a2;
      int v17 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
      long long v10 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v21 = "Port.cpp";
      __int16 v22 = 1024;
      int v23 = 252;
      __int16 v24 = 2080;
      uint64_t v25 = v10;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s is not supported.", buf, 0x1Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 2003332927;
  }
  if ((a3 != 0) == (a4 == 0))
  {
    std::string::size_type v12 = (os_log_t *)sub_32A48(13);
    char v13 = *v12;
    if (*v12 && os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *a2;
      int v17 = *((_DWORD *)a2 + 2);
      sub_16C9C4((uint64_t)__p, (unsigned int *)&v16);
      if (v19 >= 0) {
        std::string::size_type v14 = __p;
      }
      else {
        std::string::size_type v14 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136316162;
      uint64_t v21 = "Port.cpp";
      __int16 v22 = 1024;
      int v23 = 253;
      __int16 v24 = 2080;
      uint64_t v25 = v14;
      __int16 v26 = 1024;
      int v27 = a3;
      __int16 v28 = 2048;
      uint64_t v29 = a4;
      _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d HAL PRECONDITION FAILURE: Property %s requires that if qualifier size is zero, qualifier data is NULL, and conversely (inQualifierDataSize: %u; inQualifierData: %p).",
        buf,
        0x2Cu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    char v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v15 = &off_6414D8;
    void v15[2] = 561211770;
  }
  return 0;
}

uint64_t sub_103698()
{
  return 0;
}

uint64_t sub_1036A0()
{
  return 0;
}

void sub_1036B0(uint64_t a1)
{
  *(unsigned char *)(a1 + 520) = 0;
  sub_101D9C(a1);

  sub_D26B4(a1);
}

uint64_t sub_1036EC(uint64_t a1)
{
  sub_103A60((os_unfair_lock_s *)a1);
  int v2 = *(_DWORD *)(a1 + 144);
  if ((sub_20A744() & 1) == 0
    && (v2 != 1885565807 ? (v4 = v2 == 1886745455) : (v4 = 1), !v4 ? (BOOL v5 = v2 == 1886745449) : (BOOL v5 = 1), v5))
  {
    uint64_t v6 = *(void *)(a1 + 192);
    if ((*(_WORD *)(a1 + 184) & 1) == 0) {
      goto LABEL_22;
    }
    int v7 = (*(uint64_t (**)(void, void))(*(void *)v6 + 88))(*(void *)(a1 + 192), 0);
    int v8 = v7 - (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 312))(v6) & 0xFF00000000) != 0);
    unsigned int v9 = sub_4584EC(v6, 0);
    long long v10 = (os_log_t *)sub_32A48(13);
    __int32 v11 = *v10;
    if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315906;
      __int16 v26 = "PortUtilities.cpp";
      __int16 v27 = 1024;
      int v28 = 1364;
      __int16 v29 = 1024;
      *(_DWORD *)int v30 = v8;
      *(_WORD *)&void v30[4] = 1024;
      *(_DWORD *)&v30[6] = v9;
      _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Number of Non Tap Input Streams: %u; Input Channels: %u",
        buf,
        0x1Eu);
    }
    BOOL v12 = v9 < 3 && v8 == 1;
    BOOL v3 = v12;
    if ((*(_WORD *)(a1 + 184) & 1) == 0)
    {
LABEL_22:
      int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 88))(v6, 1);
      unsigned int v14 = sub_4584EC(v6, 1);
      char v15 = (os_log_t *)sub_32A48(13);
      uint64_t v16 = *v15;
      if (*v15 && os_log_type_enabled(*v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 136315906;
        __int16 v26 = "PortUtilities.cpp";
        __int16 v27 = 1024;
        int v28 = 1376;
        __int16 v29 = 1024;
        *(_DWORD *)int v30 = v13;
        *(_WORD *)&void v30[4] = 1024;
        *(_DWORD *)&v30[6] = v14;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Number of Output Streams: %u; Output Channels: %u",
          buf,
          0x1Eu);
      }
      BOOL v3 = v14 < 3 && v13 == 1;
    }
  }
  else
  {
    BOOL v3 = 1;
  }
  std::string::size_type v18 = (os_log_t *)sub_32A48(13);
  char v19 = *v18;
  if (*v18 && os_log_type_enabled(*v18, OS_LOG_TYPE_INFO))
  {
    if (v3) {
      std::string v20 = "true";
    }
    else {
      std::string v20 = "false";
    }
    sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
    if (v24 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136315906;
    __int16 v26 = "PortUtilities.cpp";
    __int16 v27 = 1024;
    int v28 = 1383;
    __int16 v29 = 2080;
    *(void *)int v30 = v20;
    *(_WORD *)&v30[8] = 2080;
    __int16 v31 = v21;
    _os_log_impl(&def_1E50E8, v19, OS_LOG_TYPE_INFO, "%25s:%-5d Port returning %s for telephony support: %s", buf, 0x26u);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  *(unsigned char *)(a1 + 521) = v3;
  *(unsigned char *)(a1 + 520) = 1;
  sub_D26B4(a1);
  return 1;
}

void sub_103A60(os_unfair_lock_s *a1)
{
  sub_D26B4((uint64_t)a1);
  uint64_t v2 = sub_32A48(23);
  uint64_t v3 = sub_32A48(9);
  char v4 = 0;
  uint64_t v5 = 0;
  *(void *)int buf = 0x100000002;
  uint64_t v6 = *(void *)(v2 + 8);
  while (1)
  {
    uint64_t v7 = *(int *)&buf[4 * v5];
    char v8 = v4;
    if (((v6 & v7) != 0) != ((*(void *)(v3 + 8) & v7) != 0)) {
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
    if (v8)
    {
      if ((v6 & 1) == 0) {
        return;
      }
      goto LABEL_9;
    }
  }
  if ((v6 & v7) == 0) {
    uint64_t v2 = v3;
  }
  if (*(void *)(v2 + 8))
  {
LABEL_9:
    unsigned int v9 = *(NSObject **)v2;
    if (v9 && os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      sub_4F64((uint64_t)__p, a1 + 2);
      if (v12 >= 0) {
        long long v10 = __p;
      }
      else {
        long long v10 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      __int16 v14 = 1024;
      int v15 = 162;
      __int16 v16 = 2080;
      int v17 = v10;
      _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Instantiated Port: %s.", buf, 0x1Cu);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_103BD4(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

uint64_t sub_103C0C(uint64_t a1)
{
  *(void *)a1 = off_6218A0;
  uint64_t v2 = (os_log_t *)sub_32A48(23);
  uint64_t v3 = *v2;
  if (*v2 && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
    char v4 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "Port.cpp";
    __int16 v18 = 1024;
    int v19 = 219;
    __int16 v20 = 2080;
    uint64_t v21 = v4;
    _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d deleting port %s", buf, 0x1Cu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  unsigned int v5 = *(_DWORD *)(a1 + 144);
  if (v5 != 1885433888)
  {
    if ((sub_46FF9C((unint64_t *)qword_669B38) & 1) == 0)
    {
      uint64_t v6 = (os_log_t *)sub_32A48(13);
      uint64_t v7 = *v6;
      if (*v6)
      {
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, v5);
          char v8 = v16 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)int buf = 136315906;
          *(void *)&uint8_t buf[4] = "Port.cpp";
          __int16 v18 = 1024;
          int v19 = 229;
          __int16 v20 = 2080;
          uint64_t v21 = v8;
          __int16 v22 = 2048;
          uint64_t v23 = a1;
          _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"A Port of type '%s' at %p is being destroyed by something other than the Object Destruction Handler\"", buf, 0x26u);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
    if (!*(unsigned char *)(a1 + 432))
    {
      char v12 = (os_log_t *)sub_32A48(13);
      int v13 = *v12;
      if (*v12)
      {
        if (os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR))
        {
          sub_2417C(__p, v5);
          __int16 v14 = v16 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)int buf = 136315906;
          *(void *)&uint8_t buf[4] = "Port.cpp";
          __int16 v18 = 1024;
          int v19 = 232;
          __int16 v20 = 2080;
          uint64_t v21 = v14;
          __int16 v22 = 2048;
          uint64_t v23 = a1;
          _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"A Port of type '%s' at %p was not torn down prior to being destroyed\"", buf, 0x26u);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
      }
    }
  }
  if (*(char *)(a1 + 519) < 0) {
    operator delete(*(void **)(a1 + 496));
  }
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  unsigned int v9 = *(void **)(a1 + 440);
  if (v9)
  {
    *(void *)(a1 + 448) = v9;
    operator delete(v9);
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  sub_AEF0C(a1 + 320);
  sub_8108((uint64_t *)(a1 + 296));
  sub_8108((uint64_t *)(a1 + 272));
  sub_72924(a1 + 248);
  sub_72924(a1 + 232);
  sub_72924(a1 + 216);
  sub_72924(a1 + 200);
  sub_463E0(*(void **)(a1 + 168));
  *(void *)int buf = a1 + 96;
  sub_74004((void ***)buf);
  long long v10 = *(std::__shared_weak_count **)(a1 + 88);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  sub_FE920(a1);
  return a1;
}

void sub_103F70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

unsigned char *sub_103F80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 544);
  if (!v2) {
    sub_56964();
  }
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
  uint64_t v4 = sub_32A48(23);
  if (*(unsigned char *)(v4 + 8))
  {
    unsigned int v5 = *(NSObject **)v4;
    if (*(void *)v4)
    {
      if (os_log_type_enabled(*(os_log_t *)v4, OS_LOG_TYPE_DEBUG))
      {
        sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
        if (v10 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        uint64_t v7 = "Disabled";
        *(void *)&uint8_t buf[4] = "Port.cpp";
        __int16 v12 = 1024;
        *(_DWORD *)int buf = 136315906;
        if (v3) {
          uint64_t v7 = "Enabled";
        }
        int v13 = 914;
        __int16 v14 = 2080;
        int v15 = v6;
        __int16 v16 = 2080;
        int v17 = v7;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Dynamic Port updating state: %s will be %s", buf, 0x26u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  *(void *)int buf = a1 + 552;
  uint8_t buf[8] = (*(uint64_t (**)(void))(*(void *)(a1 + 552) + 16))();
  *(unsigned char *)(a1 + 640) = v3;
  sub_D26B4(a1);
  return sub_3BCAC(buf);
}

void sub_104128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_104144(uint64_t a1)
{
  uint64_t v4 = a1 + 552;
  char v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 552) + 16))(a1 + 552);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 640);
  sub_3BCAC(&v4);
  return v2;
}

unsigned char *sub_1041AC(uint64_t a1)
{
  uint64_t v3 = a1 + 552;
  char v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 552) + 16))(a1 + 552);
  *(unsigned char *)(a1 + 640) = 0;
  sub_3BCAC(&v3);
  return sub_101D9C(a1);
}

uint64_t sub_104218(os_unfair_lock_s *a1)
{
  return 1;
}

void sub_104234(uint64_t a1)
{
  sub_10426C(a1);

  operator delete();
}

uint64_t sub_10426C(uint64_t a1)
{
  *(void *)a1 = off_621D00;
  if (*(unsigned char *)(a1 + 640))
  {
    uint64_t v2 = (os_log_t *)sub_32A48(13);
    uint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        uint64_t v6 = "Port.cpp";
        __int16 v7 = 1024;
        int v8 = 884;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Dynamic port is being destroyed while still enabled!\"", (uint8_t *)&v5, 0x12u);
      }
    }
  }
  sub_AEF0C(a1 + 552);
  sub_FB930((void *)(a1 + 520));
  sub_103C0C(a1);
  return a1;
}

void sub_10436C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

unsigned char *sub_10437C(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 552;
  uint64_t v31 = a1 + 552;
  char v32 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 552) + 16))(a1 + 552);
  if (*(unsigned char *)(a1 + 520)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = a2 == 0;
  }
  if (!v5)
  {
    __int16 v22 = (os_log_t *)sub_32A48(13);
    uint64_t v23 = *v22;
    if (*v22)
    {
      if (os_log_type_enabled(*v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "Port.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 979;
        _os_log_impl(&def_1E50E8, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (kVirtualAudioObjectRoutingNotSupportedError): \"Ports cannot be set routable if not connected.\"", buf, 0x12u);
      }
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &off_6414D8;
    exception[2] = 1852797556;
  }
  uint64_t v6 = (os_log_t *)sub_32A48(23);
  __int16 v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 144))(&v29, a1);
    uint64_t v8 = v29;
    unsigned int v9 = *(const void **)(a1 + 248);
    __int16 v27 = v9;
    char v28 = *(unsigned char *)(a1 + 256);
    if (v28 && v9) {
      CFRetain(v9);
    }
    sub_2417C(__p, *(_DWORD *)(a1 + 144));
    if (v26 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    *(_DWORD *)int buf = 136316418;
    *(void *)&uint8_t buf[4] = "Port.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 981;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = a2;
    __int16 v34 = 2112;
    uint64_t v35 = v8;
    __int16 v36 = 2112;
    uint64_t v37 = v9;
    __int16 v38 = 2080;
    char v39 = v10;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Changing port routability to %u for port with name \"%@\", UID \"%@\", and type '%s'", buf, 0x36u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    sub_72924((uint64_t)&v27);
    sub_72924((uint64_t)&v29);
  }
  int v11 = *(unsigned __int8 *)(a1 + 521);
  *(unsigned char *)(a1 + 521) = a2;
  if (v11 != a2)
  {
    sub_D26B4(a1);
    __int16 v12 = pthread_self();
    if (!pthread_equal(v12, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 568), memory_order_acquire)))
    {
      __int16 v20 = (os_log_t *)sub_32A48(13);
      uint64_t v21 = *v20;
      if (*v20)
      {
        if (os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "Port.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 1048;
          _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"mutex not owned by current thread\"", buf, 0x12u);
        }
      }
    }
    uint64_t v13 = a1 + 528;
    *(void *)int buf = buf;
    *(_OWORD *)&uint8_t buf[8] = (unint64_t)buf;
    uint64_t v14 = *(void *)(a1 + 536);
    if (v14 != v13)
    {
      uint64_t v15 = 1;
      __int16 v16 = buf;
      do
      {
        int v17 = operator new(0x20uLL);
        v17[1] = *(_OWORD *)(v14 + 16);
        *(void *)int v17 = v16;
        *((void *)v17 + 1) = buf;
        *((void *)v16 + 1) = v17;
        *(void *)int buf = v17;
        *(void *)&_DWORD buf[16] = v15;
        uint64_t v14 = *(void *)(v14 + 8);
        ++v15;
        __int16 v16 = v17;
      }
      while (v14 != v13);
    }
    sub_523D8(__p, v4);
    uint64_t v29 = 0x676C6F6270697372;
    int v30 = 0;
    for (uint64_t i = *(void *)&buf[8]; buf != (unsigned char *)i; uint64_t i = *(void *)(i + 8))
      (*(void (**)(void, uint64_t, uint64_t *, void))(i + 16))(0, 1, &v29, *(void *)(i + 24));
    sub_52380(__p);
    sub_45F50(buf);
  }
  return sub_3BCAC(&v31);
}

void sub_104764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_72924((uint64_t)va);
  sub_3BCAC(va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1047CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 521);
}

uint64_t sub_1047D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

unsigned char *sub_1047DC(uint64_t a1)
{
  *(_WORD *)(a1 + 520) = 0;
  sub_D26B4(a1);

  return sub_101D9C(a1);
}

uint64_t sub_104818(uint64_t a1)
{
  *(unsigned char *)(a1 + 520) = 1;
  sub_D26B4(a1);
  return 1;
}

NSObject *sub_104850(void *a1, int *a2, uint64_t a3, uint64_t a4)
{
  __int16 v18 = a1 + 69;
  uint64_t v8 = (*(uint64_t (**)(void *))(a1[69] + 16))(a1 + 69);
  char v19 = v8;
  if (*a2 == 1885959026 && a2[1] == 1735159650 && a2[2] == 0)
  {
    __int16 v12 = a1 + 66;
    for (uint64_t i = (uint64_t *)a1[67]; i != v12; uint64_t i = (uint64_t *)i[1])
    {
      if (i[2] == a3 && i[3] == a4)
      {
        if (i != v12)
        {
          uint64_t v15 = *i;
          *(void *)(v15 + 8) = i[1];
          *(void *)i[1] = v15;
          --a1[68];
          operator delete(i);
          int v11 = (&def_1E50E8 + 1);
          goto LABEL_22;
        }
        break;
      }
    }
    __int16 v16 = (os_log_t *)sub_32A48(23);
    int v11 = *v16;
    if (*v16)
    {
      if (os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        uint64_t v21 = "Port.cpp";
        __int16 v22 = 1024;
        int v23 = 1031;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Specified routability listener does not exist", buf, 0x12u);
      }
      int v11 = 0;
    }
  }
  else
  {
    int v11 = sub_10244C(v8, a2);
  }
LABEL_22:
  sub_3BCAC(&v18);
  return v11;
}

void sub_1049F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

NSObject *sub_104A08(void *a1, int *a2, uint64_t a3, uint64_t a4)
{
  char v19 = a1 + 69;
  uint64_t v8 = (*(uint64_t (**)(void *))(a1[69] + 16))(a1 + 69);
  char v20 = v8;
  if (*a2 == 1885959026 && a2[1] == 1735159650 && a2[2] == 0)
  {
    __int16 v12 = a1 + 66;
    for (uint64_t i = (void *)a1[67]; ; uint64_t i = (void *)i[1])
    {
      if (i == v12) {
        goto LABEL_21;
      }
      if (i[2] == a3 && i[3] == a4) {
        break;
      }
    }
    if (i == v12)
    {
LABEL_21:
      __int16 v16 = operator new(0x20uLL);
      uint64_t v16[2] = a3;
      v16[3] = a4;
      uint64_t v17 = a1[66];
      void *v16 = v17;
      v16[1] = v12;
      *(void *)(v17 + 8) = v16;
      a1[66] = v16;
      ++a1[68];
      int v11 = (&def_1E50E8 + 1);
      goto LABEL_22;
    }
    uint64_t v15 = (os_log_t *)sub_32A48(23);
    int v11 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        __int16 v22 = "Port.cpp";
        __int16 v23 = 1024;
        int v24 = 1005;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Specified routability listener already exists", buf, 0x12u);
      }
      int v11 = 0;
    }
  }
  else
  {
    int v11 = sub_1024C4(v8, a2);
  }
LABEL_22:
  sub_3BCAC(&v19);
  return v11;
}

void sub_104BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_104BCC(void *a1)
{
  sub_104C04(a1);

  operator delete();
}

uint64_t sub_104C04(void *a1)
{
  *a1 = off_621F38;
  sub_AEF0C((uint64_t)(a1 + 69));
  sub_45F50(a1 + 66);

  return sub_103C0C((uint64_t)a1);
}

std::string *sub_104C68(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "[", 1uLL);
  std::to_string(&v29, *(_DWORD *)a2);
  uint64_t v4 = std::string::insert(&v29, 0, "iesp: ", 6uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  uint64_t v6 = std::string::append(&v30, "; ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v32 = v6->__r_.__value_.__r.__words[2];
  long long v31 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (v32 >= 0) {
    uint64_t v8 = (const std::string::value_type *)&v31;
  }
  else {
    uint64_t v8 = (const std::string::value_type *)v31;
  }
  if (v32 >= 0) {
    std::string::size_type v9 = HIBYTE(v32);
  }
  else {
    std::string::size_type v9 = *((void *)&v31 + 1);
  }
  std::string::append(a1, v8, v9);
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, *(_DWORD *)(a2 + 4));
  uint64_t v10 = std::string::insert(&v29, 0, "iess: ", 6uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  __int16 v12 = std::string::append(&v30, "; ", 2uLL);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v32 = v12->__r_.__value_.__r.__words[2];
  long long v31 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v32 >= 0) {
    uint64_t v14 = (const std::string::value_type *)&v31;
  }
  else {
    uint64_t v14 = (const std::string::value_type *)v31;
  }
  if (v32 >= 0) {
    std::string::size_type v15 = HIBYTE(v32);
  }
  else {
    std::string::size_type v15 = *((void *)&v31 + 1);
  }
  std::string::append(a1, v14, v15);
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, *(_DWORD *)(a2 + 8));
  __int16 v16 = std::string::insert(&v29, 0, "pris: ", 6uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  __int16 v18 = std::string::append(&v30, "; ", 2uLL);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  int64_t v32 = v18->__r_.__value_.__r.__words[2];
  long long v31 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (v32 >= 0) {
    char v20 = (const std::string::value_type *)&v31;
  }
  else {
    char v20 = (const std::string::value_type *)v31;
  }
  if (v32 >= 0) {
    std::string::size_type v21 = HIBYTE(v32);
  }
  else {
    std::string::size_type v21 = *((void *)&v31 + 1);
  }
  std::string::append(a1, v20, v21);
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::to_string(&v29, *(unsigned __int8 *)(a2 + 12));
  __int16 v22 = std::string::insert(&v29, 0, "iede: ", 6uLL);
  long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  int v24 = std::string::append(&v30, "; ", 2uLL);
  long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  int64_t v32 = v24->__r_.__value_.__r.__words[2];
  long long v31 = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (v32 >= 0) {
    char v26 = (const std::string::value_type *)&v31;
  }
  else {
    char v26 = (const std::string::value_type *)v31;
  }
  if (v32 >= 0) {
    std::string::size_type v27 = HIBYTE(v32);
  }
  else {
    std::string::size_type v27 = *((void *)&v31 + 1);
  }
  std::string::append(a1, v26, v27);
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  return std::string::append(a1, "]", 1uLL);
}

void sub_104FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v22 - 25) < 0) {
    operator delete(*(void **)(v22 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_105048(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

void sub_10508C(_Unwind_Exception *a1)
{
  sub_72924(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1050A0(uint64_t a1, unsigned int a2, AudioObjectID a3)
{
  sub_23B86C(a1, a2);
  sub_23BD6C((void *)(a1 + 16), a2);
  uint64_t outData = 0;
  inAddress.AudioObjectPropertyElement mElement = 0;
  UInt32 ioDataSize = 8;
  *(void *)&inAddress.int mSelector = 0x676C6F626C6E616DLL;
  AudioObjectGetPropertyData(a3, &inAddress, 0, 0, &ioDataSize, &outData);
  *(void *)(a1 + 32) = outData;
  *(unsigned char *)(a1 + 40) = 1;
  return a1;
}

void sub_105134(_Unwind_Exception *a1)
{
  sub_72924(v2);
  sub_72924(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_105158(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, long long *a8)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = off_6218A0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  std::string::size_type v15 = *(void **)a7;
  __int16 v16 = *(void **)(a7 + 8);
  uint64_t v17 = (uint64_t)v16 - *(void *)a7;
  if (v16 != *(void **)a7)
  {
    if (v17 < 0) {
      sub_60548();
    }
    __int16 v18 = sub_10724(v17 >> 4);
    *(void *)(a1 + 112) = &v18[2 * v19];
    *(void *)(a1 + 96) = v18;
    *(void *)(a1 + 104) = v18;
    uint64_t v37 = v18;
    __int16 v38 = v18;
    *(void *)int buf = a1 + 112;
    *(void *)&uint8_t buf[8] = &v37;
    *(void *)&_DWORD buf[16] = &v38;
    do
    {
      *__int16 v18 = *v15;
      uint64_t v20 = v15[1];
      v18[1] = v20;
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      v18 += 2;
      v15 += 2;
    }
    while (v15 != v16);
    __int16 v38 = v18;
    char v40 = 1;
    sub_67EB4((uint64_t)buf);
    *(void *)(a1 + 104) = v18;
  }
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 132) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  uint64_t v21 = *a2;
  *(void *)(a1 + 149) = *(uint64_t *)((char *)a2 + 5);
  *(void *)(a1 + 144) = v21;
  sub_46A4C((uint64_t *)(a1 + 160), (uint64_t)(a2 + 2));
  *(_WORD *)(a1 + 184) = *((_WORD *)a2 + 20);
  CFStringRef v22 = *(const __CFString **)a5;
  *(void *)(a1 + 200) = *(void *)a5;
  *(void *)(a1 + 192) = a3;
  int v23 = *(unsigned __int8 *)(a5 + 8);
  *(unsigned char *)(a1 + 208) = v23;
  if (v23 && v22) {
    CFRetain(v22);
  }
  int v24 = *(const void **)(a5 + 16);
  *(void *)(a1 + 216) = v24;
  int v25 = *(unsigned __int8 *)(a5 + 24);
  *(unsigned char *)(a1 + 224) = v25;
  if (v25 && v24) {
    CFRetain(v24);
  }
  char v26 = *(const void **)(a5 + 32);
  *(void *)(a1 + 232) = v26;
  int v27 = *(unsigned __int8 *)(a5 + 40);
  *(unsigned char *)(a1 + 240) = v27;
  if (v27 && v26) {
    CFRetain(v26);
  }
  CFStringRef v28 = *(CFStringRef *)a6;
  *(void *)(a1 + 248) = *(void *)a6;
  int v29 = *(unsigned __int8 *)(a6 + 8);
  *(unsigned char *)(a1 + 256) = v29;
  if (v29 && v28) {
    CFRetain(v28);
  }
  *(_DWORD *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 272;
  *(void *)(a1 + 280) = a1 + 272;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = a1 + 296;
  *(void *)(a1 + 304) = a1 + 296;
  *(void *)(a1 + 312) = 0;
  sub_AEF58(a1 + 320, (uint64_t)"Port Sibling/Partner List Mutex");
  if (*((char *)a8 + 23) < 0)
  {
    sub_21E8C((unsigned char *)(a1 + 408), *(void **)a8, *((void *)a8 + 1));
  }
  else
  {
    long long v30 = *a8;
    *(void *)(a1 + 424) = *((void *)a8 + 2);
    *(_OWORD *)(a1 + 408) = v30;
  }
  *(unsigned char *)(a1 + 432) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 440) = 0;
  sub_46B38((void *)(a1 + 440), *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  CFStringRef v31 = *(const __CFString **)(a5 + 32);
  if (!v31 && (*(void *)(a5 + 16) ? (CFStringRef v31 = *(const __CFString **)(a5 + 16)) : (CFStringRef v31 = *(const __CFString **)a5), !v31)
    || !CFStringGetLength(v31))
  {
    int64_t v32 = (os_log_t *)sub_32A48(23);
    __int16 v33 = *v32;
    if (*v32)
    {
      if (os_log_type_enabled(*v32, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "Port.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 154;
        _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d port name is zero-length.", buf, 0x12u);
      }
    }
  }
  if (!*(void *)a6 || !CFStringGetLength(*(CFStringRef *)a6))
  {
    __int16 v34 = (os_log_t *)sub_32A48(23);
    uint64_t v35 = *v34;
    if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "Port.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 156;
      _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d inUID is zero-length.", buf, 0x12u);
    }
  }
  return a1;
}

void sub_105524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  sub_AEF0C(a9);
  sub_8108(v19);
  sub_8108(v18);
  sub_72924(v17);
  sub_78FF8(v16);
  sub_463E0(*(void **)(v15 + 168));
  a15 = a10;
  sub_74004(&a15);
  uint64_t v21 = *(std::__shared_weak_count **)(v15 + 88);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  sub_FE920(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_105610(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_105654(__int32 **a1, uint64_t a2)
{
  uint64_t v4 = a1[56];
  long long v5 = wmemchr(a1[55], a2, v4 - a1[55]);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = v4;
  }
  if (v4 != v6) {
    return 0;
  }
  uint64_t v8 = (uint64_t (*)(__int32 **, uint64_t))*((void *)*a1 + 65);

  return v8(a1, a2);
}

uint64_t sub_1056F4(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    while (*((_DWORD *)v2 + 7) != a2)
    {
      uint64_t v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          long long v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          long long v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
      if (v5 == v3)
      {
        uint64_t v2 = (void *)(a1 + 16);
        return (*(_DWORD *)a1 != 3) ^ (v2 == v3);
      }
    }
  }
  return (*(_DWORD *)a1 != 3) ^ (v2 == v3);
}

uint64_t sub_105768(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  BOOL v6 = *(int ***)(a2 + 96);
  long long v7 = *(int ***)(a2 + 104);
  if (v6 == v7) {
    goto LABEL_25;
  }
  do
  {
    long long v11 = *v6;
    uint64_t v10 = (std::__shared_weak_count *)v6[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      int v12 = *v11;
      sub_4636C(v10);
      if (v12 == a4) {
        goto LABEL_8;
      }
    }
    else if (*v11 == a4)
    {
      goto LABEL_8;
    }
    v6 += 2;
  }
  while (v6 != v7);
  BOOL v6 = v7;
LABEL_8:
  if (v6 == *(int ***)(a2 + 104))
  {
LABEL_25:
    uint64_t v21 = (os_log_t *)sub_32A48(13);
    CFStringRef v22 = *v21;
    if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(v33, a4);
      int v23 = v34;
      int v24 = (void **)v33[0];
      sub_2417C(__p, *(_DWORD *)(a2 + 144));
      int v25 = v33;
      if (v23 < 0) {
        int v25 = v24;
      }
      if (v32 >= 0) {
        char v26 = __p;
      }
      else {
        char v26 = (void **)__p[0];
      }
      *(_DWORD *)value = 136315906;
      *(void *)&value[4] = "Port.cpp";
      __int16 v36 = 1024;
      int v37 = 630;
      __int16 v38 = 2080;
      char v39 = v25;
      __int16 v40 = 2080;
      unsigned int v41 = v26;
      _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Attempt to get polar pattern for unknown sub-port (%s) type on port with type %s.\"", value, 0x26u);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      if (v34 < 0) {
        operator delete(v33[0]);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempt to get polar pattern for unknown sub-port (%s) type on port with type %s.");
  }
  long long v13 = *v6;
  if (!*((unsigned char *)*v6 + 16) || !*((unsigned char *)v13 + 24))
  {
    CFStringRef v28 = (os_log_t *)sub_32A48(13);
    int v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)value = 136315394;
      *(void *)&value[4] = "SubPort.cpp";
      __int16 v36 = 1024;
      int v37 = 195;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", value, 0x12u);
    }
    long long v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v30, "Precondition failure.");
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *(void *)a1 = Mutable;
  *(_WORD *)(a1 + 8) = 257;
  sub_1D4AF4(a1, @"region", v13[3]);
  sub_1D4AF4(a1, @"orientation", v13[5]);
  CFMutableArrayRef v15 = CFArrayCreateMutable(0, ((*((void *)v13 + 5) - *((void *)v13 + 4)) >> 6), &kCFTypeArrayCallBacks);
  *(void *)value = v15;
  *(_WORD *)&value[8] = 257;
  uint64_t v17 = *((void *)v13 + 4);
  uint64_t v16 = *((void *)v13 + 5);
  if (v17 != v16)
  {
    do
    {
      for (uint64_t i = *(_DWORD **)(v17 + 40); i != *(_DWORD **)(v17 + 48); ++i)
      {
        if (*i == a3) {
          goto LABEL_17;
        }
      }
      sub_451D0((uint64_t)value, *(_DWORD *)(v17 + 32));
LABEL_17:
      v17 += 64;
    }
    while (v17 != v16);
    CFMutableArrayRef v15 = *(CFMutableArrayRef *)value;
  }
  if (v15) {
    BOOL v19 = Mutable == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (!v19) {
    CFDictionarySetValue(Mutable, @"polar pattern", v15);
  }
  return sub_3D61C((uint64_t)value);
}

void sub_105B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_105B60(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(int ***)(a1 + 96);
  long long v5 = *(int ***)(a1 + 104);
  if (v4 == v5) {
    goto LABEL_11;
  }
  do
  {
    long long v7 = *v4;
    BOOL v6 = (std::__shared_weak_count *)v4[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      int v8 = *v7;
      sub_4636C(v6);
      if (v8 == a2) {
        goto LABEL_8;
      }
    }
    else if (*v7 == a2)
    {
      goto LABEL_8;
    }
    v4 += 2;
  }
  while (v4 != v5);
  uint64_t v4 = v5;
LABEL_8:
  if (v4 == *(int ***)(a1 + 104))
  {
LABEL_11:
    uint64_t v10 = sub_32A48(23);
    if (*(unsigned char *)(v10 + 8))
    {
      long long v11 = *(NSObject **)v10;
      if (*(void *)v10)
      {
        BOOL result = os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG);
        if (!result) {
          return result;
        }
        sub_2417C(v18, a2);
        int v12 = v19;
        long long v13 = (void **)v18[0];
        sub_2417C(__p, *(_DWORD *)(a1 + 144));
        uint64_t v14 = v18;
        if (v12 < 0) {
          uint64_t v14 = v13;
        }
        if (v17 >= 0) {
          CFMutableArrayRef v15 = __p;
        }
        else {
          CFMutableArrayRef v15 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315906;
        uint64_t v21 = "Port.cpp";
        __int16 v22 = 1024;
        int v23 = 665;
        __int16 v24 = 2080;
        int v25 = v14;
        __int16 v26 = 2080;
        int v27 = v15;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d Unable to locate unknown sub-port (%s) type on port with type %s.", buf, 0x26u);
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
    }
  }
  else if (*((unsigned char *)*v4 + 16))
  {
    return *((unsigned char *)*v4 + 24) != 0;
  }
  return 0;
}

void sub_105D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_105D50(uint64_t a1, uint64_t *a2)
{
  uint64_t v15 = a1 + 320;
  char v16 = (*(uint64_t (**)(void))(*(void *)(a1 + 320) + 16))();
  if (*(unsigned char *)(a1 + 432))
  {
    uint64_t v4 = (os_log_t *)sub_32A48(23);
    long long v5 = *v4;
    if (*v4 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_D98B8(v13, (uint64_t)a2);
      int v6 = v14;
      long long v7 = (void **)v13[0];
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
      int v8 = v13;
      if (v6 < 0) {
        int v8 = v7;
      }
      if (v12 >= 0) {
        std::string::size_type v9 = __p;
      }
      else {
        std::string::size_type v9 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315906;
      __int16 v18 = "Port.cpp";
      __int16 v19 = 1024;
      int v20 = 680;
      __int16 v21 = 2080;
      __int16 v22 = v8;
      __int16 v23 = 2080;
      __int16 v24 = v9;
      _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Not adding sibling port %s to %s. This Port is already torn down", buf, 0x26u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
    }
  }
  else
  {
    sub_3590((uint64_t *)(a1 + 272), *a2, a2[1]);
  }
  return sub_3BCAC(&v15);
}

void sub_105EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_3BCAC(&a18);
  _Unwind_Resume(a1);
}

unsigned char *sub_105F14(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a2 + 320;
  char v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 320) + 16))(a2 + 320);
  sub_105F9C(a1, *(void *)(a2 + 280), a2 + 272);
  return sub_3BCAC(&v5);
}

void sub_105F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t *sub_105F9C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      sub_10600C(a1, (uint64_t *)(v5 + 16));
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_105FF8(_Unwind_Exception *a1)
{
  sub_8108(v1);
  _Unwind_Resume(a1);
}

void *sub_10600C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = 0;
  v4[1] = 0;
  BOOL result = sub_106070(v4 + 2, a2);
  uint64_t v6 = *a1;
  *uint64_t v4 = *a1;
  v4[1] = a1;
  *(void *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void *sub_106070(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *a2;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v8 = (std::__shared_weak_count *)a1[1];
      *a1 = v7;
      a1[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      sub_4636C(v6);
    }
    else
    {
      std::string::size_type v9 = (std::__shared_weak_count *)a1[1];
      *a1 = 0;
      a1[1] = 0;
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  return a1;
}

BOOL sub_1060F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v22 = a1 + 320;
  char v23 = (*(uint64_t (**)(void))(*(void *)(a1 + 320) + 16))();
  int v4 = *(unsigned __int8 *)(a1 + 432);
  if (*(unsigned char *)(a1 + 432))
  {
    uint64_t v5 = (os_log_t *)sub_32A48(23);
    uint64_t v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      sub_D98B8(v20, (uint64_t)a2);
      int v7 = v21;
      int v8 = (void **)v20[0];
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
      std::string::size_type v9 = v20;
      if (v7 < 0) {
        std::string::size_type v9 = v8;
      }
      if (v19 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315906;
      int v25 = "Port.cpp";
      __int16 v26 = 1024;
      int v27 = 710;
      __int16 v28 = 2080;
      int v29 = v9;
      __int16 v30 = 2080;
      CFStringRef v31 = v10;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Not adding partner port %s to %s. This Port is already torn down", buf, 0x26u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
    }
  }
  else if ((void *)(a1 + 296) == sub_1063DC(*(void **)(a1 + 304), (void *)(a1 + 296), a2))
  {
    long long v11 = (os_log_t *)sub_32A48(23);
    char v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      sub_D98B8(v20, (uint64_t)a2);
      int v13 = v21;
      char v14 = (void **)v20[0];
      sub_4F64((uint64_t)__p, (os_unfair_lock_t)(a1 + 8));
      uint64_t v15 = v20;
      if (v13 < 0) {
        uint64_t v15 = v14;
      }
      if (v19 >= 0) {
        char v16 = __p;
      }
      else {
        char v16 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315906;
      int v25 = "Port.cpp";
      __int16 v26 = 1024;
      int v27 = 717;
      __int16 v28 = 2080;
      int v29 = v15;
      __int16 v30 = 2080;
      CFStringRef v31 = v16;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d adding partner port (%s) to %s", buf, 0x26u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
    }
    sub_3590((uint64_t *)(a1 + 296), *a2, a2[1]);
  }
  sub_3BCAC(&v22);
  return v4 == 0;
}

void sub_10639C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_3BCAC(&a18);
  _Unwind_Resume(a1);
}

void *sub_1063DC(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      uint64_t v6 = (std::__shared_weak_count *)v3[3];
      if (v6)
      {
        int v7 = std::__shared_weak_count::lock(v6);
        int v8 = v7;
        if (v7)
        {
          uint64_t v9 = v3[2];
          atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v7);
        }
        else
        {
          uint64_t v9 = 0;
        }
      }
      else
      {
        uint64_t v9 = 0;
        int v8 = 0;
      }
      uint64_t v10 = (std::__shared_weak_count *)a3[1];
      if (v10)
      {
        long long v11 = std::__shared_weak_count::lock(v10);
        char v12 = v11;
        if (v11)
        {
          uint64_t v13 = *a3;
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v11);
          if (v8) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v13 = 0;
          if (v8)
          {
LABEL_12:
            char v14 = std::__shared_weak_count::lock(v8);
            if (!v14) {
              uint64_t v9 = 0;
            }
            if (!v12) {
              goto LABEL_21;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        uint64_t v13 = 0;
        char v12 = 0;
        if (v8) {
          goto LABEL_12;
        }
      }
      uint64_t v9 = 0;
      char v14 = 0;
      if (!v12) {
        goto LABEL_21;
      }
LABEL_18:
      uint64_t v15 = std::__shared_weak_count::lock(v12);
      if (v15)
      {
        BOOL v16 = v9 == v13;
        sub_4636C(v15);
        if (!v14) {
          goto LABEL_23;
        }
LABEL_22:
        sub_4636C(v14);
        goto LABEL_23;
      }
LABEL_21:
      BOOL v16 = v9 == 0;
      if (v14) {
        goto LABEL_22;
      }
LABEL_23:
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      if (v16) {
        return v3;
      }
      uint64_t v3 = (void *)v3[1];
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

unsigned char *sub_10653C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = a2 + 320;
  char v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 320) + 16))(a2 + 320);
  sub_105F9C(a1, *(void *)(a2 + 304), a2 + 296);
  return sub_3BCAC(&v5);
}

void sub_1065B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_1065C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10665C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, long long *a8, uint64_t a9)
{
  uint64_t v10 = (void *)sub_105158(a1, a2, a3, a4, a5, a6, a7, a8);
  void *v10 = off_621D00;
  sub_1065C4((uint64_t)(v10 + 65), a9);
  sub_AEF58(a1 + 552, (uint64_t)"Port Dynamic mutex");
  *(unsigned char *)(a1 + 640) = 0;
  return a1;
}

void sub_1066D0(_Unwind_Exception *a1)
{
  sub_FB930(v2);
  sub_103C0C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1066F4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, long long *a8, char a9, char a10)
{
  uint64_t v11 = sub_105158(a1, a2, a3, a4, a5, a6, a7, a8);
  *(void *)uint64_t v11 = off_621F38;
  *(unsigned char *)(v11 + 520) = a10 ^ 1;
  *(unsigned char *)(v11 + 521) = a9;
  *(void *)(v11 + 528) = v11 + 528;
  *(void *)(v11 + 536) = v11 + 528;
  *(void *)(v11 + 544) = 0;
  sub_AEF58(v11 + 552, (uint64_t)"Port Routability Mutex");
  if ((*(_WORD *)(a1 + 184) & 0x40) == 0)
  {
    uint64_t v13 = (os_log_t *)sub_32A48(13);
    char v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      char v17 = "Port.cpp";
      __int16 v18 = 1024;
      int v19 = 943;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"CanSetRoutable() must be true.\"", (uint8_t *)&v16, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "CanSetRoutable() must be true.");
  }
  return a1;
}

void sub_106864(_Unwind_Exception *a1)
{
  sub_AEF0C(v3);
  sub_45F50(v2);
  sub_103C0C(v1);
  _Unwind_Resume(a1);
}

void sub_1068A4(uint64_t a1)
{
  sub_549A4(&v51, (uint64_t *)(a1 + 32), "", 57);
  uint64_t v2 = v51;
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 312))(*(void *)(a1 + 8), v51);
  unsigned int v4 = *(_DWORD *)(v2 + 144);
  if (v5) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    char v39 = (os_log_t *)sub_32A48(13);
    __int16 v40 = *v39;
    if (*v39 && os_log_type_enabled(*v39, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__dst, v4);
      unsigned int v41 = v50 >= 0 ? __dst : (void **)__dst[0];
      *(_DWORD *)int buf = 136315650;
      __int16 v54 = "RoutingHandlerAction_SetDSPParameter.cpp";
      __int16 v55 = 1024;
      int v56 = 61;
      __int16 v57 = 2080;
      uint64_t v58 = v41;
      _os_log_impl(&def_1E50E8, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No dsp chain found for port type %s\"", buf, 0x1Cu);
      if (SHIBYTE(v50) < 0) {
        operator delete(__dst[0]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No dsp chain found for port type %s");
  }
  uint64_t v7 = *(void *)(v3 + 136);
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 120))(v7, *(unsigned int *)(a1 + 16)) & 1) == 0)
  {
    char v12 = (os_log_t *)sub_32A48(19);
    uint64_t v13 = *v12;
    if (!*v12 || !os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    if (*(char *)(v7 + 735) < 0)
    {
      sub_21E8C(__dst, *(void **)(v7 + 712), *(void *)(v7 + 720));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v7 + 712);
      uint64_t v50 = *(void *)(v7 + 728);
    }
    int v16 = SHIBYTE(v50);
    char v17 = (void **)__dst[0];
    sub_2417C(v47, *(_DWORD *)(a1 + 16));
    __int16 v18 = __dst;
    if (v16 < 0) {
      __int16 v18 = v17;
    }
    if (v48 >= 0) {
      int v19 = v47;
    }
    else {
      int v19 = (void **)v47[0];
    }
    *(_DWORD *)int buf = 136315906;
    __int16 v54 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v55 = 1024;
    int v56 = 67;
    __int16 v57 = 2080;
    uint64_t v58 = v18;
    __int16 v59 = 2080;
    double v60 = *(double *)&v19;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d DSPChain %s with AU %s not found", buf, 0x26u);
    goto LABEL_73;
  }
  if (!(*(unsigned int (**)(uint64_t, void, void, void))(*(void *)v7 + 56))(v7, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 48), 0))
  {
    char v14 = (os_log_t *)sub_32A48(19);
    uint64_t v15 = *v14;
    if (!*v14 || !os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR)) {
      goto LABEL_77;
    }
    if (*(char *)(v7 + 735) < 0)
    {
      sub_21E8C(__dst, *(void **)(v7 + 712), *(void *)(v7 + 720));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v7 + 712);
      uint64_t v50 = *(void *)(v7 + 728);
    }
    if (v50 >= 0) {
      int v20 = __dst;
    }
    else {
      int v20 = (void **)__dst[0];
    }
    sub_2417C(v47, *(_DWORD *)(a1 + 48));
    int v21 = SHIBYTE(v48);
    uint64_t v22 = (void **)v47[0];
    sub_2417C(v45, *(_DWORD *)(a1 + 16));
    char v23 = v47;
    if (v21 < 0) {
      char v23 = v22;
    }
    if (v46 >= 0) {
      __int16 v24 = v45;
    }
    else {
      __int16 v24 = (void **)v45[0];
    }
    *(_DWORD *)int buf = 136316162;
    __int16 v54 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v55 = 1024;
    int v56 = 85;
    __int16 v57 = 2080;
    uint64_t v58 = v20;
    __int16 v59 = 2080;
    double v60 = *(double *)&v23;
    __int16 v61 = 2080;
    uint64_t v62 = v24;
    _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP chain : %s does not have Parameter %s for AU : %s", buf, 0x30u);
    goto LABEL_71;
  }
  int v8 = (os_log_t *)sub_32A48(19);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = __dst;
    sub_2417C(__dst, *(_DWORD *)(a1 + 48));
    if (v50 < 0) {
      uint64_t v10 = (void **)__dst[0];
    }
    float v11 = *(float *)(a1 + 24);
    if (*(char *)(v7 + 735) < 0)
    {
      sub_21E8C(v47, *(void **)(v7 + 712), *(void *)(v7 + 720));
    }
    else
    {
      *(_OWORD *)char v47 = *(_OWORD *)(v7 + 712);
      uint64_t v48 = *(void *)(v7 + 728);
    }
    if (v48 >= 0) {
      int v25 = v47;
    }
    else {
      int v25 = (void **)v47[0];
    }
    sub_2417C(v45, *(_DWORD *)(a1 + 16));
    int v26 = v46;
    int v27 = (void **)v45[0];
    sub_2417C(__p, v4);
    __int16 v28 = v45;
    if (v26 < 0) {
      __int16 v28 = v27;
    }
    int v29 = (void **)__p[0];
    *(_DWORD *)int buf = 136316674;
    if (v44 >= 0) {
      int v29 = __p;
    }
    __int16 v54 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v55 = 1024;
    int v56 = 74;
    __int16 v57 = 2080;
    uint64_t v58 = v10;
    __int16 v59 = 2048;
    double v60 = v11;
    __int16 v61 = 2080;
    uint64_t v62 = v25;
    __int16 v63 = 2080;
    long long v64 = v28;
    __int16 v65 = 2080;
    uint64_t v66 = v29;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Parameter (%s, %f) for chain : %s AU : %s Port type : %s", buf, 0x44u);
    if (v44 < 0) {
      operator delete(__p[0]);
    }
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete(v47[0]);
    }
    if (SHIBYTE(v50) < 0) {
      operator delete(__dst[0]);
    }
  }
  if ((*(unsigned int (**)(uint64_t, void, void, void, float))(*(void *)v7 + 72))(v7, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 48), 0, *(float *)(a1 + 24)))
  {
    __int16 v30 = (os_log_t *)sub_32A48(19);
    CFStringRef v31 = *v30;
    if (*v30)
    {
      if (os_log_type_enabled(*v30, OS_LOG_TYPE_ERROR))
      {
        char v32 = __dst;
        sub_2417C(__dst, *(_DWORD *)(a1 + 48));
        if (v50 < 0) {
          char v32 = (void **)__dst[0];
        }
        float v33 = *(float *)(a1 + 24);
        if (*(char *)(v7 + 735) < 0)
        {
          sub_21E8C(v47, *(void **)(v7 + 712), *(void *)(v7 + 720));
        }
        else
        {
          *(_OWORD *)char v47 = *(_OWORD *)(v7 + 712);
          uint64_t v48 = *(void *)(v7 + 728);
        }
        if (v48 >= 0) {
          char v34 = v47;
        }
        else {
          char v34 = (void **)v47[0];
        }
        sub_2417C(v45, *(_DWORD *)(a1 + 16));
        int v35 = v46;
        __int16 v36 = (void **)v45[0];
        sub_2417C(__p, v4);
        int v37 = v45;
        if (v35 < 0) {
          int v37 = v36;
        }
        __int16 v38 = (void **)__p[0];
        *(_DWORD *)int buf = 136316674;
        if (v44 >= 0) {
          __int16 v38 = __p;
        }
        __int16 v54 = "RoutingHandlerAction_SetDSPParameter.cpp";
        __int16 v55 = 1024;
        int v56 = 80;
        __int16 v57 = 2080;
        uint64_t v58 = v32;
        __int16 v59 = 2048;
        double v60 = v33;
        __int16 v61 = 2080;
        uint64_t v62 = v34;
        __int16 v63 = 2080;
        long long v64 = v37;
        __int16 v65 = 2080;
        uint64_t v66 = v38;
        _os_log_impl(&def_1E50E8, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting DSP Parameter (%s, %f) for chain : %s AU : %s Port type : %s", buf, 0x44u);
        if (v44 < 0) {
          operator delete(__p[0]);
        }
LABEL_71:
        if (v46 < 0) {
          operator delete(v45[0]);
        }
LABEL_73:
        if (SHIBYTE(v48) < 0) {
          operator delete(v47[0]);
        }
        if (SHIBYTE(v50) < 0) {
          operator delete(__dst[0]);
        }
      }
    }
  }
LABEL_77:
  if (v52) {
    sub_4636C(v52);
  }
}

void sub_107028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a33) {
    sub_4636C(a33);
  }
  _Unwind_Resume(exception_object);
}

void sub_1070EC(uint64_t a1)
{
  sub_549A4(&v48, (uint64_t *)(a1 + 32), "", 24);
  uint64_t v2 = v48;
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 312))(*(void *)(a1 + 8), v48);
  unsigned int v4 = *(_DWORD *)(v2 + 144);
  if (v5) {
    BOOL v6 = v3 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    __int16 v36 = (os_log_t *)sub_32A48(13);
    int v37 = *v36;
    if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
    {
      sub_2417C(__dst, v4);
      __int16 v38 = v47 >= 0 ? __dst : (void **)__dst[0];
      *(_DWORD *)int buf = 136315650;
      uint64_t v51 = "RoutingHandlerAction_SetDSPParameter.cpp";
      __int16 v52 = 1024;
      int v53 = 28;
      __int16 v54 = 2080;
      __int16 v55 = v38;
      _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"No dsp chain found for port type %s\"", buf, 0x1Cu);
      if (SHIBYTE(v47) < 0) {
        operator delete(__dst[0]);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No dsp chain found for port type %s");
  }
  uint64_t v7 = *(void *)(v3 + 136);
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 120))(v7, *(unsigned int *)(a1 + 16)) & 1) == 0)
  {
    char v12 = (os_log_t *)sub_32A48(19);
    uint64_t v13 = *v12;
    if (!*v12 || !os_log_type_enabled(*v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_72;
    }
    sub_2417C(__dst, *(_DWORD *)(a1 + 16));
    if (v47 >= 0) {
      char v14 = __dst;
    }
    else {
      char v14 = (void **)__dst[0];
    }
    *(_DWORD *)int buf = 136315650;
    uint64_t v51 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v52 = 1024;
    int v53 = 33;
    __int16 v54 = 2080;
    __int16 v55 = v14;
    _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d DSPChain with AU %s not found", buf, 0x1Cu);
    goto LABEL_70;
  }
  if (!(*(unsigned int (**)(uint64_t, void, void, void))(*(void *)v7 + 56))(v7, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 48), 0))
  {
    uint64_t v15 = (os_log_t *)sub_32A48(19);
    int v16 = *v15;
    if (!*v15 || !os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_72;
    }
    if (*(char *)(v7 + 735) < 0)
    {
      sub_21E8C(__dst, *(void **)(v7 + 712), *(void *)(v7 + 720));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v7 + 712);
      uint64_t v47 = *(void *)(v7 + 728);
    }
    if (v47 >= 0) {
      char v17 = __dst;
    }
    else {
      char v17 = (void **)__dst[0];
    }
    sub_2417C(v44, *(_DWORD *)(a1 + 48));
    int v18 = SHIBYTE(v45);
    int v19 = (void **)v44[0];
    sub_2417C(v42, *(_DWORD *)(a1 + 16));
    int v20 = v44;
    if (v18 < 0) {
      int v20 = v19;
    }
    if (v43 >= 0) {
      int v21 = v42;
    }
    else {
      int v21 = (void **)v42[0];
    }
    *(_DWORD *)int buf = 136316162;
    uint64_t v51 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v52 = 1024;
    int v53 = 51;
    __int16 v54 = 2080;
    __int16 v55 = v17;
    __int16 v56 = 2080;
    double v57 = *(double *)&v20;
    __int16 v58 = 2080;
    __int16 v59 = v21;
    _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d DSP chain : %s does not have Parameter %s for AU : %s", buf, 0x30u);
    goto LABEL_66;
  }
  int v8 = (os_log_t *)sub_32A48(19);
  uint64_t v9 = *v8;
  if (*v8 && os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = __dst;
    sub_2417C(__dst, *(_DWORD *)(a1 + 48));
    if (v47 < 0) {
      uint64_t v10 = (void **)__dst[0];
    }
    float v11 = *(float *)(a1 + 20);
    if (*(char *)(v7 + 735) < 0)
    {
      sub_21E8C(v44, *(void **)(v7 + 712), *(void *)(v7 + 720));
    }
    else
    {
      *(_OWORD *)char v44 = *(_OWORD *)(v7 + 712);
      uint64_t v45 = *(void *)(v7 + 728);
    }
    if (v45 >= 0) {
      uint64_t v22 = v44;
    }
    else {
      uint64_t v22 = (void **)v44[0];
    }
    sub_2417C(v42, *(_DWORD *)(a1 + 16));
    int v23 = v43;
    __int16 v24 = (void **)v42[0];
    sub_2417C(__p, v4);
    int v25 = v42;
    if (v23 < 0) {
      int v25 = v24;
    }
    int v26 = (void **)__p[0];
    *(_DWORD *)int buf = 136316674;
    if (v41 >= 0) {
      int v26 = __p;
    }
    uint64_t v51 = "RoutingHandlerAction_SetDSPParameter.cpp";
    __int16 v52 = 1024;
    int v53 = 40;
    __int16 v54 = 2080;
    __int16 v55 = v10;
    __int16 v56 = 2048;
    double v57 = v11;
    __int16 v58 = 2080;
    __int16 v59 = v22;
    __int16 v60 = 2080;
    __int16 v61 = v25;
    __int16 v62 = 2080;
    __int16 v63 = v26;
    _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting Parameter (%s, %f) for chain : %s AU : %s Port type : %s", buf, 0x44u);
    if (v41 < 0) {
      operator delete(__p[0]);
    }
    if (v43 < 0) {
      operator delete(v42[0]);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v47) < 0) {
      operator delete(__dst[0]);
    }
  }
  if ((*(unsigned int (**)(uint64_t, void, void, void, float))(*(void *)v7 + 72))(v7, *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 48), 0, *(float *)(a1 + 20)))
  {
    int v27 = (os_log_t *)sub_32A48(19);
    __int16 v28 = *v27;
    if (*v27)
    {
      if (os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        int v29 = __dst;
        sub_2417C(__dst, *(_DWORD *)(a1 + 48));
        if (v47 < 0) {
          int v29 = (void **)__dst[0];
        }
        float v30 = *(float *)(a1 + 20);
        if (*(char *)(v7 + 735) < 0)
        {
          sub_21E8C(v44, *(void **)(v7 + 712), *(void *)(v7 + 720));
        }
        else
        {
          *(_OWORD *)char v44 = *(_OWORD *)(v7 + 712);
          uint64_t v45 = *(void *)(v7 + 728);
        }
        if (v45 >= 0) {
          CFStringRef v31 = v44;
        }
        else {
          CFStringRef v31 = (void **)v44[0];
        }
        sub_2417C(v42, *(_DWORD *)(a1 + 16));
        int v32 = v43;
        float v33 = (void **)v42[0];
        sub_2417C(__p, v4);
        char v34 = v42;
        if (v32 < 0) {
          char v34 = v33;
        }
        int v35 = (void **)__p[0];
        *(_DWORD *)int buf = 136316674;
        if (v41 >= 0) {
          int v35 = __p;
        }
        uint64_t v51 = "RoutingHandlerAction_SetDSPParameter.cpp";
        __int16 v52 = 1024;
        int v53 = 46;
        __int16 v54 = 2080;
        __int16 v55 = v29;
        __int16 v56 = 2048;
        double v57 = v30;
        __int16 v58 = 2080;
        __int16 v59 = v31;
        __int16 v60 = 2080;
        __int16 v61 = v34;
        __int16 v62 = 2080;
        __int16 v63 = v35;
        _os_log_impl(&def_1E50E8, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting DSP Parameter  (%s, %f) for chain : %s AU : %s Port type : %s", buf, 0x44u);
        if (v41 < 0) {
          operator delete(__p[0]);
        }
LABEL_66:
        if (v43 < 0) {
          operator delete(v42[0]);
        }
        if (SHIBYTE(v45) < 0) {
          operator delete(v44[0]);
        }
LABEL_70:
        if (SHIBYTE(v47) < 0) {
          operator delete(__dst[0]);
        }
      }
    }
  }
LABEL_72:
  if (v49) {
    sub_4636C(v49);
  }
}

void sub_107824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a33) {
    sub_4636C(a33);
  }
  _Unwind_Resume(exception_object);
}

void sub_1078E4(void *a1)
{
  *a1 = off_622168;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void *sub_107950(void *a1)
{
  *a1 = off_622168;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_10799C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 16), 1uLL, memory_order_relaxed);
  }
  sub_54694();
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource + 16))(caulk::alloc::realtime_safe_resource, 48, 8);
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = v2;
  *(void *)(v3 + 32) = v1;
  *(void *)uint64_t v3 = off_6222C0;
  *(void *)(v3 + 8) = 0;

  return caulk::concurrent::messenger::enqueue((caulk::concurrent::messenger *)&unk_669CD8, (caulk::concurrent::message *)v3);
}

void sub_107A48(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

caulk::concurrent::message **sub_107A60(caulk::concurrent::message *a1)
{
  uint64_t v2 = a1;
  sub_107AA8((uint64_t)a1);
  return sub_107ED4(&v2);
}

void sub_107A94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_107ED4((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void sub_107AA8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  v3[0] = *(void *)(a1 + 24);
  v3[1] = (uint64_t)v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_108038((uint64_t *)&v4, v3, 244);
  if (v4)
  {
    sub_1081C0(v4);
    sub_22210(&v7, "gm_mitigation");
    CFBooleanRef v8 = kCFBooleanFalse;
    v6[0] = &v7;
    v6[1] = 1;
    CFDictionaryRef v2 = sub_4D3D8((uint64_t)v6);
    if (v8) {
      CFRelease(v8);
    }
    if (v7) {
      CFRelease(v7);
    }
    CFRetain(v2);
    sub_F2254((uint64_t)v2, 8, 4);
    if (v2) {
      CFRelease(v2);
    }
    CFRelease(v2);
  }
  if (v5) {
    sub_4636C(v5);
  }
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_107BC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_107C1C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a2)
  {
    uint64_t v13 = *(const void **)(v12 - 48);
    if (v13) {
      CFRelease(v13);
    }
    char v14 = *(const void **)(v12 - 56);
    if (v14) {
      CFRelease(v14);
    }
    if (a12) {
      sub_4636C(a12);
    }
    JUMPOUT(0x107C84);
  }
  JUMPOUT(0x107C0CLL);
}

void sub_107C4C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
  {
    if (a12) {
      sub_4636C();
    }
    JUMPOUT(0x107C84);
  }
  JUMPOUT(0x107C0CLL);
}

void sub_107C5C(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x107C68);
  }
  JUMPOUT(0x107C0CLL);
}

void sub_107C78(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x107C84);
  }
  JUMPOUT(0x107C0CLL);
}

void sub_107E98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  JUMPOUT(0x107C0CLL);
}

caulk::concurrent::message **sub_107ED4(caulk::concurrent::message **a1)
{
  CFDictionaryRef v2 = *a1;
  *(void *)CFDictionaryRef v2 = off_6222E8;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 4);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  caulk::concurrent::message::~message(v2);
  (*(void (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*caulk::alloc::realtime_safe_resource
                                                                                 + 24))(caulk::alloc::realtime_safe_resource, v2, 48, 8);
  return a1;
}

void sub_107F6C(caulk::concurrent::message *this)
{
  *(void *)this = off_6222E8;
  CFDictionaryRef v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_107FDC(caulk::concurrent::message *this)
{
  *(void *)this = off_6222E8;
  CFDictionaryRef v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

std::__shared_weak_count *sub_108038(uint64_t *a1, uint64_t *a2, int a3)
{
  *a1 = 0;
  a1[1] = 0;
  char v5 = (std::__shared_weak_count *)a2[1];
  if (!v5
    || (BOOL result = std::__shared_weak_count::lock(v5), (a1[1] = (uint64_t)result) == 0)
    || (uint64_t v8 = *a2, *a1 = *a2, !v8))
  {
    uint64_t v9 = (os_log_t *)sub_32A48(13);
    uint64_t v10 = *v9;
    if (*v9)
    {
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315906;
        uint64_t v13 = "StandardUtilities.h";
        __int16 v14 = 1024;
        int v15 = 267;
        __int16 v16 = 2080;
        char v17 = "";
        __int16 v18 = 1024;
        int v19 = a3;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not lock weak ptr (%s:%d).\"", buf, 0x22u);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not lock weak ptr (%s:%d).");
  }
  return result;
}

void sub_108190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1081C0(unint64_t a1)
{
  CFDictionaryRef v2 = (std::recursive_mutex *)(a1 + 72);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 72));
  sub_1085E0();
  std::recursive_mutex::lock(&stru_64B528);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint64_t v6 = qword_64B570;
  if (!qword_64B570) {
    goto LABEL_12;
  }
  CFStringRef v7 = &qword_64B570;
  do
  {
    unint64_t v8 = *(void *)(v6 + 32);
    BOOL v9 = v8 >= v5;
    if (v8 >= v5) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      CFStringRef v7 = (uint64_t *)v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 != &qword_64B570 && v7[4] <= v5)
  {
    uint64_t v13 = (os_log_t *)sub_32A48(24);
    __int16 v14 = *v13;
    if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "GMMonitorIODelegate.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 107;
      __int16 v27 = 2048;
      unint64_t v28 = v5;
      _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_INFO, "%25s:%-5d Removing observer %zu", buf, 0x1Cu);
    }
    int v15 = (uint64_t *)v7[1];
    if (v15)
    {
      do
      {
        __int16 v16 = v15;
        int v15 = (uint64_t *)*v15;
      }
      while (v15);
    }
    else
    {
      char v17 = v7;
      do
      {
        __int16 v16 = (uint64_t *)v17[2];
        BOOL v18 = *v16 == (void)v17;
        char v17 = v16;
      }
      while (!v18);
    }
    if ((uint64_t *)qword_64B568 == v7) {
      qword_64B568 = (uint64_t)v16;
    }
    --qword_64B578;
    sub_89144((uint64_t *)qword_64B570, v7);
    int v19 = (std::__shared_weak_count *)v7[6];
    if (v19) {
      std::__shared_weak_count::__release_weak(v19);
    }
    operator delete(v7);
    if (!qword_64B578)
    {
      unsigned __int8 v20 = atomic_load((unsigned __int8 *)&qword_64B580 + 1);
      if (v20)
      {
        sub_564F8((uint64_t *)xmmword_64B518);
        atomic_store(0, (unsigned __int8 *)&qword_64B580 + 1);
        int v21 = (os_log_t *)sub_32A48(24);
        uint64_t v22 = *v21;
        if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = "GMMonitorIODelegate.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 116;
          _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d No more observers, unregistered monitor", buf, 0x12u);
        }
        sub_22210((CFStringRef *)&v24, "gm_inference_running");
        CFTypeRef cf = kCFBooleanFalse;
        *(void *)int buf = &v24;
        *(void *)&uint8_t buf[8] = 1;
        CFDictionaryRef v23 = sub_4D3D8((uint64_t)buf);
        if (cf) {
          CFRelease(cf);
        }
        if (v24) {
          CFRelease(v24);
        }
        CFRetain(v23);
        *(void *)int buf = v23;
        sub_F2254((uint64_t)v23, 8, 4);
        if (v23) {
          CFRelease(v23);
        }
        CFRelease(v23);
      }
    }
  }
  else
  {
LABEL_12:
    float v11 = (os_log_t *)sub_32A48(24);
    uint64_t v12 = *v11;
    if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "GMMonitorIODelegate.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 125;
      __int16 v27 = 2048;
      unint64_t v28 = v5;
      _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_INFO, "%25s:%-5d Did not find observer %zu", buf, 0x1Cu);
    }
  }
  std::recursive_mutex::unlock(&stru_64B528);

  std::recursive_mutex::unlock(v2);
}

void sub_108560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_564E4(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1085E0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64B598, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64B598))
  {
    sub_10865C();
    __cxa_guard_release(&qword_64B598);
  }
}

void sub_108644(_Unwind_Exception *a1)
{
}

void sub_10865C()
{
  xmmword_64B508 = 0u;
  xmmword_64B518 = 0u;
  std::recursive_mutex::recursive_mutex(&stru_64B528);
  qword_64B578 = 0;
  qword_64B570 = 0;
  qword_64B568 = (uint64_t)&qword_64B570;
  LOWORD(qword_64B580) = 0;
  BYTE2(qword_64B580) = 0;
  qword_64B588 = 0;
  sub_56854(v4);
  long long v0 = *(_OWORD *)v4;
  *(_OWORD *)unint64_t v4 = 0uLL;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)&xmmword_64B518 + 1);
  xmmword_64B518 = v0;
  if (v1)
  {
    sub_4636C(v1);
    if (*(void *)&v4[8]) {
      sub_4636C(*(std::__shared_weak_count **)&v4[8]);
    }
  }
  qword_64B588 = (uint64_t)sub_108828();
  *(_DWORD *)unint64_t v4 = 0;
  if (sub_1614F4(@"GMTimeoutOverride", @"com.apple.audio.virtualaudio", v4))
  {
    LODWORD(qword_64B590) = *(_DWORD *)v4;
    CFDictionaryRef v2 = (os_log_t *)sub_32A48(24);
    unint64_t v3 = *v2;
    if (*v2)
    {
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)unint64_t v4 = 136315650;
        *(void *)&void v4[4] = "GMMonitorIODelegate.cpp";
        *(_WORD *)&v4[12] = 1024;
        *(_DWORD *)&v4[14] = 136;
        __int16 v5 = 1024;
        int v6 = qword_64B590;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_INFO, "%25s:%-5d Using timeout of %u", v4, 0x18u);
      }
    }
  }
  else
  {
    LODWORD(qword_64B590) = 5;
  }
}

void sub_1087D4(_Unwind_Exception *a1)
{
  if (*((void *)&xmmword_64B518 + 1)) {
    sub_4636C(*((std::__shared_weak_count **)&xmmword_64B518 + 1));
  }
  if (*((void *)&xmmword_64B508 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&xmmword_64B508 + 1));
  }
  _Unwind_Resume(a1);
}

dispatch_block_t sub_108828()
{
  if (qword_64B588)
  {
    _Block_release((const void *)qword_64B588);
    qword_64B588 = 0;
  }
  long long v0 = xmmword_64B508;
  if (*((void *)&xmmword_64B508 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_64B508 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1174405120;
  uint64_t v3[2] = sub_108958;
  v3[3] = &unk_6221E0;
  long long v4 = v0;
  if (*((void *)&v0 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v0 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  dispatch_block_t v1 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS, v3);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v0 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v0 + 1));
  }
  return v1;
}

void sub_108900(void *a1)
{
  if (a1)
  {
    sub_108900(*a1);
    sub_108900(a1[1]);
    CFDictionaryRef v2 = (std::__shared_weak_count *)a1[6];
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(a1);
  }
}

void sub_108958(uint64_t a1)
{
  CFDictionaryRef v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      long long v4 = v3;
      uint64_t v5 = *(void *)(a1 + 32);
      if (v5)
      {
        int v6 = (os_log_t *)sub_32A48(24);
        CFStringRef v7 = *v6;
        if (*v6)
        {
          if (os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
          {
            int v8 = 136315394;
            BOOL v9 = "GMMonitorIODelegate.cpp";
            __int16 v10 = 1024;
            int v11 = 190;
            _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Lockout time complete. Disabling mitigation.", (uint8_t *)&v8, 0x12u);
          }
        }
        sub_108A94(v5, 0);
      }
      sub_4636C(v4);
    }
  }
}

void sub_108A50(_Unwind_Exception *a1)
{
  sub_4636C(v1);
  _Unwind_Resume(a1);
}

void sub_108A68(uint64_t a1)
{
  dispatch_block_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_108A78(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_108A94(uint64_t a1, unsigned __int8 a2)
{
  if (dispatch_get_specific("VirtualAudioQueueKey") != "VirtualAudioQueueKey")
  {
    long long v4 = (os_log_t *)sub_32A48(13);
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
      {
        int v17 = 136315394;
        BOOL v18 = "GMMonitorIODelegate.cpp";
        __int16 v19 = 1024;
        int v20 = 158;
        _os_log_impl(&def_1E50E8, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Should be called from the VirtualAudio queue!\"", (uint8_t *)&v17, 0x12u);
      }
    }
  }
  atomic_store(a2, (unsigned __int8 *)(a1 + 120));
  int v6 = (os_log_t *)sub_32A48(24);
  CFStringRef v7 = *v6;
  if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
  {
    unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 120));
    BOOL v18 = "GMMonitorIODelegate.cpp";
    int v17 = 136315650;
    if (v8) {
      BOOL v9 = "running";
    }
    else {
      BOOL v9 = "not running";
    }
    __int16 v19 = 1024;
    int v20 = 164;
    __int16 v21 = 2080;
    uint64_t v22 = v9;
    _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Notification received that inference is %s", (uint8_t *)&v17, 0x1Cu);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 32));
  __int16 v10 = *(void **)(a1 + 96);
  if (v10 != (void *)(a1 + 104))
  {
    do
    {
      int v11 = (std::__shared_weak_count *)v10[6];
      if (v11)
      {
        uint64_t v12 = v10[5];
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = std::__shared_weak_count::lock(v11);
        if (v13)
        {
          if (v12)
          {
            atomic_load((unsigned __int8 *)(a1 + 120));
            sub_108D00(*(void *)(v12 + 8), *(void *)(v12 + 16));
          }
          sub_4636C(v13);
        }
        std::__shared_weak_count::__release_weak(v11);
      }
      __int16 v14 = (void *)v10[1];
      if (v14)
      {
        do
        {
          int v15 = v14;
          __int16 v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (void *)v10[2];
          BOOL v16 = *v15 == (void)v10;
          __int16 v10 = v15;
        }
        while (!v16);
      }
      __int16 v10 = v15;
    }
    while (v15 != (void *)(a1 + 104));
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 32));
}

void sub_108CD4(_Unwind_Exception *exception_object)
{
}

void sub_108D00(uint64_t a1, uint64_t a2)
{
  if (a2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a2 + 16), 1uLL, memory_order_relaxed);
  }
  sub_13910();
  operator new();
}

void sub_108D9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_108DB4(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  dispatch_block_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  uint64_t v23 = a1;
  uint64_t v24 = v2;
  int v25 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v3 = *(unsigned __int8 *)(a1 + 16);
  char v26 = *(unsigned char *)(a1 + 16);
  sub_108038(&v27, &v24, 265);
  uint64_t v4 = v27;
  if (v27)
  {
    uint64_t v5 = (os_log_t *)sub_32A48(24);
    int v6 = *v5;
    if (*v5 && os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(v4 + 47) < 0)
      {
        sub_21E8C(__p, *(void **)(v4 + 24), *(void *)(v4 + 32));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(v4 + 24);
        uint64_t v35 = *(void *)(v4 + 40);
      }
      CFStringRef v7 = __p;
      if (v35 < 0) {
        CFStringRef v7 = (void **)__p[0];
      }
      *(void *)&uint8_t buf[4] = "GMMonitorIODelegate.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 271;
      unsigned __int8 v8 = "false";
      *(_DWORD *)int buf = 136315906;
      if (v3) {
        unsigned __int8 v8 = "true";
      }
      __int16 v30 = 2080;
      CFStringRef v31 = (const char *)v7;
      __int16 v32 = 2080;
      float v33 = v8;
      _os_log_impl(&def_1E50E8, v6, OS_LOG_TYPE_INFO, "%25s:%-5d Handling model manager inference mitigation IO delegate for chain %s. Mitigating? %s", buf, 0x26u);
      if (SHIBYTE(v35) < 0) {
        operator delete(__p[0]);
      }
    }
    BOOL v9 = *(std::__shared_weak_count **)(v4 + 56);
    if (v9)
    {
      __int16 v10 = std::__shared_weak_count::lock(v9);
      if (v10)
      {
        int v11 = v10;
        uint64_t v12 = *(void *)(v4 + 48);
        if (v12)
        {
          if (v3) {
            float v13 = 1.0;
          }
          else {
            float v13 = 0.0;
          }
          sub_22210((CFStringRef *)__p, "gm_mitigation");
          __int16 v14 = &kCFBooleanTrue;
          if (!v3) {
            __int16 v14 = &kCFBooleanFalse;
          }
          __p[1] = *(void **)v14;
          *(void *)int buf = __p;
          *(void *)&uint8_t buf[8] = 1;
          CFDictionaryRef v15 = sub_4D3D8((uint64_t)buf);
          if (__p[1]) {
            CFRelease(__p[1]);
          }
          if (__p[0]) {
            CFRelease(__p[0]);
          }
          CFRetain(v15);
          if (v3) {
            uint64_t v16 = 3;
          }
          else {
            uint64_t v16 = 4;
          }
          sub_F2254((uint64_t)v15, 8, v16);
          if (v15) {
            CFRelease(v15);
          }
          if ((sub_166230() & 1) == 0 && sub_F7F68("VA_DSPAdaptiveFiltering", 0x17uLL) == &qword_659450)
          {
            int v17 = 0;
          }
          else
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_659478))
            {
              qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_659478);
            }
            int v17 = (char *)os_signpost_id_generate((os_log_t)qword_659470);
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_659478))
            {
              qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
              __cxa_guard_release(&qword_659478);
            }
            if ((unint64_t)(v17 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
            {
              BOOL v18 = qword_659470;
              if (os_signpost_enabled((os_log_t)qword_659470))
              {
                if (v26) {
                  __int16 v19 = "true";
                }
                else {
                  __int16 v19 = "false";
                }
                *(_DWORD *)int buf = 136315138;
                *(void *)&uint8_t buf[4] = v19;
                _os_signpost_emit_with_name_impl(&def_1E50E8, v18, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v17, "VA_DSPAdaptiveFiltering", "Applying adaptive filtering for GM Coex Mitigation: %s", buf, 0xCu);
              }
            }
          }
          __p[0] = v17;
          uint64_t v20 = sub_32A48(42);
          if (*(unsigned char *)(v20 + 8))
          {
            __int16 v21 = *(NSObject **)v20;
            if (*(void *)v20)
            {
              if (os_log_type_enabled(*(os_log_t *)v20, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int buf = 136315650;
                *(void *)&uint8_t buf[4] = "SignpostUtilities.h";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&_DWORD buf[14] = 100;
                __int16 v30 = 2080;
                CFStringRef v31 = "kDSPAdaptiveFiltering";
                _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_DEBUG, "%25s:%-5d Starting measurement for signpost %s", buf, 0x1Cu);
              }
            }
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, void, float))(*(void *)v12 + 72))(v12, 1685287015, 1735222127, 0, v13);
          sub_1097E4((os_signpost_id_t *)__p);
          CFRelease(v15);
        }
        sub_4636C(v11);
      }
    }
  }
  if (v28) {
    sub_4636C(v28);
  }
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  return sub_5098(&v23);
}

void sub_10923C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, long long buf, long long a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a14) {
    sub_4636C(a14);
  }
  if (a2 == 3)
  {
    uint64_t v22 = __cxa_begin_catch(a1);
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = v22[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v25;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 289;
      char v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v27 = v24;
      uint32_t v28 = 40;
LABEL_17:
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else
  {
    int v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int16 v30 = v29;
      CFStringRef v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v33;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 289;
        char v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v27 = v32;
        uint32_t v28 = 44;
        goto LABEL_17;
      }
    }
    else
    {
      char v34 = (os_log_t *)sub_32A48(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 289;
        char v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v27 = v35;
        uint32_t v28 = 34;
        goto LABEL_17;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x109180);
}

void sub_109544(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, long long a16, __int16 a17, __int16 a18, int a19, int a20)
{
  if (!a2) {
    JUMPOUT(0x10929CLL);
  }
  __cxa_end_catch();
  if (a11) {
    std::__shared_weak_count::__release_weak(a11);
  }
  if (a2 == 3)
  {
    uint64_t v22 = __cxa_begin_catch(a1);
    uint64_t v23 = (os_log_t *)sub_32A48(13);
    os_log_t v24 = *v23;
    if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
    {
      int v25 = v22[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a16) = 1024;
      DWORD1(a16) = v25;
      WORD4(a16) = 2080;
      *(void *)((char *)&a16 + 10) = "";
      a18 = 1024;
      a19 = 98;
      char v26 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v27 = v24;
      uint32_t v28 = 40;
LABEL_15:
      _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, v28);
    }
  }
  else
  {
    int v29 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      __int16 v30 = v29;
      CFStringRef v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = (*(uint64_t (**)(void *))(*(void *)v30 + 16))(v30);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = v33;
        WORD6(a16) = 2080;
        *(void *)((char *)&a16 + 14) = "";
        HIWORD(a19) = 1024;
        a20 = 98;
        char v26 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v27 = v32;
        uint32_t v28 = 44;
        goto LABEL_15;
      }
    }
    else
    {
      char v34 = (os_log_t *)sub_32A48(13);
      os_log_t v35 = *v34;
      if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a16) = 2080;
        *(void *)((char *)&a16 + 4) = "";
        WORD6(a16) = 1024;
        *(_DWORD *)((char *)&a16 + 14) = 98;
        char v26 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v27 = v35;
        uint32_t v28 = 34;
        goto LABEL_15;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x10918CLL);
}

void sub_1097AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

os_signpost_id_t *sub_1097E4(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    int v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        unsigned __int8 v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 100;
        __int16 v11 = 2080;
        uint64_t v12 = "kDSPAdaptiveFiltering";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_DSPAdaptiveFiltering", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_109974(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_109980(caulk::concurrent::message *this)
{
  *(void *)this = off_6222E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  caulk::concurrent::message::~message(this);

  operator delete();
}

void sub_1099F0(caulk::concurrent::message *this)
{
  *(void *)this = off_6222E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  caulk::concurrent::message::~message(this);
}

void sub_109A4C(unint64_t a1)
{
  uint64_t v2 = (std::recursive_mutex *)(a1 + 72);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 72));
  uint64_t v4 = *(void *)(a1 + 8);
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1085E0();
  unint64_t v5 = 0x9DDFEA08EB382D69 * (((8 * a1) + 8) ^ HIDWORD(a1));
  unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a1) ^ (v5 >> 47) ^ v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    unsigned __int8 v8 = std::__shared_weak_count::lock(v3);
    if (v8 && v4)
    {
      __int16 v9 = (os_log_t *)sub_32A48(24);
      int v10 = *v9;
      if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(v4 + 47) < 0)
        {
          sub_21E8C(__p, *(void **)(v4 + 24), *(void *)(v4 + 32));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(v4 + 24);
          uint64_t v39 = *(void *)(v4 + 40);
        }
        float v13 = __p;
        if (v39 < 0) {
          float v13 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "GMMonitorIODelegate.cpp";
        __int16 v42 = 1024;
        int v43 = 72;
        __int16 v44 = 2080;
        unint64_t v45 = (unint64_t)v13;
        __int16 v46 = 2048;
        unint64_t v47 = v7;
        _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_INFO, "%25s:%-5d Adding model manager monitor observer %s (hash %zu)", buf, 0x26u);
        if (SHIBYTE(v39) < 0) {
          operator delete(__p[0]);
        }
      }
      std::recursive_mutex::lock(&stru_64B528);
      uint64_t v14 = qword_64B570;
      if (qword_64B570)
      {
        CFDictionaryRef v15 = &qword_64B570;
        uint64_t v16 = qword_64B570;
        do
        {
          unint64_t v17 = *(void *)(v16 + 32);
          BOOL v18 = v17 >= v7;
          if (v17 >= v7) {
            __int16 v19 = (uint64_t *)v16;
          }
          else {
            __int16 v19 = (uint64_t *)(v16 + 8);
          }
          if (v18) {
            CFDictionaryRef v15 = (uint64_t *)v16;
          }
          uint64_t v16 = *v19;
        }
        while (*v19);
        if (v15 != &qword_64B570 && v7 >= v15[4])
        {
          atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v20 = (std::__shared_weak_count *)v15[6];
          v15[5] = v4;
          v15[6] = (uint64_t)v3;
          if (v20) {
            std::__shared_weak_count::__release_weak(v20);
          }
          goto LABEL_71;
        }
      }
      else
      {
        CFDictionaryRef v15 = &qword_64B570;
      }
      if (v15 == &qword_64B570 || (unint64_t v21 = v15[4], v7 < v21))
      {
        uint64_t v22 = *v15;
        if ((uint64_t *)qword_64B568 == v15)
        {
          os_log_t v24 = v15;
LABEL_52:
          if (v22) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = v15;
          }
          if (v22) {
            char v26 = v24 + 1;
          }
          else {
            char v26 = v15;
          }
          goto LABEL_58;
        }
        if (v22)
        {
          uint64_t v23 = *v15;
          do
          {
            os_log_t v24 = (uint64_t *)v23;
            uint64_t v23 = *(void *)(v23 + 8);
          }
          while (v23);
        }
        else
        {
          int v29 = v15;
          do
          {
            os_log_t v24 = (uint64_t *)v29[2];
            BOOL v36 = *v24 == (void)v29;
            int v29 = v24;
          }
          while (v36);
        }
        if (v24[4] < v7) {
          goto LABEL_52;
        }
        if (qword_64B570)
        {
          char v26 = &qword_64B570;
          do
          {
            while (1)
            {
              uint64_t v27 = (uint64_t *)v14;
              unint64_t v31 = *(void *)(v14 + 32);
              if (v7 >= v31) {
                break;
              }
              uint64_t v14 = *v27;
              char v26 = v27;
              if (!*v27) {
                goto LABEL_58;
              }
            }
            if (v31 >= v7) {
              break;
            }
            char v26 = v27 + 1;
            uint64_t v14 = v27[1];
          }
          while (v14);
        }
        else
        {
          uint64_t v27 = &qword_64B570;
          char v26 = &qword_64B570;
        }
      }
      else
      {
        if (v21 >= v7)
        {
          *(void *)int buf = v15;
          char v26 = (uint64_t *)buf;
          uint64_t v27 = v15;
          if (v15) {
            goto LABEL_71;
          }
LABEL_59:
          __int16 v30 = (uint64_t *)operator new(0x38uLL);
          void v30[4] = v7;
          v30[5] = v4;
          v30[6] = (uint64_t)v3;
          atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          *__int16 v30 = 0;
          v30[1] = 0;
          v30[2] = (uint64_t)v27;
          *char v26 = (uint64_t)v30;
          if (*(void *)qword_64B568)
          {
            qword_64B568 = *(void *)qword_64B568;
            __int16 v30 = (uint64_t *)*v26;
          }
          sub_46D00((uint64_t *)qword_64B570, v30);
          ++qword_64B578;
LABEL_71:
          unsigned __int8 v32 = atomic_load((unsigned __int8 *)&qword_64B580 + 1);
          if ((v32 & 1) == 0)
          {
            if (qword_64B578)
            {
              v40[0] = off_622240;
              v40[1] = sub_10A12C;
              v40[3] = v40;
              sub_562AC((unint64_t *)xmmword_64B518, (uint64_t)v40);
              sub_56A54(v40);
              atomic_store(1u, (unsigned __int8 *)&qword_64B580 + 1);
              uint64_t v33 = (os_log_t *)sub_32A48(24);
              char v34 = *v33;
              if (*v33)
              {
                if (os_log_type_enabled(*v33, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)int buf = 136315394;
                  *(void *)&uint8_t buf[4] = "GMMonitorIODelegate.cpp";
                  __int16 v42 = 1024;
                  int v43 = 83;
                  _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_INFO, "%25s:%-5d Central model manager inference handler is created", buf, 0x12u);
                }
              }
            }
          }
          std::recursive_mutex::unlock(&stru_64B528);
          atomic_load((unsigned __int8 *)&qword_64B580);
          sub_108D00(*(void *)(v4 + 8), *(void *)(v4 + 16));
        }
        char v26 = v15 + 1;
        int v25 = (uint64_t *)v15[1];
        if (v25)
        {
          do
          {
            char v26 = v25;
            int v25 = (uint64_t *)*v25;
            uint64_t v27 = v26;
            uint32_t v28 = v26;
          }
          while (v25);
        }
        else
        {
          uint32_t v28 = v15;
          do
          {
            os_log_t v35 = v28;
            uint32_t v28 = (uint64_t *)v28[2];
          }
          while ((uint64_t *)*v28 != v35);
          uint64_t v27 = v15;
        }
        if (v28 != &qword_64B570)
        {
          if (v7 < v28[4])
          {
            BOOL v36 = 1;
          }
          else
          {
            uint64_t v27 = &qword_64B570;
            char v26 = &qword_64B570;
            BOOL v36 = qword_64B570 == 0;
          }
          if (!v36)
          {
            char v26 = &qword_64B570;
            do
            {
              while (1)
              {
                uint64_t v27 = (uint64_t *)v14;
                unint64_t v37 = *(void *)(v14 + 32);
                if (v7 >= v37) {
                  break;
                }
                uint64_t v14 = *v27;
                char v26 = v27;
                if (!*v27) {
                  goto LABEL_58;
                }
              }
              if (v37 >= v7) {
                break;
              }
              char v26 = v27 + 1;
              uint64_t v14 = v27[1];
            }
            while (v14);
          }
        }
      }
LABEL_58:
      if (*v26) {
        goto LABEL_71;
      }
      goto LABEL_59;
    }
  }
  else
  {
    unsigned __int8 v8 = 0;
  }
  __int16 v11 = (os_log_t *)sub_32A48(24);
  uint64_t v12 = *v11;
  if (*v11 && os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "GMMonitorIODelegate.cpp";
    __int16 v42 = 1024;
    int v43 = 96;
    __int16 v44 = 2048;
    unint64_t v45 = v7;
    _os_log_impl(&def_1E50E8, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to add model manager monitor observer for chain at %zu to central callback handler", buf, 0x1Cu);
  }
  if (v8)
  {
    sub_4636C(v8);
    if (!v3) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v3)
  {
LABEL_16:
    std::__shared_weak_count::__release_weak(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
LABEL_17:
  std::recursive_mutex::unlock(v2);
}

void sub_10A028(_Unwind_Exception *a1)
{
  sub_4636C(v3);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10A094(uint64_t a1, unsigned __int8 *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t sub_10A0A8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_622240;
  a2[1] = v2;
  return result;
}

void *sub_10A0CC(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_622240;
  result[1] = v3;
  return result;
}

void sub_10A114()
{
}

void sub_10A12C(int a1)
{
  sub_1085E0();
  BYTE2(qword_64B580) = a1;
  sub_22210((CFStringRef *)&v12, "gm_inference_running");
  uint64_t v2 = (CFTypeRef *)&kCFBooleanTrue;
  if (!a1) {
    uint64_t v2 = (CFTypeRef *)&kCFBooleanFalse;
  }
  CFTypeRef cf = *v2;
  *(void *)int buf = &v12;
  *(void *)&uint8_t buf[8] = 1;
  CFDictionaryRef v3 = sub_4D3D8((uint64_t)buf);
  if (cf) {
    CFRelease(cf);
  }
  if (v12) {
    CFRelease(v12);
  }
  CFRetain(v3);
  if (a1) {
    uint64_t v4 = 3;
  }
  else {
    uint64_t v4 = 4;
  }
  sub_F2254((uint64_t)v3, 8, v4);
  if (v3) {
    CFRelease(v3);
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)&qword_64B580);
  if ((v5 & 1) == 0)
  {
    if (!BYTE2(qword_64B580))
    {
LABEL_20:
      __int16 v11 = &xmmword_64B508;
      unsigned __int8 v8 = sub_13910();
      if (dispatch_get_specific("VirtualAudioQueueKey") == "VirtualAudioQueueKey")
      {
        sub_108A94((uint64_t)&xmmword_64B508, BYTE2(qword_64B580));
      }
      else
      {
        CFTypeRef v12 = &v11;
        *(void *)int buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&_DWORD buf[16] = sub_10A674;
        CFDictionaryRef v15 = &unk_622210;
        uint64_t v16 = &v12;
        dispatch_sync(v8, buf);
      }
      goto LABEL_24;
    }
LABEL_16:
    unint64_t v6 = (os_log_t *)sub_32A48(24);
    unint64_t v7 = *v6;
    if (*v6 && os_log_type_enabled(*v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "GMMonitorIODelegate.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 56;
      _os_log_impl(&def_1E50E8, v7, OS_LOG_TYPE_INFO, "%25s:%-5d Mitigation is required again. Cancelling any existing lockout.", buf, 0x12u);
    }
    dispatch_block_cancel((dispatch_block_t)qword_64B588);
    goto LABEL_20;
  }
  if (BYTE2(qword_64B580)) {
    goto LABEL_16;
  }
  qword_64B588 = (uint64_t)sub_108828();
  dispatch_time_t v9 = dispatch_time(0, 1000000000 * qword_64B590);
  int v10 = sub_13910();
  dispatch_after(v9, v10, (dispatch_block_t)qword_64B588);
LABEL_24:
  if (v3) {
    CFRelease(v3);
  }
}

void sub_10A3A8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CFTypeRef a11, CFTypeRef cf, long long buf, long long a14, __int16 a15, __int16 a16, int a17, int a18)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  if (a2 == 3)
  {
    __int16 v19 = __cxa_begin_catch(a1);
    uint64_t v20 = (os_log_t *)sub_32A48(13);
    os_log_t v21 = *v20;
    if (*v20 && os_log_type_enabled(*v20, OS_LOG_TYPE_ERROR))
    {
      int v22 = v19[2];
      LODWORD(buf) = 136316162;
      *(void *)((char *)&buf + 4) = "StandardUtilities.h";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 429;
      WORD1(a14) = 1024;
      DWORD1(a14) = v22;
      WORD4(a14) = 2080;
      *(void *)((char *)&a14 + 10) = "";
      a16 = 1024;
      a17 = 35;
      uint64_t v23 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      os_log_t v24 = v21;
      uint32_t v25 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, v23, (uint8_t *)&buf, v25);
    }
  }
  else
  {
    char v26 = __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      uint64_t v27 = v26;
      uint32_t v28 = (os_log_t *)sub_32A48(13);
      os_log_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = (*(uint64_t (**)(void *))(*(void *)v27 + 16))(v27);
        LODWORD(buf) = 136316162;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 430;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = v30;
        WORD6(a14) = 2080;
        *(void *)((char *)&a14 + 14) = "";
        HIWORD(a17) = 1024;
        a18 = 35;
        uint64_t v23 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        os_log_t v24 = v29;
        uint32_t v25 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v31 = (os_log_t *)sub_32A48(13);
      os_log_t v32 = *v31;
      if (*v31 && os_log_type_enabled(*v31, OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf) = 136315906;
        *(void *)((char *)&buf + 4) = "StandardUtilities.h";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 431;
        WORD1(a14) = 2080;
        *(void *)((char *)&a14 + 4) = "";
        WORD6(a14) = 1024;
        *(_DWORD *)((char *)&a14 + 14) = 35;
        uint64_t v23 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        os_log_t v24 = v32;
        uint32_t v25 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x10A36CLL);
}

void sub_10A674(uint64_t a1)
{
}

void sub_10A6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, __int16 a11, __int16 a12, int a13, int a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a2 == 3)
  {
    CFDictionaryRef v15 = __cxa_begin_catch(exception_object);
    uint64_t v16 = (os_log_t *)sub_32A48(13);
    os_log_t v17 = *v16;
    if (*v16 && os_log_type_enabled(*v16, OS_LOG_TYPE_ERROR))
    {
      int v18 = v15[2];
      LODWORD(a9) = 136316162;
      *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 429;
      WORD1(a10) = 1024;
      DWORD1(a10) = v18;
      WORD4(a10) = 2080;
      *(void *)((char *)&a10 + 10) = "";
      a12 = 1024;
      a13 = 47;
      __int16 v19 = "%25s:%-5d CAException caught by ExceptionBarrier: %d (%s:%d).";
      uint64_t v20 = v17;
      uint32_t v21 = 40;
LABEL_13:
      _os_log_impl(&def_1E50E8, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&a9, v21);
    }
  }
  else
  {
    int v22 = __cxa_begin_catch(exception_object);
    if (a2 == 2)
    {
      uint64_t v23 = v22;
      os_log_t v24 = (os_log_t *)sub_32A48(13);
      os_log_t v25 = *v24;
      if (*v24 && os_log_type_enabled(*v24, OS_LOG_TYPE_ERROR))
      {
        uint64_t v26 = (*(uint64_t (**)(void *))(*(void *)v23 + 16))(v23);
        LODWORD(a9) = 136316162;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 430;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = v26;
        WORD6(a10) = 2080;
        *(void *)((char *)&a10 + 14) = "";
        HIWORD(a13) = 1024;
        a14 = 47;
        __int16 v19 = "%25s:%-5d Standard Library exception caught by ExceptionBarrier: %s (%s:%d).";
        uint64_t v20 = v25;
        uint32_t v21 = 44;
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v27 = (os_log_t *)sub_32A48(13);
      os_log_t v28 = *v27;
      if (*v27 && os_log_type_enabled(*v27, OS_LOG_TYPE_ERROR))
      {
        LODWORD(a9) = 136315906;
        *(void *)((char *)&a9 + 4) = "StandardUtilities.h";
        WORD6(a9) = 1024;
        *(_DWORD *)((char *)&a9 + 14) = 431;
        WORD1(a10) = 2080;
        *(void *)((char *)&a10 + 4) = "";
        WORD6(a10) = 1024;
        *(_DWORD *)((char *)&a10 + 14) = 47;
        __int16 v19 = "%25s:%-5d Unknown exception caught by ExceptionBarrier (%s:%d).";
        uint64_t v20 = v28;
        uint32_t v21 = 34;
        goto LABEL_13;
      }
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x10A6B0);
}

void sub_10A938(unint64_t a1)
{
  sub_10A970(a1);

  operator delete();
}

unint64_t sub_10A970(unint64_t a1)
{
  uint64_t v2 = sub_32A48(24);
  if (*(unsigned char *)(v2 + 8))
  {
    CFDictionaryRef v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a1 + 47) < 0)
        {
          sub_21E8C(__p, *(void **)(a1 + 24), *(void *)(a1 + 32));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 24);
          uint64_t v10 = *(void *)(a1 + 40);
        }
        uint64_t v4 = __p;
        if (v10 < 0) {
          uint64_t v4 = (void **)__p[0];
        }
        *(_DWORD *)int buf = 136315650;
        CFTypeRef v12 = "GMMonitorIODelegate.cpp";
        __int16 v13 = 1024;
        int v14 = 257;
        __int16 v15 = 2080;
        uint64_t v16 = v4;
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Destroying model manager inference mitigation IO delegate for chain %s", buf, 0x1Cu);
        if (SHIBYTE(v10) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_1081C0(a1);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 72));
  unsigned __int8 v5 = *(NSObject **)(a1 + 64);
  if (v5) {
    dispatch_release(v5);
  }
  unint64_t v6 = *(std::__shared_weak_count **)(a1 + 56);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  unint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

void sub_10AADC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

unint64_t sub_10AAF0(uint64_t a1)
{
  return sub_10A970(a1 + 24);
}

void sub_10AAF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_622288;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10AB4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_622288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *sub_10AB6C(uint64_t a1, os_unfair_lock_s *a2)
{
  if (sub_10B3E8(a1, (unint64_t)a2) != a1)
  {
    __int16 v59 = (os_log_t *)sub_32A48(13);
    __int16 v60 = *v59;
    if (*v59 && os_log_type_enabled(*v59, OS_LOG_TYPE_ERROR))
    {
      sub_4F64((uint64_t)__p, a2 + 2);
      __int16 v61 = v67 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "PortManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 221;
      __int16 v69 = 2080;
      uint64_t v70 = v61;
      _os_log_impl(&def_1E50E8, v60, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Port %s is already in the container\"", buf, 0x1Cu);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Port %s is already in the container");
  }
  unsigned __int8 v5 = (void **)(a1 + 24);
  if (sub_10B490((void *)(a1 + 24), (unint64_t)a2))
  {
    __int16 v63 = (os_log_t *)sub_32A48(13);
    long long v64 = *v63;
    if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "FastLookupList.h";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 106;
      _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    __int16 v65 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v65, "Precondition failure.");
  }
  unint64_t v6 = operator new(0x18uLL);
  v6[1] = a1;
  void v6[2] = a2;
  uint64_t v7 = *(void *)a1;
  *unint64_t v6 = *(void *)a1;
  *(void *)(v7 + 8) = v6;
  *(void *)a1 = v6;
  ++*(void *)(a1 + 16);
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((((((unint64_t)a2 >> 3) & 0x3FFFFFF) << 6) | 8) ^ ((unint64_t)a2 >> 32));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (((unint64_t)a2 >> 32) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 32);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v2 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v2 = v10 % v11;
      }
    }
    else
    {
      unint64_t v2 = v10 & (v11 - 1);
    }
    __int16 v13 = (void *)*((void *)*v5 + v2);
    if (v13)
    {
      for (uint64_t i = (void *)*v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if ((os_unfair_lock_s *)i[2] == a2) {
            goto LABEL_76;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x20uLL);
  void *v16 = 0;
  v16[1] = v10;
  uint64_t v16[2] = a2;
  v16[3] = v6;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 48) + 1);
  float v18 = *(float *)(a1 + 56);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    else {
      int8x8_t prime = (int8x8_t)v20;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v11 = *(void *)(a1 + 32);
    }
    if (*(void *)&prime > v11) {
      goto LABEL_32;
    }
    if (*(void *)&prime < v11)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 48) / *(float *)(a1 + 56));
      if (v11 < 3 || (uint8x8_t v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (*(void *)&prime <= v29) {
        int8x8_t prime = (int8x8_t)v29;
      }
      if (*(void *)&prime >= v11)
      {
        unint64_t v11 = *(void *)(a1 + 32);
      }
      else
      {
        if (prime)
        {
LABEL_32:
          if (*(void *)&prime >> 61) {
            sub_60560();
          }
          uint64_t v23 = operator new(8 * *(void *)&prime);
          os_log_t v24 = *v5;
          *unsigned __int8 v5 = v23;
          if (v24) {
            operator delete(v24);
          }
          uint64_t v25 = 0;
          *(int8x8_t *)(a1 + 32) = prime;
          do
            *((void *)*v5 + v25++) = 0;
          while (*(void *)&prime != v25);
          uint64_t v26 = *(void **)(a1 + 40);
          if (v26)
          {
            unint64_t v27 = v26[1];
            uint8x8_t v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(void *)&prime) {
                v27 %= *(void *)&prime;
              }
            }
            else
            {
              v27 &= *(void *)&prime - 1;
            }
            *((void *)*v5 + v27) = a1 + 40;
            os_log_t v32 = (void *)*v26;
            if (*v26)
            {
              do
              {
                unint64_t v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(void *)&prime) {
                    v33 %= *(void *)&prime;
                  }
                }
                else
                {
                  v33 &= *(void *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*((void *)*v5 + v33))
                  {
                    *((void *)*v5 + v33) = v26;
                    goto LABEL_57;
                  }
                  *uint64_t v26 = *v32;
                  *os_log_t v32 = **((void **)*v5 + v33);
                  **((void **)*v5 + v33) = v32;
                  os_log_t v32 = v26;
                }
                unint64_t v33 = v27;
LABEL_57:
                uint64_t v26 = v32;
                os_log_t v32 = (void *)*v32;
                unint64_t v27 = v33;
              }
              while (v32);
            }
          }
          unint64_t v11 = (unint64_t)prime;
          goto LABEL_61;
        }
        __int16 v58 = *v5;
        *unsigned __int8 v5 = 0;
        if (v58) {
          operator delete(v58);
        }
        unint64_t v11 = 0;
        *(void *)(a1 + 32) = 0;
      }
    }
LABEL_61:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v2 = v10 % v11;
      }
      else {
        unint64_t v2 = v10;
      }
    }
    else
    {
      unint64_t v2 = (v11 - 1) & v10;
    }
  }
  char v34 = *v5;
  os_log_t v35 = (void *)*((void *)*v5 + v2);
  if (v35)
  {
    void *v16 = *v35;
LABEL_74:
    *os_log_t v35 = v16;
    goto LABEL_75;
  }
  void *v16 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v16;
  v34[v2] = a1 + 40;
  if (*v16)
  {
    unint64_t v36 = *(void *)(*v16 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11) {
        v36 %= v11;
      }
    }
    else
    {
      v36 &= v11 - 1;
    }
    os_log_t v35 = (char *)*v5 + 8 * v36;
    goto LABEL_74;
  }
LABEL_75:
  ++*(void *)(a1 + 48);
LABEL_76:
  unint64_t v37 = (uint64_t *)(a1 + 64);
  unint64_t os_unfair_lock_opaque = a2[36]._os_unfair_lock_opaque;
  unint64_t v39 = *(void *)(a1 + 72);
  if (v39)
  {
    uint8x8_t v40 = (uint8x8_t)vcnt_s8((int8x8_t)v39);
    v40.i16[0] = vaddlv_u8(v40);
    if (v40.u32[0] > 1uLL)
    {
      unint64_t v10 = a2[36]._os_unfair_lock_opaque;
      if (v39 <= os_unfair_lock_opaque) {
        unint64_t v10 = os_unfair_lock_opaque % v39;
      }
    }
    else
    {
      unint64_t v10 = (v39 - 1) & os_unfair_lock_opaque;
    }
    char v41 = *(void ***)(*v37 + 8 * v10);
    if (v41)
    {
      __int16 v42 = *v41;
      if (*v41)
      {
        do
        {
          unint64_t v43 = v42[1];
          if (v43 == os_unfair_lock_opaque)
          {
            if (*((_DWORD *)v42 + 4) == os_unfair_lock_opaque) {
              goto LABEL_115;
            }
          }
          else
          {
            if (v40.u32[0] > 1uLL)
            {
              if (v43 >= v39) {
                v43 %= v39;
              }
            }
            else
            {
              v43 &= v39 - 1;
            }
            if (v43 != v10) {
              break;
            }
          }
          __int16 v42 = (void *)*v42;
        }
        while (v42);
      }
    }
  }
  __int16 v44 = (void *)(a1 + 80);
  __int16 v42 = operator new(0x30uLL);
  *(void *)int buf = v42;
  *(void *)&uint8_t buf[8] = a1 + 80;
  *__int16 v42 = 0;
  v42[1] = os_unfair_lock_opaque;
  *((_DWORD *)v42 + 4) = os_unfair_lock_opaque;
  v42[3] = v42 + 3;
  v42[4] = v42 + 3;
  v42[5] = 0;
  _DWORD buf[16] = 1;
  float v45 = (float)(unint64_t)(*(void *)(a1 + 88) + 1);
  float v46 = *(float *)(a1 + 96);
  if (!v39 || (float)(v46 * (float)v39) < v45)
  {
    BOOL v47 = 1;
    if (v39 >= 3) {
      BOOL v47 = (v39 & (v39 - 1)) != 0;
    }
    unint64_t v48 = v47 | (2 * v39);
    unint64_t v49 = vcvtps_u32_f32(v45 / v46);
    if (v48 <= v49) {
      size_t v50 = v49;
    }
    else {
      size_t v50 = v48;
    }
    sub_6DEC4(a1 + 64, v50);
    unint64_t v39 = *(void *)(a1 + 72);
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v39 <= os_unfair_lock_opaque) {
        unint64_t v10 = os_unfair_lock_opaque % v39;
      }
      else {
        unint64_t v10 = os_unfair_lock_opaque;
      }
    }
    else
    {
      unint64_t v10 = (v39 - 1) & os_unfair_lock_opaque;
    }
  }
  uint64_t v51 = *v37;
  __int16 v52 = *(void **)(*v37 + 8 * v10);
  if (v52)
  {
    *__int16 v42 = *v52;
LABEL_113:
    *__int16 v52 = v42;
    goto LABEL_114;
  }
  *__int16 v42 = *v44;
  *__int16 v44 = v42;
  *(void *)(v51 + 8 * v10) = v44;
  if (*v42)
  {
    unint64_t v53 = *(void *)(*v42 + 8);
    if ((v39 & (v39 - 1)) != 0)
    {
      if (v53 >= v39) {
        v53 %= v39;
      }
    }
    else
    {
      v53 &= v39 - 1;
    }
    __int16 v52 = (void *)(*v37 + 8 * v53);
    goto LABEL_113;
  }
LABEL_114:
  *(void *)int buf = 0;
  ++*(void *)(a1 + 88);
  sub_10B438((uint64_t)buf);
LABEL_115:
  uint64_t v54 = *(void *)a1;
  BOOL result = operator new(0x18uLL);
  result[2] = *(void *)(v54 + 16);
  uint64_t v57 = v42[3];
  __int16 v56 = v42 + 3;
  *BOOL result = v57;
  result[1] = v56;
  *(void *)(v57 + 8) = result;
  void *v56 = result;
  ++v56[2];
  return result;
}

void sub_10B3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_10B3E8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = (void *)(a1 + 24);
  if (sub_10B490((void *)(a1 + 24), a2)) {
    return sub_10B578(v4, a2)[3];
  }
  return v3;
}

void sub_10B438(uint64_t a1)
{
  dispatch_block_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_45F50(v1 + 3);
    }
    operator delete(v1);
  }
}

void *sub_10B490(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  BOOL result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      BOOL result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_10B578(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  BOOL result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      BOOL result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void sub_10B660(void *a1, uint64_t **a2)
{
  int8x8_t v2 = (int8x8_t)a1[9];
  if (!*(void *)&v2) {
    goto LABEL_17;
  }
  uint64_t v5 = (*a2)[2];
  unint64_t v6 = *(unsigned int *)(v5 + 144);
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = *(unsigned int *)(v5 + 144);
    if (*(void *)&v2 <= v6) {
      unint64_t v8 = v6 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v8 = (v2.i32[0] - 1) & v6;
  }
  unint64_t v9 = *(uint64_t ***)(a1[8] + 8 * v8);
  if (!v9 || (unint64_t v10 = *v9) == 0) {
LABEL_17:
  }
    sub_8251C("unordered_map::at: key not found");
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == v6) {
      break;
    }
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v2) {
        v11 %= *(void *)&v2;
      }
    }
    else
    {
      v11 &= *(void *)&v2 - 1;
    }
    if (v11 != v8) {
      goto LABEL_17;
    }
LABEL_16:
    unint64_t v10 = (uint64_t *)*v10;
    if (!v10) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v10 + 4) != v6) {
    goto LABEL_16;
  }
  uint8x8_t v12 = v10 + 3;
  for (uint64_t i = (uint64_t *)v10[4]; ; uint64_t i = (uint64_t *)i[1])
  {
    if (i == v12) {
      goto LABEL_53;
    }
    if (i[2] == v5) {
      break;
    }
  }
  if (v12 == i)
  {
LABEL_53:
    uint8x8_t v28 = (os_log_t *)sub_32A48(13);
    unint64_t v29 = *v28;
    if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = (*a2)[2];
      int v32 = 136315650;
      unint64_t v33 = "PortManager.cpp";
      __int16 v34 = 1024;
      int v35 = 235;
      __int16 v36 = 2048;
      uint64_t v37 = v30;
      _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Could not find port at %p in port type to port iter map\"", (uint8_t *)&v32, 0x1Cu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not find port at %p in port type to port iter map");
  }
  uint64_t v14 = *i;
  *(void *)(v14 + 8) = i[1];
  *(void *)i[1] = v14;
  --v10[5];
  operator delete(i);
  unint64_t v15 = *a2;
  uint64_t v16 = a1 + 3;
  float v17 = sub_10B578(a1 + 3, v15[2]);
  if (v17)
  {
    int8x8_t v18 = (int8x8_t)a1[4];
    unint64_t v19 = v17[1];
    uint8x8_t v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] > 1uLL)
    {
      if (v19 >= *(void *)&v18) {
        v19 %= *(void *)&v18;
      }
    }
    else
    {
      v19 &= *(void *)&v18 - 1;
    }
    unint64_t v21 = *(void **)(*v16 + 8 * v19);
    do
    {
      int v22 = v21;
      unint64_t v21 = (void *)*v21;
    }
    while (v21 != v17);
    if (v22 == a1 + 5) {
      goto LABEL_40;
    }
    unint64_t v23 = v22[1];
    if (v20.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&v18) {
        v23 %= *(void *)&v18;
      }
    }
    else
    {
      v23 &= *(void *)&v18 - 1;
    }
    if (v23 != v19)
    {
LABEL_40:
      if (!*v17) {
        goto LABEL_41;
      }
      unint64_t v24 = *(void *)(*v17 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v24 >= *(void *)&v18) {
          v24 %= *(void *)&v18;
        }
      }
      else
      {
        v24 &= *(void *)&v18 - 1;
      }
      if (v24 != v19) {
LABEL_41:
      }
        *(void *)(*v16 + 8 * v19) = 0;
    }
    uint64_t v25 = *v17;
    if (*v17)
    {
      unint64_t v26 = *(void *)(v25 + 8);
      if (v20.u32[0] > 1uLL)
      {
        if (v26 >= *(void *)&v18) {
          v26 %= *(void *)&v18;
        }
      }
      else
      {
        v26 &= *(void *)&v18 - 1;
      }
      if (v26 != v19)
      {
        *(void *)(*v16 + 8 * v26) = v22;
        uint64_t v25 = *v17;
      }
    }
    void *v22 = v25;
    *float v17 = 0;
    --a1[6];
    operator delete(v17);
  }
  uint64_t v27 = *v15;
  *(void *)(v27 + 8) = v15[1];
  *(void *)v15[1] = v27;
  --a1[2];

  operator delete(v15);
}

void sub_10B9F4(_Unwind_Exception *exception_object)
{
}

void sub_10BA10()
{
}

void sub_10BF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,unsigned char *a38)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  sub_10C78C(&a36);
  sub_10C7E4(&a38);
  _Unwind_Resume(a1);
}

std::string *sub_10BFD0(std::string *a1, void *a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  unint64_t v6 = (void *)*a2;
  unint64_t v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    while (1)
    {
      std::string::append(a1, "'", 1uLL);
      sub_2417C(&__p, *((_DWORD *)v5 + 8));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::append(a1, "': ", 3uLL);
      sub_9264(&__p, (uint64_t)(v5 + 5), 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v9 = &__p;
      }
      else {
        unint64_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a1, (const std::string::value_type *)v9, v10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      unint64_t v11 = (void *)v5[1];
      if (v11)
      {
        do
        {
          uint8x8_t v12 = v11;
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint8x8_t v12 = (void *)v5[2];
          BOOL v13 = *v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v13);
      }
      if (v12 == v4) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
      uint64_t v5 = v12;
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_10C150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10C194(void *a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = sub_298DA4();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 304))(v8))
  {
    sub_298DA4();
    operator new();
  }
  unint64_t v9 = (os_log_t *)sub_32A48(9);
  std::string::size_type v10 = *v9;
  if (*v9 && os_log_type_enabled(*v9, OS_LOG_TYPE_INFO))
  {
    sub_10BFD0(&__p, a2);
    unint64_t v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    buf[0] = 136315650;
    *(void *)&buf[1] = "PortManager.cpp";
    __int16 v17 = 1024;
    int v18 = 749;
    __int16 v19 = 2080;
    uint8x8_t v20 = v11;
    _os_log_impl(&def_1E50E8, v10, OS_LOG_TYPE_INFO, "%25s:%-5d synchronously updating Ports: %s", (uint8_t *)buf, 0x1Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (!a2[2])
  {
    BOOL v13 = (os_log_t *)sub_32A48(13);
    uint64_t v14 = *v13;
    if (*v13)
    {
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_ERROR))
      {
        buf[0] = 136315394;
        *(void *)&buf[1] = "PortManager.cpp";
        __int16 v17 = 1024;
        int v18 = 750;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"called with empty port update map.\"", (uint8_t *)buf, 0x12u);
      }
    }
  }
  sub_10C8E0(a1, (uint64_t)a3);
  sub_10C9A4((uint64_t)a1, a2, a3, a4);
  for (uint64_t i = (void *)a3[1]; i != a3; uint64_t i = (void *)i[1])
    sub_10D1F8(a1, i + 2);
  sub_298DA4();
  operator new();
}

void sub_10C6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_10C78C(unsigned char *a1)
{
  if (a1[8]) {
    (*(void (**)(void))(**(void **)a1 + 24))();
  }
  return a1;
}

unsigned char *sub_10C7E4(unsigned char **a1)
{
  BOOL result = *a1;
  *a1 = 0;
  if (result)
  {
    sub_3BCAC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10C834(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  unint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      sub_FB490((uint64_t **)a1, v3, *((_DWORD *)v5 + 8), (uint64_t)(v5 + 4));
      unint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint8x8_t v7 = v6;
          unint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint8x8_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

void sub_10C8CC(_Unwind_Exception *a1)
{
  sub_FB43C(*v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_10C8E0(void *a1, uint64_t a2)
{
  unint64_t v9 = a1;
  char v10 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  unint64_t v4 = (void (*)(uint64_t, uint64_t))a1[24];
  if (*(void *)(a2 + 16)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v6 = a1[25];
    sub_523D8(v8, (uint64_t)a1);
    v4(a2, v6);
    sub_52380(v8);
  }
  return sub_3BCAC(&v9);
}

void sub_10C980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, char a11)
{
}

unsigned char *sub_10C9A4(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v56 = a1;
  char v57 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  sub_10E97C(*(void **)(a1 + 472));
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = a1 + 472;
  if (a3[2])
  {
    uint64_t v6 = (void *)a3[1];
    if (v6 != a3)
    {
      while (1)
      {
        uint8x8_t v7 = (std::__shared_weak_count *)v6[3];
        if (!v7) {
          break;
        }
        BOOL v8 = std::__shared_weak_count::lock(v7);
        if (!v8) {
          goto LABEL_14;
        }
        unint64_t v9 = (os_unfair_lock_s *)v6[2];
        if (!v9) {
          goto LABEL_14;
        }
        char v10 = (os_log_t *)sub_32A48(9);
        unint64_t v11 = *v10;
        if (*v10 && os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
        {
          sub_4F64((uint64_t)__p, v9 + 2);
          uint8x8_t v12 = __p;
          if (v62 < 0) {
            uint8x8_t v12 = (void **)__p[0];
          }
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "PortManager.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&_DWORD buf[14] = 670;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v12;
          _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Adding port %s", buf, 0x1Cu);
          if (v62 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_10AB6C(a1 + 88, v9);
LABEL_18:
        sub_4636C(v8);
LABEL_19:
        uint64_t v6 = (void *)v6[1];
        if (v6 == a3) {
          goto LABEL_20;
        }
      }
      BOOL v8 = 0;
LABEL_14:
      BOOL v13 = (os_log_t *)sub_32A48(9);
      uint64_t v14 = *v13;
      if (*v13 && os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 675;
        _os_log_impl(&def_1E50E8, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Encountered invalid port in connections list.", buf, 0x12u);
      }
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
  }
LABEL_20:
  uint64_t v15 = (uint64_t)a4;
  if (a4[2])
  {
    uint64_t v16 = (uint64_t *)a4[1];
    if (v16 != a4)
    {
      __int16 v17 = (void *)(a1 + 88);
      uint64_t v51 = a2 + 1;
      while (1)
      {
        int v18 = (std::__shared_weak_count *)v16[3];
        if (!v18)
        {
          __int16 v19 = 0;
LABEL_35:
          unint64_t v26 = (os_log_t *)sub_32A48(9);
          uint64_t v27 = *v26;
          if (*v26 && os_log_type_enabled(*v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 136315394;
            *(void *)&uint8_t buf[4] = "PortManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 689;
            _os_log_impl(&def_1E50E8, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Encountered invalid port in disconnections list.", buf, 0x12u);
          }
          if (!v19) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }
        __int16 v19 = std::__shared_weak_count::lock(v18);
        if (!v19) {
          goto LABEL_35;
        }
        uint8x8_t v20 = (os_unfair_lock_s *)v16[2];
        if (!v20) {
          goto LABEL_35;
        }
        uint64_t v21 = sub_10B3E8((uint64_t)v17, v16[2]);
        if (v17 != (void *)v21)
        {
          uint64_t v22 = v21;
          unint64_t v23 = (os_log_t *)sub_32A48(9);
          unint64_t v24 = *v23;
          if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
          {
            sub_4F64((uint64_t)__p, v20 + 2);
            uint64_t v25 = __p;
            if (v62 < 0) {
              uint64_t v25 = (void **)__p[0];
            }
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "PortManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 696;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v25;
            _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Removing port %s", buf, 0x1Cu);
            if (v62 < 0) {
              operator delete(__p[0]);
            }
          }
          *(void *)int buf = v22;
          sub_10B660(v17, (uint64_t **)buf);
          uint64_t v16 = (uint64_t *)v16[1];
          goto LABEL_39;
        }
        uint64_t v16 = (uint64_t *)sub_10E9D0(v15, v16);
        uint8x8_t v28 = (void *)*a2;
        if ((void *)*a2 != v51) {
          break;
        }
        __int16 v17 = (void *)(a1 + 88);
LABEL_39:
        sub_4636C(v19);
LABEL_40:
        if (v16 == (uint64_t *)v15) {
          goto LABEL_80;
        }
      }
LABEL_43:
      unint64_t v29 = v28 + 5;
      for (uint64_t i = (uint64_t *)v28[6]; ; uint64_t i = (uint64_t *)i[1])
      {
        if (i == v29)
        {
LABEL_69:
          uint8x8_t v40 = (os_log_t *)sub_32A48(9);
          char v41 = *v40;
          if (*v40 && os_log_type_enabled(*v40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315650;
            *(void *)&uint8_t buf[4] = "PortManager.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 717;
            *(_WORD *)&unsigned char buf[18] = 2048;
            *(void *)&buf[20] = v20;
            _os_log_impl(&def_1E50E8, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d Disconnected port %p not present in update map", buf, 0x1Cu);
          }
LABEL_72:
          __int16 v42 = (void *)v28[1];
          if (v42)
          {
            do
            {
              unint64_t v43 = v42;
              __int16 v42 = (void *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              unint64_t v43 = (void *)v28[2];
              BOOL v44 = *v43 == (void)v28;
              uint8x8_t v28 = v43;
            }
            while (!v44);
          }
          uint8x8_t v28 = v43;
          if (v43 == v51)
          {
            uint64_t v15 = (uint64_t)a4;
            __int16 v17 = (void *)(a1 + 88);
            goto LABEL_39;
          }
          goto LABEL_43;
        }
        uint64_t v31 = (std::__shared_weak_count *)i[3];
        if (v31)
        {
          int v32 = std::__shared_weak_count::lock(v31);
          unint64_t v33 = v32;
          if (v32)
          {
            __int16 v34 = (os_unfair_lock_s *)i[2];
            atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_4636C(v32);
            goto LABEL_50;
          }
        }
        else
        {
          unint64_t v33 = 0;
        }
        __int16 v34 = 0;
LABEL_50:
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (v33)
        {
          int v35 = std::__shared_weak_count::lock(v33);
          if (!v35) {
            __int16 v34 = 0;
          }
        }
        else
        {
          __int16 v34 = 0;
          int v35 = 0;
        }
        __int16 v36 = std::__shared_weak_count::lock(v19);
        if (!v36)
        {
          BOOL v37 = v34 == 0;
          if (!v35) {
            goto LABEL_60;
          }
LABEL_59:
          sub_4636C(v35);
          goto LABEL_60;
        }
        BOOL v37 = v34 == v20;
        sub_4636C(v36);
        if (v35) {
          goto LABEL_59;
        }
LABEL_60:
        std::__shared_weak_count::__release_weak(v19);
        if (v33) {
          std::__shared_weak_count::__release_weak(v33);
        }
        if (v37)
        {
          if (v29 != i)
          {
            __int16 v38 = (os_log_t *)sub_32A48(9);
            unint64_t v39 = *v38;
            if (*v38 && os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int buf = 136315650;
              *(void *)&uint8_t buf[4] = "PortManager.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&_DWORD buf[14] = 711;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(void *)&buf[20] = v20;
              _os_log_impl(&def_1E50E8, v39, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Disconnected port %p not in connected ports list. Removing from the update map", buf, 0x1Cu);
            }
            sub_10E9D0((uint64_t)(v28 + 5), i);
            goto LABEL_72;
          }
          goto LABEL_69;
        }
      }
    }
  }
LABEL_80:
  memset(buf, 0, 24);
  strcpy((char *)&buf[24], "cwdv");
  unsigned char buf[32] = 0;
  int v65 = 3;
  v67[0] = 0;
  v67[1] = 0;
  uint64_t v66 = v67;
  int v68 = 44739242;
  CFTypeRef v69 = 0;
  __p[0] = off_622608;
  __int16 v63 = __p;
  sub_10EA24(&v52, a1, buf, (uint64_t)__p);
  v55[0] = 0;
  v55[1] = 0;
  uint64_t v54 = v55;
  float v45 = v53;
  v58[0] = (uint64_t **)&v54;
  for (v58[1] = v55; v45 != &v52; float v45 = (uint64_t *)v45[1])
  {
    sub_549A4(&v59, v45 + 2, "", 730);
    int v46 = *(_DWORD *)(v59 + 144);
    if (v60) {
      sub_4636C(v60);
    }
    LODWORD(v59) = v46;
    sub_10ED30(v58, (unsigned int *)&v59);
  }
  uint64_t v47 = sub_463468();
  LODWORD(v59) = 2;
  sub_463CAC(v47, (uint64_t)"fedv", (uint64_t)&v54, (unsigned int *)&v59);
  sub_463E0(v55[0]);
  sub_8108(&v52);
  sub_6AFD4(__p);
  if (v69) {
    CFRelease(v69);
  }
  sub_463E0(v67[0]);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  return sub_3BCAC(&v56);
}

void sub_10D15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_4636C(v17);
  sub_3BCAC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_10D1F8(void *a1, uint64_t *a2)
{
  uint64_t v54 = a1;
  char v55 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  sub_43F38(&v52, a2, "", 433);
  uint64_t v4 = v52;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v52 + 264))(&__s1, v52);
  size_t v5 = v51;
  unsigned __int8 v6 = v51;
  if ((v51 & 0x80u) != 0) {
    size_t v5 = __n;
  }
  if (v5)
  {
    memset(__p, 0, 24);
    strcpy(&__p[24], "cwdv");
    BYTE2(v64) = 0;
    LODWORD(v66) = 3;
    *((void *)&v67 + 1) = 0;
    uint64_t v68 = 0;
    *(void *)&long long v67 = (char *)&v67 + 8;
    int v69 = 44739242;
    CFTypeRef cf = 0;
    v61.__r_.__value_.__r.__words[0] = (std::string::size_type)off_622608;
    char v62 = &v61;
    sub_10E1E8((uint64_t *)&v59, (uint64_t)a1, __p, (uint64_t)&v61);
    sub_6AFD4(&v61);
    if (cf) {
      CFRelease(cf);
    }
    sub_463E0(*((void **)&v67 + 1));
    if (*(void *)__p)
    {
      *(void *)&__p[8] = *(void *)__p;
      operator delete(*(void **)__p);
    }
    sub_FB720((uint64_t *)__p, a1 + 51);
    sub_10E4AC(&v59, (uint64_t *)&v59, *(void **)&__p[8], __p);
    int v46 = &v46;
    uint64_t v47 = (uint64_t *)&v46;
    uint64_t v48 = 0;
    sub_FB288((uint64_t *)&v61, &v59);
    for (uint64_t i = (std::string *)v61.__r_.__value_.__l.__size_; i != &v61; uint64_t i = (std::string *)i->__r_.__value_.__l.__size_)
    {
      sub_105F14((uint64_t *)v56, v4);
      sub_8E4B8(v58, v56);
      sub_8108((uint64_t *)v56);
      BOOL v8 = (uint64_t *)v58[1];
      std::string::size_type v9 = i->__r_.__value_.__r.__words[2];
      while (v8 != v58)
      {
        if (v8[2] == v9) {
          goto LABEL_68;
        }
        BOOL v8 = (uint64_t *)v8[1];
      }
      (*(void (**)(void **__return_ptr))(*(void *)v9 + 264))(v56);
      std::string::size_type v11 = i->__r_.__value_.__r.__words[2];
      data = (std::__shared_weak_count *)i[1].__r_.__value_.__l.__data_;
      if (data) {
        atomic_fetch_add_explicit(&data->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint8x8_t v12 = (std::__shared_weak_count *)a2[1];
      if (v12)
      {
        BOOL v13 = std::__shared_weak_count::lock(v12);
        uint64_t v14 = v13;
        if (v13)
        {
          uint64_t v15 = *a2;
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v13);
          if (data) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v15 = 0;
          if (data)
          {
LABEL_18:
            uint64_t v16 = std::__shared_weak_count::lock(data);
            if (!v16) {
              std::string::size_type v11 = 0;
            }
            if (!v14) {
              goto LABEL_27;
            }
            goto LABEL_24;
          }
        }
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v14 = 0;
        if (data) {
          goto LABEL_18;
        }
      }
      std::string::size_type v11 = 0;
      uint64_t v16 = 0;
      if (!v14) {
        goto LABEL_27;
      }
LABEL_24:
      __int16 v17 = std::__shared_weak_count::lock(v14);
      if (v17)
      {
        BOOL v18 = v11 == v15;
        sub_4636C(v17);
        if (!v16) {
          goto LABEL_29;
        }
LABEL_28:
        sub_4636C(v16);
        goto LABEL_29;
      }
LABEL_27:
      BOOL v18 = v11 == 0;
      if (v16) {
        goto LABEL_28;
      }
LABEL_29:
      if (!v18)
      {
        unint64_t v19 = (unint64_t)v56[1];
        if ((v57 & 0x80u) == 0) {
          unint64_t v19 = v57;
        }
        if (v19)
        {
          if ((v51 & 0x80u) == 0) {
            size_t v20 = v51;
          }
          else {
            size_t v20 = __n;
          }
          if (v20 == v19)
          {
            if ((v57 & 0x80u) == 0) {
              uint64_t v21 = v56;
            }
            else {
              uint64_t v21 = (void **)v56[0];
            }
            if ((v51 & 0x80) != 0)
            {
              BOOL v30 = memcmp(__s1, v21, __n) == 0;
              goto LABEL_58;
            }
            if (v51)
            {
              uint64_t v22 = v51 - 1;
              p_s1 = &__s1;
              do
              {
                int v25 = *(unsigned __int8 *)p_s1;
                p_s1 = (void **)((char *)p_s1 + 1);
                int v24 = v25;
                int v27 = *(unsigned __int8 *)v21;
                uint64_t v21 = (void **)((char *)v21 + 1);
                int v26 = v27;
                BOOL v29 = v22-- != 0;
                BOOL v30 = v24 == v26;
              }
              while (v24 == v26 && v29);
LABEL_58:
              if (v14) {
LABEL_59:
              }
                std::__shared_weak_count::__release_weak(v14);
            }
            else
            {
              BOOL v30 = 1;
              if (v14) {
                goto LABEL_59;
              }
            }
          }
          else
          {
            BOOL v30 = 0;
            if (v14) {
              goto LABEL_59;
            }
          }
          if (data) {
            std::__shared_weak_count::__release_weak(data);
          }
          if (v30)
          {
            std::string::size_type v31 = i->__r_.__value_.__r.__words[2];
            std::string::pointer v32 = i[1].__r_.__value_.__l.__data_;
            if (v32) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)v32 + 2, 1uLL, memory_order_relaxed);
            }
            unint64_t v33 = operator new(0x20uLL);
            v33[2] = v31;
            _OWORD v33[3] = v32;
            uint64_t v34 = (uint64_t)v46;
            void *v33 = v46;
            v33[1] = &v46;
            *(void *)(v34 + 8) = v33;
            int v46 = v33;
            ++v48;
          }
          goto LABEL_66;
        }
      }
      if (v14) {
        std::__shared_weak_count::__release_weak(v14);
      }
      if (data) {
        std::__shared_weak_count::__release_weak(data);
      }
LABEL_66:
      if ((char)v57 < 0) {
        operator delete(v56[0]);
      }
LABEL_68:
      sub_B8E4(v58);
    }
    sub_B8E4((uint64_t *)&v61);
    sub_8108((uint64_t *)__p);
    sub_8108((uint64_t *)&v59);
    if (v48)
    {
      int v35 = (os_log_t *)sub_32A48(9);
      __int16 v36 = *v35;
      if (*v35)
      {
        if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v37 = v48;
          if (v48 == 1) {
            __int16 v38 = "";
          }
          else {
            __int16 v38 = "s";
          }
          unint64_t v39 = *(const void **)(v4 + 248);
          uint64_t v59 = v39;
          char v60 = *(unsigned char *)(v4 + 256);
          if (v60 && v39)
          {
            CFRetain(v39);
            unint64_t v39 = v59;
          }
          sub_10DB54(&v61, (uint64_t)v47, (uint64_t)&v46);
          if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint8x8_t v40 = &v61;
          }
          else {
            uint8x8_t v40 = (std::string *)v61.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string __p = 136316418;
          *(void *)&__p[4] = "PortManager.cpp";
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = 470;
          *(_WORD *)&unsigned char __p[18] = 2048;
          *(void *)&__p[20] = v37;
          *(_WORD *)&__p[28] = 2080;
          long long v64 = v38;
          __int16 v65 = 2112;
          uint64_t v66 = v39;
          LOWORD(v67) = 2080;
          *(void *)((char *)&v67 + 2) = v40;
          _os_log_impl(&def_1E50E8, v36, OS_LOG_TYPE_DEBUG, "%25s:%-5d Found %ld prospective partner port%s for port %@: %s", __p, 0x3Au);
          if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v61.__r_.__value_.__l.__data_);
          }
          sub_72924((uint64_t)&v59);
        }
      }
    }
    sub_FB288((uint64_t *)__p, &v46);
    for (uint64_t j = *(void *)&__p[8]; (unsigned char *)j != __p; uint64_t j = *(void *)(j + 8))
    {
      __int16 v42 = *(std::__shared_weak_count **)(j + 24);
      v61.__r_.__value_.__r.__words[0] = *(void *)(j + 16);
      v61.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v43 = sub_1060F4(v4, (uint64_t *)&v61);
      if (v42) {
        std::__shared_weak_count::__release_weak(v42);
      }
      if (v43 && !sub_1060F4(*(void *)(j + 16), a2))
      {
        BOOL v44 = *(std::__shared_weak_count **)(j + 24);
        v61.__r_.__value_.__r.__words[0] = *(void *)(j + 16);
        v61.__r_.__value_.__l.__size_ = (std::string::size_type)v44;
        if (v44) {
          atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_101F70(v4, (uint64_t *)&v61);
        if (v44) {
          std::__shared_weak_count::__release_weak(v44);
        }
      }
    }
    sub_B8E4((uint64_t *)__p);
    sub_8108((uint64_t *)&v46);
    unsigned __int8 v6 = v51;
  }
  if ((v6 & 0x80) != 0) {
    operator delete(__s1);
  }
  if (v53) {
    sub_4636C(v53);
  }
  return sub_3BCAC(&v54);
}

void sub_10D878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a20) {
    sub_4636C(a20);
  }
  sub_3BCAC(&a21);
  _Unwind_Resume(a1);
}

std::string *sub_10D9A8(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_D98B8(__p, a2 + 16);
      unsigned __int8 v6 = (v10 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      uint8x8_t v7 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
      std::string::append(a1, v6, (std::string::size_type)v7);
      if ((char)v10 < 0) {
        operator delete(__p[0]);
      }
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_10DA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10DAC0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10DB54(&v4, *(void *)(a1 + 40), a1 + 32);
  unint64_t v3 = std::string::insert(&v4, 0, "Port disconnection(s): ", 0x17uLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_10DB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10DB54(std::string *a1, uint64_t a2, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a1, "{ ", 2uLL);
  if (a2 != a3)
  {
    while (1)
    {
      sub_D98B8(__p, a2 + 16);
      unsigned __int8 v6 = (v10 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
      uint8x8_t v7 = (v10 & 0x80u) == 0 ? (void *)v10 : __p[1];
      std::string::append(a1, v6, (std::string::size_type)v7);
      if ((char)v10 < 0) {
        operator delete(__p[0]);
      }
      a2 = *(void *)(a2 + 8);
      if (a2 == a3) {
        break;
      }
      std::string::append(a1, ", ", 2uLL);
    }
  }
  return std::string::append(a1, " }", 2uLL);
}

void sub_10DC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10DC6C@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(uint64_t, void))(a1 + 16))(a1 + 32, *(void *)(a1 + 24));

  return sub_12053C(a2, 1920099684);
}

void sub_10DCB8(uint64_t a1)
{
  sub_8108((uint64_t *)(a1 + 32));

  operator delete();
}

uint64_t sub_10DD04(uint64_t a1)
{
  return a1;
}

std::string *sub_10DD30@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_21C8C(a2, "Port update(s): { ");
  std::string v4 = *(void **)(a1 + 16);
  if (v4 != (void *)(a1 + 24))
  {
    while (1)
    {
      sub_2417C(&__p, *((_DWORD *)v4 + 8));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::append(a2, ": ", 2uLL);
      sub_10DB54(&__p, v4[6], (uint64_t)(v4 + 5));
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint8x8_t v7 = &__p;
      }
      else {
        uint8x8_t v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v8 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(a2, (const std::string::value_type *)v7, v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::size_type v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          unsigned __int8 v10 = v9;
          std::string::size_type v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unsigned __int8 v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          std::string v4 = v10;
        }
        while (!v11);
      }
      if (v10 == (void *)(a1 + 24)) {
        break;
      }
      std::string::append(a2, ", ", 2uLL);
      std::string v4 = v10;
    }
  }
  return std::string::append(a2, " }", 2uLL);
}

void sub_10DE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10DED8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = off_6228D0;
  *(void *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  uint64_t v4 = sub_298DA4();
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v4 + 312))(buf);
  uint64_t v5 = *(void *)buf;
  if (*(void *)buf)
  {
    v14[0] = (uint64_t)v14;
    v14[1] = (uint64_t)v14;
    v14[2] = 0;
    sub_14D92C((uint64_t)v15, *(uint64_t *)buf, (uint64_t)v14);
    sub_13C058((uint64_t)buf, v5, (void *)(a1 + 16), v15);
    sub_120690(a2, (uint64_t)buf);
    sub_11A520(buf);
    sub_10E118((void *)v15[1]);
    sub_8108(v14);
  }
  else
  {
    uint64_t v6 = sub_32A48(9);
    uint64_t v7 = sub_32A48(15);
    char v8 = 0;
    uint64_t v9 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v10 = *(void *)(v6 + 8);
    while (1)
    {
      uint64_t v11 = *(int *)&buf[4 * v9];
      char v12 = v8;
      if (((v10 & v11) != 0) != ((*(void *)(v7 + 8) & v11) != 0)) {
        break;
      }
      char v8 = 1;
      uint64_t v9 = 1;
      if (v12) {
        goto LABEL_10;
      }
    }
    if ((v10 & v11) == 0) {
      uint64_t v6 = v7;
    }
LABEL_10:
    BOOL v13 = *(NSObject **)v6;
    if (*(void *)v6)
    {
      if (os_log_type_enabled(*(os_log_t *)v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        __int16 v17 = 1024;
        int v18 = 73;
        _os_log_impl(&def_1E50E8, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing manager does not exist -- cannot execute command", buf, 0x12u);
      }
    }
  }
}

void sub_10E0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15)
{
  sub_11A520(&a15);
  sub_10E118(a13);
  sub_8108(&a9);
  sub_11A520(v15);
  _Unwind_Resume(a1);
}

void sub_10E118(void *a1)
{
  if (a1)
  {
    sub_10E118(*a1);
    sub_10E118(a1[1]);
    int8x8_t v2 = (std::__shared_weak_count *)a1[5];
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete(a1);
  }
}

void sub_10E170(uint64_t a1)
{
  sub_FB43C(*(void **)(a1 + 24));

  operator delete();
}

uint64_t sub_10E1BC(uint64_t a1)
{
  return a1;
}

unsigned char *sub_10E1E8(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v24 = a2;
  char v25 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  sub_10E5DC(a2);
  uint64_t v9 = (_DWORD *)*a3;
  uint64_t v8 = a3[1];
  if (v8 - *a3 == 4)
  {
    *(_DWORD *)int buf = *v9;
    uint64_t v10 = sub_10E6B4(a2 + 152, *(unsigned int *)buf, buf) + 3;
    uint64_t v9 = (_DWORD *)*a3;
    uint64_t v8 = a3[1];
  }
  else
  {
    uint64_t v10 = (void *)(a2 + 88);
  }
  if (v8 - (void)v9 == 4) {
    BOOL v11 = sub_3F334C(a3);
  }
  else {
    BOOL v11 = sub_468DC((uint64_t)a3);
  }
  BOOL v12 = v11;
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = (void *)v10[1]; i != v10; uint64_t i = (void *)i[1])
  {
    uint64_t v14 = i[2];
    if (!v14)
    {
      uint64_t v21 = (os_log_t *)sub_32A48(13);
      uint64_t v22 = *v21;
      if (*v21 && os_log_type_enabled(*v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        int v27 = "PortManager.cpp";
        __int16 v28 = 1024;
        int v29 = 617;
        _os_log_impl(&def_1E50E8, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    if (v12 || sub_4642C(i[2], (uint64_t)a3))
    {
      uint64_t v15 = *(void *)(a4 + 24);
      if (!v15) {
        sub_56964();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v15 + 48))(v15, v14))
      {
        uint64_t v17 = *(void *)(v14 + 80);
        uint64_t v16 = *(void *)(v14 + 88);
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
        }
        int v18 = operator new(0x20uLL);
        void v18[2] = v17;
        uint64_t v18[3] = v16;
        uint64_t v19 = *a1;
        *int v18 = *a1;
        v18[1] = a1;
        *(void *)(v19 + 8) = v18;
        *a1 = (uint64_t)v18;
        ++a1[2];
      }
    }
  }
  return sub_3BCAC(&v24);
}

void sub_10E45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void *sub_10E4AC(void *result, uint64_t *a2, void *a3, void *a4)
{
  if (a3 != a4)
  {
    uint64_t v7 = result;
    BOOL result = operator new(0x20uLL);
    uint64_t v8 = result;
    *BOOL result = 0;
    result[1] = 0;
    uint64_t v9 = a3[3];
    result[2] = a3[2];
    result[3] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (void *)a3[1];
    if (v10 == a4)
    {
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v11 = 1;
      BOOL v12 = result;
      do
      {
        BOOL result = operator new(0x20uLL);
        *BOOL result = v12;
        result[1] = 0;
        uint64_t v13 = v10[3];
        result[2] = v10[2];
        result[3] = v13;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
        }
        v12[1] = result;
        ++v11;
        uint64_t v10 = (void *)v10[1];
        BOOL v12 = result;
      }
      while (v10 != a4);
    }
    uint64_t v14 = *a2;
    *(void *)(v14 + 8) = v8;
    void *v8 = v14;
    *a2 = (uint64_t)result;
    result[1] = a2;
    v7[2] += v11;
  }
  return result;
}

void sub_10E59C(void *a1)
{
  __cxa_begin_catch(a1);
  while (1)
  {
    int8x8_t v2 = (void *)*v1;
    unint64_t v3 = (std::__shared_weak_count *)v1[3];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete(v1);
    dispatch_block_t v1 = v2;
    if (!v2) {
      __cxa_rethrow();
    }
  }
}

void sub_10E5C8(_Unwind_Exception *a1)
{
}

void sub_10E5DC(uint64_t a1)
{
  int8x8_t v2 = pthread_self();
  if (!pthread_equal(v2, (pthread_t)atomic_load_explicit((atomic_ullong *volatile)(a1 + 16), memory_order_acquire)))
  {
    unint64_t v3 = (os_log_t *)sub_32A48(13);
    uint64_t v4 = *v3;
    if (*v3)
    {
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315394;
        uint64_t v6 = "PortManager.h";
        __int16 v7 = 1024;
        int v8 = 370;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"called while mutex is not held by the current thread.\"", (uint8_t *)&v5, 0x12u);
      }
    }
  }
}

void *sub_10E6B4(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  BOOL v12 = (void *)(a1 + 16);
  uint64_t v10 = operator new(0x30uLL);
  v23[0] = v10;
  v23[1] = a1 + 16;
  void *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  uint64_t v10[3] = v10 + 3;
  v10[4] = v10 + 3;
  unsigned char v10[5] = 0;
  char v24 = 1;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_6DEC4(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v10 = *v20;
LABEL_38:
    *size_t v20 = v10;
    goto LABEL_39;
  }
  void *v10 = *v12;
  void *v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  sub_10B438((uint64_t)v23);
  return v10;
}

void sub_10E8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10B438((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10E8FC()
{
  return 1;
}

void sub_10E90C(uint64_t a1, void *a2)
{
  *a2 = off_622608;
}

void *sub_10E92C()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_622608;
  return result;
}

void sub_10E964()
{
}

void sub_10E97C(void *a1)
{
  if (a1)
  {
    sub_10E97C(*a1);
    sub_10E97C(a1[1]);
    sub_10EDF0((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t sub_10E9D0(uint64_t a1, uint64_t *__p)
{
  uint64_t v3 = *__p;
  uint64_t v4 = __p[1];
  *(void *)(v3 + 8) = v4;
  *(void *)__p[1] = v3;
  --*(void *)(a1 + 16);
  int v5 = (std::__shared_weak_count *)__p[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete(__p);
  return v4;
}

unsigned char *sub_10EA24(uint64_t *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v26 = a2;
  char v27 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  sub_10E5DC(a2);
  uint64_t v9 = (_DWORD *)*a3;
  uint64_t v8 = a3[1];
  if (v8 - *a3 == 4)
  {
    *(_DWORD *)int buf = *v9;
    uint64_t v10 = sub_10E6B4(a2 + 152, *(unsigned int *)buf, buf) + 3;
    uint64_t v9 = (_DWORD *)*a3;
    uint64_t v8 = a3[1];
  }
  else
  {
    uint64_t v10 = (void *)(a2 + 88);
  }
  if (v8 - (void)v9 == 4) {
    BOOL v11 = sub_3F334C(a3);
  }
  else {
    BOOL v11 = sub_468DC((uint64_t)a3);
  }
  BOOL v12 = v11;
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = (void *)v10[1]; i != v10; uint64_t i = (void *)i[1])
  {
    uint64_t v14 = i[2];
    if (!v14)
    {
      unint64_t v23 = (os_log_t *)sub_32A48(13);
      char v24 = *v23;
      if (*v23 && os_log_type_enabled(*v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        int v29 = "PortManager.cpp";
        __int16 v30 = 1024;
        int v31 = 617;
        _os_log_impl(&def_1E50E8, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
    if (v12 || sub_4642C(i[2], (uint64_t)a3))
    {
      uint64_t v15 = *(void *)(a4 + 24);
      if (!v15) {
        sub_56964();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v15 + 48))(v15, v14))
      {
        unint64_t v16 = *(std::__shared_weak_count **)(v14 + 88);
        if (v16)
        {
          uint64_t v17 = *(void *)(v14 + 80);
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          size_t v18 = std::__shared_weak_count::lock(v16);
          uint64_t v19 = v18;
          if (v18)
          {
            atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_weak(v16);
            sub_4636C(v19);
          }
          else
          {
            std::__shared_weak_count::__release_weak(v16);
            uint64_t v17 = 0;
          }
        }
        else
        {
          uint64_t v17 = 0;
          uint64_t v19 = 0;
        }
        size_t v20 = operator new(0x20uLL);
        v20[2] = v17;
        uint64_t v20[3] = v19;
        uint64_t v21 = *a1;
        *size_t v20 = *a1;
        v20[1] = a1;
        *(void *)(v21 + 8) = v20;
        *a1 = (uint64_t)v20;
        ++a1[2];
      }
    }
  }
  return sub_3BCAC(&v26);
}

void sub_10ECE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t ***sub_10ED30(uint64_t ***a1, unsigned int *a2)
{
  uint64_t v4 = *a1;
  int v5 = sub_46E98(*a1, (uint64_t *)a1[1], &v13, &v12, *a2);
  unint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v6 + 7) = *a2;
    sub_46CA8(v4, (uint64_t)v13, v7, v6);
  }
  a1[1] = (uint64_t **)v6;
  uint64_t v8 = (uint64_t *)v6[1];
  if (v8)
  {
    do
    {
      uint64_t v9 = v8;
      uint64_t v8 = (uint64_t *)*v8;
    }
    while (v8);
  }
  else
  {
    do
    {
      uint64_t v9 = (uint64_t *)v6[2];
      BOOL v10 = *v9 == (void)v6;
      unint64_t v6 = v9;
    }
    while (!v10);
  }
  a1[1] = (uint64_t **)v9;
  return a1;
}

void sub_10EDF0(uint64_t a1)
{
  int8x8_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 80);
  if (v3) {
    CFRelease(v3);
  }
  sub_463E0(*(void **)(a1 + 56));
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
}

std::string *sub_10EE5C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_21C8C(a2, "Notify Ports and Update Route in PortManager: ");
  std::string::append(a2, "{ ", 2uLL);
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4 != (void *)(a1 + 32))
  {
    while (1)
    {
      std::string::append(a2, "'", 1uLL);
      sub_2417C(__p, *((_DWORD *)v4 + 8));
      if (v26 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      if (v26 >= 0) {
        std::string::size_type v6 = HIBYTE(v26);
      }
      else {
        std::string::size_type v6 = (std::string::size_type)__p[1];
      }
      std::string::append(a2, (const std::string::value_type *)v5, v6);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      std::string::append(a2, "': ", 3uLL);
      sub_FB288(&v19, v4 + 5);
      sub_21C8C(v23, "{ ");
      sub_10F298((uint64_t)__p, (long long *)v23);
      if ((char)v24 < 0) {
        operator delete(v23[0]);
      }
      unint64_t v7 = v20;
      if (v20 != &v19)
      {
        while (1)
        {
          sub_4F64((uint64_t)v23, (os_unfair_lock_t)(v7[2] + 8));
          if ((v24 & 0x80u) == 0) {
            uint64_t v8 = v23;
          }
          else {
            uint64_t v8 = (void **)v23[0];
          }
          if ((v24 & 0x80u) == 0) {
            uint64_t v9 = v24;
          }
          else {
            uint64_t v9 = (uint64_t)v23[1];
          }
          sub_256E4(&v26, (uint64_t)v8, v9);
          if ((char)v24 < 0) {
            operator delete(v23[0]);
          }
          unint64_t v7 = (uint64_t *)v7[1];
          if (v7 == &v19) {
            break;
          }
          sub_256E4(&v26, (uint64_t)", ", 2);
        }
      }
      sub_256E4(&v26, (uint64_t)" }", 2);
      sub_246E4(v21, (uint64_t)v27);
      __p[0] = v18;
      *(void **)((char *)__p + *((void *)v18 - 3)) = v17;
      uint64_t v26 = v16;
      if (v28 < 0) {
        operator delete((void *)v27[8]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      std::ios::~ios();
      if ((v22 & 0x80u) == 0) {
        BOOL v10 = v21;
      }
      else {
        BOOL v10 = (void **)v21[0];
      }
      if ((v22 & 0x80u) == 0) {
        std::string::size_type v11 = v22;
      }
      else {
        std::string::size_type v11 = (std::string::size_type)v21[1];
      }
      std::string::append(a2, (const std::string::value_type *)v10, v11);
      if ((char)v22 < 0) {
        operator delete(v21[0]);
      }
      sub_B8E4(&v19);
      uint64_t v12 = (void *)v4[1];
      if (v12)
      {
        do
        {
          float v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          float v13 = (void *)v4[2];
          BOOL v14 = *v13 == (void)v4;
          uint64_t v4 = v13;
        }
        while (!v14);
      }
      if (v13 == (void *)(a1 + 32)) {
        break;
      }
      std::string::append(a2, ", ", 2uLL);
      uint64_t v4 = v13;
    }
  }
  return std::string::append(a2, " }", 2uLL);
}

void sub_10F1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v36 + 23) < 0) {
    operator delete(*(void **)v36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10F298(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 16;
  uint64_t v5 = a1 + 24;
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v10;
  *(void *)(v4 + *(void *)(v10 - 24)) = v9;
  *(void *)a1 = v11;
  std::streambuf::basic_streambuf();
  long long v12 = *a2;
  *(void *)(a1 + 104) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 88) = v12;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 24;
  sub_10F5B0(v5);
  return a1;
}

void sub_10F568(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  _Unwind_Resume(a1);
}

void sub_10F5B0(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  int8x8_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void sub_10F6C4(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = off_6228D0;
  *(void *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  uint64_t v4 = a1 + 6;
  sub_10C8E0((void *)a1[2], (uint64_t)(a1 + 6));
  sub_10C9A4(a1[2], a1 + 3, a1 + 6, a1 + 9);
  uint64_t v5 = a1[7];
  if ((uint64_t *)v5 != v4)
  {
    int v6 = (void *)a1[2];
    do
    {
      sub_10D1F8(v6, (uint64_t *)(v5 + 16));
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while ((uint64_t *)v5 != v4);
  }
  uint64_t v7 = sub_298DA4();
  (*(void (**)(unsigned char *__return_ptr))(*(void *)v7 + 312))(buf);
  uint64_t v8 = *(void *)buf;
  if (*(void *)buf)
  {
    sub_14D92C((uint64_t)v17, *(uint64_t *)buf, (uint64_t)(a1 + 9));
    sub_13C058((uint64_t)buf, v8, a1 + 3, v17);
    sub_120690(a2, (uint64_t)buf);
    sub_11A520(buf);
    sub_10E118((void *)v17[1]);
  }
  else
  {
    uint64_t v9 = sub_32A48(9);
    uint64_t v10 = sub_32A48(15);
    char v11 = 0;
    uint64_t v12 = 0;
    *(void *)int buf = 0x100000002;
    uint64_t v13 = *(void *)(v9 + 8);
    while (1)
    {
      uint64_t v14 = *(int *)&buf[4 * v12];
      char v15 = v11;
      if (((v13 & v14) != 0) != ((*(void *)(v10 + 8) & v14) != 0)) {
        break;
      }
      char v11 = 1;
      uint64_t v12 = 1;
      if (v15) {
        goto LABEL_15;
      }
    }
    if ((v13 & v14) == 0) {
      uint64_t v9 = v10;
    }
LABEL_15:
    uint64_t v16 = *(NSObject **)v9;
    if (v16 && os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "PortManager.cpp";
      __int16 v19 = 1024;
      int v20 = 159;
      _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Routing manager does not exist -- cannot execute Notify Command", buf, 0x12u);
    }
  }
  if (a1[11]) {
    sub_10C8E0((void *)a1[2], (uint64_t)(a1 + 9));
  }
}

void sub_10F920(_Unwind_Exception *a1)
{
  sub_11A520(v1);
  _Unwind_Resume(a1);
}

void sub_10F968(uint64_t a1)
{
  sub_8108((uint64_t *)(a1 + 72));
  sub_8108((uint64_t *)(a1 + 48));
  sub_FB43C(*(void **)(a1 + 32));

  operator delete();
}

uint64_t sub_10F9C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10FA00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 520);
}

unsigned char *sub_10FA08(uint64_t a1)
{
  *(unsigned char *)(a1 + 520) = 0;
  return sub_101D9C(a1);
}

uint64_t sub_10FA10(uint64_t a1)
{
  *(unsigned char *)(a1 + 520) = 1;
  return 1;
}

void sub_10FA40(uint64_t a1)
{
  sub_103C0C(a1);

  operator delete();
}

uint64_t sub_10FA80(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10FAA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_6223A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10FAF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_6223A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_10FB18(uint64_t a1)
{
  return a1;
}

void *sub_10FB54(void *a1)
{
  return a1;
}

uint64_t sub_10FB90(uint64_t a1)
{
  int8x8_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      char v3 = (void *)*v2;
      sub_45F50(v2 + 3);
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_10FBF0()
{
  uint64_t result = qword_64B5E8;
  if (!qword_64B5E8)
  {
    uint64_t v1 = (os_log_t *)sub_32A48(13);
    int8x8_t v2 = *v1;
    if (*v1)
    {
      if (os_log_type_enabled(*v1, OS_LOG_TYPE_ERROR))
      {
        int v4 = 136315394;
        uint64_t v5 = "PortManager.cpp";
        __int16 v6 = 1024;
        int v7 = 270;
        _os_log_impl(&def_1E50E8, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [sPortManager is NULL]: \"sPortManager is NULL!\"", (uint8_t *)&v4, 0x12u);
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "sPortManager is NULL!");
  }
  return result;
}

void sub_10FCF4(_Unwind_Exception *exception_object)
{
}

unsigned char *sub_10FD10(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v41 = a2;
  char v42 = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
  uint64_t v9 = (void *)a2[59];
  if (!v9)
  {
LABEL_17:
    if (*(void *)(a3 + 8) - *(void *)a3 == 4)
    {
      *(_DWORD *)std::string __p = **(_DWORD **)a3;
      uint64_t v17 = sub_10E6B4((uint64_t)(a2 + 19), *(unsigned int *)__p, __p) + 3;
    }
    else
    {
      uint64_t v17 = a2 + 11;
    }
    size_t v18 = (uint64_t **)(a2 + 58);
    if (v17 == (void *)v17[1]) {
      goto LABEL_48;
    }
    int v19 = 0;
    int v20 = v17;
    do
    {
      uint64_t v21 = *(void *)(*v20 + 16);
      v19 |= sub_4642C(v21, a3);
      if (v19)
      {
        uint64_t v22 = *(void *)(a5 + 24);
        if (!v22) {
          sub_56964();
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v22 + 48))(v22, v21))
        {
          uint64_t v24 = *(void *)(v21 + 80);
          unint64_t v23 = *(std::__shared_weak_count **)(v21 + 88);
          *a1 = v24;
          a1[1] = (uint64_t)v23;
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          if ((v9 & 1) == 0)
          {
            sub_110374((uint64_t)__p, a3, a1);
            char v25 = sub_11043C(v18, (uint64_t)__p, (uint64_t)__p);
            if (v46) {
              std::__shared_weak_count::__release_weak(v46);
            }
            if (cf) {
              CFRelease(cf);
            }
            sub_463E0(v44);
            if (*(void *)__p)
            {
              *(void *)&__p[8] = *(void *)__p;
              operator delete(*(void **)__p);
            }
            if ((v25 & 1) == 0)
            {
              unint64_t v33 = (os_log_t *)sub_32A48(13);
              uint64_t v34 = *v33;
              if (*v33 && os_log_type_enabled(*v33, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = "PortManager.cpp";
                *(_WORD *)&unsigned char __p[12] = 1024;
                *(_DWORD *)&__p[14] = 374;
                _os_log_impl(&def_1E50E8, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Failed to cache result due to overlapping cache values\"", __p, 0x12u);
              }
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Failed to cache result due to overlapping cache values");
            }
          }
          *(void *)std::string __p = 0;
          *(void *)&__p[8] = 0;
          if (v23)
          {
            uint64_t v26 = std::__shared_weak_count::lock(v23);
            char v27 = v26;
            if (v26)
            {
              atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              *(void *)std::string __p = v24;
              *(void *)&__p[8] = v26;
              sub_4636C(v26);
            }
            else
            {
              *(void *)std::string __p = 0;
              *(void *)&__p[8] = 0;
            }
          }
          else
          {
            char v27 = 0;
          }
          uint64_t v28 = sub_110308(*(void **)(a4 + 8), (unint64_t *)__p);
          if (v27) {
            std::__shared_weak_count::__release_weak(v27);
          }
          if (!v28) {
            return sub_3BCAC(&v41);
          }
          if (v23) {
            std::__shared_weak_count::__release_weak(v23);
          }
          LOBYTE(v9) = 1;
        }
      }
      int v20 = (void *)*v20;
    }
    while (v20 != (void *)v17[1]);
    if ((v19 & 1) == 0)
    {
LABEL_48:
      if ((v9 & 1) == 0)
      {
        v40[0] = 0;
        v40[1] = 0;
        sub_110374((uint64_t)__p, a3, v40);
        char v29 = sub_11043C(v18, (uint64_t)__p, (uint64_t)__p);
        if (v46) {
          std::__shared_weak_count::__release_weak(v46);
        }
        if (cf) {
          CFRelease(cf);
        }
        sub_463E0(v44);
        if (*(void *)__p)
        {
          *(void *)&__p[8] = *(void *)__p;
          operator delete(*(void **)__p);
        }
        if ((v29 & 1) == 0)
        {
          uint64_t v36 = (os_log_t *)sub_32A48(13);
          uint64_t v37 = *v36;
          if (*v36 && os_log_type_enabled(*v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 136315394;
            *(void *)&__p[4] = "PortManager.cpp";
            *(_WORD *)&unsigned char __p[12] = 1024;
            *(_DWORD *)&__p[14] = 386;
            _os_log_impl(&def_1E50E8, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Failed to cache result due to overlapping cache values\"", __p, 0x12u);
          }
          __int16 v38 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v38, "Failed to cache result due to overlapping cache values");
        }
      }
    }
    goto LABEL_56;
  }
  uint64_t v10 = a2 + 59;
  do
  {
    char v11 = sub_3F30B4((uint64_t)(v9 + 4), a3);
    if (v11 >= 0) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = v9 + 1;
    }
    if (v11 >= 0) {
      uint64_t v10 = v9;
    }
    uint64_t v9 = (void *)*v12;
  }
  while (*v12);
  if (v10 == a2 + 59 || (char)sub_3F30B4(a3, (uint64_t)(v10 + 4)) < 0)
  {
    LOBYTE(v9) = 0;
    goto LABEL_17;
  }
  uint64_t v13 = (std::__shared_weak_count *)v10[16];
  if (v13)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      char v15 = v14;
      uint64_t v16 = v10[15];
      if (v16)
      {
        *(void *)std::string __p = v10[15];
        *(void *)&__p[8] = v14;
        atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        if (sub_110308(*(void **)(a4 + 8), (unint64_t *)__p))
        {
          std::__shared_weak_count::__release_weak(v15);
LABEL_63:
          sub_4636C(v15);
          LOBYTE(v9) = 1;
          goto LABEL_17;
        }
        uint64_t v31 = *(void *)(a5 + 24);
        if (!v31) {
          sub_56964();
        }
        char v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v31 + 48))(v31, v16);
        std::__shared_weak_count::__release_weak(v15);
        if ((v32 & 1) == 0) {
          goto LABEL_63;
        }
        *a1 = v16;
      }
      else
      {
        *a1 = 0;
      }
      a1[1] = (uint64_t)v15;
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v15);
      return sub_3BCAC(&v41);
    }
  }
LABEL_56:
  *a1 = 0;
  a1[1] = 0;
  return sub_3BCAC(&v41);
}

void sub_11024C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::__shared_weak_count::__release_weak(v15);
  sub_4636C(v15);
  sub_3BCAC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_110308(void *a1, unint64_t *a2)
{
  if (a1)
  {
    char v3 = a1;
    uint64_t v4 = 1;
    do
    {
      if (!sub_E0404(a2, v3 + 4))
      {
        if (!sub_E0404(v3 + 4, a2)) {
          return v4;
        }
        ++v3;
      }
      char v3 = (void *)*v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t sub_110374(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_46B38((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  uint64_t v6 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  sub_46A4C((uint64_t *)(a1 + 48), a2 + 48);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  int v7 = *(const void **)(a2 + 80);
  if (v7) {
    CFRetain(v7);
  }
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_110420(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_11043C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  int v7 = (char **)(a1 + 1);
  uint64_t v8 = (char **)(a1 + 1);
  if (v5)
  {
    int v7 = (char **)(a1 + 1);
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (char **)v5;
        uint64_t v10 = (uint64_t)(v5 + 32);
        if ((sub_3F30B4(a2, (uint64_t)(v5 + 32)) & 0x80) == 0) {
          break;
        }
        uint64_t v5 = *v8;
        int v7 = v8;
        if (!*v8) {
          goto LABEL_11;
        }
      }
      if ((sub_3F30B4(v10, a2) & 0x80) == 0) {
        break;
      }
      int v7 = v8 + 1;
      uint64_t v5 = v8[1];
      if (!v5) {
        goto LABEL_11;
      }
    }
    if (*v7) {
      return 0;
    }
  }
LABEL_11:
  uint64_t v12 = (char *)operator new(0x88uLL);
  v15[0] = v12;
  v15[1] = v6;
  char v16 = 0;
  *((void *)v12 + 4) = 0;
  *((void *)v12 + 5) = 0;
  *((void *)v12 + 6) = 0;
  sub_46B38((void *)v12 + 4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *((void *)v12 + 7) = *(void *)(a3 + 24);
  v12[64] = *(unsigned char *)(a3 + 32);
  *((_DWORD *)v12 + 18) = *(_DWORD *)(a3 + 40);
  sub_46A4C((uint64_t *)v12 + 10, a3 + 48);
  *((_DWORD *)v12 + 26) = *(_DWORD *)(a3 + 72);
  uint64_t v13 = *(void *)(a3 + 80);
  if (v13) {
    CFRetain(*(CFTypeRef *)(a3 + 80));
  }
  *((void *)v12 + 14) = v13;
  *(_OWORD *)(v12 + 120) = *(_OWORD *)(a3 + 88);
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  char v16 = 1;
  *(void *)uint64_t v12 = 0;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = v8;
  *int v7 = v12;
  uint64_t v14 = (uint64_t *)**a1;
  if (v14)
  {
    *a1 = v14;
    uint64_t v12 = *v7;
  }
  sub_46D00(a1[1], (uint64_t *)v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  v15[0] = 0;
  sub_11064C((uint64_t)v15);
  return 1;
}

void sub_1105C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 40) = v5;
    operator delete(v5);
  }
  sub_11064C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1105F4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  char v3 = *(const void **)(a1 + 80);
  if (v3) {
    CFRelease(v3);
  }
  sub_463E0(*(void **)(a1 + 56));
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_11064C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10EDF0((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

std::logic_error *sub_1106A4(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_1106D8(_DWORD *a1, uint64_t *a2)
{
  sub_43F38(&v6, a2, "", 486);
  if ((*(_WORD *)(v6 + 184) & 2) != 0) {
    unsigned int v4 = 1717793397;
  }
  else {
    unsigned int v4 = 1852011125;
  }
  sub_110788(a1, v4, a2, 0);
  uint64_t v5 = v7;
  if (v7)
  {
    sub_4636C(v5);
  }
}

void sub_110770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_4636C(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_110788(_DWORD *a1, unsigned int a2, uint64_t *a3, int a4)
{
  v33[0] = 0;
  v33[1] = 0;
  char v32 = (uint64_t *)v33;
  uint64_t v8 = (std::__shared_weak_count *)a3[1];
  uint64_t v34 = *a3;
  int v35 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_DD9D0(&v25, &v34, 1);
  unsigned int v28 = a2;
  uint64_t v29 = (uint64_t)&v29;
  __int16 v30 = &v29;
  uint64_t v31 = 0;
  uint64_t v9 = v27;
  if (v27)
  {
    uint64_t v11 = v25;
    uint64_t v10 = v26;
    uint64_t v12 = *v26;
    *(void *)(v12 + 8) = *(void *)(v25 + 8);
    **(void **)(v11 + 8) = v12;
    uint64_t v13 = v29;
    *(void *)(v29 + 8) = v10;
    uint64_t *v10 = v13;
    uint64_t v29 = v11;
    *(void *)(v11 + 8) = &v29;
    uint64_t v31 = v9;
    uint64_t v27 = 0;
    a2 = v28;
  }
  sub_110A6C(&v32, a2, (int *)&v28);
  sub_8108(&v29);
  sub_8108(&v25);
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  uint64_t v14 = (std::__shared_weak_count *)a3[1];
  if (v14)
  {
    char v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      char v16 = v15;
      uint64_t v17 = *a3;
      if (*a3
        && (*(unsigned int (**)(uint64_t))(*(void *)v17 + 120))(*a3)
        && (*(unsigned int (**)(uint64_t))(*(void *)v17 + 152))(v17))
      {
        size_t v18 = (std::__shared_weak_count *)a3[1];
        uint64_t v34 = *a3;
        int v35 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        sub_DD9D0(&v25, &v34, 1);
        unsigned int v19 = 1684238965;
        unsigned int v28 = 1684238965;
        uint64_t v29 = (uint64_t)&v29;
        __int16 v30 = &v29;
        uint64_t v31 = 0;
        uint64_t v20 = v27;
        if (v27)
        {
          uint64_t v22 = v25;
          uint64_t v21 = v26;
          uint64_t v23 = *v26;
          *(void *)(v23 + 8) = *(void *)(v25 + 8);
          **(void **)(v22 + 8) = v23;
          uint64_t v24 = v29;
          *(void *)(v29 + 8) = v21;
          uint64_t *v21 = v24;
          uint64_t v29 = v22;
          *(void *)(v22 + 8) = &v29;
          uint64_t v31 = v20;
          uint64_t v27 = 0;
          unsigned int v19 = v28;
        }
        sub_110A6C(&v32, v19, (int *)&v28);
        sub_8108(&v29);
        sub_8108(&v25);
        if (v35) {
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      sub_4636C(v16);
    }
  }
  sub_110B44(a1, &v32, a4);
  sub_FB43C(v33[0]);
}

void sub_1109F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  sub_8108(v19);
  sub_8108(&a10);
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 64);
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  sub_4636C(v18);
  sub_FB43C(a18);
  _Unwind_Resume(a1);
}

void sub_110A6C(uint64_t **a1, unsigned int a2, int *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  int v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        int v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v10 = (char *)operator new(0x40uLL);
    int v11 = *a3;
    v12[1] = v6;
    *((_DWORD *)v10 + 8) = v11;
    *((void *)v10 + 5) = v10 + 40;
    *((void *)v10 + 6) = v10 + 40;
    *((void *)v10 + 7) = 0;
    sub_D39BC((uint64_t)(v10 + 40), (uint64_t *)v10 + 5, (void *)a3 + 1);
    char v13 = 1;
    sub_46CA8(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    sub_FB6C8((uint64_t)v12);
  }
}

void sub_110B44(_DWORD *a1, void *a2, int a3)
{
  uint64_t v180 = (uint64_t)&v180;
  char v181 = &v180;
  uint64_t v182 = 0;
  uint64_t v177 = (uint64_t)&v177;
  uint64_t v178 = &v177;
  uint64_t v179 = 0;
  uint64_t v174 = (uint64_t)&v174;
  unint64_t v175 = &v174;
  uint64_t v176 = 0;
  __int16 v172 = a1;
  char v173 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1);
  sub_1121A8((uint64_t)a1, 0x66637275u, (uint64_t)a2, &v180, &v177, &v174);
  sub_1121A8((uint64_t)a1, 0x6E637275u, (uint64_t)a2, &v180, &v177, &v174);
  char v171 = a1;
  if (a3) {
    goto LABEL_314;
  }
  *(void *)int buf = a1;
  uint8_t buf[8] = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1);
  int v6 = a1[114];
  int v7 = sub_3BCAC(buf);
  if (!v6)
  {
    sub_523D8(v7, (uint64_t)v171);
    sub_10C194(v171, a2, &v180, &v177);
  }
  sub_10E5DC((uint64_t)v171);
  sub_10C834((uint64_t)&v204, a2);
  char v170 = v171 + 51;
  sub_1125D8((uint64_t)&v202, v171[52], (uint64_t)(v171 + 51));
  char v169 = v171 + 54;
  sub_1125D8((uint64_t)&v200, v171[55], (uint64_t)(v171 + 54));
  sub_1125D8((uint64_t)&v198, (uint64_t)v181, (uint64_t)&v180);
  sub_1125D8((uint64_t)&v196, (uint64_t)v178, (uint64_t)&v177);
  uint64_t v8 = (uint64_t **)(v171 + 49);
  unsigned int v9 = (uint64_t *)v171[49];
  if (!v9)
  {
    uint64_t v12 = 0;
    goto LABEL_12;
  }
  uint64_t v10 = (uint64_t *)v171[49];
  while (1)
  {
    unsigned int v11 = *((_DWORD *)v10 + 8);
    if (v11 <= 0x66637275) {
      break;
    }
LABEL_8:
    uint64_t v10 = (uint64_t *)*v10;
    if (!v10)
    {
      uint64_t v12 = 0;
      goto LABEL_14;
    }
  }
  if (v11 != 1717793397)
  {
    ++v10;
    goto LABEL_8;
  }
  uint64_t v12 = sub_112658(v9, 0x66637275u);
  unsigned int v9 = *v8;
  if (!*v8)
  {
LABEL_12:
    char v168 = 0;
    goto LABEL_27;
  }
LABEL_14:
  char v13 = v9;
  while (1)
  {
    unsigned int v14 = *((_DWORD *)v13 + 8);
    if (v14 <= 0x6E637275) {
      break;
    }
LABEL_18:
    char v13 = (uint64_t *)*v13;
    if (!v13)
    {
      char v168 = 0;
      goto LABEL_21;
    }
  }
  if (v14 != 1852011125)
  {
    ++v13;
    goto LABEL_18;
  }
  char v168 = sub_112658(v9, 0x6E637275u);
  unsigned int v9 = *v8;
LABEL_21:
  if (!v9) {
    goto LABEL_27;
  }
  char v15 = v9;
  while (2)
  {
    unsigned int v16 = *((_DWORD *)v15 + 8);
    if (v16 > 0x70707570)
    {
LABEL_26:
      char v15 = (uint64_t *)*v15;
      if (!v15) {
        goto LABEL_27;
      }
      continue;
    }
    break;
  }
  if (v16 != 1886418288)
  {
    ++v15;
    goto LABEL_26;
  }
  char v124 = v205[0];
  if (!v205[0]) {
    goto LABEL_27;
  }
  while (2)
  {
    unsigned int v125 = *((_DWORD *)v124 + 8);
    if (v125 > 0x70707570)
    {
LABEL_225:
      char v124 = (uint64_t *)*v124;
      if (!v124) {
        goto LABEL_27;
      }
      continue;
    }
    break;
  }
  if (v125 != 1886418288)
  {
    ++v124;
    goto LABEL_225;
  }
  uint64_t v159 = sub_112658(v9, 0x70707570u)[1];
  char v160 = sub_112658(*v8, 0x70707570u);
  sub_1125D8((uint64_t)&v206, v159, (uint64_t)v160);
  uint64_t v161 = sub_112658(v205[0], 0x70707570u)[1];
  char v162 = sub_112658(v205[0], 0x70707570u);
  sub_1125D8((uint64_t)&v193, v161, (uint64_t)v162);
  *(_OWORD *)&v192.__r_.__value_.__r.__words[1] = 0uLL;
  v192.__r_.__value_.__r.__words[0] = (std::string::size_type)&v192.__r_.__value_.__l.__size_;
  sub_1126A4((uint64_t)buf, v206, &v207, v193, &v194, (uint64_t)&v192, (uint64_t)&v192.__r_.__value_.__l.__size_);
  char v163 = (std::string::__raw *)v192.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v192.__r_.__value_.__l.__data_ != &v192.__r_.__value_.__r.__words[1])
  {
    do
    {
      char v164 = sub_112658(*v8, 0x70707570u);
      sub_10212C(v164, (uint64_t *)&v163[1].__words[1]);
      int v165 = (std::string *)v163->__words[1];
      if (v165)
      {
        do
        {
          char v166 = v165;
          int v165 = (std::string *)v165->__r_.__value_.__r.__words[0];
        }
        while (v165);
      }
      else
      {
        do
        {
          char v166 = (std::string *)v163->__words[2];
          BOOL v30 = v166->__r_.__value_.__r.__words[0] == (void)v163;
          char v163 = (std::string::__raw *)v166;
        }
        while (!v30);
      }
      char v163 = (std::string::__raw *)v166;
    }
    while (v166 != (std::string *)&v192.__r_.__value_.__r.__words[1]);
  }
  sub_10E118((void *)v192.__r_.__value_.__l.__size_);
  sub_10E118(v194);
  sub_10E118(v207);
LABEL_27:
  if (!(v182 | v179)) {
    goto LABEL_142;
  }
  AudioObjectID v194 = 0;
  uint64_t v195 = 0;
  v193 = &v194;
  sub_1126A4((uint64_t)buf, v202, v203, v198, v199, (uint64_t)&v193, (uint64_t)&v194);
  sub_1126A4((uint64_t)buf, v200, v201, v196, v197, (uint64_t)&v193, (uint64_t)v193);
  char v167 = v12;
  if (v195)
  {
    uint64_t v17 = (os_log_t *)sub_32A48(9);
    size_t v18 = *v17;
    if (*v17 && os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v19 = v193;
      memset(&v192, 0, sizeof(v192));
      std::string::append(&v192, "{ ", 2uLL);
      if (v19 != &v194)
      {
        while (1)
        {
          sub_D98B8(&v206, (uint64_t)(v19 + 4));
          if (v208 >= 0) {
            uint64_t v20 = (const std::string::value_type *)&v206;
          }
          else {
            uint64_t v20 = v206;
          }
          if (v208 >= 0) {
            std::string::size_type v21 = HIBYTE(v208);
          }
          else {
            std::string::size_type v21 = (std::string::size_type)v207;
          }
          std::string::append(&v192, v20, v21);
          if (SHIBYTE(v208) < 0) {
            operator delete(v206);
          }
          uint64_t v22 = (void *)v19[1];
          if (v22)
          {
            do
            {
              uint64_t v23 = (void **)v22;
              uint64_t v22 = (void *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              uint64_t v23 = (void **)v19[2];
              BOOL v30 = *v23 == v19;
              unsigned int v19 = v23;
            }
            while (!v30);
          }
          if (v23 == &v194) {
            break;
          }
          std::string::append(&v192, ", ", 2uLL);
          unsigned int v19 = v23;
        }
      }
      std::string::append(&v192, " }", 2uLL);
      if ((v192.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v192;
      }
      else {
        uint64_t v24 = (std::string *)v192.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "PortManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 916;
      __int16 v210 = 2080;
      unsigned int v211 = v24;
      _os_log_impl(&def_1E50E8, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d The following ports are being redundantly connected or disconnected. Ignoring prior connections/disconnections. %s", buf, 0x1Cu);
      if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v192.__r_.__value_.__l.__data_);
      }
      uint64_t v12 = v167;
    }
    char v25 = 0;
    uint64_t v26 = 0;
    *(void *)int buf = v12;
    *(void *)&uint8_t buf[8] = v168;
    do
    {
      char v27 = v25;
      unsigned int v28 = *(uint64_t **)&buf[8 * v26];
      uint64_t v29 = v193;
      if (v28) {
        BOOL v30 = v193 == &v194;
      }
      else {
        BOOL v30 = 1;
      }
      if (!v30)
      {
        do
        {
          sub_10212C(v28, v29 + 4);
          uint64_t v31 = (void *)v29[1];
          if (v31)
          {
            do
            {
              char v32 = (void **)v31;
              uint64_t v31 = (void *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              char v32 = (void **)v29[2];
              BOOL v30 = *v32 == v29;
              uint64_t v29 = v32;
            }
            while (!v30);
          }
          uint64_t v29 = v32;
        }
        while (v32 != &v194);
      }
      char v25 = 1;
      uint64_t v26 = 1;
    }
    while ((v27 & 1) == 0);
    uint64_t v12 = v167;
  }
  sub_10E118(v194);
  if (v179)
  {
    int v207 = 0;
    uint64_t v208 = 0;
    std::string::size_type v206 = (std::string::value_type *)&v207;
    sub_1126A4((uint64_t)buf, v202, v203, v196, v197, (uint64_t)&v206, (uint64_t)&v207);
    unint64_t v33 = v206;
    if (v206 != (std::string::value_type *)&v207)
    {
      do
      {
        sub_10212C(v170, (uint64_t *)v33 + 4);
        sub_10212C(&v177, (uint64_t *)v33 + 4);
        uint64_t v34 = (std::string::value_type *)*((void *)v33 + 1);
        if (v34)
        {
          do
          {
            int v35 = (std::string::value_type **)v34;
            uint64_t v34 = *(std::string::value_type **)v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            int v35 = (std::string::value_type **)*((void *)v33 + 2);
            BOOL v30 = *v35 == v33;
            unint64_t v33 = (std::string::value_type *)v35;
          }
          while (!v30);
        }
        unint64_t v33 = (std::string::value_type *)v35;
      }
      while (v35 != (std::string::value_type **)&v207);
    }
    char v36 = 0;
    uint64_t v37 = 0;
    *(void *)int buf = v12;
    *(void *)&uint8_t buf[8] = v168;
    do
    {
      char v38 = v36;
      unint64_t v39 = *(uint64_t **)&buf[8 * v37];
      uint8x8_t v40 = v206;
      if (v39) {
        BOOL v41 = v206 == (std::string::value_type *)&v207;
      }
      else {
        BOOL v41 = 1;
      }
      if (!v41)
      {
        do
        {
          sub_10212C(v39, (uint64_t *)v40 + 4);
          char v42 = (std::string::value_type *)*((void *)v40 + 1);
          if (v42)
          {
            do
            {
              BOOL v43 = (std::string::value_type **)v42;
              char v42 = *(std::string::value_type **)v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              BOOL v43 = (std::string::value_type **)*((void *)v40 + 2);
              BOOL v30 = *v43 == v40;
              uint8x8_t v40 = (std::string::value_type *)v43;
            }
            while (!v30);
          }
          uint8x8_t v40 = (std::string::value_type *)v43;
        }
        while (v43 != (std::string::value_type **)&v207);
      }
      char v36 = 1;
      uint64_t v37 = 1;
    }
    while ((v38 & 1) == 0);
    char v44 = 0;
    uint64_t v45 = 0;
    *(void *)int buf = 0x6E63727566637275;
    uint64_t v12 = v167;
    while (1)
    {
      char v46 = v44;
      if (!v205[0]) {
        goto LABEL_102;
      }
      unsigned int v47 = *(_DWORD *)&buf[4 * v45];
      uint64_t v48 = v205[0];
      while (1)
      {
        unsigned int v49 = *((_DWORD *)v48 + 8);
        if (v47 >= v49) {
          break;
        }
LABEL_92:
        uint64_t v48 = (uint64_t *)*v48;
        if (!v48) {
          goto LABEL_102;
        }
      }
      if (v49 < v47) {
        break;
      }
      size_t v50 = sub_112658(v205[0], v47);
      unsigned __int8 v51 = v206;
      if (v206 != (std::string::value_type *)&v207)
      {
        uint64_t v52 = v50;
        do
        {
          sub_10212C(v52, (uint64_t *)v51 + 4);
          unint64_t v53 = (std::string::value_type *)*((void *)v51 + 1);
          if (v53)
          {
            do
            {
              uint64_t v54 = (std::string::value_type **)v53;
              unint64_t v53 = *(std::string::value_type **)v53;
            }
            while (v53);
          }
          else
          {
            do
            {
              uint64_t v54 = (std::string::value_type **)*((void *)v51 + 2);
              BOOL v30 = *v54 == v51;
              unsigned __int8 v51 = (std::string::value_type *)v54;
            }
            while (!v30);
          }
          unsigned __int8 v51 = (std::string::value_type *)v54;
        }
        while (v54 != (std::string::value_type **)&v207);
      }
LABEL_102:
      char v44 = 1;
      uint64_t v45 = 1;
      if (v46)
      {
        sub_10E118(v207);
        goto LABEL_104;
      }
    }
    ++v48;
    goto LABEL_92;
  }
LABEL_104:
  if (!v182) {
    goto LABEL_142;
  }
  int v207 = 0;
  uint64_t v208 = 0;
  std::string::size_type v206 = (std::string::value_type *)&v207;
  sub_1126A4((uint64_t)buf, v200, v201, v198, v199, (uint64_t)&v206, (uint64_t)&v207);
  char v55 = v206;
  if (v206 != (std::string::value_type *)&v207)
  {
    do
    {
      sub_10212C(v169, (uint64_t *)v55 + 4);
      sub_10212C(&v180, (uint64_t *)v55 + 4);
      uint64_t v56 = (std::string::value_type *)*((void *)v55 + 1);
      if (v56)
      {
        do
        {
          unsigned __int8 v57 = (std::string::value_type **)v56;
          uint64_t v56 = *(std::string::value_type **)v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          unsigned __int8 v57 = (std::string::value_type **)*((void *)v55 + 2);
          BOOL v30 = *v57 == v55;
          char v55 = (std::string::value_type *)v57;
        }
        while (!v30);
      }
      char v55 = (std::string::value_type *)v57;
    }
    while (v57 != (std::string::value_type **)&v207);
  }
  char v58 = 0;
  uint64_t v59 = 0;
  *(void *)int buf = v12;
  *(void *)&uint8_t buf[8] = v168;
  do
  {
    char v60 = v58;
    std::string v61 = *(uint64_t **)&buf[8 * v59];
    char v62 = v206;
    if (v61) {
      BOOL v63 = v206 == (std::string::value_type *)&v207;
    }
    else {
      BOOL v63 = 1;
    }
    if (!v63)
    {
      do
      {
        sub_10212C(v61, (uint64_t *)v62 + 4);
        long long v64 = (std::string::value_type *)*((void *)v62 + 1);
        if (v64)
        {
          do
          {
            __int16 v65 = (std::string::value_type **)v64;
            long long v64 = *(std::string::value_type **)v64;
          }
          while (v64);
        }
        else
        {
          do
          {
            __int16 v65 = (std::string::value_type **)*((void *)v62 + 2);
            BOOL v30 = *v65 == v62;
            char v62 = (std::string::value_type *)v65;
          }
          while (!v30);
        }
        char v62 = (std::string::value_type *)v65;
      }
      while (v65 != (std::string::value_type **)&v207);
    }
    char v58 = 1;
    uint64_t v59 = 1;
  }
  while ((v60 & 1) == 0);
  char v66 = 0;
  uint64_t v67 = 0;
  *(void *)int buf = 0x6E63727566637275;
  uint64_t v12 = v167;
  do
  {
    char v68 = v66;
    if (!v205[0]) {
      goto LABEL_140;
    }
    unsigned int v69 = *(_DWORD *)&buf[4 * v67];
    uint64_t v70 = v205[0];
    while (1)
    {
      unsigned int v71 = *((_DWORD *)v70 + 8);
      if (v69 >= v71) {
        break;
      }
LABEL_130:
      uint64_t v70 = (uint64_t *)*v70;
      if (!v70) {
        goto LABEL_140;
      }
    }
    if (v71 < v69)
    {
      ++v70;
      goto LABEL_130;
    }
    int v72 = sub_112658(v205[0], v69);
    os_log_t v73 = v206;
    if (v206 != (std::string::value_type *)&v207)
    {
      uint64_t v74 = v72;
      do
      {
        sub_10212C(v74, (uint64_t *)v73 + 4);
        AudioObjectID v75 = (std::string::value_type *)*((void *)v73 + 1);
        if (v75)
        {
          do
          {
            uint64_t v76 = (std::string::value_type **)v75;
            AudioObjectID v75 = *(std::string::value_type **)v75;
          }
          while (v75);
        }
        else
        {
          do
          {
            uint64_t v76 = (std::string::value_type **)*((void *)v73 + 2);
            BOOL v30 = *v76 == v73;
            os_log_t v73 = (std::string::value_type *)v76;
          }
          while (!v30);
        }
        os_log_t v73 = (std::string::value_type *)v76;
      }
      while (v76 != (std::string::value_type **)&v207);
    }
LABEL_140:
    char v66 = 1;
    uint64_t v67 = 1;
  }
  while ((v68 & 1) == 0);
  sub_10E118(v207);
LABEL_142:
  if (v176)
  {
    char v77 = 0;
    uint64_t v78 = 0;
    *(void *)int buf = v12;
    *(void *)&uint8_t buf[8] = v168;
    do
    {
      char v79 = v77;
      std::string::size_type v80 = *(uint64_t **)&buf[8 * v78];
      AudioObjectID v81 = v175;
      if (v80 && v175 != &v174)
      {
        do
        {
          sub_10212C(v80, v81 + 2);
          AudioObjectID v81 = (uint64_t *)v81[1];
        }
        while (v81 != &v174);
      }
      char v77 = 1;
      uint64_t v78 = 1;
    }
    while ((v79 & 1) == 0);
  }
  long long v82 = (uint64_t **)(v171 + 48);
  uint64_t v83 = (uint64_t *)v204;
  if (v204 != v205)
  {
    do
    {
      uint64_t v84 = (unsigned int *)(v83 + 4);
      uint64_t v85 = *v8;
      char v86 = (uint64_t **)(v171 + 49);
      uint64_t v87 = (uint64_t **)(v171 + 49);
      if (*v8)
      {
        unsigned int v88 = *v84;
        while (1)
        {
          while (1)
          {
            uint64_t v87 = (uint64_t **)v85;
            unsigned int v89 = *((_DWORD *)v85 + 8);
            if (v88 >= v89) {
              break;
            }
            uint64_t v85 = *v87;
            char v86 = v87;
            if (!*v87) {
              goto LABEL_157;
            }
          }
          if (v89 >= v88) {
            break;
          }
          uint64_t v85 = v87[1];
          if (!v85)
          {
            char v86 = v87 + 1;
            goto LABEL_157;
          }
        }
        uint64_t v92 = v83 + 5;
        AudioObjectID v93 = (uint64_t *)v83[6];
        if (v93 != v83 + 5)
        {
          uint64_t v94 = (uint64_t **)operator new(0x20uLL);
          std::string v95 = v94;
          NSObject *v94 = 0;
          v94[1] = 0;
          CFStringRef v94[2] = (uint64_t *)v93[2];
          uint64_t v96 = v93[3];
          v94[3] = (uint64_t *)v96;
          if (v96) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v96 + 16), 1uLL, memory_order_relaxed);
          }
          uint64_t v97 = (void *)v93[1];
          if (v97 == v92)
          {
            uint64_t v98 = 1;
          }
          else
          {
            uint64_t v98 = 1;
            char v99 = (uint64_t *)v94;
            do
            {
              uint64_t v94 = (uint64_t **)operator new(0x20uLL);
              NSObject *v94 = v99;
              v94[1] = 0;
              CFStringRef v94[2] = (uint64_t *)v97[2];
              __int16 v100 = (uint64_t *)v97[3];
              v94[3] = v100;
              if (v100) {
                atomic_fetch_add_explicit(v100 + 2, 1uLL, memory_order_relaxed);
              }
              v99[1] = (uint64_t)v94;
              ++v98;
              uint64_t v97 = (void *)v97[1];
              char v99 = (uint64_t *)v94;
            }
            while (v97 != v92);
          }
          uint64_t v101 = v87[5];
          v101[1] = (uint64_t)v95;
          *std::string v95 = v101;
          v87[5] = (uint64_t *)v94;
          v94[1] = (uint64_t *)(v87 + 5);
          v87[7] = (uint64_t *)((char *)v87[7] + v98);
        }
      }
      else
      {
LABEL_157:
        sub_FB658((uint64_t)buf, (uint64_t)v82, (uint64_t)v84);
        sub_46CA8(v82, (uint64_t)v87, v86, *(uint64_t **)buf);
        *(void *)int buf = 0;
        sub_FB6C8((uint64_t)buf);
      }
      char v90 = (uint64_t *)v83[1];
      if (v90)
      {
        do
        {
          uint64_t v91 = (uint64_t **)v90;
          char v90 = (uint64_t *)*v90;
        }
        while (v90);
      }
      else
      {
        do
        {
          uint64_t v91 = (uint64_t **)v83[2];
          BOOL v30 = *v91 == v83;
          uint64_t v83 = (uint64_t *)v91;
        }
        while (!v30);
      }
      uint64_t v83 = (uint64_t *)v91;
    }
    while (v91 != v205);
  }
  sub_10C834((uint64_t)&v206, v82);
  uint64_t v102 = v206;
  if (v206 != (std::string::value_type *)&v207)
  {
    do
    {
      if (!*((void *)v102 + 7))
      {
        __int16 v105 = *v8;
        if (*v8)
        {
          unsigned int v106 = *((_DWORD *)v102 + 8);
          os_signpost_id_t v107 = v171 + 49;
          int v108 = *v8;
          do
          {
            unsigned int v109 = *((_DWORD *)v108 + 8);
            BOOL v110 = v109 >= v106;
            if (v109 >= v106) {
              uint64_t v111 = v108;
            }
            else {
              uint64_t v111 = v108 + 1;
            }
            if (v110) {
              os_signpost_id_t v107 = v108;
            }
            int v108 = (uint64_t *)*v111;
          }
          while (*v111);
          if (v107 != (uint64_t *)v8 && v106 >= *((_DWORD *)v107 + 8))
          {
            int v112 = (uint64_t *)v107[1];
            char v113 = v107;
            if (v112)
            {
              do
              {
                uint64_t v114 = v112;
                int v112 = (uint64_t *)*v112;
              }
              while (v112);
            }
            else
            {
              do
              {
                uint64_t v114 = (uint64_t *)v113[2];
                BOOL v30 = *v114 == (void)v113;
                char v113 = v114;
              }
              while (!v30);
            }
            if (*v82 == v107) {
              *long long v82 = v114;
            }
            --v171[50];
            sub_89144(v105, v107);
            sub_8108(v107 + 5);
            operator delete(v107);
          }
        }
      }
      uint64_t v103 = (std::string::value_type *)*((void *)v102 + 1);
      if (v103)
      {
        do
        {
          uint64_t v104 = (std::string::value_type **)v103;
          uint64_t v103 = *(std::string::value_type **)v103;
        }
        while (v103);
      }
      else
      {
        do
        {
          uint64_t v104 = (std::string::value_type **)*((void *)v102 + 2);
          BOOL v30 = *v104 == v102;
          uint64_t v102 = (std::string::value_type *)v104;
        }
        while (!v30);
      }
      uint64_t v102 = (std::string::value_type *)v104;
    }
    while (v104 != (std::string::value_type **)&v207);
  }
  sub_10E4AC(v170, v170, v181, &v180);
  sub_10E4AC(v169, v169, v178, &v177);
  uint64_t v115 = sub_298DA4();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v115 + 256))(v115)) {
    goto LABEL_313;
  }
  char v116 = *v8;
  if (!*v8)
  {
    char v119 = 0;
    char v120 = 0;
    char v121 = v171;
    goto LABEL_228;
  }
  char v117 = *v8;
  while (2)
  {
    unsigned int v118 = *((_DWORD *)v117 + 8);
    if (v118 > 0x66637275)
    {
LABEL_210:
      char v117 = (uint64_t *)*v117;
      if (!v117)
      {
        char v119 = 0;
        goto LABEL_214;
      }
      continue;
    }
    break;
  }
  if (v118 != 1717793397)
  {
    ++v117;
    goto LABEL_210;
  }
  char v119 = sub_112658(v116, 0x66637275u);
  char v116 = *v8;
LABEL_214:
  char v121 = v171;
  if (!v116)
  {
LABEL_220:
    char v120 = 0;
    goto LABEL_228;
  }
  char v122 = v116;
  while (2)
  {
    unsigned int v123 = *((_DWORD *)v122 + 8);
    if (v123 > 0x6E637275)
    {
LABEL_219:
      char v122 = (uint64_t *)*v122;
      if (!v122) {
        goto LABEL_220;
      }
      continue;
    }
    break;
  }
  if (v123 != 1852011125)
  {
    ++v122;
    goto LABEL_219;
  }
  char v120 = sub_112658(v116, 0x6E637275u);
LABEL_228:
  sub_1127EC((uint64_t)&v193, v121[52], (uint64_t)v170);
  sub_1127EC((uint64_t)&v192, v121[55], (uint64_t)v169);
  char v126 = (uint64_t *)&v189;
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  uint64_t v189 = &v190;
  char v127 = v193;
  char v128 = (std::string *)v192.__r_.__value_.__r.__words[0];
  int v187 = (uint64_t *)&v189;
  v188[0] = &v190;
  if (v193 == &v194)
  {
    char v135 = &v190;
LABEL_251:
    sub_112B3C((uint64_t)buf, v128, &v192.__r_.__value_.__l.__size_, (uint64_t)v126, (uint64_t)v135);
  }
  else
  {
    while (v128 != (std::string *)&v192.__r_.__value_.__r.__words[1])
    {
      if (sub_E0404(&v128[1].__r_.__value_.__l.__size_, v127 + 4))
      {
        sub_112BD4((uint64_t)&v187, &v128[1].__r_.__value_.__l.__size_);
        std::string::size_type size = (std::string *)v128->__r_.__value_.__l.__size_;
        if (size)
        {
          do
          {
            char v128 = size;
            std::string::size_type size = (std::string *)size->__r_.__value_.__r.__words[0];
          }
          while (size);
        }
        else
        {
          do
          {
            char v130 = v128;
            char v128 = (std::string *)v128->__r_.__value_.__r.__words[2];
          }
          while ((std::string *)v128->__r_.__value_.__l.__data_ != v130);
        }
      }
      else
      {
        if (sub_E0404(v127 + 4, &v128[1].__r_.__value_.__l.__size_))
        {
          char v131 = v128;
        }
        else
        {
          char v132 = (std::string *)v128->__r_.__value_.__l.__size_;
          if (v132)
          {
            do
            {
              char v131 = v132;
              char v132 = (std::string *)v132->__r_.__value_.__r.__words[0];
            }
            while (v132);
          }
          else
          {
            do
            {
              char v131 = (std::string *)v128->__r_.__value_.__r.__words[2];
              BOOL v30 = v131->__r_.__value_.__r.__words[0] == (void)v128;
              char v128 = v131;
            }
            while (!v30);
          }
        }
        sub_112BD4((uint64_t)&v187, v127 + 4);
        __int16 v133 = (void *)v127[1];
        if (v133)
        {
          do
          {
            char v127 = v133;
            __int16 v133 = (void *)*v133;
          }
          while (v133);
        }
        else
        {
          do
          {
            char v134 = v127;
            char v127 = (void *)v127[2];
          }
          while ((void *)*v127 != v134);
        }
        char v128 = v131;
      }
      if (v127 == &v194)
      {
        char v126 = v187;
        char v135 = (void **)v188[0];
        goto LABEL_251;
      }
    }
    sub_112B3C((uint64_t)buf, v127, &v194, (uint64_t)v187, (uint64_t)v188[0]);
  }
  char v136 = 0;
  uint64_t v137 = 0;
  v188[0] = 0;
  v188[1] = 0;
  int v187 = (uint64_t *)v188;
  *(void *)int buf = v119;
  *(void *)&uint8_t buf[8] = v120;
  do
  {
    char v138 = v136;
    uint64_t v139 = *(void *)&buf[8 * v137];
    if (v139)
    {
      for (uint64_t i = *(void *)(v139 + 8); i != v139; uint64_t i = *(void *)(i + 8))
        sub_112868(&v187, v188, (uint64_t *)(i + 16));
    }
    char v136 = 1;
    uint64_t v137 = 1;
  }
  while ((v138 & 1) == 0);
  if (v191 != v192.__r_.__value_.__r.__words[2] + v195)
  {
    char v141 = (os_log_t *)sub_32A48(13);
    char v142 = *v141;
    if (*v141)
    {
      if (os_log_type_enabled(*v141, OS_LOG_TYPE_ERROR))
      {
        sub_10D9A8(&v186, v171[52], (uint64_t)v170);
        int v143 = SHIBYTE(v186.__r_.__value_.__r.__words[2]);
        std::string::size_type v144 = v186.__r_.__value_.__r.__words[0];
        sub_10D9A8(&__p, v171[55], (uint64_t)v169);
        char v145 = &v186;
        if (v143 < 0) {
          char v145 = (std::string *)v144;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 1098;
        __int16 v210 = 2080;
        unsigned int v211 = v145;
        __int16 v212 = 2080;
        uint64_t v213 = p_p;
        _os_log_impl(&def_1E50E8, v142, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Batch notification corruption: overlap between port connectins and disconnections. Connection list: %s; Disconnection list: %s\"",
          buf,
          0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v186.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  char v147 = v189;
  if (v189 != &v190)
  {
    char v148 = v187;
    while (sub_112910(v147 + 4, v148 + 4))
    {
      char v149 = (void *)v147[1];
      char v150 = v147;
      if (v149)
      {
        do
        {
          char v147 = v149;
          char v149 = (void *)*v149;
        }
        while (v149);
      }
      else
      {
        do
        {
          char v147 = (void *)v150[2];
          BOOL v30 = *v147 == (void)v150;
          char v150 = v147;
        }
        while (!v30);
      }
      char v151 = (uint64_t *)v148[1];
      if (v151)
      {
        do
        {
          char v152 = v151;
          char v151 = (uint64_t *)*v151;
        }
        while (v151);
      }
      else
      {
        do
        {
          char v152 = (uint64_t *)v148[2];
          BOOL v30 = *v152 == (void)v148;
          char v148 = v152;
        }
        while (!v30);
      }
      char v148 = v152;
      if (v147 == &v190) {
        goto LABEL_312;
      }
    }
    char v153 = (os_log_t *)sub_32A48(13);
    int v154 = *v153;
    if (*v153 && os_log_type_enabled(*v153, OS_LOG_TYPE_ERROR))
    {
      sub_10D9A8(&v186, v171[52], (uint64_t)v170);
      if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v155 = &v186;
      }
      else {
        char v155 = (std::string *)v186.__r_.__value_.__r.__words[0];
      }
      uint64_t v156 = &__p;
      sub_10D9A8(&__p, v171[55], (uint64_t)v169);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v156 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v119)
      {
        uint64_t v157 = &v184;
        sub_10D9A8(&v184, v119[1], (uint64_t)v119);
        if ((v184.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v157 = (std::string *)v184.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        uint64_t v157 = (std::string *)"NULL";
      }
      if (v120)
      {
        sub_10D9A8(&v183, v120[1], (uint64_t)v120);
        if ((v183.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v158 = &v183;
        }
        else {
          char v158 = (std::string *)v183.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136316418;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 1108;
        __int16 v210 = 2080;
        unsigned int v211 = v155;
        __int16 v212 = 2080;
        uint64_t v213 = v156;
        __int16 v214 = 2080;
        v215 = v157;
        __int16 v216 = 2080;
        v217 = (const char *)v158;
        _os_log_impl(&def_1E50E8, v154, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Batch notification corruption: connection/disconnection list contents do not match cached PortUpdateMap. Connection list: %s; Disconnection list: %s; Cacheable update list: %s; NonCacheable"
          " update list: %s\"",
          buf,
          0x3Au);
        if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v183.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        *(_DWORD *)int buf = 136316418;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 1108;
        __int16 v210 = 2080;
        unsigned int v211 = v155;
        __int16 v212 = 2080;
        uint64_t v213 = v156;
        __int16 v214 = 2080;
        v215 = v157;
        __int16 v216 = 2080;
        v217 = "NULL";
        _os_log_impl(&def_1E50E8, v154, OS_LOG_TYPE_ERROR, "%25s:%-5d ASSERTION FAILURE: \"Batch notification corruption: connection/disconnection list contents do not match cached PortUpdateMap. Connection list: %s; Disconnection list: %s; Cacheable update list: %s; NonCacheable"
          " update list: %s\"",
          buf,
          0x3Au);
      }
      if (v119 && SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v186.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_312:
  sub_10E118(v188[0]);
  sub_10E118(v190);
  sub_10E118((void *)v192.__r_.__value_.__l.__size_);
  sub_10E118(v194);
LABEL_313:
  sub_FB43C(v207);
  sub_10E118(v197[0]);
  sub_10E118(v199[0]);
  sub_10E118(v201[0]);
  sub_10E118(v203[0]);
  sub_FB43C(v205[0]);
LABEL_314:
  sub_3BCAC(&v172);
  sub_8108(&v174);
  sub_8108(&v177);
  sub_8108(&v180);
}

void sub_111F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  sub_10E118((void *)a46);
  sub_10E118((void *)a49);
  sub_10E118(*(void **)(v58 - 192));
  sub_10E118((void *)a52);
  sub_10E118((void *)a55);
  sub_10E118((void *)a58);
  sub_10E118(*(void **)(v58 - 240));
  sub_FB43C(*(void **)(v58 - 216));
  sub_3BCAC(&a16);
  sub_8108(&a18);
  sub_8108(&a21);
  sub_8108(&a24);
  _Unwind_Resume(a1);
}

void sub_1121A8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  sub_10E5DC(a1);
  sub_10E97C(*(void **)(a1 + 472));
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = a1 + 472;
  uint64_t v14 = *(void *)(a3 + 8);
  uint64_t v13 = a3 + 8;
  uint64_t v12 = v14;
  if (v14)
  {
    uint64_t v15 = v13;
    do
    {
      unsigned int v16 = *(_DWORD *)(v12 + 32);
      BOOL v17 = v16 >= a2;
      if (v16 >= a2) {
        size_t v18 = (uint64_t *)v12;
      }
      else {
        size_t v18 = (uint64_t *)(v12 + 8);
      }
      if (v17) {
        uint64_t v15 = v12;
      }
      uint64_t v12 = *v18;
    }
    while (*v18);
    if (v15 != v13 && *(_DWORD *)(v15 + 32) <= a2)
    {
      uint64_t v19 = v15 + 40;
      uint64_t v20 = *(void *)(v15 + 48);
      if (v20 != v15 + 40)
      {
        std::string::size_type v21 = (void *)(a1 + 88);
        do
        {
          sub_43F38((uint64_t *)&v37, (uint64_t *)(v20 + 16), "", 556);
          uint64_t v22 = (os_unfair_lock_s *)v37;
          uint64_t v23 = sub_10B3E8((uint64_t)v21, v37);
          if (v21 == (void *)v23
            && (*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&v22->_os_unfair_lock_opaque + 152))(v22))
          {
            uint64_t v24 = v38;
            if (v38) {
              atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            char v25 = operator new(0x20uLL);
            v25[2] = v22;
            uint64_t v25[3] = v24;
            uint64_t v26 = *a4;
            *char v25 = *a4;
            v25[1] = a4;
            *(void *)(v26 + 8) = v25;
            *a4 = (uint64_t)v25;
            char v27 = a4 + 2;
          }
          else if ((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v22->_os_unfair_lock_opaque + 152))(v22))
          {
            *(void *)int buf = v23;
            sub_10B660(v21, (uint64_t **)buf);
            sub_10AB6C((uint64_t)v21, v22);
            uint64_t v24 = v38;
            if (v38) {
              atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            unsigned int v28 = operator new(0x20uLL);
            uint64_t v28[2] = v22;
            v28[3] = v24;
            uint64_t v29 = *a6;
            *unsigned int v28 = *a6;
            v28[1] = a6;
            *(void *)(v29 + 8) = v28;
            *a6 = (uint64_t)v28;
            char v27 = a6 + 2;
          }
          else
          {
            if ((*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&v22->_os_unfair_lock_opaque + 160))(v22))
            {
              uint64_t v34 = (os_log_t *)sub_32A48(13);
              int v35 = *v34;
              if (*v34 && os_log_type_enabled(*v34, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 136315394;
                *(void *)&uint8_t buf[4] = "PortManager.cpp";
                __int16 v40 = 1024;
                int v41 = 569;
                _os_log_impl(&def_1E50E8, v35, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Illegal state. Port claims to be disconnected and routable.\"", buf, 0x12u);
              }
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Illegal state. Port claims to be disconnected and routable.");
            }
            if (v21 == (void *)v23)
            {
              char v32 = (os_log_t *)sub_32A48(9);
              unint64_t v33 = *v32;
              if (*v32)
              {
                if (os_log_type_enabled(*v32, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)int buf = 136315650;
                  *(void *)&uint8_t buf[4] = "PortManager.cpp";
                  __int16 v40 = 1024;
                  int v41 = 578;
                  __int16 v42 = 2048;
                  BOOL v43 = v22;
                  _os_log_impl(&def_1E50E8, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Unable to locate the disconnected Port at %p in PortManager's connected port list (yet). Adding to the disconnections list", buf, 0x1Cu);
                }
              }
            }
            uint64_t v24 = v38;
            if (v38) {
              atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            BOOL v30 = operator new(0x20uLL);
            v30[2] = v22;
            void v30[3] = v24;
            uint64_t v31 = *a5;
            *BOOL v30 = *a5;
            v30[1] = a5;
            *(void *)(v31 + 8) = v30;
            *a5 = (uint64_t)v30;
            char v27 = a5 + 2;
          }
          ++*v27;
          if (v24) {
            sub_4636C(v24);
          }
          uint64_t v20 = *(void *)(v20 + 8);
        }
        while (v20 != v19);
      }
    }
  }
}

void sub_11257C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_4636C(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1125D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_112D38((uint64_t **)a1, v4, (unint64_t *)(v6 + 16), (uint64_t *)(v6 + 16));
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_112644(_Unwind_Exception *a1)
{
  sub_10E118(*v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_112658(uint64_t *a1, unsigned int a2)
{
  if (!a1) {
LABEL_7:
  }
    sub_8251C("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unsigned int v2 = *((_DWORD *)a1 + 8);
      if (v2 <= a2) {
        break;
      }
      a1 = (uint64_t *)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (uint64_t *)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

double sub_1126A4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v20 = a6;
  *((void *)&v20 + 1) = a7;
  if (a2 != a3)
  {
    uint64_t v10 = a4;
    if (a4 != a5)
    {
      unsigned int v11 = a2;
      do
      {
        if (sub_73610(v11 + 4, v10 + 4))
        {
          uint64_t v12 = (void *)v11[1];
          if (v12)
          {
            do
            {
              unsigned int v11 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              uint64_t v13 = v11;
              unsigned int v11 = (void *)v11[2];
            }
            while ((void *)*v11 != v13);
          }
        }
        else
        {
          if (sub_73610(v10 + 4, v11 + 4))
          {
            uint64_t v14 = v11;
          }
          else
          {
            sub_112CCC((uint64_t ***)&v20, v11 + 4);
            uint64_t v15 = (void *)v11[1];
            if (v15)
            {
              do
              {
                uint64_t v14 = v15;
                uint64_t v15 = (void *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                uint64_t v14 = (void *)v11[2];
                BOOL v16 = *v14 == (void)v11;
                unsigned int v11 = v14;
              }
              while (!v16);
            }
          }
          BOOL v17 = (void *)v10[1];
          if (v17)
          {
            do
            {
              uint64_t v10 = v17;
              BOOL v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              size_t v18 = v10;
              uint64_t v10 = (void *)v10[2];
            }
            while ((void *)*v10 != v18);
          }
          unsigned int v11 = v14;
        }
      }
      while (v11 != a3 && v10 != a5);
    }
  }
  *(void *)a1 = a3;
  *(void *)(a1 + 8) = a5;
  double result = *(double *)&v20;
  *(_OWORD *)(a1 + 16) = v20;
  return result;
}

uint64_t sub_1127EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_112868((uint64_t **)a1, v4, (uint64_t *)(v6 + 16));
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_112854(_Unwind_Exception *a1)
{
  sub_10E118(*v1);
  _Unwind_Resume(a1);
}

void sub_112868(uint64_t **a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = (unint64_t *)operator new(0x30uLL);
  sub_106070(v6 + 4, a3);
  int v7 = sub_1129A4(a1, a2, &v10, &v9, v6 + 4);
  if (*v7)
  {
    uint64_t v8 = (std::__shared_weak_count *)v6[5];
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    operator delete(v6);
  }
  else
  {
    sub_46CA8(a1, v10, (uint64_t **)v7, (uint64_t *)v6);
  }
}

BOOL sub_112910(uint64_t *a1, void *a2)
{
  unsigned int v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      uint64_t v6 = *a1;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  int v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      BOOL v9 = v6 == *a2;
      sub_4636C(v8);
      if (!v5) {
        return v9;
      }
      goto LABEL_11;
    }
  }
  BOOL v9 = v6 == 0;
  if (v5) {
LABEL_11:
  }
    sub_4636C(v5);
  return v9;
}

uint64_t *sub_1129A4(void *a1, void *a2, void *a3, uint64_t *a4, unint64_t *a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_E0404(a5, a2 + 4))
  {
    if (!sub_E0404(a2 + 4, a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      size_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        size_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_E0404(a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  unsigned int v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      unsigned int v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    BOOL v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      BOOL v16 = v12;
    }
    while (v17);
  }
  if (sub_E0404(v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_E0490((uint64_t)a1, a3, a5);
}

double sub_112B3C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  *(void *)&long long v12 = a4;
  *((void *)&v12 + 1) = a5;
  if (a2 != a3)
  {
    do
    {
      sub_112BD4((uint64_t)&v12, v5 + 4);
      uint64_t v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          uint64_t v5 = v9;
        }
        while (!v10);
      }
      uint64_t v5 = v9;
    }
    while (v9 != a3);
    uint64_t v5 = a3;
  }
  *(void *)a1 = v5;
  double result = *(double *)&v12;
  *(_OWORD *)(a1 + 8) = v12;
  return result;
}

uint64_t sub_112BD4(uint64_t a1, unint64_t *a2)
{
  char v3 = sub_112C40(*(uint64_t ***)a1, *(void **)(a1 + 8), a2, (uint64_t *)a2);
  *(void *)(a1 + 8) = v3;
  unsigned int v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      unsigned int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      char v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *sub_112C40(uint64_t **a1, void *a2, unint64_t *a3, uint64_t *a4)
{
  BOOL v6 = sub_1129A4(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v9 = a4[1];
    v7[4] = *a4;
    v7[5] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
    }
    sub_46CA8(a1, v12, v8, v7);
  }
  return v7;
}

uint64_t ***sub_112CCC(uint64_t ***a1, unint64_t *a2)
{
  char v3 = sub_112D38(*a1, a1[1], a2, (uint64_t *)a2);
  a1[1] = (uint64_t **)v3;
  unsigned int v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      uint64_t v5 = v4;
      unsigned int v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      uint64_t v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      char v3 = v5;
    }
    while (!v6);
  }
  a1[1] = (uint64_t **)v5;
  return a1;
}

uint64_t *sub_112D38(uint64_t **a1, uint64_t **a2, unint64_t *a3, uint64_t *a4)
{
  BOOL v6 = (uint64_t *)a2;
  uint64_t v8 = a1 + 1;
  if (a1 + 1 != a2 && !sub_73610(a3, (unint64_t *)a2 + 4))
  {
    if (!sub_73610((unint64_t *)v6 + 4, a3))
    {
      long long v20 = v6;
      std::string::size_type v21 = v6;
      uint64_t v12 = &v20;
      if (v6) {
        return v6;
      }
      goto LABEL_31;
    }
    uint64_t v12 = (uint64_t **)(v6 + 1);
    uint64_t v11 = (uint64_t *)v6[1];
    if (v11)
    {
      uint64_t v13 = (uint64_t *)v6[1];
      do
      {
        uint64_t v14 = (uint64_t **)v13;
        uint64_t v13 = (uint64_t *)*v13;
      }
      while (v13);
    }
    else
    {
      BOOL v17 = v6;
      do
      {
        uint64_t v14 = (uint64_t **)v17[2];
        BOOL v16 = *v14 == v17;
        BOOL v17 = (uint64_t *)v14;
      }
      while (!v16);
    }
    if (v14 != v8)
    {
      if (!sub_73610(a3, (unint64_t *)v14 + 4))
      {
LABEL_29:
        uint64_t v12 = (uint64_t **)sub_112EFC((uint64_t)a1, &v21, a3);
        goto LABEL_30;
      }
      uint64_t v11 = *v12;
    }
    if (v11)
    {
      std::string::size_type v21 = (uint64_t *)v14;
      uint64_t v12 = v14;
    }
    else
    {
      std::string::size_type v21 = v6;
    }
LABEL_30:
    BOOL v6 = *v12;
    if (*v12) {
      return v6;
    }
    goto LABEL_31;
  }
  if (*a1 == v6)
  {
    BOOL v10 = (uint64_t **)v6;
    goto LABEL_16;
  }
  uint64_t v9 = *v6;
  if (*v6)
  {
    do
    {
      BOOL v10 = (uint64_t **)v9;
      uint64_t v9 = *(void *)(v9 + 8);
    }
    while (v9);
  }
  else
  {
    uint64_t v15 = v6;
    do
    {
      BOOL v10 = (uint64_t **)v15[2];
      BOOL v16 = *v10 == v15;
      uint64_t v15 = (uint64_t *)v10;
    }
    while (v16);
  }
  if (!sub_73610((unint64_t *)v10 + 4, a3)) {
    goto LABEL_29;
  }
LABEL_16:
  if (*v6)
  {
    std::string::size_type v21 = (uint64_t *)v10;
    uint64_t v12 = v10 + 1;
    goto LABEL_30;
  }
  std::string::size_type v21 = v6;
  uint64_t v12 = (uint64_t **)v6;
LABEL_31:
  BOOL v6 = (uint64_t *)operator new(0x30uLL);
  uint64_t v18 = a4[1];
  v6[4] = *a4;
  v6[5] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 16), 1uLL, memory_order_relaxed);
  }
  sub_46CA8(a1, (uint64_t)v21, v12, v6);
  return v6;
}

void *sub_112EFC(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unsigned int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!sub_73610(a3, v4 + 4)) {
          break;
        }
        unsigned int v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_73610(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unsigned int v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

unsigned char *sub_112F90(_DWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v41 = a1;
  char v42 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 16))(a1);
  uint64_t v38 = (uint64_t)&v38;
  unint64_t v39 = &v38;
  uint64_t v40 = 0;
  uint64_t v8 = *(void **)(a2 + 8);
  if (v8 == (void *)a2)
  {
    uint64_t v14 = 0;
  }
  else
  {
    do
    {
      uint64_t v9 = (std::__shared_weak_count *)v8[3];
      if (v9)
      {
        BOOL v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          uint64_t v11 = v10;
          unint64_t v12 = v8[2];
          if (v12)
          {
            uint64_t v13 = sub_10B3E8((uint64_t)(a1 + 22), v12);
            sub_4636C(v11);
            if (a1 + 22 != (_DWORD *)v13) {
              sub_3590(&v38, v8[2], v8[3]);
            }
          }
          else
          {
            sub_4636C(v10);
          }
        }
      }
      uint64_t v8 = (void *)v8[1];
    }
    while (v8 != (void *)a2);
    uint64_t v14 = v40;
  }
  if (v14 != *(void *)(a2 + 16))
  {
    uint64_t v15 = (os_log_t *)sub_32A48(9);
    BOOL v16 = *v15;
    if (*v15)
    {
      if (os_log_type_enabled(*v15, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *(_DWORD *)(a2 + 16) - v40;
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        __int16 v44 = 1024;
        int v45 = 1143;
        __int16 v46 = 1024;
        LODWORD(v47) = v17;
        _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Skipping %d ports from input list, as these ports are not available", buf, 0x18u);
      }
    }
  }
  sub_FB720(&v36, &v38);
  int v31 = a4;
  uint64_t v18 = v39;
  if (&v38 != v39)
  {
    do
    {
      sub_43F38(&v34, v18 + 2, "", 1150);
      uint64_t v19 = (void *)v34;
      if ((*(_WORD *)(v34 + 184) & 0x80) != 0)
      {
        uint64_t v20 = v34 + 320;
        *(void *)int buf = v34 + 320;
        uint8_t buf[8] = (*(uint64_t (**)(uint64_t))(*(void *)(v34 + 320) + 16))(v34 + 320);
        uint64_t v21 = v19[36];
        sub_3BCAC(buf);
        if (v21)
        {
          char v32 = v19 + 40;
          LOBYTE(v33[0]) = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v19 + 40);
          sub_FB720((uint64_t *)buf, v19 + 34);
          sub_3BCAC(&v32);
          sub_113594(&v36, (uint64_t *)buf);
          sub_8108((uint64_t *)buf);
        }
      }
      if (v35) {
        sub_4636C(v35);
      }
      uint64_t v18 = (uint64_t *)v18[1];
    }
    while (&v38 != v18);
    for (uint64_t i = v39; &v38 != i; uint64_t i = (uint64_t *)i[1])
    {
      sub_43F38(&v34, i + 2, "", 1160);
      uint64_t v23 = (void *)v34;
      if ((*(_WORD *)(v34 + 184) & 0x100) != 0)
      {
        uint64_t v24 = v34 + 320;
        *(void *)int buf = v34 + 320;
        uint8_t buf[8] = (*(uint64_t (**)(uint64_t))(*(void *)(v34 + 320) + 16))(v34 + 320);
        uint64_t v25 = v23[39];
        sub_3BCAC(buf);
        if (v25)
        {
          char v32 = v23 + 40;
          LOBYTE(v33[0]) = (*(uint64_t (**)(void *))(*(void *)v24 + 16))(v23 + 40);
          sub_FB720((uint64_t *)buf, v23 + 37);
          sub_3BCAC(&v32);
          sub_113594(&v36, (uint64_t *)buf);
          sub_8108((uint64_t *)buf);
        }
      }
      if (v35) {
        sub_4636C(v35);
      }
    }
  }
  for (uint64_t j = v37; &v36 != j; uint64_t j = (uint64_t *)j[1])
  {
    sub_43F38((uint64_t *)&v32, j + 2, "", 1170);
    char v27 = v32;
    if (a1 + 22 == (_DWORD *)sub_10B3E8((uint64_t)(a1 + 22), (unint64_t)v32))
    {
      unsigned int v28 = (os_log_t *)sub_32A48(9);
      uint64_t v29 = *v28;
      if (*v28 && os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = "PortManager.cpp";
        __int16 v44 = 1024;
        int v45 = 1177;
        __int16 v46 = 2048;
        unsigned int v47 = v27;
        _os_log_impl(&def_1E50E8, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Port not available: %p. Skipping ... ", buf, 0x1Cu);
      }
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(*v27 + 472))(v27, a3);
    }
    if (v33[0]) {
      sub_4636C((std::__shared_weak_count *)v33[0]);
    }
  }
  v33[0] = 0;
  v33[1] = 0;
  char v32 = (uint64_t *)v33;
  *(_DWORD *)int buf = 1717793397;
  sub_FB720((uint64_t *)&buf[8], &v36);
  sub_110A6C(&v32, *(unsigned int *)buf, (int *)buf);
  sub_8108((uint64_t *)&buf[8]);
  sub_110B44(a1, &v32, v31);
  sub_FB43C(v33[0]);
  sub_8108(&v36);
  sub_8108(&v38);
  return sub_3BCAC(&v41);
}

void sub_1134D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va1, a14);
  va_start(va, a14);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  sub_8108((uint64_t *)va);
  sub_3BCAC(va1);
  _Unwind_Resume(a1);
}

void sub_113594(void *a1, uint64_t *a2)
{
  if ((uint64_t *)a2[1] == a2) {
    return;
  }
  char v3 = a2;
  do
  {
    uint64_t v5 = *(void *)(*v3 + 16);
    unsigned int v4 = *(std::__shared_weak_count **)(*v3 + 24);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    for (uint64_t i = (void *)a1[1]; i != a1; uint64_t i = (void *)i[1])
    {
      int v7 = (std::__shared_weak_count *)i[3];
      if (v7)
      {
        uint64_t v8 = std::__shared_weak_count::lock(v7);
        uint64_t v9 = v8;
        if (v8)
        {
          uint64_t v10 = i[2];
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v8);
          if (!v4) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v10 = 0;
          if (!v4)
          {
LABEL_16:
            uint64_t v13 = 0;
            unint64_t v12 = 0;
            if (!v9) {
              goto LABEL_22;
            }
            goto LABEL_17;
          }
        }
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v9 = 0;
        if (!v4) {
          goto LABEL_16;
        }
      }
      uint64_t v11 = std::__shared_weak_count::lock(v4);
      unint64_t v12 = v11;
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_4636C(v11);
        uint64_t v13 = v5;
        if (!v9) {
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v13 = 0;
        if (!v9)
        {
LABEL_22:
          uint64_t v10 = 0;
          uint64_t v14 = 0;
          if (!v12) {
            goto LABEL_26;
          }
          goto LABEL_23;
        }
      }
LABEL_17:
      uint64_t v14 = std::__shared_weak_count::lock(v9);
      if (!v14) {
        uint64_t v10 = 0;
      }
      if (!v12)
      {
LABEL_26:
        BOOL v16 = v10 == 0;
        if (!v14) {
          goto LABEL_28;
        }
LABEL_27:
        sub_4636C(v14);
        goto LABEL_28;
      }
LABEL_23:
      uint64_t v15 = std::__shared_weak_count::lock(v12);
      if (!v15) {
        goto LABEL_26;
      }
      BOOL v16 = v10 == v13;
      sub_4636C(v15);
      if (v14) {
        goto LABEL_27;
      }
LABEL_28:
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (v16)
      {
        if (i != a1) {
          goto LABEL_38;
        }
        break;
      }
    }
    uint64_t v17 = operator new(0x20uLL);
    void v17[2] = v5;
    void v17[3] = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (void *)a1[1];
    uint64_t v19 = a1[2];
    *uint64_t v17 = a1;
    v17[1] = v18;
    *uint64_t v18 = v17;
    a1[1] = v17;
    a1[2] = v19 + 1;
LABEL_38:
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    char v3 = (uint64_t *)*v3;
  }
  while ((uint64_t *)a2[1] != v3);
}

void sub_113778(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_113790(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = *(void *)a1 + 16;
  unsigned int v4 = *(void **)(*(void *)a1 + 24);
  if (v4 != (void *)v3)
  {
    while (1)
    {
      sub_43F38(&v10, v4 + 2, "", 187);
      sub_43F38(&v8, v4 + 4, "", 188);
      int v5 = *(_DWORD *)(v10 + 144);
      if (v5 == 1885433443) {
        break;
      }
      if (v5 == 1885433888)
      {
        int v6 = *(_DWORD *)(v8 + 144);
        if (v6 == 1885888867)
        {
          int v7 = 3;
        }
        else
        {
          if (v6 == 1886613611) {
            sub_113910((uint64_t **)a2, 8, (uint64_t)(v4 + 2));
          }
          int v7 = 1;
        }
        goto LABEL_10;
      }
LABEL_11:
      if (v9) {
        sub_4636C(v9);
      }
      if (v11) {
        sub_4636C(v11);
      }
      unsigned int v4 = (void *)v4[1];
      if (v4 == (void *)v3) {
        return;
      }
    }
    int v7 = 2;
LABEL_10:
    sub_113910((uint64_t **)a2, v7, (uint64_t)(v4 + 2));
    goto LABEL_11;
  }
}

void sub_1138D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_4636C(a10);
  }
  if (a12) {
    sub_4636C(a12);
  }
  sub_7F264(*v12);
  _Unwind_Resume(a1);
}

void sub_113910(uint64_t **a1, int a2, uint64_t a3)
{
  int v6 = a1 + 1;
  int v7 = a1[1];
  if (v7)
  {
    uint64_t v8 = a1 + 1;
    uint64_t v9 = a1[1];
    do
    {
      int v10 = *((_DWORD *)v9 + 8);
      BOOL v11 = v10 < a2;
      if (v10 >= a2) {
        unint64_t v12 = (uint64_t **)v9;
      }
      else {
        unint64_t v12 = (uint64_t **)(v9 + 1);
      }
      if (!v11) {
        uint64_t v8 = (uint64_t **)v9;
      }
      uint64_t v9 = *v12;
    }
    while (*v12);
    if (v8 != v6 && *((_DWORD *)v8 + 8) <= a2)
    {
      uint64_t v21 = v8[6];
      unint64_t v20 = (unint64_t)v8[7];
      if ((unint64_t)v21 >= v20)
      {
        uint64_t v23 = v8[5];
        uint64_t v24 = v21 - v23;
        if ((unint64_t)(v24 + 1) >> 61) {
          sub_60548();
        }
        uint64_t v25 = v20 - (void)v23;
        uint64_t v26 = v25 >> 2;
        if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
          uint64_t v26 = v24 + 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27) {
          unint64_t v27 = (unint64_t)sub_106EC(v27);
        }
        else {
          uint64_t v28 = 0;
        }
        uint64_t v29 = (uint64_t *)(v27 + 8 * v24);
        unint64_t v30 = v27 + 8 * v28;
        *uint64_t v29 = a3;
        uint64_t v22 = v29 + 1;
        char v32 = (char *)v8[5];
        int v31 = (char *)v8[6];
        if (v31 != v32)
        {
          do
          {
            uint64_t v33 = *((void *)v31 - 1);
            v31 -= 8;
            *--uint64_t v29 = v33;
          }
          while (v31 != v32);
          int v31 = (char *)v8[5];
        }
        v8[5] = v29;
        v8[6] = v22;
        v8[7] = (uint64_t *)v30;
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        uint64_t *v21 = a3;
        uint64_t v22 = v21 + 1;
      }
      v8[6] = v22;
      return;
    }
    *(void *)&long long v14 = operator new(8uLL);
    *(void *)long long v14 = a3;
    uint64_t v13 = v14 + 8;
    *((void *)&v14 + 1) = v14 + 8;
    long long v34 = v14;
    do
    {
      while (1)
      {
        uint64_t v15 = v7;
        int v16 = *((_DWORD *)v7 + 8);
        if (v16 <= a2) {
          break;
        }
        int v7 = (uint64_t *)*v7;
        if (!*v15)
        {
          int v6 = (uint64_t **)v15;
          goto LABEL_19;
        }
      }
      if (v16 >= a2) {
        goto LABEL_22;
      }
      int v7 = (uint64_t *)v7[1];
    }
    while (v7);
    int v6 = (uint64_t **)(v15 + 1);
  }
  else
  {
    *(void *)&long long v17 = operator new(8uLL);
    *(void *)long long v17 = a3;
    uint64_t v13 = v17 + 8;
    *((void *)&v17 + 1) = v17 + 8;
    long long v34 = v17;
    uint64_t v15 = (uint64_t *)v6;
  }
LABEL_19:
  uint64_t v18 = (char *)operator new(0x40uLL);
  *((_DWORD *)v18 + 8) = a2;
  *(_OWORD *)(v18 + 40) = v34;
  *((void *)v18 + 7) = v13;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = v15;
  *int v6 = (uint64_t *)v18;
  uint64_t v19 = (uint64_t *)**a1;
  if (v19)
  {
    *a1 = v19;
    uint64_t v18 = (char *)*v6;
  }
  sub_46D00(a1[1], (uint64_t *)v18);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  *(void *)&long long v14 = 0;
LABEL_22:
  if ((void)v14)
  {
    operator delete((void *)v14);
  }
}

void sub_113B50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_113B64(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)(*(void *)a2 + 24);
  if ((void *)(*(void *)a2 + 16) == v2) {
    goto LABEL_19;
  }
  char v4 = 0;
  int v5 = 0;
  int v6 = 0;
  do
  {
    sub_43F38((uint64_t *)buf, v2 + 2, "", 150);
    sub_43F38(&v20, v2 + 4, "", 151);
    int v7 = *(_DWORD *)(*(void *)buf + 144);
    if (v7 == 1885433888)
    {
      int v8 = *(_DWORD *)(v20 + 144);
      BOOL v9 = v8 == 1885888867;
      BOOL v10 = v8 != 1885888867;
      int v11 = v9;
      v6 |= v11;
      v4 |= v10;
    }
    else
    {
      v5 |= v7 == 1885433443;
    }
    if (v21) {
      sub_4636C(v21);
    }
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    unsigned int v2 = (void *)v2[1];
  }
  while ((void *)(*(void *)a2 + 16) != v2);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(*(void *)a2 + 32);
    BOOL v13 = v12 == 2;
    BOOL v9 = v12 == 1;
    int v14 = v6 & v13;
    if (v9) {
      int v14 = 1;
    }
    uint64_t v15 = v14 | v5 & v13;
  }
  uint64_t v16 = sub_32A48(19);
  if (*(unsigned char *)(v16 + 8))
  {
    long long v17 = *(NSObject **)v16;
    if (*(void *)v16)
    {
      if (os_log_type_enabled(*(os_log_t *)v16, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v18 = "doesn't handle";
        *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
        *(_DWORD *)int buf = 136315650;
        if (v15) {
          uint64_t v18 = "handles";
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 177;
        __int16 v23 = 2080;
        uint64_t v24 = v18;
        _os_log_impl(&def_1E50E8, v17, OS_LOG_TYPE_DEBUG, "%25s:%-5d RoutingHandler_Playback %s the given route.", buf, 0x1Cu);
      }
    }
  }
  return v15;
}

void sub_113D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_4636C(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_113D84(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 32);
  if (v4 == 2)
  {
    uint64_t v6 = *(void *)(v3 + 16);
    uint64_t v7 = *(void *)(v3 + 24);
    sub_43F38((uint64_t *)buf, (uint64_t *)(v7 + 16), "", 244);
    if (*(_DWORD *)(*(void *)buf + 144) == 1886216809)
    {
      sub_43F38((uint64_t *)&__p, (uint64_t *)(v7 + 32), "", 245);
      BOOL v8 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 144) == 1885433888;
      if (__p.__r_.__value_.__l.__size_) {
        sub_4636C((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
    }
    else
    {
      BOOL v8 = 0;
    }
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (_os_feature_enabled_impl())
    {
      sub_43F38((uint64_t *)buf, (uint64_t *)(v7 + 32), "", 249);
      BOOL v8 = *(_DWORD *)(*(void *)buf + 144) == 1885433888;
      if (*(void *)&buf[8]) {
        sub_4636C(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    sub_43F38((uint64_t *)buf, (uint64_t *)(v6 + 16), "", 251);
    if (sub_25009C(*(_DWORD *)(*(void *)buf + 144)))
    {
      sub_43F38((uint64_t *)&__p, (uint64_t *)(v6 + 32), "", 252);
      BOOL v9 = *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 144) == 1885433888;
      if (__p.__r_.__value_.__l.__size_) {
        sub_4636C((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
    }
    else
    {
      BOOL v9 = 0;
    }
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v5 = v8 & v9;
  }
  else if (v4 == 1)
  {
    sub_43F38((uint64_t *)buf, (uint64_t *)(*(void *)(v3 + 24) + 32), "", 237);
    uint64_t v5 = *(_DWORD *)(*(void *)buf + 144) == 1885433888;
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v10 = sub_32A48(19);
  if (*(unsigned char *)(v10 + 8))
  {
    int v11 = *(NSObject **)v10;
    if (*(void *)v10)
    {
      if (os_log_type_enabled(*(os_log_t *)v10, OS_LOG_TYPE_DEBUG))
      {
        if (v5) {
          uint64_t v12 = "handles";
        }
        else {
          uint64_t v12 = "does not handle";
        }
        sub_3824D4(&__p, *a2 + 16);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 258;
        __int16 v17 = 2080;
        uint64_t v18 = v12;
        __int16 v19 = 2080;
        uint64_t v20 = p_p;
        _os_log_impl(&def_1E50E8, v11, OS_LOG_TYPE_DEBUG, "%25s:%-5d RoutingHandler_Record %s the given route: %s", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  return v5;
}

void sub_114058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_4636C(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_114080(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v4 = *(void *)a1 + 16;
  for (uint64_t i = *(void **)(*(void *)a1 + 24); i != (void *)v4; uint64_t i = (void *)i[1])
  {
    sub_43F38(&v11, i + 2, "", 581);
    int v6 = *(_DWORD *)(v11 + 144);
    if (v12) {
      sub_4636C(v12);
    }
    sub_43F38(&v11, i + 4, "", 582);
    int v7 = *(_DWORD *)(v11 + 144);
    if (v12) {
      sub_4636C(v12);
    }
    if (v6 == 1885433443)
    {
      int v8 = 1;
      int v2 = 2;
      goto LABEL_22;
    }
    if (v6 == 1885433888)
    {
      int v8 = 1;
      if (v7 == 1885888867)
      {
        int v2 = 3;
        goto LABEL_22;
      }
      unsigned int v9 = 1;
      if (v7 == 1886613611)
      {
        sub_113910((uint64_t **)a2, 8, (uint64_t)(i + 2));
        int v2 = 1;
        goto LABEL_22;
      }
    }
    else
    {
      int v8 = 0;
      unsigned int v9 = v2 & 0xFFFFFF00;
    }
    if (v7 == 1885433888)
    {
      unsigned int v9 = 0;
      BOOL v10 = 1;
    }
    else
    {
      BOOL v10 = v6 == 1886613618;
    }
    if (v10) {
      int v8 = 1;
    }
    if (v6 == 1886613618) {
      int v2 = 4;
    }
    else {
      int v2 = v9;
    }
LABEL_22:
    if (sub_25009C(v6))
    {
      int v2 = 9;
LABEL_25:
      sub_113910((uint64_t **)a2, v2, (uint64_t)(i + 2));
      continue;
    }
    if (v8) {
      goto LABEL_25;
    }
  }
}

void sub_114218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

uint64_t sub_114238(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)a2 + 16;
  unint64_t v5 = *(void *)(*(void *)a2 + 32);
  if (v5 == 2)
  {
    int v6 = *(void **)(v3 + 24);
    if ((void *)v4 != v6)
    {
      int v7 = 0;
      int v8 = 0;
      do
      {
        sub_43F38((uint64_t *)buf, v6 + 2, "", 472);
        int v9 = *(_DWORD *)(*(void *)buf + 144);
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v9 == 1885433888) {
          ++v7;
        }
        sub_43F38((uint64_t *)buf, v6 + 4, "", 477);
        int v10 = *(_DWORD *)(*(void *)buf + 144);
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v10 == 1885433888) {
          ++v8;
        }
        int v6 = (void *)v6[1];
      }
      while ((void *)(*(void *)a2 + 16) != v6);
      uint64_t v12 = v7 == 1 && v8 == 1;
      goto LABEL_63;
    }
LABEL_62:
    uint64_t v12 = 0;
    goto LABEL_63;
  }
  if (v5 < 3) {
    goto LABEL_62;
  }
  BOOL v13 = *(void **)(v3 + 24);
  if (v13 == (void *)v4)
  {
    LODWORD(v12) = 0;
    int v22 = 0;
    int v14 = 0;
    goto LABEL_76;
  }
  int v14 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int v15 = 0;
  int v16 = 0;
  do
  {
    sub_43F38((uint64_t *)buf, v13 + 2, "", 503);
    int v17 = *(_DWORD *)(*(void *)buf + 144);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    sub_43F38((uint64_t *)buf, v13 + 4, "", 504);
    int v18 = *(_DWORD *)(*(void *)buf + 144);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v17 > 1886216808)
    {
      switch(v17)
      {
        case 1886216809:
LABEL_35:
          ++v14;
          int v16 = 1;
          int v15 = 1;
          goto LABEL_55;
        case 1886613618:
          ++v14;
          int v16 = 1;
          HIDWORD(v36) = 1;
          goto LABEL_55;
        case 1886614640:
          HIDWORD(v35) = 1;
          goto LABEL_55;
      }
      goto LABEL_42;
    }
    if (v17 == 1885433443)
    {
      HIDWORD(v37) |= v18 == 1885433888;
      goto LABEL_55;
    }
    if (v17 != 1885433888)
    {
      if (v17 == 1885564784) {
        goto LABEL_35;
      }
LABEL_42:
      BOOL v19 = sub_25009C(v17);
      if (v18 == 1885433888) {
        int v20 = v14 + 1;
      }
      else {
        int v20 = v14;
      }
      if (v19) {
        int v16 = 1;
      }
      else {
        v16 |= v18 == 1885433888;
      }
      int v21 = v37;
      if (v19) {
        int v21 = 1;
      }
      LODWORD(v37) = v21;
      if (!v19) {
        int v14 = v20;
      }
      goto LABEL_55;
    }
    switch(v18)
    {
      case 1885888867:
        HIDWORD(v34) = 1;
        break;
      case 1886613611:
        LODWORD(v34) = 1;
        break;
      case 1886545251:
        LODWORD(v35) = 1;
        break;
    }
    LODWORD(v36) = 1;
LABEL_55:
    BOOL v13 = (void *)v13[1];
  }
  while (v13 != (void *)v4);
  if ((v16 & HIDWORD(v34) | HIDWORD(v37) & v15) & v35)
  {
LABEL_85:
    uint64_t v12 = 1;
    goto LABEL_63;
  }
  int v22 = v36;
  if ((HIDWORD(v36) & v34 & v15 & 1) == 0) {
    goto LABEL_84;
  }
  int v23 = a2[3];
  uint64_t v12 = 1;
  if (v23 > 1987077986)
  {
    if (v23 != 1987077987 && v23 != 1987081833)
    {
      int v24 = 1987081839;
      goto LABEL_82;
    }
    goto LABEL_63;
  }
  if (v23 != 1768057203)
  {
    int v24 = 1919776355;
LABEL_82:
    if (v23 != v24)
    {
LABEL_84:
      if (HIDWORD(v35) & v34 & 1) != 0 && ((v16 | v15)) {
        goto LABEL_85;
      }
      LODWORD(v12) = v37;
      if (v37 & v36 & v16)
      {
        int v32 = a2[3];
        uint64_t v12 = 1;
        if (v32 <= 1987077986)
        {
          if (v32 == 1768057203) {
            goto LABEL_63;
          }
          int v33 = 1919776355;
        }
        else
        {
          if (v32 == 1987077987 || v32 == 1987081833) {
            goto LABEL_63;
          }
          int v33 = 1987081839;
        }
        int v22 = 1;
        if (v32 == v33) {
          goto LABEL_63;
        }
      }
LABEL_76:
      int v30 = _os_feature_enabled_impl();
      if (v14 == 1) {
        int v31 = v30;
      }
      else {
        int v31 = 0;
      }
      uint64_t v12 = v31 & v12 & v22;
    }
  }
LABEL_63:
  uint64_t v25 = sub_32A48(19);
  if (*(unsigned char *)(v25 + 8))
  {
    uint64_t v26 = *(NSObject **)v25;
    if (*(void *)v25)
    {
      if (os_log_type_enabled(*(os_log_t *)v25, OS_LOG_TYPE_DEBUG))
      {
        if (v12) {
          unint64_t v27 = "handles";
        }
        else {
          unint64_t v27 = "does not handle";
        }
        sub_3824D4(&__p, *(void *)a2 + 16);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)int buf = 136315906;
        *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 568;
        __int16 v40 = 2080;
        int v41 = v27;
        __int16 v42 = 2080;
        BOOL v43 = p_p;
        _os_log_impl(&def_1E50E8, v26, OS_LOG_TYPE_DEBUG, "%25s:%-5d RoutingHandler_PlaybackAndRecord %s the given route: %s", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  return v12;
}

BOOL sub_114788(uint64_t a1, _DWORD **a2)
{
  if (*a2[14] == 1667396196 && *((void *)*a2 + 4) >= 2uLL)
  {
    uint64_t v3 = (uint64_t *)(*a2 + 6);
    while (1)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = (uint64_t)(*a2 + 4);
      BOOL v6 = v5 == v4;
      if (v5 == v4) {
        break;
      }
      sub_43F38((uint64_t *)v12, (uint64_t *)(v4 + 16), "", 649);
      int v7 = *(_DWORD *)(*(void *)v12 + 144);
      if (*(void *)&v12[8]) {
        sub_4636C(*(std::__shared_weak_count **)&v12[8]);
      }
      uint64_t v3 = (uint64_t *)(v4 + 8);
      if (v7 != 1885433888) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    BOOL v6 = 0;
  }
  uint64_t v8 = sub_32A48(19);
  if (*(unsigned char *)(v8 + 8))
  {
    int v9 = *(NSObject **)v8;
    if (*(void *)v8)
    {
      if (os_log_type_enabled(*(os_log_t *)v8, OS_LOG_TYPE_DEBUG))
      {
        int v10 = "doesn't handle";
        *(void *)&v12[4] = "RoutingHandler.cpp";
        *(_DWORD *)uint64_t v12 = 136315650;
        if (v6) {
          int v10 = "handles";
        }
        *(_WORD *)&v12[12] = 1024;
        *(_DWORD *)&v12[14] = 655;
        __int16 v13 = 2080;
        int v14 = v10;
        _os_log_impl(&def_1E50E8, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d RoutingHandler_Broadcast %s the given route.", v12, 0x1Cu);
      }
    }
  }
  return v6;
}

BOOL sub_114914(uint64_t a1, uint64_t a2)
{
  int v2 = **(_DWORD **)(a2 + 112);
  uint64_t v3 = sub_32A48(19);
  if (*(unsigned char *)(v3 + 8))
  {
    uint64_t v4 = *(NSObject **)v3;
    if (*(void *)v3)
    {
      if (os_log_type_enabled(*(os_log_t *)v3, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = "doesn't handle";
        uint64_t v8 = "RoutingHandler.cpp";
        int v7 = 136315650;
        if (v2 == 1668246894) {
          uint64_t v5 = "handles";
        }
        __int16 v9 = 1024;
        int v10 = 672;
        __int16 v11 = 2080;
        uint64_t v12 = v5;
        _os_log_impl(&def_1E50E8, v4, OS_LOG_TYPE_DEBUG, "%25s:%-5d RoutingHandler_Multi %s the given route.", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  return v2 == 1668246894;
}

void sub_114A1C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = *(void *)a1 + 16;
  for (uint64_t i = *(void **)(*(void *)a1 + 24); i != (void *)v3; uint64_t i = (void *)i[1])
  {
    sub_43F38(&v15, i + 2, "", 767);
    int v5 = *(_DWORD *)(v15 + 144);
    if (v16) {
      sub_4636C(v16);
    }
    sub_43F38(&v15, i + 4, "", 768);
    int v6 = *(_DWORD *)(v15 + 144);
    if (v16) {
      sub_4636C(v16);
    }
    if (v6 == 1885888867) {
      int v7 = 3;
    }
    else {
      int v7 = 6;
    }
    if (v5 != 1885629550) {
      int v7 = 0;
    }
    BOOL v8 = v5 != 1885629550;
    if (v5 == 1886613618)
    {
      int v7 = 4;
      BOOL v8 = 0;
    }
    if (v5 == 1885433888) {
      int v9 = 7;
    }
    else {
      int v9 = 0;
    }
    BOOL v10 = v5 != 1885433888;
    if (v5 == 1885433443)
    {
      int v9 = 2;
      BOOL v10 = 0;
    }
    if (v5 <= 1885629549) {
      int v11 = v9;
    }
    else {
      int v11 = v7;
    }
    if (v5 <= 1885629549) {
      BOOL v12 = v10;
    }
    else {
      BOOL v12 = v8;
    }
    BOOL v13 = sub_25009C(v5);
    if (v6 == 1886743662)
    {
      int v14 = 5;
    }
    else
    {
      if (v13) {
        int v14 = 9;
      }
      else {
        int v14 = v11;
      }
      if (v12 && !v13) {
        continue;
      }
    }
    sub_113910((uint64_t **)a2, v14, (uint64_t)(i + 2));
  }
}

void sub_114BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
}

NSObject *sub_114BD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(*a2 + 32) < 2uLL)
  {
    int v21 = 0;
    goto LABEL_87;
  }
  uint64_t v3 = (void *)(v2 + 16);
  uint64_t v4 = *(void **)(v2 + 24);
  if (v4 == (void *)(v2 + 16))
  {
    int v25 = 0;
    LODWORD(v5) = 0;
    unsigned int v24 = 0;
    unsigned int v23 = 0;
    int v48 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    int v6 = 0;
    int v22 = 0;
    int v7 = 0;
    char v30 = 1;
    goto LABEL_55;
  }
  int v45 = 0;
  uint64_t v5 = 0;
  uint64_t v46 = 0;
  unsigned int v47 = 0;
  int v48 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  int v6 = 0;
  uint64_t v43 = 0;
  int v7 = 0;
  do
  {
    uint64_t v8 = v5;
    sub_43F38((uint64_t *)buf, v4 + 2, "", 707);
    int v9 = *(_DWORD *)(*(void *)buf + 144);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    BOOL v10 = v4 + 4;
    sub_43F38((uint64_t *)buf, v4 + 4, "", 708);
    int v11 = *(_DWORD *)(*(void *)buf + 144);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v9 == 1885433443)
    {
      LODWORD(v46) = v46 + 1;
LABEL_25:
      int v17 = v7;
      goto LABEL_26;
    }
    if (v9 == 1885433888)
    {
      BOOL v12 = v6;
      BOOL v13 = (std::__shared_weak_count *)v4[5];
      if (v13)
      {
        int v14 = std::__shared_weak_count::lock(v13);
        int v6 = v14;
        if (v14)
        {
          uint64_t v42 = *v10;
          atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v14);
        }
        else
        {
          uint64_t v42 = 0;
        }
      }
      else
      {
        uint64_t v42 = 0;
        int v6 = 0;
      }
      ++HIDWORD(v46);
      if (v12) {
        std::__shared_weak_count::__release_weak(v12);
      }
      goto LABEL_25;
    }
    if (v9 != 1885629550) {
      goto LABEL_25;
    }
    ++v45;
    if (v11 == 1885888867)
    {
      uint64_t v5 = (v8 + 1);
      goto LABEL_37;
    }
    uint64_t v15 = (std::__shared_weak_count *)v4[5];
    if (!v15)
    {
      uint64_t v41 = 0;
      int v17 = 0;
      if (!v7) {
        goto LABEL_26;
      }
LABEL_42:
      std::__shared_weak_count::__release_weak(v7);
      goto LABEL_26;
    }
    int v16 = std::__shared_weak_count::lock(v15);
    int v17 = v16;
    if (v16)
    {
      uint64_t v41 = *v10;
      atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_4636C(v16);
      if (!v7) {
        goto LABEL_26;
      }
      goto LABEL_42;
    }
    uint64_t v41 = 0;
    if (v7) {
      goto LABEL_42;
    }
LABEL_26:
    if (v11 == 1886743662)
    {
      int v18 = (std::__shared_weak_count *)v4[3];
      if (v18)
      {
        BOOL v19 = std::__shared_weak_count::lock(v18);
        int v20 = v19;
        if (v19)
        {
          uint64_t v43 = v4[2];
          atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_4636C(v19);
        }
        else
        {
          uint64_t v43 = 0;
        }
      }
      else
      {
        uint64_t v43 = 0;
        int v20 = 0;
      }
      ++v48;
      if (v47) {
        std::__shared_weak_count::__release_weak(v47);
      }
      int v7 = v17;
      unsigned int v47 = v20;
    }
    else
    {
      int v7 = v17;
    }
    uint64_t v5 = v8;
LABEL_37:
    uint64_t v4 = (void *)v4[1];
  }
  while (v4 != v3);
  int v22 = v47;
  if (!v47)
  {
    char v30 = 1;
    unsigned int v24 = v46;
    unsigned int v23 = HIDWORD(v46);
    int v25 = v45;
    goto LABEL_55;
  }
  unsigned int v24 = v46;
  unsigned int v23 = HIDWORD(v46);
  int v25 = v45;
  if (v47->__shared_owners_ == -1)
  {
LABEL_54:
    char v30 = 0;
    goto LABEL_55;
  }
  uint64_t v26 = std::__shared_weak_count::lock(v47);
  unint64_t v27 = v26;
  if (*(_DWORD *)(v43 + 144) != 1885433888 || !v7 || v7->__shared_owners_ == -1)
  {
    sub_4636C(v26);
    goto LABEL_54;
  }
  int v44 = v5;
  uint64_t v28 = std::__shared_weak_count::lock(v7);
  if (v28)
  {
    int v29 = *(_DWORD *)(v41 + 144);
    sub_4636C(v28);
  }
  else
  {
    int v29 = 4766216;
  }
  sub_4636C(v27);
  char v30 = 0;
  int v21 = 0;
  BOOL v36 = v29 == 1885433888;
  LODWORD(v5) = v44;
  if (!v36)
  {
LABEL_55:
    int v21 = 0;
    if (v5 + 1 == v25 && v48 == 1 && v23 <= 1 && v24 <= 1)
    {
      if (!v23) {
        goto LABEL_73;
      }
      if (v6)
      {
        int v31 = std::__shared_weak_count::lock(v6);
        if (v31) {
          uint64_t v32 = v42;
        }
        else {
          uint64_t v32 = 0;
        }
        if (!v7)
        {
LABEL_70:
          BOOL v34 = v32 == 0;
          if (v31) {
            goto LABEL_71;
          }
          goto LABEL_72;
        }
      }
      else
      {
        uint64_t v32 = 0;
        int v31 = 0;
        if (!v7) {
          goto LABEL_70;
        }
      }
      int v33 = std::__shared_weak_count::lock(v7);
      if (!v33) {
        goto LABEL_70;
      }
      BOOL v34 = v32 == v41;
      sub_4636C(v33);
      if (v31) {
LABEL_71:
      }
        sub_4636C(v31);
LABEL_72:
      if (!v34)
      {
        uint64_t v35 = (os_log_t *)sub_32A48(19);
        int v21 = *v35;
        if (*v35)
        {
          if (os_log_type_enabled(*v35, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 753;
            _os_log_impl(&def_1E50E8, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d playback port does not match call output port", buf, 0x12u);
          }
          int v21 = 0;
        }
      }
      else
      {
LABEL_73:
        int v21 = (&def_1E50E8 + 1);
      }
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if ((v30 & 1) == 0) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_87:
  uint64_t v37 = sub_32A48(19);
  if (*(unsigned char *)(v37 + 8))
  {
    uint64_t v38 = *(NSObject **)v37;
    if (*(void *)v37)
    {
      if (os_log_type_enabled(*(os_log_t *)v37, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v39 = "doesn't handle";
        *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
        *(_DWORD *)int buf = 136315650;
        if (v21) {
          unint64_t v39 = "handles";
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 757;
        __int16 v50 = 2080;
        unsigned __int8 v51 = v39;
        _os_log_impl(&def_1E50E8, v38, OS_LOG_TYPE_DEBUG, "%25s:%-5d RoutingHandler_Call %s the given route.", buf, 0x1Cu);
      }
    }
  }
  return v21;
}

void sub_115158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1151A0(uint64_t *result, int a2)
{
  if (result)
  {
    uint64_t v2 = result;
    do
    {
      int v3 = *((_DWORD *)v2 + 8);
      if (v3 <= a2)
      {
        if (v3 >= a2) {
          return (uint64_t *)(*(void *)*sub_1151F8(result, a2) != 0);
        }
        ++v2;
      }
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
    return 0;
  }
  return result;
}

uint64_t *sub_1151F8(uint64_t *a1, int a2)
{
  if (!a1) {
LABEL_8:
  }
    sub_8251C("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v2 = *((_DWORD *)a1 + 8);
      if (v2 <= a2) {
        break;
      }
      a1 = (uint64_t *)*a1;
      if (!a1) {
        goto LABEL_8;
      }
    }
    if (v2 >= a2) {
      return a1 + 5;
    }
    a1 = (uint64_t *)a1[1];
    if (!a1) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_115244(uint64_t a1, int a2)
{
  if (sub_1151A0(*(uint64_t **)(a1 + 8), a2)) {
    return *(void *)*sub_1151F8(*(uint64_t **)(a1 + 8), a2);
  }
  else {
    return 0;
  }
}

os_signpost_id_t *sub_115298(os_signpost_id_t *a1)
{
  uint64_t v2 = sub_32A48(42);
  if (*(unsigned char *)(v2 + 8))
  {
    int v3 = *(NSObject **)v2;
    if (*(void *)v2)
    {
      if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEBUG))
      {
        int v7 = 136315650;
        uint64_t v8 = "SignpostUtilities.h";
        __int16 v9 = 1024;
        int v10 = 94;
        __int16 v11 = 2080;
        BOOL v12 = "kRoutingHandlerActivation";
        _os_log_impl(&def_1E50E8, v3, OS_LOG_TYPE_DEBUG, "%25s:%-5d Ending measurement for signpost %s", (uint8_t *)&v7, 0x1Cu);
      }
    }
  }
  if (*a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_659478, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_659478))
    {
      qword_659470 = (uint64_t)os_log_create("com.apple.coreaudio", "VirtualAudio");
      __cxa_guard_release(&qword_659478);
    }
    os_signpost_id_t v4 = *a1;
    if (*a1 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v5 = qword_659470;
      if (os_signpost_enabled((os_log_t)qword_659470))
      {
        LOWORD(v7) = 0;
        _os_signpost_emit_with_name_impl(&def_1E50E8, v5, OS_SIGNPOST_INTERVAL_END, v4, "VA_RoutingHandlerActivation", "", (uint8_t *)&v7, 2u);
      }
    }
  }
  return a1;
}

void sub_115428(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_564E4(a1);
}

void sub_115434(uint64_t *a1, int a2, unsigned int *a3, unsigned int **a4)
{
  uint64_t v5 = a3;
  int v7 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v8 = *(void *)a3;
  int v9 = a3[3];
  int v10 = MGGetBoolAnswer();
  long long v11 = 0uLL;
  uint64_t v182 = v5;
  if (v10)
  {
    BOOL v12 = (char *)operator new(0x60uLL);
    int v175 = a2;
    int v176 = v9;
    BOOL v13 = (void *)(v8 + 16);
    *(_OWORD *)(v12 + 8) = 0u;
    *(void *)BOOL v12 = off_626DC0;
    *((void *)v12 + 3) = off_626DF8;
    *(_OWORD *)(v12 + 40) = 0u;
    *((void *)v12 + 4) = v12 + 40;
    *((void *)v12 + 8) = 0;
    int v14 = (uint64_t **)(v12 + 64);
    *((void *)v12 + 7) = v12 + 64;
    *(_OWORD *)(v12 + 72) = 0u;
    uint64_t v15 = *(void **)(v8 + 24);
    if (v15 != (void *)(v8 + 16))
    {
      do
      {
        int v16 = (std::__shared_weak_count *)v15[5];
        if (v16)
        {
          int v17 = std::__shared_weak_count::lock(v16);
          if (v17)
          {
            int v18 = v17;
            uint64_t v19 = v15[4];
            if (v19 && (*(_WORD *)(v19 + 184) & 0x11) == 0x10)
            {
              unsigned int v20 = *(_DWORD *)(v19 + 144);
              int v21 = *v14;
              int v22 = (uint64_t **)(v12 + 64);
              unsigned int v23 = (uint64_t **)(v12 + 64);
              if (*v14)
              {
                while (1)
                {
                  while (1)
                  {
                    unsigned int v23 = (uint64_t **)v21;
                    unsigned int v24 = *((_DWORD *)v21 + 8);
                    if (v20 >= v24) {
                      break;
                    }
                    int v21 = *v23;
                    int v22 = v23;
                    if (!*v23) {
                      goto LABEL_14;
                    }
                  }
                  if (v24 >= v20) {
                    break;
                  }
                  int v21 = v23[1];
                  if (!v21)
                  {
                    int v22 = v23 + 1;
                    goto LABEL_14;
                  }
                }
              }
              else
              {
LABEL_14:
                int v25 = operator new(0x30uLL);
                v25[8] = v20;
                *((void *)v25 + 5) = 0;
                sub_46CA8((uint64_t **)v12 + 7, (uint64_t)v23, v22, (uint64_t *)v25);
                unsigned int v23 = (uint64_t **)v25;
              }
              v23[5] = (void *)(&def_1E50E8 + 1);
              uint64_t v5 = v182;
            }
            sub_4636C(v18);
          }
        }
        uint64_t v15 = (void *)v15[1];
      }
      while (v15 != v13);
    }
    unint64_t v27 = *a4;
    uint64_t v26 = a4[1];
    if (*a4 != v26)
    {
      do
      {
        sub_4EE88((uint64_t **)v12 + 4, *v27, v27)[5] = (void *)(&def_1E50E8 + 1);
        ++v27;
      }
      while (v27 != v26);
    }
    int v7 = a1;
    if (v175 == 1952670060) {
      goto LABEL_28;
    }
    if (v176 <= 1987077986)
    {
      if (v176 == 1768057203) {
        goto LABEL_28;
      }
      int v28 = 1919776355;
    }
    else
    {
      if (v176 == 1987077987 || v176 == 1987081839) {
        goto LABEL_28;
      }
      int v28 = 1987081833;
    }
    if (v176 != v28)
    {
LABEL_29:
      sub_1762EC();
      *((void *)v12 + 11) = &qword_64C040;
      *(void *)&long long v11 = v12 + 24;
      *((void *)&v11 + 1) = v12;
      goto LABEL_30;
    }
LABEL_28:
    *((void *)v12 + 10) = 1;
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v178 = (std::__shared_weak_count *)*((void *)&v11 + 1);
  if ((void)v11)
  {
    unint64_t v29 = v7[2];
    char v30 = (_OWORD *)v7[1];
    if ((unint64_t)v30 >= v29)
    {
      long long v179 = v11;
      uint64_t v32 = ((uint64_t)v30 - *v7) >> 4;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v34 = v29 - *v7;
      if (v34 >> 3 > v33) {
        unint64_t v33 = v34 >> 3;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      v188 = v7 + 2;
      BOOL v36 = (char *)sub_10724(v35);
      uint64_t v37 = &v36[16 * v32];
      *(void *)int buf = v36;
      *(void *)&uint8_t buf[8] = v37;
      *(void *)&unsigned char buf[24] = &v36[16 * v38];
      *(_OWORD *)uint64_t v37 = v179;
      if (v178) {
        atomic_fetch_add_explicit(&v178->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)&_DWORD buf[16] = v37 + 16;
      sub_FBB48(v7, buf);
      int v31 = (_OWORD *)v7[1];
      sub_98E24((uint64_t)buf);
    }
    else
    {
      *char v30 = v11;
      if (*((void *)&v11 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v11 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      int v31 = v30 + 1;
      v7[1] = (uint64_t)(v30 + 1);
    }
    v7[1] = (uint64_t)v31;
  }
  uint64_t v39 = *(void *)v5;
  if (qword_64A238 != -1) {
    dispatch_once(&qword_64A238, &stru_61F710);
  }
  if (!byte_64A228 && !byte_64A229)
  {
    long long v181 = 0u;
    goto LABEL_173;
  }
  uint64_t v180 = (void *)qword_660488;
  if (qword_660488)
  {
    v186[1] = (void *)qword_660490;
    if (qword_660490) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_660490 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    sub_3EA704(v186);
    uint64_t v180 = v186[0];
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_64D120, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_64D120))
  {
    sub_207930();
    __cxa_guard_release(&qword_64D120);
  }
  uint64_t v40 = v39 + 16;
  uint64_t v177 = v39;
  uint64_t v41 = *(void **)(v39 + 24);
  if (v41 != (void *)(v39 + 16))
  {
    unint64_t v42 = 0;
    uint64_t v43 = 0;
    int v44 = 0;
    while (1)
    {
      int v45 = (std::__shared_weak_count *)v41[3];
      if (v45)
      {
        uint64_t v46 = std::__shared_weak_count::lock(v45);
        if (v46) {
          break;
        }
      }
LABEL_78:
      unsigned __int8 v57 = (std::__shared_weak_count *)v41[5];
      if (!v57) {
        goto LABEL_100;
      }
      uint64_t v58 = std::__shared_weak_count::lock(v57);
      if (!v58) {
        goto LABEL_100;
      }
      uint64_t v59 = v58;
      uint64_t v60 = v41[4];
      if (v60)
      {
        unsigned int v61 = *(_DWORD *)(v60 + 144);
        if ((unint64_t)v43 >= v42)
        {
          uint64_t v63 = v43 - v44;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62) {
            sub_60548();
          }
          if ((uint64_t)(v42 - (void)v44) >> 1 > v64) {
            unint64_t v64 = (uint64_t)(v42 - (void)v44) >> 1;
          }
          if (v42 - (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v65 = v64;
          }
          if (v65) {
            unint64_t v65 = (unint64_t)sub_46BF4(v65);
          }
          else {
            uint64_t v66 = 0;
          }
          uint64_t v67 = (unsigned int *)(v65 + 4 * v63);
          *uint64_t v67 = v61;
          char v62 = v67 + 1;
          while (v43 != v44)
          {
            unsigned int v68 = *--v43;
            *--uint64_t v67 = v68;
          }
          unint64_t v42 = v65 + 4 * v66;
          if (v44) {
            operator delete(v44);
          }
          int v44 = v67;
          goto LABEL_99;
        }
        *v43++ = v61;
      }
      char v62 = v43;
LABEL_99:
      sub_4636C(v59);
      uint64_t v43 = v62;
LABEL_100:
      uint64_t v41 = (void *)v41[1];
      if (v41 == (void *)v40) {
        goto LABEL_103;
      }
    }
    unsigned int v47 = v46;
    uint64_t v48 = v41[2];
    if (v48)
    {
      unsigned int v49 = *(_DWORD *)(v48 + 144);
      if ((unint64_t)v43 >= v42)
      {
        uint64_t v51 = v43 - v44;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62) {
          sub_60548();
        }
        if ((uint64_t)(v42 - (void)v44) >> 1 > v52) {
          unint64_t v52 = (uint64_t)(v42 - (void)v44) >> 1;
        }
        if (v42 - (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53) {
          unint64_t v53 = (unint64_t)sub_46BF4(v53);
        }
        else {
          uint64_t v54 = 0;
        }
        char v55 = (unsigned int *)(v53 + 4 * v51);
        unsigned int *v55 = v49;
        __int16 v50 = v55 + 1;
        while (v43 != v44)
        {
          unsigned int v56 = *--v43;
          *--char v55 = v56;
        }
        unint64_t v42 = v53 + 4 * v54;
        if (v44) {
          operator delete(v44);
        }
        int v44 = v55;
        goto LABEL_77;
      }
      *v43++ = v49;
    }
    __int16 v50 = v43;
LABEL_77:
    sub_4636C(v47);
    uint64_t v43 = v50;
    goto LABEL_78;
  }
  uint64_t v43 = 0;
  int v44 = 0;
LABEL_103:
  unsigned int v69 = (os_log_t *)sub_32A48(16);
  uint64_t v70 = *v69;
  uint64_t v5 = v182;
  if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_DEFAULT))
  {
    sub_82188(&__dst, v44, v43);
    unsigned int v71 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__dst
        : (std::string *)__dst.__r_.__value_.__r.__words[0];
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "HapticDebugCapturesPolicy.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&_DWORD buf[14] = 55;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v71;
    _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Connection relevant ports ? : %s", buf, 0x1Cu);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
  }
  if (v44 == v43)
  {
    char v76 = 0;
    if (!v43) {
      goto LABEL_126;
    }
    goto LABEL_125;
  }
  int v72 = v44 + 1;
  do
  {
    int v73 = sub_1056F4((uint64_t)&dword_64D0E0, *(v72 - 1));
    if (v73) {
      BOOL v74 = v72 == v43;
    }
    else {
      BOOL v74 = 1;
    }
    ++v72;
  }
  while (!v74);
  if (!v73)
  {
    char v76 = 0;
    uint64_t v43 = v44;
    if (!v44) {
      goto LABEL_126;
    }
LABEL_125:
    operator delete(v43);
    goto LABEL_126;
  }
  AudioObjectID v75 = v44 + 1;
  do
  {
    char v76 = sub_1056F4((uint64_t)&dword_64D100, *(v75 - 1));
    if (v76) {
      break;
    }
    BOOL v74 = v75++ == v43;
  }
  while (!v74);
  uint64_t v43 = v44;
  uint64_t v5 = v182;
  if (v44) {
    goto LABEL_125;
  }
LABEL_126:
  if ((v76 & 1) == 0)
  {
    std::string::size_type v80 = *(NSObject **)sub_32A48(26);
    long long v181 = 0u;
    if (v80 && os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
    {
      sub_1358A8(&__dst, *(void *)(v177 + 24), v40);
      AudioObjectID v81 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__dst
          : (std::string *)__dst.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = "HapticDebugManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 74;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v81;
      _os_log_impl(&def_1E50E8, v80, OS_LOG_TYPE_DEBUG, "%25s:%-5d No relevant connections for haptic debug: %s", buf, 0x1Cu);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_153;
  }
  char v77 = (std::__shared_weak_count *)*((void *)v180 + 3);
  if (!v77)
  {
    uint64_t v78 = 0;
LABEL_141:
    long long v82 = (os_log_t *)sub_32A48(26);
    uint64_t v83 = *v82;
    if (*v82 && os_log_type_enabled(*v82, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "HapticDebugManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 82;
      _os_log_impl(&def_1E50E8, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d Creating Haptic Debug IO Delegate", buf, 0x12u);
    }
    uint64_t v84 = (char *)operator new(0x40uLL);
    *(_OWORD *)(v84 + 8) = 0u;
    *(void *)uint64_t v84 = off_63C918;
    uint64_t v79 = (uint64_t)(v84 + 24);
    *((_DWORD *)v84 + 10) = 0;
    *((void *)v84 + 3) = off_63C950;
    *((void *)v84 + 4) = 0;
    *((_OWORD *)v84 + 3) = 0u;
    if (v78) {
      sub_4636C(v78);
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v84 + 2, 1uLL, memory_order_relaxed);
    uint64_t v85 = (std::__shared_weak_count *)*((void *)v180 + 3);
    *((void *)v180 + 2) = v79;
    *((void *)v180 + 3) = v84;
    if (v85) {
      std::__shared_weak_count::__release_weak(v85);
    }
    uint64_t v78 = (std::__shared_weak_count *)v84;
    goto LABEL_149;
  }
  uint64_t v78 = std::__shared_weak_count::lock(v77);
  if (!v78) {
    goto LABEL_141;
  }
  uint64_t v79 = *((void *)v180 + 2);
  if (!v79) {
    goto LABEL_141;
  }
LABEL_149:
  if (!*(void *)(v79 + 32))
  {
    sub_3EA8C4(&v185, (uint64_t)v180);
    if (v185) {
      operator new();
    }
  }
  if (*(_DWORD *)v180 == 1)
  {
    sub_222FA0(v79);
    sub_2235FC(v79, 1u);
  }
  *(void *)&long long v86 = v79;
  *((void *)&v86 + 1) = v78;
  long long v181 = v86;
LABEL_153:
  if (v186[1]) {
    sub_4636C((std::__shared_weak_count *)v186[1]);
  }
  if ((void)v181)
  {
    unint64_t v87 = a1[2];
    unsigned int v88 = (_OWORD *)a1[1];
    if ((unint64_t)v88 >= v87)
    {
      uint64_t v90 = ((uint64_t)v88 - *a1) >> 4;
      unint64_t v91 = v90 + 1;
      if ((unint64_t)(v90 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v92 = v87 - *a1;
      if (v92 >> 3 > v91) {
        unint64_t v91 = v92 >> 3;
      }
      if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v93 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v93 = v91;
      }
      v188 = a1 + 2;
      uint64_t v94 = (char *)sub_10724(v93);
      std::string v95 = &v94[16 * v90];
      *(void *)int buf = v94;
      *(void *)&uint8_t buf[8] = v95;
      *(void *)&unsigned char buf[24] = &v94[16 * v96];
      *(_OWORD *)std::string v95 = v181;
      if (*((void *)&v181 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v181 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&_DWORD buf[16] = v95 + 16;
      sub_FBB48(a1, buf);
      unsigned int v89 = (_OWORD *)a1[1];
      sub_98E24((uint64_t)buf);
    }
    else
    {
      _OWORD *v88 = v181;
      if (*((void *)&v181 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v181 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      unsigned int v89 = v88 + 1;
      a1[1] = (uint64_t)(v88 + 1);
    }
    a1[1] = (uint64_t)v89;
  }
LABEL_173:
  if (*((void *)&v181 + 1)) {
    sub_4636C(*((std::__shared_weak_count **)&v181 + 1));
  }
  uint64_t v97 = *(void *)v5;
  uint64_t v98 = (void *)sub_F820C();
  *(void *)int buf = CFStringCreateWithCString(0, "Codec", 0x600u);
  uint8_t buf[8] = 1;
  uint64_t v99 = sub_F832C(v98, (CFStringRef *)buf);
  sub_72924((uint64_t)buf);
  __int16 v100 = (void *)sub_F820C();
  *(void *)int buf = CFStringCreateWithCString(0, "HPMic", 0x600u);
  uint8_t buf[8] = 1;
  uint64_t v101 = sub_F832C(v100, (CFStringRef *)buf);
  sub_72924((uint64_t)buf);
  if (!v99)
  {
    if (!v101)
    {
      long long v183 = 0u;
      uint64_t v114 = a1;
      goto LABEL_226;
    }
    uint64_t v107 = *(void *)(v97 + 24);
    if (v107 != v97 + 16)
    {
      while (1)
      {
        sub_43F38((uint64_t *)buf, (uint64_t *)(v107 + 16), "", 975);
        int v108 = *(_DWORD *)(*(void *)buf + 144);
        BOOL v109 = v108 == 1886222185 || v108 == 1886216809 && *(_DWORD *)v97 != 1987276900 || v108 == 1886680169;
        uint64_t v110 = *(void *)(*(void *)buf + 192);
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v110 == v101 && v109) {
          break;
        }
        uint64_t v107 = *(void *)(v107 + 8);
        if (v107 == v97 + 16)
        {
LABEL_204:
          int v112 = 0;
          char v113 = 0;
          uint64_t v114 = a1;
          uint64_t v5 = v182;
          goto LABEL_211;
        }
      }
      char v113 = operator new(0x28uLL);
      uint64_t v5 = v182;
      v113[1] = 0;
      v113[2] = 0;
      void *v113 = off_627C48;
      int v112 = v113 + 3;
      uint64_t v115 = off_627C80;
      uint64_t v99 = v101;
      goto LABEL_209;
    }
LABEL_205:
    int v112 = 0;
    char v113 = 0;
    goto LABEL_210;
  }
  uint64_t v102 = *(void *)(v97 + 24);
  if (v102 == v97 + 16) {
    goto LABEL_205;
  }
  while (1)
  {
    sub_43F38((uint64_t *)buf, (uint64_t *)(v102 + 16), "", 1084);
    int v103 = *(_DWORD *)(*(void *)buf + 144);
    BOOL v104 = v103 == 1886222185 || v103 == 1886216809 && *(_DWORD *)v97 != 1987276900 || v103 == 1886680169;
    uint64_t v105 = *(void *)(*(void *)buf + 192);
    if (*(void *)&buf[8]) {
      sub_4636C(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v105 == v99 && v104) {
      break;
    }
    uint64_t v102 = *(void *)(v102 + 8);
    if (v102 == v97 + 16) {
      goto LABEL_204;
    }
  }
  char v113 = operator new(0x28uLL);
  uint64_t v5 = v182;
  v113[1] = 0;
  v113[2] = 0;
  void *v113 = off_625EE0;
  int v112 = v113 + 3;
  uint64_t v115 = off_625F18;
LABEL_209:
  v113[3] = v115;
  v113[4] = v99;
LABEL_210:
  uint64_t v114 = a1;
LABEL_211:
  *(void *)&long long v116 = v112;
  *((void *)&v116 + 1) = v113;
  long long v183 = v116;
  if (v112)
  {
    unint64_t v117 = v114[2];
    unsigned int v118 = (_OWORD *)v114[1];
    if ((unint64_t)v118 >= v117)
    {
      uint64_t v120 = ((uint64_t)v118 - *v114) >> 4;
      unint64_t v121 = v120 + 1;
      if ((unint64_t)(v120 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v122 = v117 - *v114;
      if (v122 >> 3 > v121) {
        unint64_t v121 = v122 >> 3;
      }
      if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v123 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v123 = v121;
      }
      v188 = v114 + 2;
      char v124 = (char *)sub_10724(v123);
      unsigned int v125 = &v124[16 * v120];
      *(void *)int buf = v124;
      *(void *)&uint8_t buf[8] = v125;
      *(void *)&unsigned char buf[24] = &v124[16 * v126];
      *(_OWORD *)unsigned int v125 = v183;
      if (*((void *)&v183 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v183 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&_DWORD buf[16] = v125 + 16;
      sub_FBB48(v114, buf);
      char v119 = (_OWORD *)v114[1];
      sub_98E24((uint64_t)buf);
    }
    else
    {
      *unsigned int v118 = v116;
      if (v113) {
        atomic_fetch_add_explicit(v113 + 1, 1uLL, memory_order_relaxed);
      }
      char v119 = v118 + 1;
      v114[1] = (uint64_t)(v118 + 1);
    }
    v114[1] = (uint64_t)v119;
  }
LABEL_226:
  if (*((void *)&v183 + 1)) {
    sub_4636C(*((std::__shared_weak_count **)&v183 + 1));
  }
  if (!*(_DWORD *)(*(void *)v5 + 4) && **(_DWORD **)v5 == 1986817911)
  {
    char v127 = (char *)operator new(0x28uLL);
    *((void *)v127 + 1) = 0;
    *((void *)v127 + 2) = 0;
    *(void *)char v127 = off_61F520;
    char v128 = v127 + 24;
    *((void *)v127 + 3) = off_61F4D0;
    if (notify_register_check("com.apple.odeon.lla", (int *)v127 + 8))
    {
      __int16 v172 = (os_log_t *)sub_32A48(13);
      char v173 = *v172;
      if (*v172 && os_log_type_enabled(*v172, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "OdeonIODelegate.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 25;
        _os_log_impl(&def_1E50E8, v173, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Failed to register notification token for low latency device\"", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Failed to register notification token for low latency device");
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v127 + 1, 1uLL, memory_order_relaxed);
    char v129 = v114 + 2;
    unint64_t v130 = v114[2];
    char v131 = (void *)v114[1];
    if ((unint64_t)v131 >= v130)
    {
      uint64_t v133 = *v114;
      uint64_t v134 = ((uint64_t)v131 - *v114) >> 4;
      unint64_t v135 = v134 + 1;
      if ((unint64_t)(v134 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v136 = v130 - v133;
      if (v136 >> 3 > v135) {
        unint64_t v135 = v136 >> 3;
      }
      if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v137 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v137 = v135;
      }
      v188 = v129;
      char v138 = (char *)sub_10724(v137);
      uint64_t v139 = &v138[16 * v134];
      *(void *)int buf = v138;
      *(void *)&uint8_t buf[8] = v139;
      *(void *)&unsigned char buf[24] = &v138[16 * v140];
      *(void *)uint64_t v139 = v128;
      *((void *)v139 + 1) = v127;
      *(void *)&_DWORD buf[16] = v139 + 16;
      uint64_t v114 = a1;
      sub_FBB48(a1, buf);
      char v132 = (void *)a1[1];
      sub_98E24((uint64_t)buf);
    }
    else
    {
      void *v131 = v128;
      v131[1] = v127;
      char v132 = v131 + 2;
      v114[1] = (uint64_t)(v131 + 2);
    }
    v114[1] = (uint64_t)v132;
    sub_4636C((std::__shared_weak_count *)v127);
  }
  uint64_t v141 = *(void *)v5;
  char v142 = operator new(8uLL);
  void *v142 = 0x6C70696E6870696ELL;
  *(void *)int buf = v142;
  *(void *)&uint8_t buf[8] = v142 + 1;
  *(void *)&_DWORD buf[16] = v142 + 1;
  strcpy(&buf[24], "cwdv");
  LOBYTE(v188) = 0;
  int v189 = 3;
  v191[0] = 0;
  v191[1] = 0;
  uint64_t v190 = v191;
  int v192 = 44739242;
  CFTypeRef cf = 0;
  sub_125ECC((unint64_t *)&__dst, v141, (uint64_t)buf);
  if (cf) {
    CFRelease(cf);
  }
  sub_463E0(v191[0]);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  if (__dst.__r_.__value_.__r.__words[2])
  {
    int v143 = (std::__shared_weak_count *)operator new(0x38uLL);
    v143->__shared_owners_ = 0;
    v143->__shared_weak_owners_ = 0;
    v143->__vftable = (std::__shared_weak_count_vtbl *)off_63EB20;
    std::string::size_type v144 = v143 + 1;
    v143[1].__vftable = (std::__shared_weak_count_vtbl *)off_63EAD0;
    sub_3524(&v143[1].__shared_owners_, &__dst);
    sub_8108((uint64_t *)&__dst);
    atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
    char v145 = v114 + 2;
    unint64_t v146 = v114[2];
    char v147 = (std::__shared_weak_count **)v114[1];
    if ((unint64_t)v147 >= v146)
    {
      uint64_t v149 = *v114;
      uint64_t v150 = ((uint64_t)v147 - *v114) >> 4;
      unint64_t v151 = v150 + 1;
      if ((unint64_t)(v150 + 1) >> 60) {
        sub_60548();
      }
      uint64_t v152 = v146 - v149;
      if (v152 >> 3 > v151) {
        unint64_t v151 = v152 >> 3;
      }
      if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v153 = v151;
      }
      v188 = v145;
      int v154 = (char *)sub_10724(v153);
      char v155 = (std::__shared_weak_count **)&v154[16 * v150];
      *(void *)int buf = v154;
      *(void *)&uint8_t buf[8] = v155;
      *(void *)&unsigned char buf[24] = &v154[16 * v156];
      std::string *v155 = v144;
      v155[1] = v143;
      *(void *)&_DWORD buf[16] = v155 + 2;
      uint64_t v114 = a1;
      sub_FBB48(a1, buf);
      char v148 = (void *)a1[1];
      sub_98E24((uint64_t)buf);
    }
    else
    {
      *char v147 = v144;
      v147[1] = v143;
      char v148 = v147 + 2;
      v114[1] = (uint64_t)(v147 + 2);
    }
    v114[1] = (uint64_t)v148;
    sub_4636C(v143);
  }
  else
  {
    sub_8108((uint64_t *)&__dst);
  }
  uint64_t v157 = *(void *)v5 + 16;
  for (uint64_t i = *(void *)(*(void *)v5 + 24); i != v157; uint64_t i = *(void *)(i + 8))
  {
    if (sub_241364(1886545251, (uint64_t *)(i + 16)))
    {
      if (_os_feature_enabled_impl() && (unsigned __int16)sub_6CBEC() >= 0x101u)
      {
        uint64_t v159 = operator new(0x40uLL);
        *(_OWORD *)((char *)v159 + 8) = 0u;
        *(void *)uint64_t v159 = off_63C458;
        v159[2] = 0u;
        *((void *)v159 + 3) = off_63C348;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)off_63C3C0;
        __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v159 + 24;
        p_dst = &__dst;
        sub_13910();
        objc_claimAutoreleasedReturnValue();
        operator new();
      }
      break;
    }
  }
  uint64_t v160 = *(void *)v5;
  uint64_t v161 = v5[3];
  if (_os_feature_enabled_impl())
  {
    if ((unsigned __int16)sub_6CBEC() >= 0x101u)
    {
      uint64_t v162 = v160 + 16;
      for (uint64_t j = *(void *)(v160 + 24); j != v162; uint64_t j = *(void *)(j + 8))
      {
        sub_43F38((uint64_t *)buf, (uint64_t *)(j + 16), "", 55);
        uint64_t v164 = *(void *)buf;
        int v165 = *(_DWORD *)(*(void *)buf + 144);
        BOOL v166 = v161 == 1937007472;
        if (v161 == 1936749157) {
          BOOL v166 = 1;
        }
        int v167 = v161 == 1936745328 || v166;
        BOOL v170 = 0;
        if (*(void *)(*(void *)buf + 96) != *(void *)(*(void *)buf + 104))
        {
          uint64_t v168 = (*(uint64_t (**)(void, uint64_t))(**(void **)buf + 184))(*(void *)buf, v161);
          uint64_t v169 = (v168 & 0xFF00000000) != 0 ? v168 : 0;
          if (sub_1013AC(v164, v169))
          {
            __dst.__r_.__value_.__s.__data_[0] = 0;
            __dst.__r_.__value_.__s.__data_[4] = 0;
            if ((*(unsigned int (**)(uint64_t, uint64_t, std::string *))(*(void *)v164 + 248))(v164, v169, &__dst) == 1937007986)BOOL v170 = 1; {
          }
            }
        }
        if (*(void *)&buf[8]) {
          sub_4636C(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v165 == 1886216809 && ((v167 | v170) & 1) != 0)
        {
          char v171 = (char *)operator new(0x30uLL);
          *(_OWORD *)(v171 + 8) = 0u;
          *(void *)char v171 = off_641450;
          *((void *)v171 + 3) = off_641390;
          *((_OWORD *)v171 + 2) = 0u;
          sub_21C8C(buf, "AudioRecording");
          sub_21C8C(&__dst, "Spatial or stereo capture active");
          sub_5687C((uint64_t)buf, (uint64_t)&__dst);
        }
      }
    }
  }
  if (v178) {
    sub_4636C(v178);
  }
}

void sub_117064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, long long a13, long long a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,std::__shared_weak_count *a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a25) {
    sub_4636C(a25);
  }
  if (a12) {
    sub_4636C(a12);
  }
  a16 = a15;
  sub_638B4((void ***)&a16);
  _Unwind_Resume(a1);
}

void sub_1174AC(uint64_t a1, uint64_t a2, unint64_t a3, os_unfair_lock_s *a4, uint64_t a5, unsigned int **a6)
{
  if (!(*(unsigned int (**)(os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque + 328))(a4))
  {
    int v12 = (*(uint64_t (**)(os_unfair_lock_s *, void))(*(void *)&a4->_os_unfair_lock_opaque + 88))(a4, 0);
    if (v12
       - (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque + 312))(a4) & 0xFF00000000) != 0) >= 2)
    {
      if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a4->_os_unfair_lock_opaque + 88))(a4, 0) > 1)
      {
        sub_43F38(&v23, (uint64_t *)(*(void *)(*(void *)a3 + 24) + 16), "", 316);
        uint64_t v13 = v23;
        *(_DWORD *)int buf = *(_DWORD *)(v23 + 144);
        sub_6367C((uint64_t)v22, (unsigned int *)buf, 1);
        sub_2121A8((uint64_t *)buf, (uint64_t)a4, v13);
        sub_731B8(v28, buf);
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        int v21 = 0;
        int v25 = (void **)&v19;
        char v26 = 0;
        uint64_t v19 = (char *)operator new(0x68uLL);
        uint64_t v20 = (uint64_t)v19;
        int v21 = v19 + 104;
        uint64_t v20 = sub_1198A4((uint64_t)v28, (uint64_t)buf, (uint64_t)v19);
        uint64_t v14 = *(void *)a3;
        sub_115434(v18, *(_DWORD *)(a2 + 8), (unsigned int *)a3, a6);
        uint64_t v24 = 0;
        LOBYTE(v25) = 0;
        char v27 = 0;
        sub_356184((uint64_t)&v19, v14, a3 + 24, (uint64_t)&v25, (uint64_t)v18, a3 + 120, (uint64_t)&v24, (uint64_t)v22, (long long *)(a3 + 176));
      }
      uint64_t v15 = (os_log_t *)sub_32A48(13);
      int v16 = *v15;
      if (*v15)
      {
        if (os_log_type_enabled(*v15, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 136315394;
          char v30 = "RoutingHandler.cpp";
          __int16 v31 = 1024;
          int v32 = 313;
          _os_log_impl(&def_1E50E8, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Precondition failure.");
    }
  }

  sub_117990(a1, a2, a3, a4, a5, a6);
}

void sub_11789C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  __cxa_free_exception(v37);
  _Unwind_Resume(a1);
}

void sub_117990(uint64_t a1, uint64_t a2, unint64_t a3, os_unfair_lock_s *a4, uint64_t a5, unsigned int **a6)
{
  unint64_t v9 = a3;
  long long v11 = (uint64_t *)(*(void *)(*(void *)a3 + 16) + 16);
  sub_43F38((uint64_t *)buf, v11, "", 288);
  int v12 = *(os_unfair_lock_s **)(*(void *)buf + 192);
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (*(void *)(*(void *)v9 + 32) != 2) {
    goto LABEL_28;
  }
  sub_43F38((uint64_t *)buf, v11, "", 291);
  BOOL v13 = sub_25009C(*(_DWORD *)(*(void *)buf + 144));
  if (*(void *)&buf[8]) {
    sub_4636C(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v13)
  {
LABEL_28:
    if (a4)
    {
      sub_43F38((uint64_t *)&v108, (uint64_t *)(*(void *)(*(void *)v9 + 24) + 16), "", 429);
      uint64_t v29 = v108.__r_.__value_.__r.__words[0];
      *(_DWORD *)int buf = *(_DWORD *)(v108.__r_.__value_.__r.__words[0] + 144);
      sub_6367C((uint64_t)__p, (unsigned int *)buf, 1);
      sub_211F5C(buf, (uint64_t)a4, v29, 0, a5);
      uint64_t v30 = *(void *)v9;
      sub_115434((uint64_t *)&v97, *(_DWORD *)(a2 + 8), (unsigned int *)v9, a6);
      v116[0] = 0;
      v116[16] = 0;
      sub_119A18((uint64_t)buf, 1, 0, v30, v9 + 120, v9 + 24, (uint64_t)v116, (uint64_t)&v97, 0, (uint64_t)__p, (long long *)(v9 + 176));
    }
    uint64_t v66 = (os_log_t *)sub_32A48(13);
    uint64_t v67 = *v66;
    if (*v66 && os_log_type_enabled(*v66, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 426;
      _os_log_impl(&def_1E50E8, v67, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Precondition failure.");
  }
  if (v12 != a4)
  {
    uint64_t v14 = (os_log_t *)sub_32A48(19);
    uint64_t v15 = *v14;
    if (*v14 && os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
    {
      sub_4F64((uint64_t)v116, a4 + 2);
      uint64_t v16 = a2;
      int v17 = a6;
      unint64_t v18 = v9;
      int v19 = (char)v116[23];
      uint64_t v20 = *(uint8_t **)v116;
      sub_4F64((uint64_t)__p, v12 + 2);
      int v21 = v116;
      if (v19 < 0) {
        int v21 = v20;
      }
      if ((SBYTE7(v104) & 0x80u) == 0) {
        int v22 = __p;
      }
      else {
        int v22 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136315906;
      *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 338;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v21;
      *(_WORD *)&unsigned char buf[28] = 2080;
      *(void *)&unsigned char buf[30] = v22;
      _os_log_impl(&def_1E50E8, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Input Device: %s, Aux Input Device: %s", buf, 0x26u);
      if (SBYTE7(v104) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v9 = v18;
      a6 = v17;
      if ((char)v116[23] < 0) {
        operator delete(*(void **)v116);
      }
      a2 = v16;
    }
    if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a4->_os_unfair_lock_opaque + 88))(a4, 0) == 1)
    {
      if (v12)
      {
        uint64_t v23 = *(void *)(*(void *)v9 + 16);
        sub_43F38(&v96, (uint64_t *)(*(void *)(*(void *)v9 + 24) + 16), "", 352);
        sub_43F38(v107, (uint64_t *)(v23 + 16), "", 353);
        uint64_t v24 = v107[0];
        int v25 = *(_DWORD *)(v107[0] + 144);
        uint64_t v26 = v96;
        *(_DWORD *)int buf = *(_DWORD *)(v96 + 144);
        *(_DWORD *)&uint8_t buf[4] = v25;
        sub_6367C((uint64_t)v106, (unsigned int *)buf, 2);
        if (*(void *)(*(void *)v9 + 32) == 2 && sub_25009C(v25))
        {
          if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v12->_os_unfair_lock_opaque + 312))(v12) & 0xFF00000000) != 0)
          {
            sub_211F5C(v116, (uint64_t)a4, v26, 0, a5);
            uint64_t v27 = (*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&v12->_os_unfair_lock_opaque + 312))(v12);
            if ((v27 & 0xFF00000000) != 0)
            {
              memset(buf, 0, 24);
              sub_211F5C(__p, (uint64_t)v12, v24, v27, (uint64_t)buf);
              if ((unint64_t)*(unsigned __int8 *)(v9 + 152) << 32)
              {
                sub_731B8(buf, v116);
                sub_731B8(v115, __p);
                memset(&v108, 0, sizeof(v108));
                v97.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
                v97.__r_.__value_.__s.__data_[8] = 0;
                v108.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xD0uLL);
                v108.__r_.__value_.__l.__size_ = v108.__r_.__value_.__r.__words[0];
                v108.__r_.__value_.__r.__words[2] = v108.__r_.__value_.__r.__words[0] + 208;
                v108.__r_.__value_.__l.__size_ = sub_1198A4((uint64_t)buf, (uint64_t)v116, (uint64_t)v108.__r_.__value_.__l.__data_);
                uint64_t v28 = *(void *)v9;
                sub_115434(&v102, *(_DWORD *)(a2 + 8), (unsigned int *)v9, a6);
                std::string::size_type v100 = 0;
                v97.__r_.__value_.__s.__data_[0] = 0;
                v97.__r_.__value_.__s.__data_[16] = 0;
                sub_356184((uint64_t)&v108, v28, v9 + 24, (uint64_t)&v97, (uint64_t)&v102, v9 + 120, (uint64_t)&v100, (uint64_t)v106, (long long *)(v9 + 176));
              }
              sub_115434(&v102, *(_DWORD *)(a2 + 8), (unsigned int *)v9, a6);
              operator new();
            }
            sub_7F218();
          }
          std::string::size_type v80 = (os_log_t *)sub_32A48(13);
          AudioObjectID v81 = *v80;
          if (*v80 && os_log_type_enabled(*v80, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 358;
            _os_log_impl(&def_1E50E8, v81, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
        }
        else
        {
          unsigned int v69 = (os_log_t *)sub_32A48(13);
          uint64_t v70 = *v69;
          if (*v69 && os_log_type_enabled(*v69, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 136315394;
            *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&_DWORD buf[14] = 357;
            _os_log_impl(&def_1E50E8, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
          }
        }
        long long v82 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v82, "Precondition failure.");
      }
      char v77 = (os_log_t *)sub_32A48(13);
      uint64_t v78 = *v77;
      if (*v77 && os_log_type_enabled(*v77, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&_DWORD buf[14] = 348;
        _os_log_impl(&def_1E50E8, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
      }
      uint64_t v79 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v79, "Precondition failure.");
    }
    BOOL v74 = (os_log_t *)sub_32A48(13);
    AudioObjectID v75 = *v74;
    if (*v74 && os_log_type_enabled(*v74, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 341;
      _os_log_impl(&def_1E50E8, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    char v76 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v76, "Precondition failure.");
  }
  if (!a4)
  {
    uint64_t v83 = (os_log_t *)sub_32A48(13);
    uint64_t v84 = *v83;
    if (*v83 && os_log_type_enabled(*v83, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 393;
      _os_log_impl(&def_1E50E8, v84, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    uint64_t v85 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v85, "Precondition failure.");
  }
  if ((*(unsigned int (**)(os_unfair_lock_s *, void))(*(void *)&a4->_os_unfair_lock_opaque + 88))(a4, 0) != 2)
  {
    long long v86 = (os_log_t *)sub_32A48(13);
    unint64_t v87 = *v86;
    if (*v86 && os_log_type_enabled(*v86, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 394;
      _os_log_impl(&def_1E50E8, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    unsigned int v88 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v88, "Precondition failure.");
  }
  uint64_t v31 = *(void *)v9;
  if (*(void *)(*(void *)v9 + 32) != 2)
  {
    unsigned int v89 = (os_log_t *)sub_32A48(13);
    uint64_t v90 = *v89;
    if (*v89 && os_log_type_enabled(*v89, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 395;
      _os_log_impl(&def_1E50E8, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    unint64_t v91 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v91, "Precondition failure.");
  }
  uint64_t v32 = *(void *)(v31 + 16);
  sub_43F38(v107, (uint64_t *)(*(void *)(v31 + 24) + 16), "", 399);
  sub_43F38((uint64_t *)&v100, (uint64_t *)(v32 + 16), "", 400);
  std::string::size_type v33 = v100;
  int v34 = *(_DWORD *)(v100 + 144);
  uint64_t v35 = v107[0];
  *(_DWORD *)int buf = *(_DWORD *)(v107[0] + 144);
  *(_DWORD *)&uint8_t buf[4] = v34;
  sub_6367C((uint64_t)&v102, (unsigned int *)buf, 2);
  if (((*(uint64_t (**)(os_unfair_lock_s *))(*(void *)&a4->_os_unfair_lock_opaque + 312))(a4) & 0xFF00000000) == 0
    || !sub_25009C(v34))
  {
    unsigned int v71 = (os_log_t *)sub_32A48(13);
    int v72 = *v71;
    if (*v71 && os_log_type_enabled(*v71, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "RoutingHandler.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&_DWORD buf[14] = 404;
      _os_log_impl(&def_1E50E8, v72, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION FAILURE (std::logic_error).", buf, 0x12u);
    }
    int v73 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v73, "Precondition failure.");
  }
  sub_11A0CC(v116, v35, v107[1], a5);
  *(_DWORD *)int buf = 0;
  *(void *)&uint8_t buf[8] = *(void *)v116;
  *(void *)&_DWORD buf[16] = *(void *)&v116[8];
  if (*(void *)&v116[8]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v116[8] + 16), 1uLL, memory_order_relaxed);
  }
  std::string v95 = a6;
  *(_OWORD *)&unsigned char buf[24] = *(_OWORD *)&v116[16];
  uint64_t v110 = v117;
  *(void *)&v116[24] = 0;
  uint64_t v117 = 0;
  *(void *)&v116[16] = 0;
  std::string::size_type v36 = v101;
  v97.__r_.__value_.__r.__words[0] = v33;
  v97.__r_.__value_.__l.__size_ = v101;
  uint64_t v92 = (uint64_t)a4;
  uint64_t v93 = a2;
  if (v101)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
    v97.__r_.__value_.__r.__words[2] = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    int v111 = 1;
    std::string::size_type v112 = v33;
    std::string::size_type v113 = v36;
    uint64_t v37 = (std::__shared_weak_count *)v36;
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 16), 1uLL, memory_order_relaxed);
  }
  else
  {
    *(_OWORD *)&v97.__r_.__value_.__r.__words[1] = 0uLL;
    uint64_t v37 = 0;
    uint64_t v98 = 0;
    uint64_t v99 = 0;
    int v111 = 1;
    std::string::size_type v112 = v33;
    std::string::size_type v113 = 0;
  }
  uint64_t v94 = (unsigned int *)v9;
  uint64_t v38 = 0;
  memset(v114, 0, 24);
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  v97.__r_.__value_.__r.__words[2] = 0;
  float v105 = 1.0;
  *(_OWORD *)std::string __p = 0u;
  long long v104 = 0u;
  while (1)
  {
    unint64_t v39 = *(unsigned int *)&buf[48 * v38];
    unint64_t v40 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v41.i16[0] = vaddlv_u8(v41);
      if (v41.u32[0] > 1uLL)
      {
        unint64_t v9 = *(unsigned int *)&buf[48 * v38];
        if (__p[1] <= (void *)v39) {
          unint64_t v9 = v39 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v9 = (LODWORD(__p[1]) - 1) & v39;
      }
      unint64_t v42 = (uint64_t **)*((void *)__p[0] + v9);
      if (v42)
      {
        for (uint64_t i = *v42; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v44 = i[1];
          if (v44 == v39)
          {
            if (*((_DWORD *)i + 4) == v39) {
              goto LABEL_82;
            }
          }
          else
          {
            if (v41.u32[0] > 1uLL)
            {
              if ((void *)v44 >= __p[1]) {
                v44 %= (unint64_t)__p[1];
              }
            }
            else
            {
              v44 &= (unint64_t)__p[1] - 1;
            }
            if (v44 != v9) {
              break;
            }
          }
        }
      }
    }
    int v45 = operator new(0x40uLL);
    uint64_t v46 = v45;
    v108.__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
    v108.__r_.__value_.__l.__size_ = (std::string::size_type)&v104;
    v108.__r_.__value_.__s.__data_[16] = 0;
    *int v45 = 0;
    v45[1] = v39;
    *((_DWORD *)v45 + 4) = v39;
    unsigned int v47 = &buf[48 * v38];
    uint64_t v49 = *((void *)v47 + 1);
    uint64_t v48 = *((void *)v47 + 2);
    v45[3] = v49;
    v45[4] = v48;
    if (v48) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 16), 1uLL, memory_order_relaxed);
    }
    v45[5] = 0;
    v45[6] = 0;
    v45[7] = 0;
    sub_46B38(v45 + 5, *(const void **)&buf[48 * v38 + 24], *(void *)&buf[48 * v38 + 32], (uint64_t)(*(void *)&buf[48 * v38 + 32] - *(void *)&buf[48 * v38 + 24]) >> 2);
    v108.__r_.__value_.__s.__data_[16] = 1;
    float v50 = (float)(unint64_t)(*((void *)&v104 + 1) + 1);
    if (!v40 || (float)(v105 * (float)v40) < v50)
    {
      BOOL v51 = (v40 & (v40 - 1)) != 0;
      if (v40 < 3) {
        BOOL v51 = 1;
      }
      unint64_t v52 = v51 | (2 * v40);
      unint64_t v53 = vcvtps_u32_f32(v50 / v105);
      if (v52 <= v53) {
        size_t v54 = v53;
      }
      else {
        size_t v54 = v52;
      }
      sub_6DEC4((uint64_t)__p, v54);
      unint64_t v40 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
      {
        if (__p[1] <= (void *)v39) {
          unint64_t v9 = v39 % (unint64_t)__p[1];
        }
        else {
          unint64_t v9 = v39;
        }
      }
      else
      {
        unint64_t v9 = (LODWORD(__p[1]) - 1) & v39;
      }
    }
    char v55 = __p[0];
    unsigned int v56 = (void *)*((void *)__p[0] + v9);
    if (v56) {
      break;
    }
    void *v46 = v104;
    *(void *)&long long v104 = v46;
    v55[v9] = &v104;
    if (*v46)
    {
      unint64_t v57 = *(void *)(*v46 + 8);
      if ((v40 & (v40 - 1)) != 0)
      {
        if (v57 >= v40) {
          v57 %= v40;
        }
      }
      else
      {
        v57 &= v40 - 1;
      }
      unsigned int v56 = (char *)__p[0] + 8 * v57;
      goto LABEL_80;
    }
LABEL_81:
    v108.__r_.__value_.__r.__words[0] = 0;
    ++*((void *)&v104 + 1);
    sub_11A490((uint64_t)&v108);
LABEL_82:
    if (++v38 == 2)
    {
      uint64_t v58 = 0;
      uint64_t v59 = v37;
      while (1)
      {
        uint64_t v60 = &buf[v58 * 8];
        unsigned int v61 = (void *)v114[v58];
        if (v61)
        {
          *((void *)v60 + 10) = v61;
          operator delete(v61);
        }
        char v62 = (std::__shared_weak_count *)*((void *)v60 + 8);
        if (v62) {
          std::__shared_weak_count::__release_weak(v62);
        }
        v58 -= 6;
        if (v58 == -12)
        {
          if (v59) {
            sub_4636C(v59);
          }
          if (*(void *)&v116[16])
          {
            *(void *)&v116[24] = *(void *)&v116[16];
            operator delete(*(void **)&v116[16]);
          }
          if (*(void *)&v116[8]) {
            sub_4636C(*(std::__shared_weak_count **)&v116[8]);
          }
          memset(v116, 0, sizeof(v116));
          LODWORD(v117) = 1065353216;
          sub_212608((uint64_t *)buf, v92, (uint64_t)__p, (uint64_t)v116);
          sub_11A138((uint64_t)v116);
          uint64_t v63 = (os_log_t *)sub_32A48(19);
          unint64_t v64 = *v63;
          if (*v63 && os_log_type_enabled(*v63, OS_LOG_TYPE_DEBUG))
          {
            sub_21340C(&v97, (uint64_t)buf);
            unint64_t v65 = (v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v97
                : (std::string *)v97.__r_.__value_.__r.__words[0];
            *(_DWORD *)long long v116 = 136315650;
            *(void *)&v116[4] = "RoutingHandler.cpp";
            *(_WORD *)&v116[12] = 1024;
            *(_DWORD *)&v116[14] = 413;
            *(_WORD *)&v116[18] = 2080;
            *(void *)&v116[20] = v65;
            _os_log_impl(&def_1E50E8, v64, OS_LOG_TYPE_DEBUG, "%25s:%-5d Device description for creating aggregate with auxiliary input: %s", v116, 0x1Cu);
            if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v97.__r_.__value_.__l.__data_);
            }
          }
          sub_115434(&v96, *(_DWORD *)(v93 + 8), v94, v95);
          operator new();
        }
      }
    }
  }
  void *v46 = *v56;
LABEL_80:
  void *v56 = v46;
  goto LABEL_81;
}

void sub_119474(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  __cxa_free_exception(v62);
  operator delete();
}

uint64_t sub_1198A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_731B8((void *)(a3 + v6), (void *)(a1 + v6));
      v6 += 104;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_119938(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        sub_72FE0(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1199BC(uint64_t a1)
{
  sub_73038(*(void **)(a1 + 88));
  sub_73038(*(void **)(a1 + 64));
  int v3 = (void **)(a1 + 32);
  sub_7308C(&v3);
  int v3 = (void **)(a1 + 8);
  sub_7308C(&v3);
  return a1;
}

void sub_119A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long *a11)
{
  sub_CAE80(&__dst, a11);
  *(void *)int buf = *(void *)(a5 + 4);
  sub_329CBC((uint64_t)&__p, (uint64_t *)buf);
  operator new();
}